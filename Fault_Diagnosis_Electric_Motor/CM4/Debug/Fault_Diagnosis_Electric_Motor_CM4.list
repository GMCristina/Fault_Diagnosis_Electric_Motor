
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006968  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08106c08  08106c08  00016c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08106df8  08106df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08106e00  08106e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08106e04  08106e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  08106e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  10000074  08106e7c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000028c  08106e7c  0002028c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f574  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003211  00000000  00000000  0003f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e10  00000000  00000000  00042830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d28  00000000  00000000  00043640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bebe  00000000  00000000  00044368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012be9  00000000  00000000  00080226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001854a2  00000000  00000000  00092e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002182b1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000041b4  00000000  00000000  00218304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106bf0 	.word	0x08106bf0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	08106bf0 	.word	0x08106bf0

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b96e 	b.w	8100674 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9d08      	ldr	r5, [sp, #32]
 81003b6:	4604      	mov	r4, r0
 81003b8:	468c      	mov	ip, r1
 81003ba:	2b00      	cmp	r3, #0
 81003bc:	f040 8083 	bne.w	81004c6 <__udivmoddi4+0x116>
 81003c0:	428a      	cmp	r2, r1
 81003c2:	4617      	mov	r7, r2
 81003c4:	d947      	bls.n	8100456 <__udivmoddi4+0xa6>
 81003c6:	fab2 f282 	clz	r2, r2
 81003ca:	b142      	cbz	r2, 81003de <__udivmoddi4+0x2e>
 81003cc:	f1c2 0020 	rsb	r0, r2, #32
 81003d0:	fa24 f000 	lsr.w	r0, r4, r0
 81003d4:	4091      	lsls	r1, r2
 81003d6:	4097      	lsls	r7, r2
 81003d8:	ea40 0c01 	orr.w	ip, r0, r1
 81003dc:	4094      	lsls	r4, r2
 81003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 81003e2:	0c23      	lsrs	r3, r4, #16
 81003e4:	fbbc f6f8 	udiv	r6, ip, r8
 81003e8:	fa1f fe87 	uxth.w	lr, r7
 81003ec:	fb08 c116 	mls	r1, r8, r6, ip
 81003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81003f4:	fb06 f10e 	mul.w	r1, r6, lr
 81003f8:	4299      	cmp	r1, r3
 81003fa:	d909      	bls.n	8100410 <__udivmoddi4+0x60>
 81003fc:	18fb      	adds	r3, r7, r3
 81003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8100402:	f080 8119 	bcs.w	8100638 <__udivmoddi4+0x288>
 8100406:	4299      	cmp	r1, r3
 8100408:	f240 8116 	bls.w	8100638 <__udivmoddi4+0x288>
 810040c:	3e02      	subs	r6, #2
 810040e:	443b      	add	r3, r7
 8100410:	1a5b      	subs	r3, r3, r1
 8100412:	b2a4      	uxth	r4, r4
 8100414:	fbb3 f0f8 	udiv	r0, r3, r8
 8100418:	fb08 3310 	mls	r3, r8, r0, r3
 810041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100420:	fb00 fe0e 	mul.w	lr, r0, lr
 8100424:	45a6      	cmp	lr, r4
 8100426:	d909      	bls.n	810043c <__udivmoddi4+0x8c>
 8100428:	193c      	adds	r4, r7, r4
 810042a:	f100 33ff 	add.w	r3, r0, #4294967295
 810042e:	f080 8105 	bcs.w	810063c <__udivmoddi4+0x28c>
 8100432:	45a6      	cmp	lr, r4
 8100434:	f240 8102 	bls.w	810063c <__udivmoddi4+0x28c>
 8100438:	3802      	subs	r0, #2
 810043a:	443c      	add	r4, r7
 810043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100440:	eba4 040e 	sub.w	r4, r4, lr
 8100444:	2600      	movs	r6, #0
 8100446:	b11d      	cbz	r5, 8100450 <__udivmoddi4+0xa0>
 8100448:	40d4      	lsrs	r4, r2
 810044a:	2300      	movs	r3, #0
 810044c:	e9c5 4300 	strd	r4, r3, [r5]
 8100450:	4631      	mov	r1, r6
 8100452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100456:	b902      	cbnz	r2, 810045a <__udivmoddi4+0xaa>
 8100458:	deff      	udf	#255	; 0xff
 810045a:	fab2 f282 	clz	r2, r2
 810045e:	2a00      	cmp	r2, #0
 8100460:	d150      	bne.n	8100504 <__udivmoddi4+0x154>
 8100462:	1bcb      	subs	r3, r1, r7
 8100464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100468:	fa1f f887 	uxth.w	r8, r7
 810046c:	2601      	movs	r6, #1
 810046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8100472:	0c21      	lsrs	r1, r4, #16
 8100474:	fb0e 331c 	mls	r3, lr, ip, r3
 8100478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810047c:	fb08 f30c 	mul.w	r3, r8, ip
 8100480:	428b      	cmp	r3, r1
 8100482:	d907      	bls.n	8100494 <__udivmoddi4+0xe4>
 8100484:	1879      	adds	r1, r7, r1
 8100486:	f10c 30ff 	add.w	r0, ip, #4294967295
 810048a:	d202      	bcs.n	8100492 <__udivmoddi4+0xe2>
 810048c:	428b      	cmp	r3, r1
 810048e:	f200 80e9 	bhi.w	8100664 <__udivmoddi4+0x2b4>
 8100492:	4684      	mov	ip, r0
 8100494:	1ac9      	subs	r1, r1, r3
 8100496:	b2a3      	uxth	r3, r4
 8100498:	fbb1 f0fe 	udiv	r0, r1, lr
 810049c:	fb0e 1110 	mls	r1, lr, r0, r1
 81004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81004a4:	fb08 f800 	mul.w	r8, r8, r0
 81004a8:	45a0      	cmp	r8, r4
 81004aa:	d907      	bls.n	81004bc <__udivmoddi4+0x10c>
 81004ac:	193c      	adds	r4, r7, r4
 81004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 81004b2:	d202      	bcs.n	81004ba <__udivmoddi4+0x10a>
 81004b4:	45a0      	cmp	r8, r4
 81004b6:	f200 80d9 	bhi.w	810066c <__udivmoddi4+0x2bc>
 81004ba:	4618      	mov	r0, r3
 81004bc:	eba4 0408 	sub.w	r4, r4, r8
 81004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 81004c4:	e7bf      	b.n	8100446 <__udivmoddi4+0x96>
 81004c6:	428b      	cmp	r3, r1
 81004c8:	d909      	bls.n	81004de <__udivmoddi4+0x12e>
 81004ca:	2d00      	cmp	r5, #0
 81004cc:	f000 80b1 	beq.w	8100632 <__udivmoddi4+0x282>
 81004d0:	2600      	movs	r6, #0
 81004d2:	e9c5 0100 	strd	r0, r1, [r5]
 81004d6:	4630      	mov	r0, r6
 81004d8:	4631      	mov	r1, r6
 81004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81004de:	fab3 f683 	clz	r6, r3
 81004e2:	2e00      	cmp	r6, #0
 81004e4:	d14a      	bne.n	810057c <__udivmoddi4+0x1cc>
 81004e6:	428b      	cmp	r3, r1
 81004e8:	d302      	bcc.n	81004f0 <__udivmoddi4+0x140>
 81004ea:	4282      	cmp	r2, r0
 81004ec:	f200 80b8 	bhi.w	8100660 <__udivmoddi4+0x2b0>
 81004f0:	1a84      	subs	r4, r0, r2
 81004f2:	eb61 0103 	sbc.w	r1, r1, r3
 81004f6:	2001      	movs	r0, #1
 81004f8:	468c      	mov	ip, r1
 81004fa:	2d00      	cmp	r5, #0
 81004fc:	d0a8      	beq.n	8100450 <__udivmoddi4+0xa0>
 81004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8100502:	e7a5      	b.n	8100450 <__udivmoddi4+0xa0>
 8100504:	f1c2 0320 	rsb	r3, r2, #32
 8100508:	fa20 f603 	lsr.w	r6, r0, r3
 810050c:	4097      	lsls	r7, r2
 810050e:	fa01 f002 	lsl.w	r0, r1, r2
 8100512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100516:	40d9      	lsrs	r1, r3
 8100518:	4330      	orrs	r0, r6
 810051a:	0c03      	lsrs	r3, r0, #16
 810051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8100520:	fa1f f887 	uxth.w	r8, r7
 8100524:	fb0e 1116 	mls	r1, lr, r6, r1
 8100528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810052c:	fb06 f108 	mul.w	r1, r6, r8
 8100530:	4299      	cmp	r1, r3
 8100532:	fa04 f402 	lsl.w	r4, r4, r2
 8100536:	d909      	bls.n	810054c <__udivmoddi4+0x19c>
 8100538:	18fb      	adds	r3, r7, r3
 810053a:	f106 3cff 	add.w	ip, r6, #4294967295
 810053e:	f080 808d 	bcs.w	810065c <__udivmoddi4+0x2ac>
 8100542:	4299      	cmp	r1, r3
 8100544:	f240 808a 	bls.w	810065c <__udivmoddi4+0x2ac>
 8100548:	3e02      	subs	r6, #2
 810054a:	443b      	add	r3, r7
 810054c:	1a5b      	subs	r3, r3, r1
 810054e:	b281      	uxth	r1, r0
 8100550:	fbb3 f0fe 	udiv	r0, r3, lr
 8100554:	fb0e 3310 	mls	r3, lr, r0, r3
 8100558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810055c:	fb00 f308 	mul.w	r3, r0, r8
 8100560:	428b      	cmp	r3, r1
 8100562:	d907      	bls.n	8100574 <__udivmoddi4+0x1c4>
 8100564:	1879      	adds	r1, r7, r1
 8100566:	f100 3cff 	add.w	ip, r0, #4294967295
 810056a:	d273      	bcs.n	8100654 <__udivmoddi4+0x2a4>
 810056c:	428b      	cmp	r3, r1
 810056e:	d971      	bls.n	8100654 <__udivmoddi4+0x2a4>
 8100570:	3802      	subs	r0, #2
 8100572:	4439      	add	r1, r7
 8100574:	1acb      	subs	r3, r1, r3
 8100576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 810057a:	e778      	b.n	810046e <__udivmoddi4+0xbe>
 810057c:	f1c6 0c20 	rsb	ip, r6, #32
 8100580:	fa03 f406 	lsl.w	r4, r3, r6
 8100584:	fa22 f30c 	lsr.w	r3, r2, ip
 8100588:	431c      	orrs	r4, r3
 810058a:	fa20 f70c 	lsr.w	r7, r0, ip
 810058e:	fa01 f306 	lsl.w	r3, r1, r6
 8100592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100596:	fa21 f10c 	lsr.w	r1, r1, ip
 810059a:	431f      	orrs	r7, r3
 810059c:	0c3b      	lsrs	r3, r7, #16
 810059e:	fbb1 f9fe 	udiv	r9, r1, lr
 81005a2:	fa1f f884 	uxth.w	r8, r4
 81005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 81005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 81005ae:	fb09 fa08 	mul.w	sl, r9, r8
 81005b2:	458a      	cmp	sl, r1
 81005b4:	fa02 f206 	lsl.w	r2, r2, r6
 81005b8:	fa00 f306 	lsl.w	r3, r0, r6
 81005bc:	d908      	bls.n	81005d0 <__udivmoddi4+0x220>
 81005be:	1861      	adds	r1, r4, r1
 81005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 81005c4:	d248      	bcs.n	8100658 <__udivmoddi4+0x2a8>
 81005c6:	458a      	cmp	sl, r1
 81005c8:	d946      	bls.n	8100658 <__udivmoddi4+0x2a8>
 81005ca:	f1a9 0902 	sub.w	r9, r9, #2
 81005ce:	4421      	add	r1, r4
 81005d0:	eba1 010a 	sub.w	r1, r1, sl
 81005d4:	b2bf      	uxth	r7, r7
 81005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 81005da:	fb0e 1110 	mls	r1, lr, r0, r1
 81005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 81005e2:	fb00 f808 	mul.w	r8, r0, r8
 81005e6:	45b8      	cmp	r8, r7
 81005e8:	d907      	bls.n	81005fa <__udivmoddi4+0x24a>
 81005ea:	19e7      	adds	r7, r4, r7
 81005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 81005f0:	d22e      	bcs.n	8100650 <__udivmoddi4+0x2a0>
 81005f2:	45b8      	cmp	r8, r7
 81005f4:	d92c      	bls.n	8100650 <__udivmoddi4+0x2a0>
 81005f6:	3802      	subs	r0, #2
 81005f8:	4427      	add	r7, r4
 81005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81005fe:	eba7 0708 	sub.w	r7, r7, r8
 8100602:	fba0 8902 	umull	r8, r9, r0, r2
 8100606:	454f      	cmp	r7, r9
 8100608:	46c6      	mov	lr, r8
 810060a:	4649      	mov	r1, r9
 810060c:	d31a      	bcc.n	8100644 <__udivmoddi4+0x294>
 810060e:	d017      	beq.n	8100640 <__udivmoddi4+0x290>
 8100610:	b15d      	cbz	r5, 810062a <__udivmoddi4+0x27a>
 8100612:	ebb3 020e 	subs.w	r2, r3, lr
 8100616:	eb67 0701 	sbc.w	r7, r7, r1
 810061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 810061e:	40f2      	lsrs	r2, r6
 8100620:	ea4c 0202 	orr.w	r2, ip, r2
 8100624:	40f7      	lsrs	r7, r6
 8100626:	e9c5 2700 	strd	r2, r7, [r5]
 810062a:	2600      	movs	r6, #0
 810062c:	4631      	mov	r1, r6
 810062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100632:	462e      	mov	r6, r5
 8100634:	4628      	mov	r0, r5
 8100636:	e70b      	b.n	8100450 <__udivmoddi4+0xa0>
 8100638:	4606      	mov	r6, r0
 810063a:	e6e9      	b.n	8100410 <__udivmoddi4+0x60>
 810063c:	4618      	mov	r0, r3
 810063e:	e6fd      	b.n	810043c <__udivmoddi4+0x8c>
 8100640:	4543      	cmp	r3, r8
 8100642:	d2e5      	bcs.n	8100610 <__udivmoddi4+0x260>
 8100644:	ebb8 0e02 	subs.w	lr, r8, r2
 8100648:	eb69 0104 	sbc.w	r1, r9, r4
 810064c:	3801      	subs	r0, #1
 810064e:	e7df      	b.n	8100610 <__udivmoddi4+0x260>
 8100650:	4608      	mov	r0, r1
 8100652:	e7d2      	b.n	81005fa <__udivmoddi4+0x24a>
 8100654:	4660      	mov	r0, ip
 8100656:	e78d      	b.n	8100574 <__udivmoddi4+0x1c4>
 8100658:	4681      	mov	r9, r0
 810065a:	e7b9      	b.n	81005d0 <__udivmoddi4+0x220>
 810065c:	4666      	mov	r6, ip
 810065e:	e775      	b.n	810054c <__udivmoddi4+0x19c>
 8100660:	4630      	mov	r0, r6
 8100662:	e74a      	b.n	81004fa <__udivmoddi4+0x14a>
 8100664:	f1ac 0c02 	sub.w	ip, ip, #2
 8100668:	4439      	add	r1, r7
 810066a:	e713      	b.n	8100494 <__udivmoddi4+0xe4>
 810066c:	3802      	subs	r0, #2
 810066e:	443c      	add	r4, r7
 8100670:	e724      	b.n	81004bc <__udivmoddi4+0x10c>
 8100672:	bf00      	nop

08100674 <__aeabi_idiv0>:
 8100674:	4770      	bx	lr
 8100676:	bf00      	nop

08100678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100678:	b480      	push	{r7}
 810067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810067c:	4b0b      	ldr	r3, [pc, #44]	; (81006ac <SystemInit+0x34>)
 810067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100682:	4a0a      	ldr	r2, [pc, #40]	; (81006ac <SystemInit+0x34>)
 8100684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810068c:	4b07      	ldr	r3, [pc, #28]	; (81006ac <SystemInit+0x34>)
 810068e:	691b      	ldr	r3, [r3, #16]
 8100690:	4a06      	ldr	r2, [pc, #24]	; (81006ac <SystemInit+0x34>)
 8100692:	f043 0310 	orr.w	r3, r3, #16
 8100696:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100698:	4b04      	ldr	r3, [pc, #16]	; (81006ac <SystemInit+0x34>)
 810069a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810069e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006a0:	bf00      	nop
 81006a2:	46bd      	mov	sp, r7
 81006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a8:	4770      	bx	lr
 81006aa:	bf00      	nop
 81006ac:	e000ed00 	.word	0xe000ed00

081006b0 <ADE9000_Setup>:
#include "main.h"

int8_t flag_read = 0;
int32_t n_int = 0;

void ADE9000_Setup(){
 81006b0:	b580      	push	{r7, lr}
 81006b2:	b082      	sub	sp, #8
 81006b4:	af00      	add	r7, sp, #0
	uint32_t value_reg_32;
	uint16_t value_reg_16;

	// ADDR_PGA_GAIN
	value_reg_16 = 0x0000; //gain all channel 1
 81006b6:	2300      	movs	r3, #0
 81006b8:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_PGA_GAIN,value_reg_16);
 81006ba:	88fb      	ldrh	r3, [r7, #6]
 81006bc:	4619      	mov	r1, r3
 81006be:	f240 40b9 	movw	r0, #1209	; 0x4b9
 81006c2:	f000 f8e1 	bl	8100888 <ADE9000_SPI_Write_16>

	//CONFIG2
	value_reg_16 = 	0x0C00;			//Default High pass corner frequency of 1.25Hz
 81006c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81006ca:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG2,value_reg_16);
 81006cc:	88fb      	ldrh	r3, [r7, #6]
 81006ce:	4619      	mov	r1, r3
 81006d0:	f240 40af 	movw	r0, #1199	; 0x4af
 81006d4:	f000 f8d8 	bl	8100888 <ADE9000_SPI_Write_16>

	//ACCMODE
	value_reg_16= 0x0000;			//3P4W Wye configuration
 81006d8:	2300      	movs	r3, #0
 81006da:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_ACCMODE,value_reg_16);
 81006dc:	88fb      	ldrh	r3, [r7, #6]
 81006de:	4619      	mov	r1, r3
 81006e0:	f240 4092 	movw	r0, #1170	; 0x492
 81006e4:	f000 f8d0 	bl	8100888 <ADE9000_SPI_Write_16>
	//value_reg_16 = 0x1020;//IN, sinc4, stop full, fixed rate, stop, tutti canali(0000)
	//value_reg_16 = 0x0029; //no IN, sinc4, stop full, fixed rate, stop, solo VA (1001)
	//value_reg_16 = 0x0021; //no IN, sinc4, stop full, fixed rate, stop, solo Ia e VA (0001)
	//value_reg_16 = 0x0221; //no IN, LPF, stop full, fixed rate, stop, solo Ia e VA (0001)

	value_reg_16 = 0x0000;
 81006e8:	2300      	movs	r3, #0
 81006ea:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_IN_EN<<12);
	value_reg_16 = value_reg_16 | (WF_SRC<<8);
	value_reg_16 = value_reg_16 | (WF_MODE<<6);
 81006ec:	88fb      	ldrh	r3, [r7, #6]
 81006ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81006f2:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_CAP_SEL<<5);
 81006f4:	88fb      	ldrh	r3, [r7, #6]
 81006f6:	f043 0320 	orr.w	r3, r3, #32
 81006fa:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | BURST_CHAN;
 81006fc:	88fb      	ldrh	r3, [r7, #6]
 81006fe:	f043 0301 	orr.w	r3, r3, #1
 8100702:	80fb      	strh	r3, [r7, #6]

	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8100704:	88fb      	ldrh	r3, [r7, #6]
 8100706:	4619      	mov	r1, r3
 8100708:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810070c:	f000 f8bc 	bl	8100888 <ADE9000_SPI_Write_16>
	// 1 bit per pagina: pag15-pag0
	//fa PageFULL in STATUS0

	//value_reg_16 = 0x8000; //page 15
	//value_reg_16 = 0xFFFF; //all page
	value_reg_16 = 0x8080; //page 15, page 7 (metà)
 8100710:	f248 0380 	movw	r3, #32896	; 0x8080
 8100714:	80fb      	strh	r3, [r7, #6]
	//value_reg_16 = 0x0000; //no int
	ADE9000_SPI_Write_16(ADDR_WFB_PG_IRQEN,value_reg_16);
 8100716:	88fb      	ldrh	r3, [r7, #6]
 8100718:	4619      	mov	r1, r3
 810071a:	f240 40a1 	movw	r0, #1185	; 0x4a1
 810071e:	f000 f8b3 	bl	8100888 <ADE9000_SPI_Write_16>

	//ADDR_MASK0
	//IRQ0 per full page (bit 17)
	//quando una delle pagine settate è piena
	value_reg_32 = 0x00020000;
 8100722:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8100726:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK0,value_reg_32);
 8100728:	6839      	ldr	r1, [r7, #0]
 810072a:	f240 4005 	movw	r0, #1029	; 0x405
 810072e:	f000 f8df 	bl	81008f0 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK0);
 8100732:	f240 4005 	movw	r0, #1029	; 0x405
 8100736:	f000 f86b 	bl	8100810 <ADE9000_SPI_Read_32>
 810073a:	6038      	str	r0, [r7, #0]

	//ADDR_MASK1
	//disable all int
	value_reg_32 = 0x00000000;
 810073c:	2300      	movs	r3, #0
 810073e:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK1,value_reg_32);
 8100740:	6839      	ldr	r1, [r7, #0]
 8100742:	f240 4006 	movw	r0, #1030	; 0x406
 8100746:	f000 f8d3 	bl	81008f0 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK1);
 810074a:	f240 4006 	movw	r0, #1030	; 0x406
 810074e:	f000 f85f 	bl	8100810 <ADE9000_SPI_Read_32>
 8100752:	6038      	str	r0, [r7, #0]

	//ADDR_RUN
	//Start ADE9000 measurement
	value_reg_16 = 0x0001;
 8100754:	2301      	movs	r3, #1
 8100756:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16);
 8100758:	88fb      	ldrh	r3, [r7, #6]
 810075a:	4619      	mov	r1, r3
 810075c:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8100760:	f000 f892 	bl	8100888 <ADE9000_SPI_Write_16>
}
 8100764:	bf00      	nop
 8100766:	3708      	adds	r7, #8
 8100768:	46bd      	mov	sp, r7
 810076a:	bd80      	pop	{r7, pc}

0810076c <ADE9000_Power>:

//power-on sequence
void ADE9000_Power(void){
 810076c:	b580      	push	{r7, lr}
 810076e:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8100770:	2200      	movs	r2, #0
 8100772:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8100776:	480c      	ldr	r0, [pc, #48]	; (81007a8 <ADE9000_Power+0x3c>)
 8100778:	f001 fa80 	bl	8101c7c <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 810077c:	2200      	movs	r2, #0
 810077e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8100782:	4809      	ldr	r0, [pc, #36]	; (81007a8 <ADE9000_Power+0x3c>)
 8100784:	f001 fa7a 	bl	8101c7c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8100788:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810078c:	f000 ff7e 	bl	810168c <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8100790:	2201      	movs	r2, #1
 8100792:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8100796:	4804      	ldr	r0, [pc, #16]	; (81007a8 <ADE9000_Power+0x3c>)
 8100798:	f001 fa70 	bl	8101c7c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 810079c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81007a0:	f000 ff74 	bl	810168c <HAL_Delay>
    } while ((value_reg_32 & 0x00010000)==0);
    //Clear IRQ1
    value_reg_32 = value_reg_32 & 0x00010000;
    ADE9000_SPI_Write_32(ADDR_STATUS1,value_reg_32);
    */
}
 81007a4:	bf00      	nop
 81007a6:	bd80      	pop	{r7, pc}
 81007a8:	58021000 	.word	0x58021000

081007ac <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 81007ac:	b580      	push	{r7, lr}
 81007ae:	b084      	sub	sp, #16
 81007b0:	af00      	add	r7, sp, #0
 81007b2:	4603      	mov	r3, r0
 81007b4:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81007b6:	88fb      	ldrh	r3, [r7, #6]
 81007b8:	011b      	lsls	r3, r3, #4
 81007ba:	b29b      	uxth	r3, r3
 81007bc:	3308      	adds	r3, #8
 81007be:	b29b      	uxth	r3, r3
 81007c0:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81007c2:	2200      	movs	r2, #0
 81007c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 81007c8:	480f      	ldr	r0, [pc, #60]	; (8100808 <ADE9000_SPI_Read_16+0x5c>)
 81007ca:	f001 fa57 	bl	8101c7c <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81007ce:	f107 0108 	add.w	r1, r7, #8
 81007d2:	2364      	movs	r3, #100	; 0x64
 81007d4:	2201      	movs	r2, #1
 81007d6:	480d      	ldr	r0, [pc, #52]	; (810080c <ADE9000_SPI_Read_16+0x60>)
 81007d8:	f003 f95e 	bl	8103a98 <HAL_SPI_Transmit>
 81007dc:	4603      	mov	r3, r0
 81007de:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 81007e0:	f107 010c 	add.w	r1, r7, #12
 81007e4:	2364      	movs	r3, #100	; 0x64
 81007e6:	2201      	movs	r2, #1
 81007e8:	4808      	ldr	r0, [pc, #32]	; (810080c <ADE9000_SPI_Read_16+0x60>)
 81007ea:	f003 fb43 	bl	8103e74 <HAL_SPI_Receive>
 81007ee:	4603      	mov	r3, r0
 81007f0:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81007f2:	2201      	movs	r2, #1
 81007f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 81007f8:	4803      	ldr	r0, [pc, #12]	; (8100808 <ADE9000_SPI_Read_16+0x5c>)
 81007fa:	f001 fa3f 	bl	8101c7c <HAL_GPIO_WritePin>

	return data.data_16;
 81007fe:	89bb      	ldrh	r3, [r7, #12]
}
 8100800:	4618      	mov	r0, r3
 8100802:	3710      	adds	r7, #16
 8100804:	46bd      	mov	sp, r7
 8100806:	bd80      	pop	{r7, pc}
 8100808:	58021800 	.word	0x58021800
 810080c:	10000134 	.word	0x10000134

08100810 <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 8100810:	b580      	push	{r7, lr}
 8100812:	b086      	sub	sp, #24
 8100814:	af00      	add	r7, sp, #0
 8100816:	4603      	mov	r3, r0
 8100818:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810081a:	88fb      	ldrh	r3, [r7, #6]
 810081c:	011b      	lsls	r3, r3, #4
 810081e:	b29b      	uxth	r3, r3
 8100820:	3308      	adds	r3, #8
 8100822:	b29b      	uxth	r3, r3
 8100824:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8100826:	2200      	movs	r2, #0
 8100828:	f44f 7100 	mov.w	r1, #512	; 0x200
 810082c:	4814      	ldr	r0, [pc, #80]	; (8100880 <ADE9000_SPI_Read_32+0x70>)
 810082e:	f001 fa25 	bl	8101c7c <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100832:	f107 010c 	add.w	r1, r7, #12
 8100836:	2364      	movs	r3, #100	; 0x64
 8100838:	2201      	movs	r2, #1
 810083a:	4812      	ldr	r0, [pc, #72]	; (8100884 <ADE9000_SPI_Read_32+0x74>)
 810083c:	f003 f92c 	bl	8103a98 <HAL_SPI_Transmit>
 8100840:	4603      	mov	r3, r0
 8100842:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi3,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100844:	f107 0110 	add.w	r1, r7, #16
 8100848:	3102      	adds	r1, #2
 810084a:	2364      	movs	r3, #100	; 0x64
 810084c:	2201      	movs	r2, #1
 810084e:	480d      	ldr	r0, [pc, #52]	; (8100884 <ADE9000_SPI_Read_32+0x74>)
 8100850:	f003 fb10 	bl	8103e74 <HAL_SPI_Receive>
 8100854:	4603      	mov	r3, r0
 8100856:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 8100858:	f107 0110 	add.w	r1, r7, #16
 810085c:	2364      	movs	r3, #100	; 0x64
 810085e:	2201      	movs	r2, #1
 8100860:	4808      	ldr	r0, [pc, #32]	; (8100884 <ADE9000_SPI_Read_32+0x74>)
 8100862:	f003 fb07 	bl	8103e74 <HAL_SPI_Receive>
 8100866:	4603      	mov	r3, r0
 8100868:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 810086a:	2201      	movs	r2, #1
 810086c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100870:	4803      	ldr	r0, [pc, #12]	; (8100880 <ADE9000_SPI_Read_32+0x70>)
 8100872:	f001 fa03 	bl	8101c7c <HAL_GPIO_WritePin>

	return data.data_32;
 8100876:	693b      	ldr	r3, [r7, #16]
}
 8100878:	4618      	mov	r0, r3
 810087a:	3718      	adds	r7, #24
 810087c:	46bd      	mov	sp, r7
 810087e:	bd80      	pop	{r7, pc}
 8100880:	58021800 	.word	0x58021800
 8100884:	10000134 	.word	0x10000134

08100888 <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 8100888:	b580      	push	{r7, lr}
 810088a:	b084      	sub	sp, #16
 810088c:	af00      	add	r7, sp, #0
 810088e:	4603      	mov	r3, r0
 8100890:	460a      	mov	r2, r1
 8100892:	80fb      	strh	r3, [r7, #6]
 8100894:	4613      	mov	r3, r2
 8100896:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8100898:	88fb      	ldrh	r3, [r7, #6]
 810089a:	011b      	lsls	r3, r3, #4
 810089c:	b29b      	uxth	r3, r3
 810089e:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81008a0:	2200      	movs	r2, #0
 81008a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 81008a6:	4810      	ldr	r0, [pc, #64]	; (81008e8 <ADE9000_SPI_Write_16+0x60>)
 81008a8:	f001 f9e8 	bl	8101c7c <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81008ac:	f107 010c 	add.w	r1, r7, #12
 81008b0:	2364      	movs	r3, #100	; 0x64
 81008b2:	2201      	movs	r2, #1
 81008b4:	480d      	ldr	r0, [pc, #52]	; (81008ec <ADE9000_SPI_Write_16+0x64>)
 81008b6:	f003 f8ef 	bl	8103a98 <HAL_SPI_Transmit>
 81008ba:	4603      	mov	r3, r0
 81008bc:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 81008be:	88bb      	ldrh	r3, [r7, #4]
 81008c0:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 81008c2:	f107 0108 	add.w	r1, r7, #8
 81008c6:	2364      	movs	r3, #100	; 0x64
 81008c8:	2201      	movs	r2, #1
 81008ca:	4808      	ldr	r0, [pc, #32]	; (81008ec <ADE9000_SPI_Write_16+0x64>)
 81008cc:	f003 f8e4 	bl	8103a98 <HAL_SPI_Transmit>
 81008d0:	4603      	mov	r3, r0
 81008d2:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81008d4:	2201      	movs	r2, #1
 81008d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 81008da:	4803      	ldr	r0, [pc, #12]	; (81008e8 <ADE9000_SPI_Write_16+0x60>)
 81008dc:	f001 f9ce 	bl	8101c7c <HAL_GPIO_WritePin>

}
 81008e0:	bf00      	nop
 81008e2:	3710      	adds	r7, #16
 81008e4:	46bd      	mov	sp, r7
 81008e6:	bd80      	pop	{r7, pc}
 81008e8:	58021800 	.word	0x58021800
 81008ec:	10000134 	.word	0x10000134

081008f0 <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 81008f0:	b580      	push	{r7, lr}
 81008f2:	b084      	sub	sp, #16
 81008f4:	af00      	add	r7, sp, #0
 81008f6:	4603      	mov	r3, r0
 81008f8:	6039      	str	r1, [r7, #0]
 81008fa:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 81008fc:	88fb      	ldrh	r3, [r7, #6]
 81008fe:	011b      	lsls	r3, r3, #4
 8100900:	b29b      	uxth	r3, r3
 8100902:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8100904:	2200      	movs	r2, #0
 8100906:	f44f 7100 	mov.w	r1, #512	; 0x200
 810090a:	4815      	ldr	r0, [pc, #84]	; (8100960 <ADE9000_SPI_Write_32+0x70>)
 810090c:	f001 f9b6 	bl	8101c7c <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100910:	f107 010c 	add.w	r1, r7, #12
 8100914:	2364      	movs	r3, #100	; 0x64
 8100916:	2201      	movs	r2, #1
 8100918:	4812      	ldr	r0, [pc, #72]	; (8100964 <ADE9000_SPI_Write_32+0x74>)
 810091a:	f003 f8bd 	bl	8103a98 <HAL_SPI_Transmit>
 810091e:	4603      	mov	r3, r0
 8100920:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 8100922:	683b      	ldr	r3, [r7, #0]
 8100924:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 8100926:	f107 0108 	add.w	r1, r7, #8
 810092a:	3102      	adds	r1, #2
 810092c:	2364      	movs	r3, #100	; 0x64
 810092e:	2201      	movs	r2, #1
 8100930:	480c      	ldr	r0, [pc, #48]	; (8100964 <ADE9000_SPI_Write_32+0x74>)
 8100932:	f003 f8b1 	bl	8103a98 <HAL_SPI_Transmit>
 8100936:	4603      	mov	r3, r0
 8100938:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 810093a:	f107 0108 	add.w	r1, r7, #8
 810093e:	2364      	movs	r3, #100	; 0x64
 8100940:	2201      	movs	r2, #1
 8100942:	4808      	ldr	r0, [pc, #32]	; (8100964 <ADE9000_SPI_Write_32+0x74>)
 8100944:	f003 f8a8 	bl	8103a98 <HAL_SPI_Transmit>
 8100948:	4603      	mov	r3, r0
 810094a:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 810094c:	2201      	movs	r2, #1
 810094e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100952:	4803      	ldr	r0, [pc, #12]	; (8100960 <ADE9000_SPI_Write_32+0x70>)
 8100954:	f001 f992 	bl	8101c7c <HAL_GPIO_WritePin>

}
 8100958:	bf00      	nop
 810095a:	3710      	adds	r7, #16
 810095c:	46bd      	mov	sp, r7
 810095e:	bd80      	pop	{r7, pc}
 8100960:	58021800 	.word	0x58021800
 8100964:	10000134 	.word	0x10000134

08100968 <Start_Waveform_Buffer>:


void Start_Waveform_Buffer() {
 8100968:	b580      	push	{r7, lr}
 810096a:	b082      	sub	sp, #8
 810096c:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 810096e:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8100972:	f7ff ff1b 	bl	81007ac <ADE9000_SPI_Read_16>
 8100976:	4603      	mov	r3, r0
 8100978:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16|0x0010);
 810097a:	88fb      	ldrh	r3, [r7, #6]
 810097c:	f043 0310 	orr.w	r3, r3, #16
 8100980:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8100982:	88fb      	ldrh	r3, [r7, #6]
 8100984:	4619      	mov	r1, r3
 8100986:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810098a:	f7ff ff7d 	bl	8100888 <ADE9000_SPI_Write_16>
}
 810098e:	bf00      	nop
 8100990:	3708      	adds	r7, #8
 8100992:	46bd      	mov	sp, r7
 8100994:	bd80      	pop	{r7, pc}

08100996 <Stop_Waveform_Buffer>:

void Stop_Waveform_Buffer(){
 8100996:	b580      	push	{r7, lr}
 8100998:	b082      	sub	sp, #8
 810099a:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 810099c:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81009a0:	f7ff ff04 	bl	81007ac <ADE9000_SPI_Read_16>
 81009a4:	4603      	mov	r3, r0
 81009a6:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16 & 0xFFEF);
 81009a8:	88fb      	ldrh	r3, [r7, #6]
 81009aa:	f023 0310 	bic.w	r3, r3, #16
 81009ae:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 81009b0:	88fb      	ldrh	r3, [r7, #6]
 81009b2:	4619      	mov	r1, r3
 81009b4:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81009b8:	f7ff ff66 	bl	8100888 <ADE9000_SPI_Write_16>
}
 81009bc:	bf00      	nop
 81009be:	3708      	adds	r7, #8
 81009c0:	46bd      	mov	sp, r7
 81009c2:	bd80      	pop	{r7, pc}

081009c4 <ADE9000_SPI_Burst_Read_two_ch>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_SPI_Burst_Read_two_ch(uint16_t Address, uint16_t n, int32_t* i, int32_t* v){
 81009c4:	b580      	push	{r7, lr}
 81009c6:	b088      	sub	sp, #32
 81009c8:	af00      	add	r7, sp, #0
 81009ca:	60ba      	str	r2, [r7, #8]
 81009cc:	607b      	str	r3, [r7, #4]
 81009ce:	4603      	mov	r3, r0
 81009d0:	81fb      	strh	r3, [r7, #14]
 81009d2:	460b      	mov	r3, r1
 81009d4:	81bb      	strh	r3, [r7, #12]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81009d6:	89fb      	ldrh	r3, [r7, #14]
 81009d8:	011b      	lsls	r3, r3, #4
 81009da:	b29b      	uxth	r3, r3
 81009dc:	3308      	adds	r3, #8
 81009de:	b29b      	uxth	r3, r3
 81009e0:	82bb      	strh	r3, [r7, #20]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81009e2:	2200      	movs	r2, #0
 81009e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 81009e8:	4829      	ldr	r0, [pc, #164]	; (8100a90 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 81009ea:	f001 f947 	bl	8101c7c <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81009ee:	f107 0114 	add.w	r1, r7, #20
 81009f2:	2364      	movs	r3, #100	; 0x64
 81009f4:	2201      	movs	r2, #1
 81009f6:	4827      	ldr	r0, [pc, #156]	; (8100a94 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81009f8:	f003 f84e 	bl	8103a98 <HAL_SPI_Transmit>
 81009fc:	4603      	mov	r3, r0
 81009fe:	777b      	strb	r3, [r7, #29]

	for(uint16_t j=0; j<n; j++){
 8100a00:	2300      	movs	r3, #0
 8100a02:	83fb      	strh	r3, [r7, #30]
 8100a04:	e036      	b.n	8100a74 <ADE9000_SPI_Burst_Read_two_ch+0xb0>
		//Receive data

		//NB: CONTROLLARE ORDINE (REGISTRI è I,V)
		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100a06:	f107 0118 	add.w	r1, r7, #24
 8100a0a:	3102      	adds	r1, #2
 8100a0c:	2364      	movs	r3, #100	; 0x64
 8100a0e:	2201      	movs	r2, #1
 8100a10:	4820      	ldr	r0, [pc, #128]	; (8100a94 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a12:	f003 fa2f 	bl	8103e74 <HAL_SPI_Receive>
 8100a16:	4603      	mov	r3, r0
 8100a18:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100a1a:	f107 0118 	add.w	r1, r7, #24
 8100a1e:	2364      	movs	r3, #100	; 0x64
 8100a20:	2201      	movs	r2, #1
 8100a22:	481c      	ldr	r0, [pc, #112]	; (8100a94 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a24:	f003 fa26 	bl	8103e74 <HAL_SPI_Receive>
 8100a28:	4603      	mov	r3, r0
 8100a2a:	777b      	strb	r3, [r7, #29]
		*(i + j)= app.data_32;
 8100a2c:	69b9      	ldr	r1, [r7, #24]
 8100a2e:	8bfb      	ldrh	r3, [r7, #30]
 8100a30:	009b      	lsls	r3, r3, #2
 8100a32:	68ba      	ldr	r2, [r7, #8]
 8100a34:	4413      	add	r3, r2
 8100a36:	460a      	mov	r2, r1
 8100a38:	601a      	str	r2, [r3, #0]

		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100a3a:	f107 0118 	add.w	r1, r7, #24
 8100a3e:	3102      	adds	r1, #2
 8100a40:	2364      	movs	r3, #100	; 0x64
 8100a42:	2201      	movs	r2, #1
 8100a44:	4813      	ldr	r0, [pc, #76]	; (8100a94 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a46:	f003 fa15 	bl	8103e74 <HAL_SPI_Receive>
 8100a4a:	4603      	mov	r3, r0
 8100a4c:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100a4e:	f107 0118 	add.w	r1, r7, #24
 8100a52:	2364      	movs	r3, #100	; 0x64
 8100a54:	2201      	movs	r2, #1
 8100a56:	480f      	ldr	r0, [pc, #60]	; (8100a94 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a58:	f003 fa0c 	bl	8103e74 <HAL_SPI_Receive>
 8100a5c:	4603      	mov	r3, r0
 8100a5e:	777b      	strb	r3, [r7, #29]
		*(v + j)= app.data_32;
 8100a60:	69b9      	ldr	r1, [r7, #24]
 8100a62:	8bfb      	ldrh	r3, [r7, #30]
 8100a64:	009b      	lsls	r3, r3, #2
 8100a66:	687a      	ldr	r2, [r7, #4]
 8100a68:	4413      	add	r3, r2
 8100a6a:	460a      	mov	r2, r1
 8100a6c:	601a      	str	r2, [r3, #0]
	for(uint16_t j=0; j<n; j++){
 8100a6e:	8bfb      	ldrh	r3, [r7, #30]
 8100a70:	3301      	adds	r3, #1
 8100a72:	83fb      	strh	r3, [r7, #30]
 8100a74:	8bfa      	ldrh	r2, [r7, #30]
 8100a76:	89bb      	ldrh	r3, [r7, #12]
 8100a78:	429a      	cmp	r2, r3
 8100a7a:	d3c4      	bcc.n	8100a06 <ADE9000_SPI_Burst_Read_two_ch+0x42>
	}

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100a7c:	2201      	movs	r2, #1
 8100a7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100a82:	4803      	ldr	r0, [pc, #12]	; (8100a90 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 8100a84:	f001 f8fa 	bl	8101c7c <HAL_GPIO_WritePin>
}
 8100a88:	bf00      	nop
 8100a8a:	3720      	adds	r7, #32
 8100a8c:	46bd      	mov	sp, r7
 8100a8e:	bd80      	pop	{r7, pc}
 8100a90:	58021800 	.word	0x58021800
 8100a94:	10000134 	.word	0x10000134

08100a98 <ADE9000_Conv_ADC>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_Conv_ADC(int32_t* data, uint32_t n){
 8100a98:	b580      	push	{r7, lr}
 8100a9a:	b086      	sub	sp, #24
 8100a9c:	af00      	add	r7, sp, #0
 8100a9e:	6078      	str	r0, [r7, #4]
 8100aa0:	6039      	str	r1, [r7, #0]
	printf("conv\r\n");
 8100aa2:	4821      	ldr	r0, [pc, #132]	; (8100b28 <ADE9000_Conv_ADC+0x90>)
 8100aa4:	f005 f95e 	bl	8105d64 <puts>
	int32_t app, err = 0;
 8100aa8:	2300      	movs	r3, #0
 8100aaa:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0; i<n; i++){
 8100aac:	2300      	movs	r3, #0
 8100aae:	60fb      	str	r3, [r7, #12]
 8100ab0:	e02e      	b.n	8100b10 <ADE9000_Conv_ADC+0x78>
		app = *(data + i);
 8100ab2:	68fb      	ldr	r3, [r7, #12]
 8100ab4:	009b      	lsls	r3, r3, #2
 8100ab6:	687a      	ldr	r2, [r7, #4]
 8100ab8:	4413      	add	r3, r2
 8100aba:	681b      	ldr	r3, [r3, #0]
 8100abc:	617b      	str	r3, [r7, #20]
		if((app & 0x0000000F)!=0) {
 8100abe:	697b      	ldr	r3, [r7, #20]
 8100ac0:	f003 030f 	and.w	r3, r3, #15
 8100ac4:	2b00      	cmp	r3, #0
 8100ac6:	d002      	beq.n	8100ace <ADE9000_Conv_ADC+0x36>
			//printf("Error code\r\n");
			err +=1;
 8100ac8:	693b      	ldr	r3, [r7, #16]
 8100aca:	3301      	adds	r3, #1
 8100acc:	613b      	str	r3, [r7, #16]
		}
		if ((app &0xF0000000)==0xF0000000){
 8100ace:	697b      	ldr	r3, [r7, #20]
 8100ad0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100ad4:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8100ad8:	d105      	bne.n	8100ae6 <ADE9000_Conv_ADC+0x4e>
			app = ((app>>4)|0xF0000000);
 8100ada:	697b      	ldr	r3, [r7, #20]
 8100adc:	111b      	asrs	r3, r3, #4
 8100ade:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8100ae2:	617b      	str	r3, [r7, #20]
 8100ae4:	e00b      	b.n	8100afe <ADE9000_Conv_ADC+0x66>
		}else if((app &0xF0000000)==0x00000000) {
 8100ae6:	697b      	ldr	r3, [r7, #20]
 8100ae8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100aec:	2b00      	cmp	r3, #0
 8100aee:	d103      	bne.n	8100af8 <ADE9000_Conv_ADC+0x60>
			app = ((app>>4)|0x00000000);
 8100af0:	697b      	ldr	r3, [r7, #20]
 8100af2:	111b      	asrs	r3, r3, #4
 8100af4:	617b      	str	r3, [r7, #20]
 8100af6:	e002      	b.n	8100afe <ADE9000_Conv_ADC+0x66>
		}
		else {
			//printf("Error code\r\n");
			err +=1;
 8100af8:	693b      	ldr	r3, [r7, #16]
 8100afa:	3301      	adds	r3, #1
 8100afc:	613b      	str	r3, [r7, #16]
		}
		*(data+i) = app;
 8100afe:	68fb      	ldr	r3, [r7, #12]
 8100b00:	009b      	lsls	r3, r3, #2
 8100b02:	687a      	ldr	r2, [r7, #4]
 8100b04:	4413      	add	r3, r2
 8100b06:	697a      	ldr	r2, [r7, #20]
 8100b08:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<n; i++){
 8100b0a:	68fb      	ldr	r3, [r7, #12]
 8100b0c:	3301      	adds	r3, #1
 8100b0e:	60fb      	str	r3, [r7, #12]
 8100b10:	68fa      	ldr	r2, [r7, #12]
 8100b12:	683b      	ldr	r3, [r7, #0]
 8100b14:	429a      	cmp	r2, r3
 8100b16:	d3cc      	bcc.n	8100ab2 <ADE9000_Conv_ADC+0x1a>

	}
	printf("errori: %d\r\n",err);
 8100b18:	6939      	ldr	r1, [r7, #16]
 8100b1a:	4804      	ldr	r0, [pc, #16]	; (8100b2c <ADE9000_Conv_ADC+0x94>)
 8100b1c:	f005 f89c 	bl	8105c58 <iprintf>

}
 8100b20:	bf00      	nop
 8100b22:	3718      	adds	r7, #24
 8100b24:	46bd      	mov	sp, r7
 8100b26:	bd80      	pop	{r7, pc}
 8100b28:	08106cac 	.word	0x08106cac
 8100b2c:	08106cb4 	.word	0x08106cb4

08100b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100b30:	b580      	push	{r7, lr}
 8100b32:	f5ad 3d7a 	sub.w	sp, sp, #256000	; 0x3e800
 8100b36:	b086      	sub	sp, #24
 8100b38:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100b3a:	4bb4      	ldr	r3, [pc, #720]	; (8100e0c <main+0x2dc>)
 8100b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b40:	4ab2      	ldr	r2, [pc, #712]	; (8100e0c <main+0x2dc>)
 8100b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b4a:	4bb0      	ldr	r3, [pc, #704]	; (8100e0c <main+0x2dc>)
 8100b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b50:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8100b54:	f107 0318 	add.w	r3, r7, #24
 8100b58:	3b14      	subs	r3, #20
 8100b5a:	601a      	str	r2, [r3, #0]
 8100b5c:	f107 0318 	add.w	r3, r7, #24
 8100b60:	3b14      	subs	r3, #20
 8100b62:	681b      	ldr	r3, [r3, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b64:	2001      	movs	r0, #1
 8100b66:	f001 f8bd 	bl	8101ce4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100b6a:	f001 f947 	bl	8101dfc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100b6e:	2201      	movs	r2, #1
 8100b70:	2102      	movs	r1, #2
 8100b72:	2000      	movs	r0, #0
 8100b74:	f001 f8c8 	bl	8101d08 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b78:	4ba5      	ldr	r3, [pc, #660]	; (8100e10 <main+0x2e0>)
 8100b7a:	681b      	ldr	r3, [r3, #0]
 8100b7c:	091b      	lsrs	r3, r3, #4
 8100b7e:	f003 030f 	and.w	r3, r3, #15
 8100b82:	2b07      	cmp	r3, #7
 8100b84:	d108      	bne.n	8100b98 <main+0x68>
 8100b86:	4ba3      	ldr	r3, [pc, #652]	; (8100e14 <main+0x2e4>)
 8100b88:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100b8c:	4aa1      	ldr	r2, [pc, #644]	; (8100e14 <main+0x2e4>)
 8100b8e:	f043 0301 	orr.w	r3, r3, #1
 8100b92:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100b96:	e007      	b.n	8100ba8 <main+0x78>
 8100b98:	4b9e      	ldr	r3, [pc, #632]	; (8100e14 <main+0x2e4>)
 8100b9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100b9e:	4a9d      	ldr	r2, [pc, #628]	; (8100e14 <main+0x2e4>)
 8100ba0:	f043 0301 	orr.w	r3, r3, #1
 8100ba4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100ba8:	f000 fcbc 	bl	8101524 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100bac:	f000 f9e8 	bl	8100f80 <MX_GPIO_Init>
  MX_SPI3_Init();
 8100bb0:	f000 f944 	bl	8100e3c <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8100bb4:	f000 f998 	bl	8100ee8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  ADE9000_Power();
 8100bb8:	f7ff fdd8 	bl	810076c <ADE9000_Power>

  ADE9000_Setup();
 8100bbc:	f7ff fd78 	bl	81006b0 <ADE9000_Setup>

  printf("Start buffer\r\n");
 8100bc0:	4895      	ldr	r0, [pc, #596]	; (8100e18 <main+0x2e8>)
 8100bc2:	f005 f8cf 	bl	8105d64 <puts>
  Start_Waveform_Buffer();
 8100bc6:	f7ff fecf 	bl	8100968 <Start_Waveform_Buffer>
	HAL_Delay(24);
	Stop_Waveform_Buffer();
*/

  int32_t va[N_SAMPLE], ia[N_SAMPLE];
  uint16_t index = 0;
 8100bca:	2300      	movs	r3, #0
 8100bcc:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100bd0:	f102 0216 	add.w	r2, r2, #22
 8100bd4:	8013      	strh	r3, [r2, #0]

  uint32_t start;
  while(index != N_SAMPLE){
 8100bd6:	e0bc      	b.n	8100d52 <main+0x222>
 		  while(flag_read == 0){}
 8100bd8:	bf00      	nop
 8100bda:	4b90      	ldr	r3, [pc, #576]	; (8100e1c <main+0x2ec>)
 8100bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8100be0:	2b00      	cmp	r3, #0
 8100be2:	d0fa      	beq.n	8100bda <main+0xaa>
		  //uint16_t value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
		  //value_reg_16 = (value_reg_16>>12)&0x0F;
		  //printf("pg: %i\r\n",value_reg_16);
		  printf("nint: %d", n_int);
 8100be4:	4b8e      	ldr	r3, [pc, #568]	; (8100e20 <main+0x2f0>)
 8100be6:	681b      	ldr	r3, [r3, #0]
 8100be8:	4619      	mov	r1, r3
 8100bea:	488e      	ldr	r0, [pc, #568]	; (8100e24 <main+0x2f4>)
 8100bec:	f005 f834 	bl	8105c58 <iprintf>
 		  flag_read = 0;
 8100bf0:	4b8a      	ldr	r3, [pc, #552]	; (8100e1c <main+0x2ec>)
 8100bf2:	2200      	movs	r2, #0
 8100bf4:	701a      	strb	r2, [r3, #0]
 		  uint32_t value_reg_32 = 0x00020000;
 8100bf6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8100bfa:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100bfe:	f102 020c 	add.w	r2, r2, #12
 8100c02:	6013      	str	r3, [r2, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8100c04:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100c08:	f103 030c 	add.w	r3, r3, #12
 8100c0c:	6819      	ldr	r1, [r3, #0]
 8100c0e:	f240 4002 	movw	r0, #1026	; 0x402
 8100c12:	f7ff fe6d 	bl	81008f0 <ADE9000_SPI_Write_32>
 		  start = WAVEFORM_BUFFER_START_ADDR;
 8100c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8100c1a:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100c1e:	f102 0208 	add.w	r2, r2, #8
 8100c22:	6013      	str	r3, [r2, #0]
 		  ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 8100c24:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100c28:	f103 0308 	add.w	r3, r3, #8
 8100c2c:	681b      	ldr	r3, [r3, #0]
 8100c2e:	b298      	uxth	r0, r3
 8100c30:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100c34:	f103 0316 	add.w	r3, r3, #22
 8100c38:	881b      	ldrh	r3, [r3, #0]
 8100c3a:	009a      	lsls	r2, r3, #2
 8100c3c:	f107 0318 	add.w	r3, r7, #24
 8100c40:	3b10      	subs	r3, #16
 8100c42:	1899      	adds	r1, r3, r2
 8100c44:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100c48:	f103 0316 	add.w	r3, r3, #22
 8100c4c:	881b      	ldrh	r3, [r3, #0]
 8100c4e:	009a      	lsls	r2, r3, #2
 8100c50:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8100c54:	f103 0318 	add.w	r3, r3, #24
 8100c58:	3b10      	subs	r3, #16
 8100c5a:	4413      	add	r3, r2
 8100c5c:	460a      	mov	r2, r1
 8100c5e:	2180      	movs	r1, #128	; 0x80
 8100c60:	f7ff feb0 	bl	81009c4 <ADE9000_SPI_Burst_Read_two_ch>
 		  printf("Read from 0x%x\r\n", start);
 8100c64:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100c68:	f103 0308 	add.w	r3, r3, #8
 8100c6c:	6819      	ldr	r1, [r3, #0]
 8100c6e:	486e      	ldr	r0, [pc, #440]	; (8100e28 <main+0x2f8>)
 8100c70:	f004 fff2 	bl	8105c58 <iprintf>
 		  printf("Write on index %d\r\n",index);
 8100c74:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100c78:	f103 0316 	add.w	r3, r3, #22
 8100c7c:	881b      	ldrh	r3, [r3, #0]
 8100c7e:	4619      	mov	r1, r3
 8100c80:	486a      	ldr	r0, [pc, #424]	; (8100e2c <main+0x2fc>)
 8100c82:	f004 ffe9 	bl	8105c58 <iprintf>
 		  index += BURST_READ_N;
 8100c86:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100c8a:	f103 0316 	add.w	r3, r3, #22
 8100c8e:	881b      	ldrh	r3, [r3, #0]
 8100c90:	3380      	adds	r3, #128	; 0x80
 8100c92:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100c96:	f102 0216 	add.w	r2, r2, #22
 8100c9a:	8013      	strh	r3, [r2, #0]
 		  while(flag_read == 0){}
 8100c9c:	bf00      	nop
 8100c9e:	4b5f      	ldr	r3, [pc, #380]	; (8100e1c <main+0x2ec>)
 8100ca0:	f993 3000 	ldrsb.w	r3, [r3]
 8100ca4:	2b00      	cmp	r3, #0
 8100ca6:	d0fa      	beq.n	8100c9e <main+0x16e>
 		  //value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 		  //value_reg_16 = (value_reg_16>>12)&0x0F;
 		  //printf("pg: %i\r\n",value_reg_16);
 		  printf("nint: %d", n_int);
 8100ca8:	4b5d      	ldr	r3, [pc, #372]	; (8100e20 <main+0x2f0>)
 8100caa:	681b      	ldr	r3, [r3, #0]
 8100cac:	4619      	mov	r1, r3
 8100cae:	485d      	ldr	r0, [pc, #372]	; (8100e24 <main+0x2f4>)
 8100cb0:	f004 ffd2 	bl	8105c58 <iprintf>
 		  flag_read = 0;
 8100cb4:	4b59      	ldr	r3, [pc, #356]	; (8100e1c <main+0x2ec>)
 8100cb6:	2200      	movs	r2, #0
 8100cb8:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8100cba:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100cbe:	f103 030c 	add.w	r3, r3, #12
 8100cc2:	6819      	ldr	r1, [r3, #0]
 8100cc4:	f240 4002 	movw	r0, #1026	; 0x402
 8100cc8:	f7ff fe12 	bl	81008f0 <ADE9000_SPI_Write_32>
 		  start = WAVEFORM_BUFFER_START_ADDR + BURST_READ_N*8;
 8100ccc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100cd0:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100cd4:	f102 0208 	add.w	r2, r2, #8
 8100cd8:	6013      	str	r3, [r2, #0]
 		  ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 8100cda:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100cde:	f103 0308 	add.w	r3, r3, #8
 8100ce2:	681b      	ldr	r3, [r3, #0]
 8100ce4:	b298      	uxth	r0, r3
 8100ce6:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100cea:	f103 0316 	add.w	r3, r3, #22
 8100cee:	881b      	ldrh	r3, [r3, #0]
 8100cf0:	009a      	lsls	r2, r3, #2
 8100cf2:	f107 0318 	add.w	r3, r7, #24
 8100cf6:	3b10      	subs	r3, #16
 8100cf8:	1899      	adds	r1, r3, r2
 8100cfa:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100cfe:	f103 0316 	add.w	r3, r3, #22
 8100d02:	881b      	ldrh	r3, [r3, #0]
 8100d04:	009a      	lsls	r2, r3, #2
 8100d06:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8100d0a:	f103 0318 	add.w	r3, r3, #24
 8100d0e:	3b10      	subs	r3, #16
 8100d10:	4413      	add	r3, r2
 8100d12:	460a      	mov	r2, r1
 8100d14:	2180      	movs	r1, #128	; 0x80
 8100d16:	f7ff fe55 	bl	81009c4 <ADE9000_SPI_Burst_Read_two_ch>
 		  printf("Read from 0x%x\r\n", start);
 8100d1a:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100d1e:	f103 0308 	add.w	r3, r3, #8
 8100d22:	6819      	ldr	r1, [r3, #0]
 8100d24:	4840      	ldr	r0, [pc, #256]	; (8100e28 <main+0x2f8>)
 8100d26:	f004 ff97 	bl	8105c58 <iprintf>
 		  printf("Write on index %d\r\n",index);
 8100d2a:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100d2e:	f103 0316 	add.w	r3, r3, #22
 8100d32:	881b      	ldrh	r3, [r3, #0]
 8100d34:	4619      	mov	r1, r3
 8100d36:	483d      	ldr	r0, [pc, #244]	; (8100e2c <main+0x2fc>)
 8100d38:	f004 ff8e 	bl	8105c58 <iprintf>
 		 index += BURST_READ_N;
 8100d3c:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100d40:	f103 0316 	add.w	r3, r3, #22
 8100d44:	881b      	ldrh	r3, [r3, #0]
 8100d46:	3380      	adds	r3, #128	; 0x80
 8100d48:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100d4c:	f102 0216 	add.w	r2, r2, #22
 8100d50:	8013      	strh	r3, [r2, #0]
  while(index != N_SAMPLE){
 8100d52:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100d56:	f103 0316 	add.w	r3, r3, #22
 8100d5a:	881b      	ldrh	r3, [r3, #0]
 8100d5c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8100d60:	f47f af3a 	bne.w	8100bd8 <main+0xa8>
 }
  Stop_Waveform_Buffer();
 8100d64:	f7ff fe17 	bl	8100996 <Stop_Waveform_Buffer>
  printf("Conv 1 sec\r\n");
 8100d68:	4831      	ldr	r0, [pc, #196]	; (8100e30 <main+0x300>)
 8100d6a:	f004 fffb 	bl	8105d64 <puts>
  ADE9000_Conv_ADC(va,N_SAMPLE);
 8100d6e:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8100d72:	f103 0318 	add.w	r3, r3, #24
 8100d76:	3b10      	subs	r3, #16
 8100d78:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8100d7c:	4618      	mov	r0, r3
 8100d7e:	f7ff fe8b 	bl	8100a98 <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(ia,N_SAMPLE);
 8100d82:	f107 0318 	add.w	r3, r7, #24
 8100d86:	3b10      	subs	r3, #16
 8100d88:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8100d8c:	4618      	mov	r0, r3
 8100d8e:	f7ff fe83 	bl	8100a98 <ADE9000_Conv_ADC>

  HAL_Delay(5000);
 8100d92:	f241 3088 	movw	r0, #5000	; 0x1388
 8100d96:	f000 fc79 	bl	810168c <HAL_Delay>
  printf("\r\nVA,IA\r\n");
 8100d9a:	4826      	ldr	r0, [pc, #152]	; (8100e34 <main+0x304>)
 8100d9c:	f004 ffe2 	bl	8105d64 <puts>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8100da0:	2300      	movs	r3, #0
 8100da2:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100da6:	f102 0210 	add.w	r2, r2, #16
 8100daa:	6013      	str	r3, [r2, #0]
 8100dac:	e024      	b.n	8100df8 <main+0x2c8>
	  printf("%d,%d\r\n",va[i],ia[i]);
 8100dae:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8100db2:	f103 0318 	add.w	r3, r3, #24
 8100db6:	3b10      	subs	r3, #16
 8100db8:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100dbc:	f102 0210 	add.w	r2, r2, #16
 8100dc0:	6812      	ldr	r2, [r2, #0]
 8100dc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8100dc6:	f107 0318 	add.w	r3, r7, #24
 8100dca:	3b10      	subs	r3, #16
 8100dcc:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100dd0:	f102 0210 	add.w	r2, r2, #16
 8100dd4:	6812      	ldr	r2, [r2, #0]
 8100dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100dda:	461a      	mov	r2, r3
 8100ddc:	4816      	ldr	r0, [pc, #88]	; (8100e38 <main+0x308>)
 8100dde:	f004 ff3b 	bl	8105c58 <iprintf>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8100de2:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100de6:	f103 0310 	add.w	r3, r3, #16
 8100dea:	681b      	ldr	r3, [r3, #0]
 8100dec:	3301      	adds	r3, #1
 8100dee:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8100df2:	f102 0210 	add.w	r2, r2, #16
 8100df6:	6013      	str	r3, [r2, #0]
 8100df8:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8100dfc:	f103 0310 	add.w	r3, r3, #16
 8100e00:	681b      	ldr	r3, [r3, #0]
 8100e02:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8100e06:	d3d2      	bcc.n	8100dae <main+0x27e>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100e08:	e7fe      	b.n	8100e08 <main+0x2d8>
 8100e0a:	bf00      	nop
 8100e0c:	58024400 	.word	0x58024400
 8100e10:	e000ed00 	.word	0xe000ed00
 8100e14:	58026400 	.word	0x58026400
 8100e18:	08106cc4 	.word	0x08106cc4
 8100e1c:	10000090 	.word	0x10000090
 8100e20:	10000094 	.word	0x10000094
 8100e24:	08106cd4 	.word	0x08106cd4
 8100e28:	08106ce0 	.word	0x08106ce0
 8100e2c:	08106cf4 	.word	0x08106cf4
 8100e30:	08106d08 	.word	0x08106d08
 8100e34:	08106d14 	.word	0x08106d14
 8100e38:	08106d20 	.word	0x08106d20

08100e3c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8100e3c:	b580      	push	{r7, lr}
 8100e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8100e40:	4b27      	ldr	r3, [pc, #156]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e42:	4a28      	ldr	r2, [pc, #160]	; (8100ee4 <MX_SPI3_Init+0xa8>)
 8100e44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8100e46:	4b26      	ldr	r3, [pc, #152]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100e4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8100e4e:	4b24      	ldr	r3, [pc, #144]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e50:	2200      	movs	r2, #0
 8100e52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8100e54:	4b22      	ldr	r3, [pc, #136]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e56:	220f      	movs	r2, #15
 8100e58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e5a:	4b21      	ldr	r3, [pc, #132]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e5c:	2200      	movs	r2, #0
 8100e5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100e60:	4b1f      	ldr	r3, [pc, #124]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e62:	2200      	movs	r2, #0
 8100e64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8100e66:	4b1e      	ldr	r3, [pc, #120]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8100e6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8100e6e:	4b1c      	ldr	r3, [pc, #112]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e70:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8100e74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100e76:	4b1a      	ldr	r3, [pc, #104]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e78:	2200      	movs	r2, #0
 8100e7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8100e7c:	4b18      	ldr	r3, [pc, #96]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e7e:	2200      	movs	r2, #0
 8100e80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100e82:	4b17      	ldr	r3, [pc, #92]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e84:	2200      	movs	r2, #0
 8100e86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8100e88:	4b15      	ldr	r3, [pc, #84]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e8a:	2200      	movs	r2, #0
 8100e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100e8e:	4b14      	ldr	r3, [pc, #80]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100e94:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100e96:	4b12      	ldr	r3, [pc, #72]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e98:	2200      	movs	r2, #0
 8100e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100e9c:	4b10      	ldr	r3, [pc, #64]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100e9e:	2200      	movs	r2, #0
 8100ea0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ea2:	4b0f      	ldr	r3, [pc, #60]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100ea4:	2200      	movs	r2, #0
 8100ea6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100ea8:	4b0d      	ldr	r3, [pc, #52]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100eaa:	2200      	movs	r2, #0
 8100eac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100eae:	4b0c      	ldr	r3, [pc, #48]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100eb0:	2200      	movs	r2, #0
 8100eb2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100eb4:	4b0a      	ldr	r3, [pc, #40]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100eb6:	2200      	movs	r2, #0
 8100eb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100eba:	4b09      	ldr	r3, [pc, #36]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100ebc:	2200      	movs	r2, #0
 8100ebe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100ec0:	4b07      	ldr	r3, [pc, #28]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100ec2:	2200      	movs	r2, #0
 8100ec4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100ec6:	4b06      	ldr	r3, [pc, #24]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100ec8:	2200      	movs	r2, #0
 8100eca:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8100ecc:	4804      	ldr	r0, [pc, #16]	; (8100ee0 <MX_SPI3_Init+0xa4>)
 8100ece:	f002 fcdd 	bl	810388c <HAL_SPI_Init>
 8100ed2:	4603      	mov	r3, r0
 8100ed4:	2b00      	cmp	r3, #0
 8100ed6:	d001      	beq.n	8100edc <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8100ed8:	f000 f920 	bl	810111c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8100edc:	bf00      	nop
 8100ede:	bd80      	pop	{r7, pc}
 8100ee0:	10000134 	.word	0x10000134
 8100ee4:	40003c00 	.word	0x40003c00

08100ee8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100ee8:	b580      	push	{r7, lr}
 8100eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100eec:	4b22      	ldr	r3, [pc, #136]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100eee:	4a23      	ldr	r2, [pc, #140]	; (8100f7c <MX_USART3_UART_Init+0x94>)
 8100ef0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100ef2:	4b21      	ldr	r3, [pc, #132]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100ef4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100ef8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100efa:	4b1f      	ldr	r3, [pc, #124]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100efc:	2200      	movs	r2, #0
 8100efe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100f00:	4b1d      	ldr	r3, [pc, #116]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f02:	2200      	movs	r2, #0
 8100f04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100f06:	4b1c      	ldr	r3, [pc, #112]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f08:	2200      	movs	r2, #0
 8100f0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100f0c:	4b1a      	ldr	r3, [pc, #104]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f0e:	220c      	movs	r2, #12
 8100f10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100f12:	4b19      	ldr	r3, [pc, #100]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f14:	2200      	movs	r2, #0
 8100f16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100f18:	4b17      	ldr	r3, [pc, #92]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f1a:	2200      	movs	r2, #0
 8100f1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100f1e:	4b16      	ldr	r3, [pc, #88]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f20:	2200      	movs	r2, #0
 8100f22:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100f24:	4b14      	ldr	r3, [pc, #80]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f26:	2200      	movs	r2, #0
 8100f28:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100f2a:	4b13      	ldr	r3, [pc, #76]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f2c:	2200      	movs	r2, #0
 8100f2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100f30:	4811      	ldr	r0, [pc, #68]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f32:	f003 fd61 	bl	81049f8 <HAL_UART_Init>
 8100f36:	4603      	mov	r3, r0
 8100f38:	2b00      	cmp	r3, #0
 8100f3a:	d001      	beq.n	8100f40 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100f3c:	f000 f8ee 	bl	810111c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100f40:	2100      	movs	r1, #0
 8100f42:	480d      	ldr	r0, [pc, #52]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f44:	f004 fd8c 	bl	8105a60 <HAL_UARTEx_SetTxFifoThreshold>
 8100f48:	4603      	mov	r3, r0
 8100f4a:	2b00      	cmp	r3, #0
 8100f4c:	d001      	beq.n	8100f52 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100f4e:	f000 f8e5 	bl	810111c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100f52:	2100      	movs	r1, #0
 8100f54:	4808      	ldr	r0, [pc, #32]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f56:	f004 fdc1 	bl	8105adc <HAL_UARTEx_SetRxFifoThreshold>
 8100f5a:	4603      	mov	r3, r0
 8100f5c:	2b00      	cmp	r3, #0
 8100f5e:	d001      	beq.n	8100f64 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100f60:	f000 f8dc 	bl	810111c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100f64:	4804      	ldr	r0, [pc, #16]	; (8100f78 <MX_USART3_UART_Init+0x90>)
 8100f66:	f004 fd42 	bl	81059ee <HAL_UARTEx_DisableFifoMode>
 8100f6a:	4603      	mov	r3, r0
 8100f6c:	2b00      	cmp	r3, #0
 8100f6e:	d001      	beq.n	8100f74 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100f70:	f000 f8d4 	bl	810111c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100f74:	bf00      	nop
 8100f76:	bd80      	pop	{r7, pc}
 8100f78:	100000a4 	.word	0x100000a4
 8100f7c:	40004800 	.word	0x40004800

08100f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100f80:	b580      	push	{r7, lr}
 8100f82:	b08a      	sub	sp, #40	; 0x28
 8100f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100f86:	f107 0314 	add.w	r3, r7, #20
 8100f8a:	2200      	movs	r2, #0
 8100f8c:	601a      	str	r2, [r3, #0]
 8100f8e:	605a      	str	r2, [r3, #4]
 8100f90:	609a      	str	r2, [r3, #8]
 8100f92:	60da      	str	r2, [r3, #12]
 8100f94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100f96:	4b47      	ldr	r3, [pc, #284]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f9c:	4a45      	ldr	r2, [pc, #276]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100f9e:	f043 0310 	orr.w	r3, r3, #16
 8100fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fa6:	4b43      	ldr	r3, [pc, #268]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fac:	f003 0310 	and.w	r3, r3, #16
 8100fb0:	613b      	str	r3, [r7, #16]
 8100fb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100fb4:	4b3f      	ldr	r3, [pc, #252]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fba:	4a3e      	ldr	r2, [pc, #248]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100fbc:	f043 0308 	orr.w	r3, r3, #8
 8100fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fc4:	4b3b      	ldr	r3, [pc, #236]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fca:	f003 0308 	and.w	r3, r3, #8
 8100fce:	60fb      	str	r3, [r7, #12]
 8100fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100fd2:	4b38      	ldr	r3, [pc, #224]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fd8:	4a36      	ldr	r2, [pc, #216]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100fe2:	4b34      	ldr	r3, [pc, #208]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100fec:	60bb      	str	r3, [r7, #8]
 8100fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100ff0:	4b30      	ldr	r3, [pc, #192]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ff6:	4a2f      	ldr	r2, [pc, #188]	; (81010b4 <MX_GPIO_Init+0x134>)
 8100ff8:	f043 0302 	orr.w	r3, r3, #2
 8100ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101000:	4b2c      	ldr	r3, [pc, #176]	; (81010b4 <MX_GPIO_Init+0x134>)
 8101002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101006:	f003 0302 	and.w	r3, r3, #2
 810100a:	607b      	str	r3, [r7, #4]
 810100c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADE9000_Reset_Pin|ADE9000_PM1_Pin, GPIO_PIN_RESET);
 810100e:	2200      	movs	r2, #0
 8101010:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8101014:	4828      	ldr	r0, [pc, #160]	; (81010b8 <MX_GPIO_Init+0x138>)
 8101016:	f000 fe31 	bl	8101c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADE9000_CS_GPIO_Port, ADE9000_CS_Pin, GPIO_PIN_SET);
 810101a:	2201      	movs	r2, #1
 810101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101020:	4826      	ldr	r0, [pc, #152]	; (81010bc <MX_GPIO_Init+0x13c>)
 8101022:	f000 fe2b 	bl	8101c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADE9000_Reset_Pin ADE9000_PM1_Pin */
  GPIO_InitStruct.Pin = ADE9000_Reset_Pin|ADE9000_PM1_Pin;
 8101026:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 810102a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810102c:	2301      	movs	r3, #1
 810102e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101030:	2300      	movs	r3, #0
 8101032:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101034:	2300      	movs	r3, #0
 8101036:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101038:	f107 0314 	add.w	r3, r7, #20
 810103c:	4619      	mov	r1, r3
 810103e:	481e      	ldr	r0, [pc, #120]	; (81010b8 <MX_GPIO_Init+0x138>)
 8101040:	f000 fc6c 	bl	810191c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ1_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ1_Pin;
 8101044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 810104a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 810104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101050:	2300      	movs	r3, #0
 8101052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8101054:	f107 0314 	add.w	r3, r7, #20
 8101058:	4619      	mov	r1, r3
 810105a:	4817      	ldr	r0, [pc, #92]	; (81010b8 <MX_GPIO_Init+0x138>)
 810105c:	f000 fc5e 	bl	810191c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_CS_Pin */
  GPIO_InitStruct.Pin = ADE9000_CS_Pin;
 8101060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101066:	2301      	movs	r3, #1
 8101068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810106a:	2300      	movs	r3, #0
 810106c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810106e:	2300      	movs	r3, #0
 8101070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADE9000_CS_GPIO_Port, &GPIO_InitStruct);
 8101072:	f107 0314 	add.w	r3, r7, #20
 8101076:	4619      	mov	r1, r3
 8101078:	4810      	ldr	r0, [pc, #64]	; (81010bc <MX_GPIO_Init+0x13c>)
 810107a:	f000 fc4f 	bl	810191c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ0_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ0_Pin;
 810107e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8101084:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8101088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810108a:	2300      	movs	r3, #0
 810108c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ0_GPIO_Port, &GPIO_InitStruct);
 810108e:	f107 0314 	add.w	r3, r7, #20
 8101092:	4619      	mov	r1, r3
 8101094:	4809      	ldr	r0, [pc, #36]	; (81010bc <MX_GPIO_Init+0x13c>)
 8101096:	f000 fc41 	bl	810191c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 810109a:	2200      	movs	r2, #0
 810109c:	2100      	movs	r1, #0
 810109e:	2028      	movs	r0, #40	; 0x28
 81010a0:	f000 fbf3 	bl	810188a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 81010a4:	2028      	movs	r0, #40	; 0x28
 81010a6:	f000 fc0a 	bl	81018be <HAL_NVIC_EnableIRQ>

}
 81010aa:	bf00      	nop
 81010ac:	3728      	adds	r7, #40	; 0x28
 81010ae:	46bd      	mov	sp, r7
 81010b0:	bd80      	pop	{r7, pc}
 81010b2:	bf00      	nop
 81010b4:	58024400 	.word	0x58024400
 81010b8:	58021000 	.word	0x58021000
 81010bc:	58021800 	.word	0x58021800

081010c0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 81010c0:	b580      	push	{r7, lr}
 81010c2:	b082      	sub	sp, #8
 81010c4:	af00      	add	r7, sp, #0
 81010c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 81010c8:	1d39      	adds	r1, r7, #4
 81010ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81010ce:	2201      	movs	r2, #1
 81010d0:	4803      	ldr	r0, [pc, #12]	; (81010e0 <__io_putchar+0x20>)
 81010d2:	f003 fce1 	bl	8104a98 <HAL_UART_Transmit>
	return ch;
 81010d6:	687b      	ldr	r3, [r7, #4]
}
 81010d8:	4618      	mov	r0, r3
 81010da:	3708      	adds	r7, #8
 81010dc:	46bd      	mov	sp, r7
 81010de:	bd80      	pop	{r7, pc}
 81010e0:	100000a4 	.word	0x100000a4

081010e4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 81010e4:	b480      	push	{r7}
 81010e6:	b083      	sub	sp, #12
 81010e8:	af00      	add	r7, sp, #0
 81010ea:	4603      	mov	r3, r0
 81010ec:	80fb      	strh	r3, [r7, #6]
	// If the interrupt source is pin IRQ0
	if (GPIO_Pin == ADE9000_IRQ0_Pin)
 81010ee:	88fb      	ldrh	r3, [r7, #6]
 81010f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81010f4:	d107      	bne.n	8101106 <HAL_GPIO_EXTI_Callback+0x22>
	{
		//printf("IRQ0s\r\n");
		flag_read = 1;
 81010f6:	4b07      	ldr	r3, [pc, #28]	; (8101114 <HAL_GPIO_EXTI_Callback+0x30>)
 81010f8:	2201      	movs	r2, #1
 81010fa:	701a      	strb	r2, [r3, #0]
		n_int ++;
 81010fc:	4b06      	ldr	r3, [pc, #24]	; (8101118 <HAL_GPIO_EXTI_Callback+0x34>)
 81010fe:	681b      	ldr	r3, [r3, #0]
 8101100:	3301      	adds	r3, #1
 8101102:	4a05      	ldr	r2, [pc, #20]	; (8101118 <HAL_GPIO_EXTI_Callback+0x34>)
 8101104:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == ADE9000_IRQ1_Pin)
		{
			//printf("IRQ1\r\n");
		}
}
 8101106:	bf00      	nop
 8101108:	370c      	adds	r7, #12
 810110a:	46bd      	mov	sp, r7
 810110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101110:	4770      	bx	lr
 8101112:	bf00      	nop
 8101114:	10000090 	.word	0x10000090
 8101118:	10000094 	.word	0x10000094

0810111c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810111c:	b480      	push	{r7}
 810111e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101120:	b672      	cpsid	i
}
 8101122:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101124:	e7fe      	b.n	8101124 <Error_Handler+0x8>
	...

08101128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101128:	b480      	push	{r7}
 810112a:	b083      	sub	sp, #12
 810112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810112e:	4b0a      	ldr	r3, [pc, #40]	; (8101158 <HAL_MspInit+0x30>)
 8101130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101134:	4a08      	ldr	r2, [pc, #32]	; (8101158 <HAL_MspInit+0x30>)
 8101136:	f043 0302 	orr.w	r3, r3, #2
 810113a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810113e:	4b06      	ldr	r3, [pc, #24]	; (8101158 <HAL_MspInit+0x30>)
 8101140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101144:	f003 0302 	and.w	r3, r3, #2
 8101148:	607b      	str	r3, [r7, #4]
 810114a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810114c:	bf00      	nop
 810114e:	370c      	adds	r7, #12
 8101150:	46bd      	mov	sp, r7
 8101152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101156:	4770      	bx	lr
 8101158:	58024400 	.word	0x58024400

0810115c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 810115c:	b580      	push	{r7, lr}
 810115e:	b0b8      	sub	sp, #224	; 0xe0
 8101160:	af00      	add	r7, sp, #0
 8101162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101164:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101168:	2200      	movs	r2, #0
 810116a:	601a      	str	r2, [r3, #0]
 810116c:	605a      	str	r2, [r3, #4]
 810116e:	609a      	str	r2, [r3, #8]
 8101170:	60da      	str	r2, [r3, #12]
 8101172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101174:	f107 0310 	add.w	r3, r7, #16
 8101178:	22bc      	movs	r2, #188	; 0xbc
 810117a:	2100      	movs	r1, #0
 810117c:	4618      	mov	r0, r3
 810117e:	f004 fd63 	bl	8105c48 <memset>
  if(hspi->Instance==SPI3)
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	681b      	ldr	r3, [r3, #0]
 8101186:	4a2f      	ldr	r2, [pc, #188]	; (8101244 <HAL_SPI_MspInit+0xe8>)
 8101188:	4293      	cmp	r3, r2
 810118a:	d157      	bne.n	810123c <HAL_SPI_MspInit+0xe0>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 810118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101190:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8101192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101196:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101198:	f107 0310 	add.w	r3, r7, #16
 810119c:	4618      	mov	r0, r3
 810119e:	f001 f813 	bl	81021c8 <HAL_RCCEx_PeriphCLKConfig>
 81011a2:	4603      	mov	r3, r0
 81011a4:	2b00      	cmp	r3, #0
 81011a6:	d001      	beq.n	81011ac <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 81011a8:	f7ff ffb8 	bl	810111c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 81011ac:	4b26      	ldr	r3, [pc, #152]	; (8101248 <HAL_SPI_MspInit+0xec>)
 81011ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81011b2:	4a25      	ldr	r2, [pc, #148]	; (8101248 <HAL_SPI_MspInit+0xec>)
 81011b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81011b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81011bc:	4b22      	ldr	r3, [pc, #136]	; (8101248 <HAL_SPI_MspInit+0xec>)
 81011be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81011c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81011c6:	60fb      	str	r3, [r7, #12]
 81011c8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81011ca:	4b1f      	ldr	r3, [pc, #124]	; (8101248 <HAL_SPI_MspInit+0xec>)
 81011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011d0:	4a1d      	ldr	r2, [pc, #116]	; (8101248 <HAL_SPI_MspInit+0xec>)
 81011d2:	f043 0302 	orr.w	r3, r3, #2
 81011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81011da:	4b1b      	ldr	r3, [pc, #108]	; (8101248 <HAL_SPI_MspInit+0xec>)
 81011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81011e0:	f003 0302 	and.w	r3, r3, #2
 81011e4:	60bb      	str	r3, [r7, #8]
 81011e6:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 81011e8:	2318      	movs	r3, #24
 81011ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81011ee:	2302      	movs	r3, #2
 81011f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011f4:	2300      	movs	r3, #0
 81011f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81011fa:	2303      	movs	r3, #3
 81011fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8101200:	2306      	movs	r3, #6
 8101202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101206:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810120a:	4619      	mov	r1, r3
 810120c:	480f      	ldr	r0, [pc, #60]	; (810124c <HAL_SPI_MspInit+0xf0>)
 810120e:	f000 fb85 	bl	810191c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101212:	2320      	movs	r3, #32
 8101214:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101218:	2302      	movs	r3, #2
 810121a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810121e:	2300      	movs	r3, #0
 8101220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101224:	2303      	movs	r3, #3
 8101226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 810122a:	2307      	movs	r3, #7
 810122c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101230:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101234:	4619      	mov	r1, r3
 8101236:	4805      	ldr	r0, [pc, #20]	; (810124c <HAL_SPI_MspInit+0xf0>)
 8101238:	f000 fb70 	bl	810191c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 810123c:	bf00      	nop
 810123e:	37e0      	adds	r7, #224	; 0xe0
 8101240:	46bd      	mov	sp, r7
 8101242:	bd80      	pop	{r7, pc}
 8101244:	40003c00 	.word	0x40003c00
 8101248:	58024400 	.word	0x58024400
 810124c:	58020400 	.word	0x58020400

08101250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101250:	b580      	push	{r7, lr}
 8101252:	b0b8      	sub	sp, #224	; 0xe0
 8101254:	af00      	add	r7, sp, #0
 8101256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101258:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810125c:	2200      	movs	r2, #0
 810125e:	601a      	str	r2, [r3, #0]
 8101260:	605a      	str	r2, [r3, #4]
 8101262:	609a      	str	r2, [r3, #8]
 8101264:	60da      	str	r2, [r3, #12]
 8101266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101268:	f107 0310 	add.w	r3, r7, #16
 810126c:	22bc      	movs	r2, #188	; 0xbc
 810126e:	2100      	movs	r1, #0
 8101270:	4618      	mov	r0, r3
 8101272:	f004 fce9 	bl	8105c48 <memset>
  if(huart->Instance==USART3)
 8101276:	687b      	ldr	r3, [r7, #4]
 8101278:	681b      	ldr	r3, [r3, #0]
 810127a:	4a25      	ldr	r2, [pc, #148]	; (8101310 <HAL_UART_MspInit+0xc0>)
 810127c:	4293      	cmp	r3, r2
 810127e:	d142      	bne.n	8101306 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101280:	2302      	movs	r3, #2
 8101282:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101284:	2300      	movs	r3, #0
 8101286:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810128a:	f107 0310 	add.w	r3, r7, #16
 810128e:	4618      	mov	r0, r3
 8101290:	f000 ff9a 	bl	81021c8 <HAL_RCCEx_PeriphCLKConfig>
 8101294:	4603      	mov	r3, r0
 8101296:	2b00      	cmp	r3, #0
 8101298:	d001      	beq.n	810129e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 810129a:	f7ff ff3f 	bl	810111c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810129e:	4b1d      	ldr	r3, [pc, #116]	; (8101314 <HAL_UART_MspInit+0xc4>)
 81012a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81012a4:	4a1b      	ldr	r2, [pc, #108]	; (8101314 <HAL_UART_MspInit+0xc4>)
 81012a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 81012aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81012ae:	4b19      	ldr	r3, [pc, #100]	; (8101314 <HAL_UART_MspInit+0xc4>)
 81012b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81012b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81012b8:	60fb      	str	r3, [r7, #12]
 81012ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81012bc:	4b15      	ldr	r3, [pc, #84]	; (8101314 <HAL_UART_MspInit+0xc4>)
 81012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012c2:	4a14      	ldr	r2, [pc, #80]	; (8101314 <HAL_UART_MspInit+0xc4>)
 81012c4:	f043 0308 	orr.w	r3, r3, #8
 81012c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81012cc:	4b11      	ldr	r3, [pc, #68]	; (8101314 <HAL_UART_MspInit+0xc4>)
 81012ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81012d2:	f003 0308 	and.w	r3, r3, #8
 81012d6:	60bb      	str	r3, [r7, #8]
 81012d8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81012da:	f44f 7340 	mov.w	r3, #768	; 0x300
 81012de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012e2:	2302      	movs	r3, #2
 81012e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012e8:	2300      	movs	r3, #0
 81012ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81012ee:	2300      	movs	r3, #0
 81012f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81012f4:	2307      	movs	r3, #7
 81012f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81012fa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81012fe:	4619      	mov	r1, r3
 8101300:	4805      	ldr	r0, [pc, #20]	; (8101318 <HAL_UART_MspInit+0xc8>)
 8101302:	f000 fb0b 	bl	810191c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101306:	bf00      	nop
 8101308:	37e0      	adds	r7, #224	; 0xe0
 810130a:	46bd      	mov	sp, r7
 810130c:	bd80      	pop	{r7, pc}
 810130e:	bf00      	nop
 8101310:	40004800 	.word	0x40004800
 8101314:	58024400 	.word	0x58024400
 8101318:	58020c00 	.word	0x58020c00

0810131c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810131c:	b480      	push	{r7}
 810131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101320:	e7fe      	b.n	8101320 <NMI_Handler+0x4>

08101322 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101322:	b480      	push	{r7}
 8101324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101326:	e7fe      	b.n	8101326 <HardFault_Handler+0x4>

08101328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101328:	b480      	push	{r7}
 810132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810132c:	e7fe      	b.n	810132c <MemManage_Handler+0x4>

0810132e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810132e:	b480      	push	{r7}
 8101330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101332:	e7fe      	b.n	8101332 <BusFault_Handler+0x4>

08101334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101334:	b480      	push	{r7}
 8101336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101338:	e7fe      	b.n	8101338 <UsageFault_Handler+0x4>

0810133a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810133a:	b480      	push	{r7}
 810133c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810133e:	bf00      	nop
 8101340:	46bd      	mov	sp, r7
 8101342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101346:	4770      	bx	lr

08101348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101348:	b480      	push	{r7}
 810134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810134c:	bf00      	nop
 810134e:	46bd      	mov	sp, r7
 8101350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101354:	4770      	bx	lr

08101356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101356:	b480      	push	{r7}
 8101358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810135a:	bf00      	nop
 810135c:	46bd      	mov	sp, r7
 810135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101362:	4770      	bx	lr

08101364 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101364:	b580      	push	{r7, lr}
 8101366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101368:	f000 f970 	bl	810164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810136c:	bf00      	nop
 810136e:	bd80      	pop	{r7, pc}

08101370 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101370:	b580      	push	{r7, lr}
 8101372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADE9000_IRQ1_Pin);
 8101374:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101378:	f000 fc99 	bl	8101cae <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADE9000_PM1_Pin);
 810137c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8101380:	f000 fc95 	bl	8101cae <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101384:	bf00      	nop
 8101386:	bd80      	pop	{r7, pc}

08101388 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101388:	b580      	push	{r7, lr}
 810138a:	b086      	sub	sp, #24
 810138c:	af00      	add	r7, sp, #0
 810138e:	60f8      	str	r0, [r7, #12]
 8101390:	60b9      	str	r1, [r7, #8]
 8101392:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101394:	2300      	movs	r3, #0
 8101396:	617b      	str	r3, [r7, #20]
 8101398:	e00a      	b.n	81013b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 810139a:	f3af 8000 	nop.w
 810139e:	4601      	mov	r1, r0
 81013a0:	68bb      	ldr	r3, [r7, #8]
 81013a2:	1c5a      	adds	r2, r3, #1
 81013a4:	60ba      	str	r2, [r7, #8]
 81013a6:	b2ca      	uxtb	r2, r1
 81013a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81013aa:	697b      	ldr	r3, [r7, #20]
 81013ac:	3301      	adds	r3, #1
 81013ae:	617b      	str	r3, [r7, #20]
 81013b0:	697a      	ldr	r2, [r7, #20]
 81013b2:	687b      	ldr	r3, [r7, #4]
 81013b4:	429a      	cmp	r2, r3
 81013b6:	dbf0      	blt.n	810139a <_read+0x12>
	}

return len;
 81013b8:	687b      	ldr	r3, [r7, #4]
}
 81013ba:	4618      	mov	r0, r3
 81013bc:	3718      	adds	r7, #24
 81013be:	46bd      	mov	sp, r7
 81013c0:	bd80      	pop	{r7, pc}

081013c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81013c2:	b580      	push	{r7, lr}
 81013c4:	b086      	sub	sp, #24
 81013c6:	af00      	add	r7, sp, #0
 81013c8:	60f8      	str	r0, [r7, #12]
 81013ca:	60b9      	str	r1, [r7, #8]
 81013cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81013ce:	2300      	movs	r3, #0
 81013d0:	617b      	str	r3, [r7, #20]
 81013d2:	e009      	b.n	81013e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81013d4:	68bb      	ldr	r3, [r7, #8]
 81013d6:	1c5a      	adds	r2, r3, #1
 81013d8:	60ba      	str	r2, [r7, #8]
 81013da:	781b      	ldrb	r3, [r3, #0]
 81013dc:	4618      	mov	r0, r3
 81013de:	f7ff fe6f 	bl	81010c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81013e2:	697b      	ldr	r3, [r7, #20]
 81013e4:	3301      	adds	r3, #1
 81013e6:	617b      	str	r3, [r7, #20]
 81013e8:	697a      	ldr	r2, [r7, #20]
 81013ea:	687b      	ldr	r3, [r7, #4]
 81013ec:	429a      	cmp	r2, r3
 81013ee:	dbf1      	blt.n	81013d4 <_write+0x12>
	}
	return len;
 81013f0:	687b      	ldr	r3, [r7, #4]
}
 81013f2:	4618      	mov	r0, r3
 81013f4:	3718      	adds	r7, #24
 81013f6:	46bd      	mov	sp, r7
 81013f8:	bd80      	pop	{r7, pc}

081013fa <_close>:

int _close(int file)
{
 81013fa:	b480      	push	{r7}
 81013fc:	b083      	sub	sp, #12
 81013fe:	af00      	add	r7, sp, #0
 8101400:	6078      	str	r0, [r7, #4]
	return -1;
 8101402:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101406:	4618      	mov	r0, r3
 8101408:	370c      	adds	r7, #12
 810140a:	46bd      	mov	sp, r7
 810140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101410:	4770      	bx	lr

08101412 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101412:	b480      	push	{r7}
 8101414:	b083      	sub	sp, #12
 8101416:	af00      	add	r7, sp, #0
 8101418:	6078      	str	r0, [r7, #4]
 810141a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 810141c:	683b      	ldr	r3, [r7, #0]
 810141e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101422:	605a      	str	r2, [r3, #4]
	return 0;
 8101424:	2300      	movs	r3, #0
}
 8101426:	4618      	mov	r0, r3
 8101428:	370c      	adds	r7, #12
 810142a:	46bd      	mov	sp, r7
 810142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101430:	4770      	bx	lr

08101432 <_isatty>:

int _isatty(int file)
{
 8101432:	b480      	push	{r7}
 8101434:	b083      	sub	sp, #12
 8101436:	af00      	add	r7, sp, #0
 8101438:	6078      	str	r0, [r7, #4]
	return 1;
 810143a:	2301      	movs	r3, #1
}
 810143c:	4618      	mov	r0, r3
 810143e:	370c      	adds	r7, #12
 8101440:	46bd      	mov	sp, r7
 8101442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101446:	4770      	bx	lr

08101448 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101448:	b480      	push	{r7}
 810144a:	b085      	sub	sp, #20
 810144c:	af00      	add	r7, sp, #0
 810144e:	60f8      	str	r0, [r7, #12]
 8101450:	60b9      	str	r1, [r7, #8]
 8101452:	607a      	str	r2, [r7, #4]
	return 0;
 8101454:	2300      	movs	r3, #0
}
 8101456:	4618      	mov	r0, r3
 8101458:	3714      	adds	r7, #20
 810145a:	46bd      	mov	sp, r7
 810145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101460:	4770      	bx	lr
	...

08101464 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101464:	b580      	push	{r7, lr}
 8101466:	b086      	sub	sp, #24
 8101468:	af00      	add	r7, sp, #0
 810146a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 810146c:	4a14      	ldr	r2, [pc, #80]	; (81014c0 <_sbrk+0x5c>)
 810146e:	4b15      	ldr	r3, [pc, #84]	; (81014c4 <_sbrk+0x60>)
 8101470:	1ad3      	subs	r3, r2, r3
 8101472:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101474:	697b      	ldr	r3, [r7, #20]
 8101476:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101478:	4b13      	ldr	r3, [pc, #76]	; (81014c8 <_sbrk+0x64>)
 810147a:	681b      	ldr	r3, [r3, #0]
 810147c:	2b00      	cmp	r3, #0
 810147e:	d102      	bne.n	8101486 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101480:	4b11      	ldr	r3, [pc, #68]	; (81014c8 <_sbrk+0x64>)
 8101482:	4a12      	ldr	r2, [pc, #72]	; (81014cc <_sbrk+0x68>)
 8101484:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101486:	4b10      	ldr	r3, [pc, #64]	; (81014c8 <_sbrk+0x64>)
 8101488:	681a      	ldr	r2, [r3, #0]
 810148a:	687b      	ldr	r3, [r7, #4]
 810148c:	4413      	add	r3, r2
 810148e:	693a      	ldr	r2, [r7, #16]
 8101490:	429a      	cmp	r2, r3
 8101492:	d207      	bcs.n	81014a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101494:	f004 fbae 	bl	8105bf4 <__errno>
 8101498:	4603      	mov	r3, r0
 810149a:	220c      	movs	r2, #12
 810149c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810149e:	f04f 33ff 	mov.w	r3, #4294967295
 81014a2:	e009      	b.n	81014b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81014a4:	4b08      	ldr	r3, [pc, #32]	; (81014c8 <_sbrk+0x64>)
 81014a6:	681b      	ldr	r3, [r3, #0]
 81014a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81014aa:	4b07      	ldr	r3, [pc, #28]	; (81014c8 <_sbrk+0x64>)
 81014ac:	681a      	ldr	r2, [r3, #0]
 81014ae:	687b      	ldr	r3, [r7, #4]
 81014b0:	4413      	add	r3, r2
 81014b2:	4a05      	ldr	r2, [pc, #20]	; (81014c8 <_sbrk+0x64>)
 81014b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81014b6:	68fb      	ldr	r3, [r7, #12]
}
 81014b8:	4618      	mov	r0, r3
 81014ba:	3718      	adds	r7, #24
 81014bc:	46bd      	mov	sp, r7
 81014be:	bd80      	pop	{r7, pc}
 81014c0:	10048000 	.word	0x10048000
 81014c4:	00000400 	.word	0x00000400
 81014c8:	10000098 	.word	0x10000098
 81014cc:	10000290 	.word	0x10000290

081014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81014d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81014d4:	f7ff f8d0 	bl	8100678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81014d8:	480c      	ldr	r0, [pc, #48]	; (810150c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81014da:	490d      	ldr	r1, [pc, #52]	; (8101510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81014dc:	4a0d      	ldr	r2, [pc, #52]	; (8101514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81014e0:	e002      	b.n	81014e8 <LoopCopyDataInit>

081014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81014e6:	3304      	adds	r3, #4

081014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81014ec:	d3f9      	bcc.n	81014e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81014ee:	4a0a      	ldr	r2, [pc, #40]	; (8101518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81014f0:	4c0a      	ldr	r4, [pc, #40]	; (810151c <LoopFillZerobss+0x22>)
  movs r3, #0
 81014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 81014f4:	e001      	b.n	81014fa <LoopFillZerobss>

081014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81014f8:	3204      	adds	r2, #4

081014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81014fc:	d3fb      	bcc.n	81014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81014fe:	f004 fb7f 	bl	8105c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101502:	f7ff fb15 	bl	8100b30 <main>
  bx  lr
 8101506:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101508:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810150c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101510:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8101514:	08106e08 	.word	0x08106e08
  ldr r2, =_sbss
 8101518:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 810151c:	1000028c 	.word	0x1000028c

08101520 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101520:	e7fe      	b.n	8101520 <ADC3_IRQHandler>
	...

08101524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101524:	b580      	push	{r7, lr}
 8101526:	b082      	sub	sp, #8
 8101528:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810152a:	4b28      	ldr	r3, [pc, #160]	; (81015cc <HAL_Init+0xa8>)
 810152c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101530:	4a26      	ldr	r2, [pc, #152]	; (81015cc <HAL_Init+0xa8>)
 8101532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101536:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810153a:	4b24      	ldr	r3, [pc, #144]	; (81015cc <HAL_Init+0xa8>)
 810153c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101544:	603b      	str	r3, [r7, #0]
 8101546:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101548:	4b21      	ldr	r3, [pc, #132]	; (81015d0 <HAL_Init+0xac>)
 810154a:	681b      	ldr	r3, [r3, #0]
 810154c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101550:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101554:	4a1e      	ldr	r2, [pc, #120]	; (81015d0 <HAL_Init+0xac>)
 8101556:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810155a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 810155c:	4b1c      	ldr	r3, [pc, #112]	; (81015d0 <HAL_Init+0xac>)
 810155e:	681b      	ldr	r3, [r3, #0]
 8101560:	4a1b      	ldr	r2, [pc, #108]	; (81015d0 <HAL_Init+0xac>)
 8101562:	f043 0301 	orr.w	r3, r3, #1
 8101566:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101568:	2003      	movs	r0, #3
 810156a:	f000 f983 	bl	8101874 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810156e:	f000 fc53 	bl	8101e18 <HAL_RCC_GetSysClockFreq>
 8101572:	4602      	mov	r2, r0
 8101574:	4b15      	ldr	r3, [pc, #84]	; (81015cc <HAL_Init+0xa8>)
 8101576:	699b      	ldr	r3, [r3, #24]
 8101578:	0a1b      	lsrs	r3, r3, #8
 810157a:	f003 030f 	and.w	r3, r3, #15
 810157e:	4915      	ldr	r1, [pc, #84]	; (81015d4 <HAL_Init+0xb0>)
 8101580:	5ccb      	ldrb	r3, [r1, r3]
 8101582:	f003 031f 	and.w	r3, r3, #31
 8101586:	fa22 f303 	lsr.w	r3, r2, r3
 810158a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810158c:	4b0f      	ldr	r3, [pc, #60]	; (81015cc <HAL_Init+0xa8>)
 810158e:	699b      	ldr	r3, [r3, #24]
 8101590:	f003 030f 	and.w	r3, r3, #15
 8101594:	4a0f      	ldr	r2, [pc, #60]	; (81015d4 <HAL_Init+0xb0>)
 8101596:	5cd3      	ldrb	r3, [r2, r3]
 8101598:	f003 031f 	and.w	r3, r3, #31
 810159c:	687a      	ldr	r2, [r7, #4]
 810159e:	fa22 f303 	lsr.w	r3, r2, r3
 81015a2:	4a0d      	ldr	r2, [pc, #52]	; (81015d8 <HAL_Init+0xb4>)
 81015a4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81015a6:	4b0c      	ldr	r3, [pc, #48]	; (81015d8 <HAL_Init+0xb4>)
 81015a8:	681b      	ldr	r3, [r3, #0]
 81015aa:	4a0c      	ldr	r2, [pc, #48]	; (81015dc <HAL_Init+0xb8>)
 81015ac:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81015ae:	2000      	movs	r0, #0
 81015b0:	f000 f816 	bl	81015e0 <HAL_InitTick>
 81015b4:	4603      	mov	r3, r0
 81015b6:	2b00      	cmp	r3, #0
 81015b8:	d001      	beq.n	81015be <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81015ba:	2301      	movs	r3, #1
 81015bc:	e002      	b.n	81015c4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81015be:	f7ff fdb3 	bl	8101128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81015c2:	2300      	movs	r3, #0
}
 81015c4:	4618      	mov	r0, r3
 81015c6:	3708      	adds	r7, #8
 81015c8:	46bd      	mov	sp, r7
 81015ca:	bd80      	pop	{r7, pc}
 81015cc:	58024400 	.word	0x58024400
 81015d0:	40024400 	.word	0x40024400
 81015d4:	08106d28 	.word	0x08106d28
 81015d8:	10000004 	.word	0x10000004
 81015dc:	10000000 	.word	0x10000000

081015e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81015e0:	b580      	push	{r7, lr}
 81015e2:	b082      	sub	sp, #8
 81015e4:	af00      	add	r7, sp, #0
 81015e6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81015e8:	4b15      	ldr	r3, [pc, #84]	; (8101640 <HAL_InitTick+0x60>)
 81015ea:	781b      	ldrb	r3, [r3, #0]
 81015ec:	2b00      	cmp	r3, #0
 81015ee:	d101      	bne.n	81015f4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81015f0:	2301      	movs	r3, #1
 81015f2:	e021      	b.n	8101638 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81015f4:	4b13      	ldr	r3, [pc, #76]	; (8101644 <HAL_InitTick+0x64>)
 81015f6:	681a      	ldr	r2, [r3, #0]
 81015f8:	4b11      	ldr	r3, [pc, #68]	; (8101640 <HAL_InitTick+0x60>)
 81015fa:	781b      	ldrb	r3, [r3, #0]
 81015fc:	4619      	mov	r1, r3
 81015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101602:	fbb3 f3f1 	udiv	r3, r3, r1
 8101606:	fbb2 f3f3 	udiv	r3, r2, r3
 810160a:	4618      	mov	r0, r3
 810160c:	f000 f965 	bl	81018da <HAL_SYSTICK_Config>
 8101610:	4603      	mov	r3, r0
 8101612:	2b00      	cmp	r3, #0
 8101614:	d001      	beq.n	810161a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101616:	2301      	movs	r3, #1
 8101618:	e00e      	b.n	8101638 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810161a:	687b      	ldr	r3, [r7, #4]
 810161c:	2b0f      	cmp	r3, #15
 810161e:	d80a      	bhi.n	8101636 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101620:	2200      	movs	r2, #0
 8101622:	6879      	ldr	r1, [r7, #4]
 8101624:	f04f 30ff 	mov.w	r0, #4294967295
 8101628:	f000 f92f 	bl	810188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810162c:	4a06      	ldr	r2, [pc, #24]	; (8101648 <HAL_InitTick+0x68>)
 810162e:	687b      	ldr	r3, [r7, #4]
 8101630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101632:	2300      	movs	r3, #0
 8101634:	e000      	b.n	8101638 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101636:	2301      	movs	r3, #1
}
 8101638:	4618      	mov	r0, r3
 810163a:	3708      	adds	r7, #8
 810163c:	46bd      	mov	sp, r7
 810163e:	bd80      	pop	{r7, pc}
 8101640:	1000000c 	.word	0x1000000c
 8101644:	10000000 	.word	0x10000000
 8101648:	10000008 	.word	0x10000008

0810164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810164c:	b480      	push	{r7}
 810164e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101650:	4b06      	ldr	r3, [pc, #24]	; (810166c <HAL_IncTick+0x20>)
 8101652:	781b      	ldrb	r3, [r3, #0]
 8101654:	461a      	mov	r2, r3
 8101656:	4b06      	ldr	r3, [pc, #24]	; (8101670 <HAL_IncTick+0x24>)
 8101658:	681b      	ldr	r3, [r3, #0]
 810165a:	4413      	add	r3, r2
 810165c:	4a04      	ldr	r2, [pc, #16]	; (8101670 <HAL_IncTick+0x24>)
 810165e:	6013      	str	r3, [r2, #0]
}
 8101660:	bf00      	nop
 8101662:	46bd      	mov	sp, r7
 8101664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101668:	4770      	bx	lr
 810166a:	bf00      	nop
 810166c:	1000000c 	.word	0x1000000c
 8101670:	10000278 	.word	0x10000278

08101674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101674:	b480      	push	{r7}
 8101676:	af00      	add	r7, sp, #0
  return uwTick;
 8101678:	4b03      	ldr	r3, [pc, #12]	; (8101688 <HAL_GetTick+0x14>)
 810167a:	681b      	ldr	r3, [r3, #0]
}
 810167c:	4618      	mov	r0, r3
 810167e:	46bd      	mov	sp, r7
 8101680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101684:	4770      	bx	lr
 8101686:	bf00      	nop
 8101688:	10000278 	.word	0x10000278

0810168c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 810168c:	b580      	push	{r7, lr}
 810168e:	b084      	sub	sp, #16
 8101690:	af00      	add	r7, sp, #0
 8101692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101694:	f7ff ffee 	bl	8101674 <HAL_GetTick>
 8101698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 810169a:	687b      	ldr	r3, [r7, #4]
 810169c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810169e:	68fb      	ldr	r3, [r7, #12]
 81016a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81016a4:	d005      	beq.n	81016b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81016a6:	4b0a      	ldr	r3, [pc, #40]	; (81016d0 <HAL_Delay+0x44>)
 81016a8:	781b      	ldrb	r3, [r3, #0]
 81016aa:	461a      	mov	r2, r3
 81016ac:	68fb      	ldr	r3, [r7, #12]
 81016ae:	4413      	add	r3, r2
 81016b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81016b2:	bf00      	nop
 81016b4:	f7ff ffde 	bl	8101674 <HAL_GetTick>
 81016b8:	4602      	mov	r2, r0
 81016ba:	68bb      	ldr	r3, [r7, #8]
 81016bc:	1ad3      	subs	r3, r2, r3
 81016be:	68fa      	ldr	r2, [r7, #12]
 81016c0:	429a      	cmp	r2, r3
 81016c2:	d8f7      	bhi.n	81016b4 <HAL_Delay+0x28>
  {
  }
}
 81016c4:	bf00      	nop
 81016c6:	bf00      	nop
 81016c8:	3710      	adds	r7, #16
 81016ca:	46bd      	mov	sp, r7
 81016cc:	bd80      	pop	{r7, pc}
 81016ce:	bf00      	nop
 81016d0:	1000000c 	.word	0x1000000c

081016d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81016d4:	b480      	push	{r7}
 81016d6:	b085      	sub	sp, #20
 81016d8:	af00      	add	r7, sp, #0
 81016da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81016dc:	687b      	ldr	r3, [r7, #4]
 81016de:	f003 0307 	and.w	r3, r3, #7
 81016e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81016e4:	4b0c      	ldr	r3, [pc, #48]	; (8101718 <__NVIC_SetPriorityGrouping+0x44>)
 81016e6:	68db      	ldr	r3, [r3, #12]
 81016e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81016ea:	68ba      	ldr	r2, [r7, #8]
 81016ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81016f0:	4013      	ands	r3, r2
 81016f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81016f4:	68fb      	ldr	r3, [r7, #12]
 81016f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81016f8:	68bb      	ldr	r3, [r7, #8]
 81016fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81016fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101706:	4a04      	ldr	r2, [pc, #16]	; (8101718 <__NVIC_SetPriorityGrouping+0x44>)
 8101708:	68bb      	ldr	r3, [r7, #8]
 810170a:	60d3      	str	r3, [r2, #12]
}
 810170c:	bf00      	nop
 810170e:	3714      	adds	r7, #20
 8101710:	46bd      	mov	sp, r7
 8101712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101716:	4770      	bx	lr
 8101718:	e000ed00 	.word	0xe000ed00

0810171c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810171c:	b480      	push	{r7}
 810171e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101720:	4b04      	ldr	r3, [pc, #16]	; (8101734 <__NVIC_GetPriorityGrouping+0x18>)
 8101722:	68db      	ldr	r3, [r3, #12]
 8101724:	0a1b      	lsrs	r3, r3, #8
 8101726:	f003 0307 	and.w	r3, r3, #7
}
 810172a:	4618      	mov	r0, r3
 810172c:	46bd      	mov	sp, r7
 810172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101732:	4770      	bx	lr
 8101734:	e000ed00 	.word	0xe000ed00

08101738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101738:	b480      	push	{r7}
 810173a:	b083      	sub	sp, #12
 810173c:	af00      	add	r7, sp, #0
 810173e:	4603      	mov	r3, r0
 8101740:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101746:	2b00      	cmp	r3, #0
 8101748:	db0b      	blt.n	8101762 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810174a:	88fb      	ldrh	r3, [r7, #6]
 810174c:	f003 021f 	and.w	r2, r3, #31
 8101750:	4907      	ldr	r1, [pc, #28]	; (8101770 <__NVIC_EnableIRQ+0x38>)
 8101752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101756:	095b      	lsrs	r3, r3, #5
 8101758:	2001      	movs	r0, #1
 810175a:	fa00 f202 	lsl.w	r2, r0, r2
 810175e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101762:	bf00      	nop
 8101764:	370c      	adds	r7, #12
 8101766:	46bd      	mov	sp, r7
 8101768:	f85d 7b04 	ldr.w	r7, [sp], #4
 810176c:	4770      	bx	lr
 810176e:	bf00      	nop
 8101770:	e000e100 	.word	0xe000e100

08101774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101774:	b480      	push	{r7}
 8101776:	b083      	sub	sp, #12
 8101778:	af00      	add	r7, sp, #0
 810177a:	4603      	mov	r3, r0
 810177c:	6039      	str	r1, [r7, #0]
 810177e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101784:	2b00      	cmp	r3, #0
 8101786:	db0a      	blt.n	810179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101788:	683b      	ldr	r3, [r7, #0]
 810178a:	b2da      	uxtb	r2, r3
 810178c:	490c      	ldr	r1, [pc, #48]	; (81017c0 <__NVIC_SetPriority+0x4c>)
 810178e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101792:	0112      	lsls	r2, r2, #4
 8101794:	b2d2      	uxtb	r2, r2
 8101796:	440b      	add	r3, r1
 8101798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810179c:	e00a      	b.n	81017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810179e:	683b      	ldr	r3, [r7, #0]
 81017a0:	b2da      	uxtb	r2, r3
 81017a2:	4908      	ldr	r1, [pc, #32]	; (81017c4 <__NVIC_SetPriority+0x50>)
 81017a4:	88fb      	ldrh	r3, [r7, #6]
 81017a6:	f003 030f 	and.w	r3, r3, #15
 81017aa:	3b04      	subs	r3, #4
 81017ac:	0112      	lsls	r2, r2, #4
 81017ae:	b2d2      	uxtb	r2, r2
 81017b0:	440b      	add	r3, r1
 81017b2:	761a      	strb	r2, [r3, #24]
}
 81017b4:	bf00      	nop
 81017b6:	370c      	adds	r7, #12
 81017b8:	46bd      	mov	sp, r7
 81017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017be:	4770      	bx	lr
 81017c0:	e000e100 	.word	0xe000e100
 81017c4:	e000ed00 	.word	0xe000ed00

081017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81017c8:	b480      	push	{r7}
 81017ca:	b089      	sub	sp, #36	; 0x24
 81017cc:	af00      	add	r7, sp, #0
 81017ce:	60f8      	str	r0, [r7, #12]
 81017d0:	60b9      	str	r1, [r7, #8]
 81017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81017d4:	68fb      	ldr	r3, [r7, #12]
 81017d6:	f003 0307 	and.w	r3, r3, #7
 81017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81017dc:	69fb      	ldr	r3, [r7, #28]
 81017de:	f1c3 0307 	rsb	r3, r3, #7
 81017e2:	2b04      	cmp	r3, #4
 81017e4:	bf28      	it	cs
 81017e6:	2304      	movcs	r3, #4
 81017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81017ea:	69fb      	ldr	r3, [r7, #28]
 81017ec:	3304      	adds	r3, #4
 81017ee:	2b06      	cmp	r3, #6
 81017f0:	d902      	bls.n	81017f8 <NVIC_EncodePriority+0x30>
 81017f2:	69fb      	ldr	r3, [r7, #28]
 81017f4:	3b03      	subs	r3, #3
 81017f6:	e000      	b.n	81017fa <NVIC_EncodePriority+0x32>
 81017f8:	2300      	movs	r3, #0
 81017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8101800:	69bb      	ldr	r3, [r7, #24]
 8101802:	fa02 f303 	lsl.w	r3, r2, r3
 8101806:	43da      	mvns	r2, r3
 8101808:	68bb      	ldr	r3, [r7, #8]
 810180a:	401a      	ands	r2, r3
 810180c:	697b      	ldr	r3, [r7, #20]
 810180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101810:	f04f 31ff 	mov.w	r1, #4294967295
 8101814:	697b      	ldr	r3, [r7, #20]
 8101816:	fa01 f303 	lsl.w	r3, r1, r3
 810181a:	43d9      	mvns	r1, r3
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101820:	4313      	orrs	r3, r2
         );
}
 8101822:	4618      	mov	r0, r3
 8101824:	3724      	adds	r7, #36	; 0x24
 8101826:	46bd      	mov	sp, r7
 8101828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810182c:	4770      	bx	lr
	...

08101830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101830:	b580      	push	{r7, lr}
 8101832:	b082      	sub	sp, #8
 8101834:	af00      	add	r7, sp, #0
 8101836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101838:	687b      	ldr	r3, [r7, #4]
 810183a:	3b01      	subs	r3, #1
 810183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101840:	d301      	bcc.n	8101846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101842:	2301      	movs	r3, #1
 8101844:	e00f      	b.n	8101866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101846:	4a0a      	ldr	r2, [pc, #40]	; (8101870 <SysTick_Config+0x40>)
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	3b01      	subs	r3, #1
 810184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810184e:	210f      	movs	r1, #15
 8101850:	f04f 30ff 	mov.w	r0, #4294967295
 8101854:	f7ff ff8e 	bl	8101774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101858:	4b05      	ldr	r3, [pc, #20]	; (8101870 <SysTick_Config+0x40>)
 810185a:	2200      	movs	r2, #0
 810185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810185e:	4b04      	ldr	r3, [pc, #16]	; (8101870 <SysTick_Config+0x40>)
 8101860:	2207      	movs	r2, #7
 8101862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101864:	2300      	movs	r3, #0
}
 8101866:	4618      	mov	r0, r3
 8101868:	3708      	adds	r7, #8
 810186a:	46bd      	mov	sp, r7
 810186c:	bd80      	pop	{r7, pc}
 810186e:	bf00      	nop
 8101870:	e000e010 	.word	0xe000e010

08101874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101874:	b580      	push	{r7, lr}
 8101876:	b082      	sub	sp, #8
 8101878:	af00      	add	r7, sp, #0
 810187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810187c:	6878      	ldr	r0, [r7, #4]
 810187e:	f7ff ff29 	bl	81016d4 <__NVIC_SetPriorityGrouping>
}
 8101882:	bf00      	nop
 8101884:	3708      	adds	r7, #8
 8101886:	46bd      	mov	sp, r7
 8101888:	bd80      	pop	{r7, pc}

0810188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810188a:	b580      	push	{r7, lr}
 810188c:	b086      	sub	sp, #24
 810188e:	af00      	add	r7, sp, #0
 8101890:	4603      	mov	r3, r0
 8101892:	60b9      	str	r1, [r7, #8]
 8101894:	607a      	str	r2, [r7, #4]
 8101896:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101898:	f7ff ff40 	bl	810171c <__NVIC_GetPriorityGrouping>
 810189c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810189e:	687a      	ldr	r2, [r7, #4]
 81018a0:	68b9      	ldr	r1, [r7, #8]
 81018a2:	6978      	ldr	r0, [r7, #20]
 81018a4:	f7ff ff90 	bl	81017c8 <NVIC_EncodePriority>
 81018a8:	4602      	mov	r2, r0
 81018aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81018ae:	4611      	mov	r1, r2
 81018b0:	4618      	mov	r0, r3
 81018b2:	f7ff ff5f 	bl	8101774 <__NVIC_SetPriority>
}
 81018b6:	bf00      	nop
 81018b8:	3718      	adds	r7, #24
 81018ba:	46bd      	mov	sp, r7
 81018bc:	bd80      	pop	{r7, pc}

081018be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81018be:	b580      	push	{r7, lr}
 81018c0:	b082      	sub	sp, #8
 81018c2:	af00      	add	r7, sp, #0
 81018c4:	4603      	mov	r3, r0
 81018c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81018c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81018cc:	4618      	mov	r0, r3
 81018ce:	f7ff ff33 	bl	8101738 <__NVIC_EnableIRQ>
}
 81018d2:	bf00      	nop
 81018d4:	3708      	adds	r7, #8
 81018d6:	46bd      	mov	sp, r7
 81018d8:	bd80      	pop	{r7, pc}

081018da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81018da:	b580      	push	{r7, lr}
 81018dc:	b082      	sub	sp, #8
 81018de:	af00      	add	r7, sp, #0
 81018e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81018e2:	6878      	ldr	r0, [r7, #4]
 81018e4:	f7ff ffa4 	bl	8101830 <SysTick_Config>
 81018e8:	4603      	mov	r3, r0
}
 81018ea:	4618      	mov	r0, r3
 81018ec:	3708      	adds	r7, #8
 81018ee:	46bd      	mov	sp, r7
 81018f0:	bd80      	pop	{r7, pc}
	...

081018f4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81018f4:	b480      	push	{r7}
 81018f6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81018f8:	4b07      	ldr	r3, [pc, #28]	; (8101918 <HAL_GetCurrentCPUID+0x24>)
 81018fa:	681b      	ldr	r3, [r3, #0]
 81018fc:	091b      	lsrs	r3, r3, #4
 81018fe:	f003 030f 	and.w	r3, r3, #15
 8101902:	2b07      	cmp	r3, #7
 8101904:	d101      	bne.n	810190a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101906:	2303      	movs	r3, #3
 8101908:	e000      	b.n	810190c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810190a:	2301      	movs	r3, #1
  }
}
 810190c:	4618      	mov	r0, r3
 810190e:	46bd      	mov	sp, r7
 8101910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101914:	4770      	bx	lr
 8101916:	bf00      	nop
 8101918:	e000ed00 	.word	0xe000ed00

0810191c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810191c:	b480      	push	{r7}
 810191e:	b089      	sub	sp, #36	; 0x24
 8101920:	af00      	add	r7, sp, #0
 8101922:	6078      	str	r0, [r7, #4]
 8101924:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101926:	2300      	movs	r3, #0
 8101928:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810192a:	4b89      	ldr	r3, [pc, #548]	; (8101b50 <HAL_GPIO_Init+0x234>)
 810192c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810192e:	e194      	b.n	8101c5a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101930:	683b      	ldr	r3, [r7, #0]
 8101932:	681a      	ldr	r2, [r3, #0]
 8101934:	2101      	movs	r1, #1
 8101936:	69fb      	ldr	r3, [r7, #28]
 8101938:	fa01 f303 	lsl.w	r3, r1, r3
 810193c:	4013      	ands	r3, r2
 810193e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101940:	693b      	ldr	r3, [r7, #16]
 8101942:	2b00      	cmp	r3, #0
 8101944:	f000 8186 	beq.w	8101c54 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101948:	683b      	ldr	r3, [r7, #0]
 810194a:	685b      	ldr	r3, [r3, #4]
 810194c:	f003 0303 	and.w	r3, r3, #3
 8101950:	2b01      	cmp	r3, #1
 8101952:	d005      	beq.n	8101960 <HAL_GPIO_Init+0x44>
 8101954:	683b      	ldr	r3, [r7, #0]
 8101956:	685b      	ldr	r3, [r3, #4]
 8101958:	f003 0303 	and.w	r3, r3, #3
 810195c:	2b02      	cmp	r3, #2
 810195e:	d130      	bne.n	81019c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101960:	687b      	ldr	r3, [r7, #4]
 8101962:	689b      	ldr	r3, [r3, #8]
 8101964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101966:	69fb      	ldr	r3, [r7, #28]
 8101968:	005b      	lsls	r3, r3, #1
 810196a:	2203      	movs	r2, #3
 810196c:	fa02 f303 	lsl.w	r3, r2, r3
 8101970:	43db      	mvns	r3, r3
 8101972:	69ba      	ldr	r2, [r7, #24]
 8101974:	4013      	ands	r3, r2
 8101976:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101978:	683b      	ldr	r3, [r7, #0]
 810197a:	68da      	ldr	r2, [r3, #12]
 810197c:	69fb      	ldr	r3, [r7, #28]
 810197e:	005b      	lsls	r3, r3, #1
 8101980:	fa02 f303 	lsl.w	r3, r2, r3
 8101984:	69ba      	ldr	r2, [r7, #24]
 8101986:	4313      	orrs	r3, r2
 8101988:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810198a:	687b      	ldr	r3, [r7, #4]
 810198c:	69ba      	ldr	r2, [r7, #24]
 810198e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101990:	687b      	ldr	r3, [r7, #4]
 8101992:	685b      	ldr	r3, [r3, #4]
 8101994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101996:	2201      	movs	r2, #1
 8101998:	69fb      	ldr	r3, [r7, #28]
 810199a:	fa02 f303 	lsl.w	r3, r2, r3
 810199e:	43db      	mvns	r3, r3
 81019a0:	69ba      	ldr	r2, [r7, #24]
 81019a2:	4013      	ands	r3, r2
 81019a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81019a6:	683b      	ldr	r3, [r7, #0]
 81019a8:	685b      	ldr	r3, [r3, #4]
 81019aa:	091b      	lsrs	r3, r3, #4
 81019ac:	f003 0201 	and.w	r2, r3, #1
 81019b0:	69fb      	ldr	r3, [r7, #28]
 81019b2:	fa02 f303 	lsl.w	r3, r2, r3
 81019b6:	69ba      	ldr	r2, [r7, #24]
 81019b8:	4313      	orrs	r3, r2
 81019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81019bc:	687b      	ldr	r3, [r7, #4]
 81019be:	69ba      	ldr	r2, [r7, #24]
 81019c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81019c2:	683b      	ldr	r3, [r7, #0]
 81019c4:	685b      	ldr	r3, [r3, #4]
 81019c6:	f003 0303 	and.w	r3, r3, #3
 81019ca:	2b03      	cmp	r3, #3
 81019cc:	d017      	beq.n	81019fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81019ce:	687b      	ldr	r3, [r7, #4]
 81019d0:	68db      	ldr	r3, [r3, #12]
 81019d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81019d4:	69fb      	ldr	r3, [r7, #28]
 81019d6:	005b      	lsls	r3, r3, #1
 81019d8:	2203      	movs	r2, #3
 81019da:	fa02 f303 	lsl.w	r3, r2, r3
 81019de:	43db      	mvns	r3, r3
 81019e0:	69ba      	ldr	r2, [r7, #24]
 81019e2:	4013      	ands	r3, r2
 81019e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81019e6:	683b      	ldr	r3, [r7, #0]
 81019e8:	689a      	ldr	r2, [r3, #8]
 81019ea:	69fb      	ldr	r3, [r7, #28]
 81019ec:	005b      	lsls	r3, r3, #1
 81019ee:	fa02 f303 	lsl.w	r3, r2, r3
 81019f2:	69ba      	ldr	r2, [r7, #24]
 81019f4:	4313      	orrs	r3, r2
 81019f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	69ba      	ldr	r2, [r7, #24]
 81019fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81019fe:	683b      	ldr	r3, [r7, #0]
 8101a00:	685b      	ldr	r3, [r3, #4]
 8101a02:	f003 0303 	and.w	r3, r3, #3
 8101a06:	2b02      	cmp	r3, #2
 8101a08:	d123      	bne.n	8101a52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101a0a:	69fb      	ldr	r3, [r7, #28]
 8101a0c:	08da      	lsrs	r2, r3, #3
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	3208      	adds	r2, #8
 8101a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101a18:	69fb      	ldr	r3, [r7, #28]
 8101a1a:	f003 0307 	and.w	r3, r3, #7
 8101a1e:	009b      	lsls	r3, r3, #2
 8101a20:	220f      	movs	r2, #15
 8101a22:	fa02 f303 	lsl.w	r3, r2, r3
 8101a26:	43db      	mvns	r3, r3
 8101a28:	69ba      	ldr	r2, [r7, #24]
 8101a2a:	4013      	ands	r3, r2
 8101a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101a2e:	683b      	ldr	r3, [r7, #0]
 8101a30:	691a      	ldr	r2, [r3, #16]
 8101a32:	69fb      	ldr	r3, [r7, #28]
 8101a34:	f003 0307 	and.w	r3, r3, #7
 8101a38:	009b      	lsls	r3, r3, #2
 8101a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a3e:	69ba      	ldr	r2, [r7, #24]
 8101a40:	4313      	orrs	r3, r2
 8101a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101a44:	69fb      	ldr	r3, [r7, #28]
 8101a46:	08da      	lsrs	r2, r3, #3
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	3208      	adds	r2, #8
 8101a4c:	69b9      	ldr	r1, [r7, #24]
 8101a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101a52:	687b      	ldr	r3, [r7, #4]
 8101a54:	681b      	ldr	r3, [r3, #0]
 8101a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101a58:	69fb      	ldr	r3, [r7, #28]
 8101a5a:	005b      	lsls	r3, r3, #1
 8101a5c:	2203      	movs	r2, #3
 8101a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8101a62:	43db      	mvns	r3, r3
 8101a64:	69ba      	ldr	r2, [r7, #24]
 8101a66:	4013      	ands	r3, r2
 8101a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101a6a:	683b      	ldr	r3, [r7, #0]
 8101a6c:	685b      	ldr	r3, [r3, #4]
 8101a6e:	f003 0203 	and.w	r2, r3, #3
 8101a72:	69fb      	ldr	r3, [r7, #28]
 8101a74:	005b      	lsls	r3, r3, #1
 8101a76:	fa02 f303 	lsl.w	r3, r2, r3
 8101a7a:	69ba      	ldr	r2, [r7, #24]
 8101a7c:	4313      	orrs	r3, r2
 8101a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101a80:	687b      	ldr	r3, [r7, #4]
 8101a82:	69ba      	ldr	r2, [r7, #24]
 8101a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101a86:	683b      	ldr	r3, [r7, #0]
 8101a88:	685b      	ldr	r3, [r3, #4]
 8101a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101a8e:	2b00      	cmp	r3, #0
 8101a90:	f000 80e0 	beq.w	8101c54 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a94:	4b2f      	ldr	r3, [pc, #188]	; (8101b54 <HAL_GPIO_Init+0x238>)
 8101a96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a9a:	4a2e      	ldr	r2, [pc, #184]	; (8101b54 <HAL_GPIO_Init+0x238>)
 8101a9c:	f043 0302 	orr.w	r3, r3, #2
 8101aa0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101aa4:	4b2b      	ldr	r3, [pc, #172]	; (8101b54 <HAL_GPIO_Init+0x238>)
 8101aa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101aaa:	f003 0302 	and.w	r3, r3, #2
 8101aae:	60fb      	str	r3, [r7, #12]
 8101ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101ab2:	4a29      	ldr	r2, [pc, #164]	; (8101b58 <HAL_GPIO_Init+0x23c>)
 8101ab4:	69fb      	ldr	r3, [r7, #28]
 8101ab6:	089b      	lsrs	r3, r3, #2
 8101ab8:	3302      	adds	r3, #2
 8101aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101ac0:	69fb      	ldr	r3, [r7, #28]
 8101ac2:	f003 0303 	and.w	r3, r3, #3
 8101ac6:	009b      	lsls	r3, r3, #2
 8101ac8:	220f      	movs	r2, #15
 8101aca:	fa02 f303 	lsl.w	r3, r2, r3
 8101ace:	43db      	mvns	r3, r3
 8101ad0:	69ba      	ldr	r2, [r7, #24]
 8101ad2:	4013      	ands	r3, r2
 8101ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101ad6:	687b      	ldr	r3, [r7, #4]
 8101ad8:	4a20      	ldr	r2, [pc, #128]	; (8101b5c <HAL_GPIO_Init+0x240>)
 8101ada:	4293      	cmp	r3, r2
 8101adc:	d052      	beq.n	8101b84 <HAL_GPIO_Init+0x268>
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	4a1f      	ldr	r2, [pc, #124]	; (8101b60 <HAL_GPIO_Init+0x244>)
 8101ae2:	4293      	cmp	r3, r2
 8101ae4:	d031      	beq.n	8101b4a <HAL_GPIO_Init+0x22e>
 8101ae6:	687b      	ldr	r3, [r7, #4]
 8101ae8:	4a1e      	ldr	r2, [pc, #120]	; (8101b64 <HAL_GPIO_Init+0x248>)
 8101aea:	4293      	cmp	r3, r2
 8101aec:	d02b      	beq.n	8101b46 <HAL_GPIO_Init+0x22a>
 8101aee:	687b      	ldr	r3, [r7, #4]
 8101af0:	4a1d      	ldr	r2, [pc, #116]	; (8101b68 <HAL_GPIO_Init+0x24c>)
 8101af2:	4293      	cmp	r3, r2
 8101af4:	d025      	beq.n	8101b42 <HAL_GPIO_Init+0x226>
 8101af6:	687b      	ldr	r3, [r7, #4]
 8101af8:	4a1c      	ldr	r2, [pc, #112]	; (8101b6c <HAL_GPIO_Init+0x250>)
 8101afa:	4293      	cmp	r3, r2
 8101afc:	d01f      	beq.n	8101b3e <HAL_GPIO_Init+0x222>
 8101afe:	687b      	ldr	r3, [r7, #4]
 8101b00:	4a1b      	ldr	r2, [pc, #108]	; (8101b70 <HAL_GPIO_Init+0x254>)
 8101b02:	4293      	cmp	r3, r2
 8101b04:	d019      	beq.n	8101b3a <HAL_GPIO_Init+0x21e>
 8101b06:	687b      	ldr	r3, [r7, #4]
 8101b08:	4a1a      	ldr	r2, [pc, #104]	; (8101b74 <HAL_GPIO_Init+0x258>)
 8101b0a:	4293      	cmp	r3, r2
 8101b0c:	d013      	beq.n	8101b36 <HAL_GPIO_Init+0x21a>
 8101b0e:	687b      	ldr	r3, [r7, #4]
 8101b10:	4a19      	ldr	r2, [pc, #100]	; (8101b78 <HAL_GPIO_Init+0x25c>)
 8101b12:	4293      	cmp	r3, r2
 8101b14:	d00d      	beq.n	8101b32 <HAL_GPIO_Init+0x216>
 8101b16:	687b      	ldr	r3, [r7, #4]
 8101b18:	4a18      	ldr	r2, [pc, #96]	; (8101b7c <HAL_GPIO_Init+0x260>)
 8101b1a:	4293      	cmp	r3, r2
 8101b1c:	d007      	beq.n	8101b2e <HAL_GPIO_Init+0x212>
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	4a17      	ldr	r2, [pc, #92]	; (8101b80 <HAL_GPIO_Init+0x264>)
 8101b22:	4293      	cmp	r3, r2
 8101b24:	d101      	bne.n	8101b2a <HAL_GPIO_Init+0x20e>
 8101b26:	2309      	movs	r3, #9
 8101b28:	e02d      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b2a:	230a      	movs	r3, #10
 8101b2c:	e02b      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b2e:	2308      	movs	r3, #8
 8101b30:	e029      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b32:	2307      	movs	r3, #7
 8101b34:	e027      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b36:	2306      	movs	r3, #6
 8101b38:	e025      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b3a:	2305      	movs	r3, #5
 8101b3c:	e023      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b3e:	2304      	movs	r3, #4
 8101b40:	e021      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b42:	2303      	movs	r3, #3
 8101b44:	e01f      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b46:	2302      	movs	r3, #2
 8101b48:	e01d      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b4a:	2301      	movs	r3, #1
 8101b4c:	e01b      	b.n	8101b86 <HAL_GPIO_Init+0x26a>
 8101b4e:	bf00      	nop
 8101b50:	580000c0 	.word	0x580000c0
 8101b54:	58024400 	.word	0x58024400
 8101b58:	58000400 	.word	0x58000400
 8101b5c:	58020000 	.word	0x58020000
 8101b60:	58020400 	.word	0x58020400
 8101b64:	58020800 	.word	0x58020800
 8101b68:	58020c00 	.word	0x58020c00
 8101b6c:	58021000 	.word	0x58021000
 8101b70:	58021400 	.word	0x58021400
 8101b74:	58021800 	.word	0x58021800
 8101b78:	58021c00 	.word	0x58021c00
 8101b7c:	58022000 	.word	0x58022000
 8101b80:	58022400 	.word	0x58022400
 8101b84:	2300      	movs	r3, #0
 8101b86:	69fa      	ldr	r2, [r7, #28]
 8101b88:	f002 0203 	and.w	r2, r2, #3
 8101b8c:	0092      	lsls	r2, r2, #2
 8101b8e:	4093      	lsls	r3, r2
 8101b90:	69ba      	ldr	r2, [r7, #24]
 8101b92:	4313      	orrs	r3, r2
 8101b94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101b96:	4938      	ldr	r1, [pc, #224]	; (8101c78 <HAL_GPIO_Init+0x35c>)
 8101b98:	69fb      	ldr	r3, [r7, #28]
 8101b9a:	089b      	lsrs	r3, r3, #2
 8101b9c:	3302      	adds	r3, #2
 8101b9e:	69ba      	ldr	r2, [r7, #24]
 8101ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101ba8:	681b      	ldr	r3, [r3, #0]
 8101baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101bac:	693b      	ldr	r3, [r7, #16]
 8101bae:	43db      	mvns	r3, r3
 8101bb0:	69ba      	ldr	r2, [r7, #24]
 8101bb2:	4013      	ands	r3, r2
 8101bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101bb6:	683b      	ldr	r3, [r7, #0]
 8101bb8:	685b      	ldr	r3, [r3, #4]
 8101bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101bbe:	2b00      	cmp	r3, #0
 8101bc0:	d003      	beq.n	8101bca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101bc2:	69ba      	ldr	r2, [r7, #24]
 8101bc4:	693b      	ldr	r3, [r7, #16]
 8101bc6:	4313      	orrs	r3, r2
 8101bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101bce:	69bb      	ldr	r3, [r7, #24]
 8101bd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101bd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101bd6:	685b      	ldr	r3, [r3, #4]
 8101bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101bda:	693b      	ldr	r3, [r7, #16]
 8101bdc:	43db      	mvns	r3, r3
 8101bde:	69ba      	ldr	r2, [r7, #24]
 8101be0:	4013      	ands	r3, r2
 8101be2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101be4:	683b      	ldr	r3, [r7, #0]
 8101be6:	685b      	ldr	r3, [r3, #4]
 8101be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101bec:	2b00      	cmp	r3, #0
 8101bee:	d003      	beq.n	8101bf8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101bf0:	69ba      	ldr	r2, [r7, #24]
 8101bf2:	693b      	ldr	r3, [r7, #16]
 8101bf4:	4313      	orrs	r3, r2
 8101bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101bfc:	69bb      	ldr	r3, [r7, #24]
 8101bfe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101c00:	697b      	ldr	r3, [r7, #20]
 8101c02:	685b      	ldr	r3, [r3, #4]
 8101c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c06:	693b      	ldr	r3, [r7, #16]
 8101c08:	43db      	mvns	r3, r3
 8101c0a:	69ba      	ldr	r2, [r7, #24]
 8101c0c:	4013      	ands	r3, r2
 8101c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101c10:	683b      	ldr	r3, [r7, #0]
 8101c12:	685b      	ldr	r3, [r3, #4]
 8101c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101c18:	2b00      	cmp	r3, #0
 8101c1a:	d003      	beq.n	8101c24 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101c1c:	69ba      	ldr	r2, [r7, #24]
 8101c1e:	693b      	ldr	r3, [r7, #16]
 8101c20:	4313      	orrs	r3, r2
 8101c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101c24:	697b      	ldr	r3, [r7, #20]
 8101c26:	69ba      	ldr	r2, [r7, #24]
 8101c28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101c2a:	697b      	ldr	r3, [r7, #20]
 8101c2c:	681b      	ldr	r3, [r3, #0]
 8101c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c30:	693b      	ldr	r3, [r7, #16]
 8101c32:	43db      	mvns	r3, r3
 8101c34:	69ba      	ldr	r2, [r7, #24]
 8101c36:	4013      	ands	r3, r2
 8101c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101c3a:	683b      	ldr	r3, [r7, #0]
 8101c3c:	685b      	ldr	r3, [r3, #4]
 8101c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101c42:	2b00      	cmp	r3, #0
 8101c44:	d003      	beq.n	8101c4e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101c46:	69ba      	ldr	r2, [r7, #24]
 8101c48:	693b      	ldr	r3, [r7, #16]
 8101c4a:	4313      	orrs	r3, r2
 8101c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101c4e:	697b      	ldr	r3, [r7, #20]
 8101c50:	69ba      	ldr	r2, [r7, #24]
 8101c52:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101c54:	69fb      	ldr	r3, [r7, #28]
 8101c56:	3301      	adds	r3, #1
 8101c58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101c5a:	683b      	ldr	r3, [r7, #0]
 8101c5c:	681a      	ldr	r2, [r3, #0]
 8101c5e:	69fb      	ldr	r3, [r7, #28]
 8101c60:	fa22 f303 	lsr.w	r3, r2, r3
 8101c64:	2b00      	cmp	r3, #0
 8101c66:	f47f ae63 	bne.w	8101930 <HAL_GPIO_Init+0x14>
  }
}
 8101c6a:	bf00      	nop
 8101c6c:	bf00      	nop
 8101c6e:	3724      	adds	r7, #36	; 0x24
 8101c70:	46bd      	mov	sp, r7
 8101c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c76:	4770      	bx	lr
 8101c78:	58000400 	.word	0x58000400

08101c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101c7c:	b480      	push	{r7}
 8101c7e:	b083      	sub	sp, #12
 8101c80:	af00      	add	r7, sp, #0
 8101c82:	6078      	str	r0, [r7, #4]
 8101c84:	460b      	mov	r3, r1
 8101c86:	807b      	strh	r3, [r7, #2]
 8101c88:	4613      	mov	r3, r2
 8101c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101c8c:	787b      	ldrb	r3, [r7, #1]
 8101c8e:	2b00      	cmp	r3, #0
 8101c90:	d003      	beq.n	8101c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101c92:	887a      	ldrh	r2, [r7, #2]
 8101c94:	687b      	ldr	r3, [r7, #4]
 8101c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101c98:	e003      	b.n	8101ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101c9a:	887b      	ldrh	r3, [r7, #2]
 8101c9c:	041a      	lsls	r2, r3, #16
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	619a      	str	r2, [r3, #24]
}
 8101ca2:	bf00      	nop
 8101ca4:	370c      	adds	r7, #12
 8101ca6:	46bd      	mov	sp, r7
 8101ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cac:	4770      	bx	lr

08101cae <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8101cae:	b580      	push	{r7, lr}
 8101cb0:	b082      	sub	sp, #8
 8101cb2:	af00      	add	r7, sp, #0
 8101cb4:	4603      	mov	r3, r0
 8101cb6:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8101cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101cbc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101cc0:	88fb      	ldrh	r3, [r7, #6]
 8101cc2:	4013      	ands	r3, r2
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	d008      	beq.n	8101cda <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8101cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101ccc:	88fb      	ldrh	r3, [r7, #6]
 8101cce:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8101cd2:	88fb      	ldrh	r3, [r7, #6]
 8101cd4:	4618      	mov	r0, r3
 8101cd6:	f7ff fa05 	bl	81010e4 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8101cda:	bf00      	nop
 8101cdc:	3708      	adds	r7, #8
 8101cde:	46bd      	mov	sp, r7
 8101ce0:	bd80      	pop	{r7, pc}
	...

08101ce4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101ce4:	b480      	push	{r7}
 8101ce6:	b083      	sub	sp, #12
 8101ce8:	af00      	add	r7, sp, #0
 8101cea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101cec:	4b05      	ldr	r3, [pc, #20]	; (8101d04 <HAL_HSEM_ActivateNotification+0x20>)
 8101cee:	681a      	ldr	r2, [r3, #0]
 8101cf0:	4904      	ldr	r1, [pc, #16]	; (8101d04 <HAL_HSEM_ActivateNotification+0x20>)
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	4313      	orrs	r3, r2
 8101cf6:	600b      	str	r3, [r1, #0]
#endif
}
 8101cf8:	bf00      	nop
 8101cfa:	370c      	adds	r7, #12
 8101cfc:	46bd      	mov	sp, r7
 8101cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d02:	4770      	bx	lr
 8101d04:	58026510 	.word	0x58026510

08101d08 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101d08:	b580      	push	{r7, lr}
 8101d0a:	b084      	sub	sp, #16
 8101d0c:	af00      	add	r7, sp, #0
 8101d0e:	60f8      	str	r0, [r7, #12]
 8101d10:	460b      	mov	r3, r1
 8101d12:	607a      	str	r2, [r7, #4]
 8101d14:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101d16:	4b37      	ldr	r3, [pc, #220]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d18:	681b      	ldr	r3, [r3, #0]
 8101d1a:	f023 0201 	bic.w	r2, r3, #1
 8101d1e:	4935      	ldr	r1, [pc, #212]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d20:	68fb      	ldr	r3, [r7, #12]
 8101d22:	4313      	orrs	r3, r2
 8101d24:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101d26:	687b      	ldr	r3, [r7, #4]
 8101d28:	2b00      	cmp	r3, #0
 8101d2a:	d123      	bne.n	8101d74 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101d2c:	f7ff fde2 	bl	81018f4 <HAL_GetCurrentCPUID>
 8101d30:	4603      	mov	r3, r0
 8101d32:	2b03      	cmp	r3, #3
 8101d34:	d158      	bne.n	8101de8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101d36:	4b2f      	ldr	r3, [pc, #188]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d38:	691b      	ldr	r3, [r3, #16]
 8101d3a:	4a2e      	ldr	r2, [pc, #184]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d3c:	f023 0301 	bic.w	r3, r3, #1
 8101d40:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d42:	4b2d      	ldr	r3, [pc, #180]	; (8101df8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d44:	691b      	ldr	r3, [r3, #16]
 8101d46:	4a2c      	ldr	r2, [pc, #176]	; (8101df8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d48:	f043 0304 	orr.w	r3, r3, #4
 8101d4c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101d4e:	f3bf 8f4f 	dsb	sy
}
 8101d52:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101d54:	f3bf 8f6f 	isb	sy
}
 8101d58:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101d5a:	7afb      	ldrb	r3, [r7, #11]
 8101d5c:	2b01      	cmp	r3, #1
 8101d5e:	d101      	bne.n	8101d64 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101d60:	bf30      	wfi
 8101d62:	e000      	b.n	8101d66 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101d64:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d66:	4b24      	ldr	r3, [pc, #144]	; (8101df8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d68:	691b      	ldr	r3, [r3, #16]
 8101d6a:	4a23      	ldr	r2, [pc, #140]	; (8101df8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d6c:	f023 0304 	bic.w	r3, r3, #4
 8101d70:	6113      	str	r3, [r2, #16]
 8101d72:	e03c      	b.n	8101dee <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	2b01      	cmp	r3, #1
 8101d78:	d123      	bne.n	8101dc2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101d7a:	f7ff fdbb 	bl	81018f4 <HAL_GetCurrentCPUID>
 8101d7e:	4603      	mov	r3, r0
 8101d80:	2b01      	cmp	r3, #1
 8101d82:	d133      	bne.n	8101dec <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101d84:	4b1b      	ldr	r3, [pc, #108]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d86:	695b      	ldr	r3, [r3, #20]
 8101d88:	4a1a      	ldr	r2, [pc, #104]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d8a:	f023 0302 	bic.w	r3, r3, #2
 8101d8e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d90:	4b19      	ldr	r3, [pc, #100]	; (8101df8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d92:	691b      	ldr	r3, [r3, #16]
 8101d94:	4a18      	ldr	r2, [pc, #96]	; (8101df8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d96:	f043 0304 	orr.w	r3, r3, #4
 8101d9a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101d9c:	f3bf 8f4f 	dsb	sy
}
 8101da0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101da2:	f3bf 8f6f 	isb	sy
}
 8101da6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101da8:	7afb      	ldrb	r3, [r7, #11]
 8101daa:	2b01      	cmp	r3, #1
 8101dac:	d101      	bne.n	8101db2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101dae:	bf30      	wfi
 8101db0:	e000      	b.n	8101db4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101db2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101db4:	4b10      	ldr	r3, [pc, #64]	; (8101df8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101db6:	691b      	ldr	r3, [r3, #16]
 8101db8:	4a0f      	ldr	r2, [pc, #60]	; (8101df8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101dba:	f023 0304 	bic.w	r3, r3, #4
 8101dbe:	6113      	str	r3, [r2, #16]
 8101dc0:	e015      	b.n	8101dee <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101dc2:	f7ff fd97 	bl	81018f4 <HAL_GetCurrentCPUID>
 8101dc6:	4603      	mov	r3, r0
 8101dc8:	2b03      	cmp	r3, #3
 8101dca:	d106      	bne.n	8101dda <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101dcc:	4b09      	ldr	r3, [pc, #36]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101dce:	691b      	ldr	r3, [r3, #16]
 8101dd0:	4a08      	ldr	r2, [pc, #32]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101dd2:	f023 0304 	bic.w	r3, r3, #4
 8101dd6:	6113      	str	r3, [r2, #16]
 8101dd8:	e009      	b.n	8101dee <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101dda:	4b06      	ldr	r3, [pc, #24]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ddc:	695b      	ldr	r3, [r3, #20]
 8101dde:	4a05      	ldr	r2, [pc, #20]	; (8101df4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101de0:	f023 0304 	bic.w	r3, r3, #4
 8101de4:	6153      	str	r3, [r2, #20]
 8101de6:	e002      	b.n	8101dee <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101de8:	bf00      	nop
 8101dea:	e000      	b.n	8101dee <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101dec:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101dee:	3710      	adds	r7, #16
 8101df0:	46bd      	mov	sp, r7
 8101df2:	bd80      	pop	{r7, pc}
 8101df4:	58024800 	.word	0x58024800
 8101df8:	e000ed00 	.word	0xe000ed00

08101dfc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101dfc:	b580      	push	{r7, lr}
 8101dfe:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101e00:	f7ff fd78 	bl	81018f4 <HAL_GetCurrentCPUID>
 8101e04:	4603      	mov	r3, r0
 8101e06:	2b03      	cmp	r3, #3
 8101e08:	d101      	bne.n	8101e0e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101e0a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101e0c:	e001      	b.n	8101e12 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101e0e:	bf40      	sev
    __WFE ();
 8101e10:	bf20      	wfe
}
 8101e12:	bf00      	nop
 8101e14:	bd80      	pop	{r7, pc}
	...

08101e18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101e18:	b480      	push	{r7}
 8101e1a:	b089      	sub	sp, #36	; 0x24
 8101e1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101e1e:	4bb3      	ldr	r3, [pc, #716]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e20:	691b      	ldr	r3, [r3, #16]
 8101e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101e26:	2b18      	cmp	r3, #24
 8101e28:	f200 8155 	bhi.w	81020d6 <HAL_RCC_GetSysClockFreq+0x2be>
 8101e2c:	a201      	add	r2, pc, #4	; (adr r2, 8101e34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101e32:	bf00      	nop
 8101e34:	08101e99 	.word	0x08101e99
 8101e38:	081020d7 	.word	0x081020d7
 8101e3c:	081020d7 	.word	0x081020d7
 8101e40:	081020d7 	.word	0x081020d7
 8101e44:	081020d7 	.word	0x081020d7
 8101e48:	081020d7 	.word	0x081020d7
 8101e4c:	081020d7 	.word	0x081020d7
 8101e50:	081020d7 	.word	0x081020d7
 8101e54:	08101ebf 	.word	0x08101ebf
 8101e58:	081020d7 	.word	0x081020d7
 8101e5c:	081020d7 	.word	0x081020d7
 8101e60:	081020d7 	.word	0x081020d7
 8101e64:	081020d7 	.word	0x081020d7
 8101e68:	081020d7 	.word	0x081020d7
 8101e6c:	081020d7 	.word	0x081020d7
 8101e70:	081020d7 	.word	0x081020d7
 8101e74:	08101ec5 	.word	0x08101ec5
 8101e78:	081020d7 	.word	0x081020d7
 8101e7c:	081020d7 	.word	0x081020d7
 8101e80:	081020d7 	.word	0x081020d7
 8101e84:	081020d7 	.word	0x081020d7
 8101e88:	081020d7 	.word	0x081020d7
 8101e8c:	081020d7 	.word	0x081020d7
 8101e90:	081020d7 	.word	0x081020d7
 8101e94:	08101ecb 	.word	0x08101ecb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101e98:	4b94      	ldr	r3, [pc, #592]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e9a:	681b      	ldr	r3, [r3, #0]
 8101e9c:	f003 0320 	and.w	r3, r3, #32
 8101ea0:	2b00      	cmp	r3, #0
 8101ea2:	d009      	beq.n	8101eb8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101ea4:	4b91      	ldr	r3, [pc, #580]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ea6:	681b      	ldr	r3, [r3, #0]
 8101ea8:	08db      	lsrs	r3, r3, #3
 8101eaa:	f003 0303 	and.w	r3, r3, #3
 8101eae:	4a90      	ldr	r2, [pc, #576]	; (81020f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8101eb4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8101eb6:	e111      	b.n	81020dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101eb8:	4b8d      	ldr	r3, [pc, #564]	; (81020f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101eba:	61bb      	str	r3, [r7, #24]
    break;
 8101ebc:	e10e      	b.n	81020dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101ebe:	4b8d      	ldr	r3, [pc, #564]	; (81020f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101ec0:	61bb      	str	r3, [r7, #24]
    break;
 8101ec2:	e10b      	b.n	81020dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101ec4:	4b8c      	ldr	r3, [pc, #560]	; (81020f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101ec6:	61bb      	str	r3, [r7, #24]
    break;
 8101ec8:	e108      	b.n	81020dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101eca:	4b88      	ldr	r3, [pc, #544]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101ece:	f003 0303 	and.w	r3, r3, #3
 8101ed2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101ed4:	4b85      	ldr	r3, [pc, #532]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101ed8:	091b      	lsrs	r3, r3, #4
 8101eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101ede:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101ee0:	4b82      	ldr	r3, [pc, #520]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101ee4:	f003 0301 	and.w	r3, r3, #1
 8101ee8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101eea:	4b80      	ldr	r3, [pc, #512]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101eee:	08db      	lsrs	r3, r3, #3
 8101ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101ef4:	68fa      	ldr	r2, [r7, #12]
 8101ef6:	fb02 f303 	mul.w	r3, r2, r3
 8101efa:	ee07 3a90 	vmov	s15, r3
 8101efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8101f06:	693b      	ldr	r3, [r7, #16]
 8101f08:	2b00      	cmp	r3, #0
 8101f0a:	f000 80e1 	beq.w	81020d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101f0e:	697b      	ldr	r3, [r7, #20]
 8101f10:	2b02      	cmp	r3, #2
 8101f12:	f000 8083 	beq.w	810201c <HAL_RCC_GetSysClockFreq+0x204>
 8101f16:	697b      	ldr	r3, [r7, #20]
 8101f18:	2b02      	cmp	r3, #2
 8101f1a:	f200 80a1 	bhi.w	8102060 <HAL_RCC_GetSysClockFreq+0x248>
 8101f1e:	697b      	ldr	r3, [r7, #20]
 8101f20:	2b00      	cmp	r3, #0
 8101f22:	d003      	beq.n	8101f2c <HAL_RCC_GetSysClockFreq+0x114>
 8101f24:	697b      	ldr	r3, [r7, #20]
 8101f26:	2b01      	cmp	r3, #1
 8101f28:	d056      	beq.n	8101fd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101f2a:	e099      	b.n	8102060 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101f2c:	4b6f      	ldr	r3, [pc, #444]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f2e:	681b      	ldr	r3, [r3, #0]
 8101f30:	f003 0320 	and.w	r3, r3, #32
 8101f34:	2b00      	cmp	r3, #0
 8101f36:	d02d      	beq.n	8101f94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101f38:	4b6c      	ldr	r3, [pc, #432]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f3a:	681b      	ldr	r3, [r3, #0]
 8101f3c:	08db      	lsrs	r3, r3, #3
 8101f3e:	f003 0303 	and.w	r3, r3, #3
 8101f42:	4a6b      	ldr	r2, [pc, #428]	; (81020f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101f44:	fa22 f303 	lsr.w	r3, r2, r3
 8101f48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101f4a:	687b      	ldr	r3, [r7, #4]
 8101f4c:	ee07 3a90 	vmov	s15, r3
 8101f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f54:	693b      	ldr	r3, [r7, #16]
 8101f56:	ee07 3a90 	vmov	s15, r3
 8101f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f62:	4b62      	ldr	r3, [pc, #392]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f6a:	ee07 3a90 	vmov	s15, r3
 8101f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f76:	eddf 5a61 	vldr	s11, [pc, #388]	; 81020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101f92:	e087      	b.n	81020a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101f94:	693b      	ldr	r3, [r7, #16]
 8101f96:	ee07 3a90 	vmov	s15, r3
 8101f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102100 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fa6:	4b51      	ldr	r3, [pc, #324]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101fae:	ee07 3a90 	vmov	s15, r3
 8101fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101fba:	eddf 5a50 	vldr	s11, [pc, #320]	; 81020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8101fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101fd6:	e065      	b.n	81020a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101fd8:	693b      	ldr	r3, [r7, #16]
 8101fda:	ee07 3a90 	vmov	s15, r3
 8101fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101fe2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102104 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fea:	4b40      	ldr	r3, [pc, #256]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ff2:	ee07 3a90 	vmov	s15, r3
 8101ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ffe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8102002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810200a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810200e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810201a:	e043      	b.n	81020a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810201c:	693b      	ldr	r3, [r7, #16]
 810201e:	ee07 3a90 	vmov	s15, r3
 8102022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102026:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102108 <HAL_RCC_GetSysClockFreq+0x2f0>
 810202a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810202e:	4b2f      	ldr	r3, [pc, #188]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102036:	ee07 3a90 	vmov	s15, r3
 810203a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810203e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102042:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8102046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810204a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810204e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102056:	ee67 7a27 	vmul.f32	s15, s14, s15
 810205a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810205e:	e021      	b.n	81020a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102060:	693b      	ldr	r3, [r7, #16]
 8102062:	ee07 3a90 	vmov	s15, r3
 8102066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810206a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102104 <HAL_RCC_GetSysClockFreq+0x2ec>
 810206e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102072:	4b1e      	ldr	r3, [pc, #120]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810207a:	ee07 3a90 	vmov	s15, r3
 810207e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102082:	ed97 6a02 	vldr	s12, [r7, #8]
 8102086:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81020fc <HAL_RCC_GetSysClockFreq+0x2e4>
 810208a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810208e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810209e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81020a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81020a4:	4b11      	ldr	r3, [pc, #68]	; (81020ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81020a8:	0a5b      	lsrs	r3, r3, #9
 81020aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81020ae:	3301      	adds	r3, #1
 81020b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81020b2:	683b      	ldr	r3, [r7, #0]
 81020b4:	ee07 3a90 	vmov	s15, r3
 81020b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81020bc:	edd7 6a07 	vldr	s13, [r7, #28]
 81020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81020c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81020c8:	ee17 3a90 	vmov	r3, s15
 81020cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81020ce:	e005      	b.n	81020dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81020d0:	2300      	movs	r3, #0
 81020d2:	61bb      	str	r3, [r7, #24]
    break;
 81020d4:	e002      	b.n	81020dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81020d6:	4b07      	ldr	r3, [pc, #28]	; (81020f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81020d8:	61bb      	str	r3, [r7, #24]
    break;
 81020da:	bf00      	nop
  }

  return sysclockfreq;
 81020dc:	69bb      	ldr	r3, [r7, #24]
}
 81020de:	4618      	mov	r0, r3
 81020e0:	3724      	adds	r7, #36	; 0x24
 81020e2:	46bd      	mov	sp, r7
 81020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e8:	4770      	bx	lr
 81020ea:	bf00      	nop
 81020ec:	58024400 	.word	0x58024400
 81020f0:	03d09000 	.word	0x03d09000
 81020f4:	003d0900 	.word	0x003d0900
 81020f8:	007a1200 	.word	0x007a1200
 81020fc:	46000000 	.word	0x46000000
 8102100:	4c742400 	.word	0x4c742400
 8102104:	4a742400 	.word	0x4a742400
 8102108:	4af42400 	.word	0x4af42400

0810210c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810210c:	b580      	push	{r7, lr}
 810210e:	b082      	sub	sp, #8
 8102110:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102112:	f7ff fe81 	bl	8101e18 <HAL_RCC_GetSysClockFreq>
 8102116:	4602      	mov	r2, r0
 8102118:	4b11      	ldr	r3, [pc, #68]	; (8102160 <HAL_RCC_GetHCLKFreq+0x54>)
 810211a:	699b      	ldr	r3, [r3, #24]
 810211c:	0a1b      	lsrs	r3, r3, #8
 810211e:	f003 030f 	and.w	r3, r3, #15
 8102122:	4910      	ldr	r1, [pc, #64]	; (8102164 <HAL_RCC_GetHCLKFreq+0x58>)
 8102124:	5ccb      	ldrb	r3, [r1, r3]
 8102126:	f003 031f 	and.w	r3, r3, #31
 810212a:	fa22 f303 	lsr.w	r3, r2, r3
 810212e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102130:	4b0b      	ldr	r3, [pc, #44]	; (8102160 <HAL_RCC_GetHCLKFreq+0x54>)
 8102132:	699b      	ldr	r3, [r3, #24]
 8102134:	f003 030f 	and.w	r3, r3, #15
 8102138:	4a0a      	ldr	r2, [pc, #40]	; (8102164 <HAL_RCC_GetHCLKFreq+0x58>)
 810213a:	5cd3      	ldrb	r3, [r2, r3]
 810213c:	f003 031f 	and.w	r3, r3, #31
 8102140:	687a      	ldr	r2, [r7, #4]
 8102142:	fa22 f303 	lsr.w	r3, r2, r3
 8102146:	4a08      	ldr	r2, [pc, #32]	; (8102168 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102148:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810214a:	4b07      	ldr	r3, [pc, #28]	; (8102168 <HAL_RCC_GetHCLKFreq+0x5c>)
 810214c:	681b      	ldr	r3, [r3, #0]
 810214e:	4a07      	ldr	r2, [pc, #28]	; (810216c <HAL_RCC_GetHCLKFreq+0x60>)
 8102150:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102152:	4b05      	ldr	r3, [pc, #20]	; (8102168 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102154:	681b      	ldr	r3, [r3, #0]
}
 8102156:	4618      	mov	r0, r3
 8102158:	3708      	adds	r7, #8
 810215a:	46bd      	mov	sp, r7
 810215c:	bd80      	pop	{r7, pc}
 810215e:	bf00      	nop
 8102160:	58024400 	.word	0x58024400
 8102164:	08106d28 	.word	0x08106d28
 8102168:	10000004 	.word	0x10000004
 810216c:	10000000 	.word	0x10000000

08102170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102170:	b580      	push	{r7, lr}
 8102172:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102174:	f7ff ffca 	bl	810210c <HAL_RCC_GetHCLKFreq>
 8102178:	4602      	mov	r2, r0
 810217a:	4b06      	ldr	r3, [pc, #24]	; (8102194 <HAL_RCC_GetPCLK1Freq+0x24>)
 810217c:	69db      	ldr	r3, [r3, #28]
 810217e:	091b      	lsrs	r3, r3, #4
 8102180:	f003 0307 	and.w	r3, r3, #7
 8102184:	4904      	ldr	r1, [pc, #16]	; (8102198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102186:	5ccb      	ldrb	r3, [r1, r3]
 8102188:	f003 031f 	and.w	r3, r3, #31
 810218c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102190:	4618      	mov	r0, r3
 8102192:	bd80      	pop	{r7, pc}
 8102194:	58024400 	.word	0x58024400
 8102198:	08106d28 	.word	0x08106d28

0810219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 810219c:	b580      	push	{r7, lr}
 810219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81021a0:	f7ff ffb4 	bl	810210c <HAL_RCC_GetHCLKFreq>
 81021a4:	4602      	mov	r2, r0
 81021a6:	4b06      	ldr	r3, [pc, #24]	; (81021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 81021a8:	69db      	ldr	r3, [r3, #28]
 81021aa:	0a1b      	lsrs	r3, r3, #8
 81021ac:	f003 0307 	and.w	r3, r3, #7
 81021b0:	4904      	ldr	r1, [pc, #16]	; (81021c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 81021b2:	5ccb      	ldrb	r3, [r1, r3]
 81021b4:	f003 031f 	and.w	r3, r3, #31
 81021b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81021bc:	4618      	mov	r0, r3
 81021be:	bd80      	pop	{r7, pc}
 81021c0:	58024400 	.word	0x58024400
 81021c4:	08106d28 	.word	0x08106d28

081021c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81021c8:	b580      	push	{r7, lr}
 81021ca:	b086      	sub	sp, #24
 81021cc:	af00      	add	r7, sp, #0
 81021ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81021d0:	2300      	movs	r3, #0
 81021d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81021d4:	2300      	movs	r3, #0
 81021d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81021d8:	687b      	ldr	r3, [r7, #4]
 81021da:	681b      	ldr	r3, [r3, #0]
 81021dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81021e0:	2b00      	cmp	r3, #0
 81021e2:	d03f      	beq.n	8102264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81021e4:	687b      	ldr	r3, [r7, #4]
 81021e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81021e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81021ec:	d02a      	beq.n	8102244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81021ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81021f2:	d824      	bhi.n	810223e <HAL_RCCEx_PeriphCLKConfig+0x76>
 81021f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81021f8:	d018      	beq.n	810222c <HAL_RCCEx_PeriphCLKConfig+0x64>
 81021fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81021fe:	d81e      	bhi.n	810223e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102200:	2b00      	cmp	r3, #0
 8102202:	d003      	beq.n	810220c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102208:	d007      	beq.n	810221a <HAL_RCCEx_PeriphCLKConfig+0x52>
 810220a:	e018      	b.n	810223e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810220c:	4bab      	ldr	r3, [pc, #684]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102210:	4aaa      	ldr	r2, [pc, #680]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102218:	e015      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	3304      	adds	r3, #4
 810221e:	2102      	movs	r1, #2
 8102220:	4618      	mov	r0, r3
 8102222:	f001 f9cf 	bl	81035c4 <RCCEx_PLL2_Config>
 8102226:	4603      	mov	r3, r0
 8102228:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810222a:	e00c      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	3324      	adds	r3, #36	; 0x24
 8102230:	2102      	movs	r1, #2
 8102232:	4618      	mov	r0, r3
 8102234:	f001 fa78 	bl	8103728 <RCCEx_PLL3_Config>
 8102238:	4603      	mov	r3, r0
 810223a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 810223c:	e003      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810223e:	2301      	movs	r3, #1
 8102240:	75fb      	strb	r3, [r7, #23]
      break;
 8102242:	e000      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102246:	7dfb      	ldrb	r3, [r7, #23]
 8102248:	2b00      	cmp	r3, #0
 810224a:	d109      	bne.n	8102260 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 810224c:	4b9b      	ldr	r3, [pc, #620]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102258:	4998      	ldr	r1, [pc, #608]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810225a:	4313      	orrs	r3, r2
 810225c:	650b      	str	r3, [r1, #80]	; 0x50
 810225e:	e001      	b.n	8102264 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102260:	7dfb      	ldrb	r3, [r7, #23]
 8102262:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810226c:	2b00      	cmp	r3, #0
 810226e:	d03d      	beq.n	81022ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102274:	2b04      	cmp	r3, #4
 8102276:	d826      	bhi.n	81022c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102278:	a201      	add	r2, pc, #4	; (adr r2, 8102280 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 810227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810227e:	bf00      	nop
 8102280:	08102295 	.word	0x08102295
 8102284:	081022a3 	.word	0x081022a3
 8102288:	081022b5 	.word	0x081022b5
 810228c:	081022cd 	.word	0x081022cd
 8102290:	081022cd 	.word	0x081022cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102294:	4b89      	ldr	r3, [pc, #548]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102298:	4a88      	ldr	r2, [pc, #544]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810229a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810229e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81022a0:	e015      	b.n	81022ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81022a2:	687b      	ldr	r3, [r7, #4]
 81022a4:	3304      	adds	r3, #4
 81022a6:	2100      	movs	r1, #0
 81022a8:	4618      	mov	r0, r3
 81022aa:	f001 f98b 	bl	81035c4 <RCCEx_PLL2_Config>
 81022ae:	4603      	mov	r3, r0
 81022b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81022b2:	e00c      	b.n	81022ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81022b4:	687b      	ldr	r3, [r7, #4]
 81022b6:	3324      	adds	r3, #36	; 0x24
 81022b8:	2100      	movs	r1, #0
 81022ba:	4618      	mov	r0, r3
 81022bc:	f001 fa34 	bl	8103728 <RCCEx_PLL3_Config>
 81022c0:	4603      	mov	r3, r0
 81022c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81022c4:	e003      	b.n	81022ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81022c6:	2301      	movs	r3, #1
 81022c8:	75fb      	strb	r3, [r7, #23]
      break;
 81022ca:	e000      	b.n	81022ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81022cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81022ce:	7dfb      	ldrb	r3, [r7, #23]
 81022d0:	2b00      	cmp	r3, #0
 81022d2:	d109      	bne.n	81022e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81022d4:	4b79      	ldr	r3, [pc, #484]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81022d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81022d8:	f023 0207 	bic.w	r2, r3, #7
 81022dc:	687b      	ldr	r3, [r7, #4]
 81022de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022e0:	4976      	ldr	r1, [pc, #472]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81022e2:	4313      	orrs	r3, r2
 81022e4:	650b      	str	r3, [r1, #80]	; 0x50
 81022e6:	e001      	b.n	81022ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022e8:	7dfb      	ldrb	r3, [r7, #23]
 81022ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81022ec:	687b      	ldr	r3, [r7, #4]
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81022f4:	2b00      	cmp	r3, #0
 81022f6:	d042      	beq.n	810237e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102300:	d02b      	beq.n	810235a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102306:	d825      	bhi.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102308:	2bc0      	cmp	r3, #192	; 0xc0
 810230a:	d028      	beq.n	810235e <HAL_RCCEx_PeriphCLKConfig+0x196>
 810230c:	2bc0      	cmp	r3, #192	; 0xc0
 810230e:	d821      	bhi.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102310:	2b80      	cmp	r3, #128	; 0x80
 8102312:	d016      	beq.n	8102342 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102314:	2b80      	cmp	r3, #128	; 0x80
 8102316:	d81d      	bhi.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102318:	2b00      	cmp	r3, #0
 810231a:	d002      	beq.n	8102322 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 810231c:	2b40      	cmp	r3, #64	; 0x40
 810231e:	d007      	beq.n	8102330 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102320:	e018      	b.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102322:	4b66      	ldr	r3, [pc, #408]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102326:	4a65      	ldr	r2, [pc, #404]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810232c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810232e:	e017      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	3304      	adds	r3, #4
 8102334:	2100      	movs	r1, #0
 8102336:	4618      	mov	r0, r3
 8102338:	f001 f944 	bl	81035c4 <RCCEx_PLL2_Config>
 810233c:	4603      	mov	r3, r0
 810233e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102340:	e00e      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102342:	687b      	ldr	r3, [r7, #4]
 8102344:	3324      	adds	r3, #36	; 0x24
 8102346:	2100      	movs	r1, #0
 8102348:	4618      	mov	r0, r3
 810234a:	f001 f9ed 	bl	8103728 <RCCEx_PLL3_Config>
 810234e:	4603      	mov	r3, r0
 8102350:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102352:	e005      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102354:	2301      	movs	r3, #1
 8102356:	75fb      	strb	r3, [r7, #23]
      break;
 8102358:	e002      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810235a:	bf00      	nop
 810235c:	e000      	b.n	8102360 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810235e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102360:	7dfb      	ldrb	r3, [r7, #23]
 8102362:	2b00      	cmp	r3, #0
 8102364:	d109      	bne.n	810237a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102366:	4b55      	ldr	r3, [pc, #340]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810236a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810236e:	687b      	ldr	r3, [r7, #4]
 8102370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102372:	4952      	ldr	r1, [pc, #328]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102374:	4313      	orrs	r3, r2
 8102376:	650b      	str	r3, [r1, #80]	; 0x50
 8102378:	e001      	b.n	810237e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810237a:	7dfb      	ldrb	r3, [r7, #23]
 810237c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102386:	2b00      	cmp	r3, #0
 8102388:	d049      	beq.n	810241e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 810238a:	687b      	ldr	r3, [r7, #4]
 810238c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102390:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102394:	d030      	beq.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102396:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810239a:	d82a      	bhi.n	81023f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810239c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81023a0:	d02c      	beq.n	81023fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 81023a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81023a6:	d824      	bhi.n	81023f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81023a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81023ac:	d018      	beq.n	81023e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 81023ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81023b2:	d81e      	bhi.n	81023f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81023b4:	2b00      	cmp	r3, #0
 81023b6:	d003      	beq.n	81023c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81023b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81023bc:	d007      	beq.n	81023ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 81023be:	e018      	b.n	81023f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023c0:	4b3e      	ldr	r3, [pc, #248]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023c4:	4a3d      	ldr	r2, [pc, #244]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81023c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81023ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81023cc:	e017      	b.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81023ce:	687b      	ldr	r3, [r7, #4]
 81023d0:	3304      	adds	r3, #4
 81023d2:	2100      	movs	r1, #0
 81023d4:	4618      	mov	r0, r3
 81023d6:	f001 f8f5 	bl	81035c4 <RCCEx_PLL2_Config>
 81023da:	4603      	mov	r3, r0
 81023dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81023de:	e00e      	b.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	3324      	adds	r3, #36	; 0x24
 81023e4:	2100      	movs	r1, #0
 81023e6:	4618      	mov	r0, r3
 81023e8:	f001 f99e 	bl	8103728 <RCCEx_PLL3_Config>
 81023ec:	4603      	mov	r3, r0
 81023ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81023f0:	e005      	b.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81023f2:	2301      	movs	r3, #1
 81023f4:	75fb      	strb	r3, [r7, #23]
      break;
 81023f6:	e002      	b.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81023f8:	bf00      	nop
 81023fa:	e000      	b.n	81023fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81023fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81023fe:	7dfb      	ldrb	r3, [r7, #23]
 8102400:	2b00      	cmp	r3, #0
 8102402:	d10a      	bne.n	810241a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102404:	4b2d      	ldr	r3, [pc, #180]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102408:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102412:	492a      	ldr	r1, [pc, #168]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102414:	4313      	orrs	r3, r2
 8102416:	658b      	str	r3, [r1, #88]	; 0x58
 8102418:	e001      	b.n	810241e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810241a:	7dfb      	ldrb	r3, [r7, #23]
 810241c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	681b      	ldr	r3, [r3, #0]
 8102422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102426:	2b00      	cmp	r3, #0
 8102428:	d04c      	beq.n	81024c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 810242a:	687b      	ldr	r3, [r7, #4]
 810242c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102430:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102434:	d030      	beq.n	8102498 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102436:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810243a:	d82a      	bhi.n	8102492 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 810243c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102440:	d02c      	beq.n	810249c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8102442:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102446:	d824      	bhi.n	8102492 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810244c:	d018      	beq.n	8102480 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810244e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102452:	d81e      	bhi.n	8102492 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102454:	2b00      	cmp	r3, #0
 8102456:	d003      	beq.n	8102460 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102458:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 810245c:	d007      	beq.n	810246e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810245e:	e018      	b.n	8102492 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102460:	4b16      	ldr	r3, [pc, #88]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102464:	4a15      	ldr	r2, [pc, #84]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810246a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810246c:	e017      	b.n	810249e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	3304      	adds	r3, #4
 8102472:	2100      	movs	r1, #0
 8102474:	4618      	mov	r0, r3
 8102476:	f001 f8a5 	bl	81035c4 <RCCEx_PLL2_Config>
 810247a:	4603      	mov	r3, r0
 810247c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810247e:	e00e      	b.n	810249e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	3324      	adds	r3, #36	; 0x24
 8102484:	2100      	movs	r1, #0
 8102486:	4618      	mov	r0, r3
 8102488:	f001 f94e 	bl	8103728 <RCCEx_PLL3_Config>
 810248c:	4603      	mov	r3, r0
 810248e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102490:	e005      	b.n	810249e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102492:	2301      	movs	r3, #1
 8102494:	75fb      	strb	r3, [r7, #23]
      break;
 8102496:	e002      	b.n	810249e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102498:	bf00      	nop
 810249a:	e000      	b.n	810249e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 810249c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810249e:	7dfb      	ldrb	r3, [r7, #23]
 81024a0:	2b00      	cmp	r3, #0
 81024a2:	d10d      	bne.n	81024c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81024a4:	4b05      	ldr	r3, [pc, #20]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81024a8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81024b2:	4902      	ldr	r1, [pc, #8]	; (81024bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81024b4:	4313      	orrs	r3, r2
 81024b6:	658b      	str	r3, [r1, #88]	; 0x58
 81024b8:	e004      	b.n	81024c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 81024ba:	bf00      	nop
 81024bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024c0:	7dfb      	ldrb	r3, [r7, #23]
 81024c2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81024cc:	2b00      	cmp	r3, #0
 81024ce:	d032      	beq.n	8102536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81024d4:	2b30      	cmp	r3, #48	; 0x30
 81024d6:	d01c      	beq.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81024d8:	2b30      	cmp	r3, #48	; 0x30
 81024da:	d817      	bhi.n	810250c <HAL_RCCEx_PeriphCLKConfig+0x344>
 81024dc:	2b20      	cmp	r3, #32
 81024de:	d00c      	beq.n	81024fa <HAL_RCCEx_PeriphCLKConfig+0x332>
 81024e0:	2b20      	cmp	r3, #32
 81024e2:	d813      	bhi.n	810250c <HAL_RCCEx_PeriphCLKConfig+0x344>
 81024e4:	2b00      	cmp	r3, #0
 81024e6:	d016      	beq.n	8102516 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81024e8:	2b10      	cmp	r3, #16
 81024ea:	d10f      	bne.n	810250c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81024ec:	4baf      	ldr	r3, [pc, #700]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024f0:	4aae      	ldr	r2, [pc, #696]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81024f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81024f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81024f8:	e00e      	b.n	8102518 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	3304      	adds	r3, #4
 81024fe:	2102      	movs	r1, #2
 8102500:	4618      	mov	r0, r3
 8102502:	f001 f85f 	bl	81035c4 <RCCEx_PLL2_Config>
 8102506:	4603      	mov	r3, r0
 8102508:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810250a:	e005      	b.n	8102518 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810250c:	2301      	movs	r3, #1
 810250e:	75fb      	strb	r3, [r7, #23]
      break;
 8102510:	e002      	b.n	8102518 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102512:	bf00      	nop
 8102514:	e000      	b.n	8102518 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102518:	7dfb      	ldrb	r3, [r7, #23]
 810251a:	2b00      	cmp	r3, #0
 810251c:	d109      	bne.n	8102532 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810251e:	4ba3      	ldr	r3, [pc, #652]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102522:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810252a:	49a0      	ldr	r1, [pc, #640]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810252c:	4313      	orrs	r3, r2
 810252e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102530:	e001      	b.n	8102536 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102532:	7dfb      	ldrb	r3, [r7, #23]
 8102534:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	681b      	ldr	r3, [r3, #0]
 810253a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810253e:	2b00      	cmp	r3, #0
 8102540:	d047      	beq.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102546:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810254a:	d030      	beq.n	81025ae <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 810254c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102550:	d82a      	bhi.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102552:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102556:	d02c      	beq.n	81025b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8102558:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810255c:	d824      	bhi.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810255e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102562:	d018      	beq.n	8102596 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8102564:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102568:	d81e      	bhi.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810256a:	2b00      	cmp	r3, #0
 810256c:	d003      	beq.n	8102576 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810256e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102572:	d007      	beq.n	8102584 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8102574:	e018      	b.n	81025a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102576:	4b8d      	ldr	r3, [pc, #564]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810257a:	4a8c      	ldr	r2, [pc, #560]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102580:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102582:	e017      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	3304      	adds	r3, #4
 8102588:	2100      	movs	r1, #0
 810258a:	4618      	mov	r0, r3
 810258c:	f001 f81a 	bl	81035c4 <RCCEx_PLL2_Config>
 8102590:	4603      	mov	r3, r0
 8102592:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102594:	e00e      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	3324      	adds	r3, #36	; 0x24
 810259a:	2100      	movs	r1, #0
 810259c:	4618      	mov	r0, r3
 810259e:	f001 f8c3 	bl	8103728 <RCCEx_PLL3_Config>
 81025a2:	4603      	mov	r3, r0
 81025a4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81025a6:	e005      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81025a8:	2301      	movs	r3, #1
 81025aa:	75fb      	strb	r3, [r7, #23]
      break;
 81025ac:	e002      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81025ae:	bf00      	nop
 81025b0:	e000      	b.n	81025b4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81025b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81025b4:	7dfb      	ldrb	r3, [r7, #23]
 81025b6:	2b00      	cmp	r3, #0
 81025b8:	d109      	bne.n	81025ce <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81025ba:	4b7c      	ldr	r3, [pc, #496]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81025bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81025be:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81025c6:	4979      	ldr	r1, [pc, #484]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81025c8:	4313      	orrs	r3, r2
 81025ca:	650b      	str	r3, [r1, #80]	; 0x50
 81025cc:	e001      	b.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025ce:	7dfb      	ldrb	r3, [r7, #23]
 81025d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	681b      	ldr	r3, [r3, #0]
 81025d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81025da:	2b00      	cmp	r3, #0
 81025dc:	d049      	beq.n	8102672 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81025de:	687b      	ldr	r3, [r7, #4]
 81025e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81025e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81025e6:	d02e      	beq.n	8102646 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81025e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81025ec:	d828      	bhi.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81025ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81025f2:	d02a      	beq.n	810264a <HAL_RCCEx_PeriphCLKConfig+0x482>
 81025f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81025f8:	d822      	bhi.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81025fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81025fe:	d026      	beq.n	810264e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8102600:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102604:	d81c      	bhi.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102606:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810260a:	d010      	beq.n	810262e <HAL_RCCEx_PeriphCLKConfig+0x466>
 810260c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102610:	d816      	bhi.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102612:	2b00      	cmp	r3, #0
 8102614:	d01d      	beq.n	8102652 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8102616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810261a:	d111      	bne.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810261c:	687b      	ldr	r3, [r7, #4]
 810261e:	3304      	adds	r3, #4
 8102620:	2101      	movs	r1, #1
 8102622:	4618      	mov	r0, r3
 8102624:	f000 ffce 	bl	81035c4 <RCCEx_PLL2_Config>
 8102628:	4603      	mov	r3, r0
 810262a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810262c:	e012      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810262e:	687b      	ldr	r3, [r7, #4]
 8102630:	3324      	adds	r3, #36	; 0x24
 8102632:	2101      	movs	r1, #1
 8102634:	4618      	mov	r0, r3
 8102636:	f001 f877 	bl	8103728 <RCCEx_PLL3_Config>
 810263a:	4603      	mov	r3, r0
 810263c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810263e:	e009      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102640:	2301      	movs	r3, #1
 8102642:	75fb      	strb	r3, [r7, #23]
      break;
 8102644:	e006      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102646:	bf00      	nop
 8102648:	e004      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810264a:	bf00      	nop
 810264c:	e002      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810264e:	bf00      	nop
 8102650:	e000      	b.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102652:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102654:	7dfb      	ldrb	r3, [r7, #23]
 8102656:	2b00      	cmp	r3, #0
 8102658:	d109      	bne.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810265a:	4b54      	ldr	r3, [pc, #336]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810265c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810265e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8102666:	4951      	ldr	r1, [pc, #324]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102668:	4313      	orrs	r3, r2
 810266a:	650b      	str	r3, [r1, #80]	; 0x50
 810266c:	e001      	b.n	8102672 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810266e:	7dfb      	ldrb	r3, [r7, #23]
 8102670:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102672:	687b      	ldr	r3, [r7, #4]
 8102674:	681b      	ldr	r3, [r3, #0]
 8102676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810267a:	2b00      	cmp	r3, #0
 810267c:	d04b      	beq.n	8102716 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810267e:	687b      	ldr	r3, [r7, #4]
 8102680:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102688:	d02e      	beq.n	81026e8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 810268a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810268e:	d828      	bhi.n	81026e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102694:	d02a      	beq.n	81026ec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8102696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810269a:	d822      	bhi.n	81026e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810269c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81026a0:	d026      	beq.n	81026f0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 81026a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81026a6:	d81c      	bhi.n	81026e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81026a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81026ac:	d010      	beq.n	81026d0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 81026ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81026b2:	d816      	bhi.n	81026e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81026b4:	2b00      	cmp	r3, #0
 81026b6:	d01d      	beq.n	81026f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81026b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81026bc:	d111      	bne.n	81026e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81026be:	687b      	ldr	r3, [r7, #4]
 81026c0:	3304      	adds	r3, #4
 81026c2:	2101      	movs	r1, #1
 81026c4:	4618      	mov	r0, r3
 81026c6:	f000 ff7d 	bl	81035c4 <RCCEx_PLL2_Config>
 81026ca:	4603      	mov	r3, r0
 81026cc:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81026ce:	e012      	b.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	3324      	adds	r3, #36	; 0x24
 81026d4:	2101      	movs	r1, #1
 81026d6:	4618      	mov	r0, r3
 81026d8:	f001 f826 	bl	8103728 <RCCEx_PLL3_Config>
 81026dc:	4603      	mov	r3, r0
 81026de:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81026e0:	e009      	b.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81026e2:	2301      	movs	r3, #1
 81026e4:	75fb      	strb	r3, [r7, #23]
      break;
 81026e6:	e006      	b.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81026e8:	bf00      	nop
 81026ea:	e004      	b.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81026ec:	bf00      	nop
 81026ee:	e002      	b.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81026f0:	bf00      	nop
 81026f2:	e000      	b.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81026f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81026f6:	7dfb      	ldrb	r3, [r7, #23]
 81026f8:	2b00      	cmp	r3, #0
 81026fa:	d10a      	bne.n	8102712 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81026fc:	4b2b      	ldr	r3, [pc, #172]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102700:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102704:	687b      	ldr	r3, [r7, #4]
 8102706:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810270a:	4928      	ldr	r1, [pc, #160]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810270c:	4313      	orrs	r3, r2
 810270e:	658b      	str	r3, [r1, #88]	; 0x58
 8102710:	e001      	b.n	8102716 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102712:	7dfb      	ldrb	r3, [r7, #23]
 8102714:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102716:	687b      	ldr	r3, [r7, #4]
 8102718:	681b      	ldr	r3, [r3, #0]
 810271a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810271e:	2b00      	cmp	r3, #0
 8102720:	d02f      	beq.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8102722:	687b      	ldr	r3, [r7, #4]
 8102724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810272a:	d00e      	beq.n	810274a <HAL_RCCEx_PeriphCLKConfig+0x582>
 810272c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102730:	d814      	bhi.n	810275c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8102732:	2b00      	cmp	r3, #0
 8102734:	d015      	beq.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102736:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810273a:	d10f      	bne.n	810275c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810273c:	4b1b      	ldr	r3, [pc, #108]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102740:	4a1a      	ldr	r2, [pc, #104]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8102748:	e00c      	b.n	8102764 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	3304      	adds	r3, #4
 810274e:	2101      	movs	r1, #1
 8102750:	4618      	mov	r0, r3
 8102752:	f000 ff37 	bl	81035c4 <RCCEx_PLL2_Config>
 8102756:	4603      	mov	r3, r0
 8102758:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810275a:	e003      	b.n	8102764 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810275c:	2301      	movs	r3, #1
 810275e:	75fb      	strb	r3, [r7, #23]
      break;
 8102760:	e000      	b.n	8102764 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8102762:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102764:	7dfb      	ldrb	r3, [r7, #23]
 8102766:	2b00      	cmp	r3, #0
 8102768:	d109      	bne.n	810277e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810276a:	4b10      	ldr	r3, [pc, #64]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810276c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810276e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102772:	687b      	ldr	r3, [r7, #4]
 8102774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102776:	490d      	ldr	r1, [pc, #52]	; (81027ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102778:	4313      	orrs	r3, r2
 810277a:	650b      	str	r3, [r1, #80]	; 0x50
 810277c:	e001      	b.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810277e:	7dfb      	ldrb	r3, [r7, #23]
 8102780:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102782:	687b      	ldr	r3, [r7, #4]
 8102784:	681b      	ldr	r3, [r3, #0]
 8102786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810278a:	2b00      	cmp	r3, #0
 810278c:	d033      	beq.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102792:	2b03      	cmp	r3, #3
 8102794:	d81c      	bhi.n	81027d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102796:	a201      	add	r2, pc, #4	; (adr r2, 810279c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8102798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810279c:	081027d7 	.word	0x081027d7
 81027a0:	081027b1 	.word	0x081027b1
 81027a4:	081027bf 	.word	0x081027bf
 81027a8:	081027d7 	.word	0x081027d7
 81027ac:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81027b0:	4bb9      	ldr	r3, [pc, #740]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027b4:	4ab8      	ldr	r2, [pc, #736]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81027ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81027bc:	e00c      	b.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81027be:	687b      	ldr	r3, [r7, #4]
 81027c0:	3304      	adds	r3, #4
 81027c2:	2102      	movs	r1, #2
 81027c4:	4618      	mov	r0, r3
 81027c6:	f000 fefd 	bl	81035c4 <RCCEx_PLL2_Config>
 81027ca:	4603      	mov	r3, r0
 81027cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81027ce:	e003      	b.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81027d0:	2301      	movs	r3, #1
 81027d2:	75fb      	strb	r3, [r7, #23]
      break;
 81027d4:	e000      	b.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81027d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81027d8:	7dfb      	ldrb	r3, [r7, #23]
 81027da:	2b00      	cmp	r3, #0
 81027dc:	d109      	bne.n	81027f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81027de:	4bae      	ldr	r3, [pc, #696]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81027e2:	f023 0203 	bic.w	r2, r3, #3
 81027e6:	687b      	ldr	r3, [r7, #4]
 81027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81027ea:	49ab      	ldr	r1, [pc, #684]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027ec:	4313      	orrs	r3, r2
 81027ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 81027f0:	e001      	b.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027f2:	7dfb      	ldrb	r3, [r7, #23]
 81027f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81027f6:	687b      	ldr	r3, [r7, #4]
 81027f8:	681b      	ldr	r3, [r3, #0]
 81027fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81027fe:	2b00      	cmp	r3, #0
 8102800:	f000 8088 	beq.w	8102914 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102804:	4ba5      	ldr	r3, [pc, #660]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	4aa4      	ldr	r2, [pc, #656]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810280e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102810:	f7fe ff30 	bl	8101674 <HAL_GetTick>
 8102814:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102816:	e009      	b.n	810282c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102818:	f7fe ff2c 	bl	8101674 <HAL_GetTick>
 810281c:	4602      	mov	r2, r0
 810281e:	693b      	ldr	r3, [r7, #16]
 8102820:	1ad3      	subs	r3, r2, r3
 8102822:	2b64      	cmp	r3, #100	; 0x64
 8102824:	d902      	bls.n	810282c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8102826:	2303      	movs	r3, #3
 8102828:	75fb      	strb	r3, [r7, #23]
        break;
 810282a:	e005      	b.n	8102838 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810282c:	4b9b      	ldr	r3, [pc, #620]	; (8102a9c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810282e:	681b      	ldr	r3, [r3, #0]
 8102830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102834:	2b00      	cmp	r3, #0
 8102836:	d0ef      	beq.n	8102818 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8102838:	7dfb      	ldrb	r3, [r7, #23]
 810283a:	2b00      	cmp	r3, #0
 810283c:	d168      	bne.n	8102910 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810283e:	4b96      	ldr	r3, [pc, #600]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102840:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102842:	687b      	ldr	r3, [r7, #4]
 8102844:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102848:	4053      	eors	r3, r2
 810284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810284e:	2b00      	cmp	r3, #0
 8102850:	d013      	beq.n	810287a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102852:	4b91      	ldr	r3, [pc, #580]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810285a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810285c:	4b8e      	ldr	r3, [pc, #568]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102860:	4a8d      	ldr	r2, [pc, #564]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8102866:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102868:	4b8b      	ldr	r3, [pc, #556]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810286a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810286c:	4a8a      	ldr	r2, [pc, #552]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810286e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102872:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102874:	4a88      	ldr	r2, [pc, #544]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102876:	68fb      	ldr	r3, [r7, #12]
 8102878:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810287a:	687b      	ldr	r3, [r7, #4]
 810287c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102884:	d115      	bne.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102886:	f7fe fef5 	bl	8101674 <HAL_GetTick>
 810288a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810288c:	e00b      	b.n	81028a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810288e:	f7fe fef1 	bl	8101674 <HAL_GetTick>
 8102892:	4602      	mov	r2, r0
 8102894:	693b      	ldr	r3, [r7, #16]
 8102896:	1ad3      	subs	r3, r2, r3
 8102898:	f241 3288 	movw	r2, #5000	; 0x1388
 810289c:	4293      	cmp	r3, r2
 810289e:	d902      	bls.n	81028a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81028a0:	2303      	movs	r3, #3
 81028a2:	75fb      	strb	r3, [r7, #23]
            break;
 81028a4:	e005      	b.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81028a6:	4b7c      	ldr	r3, [pc, #496]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81028aa:	f003 0302 	and.w	r3, r3, #2
 81028ae:	2b00      	cmp	r3, #0
 81028b0:	d0ed      	beq.n	810288e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81028b2:	7dfb      	ldrb	r3, [r7, #23]
 81028b4:	2b00      	cmp	r3, #0
 81028b6:	d128      	bne.n	810290a <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81028b8:	687b      	ldr	r3, [r7, #4]
 81028ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81028c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81028c6:	d10f      	bne.n	81028e8 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81028c8:	4b73      	ldr	r3, [pc, #460]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028ca:	691b      	ldr	r3, [r3, #16]
 81028cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81028d0:	687b      	ldr	r3, [r7, #4]
 81028d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81028d6:	091b      	lsrs	r3, r3, #4
 81028d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81028dc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81028e0:	496d      	ldr	r1, [pc, #436]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028e2:	4313      	orrs	r3, r2
 81028e4:	610b      	str	r3, [r1, #16]
 81028e6:	e005      	b.n	81028f4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81028e8:	4b6b      	ldr	r3, [pc, #428]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028ea:	691b      	ldr	r3, [r3, #16]
 81028ec:	4a6a      	ldr	r2, [pc, #424]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81028f2:	6113      	str	r3, [r2, #16]
 81028f4:	4b68      	ldr	r3, [pc, #416]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81028f8:	687b      	ldr	r3, [r7, #4]
 81028fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81028fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102902:	4965      	ldr	r1, [pc, #404]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102904:	4313      	orrs	r3, r2
 8102906:	670b      	str	r3, [r1, #112]	; 0x70
 8102908:	e004      	b.n	8102914 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810290a:	7dfb      	ldrb	r3, [r7, #23]
 810290c:	75bb      	strb	r3, [r7, #22]
 810290e:	e001      	b.n	8102914 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102910:	7dfb      	ldrb	r3, [r7, #23]
 8102912:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102914:	687b      	ldr	r3, [r7, #4]
 8102916:	681b      	ldr	r3, [r3, #0]
 8102918:	f003 0301 	and.w	r3, r3, #1
 810291c:	2b00      	cmp	r3, #0
 810291e:	d07e      	beq.n	8102a1e <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102924:	2b28      	cmp	r3, #40	; 0x28
 8102926:	d867      	bhi.n	81029f8 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8102928:	a201      	add	r2, pc, #4	; (adr r2, 8102930 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810292e:	bf00      	nop
 8102930:	081029ff 	.word	0x081029ff
 8102934:	081029f9 	.word	0x081029f9
 8102938:	081029f9 	.word	0x081029f9
 810293c:	081029f9 	.word	0x081029f9
 8102940:	081029f9 	.word	0x081029f9
 8102944:	081029f9 	.word	0x081029f9
 8102948:	081029f9 	.word	0x081029f9
 810294c:	081029f9 	.word	0x081029f9
 8102950:	081029d5 	.word	0x081029d5
 8102954:	081029f9 	.word	0x081029f9
 8102958:	081029f9 	.word	0x081029f9
 810295c:	081029f9 	.word	0x081029f9
 8102960:	081029f9 	.word	0x081029f9
 8102964:	081029f9 	.word	0x081029f9
 8102968:	081029f9 	.word	0x081029f9
 810296c:	081029f9 	.word	0x081029f9
 8102970:	081029e7 	.word	0x081029e7
 8102974:	081029f9 	.word	0x081029f9
 8102978:	081029f9 	.word	0x081029f9
 810297c:	081029f9 	.word	0x081029f9
 8102980:	081029f9 	.word	0x081029f9
 8102984:	081029f9 	.word	0x081029f9
 8102988:	081029f9 	.word	0x081029f9
 810298c:	081029f9 	.word	0x081029f9
 8102990:	081029ff 	.word	0x081029ff
 8102994:	081029f9 	.word	0x081029f9
 8102998:	081029f9 	.word	0x081029f9
 810299c:	081029f9 	.word	0x081029f9
 81029a0:	081029f9 	.word	0x081029f9
 81029a4:	081029f9 	.word	0x081029f9
 81029a8:	081029f9 	.word	0x081029f9
 81029ac:	081029f9 	.word	0x081029f9
 81029b0:	081029ff 	.word	0x081029ff
 81029b4:	081029f9 	.word	0x081029f9
 81029b8:	081029f9 	.word	0x081029f9
 81029bc:	081029f9 	.word	0x081029f9
 81029c0:	081029f9 	.word	0x081029f9
 81029c4:	081029f9 	.word	0x081029f9
 81029c8:	081029f9 	.word	0x081029f9
 81029cc:	081029f9 	.word	0x081029f9
 81029d0:	081029ff 	.word	0x081029ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	3304      	adds	r3, #4
 81029d8:	2101      	movs	r1, #1
 81029da:	4618      	mov	r0, r3
 81029dc:	f000 fdf2 	bl	81035c4 <RCCEx_PLL2_Config>
 81029e0:	4603      	mov	r3, r0
 81029e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81029e4:	e00c      	b.n	8102a00 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	3324      	adds	r3, #36	; 0x24
 81029ea:	2101      	movs	r1, #1
 81029ec:	4618      	mov	r0, r3
 81029ee:	f000 fe9b 	bl	8103728 <RCCEx_PLL3_Config>
 81029f2:	4603      	mov	r3, r0
 81029f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81029f6:	e003      	b.n	8102a00 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81029f8:	2301      	movs	r3, #1
 81029fa:	75fb      	strb	r3, [r7, #23]
      break;
 81029fc:	e000      	b.n	8102a00 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81029fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a00:	7dfb      	ldrb	r3, [r7, #23]
 8102a02:	2b00      	cmp	r3, #0
 8102a04:	d109      	bne.n	8102a1a <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102a06:	4b24      	ldr	r3, [pc, #144]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a0a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8102a0e:	687b      	ldr	r3, [r7, #4]
 8102a10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102a12:	4921      	ldr	r1, [pc, #132]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102a14:	4313      	orrs	r3, r2
 8102a16:	654b      	str	r3, [r1, #84]	; 0x54
 8102a18:	e001      	b.n	8102a1e <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a1a:	7dfb      	ldrb	r3, [r7, #23]
 8102a1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102a1e:	687b      	ldr	r3, [r7, #4]
 8102a20:	681b      	ldr	r3, [r3, #0]
 8102a22:	f003 0302 	and.w	r3, r3, #2
 8102a26:	2b00      	cmp	r3, #0
 8102a28:	d03c      	beq.n	8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102a2e:	2b05      	cmp	r3, #5
 8102a30:	d820      	bhi.n	8102a74 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8102a32:	a201      	add	r2, pc, #4	; (adr r2, 8102a38 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8102a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a38:	08102a7b 	.word	0x08102a7b
 8102a3c:	08102a51 	.word	0x08102a51
 8102a40:	08102a63 	.word	0x08102a63
 8102a44:	08102a7b 	.word	0x08102a7b
 8102a48:	08102a7b 	.word	0x08102a7b
 8102a4c:	08102a7b 	.word	0x08102a7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	3304      	adds	r3, #4
 8102a54:	2101      	movs	r1, #1
 8102a56:	4618      	mov	r0, r3
 8102a58:	f000 fdb4 	bl	81035c4 <RCCEx_PLL2_Config>
 8102a5c:	4603      	mov	r3, r0
 8102a5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102a60:	e00c      	b.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102a62:	687b      	ldr	r3, [r7, #4]
 8102a64:	3324      	adds	r3, #36	; 0x24
 8102a66:	2101      	movs	r1, #1
 8102a68:	4618      	mov	r0, r3
 8102a6a:	f000 fe5d 	bl	8103728 <RCCEx_PLL3_Config>
 8102a6e:	4603      	mov	r3, r0
 8102a70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102a72:	e003      	b.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102a74:	2301      	movs	r3, #1
 8102a76:	75fb      	strb	r3, [r7, #23]
      break;
 8102a78:	e000      	b.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8102a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a7c:	7dfb      	ldrb	r3, [r7, #23]
 8102a7e:	2b00      	cmp	r3, #0
 8102a80:	d10e      	bne.n	8102aa0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102a82:	4b05      	ldr	r3, [pc, #20]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a86:	f023 0207 	bic.w	r2, r3, #7
 8102a8a:	687b      	ldr	r3, [r7, #4]
 8102a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102a8e:	4902      	ldr	r1, [pc, #8]	; (8102a98 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102a90:	4313      	orrs	r3, r2
 8102a92:	654b      	str	r3, [r1, #84]	; 0x54
 8102a94:	e006      	b.n	8102aa4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8102a96:	bf00      	nop
 8102a98:	58024400 	.word	0x58024400
 8102a9c:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102aa0:	7dfb      	ldrb	r3, [r7, #23]
 8102aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102aa4:	687b      	ldr	r3, [r7, #4]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	f003 0304 	and.w	r3, r3, #4
 8102aac:	2b00      	cmp	r3, #0
 8102aae:	d039      	beq.n	8102b24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102ab0:	687b      	ldr	r3, [r7, #4]
 8102ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102ab6:	2b05      	cmp	r3, #5
 8102ab8:	d820      	bhi.n	8102afc <HAL_RCCEx_PeriphCLKConfig+0x934>
 8102aba:	a201      	add	r2, pc, #4	; (adr r2, 8102ac0 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8102abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102ac0:	08102b03 	.word	0x08102b03
 8102ac4:	08102ad9 	.word	0x08102ad9
 8102ac8:	08102aeb 	.word	0x08102aeb
 8102acc:	08102b03 	.word	0x08102b03
 8102ad0:	08102b03 	.word	0x08102b03
 8102ad4:	08102b03 	.word	0x08102b03
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	3304      	adds	r3, #4
 8102adc:	2101      	movs	r1, #1
 8102ade:	4618      	mov	r0, r3
 8102ae0:	f000 fd70 	bl	81035c4 <RCCEx_PLL2_Config>
 8102ae4:	4603      	mov	r3, r0
 8102ae6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102ae8:	e00c      	b.n	8102b04 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102aea:	687b      	ldr	r3, [r7, #4]
 8102aec:	3324      	adds	r3, #36	; 0x24
 8102aee:	2101      	movs	r1, #1
 8102af0:	4618      	mov	r0, r3
 8102af2:	f000 fe19 	bl	8103728 <RCCEx_PLL3_Config>
 8102af6:	4603      	mov	r3, r0
 8102af8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102afa:	e003      	b.n	8102b04 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102afc:	2301      	movs	r3, #1
 8102afe:	75fb      	strb	r3, [r7, #23]
      break;
 8102b00:	e000      	b.n	8102b04 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8102b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b04:	7dfb      	ldrb	r3, [r7, #23]
 8102b06:	2b00      	cmp	r3, #0
 8102b08:	d10a      	bne.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102b0a:	4bb7      	ldr	r3, [pc, #732]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b0e:	f023 0207 	bic.w	r2, r3, #7
 8102b12:	687b      	ldr	r3, [r7, #4]
 8102b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b18:	49b3      	ldr	r1, [pc, #716]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102b1a:	4313      	orrs	r3, r2
 8102b1c:	658b      	str	r3, [r1, #88]	; 0x58
 8102b1e:	e001      	b.n	8102b24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b20:	7dfb      	ldrb	r3, [r7, #23]
 8102b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102b24:	687b      	ldr	r3, [r7, #4]
 8102b26:	681b      	ldr	r3, [r3, #0]
 8102b28:	f003 0320 	and.w	r3, r3, #32
 8102b2c:	2b00      	cmp	r3, #0
 8102b2e:	d04b      	beq.n	8102bc8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102b3a:	d02e      	beq.n	8102b9a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8102b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102b40:	d828      	bhi.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102b46:	d02a      	beq.n	8102b9e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8102b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102b4c:	d822      	bhi.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102b52:	d026      	beq.n	8102ba2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102b58:	d81c      	bhi.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102b5e:	d010      	beq.n	8102b82 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8102b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102b64:	d816      	bhi.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102b66:	2b00      	cmp	r3, #0
 8102b68:	d01d      	beq.n	8102ba6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8102b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102b6e:	d111      	bne.n	8102b94 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102b70:	687b      	ldr	r3, [r7, #4]
 8102b72:	3304      	adds	r3, #4
 8102b74:	2100      	movs	r1, #0
 8102b76:	4618      	mov	r0, r3
 8102b78:	f000 fd24 	bl	81035c4 <RCCEx_PLL2_Config>
 8102b7c:	4603      	mov	r3, r0
 8102b7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102b80:	e012      	b.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102b82:	687b      	ldr	r3, [r7, #4]
 8102b84:	3324      	adds	r3, #36	; 0x24
 8102b86:	2102      	movs	r1, #2
 8102b88:	4618      	mov	r0, r3
 8102b8a:	f000 fdcd 	bl	8103728 <RCCEx_PLL3_Config>
 8102b8e:	4603      	mov	r3, r0
 8102b90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102b92:	e009      	b.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b94:	2301      	movs	r3, #1
 8102b96:	75fb      	strb	r3, [r7, #23]
      break;
 8102b98:	e006      	b.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102b9a:	bf00      	nop
 8102b9c:	e004      	b.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102b9e:	bf00      	nop
 8102ba0:	e002      	b.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102ba2:	bf00      	nop
 8102ba4:	e000      	b.n	8102ba8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102ba6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ba8:	7dfb      	ldrb	r3, [r7, #23]
 8102baa:	2b00      	cmp	r3, #0
 8102bac:	d10a      	bne.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102bae:	4b8e      	ldr	r3, [pc, #568]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102bb2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102bbc:	498a      	ldr	r1, [pc, #552]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102bbe:	4313      	orrs	r3, r2
 8102bc0:	654b      	str	r3, [r1, #84]	; 0x54
 8102bc2:	e001      	b.n	8102bc8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bc4:	7dfb      	ldrb	r3, [r7, #23]
 8102bc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	681b      	ldr	r3, [r3, #0]
 8102bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102bd0:	2b00      	cmp	r3, #0
 8102bd2:	d04b      	beq.n	8102c6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102bda:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102bde:	d02e      	beq.n	8102c3e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8102be0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102be4:	d828      	bhi.n	8102c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102bea:	d02a      	beq.n	8102c42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8102bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102bf0:	d822      	bhi.n	8102c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102bf6:	d026      	beq.n	8102c46 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8102bf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102bfc:	d81c      	bhi.n	8102c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102c02:	d010      	beq.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8102c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102c08:	d816      	bhi.n	8102c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102c0a:	2b00      	cmp	r3, #0
 8102c0c:	d01d      	beq.n	8102c4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8102c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102c12:	d111      	bne.n	8102c38 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102c14:	687b      	ldr	r3, [r7, #4]
 8102c16:	3304      	adds	r3, #4
 8102c18:	2100      	movs	r1, #0
 8102c1a:	4618      	mov	r0, r3
 8102c1c:	f000 fcd2 	bl	81035c4 <RCCEx_PLL2_Config>
 8102c20:	4603      	mov	r3, r0
 8102c22:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102c24:	e012      	b.n	8102c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102c26:	687b      	ldr	r3, [r7, #4]
 8102c28:	3324      	adds	r3, #36	; 0x24
 8102c2a:	2102      	movs	r1, #2
 8102c2c:	4618      	mov	r0, r3
 8102c2e:	f000 fd7b 	bl	8103728 <RCCEx_PLL3_Config>
 8102c32:	4603      	mov	r3, r0
 8102c34:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102c36:	e009      	b.n	8102c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102c38:	2301      	movs	r3, #1
 8102c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8102c3c:	e006      	b.n	8102c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102c3e:	bf00      	nop
 8102c40:	e004      	b.n	8102c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102c42:	bf00      	nop
 8102c44:	e002      	b.n	8102c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102c46:	bf00      	nop
 8102c48:	e000      	b.n	8102c4c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102c4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c4c:	7dfb      	ldrb	r3, [r7, #23]
 8102c4e:	2b00      	cmp	r3, #0
 8102c50:	d10a      	bne.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102c52:	4b65      	ldr	r3, [pc, #404]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8102c5a:	687b      	ldr	r3, [r7, #4]
 8102c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c60:	4961      	ldr	r1, [pc, #388]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102c62:	4313      	orrs	r3, r2
 8102c64:	658b      	str	r3, [r1, #88]	; 0x58
 8102c66:	e001      	b.n	8102c6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c68:	7dfb      	ldrb	r3, [r7, #23]
 8102c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102c6c:	687b      	ldr	r3, [r7, #4]
 8102c6e:	681b      	ldr	r3, [r3, #0]
 8102c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102c74:	2b00      	cmp	r3, #0
 8102c76:	d04b      	beq.n	8102d10 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102c7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102c82:	d02e      	beq.n	8102ce2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8102c84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102c88:	d828      	bhi.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102c8e:	d02a      	beq.n	8102ce6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8102c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102c94:	d822      	bhi.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102c96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102c9a:	d026      	beq.n	8102cea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102c9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102ca0:	d81c      	bhi.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102ca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102ca6:	d010      	beq.n	8102cca <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8102ca8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102cac:	d816      	bhi.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102cae:	2b00      	cmp	r3, #0
 8102cb0:	d01d      	beq.n	8102cee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102cb6:	d111      	bne.n	8102cdc <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102cb8:	687b      	ldr	r3, [r7, #4]
 8102cba:	3304      	adds	r3, #4
 8102cbc:	2100      	movs	r1, #0
 8102cbe:	4618      	mov	r0, r3
 8102cc0:	f000 fc80 	bl	81035c4 <RCCEx_PLL2_Config>
 8102cc4:	4603      	mov	r3, r0
 8102cc6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102cc8:	e012      	b.n	8102cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	3324      	adds	r3, #36	; 0x24
 8102cce:	2102      	movs	r1, #2
 8102cd0:	4618      	mov	r0, r3
 8102cd2:	f000 fd29 	bl	8103728 <RCCEx_PLL3_Config>
 8102cd6:	4603      	mov	r3, r0
 8102cd8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102cda:	e009      	b.n	8102cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102cdc:	2301      	movs	r3, #1
 8102cde:	75fb      	strb	r3, [r7, #23]
      break;
 8102ce0:	e006      	b.n	8102cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102ce2:	bf00      	nop
 8102ce4:	e004      	b.n	8102cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102ce6:	bf00      	nop
 8102ce8:	e002      	b.n	8102cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102cea:	bf00      	nop
 8102cec:	e000      	b.n	8102cf0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102cf0:	7dfb      	ldrb	r3, [r7, #23]
 8102cf2:	2b00      	cmp	r3, #0
 8102cf4:	d10a      	bne.n	8102d0c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102cf6:	4b3c      	ldr	r3, [pc, #240]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102cfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102d04:	4938      	ldr	r1, [pc, #224]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102d06:	4313      	orrs	r3, r2
 8102d08:	658b      	str	r3, [r1, #88]	; 0x58
 8102d0a:	e001      	b.n	8102d10 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d0c:	7dfb      	ldrb	r3, [r7, #23]
 8102d0e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	681b      	ldr	r3, [r3, #0]
 8102d14:	f003 0308 	and.w	r3, r3, #8
 8102d18:	2b00      	cmp	r3, #0
 8102d1a:	d01a      	beq.n	8102d52 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102d26:	d10a      	bne.n	8102d3e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	3324      	adds	r3, #36	; 0x24
 8102d2c:	2102      	movs	r1, #2
 8102d2e:	4618      	mov	r0, r3
 8102d30:	f000 fcfa 	bl	8103728 <RCCEx_PLL3_Config>
 8102d34:	4603      	mov	r3, r0
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d001      	beq.n	8102d3e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8102d3a:	2301      	movs	r3, #1
 8102d3c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102d3e:	4b2a      	ldr	r3, [pc, #168]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102d4c:	4926      	ldr	r1, [pc, #152]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102d4e:	4313      	orrs	r3, r2
 8102d50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102d52:	687b      	ldr	r3, [r7, #4]
 8102d54:	681b      	ldr	r3, [r3, #0]
 8102d56:	f003 0310 	and.w	r3, r3, #16
 8102d5a:	2b00      	cmp	r3, #0
 8102d5c:	d01a      	beq.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102d64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102d68:	d10a      	bne.n	8102d80 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102d6a:	687b      	ldr	r3, [r7, #4]
 8102d6c:	3324      	adds	r3, #36	; 0x24
 8102d6e:	2102      	movs	r1, #2
 8102d70:	4618      	mov	r0, r3
 8102d72:	f000 fcd9 	bl	8103728 <RCCEx_PLL3_Config>
 8102d76:	4603      	mov	r3, r0
 8102d78:	2b00      	cmp	r3, #0
 8102d7a:	d001      	beq.n	8102d80 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8102d7c:	2301      	movs	r3, #1
 8102d7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102d80:	4b19      	ldr	r3, [pc, #100]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102d88:	687b      	ldr	r3, [r7, #4]
 8102d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102d8e:	4916      	ldr	r1, [pc, #88]	; (8102de8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102d90:	4313      	orrs	r3, r2
 8102d92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	681b      	ldr	r3, [r3, #0]
 8102d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102d9c:	2b00      	cmp	r3, #0
 8102d9e:	d036      	beq.n	8102e0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102daa:	d01f      	beq.n	8102dec <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8102dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102db0:	d817      	bhi.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102db2:	2b00      	cmp	r3, #0
 8102db4:	d003      	beq.n	8102dbe <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8102db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102dba:	d009      	beq.n	8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8102dbc:	e011      	b.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102dbe:	687b      	ldr	r3, [r7, #4]
 8102dc0:	3304      	adds	r3, #4
 8102dc2:	2100      	movs	r1, #0
 8102dc4:	4618      	mov	r0, r3
 8102dc6:	f000 fbfd 	bl	81035c4 <RCCEx_PLL2_Config>
 8102dca:	4603      	mov	r3, r0
 8102dcc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102dce:	e00e      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	3324      	adds	r3, #36	; 0x24
 8102dd4:	2102      	movs	r1, #2
 8102dd6:	4618      	mov	r0, r3
 8102dd8:	f000 fca6 	bl	8103728 <RCCEx_PLL3_Config>
 8102ddc:	4603      	mov	r3, r0
 8102dde:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102de0:	e005      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102de2:	2301      	movs	r3, #1
 8102de4:	75fb      	strb	r3, [r7, #23]
      break;
 8102de6:	e002      	b.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8102de8:	58024400 	.word	0x58024400
      break;
 8102dec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102dee:	7dfb      	ldrb	r3, [r7, #23]
 8102df0:	2b00      	cmp	r3, #0
 8102df2:	d10a      	bne.n	8102e0a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102df4:	4b93      	ldr	r3, [pc, #588]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102df8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102dfc:	687b      	ldr	r3, [r7, #4]
 8102dfe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102e02:	4990      	ldr	r1, [pc, #576]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e04:	4313      	orrs	r3, r2
 8102e06:	658b      	str	r3, [r1, #88]	; 0x58
 8102e08:	e001      	b.n	8102e0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e0a:	7dfb      	ldrb	r3, [r7, #23]
 8102e0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102e0e:	687b      	ldr	r3, [r7, #4]
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102e16:	2b00      	cmp	r3, #0
 8102e18:	d033      	beq.n	8102e82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8102e1a:	687b      	ldr	r3, [r7, #4]
 8102e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102e20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102e24:	d01c      	beq.n	8102e60 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8102e26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102e2a:	d816      	bhi.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8102e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102e30:	d003      	beq.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8102e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102e36:	d007      	beq.n	8102e48 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8102e38:	e00f      	b.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e3a:	4b82      	ldr	r3, [pc, #520]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e3e:	4a81      	ldr	r2, [pc, #516]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8102e46:	e00c      	b.n	8102e62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	3324      	adds	r3, #36	; 0x24
 8102e4c:	2101      	movs	r1, #1
 8102e4e:	4618      	mov	r0, r3
 8102e50:	f000 fc6a 	bl	8103728 <RCCEx_PLL3_Config>
 8102e54:	4603      	mov	r3, r0
 8102e56:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102e58:	e003      	b.n	8102e62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e5a:	2301      	movs	r3, #1
 8102e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8102e5e:	e000      	b.n	8102e62 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8102e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e62:	7dfb      	ldrb	r3, [r7, #23]
 8102e64:	2b00      	cmp	r3, #0
 8102e66:	d10a      	bne.n	8102e7e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102e68:	4b76      	ldr	r3, [pc, #472]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102e76:	4973      	ldr	r1, [pc, #460]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e78:	4313      	orrs	r3, r2
 8102e7a:	654b      	str	r3, [r1, #84]	; 0x54
 8102e7c:	e001      	b.n	8102e82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e7e:	7dfb      	ldrb	r3, [r7, #23]
 8102e80:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	681b      	ldr	r3, [r3, #0]
 8102e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d029      	beq.n	8102ee2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8102e8e:	687b      	ldr	r3, [r7, #4]
 8102e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e92:	2b00      	cmp	r3, #0
 8102e94:	d003      	beq.n	8102e9e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8102e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102e9a:	d007      	beq.n	8102eac <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8102e9c:	e00f      	b.n	8102ebe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e9e:	4b69      	ldr	r3, [pc, #420]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ea2:	4a68      	ldr	r2, [pc, #416]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102eaa:	e00b      	b.n	8102ec4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	3304      	adds	r3, #4
 8102eb0:	2102      	movs	r1, #2
 8102eb2:	4618      	mov	r0, r3
 8102eb4:	f000 fb86 	bl	81035c4 <RCCEx_PLL2_Config>
 8102eb8:	4603      	mov	r3, r0
 8102eba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102ebc:	e002      	b.n	8102ec4 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8102ebe:	2301      	movs	r3, #1
 8102ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8102ec2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ec4:	7dfb      	ldrb	r3, [r7, #23]
 8102ec6:	2b00      	cmp	r3, #0
 8102ec8:	d109      	bne.n	8102ede <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102eca:	4b5e      	ldr	r3, [pc, #376]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102ece:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102ed6:	495b      	ldr	r1, [pc, #364]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ed8:	4313      	orrs	r3, r2
 8102eda:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102edc:	e001      	b.n	8102ee2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ede:	7dfb      	ldrb	r3, [r7, #23]
 8102ee0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	681b      	ldr	r3, [r3, #0]
 8102ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102eea:	2b00      	cmp	r3, #0
 8102eec:	d00a      	beq.n	8102f04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	3324      	adds	r3, #36	; 0x24
 8102ef2:	2102      	movs	r1, #2
 8102ef4:	4618      	mov	r0, r3
 8102ef6:	f000 fc17 	bl	8103728 <RCCEx_PLL3_Config>
 8102efa:	4603      	mov	r3, r0
 8102efc:	2b00      	cmp	r3, #0
 8102efe:	d001      	beq.n	8102f04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8102f00:	2301      	movs	r3, #1
 8102f02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102f0c:	2b00      	cmp	r3, #0
 8102f0e:	d030      	beq.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8102f10:	687b      	ldr	r3, [r7, #4]
 8102f12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102f18:	d017      	beq.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8102f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102f1e:	d811      	bhi.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102f24:	d013      	beq.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8102f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102f2a:	d80b      	bhi.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	d010      	beq.n	8102f52 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8102f30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102f34:	d106      	bne.n	8102f44 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f36:	4b43      	ldr	r3, [pc, #268]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f3a:	4a42      	ldr	r2, [pc, #264]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102f42:	e007      	b.n	8102f54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102f44:	2301      	movs	r3, #1
 8102f46:	75fb      	strb	r3, [r7, #23]
      break;
 8102f48:	e004      	b.n	8102f54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102f4a:	bf00      	nop
 8102f4c:	e002      	b.n	8102f54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102f4e:	bf00      	nop
 8102f50:	e000      	b.n	8102f54 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102f52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f54:	7dfb      	ldrb	r3, [r7, #23]
 8102f56:	2b00      	cmp	r3, #0
 8102f58:	d109      	bne.n	8102f6e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102f5a:	4b3a      	ldr	r3, [pc, #232]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102f66:	4937      	ldr	r1, [pc, #220]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f68:	4313      	orrs	r3, r2
 8102f6a:	654b      	str	r3, [r1, #84]	; 0x54
 8102f6c:	e001      	b.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f6e:	7dfb      	ldrb	r3, [r7, #23]
 8102f70:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102f7a:	2b00      	cmp	r3, #0
 8102f7c:	d008      	beq.n	8102f90 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102f7e:	4b31      	ldr	r3, [pc, #196]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f82:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102f8a:	492e      	ldr	r1, [pc, #184]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f8c:	4313      	orrs	r3, r2
 8102f8e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102f98:	2b00      	cmp	r3, #0
 8102f9a:	d009      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102f9c:	4b29      	ldr	r3, [pc, #164]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f9e:	691b      	ldr	r3, [r3, #16]
 8102fa0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102faa:	4926      	ldr	r1, [pc, #152]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fac:	4313      	orrs	r3, r2
 8102fae:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102fb8:	2b00      	cmp	r3, #0
 8102fba:	d008      	beq.n	8102fce <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102fbc:	4b21      	ldr	r3, [pc, #132]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102fc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102fc4:	687b      	ldr	r3, [r7, #4]
 8102fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102fc8:	491e      	ldr	r1, [pc, #120]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fca:	4313      	orrs	r3, r2
 8102fcc:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	681b      	ldr	r3, [r3, #0]
 8102fd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102fd6:	2b00      	cmp	r3, #0
 8102fd8:	d00d      	beq.n	8102ff6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102fda:	4b1a      	ldr	r3, [pc, #104]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fdc:	691b      	ldr	r3, [r3, #16]
 8102fde:	4a19      	ldr	r2, [pc, #100]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fe0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102fe4:	6113      	str	r3, [r2, #16]
 8102fe6:	4b17      	ldr	r3, [pc, #92]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fe8:	691a      	ldr	r2, [r3, #16]
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102ff0:	4914      	ldr	r1, [pc, #80]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ff2:	4313      	orrs	r3, r2
 8102ff4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102ff6:	687b      	ldr	r3, [r7, #4]
 8102ff8:	681b      	ldr	r3, [r3, #0]
 8102ffa:	2b00      	cmp	r3, #0
 8102ffc:	da08      	bge.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102ffe:	4b11      	ldr	r3, [pc, #68]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103002:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103006:	687b      	ldr	r3, [r7, #4]
 8103008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810300a:	490e      	ldr	r1, [pc, #56]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810300c:	4313      	orrs	r3, r2
 810300e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103010:	687b      	ldr	r3, [r7, #4]
 8103012:	681b      	ldr	r3, [r3, #0]
 8103014:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103018:	2b00      	cmp	r3, #0
 810301a:	d009      	beq.n	8103030 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 810301c:	4b09      	ldr	r3, [pc, #36]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103020:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103024:	687b      	ldr	r3, [r7, #4]
 8103026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810302a:	4906      	ldr	r1, [pc, #24]	; (8103044 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810302c:	4313      	orrs	r3, r2
 810302e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103030:	7dbb      	ldrb	r3, [r7, #22]
 8103032:	2b00      	cmp	r3, #0
 8103034:	d101      	bne.n	810303a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103036:	2300      	movs	r3, #0
 8103038:	e000      	b.n	810303c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 810303a:	2301      	movs	r3, #1
}
 810303c:	4618      	mov	r0, r3
 810303e:	3718      	adds	r7, #24
 8103040:	46bd      	mov	sp, r7
 8103042:	bd80      	pop	{r7, pc}
 8103044:	58024400 	.word	0x58024400

08103048 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103048:	b580      	push	{r7, lr}
 810304a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810304c:	f7ff f85e 	bl	810210c <HAL_RCC_GetHCLKFreq>
 8103050:	4602      	mov	r2, r0
 8103052:	4b06      	ldr	r3, [pc, #24]	; (810306c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103054:	6a1b      	ldr	r3, [r3, #32]
 8103056:	091b      	lsrs	r3, r3, #4
 8103058:	f003 0307 	and.w	r3, r3, #7
 810305c:	4904      	ldr	r1, [pc, #16]	; (8103070 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810305e:	5ccb      	ldrb	r3, [r1, r3]
 8103060:	f003 031f 	and.w	r3, r3, #31
 8103064:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103068:	4618      	mov	r0, r3
 810306a:	bd80      	pop	{r7, pc}
 810306c:	58024400 	.word	0x58024400
 8103070:	08106d28 	.word	0x08106d28

08103074 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103074:	b480      	push	{r7}
 8103076:	b089      	sub	sp, #36	; 0x24
 8103078:	af00      	add	r7, sp, #0
 810307a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810307c:	4ba1      	ldr	r3, [pc, #644]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103080:	f003 0303 	and.w	r3, r3, #3
 8103084:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103086:	4b9f      	ldr	r3, [pc, #636]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810308a:	0b1b      	lsrs	r3, r3, #12
 810308c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103090:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103092:	4b9c      	ldr	r3, [pc, #624]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103096:	091b      	lsrs	r3, r3, #4
 8103098:	f003 0301 	and.w	r3, r3, #1
 810309c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810309e:	4b99      	ldr	r3, [pc, #612]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81030a2:	08db      	lsrs	r3, r3, #3
 81030a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81030a8:	693a      	ldr	r2, [r7, #16]
 81030aa:	fb02 f303 	mul.w	r3, r2, r3
 81030ae:	ee07 3a90 	vmov	s15, r3
 81030b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81030ba:	697b      	ldr	r3, [r7, #20]
 81030bc:	2b00      	cmp	r3, #0
 81030be:	f000 8111 	beq.w	81032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81030c2:	69bb      	ldr	r3, [r7, #24]
 81030c4:	2b02      	cmp	r3, #2
 81030c6:	f000 8083 	beq.w	81031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81030ca:	69bb      	ldr	r3, [r7, #24]
 81030cc:	2b02      	cmp	r3, #2
 81030ce:	f200 80a1 	bhi.w	8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81030d2:	69bb      	ldr	r3, [r7, #24]
 81030d4:	2b00      	cmp	r3, #0
 81030d6:	d003      	beq.n	81030e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81030d8:	69bb      	ldr	r3, [r7, #24]
 81030da:	2b01      	cmp	r3, #1
 81030dc:	d056      	beq.n	810318c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81030de:	e099      	b.n	8103214 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81030e0:	4b88      	ldr	r3, [pc, #544]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	f003 0320 	and.w	r3, r3, #32
 81030e8:	2b00      	cmp	r3, #0
 81030ea:	d02d      	beq.n	8103148 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81030ec:	4b85      	ldr	r3, [pc, #532]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030ee:	681b      	ldr	r3, [r3, #0]
 81030f0:	08db      	lsrs	r3, r3, #3
 81030f2:	f003 0303 	and.w	r3, r3, #3
 81030f6:	4a84      	ldr	r2, [pc, #528]	; (8103308 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81030f8:	fa22 f303 	lsr.w	r3, r2, r3
 81030fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81030fe:	68bb      	ldr	r3, [r7, #8]
 8103100:	ee07 3a90 	vmov	s15, r3
 8103104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103108:	697b      	ldr	r3, [r7, #20]
 810310a:	ee07 3a90 	vmov	s15, r3
 810310e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103116:	4b7b      	ldr	r3, [pc, #492]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810311e:	ee07 3a90 	vmov	s15, r3
 8103122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103126:	ed97 6a03 	vldr	s12, [r7, #12]
 810312a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810330c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103142:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103146:	e087      	b.n	8103258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103148:	697b      	ldr	r3, [r7, #20]
 810314a:	ee07 3a90 	vmov	s15, r3
 810314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103152:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103310 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810315a:	4b6a      	ldr	r3, [pc, #424]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103162:	ee07 3a90 	vmov	s15, r3
 8103166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810316a:	ed97 6a03 	vldr	s12, [r7, #12]
 810316e:	eddf 5a67 	vldr	s11, [pc, #412]	; 810330c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810317a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810318a:	e065      	b.n	8103258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810318c:	697b      	ldr	r3, [r7, #20]
 810318e:	ee07 3a90 	vmov	s15, r3
 8103192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103196:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810319e:	4b59      	ldr	r3, [pc, #356]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031a6:	ee07 3a90 	vmov	s15, r3
 81031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81031b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 810330c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81031ce:	e043      	b.n	8103258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81031d0:	697b      	ldr	r3, [r7, #20]
 81031d2:	ee07 3a90 	vmov	s15, r3
 81031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81031de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031e2:	4b48      	ldr	r3, [pc, #288]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031ea:	ee07 3a90 	vmov	s15, r3
 81031ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031f2:	ed97 6a03 	vldr	s12, [r7, #12]
 81031f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 810330c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81031fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810320e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103212:	e021      	b.n	8103258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103214:	697b      	ldr	r3, [r7, #20]
 8103216:	ee07 3a90 	vmov	s15, r3
 810321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810321e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103226:	4b37      	ldr	r3, [pc, #220]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810322a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810322e:	ee07 3a90 	vmov	s15, r3
 8103232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103236:	ed97 6a03 	vldr	s12, [r7, #12]
 810323a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810330c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810323e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810324a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810324e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103252:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103256:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8103258:	4b2a      	ldr	r3, [pc, #168]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810325c:	0a5b      	lsrs	r3, r3, #9
 810325e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103262:	ee07 3a90 	vmov	s15, r3
 8103266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810326a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810326e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103272:	edd7 6a07 	vldr	s13, [r7, #28]
 8103276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810327a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810327e:	ee17 2a90 	vmov	r2, s15
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8103286:	4b1f      	ldr	r3, [pc, #124]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810328a:	0c1b      	lsrs	r3, r3, #16
 810328c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103290:	ee07 3a90 	vmov	s15, r3
 8103294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810329c:	ee37 7a87 	vadd.f32	s14, s15, s14
 81032a0:	edd7 6a07 	vldr	s13, [r7, #28]
 81032a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81032ac:	ee17 2a90 	vmov	r2, s15
 81032b0:	687b      	ldr	r3, [r7, #4]
 81032b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81032b4:	4b13      	ldr	r3, [pc, #76]	; (8103304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81032b8:	0e1b      	lsrs	r3, r3, #24
 81032ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81032be:	ee07 3a90 	vmov	s15, r3
 81032c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81032ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 81032ce:	edd7 6a07 	vldr	s13, [r7, #28]
 81032d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81032da:	ee17 2a90 	vmov	r2, s15
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81032e2:	e008      	b.n	81032f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	2200      	movs	r2, #0
 81032e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	2200      	movs	r2, #0
 81032ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81032f0:	687b      	ldr	r3, [r7, #4]
 81032f2:	2200      	movs	r2, #0
 81032f4:	609a      	str	r2, [r3, #8]
}
 81032f6:	bf00      	nop
 81032f8:	3724      	adds	r7, #36	; 0x24
 81032fa:	46bd      	mov	sp, r7
 81032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103300:	4770      	bx	lr
 8103302:	bf00      	nop
 8103304:	58024400 	.word	0x58024400
 8103308:	03d09000 	.word	0x03d09000
 810330c:	46000000 	.word	0x46000000
 8103310:	4c742400 	.word	0x4c742400
 8103314:	4a742400 	.word	0x4a742400
 8103318:	4af42400 	.word	0x4af42400

0810331c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 810331c:	b480      	push	{r7}
 810331e:	b089      	sub	sp, #36	; 0x24
 8103320:	af00      	add	r7, sp, #0
 8103322:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103324:	4ba1      	ldr	r3, [pc, #644]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103328:	f003 0303 	and.w	r3, r3, #3
 810332c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810332e:	4b9f      	ldr	r3, [pc, #636]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103332:	0d1b      	lsrs	r3, r3, #20
 8103334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103338:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810333a:	4b9c      	ldr	r3, [pc, #624]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810333e:	0a1b      	lsrs	r3, r3, #8
 8103340:	f003 0301 	and.w	r3, r3, #1
 8103344:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8103346:	4b99      	ldr	r3, [pc, #612]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810334a:	08db      	lsrs	r3, r3, #3
 810334c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103350:	693a      	ldr	r2, [r7, #16]
 8103352:	fb02 f303 	mul.w	r3, r2, r3
 8103356:	ee07 3a90 	vmov	s15, r3
 810335a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810335e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103362:	697b      	ldr	r3, [r7, #20]
 8103364:	2b00      	cmp	r3, #0
 8103366:	f000 8111 	beq.w	810358c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810336a:	69bb      	ldr	r3, [r7, #24]
 810336c:	2b02      	cmp	r3, #2
 810336e:	f000 8083 	beq.w	8103478 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8103372:	69bb      	ldr	r3, [r7, #24]
 8103374:	2b02      	cmp	r3, #2
 8103376:	f200 80a1 	bhi.w	81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810337a:	69bb      	ldr	r3, [r7, #24]
 810337c:	2b00      	cmp	r3, #0
 810337e:	d003      	beq.n	8103388 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103380:	69bb      	ldr	r3, [r7, #24]
 8103382:	2b01      	cmp	r3, #1
 8103384:	d056      	beq.n	8103434 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103386:	e099      	b.n	81034bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103388:	4b88      	ldr	r3, [pc, #544]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810338a:	681b      	ldr	r3, [r3, #0]
 810338c:	f003 0320 	and.w	r3, r3, #32
 8103390:	2b00      	cmp	r3, #0
 8103392:	d02d      	beq.n	81033f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103394:	4b85      	ldr	r3, [pc, #532]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103396:	681b      	ldr	r3, [r3, #0]
 8103398:	08db      	lsrs	r3, r3, #3
 810339a:	f003 0303 	and.w	r3, r3, #3
 810339e:	4a84      	ldr	r2, [pc, #528]	; (81035b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81033a0:	fa22 f303 	lsr.w	r3, r2, r3
 81033a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81033a6:	68bb      	ldr	r3, [r7, #8]
 81033a8:	ee07 3a90 	vmov	s15, r3
 81033ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033b0:	697b      	ldr	r3, [r7, #20]
 81033b2:	ee07 3a90 	vmov	s15, r3
 81033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033be:	4b7b      	ldr	r3, [pc, #492]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033c6:	ee07 3a90 	vmov	s15, r3
 81033ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81033d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 81035b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81033d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81033e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81033ee:	e087      	b.n	8103500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81033f0:	697b      	ldr	r3, [r7, #20]
 81033f2:	ee07 3a90 	vmov	s15, r3
 81033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81035b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103402:	4b6a      	ldr	r3, [pc, #424]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810340a:	ee07 3a90 	vmov	s15, r3
 810340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103412:	ed97 6a03 	vldr	s12, [r7, #12]
 8103416:	eddf 5a67 	vldr	s11, [pc, #412]	; 81035b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810342e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103432:	e065      	b.n	8103500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103434:	697b      	ldr	r3, [r7, #20]
 8103436:	ee07 3a90 	vmov	s15, r3
 810343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810343e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81035bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103446:	4b59      	ldr	r3, [pc, #356]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810344e:	ee07 3a90 	vmov	s15, r3
 8103452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103456:	ed97 6a03 	vldr	s12, [r7, #12]
 810345a:	eddf 5a56 	vldr	s11, [pc, #344]	; 81035b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103476:	e043      	b.n	8103500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103478:	697b      	ldr	r3, [r7, #20]
 810347a:	ee07 3a90 	vmov	s15, r3
 810347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103482:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81035c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810348a:	4b48      	ldr	r3, [pc, #288]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103492:	ee07 3a90 	vmov	s15, r3
 8103496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810349a:	ed97 6a03 	vldr	s12, [r7, #12]
 810349e:	eddf 5a45 	vldr	s11, [pc, #276]	; 81035b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81034a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81034ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81034ba:	e021      	b.n	8103500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81034bc:	697b      	ldr	r3, [r7, #20]
 81034be:	ee07 3a90 	vmov	s15, r3
 81034c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81035bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81034ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034ce:	4b37      	ldr	r3, [pc, #220]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81034d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034d6:	ee07 3a90 	vmov	s15, r3
 81034da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034de:	ed97 6a03 	vldr	s12, [r7, #12]
 81034e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 81035b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81034e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81034f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81034fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103500:	4b2a      	ldr	r3, [pc, #168]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103504:	0a5b      	lsrs	r3, r3, #9
 8103506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810350a:	ee07 3a90 	vmov	s15, r3
 810350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103516:	ee37 7a87 	vadd.f32	s14, s15, s14
 810351a:	edd7 6a07 	vldr	s13, [r7, #28]
 810351e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103526:	ee17 2a90 	vmov	r2, s15
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810352e:	4b1f      	ldr	r3, [pc, #124]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103532:	0c1b      	lsrs	r3, r3, #16
 8103534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103538:	ee07 3a90 	vmov	s15, r3
 810353c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103548:	edd7 6a07 	vldr	s13, [r7, #28]
 810354c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103554:	ee17 2a90 	vmov	r2, s15
 8103558:	687b      	ldr	r3, [r7, #4]
 810355a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 810355c:	4b13      	ldr	r3, [pc, #76]	; (81035ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103560:	0e1b      	lsrs	r3, r3, #24
 8103562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103566:	ee07 3a90 	vmov	s15, r3
 810356a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810356e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103576:	edd7 6a07 	vldr	s13, [r7, #28]
 810357a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810357e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103582:	ee17 2a90 	vmov	r2, s15
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810358a:	e008      	b.n	810359e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	2200      	movs	r2, #0
 8103590:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103592:	687b      	ldr	r3, [r7, #4]
 8103594:	2200      	movs	r2, #0
 8103596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103598:	687b      	ldr	r3, [r7, #4]
 810359a:	2200      	movs	r2, #0
 810359c:	609a      	str	r2, [r3, #8]
}
 810359e:	bf00      	nop
 81035a0:	3724      	adds	r7, #36	; 0x24
 81035a2:	46bd      	mov	sp, r7
 81035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81035a8:	4770      	bx	lr
 81035aa:	bf00      	nop
 81035ac:	58024400 	.word	0x58024400
 81035b0:	03d09000 	.word	0x03d09000
 81035b4:	46000000 	.word	0x46000000
 81035b8:	4c742400 	.word	0x4c742400
 81035bc:	4a742400 	.word	0x4a742400
 81035c0:	4af42400 	.word	0x4af42400

081035c4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81035c4:	b580      	push	{r7, lr}
 81035c6:	b084      	sub	sp, #16
 81035c8:	af00      	add	r7, sp, #0
 81035ca:	6078      	str	r0, [r7, #4]
 81035cc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81035ce:	2300      	movs	r3, #0
 81035d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81035d2:	4b54      	ldr	r3, [pc, #336]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81035d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035d6:	f003 0303 	and.w	r3, r3, #3
 81035da:	2b03      	cmp	r3, #3
 81035dc:	d101      	bne.n	81035e2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81035de:	2301      	movs	r3, #1
 81035e0:	e09b      	b.n	810371a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81035e2:	4b50      	ldr	r3, [pc, #320]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	4a4f      	ldr	r2, [pc, #316]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81035e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81035ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81035ee:	f7fe f841 	bl	8101674 <HAL_GetTick>
 81035f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81035f4:	e008      	b.n	8103608 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81035f6:	f7fe f83d 	bl	8101674 <HAL_GetTick>
 81035fa:	4602      	mov	r2, r0
 81035fc:	68bb      	ldr	r3, [r7, #8]
 81035fe:	1ad3      	subs	r3, r2, r3
 8103600:	2b02      	cmp	r3, #2
 8103602:	d901      	bls.n	8103608 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103604:	2303      	movs	r3, #3
 8103606:	e088      	b.n	810371a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103608:	4b46      	ldr	r3, [pc, #280]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 810360a:	681b      	ldr	r3, [r3, #0]
 810360c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103610:	2b00      	cmp	r3, #0
 8103612:	d1f0      	bne.n	81035f6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103614:	4b43      	ldr	r3, [pc, #268]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 8103616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103618:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	681b      	ldr	r3, [r3, #0]
 8103620:	031b      	lsls	r3, r3, #12
 8103622:	4940      	ldr	r1, [pc, #256]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 8103624:	4313      	orrs	r3, r2
 8103626:	628b      	str	r3, [r1, #40]	; 0x28
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	685b      	ldr	r3, [r3, #4]
 810362c:	3b01      	subs	r3, #1
 810362e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103632:	687b      	ldr	r3, [r7, #4]
 8103634:	689b      	ldr	r3, [r3, #8]
 8103636:	3b01      	subs	r3, #1
 8103638:	025b      	lsls	r3, r3, #9
 810363a:	b29b      	uxth	r3, r3
 810363c:	431a      	orrs	r2, r3
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	68db      	ldr	r3, [r3, #12]
 8103642:	3b01      	subs	r3, #1
 8103644:	041b      	lsls	r3, r3, #16
 8103646:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810364a:	431a      	orrs	r2, r3
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	691b      	ldr	r3, [r3, #16]
 8103650:	3b01      	subs	r3, #1
 8103652:	061b      	lsls	r3, r3, #24
 8103654:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103658:	4932      	ldr	r1, [pc, #200]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 810365a:	4313      	orrs	r3, r2
 810365c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810365e:	4b31      	ldr	r3, [pc, #196]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 8103660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103662:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	695b      	ldr	r3, [r3, #20]
 810366a:	492e      	ldr	r1, [pc, #184]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 810366c:	4313      	orrs	r3, r2
 810366e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103670:	4b2c      	ldr	r3, [pc, #176]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 8103672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103674:	f023 0220 	bic.w	r2, r3, #32
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	699b      	ldr	r3, [r3, #24]
 810367c:	4929      	ldr	r1, [pc, #164]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 810367e:	4313      	orrs	r3, r2
 8103680:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103682:	4b28      	ldr	r3, [pc, #160]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 8103684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103686:	4a27      	ldr	r2, [pc, #156]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 8103688:	f023 0310 	bic.w	r3, r3, #16
 810368c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810368e:	4b25      	ldr	r3, [pc, #148]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 8103690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103692:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103696:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810369a:	687a      	ldr	r2, [r7, #4]
 810369c:	69d2      	ldr	r2, [r2, #28]
 810369e:	00d2      	lsls	r2, r2, #3
 81036a0:	4920      	ldr	r1, [pc, #128]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036a2:	4313      	orrs	r3, r2
 81036a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81036a6:	4b1f      	ldr	r3, [pc, #124]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036aa:	4a1e      	ldr	r2, [pc, #120]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036ac:	f043 0310 	orr.w	r3, r3, #16
 81036b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81036b2:	683b      	ldr	r3, [r7, #0]
 81036b4:	2b00      	cmp	r3, #0
 81036b6:	d106      	bne.n	81036c6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81036b8:	4b1a      	ldr	r3, [pc, #104]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036bc:	4a19      	ldr	r2, [pc, #100]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81036c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81036c4:	e00f      	b.n	81036e6 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81036c6:	683b      	ldr	r3, [r7, #0]
 81036c8:	2b01      	cmp	r3, #1
 81036ca:	d106      	bne.n	81036da <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81036cc:	4b15      	ldr	r3, [pc, #84]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036d0:	4a14      	ldr	r2, [pc, #80]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81036d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81036d8:	e005      	b.n	81036e6 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81036da:	4b12      	ldr	r3, [pc, #72]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036de:	4a11      	ldr	r2, [pc, #68]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81036e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81036e6:	4b0f      	ldr	r3, [pc, #60]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036e8:	681b      	ldr	r3, [r3, #0]
 81036ea:	4a0e      	ldr	r2, [pc, #56]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 81036ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81036f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81036f2:	f7fd ffbf 	bl	8101674 <HAL_GetTick>
 81036f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81036f8:	e008      	b.n	810370c <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81036fa:	f7fd ffbb 	bl	8101674 <HAL_GetTick>
 81036fe:	4602      	mov	r2, r0
 8103700:	68bb      	ldr	r3, [r7, #8]
 8103702:	1ad3      	subs	r3, r2, r3
 8103704:	2b02      	cmp	r3, #2
 8103706:	d901      	bls.n	810370c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103708:	2303      	movs	r3, #3
 810370a:	e006      	b.n	810371a <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810370c:	4b05      	ldr	r3, [pc, #20]	; (8103724 <RCCEx_PLL2_Config+0x160>)
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103714:	2b00      	cmp	r3, #0
 8103716:	d0f0      	beq.n	81036fa <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103718:	7bfb      	ldrb	r3, [r7, #15]
}
 810371a:	4618      	mov	r0, r3
 810371c:	3710      	adds	r7, #16
 810371e:	46bd      	mov	sp, r7
 8103720:	bd80      	pop	{r7, pc}
 8103722:	bf00      	nop
 8103724:	58024400 	.word	0x58024400

08103728 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103728:	b580      	push	{r7, lr}
 810372a:	b084      	sub	sp, #16
 810372c:	af00      	add	r7, sp, #0
 810372e:	6078      	str	r0, [r7, #4]
 8103730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103732:	2300      	movs	r3, #0
 8103734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103736:	4b54      	ldr	r3, [pc, #336]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810373a:	f003 0303 	and.w	r3, r3, #3
 810373e:	2b03      	cmp	r3, #3
 8103740:	d101      	bne.n	8103746 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103742:	2301      	movs	r3, #1
 8103744:	e09b      	b.n	810387e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103746:	4b50      	ldr	r3, [pc, #320]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103748:	681b      	ldr	r3, [r3, #0]
 810374a:	4a4f      	ldr	r2, [pc, #316]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 810374c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103752:	f7fd ff8f 	bl	8101674 <HAL_GetTick>
 8103756:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103758:	e008      	b.n	810376c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810375a:	f7fd ff8b 	bl	8101674 <HAL_GetTick>
 810375e:	4602      	mov	r2, r0
 8103760:	68bb      	ldr	r3, [r7, #8]
 8103762:	1ad3      	subs	r3, r2, r3
 8103764:	2b02      	cmp	r3, #2
 8103766:	d901      	bls.n	810376c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103768:	2303      	movs	r3, #3
 810376a:	e088      	b.n	810387e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810376c:	4b46      	ldr	r3, [pc, #280]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 810376e:	681b      	ldr	r3, [r3, #0]
 8103770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103774:	2b00      	cmp	r3, #0
 8103776:	d1f0      	bne.n	810375a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103778:	4b43      	ldr	r3, [pc, #268]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 810377a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810377c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	051b      	lsls	r3, r3, #20
 8103786:	4940      	ldr	r1, [pc, #256]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103788:	4313      	orrs	r3, r2
 810378a:	628b      	str	r3, [r1, #40]	; 0x28
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	685b      	ldr	r3, [r3, #4]
 8103790:	3b01      	subs	r3, #1
 8103792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103796:	687b      	ldr	r3, [r7, #4]
 8103798:	689b      	ldr	r3, [r3, #8]
 810379a:	3b01      	subs	r3, #1
 810379c:	025b      	lsls	r3, r3, #9
 810379e:	b29b      	uxth	r3, r3
 81037a0:	431a      	orrs	r2, r3
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	68db      	ldr	r3, [r3, #12]
 81037a6:	3b01      	subs	r3, #1
 81037a8:	041b      	lsls	r3, r3, #16
 81037aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81037ae:	431a      	orrs	r2, r3
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	691b      	ldr	r3, [r3, #16]
 81037b4:	3b01      	subs	r3, #1
 81037b6:	061b      	lsls	r3, r3, #24
 81037b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81037bc:	4932      	ldr	r1, [pc, #200]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 81037be:	4313      	orrs	r3, r2
 81037c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81037c2:	4b31      	ldr	r3, [pc, #196]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 81037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81037ca:	687b      	ldr	r3, [r7, #4]
 81037cc:	695b      	ldr	r3, [r3, #20]
 81037ce:	492e      	ldr	r1, [pc, #184]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 81037d0:	4313      	orrs	r3, r2
 81037d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81037d4:	4b2c      	ldr	r3, [pc, #176]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 81037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81037dc:	687b      	ldr	r3, [r7, #4]
 81037de:	699b      	ldr	r3, [r3, #24]
 81037e0:	4929      	ldr	r1, [pc, #164]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 81037e2:	4313      	orrs	r3, r2
 81037e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81037e6:	4b28      	ldr	r3, [pc, #160]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 81037e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037ea:	4a27      	ldr	r2, [pc, #156]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 81037ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81037f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81037f2:	4b25      	ldr	r3, [pc, #148]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 81037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81037f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81037fa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81037fe:	687a      	ldr	r2, [r7, #4]
 8103800:	69d2      	ldr	r2, [r2, #28]
 8103802:	00d2      	lsls	r2, r2, #3
 8103804:	4920      	ldr	r1, [pc, #128]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103806:	4313      	orrs	r3, r2
 8103808:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810380a:	4b1f      	ldr	r3, [pc, #124]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 810380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810380e:	4a1e      	ldr	r2, [pc, #120]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103816:	683b      	ldr	r3, [r7, #0]
 8103818:	2b00      	cmp	r3, #0
 810381a:	d106      	bne.n	810382a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 810381c:	4b1a      	ldr	r3, [pc, #104]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 810381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103820:	4a19      	ldr	r2, [pc, #100]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103822:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103826:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103828:	e00f      	b.n	810384a <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810382a:	683b      	ldr	r3, [r7, #0]
 810382c:	2b01      	cmp	r3, #1
 810382e:	d106      	bne.n	810383e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103830:	4b15      	ldr	r3, [pc, #84]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103834:	4a14      	ldr	r2, [pc, #80]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103836:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810383a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810383c:	e005      	b.n	810384a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810383e:	4b12      	ldr	r3, [pc, #72]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103842:	4a11      	ldr	r2, [pc, #68]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103848:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810384a:	4b0f      	ldr	r3, [pc, #60]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 810384c:	681b      	ldr	r3, [r3, #0]
 810384e:	4a0e      	ldr	r2, [pc, #56]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103856:	f7fd ff0d 	bl	8101674 <HAL_GetTick>
 810385a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810385c:	e008      	b.n	8103870 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810385e:	f7fd ff09 	bl	8101674 <HAL_GetTick>
 8103862:	4602      	mov	r2, r0
 8103864:	68bb      	ldr	r3, [r7, #8]
 8103866:	1ad3      	subs	r3, r2, r3
 8103868:	2b02      	cmp	r3, #2
 810386a:	d901      	bls.n	8103870 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810386c:	2303      	movs	r3, #3
 810386e:	e006      	b.n	810387e <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103870:	4b05      	ldr	r3, [pc, #20]	; (8103888 <RCCEx_PLL3_Config+0x160>)
 8103872:	681b      	ldr	r3, [r3, #0]
 8103874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103878:	2b00      	cmp	r3, #0
 810387a:	d0f0      	beq.n	810385e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810387c:	7bfb      	ldrb	r3, [r7, #15]
}
 810387e:	4618      	mov	r0, r3
 8103880:	3710      	adds	r7, #16
 8103882:	46bd      	mov	sp, r7
 8103884:	bd80      	pop	{r7, pc}
 8103886:	bf00      	nop
 8103888:	58024400 	.word	0x58024400

0810388c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810388c:	b580      	push	{r7, lr}
 810388e:	b084      	sub	sp, #16
 8103890:	af00      	add	r7, sp, #0
 8103892:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8103894:	687b      	ldr	r3, [r7, #4]
 8103896:	2b00      	cmp	r3, #0
 8103898:	d101      	bne.n	810389e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810389a:	2301      	movs	r3, #1
 810389c:	e0f1      	b.n	8103a82 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810389e:	687b      	ldr	r3, [r7, #4]
 81038a0:	2200      	movs	r2, #0
 81038a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81038a4:	687b      	ldr	r3, [r7, #4]
 81038a6:	681b      	ldr	r3, [r3, #0]
 81038a8:	4a78      	ldr	r2, [pc, #480]	; (8103a8c <HAL_SPI_Init+0x200>)
 81038aa:	4293      	cmp	r3, r2
 81038ac:	d00f      	beq.n	81038ce <HAL_SPI_Init+0x42>
 81038ae:	687b      	ldr	r3, [r7, #4]
 81038b0:	681b      	ldr	r3, [r3, #0]
 81038b2:	4a77      	ldr	r2, [pc, #476]	; (8103a90 <HAL_SPI_Init+0x204>)
 81038b4:	4293      	cmp	r3, r2
 81038b6:	d00a      	beq.n	81038ce <HAL_SPI_Init+0x42>
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	681b      	ldr	r3, [r3, #0]
 81038bc:	4a75      	ldr	r2, [pc, #468]	; (8103a94 <HAL_SPI_Init+0x208>)
 81038be:	4293      	cmp	r3, r2
 81038c0:	d005      	beq.n	81038ce <HAL_SPI_Init+0x42>
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	68db      	ldr	r3, [r3, #12]
 81038c6:	2b0f      	cmp	r3, #15
 81038c8:	d901      	bls.n	81038ce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81038ca:	2301      	movs	r3, #1
 81038cc:	e0d9      	b.n	8103a82 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81038ce:	6878      	ldr	r0, [r7, #4]
 81038d0:	f001 f877 	bl	81049c2 <SPI_GetPacketSize>
 81038d4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	681b      	ldr	r3, [r3, #0]
 81038da:	4a6c      	ldr	r2, [pc, #432]	; (8103a8c <HAL_SPI_Init+0x200>)
 81038dc:	4293      	cmp	r3, r2
 81038de:	d00c      	beq.n	81038fa <HAL_SPI_Init+0x6e>
 81038e0:	687b      	ldr	r3, [r7, #4]
 81038e2:	681b      	ldr	r3, [r3, #0]
 81038e4:	4a6a      	ldr	r2, [pc, #424]	; (8103a90 <HAL_SPI_Init+0x204>)
 81038e6:	4293      	cmp	r3, r2
 81038e8:	d007      	beq.n	81038fa <HAL_SPI_Init+0x6e>
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	681b      	ldr	r3, [r3, #0]
 81038ee:	4a69      	ldr	r2, [pc, #420]	; (8103a94 <HAL_SPI_Init+0x208>)
 81038f0:	4293      	cmp	r3, r2
 81038f2:	d002      	beq.n	81038fa <HAL_SPI_Init+0x6e>
 81038f4:	68fb      	ldr	r3, [r7, #12]
 81038f6:	2b08      	cmp	r3, #8
 81038f8:	d811      	bhi.n	810391e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81038fe:	4a63      	ldr	r2, [pc, #396]	; (8103a8c <HAL_SPI_Init+0x200>)
 8103900:	4293      	cmp	r3, r2
 8103902:	d009      	beq.n	8103918 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	681b      	ldr	r3, [r3, #0]
 8103908:	4a61      	ldr	r2, [pc, #388]	; (8103a90 <HAL_SPI_Init+0x204>)
 810390a:	4293      	cmp	r3, r2
 810390c:	d004      	beq.n	8103918 <HAL_SPI_Init+0x8c>
 810390e:	687b      	ldr	r3, [r7, #4]
 8103910:	681b      	ldr	r3, [r3, #0]
 8103912:	4a60      	ldr	r2, [pc, #384]	; (8103a94 <HAL_SPI_Init+0x208>)
 8103914:	4293      	cmp	r3, r2
 8103916:	d104      	bne.n	8103922 <HAL_SPI_Init+0x96>
 8103918:	68fb      	ldr	r3, [r7, #12]
 810391a:	2b10      	cmp	r3, #16
 810391c:	d901      	bls.n	8103922 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810391e:	2301      	movs	r3, #1
 8103920:	e0af      	b.n	8103a82 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103928:	b2db      	uxtb	r3, r3
 810392a:	2b00      	cmp	r3, #0
 810392c:	d106      	bne.n	810393c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	2200      	movs	r2, #0
 8103932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8103936:	6878      	ldr	r0, [r7, #4]
 8103938:	f7fd fc10 	bl	810115c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	2202      	movs	r2, #2
 8103940:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	681a      	ldr	r2, [r3, #0]
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	681b      	ldr	r3, [r3, #0]
 810394e:	f022 0201 	bic.w	r2, r2, #1
 8103952:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	689b      	ldr	r3, [r3, #8]
 810395a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 810395e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	699b      	ldr	r3, [r3, #24]
 8103964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103968:	d119      	bne.n	810399e <HAL_SPI_Init+0x112>
 810396a:	687b      	ldr	r3, [r7, #4]
 810396c:	685b      	ldr	r3, [r3, #4]
 810396e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103972:	d103      	bne.n	810397c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103974:	687b      	ldr	r3, [r7, #4]
 8103976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8103978:	2b00      	cmp	r3, #0
 810397a:	d008      	beq.n	810398e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810397c:	687b      	ldr	r3, [r7, #4]
 810397e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103980:	2b00      	cmp	r3, #0
 8103982:	d10c      	bne.n	810399e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810398c:	d107      	bne.n	810399e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	681a      	ldr	r2, [r3, #0]
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 810399c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	69da      	ldr	r2, [r3, #28]
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81039a6:	431a      	orrs	r2, r3
 81039a8:	68bb      	ldr	r3, [r7, #8]
 81039aa:	431a      	orrs	r2, r3
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81039b0:	ea42 0103 	orr.w	r1, r2, r3
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	68da      	ldr	r2, [r3, #12]
 81039b8:	687b      	ldr	r3, [r7, #4]
 81039ba:	681b      	ldr	r3, [r3, #0]
 81039bc:	430a      	orrs	r2, r1
 81039be:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81039c4:	687b      	ldr	r3, [r7, #4]
 81039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81039c8:	431a      	orrs	r2, r3
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81039ce:	431a      	orrs	r2, r3
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	699b      	ldr	r3, [r3, #24]
 81039d4:	431a      	orrs	r2, r3
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	691b      	ldr	r3, [r3, #16]
 81039da:	431a      	orrs	r2, r3
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	695b      	ldr	r3, [r3, #20]
 81039e0:	431a      	orrs	r2, r3
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	6a1b      	ldr	r3, [r3, #32]
 81039e6:	431a      	orrs	r2, r3
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	685b      	ldr	r3, [r3, #4]
 81039ec:	431a      	orrs	r2, r3
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039f2:	431a      	orrs	r2, r3
 81039f4:	687b      	ldr	r3, [r7, #4]
 81039f6:	689b      	ldr	r3, [r3, #8]
 81039f8:	431a      	orrs	r2, r3
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81039fe:	ea42 0103 	orr.w	r1, r2, r3
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8103a06:	687b      	ldr	r3, [r7, #4]
 8103a08:	681b      	ldr	r3, [r3, #0]
 8103a0a:	430a      	orrs	r2, r1
 8103a0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	685b      	ldr	r3, [r3, #4]
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	d113      	bne.n	8103a3e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	681b      	ldr	r3, [r3, #0]
 8103a1a:	689b      	ldr	r3, [r3, #8]
 8103a1c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103a28:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	681b      	ldr	r3, [r3, #0]
 8103a2e:	689b      	ldr	r3, [r3, #8]
 8103a30:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8103a34:	687b      	ldr	r3, [r7, #4]
 8103a36:	681b      	ldr	r3, [r3, #0]
 8103a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8103a3c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	681b      	ldr	r3, [r3, #0]
 8103a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	681b      	ldr	r3, [r3, #0]
 8103a48:	f022 0201 	bic.w	r2, r2, #1
 8103a4c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8103a4e:	687b      	ldr	r3, [r7, #4]
 8103a50:	685b      	ldr	r3, [r3, #4]
 8103a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103a56:	2b00      	cmp	r3, #0
 8103a58:	d00a      	beq.n	8103a70 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8103a5a:	687b      	ldr	r3, [r7, #4]
 8103a5c:	681b      	ldr	r3, [r3, #0]
 8103a5e:	68db      	ldr	r3, [r3, #12]
 8103a60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	430a      	orrs	r2, r1
 8103a6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8103a70:	687b      	ldr	r3, [r7, #4]
 8103a72:	2200      	movs	r2, #0
 8103a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	2201      	movs	r2, #1
 8103a7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8103a80:	2300      	movs	r3, #0
}
 8103a82:	4618      	mov	r0, r3
 8103a84:	3710      	adds	r7, #16
 8103a86:	46bd      	mov	sp, r7
 8103a88:	bd80      	pop	{r7, pc}
 8103a8a:	bf00      	nop
 8103a8c:	40013000 	.word	0x40013000
 8103a90:	40003800 	.word	0x40003800
 8103a94:	40003c00 	.word	0x40003c00

08103a98 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103a98:	b580      	push	{r7, lr}
 8103a9a:	b08a      	sub	sp, #40	; 0x28
 8103a9c:	af02      	add	r7, sp, #8
 8103a9e:	60f8      	str	r0, [r7, #12]
 8103aa0:	60b9      	str	r1, [r7, #8]
 8103aa2:	603b      	str	r3, [r7, #0]
 8103aa4:	4613      	mov	r3, r2
 8103aa6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8103aa8:	68fb      	ldr	r3, [r7, #12]
 8103aaa:	681b      	ldr	r3, [r3, #0]
 8103aac:	3320      	adds	r3, #32
 8103aae:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103ab0:	2300      	movs	r3, #0
 8103ab2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103ab4:	68fb      	ldr	r3, [r7, #12]
 8103ab6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103aba:	2b01      	cmp	r3, #1
 8103abc:	d101      	bne.n	8103ac2 <HAL_SPI_Transmit+0x2a>
 8103abe:	2302      	movs	r3, #2
 8103ac0:	e1d4      	b.n	8103e6c <HAL_SPI_Transmit+0x3d4>
 8103ac2:	68fb      	ldr	r3, [r7, #12]
 8103ac4:	2201      	movs	r2, #1
 8103ac6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103aca:	f7fd fdd3 	bl	8101674 <HAL_GetTick>
 8103ace:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103ad0:	68fb      	ldr	r3, [r7, #12]
 8103ad2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103ad6:	b2db      	uxtb	r3, r3
 8103ad8:	2b01      	cmp	r3, #1
 8103ada:	d007      	beq.n	8103aec <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8103adc:	2302      	movs	r3, #2
 8103ade:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8103ae0:	68fb      	ldr	r3, [r7, #12]
 8103ae2:	2200      	movs	r2, #0
 8103ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103ae8:	7efb      	ldrb	r3, [r7, #27]
 8103aea:	e1bf      	b.n	8103e6c <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103aec:	68bb      	ldr	r3, [r7, #8]
 8103aee:	2b00      	cmp	r3, #0
 8103af0:	d002      	beq.n	8103af8 <HAL_SPI_Transmit+0x60>
 8103af2:	88fb      	ldrh	r3, [r7, #6]
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d107      	bne.n	8103b08 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8103af8:	2301      	movs	r3, #1
 8103afa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8103afc:	68fb      	ldr	r3, [r7, #12]
 8103afe:	2200      	movs	r2, #0
 8103b00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103b04:	7efb      	ldrb	r3, [r7, #27]
 8103b06:	e1b1      	b.n	8103e6c <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8103b08:	68fb      	ldr	r3, [r7, #12]
 8103b0a:	2203      	movs	r2, #3
 8103b0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103b10:	68fb      	ldr	r3, [r7, #12]
 8103b12:	2200      	movs	r2, #0
 8103b14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8103b18:	68fb      	ldr	r3, [r7, #12]
 8103b1a:	68ba      	ldr	r2, [r7, #8]
 8103b1c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8103b1e:	68fb      	ldr	r3, [r7, #12]
 8103b20:	88fa      	ldrh	r2, [r7, #6]
 8103b22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8103b26:	68fb      	ldr	r3, [r7, #12]
 8103b28:	88fa      	ldrh	r2, [r7, #6]
 8103b2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8103b2e:	68fb      	ldr	r3, [r7, #12]
 8103b30:	2200      	movs	r2, #0
 8103b32:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8103b34:	68fb      	ldr	r3, [r7, #12]
 8103b36:	2200      	movs	r2, #0
 8103b38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8103b3c:	68fb      	ldr	r3, [r7, #12]
 8103b3e:	2200      	movs	r2, #0
 8103b40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8103b44:	68fb      	ldr	r3, [r7, #12]
 8103b46:	2200      	movs	r2, #0
 8103b48:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8103b4a:	68fb      	ldr	r3, [r7, #12]
 8103b4c:	2200      	movs	r2, #0
 8103b4e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103b50:	68fb      	ldr	r3, [r7, #12]
 8103b52:	689b      	ldr	r3, [r3, #8]
 8103b54:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8103b58:	d107      	bne.n	8103b6a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8103b5a:	68fb      	ldr	r3, [r7, #12]
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	681a      	ldr	r2, [r3, #0]
 8103b60:	68fb      	ldr	r3, [r7, #12]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103b6a:	68fb      	ldr	r3, [r7, #12]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	685b      	ldr	r3, [r3, #4]
 8103b70:	0c1b      	lsrs	r3, r3, #16
 8103b72:	041b      	lsls	r3, r3, #16
 8103b74:	88f9      	ldrh	r1, [r7, #6]
 8103b76:	68fa      	ldr	r2, [r7, #12]
 8103b78:	6812      	ldr	r2, [r2, #0]
 8103b7a:	430b      	orrs	r3, r1
 8103b7c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103b7e:	68fb      	ldr	r3, [r7, #12]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	681a      	ldr	r2, [r3, #0]
 8103b84:	68fb      	ldr	r3, [r7, #12]
 8103b86:	681b      	ldr	r3, [r3, #0]
 8103b88:	f042 0201 	orr.w	r2, r2, #1
 8103b8c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103b8e:	68fb      	ldr	r3, [r7, #12]
 8103b90:	685b      	ldr	r3, [r3, #4]
 8103b92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103b96:	d107      	bne.n	8103ba8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103b98:	68fb      	ldr	r3, [r7, #12]
 8103b9a:	681b      	ldr	r3, [r3, #0]
 8103b9c:	681a      	ldr	r2, [r3, #0]
 8103b9e:	68fb      	ldr	r3, [r7, #12]
 8103ba0:	681b      	ldr	r3, [r3, #0]
 8103ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103ba8:	68fb      	ldr	r3, [r7, #12]
 8103baa:	68db      	ldr	r3, [r3, #12]
 8103bac:	2b0f      	cmp	r3, #15
 8103bae:	d947      	bls.n	8103c40 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8103bb0:	e03f      	b.n	8103c32 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103bb2:	68fb      	ldr	r3, [r7, #12]
 8103bb4:	681b      	ldr	r3, [r3, #0]
 8103bb6:	695b      	ldr	r3, [r3, #20]
 8103bb8:	f003 0302 	and.w	r3, r3, #2
 8103bbc:	2b02      	cmp	r3, #2
 8103bbe:	d114      	bne.n	8103bea <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103bc0:	68fb      	ldr	r3, [r7, #12]
 8103bc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103bc4:	68fb      	ldr	r3, [r7, #12]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	6812      	ldr	r2, [r2, #0]
 8103bca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8103bcc:	68fb      	ldr	r3, [r7, #12]
 8103bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bd0:	1d1a      	adds	r2, r3, #4
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8103bd6:	68fb      	ldr	r3, [r7, #12]
 8103bd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103bdc:	b29b      	uxth	r3, r3
 8103bde:	3b01      	subs	r3, #1
 8103be0:	b29a      	uxth	r2, r3
 8103be2:	68fb      	ldr	r3, [r7, #12]
 8103be4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103be8:	e023      	b.n	8103c32 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103bea:	f7fd fd43 	bl	8101674 <HAL_GetTick>
 8103bee:	4602      	mov	r2, r0
 8103bf0:	697b      	ldr	r3, [r7, #20]
 8103bf2:	1ad3      	subs	r3, r2, r3
 8103bf4:	683a      	ldr	r2, [r7, #0]
 8103bf6:	429a      	cmp	r2, r3
 8103bf8:	d803      	bhi.n	8103c02 <HAL_SPI_Transmit+0x16a>
 8103bfa:	683b      	ldr	r3, [r7, #0]
 8103bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c00:	d102      	bne.n	8103c08 <HAL_SPI_Transmit+0x170>
 8103c02:	683b      	ldr	r3, [r7, #0]
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d114      	bne.n	8103c32 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103c08:	68f8      	ldr	r0, [r7, #12]
 8103c0a:	f000 fe0c 	bl	8104826 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103c0e:	68fb      	ldr	r3, [r7, #12]
 8103c10:	2200      	movs	r2, #0
 8103c12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103c1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103c20:	68fb      	ldr	r3, [r7, #12]
 8103c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103c26:	68fb      	ldr	r3, [r7, #12]
 8103c28:	2201      	movs	r2, #1
 8103c2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103c2e:	2303      	movs	r3, #3
 8103c30:	e11c      	b.n	8103e6c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103c32:	68fb      	ldr	r3, [r7, #12]
 8103c34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103c38:	b29b      	uxth	r3, r3
 8103c3a:	2b00      	cmp	r3, #0
 8103c3c:	d1b9      	bne.n	8103bb2 <HAL_SPI_Transmit+0x11a>
 8103c3e:	e0ef      	b.n	8103e20 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103c40:	68fb      	ldr	r3, [r7, #12]
 8103c42:	68db      	ldr	r3, [r3, #12]
 8103c44:	2b07      	cmp	r3, #7
 8103c46:	f240 80e4 	bls.w	8103e12 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8103c4a:	e05d      	b.n	8103d08 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103c4c:	68fb      	ldr	r3, [r7, #12]
 8103c4e:	681b      	ldr	r3, [r3, #0]
 8103c50:	695b      	ldr	r3, [r3, #20]
 8103c52:	f003 0302 	and.w	r3, r3, #2
 8103c56:	2b02      	cmp	r3, #2
 8103c58:	d132      	bne.n	8103cc0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103c5a:	68fb      	ldr	r3, [r7, #12]
 8103c5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103c60:	b29b      	uxth	r3, r3
 8103c62:	2b01      	cmp	r3, #1
 8103c64:	d918      	bls.n	8103c98 <HAL_SPI_Transmit+0x200>
 8103c66:	68fb      	ldr	r3, [r7, #12]
 8103c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103c6a:	2b00      	cmp	r3, #0
 8103c6c:	d014      	beq.n	8103c98 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103c72:	68fb      	ldr	r3, [r7, #12]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	6812      	ldr	r2, [r2, #0]
 8103c78:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103c7a:	68fb      	ldr	r3, [r7, #12]
 8103c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c7e:	1d1a      	adds	r2, r3, #4
 8103c80:	68fb      	ldr	r3, [r7, #12]
 8103c82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103c84:	68fb      	ldr	r3, [r7, #12]
 8103c86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103c8a:	b29b      	uxth	r3, r3
 8103c8c:	3b02      	subs	r3, #2
 8103c8e:	b29a      	uxth	r2, r3
 8103c90:	68fb      	ldr	r3, [r7, #12]
 8103c92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103c96:	e037      	b.n	8103d08 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103c98:	68fb      	ldr	r3, [r7, #12]
 8103c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c9c:	881a      	ldrh	r2, [r3, #0]
 8103c9e:	69fb      	ldr	r3, [r7, #28]
 8103ca0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103ca2:	68fb      	ldr	r3, [r7, #12]
 8103ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103ca6:	1c9a      	adds	r2, r3, #2
 8103ca8:	68fb      	ldr	r3, [r7, #12]
 8103caa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103cac:	68fb      	ldr	r3, [r7, #12]
 8103cae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103cb2:	b29b      	uxth	r3, r3
 8103cb4:	3b01      	subs	r3, #1
 8103cb6:	b29a      	uxth	r2, r3
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103cbe:	e023      	b.n	8103d08 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103cc0:	f7fd fcd8 	bl	8101674 <HAL_GetTick>
 8103cc4:	4602      	mov	r2, r0
 8103cc6:	697b      	ldr	r3, [r7, #20]
 8103cc8:	1ad3      	subs	r3, r2, r3
 8103cca:	683a      	ldr	r2, [r7, #0]
 8103ccc:	429a      	cmp	r2, r3
 8103cce:	d803      	bhi.n	8103cd8 <HAL_SPI_Transmit+0x240>
 8103cd0:	683b      	ldr	r3, [r7, #0]
 8103cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103cd6:	d102      	bne.n	8103cde <HAL_SPI_Transmit+0x246>
 8103cd8:	683b      	ldr	r3, [r7, #0]
 8103cda:	2b00      	cmp	r3, #0
 8103cdc:	d114      	bne.n	8103d08 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103cde:	68f8      	ldr	r0, [r7, #12]
 8103ce0:	f000 fda1 	bl	8104826 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103ce4:	68fb      	ldr	r3, [r7, #12]
 8103ce6:	2200      	movs	r2, #0
 8103ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103cec:	68fb      	ldr	r3, [r7, #12]
 8103cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103cf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103cf6:	68fb      	ldr	r3, [r7, #12]
 8103cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103cfc:	68fb      	ldr	r3, [r7, #12]
 8103cfe:	2201      	movs	r2, #1
 8103d00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103d04:	2303      	movs	r3, #3
 8103d06:	e0b1      	b.n	8103e6c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103d08:	68fb      	ldr	r3, [r7, #12]
 8103d0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d0e:	b29b      	uxth	r3, r3
 8103d10:	2b00      	cmp	r3, #0
 8103d12:	d19b      	bne.n	8103c4c <HAL_SPI_Transmit+0x1b4>
 8103d14:	e084      	b.n	8103e20 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103d16:	68fb      	ldr	r3, [r7, #12]
 8103d18:	681b      	ldr	r3, [r3, #0]
 8103d1a:	695b      	ldr	r3, [r3, #20]
 8103d1c:	f003 0302 	and.w	r3, r3, #2
 8103d20:	2b02      	cmp	r3, #2
 8103d22:	d152      	bne.n	8103dca <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8103d24:	68fb      	ldr	r3, [r7, #12]
 8103d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d2a:	b29b      	uxth	r3, r3
 8103d2c:	2b03      	cmp	r3, #3
 8103d2e:	d918      	bls.n	8103d62 <HAL_SPI_Transmit+0x2ca>
 8103d30:	68fb      	ldr	r3, [r7, #12]
 8103d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d34:	2b40      	cmp	r3, #64	; 0x40
 8103d36:	d914      	bls.n	8103d62 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103d38:	68fb      	ldr	r3, [r7, #12]
 8103d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103d3c:	68fb      	ldr	r3, [r7, #12]
 8103d3e:	681b      	ldr	r3, [r3, #0]
 8103d40:	6812      	ldr	r2, [r2, #0]
 8103d42:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103d44:	68fb      	ldr	r3, [r7, #12]
 8103d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d48:	1d1a      	adds	r2, r3, #4
 8103d4a:	68fb      	ldr	r3, [r7, #12]
 8103d4c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8103d4e:	68fb      	ldr	r3, [r7, #12]
 8103d50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d54:	b29b      	uxth	r3, r3
 8103d56:	3b04      	subs	r3, #4
 8103d58:	b29a      	uxth	r2, r3
 8103d5a:	68fb      	ldr	r3, [r7, #12]
 8103d5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103d60:	e057      	b.n	8103e12 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103d62:	68fb      	ldr	r3, [r7, #12]
 8103d64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d68:	b29b      	uxth	r3, r3
 8103d6a:	2b01      	cmp	r3, #1
 8103d6c:	d917      	bls.n	8103d9e <HAL_SPI_Transmit+0x306>
 8103d6e:	68fb      	ldr	r3, [r7, #12]
 8103d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	d013      	beq.n	8103d9e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103d76:	68fb      	ldr	r3, [r7, #12]
 8103d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d7a:	881a      	ldrh	r2, [r3, #0]
 8103d7c:	69fb      	ldr	r3, [r7, #28]
 8103d7e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103d80:	68fb      	ldr	r3, [r7, #12]
 8103d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d84:	1c9a      	adds	r2, r3, #2
 8103d86:	68fb      	ldr	r3, [r7, #12]
 8103d88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103d8a:	68fb      	ldr	r3, [r7, #12]
 8103d8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d90:	b29b      	uxth	r3, r3
 8103d92:	3b02      	subs	r3, #2
 8103d94:	b29a      	uxth	r2, r3
 8103d96:	68fb      	ldr	r3, [r7, #12]
 8103d98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103d9c:	e039      	b.n	8103e12 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8103d9e:	68fb      	ldr	r3, [r7, #12]
 8103da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103da2:	68fb      	ldr	r3, [r7, #12]
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	3320      	adds	r3, #32
 8103da8:	7812      	ldrb	r2, [r2, #0]
 8103daa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8103dac:	68fb      	ldr	r3, [r7, #12]
 8103dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103db0:	1c5a      	adds	r2, r3, #1
 8103db2:	68fb      	ldr	r3, [r7, #12]
 8103db4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103db6:	68fb      	ldr	r3, [r7, #12]
 8103db8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103dbc:	b29b      	uxth	r3, r3
 8103dbe:	3b01      	subs	r3, #1
 8103dc0:	b29a      	uxth	r2, r3
 8103dc2:	68fb      	ldr	r3, [r7, #12]
 8103dc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103dc8:	e023      	b.n	8103e12 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103dca:	f7fd fc53 	bl	8101674 <HAL_GetTick>
 8103dce:	4602      	mov	r2, r0
 8103dd0:	697b      	ldr	r3, [r7, #20]
 8103dd2:	1ad3      	subs	r3, r2, r3
 8103dd4:	683a      	ldr	r2, [r7, #0]
 8103dd6:	429a      	cmp	r2, r3
 8103dd8:	d803      	bhi.n	8103de2 <HAL_SPI_Transmit+0x34a>
 8103dda:	683b      	ldr	r3, [r7, #0]
 8103ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103de0:	d102      	bne.n	8103de8 <HAL_SPI_Transmit+0x350>
 8103de2:	683b      	ldr	r3, [r7, #0]
 8103de4:	2b00      	cmp	r3, #0
 8103de6:	d114      	bne.n	8103e12 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103de8:	68f8      	ldr	r0, [r7, #12]
 8103dea:	f000 fd1c 	bl	8104826 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103dee:	68fb      	ldr	r3, [r7, #12]
 8103df0:	2200      	movs	r2, #0
 8103df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103df6:	68fb      	ldr	r3, [r7, #12]
 8103df8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103dfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103e00:	68fb      	ldr	r3, [r7, #12]
 8103e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103e06:	68fb      	ldr	r3, [r7, #12]
 8103e08:	2201      	movs	r2, #1
 8103e0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103e0e:	2303      	movs	r3, #3
 8103e10:	e02c      	b.n	8103e6c <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103e18:	b29b      	uxth	r3, r3
 8103e1a:	2b00      	cmp	r3, #0
 8103e1c:	f47f af7b 	bne.w	8103d16 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8103e20:	683b      	ldr	r3, [r7, #0]
 8103e22:	9300      	str	r3, [sp, #0]
 8103e24:	697b      	ldr	r3, [r7, #20]
 8103e26:	2200      	movs	r2, #0
 8103e28:	2108      	movs	r1, #8
 8103e2a:	68f8      	ldr	r0, [r7, #12]
 8103e2c:	f000 fd9b 	bl	8104966 <SPI_WaitOnFlagUntilTimeout>
 8103e30:	4603      	mov	r3, r0
 8103e32:	2b00      	cmp	r3, #0
 8103e34:	d007      	beq.n	8103e46 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8103e36:	68fb      	ldr	r3, [r7, #12]
 8103e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103e3c:	f043 0220 	orr.w	r2, r3, #32
 8103e40:	68fb      	ldr	r3, [r7, #12]
 8103e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8103e46:	68f8      	ldr	r0, [r7, #12]
 8103e48:	f000 fced 	bl	8104826 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8103e4c:	68fb      	ldr	r3, [r7, #12]
 8103e4e:	2200      	movs	r2, #0
 8103e50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8103e54:	68fb      	ldr	r3, [r7, #12]
 8103e56:	2201      	movs	r2, #1
 8103e58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103e62:	2b00      	cmp	r3, #0
 8103e64:	d001      	beq.n	8103e6a <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8103e66:	2301      	movs	r3, #1
 8103e68:	e000      	b.n	8103e6c <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8103e6a:	7efb      	ldrb	r3, [r7, #27]
}
 8103e6c:	4618      	mov	r0, r3
 8103e6e:	3720      	adds	r7, #32
 8103e70:	46bd      	mov	sp, r7
 8103e72:	bd80      	pop	{r7, pc}

08103e74 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103e74:	b580      	push	{r7, lr}
 8103e76:	b08a      	sub	sp, #40	; 0x28
 8103e78:	af02      	add	r7, sp, #8
 8103e7a:	60f8      	str	r0, [r7, #12]
 8103e7c:	60b9      	str	r1, [r7, #8]
 8103e7e:	603b      	str	r3, [r7, #0]
 8103e80:	4613      	mov	r3, r2
 8103e82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103e84:	2300      	movs	r3, #0
 8103e86:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8103e88:	68fb      	ldr	r3, [r7, #12]
 8103e8a:	681b      	ldr	r3, [r3, #0]
 8103e8c:	3330      	adds	r3, #48	; 0x30
 8103e8e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8103e90:	68fb      	ldr	r3, [r7, #12]
 8103e92:	685b      	ldr	r3, [r3, #4]
 8103e94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103e98:	d112      	bne.n	8103ec0 <HAL_SPI_Receive+0x4c>
 8103e9a:	68fb      	ldr	r3, [r7, #12]
 8103e9c:	689b      	ldr	r3, [r3, #8]
 8103e9e:	2b00      	cmp	r3, #0
 8103ea0:	d10e      	bne.n	8103ec0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8103ea2:	68fb      	ldr	r3, [r7, #12]
 8103ea4:	2204      	movs	r2, #4
 8103ea6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8103eaa:	88fa      	ldrh	r2, [r7, #6]
 8103eac:	683b      	ldr	r3, [r7, #0]
 8103eae:	9300      	str	r3, [sp, #0]
 8103eb0:	4613      	mov	r3, r2
 8103eb2:	68ba      	ldr	r2, [r7, #8]
 8103eb4:	68b9      	ldr	r1, [r7, #8]
 8103eb6:	68f8      	ldr	r0, [r7, #12]
 8103eb8:	f000 f9cc 	bl	8104254 <HAL_SPI_TransmitReceive>
 8103ebc:	4603      	mov	r3, r0
 8103ebe:	e1c5      	b.n	810424c <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103ec0:	68fb      	ldr	r3, [r7, #12]
 8103ec2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103ec6:	2b01      	cmp	r3, #1
 8103ec8:	d101      	bne.n	8103ece <HAL_SPI_Receive+0x5a>
 8103eca:	2302      	movs	r3, #2
 8103ecc:	e1be      	b.n	810424c <HAL_SPI_Receive+0x3d8>
 8103ece:	68fb      	ldr	r3, [r7, #12]
 8103ed0:	2201      	movs	r2, #1
 8103ed2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103ed6:	f7fd fbcd 	bl	8101674 <HAL_GetTick>
 8103eda:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103ee2:	b2db      	uxtb	r3, r3
 8103ee4:	2b01      	cmp	r3, #1
 8103ee6:	d007      	beq.n	8103ef8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8103ee8:	2302      	movs	r3, #2
 8103eea:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8103eec:	68fb      	ldr	r3, [r7, #12]
 8103eee:	2200      	movs	r2, #0
 8103ef0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103ef4:	7ffb      	ldrb	r3, [r7, #31]
 8103ef6:	e1a9      	b.n	810424c <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103ef8:	68bb      	ldr	r3, [r7, #8]
 8103efa:	2b00      	cmp	r3, #0
 8103efc:	d002      	beq.n	8103f04 <HAL_SPI_Receive+0x90>
 8103efe:	88fb      	ldrh	r3, [r7, #6]
 8103f00:	2b00      	cmp	r3, #0
 8103f02:	d107      	bne.n	8103f14 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8103f04:	2301      	movs	r3, #1
 8103f06:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	2200      	movs	r2, #0
 8103f0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103f10:	7ffb      	ldrb	r3, [r7, #31]
 8103f12:	e19b      	b.n	810424c <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8103f14:	68fb      	ldr	r3, [r7, #12]
 8103f16:	2204      	movs	r2, #4
 8103f18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103f1c:	68fb      	ldr	r3, [r7, #12]
 8103f1e:	2200      	movs	r2, #0
 8103f20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8103f24:	68fb      	ldr	r3, [r7, #12]
 8103f26:	68ba      	ldr	r2, [r7, #8]
 8103f28:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8103f2a:	68fb      	ldr	r3, [r7, #12]
 8103f2c:	88fa      	ldrh	r2, [r7, #6]
 8103f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8103f32:	68fb      	ldr	r3, [r7, #12]
 8103f34:	88fa      	ldrh	r2, [r7, #6]
 8103f36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8103f3a:	68fb      	ldr	r3, [r7, #12]
 8103f3c:	2200      	movs	r2, #0
 8103f3e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8103f40:	68fb      	ldr	r3, [r7, #12]
 8103f42:	2200      	movs	r2, #0
 8103f44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8103f48:	68fb      	ldr	r3, [r7, #12]
 8103f4a:	2200      	movs	r2, #0
 8103f4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8103f50:	68fb      	ldr	r3, [r7, #12]
 8103f52:	2200      	movs	r2, #0
 8103f54:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8103f56:	68fb      	ldr	r3, [r7, #12]
 8103f58:	2200      	movs	r2, #0
 8103f5a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103f5c:	68fb      	ldr	r3, [r7, #12]
 8103f5e:	689b      	ldr	r3, [r3, #8]
 8103f60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8103f64:	d107      	bne.n	8103f76 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8103f66:	68fb      	ldr	r3, [r7, #12]
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	681a      	ldr	r2, [r3, #0]
 8103f6c:	68fb      	ldr	r3, [r7, #12]
 8103f6e:	681b      	ldr	r3, [r3, #0]
 8103f70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8103f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103f76:	68fb      	ldr	r3, [r7, #12]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	685b      	ldr	r3, [r3, #4]
 8103f7c:	0c1b      	lsrs	r3, r3, #16
 8103f7e:	041b      	lsls	r3, r3, #16
 8103f80:	88f9      	ldrh	r1, [r7, #6]
 8103f82:	68fa      	ldr	r2, [r7, #12]
 8103f84:	6812      	ldr	r2, [r2, #0]
 8103f86:	430b      	orrs	r3, r1
 8103f88:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103f8a:	68fb      	ldr	r3, [r7, #12]
 8103f8c:	681b      	ldr	r3, [r3, #0]
 8103f8e:	681a      	ldr	r2, [r3, #0]
 8103f90:	68fb      	ldr	r3, [r7, #12]
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	f042 0201 	orr.w	r2, r2, #1
 8103f98:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103f9a:	68fb      	ldr	r3, [r7, #12]
 8103f9c:	685b      	ldr	r3, [r3, #4]
 8103f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103fa2:	d107      	bne.n	8103fb4 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103fa4:	68fb      	ldr	r3, [r7, #12]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	681a      	ldr	r2, [r3, #0]
 8103faa:	68fb      	ldr	r3, [r7, #12]
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103fb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	68db      	ldr	r3, [r3, #12]
 8103fb8:	2b0f      	cmp	r3, #15
 8103fba:	d948      	bls.n	810404e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8103fbc:	e040      	b.n	8104040 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8103fbe:	68fb      	ldr	r3, [r7, #12]
 8103fc0:	681b      	ldr	r3, [r3, #0]
 8103fc2:	695a      	ldr	r2, [r3, #20]
 8103fc4:	f248 0308 	movw	r3, #32776	; 0x8008
 8103fc8:	4013      	ands	r3, r2
 8103fca:	2b00      	cmp	r3, #0
 8103fcc:	d014      	beq.n	8103ff8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103fce:	68fb      	ldr	r3, [r7, #12]
 8103fd0:	681a      	ldr	r2, [r3, #0]
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103fd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8103fd8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8103fda:	68fb      	ldr	r3, [r7, #12]
 8103fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103fde:	1d1a      	adds	r2, r3, #4
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8103fe4:	68fb      	ldr	r3, [r7, #12]
 8103fe6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103fea:	b29b      	uxth	r3, r3
 8103fec:	3b01      	subs	r3, #1
 8103fee:	b29a      	uxth	r2, r3
 8103ff0:	68fb      	ldr	r3, [r7, #12]
 8103ff2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8103ff6:	e023      	b.n	8104040 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103ff8:	f7fd fb3c 	bl	8101674 <HAL_GetTick>
 8103ffc:	4602      	mov	r2, r0
 8103ffe:	697b      	ldr	r3, [r7, #20]
 8104000:	1ad3      	subs	r3, r2, r3
 8104002:	683a      	ldr	r2, [r7, #0]
 8104004:	429a      	cmp	r2, r3
 8104006:	d803      	bhi.n	8104010 <HAL_SPI_Receive+0x19c>
 8104008:	683b      	ldr	r3, [r7, #0]
 810400a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810400e:	d102      	bne.n	8104016 <HAL_SPI_Receive+0x1a2>
 8104010:	683b      	ldr	r3, [r7, #0]
 8104012:	2b00      	cmp	r3, #0
 8104014:	d114      	bne.n	8104040 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104016:	68f8      	ldr	r0, [r7, #12]
 8104018:	f000 fc05 	bl	8104826 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810401c:	68fb      	ldr	r3, [r7, #12]
 810401e:	2200      	movs	r2, #0
 8104020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810402a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104034:	68fb      	ldr	r3, [r7, #12]
 8104036:	2201      	movs	r2, #1
 8104038:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810403c:	2303      	movs	r3, #3
 810403e:	e105      	b.n	810424c <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104040:	68fb      	ldr	r3, [r7, #12]
 8104042:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104046:	b29b      	uxth	r3, r3
 8104048:	2b00      	cmp	r3, #0
 810404a:	d1b8      	bne.n	8103fbe <HAL_SPI_Receive+0x14a>
 810404c:	e0eb      	b.n	8104226 <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810404e:	68fb      	ldr	r3, [r7, #12]
 8104050:	68db      	ldr	r3, [r3, #12]
 8104052:	2b07      	cmp	r3, #7
 8104054:	f240 80e0 	bls.w	8104218 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104058:	e05b      	b.n	8104112 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810405a:	68fb      	ldr	r3, [r7, #12]
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	695b      	ldr	r3, [r3, #20]
 8104060:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8104064:	2b00      	cmp	r3, #0
 8104066:	d030      	beq.n	81040ca <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104068:	68fb      	ldr	r3, [r7, #12]
 810406a:	681b      	ldr	r3, [r3, #0]
 810406c:	695b      	ldr	r3, [r3, #20]
 810406e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104072:	2b00      	cmp	r3, #0
 8104074:	d014      	beq.n	81040a0 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104076:	68fb      	ldr	r3, [r7, #12]
 8104078:	681a      	ldr	r2, [r3, #0]
 810407a:	68fb      	ldr	r3, [r7, #12]
 810407c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810407e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104080:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104082:	68fb      	ldr	r3, [r7, #12]
 8104084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104086:	1d1a      	adds	r2, r3, #4
 8104088:	68fb      	ldr	r3, [r7, #12]
 810408a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810408c:	68fb      	ldr	r3, [r7, #12]
 810408e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104092:	b29b      	uxth	r3, r3
 8104094:	3b02      	subs	r3, #2
 8104096:	b29a      	uxth	r2, r3
 8104098:	68fb      	ldr	r3, [r7, #12]
 810409a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810409e:	e038      	b.n	8104112 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81040a0:	68fb      	ldr	r3, [r7, #12]
 81040a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81040a4:	69ba      	ldr	r2, [r7, #24]
 81040a6:	8812      	ldrh	r2, [r2, #0]
 81040a8:	b292      	uxth	r2, r2
 81040aa:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81040ac:	68fb      	ldr	r3, [r7, #12]
 81040ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81040b0:	1c9a      	adds	r2, r3, #2
 81040b2:	68fb      	ldr	r3, [r7, #12]
 81040b4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81040b6:	68fb      	ldr	r3, [r7, #12]
 81040b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81040bc:	b29b      	uxth	r3, r3
 81040be:	3b01      	subs	r3, #1
 81040c0:	b29a      	uxth	r2, r3
 81040c2:	68fb      	ldr	r3, [r7, #12]
 81040c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81040c8:	e023      	b.n	8104112 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81040ca:	f7fd fad3 	bl	8101674 <HAL_GetTick>
 81040ce:	4602      	mov	r2, r0
 81040d0:	697b      	ldr	r3, [r7, #20]
 81040d2:	1ad3      	subs	r3, r2, r3
 81040d4:	683a      	ldr	r2, [r7, #0]
 81040d6:	429a      	cmp	r2, r3
 81040d8:	d803      	bhi.n	81040e2 <HAL_SPI_Receive+0x26e>
 81040da:	683b      	ldr	r3, [r7, #0]
 81040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81040e0:	d102      	bne.n	81040e8 <HAL_SPI_Receive+0x274>
 81040e2:	683b      	ldr	r3, [r7, #0]
 81040e4:	2b00      	cmp	r3, #0
 81040e6:	d114      	bne.n	8104112 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81040e8:	68f8      	ldr	r0, [r7, #12]
 81040ea:	f000 fb9c 	bl	8104826 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81040ee:	68fb      	ldr	r3, [r7, #12]
 81040f0:	2200      	movs	r2, #0
 81040f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81040fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104106:	68fb      	ldr	r3, [r7, #12]
 8104108:	2201      	movs	r2, #1
 810410a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810410e:	2303      	movs	r3, #3
 8104110:	e09c      	b.n	810424c <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104112:	68fb      	ldr	r3, [r7, #12]
 8104114:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104118:	b29b      	uxth	r3, r3
 810411a:	2b00      	cmp	r3, #0
 810411c:	d19d      	bne.n	810405a <HAL_SPI_Receive+0x1e6>
 810411e:	e082      	b.n	8104226 <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	681b      	ldr	r3, [r3, #0]
 8104124:	695b      	ldr	r3, [r3, #20]
 8104126:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810412a:	2b00      	cmp	r3, #0
 810412c:	d050      	beq.n	81041d0 <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810412e:	68fb      	ldr	r3, [r7, #12]
 8104130:	681b      	ldr	r3, [r3, #0]
 8104132:	695b      	ldr	r3, [r3, #20]
 8104134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104138:	2b00      	cmp	r3, #0
 810413a:	d014      	beq.n	8104166 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810413c:	68fb      	ldr	r3, [r7, #12]
 810413e:	681a      	ldr	r2, [r3, #0]
 8104140:	68fb      	ldr	r3, [r7, #12]
 8104142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104146:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104148:	68fb      	ldr	r3, [r7, #12]
 810414a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810414c:	1d1a      	adds	r2, r3, #4
 810414e:	68fb      	ldr	r3, [r7, #12]
 8104150:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8104152:	68fb      	ldr	r3, [r7, #12]
 8104154:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104158:	b29b      	uxth	r3, r3
 810415a:	3b04      	subs	r3, #4
 810415c:	b29a      	uxth	r2, r3
 810415e:	68fb      	ldr	r3, [r7, #12]
 8104160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104164:	e058      	b.n	8104218 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8104166:	68fb      	ldr	r3, [r7, #12]
 8104168:	681b      	ldr	r3, [r3, #0]
 810416a:	695b      	ldr	r3, [r3, #20]
 810416c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8104170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104174:	d914      	bls.n	81041a0 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104176:	68fb      	ldr	r3, [r7, #12]
 8104178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810417a:	69ba      	ldr	r2, [r7, #24]
 810417c:	8812      	ldrh	r2, [r2, #0]
 810417e:	b292      	uxth	r2, r2
 8104180:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104182:	68fb      	ldr	r3, [r7, #12]
 8104184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104186:	1c9a      	adds	r2, r3, #2
 8104188:	68fb      	ldr	r3, [r7, #12]
 810418a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810418c:	68fb      	ldr	r3, [r7, #12]
 810418e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104192:	b29b      	uxth	r3, r3
 8104194:	3b02      	subs	r3, #2
 8104196:	b29a      	uxth	r2, r3
 8104198:	68fb      	ldr	r3, [r7, #12]
 810419a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810419e:	e03b      	b.n	8104218 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81041a0:	68fb      	ldr	r3, [r7, #12]
 81041a2:	681b      	ldr	r3, [r3, #0]
 81041a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81041a8:	68fb      	ldr	r3, [r7, #12]
 81041aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81041ac:	7812      	ldrb	r2, [r2, #0]
 81041ae:	b2d2      	uxtb	r2, r2
 81041b0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81041b2:	68fb      	ldr	r3, [r7, #12]
 81041b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81041b6:	1c5a      	adds	r2, r3, #1
 81041b8:	68fb      	ldr	r3, [r7, #12]
 81041ba:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81041bc:	68fb      	ldr	r3, [r7, #12]
 81041be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81041c2:	b29b      	uxth	r3, r3
 81041c4:	3b01      	subs	r3, #1
 81041c6:	b29a      	uxth	r2, r3
 81041c8:	68fb      	ldr	r3, [r7, #12]
 81041ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81041ce:	e023      	b.n	8104218 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81041d0:	f7fd fa50 	bl	8101674 <HAL_GetTick>
 81041d4:	4602      	mov	r2, r0
 81041d6:	697b      	ldr	r3, [r7, #20]
 81041d8:	1ad3      	subs	r3, r2, r3
 81041da:	683a      	ldr	r2, [r7, #0]
 81041dc:	429a      	cmp	r2, r3
 81041de:	d803      	bhi.n	81041e8 <HAL_SPI_Receive+0x374>
 81041e0:	683b      	ldr	r3, [r7, #0]
 81041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81041e6:	d102      	bne.n	81041ee <HAL_SPI_Receive+0x37a>
 81041e8:	683b      	ldr	r3, [r7, #0]
 81041ea:	2b00      	cmp	r3, #0
 81041ec:	d114      	bne.n	8104218 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81041ee:	68f8      	ldr	r0, [r7, #12]
 81041f0:	f000 fb19 	bl	8104826 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81041f4:	68fb      	ldr	r3, [r7, #12]
 81041f6:	2200      	movs	r2, #0
 81041f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104202:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104206:	68fb      	ldr	r3, [r7, #12]
 8104208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810420c:	68fb      	ldr	r3, [r7, #12]
 810420e:	2201      	movs	r2, #1
 8104210:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104214:	2303      	movs	r3, #3
 8104216:	e019      	b.n	810424c <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810421e:	b29b      	uxth	r3, r3
 8104220:	2b00      	cmp	r3, #0
 8104222:	f47f af7d 	bne.w	8104120 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104226:	68f8      	ldr	r0, [r7, #12]
 8104228:	f000 fafd 	bl	8104826 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	2200      	movs	r2, #0
 8104230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	2201      	movs	r2, #1
 8104238:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810423c:	68fb      	ldr	r3, [r7, #12]
 810423e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104242:	2b00      	cmp	r3, #0
 8104244:	d001      	beq.n	810424a <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 8104246:	2301      	movs	r3, #1
 8104248:	e000      	b.n	810424c <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 810424a:	7ffb      	ldrb	r3, [r7, #31]
}
 810424c:	4618      	mov	r0, r3
 810424e:	3720      	adds	r7, #32
 8104250:	46bd      	mov	sp, r7
 8104252:	bd80      	pop	{r7, pc}

08104254 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8104254:	b580      	push	{r7, lr}
 8104256:	b08e      	sub	sp, #56	; 0x38
 8104258:	af02      	add	r7, sp, #8
 810425a:	60f8      	str	r0, [r7, #12]
 810425c:	60b9      	str	r1, [r7, #8]
 810425e:	607a      	str	r2, [r7, #4]
 8104260:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104262:	2300      	movs	r3, #0
 8104264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104268:	68fb      	ldr	r3, [r7, #12]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	3320      	adds	r3, #32
 810426e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104270:	68fb      	ldr	r3, [r7, #12]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	3330      	adds	r3, #48	; 0x30
 8104276:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810427e:	2b01      	cmp	r3, #1
 8104280:	d101      	bne.n	8104286 <HAL_SPI_TransmitReceive+0x32>
 8104282:	2302      	movs	r3, #2
 8104284:	e2cb      	b.n	810481e <HAL_SPI_TransmitReceive+0x5ca>
 8104286:	68fb      	ldr	r3, [r7, #12]
 8104288:	2201      	movs	r2, #1
 810428a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810428e:	f7fd f9f1 	bl	8101674 <HAL_GetTick>
 8104292:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8104294:	887b      	ldrh	r3, [r7, #2]
 8104296:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8104298:	887b      	ldrh	r3, [r7, #2]
 810429a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 810429c:	68fb      	ldr	r3, [r7, #12]
 810429e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81042a2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	685b      	ldr	r3, [r3, #4]
 81042a8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81042aa:	7efb      	ldrb	r3, [r7, #27]
 81042ac:	2b01      	cmp	r3, #1
 81042ae:	d014      	beq.n	81042da <HAL_SPI_TransmitReceive+0x86>
 81042b0:	697b      	ldr	r3, [r7, #20]
 81042b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81042b6:	d106      	bne.n	81042c6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 81042bc:	2b00      	cmp	r3, #0
 81042be:	d102      	bne.n	81042c6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81042c0:	7efb      	ldrb	r3, [r7, #27]
 81042c2:	2b04      	cmp	r3, #4
 81042c4:	d009      	beq.n	81042da <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 81042c6:	2302      	movs	r3, #2
 81042c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81042cc:	68fb      	ldr	r3, [r7, #12]
 81042ce:	2200      	movs	r2, #0
 81042d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81042d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81042d8:	e2a1      	b.n	810481e <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 81042da:	68bb      	ldr	r3, [r7, #8]
 81042dc:	2b00      	cmp	r3, #0
 81042de:	d005      	beq.n	81042ec <HAL_SPI_TransmitReceive+0x98>
 81042e0:	687b      	ldr	r3, [r7, #4]
 81042e2:	2b00      	cmp	r3, #0
 81042e4:	d002      	beq.n	81042ec <HAL_SPI_TransmitReceive+0x98>
 81042e6:	887b      	ldrh	r3, [r7, #2]
 81042e8:	2b00      	cmp	r3, #0
 81042ea:	d109      	bne.n	8104300 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 81042ec:	2301      	movs	r3, #1
 81042ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81042f2:	68fb      	ldr	r3, [r7, #12]
 81042f4:	2200      	movs	r2, #0
 81042f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81042fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81042fe:	e28e      	b.n	810481e <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104300:	68fb      	ldr	r3, [r7, #12]
 8104302:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104306:	b2db      	uxtb	r3, r3
 8104308:	2b04      	cmp	r3, #4
 810430a:	d003      	beq.n	8104314 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 810430c:	68fb      	ldr	r3, [r7, #12]
 810430e:	2205      	movs	r2, #5
 8104310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	2200      	movs	r2, #0
 8104318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 810431c:	68fb      	ldr	r3, [r7, #12]
 810431e:	687a      	ldr	r2, [r7, #4]
 8104320:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8104322:	68fb      	ldr	r3, [r7, #12]
 8104324:	887a      	ldrh	r2, [r7, #2]
 8104326:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 810432a:	68fb      	ldr	r3, [r7, #12]
 810432c:	887a      	ldrh	r2, [r7, #2]
 810432e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8104332:	68fb      	ldr	r3, [r7, #12]
 8104334:	68ba      	ldr	r2, [r7, #8]
 8104336:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8104338:	68fb      	ldr	r3, [r7, #12]
 810433a:	887a      	ldrh	r2, [r7, #2]
 810433c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8104340:	68fb      	ldr	r3, [r7, #12]
 8104342:	887a      	ldrh	r2, [r7, #2]
 8104344:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8104348:	68fb      	ldr	r3, [r7, #12]
 810434a:	2200      	movs	r2, #0
 810434c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810434e:	68fb      	ldr	r3, [r7, #12]
 8104350:	2200      	movs	r2, #0
 8104352:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104354:	68fb      	ldr	r3, [r7, #12]
 8104356:	681b      	ldr	r3, [r3, #0]
 8104358:	685b      	ldr	r3, [r3, #4]
 810435a:	0c1b      	lsrs	r3, r3, #16
 810435c:	041b      	lsls	r3, r3, #16
 810435e:	8879      	ldrh	r1, [r7, #2]
 8104360:	68fa      	ldr	r2, [r7, #12]
 8104362:	6812      	ldr	r2, [r2, #0]
 8104364:	430b      	orrs	r3, r1
 8104366:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8104368:	68fb      	ldr	r3, [r7, #12]
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	681a      	ldr	r2, [r3, #0]
 810436e:	68fb      	ldr	r3, [r7, #12]
 8104370:	681b      	ldr	r3, [r3, #0]
 8104372:	f042 0201 	orr.w	r2, r2, #1
 8104376:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104378:	68fb      	ldr	r3, [r7, #12]
 810437a:	685b      	ldr	r3, [r3, #4]
 810437c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104380:	d107      	bne.n	8104392 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104382:	68fb      	ldr	r3, [r7, #12]
 8104384:	681b      	ldr	r3, [r3, #0]
 8104386:	681a      	ldr	r2, [r3, #0]
 8104388:	68fb      	ldr	r3, [r7, #12]
 810438a:	681b      	ldr	r3, [r3, #0]
 810438c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104390:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104392:	68fb      	ldr	r3, [r7, #12]
 8104394:	68db      	ldr	r3, [r3, #12]
 8104396:	2b0f      	cmp	r3, #15
 8104398:	d970      	bls.n	810447c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810439a:	e068      	b.n	810446e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 810439c:	68fb      	ldr	r3, [r7, #12]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	695b      	ldr	r3, [r3, #20]
 81043a2:	f003 0302 	and.w	r3, r3, #2
 81043a6:	2b02      	cmp	r3, #2
 81043a8:	d11a      	bne.n	81043e0 <HAL_SPI_TransmitReceive+0x18c>
 81043aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81043ac:	2b00      	cmp	r3, #0
 81043ae:	d017      	beq.n	81043e0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81043b0:	68fb      	ldr	r3, [r7, #12]
 81043b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81043b4:	68fb      	ldr	r3, [r7, #12]
 81043b6:	681b      	ldr	r3, [r3, #0]
 81043b8:	6812      	ldr	r2, [r2, #0]
 81043ba:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81043bc:	68fb      	ldr	r3, [r7, #12]
 81043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81043c0:	1d1a      	adds	r2, r3, #4
 81043c2:	68fb      	ldr	r3, [r7, #12]
 81043c4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 81043c6:	68fb      	ldr	r3, [r7, #12]
 81043c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81043cc:	b29b      	uxth	r3, r3
 81043ce:	3b01      	subs	r3, #1
 81043d0:	b29a      	uxth	r2, r3
 81043d2:	68fb      	ldr	r3, [r7, #12]
 81043d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81043d8:	68fb      	ldr	r3, [r7, #12]
 81043da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81043de:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	695a      	ldr	r2, [r3, #20]
 81043e6:	f248 0308 	movw	r3, #32776	; 0x8008
 81043ea:	4013      	ands	r3, r2
 81043ec:	2b00      	cmp	r3, #0
 81043ee:	d01a      	beq.n	8104426 <HAL_SPI_TransmitReceive+0x1d2>
 81043f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81043f2:	2b00      	cmp	r3, #0
 81043f4:	d017      	beq.n	8104426 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81043f6:	68fb      	ldr	r3, [r7, #12]
 81043f8:	681a      	ldr	r2, [r3, #0]
 81043fa:	68fb      	ldr	r3, [r7, #12]
 81043fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81043fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104400:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104402:	68fb      	ldr	r3, [r7, #12]
 8104404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104406:	1d1a      	adds	r2, r3, #4
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 810440c:	68fb      	ldr	r3, [r7, #12]
 810440e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104412:	b29b      	uxth	r3, r3
 8104414:	3b01      	subs	r3, #1
 8104416:	b29a      	uxth	r2, r3
 8104418:	68fb      	ldr	r3, [r7, #12]
 810441a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810441e:	68fb      	ldr	r3, [r7, #12]
 8104420:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104424:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104426:	f7fd f925 	bl	8101674 <HAL_GetTick>
 810442a:	4602      	mov	r2, r0
 810442c:	69fb      	ldr	r3, [r7, #28]
 810442e:	1ad3      	subs	r3, r2, r3
 8104430:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104432:	429a      	cmp	r2, r3
 8104434:	d803      	bhi.n	810443e <HAL_SPI_TransmitReceive+0x1ea>
 8104436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104438:	f1b3 3fff 	cmp.w	r3, #4294967295
 810443c:	d102      	bne.n	8104444 <HAL_SPI_TransmitReceive+0x1f0>
 810443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104440:	2b00      	cmp	r3, #0
 8104442:	d114      	bne.n	810446e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104444:	68f8      	ldr	r0, [r7, #12]
 8104446:	f000 f9ee 	bl	8104826 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810444a:	68fb      	ldr	r3, [r7, #12]
 810444c:	2200      	movs	r2, #0
 810444e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104452:	68fb      	ldr	r3, [r7, #12]
 8104454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104458:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810445c:	68fb      	ldr	r3, [r7, #12]
 810445e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104462:	68fb      	ldr	r3, [r7, #12]
 8104464:	2201      	movs	r2, #1
 8104466:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 810446a:	2303      	movs	r3, #3
 810446c:	e1d7      	b.n	810481e <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810446e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104470:	2b00      	cmp	r3, #0
 8104472:	d193      	bne.n	810439c <HAL_SPI_TransmitReceive+0x148>
 8104474:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104476:	2b00      	cmp	r3, #0
 8104478:	d190      	bne.n	810439c <HAL_SPI_TransmitReceive+0x148>
 810447a:	e1a9      	b.n	81047d0 <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810447c:	68fb      	ldr	r3, [r7, #12]
 810447e:	68db      	ldr	r3, [r3, #12]
 8104480:	2b07      	cmp	r3, #7
 8104482:	f240 819d 	bls.w	81047c0 <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104486:	e0a6      	b.n	81045d6 <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104488:	68fb      	ldr	r3, [r7, #12]
 810448a:	681b      	ldr	r3, [r3, #0]
 810448c:	695b      	ldr	r3, [r3, #20]
 810448e:	f003 0302 	and.w	r3, r3, #2
 8104492:	2b02      	cmp	r3, #2
 8104494:	d139      	bne.n	810450a <HAL_SPI_TransmitReceive+0x2b6>
 8104496:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104498:	2b00      	cmp	r3, #0
 810449a:	d036      	beq.n	810450a <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810449c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810449e:	2b01      	cmp	r3, #1
 81044a0:	d91c      	bls.n	81044dc <HAL_SPI_TransmitReceive+0x288>
 81044a2:	68fb      	ldr	r3, [r7, #12]
 81044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81044a6:	2b00      	cmp	r3, #0
 81044a8:	d018      	beq.n	81044dc <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81044aa:	68fb      	ldr	r3, [r7, #12]
 81044ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81044ae:	68fb      	ldr	r3, [r7, #12]
 81044b0:	681b      	ldr	r3, [r3, #0]
 81044b2:	6812      	ldr	r2, [r2, #0]
 81044b4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81044b6:	68fb      	ldr	r3, [r7, #12]
 81044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044ba:	1d1a      	adds	r2, r3, #4
 81044bc:	68fb      	ldr	r3, [r7, #12]
 81044be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81044c0:	68fb      	ldr	r3, [r7, #12]
 81044c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044c6:	b29b      	uxth	r3, r3
 81044c8:	3b02      	subs	r3, #2
 81044ca:	b29a      	uxth	r2, r3
 81044cc:	68fb      	ldr	r3, [r7, #12]
 81044ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81044d2:	68fb      	ldr	r3, [r7, #12]
 81044d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 81044da:	e016      	b.n	810450a <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81044dc:	68fb      	ldr	r3, [r7, #12]
 81044de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044e0:	881a      	ldrh	r2, [r3, #0]
 81044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81044e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81044e6:	68fb      	ldr	r3, [r7, #12]
 81044e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81044ea:	1c9a      	adds	r2, r3, #2
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81044f0:	68fb      	ldr	r3, [r7, #12]
 81044f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81044f6:	b29b      	uxth	r3, r3
 81044f8:	3b01      	subs	r3, #1
 81044fa:	b29a      	uxth	r2, r3
 81044fc:	68fb      	ldr	r3, [r7, #12]
 81044fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104502:	68fb      	ldr	r3, [r7, #12]
 8104504:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104508:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810450a:	68fb      	ldr	r3, [r7, #12]
 810450c:	681b      	ldr	r3, [r3, #0]
 810450e:	695b      	ldr	r3, [r3, #20]
 8104510:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8104514:	2b00      	cmp	r3, #0
 8104516:	d03a      	beq.n	810458e <HAL_SPI_TransmitReceive+0x33a>
 8104518:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810451a:	2b00      	cmp	r3, #0
 810451c:	d037      	beq.n	810458e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810451e:	68fb      	ldr	r3, [r7, #12]
 8104520:	681b      	ldr	r3, [r3, #0]
 8104522:	695b      	ldr	r3, [r3, #20]
 8104524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104528:	2b00      	cmp	r3, #0
 810452a:	d018      	beq.n	810455e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810452c:	68fb      	ldr	r3, [r7, #12]
 810452e:	681a      	ldr	r2, [r3, #0]
 8104530:	68fb      	ldr	r3, [r7, #12]
 8104532:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104534:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104536:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104538:	68fb      	ldr	r3, [r7, #12]
 810453a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810453c:	1d1a      	adds	r2, r3, #4
 810453e:	68fb      	ldr	r3, [r7, #12]
 8104540:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104542:	68fb      	ldr	r3, [r7, #12]
 8104544:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104548:	b29b      	uxth	r3, r3
 810454a:	3b02      	subs	r3, #2
 810454c:	b29a      	uxth	r2, r3
 810454e:	68fb      	ldr	r3, [r7, #12]
 8104550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104554:	68fb      	ldr	r3, [r7, #12]
 8104556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810455a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810455c:	e017      	b.n	810458e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104562:	6a3a      	ldr	r2, [r7, #32]
 8104564:	8812      	ldrh	r2, [r2, #0]
 8104566:	b292      	uxth	r2, r2
 8104568:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810456a:	68fb      	ldr	r3, [r7, #12]
 810456c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810456e:	1c9a      	adds	r2, r3, #2
 8104570:	68fb      	ldr	r3, [r7, #12]
 8104572:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104574:	68fb      	ldr	r3, [r7, #12]
 8104576:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810457a:	b29b      	uxth	r3, r3
 810457c:	3b01      	subs	r3, #1
 810457e:	b29a      	uxth	r2, r3
 8104580:	68fb      	ldr	r3, [r7, #12]
 8104582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104586:	68fb      	ldr	r3, [r7, #12]
 8104588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810458c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810458e:	f7fd f871 	bl	8101674 <HAL_GetTick>
 8104592:	4602      	mov	r2, r0
 8104594:	69fb      	ldr	r3, [r7, #28]
 8104596:	1ad3      	subs	r3, r2, r3
 8104598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810459a:	429a      	cmp	r2, r3
 810459c:	d803      	bhi.n	81045a6 <HAL_SPI_TransmitReceive+0x352>
 810459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81045a4:	d102      	bne.n	81045ac <HAL_SPI_TransmitReceive+0x358>
 81045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	d114      	bne.n	81045d6 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81045ac:	68f8      	ldr	r0, [r7, #12]
 81045ae:	f000 f93a 	bl	8104826 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81045b2:	68fb      	ldr	r3, [r7, #12]
 81045b4:	2200      	movs	r2, #0
 81045b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81045ba:	68fb      	ldr	r3, [r7, #12]
 81045bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81045c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81045c4:	68fb      	ldr	r3, [r7, #12]
 81045c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81045ca:	68fb      	ldr	r3, [r7, #12]
 81045cc:	2201      	movs	r2, #1
 81045ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81045d2:	2303      	movs	r3, #3
 81045d4:	e123      	b.n	810481e <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81045d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81045d8:	2b00      	cmp	r3, #0
 81045da:	f47f af55 	bne.w	8104488 <HAL_SPI_TransmitReceive+0x234>
 81045de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81045e0:	2b00      	cmp	r3, #0
 81045e2:	f47f af51 	bne.w	8104488 <HAL_SPI_TransmitReceive+0x234>
 81045e6:	e0f3      	b.n	81047d0 <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	695b      	ldr	r3, [r3, #20]
 81045ee:	f003 0302 	and.w	r3, r3, #2
 81045f2:	2b02      	cmp	r3, #2
 81045f4:	d15a      	bne.n	81046ac <HAL_SPI_TransmitReceive+0x458>
 81045f6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81045f8:	2b00      	cmp	r3, #0
 81045fa:	d057      	beq.n	81046ac <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81045fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81045fe:	2b03      	cmp	r3, #3
 8104600:	d91c      	bls.n	810463c <HAL_SPI_TransmitReceive+0x3e8>
 8104602:	68fb      	ldr	r3, [r7, #12]
 8104604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104606:	2b40      	cmp	r3, #64	; 0x40
 8104608:	d918      	bls.n	810463c <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810460a:	68fb      	ldr	r3, [r7, #12]
 810460c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810460e:	68fb      	ldr	r3, [r7, #12]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	6812      	ldr	r2, [r2, #0]
 8104614:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104616:	68fb      	ldr	r3, [r7, #12]
 8104618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810461a:	1d1a      	adds	r2, r3, #4
 810461c:	68fb      	ldr	r3, [r7, #12]
 810461e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8104620:	68fb      	ldr	r3, [r7, #12]
 8104622:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104626:	b29b      	uxth	r3, r3
 8104628:	3b04      	subs	r3, #4
 810462a:	b29a      	uxth	r2, r3
 810462c:	68fb      	ldr	r3, [r7, #12]
 810462e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104632:	68fb      	ldr	r3, [r7, #12]
 8104634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104638:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810463a:	e037      	b.n	81046ac <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810463c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810463e:	2b01      	cmp	r3, #1
 8104640:	d91b      	bls.n	810467a <HAL_SPI_TransmitReceive+0x426>
 8104642:	68fb      	ldr	r3, [r7, #12]
 8104644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104646:	2b00      	cmp	r3, #0
 8104648:	d017      	beq.n	810467a <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810464a:	68fb      	ldr	r3, [r7, #12]
 810464c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810464e:	881a      	ldrh	r2, [r3, #0]
 8104650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104652:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104658:	1c9a      	adds	r2, r3, #2
 810465a:	68fb      	ldr	r3, [r7, #12]
 810465c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810465e:	68fb      	ldr	r3, [r7, #12]
 8104660:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104664:	b29b      	uxth	r3, r3
 8104666:	3b02      	subs	r3, #2
 8104668:	b29a      	uxth	r2, r3
 810466a:	68fb      	ldr	r3, [r7, #12]
 810466c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104670:	68fb      	ldr	r3, [r7, #12]
 8104672:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104676:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8104678:	e018      	b.n	81046ac <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810467a:	68fb      	ldr	r3, [r7, #12]
 810467c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810467e:	68fb      	ldr	r3, [r7, #12]
 8104680:	681b      	ldr	r3, [r3, #0]
 8104682:	3320      	adds	r3, #32
 8104684:	7812      	ldrb	r2, [r2, #0]
 8104686:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810468c:	1c5a      	adds	r2, r3, #1
 810468e:	68fb      	ldr	r3, [r7, #12]
 8104690:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104692:	68fb      	ldr	r3, [r7, #12]
 8104694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104698:	b29b      	uxth	r3, r3
 810469a:	3b01      	subs	r3, #1
 810469c:	b29a      	uxth	r2, r3
 810469e:	68fb      	ldr	r3, [r7, #12]
 81046a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81046a4:	68fb      	ldr	r3, [r7, #12]
 81046a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 81046ac:	68fb      	ldr	r3, [r7, #12]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	695b      	ldr	r3, [r3, #20]
 81046b2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 81046b6:	2b00      	cmp	r3, #0
 81046b8:	d05e      	beq.n	8104778 <HAL_SPI_TransmitReceive+0x524>
 81046ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81046bc:	2b00      	cmp	r3, #0
 81046be:	d05b      	beq.n	8104778 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 81046c0:	68fb      	ldr	r3, [r7, #12]
 81046c2:	681b      	ldr	r3, [r3, #0]
 81046c4:	695b      	ldr	r3, [r3, #20]
 81046c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81046ca:	2b00      	cmp	r3, #0
 81046cc:	d018      	beq.n	8104700 <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81046ce:	68fb      	ldr	r3, [r7, #12]
 81046d0:	681a      	ldr	r2, [r3, #0]
 81046d2:	68fb      	ldr	r3, [r7, #12]
 81046d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81046d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81046d8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81046da:	68fb      	ldr	r3, [r7, #12]
 81046dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81046de:	1d1a      	adds	r2, r3, #4
 81046e0:	68fb      	ldr	r3, [r7, #12]
 81046e2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 81046e4:	68fb      	ldr	r3, [r7, #12]
 81046e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81046ea:	b29b      	uxth	r3, r3
 81046ec:	3b04      	subs	r3, #4
 81046ee:	b29a      	uxth	r2, r3
 81046f0:	68fb      	ldr	r3, [r7, #12]
 81046f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81046f6:	68fb      	ldr	r3, [r7, #12]
 81046f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81046fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81046fe:	e03b      	b.n	8104778 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8104700:	68fb      	ldr	r3, [r7, #12]
 8104702:	681b      	ldr	r3, [r3, #0]
 8104704:	695b      	ldr	r3, [r3, #20]
 8104706:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810470a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810470e:	d918      	bls.n	8104742 <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104710:	68fb      	ldr	r3, [r7, #12]
 8104712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104714:	6a3a      	ldr	r2, [r7, #32]
 8104716:	8812      	ldrh	r2, [r2, #0]
 8104718:	b292      	uxth	r2, r2
 810471a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810471c:	68fb      	ldr	r3, [r7, #12]
 810471e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104720:	1c9a      	adds	r2, r3, #2
 8104722:	68fb      	ldr	r3, [r7, #12]
 8104724:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104726:	68fb      	ldr	r3, [r7, #12]
 8104728:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810472c:	b29b      	uxth	r3, r3
 810472e:	3b02      	subs	r3, #2
 8104730:	b29a      	uxth	r2, r3
 8104732:	68fb      	ldr	r3, [r7, #12]
 8104734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104738:	68fb      	ldr	r3, [r7, #12]
 810473a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810473e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8104740:	e01a      	b.n	8104778 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104742:	68fb      	ldr	r3, [r7, #12]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810474a:	68fb      	ldr	r3, [r7, #12]
 810474c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810474e:	7812      	ldrb	r2, [r2, #0]
 8104750:	b2d2      	uxtb	r2, r2
 8104752:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104758:	1c5a      	adds	r2, r3, #1
 810475a:	68fb      	ldr	r3, [r7, #12]
 810475c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810475e:	68fb      	ldr	r3, [r7, #12]
 8104760:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104764:	b29b      	uxth	r3, r3
 8104766:	3b01      	subs	r3, #1
 8104768:	b29a      	uxth	r2, r3
 810476a:	68fb      	ldr	r3, [r7, #12]
 810476c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104770:	68fb      	ldr	r3, [r7, #12]
 8104772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104776:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104778:	f7fc ff7c 	bl	8101674 <HAL_GetTick>
 810477c:	4602      	mov	r2, r0
 810477e:	69fb      	ldr	r3, [r7, #28]
 8104780:	1ad3      	subs	r3, r2, r3
 8104782:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104784:	429a      	cmp	r2, r3
 8104786:	d803      	bhi.n	8104790 <HAL_SPI_TransmitReceive+0x53c>
 8104788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810478e:	d102      	bne.n	8104796 <HAL_SPI_TransmitReceive+0x542>
 8104790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104792:	2b00      	cmp	r3, #0
 8104794:	d114      	bne.n	81047c0 <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104796:	68f8      	ldr	r0, [r7, #12]
 8104798:	f000 f845 	bl	8104826 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810479c:	68fb      	ldr	r3, [r7, #12]
 810479e:	2200      	movs	r2, #0
 81047a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81047a4:	68fb      	ldr	r3, [r7, #12]
 81047a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81047ae:	68fb      	ldr	r3, [r7, #12]
 81047b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81047b4:	68fb      	ldr	r3, [r7, #12]
 81047b6:	2201      	movs	r2, #1
 81047b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81047bc:	2303      	movs	r3, #3
 81047be:	e02e      	b.n	810481e <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81047c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81047c2:	2b00      	cmp	r3, #0
 81047c4:	f47f af10 	bne.w	81045e8 <HAL_SPI_TransmitReceive+0x394>
 81047c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81047ca:	2b00      	cmp	r3, #0
 81047cc:	f47f af0c 	bne.w	81045e8 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81047d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81047d2:	9300      	str	r3, [sp, #0]
 81047d4:	69fb      	ldr	r3, [r7, #28]
 81047d6:	2200      	movs	r2, #0
 81047d8:	2108      	movs	r1, #8
 81047da:	68f8      	ldr	r0, [r7, #12]
 81047dc:	f000 f8c3 	bl	8104966 <SPI_WaitOnFlagUntilTimeout>
 81047e0:	4603      	mov	r3, r0
 81047e2:	2b00      	cmp	r3, #0
 81047e4:	d007      	beq.n	81047f6 <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81047e6:	68fb      	ldr	r3, [r7, #12]
 81047e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047ec:	f043 0220 	orr.w	r2, r3, #32
 81047f0:	68fb      	ldr	r3, [r7, #12]
 81047f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81047f6:	68f8      	ldr	r0, [r7, #12]
 81047f8:	f000 f815 	bl	8104826 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	2200      	movs	r2, #0
 8104800:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104804:	68fb      	ldr	r3, [r7, #12]
 8104806:	2201      	movs	r2, #1
 8104808:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810480c:	68fb      	ldr	r3, [r7, #12]
 810480e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104812:	2b00      	cmp	r3, #0
 8104814:	d001      	beq.n	810481a <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 8104816:	2301      	movs	r3, #1
 8104818:	e001      	b.n	810481e <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 810481a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 810481e:	4618      	mov	r0, r3
 8104820:	3730      	adds	r7, #48	; 0x30
 8104822:	46bd      	mov	sp, r7
 8104824:	bd80      	pop	{r7, pc}

08104826 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8104826:	b480      	push	{r7}
 8104828:	b085      	sub	sp, #20
 810482a:	af00      	add	r7, sp, #0
 810482c:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	695b      	ldr	r3, [r3, #20]
 8104834:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	681b      	ldr	r3, [r3, #0]
 810483a:	699a      	ldr	r2, [r3, #24]
 810483c:	687b      	ldr	r3, [r7, #4]
 810483e:	681b      	ldr	r3, [r3, #0]
 8104840:	f042 0208 	orr.w	r2, r2, #8
 8104844:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8104846:	687b      	ldr	r3, [r7, #4]
 8104848:	681b      	ldr	r3, [r3, #0]
 810484a:	699a      	ldr	r2, [r3, #24]
 810484c:	687b      	ldr	r3, [r7, #4]
 810484e:	681b      	ldr	r3, [r3, #0]
 8104850:	f042 0210 	orr.w	r2, r2, #16
 8104854:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104856:	687b      	ldr	r3, [r7, #4]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	681a      	ldr	r2, [r3, #0]
 810485c:	687b      	ldr	r3, [r7, #4]
 810485e:	681b      	ldr	r3, [r3, #0]
 8104860:	f022 0201 	bic.w	r2, r2, #1
 8104864:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	691b      	ldr	r3, [r3, #16]
 810486c:	687a      	ldr	r2, [r7, #4]
 810486e:	6812      	ldr	r2, [r2, #0]
 8104870:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8104874:	f023 0303 	bic.w	r3, r3, #3
 8104878:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810487a:	687b      	ldr	r3, [r7, #4]
 810487c:	681b      	ldr	r3, [r3, #0]
 810487e:	689a      	ldr	r2, [r3, #8]
 8104880:	687b      	ldr	r3, [r7, #4]
 8104882:	681b      	ldr	r3, [r3, #0]
 8104884:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104888:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810488a:	687b      	ldr	r3, [r7, #4]
 810488c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104890:	b2db      	uxtb	r3, r3
 8104892:	2b04      	cmp	r3, #4
 8104894:	d014      	beq.n	81048c0 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8104896:	68fb      	ldr	r3, [r7, #12]
 8104898:	f003 0320 	and.w	r3, r3, #32
 810489c:	2b00      	cmp	r3, #0
 810489e:	d00f      	beq.n	81048c0 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81048a0:	687b      	ldr	r3, [r7, #4]
 81048a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81048a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81048aa:	687b      	ldr	r3, [r7, #4]
 81048ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81048b0:	687b      	ldr	r3, [r7, #4]
 81048b2:	681b      	ldr	r3, [r3, #0]
 81048b4:	699a      	ldr	r2, [r3, #24]
 81048b6:	687b      	ldr	r3, [r7, #4]
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	f042 0220 	orr.w	r2, r2, #32
 81048be:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81048c0:	687b      	ldr	r3, [r7, #4]
 81048c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81048c6:	b2db      	uxtb	r3, r3
 81048c8:	2b03      	cmp	r3, #3
 81048ca:	d014      	beq.n	81048f6 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81048cc:	68fb      	ldr	r3, [r7, #12]
 81048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81048d2:	2b00      	cmp	r3, #0
 81048d4:	d00f      	beq.n	81048f6 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81048d6:	687b      	ldr	r3, [r7, #4]
 81048d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81048dc:	f043 0204 	orr.w	r2, r3, #4
 81048e0:	687b      	ldr	r3, [r7, #4]
 81048e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81048e6:	687b      	ldr	r3, [r7, #4]
 81048e8:	681b      	ldr	r3, [r3, #0]
 81048ea:	699a      	ldr	r2, [r3, #24]
 81048ec:	687b      	ldr	r3, [r7, #4]
 81048ee:	681b      	ldr	r3, [r3, #0]
 81048f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81048f4:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81048f6:	68fb      	ldr	r3, [r7, #12]
 81048f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81048fc:	2b00      	cmp	r3, #0
 81048fe:	d00f      	beq.n	8104920 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8104900:	687b      	ldr	r3, [r7, #4]
 8104902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104906:	f043 0201 	orr.w	r2, r3, #1
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8104910:	687b      	ldr	r3, [r7, #4]
 8104912:	681b      	ldr	r3, [r3, #0]
 8104914:	699a      	ldr	r2, [r3, #24]
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810491e:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104926:	2b00      	cmp	r3, #0
 8104928:	d00f      	beq.n	810494a <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810492a:	687b      	ldr	r3, [r7, #4]
 810492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104930:	f043 0208 	orr.w	r2, r3, #8
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810493a:	687b      	ldr	r3, [r7, #4]
 810493c:	681b      	ldr	r3, [r3, #0]
 810493e:	699a      	ldr	r2, [r3, #24]
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8104948:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810494a:	687b      	ldr	r3, [r7, #4]
 810494c:	2200      	movs	r2, #0
 810494e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8104952:	687b      	ldr	r3, [r7, #4]
 8104954:	2200      	movs	r2, #0
 8104956:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810495a:	bf00      	nop
 810495c:	3714      	adds	r7, #20
 810495e:	46bd      	mov	sp, r7
 8104960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104964:	4770      	bx	lr

08104966 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8104966:	b580      	push	{r7, lr}
 8104968:	b084      	sub	sp, #16
 810496a:	af00      	add	r7, sp, #0
 810496c:	60f8      	str	r0, [r7, #12]
 810496e:	60b9      	str	r1, [r7, #8]
 8104970:	603b      	str	r3, [r7, #0]
 8104972:	4613      	mov	r3, r2
 8104974:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104976:	e010      	b.n	810499a <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104978:	f7fc fe7c 	bl	8101674 <HAL_GetTick>
 810497c:	4602      	mov	r2, r0
 810497e:	683b      	ldr	r3, [r7, #0]
 8104980:	1ad3      	subs	r3, r2, r3
 8104982:	69ba      	ldr	r2, [r7, #24]
 8104984:	429a      	cmp	r2, r3
 8104986:	d803      	bhi.n	8104990 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8104988:	69bb      	ldr	r3, [r7, #24]
 810498a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810498e:	d102      	bne.n	8104996 <SPI_WaitOnFlagUntilTimeout+0x30>
 8104990:	69bb      	ldr	r3, [r7, #24]
 8104992:	2b00      	cmp	r3, #0
 8104994:	d101      	bne.n	810499a <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8104996:	2303      	movs	r3, #3
 8104998:	e00f      	b.n	81049ba <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810499a:	68fb      	ldr	r3, [r7, #12]
 810499c:	681b      	ldr	r3, [r3, #0]
 810499e:	695a      	ldr	r2, [r3, #20]
 81049a0:	68bb      	ldr	r3, [r7, #8]
 81049a2:	4013      	ands	r3, r2
 81049a4:	68ba      	ldr	r2, [r7, #8]
 81049a6:	429a      	cmp	r2, r3
 81049a8:	bf0c      	ite	eq
 81049aa:	2301      	moveq	r3, #1
 81049ac:	2300      	movne	r3, #0
 81049ae:	b2db      	uxtb	r3, r3
 81049b0:	461a      	mov	r2, r3
 81049b2:	79fb      	ldrb	r3, [r7, #7]
 81049b4:	429a      	cmp	r2, r3
 81049b6:	d0df      	beq.n	8104978 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81049b8:	2300      	movs	r3, #0
}
 81049ba:	4618      	mov	r0, r3
 81049bc:	3710      	adds	r7, #16
 81049be:	46bd      	mov	sp, r7
 81049c0:	bd80      	pop	{r7, pc}

081049c2 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81049c2:	b480      	push	{r7}
 81049c4:	b085      	sub	sp, #20
 81049c6:	af00      	add	r7, sp, #0
 81049c8:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81049ca:	687b      	ldr	r3, [r7, #4]
 81049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81049ce:	095b      	lsrs	r3, r3, #5
 81049d0:	3301      	adds	r3, #1
 81049d2:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	68db      	ldr	r3, [r3, #12]
 81049d8:	3301      	adds	r3, #1
 81049da:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81049dc:	68bb      	ldr	r3, [r7, #8]
 81049de:	3307      	adds	r3, #7
 81049e0:	08db      	lsrs	r3, r3, #3
 81049e2:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81049e4:	68bb      	ldr	r3, [r7, #8]
 81049e6:	68fa      	ldr	r2, [r7, #12]
 81049e8:	fb02 f303 	mul.w	r3, r2, r3
}
 81049ec:	4618      	mov	r0, r3
 81049ee:	3714      	adds	r7, #20
 81049f0:	46bd      	mov	sp, r7
 81049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049f6:	4770      	bx	lr

081049f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81049f8:	b580      	push	{r7, lr}
 81049fa:	b082      	sub	sp, #8
 81049fc:	af00      	add	r7, sp, #0
 81049fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104a00:	687b      	ldr	r3, [r7, #4]
 8104a02:	2b00      	cmp	r3, #0
 8104a04:	d101      	bne.n	8104a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104a06:	2301      	movs	r3, #1
 8104a08:	e042      	b.n	8104a90 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104a0a:	687b      	ldr	r3, [r7, #4]
 8104a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104a10:	2b00      	cmp	r3, #0
 8104a12:	d106      	bne.n	8104a22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104a14:	687b      	ldr	r3, [r7, #4]
 8104a16:	2200      	movs	r2, #0
 8104a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104a1c:	6878      	ldr	r0, [r7, #4]
 8104a1e:	f7fc fc17 	bl	8101250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8104a22:	687b      	ldr	r3, [r7, #4]
 8104a24:	2224      	movs	r2, #36	; 0x24
 8104a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8104a2a:	687b      	ldr	r3, [r7, #4]
 8104a2c:	681b      	ldr	r3, [r3, #0]
 8104a2e:	681a      	ldr	r2, [r3, #0]
 8104a30:	687b      	ldr	r3, [r7, #4]
 8104a32:	681b      	ldr	r3, [r3, #0]
 8104a34:	f022 0201 	bic.w	r2, r2, #1
 8104a38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104a3a:	6878      	ldr	r0, [r7, #4]
 8104a3c:	f000 f8c2 	bl	8104bc4 <UART_SetConfig>
 8104a40:	4603      	mov	r3, r0
 8104a42:	2b01      	cmp	r3, #1
 8104a44:	d101      	bne.n	8104a4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8104a46:	2301      	movs	r3, #1
 8104a48:	e022      	b.n	8104a90 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104a4a:	687b      	ldr	r3, [r7, #4]
 8104a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104a4e:	2b00      	cmp	r3, #0
 8104a50:	d002      	beq.n	8104a58 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8104a52:	6878      	ldr	r0, [r7, #4]
 8104a54:	f000 fe16 	bl	8105684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104a58:	687b      	ldr	r3, [r7, #4]
 8104a5a:	681b      	ldr	r3, [r3, #0]
 8104a5c:	685a      	ldr	r2, [r3, #4]
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	681b      	ldr	r3, [r3, #0]
 8104a62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8104a66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	689a      	ldr	r2, [r3, #8]
 8104a6e:	687b      	ldr	r3, [r7, #4]
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8104a76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104a78:	687b      	ldr	r3, [r7, #4]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	681a      	ldr	r2, [r3, #0]
 8104a7e:	687b      	ldr	r3, [r7, #4]
 8104a80:	681b      	ldr	r3, [r3, #0]
 8104a82:	f042 0201 	orr.w	r2, r2, #1
 8104a86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104a88:	6878      	ldr	r0, [r7, #4]
 8104a8a:	f000 fe9d 	bl	81057c8 <UART_CheckIdleState>
 8104a8e:	4603      	mov	r3, r0
}
 8104a90:	4618      	mov	r0, r3
 8104a92:	3708      	adds	r7, #8
 8104a94:	46bd      	mov	sp, r7
 8104a96:	bd80      	pop	{r7, pc}

08104a98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104a98:	b580      	push	{r7, lr}
 8104a9a:	b08a      	sub	sp, #40	; 0x28
 8104a9c:	af02      	add	r7, sp, #8
 8104a9e:	60f8      	str	r0, [r7, #12]
 8104aa0:	60b9      	str	r1, [r7, #8]
 8104aa2:	603b      	str	r3, [r7, #0]
 8104aa4:	4613      	mov	r3, r2
 8104aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104aa8:	68fb      	ldr	r3, [r7, #12]
 8104aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104aae:	2b20      	cmp	r3, #32
 8104ab0:	f040 8083 	bne.w	8104bba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8104ab4:	68bb      	ldr	r3, [r7, #8]
 8104ab6:	2b00      	cmp	r3, #0
 8104ab8:	d002      	beq.n	8104ac0 <HAL_UART_Transmit+0x28>
 8104aba:	88fb      	ldrh	r3, [r7, #6]
 8104abc:	2b00      	cmp	r3, #0
 8104abe:	d101      	bne.n	8104ac4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8104ac0:	2301      	movs	r3, #1
 8104ac2:	e07b      	b.n	8104bbc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8104ac4:	68fb      	ldr	r3, [r7, #12]
 8104ac6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104aca:	2b01      	cmp	r3, #1
 8104acc:	d101      	bne.n	8104ad2 <HAL_UART_Transmit+0x3a>
 8104ace:	2302      	movs	r3, #2
 8104ad0:	e074      	b.n	8104bbc <HAL_UART_Transmit+0x124>
 8104ad2:	68fb      	ldr	r3, [r7, #12]
 8104ad4:	2201      	movs	r2, #1
 8104ad6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104ada:	68fb      	ldr	r3, [r7, #12]
 8104adc:	2200      	movs	r2, #0
 8104ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8104ae2:	68fb      	ldr	r3, [r7, #12]
 8104ae4:	2221      	movs	r2, #33	; 0x21
 8104ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104aea:	f7fc fdc3 	bl	8101674 <HAL_GetTick>
 8104aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	88fa      	ldrh	r2, [r7, #6]
 8104af4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104af8:	68fb      	ldr	r3, [r7, #12]
 8104afa:	88fa      	ldrh	r2, [r7, #6]
 8104afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104b00:	68fb      	ldr	r3, [r7, #12]
 8104b02:	689b      	ldr	r3, [r3, #8]
 8104b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104b08:	d108      	bne.n	8104b1c <HAL_UART_Transmit+0x84>
 8104b0a:	68fb      	ldr	r3, [r7, #12]
 8104b0c:	691b      	ldr	r3, [r3, #16]
 8104b0e:	2b00      	cmp	r3, #0
 8104b10:	d104      	bne.n	8104b1c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8104b12:	2300      	movs	r3, #0
 8104b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8104b16:	68bb      	ldr	r3, [r7, #8]
 8104b18:	61bb      	str	r3, [r7, #24]
 8104b1a:	e003      	b.n	8104b24 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104b1c:	68bb      	ldr	r3, [r7, #8]
 8104b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104b20:	2300      	movs	r3, #0
 8104b22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8104b24:	68fb      	ldr	r3, [r7, #12]
 8104b26:	2200      	movs	r2, #0
 8104b28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8104b2c:	e02c      	b.n	8104b88 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8104b2e:	683b      	ldr	r3, [r7, #0]
 8104b30:	9300      	str	r3, [sp, #0]
 8104b32:	697b      	ldr	r3, [r7, #20]
 8104b34:	2200      	movs	r2, #0
 8104b36:	2180      	movs	r1, #128	; 0x80
 8104b38:	68f8      	ldr	r0, [r7, #12]
 8104b3a:	f000 fe90 	bl	810585e <UART_WaitOnFlagUntilTimeout>
 8104b3e:	4603      	mov	r3, r0
 8104b40:	2b00      	cmp	r3, #0
 8104b42:	d001      	beq.n	8104b48 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8104b44:	2303      	movs	r3, #3
 8104b46:	e039      	b.n	8104bbc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8104b48:	69fb      	ldr	r3, [r7, #28]
 8104b4a:	2b00      	cmp	r3, #0
 8104b4c:	d10b      	bne.n	8104b66 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104b4e:	69bb      	ldr	r3, [r7, #24]
 8104b50:	881b      	ldrh	r3, [r3, #0]
 8104b52:	461a      	mov	r2, r3
 8104b54:	68fb      	ldr	r3, [r7, #12]
 8104b56:	681b      	ldr	r3, [r3, #0]
 8104b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104b5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8104b5e:	69bb      	ldr	r3, [r7, #24]
 8104b60:	3302      	adds	r3, #2
 8104b62:	61bb      	str	r3, [r7, #24]
 8104b64:	e007      	b.n	8104b76 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104b66:	69fb      	ldr	r3, [r7, #28]
 8104b68:	781a      	ldrb	r2, [r3, #0]
 8104b6a:	68fb      	ldr	r3, [r7, #12]
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8104b70:	69fb      	ldr	r3, [r7, #28]
 8104b72:	3301      	adds	r3, #1
 8104b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104b76:	68fb      	ldr	r3, [r7, #12]
 8104b78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104b7c:	b29b      	uxth	r3, r3
 8104b7e:	3b01      	subs	r3, #1
 8104b80:	b29a      	uxth	r2, r3
 8104b82:	68fb      	ldr	r3, [r7, #12]
 8104b84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8104b88:	68fb      	ldr	r3, [r7, #12]
 8104b8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104b8e:	b29b      	uxth	r3, r3
 8104b90:	2b00      	cmp	r3, #0
 8104b92:	d1cc      	bne.n	8104b2e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104b94:	683b      	ldr	r3, [r7, #0]
 8104b96:	9300      	str	r3, [sp, #0]
 8104b98:	697b      	ldr	r3, [r7, #20]
 8104b9a:	2200      	movs	r2, #0
 8104b9c:	2140      	movs	r1, #64	; 0x40
 8104b9e:	68f8      	ldr	r0, [r7, #12]
 8104ba0:	f000 fe5d 	bl	810585e <UART_WaitOnFlagUntilTimeout>
 8104ba4:	4603      	mov	r3, r0
 8104ba6:	2b00      	cmp	r3, #0
 8104ba8:	d001      	beq.n	8104bae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8104baa:	2303      	movs	r3, #3
 8104bac:	e006      	b.n	8104bbc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104bae:	68fb      	ldr	r3, [r7, #12]
 8104bb0:	2220      	movs	r2, #32
 8104bb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8104bb6:	2300      	movs	r3, #0
 8104bb8:	e000      	b.n	8104bbc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8104bba:	2302      	movs	r3, #2
  }
}
 8104bbc:	4618      	mov	r0, r3
 8104bbe:	3720      	adds	r7, #32
 8104bc0:	46bd      	mov	sp, r7
 8104bc2:	bd80      	pop	{r7, pc}

08104bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104bc4:	b5b0      	push	{r4, r5, r7, lr}
 8104bc6:	b08e      	sub	sp, #56	; 0x38
 8104bc8:	af00      	add	r7, sp, #0
 8104bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104bcc:	2300      	movs	r3, #0
 8104bce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	689a      	ldr	r2, [r3, #8]
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	691b      	ldr	r3, [r3, #16]
 8104bda:	431a      	orrs	r2, r3
 8104bdc:	687b      	ldr	r3, [r7, #4]
 8104bde:	695b      	ldr	r3, [r3, #20]
 8104be0:	431a      	orrs	r2, r3
 8104be2:	687b      	ldr	r3, [r7, #4]
 8104be4:	69db      	ldr	r3, [r3, #28]
 8104be6:	4313      	orrs	r3, r2
 8104be8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	681a      	ldr	r2, [r3, #0]
 8104bf0:	4bc0      	ldr	r3, [pc, #768]	; (8104ef4 <UART_SetConfig+0x330>)
 8104bf2:	4013      	ands	r3, r2
 8104bf4:	687a      	ldr	r2, [r7, #4]
 8104bf6:	6812      	ldr	r2, [r2, #0]
 8104bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104bfa:	430b      	orrs	r3, r1
 8104bfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	685b      	ldr	r3, [r3, #4]
 8104c04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104c08:	687b      	ldr	r3, [r7, #4]
 8104c0a:	68da      	ldr	r2, [r3, #12]
 8104c0c:	687b      	ldr	r3, [r7, #4]
 8104c0e:	681b      	ldr	r3, [r3, #0]
 8104c10:	430a      	orrs	r2, r1
 8104c12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8104c14:	687b      	ldr	r3, [r7, #4]
 8104c16:	699b      	ldr	r3, [r3, #24]
 8104c18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104c1a:	687b      	ldr	r3, [r7, #4]
 8104c1c:	681b      	ldr	r3, [r3, #0]
 8104c1e:	4ab6      	ldr	r2, [pc, #728]	; (8104ef8 <UART_SetConfig+0x334>)
 8104c20:	4293      	cmp	r3, r2
 8104c22:	d004      	beq.n	8104c2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104c24:	687b      	ldr	r3, [r7, #4]
 8104c26:	6a1b      	ldr	r3, [r3, #32]
 8104c28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104c2a:	4313      	orrs	r3, r2
 8104c2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104c2e:	687b      	ldr	r3, [r7, #4]
 8104c30:	681b      	ldr	r3, [r3, #0]
 8104c32:	689b      	ldr	r3, [r3, #8]
 8104c34:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104c38:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104c3c:	687a      	ldr	r2, [r7, #4]
 8104c3e:	6812      	ldr	r2, [r2, #0]
 8104c40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104c42:	430b      	orrs	r3, r1
 8104c44:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104c46:	687b      	ldr	r3, [r7, #4]
 8104c48:	681b      	ldr	r3, [r3, #0]
 8104c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104c4c:	f023 010f 	bic.w	r1, r3, #15
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104c54:	687b      	ldr	r3, [r7, #4]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	430a      	orrs	r2, r1
 8104c5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104c5c:	687b      	ldr	r3, [r7, #4]
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	4aa6      	ldr	r2, [pc, #664]	; (8104efc <UART_SetConfig+0x338>)
 8104c62:	4293      	cmp	r3, r2
 8104c64:	d176      	bne.n	8104d54 <UART_SetConfig+0x190>
 8104c66:	4ba6      	ldr	r3, [pc, #664]	; (8104f00 <UART_SetConfig+0x33c>)
 8104c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104c6e:	2b28      	cmp	r3, #40	; 0x28
 8104c70:	d86c      	bhi.n	8104d4c <UART_SetConfig+0x188>
 8104c72:	a201      	add	r2, pc, #4	; (adr r2, 8104c78 <UART_SetConfig+0xb4>)
 8104c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c78:	08104d1d 	.word	0x08104d1d
 8104c7c:	08104d4d 	.word	0x08104d4d
 8104c80:	08104d4d 	.word	0x08104d4d
 8104c84:	08104d4d 	.word	0x08104d4d
 8104c88:	08104d4d 	.word	0x08104d4d
 8104c8c:	08104d4d 	.word	0x08104d4d
 8104c90:	08104d4d 	.word	0x08104d4d
 8104c94:	08104d4d 	.word	0x08104d4d
 8104c98:	08104d25 	.word	0x08104d25
 8104c9c:	08104d4d 	.word	0x08104d4d
 8104ca0:	08104d4d 	.word	0x08104d4d
 8104ca4:	08104d4d 	.word	0x08104d4d
 8104ca8:	08104d4d 	.word	0x08104d4d
 8104cac:	08104d4d 	.word	0x08104d4d
 8104cb0:	08104d4d 	.word	0x08104d4d
 8104cb4:	08104d4d 	.word	0x08104d4d
 8104cb8:	08104d2d 	.word	0x08104d2d
 8104cbc:	08104d4d 	.word	0x08104d4d
 8104cc0:	08104d4d 	.word	0x08104d4d
 8104cc4:	08104d4d 	.word	0x08104d4d
 8104cc8:	08104d4d 	.word	0x08104d4d
 8104ccc:	08104d4d 	.word	0x08104d4d
 8104cd0:	08104d4d 	.word	0x08104d4d
 8104cd4:	08104d4d 	.word	0x08104d4d
 8104cd8:	08104d35 	.word	0x08104d35
 8104cdc:	08104d4d 	.word	0x08104d4d
 8104ce0:	08104d4d 	.word	0x08104d4d
 8104ce4:	08104d4d 	.word	0x08104d4d
 8104ce8:	08104d4d 	.word	0x08104d4d
 8104cec:	08104d4d 	.word	0x08104d4d
 8104cf0:	08104d4d 	.word	0x08104d4d
 8104cf4:	08104d4d 	.word	0x08104d4d
 8104cf8:	08104d3d 	.word	0x08104d3d
 8104cfc:	08104d4d 	.word	0x08104d4d
 8104d00:	08104d4d 	.word	0x08104d4d
 8104d04:	08104d4d 	.word	0x08104d4d
 8104d08:	08104d4d 	.word	0x08104d4d
 8104d0c:	08104d4d 	.word	0x08104d4d
 8104d10:	08104d4d 	.word	0x08104d4d
 8104d14:	08104d4d 	.word	0x08104d4d
 8104d18:	08104d45 	.word	0x08104d45
 8104d1c:	2301      	movs	r3, #1
 8104d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d22:	e220      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d24:	2304      	movs	r3, #4
 8104d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d2a:	e21c      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d2c:	2308      	movs	r3, #8
 8104d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d32:	e218      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d34:	2310      	movs	r3, #16
 8104d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d3a:	e214      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d3c:	2320      	movs	r3, #32
 8104d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d42:	e210      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d44:	2340      	movs	r3, #64	; 0x40
 8104d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d4a:	e20c      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d4c:	2380      	movs	r3, #128	; 0x80
 8104d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d52:	e208      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	4a6a      	ldr	r2, [pc, #424]	; (8104f04 <UART_SetConfig+0x340>)
 8104d5a:	4293      	cmp	r3, r2
 8104d5c:	d130      	bne.n	8104dc0 <UART_SetConfig+0x1fc>
 8104d5e:	4b68      	ldr	r3, [pc, #416]	; (8104f00 <UART_SetConfig+0x33c>)
 8104d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d62:	f003 0307 	and.w	r3, r3, #7
 8104d66:	2b05      	cmp	r3, #5
 8104d68:	d826      	bhi.n	8104db8 <UART_SetConfig+0x1f4>
 8104d6a:	a201      	add	r2, pc, #4	; (adr r2, 8104d70 <UART_SetConfig+0x1ac>)
 8104d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d70:	08104d89 	.word	0x08104d89
 8104d74:	08104d91 	.word	0x08104d91
 8104d78:	08104d99 	.word	0x08104d99
 8104d7c:	08104da1 	.word	0x08104da1
 8104d80:	08104da9 	.word	0x08104da9
 8104d84:	08104db1 	.word	0x08104db1
 8104d88:	2300      	movs	r3, #0
 8104d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d8e:	e1ea      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d90:	2304      	movs	r3, #4
 8104d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d96:	e1e6      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104d98:	2308      	movs	r3, #8
 8104d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d9e:	e1e2      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104da0:	2310      	movs	r3, #16
 8104da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104da6:	e1de      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104da8:	2320      	movs	r3, #32
 8104daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dae:	e1da      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104db0:	2340      	movs	r3, #64	; 0x40
 8104db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104db6:	e1d6      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104db8:	2380      	movs	r3, #128	; 0x80
 8104dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dbe:	e1d2      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104dc0:	687b      	ldr	r3, [r7, #4]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	4a50      	ldr	r2, [pc, #320]	; (8104f08 <UART_SetConfig+0x344>)
 8104dc6:	4293      	cmp	r3, r2
 8104dc8:	d130      	bne.n	8104e2c <UART_SetConfig+0x268>
 8104dca:	4b4d      	ldr	r3, [pc, #308]	; (8104f00 <UART_SetConfig+0x33c>)
 8104dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104dce:	f003 0307 	and.w	r3, r3, #7
 8104dd2:	2b05      	cmp	r3, #5
 8104dd4:	d826      	bhi.n	8104e24 <UART_SetConfig+0x260>
 8104dd6:	a201      	add	r2, pc, #4	; (adr r2, 8104ddc <UART_SetConfig+0x218>)
 8104dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ddc:	08104df5 	.word	0x08104df5
 8104de0:	08104dfd 	.word	0x08104dfd
 8104de4:	08104e05 	.word	0x08104e05
 8104de8:	08104e0d 	.word	0x08104e0d
 8104dec:	08104e15 	.word	0x08104e15
 8104df0:	08104e1d 	.word	0x08104e1d
 8104df4:	2300      	movs	r3, #0
 8104df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dfa:	e1b4      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104dfc:	2304      	movs	r3, #4
 8104dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e02:	e1b0      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e04:	2308      	movs	r3, #8
 8104e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e0a:	e1ac      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e0c:	2310      	movs	r3, #16
 8104e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e12:	e1a8      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e14:	2320      	movs	r3, #32
 8104e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e1a:	e1a4      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e1c:	2340      	movs	r3, #64	; 0x40
 8104e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e22:	e1a0      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e24:	2380      	movs	r3, #128	; 0x80
 8104e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e2a:	e19c      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e2c:	687b      	ldr	r3, [r7, #4]
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	4a36      	ldr	r2, [pc, #216]	; (8104f0c <UART_SetConfig+0x348>)
 8104e32:	4293      	cmp	r3, r2
 8104e34:	d130      	bne.n	8104e98 <UART_SetConfig+0x2d4>
 8104e36:	4b32      	ldr	r3, [pc, #200]	; (8104f00 <UART_SetConfig+0x33c>)
 8104e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e3a:	f003 0307 	and.w	r3, r3, #7
 8104e3e:	2b05      	cmp	r3, #5
 8104e40:	d826      	bhi.n	8104e90 <UART_SetConfig+0x2cc>
 8104e42:	a201      	add	r2, pc, #4	; (adr r2, 8104e48 <UART_SetConfig+0x284>)
 8104e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e48:	08104e61 	.word	0x08104e61
 8104e4c:	08104e69 	.word	0x08104e69
 8104e50:	08104e71 	.word	0x08104e71
 8104e54:	08104e79 	.word	0x08104e79
 8104e58:	08104e81 	.word	0x08104e81
 8104e5c:	08104e89 	.word	0x08104e89
 8104e60:	2300      	movs	r3, #0
 8104e62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e66:	e17e      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e68:	2304      	movs	r3, #4
 8104e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e6e:	e17a      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e70:	2308      	movs	r3, #8
 8104e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e76:	e176      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e78:	2310      	movs	r3, #16
 8104e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e7e:	e172      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e80:	2320      	movs	r3, #32
 8104e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e86:	e16e      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e88:	2340      	movs	r3, #64	; 0x40
 8104e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e8e:	e16a      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e90:	2380      	movs	r3, #128	; 0x80
 8104e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e96:	e166      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	4a1c      	ldr	r2, [pc, #112]	; (8104f10 <UART_SetConfig+0x34c>)
 8104e9e:	4293      	cmp	r3, r2
 8104ea0:	d140      	bne.n	8104f24 <UART_SetConfig+0x360>
 8104ea2:	4b17      	ldr	r3, [pc, #92]	; (8104f00 <UART_SetConfig+0x33c>)
 8104ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104ea6:	f003 0307 	and.w	r3, r3, #7
 8104eaa:	2b05      	cmp	r3, #5
 8104eac:	d836      	bhi.n	8104f1c <UART_SetConfig+0x358>
 8104eae:	a201      	add	r2, pc, #4	; (adr r2, 8104eb4 <UART_SetConfig+0x2f0>)
 8104eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104eb4:	08104ecd 	.word	0x08104ecd
 8104eb8:	08104ed5 	.word	0x08104ed5
 8104ebc:	08104edd 	.word	0x08104edd
 8104ec0:	08104ee5 	.word	0x08104ee5
 8104ec4:	08104eed 	.word	0x08104eed
 8104ec8:	08104f15 	.word	0x08104f15
 8104ecc:	2300      	movs	r3, #0
 8104ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ed2:	e148      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104ed4:	2304      	movs	r3, #4
 8104ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104eda:	e144      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104edc:	2308      	movs	r3, #8
 8104ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ee2:	e140      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104ee4:	2310      	movs	r3, #16
 8104ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104eea:	e13c      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104eec:	2320      	movs	r3, #32
 8104eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ef2:	e138      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104ef4:	cfff69f3 	.word	0xcfff69f3
 8104ef8:	58000c00 	.word	0x58000c00
 8104efc:	40011000 	.word	0x40011000
 8104f00:	58024400 	.word	0x58024400
 8104f04:	40004400 	.word	0x40004400
 8104f08:	40004800 	.word	0x40004800
 8104f0c:	40004c00 	.word	0x40004c00
 8104f10:	40005000 	.word	0x40005000
 8104f14:	2340      	movs	r3, #64	; 0x40
 8104f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f1a:	e124      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104f1c:	2380      	movs	r3, #128	; 0x80
 8104f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f22:	e120      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	681b      	ldr	r3, [r3, #0]
 8104f28:	4acc      	ldr	r2, [pc, #816]	; (810525c <UART_SetConfig+0x698>)
 8104f2a:	4293      	cmp	r3, r2
 8104f2c:	d176      	bne.n	810501c <UART_SetConfig+0x458>
 8104f2e:	4bcc      	ldr	r3, [pc, #816]	; (8105260 <UART_SetConfig+0x69c>)
 8104f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104f36:	2b28      	cmp	r3, #40	; 0x28
 8104f38:	d86c      	bhi.n	8105014 <UART_SetConfig+0x450>
 8104f3a:	a201      	add	r2, pc, #4	; (adr r2, 8104f40 <UART_SetConfig+0x37c>)
 8104f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f40:	08104fe5 	.word	0x08104fe5
 8104f44:	08105015 	.word	0x08105015
 8104f48:	08105015 	.word	0x08105015
 8104f4c:	08105015 	.word	0x08105015
 8104f50:	08105015 	.word	0x08105015
 8104f54:	08105015 	.word	0x08105015
 8104f58:	08105015 	.word	0x08105015
 8104f5c:	08105015 	.word	0x08105015
 8104f60:	08104fed 	.word	0x08104fed
 8104f64:	08105015 	.word	0x08105015
 8104f68:	08105015 	.word	0x08105015
 8104f6c:	08105015 	.word	0x08105015
 8104f70:	08105015 	.word	0x08105015
 8104f74:	08105015 	.word	0x08105015
 8104f78:	08105015 	.word	0x08105015
 8104f7c:	08105015 	.word	0x08105015
 8104f80:	08104ff5 	.word	0x08104ff5
 8104f84:	08105015 	.word	0x08105015
 8104f88:	08105015 	.word	0x08105015
 8104f8c:	08105015 	.word	0x08105015
 8104f90:	08105015 	.word	0x08105015
 8104f94:	08105015 	.word	0x08105015
 8104f98:	08105015 	.word	0x08105015
 8104f9c:	08105015 	.word	0x08105015
 8104fa0:	08104ffd 	.word	0x08104ffd
 8104fa4:	08105015 	.word	0x08105015
 8104fa8:	08105015 	.word	0x08105015
 8104fac:	08105015 	.word	0x08105015
 8104fb0:	08105015 	.word	0x08105015
 8104fb4:	08105015 	.word	0x08105015
 8104fb8:	08105015 	.word	0x08105015
 8104fbc:	08105015 	.word	0x08105015
 8104fc0:	08105005 	.word	0x08105005
 8104fc4:	08105015 	.word	0x08105015
 8104fc8:	08105015 	.word	0x08105015
 8104fcc:	08105015 	.word	0x08105015
 8104fd0:	08105015 	.word	0x08105015
 8104fd4:	08105015 	.word	0x08105015
 8104fd8:	08105015 	.word	0x08105015
 8104fdc:	08105015 	.word	0x08105015
 8104fe0:	0810500d 	.word	0x0810500d
 8104fe4:	2301      	movs	r3, #1
 8104fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fea:	e0bc      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104fec:	2304      	movs	r3, #4
 8104fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ff2:	e0b8      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104ff4:	2308      	movs	r3, #8
 8104ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ffa:	e0b4      	b.n	8105166 <UART_SetConfig+0x5a2>
 8104ffc:	2310      	movs	r3, #16
 8104ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105002:	e0b0      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105004:	2320      	movs	r3, #32
 8105006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810500a:	e0ac      	b.n	8105166 <UART_SetConfig+0x5a2>
 810500c:	2340      	movs	r3, #64	; 0x40
 810500e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105012:	e0a8      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105014:	2380      	movs	r3, #128	; 0x80
 8105016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810501a:	e0a4      	b.n	8105166 <UART_SetConfig+0x5a2>
 810501c:	687b      	ldr	r3, [r7, #4]
 810501e:	681b      	ldr	r3, [r3, #0]
 8105020:	4a90      	ldr	r2, [pc, #576]	; (8105264 <UART_SetConfig+0x6a0>)
 8105022:	4293      	cmp	r3, r2
 8105024:	d130      	bne.n	8105088 <UART_SetConfig+0x4c4>
 8105026:	4b8e      	ldr	r3, [pc, #568]	; (8105260 <UART_SetConfig+0x69c>)
 8105028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810502a:	f003 0307 	and.w	r3, r3, #7
 810502e:	2b05      	cmp	r3, #5
 8105030:	d826      	bhi.n	8105080 <UART_SetConfig+0x4bc>
 8105032:	a201      	add	r2, pc, #4	; (adr r2, 8105038 <UART_SetConfig+0x474>)
 8105034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105038:	08105051 	.word	0x08105051
 810503c:	08105059 	.word	0x08105059
 8105040:	08105061 	.word	0x08105061
 8105044:	08105069 	.word	0x08105069
 8105048:	08105071 	.word	0x08105071
 810504c:	08105079 	.word	0x08105079
 8105050:	2300      	movs	r3, #0
 8105052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105056:	e086      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105058:	2304      	movs	r3, #4
 810505a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810505e:	e082      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105060:	2308      	movs	r3, #8
 8105062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105066:	e07e      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105068:	2310      	movs	r3, #16
 810506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810506e:	e07a      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105070:	2320      	movs	r3, #32
 8105072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105076:	e076      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105078:	2340      	movs	r3, #64	; 0x40
 810507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810507e:	e072      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105080:	2380      	movs	r3, #128	; 0x80
 8105082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105086:	e06e      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105088:	687b      	ldr	r3, [r7, #4]
 810508a:	681b      	ldr	r3, [r3, #0]
 810508c:	4a76      	ldr	r2, [pc, #472]	; (8105268 <UART_SetConfig+0x6a4>)
 810508e:	4293      	cmp	r3, r2
 8105090:	d130      	bne.n	81050f4 <UART_SetConfig+0x530>
 8105092:	4b73      	ldr	r3, [pc, #460]	; (8105260 <UART_SetConfig+0x69c>)
 8105094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105096:	f003 0307 	and.w	r3, r3, #7
 810509a:	2b05      	cmp	r3, #5
 810509c:	d826      	bhi.n	81050ec <UART_SetConfig+0x528>
 810509e:	a201      	add	r2, pc, #4	; (adr r2, 81050a4 <UART_SetConfig+0x4e0>)
 81050a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050a4:	081050bd 	.word	0x081050bd
 81050a8:	081050c5 	.word	0x081050c5
 81050ac:	081050cd 	.word	0x081050cd
 81050b0:	081050d5 	.word	0x081050d5
 81050b4:	081050dd 	.word	0x081050dd
 81050b8:	081050e5 	.word	0x081050e5
 81050bc:	2300      	movs	r3, #0
 81050be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050c2:	e050      	b.n	8105166 <UART_SetConfig+0x5a2>
 81050c4:	2304      	movs	r3, #4
 81050c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ca:	e04c      	b.n	8105166 <UART_SetConfig+0x5a2>
 81050cc:	2308      	movs	r3, #8
 81050ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050d2:	e048      	b.n	8105166 <UART_SetConfig+0x5a2>
 81050d4:	2310      	movs	r3, #16
 81050d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050da:	e044      	b.n	8105166 <UART_SetConfig+0x5a2>
 81050dc:	2320      	movs	r3, #32
 81050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050e2:	e040      	b.n	8105166 <UART_SetConfig+0x5a2>
 81050e4:	2340      	movs	r3, #64	; 0x40
 81050e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ea:	e03c      	b.n	8105166 <UART_SetConfig+0x5a2>
 81050ec:	2380      	movs	r3, #128	; 0x80
 81050ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050f2:	e038      	b.n	8105166 <UART_SetConfig+0x5a2>
 81050f4:	687b      	ldr	r3, [r7, #4]
 81050f6:	681b      	ldr	r3, [r3, #0]
 81050f8:	4a5c      	ldr	r2, [pc, #368]	; (810526c <UART_SetConfig+0x6a8>)
 81050fa:	4293      	cmp	r3, r2
 81050fc:	d130      	bne.n	8105160 <UART_SetConfig+0x59c>
 81050fe:	4b58      	ldr	r3, [pc, #352]	; (8105260 <UART_SetConfig+0x69c>)
 8105100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105102:	f003 0307 	and.w	r3, r3, #7
 8105106:	2b05      	cmp	r3, #5
 8105108:	d826      	bhi.n	8105158 <UART_SetConfig+0x594>
 810510a:	a201      	add	r2, pc, #4	; (adr r2, 8105110 <UART_SetConfig+0x54c>)
 810510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105110:	08105129 	.word	0x08105129
 8105114:	08105131 	.word	0x08105131
 8105118:	08105139 	.word	0x08105139
 810511c:	08105141 	.word	0x08105141
 8105120:	08105149 	.word	0x08105149
 8105124:	08105151 	.word	0x08105151
 8105128:	2302      	movs	r3, #2
 810512a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810512e:	e01a      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105130:	2304      	movs	r3, #4
 8105132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105136:	e016      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105138:	2308      	movs	r3, #8
 810513a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810513e:	e012      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105140:	2310      	movs	r3, #16
 8105142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105146:	e00e      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105148:	2320      	movs	r3, #32
 810514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810514e:	e00a      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105150:	2340      	movs	r3, #64	; 0x40
 8105152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105156:	e006      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105158:	2380      	movs	r3, #128	; 0x80
 810515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810515e:	e002      	b.n	8105166 <UART_SetConfig+0x5a2>
 8105160:	2380      	movs	r3, #128	; 0x80
 8105162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	681b      	ldr	r3, [r3, #0]
 810516a:	4a40      	ldr	r2, [pc, #256]	; (810526c <UART_SetConfig+0x6a8>)
 810516c:	4293      	cmp	r3, r2
 810516e:	f040 80ef 	bne.w	8105350 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105176:	2b20      	cmp	r3, #32
 8105178:	dc46      	bgt.n	8105208 <UART_SetConfig+0x644>
 810517a:	2b02      	cmp	r3, #2
 810517c:	f2c0 8081 	blt.w	8105282 <UART_SetConfig+0x6be>
 8105180:	3b02      	subs	r3, #2
 8105182:	2b1e      	cmp	r3, #30
 8105184:	d87d      	bhi.n	8105282 <UART_SetConfig+0x6be>
 8105186:	a201      	add	r2, pc, #4	; (adr r2, 810518c <UART_SetConfig+0x5c8>)
 8105188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810518c:	0810520f 	.word	0x0810520f
 8105190:	08105283 	.word	0x08105283
 8105194:	08105217 	.word	0x08105217
 8105198:	08105283 	.word	0x08105283
 810519c:	08105283 	.word	0x08105283
 81051a0:	08105283 	.word	0x08105283
 81051a4:	08105227 	.word	0x08105227
 81051a8:	08105283 	.word	0x08105283
 81051ac:	08105283 	.word	0x08105283
 81051b0:	08105283 	.word	0x08105283
 81051b4:	08105283 	.word	0x08105283
 81051b8:	08105283 	.word	0x08105283
 81051bc:	08105283 	.word	0x08105283
 81051c0:	08105283 	.word	0x08105283
 81051c4:	08105237 	.word	0x08105237
 81051c8:	08105283 	.word	0x08105283
 81051cc:	08105283 	.word	0x08105283
 81051d0:	08105283 	.word	0x08105283
 81051d4:	08105283 	.word	0x08105283
 81051d8:	08105283 	.word	0x08105283
 81051dc:	08105283 	.word	0x08105283
 81051e0:	08105283 	.word	0x08105283
 81051e4:	08105283 	.word	0x08105283
 81051e8:	08105283 	.word	0x08105283
 81051ec:	08105283 	.word	0x08105283
 81051f0:	08105283 	.word	0x08105283
 81051f4:	08105283 	.word	0x08105283
 81051f8:	08105283 	.word	0x08105283
 81051fc:	08105283 	.word	0x08105283
 8105200:	08105283 	.word	0x08105283
 8105204:	08105275 	.word	0x08105275
 8105208:	2b40      	cmp	r3, #64	; 0x40
 810520a:	d036      	beq.n	810527a <UART_SetConfig+0x6b6>
 810520c:	e039      	b.n	8105282 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810520e:	f7fd ff1b 	bl	8103048 <HAL_RCCEx_GetD3PCLK1Freq>
 8105212:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105214:	e03b      	b.n	810528e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105216:	f107 0314 	add.w	r3, r7, #20
 810521a:	4618      	mov	r0, r3
 810521c:	f7fd ff2a 	bl	8103074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105220:	69bb      	ldr	r3, [r7, #24]
 8105222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105224:	e033      	b.n	810528e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105226:	f107 0308 	add.w	r3, r7, #8
 810522a:	4618      	mov	r0, r3
 810522c:	f7fe f876 	bl	810331c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105230:	68fb      	ldr	r3, [r7, #12]
 8105232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105234:	e02b      	b.n	810528e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105236:	4b0a      	ldr	r3, [pc, #40]	; (8105260 <UART_SetConfig+0x69c>)
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	f003 0320 	and.w	r3, r3, #32
 810523e:	2b00      	cmp	r3, #0
 8105240:	d009      	beq.n	8105256 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105242:	4b07      	ldr	r3, [pc, #28]	; (8105260 <UART_SetConfig+0x69c>)
 8105244:	681b      	ldr	r3, [r3, #0]
 8105246:	08db      	lsrs	r3, r3, #3
 8105248:	f003 0303 	and.w	r3, r3, #3
 810524c:	4a08      	ldr	r2, [pc, #32]	; (8105270 <UART_SetConfig+0x6ac>)
 810524e:	fa22 f303 	lsr.w	r3, r2, r3
 8105252:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105254:	e01b      	b.n	810528e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8105256:	4b06      	ldr	r3, [pc, #24]	; (8105270 <UART_SetConfig+0x6ac>)
 8105258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810525a:	e018      	b.n	810528e <UART_SetConfig+0x6ca>
 810525c:	40011400 	.word	0x40011400
 8105260:	58024400 	.word	0x58024400
 8105264:	40007800 	.word	0x40007800
 8105268:	40007c00 	.word	0x40007c00
 810526c:	58000c00 	.word	0x58000c00
 8105270:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105274:	4bc4      	ldr	r3, [pc, #784]	; (8105588 <UART_SetConfig+0x9c4>)
 8105276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105278:	e009      	b.n	810528e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810527a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810527e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105280:	e005      	b.n	810528e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8105282:	2300      	movs	r3, #0
 8105284:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105286:	2301      	movs	r3, #1
 8105288:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810528c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105290:	2b00      	cmp	r3, #0
 8105292:	f000 81da 	beq.w	810564a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105296:	687b      	ldr	r3, [r7, #4]
 8105298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810529a:	4abc      	ldr	r2, [pc, #752]	; (810558c <UART_SetConfig+0x9c8>)
 810529c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81052a0:	461a      	mov	r2, r3
 81052a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81052a4:	fbb3 f3f2 	udiv	r3, r3, r2
 81052a8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81052aa:	687b      	ldr	r3, [r7, #4]
 81052ac:	685a      	ldr	r2, [r3, #4]
 81052ae:	4613      	mov	r3, r2
 81052b0:	005b      	lsls	r3, r3, #1
 81052b2:	4413      	add	r3, r2
 81052b4:	6a3a      	ldr	r2, [r7, #32]
 81052b6:	429a      	cmp	r2, r3
 81052b8:	d305      	bcc.n	81052c6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 81052ba:	687b      	ldr	r3, [r7, #4]
 81052bc:	685b      	ldr	r3, [r3, #4]
 81052be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 81052c0:	6a3a      	ldr	r2, [r7, #32]
 81052c2:	429a      	cmp	r2, r3
 81052c4:	d903      	bls.n	81052ce <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 81052c6:	2301      	movs	r3, #1
 81052c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81052cc:	e1bd      	b.n	810564a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81052d0:	4618      	mov	r0, r3
 81052d2:	f04f 0100 	mov.w	r1, #0
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81052da:	4aac      	ldr	r2, [pc, #688]	; (810558c <UART_SetConfig+0x9c8>)
 81052dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81052e0:	b29a      	uxth	r2, r3
 81052e2:	f04f 0300 	mov.w	r3, #0
 81052e6:	f7fb f84b 	bl	8100380 <__aeabi_uldivmod>
 81052ea:	4602      	mov	r2, r0
 81052ec:	460b      	mov	r3, r1
 81052ee:	4610      	mov	r0, r2
 81052f0:	4619      	mov	r1, r3
 81052f2:	f04f 0200 	mov.w	r2, #0
 81052f6:	f04f 0300 	mov.w	r3, #0
 81052fa:	020b      	lsls	r3, r1, #8
 81052fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105300:	0202      	lsls	r2, r0, #8
 8105302:	6879      	ldr	r1, [r7, #4]
 8105304:	6849      	ldr	r1, [r1, #4]
 8105306:	0849      	lsrs	r1, r1, #1
 8105308:	4608      	mov	r0, r1
 810530a:	f04f 0100 	mov.w	r1, #0
 810530e:	1814      	adds	r4, r2, r0
 8105310:	eb43 0501 	adc.w	r5, r3, r1
 8105314:	687b      	ldr	r3, [r7, #4]
 8105316:	685b      	ldr	r3, [r3, #4]
 8105318:	461a      	mov	r2, r3
 810531a:	f04f 0300 	mov.w	r3, #0
 810531e:	4620      	mov	r0, r4
 8105320:	4629      	mov	r1, r5
 8105322:	f7fb f82d 	bl	8100380 <__aeabi_uldivmod>
 8105326:	4602      	mov	r2, r0
 8105328:	460b      	mov	r3, r1
 810532a:	4613      	mov	r3, r2
 810532c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105334:	d308      	bcc.n	8105348 <UART_SetConfig+0x784>
 8105336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810533c:	d204      	bcs.n	8105348 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 810533e:	687b      	ldr	r3, [r7, #4]
 8105340:	681b      	ldr	r3, [r3, #0]
 8105342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105344:	60da      	str	r2, [r3, #12]
 8105346:	e180      	b.n	810564a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8105348:	2301      	movs	r3, #1
 810534a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810534e:	e17c      	b.n	810564a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	69db      	ldr	r3, [r3, #28]
 8105354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105358:	f040 80be 	bne.w	81054d8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 810535c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105360:	2b20      	cmp	r3, #32
 8105362:	dc49      	bgt.n	81053f8 <UART_SetConfig+0x834>
 8105364:	2b00      	cmp	r3, #0
 8105366:	db7c      	blt.n	8105462 <UART_SetConfig+0x89e>
 8105368:	2b20      	cmp	r3, #32
 810536a:	d87a      	bhi.n	8105462 <UART_SetConfig+0x89e>
 810536c:	a201      	add	r2, pc, #4	; (adr r2, 8105374 <UART_SetConfig+0x7b0>)
 810536e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105372:	bf00      	nop
 8105374:	081053ff 	.word	0x081053ff
 8105378:	08105407 	.word	0x08105407
 810537c:	08105463 	.word	0x08105463
 8105380:	08105463 	.word	0x08105463
 8105384:	0810540f 	.word	0x0810540f
 8105388:	08105463 	.word	0x08105463
 810538c:	08105463 	.word	0x08105463
 8105390:	08105463 	.word	0x08105463
 8105394:	0810541f 	.word	0x0810541f
 8105398:	08105463 	.word	0x08105463
 810539c:	08105463 	.word	0x08105463
 81053a0:	08105463 	.word	0x08105463
 81053a4:	08105463 	.word	0x08105463
 81053a8:	08105463 	.word	0x08105463
 81053ac:	08105463 	.word	0x08105463
 81053b0:	08105463 	.word	0x08105463
 81053b4:	0810542f 	.word	0x0810542f
 81053b8:	08105463 	.word	0x08105463
 81053bc:	08105463 	.word	0x08105463
 81053c0:	08105463 	.word	0x08105463
 81053c4:	08105463 	.word	0x08105463
 81053c8:	08105463 	.word	0x08105463
 81053cc:	08105463 	.word	0x08105463
 81053d0:	08105463 	.word	0x08105463
 81053d4:	08105463 	.word	0x08105463
 81053d8:	08105463 	.word	0x08105463
 81053dc:	08105463 	.word	0x08105463
 81053e0:	08105463 	.word	0x08105463
 81053e4:	08105463 	.word	0x08105463
 81053e8:	08105463 	.word	0x08105463
 81053ec:	08105463 	.word	0x08105463
 81053f0:	08105463 	.word	0x08105463
 81053f4:	08105455 	.word	0x08105455
 81053f8:	2b40      	cmp	r3, #64	; 0x40
 81053fa:	d02e      	beq.n	810545a <UART_SetConfig+0x896>
 81053fc:	e031      	b.n	8105462 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81053fe:	f7fc feb7 	bl	8102170 <HAL_RCC_GetPCLK1Freq>
 8105402:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105404:	e033      	b.n	810546e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105406:	f7fc fec9 	bl	810219c <HAL_RCC_GetPCLK2Freq>
 810540a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810540c:	e02f      	b.n	810546e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810540e:	f107 0314 	add.w	r3, r7, #20
 8105412:	4618      	mov	r0, r3
 8105414:	f7fd fe2e 	bl	8103074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105418:	69bb      	ldr	r3, [r7, #24]
 810541a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810541c:	e027      	b.n	810546e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810541e:	f107 0308 	add.w	r3, r7, #8
 8105422:	4618      	mov	r0, r3
 8105424:	f7fd ff7a 	bl	810331c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105428:	68fb      	ldr	r3, [r7, #12]
 810542a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810542c:	e01f      	b.n	810546e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810542e:	4b58      	ldr	r3, [pc, #352]	; (8105590 <UART_SetConfig+0x9cc>)
 8105430:	681b      	ldr	r3, [r3, #0]
 8105432:	f003 0320 	and.w	r3, r3, #32
 8105436:	2b00      	cmp	r3, #0
 8105438:	d009      	beq.n	810544e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810543a:	4b55      	ldr	r3, [pc, #340]	; (8105590 <UART_SetConfig+0x9cc>)
 810543c:	681b      	ldr	r3, [r3, #0]
 810543e:	08db      	lsrs	r3, r3, #3
 8105440:	f003 0303 	and.w	r3, r3, #3
 8105444:	4a53      	ldr	r2, [pc, #332]	; (8105594 <UART_SetConfig+0x9d0>)
 8105446:	fa22 f303 	lsr.w	r3, r2, r3
 810544a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810544c:	e00f      	b.n	810546e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810544e:	4b51      	ldr	r3, [pc, #324]	; (8105594 <UART_SetConfig+0x9d0>)
 8105450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105452:	e00c      	b.n	810546e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105454:	4b4c      	ldr	r3, [pc, #304]	; (8105588 <UART_SetConfig+0x9c4>)
 8105456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105458:	e009      	b.n	810546e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810545a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810545e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105460:	e005      	b.n	810546e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8105462:	2300      	movs	r3, #0
 8105464:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105466:	2301      	movs	r3, #1
 8105468:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810546c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105470:	2b00      	cmp	r3, #0
 8105472:	f000 80ea 	beq.w	810564a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810547a:	4a44      	ldr	r2, [pc, #272]	; (810558c <UART_SetConfig+0x9c8>)
 810547c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105480:	461a      	mov	r2, r3
 8105482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105484:	fbb3 f3f2 	udiv	r3, r3, r2
 8105488:	005a      	lsls	r2, r3, #1
 810548a:	687b      	ldr	r3, [r7, #4]
 810548c:	685b      	ldr	r3, [r3, #4]
 810548e:	085b      	lsrs	r3, r3, #1
 8105490:	441a      	add	r2, r3
 8105492:	687b      	ldr	r3, [r7, #4]
 8105494:	685b      	ldr	r3, [r3, #4]
 8105496:	fbb2 f3f3 	udiv	r3, r2, r3
 810549a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810549c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810549e:	2b0f      	cmp	r3, #15
 81054a0:	d916      	bls.n	81054d0 <UART_SetConfig+0x90c>
 81054a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81054a8:	d212      	bcs.n	81054d0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 81054aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054ac:	b29b      	uxth	r3, r3
 81054ae:	f023 030f 	bic.w	r3, r3, #15
 81054b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054b6:	085b      	lsrs	r3, r3, #1
 81054b8:	b29b      	uxth	r3, r3
 81054ba:	f003 0307 	and.w	r3, r3, #7
 81054be:	b29a      	uxth	r2, r3
 81054c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81054c2:	4313      	orrs	r3, r2
 81054c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 81054cc:	60da      	str	r2, [r3, #12]
 81054ce:	e0bc      	b.n	810564a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81054d0:	2301      	movs	r3, #1
 81054d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81054d6:	e0b8      	b.n	810564a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 81054d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81054dc:	2b20      	cmp	r3, #32
 81054de:	dc4b      	bgt.n	8105578 <UART_SetConfig+0x9b4>
 81054e0:	2b00      	cmp	r3, #0
 81054e2:	f2c0 8087 	blt.w	81055f4 <UART_SetConfig+0xa30>
 81054e6:	2b20      	cmp	r3, #32
 81054e8:	f200 8084 	bhi.w	81055f4 <UART_SetConfig+0xa30>
 81054ec:	a201      	add	r2, pc, #4	; (adr r2, 81054f4 <UART_SetConfig+0x930>)
 81054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054f2:	bf00      	nop
 81054f4:	0810557f 	.word	0x0810557f
 81054f8:	08105599 	.word	0x08105599
 81054fc:	081055f5 	.word	0x081055f5
 8105500:	081055f5 	.word	0x081055f5
 8105504:	081055a1 	.word	0x081055a1
 8105508:	081055f5 	.word	0x081055f5
 810550c:	081055f5 	.word	0x081055f5
 8105510:	081055f5 	.word	0x081055f5
 8105514:	081055b1 	.word	0x081055b1
 8105518:	081055f5 	.word	0x081055f5
 810551c:	081055f5 	.word	0x081055f5
 8105520:	081055f5 	.word	0x081055f5
 8105524:	081055f5 	.word	0x081055f5
 8105528:	081055f5 	.word	0x081055f5
 810552c:	081055f5 	.word	0x081055f5
 8105530:	081055f5 	.word	0x081055f5
 8105534:	081055c1 	.word	0x081055c1
 8105538:	081055f5 	.word	0x081055f5
 810553c:	081055f5 	.word	0x081055f5
 8105540:	081055f5 	.word	0x081055f5
 8105544:	081055f5 	.word	0x081055f5
 8105548:	081055f5 	.word	0x081055f5
 810554c:	081055f5 	.word	0x081055f5
 8105550:	081055f5 	.word	0x081055f5
 8105554:	081055f5 	.word	0x081055f5
 8105558:	081055f5 	.word	0x081055f5
 810555c:	081055f5 	.word	0x081055f5
 8105560:	081055f5 	.word	0x081055f5
 8105564:	081055f5 	.word	0x081055f5
 8105568:	081055f5 	.word	0x081055f5
 810556c:	081055f5 	.word	0x081055f5
 8105570:	081055f5 	.word	0x081055f5
 8105574:	081055e7 	.word	0x081055e7
 8105578:	2b40      	cmp	r3, #64	; 0x40
 810557a:	d037      	beq.n	81055ec <UART_SetConfig+0xa28>
 810557c:	e03a      	b.n	81055f4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810557e:	f7fc fdf7 	bl	8102170 <HAL_RCC_GetPCLK1Freq>
 8105582:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105584:	e03c      	b.n	8105600 <UART_SetConfig+0xa3c>
 8105586:	bf00      	nop
 8105588:	003d0900 	.word	0x003d0900
 810558c:	08106d38 	.word	0x08106d38
 8105590:	58024400 	.word	0x58024400
 8105594:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105598:	f7fc fe00 	bl	810219c <HAL_RCC_GetPCLK2Freq>
 810559c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810559e:	e02f      	b.n	8105600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81055a0:	f107 0314 	add.w	r3, r7, #20
 81055a4:	4618      	mov	r0, r3
 81055a6:	f7fd fd65 	bl	8103074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81055aa:	69bb      	ldr	r3, [r7, #24]
 81055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81055ae:	e027      	b.n	8105600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81055b0:	f107 0308 	add.w	r3, r7, #8
 81055b4:	4618      	mov	r0, r3
 81055b6:	f7fd feb1 	bl	810331c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81055ba:	68fb      	ldr	r3, [r7, #12]
 81055bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81055be:	e01f      	b.n	8105600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81055c0:	4b2c      	ldr	r3, [pc, #176]	; (8105674 <UART_SetConfig+0xab0>)
 81055c2:	681b      	ldr	r3, [r3, #0]
 81055c4:	f003 0320 	and.w	r3, r3, #32
 81055c8:	2b00      	cmp	r3, #0
 81055ca:	d009      	beq.n	81055e0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81055cc:	4b29      	ldr	r3, [pc, #164]	; (8105674 <UART_SetConfig+0xab0>)
 81055ce:	681b      	ldr	r3, [r3, #0]
 81055d0:	08db      	lsrs	r3, r3, #3
 81055d2:	f003 0303 	and.w	r3, r3, #3
 81055d6:	4a28      	ldr	r2, [pc, #160]	; (8105678 <UART_SetConfig+0xab4>)
 81055d8:	fa22 f303 	lsr.w	r3, r2, r3
 81055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81055de:	e00f      	b.n	8105600 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 81055e0:	4b25      	ldr	r3, [pc, #148]	; (8105678 <UART_SetConfig+0xab4>)
 81055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81055e4:	e00c      	b.n	8105600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81055e6:	4b25      	ldr	r3, [pc, #148]	; (810567c <UART_SetConfig+0xab8>)
 81055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81055ea:	e009      	b.n	8105600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81055ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81055f2:	e005      	b.n	8105600 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 81055f4:	2300      	movs	r3, #0
 81055f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81055f8:	2301      	movs	r3, #1
 81055fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81055fe:	bf00      	nop
    }

    if (pclk != 0U)
 8105600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105602:	2b00      	cmp	r3, #0
 8105604:	d021      	beq.n	810564a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105606:	687b      	ldr	r3, [r7, #4]
 8105608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810560a:	4a1d      	ldr	r2, [pc, #116]	; (8105680 <UART_SetConfig+0xabc>)
 810560c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105610:	461a      	mov	r2, r3
 8105612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105614:	fbb3 f2f2 	udiv	r2, r3, r2
 8105618:	687b      	ldr	r3, [r7, #4]
 810561a:	685b      	ldr	r3, [r3, #4]
 810561c:	085b      	lsrs	r3, r3, #1
 810561e:	441a      	add	r2, r3
 8105620:	687b      	ldr	r3, [r7, #4]
 8105622:	685b      	ldr	r3, [r3, #4]
 8105624:	fbb2 f3f3 	udiv	r3, r2, r3
 8105628:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810562c:	2b0f      	cmp	r3, #15
 810562e:	d909      	bls.n	8105644 <UART_SetConfig+0xa80>
 8105630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105636:	d205      	bcs.n	8105644 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8105638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810563a:	b29a      	uxth	r2, r3
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	681b      	ldr	r3, [r3, #0]
 8105640:	60da      	str	r2, [r3, #12]
 8105642:	e002      	b.n	810564a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8105644:	2301      	movs	r3, #1
 8105646:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810564a:	687b      	ldr	r3, [r7, #4]
 810564c:	2201      	movs	r2, #1
 810564e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105652:	687b      	ldr	r3, [r7, #4]
 8105654:	2201      	movs	r2, #1
 8105656:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810565a:	687b      	ldr	r3, [r7, #4]
 810565c:	2200      	movs	r2, #0
 810565e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8105660:	687b      	ldr	r3, [r7, #4]
 8105662:	2200      	movs	r2, #0
 8105664:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8105666:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810566a:	4618      	mov	r0, r3
 810566c:	3738      	adds	r7, #56	; 0x38
 810566e:	46bd      	mov	sp, r7
 8105670:	bdb0      	pop	{r4, r5, r7, pc}
 8105672:	bf00      	nop
 8105674:	58024400 	.word	0x58024400
 8105678:	03d09000 	.word	0x03d09000
 810567c:	003d0900 	.word	0x003d0900
 8105680:	08106d38 	.word	0x08106d38

08105684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105684:	b480      	push	{r7}
 8105686:	b083      	sub	sp, #12
 8105688:	af00      	add	r7, sp, #0
 810568a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105690:	f003 0301 	and.w	r3, r3, #1
 8105694:	2b00      	cmp	r3, #0
 8105696:	d00a      	beq.n	81056ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	681b      	ldr	r3, [r3, #0]
 810569c:	685b      	ldr	r3, [r3, #4]
 810569e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	430a      	orrs	r2, r1
 81056ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81056ae:	687b      	ldr	r3, [r7, #4]
 81056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056b2:	f003 0302 	and.w	r3, r3, #2
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d00a      	beq.n	81056d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	681b      	ldr	r3, [r3, #0]
 81056be:	685b      	ldr	r3, [r3, #4]
 81056c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81056c4:	687b      	ldr	r3, [r7, #4]
 81056c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	430a      	orrs	r2, r1
 81056ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056d4:	f003 0304 	and.w	r3, r3, #4
 81056d8:	2b00      	cmp	r3, #0
 81056da:	d00a      	beq.n	81056f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	685b      	ldr	r3, [r3, #4]
 81056e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	430a      	orrs	r2, r1
 81056f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056f6:	f003 0308 	and.w	r3, r3, #8
 81056fa:	2b00      	cmp	r3, #0
 81056fc:	d00a      	beq.n	8105714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	681b      	ldr	r3, [r3, #0]
 8105702:	685b      	ldr	r3, [r3, #4]
 8105704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105708:	687b      	ldr	r3, [r7, #4]
 810570a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810570c:	687b      	ldr	r3, [r7, #4]
 810570e:	681b      	ldr	r3, [r3, #0]
 8105710:	430a      	orrs	r2, r1
 8105712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105714:	687b      	ldr	r3, [r7, #4]
 8105716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105718:	f003 0310 	and.w	r3, r3, #16
 810571c:	2b00      	cmp	r3, #0
 810571e:	d00a      	beq.n	8105736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105720:	687b      	ldr	r3, [r7, #4]
 8105722:	681b      	ldr	r3, [r3, #0]
 8105724:	689b      	ldr	r3, [r3, #8]
 8105726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810572a:	687b      	ldr	r3, [r7, #4]
 810572c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	681b      	ldr	r3, [r3, #0]
 8105732:	430a      	orrs	r2, r1
 8105734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105736:	687b      	ldr	r3, [r7, #4]
 8105738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810573a:	f003 0320 	and.w	r3, r3, #32
 810573e:	2b00      	cmp	r3, #0
 8105740:	d00a      	beq.n	8105758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	681b      	ldr	r3, [r3, #0]
 8105746:	689b      	ldr	r3, [r3, #8]
 8105748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 810574c:	687b      	ldr	r3, [r7, #4]
 810574e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105750:	687b      	ldr	r3, [r7, #4]
 8105752:	681b      	ldr	r3, [r3, #0]
 8105754:	430a      	orrs	r2, r1
 8105756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105758:	687b      	ldr	r3, [r7, #4]
 810575a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105760:	2b00      	cmp	r3, #0
 8105762:	d01a      	beq.n	810579a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105764:	687b      	ldr	r3, [r7, #4]
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	685b      	ldr	r3, [r3, #4]
 810576a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810576e:	687b      	ldr	r3, [r7, #4]
 8105770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	681b      	ldr	r3, [r3, #0]
 8105776:	430a      	orrs	r2, r1
 8105778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810577a:	687b      	ldr	r3, [r7, #4]
 810577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810577e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105782:	d10a      	bne.n	810579a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	681b      	ldr	r3, [r3, #0]
 8105788:	685b      	ldr	r3, [r3, #4]
 810578a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810578e:	687b      	ldr	r3, [r7, #4]
 8105790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	681b      	ldr	r3, [r3, #0]
 8105796:	430a      	orrs	r2, r1
 8105798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810579a:	687b      	ldr	r3, [r7, #4]
 810579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810579e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81057a2:	2b00      	cmp	r3, #0
 81057a4:	d00a      	beq.n	81057bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 81057a6:	687b      	ldr	r3, [r7, #4]
 81057a8:	681b      	ldr	r3, [r3, #0]
 81057aa:	685b      	ldr	r3, [r3, #4]
 81057ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 81057b0:	687b      	ldr	r3, [r7, #4]
 81057b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81057b4:	687b      	ldr	r3, [r7, #4]
 81057b6:	681b      	ldr	r3, [r3, #0]
 81057b8:	430a      	orrs	r2, r1
 81057ba:	605a      	str	r2, [r3, #4]
  }
}
 81057bc:	bf00      	nop
 81057be:	370c      	adds	r7, #12
 81057c0:	46bd      	mov	sp, r7
 81057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057c6:	4770      	bx	lr

081057c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81057c8:	b580      	push	{r7, lr}
 81057ca:	b086      	sub	sp, #24
 81057cc:	af02      	add	r7, sp, #8
 81057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81057d0:	687b      	ldr	r3, [r7, #4]
 81057d2:	2200      	movs	r2, #0
 81057d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81057d8:	f7fb ff4c 	bl	8101674 <HAL_GetTick>
 81057dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81057de:	687b      	ldr	r3, [r7, #4]
 81057e0:	681b      	ldr	r3, [r3, #0]
 81057e2:	681b      	ldr	r3, [r3, #0]
 81057e4:	f003 0308 	and.w	r3, r3, #8
 81057e8:	2b08      	cmp	r3, #8
 81057ea:	d10e      	bne.n	810580a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81057ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81057f0:	9300      	str	r3, [sp, #0]
 81057f2:	68fb      	ldr	r3, [r7, #12]
 81057f4:	2200      	movs	r2, #0
 81057f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81057fa:	6878      	ldr	r0, [r7, #4]
 81057fc:	f000 f82f 	bl	810585e <UART_WaitOnFlagUntilTimeout>
 8105800:	4603      	mov	r3, r0
 8105802:	2b00      	cmp	r3, #0
 8105804:	d001      	beq.n	810580a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105806:	2303      	movs	r3, #3
 8105808:	e025      	b.n	8105856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810580a:	687b      	ldr	r3, [r7, #4]
 810580c:	681b      	ldr	r3, [r3, #0]
 810580e:	681b      	ldr	r3, [r3, #0]
 8105810:	f003 0304 	and.w	r3, r3, #4
 8105814:	2b04      	cmp	r3, #4
 8105816:	d10e      	bne.n	8105836 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810581c:	9300      	str	r3, [sp, #0]
 810581e:	68fb      	ldr	r3, [r7, #12]
 8105820:	2200      	movs	r2, #0
 8105822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8105826:	6878      	ldr	r0, [r7, #4]
 8105828:	f000 f819 	bl	810585e <UART_WaitOnFlagUntilTimeout>
 810582c:	4603      	mov	r3, r0
 810582e:	2b00      	cmp	r3, #0
 8105830:	d001      	beq.n	8105836 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105832:	2303      	movs	r3, #3
 8105834:	e00f      	b.n	8105856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	2220      	movs	r2, #32
 810583a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 810583e:	687b      	ldr	r3, [r7, #4]
 8105840:	2220      	movs	r2, #32
 8105842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	2200      	movs	r2, #0
 810584a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 810584c:	687b      	ldr	r3, [r7, #4]
 810584e:	2200      	movs	r2, #0
 8105850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105854:	2300      	movs	r3, #0
}
 8105856:	4618      	mov	r0, r3
 8105858:	3710      	adds	r7, #16
 810585a:	46bd      	mov	sp, r7
 810585c:	bd80      	pop	{r7, pc}

0810585e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810585e:	b580      	push	{r7, lr}
 8105860:	b09c      	sub	sp, #112	; 0x70
 8105862:	af00      	add	r7, sp, #0
 8105864:	60f8      	str	r0, [r7, #12]
 8105866:	60b9      	str	r1, [r7, #8]
 8105868:	603b      	str	r3, [r7, #0]
 810586a:	4613      	mov	r3, r2
 810586c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810586e:	e0a9      	b.n	81059c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105876:	f000 80a5 	beq.w	81059c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810587a:	f7fb fefb 	bl	8101674 <HAL_GetTick>
 810587e:	4602      	mov	r2, r0
 8105880:	683b      	ldr	r3, [r7, #0]
 8105882:	1ad3      	subs	r3, r2, r3
 8105884:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8105886:	429a      	cmp	r2, r3
 8105888:	d302      	bcc.n	8105890 <UART_WaitOnFlagUntilTimeout+0x32>
 810588a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810588c:	2b00      	cmp	r3, #0
 810588e:	d140      	bne.n	8105912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105890:	68fb      	ldr	r3, [r7, #12]
 8105892:	681b      	ldr	r3, [r3, #0]
 8105894:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105898:	e853 3f00 	ldrex	r3, [r3]
 810589c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810589e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81058a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81058a4:	667b      	str	r3, [r7, #100]	; 0x64
 81058a6:	68fb      	ldr	r3, [r7, #12]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	461a      	mov	r2, r3
 81058ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81058ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 81058b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81058b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 81058b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81058b6:	e841 2300 	strex	r3, r2, [r1]
 81058ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 81058bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81058be:	2b00      	cmp	r3, #0
 81058c0:	d1e6      	bne.n	8105890 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81058c2:	68fb      	ldr	r3, [r7, #12]
 81058c4:	681b      	ldr	r3, [r3, #0]
 81058c6:	3308      	adds	r3, #8
 81058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81058ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81058cc:	e853 3f00 	ldrex	r3, [r3]
 81058d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81058d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81058d4:	f023 0301 	bic.w	r3, r3, #1
 81058d8:	663b      	str	r3, [r7, #96]	; 0x60
 81058da:	68fb      	ldr	r3, [r7, #12]
 81058dc:	681b      	ldr	r3, [r3, #0]
 81058de:	3308      	adds	r3, #8
 81058e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81058e2:	64ba      	str	r2, [r7, #72]	; 0x48
 81058e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81058e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81058e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81058ea:	e841 2300 	strex	r3, r2, [r1]
 81058ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81058f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81058f2:	2b00      	cmp	r3, #0
 81058f4:	d1e5      	bne.n	81058c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81058f6:	68fb      	ldr	r3, [r7, #12]
 81058f8:	2220      	movs	r2, #32
 81058fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81058fe:	68fb      	ldr	r3, [r7, #12]
 8105900:	2220      	movs	r2, #32
 8105902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8105906:	68fb      	ldr	r3, [r7, #12]
 8105908:	2200      	movs	r2, #0
 810590a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810590e:	2303      	movs	r3, #3
 8105910:	e069      	b.n	81059e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8105912:	68fb      	ldr	r3, [r7, #12]
 8105914:	681b      	ldr	r3, [r3, #0]
 8105916:	681b      	ldr	r3, [r3, #0]
 8105918:	f003 0304 	and.w	r3, r3, #4
 810591c:	2b00      	cmp	r3, #0
 810591e:	d051      	beq.n	81059c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105920:	68fb      	ldr	r3, [r7, #12]
 8105922:	681b      	ldr	r3, [r3, #0]
 8105924:	69db      	ldr	r3, [r3, #28]
 8105926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810592a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810592e:	d149      	bne.n	81059c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105930:	68fb      	ldr	r3, [r7, #12]
 8105932:	681b      	ldr	r3, [r3, #0]
 8105934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8105938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810593a:	68fb      	ldr	r3, [r7, #12]
 810593c:	681b      	ldr	r3, [r3, #0]
 810593e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105942:	e853 3f00 	ldrex	r3, [r3]
 8105946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810594a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810594e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105950:	68fb      	ldr	r3, [r7, #12]
 8105952:	681b      	ldr	r3, [r3, #0]
 8105954:	461a      	mov	r2, r3
 8105956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105958:	637b      	str	r3, [r7, #52]	; 0x34
 810595a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810595c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810595e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105960:	e841 2300 	strex	r3, r2, [r1]
 8105964:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8105966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105968:	2b00      	cmp	r3, #0
 810596a:	d1e6      	bne.n	810593a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810596c:	68fb      	ldr	r3, [r7, #12]
 810596e:	681b      	ldr	r3, [r3, #0]
 8105970:	3308      	adds	r3, #8
 8105972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105974:	697b      	ldr	r3, [r7, #20]
 8105976:	e853 3f00 	ldrex	r3, [r3]
 810597a:	613b      	str	r3, [r7, #16]
   return(result);
 810597c:	693b      	ldr	r3, [r7, #16]
 810597e:	f023 0301 	bic.w	r3, r3, #1
 8105982:	66bb      	str	r3, [r7, #104]	; 0x68
 8105984:	68fb      	ldr	r3, [r7, #12]
 8105986:	681b      	ldr	r3, [r3, #0]
 8105988:	3308      	adds	r3, #8
 810598a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810598c:	623a      	str	r2, [r7, #32]
 810598e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105990:	69f9      	ldr	r1, [r7, #28]
 8105992:	6a3a      	ldr	r2, [r7, #32]
 8105994:	e841 2300 	strex	r3, r2, [r1]
 8105998:	61bb      	str	r3, [r7, #24]
   return(result);
 810599a:	69bb      	ldr	r3, [r7, #24]
 810599c:	2b00      	cmp	r3, #0
 810599e:	d1e5      	bne.n	810596c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 81059a0:	68fb      	ldr	r3, [r7, #12]
 81059a2:	2220      	movs	r2, #32
 81059a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 81059a8:	68fb      	ldr	r3, [r7, #12]
 81059aa:	2220      	movs	r2, #32
 81059ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81059b0:	68fb      	ldr	r3, [r7, #12]
 81059b2:	2220      	movs	r2, #32
 81059b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81059b8:	68fb      	ldr	r3, [r7, #12]
 81059ba:	2200      	movs	r2, #0
 81059bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 81059c0:	2303      	movs	r3, #3
 81059c2:	e010      	b.n	81059e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81059c4:	68fb      	ldr	r3, [r7, #12]
 81059c6:	681b      	ldr	r3, [r3, #0]
 81059c8:	69da      	ldr	r2, [r3, #28]
 81059ca:	68bb      	ldr	r3, [r7, #8]
 81059cc:	4013      	ands	r3, r2
 81059ce:	68ba      	ldr	r2, [r7, #8]
 81059d0:	429a      	cmp	r2, r3
 81059d2:	bf0c      	ite	eq
 81059d4:	2301      	moveq	r3, #1
 81059d6:	2300      	movne	r3, #0
 81059d8:	b2db      	uxtb	r3, r3
 81059da:	461a      	mov	r2, r3
 81059dc:	79fb      	ldrb	r3, [r7, #7]
 81059de:	429a      	cmp	r2, r3
 81059e0:	f43f af46 	beq.w	8105870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81059e4:	2300      	movs	r3, #0
}
 81059e6:	4618      	mov	r0, r3
 81059e8:	3770      	adds	r7, #112	; 0x70
 81059ea:	46bd      	mov	sp, r7
 81059ec:	bd80      	pop	{r7, pc}

081059ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81059ee:	b480      	push	{r7}
 81059f0:	b085      	sub	sp, #20
 81059f2:	af00      	add	r7, sp, #0
 81059f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81059fc:	2b01      	cmp	r3, #1
 81059fe:	d101      	bne.n	8105a04 <HAL_UARTEx_DisableFifoMode+0x16>
 8105a00:	2302      	movs	r3, #2
 8105a02:	e027      	b.n	8105a54 <HAL_UARTEx_DisableFifoMode+0x66>
 8105a04:	687b      	ldr	r3, [r7, #4]
 8105a06:	2201      	movs	r2, #1
 8105a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	2224      	movs	r2, #36	; 0x24
 8105a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105a14:	687b      	ldr	r3, [r7, #4]
 8105a16:	681b      	ldr	r3, [r3, #0]
 8105a18:	681b      	ldr	r3, [r3, #0]
 8105a1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105a1c:	687b      	ldr	r3, [r7, #4]
 8105a1e:	681b      	ldr	r3, [r3, #0]
 8105a20:	681a      	ldr	r2, [r3, #0]
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	f022 0201 	bic.w	r2, r2, #1
 8105a2a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105a2c:	68fb      	ldr	r3, [r7, #12]
 8105a2e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8105a32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8105a34:	687b      	ldr	r3, [r7, #4]
 8105a36:	2200      	movs	r2, #0
 8105a38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105a3a:	687b      	ldr	r3, [r7, #4]
 8105a3c:	681b      	ldr	r3, [r3, #0]
 8105a3e:	68fa      	ldr	r2, [r7, #12]
 8105a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	2220      	movs	r2, #32
 8105a46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105a4a:	687b      	ldr	r3, [r7, #4]
 8105a4c:	2200      	movs	r2, #0
 8105a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105a52:	2300      	movs	r3, #0
}
 8105a54:	4618      	mov	r0, r3
 8105a56:	3714      	adds	r7, #20
 8105a58:	46bd      	mov	sp, r7
 8105a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a5e:	4770      	bx	lr

08105a60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105a60:	b580      	push	{r7, lr}
 8105a62:	b084      	sub	sp, #16
 8105a64:	af00      	add	r7, sp, #0
 8105a66:	6078      	str	r0, [r7, #4]
 8105a68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105a6a:	687b      	ldr	r3, [r7, #4]
 8105a6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105a70:	2b01      	cmp	r3, #1
 8105a72:	d101      	bne.n	8105a78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105a74:	2302      	movs	r3, #2
 8105a76:	e02d      	b.n	8105ad4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105a78:	687b      	ldr	r3, [r7, #4]
 8105a7a:	2201      	movs	r2, #1
 8105a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105a80:	687b      	ldr	r3, [r7, #4]
 8105a82:	2224      	movs	r2, #36	; 0x24
 8105a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105a90:	687b      	ldr	r3, [r7, #4]
 8105a92:	681b      	ldr	r3, [r3, #0]
 8105a94:	681a      	ldr	r2, [r3, #0]
 8105a96:	687b      	ldr	r3, [r7, #4]
 8105a98:	681b      	ldr	r3, [r3, #0]
 8105a9a:	f022 0201 	bic.w	r2, r2, #1
 8105a9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	681b      	ldr	r3, [r3, #0]
 8105aa4:	689b      	ldr	r3, [r3, #8]
 8105aa6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105aaa:	687b      	ldr	r3, [r7, #4]
 8105aac:	681b      	ldr	r3, [r3, #0]
 8105aae:	683a      	ldr	r2, [r7, #0]
 8105ab0:	430a      	orrs	r2, r1
 8105ab2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105ab4:	6878      	ldr	r0, [r7, #4]
 8105ab6:	f000 f84f 	bl	8105b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105aba:	687b      	ldr	r3, [r7, #4]
 8105abc:	681b      	ldr	r3, [r3, #0]
 8105abe:	68fa      	ldr	r2, [r7, #12]
 8105ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105ac2:	687b      	ldr	r3, [r7, #4]
 8105ac4:	2220      	movs	r2, #32
 8105ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105aca:	687b      	ldr	r3, [r7, #4]
 8105acc:	2200      	movs	r2, #0
 8105ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105ad2:	2300      	movs	r3, #0
}
 8105ad4:	4618      	mov	r0, r3
 8105ad6:	3710      	adds	r7, #16
 8105ad8:	46bd      	mov	sp, r7
 8105ada:	bd80      	pop	{r7, pc}

08105adc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105adc:	b580      	push	{r7, lr}
 8105ade:	b084      	sub	sp, #16
 8105ae0:	af00      	add	r7, sp, #0
 8105ae2:	6078      	str	r0, [r7, #4]
 8105ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105ae6:	687b      	ldr	r3, [r7, #4]
 8105ae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105aec:	2b01      	cmp	r3, #1
 8105aee:	d101      	bne.n	8105af4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105af0:	2302      	movs	r3, #2
 8105af2:	e02d      	b.n	8105b50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105af4:	687b      	ldr	r3, [r7, #4]
 8105af6:	2201      	movs	r2, #1
 8105af8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	2224      	movs	r2, #36	; 0x24
 8105b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	681b      	ldr	r3, [r3, #0]
 8105b08:	681b      	ldr	r3, [r3, #0]
 8105b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	681a      	ldr	r2, [r3, #0]
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	f022 0201 	bic.w	r2, r2, #1
 8105b1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	681b      	ldr	r3, [r3, #0]
 8105b20:	689b      	ldr	r3, [r3, #8]
 8105b22:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	681b      	ldr	r3, [r3, #0]
 8105b2a:	683a      	ldr	r2, [r7, #0]
 8105b2c:	430a      	orrs	r2, r1
 8105b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105b30:	6878      	ldr	r0, [r7, #4]
 8105b32:	f000 f811 	bl	8105b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	68fa      	ldr	r2, [r7, #12]
 8105b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105b3e:	687b      	ldr	r3, [r7, #4]
 8105b40:	2220      	movs	r2, #32
 8105b42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	2200      	movs	r2, #0
 8105b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105b4e:	2300      	movs	r3, #0
}
 8105b50:	4618      	mov	r0, r3
 8105b52:	3710      	adds	r7, #16
 8105b54:	46bd      	mov	sp, r7
 8105b56:	bd80      	pop	{r7, pc}

08105b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105b58:	b480      	push	{r7}
 8105b5a:	b085      	sub	sp, #20
 8105b5c:	af00      	add	r7, sp, #0
 8105b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105b60:	687b      	ldr	r3, [r7, #4]
 8105b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105b64:	2b00      	cmp	r3, #0
 8105b66:	d108      	bne.n	8105b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8105b68:	687b      	ldr	r3, [r7, #4]
 8105b6a:	2201      	movs	r2, #1
 8105b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105b70:	687b      	ldr	r3, [r7, #4]
 8105b72:	2201      	movs	r2, #1
 8105b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105b78:	e031      	b.n	8105bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105b7a:	2310      	movs	r3, #16
 8105b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105b7e:	2310      	movs	r3, #16
 8105b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105b82:	687b      	ldr	r3, [r7, #4]
 8105b84:	681b      	ldr	r3, [r3, #0]
 8105b86:	689b      	ldr	r3, [r3, #8]
 8105b88:	0e5b      	lsrs	r3, r3, #25
 8105b8a:	b2db      	uxtb	r3, r3
 8105b8c:	f003 0307 	and.w	r3, r3, #7
 8105b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105b92:	687b      	ldr	r3, [r7, #4]
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	689b      	ldr	r3, [r3, #8]
 8105b98:	0f5b      	lsrs	r3, r3, #29
 8105b9a:	b2db      	uxtb	r3, r3
 8105b9c:	f003 0307 	and.w	r3, r3, #7
 8105ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105ba2:	7bbb      	ldrb	r3, [r7, #14]
 8105ba4:	7b3a      	ldrb	r2, [r7, #12]
 8105ba6:	4911      	ldr	r1, [pc, #68]	; (8105bec <UARTEx_SetNbDataToProcess+0x94>)
 8105ba8:	5c8a      	ldrb	r2, [r1, r2]
 8105baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8105bae:	7b3a      	ldrb	r2, [r7, #12]
 8105bb0:	490f      	ldr	r1, [pc, #60]	; (8105bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8105bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8105bb8:	b29a      	uxth	r2, r3
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105bc0:	7bfb      	ldrb	r3, [r7, #15]
 8105bc2:	7b7a      	ldrb	r2, [r7, #13]
 8105bc4:	4909      	ldr	r1, [pc, #36]	; (8105bec <UARTEx_SetNbDataToProcess+0x94>)
 8105bc6:	5c8a      	ldrb	r2, [r1, r2]
 8105bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8105bcc:	7b7a      	ldrb	r2, [r7, #13]
 8105bce:	4908      	ldr	r1, [pc, #32]	; (8105bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8105bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8105bd6:	b29a      	uxth	r2, r3
 8105bd8:	687b      	ldr	r3, [r7, #4]
 8105bda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8105bde:	bf00      	nop
 8105be0:	3714      	adds	r7, #20
 8105be2:	46bd      	mov	sp, r7
 8105be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105be8:	4770      	bx	lr
 8105bea:	bf00      	nop
 8105bec:	08106d50 	.word	0x08106d50
 8105bf0:	08106d58 	.word	0x08106d58

08105bf4 <__errno>:
 8105bf4:	4b01      	ldr	r3, [pc, #4]	; (8105bfc <__errno+0x8>)
 8105bf6:	6818      	ldr	r0, [r3, #0]
 8105bf8:	4770      	bx	lr
 8105bfa:	bf00      	nop
 8105bfc:	10000010 	.word	0x10000010

08105c00 <__libc_init_array>:
 8105c00:	b570      	push	{r4, r5, r6, lr}
 8105c02:	4d0d      	ldr	r5, [pc, #52]	; (8105c38 <__libc_init_array+0x38>)
 8105c04:	4c0d      	ldr	r4, [pc, #52]	; (8105c3c <__libc_init_array+0x3c>)
 8105c06:	1b64      	subs	r4, r4, r5
 8105c08:	10a4      	asrs	r4, r4, #2
 8105c0a:	2600      	movs	r6, #0
 8105c0c:	42a6      	cmp	r6, r4
 8105c0e:	d109      	bne.n	8105c24 <__libc_init_array+0x24>
 8105c10:	4d0b      	ldr	r5, [pc, #44]	; (8105c40 <__libc_init_array+0x40>)
 8105c12:	4c0c      	ldr	r4, [pc, #48]	; (8105c44 <__libc_init_array+0x44>)
 8105c14:	f000 ffec 	bl	8106bf0 <_init>
 8105c18:	1b64      	subs	r4, r4, r5
 8105c1a:	10a4      	asrs	r4, r4, #2
 8105c1c:	2600      	movs	r6, #0
 8105c1e:	42a6      	cmp	r6, r4
 8105c20:	d105      	bne.n	8105c2e <__libc_init_array+0x2e>
 8105c22:	bd70      	pop	{r4, r5, r6, pc}
 8105c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8105c28:	4798      	blx	r3
 8105c2a:	3601      	adds	r6, #1
 8105c2c:	e7ee      	b.n	8105c0c <__libc_init_array+0xc>
 8105c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8105c32:	4798      	blx	r3
 8105c34:	3601      	adds	r6, #1
 8105c36:	e7f2      	b.n	8105c1e <__libc_init_array+0x1e>
 8105c38:	08106e00 	.word	0x08106e00
 8105c3c:	08106e00 	.word	0x08106e00
 8105c40:	08106e00 	.word	0x08106e00
 8105c44:	08106e04 	.word	0x08106e04

08105c48 <memset>:
 8105c48:	4402      	add	r2, r0
 8105c4a:	4603      	mov	r3, r0
 8105c4c:	4293      	cmp	r3, r2
 8105c4e:	d100      	bne.n	8105c52 <memset+0xa>
 8105c50:	4770      	bx	lr
 8105c52:	f803 1b01 	strb.w	r1, [r3], #1
 8105c56:	e7f9      	b.n	8105c4c <memset+0x4>

08105c58 <iprintf>:
 8105c58:	b40f      	push	{r0, r1, r2, r3}
 8105c5a:	4b0a      	ldr	r3, [pc, #40]	; (8105c84 <iprintf+0x2c>)
 8105c5c:	b513      	push	{r0, r1, r4, lr}
 8105c5e:	681c      	ldr	r4, [r3, #0]
 8105c60:	b124      	cbz	r4, 8105c6c <iprintf+0x14>
 8105c62:	69a3      	ldr	r3, [r4, #24]
 8105c64:	b913      	cbnz	r3, 8105c6c <iprintf+0x14>
 8105c66:	4620      	mov	r0, r4
 8105c68:	f000 fa5e 	bl	8106128 <__sinit>
 8105c6c:	ab05      	add	r3, sp, #20
 8105c6e:	9a04      	ldr	r2, [sp, #16]
 8105c70:	68a1      	ldr	r1, [r4, #8]
 8105c72:	9301      	str	r3, [sp, #4]
 8105c74:	4620      	mov	r0, r4
 8105c76:	f000 fc2f 	bl	81064d8 <_vfiprintf_r>
 8105c7a:	b002      	add	sp, #8
 8105c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105c80:	b004      	add	sp, #16
 8105c82:	4770      	bx	lr
 8105c84:	10000010 	.word	0x10000010

08105c88 <_puts_r>:
 8105c88:	b570      	push	{r4, r5, r6, lr}
 8105c8a:	460e      	mov	r6, r1
 8105c8c:	4605      	mov	r5, r0
 8105c8e:	b118      	cbz	r0, 8105c98 <_puts_r+0x10>
 8105c90:	6983      	ldr	r3, [r0, #24]
 8105c92:	b90b      	cbnz	r3, 8105c98 <_puts_r+0x10>
 8105c94:	f000 fa48 	bl	8106128 <__sinit>
 8105c98:	69ab      	ldr	r3, [r5, #24]
 8105c9a:	68ac      	ldr	r4, [r5, #8]
 8105c9c:	b913      	cbnz	r3, 8105ca4 <_puts_r+0x1c>
 8105c9e:	4628      	mov	r0, r5
 8105ca0:	f000 fa42 	bl	8106128 <__sinit>
 8105ca4:	4b2c      	ldr	r3, [pc, #176]	; (8105d58 <_puts_r+0xd0>)
 8105ca6:	429c      	cmp	r4, r3
 8105ca8:	d120      	bne.n	8105cec <_puts_r+0x64>
 8105caa:	686c      	ldr	r4, [r5, #4]
 8105cac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105cae:	07db      	lsls	r3, r3, #31
 8105cb0:	d405      	bmi.n	8105cbe <_puts_r+0x36>
 8105cb2:	89a3      	ldrh	r3, [r4, #12]
 8105cb4:	0598      	lsls	r0, r3, #22
 8105cb6:	d402      	bmi.n	8105cbe <_puts_r+0x36>
 8105cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105cba:	f000 fad3 	bl	8106264 <__retarget_lock_acquire_recursive>
 8105cbe:	89a3      	ldrh	r3, [r4, #12]
 8105cc0:	0719      	lsls	r1, r3, #28
 8105cc2:	d51d      	bpl.n	8105d00 <_puts_r+0x78>
 8105cc4:	6923      	ldr	r3, [r4, #16]
 8105cc6:	b1db      	cbz	r3, 8105d00 <_puts_r+0x78>
 8105cc8:	3e01      	subs	r6, #1
 8105cca:	68a3      	ldr	r3, [r4, #8]
 8105ccc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8105cd0:	3b01      	subs	r3, #1
 8105cd2:	60a3      	str	r3, [r4, #8]
 8105cd4:	bb39      	cbnz	r1, 8105d26 <_puts_r+0x9e>
 8105cd6:	2b00      	cmp	r3, #0
 8105cd8:	da38      	bge.n	8105d4c <_puts_r+0xc4>
 8105cda:	4622      	mov	r2, r4
 8105cdc:	210a      	movs	r1, #10
 8105cde:	4628      	mov	r0, r5
 8105ce0:	f000 f848 	bl	8105d74 <__swbuf_r>
 8105ce4:	3001      	adds	r0, #1
 8105ce6:	d011      	beq.n	8105d0c <_puts_r+0x84>
 8105ce8:	250a      	movs	r5, #10
 8105cea:	e011      	b.n	8105d10 <_puts_r+0x88>
 8105cec:	4b1b      	ldr	r3, [pc, #108]	; (8105d5c <_puts_r+0xd4>)
 8105cee:	429c      	cmp	r4, r3
 8105cf0:	d101      	bne.n	8105cf6 <_puts_r+0x6e>
 8105cf2:	68ac      	ldr	r4, [r5, #8]
 8105cf4:	e7da      	b.n	8105cac <_puts_r+0x24>
 8105cf6:	4b1a      	ldr	r3, [pc, #104]	; (8105d60 <_puts_r+0xd8>)
 8105cf8:	429c      	cmp	r4, r3
 8105cfa:	bf08      	it	eq
 8105cfc:	68ec      	ldreq	r4, [r5, #12]
 8105cfe:	e7d5      	b.n	8105cac <_puts_r+0x24>
 8105d00:	4621      	mov	r1, r4
 8105d02:	4628      	mov	r0, r5
 8105d04:	f000 f888 	bl	8105e18 <__swsetup_r>
 8105d08:	2800      	cmp	r0, #0
 8105d0a:	d0dd      	beq.n	8105cc8 <_puts_r+0x40>
 8105d0c:	f04f 35ff 	mov.w	r5, #4294967295
 8105d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105d12:	07da      	lsls	r2, r3, #31
 8105d14:	d405      	bmi.n	8105d22 <_puts_r+0x9a>
 8105d16:	89a3      	ldrh	r3, [r4, #12]
 8105d18:	059b      	lsls	r3, r3, #22
 8105d1a:	d402      	bmi.n	8105d22 <_puts_r+0x9a>
 8105d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105d1e:	f000 faa2 	bl	8106266 <__retarget_lock_release_recursive>
 8105d22:	4628      	mov	r0, r5
 8105d24:	bd70      	pop	{r4, r5, r6, pc}
 8105d26:	2b00      	cmp	r3, #0
 8105d28:	da04      	bge.n	8105d34 <_puts_r+0xac>
 8105d2a:	69a2      	ldr	r2, [r4, #24]
 8105d2c:	429a      	cmp	r2, r3
 8105d2e:	dc06      	bgt.n	8105d3e <_puts_r+0xb6>
 8105d30:	290a      	cmp	r1, #10
 8105d32:	d004      	beq.n	8105d3e <_puts_r+0xb6>
 8105d34:	6823      	ldr	r3, [r4, #0]
 8105d36:	1c5a      	adds	r2, r3, #1
 8105d38:	6022      	str	r2, [r4, #0]
 8105d3a:	7019      	strb	r1, [r3, #0]
 8105d3c:	e7c5      	b.n	8105cca <_puts_r+0x42>
 8105d3e:	4622      	mov	r2, r4
 8105d40:	4628      	mov	r0, r5
 8105d42:	f000 f817 	bl	8105d74 <__swbuf_r>
 8105d46:	3001      	adds	r0, #1
 8105d48:	d1bf      	bne.n	8105cca <_puts_r+0x42>
 8105d4a:	e7df      	b.n	8105d0c <_puts_r+0x84>
 8105d4c:	6823      	ldr	r3, [r4, #0]
 8105d4e:	250a      	movs	r5, #10
 8105d50:	1c5a      	adds	r2, r3, #1
 8105d52:	6022      	str	r2, [r4, #0]
 8105d54:	701d      	strb	r5, [r3, #0]
 8105d56:	e7db      	b.n	8105d10 <_puts_r+0x88>
 8105d58:	08106d84 	.word	0x08106d84
 8105d5c:	08106da4 	.word	0x08106da4
 8105d60:	08106d64 	.word	0x08106d64

08105d64 <puts>:
 8105d64:	4b02      	ldr	r3, [pc, #8]	; (8105d70 <puts+0xc>)
 8105d66:	4601      	mov	r1, r0
 8105d68:	6818      	ldr	r0, [r3, #0]
 8105d6a:	f7ff bf8d 	b.w	8105c88 <_puts_r>
 8105d6e:	bf00      	nop
 8105d70:	10000010 	.word	0x10000010

08105d74 <__swbuf_r>:
 8105d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105d76:	460e      	mov	r6, r1
 8105d78:	4614      	mov	r4, r2
 8105d7a:	4605      	mov	r5, r0
 8105d7c:	b118      	cbz	r0, 8105d86 <__swbuf_r+0x12>
 8105d7e:	6983      	ldr	r3, [r0, #24]
 8105d80:	b90b      	cbnz	r3, 8105d86 <__swbuf_r+0x12>
 8105d82:	f000 f9d1 	bl	8106128 <__sinit>
 8105d86:	4b21      	ldr	r3, [pc, #132]	; (8105e0c <__swbuf_r+0x98>)
 8105d88:	429c      	cmp	r4, r3
 8105d8a:	d12b      	bne.n	8105de4 <__swbuf_r+0x70>
 8105d8c:	686c      	ldr	r4, [r5, #4]
 8105d8e:	69a3      	ldr	r3, [r4, #24]
 8105d90:	60a3      	str	r3, [r4, #8]
 8105d92:	89a3      	ldrh	r3, [r4, #12]
 8105d94:	071a      	lsls	r2, r3, #28
 8105d96:	d52f      	bpl.n	8105df8 <__swbuf_r+0x84>
 8105d98:	6923      	ldr	r3, [r4, #16]
 8105d9a:	b36b      	cbz	r3, 8105df8 <__swbuf_r+0x84>
 8105d9c:	6923      	ldr	r3, [r4, #16]
 8105d9e:	6820      	ldr	r0, [r4, #0]
 8105da0:	1ac0      	subs	r0, r0, r3
 8105da2:	6963      	ldr	r3, [r4, #20]
 8105da4:	b2f6      	uxtb	r6, r6
 8105da6:	4283      	cmp	r3, r0
 8105da8:	4637      	mov	r7, r6
 8105daa:	dc04      	bgt.n	8105db6 <__swbuf_r+0x42>
 8105dac:	4621      	mov	r1, r4
 8105dae:	4628      	mov	r0, r5
 8105db0:	f000 f926 	bl	8106000 <_fflush_r>
 8105db4:	bb30      	cbnz	r0, 8105e04 <__swbuf_r+0x90>
 8105db6:	68a3      	ldr	r3, [r4, #8]
 8105db8:	3b01      	subs	r3, #1
 8105dba:	60a3      	str	r3, [r4, #8]
 8105dbc:	6823      	ldr	r3, [r4, #0]
 8105dbe:	1c5a      	adds	r2, r3, #1
 8105dc0:	6022      	str	r2, [r4, #0]
 8105dc2:	701e      	strb	r6, [r3, #0]
 8105dc4:	6963      	ldr	r3, [r4, #20]
 8105dc6:	3001      	adds	r0, #1
 8105dc8:	4283      	cmp	r3, r0
 8105dca:	d004      	beq.n	8105dd6 <__swbuf_r+0x62>
 8105dcc:	89a3      	ldrh	r3, [r4, #12]
 8105dce:	07db      	lsls	r3, r3, #31
 8105dd0:	d506      	bpl.n	8105de0 <__swbuf_r+0x6c>
 8105dd2:	2e0a      	cmp	r6, #10
 8105dd4:	d104      	bne.n	8105de0 <__swbuf_r+0x6c>
 8105dd6:	4621      	mov	r1, r4
 8105dd8:	4628      	mov	r0, r5
 8105dda:	f000 f911 	bl	8106000 <_fflush_r>
 8105dde:	b988      	cbnz	r0, 8105e04 <__swbuf_r+0x90>
 8105de0:	4638      	mov	r0, r7
 8105de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8105de4:	4b0a      	ldr	r3, [pc, #40]	; (8105e10 <__swbuf_r+0x9c>)
 8105de6:	429c      	cmp	r4, r3
 8105de8:	d101      	bne.n	8105dee <__swbuf_r+0x7a>
 8105dea:	68ac      	ldr	r4, [r5, #8]
 8105dec:	e7cf      	b.n	8105d8e <__swbuf_r+0x1a>
 8105dee:	4b09      	ldr	r3, [pc, #36]	; (8105e14 <__swbuf_r+0xa0>)
 8105df0:	429c      	cmp	r4, r3
 8105df2:	bf08      	it	eq
 8105df4:	68ec      	ldreq	r4, [r5, #12]
 8105df6:	e7ca      	b.n	8105d8e <__swbuf_r+0x1a>
 8105df8:	4621      	mov	r1, r4
 8105dfa:	4628      	mov	r0, r5
 8105dfc:	f000 f80c 	bl	8105e18 <__swsetup_r>
 8105e00:	2800      	cmp	r0, #0
 8105e02:	d0cb      	beq.n	8105d9c <__swbuf_r+0x28>
 8105e04:	f04f 37ff 	mov.w	r7, #4294967295
 8105e08:	e7ea      	b.n	8105de0 <__swbuf_r+0x6c>
 8105e0a:	bf00      	nop
 8105e0c:	08106d84 	.word	0x08106d84
 8105e10:	08106da4 	.word	0x08106da4
 8105e14:	08106d64 	.word	0x08106d64

08105e18 <__swsetup_r>:
 8105e18:	4b32      	ldr	r3, [pc, #200]	; (8105ee4 <__swsetup_r+0xcc>)
 8105e1a:	b570      	push	{r4, r5, r6, lr}
 8105e1c:	681d      	ldr	r5, [r3, #0]
 8105e1e:	4606      	mov	r6, r0
 8105e20:	460c      	mov	r4, r1
 8105e22:	b125      	cbz	r5, 8105e2e <__swsetup_r+0x16>
 8105e24:	69ab      	ldr	r3, [r5, #24]
 8105e26:	b913      	cbnz	r3, 8105e2e <__swsetup_r+0x16>
 8105e28:	4628      	mov	r0, r5
 8105e2a:	f000 f97d 	bl	8106128 <__sinit>
 8105e2e:	4b2e      	ldr	r3, [pc, #184]	; (8105ee8 <__swsetup_r+0xd0>)
 8105e30:	429c      	cmp	r4, r3
 8105e32:	d10f      	bne.n	8105e54 <__swsetup_r+0x3c>
 8105e34:	686c      	ldr	r4, [r5, #4]
 8105e36:	89a3      	ldrh	r3, [r4, #12]
 8105e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105e3c:	0719      	lsls	r1, r3, #28
 8105e3e:	d42c      	bmi.n	8105e9a <__swsetup_r+0x82>
 8105e40:	06dd      	lsls	r5, r3, #27
 8105e42:	d411      	bmi.n	8105e68 <__swsetup_r+0x50>
 8105e44:	2309      	movs	r3, #9
 8105e46:	6033      	str	r3, [r6, #0]
 8105e48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8105e4c:	81a3      	strh	r3, [r4, #12]
 8105e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8105e52:	e03e      	b.n	8105ed2 <__swsetup_r+0xba>
 8105e54:	4b25      	ldr	r3, [pc, #148]	; (8105eec <__swsetup_r+0xd4>)
 8105e56:	429c      	cmp	r4, r3
 8105e58:	d101      	bne.n	8105e5e <__swsetup_r+0x46>
 8105e5a:	68ac      	ldr	r4, [r5, #8]
 8105e5c:	e7eb      	b.n	8105e36 <__swsetup_r+0x1e>
 8105e5e:	4b24      	ldr	r3, [pc, #144]	; (8105ef0 <__swsetup_r+0xd8>)
 8105e60:	429c      	cmp	r4, r3
 8105e62:	bf08      	it	eq
 8105e64:	68ec      	ldreq	r4, [r5, #12]
 8105e66:	e7e6      	b.n	8105e36 <__swsetup_r+0x1e>
 8105e68:	0758      	lsls	r0, r3, #29
 8105e6a:	d512      	bpl.n	8105e92 <__swsetup_r+0x7a>
 8105e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105e6e:	b141      	cbz	r1, 8105e82 <__swsetup_r+0x6a>
 8105e70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105e74:	4299      	cmp	r1, r3
 8105e76:	d002      	beq.n	8105e7e <__swsetup_r+0x66>
 8105e78:	4630      	mov	r0, r6
 8105e7a:	f000 fa59 	bl	8106330 <_free_r>
 8105e7e:	2300      	movs	r3, #0
 8105e80:	6363      	str	r3, [r4, #52]	; 0x34
 8105e82:	89a3      	ldrh	r3, [r4, #12]
 8105e84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8105e88:	81a3      	strh	r3, [r4, #12]
 8105e8a:	2300      	movs	r3, #0
 8105e8c:	6063      	str	r3, [r4, #4]
 8105e8e:	6923      	ldr	r3, [r4, #16]
 8105e90:	6023      	str	r3, [r4, #0]
 8105e92:	89a3      	ldrh	r3, [r4, #12]
 8105e94:	f043 0308 	orr.w	r3, r3, #8
 8105e98:	81a3      	strh	r3, [r4, #12]
 8105e9a:	6923      	ldr	r3, [r4, #16]
 8105e9c:	b94b      	cbnz	r3, 8105eb2 <__swsetup_r+0x9a>
 8105e9e:	89a3      	ldrh	r3, [r4, #12]
 8105ea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8105ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105ea8:	d003      	beq.n	8105eb2 <__swsetup_r+0x9a>
 8105eaa:	4621      	mov	r1, r4
 8105eac:	4630      	mov	r0, r6
 8105eae:	f000 f9ff 	bl	81062b0 <__smakebuf_r>
 8105eb2:	89a0      	ldrh	r0, [r4, #12]
 8105eb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105eb8:	f010 0301 	ands.w	r3, r0, #1
 8105ebc:	d00a      	beq.n	8105ed4 <__swsetup_r+0xbc>
 8105ebe:	2300      	movs	r3, #0
 8105ec0:	60a3      	str	r3, [r4, #8]
 8105ec2:	6963      	ldr	r3, [r4, #20]
 8105ec4:	425b      	negs	r3, r3
 8105ec6:	61a3      	str	r3, [r4, #24]
 8105ec8:	6923      	ldr	r3, [r4, #16]
 8105eca:	b943      	cbnz	r3, 8105ede <__swsetup_r+0xc6>
 8105ecc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8105ed0:	d1ba      	bne.n	8105e48 <__swsetup_r+0x30>
 8105ed2:	bd70      	pop	{r4, r5, r6, pc}
 8105ed4:	0781      	lsls	r1, r0, #30
 8105ed6:	bf58      	it	pl
 8105ed8:	6963      	ldrpl	r3, [r4, #20]
 8105eda:	60a3      	str	r3, [r4, #8]
 8105edc:	e7f4      	b.n	8105ec8 <__swsetup_r+0xb0>
 8105ede:	2000      	movs	r0, #0
 8105ee0:	e7f7      	b.n	8105ed2 <__swsetup_r+0xba>
 8105ee2:	bf00      	nop
 8105ee4:	10000010 	.word	0x10000010
 8105ee8:	08106d84 	.word	0x08106d84
 8105eec:	08106da4 	.word	0x08106da4
 8105ef0:	08106d64 	.word	0x08106d64

08105ef4 <__sflush_r>:
 8105ef4:	898a      	ldrh	r2, [r1, #12]
 8105ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105efa:	4605      	mov	r5, r0
 8105efc:	0710      	lsls	r0, r2, #28
 8105efe:	460c      	mov	r4, r1
 8105f00:	d458      	bmi.n	8105fb4 <__sflush_r+0xc0>
 8105f02:	684b      	ldr	r3, [r1, #4]
 8105f04:	2b00      	cmp	r3, #0
 8105f06:	dc05      	bgt.n	8105f14 <__sflush_r+0x20>
 8105f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8105f0a:	2b00      	cmp	r3, #0
 8105f0c:	dc02      	bgt.n	8105f14 <__sflush_r+0x20>
 8105f0e:	2000      	movs	r0, #0
 8105f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8105f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105f16:	2e00      	cmp	r6, #0
 8105f18:	d0f9      	beq.n	8105f0e <__sflush_r+0x1a>
 8105f1a:	2300      	movs	r3, #0
 8105f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8105f20:	682f      	ldr	r7, [r5, #0]
 8105f22:	602b      	str	r3, [r5, #0]
 8105f24:	d032      	beq.n	8105f8c <__sflush_r+0x98>
 8105f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8105f28:	89a3      	ldrh	r3, [r4, #12]
 8105f2a:	075a      	lsls	r2, r3, #29
 8105f2c:	d505      	bpl.n	8105f3a <__sflush_r+0x46>
 8105f2e:	6863      	ldr	r3, [r4, #4]
 8105f30:	1ac0      	subs	r0, r0, r3
 8105f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105f34:	b10b      	cbz	r3, 8105f3a <__sflush_r+0x46>
 8105f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8105f38:	1ac0      	subs	r0, r0, r3
 8105f3a:	2300      	movs	r3, #0
 8105f3c:	4602      	mov	r2, r0
 8105f3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105f40:	6a21      	ldr	r1, [r4, #32]
 8105f42:	4628      	mov	r0, r5
 8105f44:	47b0      	blx	r6
 8105f46:	1c43      	adds	r3, r0, #1
 8105f48:	89a3      	ldrh	r3, [r4, #12]
 8105f4a:	d106      	bne.n	8105f5a <__sflush_r+0x66>
 8105f4c:	6829      	ldr	r1, [r5, #0]
 8105f4e:	291d      	cmp	r1, #29
 8105f50:	d82c      	bhi.n	8105fac <__sflush_r+0xb8>
 8105f52:	4a2a      	ldr	r2, [pc, #168]	; (8105ffc <__sflush_r+0x108>)
 8105f54:	40ca      	lsrs	r2, r1
 8105f56:	07d6      	lsls	r6, r2, #31
 8105f58:	d528      	bpl.n	8105fac <__sflush_r+0xb8>
 8105f5a:	2200      	movs	r2, #0
 8105f5c:	6062      	str	r2, [r4, #4]
 8105f5e:	04d9      	lsls	r1, r3, #19
 8105f60:	6922      	ldr	r2, [r4, #16]
 8105f62:	6022      	str	r2, [r4, #0]
 8105f64:	d504      	bpl.n	8105f70 <__sflush_r+0x7c>
 8105f66:	1c42      	adds	r2, r0, #1
 8105f68:	d101      	bne.n	8105f6e <__sflush_r+0x7a>
 8105f6a:	682b      	ldr	r3, [r5, #0]
 8105f6c:	b903      	cbnz	r3, 8105f70 <__sflush_r+0x7c>
 8105f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8105f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105f72:	602f      	str	r7, [r5, #0]
 8105f74:	2900      	cmp	r1, #0
 8105f76:	d0ca      	beq.n	8105f0e <__sflush_r+0x1a>
 8105f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105f7c:	4299      	cmp	r1, r3
 8105f7e:	d002      	beq.n	8105f86 <__sflush_r+0x92>
 8105f80:	4628      	mov	r0, r5
 8105f82:	f000 f9d5 	bl	8106330 <_free_r>
 8105f86:	2000      	movs	r0, #0
 8105f88:	6360      	str	r0, [r4, #52]	; 0x34
 8105f8a:	e7c1      	b.n	8105f10 <__sflush_r+0x1c>
 8105f8c:	6a21      	ldr	r1, [r4, #32]
 8105f8e:	2301      	movs	r3, #1
 8105f90:	4628      	mov	r0, r5
 8105f92:	47b0      	blx	r6
 8105f94:	1c41      	adds	r1, r0, #1
 8105f96:	d1c7      	bne.n	8105f28 <__sflush_r+0x34>
 8105f98:	682b      	ldr	r3, [r5, #0]
 8105f9a:	2b00      	cmp	r3, #0
 8105f9c:	d0c4      	beq.n	8105f28 <__sflush_r+0x34>
 8105f9e:	2b1d      	cmp	r3, #29
 8105fa0:	d001      	beq.n	8105fa6 <__sflush_r+0xb2>
 8105fa2:	2b16      	cmp	r3, #22
 8105fa4:	d101      	bne.n	8105faa <__sflush_r+0xb6>
 8105fa6:	602f      	str	r7, [r5, #0]
 8105fa8:	e7b1      	b.n	8105f0e <__sflush_r+0x1a>
 8105faa:	89a3      	ldrh	r3, [r4, #12]
 8105fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105fb0:	81a3      	strh	r3, [r4, #12]
 8105fb2:	e7ad      	b.n	8105f10 <__sflush_r+0x1c>
 8105fb4:	690f      	ldr	r7, [r1, #16]
 8105fb6:	2f00      	cmp	r7, #0
 8105fb8:	d0a9      	beq.n	8105f0e <__sflush_r+0x1a>
 8105fba:	0793      	lsls	r3, r2, #30
 8105fbc:	680e      	ldr	r6, [r1, #0]
 8105fbe:	bf08      	it	eq
 8105fc0:	694b      	ldreq	r3, [r1, #20]
 8105fc2:	600f      	str	r7, [r1, #0]
 8105fc4:	bf18      	it	ne
 8105fc6:	2300      	movne	r3, #0
 8105fc8:	eba6 0807 	sub.w	r8, r6, r7
 8105fcc:	608b      	str	r3, [r1, #8]
 8105fce:	f1b8 0f00 	cmp.w	r8, #0
 8105fd2:	dd9c      	ble.n	8105f0e <__sflush_r+0x1a>
 8105fd4:	6a21      	ldr	r1, [r4, #32]
 8105fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8105fd8:	4643      	mov	r3, r8
 8105fda:	463a      	mov	r2, r7
 8105fdc:	4628      	mov	r0, r5
 8105fde:	47b0      	blx	r6
 8105fe0:	2800      	cmp	r0, #0
 8105fe2:	dc06      	bgt.n	8105ff2 <__sflush_r+0xfe>
 8105fe4:	89a3      	ldrh	r3, [r4, #12]
 8105fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105fea:	81a3      	strh	r3, [r4, #12]
 8105fec:	f04f 30ff 	mov.w	r0, #4294967295
 8105ff0:	e78e      	b.n	8105f10 <__sflush_r+0x1c>
 8105ff2:	4407      	add	r7, r0
 8105ff4:	eba8 0800 	sub.w	r8, r8, r0
 8105ff8:	e7e9      	b.n	8105fce <__sflush_r+0xda>
 8105ffa:	bf00      	nop
 8105ffc:	20400001 	.word	0x20400001

08106000 <_fflush_r>:
 8106000:	b538      	push	{r3, r4, r5, lr}
 8106002:	690b      	ldr	r3, [r1, #16]
 8106004:	4605      	mov	r5, r0
 8106006:	460c      	mov	r4, r1
 8106008:	b913      	cbnz	r3, 8106010 <_fflush_r+0x10>
 810600a:	2500      	movs	r5, #0
 810600c:	4628      	mov	r0, r5
 810600e:	bd38      	pop	{r3, r4, r5, pc}
 8106010:	b118      	cbz	r0, 810601a <_fflush_r+0x1a>
 8106012:	6983      	ldr	r3, [r0, #24]
 8106014:	b90b      	cbnz	r3, 810601a <_fflush_r+0x1a>
 8106016:	f000 f887 	bl	8106128 <__sinit>
 810601a:	4b14      	ldr	r3, [pc, #80]	; (810606c <_fflush_r+0x6c>)
 810601c:	429c      	cmp	r4, r3
 810601e:	d11b      	bne.n	8106058 <_fflush_r+0x58>
 8106020:	686c      	ldr	r4, [r5, #4]
 8106022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8106026:	2b00      	cmp	r3, #0
 8106028:	d0ef      	beq.n	810600a <_fflush_r+0xa>
 810602a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810602c:	07d0      	lsls	r0, r2, #31
 810602e:	d404      	bmi.n	810603a <_fflush_r+0x3a>
 8106030:	0599      	lsls	r1, r3, #22
 8106032:	d402      	bmi.n	810603a <_fflush_r+0x3a>
 8106034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106036:	f000 f915 	bl	8106264 <__retarget_lock_acquire_recursive>
 810603a:	4628      	mov	r0, r5
 810603c:	4621      	mov	r1, r4
 810603e:	f7ff ff59 	bl	8105ef4 <__sflush_r>
 8106042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106044:	07da      	lsls	r2, r3, #31
 8106046:	4605      	mov	r5, r0
 8106048:	d4e0      	bmi.n	810600c <_fflush_r+0xc>
 810604a:	89a3      	ldrh	r3, [r4, #12]
 810604c:	059b      	lsls	r3, r3, #22
 810604e:	d4dd      	bmi.n	810600c <_fflush_r+0xc>
 8106050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106052:	f000 f908 	bl	8106266 <__retarget_lock_release_recursive>
 8106056:	e7d9      	b.n	810600c <_fflush_r+0xc>
 8106058:	4b05      	ldr	r3, [pc, #20]	; (8106070 <_fflush_r+0x70>)
 810605a:	429c      	cmp	r4, r3
 810605c:	d101      	bne.n	8106062 <_fflush_r+0x62>
 810605e:	68ac      	ldr	r4, [r5, #8]
 8106060:	e7df      	b.n	8106022 <_fflush_r+0x22>
 8106062:	4b04      	ldr	r3, [pc, #16]	; (8106074 <_fflush_r+0x74>)
 8106064:	429c      	cmp	r4, r3
 8106066:	bf08      	it	eq
 8106068:	68ec      	ldreq	r4, [r5, #12]
 810606a:	e7da      	b.n	8106022 <_fflush_r+0x22>
 810606c:	08106d84 	.word	0x08106d84
 8106070:	08106da4 	.word	0x08106da4
 8106074:	08106d64 	.word	0x08106d64

08106078 <std>:
 8106078:	2300      	movs	r3, #0
 810607a:	b510      	push	{r4, lr}
 810607c:	4604      	mov	r4, r0
 810607e:	e9c0 3300 	strd	r3, r3, [r0]
 8106082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8106086:	6083      	str	r3, [r0, #8]
 8106088:	8181      	strh	r1, [r0, #12]
 810608a:	6643      	str	r3, [r0, #100]	; 0x64
 810608c:	81c2      	strh	r2, [r0, #14]
 810608e:	6183      	str	r3, [r0, #24]
 8106090:	4619      	mov	r1, r3
 8106092:	2208      	movs	r2, #8
 8106094:	305c      	adds	r0, #92	; 0x5c
 8106096:	f7ff fdd7 	bl	8105c48 <memset>
 810609a:	4b05      	ldr	r3, [pc, #20]	; (81060b0 <std+0x38>)
 810609c:	6263      	str	r3, [r4, #36]	; 0x24
 810609e:	4b05      	ldr	r3, [pc, #20]	; (81060b4 <std+0x3c>)
 81060a0:	62a3      	str	r3, [r4, #40]	; 0x28
 81060a2:	4b05      	ldr	r3, [pc, #20]	; (81060b8 <std+0x40>)
 81060a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 81060a6:	4b05      	ldr	r3, [pc, #20]	; (81060bc <std+0x44>)
 81060a8:	6224      	str	r4, [r4, #32]
 81060aa:	6323      	str	r3, [r4, #48]	; 0x30
 81060ac:	bd10      	pop	{r4, pc}
 81060ae:	bf00      	nop
 81060b0:	08106a81 	.word	0x08106a81
 81060b4:	08106aa3 	.word	0x08106aa3
 81060b8:	08106adb 	.word	0x08106adb
 81060bc:	08106aff 	.word	0x08106aff

081060c0 <_cleanup_r>:
 81060c0:	4901      	ldr	r1, [pc, #4]	; (81060c8 <_cleanup_r+0x8>)
 81060c2:	f000 b8af 	b.w	8106224 <_fwalk_reent>
 81060c6:	bf00      	nop
 81060c8:	08106001 	.word	0x08106001

081060cc <__sfmoreglue>:
 81060cc:	b570      	push	{r4, r5, r6, lr}
 81060ce:	1e4a      	subs	r2, r1, #1
 81060d0:	2568      	movs	r5, #104	; 0x68
 81060d2:	4355      	muls	r5, r2
 81060d4:	460e      	mov	r6, r1
 81060d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 81060da:	f000 f979 	bl	81063d0 <_malloc_r>
 81060de:	4604      	mov	r4, r0
 81060e0:	b140      	cbz	r0, 81060f4 <__sfmoreglue+0x28>
 81060e2:	2100      	movs	r1, #0
 81060e4:	e9c0 1600 	strd	r1, r6, [r0]
 81060e8:	300c      	adds	r0, #12
 81060ea:	60a0      	str	r0, [r4, #8]
 81060ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81060f0:	f7ff fdaa 	bl	8105c48 <memset>
 81060f4:	4620      	mov	r0, r4
 81060f6:	bd70      	pop	{r4, r5, r6, pc}

081060f8 <__sfp_lock_acquire>:
 81060f8:	4801      	ldr	r0, [pc, #4]	; (8106100 <__sfp_lock_acquire+0x8>)
 81060fa:	f000 b8b3 	b.w	8106264 <__retarget_lock_acquire_recursive>
 81060fe:	bf00      	nop
 8106100:	10000284 	.word	0x10000284

08106104 <__sfp_lock_release>:
 8106104:	4801      	ldr	r0, [pc, #4]	; (810610c <__sfp_lock_release+0x8>)
 8106106:	f000 b8ae 	b.w	8106266 <__retarget_lock_release_recursive>
 810610a:	bf00      	nop
 810610c:	10000284 	.word	0x10000284

08106110 <__sinit_lock_acquire>:
 8106110:	4801      	ldr	r0, [pc, #4]	; (8106118 <__sinit_lock_acquire+0x8>)
 8106112:	f000 b8a7 	b.w	8106264 <__retarget_lock_acquire_recursive>
 8106116:	bf00      	nop
 8106118:	1000027f 	.word	0x1000027f

0810611c <__sinit_lock_release>:
 810611c:	4801      	ldr	r0, [pc, #4]	; (8106124 <__sinit_lock_release+0x8>)
 810611e:	f000 b8a2 	b.w	8106266 <__retarget_lock_release_recursive>
 8106122:	bf00      	nop
 8106124:	1000027f 	.word	0x1000027f

08106128 <__sinit>:
 8106128:	b510      	push	{r4, lr}
 810612a:	4604      	mov	r4, r0
 810612c:	f7ff fff0 	bl	8106110 <__sinit_lock_acquire>
 8106130:	69a3      	ldr	r3, [r4, #24]
 8106132:	b11b      	cbz	r3, 810613c <__sinit+0x14>
 8106134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106138:	f7ff bff0 	b.w	810611c <__sinit_lock_release>
 810613c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8106140:	6523      	str	r3, [r4, #80]	; 0x50
 8106142:	4b13      	ldr	r3, [pc, #76]	; (8106190 <__sinit+0x68>)
 8106144:	4a13      	ldr	r2, [pc, #76]	; (8106194 <__sinit+0x6c>)
 8106146:	681b      	ldr	r3, [r3, #0]
 8106148:	62a2      	str	r2, [r4, #40]	; 0x28
 810614a:	42a3      	cmp	r3, r4
 810614c:	bf04      	itt	eq
 810614e:	2301      	moveq	r3, #1
 8106150:	61a3      	streq	r3, [r4, #24]
 8106152:	4620      	mov	r0, r4
 8106154:	f000 f820 	bl	8106198 <__sfp>
 8106158:	6060      	str	r0, [r4, #4]
 810615a:	4620      	mov	r0, r4
 810615c:	f000 f81c 	bl	8106198 <__sfp>
 8106160:	60a0      	str	r0, [r4, #8]
 8106162:	4620      	mov	r0, r4
 8106164:	f000 f818 	bl	8106198 <__sfp>
 8106168:	2200      	movs	r2, #0
 810616a:	60e0      	str	r0, [r4, #12]
 810616c:	2104      	movs	r1, #4
 810616e:	6860      	ldr	r0, [r4, #4]
 8106170:	f7ff ff82 	bl	8106078 <std>
 8106174:	68a0      	ldr	r0, [r4, #8]
 8106176:	2201      	movs	r2, #1
 8106178:	2109      	movs	r1, #9
 810617a:	f7ff ff7d 	bl	8106078 <std>
 810617e:	68e0      	ldr	r0, [r4, #12]
 8106180:	2202      	movs	r2, #2
 8106182:	2112      	movs	r1, #18
 8106184:	f7ff ff78 	bl	8106078 <std>
 8106188:	2301      	movs	r3, #1
 810618a:	61a3      	str	r3, [r4, #24]
 810618c:	e7d2      	b.n	8106134 <__sinit+0xc>
 810618e:	bf00      	nop
 8106190:	08106d60 	.word	0x08106d60
 8106194:	081060c1 	.word	0x081060c1

08106198 <__sfp>:
 8106198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810619a:	4607      	mov	r7, r0
 810619c:	f7ff ffac 	bl	81060f8 <__sfp_lock_acquire>
 81061a0:	4b1e      	ldr	r3, [pc, #120]	; (810621c <__sfp+0x84>)
 81061a2:	681e      	ldr	r6, [r3, #0]
 81061a4:	69b3      	ldr	r3, [r6, #24]
 81061a6:	b913      	cbnz	r3, 81061ae <__sfp+0x16>
 81061a8:	4630      	mov	r0, r6
 81061aa:	f7ff ffbd 	bl	8106128 <__sinit>
 81061ae:	3648      	adds	r6, #72	; 0x48
 81061b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 81061b4:	3b01      	subs	r3, #1
 81061b6:	d503      	bpl.n	81061c0 <__sfp+0x28>
 81061b8:	6833      	ldr	r3, [r6, #0]
 81061ba:	b30b      	cbz	r3, 8106200 <__sfp+0x68>
 81061bc:	6836      	ldr	r6, [r6, #0]
 81061be:	e7f7      	b.n	81061b0 <__sfp+0x18>
 81061c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 81061c4:	b9d5      	cbnz	r5, 81061fc <__sfp+0x64>
 81061c6:	4b16      	ldr	r3, [pc, #88]	; (8106220 <__sfp+0x88>)
 81061c8:	60e3      	str	r3, [r4, #12]
 81061ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 81061ce:	6665      	str	r5, [r4, #100]	; 0x64
 81061d0:	f000 f847 	bl	8106262 <__retarget_lock_init_recursive>
 81061d4:	f7ff ff96 	bl	8106104 <__sfp_lock_release>
 81061d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 81061dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 81061e0:	6025      	str	r5, [r4, #0]
 81061e2:	61a5      	str	r5, [r4, #24]
 81061e4:	2208      	movs	r2, #8
 81061e6:	4629      	mov	r1, r5
 81061e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 81061ec:	f7ff fd2c 	bl	8105c48 <memset>
 81061f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 81061f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 81061f8:	4620      	mov	r0, r4
 81061fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81061fc:	3468      	adds	r4, #104	; 0x68
 81061fe:	e7d9      	b.n	81061b4 <__sfp+0x1c>
 8106200:	2104      	movs	r1, #4
 8106202:	4638      	mov	r0, r7
 8106204:	f7ff ff62 	bl	81060cc <__sfmoreglue>
 8106208:	4604      	mov	r4, r0
 810620a:	6030      	str	r0, [r6, #0]
 810620c:	2800      	cmp	r0, #0
 810620e:	d1d5      	bne.n	81061bc <__sfp+0x24>
 8106210:	f7ff ff78 	bl	8106104 <__sfp_lock_release>
 8106214:	230c      	movs	r3, #12
 8106216:	603b      	str	r3, [r7, #0]
 8106218:	e7ee      	b.n	81061f8 <__sfp+0x60>
 810621a:	bf00      	nop
 810621c:	08106d60 	.word	0x08106d60
 8106220:	ffff0001 	.word	0xffff0001

08106224 <_fwalk_reent>:
 8106224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106228:	4606      	mov	r6, r0
 810622a:	4688      	mov	r8, r1
 810622c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8106230:	2700      	movs	r7, #0
 8106232:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8106236:	f1b9 0901 	subs.w	r9, r9, #1
 810623a:	d505      	bpl.n	8106248 <_fwalk_reent+0x24>
 810623c:	6824      	ldr	r4, [r4, #0]
 810623e:	2c00      	cmp	r4, #0
 8106240:	d1f7      	bne.n	8106232 <_fwalk_reent+0xe>
 8106242:	4638      	mov	r0, r7
 8106244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106248:	89ab      	ldrh	r3, [r5, #12]
 810624a:	2b01      	cmp	r3, #1
 810624c:	d907      	bls.n	810625e <_fwalk_reent+0x3a>
 810624e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8106252:	3301      	adds	r3, #1
 8106254:	d003      	beq.n	810625e <_fwalk_reent+0x3a>
 8106256:	4629      	mov	r1, r5
 8106258:	4630      	mov	r0, r6
 810625a:	47c0      	blx	r8
 810625c:	4307      	orrs	r7, r0
 810625e:	3568      	adds	r5, #104	; 0x68
 8106260:	e7e9      	b.n	8106236 <_fwalk_reent+0x12>

08106262 <__retarget_lock_init_recursive>:
 8106262:	4770      	bx	lr

08106264 <__retarget_lock_acquire_recursive>:
 8106264:	4770      	bx	lr

08106266 <__retarget_lock_release_recursive>:
 8106266:	4770      	bx	lr

08106268 <__swhatbuf_r>:
 8106268:	b570      	push	{r4, r5, r6, lr}
 810626a:	460e      	mov	r6, r1
 810626c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106270:	2900      	cmp	r1, #0
 8106272:	b096      	sub	sp, #88	; 0x58
 8106274:	4614      	mov	r4, r2
 8106276:	461d      	mov	r5, r3
 8106278:	da07      	bge.n	810628a <__swhatbuf_r+0x22>
 810627a:	2300      	movs	r3, #0
 810627c:	602b      	str	r3, [r5, #0]
 810627e:	89b3      	ldrh	r3, [r6, #12]
 8106280:	061a      	lsls	r2, r3, #24
 8106282:	d410      	bmi.n	81062a6 <__swhatbuf_r+0x3e>
 8106284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8106288:	e00e      	b.n	81062a8 <__swhatbuf_r+0x40>
 810628a:	466a      	mov	r2, sp
 810628c:	f000 fc5e 	bl	8106b4c <_fstat_r>
 8106290:	2800      	cmp	r0, #0
 8106292:	dbf2      	blt.n	810627a <__swhatbuf_r+0x12>
 8106294:	9a01      	ldr	r2, [sp, #4]
 8106296:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810629a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810629e:	425a      	negs	r2, r3
 81062a0:	415a      	adcs	r2, r3
 81062a2:	602a      	str	r2, [r5, #0]
 81062a4:	e7ee      	b.n	8106284 <__swhatbuf_r+0x1c>
 81062a6:	2340      	movs	r3, #64	; 0x40
 81062a8:	2000      	movs	r0, #0
 81062aa:	6023      	str	r3, [r4, #0]
 81062ac:	b016      	add	sp, #88	; 0x58
 81062ae:	bd70      	pop	{r4, r5, r6, pc}

081062b0 <__smakebuf_r>:
 81062b0:	898b      	ldrh	r3, [r1, #12]
 81062b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 81062b4:	079d      	lsls	r5, r3, #30
 81062b6:	4606      	mov	r6, r0
 81062b8:	460c      	mov	r4, r1
 81062ba:	d507      	bpl.n	81062cc <__smakebuf_r+0x1c>
 81062bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 81062c0:	6023      	str	r3, [r4, #0]
 81062c2:	6123      	str	r3, [r4, #16]
 81062c4:	2301      	movs	r3, #1
 81062c6:	6163      	str	r3, [r4, #20]
 81062c8:	b002      	add	sp, #8
 81062ca:	bd70      	pop	{r4, r5, r6, pc}
 81062cc:	ab01      	add	r3, sp, #4
 81062ce:	466a      	mov	r2, sp
 81062d0:	f7ff ffca 	bl	8106268 <__swhatbuf_r>
 81062d4:	9900      	ldr	r1, [sp, #0]
 81062d6:	4605      	mov	r5, r0
 81062d8:	4630      	mov	r0, r6
 81062da:	f000 f879 	bl	81063d0 <_malloc_r>
 81062de:	b948      	cbnz	r0, 81062f4 <__smakebuf_r+0x44>
 81062e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81062e4:	059a      	lsls	r2, r3, #22
 81062e6:	d4ef      	bmi.n	81062c8 <__smakebuf_r+0x18>
 81062e8:	f023 0303 	bic.w	r3, r3, #3
 81062ec:	f043 0302 	orr.w	r3, r3, #2
 81062f0:	81a3      	strh	r3, [r4, #12]
 81062f2:	e7e3      	b.n	81062bc <__smakebuf_r+0xc>
 81062f4:	4b0d      	ldr	r3, [pc, #52]	; (810632c <__smakebuf_r+0x7c>)
 81062f6:	62b3      	str	r3, [r6, #40]	; 0x28
 81062f8:	89a3      	ldrh	r3, [r4, #12]
 81062fa:	6020      	str	r0, [r4, #0]
 81062fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106300:	81a3      	strh	r3, [r4, #12]
 8106302:	9b00      	ldr	r3, [sp, #0]
 8106304:	6163      	str	r3, [r4, #20]
 8106306:	9b01      	ldr	r3, [sp, #4]
 8106308:	6120      	str	r0, [r4, #16]
 810630a:	b15b      	cbz	r3, 8106324 <__smakebuf_r+0x74>
 810630c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106310:	4630      	mov	r0, r6
 8106312:	f000 fc2d 	bl	8106b70 <_isatty_r>
 8106316:	b128      	cbz	r0, 8106324 <__smakebuf_r+0x74>
 8106318:	89a3      	ldrh	r3, [r4, #12]
 810631a:	f023 0303 	bic.w	r3, r3, #3
 810631e:	f043 0301 	orr.w	r3, r3, #1
 8106322:	81a3      	strh	r3, [r4, #12]
 8106324:	89a0      	ldrh	r0, [r4, #12]
 8106326:	4305      	orrs	r5, r0
 8106328:	81a5      	strh	r5, [r4, #12]
 810632a:	e7cd      	b.n	81062c8 <__smakebuf_r+0x18>
 810632c:	081060c1 	.word	0x081060c1

08106330 <_free_r>:
 8106330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8106332:	2900      	cmp	r1, #0
 8106334:	d048      	beq.n	81063c8 <_free_r+0x98>
 8106336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810633a:	9001      	str	r0, [sp, #4]
 810633c:	2b00      	cmp	r3, #0
 810633e:	f1a1 0404 	sub.w	r4, r1, #4
 8106342:	bfb8      	it	lt
 8106344:	18e4      	addlt	r4, r4, r3
 8106346:	f000 fc35 	bl	8106bb4 <__malloc_lock>
 810634a:	4a20      	ldr	r2, [pc, #128]	; (81063cc <_free_r+0x9c>)
 810634c:	9801      	ldr	r0, [sp, #4]
 810634e:	6813      	ldr	r3, [r2, #0]
 8106350:	4615      	mov	r5, r2
 8106352:	b933      	cbnz	r3, 8106362 <_free_r+0x32>
 8106354:	6063      	str	r3, [r4, #4]
 8106356:	6014      	str	r4, [r2, #0]
 8106358:	b003      	add	sp, #12
 810635a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810635e:	f000 bc2f 	b.w	8106bc0 <__malloc_unlock>
 8106362:	42a3      	cmp	r3, r4
 8106364:	d90b      	bls.n	810637e <_free_r+0x4e>
 8106366:	6821      	ldr	r1, [r4, #0]
 8106368:	1862      	adds	r2, r4, r1
 810636a:	4293      	cmp	r3, r2
 810636c:	bf04      	itt	eq
 810636e:	681a      	ldreq	r2, [r3, #0]
 8106370:	685b      	ldreq	r3, [r3, #4]
 8106372:	6063      	str	r3, [r4, #4]
 8106374:	bf04      	itt	eq
 8106376:	1852      	addeq	r2, r2, r1
 8106378:	6022      	streq	r2, [r4, #0]
 810637a:	602c      	str	r4, [r5, #0]
 810637c:	e7ec      	b.n	8106358 <_free_r+0x28>
 810637e:	461a      	mov	r2, r3
 8106380:	685b      	ldr	r3, [r3, #4]
 8106382:	b10b      	cbz	r3, 8106388 <_free_r+0x58>
 8106384:	42a3      	cmp	r3, r4
 8106386:	d9fa      	bls.n	810637e <_free_r+0x4e>
 8106388:	6811      	ldr	r1, [r2, #0]
 810638a:	1855      	adds	r5, r2, r1
 810638c:	42a5      	cmp	r5, r4
 810638e:	d10b      	bne.n	81063a8 <_free_r+0x78>
 8106390:	6824      	ldr	r4, [r4, #0]
 8106392:	4421      	add	r1, r4
 8106394:	1854      	adds	r4, r2, r1
 8106396:	42a3      	cmp	r3, r4
 8106398:	6011      	str	r1, [r2, #0]
 810639a:	d1dd      	bne.n	8106358 <_free_r+0x28>
 810639c:	681c      	ldr	r4, [r3, #0]
 810639e:	685b      	ldr	r3, [r3, #4]
 81063a0:	6053      	str	r3, [r2, #4]
 81063a2:	4421      	add	r1, r4
 81063a4:	6011      	str	r1, [r2, #0]
 81063a6:	e7d7      	b.n	8106358 <_free_r+0x28>
 81063a8:	d902      	bls.n	81063b0 <_free_r+0x80>
 81063aa:	230c      	movs	r3, #12
 81063ac:	6003      	str	r3, [r0, #0]
 81063ae:	e7d3      	b.n	8106358 <_free_r+0x28>
 81063b0:	6825      	ldr	r5, [r4, #0]
 81063b2:	1961      	adds	r1, r4, r5
 81063b4:	428b      	cmp	r3, r1
 81063b6:	bf04      	itt	eq
 81063b8:	6819      	ldreq	r1, [r3, #0]
 81063ba:	685b      	ldreq	r3, [r3, #4]
 81063bc:	6063      	str	r3, [r4, #4]
 81063be:	bf04      	itt	eq
 81063c0:	1949      	addeq	r1, r1, r5
 81063c2:	6021      	streq	r1, [r4, #0]
 81063c4:	6054      	str	r4, [r2, #4]
 81063c6:	e7c7      	b.n	8106358 <_free_r+0x28>
 81063c8:	b003      	add	sp, #12
 81063ca:	bd30      	pop	{r4, r5, pc}
 81063cc:	1000009c 	.word	0x1000009c

081063d0 <_malloc_r>:
 81063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81063d2:	1ccd      	adds	r5, r1, #3
 81063d4:	f025 0503 	bic.w	r5, r5, #3
 81063d8:	3508      	adds	r5, #8
 81063da:	2d0c      	cmp	r5, #12
 81063dc:	bf38      	it	cc
 81063de:	250c      	movcc	r5, #12
 81063e0:	2d00      	cmp	r5, #0
 81063e2:	4606      	mov	r6, r0
 81063e4:	db01      	blt.n	81063ea <_malloc_r+0x1a>
 81063e6:	42a9      	cmp	r1, r5
 81063e8:	d903      	bls.n	81063f2 <_malloc_r+0x22>
 81063ea:	230c      	movs	r3, #12
 81063ec:	6033      	str	r3, [r6, #0]
 81063ee:	2000      	movs	r0, #0
 81063f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81063f2:	f000 fbdf 	bl	8106bb4 <__malloc_lock>
 81063f6:	4921      	ldr	r1, [pc, #132]	; (810647c <_malloc_r+0xac>)
 81063f8:	680a      	ldr	r2, [r1, #0]
 81063fa:	4614      	mov	r4, r2
 81063fc:	b99c      	cbnz	r4, 8106426 <_malloc_r+0x56>
 81063fe:	4f20      	ldr	r7, [pc, #128]	; (8106480 <_malloc_r+0xb0>)
 8106400:	683b      	ldr	r3, [r7, #0]
 8106402:	b923      	cbnz	r3, 810640e <_malloc_r+0x3e>
 8106404:	4621      	mov	r1, r4
 8106406:	4630      	mov	r0, r6
 8106408:	f000 fb2a 	bl	8106a60 <_sbrk_r>
 810640c:	6038      	str	r0, [r7, #0]
 810640e:	4629      	mov	r1, r5
 8106410:	4630      	mov	r0, r6
 8106412:	f000 fb25 	bl	8106a60 <_sbrk_r>
 8106416:	1c43      	adds	r3, r0, #1
 8106418:	d123      	bne.n	8106462 <_malloc_r+0x92>
 810641a:	230c      	movs	r3, #12
 810641c:	6033      	str	r3, [r6, #0]
 810641e:	4630      	mov	r0, r6
 8106420:	f000 fbce 	bl	8106bc0 <__malloc_unlock>
 8106424:	e7e3      	b.n	81063ee <_malloc_r+0x1e>
 8106426:	6823      	ldr	r3, [r4, #0]
 8106428:	1b5b      	subs	r3, r3, r5
 810642a:	d417      	bmi.n	810645c <_malloc_r+0x8c>
 810642c:	2b0b      	cmp	r3, #11
 810642e:	d903      	bls.n	8106438 <_malloc_r+0x68>
 8106430:	6023      	str	r3, [r4, #0]
 8106432:	441c      	add	r4, r3
 8106434:	6025      	str	r5, [r4, #0]
 8106436:	e004      	b.n	8106442 <_malloc_r+0x72>
 8106438:	6863      	ldr	r3, [r4, #4]
 810643a:	42a2      	cmp	r2, r4
 810643c:	bf0c      	ite	eq
 810643e:	600b      	streq	r3, [r1, #0]
 8106440:	6053      	strne	r3, [r2, #4]
 8106442:	4630      	mov	r0, r6
 8106444:	f000 fbbc 	bl	8106bc0 <__malloc_unlock>
 8106448:	f104 000b 	add.w	r0, r4, #11
 810644c:	1d23      	adds	r3, r4, #4
 810644e:	f020 0007 	bic.w	r0, r0, #7
 8106452:	1ac2      	subs	r2, r0, r3
 8106454:	d0cc      	beq.n	81063f0 <_malloc_r+0x20>
 8106456:	1a1b      	subs	r3, r3, r0
 8106458:	50a3      	str	r3, [r4, r2]
 810645a:	e7c9      	b.n	81063f0 <_malloc_r+0x20>
 810645c:	4622      	mov	r2, r4
 810645e:	6864      	ldr	r4, [r4, #4]
 8106460:	e7cc      	b.n	81063fc <_malloc_r+0x2c>
 8106462:	1cc4      	adds	r4, r0, #3
 8106464:	f024 0403 	bic.w	r4, r4, #3
 8106468:	42a0      	cmp	r0, r4
 810646a:	d0e3      	beq.n	8106434 <_malloc_r+0x64>
 810646c:	1a21      	subs	r1, r4, r0
 810646e:	4630      	mov	r0, r6
 8106470:	f000 faf6 	bl	8106a60 <_sbrk_r>
 8106474:	3001      	adds	r0, #1
 8106476:	d1dd      	bne.n	8106434 <_malloc_r+0x64>
 8106478:	e7cf      	b.n	810641a <_malloc_r+0x4a>
 810647a:	bf00      	nop
 810647c:	1000009c 	.word	0x1000009c
 8106480:	100000a0 	.word	0x100000a0

08106484 <__sfputc_r>:
 8106484:	6893      	ldr	r3, [r2, #8]
 8106486:	3b01      	subs	r3, #1
 8106488:	2b00      	cmp	r3, #0
 810648a:	b410      	push	{r4}
 810648c:	6093      	str	r3, [r2, #8]
 810648e:	da08      	bge.n	81064a2 <__sfputc_r+0x1e>
 8106490:	6994      	ldr	r4, [r2, #24]
 8106492:	42a3      	cmp	r3, r4
 8106494:	db01      	blt.n	810649a <__sfputc_r+0x16>
 8106496:	290a      	cmp	r1, #10
 8106498:	d103      	bne.n	81064a2 <__sfputc_r+0x1e>
 810649a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810649e:	f7ff bc69 	b.w	8105d74 <__swbuf_r>
 81064a2:	6813      	ldr	r3, [r2, #0]
 81064a4:	1c58      	adds	r0, r3, #1
 81064a6:	6010      	str	r0, [r2, #0]
 81064a8:	7019      	strb	r1, [r3, #0]
 81064aa:	4608      	mov	r0, r1
 81064ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 81064b0:	4770      	bx	lr

081064b2 <__sfputs_r>:
 81064b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81064b4:	4606      	mov	r6, r0
 81064b6:	460f      	mov	r7, r1
 81064b8:	4614      	mov	r4, r2
 81064ba:	18d5      	adds	r5, r2, r3
 81064bc:	42ac      	cmp	r4, r5
 81064be:	d101      	bne.n	81064c4 <__sfputs_r+0x12>
 81064c0:	2000      	movs	r0, #0
 81064c2:	e007      	b.n	81064d4 <__sfputs_r+0x22>
 81064c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81064c8:	463a      	mov	r2, r7
 81064ca:	4630      	mov	r0, r6
 81064cc:	f7ff ffda 	bl	8106484 <__sfputc_r>
 81064d0:	1c43      	adds	r3, r0, #1
 81064d2:	d1f3      	bne.n	81064bc <__sfputs_r+0xa>
 81064d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

081064d8 <_vfiprintf_r>:
 81064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81064dc:	460d      	mov	r5, r1
 81064de:	b09d      	sub	sp, #116	; 0x74
 81064e0:	4614      	mov	r4, r2
 81064e2:	4698      	mov	r8, r3
 81064e4:	4606      	mov	r6, r0
 81064e6:	b118      	cbz	r0, 81064f0 <_vfiprintf_r+0x18>
 81064e8:	6983      	ldr	r3, [r0, #24]
 81064ea:	b90b      	cbnz	r3, 81064f0 <_vfiprintf_r+0x18>
 81064ec:	f7ff fe1c 	bl	8106128 <__sinit>
 81064f0:	4b89      	ldr	r3, [pc, #548]	; (8106718 <_vfiprintf_r+0x240>)
 81064f2:	429d      	cmp	r5, r3
 81064f4:	d11b      	bne.n	810652e <_vfiprintf_r+0x56>
 81064f6:	6875      	ldr	r5, [r6, #4]
 81064f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81064fa:	07d9      	lsls	r1, r3, #31
 81064fc:	d405      	bmi.n	810650a <_vfiprintf_r+0x32>
 81064fe:	89ab      	ldrh	r3, [r5, #12]
 8106500:	059a      	lsls	r2, r3, #22
 8106502:	d402      	bmi.n	810650a <_vfiprintf_r+0x32>
 8106504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8106506:	f7ff fead 	bl	8106264 <__retarget_lock_acquire_recursive>
 810650a:	89ab      	ldrh	r3, [r5, #12]
 810650c:	071b      	lsls	r3, r3, #28
 810650e:	d501      	bpl.n	8106514 <_vfiprintf_r+0x3c>
 8106510:	692b      	ldr	r3, [r5, #16]
 8106512:	b9eb      	cbnz	r3, 8106550 <_vfiprintf_r+0x78>
 8106514:	4629      	mov	r1, r5
 8106516:	4630      	mov	r0, r6
 8106518:	f7ff fc7e 	bl	8105e18 <__swsetup_r>
 810651c:	b1c0      	cbz	r0, 8106550 <_vfiprintf_r+0x78>
 810651e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106520:	07dc      	lsls	r4, r3, #31
 8106522:	d50e      	bpl.n	8106542 <_vfiprintf_r+0x6a>
 8106524:	f04f 30ff 	mov.w	r0, #4294967295
 8106528:	b01d      	add	sp, #116	; 0x74
 810652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810652e:	4b7b      	ldr	r3, [pc, #492]	; (810671c <_vfiprintf_r+0x244>)
 8106530:	429d      	cmp	r5, r3
 8106532:	d101      	bne.n	8106538 <_vfiprintf_r+0x60>
 8106534:	68b5      	ldr	r5, [r6, #8]
 8106536:	e7df      	b.n	81064f8 <_vfiprintf_r+0x20>
 8106538:	4b79      	ldr	r3, [pc, #484]	; (8106720 <_vfiprintf_r+0x248>)
 810653a:	429d      	cmp	r5, r3
 810653c:	bf08      	it	eq
 810653e:	68f5      	ldreq	r5, [r6, #12]
 8106540:	e7da      	b.n	81064f8 <_vfiprintf_r+0x20>
 8106542:	89ab      	ldrh	r3, [r5, #12]
 8106544:	0598      	lsls	r0, r3, #22
 8106546:	d4ed      	bmi.n	8106524 <_vfiprintf_r+0x4c>
 8106548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810654a:	f7ff fe8c 	bl	8106266 <__retarget_lock_release_recursive>
 810654e:	e7e9      	b.n	8106524 <_vfiprintf_r+0x4c>
 8106550:	2300      	movs	r3, #0
 8106552:	9309      	str	r3, [sp, #36]	; 0x24
 8106554:	2320      	movs	r3, #32
 8106556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810655a:	f8cd 800c 	str.w	r8, [sp, #12]
 810655e:	2330      	movs	r3, #48	; 0x30
 8106560:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8106724 <_vfiprintf_r+0x24c>
 8106564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8106568:	f04f 0901 	mov.w	r9, #1
 810656c:	4623      	mov	r3, r4
 810656e:	469a      	mov	sl, r3
 8106570:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106574:	b10a      	cbz	r2, 810657a <_vfiprintf_r+0xa2>
 8106576:	2a25      	cmp	r2, #37	; 0x25
 8106578:	d1f9      	bne.n	810656e <_vfiprintf_r+0x96>
 810657a:	ebba 0b04 	subs.w	fp, sl, r4
 810657e:	d00b      	beq.n	8106598 <_vfiprintf_r+0xc0>
 8106580:	465b      	mov	r3, fp
 8106582:	4622      	mov	r2, r4
 8106584:	4629      	mov	r1, r5
 8106586:	4630      	mov	r0, r6
 8106588:	f7ff ff93 	bl	81064b2 <__sfputs_r>
 810658c:	3001      	adds	r0, #1
 810658e:	f000 80aa 	beq.w	81066e6 <_vfiprintf_r+0x20e>
 8106592:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8106594:	445a      	add	r2, fp
 8106596:	9209      	str	r2, [sp, #36]	; 0x24
 8106598:	f89a 3000 	ldrb.w	r3, [sl]
 810659c:	2b00      	cmp	r3, #0
 810659e:	f000 80a2 	beq.w	81066e6 <_vfiprintf_r+0x20e>
 81065a2:	2300      	movs	r3, #0
 81065a4:	f04f 32ff 	mov.w	r2, #4294967295
 81065a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81065ac:	f10a 0a01 	add.w	sl, sl, #1
 81065b0:	9304      	str	r3, [sp, #16]
 81065b2:	9307      	str	r3, [sp, #28]
 81065b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81065b8:	931a      	str	r3, [sp, #104]	; 0x68
 81065ba:	4654      	mov	r4, sl
 81065bc:	2205      	movs	r2, #5
 81065be:	f814 1b01 	ldrb.w	r1, [r4], #1
 81065c2:	4858      	ldr	r0, [pc, #352]	; (8106724 <_vfiprintf_r+0x24c>)
 81065c4:	f7f9 fe8c 	bl	81002e0 <memchr>
 81065c8:	9a04      	ldr	r2, [sp, #16]
 81065ca:	b9d8      	cbnz	r0, 8106604 <_vfiprintf_r+0x12c>
 81065cc:	06d1      	lsls	r1, r2, #27
 81065ce:	bf44      	itt	mi
 81065d0:	2320      	movmi	r3, #32
 81065d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81065d6:	0713      	lsls	r3, r2, #28
 81065d8:	bf44      	itt	mi
 81065da:	232b      	movmi	r3, #43	; 0x2b
 81065dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81065e0:	f89a 3000 	ldrb.w	r3, [sl]
 81065e4:	2b2a      	cmp	r3, #42	; 0x2a
 81065e6:	d015      	beq.n	8106614 <_vfiprintf_r+0x13c>
 81065e8:	9a07      	ldr	r2, [sp, #28]
 81065ea:	4654      	mov	r4, sl
 81065ec:	2000      	movs	r0, #0
 81065ee:	f04f 0c0a 	mov.w	ip, #10
 81065f2:	4621      	mov	r1, r4
 81065f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 81065f8:	3b30      	subs	r3, #48	; 0x30
 81065fa:	2b09      	cmp	r3, #9
 81065fc:	d94e      	bls.n	810669c <_vfiprintf_r+0x1c4>
 81065fe:	b1b0      	cbz	r0, 810662e <_vfiprintf_r+0x156>
 8106600:	9207      	str	r2, [sp, #28]
 8106602:	e014      	b.n	810662e <_vfiprintf_r+0x156>
 8106604:	eba0 0308 	sub.w	r3, r0, r8
 8106608:	fa09 f303 	lsl.w	r3, r9, r3
 810660c:	4313      	orrs	r3, r2
 810660e:	9304      	str	r3, [sp, #16]
 8106610:	46a2      	mov	sl, r4
 8106612:	e7d2      	b.n	81065ba <_vfiprintf_r+0xe2>
 8106614:	9b03      	ldr	r3, [sp, #12]
 8106616:	1d19      	adds	r1, r3, #4
 8106618:	681b      	ldr	r3, [r3, #0]
 810661a:	9103      	str	r1, [sp, #12]
 810661c:	2b00      	cmp	r3, #0
 810661e:	bfbb      	ittet	lt
 8106620:	425b      	neglt	r3, r3
 8106622:	f042 0202 	orrlt.w	r2, r2, #2
 8106626:	9307      	strge	r3, [sp, #28]
 8106628:	9307      	strlt	r3, [sp, #28]
 810662a:	bfb8      	it	lt
 810662c:	9204      	strlt	r2, [sp, #16]
 810662e:	7823      	ldrb	r3, [r4, #0]
 8106630:	2b2e      	cmp	r3, #46	; 0x2e
 8106632:	d10c      	bne.n	810664e <_vfiprintf_r+0x176>
 8106634:	7863      	ldrb	r3, [r4, #1]
 8106636:	2b2a      	cmp	r3, #42	; 0x2a
 8106638:	d135      	bne.n	81066a6 <_vfiprintf_r+0x1ce>
 810663a:	9b03      	ldr	r3, [sp, #12]
 810663c:	1d1a      	adds	r2, r3, #4
 810663e:	681b      	ldr	r3, [r3, #0]
 8106640:	9203      	str	r2, [sp, #12]
 8106642:	2b00      	cmp	r3, #0
 8106644:	bfb8      	it	lt
 8106646:	f04f 33ff 	movlt.w	r3, #4294967295
 810664a:	3402      	adds	r4, #2
 810664c:	9305      	str	r3, [sp, #20]
 810664e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8106734 <_vfiprintf_r+0x25c>
 8106652:	7821      	ldrb	r1, [r4, #0]
 8106654:	2203      	movs	r2, #3
 8106656:	4650      	mov	r0, sl
 8106658:	f7f9 fe42 	bl	81002e0 <memchr>
 810665c:	b140      	cbz	r0, 8106670 <_vfiprintf_r+0x198>
 810665e:	2340      	movs	r3, #64	; 0x40
 8106660:	eba0 000a 	sub.w	r0, r0, sl
 8106664:	fa03 f000 	lsl.w	r0, r3, r0
 8106668:	9b04      	ldr	r3, [sp, #16]
 810666a:	4303      	orrs	r3, r0
 810666c:	3401      	adds	r4, #1
 810666e:	9304      	str	r3, [sp, #16]
 8106670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106674:	482c      	ldr	r0, [pc, #176]	; (8106728 <_vfiprintf_r+0x250>)
 8106676:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810667a:	2206      	movs	r2, #6
 810667c:	f7f9 fe30 	bl	81002e0 <memchr>
 8106680:	2800      	cmp	r0, #0
 8106682:	d03f      	beq.n	8106704 <_vfiprintf_r+0x22c>
 8106684:	4b29      	ldr	r3, [pc, #164]	; (810672c <_vfiprintf_r+0x254>)
 8106686:	bb1b      	cbnz	r3, 81066d0 <_vfiprintf_r+0x1f8>
 8106688:	9b03      	ldr	r3, [sp, #12]
 810668a:	3307      	adds	r3, #7
 810668c:	f023 0307 	bic.w	r3, r3, #7
 8106690:	3308      	adds	r3, #8
 8106692:	9303      	str	r3, [sp, #12]
 8106694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106696:	443b      	add	r3, r7
 8106698:	9309      	str	r3, [sp, #36]	; 0x24
 810669a:	e767      	b.n	810656c <_vfiprintf_r+0x94>
 810669c:	fb0c 3202 	mla	r2, ip, r2, r3
 81066a0:	460c      	mov	r4, r1
 81066a2:	2001      	movs	r0, #1
 81066a4:	e7a5      	b.n	81065f2 <_vfiprintf_r+0x11a>
 81066a6:	2300      	movs	r3, #0
 81066a8:	3401      	adds	r4, #1
 81066aa:	9305      	str	r3, [sp, #20]
 81066ac:	4619      	mov	r1, r3
 81066ae:	f04f 0c0a 	mov.w	ip, #10
 81066b2:	4620      	mov	r0, r4
 81066b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 81066b8:	3a30      	subs	r2, #48	; 0x30
 81066ba:	2a09      	cmp	r2, #9
 81066bc:	d903      	bls.n	81066c6 <_vfiprintf_r+0x1ee>
 81066be:	2b00      	cmp	r3, #0
 81066c0:	d0c5      	beq.n	810664e <_vfiprintf_r+0x176>
 81066c2:	9105      	str	r1, [sp, #20]
 81066c4:	e7c3      	b.n	810664e <_vfiprintf_r+0x176>
 81066c6:	fb0c 2101 	mla	r1, ip, r1, r2
 81066ca:	4604      	mov	r4, r0
 81066cc:	2301      	movs	r3, #1
 81066ce:	e7f0      	b.n	81066b2 <_vfiprintf_r+0x1da>
 81066d0:	ab03      	add	r3, sp, #12
 81066d2:	9300      	str	r3, [sp, #0]
 81066d4:	462a      	mov	r2, r5
 81066d6:	4b16      	ldr	r3, [pc, #88]	; (8106730 <_vfiprintf_r+0x258>)
 81066d8:	a904      	add	r1, sp, #16
 81066da:	4630      	mov	r0, r6
 81066dc:	f3af 8000 	nop.w
 81066e0:	4607      	mov	r7, r0
 81066e2:	1c78      	adds	r0, r7, #1
 81066e4:	d1d6      	bne.n	8106694 <_vfiprintf_r+0x1bc>
 81066e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81066e8:	07d9      	lsls	r1, r3, #31
 81066ea:	d405      	bmi.n	81066f8 <_vfiprintf_r+0x220>
 81066ec:	89ab      	ldrh	r3, [r5, #12]
 81066ee:	059a      	lsls	r2, r3, #22
 81066f0:	d402      	bmi.n	81066f8 <_vfiprintf_r+0x220>
 81066f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81066f4:	f7ff fdb7 	bl	8106266 <__retarget_lock_release_recursive>
 81066f8:	89ab      	ldrh	r3, [r5, #12]
 81066fa:	065b      	lsls	r3, r3, #25
 81066fc:	f53f af12 	bmi.w	8106524 <_vfiprintf_r+0x4c>
 8106700:	9809      	ldr	r0, [sp, #36]	; 0x24
 8106702:	e711      	b.n	8106528 <_vfiprintf_r+0x50>
 8106704:	ab03      	add	r3, sp, #12
 8106706:	9300      	str	r3, [sp, #0]
 8106708:	462a      	mov	r2, r5
 810670a:	4b09      	ldr	r3, [pc, #36]	; (8106730 <_vfiprintf_r+0x258>)
 810670c:	a904      	add	r1, sp, #16
 810670e:	4630      	mov	r0, r6
 8106710:	f000 f880 	bl	8106814 <_printf_i>
 8106714:	e7e4      	b.n	81066e0 <_vfiprintf_r+0x208>
 8106716:	bf00      	nop
 8106718:	08106d84 	.word	0x08106d84
 810671c:	08106da4 	.word	0x08106da4
 8106720:	08106d64 	.word	0x08106d64
 8106724:	08106dc4 	.word	0x08106dc4
 8106728:	08106dce 	.word	0x08106dce
 810672c:	00000000 	.word	0x00000000
 8106730:	081064b3 	.word	0x081064b3
 8106734:	08106dca 	.word	0x08106dca

08106738 <_printf_common>:
 8106738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810673c:	4616      	mov	r6, r2
 810673e:	4699      	mov	r9, r3
 8106740:	688a      	ldr	r2, [r1, #8]
 8106742:	690b      	ldr	r3, [r1, #16]
 8106744:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8106748:	4293      	cmp	r3, r2
 810674a:	bfb8      	it	lt
 810674c:	4613      	movlt	r3, r2
 810674e:	6033      	str	r3, [r6, #0]
 8106750:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8106754:	4607      	mov	r7, r0
 8106756:	460c      	mov	r4, r1
 8106758:	b10a      	cbz	r2, 810675e <_printf_common+0x26>
 810675a:	3301      	adds	r3, #1
 810675c:	6033      	str	r3, [r6, #0]
 810675e:	6823      	ldr	r3, [r4, #0]
 8106760:	0699      	lsls	r1, r3, #26
 8106762:	bf42      	ittt	mi
 8106764:	6833      	ldrmi	r3, [r6, #0]
 8106766:	3302      	addmi	r3, #2
 8106768:	6033      	strmi	r3, [r6, #0]
 810676a:	6825      	ldr	r5, [r4, #0]
 810676c:	f015 0506 	ands.w	r5, r5, #6
 8106770:	d106      	bne.n	8106780 <_printf_common+0x48>
 8106772:	f104 0a19 	add.w	sl, r4, #25
 8106776:	68e3      	ldr	r3, [r4, #12]
 8106778:	6832      	ldr	r2, [r6, #0]
 810677a:	1a9b      	subs	r3, r3, r2
 810677c:	42ab      	cmp	r3, r5
 810677e:	dc26      	bgt.n	81067ce <_printf_common+0x96>
 8106780:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106784:	1e13      	subs	r3, r2, #0
 8106786:	6822      	ldr	r2, [r4, #0]
 8106788:	bf18      	it	ne
 810678a:	2301      	movne	r3, #1
 810678c:	0692      	lsls	r2, r2, #26
 810678e:	d42b      	bmi.n	81067e8 <_printf_common+0xb0>
 8106790:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106794:	4649      	mov	r1, r9
 8106796:	4638      	mov	r0, r7
 8106798:	47c0      	blx	r8
 810679a:	3001      	adds	r0, #1
 810679c:	d01e      	beq.n	81067dc <_printf_common+0xa4>
 810679e:	6823      	ldr	r3, [r4, #0]
 81067a0:	68e5      	ldr	r5, [r4, #12]
 81067a2:	6832      	ldr	r2, [r6, #0]
 81067a4:	f003 0306 	and.w	r3, r3, #6
 81067a8:	2b04      	cmp	r3, #4
 81067aa:	bf08      	it	eq
 81067ac:	1aad      	subeq	r5, r5, r2
 81067ae:	68a3      	ldr	r3, [r4, #8]
 81067b0:	6922      	ldr	r2, [r4, #16]
 81067b2:	bf0c      	ite	eq
 81067b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81067b8:	2500      	movne	r5, #0
 81067ba:	4293      	cmp	r3, r2
 81067bc:	bfc4      	itt	gt
 81067be:	1a9b      	subgt	r3, r3, r2
 81067c0:	18ed      	addgt	r5, r5, r3
 81067c2:	2600      	movs	r6, #0
 81067c4:	341a      	adds	r4, #26
 81067c6:	42b5      	cmp	r5, r6
 81067c8:	d11a      	bne.n	8106800 <_printf_common+0xc8>
 81067ca:	2000      	movs	r0, #0
 81067cc:	e008      	b.n	81067e0 <_printf_common+0xa8>
 81067ce:	2301      	movs	r3, #1
 81067d0:	4652      	mov	r2, sl
 81067d2:	4649      	mov	r1, r9
 81067d4:	4638      	mov	r0, r7
 81067d6:	47c0      	blx	r8
 81067d8:	3001      	adds	r0, #1
 81067da:	d103      	bne.n	81067e4 <_printf_common+0xac>
 81067dc:	f04f 30ff 	mov.w	r0, #4294967295
 81067e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81067e4:	3501      	adds	r5, #1
 81067e6:	e7c6      	b.n	8106776 <_printf_common+0x3e>
 81067e8:	18e1      	adds	r1, r4, r3
 81067ea:	1c5a      	adds	r2, r3, #1
 81067ec:	2030      	movs	r0, #48	; 0x30
 81067ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81067f2:	4422      	add	r2, r4
 81067f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81067f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81067fc:	3302      	adds	r3, #2
 81067fe:	e7c7      	b.n	8106790 <_printf_common+0x58>
 8106800:	2301      	movs	r3, #1
 8106802:	4622      	mov	r2, r4
 8106804:	4649      	mov	r1, r9
 8106806:	4638      	mov	r0, r7
 8106808:	47c0      	blx	r8
 810680a:	3001      	adds	r0, #1
 810680c:	d0e6      	beq.n	81067dc <_printf_common+0xa4>
 810680e:	3601      	adds	r6, #1
 8106810:	e7d9      	b.n	81067c6 <_printf_common+0x8e>
	...

08106814 <_printf_i>:
 8106814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106818:	460c      	mov	r4, r1
 810681a:	4691      	mov	r9, r2
 810681c:	7e27      	ldrb	r7, [r4, #24]
 810681e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8106820:	2f78      	cmp	r7, #120	; 0x78
 8106822:	4680      	mov	r8, r0
 8106824:	469a      	mov	sl, r3
 8106826:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810682a:	d807      	bhi.n	810683c <_printf_i+0x28>
 810682c:	2f62      	cmp	r7, #98	; 0x62
 810682e:	d80a      	bhi.n	8106846 <_printf_i+0x32>
 8106830:	2f00      	cmp	r7, #0
 8106832:	f000 80d8 	beq.w	81069e6 <_printf_i+0x1d2>
 8106836:	2f58      	cmp	r7, #88	; 0x58
 8106838:	f000 80a3 	beq.w	8106982 <_printf_i+0x16e>
 810683c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8106840:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8106844:	e03a      	b.n	81068bc <_printf_i+0xa8>
 8106846:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810684a:	2b15      	cmp	r3, #21
 810684c:	d8f6      	bhi.n	810683c <_printf_i+0x28>
 810684e:	a001      	add	r0, pc, #4	; (adr r0, 8106854 <_printf_i+0x40>)
 8106850:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8106854:	081068ad 	.word	0x081068ad
 8106858:	081068c1 	.word	0x081068c1
 810685c:	0810683d 	.word	0x0810683d
 8106860:	0810683d 	.word	0x0810683d
 8106864:	0810683d 	.word	0x0810683d
 8106868:	0810683d 	.word	0x0810683d
 810686c:	081068c1 	.word	0x081068c1
 8106870:	0810683d 	.word	0x0810683d
 8106874:	0810683d 	.word	0x0810683d
 8106878:	0810683d 	.word	0x0810683d
 810687c:	0810683d 	.word	0x0810683d
 8106880:	081069cd 	.word	0x081069cd
 8106884:	081068f1 	.word	0x081068f1
 8106888:	081069af 	.word	0x081069af
 810688c:	0810683d 	.word	0x0810683d
 8106890:	0810683d 	.word	0x0810683d
 8106894:	081069ef 	.word	0x081069ef
 8106898:	0810683d 	.word	0x0810683d
 810689c:	081068f1 	.word	0x081068f1
 81068a0:	0810683d 	.word	0x0810683d
 81068a4:	0810683d 	.word	0x0810683d
 81068a8:	081069b7 	.word	0x081069b7
 81068ac:	680b      	ldr	r3, [r1, #0]
 81068ae:	1d1a      	adds	r2, r3, #4
 81068b0:	681b      	ldr	r3, [r3, #0]
 81068b2:	600a      	str	r2, [r1, #0]
 81068b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81068b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81068bc:	2301      	movs	r3, #1
 81068be:	e0a3      	b.n	8106a08 <_printf_i+0x1f4>
 81068c0:	6825      	ldr	r5, [r4, #0]
 81068c2:	6808      	ldr	r0, [r1, #0]
 81068c4:	062e      	lsls	r6, r5, #24
 81068c6:	f100 0304 	add.w	r3, r0, #4
 81068ca:	d50a      	bpl.n	81068e2 <_printf_i+0xce>
 81068cc:	6805      	ldr	r5, [r0, #0]
 81068ce:	600b      	str	r3, [r1, #0]
 81068d0:	2d00      	cmp	r5, #0
 81068d2:	da03      	bge.n	81068dc <_printf_i+0xc8>
 81068d4:	232d      	movs	r3, #45	; 0x2d
 81068d6:	426d      	negs	r5, r5
 81068d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81068dc:	485e      	ldr	r0, [pc, #376]	; (8106a58 <_printf_i+0x244>)
 81068de:	230a      	movs	r3, #10
 81068e0:	e019      	b.n	8106916 <_printf_i+0x102>
 81068e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 81068e6:	6805      	ldr	r5, [r0, #0]
 81068e8:	600b      	str	r3, [r1, #0]
 81068ea:	bf18      	it	ne
 81068ec:	b22d      	sxthne	r5, r5
 81068ee:	e7ef      	b.n	81068d0 <_printf_i+0xbc>
 81068f0:	680b      	ldr	r3, [r1, #0]
 81068f2:	6825      	ldr	r5, [r4, #0]
 81068f4:	1d18      	adds	r0, r3, #4
 81068f6:	6008      	str	r0, [r1, #0]
 81068f8:	0628      	lsls	r0, r5, #24
 81068fa:	d501      	bpl.n	8106900 <_printf_i+0xec>
 81068fc:	681d      	ldr	r5, [r3, #0]
 81068fe:	e002      	b.n	8106906 <_printf_i+0xf2>
 8106900:	0669      	lsls	r1, r5, #25
 8106902:	d5fb      	bpl.n	81068fc <_printf_i+0xe8>
 8106904:	881d      	ldrh	r5, [r3, #0]
 8106906:	4854      	ldr	r0, [pc, #336]	; (8106a58 <_printf_i+0x244>)
 8106908:	2f6f      	cmp	r7, #111	; 0x6f
 810690a:	bf0c      	ite	eq
 810690c:	2308      	moveq	r3, #8
 810690e:	230a      	movne	r3, #10
 8106910:	2100      	movs	r1, #0
 8106912:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8106916:	6866      	ldr	r6, [r4, #4]
 8106918:	60a6      	str	r6, [r4, #8]
 810691a:	2e00      	cmp	r6, #0
 810691c:	bfa2      	ittt	ge
 810691e:	6821      	ldrge	r1, [r4, #0]
 8106920:	f021 0104 	bicge.w	r1, r1, #4
 8106924:	6021      	strge	r1, [r4, #0]
 8106926:	b90d      	cbnz	r5, 810692c <_printf_i+0x118>
 8106928:	2e00      	cmp	r6, #0
 810692a:	d04d      	beq.n	81069c8 <_printf_i+0x1b4>
 810692c:	4616      	mov	r6, r2
 810692e:	fbb5 f1f3 	udiv	r1, r5, r3
 8106932:	fb03 5711 	mls	r7, r3, r1, r5
 8106936:	5dc7      	ldrb	r7, [r0, r7]
 8106938:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810693c:	462f      	mov	r7, r5
 810693e:	42bb      	cmp	r3, r7
 8106940:	460d      	mov	r5, r1
 8106942:	d9f4      	bls.n	810692e <_printf_i+0x11a>
 8106944:	2b08      	cmp	r3, #8
 8106946:	d10b      	bne.n	8106960 <_printf_i+0x14c>
 8106948:	6823      	ldr	r3, [r4, #0]
 810694a:	07df      	lsls	r7, r3, #31
 810694c:	d508      	bpl.n	8106960 <_printf_i+0x14c>
 810694e:	6923      	ldr	r3, [r4, #16]
 8106950:	6861      	ldr	r1, [r4, #4]
 8106952:	4299      	cmp	r1, r3
 8106954:	bfde      	ittt	le
 8106956:	2330      	movle	r3, #48	; 0x30
 8106958:	f806 3c01 	strble.w	r3, [r6, #-1]
 810695c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8106960:	1b92      	subs	r2, r2, r6
 8106962:	6122      	str	r2, [r4, #16]
 8106964:	f8cd a000 	str.w	sl, [sp]
 8106968:	464b      	mov	r3, r9
 810696a:	aa03      	add	r2, sp, #12
 810696c:	4621      	mov	r1, r4
 810696e:	4640      	mov	r0, r8
 8106970:	f7ff fee2 	bl	8106738 <_printf_common>
 8106974:	3001      	adds	r0, #1
 8106976:	d14c      	bne.n	8106a12 <_printf_i+0x1fe>
 8106978:	f04f 30ff 	mov.w	r0, #4294967295
 810697c:	b004      	add	sp, #16
 810697e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106982:	4835      	ldr	r0, [pc, #212]	; (8106a58 <_printf_i+0x244>)
 8106984:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8106988:	6823      	ldr	r3, [r4, #0]
 810698a:	680e      	ldr	r6, [r1, #0]
 810698c:	061f      	lsls	r7, r3, #24
 810698e:	f856 5b04 	ldr.w	r5, [r6], #4
 8106992:	600e      	str	r6, [r1, #0]
 8106994:	d514      	bpl.n	81069c0 <_printf_i+0x1ac>
 8106996:	07d9      	lsls	r1, r3, #31
 8106998:	bf44      	itt	mi
 810699a:	f043 0320 	orrmi.w	r3, r3, #32
 810699e:	6023      	strmi	r3, [r4, #0]
 81069a0:	b91d      	cbnz	r5, 81069aa <_printf_i+0x196>
 81069a2:	6823      	ldr	r3, [r4, #0]
 81069a4:	f023 0320 	bic.w	r3, r3, #32
 81069a8:	6023      	str	r3, [r4, #0]
 81069aa:	2310      	movs	r3, #16
 81069ac:	e7b0      	b.n	8106910 <_printf_i+0xfc>
 81069ae:	6823      	ldr	r3, [r4, #0]
 81069b0:	f043 0320 	orr.w	r3, r3, #32
 81069b4:	6023      	str	r3, [r4, #0]
 81069b6:	2378      	movs	r3, #120	; 0x78
 81069b8:	4828      	ldr	r0, [pc, #160]	; (8106a5c <_printf_i+0x248>)
 81069ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81069be:	e7e3      	b.n	8106988 <_printf_i+0x174>
 81069c0:	065e      	lsls	r6, r3, #25
 81069c2:	bf48      	it	mi
 81069c4:	b2ad      	uxthmi	r5, r5
 81069c6:	e7e6      	b.n	8106996 <_printf_i+0x182>
 81069c8:	4616      	mov	r6, r2
 81069ca:	e7bb      	b.n	8106944 <_printf_i+0x130>
 81069cc:	680b      	ldr	r3, [r1, #0]
 81069ce:	6826      	ldr	r6, [r4, #0]
 81069d0:	6960      	ldr	r0, [r4, #20]
 81069d2:	1d1d      	adds	r5, r3, #4
 81069d4:	600d      	str	r5, [r1, #0]
 81069d6:	0635      	lsls	r5, r6, #24
 81069d8:	681b      	ldr	r3, [r3, #0]
 81069da:	d501      	bpl.n	81069e0 <_printf_i+0x1cc>
 81069dc:	6018      	str	r0, [r3, #0]
 81069de:	e002      	b.n	81069e6 <_printf_i+0x1d2>
 81069e0:	0671      	lsls	r1, r6, #25
 81069e2:	d5fb      	bpl.n	81069dc <_printf_i+0x1c8>
 81069e4:	8018      	strh	r0, [r3, #0]
 81069e6:	2300      	movs	r3, #0
 81069e8:	6123      	str	r3, [r4, #16]
 81069ea:	4616      	mov	r6, r2
 81069ec:	e7ba      	b.n	8106964 <_printf_i+0x150>
 81069ee:	680b      	ldr	r3, [r1, #0]
 81069f0:	1d1a      	adds	r2, r3, #4
 81069f2:	600a      	str	r2, [r1, #0]
 81069f4:	681e      	ldr	r6, [r3, #0]
 81069f6:	6862      	ldr	r2, [r4, #4]
 81069f8:	2100      	movs	r1, #0
 81069fa:	4630      	mov	r0, r6
 81069fc:	f7f9 fc70 	bl	81002e0 <memchr>
 8106a00:	b108      	cbz	r0, 8106a06 <_printf_i+0x1f2>
 8106a02:	1b80      	subs	r0, r0, r6
 8106a04:	6060      	str	r0, [r4, #4]
 8106a06:	6863      	ldr	r3, [r4, #4]
 8106a08:	6123      	str	r3, [r4, #16]
 8106a0a:	2300      	movs	r3, #0
 8106a0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106a10:	e7a8      	b.n	8106964 <_printf_i+0x150>
 8106a12:	6923      	ldr	r3, [r4, #16]
 8106a14:	4632      	mov	r2, r6
 8106a16:	4649      	mov	r1, r9
 8106a18:	4640      	mov	r0, r8
 8106a1a:	47d0      	blx	sl
 8106a1c:	3001      	adds	r0, #1
 8106a1e:	d0ab      	beq.n	8106978 <_printf_i+0x164>
 8106a20:	6823      	ldr	r3, [r4, #0]
 8106a22:	079b      	lsls	r3, r3, #30
 8106a24:	d413      	bmi.n	8106a4e <_printf_i+0x23a>
 8106a26:	68e0      	ldr	r0, [r4, #12]
 8106a28:	9b03      	ldr	r3, [sp, #12]
 8106a2a:	4298      	cmp	r0, r3
 8106a2c:	bfb8      	it	lt
 8106a2e:	4618      	movlt	r0, r3
 8106a30:	e7a4      	b.n	810697c <_printf_i+0x168>
 8106a32:	2301      	movs	r3, #1
 8106a34:	4632      	mov	r2, r6
 8106a36:	4649      	mov	r1, r9
 8106a38:	4640      	mov	r0, r8
 8106a3a:	47d0      	blx	sl
 8106a3c:	3001      	adds	r0, #1
 8106a3e:	d09b      	beq.n	8106978 <_printf_i+0x164>
 8106a40:	3501      	adds	r5, #1
 8106a42:	68e3      	ldr	r3, [r4, #12]
 8106a44:	9903      	ldr	r1, [sp, #12]
 8106a46:	1a5b      	subs	r3, r3, r1
 8106a48:	42ab      	cmp	r3, r5
 8106a4a:	dcf2      	bgt.n	8106a32 <_printf_i+0x21e>
 8106a4c:	e7eb      	b.n	8106a26 <_printf_i+0x212>
 8106a4e:	2500      	movs	r5, #0
 8106a50:	f104 0619 	add.w	r6, r4, #25
 8106a54:	e7f5      	b.n	8106a42 <_printf_i+0x22e>
 8106a56:	bf00      	nop
 8106a58:	08106dd5 	.word	0x08106dd5
 8106a5c:	08106de6 	.word	0x08106de6

08106a60 <_sbrk_r>:
 8106a60:	b538      	push	{r3, r4, r5, lr}
 8106a62:	4d06      	ldr	r5, [pc, #24]	; (8106a7c <_sbrk_r+0x1c>)
 8106a64:	2300      	movs	r3, #0
 8106a66:	4604      	mov	r4, r0
 8106a68:	4608      	mov	r0, r1
 8106a6a:	602b      	str	r3, [r5, #0]
 8106a6c:	f7fa fcfa 	bl	8101464 <_sbrk>
 8106a70:	1c43      	adds	r3, r0, #1
 8106a72:	d102      	bne.n	8106a7a <_sbrk_r+0x1a>
 8106a74:	682b      	ldr	r3, [r5, #0]
 8106a76:	b103      	cbz	r3, 8106a7a <_sbrk_r+0x1a>
 8106a78:	6023      	str	r3, [r4, #0]
 8106a7a:	bd38      	pop	{r3, r4, r5, pc}
 8106a7c:	10000288 	.word	0x10000288

08106a80 <__sread>:
 8106a80:	b510      	push	{r4, lr}
 8106a82:	460c      	mov	r4, r1
 8106a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106a88:	f000 f8a0 	bl	8106bcc <_read_r>
 8106a8c:	2800      	cmp	r0, #0
 8106a8e:	bfab      	itete	ge
 8106a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8106a92:	89a3      	ldrhlt	r3, [r4, #12]
 8106a94:	181b      	addge	r3, r3, r0
 8106a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8106a9a:	bfac      	ite	ge
 8106a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8106a9e:	81a3      	strhlt	r3, [r4, #12]
 8106aa0:	bd10      	pop	{r4, pc}

08106aa2 <__swrite>:
 8106aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106aa6:	461f      	mov	r7, r3
 8106aa8:	898b      	ldrh	r3, [r1, #12]
 8106aaa:	05db      	lsls	r3, r3, #23
 8106aac:	4605      	mov	r5, r0
 8106aae:	460c      	mov	r4, r1
 8106ab0:	4616      	mov	r6, r2
 8106ab2:	d505      	bpl.n	8106ac0 <__swrite+0x1e>
 8106ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106ab8:	2302      	movs	r3, #2
 8106aba:	2200      	movs	r2, #0
 8106abc:	f000 f868 	bl	8106b90 <_lseek_r>
 8106ac0:	89a3      	ldrh	r3, [r4, #12]
 8106ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106aca:	81a3      	strh	r3, [r4, #12]
 8106acc:	4632      	mov	r2, r6
 8106ace:	463b      	mov	r3, r7
 8106ad0:	4628      	mov	r0, r5
 8106ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106ad6:	f000 b817 	b.w	8106b08 <_write_r>

08106ada <__sseek>:
 8106ada:	b510      	push	{r4, lr}
 8106adc:	460c      	mov	r4, r1
 8106ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106ae2:	f000 f855 	bl	8106b90 <_lseek_r>
 8106ae6:	1c43      	adds	r3, r0, #1
 8106ae8:	89a3      	ldrh	r3, [r4, #12]
 8106aea:	bf15      	itete	ne
 8106aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8106aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8106af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8106af6:	81a3      	strheq	r3, [r4, #12]
 8106af8:	bf18      	it	ne
 8106afa:	81a3      	strhne	r3, [r4, #12]
 8106afc:	bd10      	pop	{r4, pc}

08106afe <__sclose>:
 8106afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106b02:	f000 b813 	b.w	8106b2c <_close_r>
	...

08106b08 <_write_r>:
 8106b08:	b538      	push	{r3, r4, r5, lr}
 8106b0a:	4d07      	ldr	r5, [pc, #28]	; (8106b28 <_write_r+0x20>)
 8106b0c:	4604      	mov	r4, r0
 8106b0e:	4608      	mov	r0, r1
 8106b10:	4611      	mov	r1, r2
 8106b12:	2200      	movs	r2, #0
 8106b14:	602a      	str	r2, [r5, #0]
 8106b16:	461a      	mov	r2, r3
 8106b18:	f7fa fc53 	bl	81013c2 <_write>
 8106b1c:	1c43      	adds	r3, r0, #1
 8106b1e:	d102      	bne.n	8106b26 <_write_r+0x1e>
 8106b20:	682b      	ldr	r3, [r5, #0]
 8106b22:	b103      	cbz	r3, 8106b26 <_write_r+0x1e>
 8106b24:	6023      	str	r3, [r4, #0]
 8106b26:	bd38      	pop	{r3, r4, r5, pc}
 8106b28:	10000288 	.word	0x10000288

08106b2c <_close_r>:
 8106b2c:	b538      	push	{r3, r4, r5, lr}
 8106b2e:	4d06      	ldr	r5, [pc, #24]	; (8106b48 <_close_r+0x1c>)
 8106b30:	2300      	movs	r3, #0
 8106b32:	4604      	mov	r4, r0
 8106b34:	4608      	mov	r0, r1
 8106b36:	602b      	str	r3, [r5, #0]
 8106b38:	f7fa fc5f 	bl	81013fa <_close>
 8106b3c:	1c43      	adds	r3, r0, #1
 8106b3e:	d102      	bne.n	8106b46 <_close_r+0x1a>
 8106b40:	682b      	ldr	r3, [r5, #0]
 8106b42:	b103      	cbz	r3, 8106b46 <_close_r+0x1a>
 8106b44:	6023      	str	r3, [r4, #0]
 8106b46:	bd38      	pop	{r3, r4, r5, pc}
 8106b48:	10000288 	.word	0x10000288

08106b4c <_fstat_r>:
 8106b4c:	b538      	push	{r3, r4, r5, lr}
 8106b4e:	4d07      	ldr	r5, [pc, #28]	; (8106b6c <_fstat_r+0x20>)
 8106b50:	2300      	movs	r3, #0
 8106b52:	4604      	mov	r4, r0
 8106b54:	4608      	mov	r0, r1
 8106b56:	4611      	mov	r1, r2
 8106b58:	602b      	str	r3, [r5, #0]
 8106b5a:	f7fa fc5a 	bl	8101412 <_fstat>
 8106b5e:	1c43      	adds	r3, r0, #1
 8106b60:	d102      	bne.n	8106b68 <_fstat_r+0x1c>
 8106b62:	682b      	ldr	r3, [r5, #0]
 8106b64:	b103      	cbz	r3, 8106b68 <_fstat_r+0x1c>
 8106b66:	6023      	str	r3, [r4, #0]
 8106b68:	bd38      	pop	{r3, r4, r5, pc}
 8106b6a:	bf00      	nop
 8106b6c:	10000288 	.word	0x10000288

08106b70 <_isatty_r>:
 8106b70:	b538      	push	{r3, r4, r5, lr}
 8106b72:	4d06      	ldr	r5, [pc, #24]	; (8106b8c <_isatty_r+0x1c>)
 8106b74:	2300      	movs	r3, #0
 8106b76:	4604      	mov	r4, r0
 8106b78:	4608      	mov	r0, r1
 8106b7a:	602b      	str	r3, [r5, #0]
 8106b7c:	f7fa fc59 	bl	8101432 <_isatty>
 8106b80:	1c43      	adds	r3, r0, #1
 8106b82:	d102      	bne.n	8106b8a <_isatty_r+0x1a>
 8106b84:	682b      	ldr	r3, [r5, #0]
 8106b86:	b103      	cbz	r3, 8106b8a <_isatty_r+0x1a>
 8106b88:	6023      	str	r3, [r4, #0]
 8106b8a:	bd38      	pop	{r3, r4, r5, pc}
 8106b8c:	10000288 	.word	0x10000288

08106b90 <_lseek_r>:
 8106b90:	b538      	push	{r3, r4, r5, lr}
 8106b92:	4d07      	ldr	r5, [pc, #28]	; (8106bb0 <_lseek_r+0x20>)
 8106b94:	4604      	mov	r4, r0
 8106b96:	4608      	mov	r0, r1
 8106b98:	4611      	mov	r1, r2
 8106b9a:	2200      	movs	r2, #0
 8106b9c:	602a      	str	r2, [r5, #0]
 8106b9e:	461a      	mov	r2, r3
 8106ba0:	f7fa fc52 	bl	8101448 <_lseek>
 8106ba4:	1c43      	adds	r3, r0, #1
 8106ba6:	d102      	bne.n	8106bae <_lseek_r+0x1e>
 8106ba8:	682b      	ldr	r3, [r5, #0]
 8106baa:	b103      	cbz	r3, 8106bae <_lseek_r+0x1e>
 8106bac:	6023      	str	r3, [r4, #0]
 8106bae:	bd38      	pop	{r3, r4, r5, pc}
 8106bb0:	10000288 	.word	0x10000288

08106bb4 <__malloc_lock>:
 8106bb4:	4801      	ldr	r0, [pc, #4]	; (8106bbc <__malloc_lock+0x8>)
 8106bb6:	f7ff bb55 	b.w	8106264 <__retarget_lock_acquire_recursive>
 8106bba:	bf00      	nop
 8106bbc:	10000280 	.word	0x10000280

08106bc0 <__malloc_unlock>:
 8106bc0:	4801      	ldr	r0, [pc, #4]	; (8106bc8 <__malloc_unlock+0x8>)
 8106bc2:	f7ff bb50 	b.w	8106266 <__retarget_lock_release_recursive>
 8106bc6:	bf00      	nop
 8106bc8:	10000280 	.word	0x10000280

08106bcc <_read_r>:
 8106bcc:	b538      	push	{r3, r4, r5, lr}
 8106bce:	4d07      	ldr	r5, [pc, #28]	; (8106bec <_read_r+0x20>)
 8106bd0:	4604      	mov	r4, r0
 8106bd2:	4608      	mov	r0, r1
 8106bd4:	4611      	mov	r1, r2
 8106bd6:	2200      	movs	r2, #0
 8106bd8:	602a      	str	r2, [r5, #0]
 8106bda:	461a      	mov	r2, r3
 8106bdc:	f7fa fbd4 	bl	8101388 <_read>
 8106be0:	1c43      	adds	r3, r0, #1
 8106be2:	d102      	bne.n	8106bea <_read_r+0x1e>
 8106be4:	682b      	ldr	r3, [r5, #0]
 8106be6:	b103      	cbz	r3, 8106bea <_read_r+0x1e>
 8106be8:	6023      	str	r3, [r4, #0]
 8106bea:	bd38      	pop	{r3, r4, r5, pc}
 8106bec:	10000288 	.word	0x10000288

08106bf0 <_init>:
 8106bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106bf2:	bf00      	nop
 8106bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106bf6:	bc08      	pop	{r3}
 8106bf8:	469e      	mov	lr, r3
 8106bfa:	4770      	bx	lr

08106bfc <_fini>:
 8106bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106bfe:	bf00      	nop
 8106c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106c02:	bc08      	pop	{r3}
 8106c04:	469e      	mov	lr, r3
 8106c06:	4770      	bx	lr
