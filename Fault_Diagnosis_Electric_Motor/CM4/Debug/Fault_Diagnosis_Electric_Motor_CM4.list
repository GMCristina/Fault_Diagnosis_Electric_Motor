
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b124  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0810b3c8  0810b3c8  0001b3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b8f4  0810b8f4  0001b8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b8fc  0810b8fc  0001b8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810b900  0810b900  0001b900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  10000000  0810b904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  100001e4  0810bae8  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100003fc  0810bae8  000203fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f743  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003237  00000000  00000000  0003f957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e18  00000000  00000000  00042b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d30  00000000  00000000  000439a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bee9  00000000  00000000  000446d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012c53  00000000  00000000  000805c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185e74  00000000  00000000  00093214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00219088  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000505c  00000000  00000000  002190dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e4 	.word	0x100001e4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810b3ac 	.word	0x0810b3ac

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e8 	.word	0x100001e8
 81002dc:	0810b3ac 	.word	0x0810b3ac

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a4 	b.w	81010f8 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468c      	mov	ip, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	f040 8083 	bne.w	8100f4a <__udivmoddi4+0x116>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4617      	mov	r7, r2
 8100e48:	d947      	bls.n	8100eda <__udivmoddi4+0xa6>
 8100e4a:	fab2 f282 	clz	r2, r2
 8100e4e:	b142      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	f1c2 0020 	rsb	r0, r2, #32
 8100e54:	fa24 f000 	lsr.w	r0, r4, r0
 8100e58:	4091      	lsls	r1, r2
 8100e5a:	4097      	lsls	r7, r2
 8100e5c:	ea40 0c01 	orr.w	ip, r0, r1
 8100e60:	4094      	lsls	r4, r2
 8100e62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100e66:	0c23      	lsrs	r3, r4, #16
 8100e68:	fbbc f6f8 	udiv	r6, ip, r8
 8100e6c:	fa1f fe87 	uxth.w	lr, r7
 8100e70:	fb08 c116 	mls	r1, r8, r6, ip
 8100e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e78:	fb06 f10e 	mul.w	r1, r6, lr
 8100e7c:	4299      	cmp	r1, r3
 8100e7e:	d909      	bls.n	8100e94 <__udivmoddi4+0x60>
 8100e80:	18fb      	adds	r3, r7, r3
 8100e82:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e86:	f080 8119 	bcs.w	81010bc <__udivmoddi4+0x288>
 8100e8a:	4299      	cmp	r1, r3
 8100e8c:	f240 8116 	bls.w	81010bc <__udivmoddi4+0x288>
 8100e90:	3e02      	subs	r6, #2
 8100e92:	443b      	add	r3, r7
 8100e94:	1a5b      	subs	r3, r3, r1
 8100e96:	b2a4      	uxth	r4, r4
 8100e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8100e9c:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea4:	fb00 fe0e 	mul.w	lr, r0, lr
 8100ea8:	45a6      	cmp	lr, r4
 8100eaa:	d909      	bls.n	8100ec0 <__udivmoddi4+0x8c>
 8100eac:	193c      	adds	r4, r7, r4
 8100eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb2:	f080 8105 	bcs.w	81010c0 <__udivmoddi4+0x28c>
 8100eb6:	45a6      	cmp	lr, r4
 8100eb8:	f240 8102 	bls.w	81010c0 <__udivmoddi4+0x28c>
 8100ebc:	3802      	subs	r0, #2
 8100ebe:	443c      	add	r4, r7
 8100ec0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100ec4:	eba4 040e 	sub.w	r4, r4, lr
 8100ec8:	2600      	movs	r6, #0
 8100eca:	b11d      	cbz	r5, 8100ed4 <__udivmoddi4+0xa0>
 8100ecc:	40d4      	lsrs	r4, r2
 8100ece:	2300      	movs	r3, #0
 8100ed0:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed4:	4631      	mov	r1, r6
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	b902      	cbnz	r2, 8100ede <__udivmoddi4+0xaa>
 8100edc:	deff      	udf	#255	; 0xff
 8100ede:	fab2 f282 	clz	r2, r2
 8100ee2:	2a00      	cmp	r2, #0
 8100ee4:	d150      	bne.n	8100f88 <__udivmoddi4+0x154>
 8100ee6:	1bcb      	subs	r3, r1, r7
 8100ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100eec:	fa1f f887 	uxth.w	r8, r7
 8100ef0:	2601      	movs	r6, #1
 8100ef2:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ef6:	0c21      	lsrs	r1, r4, #16
 8100ef8:	fb0e 331c 	mls	r3, lr, ip, r3
 8100efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f00:	fb08 f30c 	mul.w	r3, r8, ip
 8100f04:	428b      	cmp	r3, r1
 8100f06:	d907      	bls.n	8100f18 <__udivmoddi4+0xe4>
 8100f08:	1879      	adds	r1, r7, r1
 8100f0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100f0e:	d202      	bcs.n	8100f16 <__udivmoddi4+0xe2>
 8100f10:	428b      	cmp	r3, r1
 8100f12:	f200 80e9 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f16:	4684      	mov	ip, r0
 8100f18:	1ac9      	subs	r1, r1, r3
 8100f1a:	b2a3      	uxth	r3, r4
 8100f1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f20:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100f28:	fb08 f800 	mul.w	r8, r8, r0
 8100f2c:	45a0      	cmp	r8, r4
 8100f2e:	d907      	bls.n	8100f40 <__udivmoddi4+0x10c>
 8100f30:	193c      	adds	r4, r7, r4
 8100f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8100f36:	d202      	bcs.n	8100f3e <__udivmoddi4+0x10a>
 8100f38:	45a0      	cmp	r8, r4
 8100f3a:	f200 80d9 	bhi.w	81010f0 <__udivmoddi4+0x2bc>
 8100f3e:	4618      	mov	r0, r3
 8100f40:	eba4 0408 	sub.w	r4, r4, r8
 8100f44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f48:	e7bf      	b.n	8100eca <__udivmoddi4+0x96>
 8100f4a:	428b      	cmp	r3, r1
 8100f4c:	d909      	bls.n	8100f62 <__udivmoddi4+0x12e>
 8100f4e:	2d00      	cmp	r5, #0
 8100f50:	f000 80b1 	beq.w	81010b6 <__udivmoddi4+0x282>
 8100f54:	2600      	movs	r6, #0
 8100f56:	e9c5 0100 	strd	r0, r1, [r5]
 8100f5a:	4630      	mov	r0, r6
 8100f5c:	4631      	mov	r1, r6
 8100f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f62:	fab3 f683 	clz	r6, r3
 8100f66:	2e00      	cmp	r6, #0
 8100f68:	d14a      	bne.n	8101000 <__udivmoddi4+0x1cc>
 8100f6a:	428b      	cmp	r3, r1
 8100f6c:	d302      	bcc.n	8100f74 <__udivmoddi4+0x140>
 8100f6e:	4282      	cmp	r2, r0
 8100f70:	f200 80b8 	bhi.w	81010e4 <__udivmoddi4+0x2b0>
 8100f74:	1a84      	subs	r4, r0, r2
 8100f76:	eb61 0103 	sbc.w	r1, r1, r3
 8100f7a:	2001      	movs	r0, #1
 8100f7c:	468c      	mov	ip, r1
 8100f7e:	2d00      	cmp	r5, #0
 8100f80:	d0a8      	beq.n	8100ed4 <__udivmoddi4+0xa0>
 8100f82:	e9c5 4c00 	strd	r4, ip, [r5]
 8100f86:	e7a5      	b.n	8100ed4 <__udivmoddi4+0xa0>
 8100f88:	f1c2 0320 	rsb	r3, r2, #32
 8100f8c:	fa20 f603 	lsr.w	r6, r0, r3
 8100f90:	4097      	lsls	r7, r2
 8100f92:	fa01 f002 	lsl.w	r0, r1, r2
 8100f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f9a:	40d9      	lsrs	r1, r3
 8100f9c:	4330      	orrs	r0, r6
 8100f9e:	0c03      	lsrs	r3, r0, #16
 8100fa0:	fbb1 f6fe 	udiv	r6, r1, lr
 8100fa4:	fa1f f887 	uxth.w	r8, r7
 8100fa8:	fb0e 1116 	mls	r1, lr, r6, r1
 8100fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100fb0:	fb06 f108 	mul.w	r1, r6, r8
 8100fb4:	4299      	cmp	r1, r3
 8100fb6:	fa04 f402 	lsl.w	r4, r4, r2
 8100fba:	d909      	bls.n	8100fd0 <__udivmoddi4+0x19c>
 8100fbc:	18fb      	adds	r3, r7, r3
 8100fbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8100fc2:	f080 808d 	bcs.w	81010e0 <__udivmoddi4+0x2ac>
 8100fc6:	4299      	cmp	r1, r3
 8100fc8:	f240 808a 	bls.w	81010e0 <__udivmoddi4+0x2ac>
 8100fcc:	3e02      	subs	r6, #2
 8100fce:	443b      	add	r3, r7
 8100fd0:	1a5b      	subs	r3, r3, r1
 8100fd2:	b281      	uxth	r1, r0
 8100fd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8100fd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8100fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fe0:	fb00 f308 	mul.w	r3, r0, r8
 8100fe4:	428b      	cmp	r3, r1
 8100fe6:	d907      	bls.n	8100ff8 <__udivmoddi4+0x1c4>
 8100fe8:	1879      	adds	r1, r7, r1
 8100fea:	f100 3cff 	add.w	ip, r0, #4294967295
 8100fee:	d273      	bcs.n	81010d8 <__udivmoddi4+0x2a4>
 8100ff0:	428b      	cmp	r3, r1
 8100ff2:	d971      	bls.n	81010d8 <__udivmoddi4+0x2a4>
 8100ff4:	3802      	subs	r0, #2
 8100ff6:	4439      	add	r1, r7
 8100ff8:	1acb      	subs	r3, r1, r3
 8100ffa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100ffe:	e778      	b.n	8100ef2 <__udivmoddi4+0xbe>
 8101000:	f1c6 0c20 	rsb	ip, r6, #32
 8101004:	fa03 f406 	lsl.w	r4, r3, r6
 8101008:	fa22 f30c 	lsr.w	r3, r2, ip
 810100c:	431c      	orrs	r4, r3
 810100e:	fa20 f70c 	lsr.w	r7, r0, ip
 8101012:	fa01 f306 	lsl.w	r3, r1, r6
 8101016:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 810101a:	fa21 f10c 	lsr.w	r1, r1, ip
 810101e:	431f      	orrs	r7, r3
 8101020:	0c3b      	lsrs	r3, r7, #16
 8101022:	fbb1 f9fe 	udiv	r9, r1, lr
 8101026:	fa1f f884 	uxth.w	r8, r4
 810102a:	fb0e 1119 	mls	r1, lr, r9, r1
 810102e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8101032:	fb09 fa08 	mul.w	sl, r9, r8
 8101036:	458a      	cmp	sl, r1
 8101038:	fa02 f206 	lsl.w	r2, r2, r6
 810103c:	fa00 f306 	lsl.w	r3, r0, r6
 8101040:	d908      	bls.n	8101054 <__udivmoddi4+0x220>
 8101042:	1861      	adds	r1, r4, r1
 8101044:	f109 30ff 	add.w	r0, r9, #4294967295
 8101048:	d248      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 810104a:	458a      	cmp	sl, r1
 810104c:	d946      	bls.n	81010dc <__udivmoddi4+0x2a8>
 810104e:	f1a9 0902 	sub.w	r9, r9, #2
 8101052:	4421      	add	r1, r4
 8101054:	eba1 010a 	sub.w	r1, r1, sl
 8101058:	b2bf      	uxth	r7, r7
 810105a:	fbb1 f0fe 	udiv	r0, r1, lr
 810105e:	fb0e 1110 	mls	r1, lr, r0, r1
 8101062:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8101066:	fb00 f808 	mul.w	r8, r0, r8
 810106a:	45b8      	cmp	r8, r7
 810106c:	d907      	bls.n	810107e <__udivmoddi4+0x24a>
 810106e:	19e7      	adds	r7, r4, r7
 8101070:	f100 31ff 	add.w	r1, r0, #4294967295
 8101074:	d22e      	bcs.n	81010d4 <__udivmoddi4+0x2a0>
 8101076:	45b8      	cmp	r8, r7
 8101078:	d92c      	bls.n	81010d4 <__udivmoddi4+0x2a0>
 810107a:	3802      	subs	r0, #2
 810107c:	4427      	add	r7, r4
 810107e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101082:	eba7 0708 	sub.w	r7, r7, r8
 8101086:	fba0 8902 	umull	r8, r9, r0, r2
 810108a:	454f      	cmp	r7, r9
 810108c:	46c6      	mov	lr, r8
 810108e:	4649      	mov	r1, r9
 8101090:	d31a      	bcc.n	81010c8 <__udivmoddi4+0x294>
 8101092:	d017      	beq.n	81010c4 <__udivmoddi4+0x290>
 8101094:	b15d      	cbz	r5, 81010ae <__udivmoddi4+0x27a>
 8101096:	ebb3 020e 	subs.w	r2, r3, lr
 810109a:	eb67 0701 	sbc.w	r7, r7, r1
 810109e:	fa07 fc0c 	lsl.w	ip, r7, ip
 81010a2:	40f2      	lsrs	r2, r6
 81010a4:	ea4c 0202 	orr.w	r2, ip, r2
 81010a8:	40f7      	lsrs	r7, r6
 81010aa:	e9c5 2700 	strd	r2, r7, [r5]
 81010ae:	2600      	movs	r6, #0
 81010b0:	4631      	mov	r1, r6
 81010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81010b6:	462e      	mov	r6, r5
 81010b8:	4628      	mov	r0, r5
 81010ba:	e70b      	b.n	8100ed4 <__udivmoddi4+0xa0>
 81010bc:	4606      	mov	r6, r0
 81010be:	e6e9      	b.n	8100e94 <__udivmoddi4+0x60>
 81010c0:	4618      	mov	r0, r3
 81010c2:	e6fd      	b.n	8100ec0 <__udivmoddi4+0x8c>
 81010c4:	4543      	cmp	r3, r8
 81010c6:	d2e5      	bcs.n	8101094 <__udivmoddi4+0x260>
 81010c8:	ebb8 0e02 	subs.w	lr, r8, r2
 81010cc:	eb69 0104 	sbc.w	r1, r9, r4
 81010d0:	3801      	subs	r0, #1
 81010d2:	e7df      	b.n	8101094 <__udivmoddi4+0x260>
 81010d4:	4608      	mov	r0, r1
 81010d6:	e7d2      	b.n	810107e <__udivmoddi4+0x24a>
 81010d8:	4660      	mov	r0, ip
 81010da:	e78d      	b.n	8100ff8 <__udivmoddi4+0x1c4>
 81010dc:	4681      	mov	r9, r0
 81010de:	e7b9      	b.n	8101054 <__udivmoddi4+0x220>
 81010e0:	4666      	mov	r6, ip
 81010e2:	e775      	b.n	8100fd0 <__udivmoddi4+0x19c>
 81010e4:	4630      	mov	r0, r6
 81010e6:	e74a      	b.n	8100f7e <__udivmoddi4+0x14a>
 81010e8:	f1ac 0c02 	sub.w	ip, ip, #2
 81010ec:	4439      	add	r1, r7
 81010ee:	e713      	b.n	8100f18 <__udivmoddi4+0xe4>
 81010f0:	3802      	subs	r0, #2
 81010f2:	443c      	add	r4, r7
 81010f4:	e724      	b.n	8100f40 <__udivmoddi4+0x10c>
 81010f6:	bf00      	nop

081010f8 <__aeabi_idiv0>:
 81010f8:	4770      	bx	lr
 81010fa:	bf00      	nop

081010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010fc:	b480      	push	{r7}
 81010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101100:	4b0b      	ldr	r3, [pc, #44]	; (8101130 <SystemInit+0x34>)
 8101102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101106:	4a0a      	ldr	r2, [pc, #40]	; (8101130 <SystemInit+0x34>)
 8101108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101110:	4b07      	ldr	r3, [pc, #28]	; (8101130 <SystemInit+0x34>)
 8101112:	691b      	ldr	r3, [r3, #16]
 8101114:	4a06      	ldr	r2, [pc, #24]	; (8101130 <SystemInit+0x34>)
 8101116:	f043 0310 	orr.w	r3, r3, #16
 810111a:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810111c:	4b04      	ldr	r3, [pc, #16]	; (8101130 <SystemInit+0x34>)
 810111e:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8101122:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101124:	bf00      	nop
 8101126:	46bd      	mov	sp, r7
 8101128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810112c:	4770      	bx	lr
 810112e:	bf00      	nop
 8101130:	e000ed00 	.word	0xe000ed00

08101134 <ADE9000_Setup>:
#include "main.h"

int8_t flag_read = 0;
int32_t n_int = 0;

void ADE9000_Setup(){
 8101134:	b580      	push	{r7, lr}
 8101136:	b082      	sub	sp, #8
 8101138:	af00      	add	r7, sp, #0
	uint32_t value_reg_32;
	uint16_t value_reg_16;

	// ADDR_PGA_GAIN
	value_reg_16 = 0x0000; //gain all channel 1
 810113a:	2300      	movs	r3, #0
 810113c:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_PGA_GAIN,value_reg_16);
 810113e:	88fb      	ldrh	r3, [r7, #6]
 8101140:	4619      	mov	r1, r3
 8101142:	f240 40b9 	movw	r0, #1209	; 0x4b9
 8101146:	f000 f8e9 	bl	810131c <ADE9000_SPI_Write_16>

	//CONFIG2
	value_reg_16 = 	0x0C00;			//Default High pass corner frequency of 1.25Hz
 810114a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810114e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG2,value_reg_16);
 8101150:	88fb      	ldrh	r3, [r7, #6]
 8101152:	4619      	mov	r1, r3
 8101154:	f240 40af 	movw	r0, #1199	; 0x4af
 8101158:	f000 f8e0 	bl	810131c <ADE9000_SPI_Write_16>

	//CONFIG1
	//EXT_REF off
	value_reg_16 = 0x000000;
 810115c:	2300      	movs	r3, #0
 810115e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG1,value_reg_16);
 8101160:	88fb      	ldrh	r3, [r7, #6]
 8101162:	4619      	mov	r1, r3
 8101164:	f240 4081 	movw	r0, #1153	; 0x481
 8101168:	f000 f8d8 	bl	810131c <ADE9000_SPI_Write_16>

	//ACCMODE
	value_reg_16= 0x0000;			//3P4W Wye configuration
 810116c:	2300      	movs	r3, #0
 810116e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_ACCMODE,value_reg_16);
 8101170:	88fb      	ldrh	r3, [r7, #6]
 8101172:	4619      	mov	r1, r3
 8101174:	f240 4092 	movw	r0, #1170	; 0x492
 8101178:	f000 f8d0 	bl	810131c <ADE9000_SPI_Write_16>
	//value_reg_16 = 0x1020;//IN, sinc4, stop full, fixed rate, stop, tutti canali(0000)
	//value_reg_16 = 0x0029; //no IN, sinc4, stop full, fixed rate, stop, solo VA (1001)
	//value_reg_16 = 0x0021; //no IN, sinc4, stop full, fixed rate, stop, solo Ia e VA (0001)
	//value_reg_16 = 0x0221; //no IN, LPF, stop full, fixed rate, stop, solo Ia e VA (0001)

	value_reg_16 = 0x0000;
 810117c:	2300      	movs	r3, #0
 810117e:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_IN_EN<<12);
	value_reg_16 = value_reg_16 | (WF_SRC<<8);
	value_reg_16 = value_reg_16 | (WF_MODE<<6);
 8101180:	88fb      	ldrh	r3, [r7, #6]
 8101182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101186:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_CAP_SEL<<5);
 8101188:	88fb      	ldrh	r3, [r7, #6]
 810118a:	f043 0320 	orr.w	r3, r3, #32
 810118e:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | BURST_CHAN;
 8101190:	88fb      	ldrh	r3, [r7, #6]
 8101192:	f043 0301 	orr.w	r3, r3, #1
 8101196:	80fb      	strh	r3, [r7, #6]

	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101198:	88fb      	ldrh	r3, [r7, #6]
 810119a:	4619      	mov	r1, r3
 810119c:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81011a0:	f000 f8bc 	bl	810131c <ADE9000_SPI_Write_16>
	// 1 bit per pagina: pag15-pag0
	//fa PageFULL in STATUS0

	//value_reg_16 = 0x8000; //page 15
	//value_reg_16 = 0xFFFF; //all page
	value_reg_16 = 0x8080; //page 15, page 7 (metà)
 81011a4:	f248 0380 	movw	r3, #32896	; 0x8080
 81011a8:	80fb      	strh	r3, [r7, #6]
	//value_reg_16 = 0x0000; //no int
	ADE9000_SPI_Write_16(ADDR_WFB_PG_IRQEN,value_reg_16);
 81011aa:	88fb      	ldrh	r3, [r7, #6]
 81011ac:	4619      	mov	r1, r3
 81011ae:	f240 40a1 	movw	r0, #1185	; 0x4a1
 81011b2:	f000 f8b3 	bl	810131c <ADE9000_SPI_Write_16>

	//ADDR_MASK0
	//IRQ0 per full page (bit 17)
	//quando una delle pagine settate è piena
	value_reg_32 = 0x00020000;
 81011b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81011ba:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK0,value_reg_32);
 81011bc:	6839      	ldr	r1, [r7, #0]
 81011be:	f240 4005 	movw	r0, #1029	; 0x405
 81011c2:	f000 f8df 	bl	8101384 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK0);
 81011c6:	f240 4005 	movw	r0, #1029	; 0x405
 81011ca:	f000 f86b 	bl	81012a4 <ADE9000_SPI_Read_32>
 81011ce:	6038      	str	r0, [r7, #0]

	//ADDR_MASK1
	//disable all int
	value_reg_32 = 0x00000000;
 81011d0:	2300      	movs	r3, #0
 81011d2:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK1,value_reg_32);
 81011d4:	6839      	ldr	r1, [r7, #0]
 81011d6:	f240 4006 	movw	r0, #1030	; 0x406
 81011da:	f000 f8d3 	bl	8101384 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK1);
 81011de:	f240 4006 	movw	r0, #1030	; 0x406
 81011e2:	f000 f85f 	bl	81012a4 <ADE9000_SPI_Read_32>
 81011e6:	6038      	str	r0, [r7, #0]

	//ADDR_RUN
	//Start ADE9000 measurement
	value_reg_16 = 0x0001;
 81011e8:	2301      	movs	r3, #1
 81011ea:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16);
 81011ec:	88fb      	ldrh	r3, [r7, #6]
 81011ee:	4619      	mov	r1, r3
 81011f0:	f44f 6090 	mov.w	r0, #1152	; 0x480
 81011f4:	f000 f892 	bl	810131c <ADE9000_SPI_Write_16>
}
 81011f8:	bf00      	nop
 81011fa:	3708      	adds	r7, #8
 81011fc:	46bd      	mov	sp, r7
 81011fe:	bd80      	pop	{r7, pc}

08101200 <ADE9000_Power>:

//power-on sequence
void ADE9000_Power(void){
 8101200:	b580      	push	{r7, lr}
 8101202:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8101204:	2200      	movs	r2, #0
 8101206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810120a:	480c      	ldr	r0, [pc, #48]	; (810123c <ADE9000_Power+0x3c>)
 810120c:	f001 fa94 	bl	8102738 <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8101210:	2200      	movs	r2, #0
 8101212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101216:	4809      	ldr	r0, [pc, #36]	; (810123c <ADE9000_Power+0x3c>)
 8101218:	f001 fa8e 	bl	8102738 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 810121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101220:	f000 ff92 	bl	8102148 <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8101224:	2201      	movs	r2, #1
 8101226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 810122a:	4804      	ldr	r0, [pc, #16]	; (810123c <ADE9000_Power+0x3c>)
 810122c:	f001 fa84 	bl	8102738 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8101230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101234:	f000 ff88 	bl	8102148 <HAL_Delay>
    } while ((value_reg_32 & 0x00010000)==0);
    //Clear IRQ1
    value_reg_32 = value_reg_32 & 0x00010000;
    ADE9000_SPI_Write_32(ADDR_STATUS1,value_reg_32);
    */
}
 8101238:	bf00      	nop
 810123a:	bd80      	pop	{r7, pc}
 810123c:	58021000 	.word	0x58021000

08101240 <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 8101240:	b580      	push	{r7, lr}
 8101242:	b084      	sub	sp, #16
 8101244:	af00      	add	r7, sp, #0
 8101246:	4603      	mov	r3, r0
 8101248:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810124a:	88fb      	ldrh	r3, [r7, #6]
 810124c:	011b      	lsls	r3, r3, #4
 810124e:	b29b      	uxth	r3, r3
 8101250:	3308      	adds	r3, #8
 8101252:	b29b      	uxth	r3, r3
 8101254:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101256:	2200      	movs	r2, #0
 8101258:	f44f 7100 	mov.w	r1, #512	; 0x200
 810125c:	480f      	ldr	r0, [pc, #60]	; (810129c <ADE9000_SPI_Read_16+0x5c>)
 810125e:	f001 fa6b 	bl	8102738 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101262:	f107 0108 	add.w	r1, r7, #8
 8101266:	2364      	movs	r3, #100	; 0x64
 8101268:	2201      	movs	r2, #1
 810126a:	480d      	ldr	r0, [pc, #52]	; (81012a0 <ADE9000_SPI_Read_16+0x60>)
 810126c:	f003 f972 	bl	8104554 <HAL_SPI_Transmit>
 8101270:	4603      	mov	r3, r0
 8101272:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 8101274:	f107 010c 	add.w	r1, r7, #12
 8101278:	2364      	movs	r3, #100	; 0x64
 810127a:	2201      	movs	r2, #1
 810127c:	4808      	ldr	r0, [pc, #32]	; (81012a0 <ADE9000_SPI_Read_16+0x60>)
 810127e:	f003 fb57 	bl	8104930 <HAL_SPI_Receive>
 8101282:	4603      	mov	r3, r0
 8101284:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101286:	2201      	movs	r2, #1
 8101288:	f44f 7100 	mov.w	r1, #512	; 0x200
 810128c:	4803      	ldr	r0, [pc, #12]	; (810129c <ADE9000_SPI_Read_16+0x5c>)
 810128e:	f001 fa53 	bl	8102738 <HAL_GPIO_WritePin>

	return data.data_16;
 8101292:	89bb      	ldrh	r3, [r7, #12]
}
 8101294:	4618      	mov	r0, r3
 8101296:	3710      	adds	r7, #16
 8101298:	46bd      	mov	sp, r7
 810129a:	bd80      	pop	{r7, pc}
 810129c:	58021800 	.word	0x58021800
 81012a0:	100002a4 	.word	0x100002a4

081012a4 <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 81012a4:	b580      	push	{r7, lr}
 81012a6:	b086      	sub	sp, #24
 81012a8:	af00      	add	r7, sp, #0
 81012aa:	4603      	mov	r3, r0
 81012ac:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81012ae:	88fb      	ldrh	r3, [r7, #6]
 81012b0:	011b      	lsls	r3, r3, #4
 81012b2:	b29b      	uxth	r3, r3
 81012b4:	3308      	adds	r3, #8
 81012b6:	b29b      	uxth	r3, r3
 81012b8:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81012ba:	2200      	movs	r2, #0
 81012bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 81012c0:	4814      	ldr	r0, [pc, #80]	; (8101314 <ADE9000_SPI_Read_32+0x70>)
 81012c2:	f001 fa39 	bl	8102738 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81012c6:	f107 010c 	add.w	r1, r7, #12
 81012ca:	2364      	movs	r3, #100	; 0x64
 81012cc:	2201      	movs	r2, #1
 81012ce:	4812      	ldr	r0, [pc, #72]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012d0:	f003 f940 	bl	8104554 <HAL_SPI_Transmit>
 81012d4:	4603      	mov	r3, r0
 81012d6:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81012d8:	f107 0110 	add.w	r1, r7, #16
 81012dc:	3102      	adds	r1, #2
 81012de:	2364      	movs	r3, #100	; 0x64
 81012e0:	2201      	movs	r2, #1
 81012e2:	480d      	ldr	r0, [pc, #52]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012e4:	f003 fb24 	bl	8104930 <HAL_SPI_Receive>
 81012e8:	4603      	mov	r3, r0
 81012ea:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81012ec:	f107 0110 	add.w	r1, r7, #16
 81012f0:	2364      	movs	r3, #100	; 0x64
 81012f2:	2201      	movs	r2, #1
 81012f4:	4808      	ldr	r0, [pc, #32]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012f6:	f003 fb1b 	bl	8104930 <HAL_SPI_Receive>
 81012fa:	4603      	mov	r3, r0
 81012fc:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81012fe:	2201      	movs	r2, #1
 8101300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101304:	4803      	ldr	r0, [pc, #12]	; (8101314 <ADE9000_SPI_Read_32+0x70>)
 8101306:	f001 fa17 	bl	8102738 <HAL_GPIO_WritePin>

	return data.data_32;
 810130a:	693b      	ldr	r3, [r7, #16]
}
 810130c:	4618      	mov	r0, r3
 810130e:	3718      	adds	r7, #24
 8101310:	46bd      	mov	sp, r7
 8101312:	bd80      	pop	{r7, pc}
 8101314:	58021800 	.word	0x58021800
 8101318:	100002a4 	.word	0x100002a4

0810131c <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 810131c:	b580      	push	{r7, lr}
 810131e:	b084      	sub	sp, #16
 8101320:	af00      	add	r7, sp, #0
 8101322:	4603      	mov	r3, r0
 8101324:	460a      	mov	r2, r1
 8101326:	80fb      	strh	r3, [r7, #6]
 8101328:	4613      	mov	r3, r2
 810132a:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 810132c:	88fb      	ldrh	r3, [r7, #6]
 810132e:	011b      	lsls	r3, r3, #4
 8101330:	b29b      	uxth	r3, r3
 8101332:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101334:	2200      	movs	r2, #0
 8101336:	f44f 7100 	mov.w	r1, #512	; 0x200
 810133a:	4810      	ldr	r0, [pc, #64]	; (810137c <ADE9000_SPI_Write_16+0x60>)
 810133c:	f001 f9fc 	bl	8102738 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101340:	f107 010c 	add.w	r1, r7, #12
 8101344:	2364      	movs	r3, #100	; 0x64
 8101346:	2201      	movs	r2, #1
 8101348:	480d      	ldr	r0, [pc, #52]	; (8101380 <ADE9000_SPI_Write_16+0x64>)
 810134a:	f003 f903 	bl	8104554 <HAL_SPI_Transmit>
 810134e:	4603      	mov	r3, r0
 8101350:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 8101352:	88bb      	ldrh	r3, [r7, #4]
 8101354:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 8101356:	f107 0108 	add.w	r1, r7, #8
 810135a:	2364      	movs	r3, #100	; 0x64
 810135c:	2201      	movs	r2, #1
 810135e:	4808      	ldr	r0, [pc, #32]	; (8101380 <ADE9000_SPI_Write_16+0x64>)
 8101360:	f003 f8f8 	bl	8104554 <HAL_SPI_Transmit>
 8101364:	4603      	mov	r3, r0
 8101366:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101368:	2201      	movs	r2, #1
 810136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810136e:	4803      	ldr	r0, [pc, #12]	; (810137c <ADE9000_SPI_Write_16+0x60>)
 8101370:	f001 f9e2 	bl	8102738 <HAL_GPIO_WritePin>

}
 8101374:	bf00      	nop
 8101376:	3710      	adds	r7, #16
 8101378:	46bd      	mov	sp, r7
 810137a:	bd80      	pop	{r7, pc}
 810137c:	58021800 	.word	0x58021800
 8101380:	100002a4 	.word	0x100002a4

08101384 <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 8101384:	b580      	push	{r7, lr}
 8101386:	b084      	sub	sp, #16
 8101388:	af00      	add	r7, sp, #0
 810138a:	4603      	mov	r3, r0
 810138c:	6039      	str	r1, [r7, #0]
 810138e:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8101390:	88fb      	ldrh	r3, [r7, #6]
 8101392:	011b      	lsls	r3, r3, #4
 8101394:	b29b      	uxth	r3, r3
 8101396:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101398:	2200      	movs	r2, #0
 810139a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810139e:	4815      	ldr	r0, [pc, #84]	; (81013f4 <ADE9000_SPI_Write_32+0x70>)
 81013a0:	f001 f9ca 	bl	8102738 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81013a4:	f107 010c 	add.w	r1, r7, #12
 81013a8:	2364      	movs	r3, #100	; 0x64
 81013aa:	2201      	movs	r2, #1
 81013ac:	4812      	ldr	r0, [pc, #72]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013ae:	f003 f8d1 	bl	8104554 <HAL_SPI_Transmit>
 81013b2:	4603      	mov	r3, r0
 81013b4:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 81013b6:	683b      	ldr	r3, [r7, #0]
 81013b8:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 81013ba:	f107 0108 	add.w	r1, r7, #8
 81013be:	3102      	adds	r1, #2
 81013c0:	2364      	movs	r3, #100	; 0x64
 81013c2:	2201      	movs	r2, #1
 81013c4:	480c      	ldr	r0, [pc, #48]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013c6:	f003 f8c5 	bl	8104554 <HAL_SPI_Transmit>
 81013ca:	4603      	mov	r3, r0
 81013cc:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81013ce:	f107 0108 	add.w	r1, r7, #8
 81013d2:	2364      	movs	r3, #100	; 0x64
 81013d4:	2201      	movs	r2, #1
 81013d6:	4808      	ldr	r0, [pc, #32]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013d8:	f003 f8bc 	bl	8104554 <HAL_SPI_Transmit>
 81013dc:	4603      	mov	r3, r0
 81013de:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81013e0:	2201      	movs	r2, #1
 81013e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 81013e6:	4803      	ldr	r0, [pc, #12]	; (81013f4 <ADE9000_SPI_Write_32+0x70>)
 81013e8:	f001 f9a6 	bl	8102738 <HAL_GPIO_WritePin>

}
 81013ec:	bf00      	nop
 81013ee:	3710      	adds	r7, #16
 81013f0:	46bd      	mov	sp, r7
 81013f2:	bd80      	pop	{r7, pc}
 81013f4:	58021800 	.word	0x58021800
 81013f8:	100002a4 	.word	0x100002a4

081013fc <Start_Waveform_Buffer>:


void Start_Waveform_Buffer() {
 81013fc:	b580      	push	{r7, lr}
 81013fe:	b082      	sub	sp, #8
 8101400:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 8101402:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101406:	f7ff ff1b 	bl	8101240 <ADE9000_SPI_Read_16>
 810140a:	4603      	mov	r3, r0
 810140c:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16|0x0010);
 810140e:	88fb      	ldrh	r3, [r7, #6]
 8101410:	f043 0310 	orr.w	r3, r3, #16
 8101414:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101416:	88fb      	ldrh	r3, [r7, #6]
 8101418:	4619      	mov	r1, r3
 810141a:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810141e:	f7ff ff7d 	bl	810131c <ADE9000_SPI_Write_16>
}
 8101422:	bf00      	nop
 8101424:	3708      	adds	r7, #8
 8101426:	46bd      	mov	sp, r7
 8101428:	bd80      	pop	{r7, pc}

0810142a <Stop_Waveform_Buffer>:

void Stop_Waveform_Buffer(){
 810142a:	b580      	push	{r7, lr}
 810142c:	b082      	sub	sp, #8
 810142e:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 8101430:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101434:	f7ff ff04 	bl	8101240 <ADE9000_SPI_Read_16>
 8101438:	4603      	mov	r3, r0
 810143a:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16 & 0xFFEF);
 810143c:	88fb      	ldrh	r3, [r7, #6]
 810143e:	f023 0310 	bic.w	r3, r3, #16
 8101442:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101444:	88fb      	ldrh	r3, [r7, #6]
 8101446:	4619      	mov	r1, r3
 8101448:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810144c:	f7ff ff66 	bl	810131c <ADE9000_SPI_Write_16>
}
 8101450:	bf00      	nop
 8101452:	3708      	adds	r7, #8
 8101454:	46bd      	mov	sp, r7
 8101456:	bd80      	pop	{r7, pc}

08101458 <ADE9000_SPI_Burst_Read_two_ch>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_SPI_Burst_Read_two_ch(uint16_t Address, uint16_t n, int32_t* i, int32_t* v){
 8101458:	b580      	push	{r7, lr}
 810145a:	b088      	sub	sp, #32
 810145c:	af00      	add	r7, sp, #0
 810145e:	60ba      	str	r2, [r7, #8]
 8101460:	607b      	str	r3, [r7, #4]
 8101462:	4603      	mov	r3, r0
 8101464:	81fb      	strh	r3, [r7, #14]
 8101466:	460b      	mov	r3, r1
 8101468:	81bb      	strh	r3, [r7, #12]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810146a:	89fb      	ldrh	r3, [r7, #14]
 810146c:	011b      	lsls	r3, r3, #4
 810146e:	b29b      	uxth	r3, r3
 8101470:	3308      	adds	r3, #8
 8101472:	b29b      	uxth	r3, r3
 8101474:	82bb      	strh	r3, [r7, #20]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101476:	2200      	movs	r2, #0
 8101478:	f44f 7100 	mov.w	r1, #512	; 0x200
 810147c:	4829      	ldr	r0, [pc, #164]	; (8101524 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 810147e:	f001 f95b 	bl	8102738 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101482:	f107 0114 	add.w	r1, r7, #20
 8101486:	2364      	movs	r3, #100	; 0x64
 8101488:	2201      	movs	r2, #1
 810148a:	4827      	ldr	r0, [pc, #156]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 810148c:	f003 f862 	bl	8104554 <HAL_SPI_Transmit>
 8101490:	4603      	mov	r3, r0
 8101492:	777b      	strb	r3, [r7, #29]

	for(uint16_t j=0; j<n; j++){
 8101494:	2300      	movs	r3, #0
 8101496:	83fb      	strh	r3, [r7, #30]
 8101498:	e036      	b.n	8101508 <ADE9000_SPI_Burst_Read_two_ch+0xb0>
		//Receive data

		//NB: CONTROLLARE ORDINE (REGISTRI è I,V)
		ret = HAL_SPI_Receive(&hspi1,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 810149a:	f107 0118 	add.w	r1, r7, #24
 810149e:	3102      	adds	r1, #2
 81014a0:	2364      	movs	r3, #100	; 0x64
 81014a2:	2201      	movs	r2, #1
 81014a4:	4820      	ldr	r0, [pc, #128]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014a6:	f003 fa43 	bl	8104930 <HAL_SPI_Receive>
 81014aa:	4603      	mov	r3, r0
 81014ac:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi1,app.data_8,SIZE_16,TIMEOUT_SPI);
 81014ae:	f107 0118 	add.w	r1, r7, #24
 81014b2:	2364      	movs	r3, #100	; 0x64
 81014b4:	2201      	movs	r2, #1
 81014b6:	481c      	ldr	r0, [pc, #112]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014b8:	f003 fa3a 	bl	8104930 <HAL_SPI_Receive>
 81014bc:	4603      	mov	r3, r0
 81014be:	777b      	strb	r3, [r7, #29]
		*(i + j)= app.data_32;
 81014c0:	69b9      	ldr	r1, [r7, #24]
 81014c2:	8bfb      	ldrh	r3, [r7, #30]
 81014c4:	009b      	lsls	r3, r3, #2
 81014c6:	68ba      	ldr	r2, [r7, #8]
 81014c8:	4413      	add	r3, r2
 81014ca:	460a      	mov	r2, r1
 81014cc:	601a      	str	r2, [r3, #0]

		ret = HAL_SPI_Receive(&hspi1,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81014ce:	f107 0118 	add.w	r1, r7, #24
 81014d2:	3102      	adds	r1, #2
 81014d4:	2364      	movs	r3, #100	; 0x64
 81014d6:	2201      	movs	r2, #1
 81014d8:	4813      	ldr	r0, [pc, #76]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014da:	f003 fa29 	bl	8104930 <HAL_SPI_Receive>
 81014de:	4603      	mov	r3, r0
 81014e0:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi1,app.data_8,SIZE_16,TIMEOUT_SPI);
 81014e2:	f107 0118 	add.w	r1, r7, #24
 81014e6:	2364      	movs	r3, #100	; 0x64
 81014e8:	2201      	movs	r2, #1
 81014ea:	480f      	ldr	r0, [pc, #60]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014ec:	f003 fa20 	bl	8104930 <HAL_SPI_Receive>
 81014f0:	4603      	mov	r3, r0
 81014f2:	777b      	strb	r3, [r7, #29]
		*(v + j)= app.data_32;
 81014f4:	69b9      	ldr	r1, [r7, #24]
 81014f6:	8bfb      	ldrh	r3, [r7, #30]
 81014f8:	009b      	lsls	r3, r3, #2
 81014fa:	687a      	ldr	r2, [r7, #4]
 81014fc:	4413      	add	r3, r2
 81014fe:	460a      	mov	r2, r1
 8101500:	601a      	str	r2, [r3, #0]
	for(uint16_t j=0; j<n; j++){
 8101502:	8bfb      	ldrh	r3, [r7, #30]
 8101504:	3301      	adds	r3, #1
 8101506:	83fb      	strh	r3, [r7, #30]
 8101508:	8bfa      	ldrh	r2, [r7, #30]
 810150a:	89bb      	ldrh	r3, [r7, #12]
 810150c:	429a      	cmp	r2, r3
 810150e:	d3c4      	bcc.n	810149a <ADE9000_SPI_Burst_Read_two_ch+0x42>
	}

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101510:	2201      	movs	r2, #1
 8101512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101516:	4803      	ldr	r0, [pc, #12]	; (8101524 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 8101518:	f001 f90e 	bl	8102738 <HAL_GPIO_WritePin>
}
 810151c:	bf00      	nop
 810151e:	3720      	adds	r7, #32
 8101520:	46bd      	mov	sp, r7
 8101522:	bd80      	pop	{r7, pc}
 8101524:	58021800 	.word	0x58021800
 8101528:	100002a4 	.word	0x100002a4
 810152c:	00000000 	.word	0x00000000

08101530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101530:	b580      	push	{r7, lr}
 8101532:	f5ad 3d7a 	sub.w	sp, sp, #256000	; 0x3e800
 8101536:	b088      	sub	sp, #32
 8101538:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810153a:	4bbf      	ldr	r3, [pc, #764]	; (8101838 <main+0x308>)
 810153c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101540:	4abd      	ldr	r2, [pc, #756]	; (8101838 <main+0x308>)
 8101542:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101546:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810154a:	4bbb      	ldr	r3, [pc, #748]	; (8101838 <main+0x308>)
 810154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101550:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8101554:	f107 0318 	add.w	r3, r7, #24
 8101558:	3b18      	subs	r3, #24
 810155a:	601a      	str	r2, [r3, #0]
 810155c:	f107 0318 	add.w	r3, r7, #24
 8101560:	3b18      	subs	r3, #24
 8101562:	681b      	ldr	r3, [r3, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101564:	2001      	movs	r0, #1
 8101566:	f001 f91b 	bl	81027a0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810156a:	f001 f9a5 	bl	81028b8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810156e:	2201      	movs	r2, #1
 8101570:	2102      	movs	r1, #2
 8101572:	2000      	movs	r0, #0
 8101574:	f001 f926 	bl	81027c4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101578:	4bb0      	ldr	r3, [pc, #704]	; (810183c <main+0x30c>)
 810157a:	681b      	ldr	r3, [r3, #0]
 810157c:	091b      	lsrs	r3, r3, #4
 810157e:	f003 030f 	and.w	r3, r3, #15
 8101582:	2b07      	cmp	r3, #7
 8101584:	d108      	bne.n	8101598 <main+0x68>
 8101586:	4bae      	ldr	r3, [pc, #696]	; (8101840 <main+0x310>)
 8101588:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810158c:	4aac      	ldr	r2, [pc, #688]	; (8101840 <main+0x310>)
 810158e:	f043 0301 	orr.w	r3, r3, #1
 8101592:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101596:	e007      	b.n	81015a8 <main+0x78>
 8101598:	4ba9      	ldr	r3, [pc, #676]	; (8101840 <main+0x310>)
 810159a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810159e:	4aa8      	ldr	r2, [pc, #672]	; (8101840 <main+0x310>)
 81015a0:	f043 0301 	orr.w	r3, r3, #1
 81015a4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81015a8:	f000 fd1a 	bl	8101fe0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81015ac:	f000 f9fa 	bl	81019a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81015b0:	f000 f9ac 	bl	810190c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 81015b4:	f000 f954 	bl	8101860 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ADE9000_Power();
 81015b8:	f7ff fe22 	bl	8101200 <ADE9000_Power>

//  test_read_write_reg();
  setvbuf( stdin, NULL, _IONBF, 0 );
 81015bc:	4ba1      	ldr	r3, [pc, #644]	; (8101844 <main+0x314>)
 81015be:	681b      	ldr	r3, [r3, #0]
 81015c0:	6858      	ldr	r0, [r3, #4]
 81015c2:	2300      	movs	r3, #0
 81015c4:	2202      	movs	r2, #2
 81015c6:	2100      	movs	r1, #0
 81015c8:	f006 faf6 	bl	8107bb8 <setvbuf>

  ADE9000_Setup();
 81015cc:	f7ff fdb2 	bl	8101134 <ADE9000_Setup>

  printf("%d,%d,%d\r\n",N_BUFFER, N_SAMPLE,BURST_READ_N);
 81015d0:	2380      	movs	r3, #128	; 0x80
 81015d2:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 81015d6:	217d      	movs	r1, #125	; 0x7d
 81015d8:	489b      	ldr	r0, [pc, #620]	; (8101848 <main+0x318>)
 81015da:	f006 fa4f 	bl	8107a7c <iprintf>

  printf("fdti: %f\t fdtv: %f \r\n",CURRENT_TRANSFER_FUNCTION,VOLTAGE_TRANSFER_FUNCTION);
 81015de:	a392      	add	r3, pc, #584	; (adr r3, 8101828 <main+0x2f8>)
 81015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81015e4:	e9cd 2300 	strd	r2, r3, [sp]
 81015e8:	a391      	add	r3, pc, #580	; (adr r3, 8101830 <main+0x300>)
 81015ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81015ee:	4897      	ldr	r0, [pc, #604]	; (810184c <main+0x31c>)
 81015f0:	f006 fa44 	bl	8107a7c <iprintf>
  //ADE9000_Calibration();

  int32_t va[N_SAMPLE], ia[N_SAMPLE];
  uint16_t index = 0;
 81015f4:	2300      	movs	r3, #0
 81015f6:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81015fa:	f102 0216 	add.w	r2, r2, #22
 81015fe:	8013      	strh	r3, [r2, #0]
  uint32_t start;
  uint32_t value_reg_32 = 0x00020000;
 8101600:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8101604:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8101608:	f102 020c 	add.w	r2, r2, #12
 810160c:	6013      	str	r3, [r2, #0]
  uint16_t value_reg_16;

  Start_Waveform_Buffer();
 810160e:	f7ff fef5 	bl	81013fc <Start_Waveform_Buffer>

	HAL_Delay(24);
	Stop_Waveform_Buffer();
*/

  while(index < N_SAMPLE){
 8101612:	e0c3      	b.n	810179c <main+0x26c>
 		  while(flag_read == 0){}
 8101614:	bf00      	nop
 8101616:	4b8e      	ldr	r3, [pc, #568]	; (8101850 <main+0x320>)
 8101618:	f993 3000 	ldrsb.w	r3, [r3]
 810161c:	2b00      	cmp	r3, #0
 810161e:	d0fa      	beq.n	8101616 <main+0xe6>
 		 //uint32_t tickstart = HAL_GetTick();

		  //printf("nint: %d\t", n_int);
 		  flag_read = 0;
 8101620:	4b8b      	ldr	r3, [pc, #556]	; (8101850 <main+0x320>)
 8101622:	2200      	movs	r2, #0
 8101624:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8101626:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 810162a:	f103 030c 	add.w	r3, r3, #12
 810162e:	6819      	ldr	r1, [r3, #0]
 8101630:	f240 4002 	movw	r0, #1026	; 0x402
 8101634:	f7ff fea6 	bl	8101384 <ADE9000_SPI_Write_32>

		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 8101638:	f240 40a3 	movw	r0, #1187	; 0x4a3
 810163c:	f7ff fe00 	bl	8101240 <ADE9000_SPI_Read_16>
 8101640:	4603      	mov	r3, r0
 8101642:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8101646:	f102 020a 	add.w	r2, r2, #10
 810164a:	8013      	strh	r3, [r2, #0]
		  value_reg_16 = (value_reg_16>>12)&0x0F;
 810164c:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8101650:	f103 030a 	add.w	r3, r3, #10
 8101654:	881b      	ldrh	r3, [r3, #0]
 8101656:	0b1b      	lsrs	r3, r3, #12
 8101658:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 810165c:	f102 020a 	add.w	r2, r2, #10
 8101660:	8013      	strh	r3, [r2, #0]
		  printf("pg: %i\r\n",value_reg_16);
 8101662:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8101666:	f103 030a 	add.w	r3, r3, #10
 810166a:	881b      	ldrh	r3, [r3, #0]
 810166c:	4619      	mov	r1, r3
 810166e:	4879      	ldr	r0, [pc, #484]	; (8101854 <main+0x324>)
 8101670:	f006 fa04 	bl	8107a7c <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR;
 8101674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101678:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 810167c:	f102 0204 	add.w	r2, r2, #4
 8101680:	6013      	str	r3, [r2, #0]



 		 //ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,ia + index);
 		 ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 8101682:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8101686:	f103 0304 	add.w	r3, r3, #4
 810168a:	681b      	ldr	r3, [r3, #0]
 810168c:	b298      	uxth	r0, r3
 810168e:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8101692:	f103 0316 	add.w	r3, r3, #22
 8101696:	881b      	ldrh	r3, [r3, #0]
 8101698:	009a      	lsls	r2, r3, #2
 810169a:	f107 0318 	add.w	r3, r7, #24
 810169e:	3b14      	subs	r3, #20
 81016a0:	1899      	adds	r1, r3, r2
 81016a2:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81016a6:	f103 0316 	add.w	r3, r3, #22
 81016aa:	881b      	ldrh	r3, [r3, #0]
 81016ac:	009a      	lsls	r2, r3, #2
 81016ae:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 81016b2:	f103 0318 	add.w	r3, r3, #24
 81016b6:	3b14      	subs	r3, #20
 81016b8:	4413      	add	r3, r2
 81016ba:	460a      	mov	r2, r1
 81016bc:	2180      	movs	r1, #128	; 0x80
 81016be:	f7ff fecb 	bl	8101458 <ADE9000_SPI_Burst_Read_two_ch>

 		  //printf("1 index %d\r\n",index);
 		  index += BURST_READ_N;
 81016c2:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81016c6:	f103 0316 	add.w	r3, r3, #22
 81016ca:	881b      	ldrh	r3, [r3, #0]
 81016cc:	3380      	adds	r3, #128	; 0x80
 81016ce:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81016d2:	f102 0216 	add.w	r2, r2, #22
 81016d6:	8013      	strh	r3, [r2, #0]
 		/*
 		 uint32_t tickend = HAL_GetTick();
 		 uint32_t ntick = tickend-tickstart;
 		 printf("TIME: %d MS\r\n",ntick);
 		*/
 		  while(flag_read == 0){}
 81016d8:	bf00      	nop
 81016da:	4b5d      	ldr	r3, [pc, #372]	; (8101850 <main+0x320>)
 81016dc:	f993 3000 	ldrsb.w	r3, [r3]
 81016e0:	2b00      	cmp	r3, #0
 81016e2:	d0fa      	beq.n	81016da <main+0x1aa>

  		 //tickstart = HAL_GetTick();
 		  //printf("nint: %d\t", n_int);
 		  flag_read = 0;
 81016e4:	4b5a      	ldr	r3, [pc, #360]	; (8101850 <main+0x320>)
 81016e6:	2200      	movs	r2, #0
 81016e8:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 81016ea:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81016ee:	f103 030c 	add.w	r3, r3, #12
 81016f2:	6819      	ldr	r1, [r3, #0]
 81016f4:	f240 4002 	movw	r0, #1026	; 0x402
 81016f8:	f7ff fe44 	bl	8101384 <ADE9000_SPI_Write_32>
 		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 81016fc:	f240 40a3 	movw	r0, #1187	; 0x4a3
 8101700:	f7ff fd9e 	bl	8101240 <ADE9000_SPI_Read_16>
 8101704:	4603      	mov	r3, r0
 8101706:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 810170a:	f102 020a 	add.w	r2, r2, #10
 810170e:	8013      	strh	r3, [r2, #0]
 		  value_reg_16 = (value_reg_16>>12)&0x0F;
 8101710:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8101714:	f103 030a 	add.w	r3, r3, #10
 8101718:	881b      	ldrh	r3, [r3, #0]
 810171a:	0b1b      	lsrs	r3, r3, #12
 810171c:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8101720:	f102 020a 	add.w	r2, r2, #10
 8101724:	8013      	strh	r3, [r2, #0]
 		  printf("pg: %i\r\n",value_reg_16);
 8101726:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 810172a:	f103 030a 	add.w	r3, r3, #10
 810172e:	881b      	ldrh	r3, [r3, #0]
 8101730:	4619      	mov	r1, r3
 8101732:	4848      	ldr	r0, [pc, #288]	; (8101854 <main+0x324>)
 8101734:	f006 f9a2 	bl	8107a7c <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR + BURST_READ_N*8;
 8101738:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810173c:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8101740:	f102 0204 	add.w	r2, r2, #4
 8101744:	6013      	str	r3, [r2, #0]


 		 //ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,ia + index);
 		 ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 8101746:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 810174a:	f103 0304 	add.w	r3, r3, #4
 810174e:	681b      	ldr	r3, [r3, #0]
 8101750:	b298      	uxth	r0, r3
 8101752:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8101756:	f103 0316 	add.w	r3, r3, #22
 810175a:	881b      	ldrh	r3, [r3, #0]
 810175c:	009a      	lsls	r2, r3, #2
 810175e:	f107 0318 	add.w	r3, r7, #24
 8101762:	3b14      	subs	r3, #20
 8101764:	1899      	adds	r1, r3, r2
 8101766:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 810176a:	f103 0316 	add.w	r3, r3, #22
 810176e:	881b      	ldrh	r3, [r3, #0]
 8101770:	009a      	lsls	r2, r3, #2
 8101772:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8101776:	f103 0318 	add.w	r3, r3, #24
 810177a:	3b14      	subs	r3, #20
 810177c:	4413      	add	r3, r2
 810177e:	460a      	mov	r2, r1
 8101780:	2180      	movs	r1, #128	; 0x80
 8101782:	f7ff fe69 	bl	8101458 <ADE9000_SPI_Burst_Read_two_ch>

 		 //printf("2 index %d\r\n",index);
 		 index += BURST_READ_N;
 8101786:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 810178a:	f103 0316 	add.w	r3, r3, #22
 810178e:	881b      	ldrh	r3, [r3, #0]
 8101790:	3380      	adds	r3, #128	; 0x80
 8101792:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8101796:	f102 0216 	add.w	r2, r2, #22
 810179a:	8013      	strh	r3, [r2, #0]
  while(index < N_SAMPLE){
 810179c:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81017a0:	f103 0316 	add.w	r3, r3, #22
 81017a4:	881b      	ldrh	r3, [r3, #0]
 81017a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 81017aa:	f4ff af33 	bcc.w	8101614 <main+0xe4>
   		 ntick = tickend-tickstart;
   		 printf("TIME: %d MS\r\n",ntick);
*/

 }
  Stop_Waveform_Buffer();
 81017ae:	f7ff fe3c 	bl	810142a <Stop_Waveform_Buffer>
  //ADE9000_Conv_ADC(va,N_SAMPLE);
  //ADE9000_Conv_ADC(ia,N_SAMPLE);

  printf("VA,IA\r\n");
 81017b2:	4829      	ldr	r0, [pc, #164]	; (8101858 <main+0x328>)
 81017b4:	f006 f9e8 	bl	8107b88 <puts>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 81017b8:	2300      	movs	r3, #0
 81017ba:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81017be:	f102 0210 	add.w	r2, r2, #16
 81017c2:	6013      	str	r3, [r2, #0]
 81017c4:	e024      	b.n	8101810 <main+0x2e0>
	  printf("%d,%d\r\n",va[i],ia[i]);
 81017c6:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 81017ca:	f103 0318 	add.w	r3, r3, #24
 81017ce:	3b14      	subs	r3, #20
 81017d0:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81017d4:	f102 0210 	add.w	r2, r2, #16
 81017d8:	6812      	ldr	r2, [r2, #0]
 81017da:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81017de:	f107 0318 	add.w	r3, r7, #24
 81017e2:	3b14      	subs	r3, #20
 81017e4:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81017e8:	f102 0210 	add.w	r2, r2, #16
 81017ec:	6812      	ldr	r2, [r2, #0]
 81017ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81017f2:	461a      	mov	r2, r3
 81017f4:	4819      	ldr	r0, [pc, #100]	; (810185c <main+0x32c>)
 81017f6:	f006 f941 	bl	8107a7c <iprintf>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 81017fa:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81017fe:	f103 0310 	add.w	r3, r3, #16
 8101802:	681b      	ldr	r3, [r3, #0]
 8101804:	3301      	adds	r3, #1
 8101806:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 810180a:	f102 0210 	add.w	r2, r2, #16
 810180e:	6013      	str	r3, [r2, #0]
 8101810:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8101814:	f103 0310 	add.w	r3, r3, #16
 8101818:	681b      	ldr	r3, [r3, #0]
 810181a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 810181e:	d3d2      	bcc.n	81017c6 <main+0x296>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101820:	e7fe      	b.n	8101820 <main+0x2f0>
 8101822:	bf00      	nop
 8101824:	f3af 8000 	nop.w
 8101828:	a726abf2 	.word	0xa726abf2
 810182c:	3f547455 	.word	0x3f547455
 8101830:	19ce075f 	.word	0x19ce075f
 8101834:	3f7bda51 	.word	0x3f7bda51
 8101838:	58024400 	.word	0x58024400
 810183c:	e000ed00 	.word	0xe000ed00
 8101840:	58026400 	.word	0x58026400
 8101844:	10000010 	.word	0x10000010
 8101848:	0810b3c8 	.word	0x0810b3c8
 810184c:	0810b3d4 	.word	0x0810b3d4
 8101850:	10000200 	.word	0x10000200
 8101854:	0810b3ec 	.word	0x0810b3ec
 8101858:	0810b3f8 	.word	0x0810b3f8
 810185c:	0810b400 	.word	0x0810b400

08101860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8101860:	b580      	push	{r7, lr}
 8101862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8101864:	4b27      	ldr	r3, [pc, #156]	; (8101904 <MX_SPI1_Init+0xa4>)
 8101866:	4a28      	ldr	r2, [pc, #160]	; (8101908 <MX_SPI1_Init+0xa8>)
 8101868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 810186a:	4b26      	ldr	r3, [pc, #152]	; (8101904 <MX_SPI1_Init+0xa4>)
 810186c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101870:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101872:	4b24      	ldr	r3, [pc, #144]	; (8101904 <MX_SPI1_Init+0xa4>)
 8101874:	2200      	movs	r2, #0
 8101876:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8101878:	4b22      	ldr	r3, [pc, #136]	; (8101904 <MX_SPI1_Init+0xa4>)
 810187a:	220f      	movs	r2, #15
 810187c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 810187e:	4b21      	ldr	r3, [pc, #132]	; (8101904 <MX_SPI1_Init+0xa4>)
 8101880:	2200      	movs	r2, #0
 8101882:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101884:	4b1f      	ldr	r3, [pc, #124]	; (8101904 <MX_SPI1_Init+0xa4>)
 8101886:	2200      	movs	r2, #0
 8101888:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 810188a:	4b1e      	ldr	r3, [pc, #120]	; (8101904 <MX_SPI1_Init+0xa4>)
 810188c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101890:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8101892:	4b1c      	ldr	r3, [pc, #112]	; (8101904 <MX_SPI1_Init+0xa4>)
 8101894:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8101898:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810189a:	4b1a      	ldr	r3, [pc, #104]	; (8101904 <MX_SPI1_Init+0xa4>)
 810189c:	2200      	movs	r2, #0
 810189e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81018a0:	4b18      	ldr	r3, [pc, #96]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018a2:	2200      	movs	r2, #0
 81018a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81018a6:	4b17      	ldr	r3, [pc, #92]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018a8:	2200      	movs	r2, #0
 81018aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81018ac:	4b15      	ldr	r3, [pc, #84]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018ae:	2200      	movs	r2, #0
 81018b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 81018b2:	4b14      	ldr	r3, [pc, #80]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018b4:	2200      	movs	r2, #0
 81018b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81018b8:	4b12      	ldr	r3, [pc, #72]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018ba:	2200      	movs	r2, #0
 81018bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81018be:	4b11      	ldr	r3, [pc, #68]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018c0:	2200      	movs	r2, #0
 81018c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81018c4:	4b0f      	ldr	r3, [pc, #60]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018c6:	2200      	movs	r2, #0
 81018c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 81018ca:	4b0e      	ldr	r3, [pc, #56]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018cc:	2200      	movs	r2, #0
 81018ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 81018d0:	4b0c      	ldr	r3, [pc, #48]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018d2:	2200      	movs	r2, #0
 81018d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 81018d6:	4b0b      	ldr	r3, [pc, #44]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018d8:	2200      	movs	r2, #0
 81018da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 81018dc:	4b09      	ldr	r3, [pc, #36]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018de:	2200      	movs	r2, #0
 81018e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 81018e2:	4b08      	ldr	r3, [pc, #32]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018e4:	2200      	movs	r2, #0
 81018e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81018e8:	4b06      	ldr	r3, [pc, #24]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018ea:	2200      	movs	r2, #0
 81018ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 81018ee:	4805      	ldr	r0, [pc, #20]	; (8101904 <MX_SPI1_Init+0xa4>)
 81018f0:	f002 fd2a 	bl	8104348 <HAL_SPI_Init>
 81018f4:	4603      	mov	r3, r0
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d001      	beq.n	81018fe <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 81018fa:	f000 f94b 	bl	8101b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 81018fe:	bf00      	nop
 8101900:	bd80      	pop	{r7, pc}
 8101902:	bf00      	nop
 8101904:	100002a4 	.word	0x100002a4
 8101908:	40013000 	.word	0x40013000

0810190c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 810190c:	b580      	push	{r7, lr}
 810190e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101910:	4b22      	ldr	r3, [pc, #136]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101912:	4a23      	ldr	r2, [pc, #140]	; (81019a0 <MX_USART3_UART_Init+0x94>)
 8101914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101916:	4b21      	ldr	r3, [pc, #132]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 810191c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810191e:	4b1f      	ldr	r3, [pc, #124]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101920:	2200      	movs	r2, #0
 8101922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101924:	4b1d      	ldr	r3, [pc, #116]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101926:	2200      	movs	r2, #0
 8101928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810192a:	4b1c      	ldr	r3, [pc, #112]	; (810199c <MX_USART3_UART_Init+0x90>)
 810192c:	2200      	movs	r2, #0
 810192e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101930:	4b1a      	ldr	r3, [pc, #104]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101932:	220c      	movs	r2, #12
 8101934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101936:	4b19      	ldr	r3, [pc, #100]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101938:	2200      	movs	r2, #0
 810193a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810193c:	4b17      	ldr	r3, [pc, #92]	; (810199c <MX_USART3_UART_Init+0x90>)
 810193e:	2200      	movs	r2, #0
 8101940:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101942:	4b16      	ldr	r3, [pc, #88]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101944:	2200      	movs	r2, #0
 8101946:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101948:	4b14      	ldr	r3, [pc, #80]	; (810199c <MX_USART3_UART_Init+0x90>)
 810194a:	2200      	movs	r2, #0
 810194c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810194e:	4b13      	ldr	r3, [pc, #76]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101950:	2200      	movs	r2, #0
 8101952:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101954:	4811      	ldr	r0, [pc, #68]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101956:	f003 fdad 	bl	81054b4 <HAL_UART_Init>
 810195a:	4603      	mov	r3, r0
 810195c:	2b00      	cmp	r3, #0
 810195e:	d001      	beq.n	8101964 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8101960:	f000 f918 	bl	8101b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101964:	2100      	movs	r1, #0
 8101966:	480d      	ldr	r0, [pc, #52]	; (810199c <MX_USART3_UART_Init+0x90>)
 8101968:	f004 feac 	bl	81066c4 <HAL_UARTEx_SetTxFifoThreshold>
 810196c:	4603      	mov	r3, r0
 810196e:	2b00      	cmp	r3, #0
 8101970:	d001      	beq.n	8101976 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8101972:	f000 f90f 	bl	8101b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101976:	2100      	movs	r1, #0
 8101978:	4808      	ldr	r0, [pc, #32]	; (810199c <MX_USART3_UART_Init+0x90>)
 810197a:	f004 fee1 	bl	8106740 <HAL_UARTEx_SetRxFifoThreshold>
 810197e:	4603      	mov	r3, r0
 8101980:	2b00      	cmp	r3, #0
 8101982:	d001      	beq.n	8101988 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101984:	f000 f906 	bl	8101b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101988:	4804      	ldr	r0, [pc, #16]	; (810199c <MX_USART3_UART_Init+0x90>)
 810198a:	f004 fe62 	bl	8106652 <HAL_UARTEx_DisableFifoMode>
 810198e:	4603      	mov	r3, r0
 8101990:	2b00      	cmp	r3, #0
 8101992:	d001      	beq.n	8101998 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8101994:	f000 f8fe 	bl	8101b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101998:	bf00      	nop
 810199a:	bd80      	pop	{r7, pc}
 810199c:	10000214 	.word	0x10000214
 81019a0:	40004800 	.word	0x40004800

081019a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81019a4:	b580      	push	{r7, lr}
 81019a6:	b08a      	sub	sp, #40	; 0x28
 81019a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019aa:	f107 0314 	add.w	r3, r7, #20
 81019ae:	2200      	movs	r2, #0
 81019b0:	601a      	str	r2, [r3, #0]
 81019b2:	605a      	str	r2, [r3, #4]
 81019b4:	609a      	str	r2, [r3, #8]
 81019b6:	60da      	str	r2, [r3, #12]
 81019b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81019ba:	4b4e      	ldr	r3, [pc, #312]	; (8101af4 <MX_GPIO_Init+0x150>)
 81019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019c0:	4a4c      	ldr	r2, [pc, #304]	; (8101af4 <MX_GPIO_Init+0x150>)
 81019c2:	f043 0301 	orr.w	r3, r3, #1
 81019c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019ca:	4b4a      	ldr	r3, [pc, #296]	; (8101af4 <MX_GPIO_Init+0x150>)
 81019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019d0:	f003 0301 	and.w	r3, r3, #1
 81019d4:	613b      	str	r3, [r7, #16]
 81019d6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 81019d8:	4b46      	ldr	r3, [pc, #280]	; (8101af4 <MX_GPIO_Init+0x150>)
 81019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019de:	4a45      	ldr	r2, [pc, #276]	; (8101af4 <MX_GPIO_Init+0x150>)
 81019e0:	f043 0310 	orr.w	r3, r3, #16
 81019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81019e8:	4b42      	ldr	r3, [pc, #264]	; (8101af4 <MX_GPIO_Init+0x150>)
 81019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019ee:	f003 0310 	and.w	r3, r3, #16
 81019f2:	60fb      	str	r3, [r7, #12]
 81019f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81019f6:	4b3f      	ldr	r3, [pc, #252]	; (8101af4 <MX_GPIO_Init+0x150>)
 81019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81019fc:	4a3d      	ldr	r2, [pc, #244]	; (8101af4 <MX_GPIO_Init+0x150>)
 81019fe:	f043 0308 	orr.w	r3, r3, #8
 8101a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a06:	4b3b      	ldr	r3, [pc, #236]	; (8101af4 <MX_GPIO_Init+0x150>)
 8101a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a0c:	f003 0308 	and.w	r3, r3, #8
 8101a10:	60bb      	str	r3, [r7, #8]
 8101a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101a14:	4b37      	ldr	r3, [pc, #220]	; (8101af4 <MX_GPIO_Init+0x150>)
 8101a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a1a:	4a36      	ldr	r2, [pc, #216]	; (8101af4 <MX_GPIO_Init+0x150>)
 8101a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101a20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a24:	4b33      	ldr	r3, [pc, #204]	; (8101af4 <MX_GPIO_Init+0x150>)
 8101a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101a2e:	607b      	str	r3, [r7, #4]
 8101a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101a32:	4b30      	ldr	r3, [pc, #192]	; (8101af4 <MX_GPIO_Init+0x150>)
 8101a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a38:	4a2e      	ldr	r2, [pc, #184]	; (8101af4 <MX_GPIO_Init+0x150>)
 8101a3a:	f043 0302 	orr.w	r3, r3, #2
 8101a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a42:	4b2c      	ldr	r3, [pc, #176]	; (8101af4 <MX_GPIO_Init+0x150>)
 8101a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a48:	f003 0302 	and.w	r3, r3, #2
 8101a4c:	603b      	str	r3, [r7, #0]
 8101a4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADE9000_Reset_Pin|ADE9000_PM1_Pin, GPIO_PIN_RESET);
 8101a50:	2200      	movs	r2, #0
 8101a52:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8101a56:	4828      	ldr	r0, [pc, #160]	; (8101af8 <MX_GPIO_Init+0x154>)
 8101a58:	f000 fe6e 	bl	8102738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADE9000_CS_GPIO_Port, ADE9000_CS_Pin, GPIO_PIN_SET);
 8101a5c:	2201      	movs	r2, #1
 8101a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101a62:	4826      	ldr	r0, [pc, #152]	; (8101afc <MX_GPIO_Init+0x158>)
 8101a64:	f000 fe68 	bl	8102738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADE9000_Reset_Pin ADE9000_PM1_Pin */
  GPIO_InitStruct.Pin = ADE9000_Reset_Pin|ADE9000_PM1_Pin;
 8101a68:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8101a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101a6e:	2301      	movs	r3, #1
 8101a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a72:	2300      	movs	r3, #0
 8101a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a76:	2300      	movs	r3, #0
 8101a78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101a7a:	f107 0314 	add.w	r3, r7, #20
 8101a7e:	4619      	mov	r1, r3
 8101a80:	481d      	ldr	r0, [pc, #116]	; (8101af8 <MX_GPIO_Init+0x154>)
 8101a82:	f000 fca9 	bl	81023d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ1_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ1_Pin;
 8101a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8101a8c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8101a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a92:	2300      	movs	r3, #0
 8101a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8101a96:	f107 0314 	add.w	r3, r7, #20
 8101a9a:	4619      	mov	r1, r3
 8101a9c:	4816      	ldr	r0, [pc, #88]	; (8101af8 <MX_GPIO_Init+0x154>)
 8101a9e:	f000 fc9b 	bl	81023d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_CS_Pin */
  GPIO_InitStruct.Pin = ADE9000_CS_Pin;
 8101aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101aa8:	2301      	movs	r3, #1
 8101aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101aac:	2300      	movs	r3, #0
 8101aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ab0:	2300      	movs	r3, #0
 8101ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADE9000_CS_GPIO_Port, &GPIO_InitStruct);
 8101ab4:	f107 0314 	add.w	r3, r7, #20
 8101ab8:	4619      	mov	r1, r3
 8101aba:	4810      	ldr	r0, [pc, #64]	; (8101afc <MX_GPIO_Init+0x158>)
 8101abc:	f000 fc8c 	bl	81023d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ0_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ0_Pin;
 8101ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8101ac6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8101aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101acc:	2300      	movs	r3, #0
 8101ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ0_GPIO_Port, &GPIO_InitStruct);
 8101ad0:	f107 0314 	add.w	r3, r7, #20
 8101ad4:	4619      	mov	r1, r3
 8101ad6:	4809      	ldr	r0, [pc, #36]	; (8101afc <MX_GPIO_Init+0x158>)
 8101ad8:	f000 fc7e 	bl	81023d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8101adc:	2200      	movs	r2, #0
 8101ade:	2100      	movs	r1, #0
 8101ae0:	2028      	movs	r0, #40	; 0x28
 8101ae2:	f000 fc30 	bl	8102346 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8101ae6:	2028      	movs	r0, #40	; 0x28
 8101ae8:	f000 fc47 	bl	810237a <HAL_NVIC_EnableIRQ>

}
 8101aec:	bf00      	nop
 8101aee:	3728      	adds	r7, #40	; 0x28
 8101af0:	46bd      	mov	sp, r7
 8101af2:	bd80      	pop	{r7, pc}
 8101af4:	58024400 	.word	0x58024400
 8101af8:	58021000 	.word	0x58021000
 8101afc:	58021800 	.word	0x58021800

08101b00 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8101b00:	b580      	push	{r7, lr}
 8101b02:	b082      	sub	sp, #8
 8101b04:	af00      	add	r7, sp, #0
 8101b06:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101b08:	1d39      	adds	r1, r7, #4
 8101b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b0e:	2201      	movs	r2, #1
 8101b10:	4803      	ldr	r0, [pc, #12]	; (8101b20 <__io_putchar+0x20>)
 8101b12:	f003 fd1f 	bl	8105554 <HAL_UART_Transmit>
	return ch;
 8101b16:	687b      	ldr	r3, [r7, #4]
}
 8101b18:	4618      	mov	r0, r3
 8101b1a:	3708      	adds	r7, #8
 8101b1c:	46bd      	mov	sp, r7
 8101b1e:	bd80      	pop	{r7, pc}
 8101b20:	10000214 	.word	0x10000214

08101b24 <__io_getchar>:

int __io_getchar(void)
{
 8101b24:	b580      	push	{r7, lr}
 8101b26:	b082      	sub	sp, #8
 8101b28:	af00      	add	r7, sp, #0

	uint8_t ch;
	// Clear the Overrun flag just before receiving the first character
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8101b2a:	4b0b      	ldr	r3, [pc, #44]	; (8101b58 <__io_getchar+0x34>)
 8101b2c:	681b      	ldr	r3, [r3, #0]
 8101b2e:	2208      	movs	r2, #8
 8101b30:	621a      	str	r2, [r3, #32]

	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101b32:	1df9      	adds	r1, r7, #7
 8101b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b38:	2201      	movs	r2, #1
 8101b3a:	4807      	ldr	r0, [pc, #28]	; (8101b58 <__io_getchar+0x34>)
 8101b3c:	f003 fda0 	bl	8105680 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101b40:	1df9      	adds	r1, r7, #7
 8101b42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b46:	2201      	movs	r2, #1
 8101b48:	4803      	ldr	r0, [pc, #12]	; (8101b58 <__io_getchar+0x34>)
 8101b4a:	f003 fd03 	bl	8105554 <HAL_UART_Transmit>

	return ch;
 8101b4e:	79fb      	ldrb	r3, [r7, #7]
}
 8101b50:	4618      	mov	r0, r3
 8101b52:	3708      	adds	r7, #8
 8101b54:	46bd      	mov	sp, r7
 8101b56:	bd80      	pop	{r7, pc}
 8101b58:	10000214 	.word	0x10000214

08101b5c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8101b5c:	b480      	push	{r7}
 8101b5e:	b083      	sub	sp, #12
 8101b60:	af00      	add	r7, sp, #0
 8101b62:	4603      	mov	r3, r0
 8101b64:	80fb      	strh	r3, [r7, #6]
	// If the interrupt source is pin IRQ0
	if (GPIO_Pin == ADE9000_IRQ0_Pin)
 8101b66:	88fb      	ldrh	r3, [r7, #6]
 8101b68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101b6c:	d107      	bne.n	8101b7e <HAL_GPIO_EXTI_Callback+0x22>
	{
		//printf("IRQ0s\r\n");
		flag_read = 1;
 8101b6e:	4b07      	ldr	r3, [pc, #28]	; (8101b8c <HAL_GPIO_EXTI_Callback+0x30>)
 8101b70:	2201      	movs	r2, #1
 8101b72:	701a      	strb	r2, [r3, #0]
		n_int ++;
 8101b74:	4b06      	ldr	r3, [pc, #24]	; (8101b90 <HAL_GPIO_EXTI_Callback+0x34>)
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	3301      	adds	r3, #1
 8101b7a:	4a05      	ldr	r2, [pc, #20]	; (8101b90 <HAL_GPIO_EXTI_Callback+0x34>)
 8101b7c:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == ADE9000_IRQ1_Pin)
		{
			//printf("IRQ1\r\n");
		}
}
 8101b7e:	bf00      	nop
 8101b80:	370c      	adds	r7, #12
 8101b82:	46bd      	mov	sp, r7
 8101b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b88:	4770      	bx	lr
 8101b8a:	bf00      	nop
 8101b8c:	10000200 	.word	0x10000200
 8101b90:	10000204 	.word	0x10000204

08101b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101b94:	b480      	push	{r7}
 8101b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101b98:	b672      	cpsid	i
}
 8101b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101b9c:	e7fe      	b.n	8101b9c <Error_Handler+0x8>
	...

08101ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101ba0:	b480      	push	{r7}
 8101ba2:	b083      	sub	sp, #12
 8101ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101ba6:	4b0a      	ldr	r3, [pc, #40]	; (8101bd0 <HAL_MspInit+0x30>)
 8101ba8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101bac:	4a08      	ldr	r2, [pc, #32]	; (8101bd0 <HAL_MspInit+0x30>)
 8101bae:	f043 0302 	orr.w	r3, r3, #2
 8101bb2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101bb6:	4b06      	ldr	r3, [pc, #24]	; (8101bd0 <HAL_MspInit+0x30>)
 8101bb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101bbc:	f003 0302 	and.w	r3, r3, #2
 8101bc0:	607b      	str	r3, [r7, #4]
 8101bc2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101bc4:	bf00      	nop
 8101bc6:	370c      	adds	r7, #12
 8101bc8:	46bd      	mov	sp, r7
 8101bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bce:	4770      	bx	lr
 8101bd0:	58024400 	.word	0x58024400

08101bd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101bd4:	b580      	push	{r7, lr}
 8101bd6:	b08a      	sub	sp, #40	; 0x28
 8101bd8:	af00      	add	r7, sp, #0
 8101bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101bdc:	f107 0314 	add.w	r3, r7, #20
 8101be0:	2200      	movs	r2, #0
 8101be2:	601a      	str	r2, [r3, #0]
 8101be4:	605a      	str	r2, [r3, #4]
 8101be6:	609a      	str	r2, [r3, #8]
 8101be8:	60da      	str	r2, [r3, #12]
 8101bea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	681b      	ldr	r3, [r3, #0]
 8101bf0:	4a31      	ldr	r2, [pc, #196]	; (8101cb8 <HAL_SPI_MspInit+0xe4>)
 8101bf2:	4293      	cmp	r3, r2
 8101bf4:	d15c      	bne.n	8101cb0 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101bf6:	4b31      	ldr	r3, [pc, #196]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101bfc:	4a2f      	ldr	r2, [pc, #188]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101bfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101c02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101c06:	4b2d      	ldr	r3, [pc, #180]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101c10:	613b      	str	r3, [r7, #16]
 8101c12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101c14:	4b29      	ldr	r3, [pc, #164]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c1a:	4a28      	ldr	r2, [pc, #160]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101c1c:	f043 0301 	orr.w	r3, r3, #1
 8101c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c24:	4b25      	ldr	r3, [pc, #148]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c2a:	f003 0301 	and.w	r3, r3, #1
 8101c2e:	60fb      	str	r3, [r7, #12]
 8101c30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c32:	4b22      	ldr	r3, [pc, #136]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c38:	4a20      	ldr	r2, [pc, #128]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101c3a:	f043 0302 	orr.w	r3, r3, #2
 8101c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c42:	4b1e      	ldr	r3, [pc, #120]	; (8101cbc <HAL_SPI_MspInit+0xe8>)
 8101c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c48:	f003 0302 	and.w	r3, r3, #2
 8101c4c:	60bb      	str	r3, [r7, #8]
 8101c4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101c50:	2320      	movs	r3, #32
 8101c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c54:	2302      	movs	r3, #2
 8101c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8101c58:	2302      	movs	r3, #2
 8101c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101c5c:	2303      	movs	r3, #3
 8101c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101c60:	2305      	movs	r3, #5
 8101c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c64:	f107 0314 	add.w	r3, r7, #20
 8101c68:	4619      	mov	r1, r3
 8101c6a:	4815      	ldr	r0, [pc, #84]	; (8101cc0 <HAL_SPI_MspInit+0xec>)
 8101c6c:	f000 fbb4 	bl	81023d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101c70:	2340      	movs	r3, #64	; 0x40
 8101c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c74:	2302      	movs	r3, #2
 8101c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c78:	2300      	movs	r3, #0
 8101c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101c7c:	2303      	movs	r3, #3
 8101c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101c80:	2305      	movs	r3, #5
 8101c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c84:	f107 0314 	add.w	r3, r7, #20
 8101c88:	4619      	mov	r1, r3
 8101c8a:	480d      	ldr	r0, [pc, #52]	; (8101cc0 <HAL_SPI_MspInit+0xec>)
 8101c8c:	f000 fba4 	bl	81023d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101c90:	2320      	movs	r3, #32
 8101c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c94:	2302      	movs	r3, #2
 8101c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c98:	2300      	movs	r3, #0
 8101c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101c9c:	2303      	movs	r3, #3
 8101c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101ca0:	2305      	movs	r3, #5
 8101ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101ca4:	f107 0314 	add.w	r3, r7, #20
 8101ca8:	4619      	mov	r1, r3
 8101caa:	4806      	ldr	r0, [pc, #24]	; (8101cc4 <HAL_SPI_MspInit+0xf0>)
 8101cac:	f000 fb94 	bl	81023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8101cb0:	bf00      	nop
 8101cb2:	3728      	adds	r7, #40	; 0x28
 8101cb4:	46bd      	mov	sp, r7
 8101cb6:	bd80      	pop	{r7, pc}
 8101cb8:	40013000 	.word	0x40013000
 8101cbc:	58024400 	.word	0x58024400
 8101cc0:	58020000 	.word	0x58020000
 8101cc4:	58020400 	.word	0x58020400

08101cc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101cc8:	b580      	push	{r7, lr}
 8101cca:	b0b8      	sub	sp, #224	; 0xe0
 8101ccc:	af00      	add	r7, sp, #0
 8101cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101cd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101cd4:	2200      	movs	r2, #0
 8101cd6:	601a      	str	r2, [r3, #0]
 8101cd8:	605a      	str	r2, [r3, #4]
 8101cda:	609a      	str	r2, [r3, #8]
 8101cdc:	60da      	str	r2, [r3, #12]
 8101cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101ce0:	f107 0310 	add.w	r3, r7, #16
 8101ce4:	22bc      	movs	r2, #188	; 0xbc
 8101ce6:	2100      	movs	r1, #0
 8101ce8:	4618      	mov	r0, r3
 8101cea:	f004 ff9a 	bl	8106c22 <memset>
  if(huart->Instance==USART3)
 8101cee:	687b      	ldr	r3, [r7, #4]
 8101cf0:	681b      	ldr	r3, [r3, #0]
 8101cf2:	4a25      	ldr	r2, [pc, #148]	; (8101d88 <HAL_UART_MspInit+0xc0>)
 8101cf4:	4293      	cmp	r3, r2
 8101cf6:	d142      	bne.n	8101d7e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101cf8:	2302      	movs	r3, #2
 8101cfa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101cfc:	2300      	movs	r3, #0
 8101cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d02:	f107 0310 	add.w	r3, r7, #16
 8101d06:	4618      	mov	r0, r3
 8101d08:	f000 ffbc 	bl	8102c84 <HAL_RCCEx_PeriphCLKConfig>
 8101d0c:	4603      	mov	r3, r0
 8101d0e:	2b00      	cmp	r3, #0
 8101d10:	d001      	beq.n	8101d16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101d12:	f7ff ff3f 	bl	8101b94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101d16:	4b1d      	ldr	r3, [pc, #116]	; (8101d8c <HAL_UART_MspInit+0xc4>)
 8101d18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d1c:	4a1b      	ldr	r2, [pc, #108]	; (8101d8c <HAL_UART_MspInit+0xc4>)
 8101d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101d22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101d26:	4b19      	ldr	r3, [pc, #100]	; (8101d8c <HAL_UART_MspInit+0xc4>)
 8101d28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101d30:	60fb      	str	r3, [r7, #12]
 8101d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101d34:	4b15      	ldr	r3, [pc, #84]	; (8101d8c <HAL_UART_MspInit+0xc4>)
 8101d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d3a:	4a14      	ldr	r2, [pc, #80]	; (8101d8c <HAL_UART_MspInit+0xc4>)
 8101d3c:	f043 0308 	orr.w	r3, r3, #8
 8101d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d44:	4b11      	ldr	r3, [pc, #68]	; (8101d8c <HAL_UART_MspInit+0xc4>)
 8101d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d4a:	f003 0308 	and.w	r3, r3, #8
 8101d4e:	60bb      	str	r3, [r7, #8]
 8101d50:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101d56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101d5a:	2302      	movs	r3, #2
 8101d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101d60:	2300      	movs	r3, #0
 8101d62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101d66:	2300      	movs	r3, #0
 8101d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101d6c:	2307      	movs	r3, #7
 8101d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101d72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d76:	4619      	mov	r1, r3
 8101d78:	4805      	ldr	r0, [pc, #20]	; (8101d90 <HAL_UART_MspInit+0xc8>)
 8101d7a:	f000 fb2d 	bl	81023d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101d7e:	bf00      	nop
 8101d80:	37e0      	adds	r7, #224	; 0xe0
 8101d82:	46bd      	mov	sp, r7
 8101d84:	bd80      	pop	{r7, pc}
 8101d86:	bf00      	nop
 8101d88:	40004800 	.word	0x40004800
 8101d8c:	58024400 	.word	0x58024400
 8101d90:	58020c00 	.word	0x58020c00

08101d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101d94:	b480      	push	{r7}
 8101d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101d98:	e7fe      	b.n	8101d98 <NMI_Handler+0x4>

08101d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101d9a:	b480      	push	{r7}
 8101d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101d9e:	e7fe      	b.n	8101d9e <HardFault_Handler+0x4>

08101da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101da0:	b480      	push	{r7}
 8101da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101da4:	e7fe      	b.n	8101da4 <MemManage_Handler+0x4>

08101da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101da6:	b480      	push	{r7}
 8101da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101daa:	e7fe      	b.n	8101daa <BusFault_Handler+0x4>

08101dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101dac:	b480      	push	{r7}
 8101dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101db0:	e7fe      	b.n	8101db0 <UsageFault_Handler+0x4>

08101db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101db2:	b480      	push	{r7}
 8101db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101db6:	bf00      	nop
 8101db8:	46bd      	mov	sp, r7
 8101dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dbe:	4770      	bx	lr

08101dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101dc0:	b480      	push	{r7}
 8101dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101dc4:	bf00      	nop
 8101dc6:	46bd      	mov	sp, r7
 8101dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dcc:	4770      	bx	lr

08101dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101dce:	b480      	push	{r7}
 8101dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101dd2:	bf00      	nop
 8101dd4:	46bd      	mov	sp, r7
 8101dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dda:	4770      	bx	lr

08101ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101ddc:	b580      	push	{r7, lr}
 8101dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101de0:	f000 f992 	bl	8102108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101de4:	bf00      	nop
 8101de6:	bd80      	pop	{r7, pc}

08101de8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101de8:	b580      	push	{r7, lr}
 8101dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADE9000_IRQ1_Pin);
 8101dec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101df0:	f000 fcbb 	bl	810276a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADE9000_PM1_Pin);
 8101df4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8101df8:	f000 fcb7 	bl	810276a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101dfc:	bf00      	nop
 8101dfe:	bd80      	pop	{r7, pc}

08101e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101e00:	b480      	push	{r7}
 8101e02:	af00      	add	r7, sp, #0
	return 1;
 8101e04:	2301      	movs	r3, #1
}
 8101e06:	4618      	mov	r0, r3
 8101e08:	46bd      	mov	sp, r7
 8101e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e0e:	4770      	bx	lr

08101e10 <_kill>:

int _kill(int pid, int sig)
{
 8101e10:	b580      	push	{r7, lr}
 8101e12:	b082      	sub	sp, #8
 8101e14:	af00      	add	r7, sp, #0
 8101e16:	6078      	str	r0, [r7, #4]
 8101e18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101e1a:	f004 fd1d 	bl	8106858 <__errno>
 8101e1e:	4603      	mov	r3, r0
 8101e20:	2216      	movs	r2, #22
 8101e22:	601a      	str	r2, [r3, #0]
	return -1;
 8101e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e28:	4618      	mov	r0, r3
 8101e2a:	3708      	adds	r7, #8
 8101e2c:	46bd      	mov	sp, r7
 8101e2e:	bd80      	pop	{r7, pc}

08101e30 <_exit>:

void _exit (int status)
{
 8101e30:	b580      	push	{r7, lr}
 8101e32:	b082      	sub	sp, #8
 8101e34:	af00      	add	r7, sp, #0
 8101e36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101e38:	f04f 31ff 	mov.w	r1, #4294967295
 8101e3c:	6878      	ldr	r0, [r7, #4]
 8101e3e:	f7ff ffe7 	bl	8101e10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101e42:	e7fe      	b.n	8101e42 <_exit+0x12>

08101e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101e44:	b580      	push	{r7, lr}
 8101e46:	b086      	sub	sp, #24
 8101e48:	af00      	add	r7, sp, #0
 8101e4a:	60f8      	str	r0, [r7, #12]
 8101e4c:	60b9      	str	r1, [r7, #8]
 8101e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e50:	2300      	movs	r3, #0
 8101e52:	617b      	str	r3, [r7, #20]
 8101e54:	e00a      	b.n	8101e6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101e56:	f7ff fe65 	bl	8101b24 <__io_getchar>
 8101e5a:	4601      	mov	r1, r0
 8101e5c:	68bb      	ldr	r3, [r7, #8]
 8101e5e:	1c5a      	adds	r2, r3, #1
 8101e60:	60ba      	str	r2, [r7, #8]
 8101e62:	b2ca      	uxtb	r2, r1
 8101e64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e66:	697b      	ldr	r3, [r7, #20]
 8101e68:	3301      	adds	r3, #1
 8101e6a:	617b      	str	r3, [r7, #20]
 8101e6c:	697a      	ldr	r2, [r7, #20]
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	429a      	cmp	r2, r3
 8101e72:	dbf0      	blt.n	8101e56 <_read+0x12>
	}

return len;
 8101e74:	687b      	ldr	r3, [r7, #4]
}
 8101e76:	4618      	mov	r0, r3
 8101e78:	3718      	adds	r7, #24
 8101e7a:	46bd      	mov	sp, r7
 8101e7c:	bd80      	pop	{r7, pc}

08101e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101e7e:	b580      	push	{r7, lr}
 8101e80:	b086      	sub	sp, #24
 8101e82:	af00      	add	r7, sp, #0
 8101e84:	60f8      	str	r0, [r7, #12]
 8101e86:	60b9      	str	r1, [r7, #8]
 8101e88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e8a:	2300      	movs	r3, #0
 8101e8c:	617b      	str	r3, [r7, #20]
 8101e8e:	e009      	b.n	8101ea4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101e90:	68bb      	ldr	r3, [r7, #8]
 8101e92:	1c5a      	adds	r2, r3, #1
 8101e94:	60ba      	str	r2, [r7, #8]
 8101e96:	781b      	ldrb	r3, [r3, #0]
 8101e98:	4618      	mov	r0, r3
 8101e9a:	f7ff fe31 	bl	8101b00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101e9e:	697b      	ldr	r3, [r7, #20]
 8101ea0:	3301      	adds	r3, #1
 8101ea2:	617b      	str	r3, [r7, #20]
 8101ea4:	697a      	ldr	r2, [r7, #20]
 8101ea6:	687b      	ldr	r3, [r7, #4]
 8101ea8:	429a      	cmp	r2, r3
 8101eaa:	dbf1      	blt.n	8101e90 <_write+0x12>
	}
	return len;
 8101eac:	687b      	ldr	r3, [r7, #4]
}
 8101eae:	4618      	mov	r0, r3
 8101eb0:	3718      	adds	r7, #24
 8101eb2:	46bd      	mov	sp, r7
 8101eb4:	bd80      	pop	{r7, pc}

08101eb6 <_close>:

int _close(int file)
{
 8101eb6:	b480      	push	{r7}
 8101eb8:	b083      	sub	sp, #12
 8101eba:	af00      	add	r7, sp, #0
 8101ebc:	6078      	str	r0, [r7, #4]
	return -1;
 8101ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101ec2:	4618      	mov	r0, r3
 8101ec4:	370c      	adds	r7, #12
 8101ec6:	46bd      	mov	sp, r7
 8101ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ecc:	4770      	bx	lr

08101ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101ece:	b480      	push	{r7}
 8101ed0:	b083      	sub	sp, #12
 8101ed2:	af00      	add	r7, sp, #0
 8101ed4:	6078      	str	r0, [r7, #4]
 8101ed6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101ed8:	683b      	ldr	r3, [r7, #0]
 8101eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101ede:	605a      	str	r2, [r3, #4]
	return 0;
 8101ee0:	2300      	movs	r3, #0
}
 8101ee2:	4618      	mov	r0, r3
 8101ee4:	370c      	adds	r7, #12
 8101ee6:	46bd      	mov	sp, r7
 8101ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eec:	4770      	bx	lr

08101eee <_isatty>:

int _isatty(int file)
{
 8101eee:	b480      	push	{r7}
 8101ef0:	b083      	sub	sp, #12
 8101ef2:	af00      	add	r7, sp, #0
 8101ef4:	6078      	str	r0, [r7, #4]
	return 1;
 8101ef6:	2301      	movs	r3, #1
}
 8101ef8:	4618      	mov	r0, r3
 8101efa:	370c      	adds	r7, #12
 8101efc:	46bd      	mov	sp, r7
 8101efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f02:	4770      	bx	lr

08101f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101f04:	b480      	push	{r7}
 8101f06:	b085      	sub	sp, #20
 8101f08:	af00      	add	r7, sp, #0
 8101f0a:	60f8      	str	r0, [r7, #12]
 8101f0c:	60b9      	str	r1, [r7, #8]
 8101f0e:	607a      	str	r2, [r7, #4]
	return 0;
 8101f10:	2300      	movs	r3, #0
}
 8101f12:	4618      	mov	r0, r3
 8101f14:	3714      	adds	r7, #20
 8101f16:	46bd      	mov	sp, r7
 8101f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f1c:	4770      	bx	lr
	...

08101f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101f20:	b580      	push	{r7, lr}
 8101f22:	b086      	sub	sp, #24
 8101f24:	af00      	add	r7, sp, #0
 8101f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f28:	4a14      	ldr	r2, [pc, #80]	; (8101f7c <_sbrk+0x5c>)
 8101f2a:	4b15      	ldr	r3, [pc, #84]	; (8101f80 <_sbrk+0x60>)
 8101f2c:	1ad3      	subs	r3, r2, r3
 8101f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101f30:	697b      	ldr	r3, [r7, #20]
 8101f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101f34:	4b13      	ldr	r3, [pc, #76]	; (8101f84 <_sbrk+0x64>)
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	2b00      	cmp	r3, #0
 8101f3a:	d102      	bne.n	8101f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101f3c:	4b11      	ldr	r3, [pc, #68]	; (8101f84 <_sbrk+0x64>)
 8101f3e:	4a12      	ldr	r2, [pc, #72]	; (8101f88 <_sbrk+0x68>)
 8101f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101f42:	4b10      	ldr	r3, [pc, #64]	; (8101f84 <_sbrk+0x64>)
 8101f44:	681a      	ldr	r2, [r3, #0]
 8101f46:	687b      	ldr	r3, [r7, #4]
 8101f48:	4413      	add	r3, r2
 8101f4a:	693a      	ldr	r2, [r7, #16]
 8101f4c:	429a      	cmp	r2, r3
 8101f4e:	d207      	bcs.n	8101f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101f50:	f004 fc82 	bl	8106858 <__errno>
 8101f54:	4603      	mov	r3, r0
 8101f56:	220c      	movs	r2, #12
 8101f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8101f5e:	e009      	b.n	8101f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101f60:	4b08      	ldr	r3, [pc, #32]	; (8101f84 <_sbrk+0x64>)
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101f66:	4b07      	ldr	r3, [pc, #28]	; (8101f84 <_sbrk+0x64>)
 8101f68:	681a      	ldr	r2, [r3, #0]
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	4413      	add	r3, r2
 8101f6e:	4a05      	ldr	r2, [pc, #20]	; (8101f84 <_sbrk+0x64>)
 8101f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101f72:	68fb      	ldr	r3, [r7, #12]
}
 8101f74:	4618      	mov	r0, r3
 8101f76:	3718      	adds	r7, #24
 8101f78:	46bd      	mov	sp, r7
 8101f7a:	bd80      	pop	{r7, pc}
 8101f7c:	10048000 	.word	0x10048000
 8101f80:	00000400 	.word	0x00000400
 8101f84:	10000208 	.word	0x10000208
 8101f88:	10000400 	.word	0x10000400

08101f8c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 8101f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101fc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101f90:	f7ff f8b4 	bl	81010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101f94:	480c      	ldr	r0, [pc, #48]	; (8101fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101f96:	490d      	ldr	r1, [pc, #52]	; (8101fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101f98:	4a0d      	ldr	r2, [pc, #52]	; (8101fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101f9c:	e002      	b.n	8101fa4 <LoopCopyDataInit>

08101f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101fa2:	3304      	adds	r3, #4

08101fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101fa8:	d3f9      	bcc.n	8101f9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101faa:	4a0a      	ldr	r2, [pc, #40]	; (8101fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101fac:	4c0a      	ldr	r4, [pc, #40]	; (8101fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101fb0:	e001      	b.n	8101fb6 <LoopFillZerobss>

08101fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101fb4:	3204      	adds	r2, #4

08101fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101fb8:	d3fb      	bcc.n	8101fb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101fba:	f004 fe0b 	bl	8106bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101fbe:	f7ff fab7 	bl	8101530 <main>
  bx  lr
 8101fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101fc4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101fc8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101fcc:	100001e4 	.word	0x100001e4
  ldr r2, =_sidata
 8101fd0:	0810b904 	.word	0x0810b904
  ldr r2, =_sbss
 8101fd4:	100001e4 	.word	0x100001e4
  ldr r4, =_ebss
 8101fd8:	100003fc 	.word	0x100003fc

08101fdc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101fdc:	e7fe      	b.n	8101fdc <ADC3_IRQHandler>
	...

08101fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101fe0:	b580      	push	{r7, lr}
 8101fe2:	b082      	sub	sp, #8
 8101fe4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101fe6:	4b28      	ldr	r3, [pc, #160]	; (8102088 <HAL_Init+0xa8>)
 8101fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101fec:	4a26      	ldr	r2, [pc, #152]	; (8102088 <HAL_Init+0xa8>)
 8101fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101ff2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ff6:	4b24      	ldr	r3, [pc, #144]	; (8102088 <HAL_Init+0xa8>)
 8101ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102000:	603b      	str	r3, [r7, #0]
 8102002:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102004:	4b21      	ldr	r3, [pc, #132]	; (810208c <HAL_Init+0xac>)
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810200c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102010:	4a1e      	ldr	r2, [pc, #120]	; (810208c <HAL_Init+0xac>)
 8102012:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102016:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102018:	4b1c      	ldr	r3, [pc, #112]	; (810208c <HAL_Init+0xac>)
 810201a:	681b      	ldr	r3, [r3, #0]
 810201c:	4a1b      	ldr	r2, [pc, #108]	; (810208c <HAL_Init+0xac>)
 810201e:	f043 0301 	orr.w	r3, r3, #1
 8102022:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102024:	2003      	movs	r0, #3
 8102026:	f000 f983 	bl	8102330 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810202a:	f000 fc53 	bl	81028d4 <HAL_RCC_GetSysClockFreq>
 810202e:	4602      	mov	r2, r0
 8102030:	4b15      	ldr	r3, [pc, #84]	; (8102088 <HAL_Init+0xa8>)
 8102032:	699b      	ldr	r3, [r3, #24]
 8102034:	0a1b      	lsrs	r3, r3, #8
 8102036:	f003 030f 	and.w	r3, r3, #15
 810203a:	4915      	ldr	r1, [pc, #84]	; (8102090 <HAL_Init+0xb0>)
 810203c:	5ccb      	ldrb	r3, [r1, r3]
 810203e:	f003 031f 	and.w	r3, r3, #31
 8102042:	fa22 f303 	lsr.w	r3, r2, r3
 8102046:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102048:	4b0f      	ldr	r3, [pc, #60]	; (8102088 <HAL_Init+0xa8>)
 810204a:	699b      	ldr	r3, [r3, #24]
 810204c:	f003 030f 	and.w	r3, r3, #15
 8102050:	4a0f      	ldr	r2, [pc, #60]	; (8102090 <HAL_Init+0xb0>)
 8102052:	5cd3      	ldrb	r3, [r2, r3]
 8102054:	f003 031f 	and.w	r3, r3, #31
 8102058:	687a      	ldr	r2, [r7, #4]
 810205a:	fa22 f303 	lsr.w	r3, r2, r3
 810205e:	4a0d      	ldr	r2, [pc, #52]	; (8102094 <HAL_Init+0xb4>)
 8102060:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102062:	4b0c      	ldr	r3, [pc, #48]	; (8102094 <HAL_Init+0xb4>)
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	4a0c      	ldr	r2, [pc, #48]	; (8102098 <HAL_Init+0xb8>)
 8102068:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810206a:	2000      	movs	r0, #0
 810206c:	f000 f816 	bl	810209c <HAL_InitTick>
 8102070:	4603      	mov	r3, r0
 8102072:	2b00      	cmp	r3, #0
 8102074:	d001      	beq.n	810207a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102076:	2301      	movs	r3, #1
 8102078:	e002      	b.n	8102080 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810207a:	f7ff fd91 	bl	8101ba0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810207e:	2300      	movs	r3, #0
}
 8102080:	4618      	mov	r0, r3
 8102082:	3708      	adds	r7, #8
 8102084:	46bd      	mov	sp, r7
 8102086:	bd80      	pop	{r7, pc}
 8102088:	58024400 	.word	0x58024400
 810208c:	40024400 	.word	0x40024400
 8102090:	0810b408 	.word	0x0810b408
 8102094:	10000004 	.word	0x10000004
 8102098:	10000000 	.word	0x10000000

0810209c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810209c:	b580      	push	{r7, lr}
 810209e:	b082      	sub	sp, #8
 81020a0:	af00      	add	r7, sp, #0
 81020a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81020a4:	4b15      	ldr	r3, [pc, #84]	; (81020fc <HAL_InitTick+0x60>)
 81020a6:	781b      	ldrb	r3, [r3, #0]
 81020a8:	2b00      	cmp	r3, #0
 81020aa:	d101      	bne.n	81020b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81020ac:	2301      	movs	r3, #1
 81020ae:	e021      	b.n	81020f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81020b0:	4b13      	ldr	r3, [pc, #76]	; (8102100 <HAL_InitTick+0x64>)
 81020b2:	681a      	ldr	r2, [r3, #0]
 81020b4:	4b11      	ldr	r3, [pc, #68]	; (81020fc <HAL_InitTick+0x60>)
 81020b6:	781b      	ldrb	r3, [r3, #0]
 81020b8:	4619      	mov	r1, r3
 81020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81020be:	fbb3 f3f1 	udiv	r3, r3, r1
 81020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 81020c6:	4618      	mov	r0, r3
 81020c8:	f000 f965 	bl	8102396 <HAL_SYSTICK_Config>
 81020cc:	4603      	mov	r3, r0
 81020ce:	2b00      	cmp	r3, #0
 81020d0:	d001      	beq.n	81020d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81020d2:	2301      	movs	r3, #1
 81020d4:	e00e      	b.n	81020f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81020d6:	687b      	ldr	r3, [r7, #4]
 81020d8:	2b0f      	cmp	r3, #15
 81020da:	d80a      	bhi.n	81020f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81020dc:	2200      	movs	r2, #0
 81020de:	6879      	ldr	r1, [r7, #4]
 81020e0:	f04f 30ff 	mov.w	r0, #4294967295
 81020e4:	f000 f92f 	bl	8102346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81020e8:	4a06      	ldr	r2, [pc, #24]	; (8102104 <HAL_InitTick+0x68>)
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81020ee:	2300      	movs	r3, #0
 81020f0:	e000      	b.n	81020f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81020f2:	2301      	movs	r3, #1
}
 81020f4:	4618      	mov	r0, r3
 81020f6:	3708      	adds	r7, #8
 81020f8:	46bd      	mov	sp, r7
 81020fa:	bd80      	pop	{r7, pc}
 81020fc:	1000000c 	.word	0x1000000c
 8102100:	10000000 	.word	0x10000000
 8102104:	10000008 	.word	0x10000008

08102108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102108:	b480      	push	{r7}
 810210a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810210c:	4b06      	ldr	r3, [pc, #24]	; (8102128 <HAL_IncTick+0x20>)
 810210e:	781b      	ldrb	r3, [r3, #0]
 8102110:	461a      	mov	r2, r3
 8102112:	4b06      	ldr	r3, [pc, #24]	; (810212c <HAL_IncTick+0x24>)
 8102114:	681b      	ldr	r3, [r3, #0]
 8102116:	4413      	add	r3, r2
 8102118:	4a04      	ldr	r2, [pc, #16]	; (810212c <HAL_IncTick+0x24>)
 810211a:	6013      	str	r3, [r2, #0]
}
 810211c:	bf00      	nop
 810211e:	46bd      	mov	sp, r7
 8102120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102124:	4770      	bx	lr
 8102126:	bf00      	nop
 8102128:	1000000c 	.word	0x1000000c
 810212c:	100003e8 	.word	0x100003e8

08102130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102130:	b480      	push	{r7}
 8102132:	af00      	add	r7, sp, #0
  return uwTick;
 8102134:	4b03      	ldr	r3, [pc, #12]	; (8102144 <HAL_GetTick+0x14>)
 8102136:	681b      	ldr	r3, [r3, #0]
}
 8102138:	4618      	mov	r0, r3
 810213a:	46bd      	mov	sp, r7
 810213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102140:	4770      	bx	lr
 8102142:	bf00      	nop
 8102144:	100003e8 	.word	0x100003e8

08102148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102148:	b580      	push	{r7, lr}
 810214a:	b084      	sub	sp, #16
 810214c:	af00      	add	r7, sp, #0
 810214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102150:	f7ff ffee 	bl	8102130 <HAL_GetTick>
 8102154:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102156:	687b      	ldr	r3, [r7, #4]
 8102158:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810215a:	68fb      	ldr	r3, [r7, #12]
 810215c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102160:	d005      	beq.n	810216e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102162:	4b0a      	ldr	r3, [pc, #40]	; (810218c <HAL_Delay+0x44>)
 8102164:	781b      	ldrb	r3, [r3, #0]
 8102166:	461a      	mov	r2, r3
 8102168:	68fb      	ldr	r3, [r7, #12]
 810216a:	4413      	add	r3, r2
 810216c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810216e:	bf00      	nop
 8102170:	f7ff ffde 	bl	8102130 <HAL_GetTick>
 8102174:	4602      	mov	r2, r0
 8102176:	68bb      	ldr	r3, [r7, #8]
 8102178:	1ad3      	subs	r3, r2, r3
 810217a:	68fa      	ldr	r2, [r7, #12]
 810217c:	429a      	cmp	r2, r3
 810217e:	d8f7      	bhi.n	8102170 <HAL_Delay+0x28>
  {
  }
}
 8102180:	bf00      	nop
 8102182:	bf00      	nop
 8102184:	3710      	adds	r7, #16
 8102186:	46bd      	mov	sp, r7
 8102188:	bd80      	pop	{r7, pc}
 810218a:	bf00      	nop
 810218c:	1000000c 	.word	0x1000000c

08102190 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102190:	b480      	push	{r7}
 8102192:	b085      	sub	sp, #20
 8102194:	af00      	add	r7, sp, #0
 8102196:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	f003 0307 	and.w	r3, r3, #7
 810219e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81021a0:	4b0c      	ldr	r3, [pc, #48]	; (81021d4 <__NVIC_SetPriorityGrouping+0x44>)
 81021a2:	68db      	ldr	r3, [r3, #12]
 81021a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81021a6:	68ba      	ldr	r2, [r7, #8]
 81021a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81021ac:	4013      	ands	r3, r2
 81021ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81021b0:	68fb      	ldr	r3, [r7, #12]
 81021b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81021b4:	68bb      	ldr	r3, [r7, #8]
 81021b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81021b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81021bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81021c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81021c2:	4a04      	ldr	r2, [pc, #16]	; (81021d4 <__NVIC_SetPriorityGrouping+0x44>)
 81021c4:	68bb      	ldr	r3, [r7, #8]
 81021c6:	60d3      	str	r3, [r2, #12]
}
 81021c8:	bf00      	nop
 81021ca:	3714      	adds	r7, #20
 81021cc:	46bd      	mov	sp, r7
 81021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021d2:	4770      	bx	lr
 81021d4:	e000ed00 	.word	0xe000ed00

081021d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81021d8:	b480      	push	{r7}
 81021da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81021dc:	4b04      	ldr	r3, [pc, #16]	; (81021f0 <__NVIC_GetPriorityGrouping+0x18>)
 81021de:	68db      	ldr	r3, [r3, #12]
 81021e0:	0a1b      	lsrs	r3, r3, #8
 81021e2:	f003 0307 	and.w	r3, r3, #7
}
 81021e6:	4618      	mov	r0, r3
 81021e8:	46bd      	mov	sp, r7
 81021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ee:	4770      	bx	lr
 81021f0:	e000ed00 	.word	0xe000ed00

081021f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81021f4:	b480      	push	{r7}
 81021f6:	b083      	sub	sp, #12
 81021f8:	af00      	add	r7, sp, #0
 81021fa:	4603      	mov	r3, r0
 81021fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81021fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102202:	2b00      	cmp	r3, #0
 8102204:	db0b      	blt.n	810221e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102206:	88fb      	ldrh	r3, [r7, #6]
 8102208:	f003 021f 	and.w	r2, r3, #31
 810220c:	4907      	ldr	r1, [pc, #28]	; (810222c <__NVIC_EnableIRQ+0x38>)
 810220e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102212:	095b      	lsrs	r3, r3, #5
 8102214:	2001      	movs	r0, #1
 8102216:	fa00 f202 	lsl.w	r2, r0, r2
 810221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810221e:	bf00      	nop
 8102220:	370c      	adds	r7, #12
 8102222:	46bd      	mov	sp, r7
 8102224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102228:	4770      	bx	lr
 810222a:	bf00      	nop
 810222c:	e000e100 	.word	0xe000e100

08102230 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102230:	b480      	push	{r7}
 8102232:	b083      	sub	sp, #12
 8102234:	af00      	add	r7, sp, #0
 8102236:	4603      	mov	r3, r0
 8102238:	6039      	str	r1, [r7, #0]
 810223a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810223c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102240:	2b00      	cmp	r3, #0
 8102242:	db0a      	blt.n	810225a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102244:	683b      	ldr	r3, [r7, #0]
 8102246:	b2da      	uxtb	r2, r3
 8102248:	490c      	ldr	r1, [pc, #48]	; (810227c <__NVIC_SetPriority+0x4c>)
 810224a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810224e:	0112      	lsls	r2, r2, #4
 8102250:	b2d2      	uxtb	r2, r2
 8102252:	440b      	add	r3, r1
 8102254:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102258:	e00a      	b.n	8102270 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810225a:	683b      	ldr	r3, [r7, #0]
 810225c:	b2da      	uxtb	r2, r3
 810225e:	4908      	ldr	r1, [pc, #32]	; (8102280 <__NVIC_SetPriority+0x50>)
 8102260:	88fb      	ldrh	r3, [r7, #6]
 8102262:	f003 030f 	and.w	r3, r3, #15
 8102266:	3b04      	subs	r3, #4
 8102268:	0112      	lsls	r2, r2, #4
 810226a:	b2d2      	uxtb	r2, r2
 810226c:	440b      	add	r3, r1
 810226e:	761a      	strb	r2, [r3, #24]
}
 8102270:	bf00      	nop
 8102272:	370c      	adds	r7, #12
 8102274:	46bd      	mov	sp, r7
 8102276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810227a:	4770      	bx	lr
 810227c:	e000e100 	.word	0xe000e100
 8102280:	e000ed00 	.word	0xe000ed00

08102284 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102284:	b480      	push	{r7}
 8102286:	b089      	sub	sp, #36	; 0x24
 8102288:	af00      	add	r7, sp, #0
 810228a:	60f8      	str	r0, [r7, #12]
 810228c:	60b9      	str	r1, [r7, #8]
 810228e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102290:	68fb      	ldr	r3, [r7, #12]
 8102292:	f003 0307 	and.w	r3, r3, #7
 8102296:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102298:	69fb      	ldr	r3, [r7, #28]
 810229a:	f1c3 0307 	rsb	r3, r3, #7
 810229e:	2b04      	cmp	r3, #4
 81022a0:	bf28      	it	cs
 81022a2:	2304      	movcs	r3, #4
 81022a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81022a6:	69fb      	ldr	r3, [r7, #28]
 81022a8:	3304      	adds	r3, #4
 81022aa:	2b06      	cmp	r3, #6
 81022ac:	d902      	bls.n	81022b4 <NVIC_EncodePriority+0x30>
 81022ae:	69fb      	ldr	r3, [r7, #28]
 81022b0:	3b03      	subs	r3, #3
 81022b2:	e000      	b.n	81022b6 <NVIC_EncodePriority+0x32>
 81022b4:	2300      	movs	r3, #0
 81022b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81022b8:	f04f 32ff 	mov.w	r2, #4294967295
 81022bc:	69bb      	ldr	r3, [r7, #24]
 81022be:	fa02 f303 	lsl.w	r3, r2, r3
 81022c2:	43da      	mvns	r2, r3
 81022c4:	68bb      	ldr	r3, [r7, #8]
 81022c6:	401a      	ands	r2, r3
 81022c8:	697b      	ldr	r3, [r7, #20]
 81022ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81022cc:	f04f 31ff 	mov.w	r1, #4294967295
 81022d0:	697b      	ldr	r3, [r7, #20]
 81022d2:	fa01 f303 	lsl.w	r3, r1, r3
 81022d6:	43d9      	mvns	r1, r3
 81022d8:	687b      	ldr	r3, [r7, #4]
 81022da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81022dc:	4313      	orrs	r3, r2
         );
}
 81022de:	4618      	mov	r0, r3
 81022e0:	3724      	adds	r7, #36	; 0x24
 81022e2:	46bd      	mov	sp, r7
 81022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e8:	4770      	bx	lr
	...

081022ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81022ec:	b580      	push	{r7, lr}
 81022ee:	b082      	sub	sp, #8
 81022f0:	af00      	add	r7, sp, #0
 81022f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81022f4:	687b      	ldr	r3, [r7, #4]
 81022f6:	3b01      	subs	r3, #1
 81022f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81022fc:	d301      	bcc.n	8102302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81022fe:	2301      	movs	r3, #1
 8102300:	e00f      	b.n	8102322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102302:	4a0a      	ldr	r2, [pc, #40]	; (810232c <SysTick_Config+0x40>)
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	3b01      	subs	r3, #1
 8102308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810230a:	210f      	movs	r1, #15
 810230c:	f04f 30ff 	mov.w	r0, #4294967295
 8102310:	f7ff ff8e 	bl	8102230 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102314:	4b05      	ldr	r3, [pc, #20]	; (810232c <SysTick_Config+0x40>)
 8102316:	2200      	movs	r2, #0
 8102318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810231a:	4b04      	ldr	r3, [pc, #16]	; (810232c <SysTick_Config+0x40>)
 810231c:	2207      	movs	r2, #7
 810231e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102320:	2300      	movs	r3, #0
}
 8102322:	4618      	mov	r0, r3
 8102324:	3708      	adds	r7, #8
 8102326:	46bd      	mov	sp, r7
 8102328:	bd80      	pop	{r7, pc}
 810232a:	bf00      	nop
 810232c:	e000e010 	.word	0xe000e010

08102330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102330:	b580      	push	{r7, lr}
 8102332:	b082      	sub	sp, #8
 8102334:	af00      	add	r7, sp, #0
 8102336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102338:	6878      	ldr	r0, [r7, #4]
 810233a:	f7ff ff29 	bl	8102190 <__NVIC_SetPriorityGrouping>
}
 810233e:	bf00      	nop
 8102340:	3708      	adds	r7, #8
 8102342:	46bd      	mov	sp, r7
 8102344:	bd80      	pop	{r7, pc}

08102346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102346:	b580      	push	{r7, lr}
 8102348:	b086      	sub	sp, #24
 810234a:	af00      	add	r7, sp, #0
 810234c:	4603      	mov	r3, r0
 810234e:	60b9      	str	r1, [r7, #8]
 8102350:	607a      	str	r2, [r7, #4]
 8102352:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102354:	f7ff ff40 	bl	81021d8 <__NVIC_GetPriorityGrouping>
 8102358:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810235a:	687a      	ldr	r2, [r7, #4]
 810235c:	68b9      	ldr	r1, [r7, #8]
 810235e:	6978      	ldr	r0, [r7, #20]
 8102360:	f7ff ff90 	bl	8102284 <NVIC_EncodePriority>
 8102364:	4602      	mov	r2, r0
 8102366:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810236a:	4611      	mov	r1, r2
 810236c:	4618      	mov	r0, r3
 810236e:	f7ff ff5f 	bl	8102230 <__NVIC_SetPriority>
}
 8102372:	bf00      	nop
 8102374:	3718      	adds	r7, #24
 8102376:	46bd      	mov	sp, r7
 8102378:	bd80      	pop	{r7, pc}

0810237a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810237a:	b580      	push	{r7, lr}
 810237c:	b082      	sub	sp, #8
 810237e:	af00      	add	r7, sp, #0
 8102380:	4603      	mov	r3, r0
 8102382:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102384:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102388:	4618      	mov	r0, r3
 810238a:	f7ff ff33 	bl	81021f4 <__NVIC_EnableIRQ>
}
 810238e:	bf00      	nop
 8102390:	3708      	adds	r7, #8
 8102392:	46bd      	mov	sp, r7
 8102394:	bd80      	pop	{r7, pc}

08102396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102396:	b580      	push	{r7, lr}
 8102398:	b082      	sub	sp, #8
 810239a:	af00      	add	r7, sp, #0
 810239c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810239e:	6878      	ldr	r0, [r7, #4]
 81023a0:	f7ff ffa4 	bl	81022ec <SysTick_Config>
 81023a4:	4603      	mov	r3, r0
}
 81023a6:	4618      	mov	r0, r3
 81023a8:	3708      	adds	r7, #8
 81023aa:	46bd      	mov	sp, r7
 81023ac:	bd80      	pop	{r7, pc}
	...

081023b0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81023b0:	b480      	push	{r7}
 81023b2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81023b4:	4b07      	ldr	r3, [pc, #28]	; (81023d4 <HAL_GetCurrentCPUID+0x24>)
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	091b      	lsrs	r3, r3, #4
 81023ba:	f003 030f 	and.w	r3, r3, #15
 81023be:	2b07      	cmp	r3, #7
 81023c0:	d101      	bne.n	81023c6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81023c2:	2303      	movs	r3, #3
 81023c4:	e000      	b.n	81023c8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81023c6:	2301      	movs	r3, #1
  }
}
 81023c8:	4618      	mov	r0, r3
 81023ca:	46bd      	mov	sp, r7
 81023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023d0:	4770      	bx	lr
 81023d2:	bf00      	nop
 81023d4:	e000ed00 	.word	0xe000ed00

081023d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81023d8:	b480      	push	{r7}
 81023da:	b089      	sub	sp, #36	; 0x24
 81023dc:	af00      	add	r7, sp, #0
 81023de:	6078      	str	r0, [r7, #4]
 81023e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81023e2:	2300      	movs	r3, #0
 81023e4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81023e6:	4b89      	ldr	r3, [pc, #548]	; (810260c <HAL_GPIO_Init+0x234>)
 81023e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81023ea:	e194      	b.n	8102716 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81023ec:	683b      	ldr	r3, [r7, #0]
 81023ee:	681a      	ldr	r2, [r3, #0]
 81023f0:	2101      	movs	r1, #1
 81023f2:	69fb      	ldr	r3, [r7, #28]
 81023f4:	fa01 f303 	lsl.w	r3, r1, r3
 81023f8:	4013      	ands	r3, r2
 81023fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81023fc:	693b      	ldr	r3, [r7, #16]
 81023fe:	2b00      	cmp	r3, #0
 8102400:	f000 8186 	beq.w	8102710 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102404:	683b      	ldr	r3, [r7, #0]
 8102406:	685b      	ldr	r3, [r3, #4]
 8102408:	f003 0303 	and.w	r3, r3, #3
 810240c:	2b01      	cmp	r3, #1
 810240e:	d005      	beq.n	810241c <HAL_GPIO_Init+0x44>
 8102410:	683b      	ldr	r3, [r7, #0]
 8102412:	685b      	ldr	r3, [r3, #4]
 8102414:	f003 0303 	and.w	r3, r3, #3
 8102418:	2b02      	cmp	r3, #2
 810241a:	d130      	bne.n	810247e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810241c:	687b      	ldr	r3, [r7, #4]
 810241e:	689b      	ldr	r3, [r3, #8]
 8102420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102422:	69fb      	ldr	r3, [r7, #28]
 8102424:	005b      	lsls	r3, r3, #1
 8102426:	2203      	movs	r2, #3
 8102428:	fa02 f303 	lsl.w	r3, r2, r3
 810242c:	43db      	mvns	r3, r3
 810242e:	69ba      	ldr	r2, [r7, #24]
 8102430:	4013      	ands	r3, r2
 8102432:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102434:	683b      	ldr	r3, [r7, #0]
 8102436:	68da      	ldr	r2, [r3, #12]
 8102438:	69fb      	ldr	r3, [r7, #28]
 810243a:	005b      	lsls	r3, r3, #1
 810243c:	fa02 f303 	lsl.w	r3, r2, r3
 8102440:	69ba      	ldr	r2, [r7, #24]
 8102442:	4313      	orrs	r3, r2
 8102444:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	69ba      	ldr	r2, [r7, #24]
 810244a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810244c:	687b      	ldr	r3, [r7, #4]
 810244e:	685b      	ldr	r3, [r3, #4]
 8102450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102452:	2201      	movs	r2, #1
 8102454:	69fb      	ldr	r3, [r7, #28]
 8102456:	fa02 f303 	lsl.w	r3, r2, r3
 810245a:	43db      	mvns	r3, r3
 810245c:	69ba      	ldr	r2, [r7, #24]
 810245e:	4013      	ands	r3, r2
 8102460:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102462:	683b      	ldr	r3, [r7, #0]
 8102464:	685b      	ldr	r3, [r3, #4]
 8102466:	091b      	lsrs	r3, r3, #4
 8102468:	f003 0201 	and.w	r2, r3, #1
 810246c:	69fb      	ldr	r3, [r7, #28]
 810246e:	fa02 f303 	lsl.w	r3, r2, r3
 8102472:	69ba      	ldr	r2, [r7, #24]
 8102474:	4313      	orrs	r3, r2
 8102476:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	69ba      	ldr	r2, [r7, #24]
 810247c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810247e:	683b      	ldr	r3, [r7, #0]
 8102480:	685b      	ldr	r3, [r3, #4]
 8102482:	f003 0303 	and.w	r3, r3, #3
 8102486:	2b03      	cmp	r3, #3
 8102488:	d017      	beq.n	81024ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	68db      	ldr	r3, [r3, #12]
 810248e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102490:	69fb      	ldr	r3, [r7, #28]
 8102492:	005b      	lsls	r3, r3, #1
 8102494:	2203      	movs	r2, #3
 8102496:	fa02 f303 	lsl.w	r3, r2, r3
 810249a:	43db      	mvns	r3, r3
 810249c:	69ba      	ldr	r2, [r7, #24]
 810249e:	4013      	ands	r3, r2
 81024a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81024a2:	683b      	ldr	r3, [r7, #0]
 81024a4:	689a      	ldr	r2, [r3, #8]
 81024a6:	69fb      	ldr	r3, [r7, #28]
 81024a8:	005b      	lsls	r3, r3, #1
 81024aa:	fa02 f303 	lsl.w	r3, r2, r3
 81024ae:	69ba      	ldr	r2, [r7, #24]
 81024b0:	4313      	orrs	r3, r2
 81024b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	69ba      	ldr	r2, [r7, #24]
 81024b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81024ba:	683b      	ldr	r3, [r7, #0]
 81024bc:	685b      	ldr	r3, [r3, #4]
 81024be:	f003 0303 	and.w	r3, r3, #3
 81024c2:	2b02      	cmp	r3, #2
 81024c4:	d123      	bne.n	810250e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81024c6:	69fb      	ldr	r3, [r7, #28]
 81024c8:	08da      	lsrs	r2, r3, #3
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	3208      	adds	r2, #8
 81024ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81024d4:	69fb      	ldr	r3, [r7, #28]
 81024d6:	f003 0307 	and.w	r3, r3, #7
 81024da:	009b      	lsls	r3, r3, #2
 81024dc:	220f      	movs	r2, #15
 81024de:	fa02 f303 	lsl.w	r3, r2, r3
 81024e2:	43db      	mvns	r3, r3
 81024e4:	69ba      	ldr	r2, [r7, #24]
 81024e6:	4013      	ands	r3, r2
 81024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81024ea:	683b      	ldr	r3, [r7, #0]
 81024ec:	691a      	ldr	r2, [r3, #16]
 81024ee:	69fb      	ldr	r3, [r7, #28]
 81024f0:	f003 0307 	and.w	r3, r3, #7
 81024f4:	009b      	lsls	r3, r3, #2
 81024f6:	fa02 f303 	lsl.w	r3, r2, r3
 81024fa:	69ba      	ldr	r2, [r7, #24]
 81024fc:	4313      	orrs	r3, r2
 81024fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102500:	69fb      	ldr	r3, [r7, #28]
 8102502:	08da      	lsrs	r2, r3, #3
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	3208      	adds	r2, #8
 8102508:	69b9      	ldr	r1, [r7, #24]
 810250a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	681b      	ldr	r3, [r3, #0]
 8102512:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102514:	69fb      	ldr	r3, [r7, #28]
 8102516:	005b      	lsls	r3, r3, #1
 8102518:	2203      	movs	r2, #3
 810251a:	fa02 f303 	lsl.w	r3, r2, r3
 810251e:	43db      	mvns	r3, r3
 8102520:	69ba      	ldr	r2, [r7, #24]
 8102522:	4013      	ands	r3, r2
 8102524:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102526:	683b      	ldr	r3, [r7, #0]
 8102528:	685b      	ldr	r3, [r3, #4]
 810252a:	f003 0203 	and.w	r2, r3, #3
 810252e:	69fb      	ldr	r3, [r7, #28]
 8102530:	005b      	lsls	r3, r3, #1
 8102532:	fa02 f303 	lsl.w	r3, r2, r3
 8102536:	69ba      	ldr	r2, [r7, #24]
 8102538:	4313      	orrs	r3, r2
 810253a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810253c:	687b      	ldr	r3, [r7, #4]
 810253e:	69ba      	ldr	r2, [r7, #24]
 8102540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102542:	683b      	ldr	r3, [r7, #0]
 8102544:	685b      	ldr	r3, [r3, #4]
 8102546:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 810254a:	2b00      	cmp	r3, #0
 810254c:	f000 80e0 	beq.w	8102710 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102550:	4b2f      	ldr	r3, [pc, #188]	; (8102610 <HAL_GPIO_Init+0x238>)
 8102552:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102556:	4a2e      	ldr	r2, [pc, #184]	; (8102610 <HAL_GPIO_Init+0x238>)
 8102558:	f043 0302 	orr.w	r3, r3, #2
 810255c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102560:	4b2b      	ldr	r3, [pc, #172]	; (8102610 <HAL_GPIO_Init+0x238>)
 8102562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102566:	f003 0302 	and.w	r3, r3, #2
 810256a:	60fb      	str	r3, [r7, #12]
 810256c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810256e:	4a29      	ldr	r2, [pc, #164]	; (8102614 <HAL_GPIO_Init+0x23c>)
 8102570:	69fb      	ldr	r3, [r7, #28]
 8102572:	089b      	lsrs	r3, r3, #2
 8102574:	3302      	adds	r3, #2
 8102576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810257c:	69fb      	ldr	r3, [r7, #28]
 810257e:	f003 0303 	and.w	r3, r3, #3
 8102582:	009b      	lsls	r3, r3, #2
 8102584:	220f      	movs	r2, #15
 8102586:	fa02 f303 	lsl.w	r3, r2, r3
 810258a:	43db      	mvns	r3, r3
 810258c:	69ba      	ldr	r2, [r7, #24]
 810258e:	4013      	ands	r3, r2
 8102590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102592:	687b      	ldr	r3, [r7, #4]
 8102594:	4a20      	ldr	r2, [pc, #128]	; (8102618 <HAL_GPIO_Init+0x240>)
 8102596:	4293      	cmp	r3, r2
 8102598:	d052      	beq.n	8102640 <HAL_GPIO_Init+0x268>
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	4a1f      	ldr	r2, [pc, #124]	; (810261c <HAL_GPIO_Init+0x244>)
 810259e:	4293      	cmp	r3, r2
 81025a0:	d031      	beq.n	8102606 <HAL_GPIO_Init+0x22e>
 81025a2:	687b      	ldr	r3, [r7, #4]
 81025a4:	4a1e      	ldr	r2, [pc, #120]	; (8102620 <HAL_GPIO_Init+0x248>)
 81025a6:	4293      	cmp	r3, r2
 81025a8:	d02b      	beq.n	8102602 <HAL_GPIO_Init+0x22a>
 81025aa:	687b      	ldr	r3, [r7, #4]
 81025ac:	4a1d      	ldr	r2, [pc, #116]	; (8102624 <HAL_GPIO_Init+0x24c>)
 81025ae:	4293      	cmp	r3, r2
 81025b0:	d025      	beq.n	81025fe <HAL_GPIO_Init+0x226>
 81025b2:	687b      	ldr	r3, [r7, #4]
 81025b4:	4a1c      	ldr	r2, [pc, #112]	; (8102628 <HAL_GPIO_Init+0x250>)
 81025b6:	4293      	cmp	r3, r2
 81025b8:	d01f      	beq.n	81025fa <HAL_GPIO_Init+0x222>
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	4a1b      	ldr	r2, [pc, #108]	; (810262c <HAL_GPIO_Init+0x254>)
 81025be:	4293      	cmp	r3, r2
 81025c0:	d019      	beq.n	81025f6 <HAL_GPIO_Init+0x21e>
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	4a1a      	ldr	r2, [pc, #104]	; (8102630 <HAL_GPIO_Init+0x258>)
 81025c6:	4293      	cmp	r3, r2
 81025c8:	d013      	beq.n	81025f2 <HAL_GPIO_Init+0x21a>
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	4a19      	ldr	r2, [pc, #100]	; (8102634 <HAL_GPIO_Init+0x25c>)
 81025ce:	4293      	cmp	r3, r2
 81025d0:	d00d      	beq.n	81025ee <HAL_GPIO_Init+0x216>
 81025d2:	687b      	ldr	r3, [r7, #4]
 81025d4:	4a18      	ldr	r2, [pc, #96]	; (8102638 <HAL_GPIO_Init+0x260>)
 81025d6:	4293      	cmp	r3, r2
 81025d8:	d007      	beq.n	81025ea <HAL_GPIO_Init+0x212>
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	4a17      	ldr	r2, [pc, #92]	; (810263c <HAL_GPIO_Init+0x264>)
 81025de:	4293      	cmp	r3, r2
 81025e0:	d101      	bne.n	81025e6 <HAL_GPIO_Init+0x20e>
 81025e2:	2309      	movs	r3, #9
 81025e4:	e02d      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 81025e6:	230a      	movs	r3, #10
 81025e8:	e02b      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 81025ea:	2308      	movs	r3, #8
 81025ec:	e029      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 81025ee:	2307      	movs	r3, #7
 81025f0:	e027      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 81025f2:	2306      	movs	r3, #6
 81025f4:	e025      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 81025f6:	2305      	movs	r3, #5
 81025f8:	e023      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 81025fa:	2304      	movs	r3, #4
 81025fc:	e021      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 81025fe:	2303      	movs	r3, #3
 8102600:	e01f      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 8102602:	2302      	movs	r3, #2
 8102604:	e01d      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 8102606:	2301      	movs	r3, #1
 8102608:	e01b      	b.n	8102642 <HAL_GPIO_Init+0x26a>
 810260a:	bf00      	nop
 810260c:	580000c0 	.word	0x580000c0
 8102610:	58024400 	.word	0x58024400
 8102614:	58000400 	.word	0x58000400
 8102618:	58020000 	.word	0x58020000
 810261c:	58020400 	.word	0x58020400
 8102620:	58020800 	.word	0x58020800
 8102624:	58020c00 	.word	0x58020c00
 8102628:	58021000 	.word	0x58021000
 810262c:	58021400 	.word	0x58021400
 8102630:	58021800 	.word	0x58021800
 8102634:	58021c00 	.word	0x58021c00
 8102638:	58022000 	.word	0x58022000
 810263c:	58022400 	.word	0x58022400
 8102640:	2300      	movs	r3, #0
 8102642:	69fa      	ldr	r2, [r7, #28]
 8102644:	f002 0203 	and.w	r2, r2, #3
 8102648:	0092      	lsls	r2, r2, #2
 810264a:	4093      	lsls	r3, r2
 810264c:	69ba      	ldr	r2, [r7, #24]
 810264e:	4313      	orrs	r3, r2
 8102650:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102652:	4938      	ldr	r1, [pc, #224]	; (8102734 <HAL_GPIO_Init+0x35c>)
 8102654:	69fb      	ldr	r3, [r7, #28]
 8102656:	089b      	lsrs	r3, r3, #2
 8102658:	3302      	adds	r3, #2
 810265a:	69ba      	ldr	r2, [r7, #24]
 810265c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102660:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102664:	681b      	ldr	r3, [r3, #0]
 8102666:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102668:	693b      	ldr	r3, [r7, #16]
 810266a:	43db      	mvns	r3, r3
 810266c:	69ba      	ldr	r2, [r7, #24]
 810266e:	4013      	ands	r3, r2
 8102670:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102672:	683b      	ldr	r3, [r7, #0]
 8102674:	685b      	ldr	r3, [r3, #4]
 8102676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810267a:	2b00      	cmp	r3, #0
 810267c:	d003      	beq.n	8102686 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810267e:	69ba      	ldr	r2, [r7, #24]
 8102680:	693b      	ldr	r3, [r7, #16]
 8102682:	4313      	orrs	r3, r2
 8102684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810268a:	69bb      	ldr	r3, [r7, #24]
 810268c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810268e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102692:	685b      	ldr	r3, [r3, #4]
 8102694:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102696:	693b      	ldr	r3, [r7, #16]
 8102698:	43db      	mvns	r3, r3
 810269a:	69ba      	ldr	r2, [r7, #24]
 810269c:	4013      	ands	r3, r2
 810269e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81026a0:	683b      	ldr	r3, [r7, #0]
 81026a2:	685b      	ldr	r3, [r3, #4]
 81026a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81026a8:	2b00      	cmp	r3, #0
 81026aa:	d003      	beq.n	81026b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81026ac:	69ba      	ldr	r2, [r7, #24]
 81026ae:	693b      	ldr	r3, [r7, #16]
 81026b0:	4313      	orrs	r3, r2
 81026b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81026b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81026b8:	69bb      	ldr	r3, [r7, #24]
 81026ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81026bc:	697b      	ldr	r3, [r7, #20]
 81026be:	685b      	ldr	r3, [r3, #4]
 81026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026c2:	693b      	ldr	r3, [r7, #16]
 81026c4:	43db      	mvns	r3, r3
 81026c6:	69ba      	ldr	r2, [r7, #24]
 81026c8:	4013      	ands	r3, r2
 81026ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81026cc:	683b      	ldr	r3, [r7, #0]
 81026ce:	685b      	ldr	r3, [r3, #4]
 81026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81026d4:	2b00      	cmp	r3, #0
 81026d6:	d003      	beq.n	81026e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81026d8:	69ba      	ldr	r2, [r7, #24]
 81026da:	693b      	ldr	r3, [r7, #16]
 81026dc:	4313      	orrs	r3, r2
 81026de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81026e0:	697b      	ldr	r3, [r7, #20]
 81026e2:	69ba      	ldr	r2, [r7, #24]
 81026e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81026e6:	697b      	ldr	r3, [r7, #20]
 81026e8:	681b      	ldr	r3, [r3, #0]
 81026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026ec:	693b      	ldr	r3, [r7, #16]
 81026ee:	43db      	mvns	r3, r3
 81026f0:	69ba      	ldr	r2, [r7, #24]
 81026f2:	4013      	ands	r3, r2
 81026f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81026f6:	683b      	ldr	r3, [r7, #0]
 81026f8:	685b      	ldr	r3, [r3, #4]
 81026fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81026fe:	2b00      	cmp	r3, #0
 8102700:	d003      	beq.n	810270a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102702:	69ba      	ldr	r2, [r7, #24]
 8102704:	693b      	ldr	r3, [r7, #16]
 8102706:	4313      	orrs	r3, r2
 8102708:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810270a:	697b      	ldr	r3, [r7, #20]
 810270c:	69ba      	ldr	r2, [r7, #24]
 810270e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102710:	69fb      	ldr	r3, [r7, #28]
 8102712:	3301      	adds	r3, #1
 8102714:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102716:	683b      	ldr	r3, [r7, #0]
 8102718:	681a      	ldr	r2, [r3, #0]
 810271a:	69fb      	ldr	r3, [r7, #28]
 810271c:	fa22 f303 	lsr.w	r3, r2, r3
 8102720:	2b00      	cmp	r3, #0
 8102722:	f47f ae63 	bne.w	81023ec <HAL_GPIO_Init+0x14>
  }
}
 8102726:	bf00      	nop
 8102728:	bf00      	nop
 810272a:	3724      	adds	r7, #36	; 0x24
 810272c:	46bd      	mov	sp, r7
 810272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102732:	4770      	bx	lr
 8102734:	58000400 	.word	0x58000400

08102738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102738:	b480      	push	{r7}
 810273a:	b083      	sub	sp, #12
 810273c:	af00      	add	r7, sp, #0
 810273e:	6078      	str	r0, [r7, #4]
 8102740:	460b      	mov	r3, r1
 8102742:	807b      	strh	r3, [r7, #2]
 8102744:	4613      	mov	r3, r2
 8102746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102748:	787b      	ldrb	r3, [r7, #1]
 810274a:	2b00      	cmp	r3, #0
 810274c:	d003      	beq.n	8102756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810274e:	887a      	ldrh	r2, [r7, #2]
 8102750:	687b      	ldr	r3, [r7, #4]
 8102752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102754:	e003      	b.n	810275e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102756:	887b      	ldrh	r3, [r7, #2]
 8102758:	041a      	lsls	r2, r3, #16
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	619a      	str	r2, [r3, #24]
}
 810275e:	bf00      	nop
 8102760:	370c      	adds	r7, #12
 8102762:	46bd      	mov	sp, r7
 8102764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102768:	4770      	bx	lr

0810276a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 810276a:	b580      	push	{r7, lr}
 810276c:	b082      	sub	sp, #8
 810276e:	af00      	add	r7, sp, #0
 8102770:	4603      	mov	r3, r0
 8102772:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102778:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 810277c:	88fb      	ldrh	r3, [r7, #6]
 810277e:	4013      	ands	r3, r2
 8102780:	2b00      	cmp	r3, #0
 8102782:	d008      	beq.n	8102796 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8102784:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102788:	88fb      	ldrh	r3, [r7, #6]
 810278a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 810278e:	88fb      	ldrh	r3, [r7, #6]
 8102790:	4618      	mov	r0, r3
 8102792:	f7ff f9e3 	bl	8101b5c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102796:	bf00      	nop
 8102798:	3708      	adds	r7, #8
 810279a:	46bd      	mov	sp, r7
 810279c:	bd80      	pop	{r7, pc}
	...

081027a0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81027a0:	b480      	push	{r7}
 81027a2:	b083      	sub	sp, #12
 81027a4:	af00      	add	r7, sp, #0
 81027a6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81027a8:	4b05      	ldr	r3, [pc, #20]	; (81027c0 <HAL_HSEM_ActivateNotification+0x20>)
 81027aa:	681a      	ldr	r2, [r3, #0]
 81027ac:	4904      	ldr	r1, [pc, #16]	; (81027c0 <HAL_HSEM_ActivateNotification+0x20>)
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	4313      	orrs	r3, r2
 81027b2:	600b      	str	r3, [r1, #0]
#endif
}
 81027b4:	bf00      	nop
 81027b6:	370c      	adds	r7, #12
 81027b8:	46bd      	mov	sp, r7
 81027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027be:	4770      	bx	lr
 81027c0:	58026510 	.word	0x58026510

081027c4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81027c4:	b580      	push	{r7, lr}
 81027c6:	b084      	sub	sp, #16
 81027c8:	af00      	add	r7, sp, #0
 81027ca:	60f8      	str	r0, [r7, #12]
 81027cc:	460b      	mov	r3, r1
 81027ce:	607a      	str	r2, [r7, #4]
 81027d0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81027d2:	4b37      	ldr	r3, [pc, #220]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81027d4:	681b      	ldr	r3, [r3, #0]
 81027d6:	f023 0201 	bic.w	r2, r3, #1
 81027da:	4935      	ldr	r1, [pc, #212]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81027dc:	68fb      	ldr	r3, [r7, #12]
 81027de:	4313      	orrs	r3, r2
 81027e0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81027e2:	687b      	ldr	r3, [r7, #4]
 81027e4:	2b00      	cmp	r3, #0
 81027e6:	d123      	bne.n	8102830 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81027e8:	f7ff fde2 	bl	81023b0 <HAL_GetCurrentCPUID>
 81027ec:	4603      	mov	r3, r0
 81027ee:	2b03      	cmp	r3, #3
 81027f0:	d158      	bne.n	81028a4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81027f2:	4b2f      	ldr	r3, [pc, #188]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81027f4:	691b      	ldr	r3, [r3, #16]
 81027f6:	4a2e      	ldr	r2, [pc, #184]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81027f8:	f023 0301 	bic.w	r3, r3, #1
 81027fc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81027fe:	4b2d      	ldr	r3, [pc, #180]	; (81028b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102800:	691b      	ldr	r3, [r3, #16]
 8102802:	4a2c      	ldr	r2, [pc, #176]	; (81028b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102804:	f043 0304 	orr.w	r3, r3, #4
 8102808:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810280a:	f3bf 8f4f 	dsb	sy
}
 810280e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102810:	f3bf 8f6f 	isb	sy
}
 8102814:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102816:	7afb      	ldrb	r3, [r7, #11]
 8102818:	2b01      	cmp	r3, #1
 810281a:	d101      	bne.n	8102820 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810281c:	bf30      	wfi
 810281e:	e000      	b.n	8102822 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102820:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102822:	4b24      	ldr	r3, [pc, #144]	; (81028b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102824:	691b      	ldr	r3, [r3, #16]
 8102826:	4a23      	ldr	r2, [pc, #140]	; (81028b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102828:	f023 0304 	bic.w	r3, r3, #4
 810282c:	6113      	str	r3, [r2, #16]
 810282e:	e03c      	b.n	81028aa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	2b01      	cmp	r3, #1
 8102834:	d123      	bne.n	810287e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102836:	f7ff fdbb 	bl	81023b0 <HAL_GetCurrentCPUID>
 810283a:	4603      	mov	r3, r0
 810283c:	2b01      	cmp	r3, #1
 810283e:	d133      	bne.n	81028a8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102840:	4b1b      	ldr	r3, [pc, #108]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102842:	695b      	ldr	r3, [r3, #20]
 8102844:	4a1a      	ldr	r2, [pc, #104]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102846:	f023 0302 	bic.w	r3, r3, #2
 810284a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810284c:	4b19      	ldr	r3, [pc, #100]	; (81028b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810284e:	691b      	ldr	r3, [r3, #16]
 8102850:	4a18      	ldr	r2, [pc, #96]	; (81028b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102852:	f043 0304 	orr.w	r3, r3, #4
 8102856:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102858:	f3bf 8f4f 	dsb	sy
}
 810285c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810285e:	f3bf 8f6f 	isb	sy
}
 8102862:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102864:	7afb      	ldrb	r3, [r7, #11]
 8102866:	2b01      	cmp	r3, #1
 8102868:	d101      	bne.n	810286e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810286a:	bf30      	wfi
 810286c:	e000      	b.n	8102870 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810286e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102870:	4b10      	ldr	r3, [pc, #64]	; (81028b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102872:	691b      	ldr	r3, [r3, #16]
 8102874:	4a0f      	ldr	r2, [pc, #60]	; (81028b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102876:	f023 0304 	bic.w	r3, r3, #4
 810287a:	6113      	str	r3, [r2, #16]
 810287c:	e015      	b.n	81028aa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810287e:	f7ff fd97 	bl	81023b0 <HAL_GetCurrentCPUID>
 8102882:	4603      	mov	r3, r0
 8102884:	2b03      	cmp	r3, #3
 8102886:	d106      	bne.n	8102896 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102888:	4b09      	ldr	r3, [pc, #36]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810288a:	691b      	ldr	r3, [r3, #16]
 810288c:	4a08      	ldr	r2, [pc, #32]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810288e:	f023 0304 	bic.w	r3, r3, #4
 8102892:	6113      	str	r3, [r2, #16]
 8102894:	e009      	b.n	81028aa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102896:	4b06      	ldr	r3, [pc, #24]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102898:	695b      	ldr	r3, [r3, #20]
 810289a:	4a05      	ldr	r2, [pc, #20]	; (81028b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810289c:	f023 0304 	bic.w	r3, r3, #4
 81028a0:	6153      	str	r3, [r2, #20]
 81028a2:	e002      	b.n	81028aa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81028a4:	bf00      	nop
 81028a6:	e000      	b.n	81028aa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81028a8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81028aa:	3710      	adds	r7, #16
 81028ac:	46bd      	mov	sp, r7
 81028ae:	bd80      	pop	{r7, pc}
 81028b0:	58024800 	.word	0x58024800
 81028b4:	e000ed00 	.word	0xe000ed00

081028b8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81028b8:	b580      	push	{r7, lr}
 81028ba:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81028bc:	f7ff fd78 	bl	81023b0 <HAL_GetCurrentCPUID>
 81028c0:	4603      	mov	r3, r0
 81028c2:	2b03      	cmp	r3, #3
 81028c4:	d101      	bne.n	81028ca <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81028c6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81028c8:	e001      	b.n	81028ce <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81028ca:	bf40      	sev
    __WFE ();
 81028cc:	bf20      	wfe
}
 81028ce:	bf00      	nop
 81028d0:	bd80      	pop	{r7, pc}
	...

081028d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81028d4:	b480      	push	{r7}
 81028d6:	b089      	sub	sp, #36	; 0x24
 81028d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81028da:	4bb3      	ldr	r3, [pc, #716]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81028dc:	691b      	ldr	r3, [r3, #16]
 81028de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81028e2:	2b18      	cmp	r3, #24
 81028e4:	f200 8155 	bhi.w	8102b92 <HAL_RCC_GetSysClockFreq+0x2be>
 81028e8:	a201      	add	r2, pc, #4	; (adr r2, 81028f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81028ee:	bf00      	nop
 81028f0:	08102955 	.word	0x08102955
 81028f4:	08102b93 	.word	0x08102b93
 81028f8:	08102b93 	.word	0x08102b93
 81028fc:	08102b93 	.word	0x08102b93
 8102900:	08102b93 	.word	0x08102b93
 8102904:	08102b93 	.word	0x08102b93
 8102908:	08102b93 	.word	0x08102b93
 810290c:	08102b93 	.word	0x08102b93
 8102910:	0810297b 	.word	0x0810297b
 8102914:	08102b93 	.word	0x08102b93
 8102918:	08102b93 	.word	0x08102b93
 810291c:	08102b93 	.word	0x08102b93
 8102920:	08102b93 	.word	0x08102b93
 8102924:	08102b93 	.word	0x08102b93
 8102928:	08102b93 	.word	0x08102b93
 810292c:	08102b93 	.word	0x08102b93
 8102930:	08102981 	.word	0x08102981
 8102934:	08102b93 	.word	0x08102b93
 8102938:	08102b93 	.word	0x08102b93
 810293c:	08102b93 	.word	0x08102b93
 8102940:	08102b93 	.word	0x08102b93
 8102944:	08102b93 	.word	0x08102b93
 8102948:	08102b93 	.word	0x08102b93
 810294c:	08102b93 	.word	0x08102b93
 8102950:	08102987 	.word	0x08102987
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102954:	4b94      	ldr	r3, [pc, #592]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102956:	681b      	ldr	r3, [r3, #0]
 8102958:	f003 0320 	and.w	r3, r3, #32
 810295c:	2b00      	cmp	r3, #0
 810295e:	d009      	beq.n	8102974 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102960:	4b91      	ldr	r3, [pc, #580]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102962:	681b      	ldr	r3, [r3, #0]
 8102964:	08db      	lsrs	r3, r3, #3
 8102966:	f003 0303 	and.w	r3, r3, #3
 810296a:	4a90      	ldr	r2, [pc, #576]	; (8102bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 810296c:	fa22 f303 	lsr.w	r3, r2, r3
 8102970:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8102972:	e111      	b.n	8102b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102974:	4b8d      	ldr	r3, [pc, #564]	; (8102bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102976:	61bb      	str	r3, [r7, #24]
    break;
 8102978:	e10e      	b.n	8102b98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810297a:	4b8d      	ldr	r3, [pc, #564]	; (8102bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810297c:	61bb      	str	r3, [r7, #24]
    break;
 810297e:	e10b      	b.n	8102b98 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8102980:	4b8c      	ldr	r3, [pc, #560]	; (8102bb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102982:	61bb      	str	r3, [r7, #24]
    break;
 8102984:	e108      	b.n	8102b98 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102986:	4b88      	ldr	r3, [pc, #544]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810298a:	f003 0303 	and.w	r3, r3, #3
 810298e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8102990:	4b85      	ldr	r3, [pc, #532]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102994:	091b      	lsrs	r3, r3, #4
 8102996:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810299a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810299c:	4b82      	ldr	r3, [pc, #520]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029a0:	f003 0301 	and.w	r3, r3, #1
 81029a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81029a6:	4b80      	ldr	r3, [pc, #512]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81029aa:	08db      	lsrs	r3, r3, #3
 81029ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81029b0:	68fa      	ldr	r2, [r7, #12]
 81029b2:	fb02 f303 	mul.w	r3, r2, r3
 81029b6:	ee07 3a90 	vmov	s15, r3
 81029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81029c2:	693b      	ldr	r3, [r7, #16]
 81029c4:	2b00      	cmp	r3, #0
 81029c6:	f000 80e1 	beq.w	8102b8c <HAL_RCC_GetSysClockFreq+0x2b8>
 81029ca:	697b      	ldr	r3, [r7, #20]
 81029cc:	2b02      	cmp	r3, #2
 81029ce:	f000 8083 	beq.w	8102ad8 <HAL_RCC_GetSysClockFreq+0x204>
 81029d2:	697b      	ldr	r3, [r7, #20]
 81029d4:	2b02      	cmp	r3, #2
 81029d6:	f200 80a1 	bhi.w	8102b1c <HAL_RCC_GetSysClockFreq+0x248>
 81029da:	697b      	ldr	r3, [r7, #20]
 81029dc:	2b00      	cmp	r3, #0
 81029de:	d003      	beq.n	81029e8 <HAL_RCC_GetSysClockFreq+0x114>
 81029e0:	697b      	ldr	r3, [r7, #20]
 81029e2:	2b01      	cmp	r3, #1
 81029e4:	d056      	beq.n	8102a94 <HAL_RCC_GetSysClockFreq+0x1c0>
 81029e6:	e099      	b.n	8102b1c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81029e8:	4b6f      	ldr	r3, [pc, #444]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029ea:	681b      	ldr	r3, [r3, #0]
 81029ec:	f003 0320 	and.w	r3, r3, #32
 81029f0:	2b00      	cmp	r3, #0
 81029f2:	d02d      	beq.n	8102a50 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81029f4:	4b6c      	ldr	r3, [pc, #432]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	08db      	lsrs	r3, r3, #3
 81029fa:	f003 0303 	and.w	r3, r3, #3
 81029fe:	4a6b      	ldr	r2, [pc, #428]	; (8102bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102a00:	fa22 f303 	lsr.w	r3, r2, r3
 8102a04:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a06:	687b      	ldr	r3, [r7, #4]
 8102a08:	ee07 3a90 	vmov	s15, r3
 8102a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a10:	693b      	ldr	r3, [r7, #16]
 8102a12:	ee07 3a90 	vmov	s15, r3
 8102a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a1e:	4b62      	ldr	r3, [pc, #392]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a26:	ee07 3a90 	vmov	s15, r3
 8102a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102a32:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102a4e:	e087      	b.n	8102b60 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a50:	693b      	ldr	r3, [r7, #16]
 8102a52:	ee07 3a90 	vmov	s15, r3
 8102a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a5a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102bbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8102a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a62:	4b51      	ldr	r3, [pc, #324]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a6a:	ee07 3a90 	vmov	s15, r3
 8102a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8102a76:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102a92:	e065      	b.n	8102b60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a94:	693b      	ldr	r3, [r7, #16]
 8102a96:	ee07 3a90 	vmov	s15, r3
 8102a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a9e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102aa6:	4b40      	ldr	r3, [pc, #256]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102aae:	ee07 3a90 	vmov	s15, r3
 8102ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8102aba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102ad6:	e043      	b.n	8102b60 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102ad8:	693b      	ldr	r3, [r7, #16]
 8102ada:	ee07 3a90 	vmov	s15, r3
 8102ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ae2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102bc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102aea:	4b2f      	ldr	r3, [pc, #188]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102af2:	ee07 3a90 	vmov	s15, r3
 8102af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8102afe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b1a:	e021      	b.n	8102b60 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b1c:	693b      	ldr	r3, [r7, #16]
 8102b1e:	ee07 3a90 	vmov	s15, r3
 8102b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b26:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b2e:	4b1e      	ldr	r3, [pc, #120]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b36:	ee07 3a90 	vmov	s15, r3
 8102b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b42:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b5e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102b60:	4b11      	ldr	r3, [pc, #68]	; (8102ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b64:	0a5b      	lsrs	r3, r3, #9
 8102b66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102b6a:	3301      	adds	r3, #1
 8102b6c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102b6e:	683b      	ldr	r3, [r7, #0]
 8102b70:	ee07 3a90 	vmov	s15, r3
 8102b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8102b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102b84:	ee17 3a90 	vmov	r3, s15
 8102b88:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102b8a:	e005      	b.n	8102b98 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102b8c:	2300      	movs	r3, #0
 8102b8e:	61bb      	str	r3, [r7, #24]
    break;
 8102b90:	e002      	b.n	8102b98 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102b92:	4b07      	ldr	r3, [pc, #28]	; (8102bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102b94:	61bb      	str	r3, [r7, #24]
    break;
 8102b96:	bf00      	nop
  }

  return sysclockfreq;
 8102b98:	69bb      	ldr	r3, [r7, #24]
}
 8102b9a:	4618      	mov	r0, r3
 8102b9c:	3724      	adds	r7, #36	; 0x24
 8102b9e:	46bd      	mov	sp, r7
 8102ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ba4:	4770      	bx	lr
 8102ba6:	bf00      	nop
 8102ba8:	58024400 	.word	0x58024400
 8102bac:	03d09000 	.word	0x03d09000
 8102bb0:	003d0900 	.word	0x003d0900
 8102bb4:	007a1200 	.word	0x007a1200
 8102bb8:	46000000 	.word	0x46000000
 8102bbc:	4c742400 	.word	0x4c742400
 8102bc0:	4a742400 	.word	0x4a742400
 8102bc4:	4af42400 	.word	0x4af42400

08102bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102bc8:	b580      	push	{r7, lr}
 8102bca:	b082      	sub	sp, #8
 8102bcc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102bce:	f7ff fe81 	bl	81028d4 <HAL_RCC_GetSysClockFreq>
 8102bd2:	4602      	mov	r2, r0
 8102bd4:	4b11      	ldr	r3, [pc, #68]	; (8102c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8102bd6:	699b      	ldr	r3, [r3, #24]
 8102bd8:	0a1b      	lsrs	r3, r3, #8
 8102bda:	f003 030f 	and.w	r3, r3, #15
 8102bde:	4910      	ldr	r1, [pc, #64]	; (8102c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8102be0:	5ccb      	ldrb	r3, [r1, r3]
 8102be2:	f003 031f 	and.w	r3, r3, #31
 8102be6:	fa22 f303 	lsr.w	r3, r2, r3
 8102bea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102bec:	4b0b      	ldr	r3, [pc, #44]	; (8102c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8102bee:	699b      	ldr	r3, [r3, #24]
 8102bf0:	f003 030f 	and.w	r3, r3, #15
 8102bf4:	4a0a      	ldr	r2, [pc, #40]	; (8102c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8102bf6:	5cd3      	ldrb	r3, [r2, r3]
 8102bf8:	f003 031f 	and.w	r3, r3, #31
 8102bfc:	687a      	ldr	r2, [r7, #4]
 8102bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8102c02:	4a08      	ldr	r2, [pc, #32]	; (8102c24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c04:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102c06:	4b07      	ldr	r3, [pc, #28]	; (8102c24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c08:	681b      	ldr	r3, [r3, #0]
 8102c0a:	4a07      	ldr	r2, [pc, #28]	; (8102c28 <HAL_RCC_GetHCLKFreq+0x60>)
 8102c0c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102c0e:	4b05      	ldr	r3, [pc, #20]	; (8102c24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c10:	681b      	ldr	r3, [r3, #0]
}
 8102c12:	4618      	mov	r0, r3
 8102c14:	3708      	adds	r7, #8
 8102c16:	46bd      	mov	sp, r7
 8102c18:	bd80      	pop	{r7, pc}
 8102c1a:	bf00      	nop
 8102c1c:	58024400 	.word	0x58024400
 8102c20:	0810b408 	.word	0x0810b408
 8102c24:	10000004 	.word	0x10000004
 8102c28:	10000000 	.word	0x10000000

08102c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102c2c:	b580      	push	{r7, lr}
 8102c2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102c30:	f7ff ffca 	bl	8102bc8 <HAL_RCC_GetHCLKFreq>
 8102c34:	4602      	mov	r2, r0
 8102c36:	4b06      	ldr	r3, [pc, #24]	; (8102c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102c38:	69db      	ldr	r3, [r3, #28]
 8102c3a:	091b      	lsrs	r3, r3, #4
 8102c3c:	f003 0307 	and.w	r3, r3, #7
 8102c40:	4904      	ldr	r1, [pc, #16]	; (8102c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102c42:	5ccb      	ldrb	r3, [r1, r3]
 8102c44:	f003 031f 	and.w	r3, r3, #31
 8102c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102c4c:	4618      	mov	r0, r3
 8102c4e:	bd80      	pop	{r7, pc}
 8102c50:	58024400 	.word	0x58024400
 8102c54:	0810b408 	.word	0x0810b408

08102c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102c58:	b580      	push	{r7, lr}
 8102c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102c5c:	f7ff ffb4 	bl	8102bc8 <HAL_RCC_GetHCLKFreq>
 8102c60:	4602      	mov	r2, r0
 8102c62:	4b06      	ldr	r3, [pc, #24]	; (8102c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8102c64:	69db      	ldr	r3, [r3, #28]
 8102c66:	0a1b      	lsrs	r3, r3, #8
 8102c68:	f003 0307 	and.w	r3, r3, #7
 8102c6c:	4904      	ldr	r1, [pc, #16]	; (8102c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8102c6e:	5ccb      	ldrb	r3, [r1, r3]
 8102c70:	f003 031f 	and.w	r3, r3, #31
 8102c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102c78:	4618      	mov	r0, r3
 8102c7a:	bd80      	pop	{r7, pc}
 8102c7c:	58024400 	.word	0x58024400
 8102c80:	0810b408 	.word	0x0810b408

08102c84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102c84:	b580      	push	{r7, lr}
 8102c86:	b086      	sub	sp, #24
 8102c88:	af00      	add	r7, sp, #0
 8102c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102c8c:	2300      	movs	r3, #0
 8102c8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102c90:	2300      	movs	r3, #0
 8102c92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	681b      	ldr	r3, [r3, #0]
 8102c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102c9c:	2b00      	cmp	r3, #0
 8102c9e:	d03f      	beq.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102ca4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102ca8:	d02a      	beq.n	8102d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102caa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102cae:	d824      	bhi.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102cb4:	d018      	beq.n	8102ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102cba:	d81e      	bhi.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102cbc:	2b00      	cmp	r3, #0
 8102cbe:	d003      	beq.n	8102cc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102cc4:	d007      	beq.n	8102cd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102cc6:	e018      	b.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cc8:	4bab      	ldr	r3, [pc, #684]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ccc:	4aaa      	ldr	r2, [pc, #680]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102cd4:	e015      	b.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	3304      	adds	r3, #4
 8102cda:	2102      	movs	r1, #2
 8102cdc:	4618      	mov	r0, r3
 8102cde:	f001 f9cf 	bl	8104080 <RCCEx_PLL2_Config>
 8102ce2:	4603      	mov	r3, r0
 8102ce4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102ce6:	e00c      	b.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102ce8:	687b      	ldr	r3, [r7, #4]
 8102cea:	3324      	adds	r3, #36	; 0x24
 8102cec:	2102      	movs	r1, #2
 8102cee:	4618      	mov	r0, r3
 8102cf0:	f001 fa78 	bl	81041e4 <RCCEx_PLL3_Config>
 8102cf4:	4603      	mov	r3, r0
 8102cf6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102cf8:	e003      	b.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102cfa:	2301      	movs	r3, #1
 8102cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8102cfe:	e000      	b.n	8102d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d02:	7dfb      	ldrb	r3, [r7, #23]
 8102d04:	2b00      	cmp	r3, #0
 8102d06:	d109      	bne.n	8102d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102d08:	4b9b      	ldr	r3, [pc, #620]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102d10:	687b      	ldr	r3, [r7, #4]
 8102d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102d14:	4998      	ldr	r1, [pc, #608]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d16:	4313      	orrs	r3, r2
 8102d18:	650b      	str	r3, [r1, #80]	; 0x50
 8102d1a:	e001      	b.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d1c:	7dfb      	ldrb	r3, [r7, #23]
 8102d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102d20:	687b      	ldr	r3, [r7, #4]
 8102d22:	681b      	ldr	r3, [r3, #0]
 8102d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102d28:	2b00      	cmp	r3, #0
 8102d2a:	d03d      	beq.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102d2c:	687b      	ldr	r3, [r7, #4]
 8102d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d30:	2b04      	cmp	r3, #4
 8102d32:	d826      	bhi.n	8102d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102d34:	a201      	add	r2, pc, #4	; (adr r2, 8102d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102d3a:	bf00      	nop
 8102d3c:	08102d51 	.word	0x08102d51
 8102d40:	08102d5f 	.word	0x08102d5f
 8102d44:	08102d71 	.word	0x08102d71
 8102d48:	08102d89 	.word	0x08102d89
 8102d4c:	08102d89 	.word	0x08102d89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d50:	4b89      	ldr	r3, [pc, #548]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d54:	4a88      	ldr	r2, [pc, #544]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102d5c:	e015      	b.n	8102d8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	3304      	adds	r3, #4
 8102d62:	2100      	movs	r1, #0
 8102d64:	4618      	mov	r0, r3
 8102d66:	f001 f98b 	bl	8104080 <RCCEx_PLL2_Config>
 8102d6a:	4603      	mov	r3, r0
 8102d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102d6e:	e00c      	b.n	8102d8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	3324      	adds	r3, #36	; 0x24
 8102d74:	2100      	movs	r1, #0
 8102d76:	4618      	mov	r0, r3
 8102d78:	f001 fa34 	bl	81041e4 <RCCEx_PLL3_Config>
 8102d7c:	4603      	mov	r3, r0
 8102d7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102d80:	e003      	b.n	8102d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d82:	2301      	movs	r3, #1
 8102d84:	75fb      	strb	r3, [r7, #23]
      break;
 8102d86:	e000      	b.n	8102d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d8a:	7dfb      	ldrb	r3, [r7, #23]
 8102d8c:	2b00      	cmp	r3, #0
 8102d8e:	d109      	bne.n	8102da4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102d90:	4b79      	ldr	r3, [pc, #484]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d94:	f023 0207 	bic.w	r2, r3, #7
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d9c:	4976      	ldr	r1, [pc, #472]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d9e:	4313      	orrs	r3, r2
 8102da0:	650b      	str	r3, [r1, #80]	; 0x50
 8102da2:	e001      	b.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102da4:	7dfb      	ldrb	r3, [r7, #23]
 8102da6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102db0:	2b00      	cmp	r3, #0
 8102db2:	d042      	beq.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102dbc:	d02b      	beq.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102dc2:	d825      	bhi.n	8102e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102dc4:	2bc0      	cmp	r3, #192	; 0xc0
 8102dc6:	d028      	beq.n	8102e1a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102dc8:	2bc0      	cmp	r3, #192	; 0xc0
 8102dca:	d821      	bhi.n	8102e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102dcc:	2b80      	cmp	r3, #128	; 0x80
 8102dce:	d016      	beq.n	8102dfe <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102dd0:	2b80      	cmp	r3, #128	; 0x80
 8102dd2:	d81d      	bhi.n	8102e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102dd4:	2b00      	cmp	r3, #0
 8102dd6:	d002      	beq.n	8102dde <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102dd8:	2b40      	cmp	r3, #64	; 0x40
 8102dda:	d007      	beq.n	8102dec <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102ddc:	e018      	b.n	8102e10 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102dde:	4b66      	ldr	r3, [pc, #408]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102de2:	4a65      	ldr	r2, [pc, #404]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102de8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102dea:	e017      	b.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	3304      	adds	r3, #4
 8102df0:	2100      	movs	r1, #0
 8102df2:	4618      	mov	r0, r3
 8102df4:	f001 f944 	bl	8104080 <RCCEx_PLL2_Config>
 8102df8:	4603      	mov	r3, r0
 8102dfa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102dfc:	e00e      	b.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102dfe:	687b      	ldr	r3, [r7, #4]
 8102e00:	3324      	adds	r3, #36	; 0x24
 8102e02:	2100      	movs	r1, #0
 8102e04:	4618      	mov	r0, r3
 8102e06:	f001 f9ed 	bl	81041e4 <RCCEx_PLL3_Config>
 8102e0a:	4603      	mov	r3, r0
 8102e0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e0e:	e005      	b.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e10:	2301      	movs	r3, #1
 8102e12:	75fb      	strb	r3, [r7, #23]
      break;
 8102e14:	e002      	b.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102e16:	bf00      	nop
 8102e18:	e000      	b.n	8102e1c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102e1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e1c:	7dfb      	ldrb	r3, [r7, #23]
 8102e1e:	2b00      	cmp	r3, #0
 8102e20:	d109      	bne.n	8102e36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102e22:	4b55      	ldr	r3, [pc, #340]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e26:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102e2a:	687b      	ldr	r3, [r7, #4]
 8102e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e2e:	4952      	ldr	r1, [pc, #328]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e30:	4313      	orrs	r3, r2
 8102e32:	650b      	str	r3, [r1, #80]	; 0x50
 8102e34:	e001      	b.n	8102e3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e36:	7dfb      	ldrb	r3, [r7, #23]
 8102e38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102e3a:	687b      	ldr	r3, [r7, #4]
 8102e3c:	681b      	ldr	r3, [r3, #0]
 8102e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102e42:	2b00      	cmp	r3, #0
 8102e44:	d049      	beq.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102e46:	687b      	ldr	r3, [r7, #4]
 8102e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102e50:	d030      	beq.n	8102eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102e52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102e56:	d82a      	bhi.n	8102eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102e58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102e5c:	d02c      	beq.n	8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102e5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102e62:	d824      	bhi.n	8102eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102e68:	d018      	beq.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102e6e:	d81e      	bhi.n	8102eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102e70:	2b00      	cmp	r3, #0
 8102e72:	d003      	beq.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102e78:	d007      	beq.n	8102e8a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102e7a:	e018      	b.n	8102eae <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e7c:	4b3e      	ldr	r3, [pc, #248]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e80:	4a3d      	ldr	r2, [pc, #244]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102e88:	e017      	b.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e8a:	687b      	ldr	r3, [r7, #4]
 8102e8c:	3304      	adds	r3, #4
 8102e8e:	2100      	movs	r1, #0
 8102e90:	4618      	mov	r0, r3
 8102e92:	f001 f8f5 	bl	8104080 <RCCEx_PLL2_Config>
 8102e96:	4603      	mov	r3, r0
 8102e98:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102e9a:	e00e      	b.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102e9c:	687b      	ldr	r3, [r7, #4]
 8102e9e:	3324      	adds	r3, #36	; 0x24
 8102ea0:	2100      	movs	r1, #0
 8102ea2:	4618      	mov	r0, r3
 8102ea4:	f001 f99e 	bl	81041e4 <RCCEx_PLL3_Config>
 8102ea8:	4603      	mov	r3, r0
 8102eaa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102eac:	e005      	b.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102eae:	2301      	movs	r3, #1
 8102eb0:	75fb      	strb	r3, [r7, #23]
      break;
 8102eb2:	e002      	b.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102eb4:	bf00      	nop
 8102eb6:	e000      	b.n	8102eba <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102eba:	7dfb      	ldrb	r3, [r7, #23]
 8102ebc:	2b00      	cmp	r3, #0
 8102ebe:	d10a      	bne.n	8102ed6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102ec0:	4b2d      	ldr	r3, [pc, #180]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ec4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102ece:	492a      	ldr	r1, [pc, #168]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ed0:	4313      	orrs	r3, r2
 8102ed2:	658b      	str	r3, [r1, #88]	; 0x58
 8102ed4:	e001      	b.n	8102eda <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ed6:	7dfb      	ldrb	r3, [r7, #23]
 8102ed8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	681b      	ldr	r3, [r3, #0]
 8102ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102ee2:	2b00      	cmp	r3, #0
 8102ee4:	d04c      	beq.n	8102f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102eec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102ef0:	d030      	beq.n	8102f54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102ef2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102ef6:	d82a      	bhi.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102ef8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102efc:	d02c      	beq.n	8102f58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8102efe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102f02:	d824      	bhi.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102f08:	d018      	beq.n	8102f3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102f0e:	d81e      	bhi.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f10:	2b00      	cmp	r3, #0
 8102f12:	d003      	beq.n	8102f1c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102f18:	d007      	beq.n	8102f2a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102f1a:	e018      	b.n	8102f4e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f1c:	4b16      	ldr	r3, [pc, #88]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f20:	4a15      	ldr	r2, [pc, #84]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f28:	e017      	b.n	8102f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	3304      	adds	r3, #4
 8102f2e:	2100      	movs	r1, #0
 8102f30:	4618      	mov	r0, r3
 8102f32:	f001 f8a5 	bl	8104080 <RCCEx_PLL2_Config>
 8102f36:	4603      	mov	r3, r0
 8102f38:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102f3a:	e00e      	b.n	8102f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	3324      	adds	r3, #36	; 0x24
 8102f40:	2100      	movs	r1, #0
 8102f42:	4618      	mov	r0, r3
 8102f44:	f001 f94e 	bl	81041e4 <RCCEx_PLL3_Config>
 8102f48:	4603      	mov	r3, r0
 8102f4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f4c:	e005      	b.n	8102f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102f4e:	2301      	movs	r3, #1
 8102f50:	75fb      	strb	r3, [r7, #23]
      break;
 8102f52:	e002      	b.n	8102f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102f54:	bf00      	nop
 8102f56:	e000      	b.n	8102f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102f58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f5a:	7dfb      	ldrb	r3, [r7, #23]
 8102f5c:	2b00      	cmp	r3, #0
 8102f5e:	d10d      	bne.n	8102f7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102f60:	4b05      	ldr	r3, [pc, #20]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f64:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102f6e:	4902      	ldr	r1, [pc, #8]	; (8102f78 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f70:	4313      	orrs	r3, r2
 8102f72:	658b      	str	r3, [r1, #88]	; 0x58
 8102f74:	e004      	b.n	8102f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8102f76:	bf00      	nop
 8102f78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f7c:	7dfb      	ldrb	r3, [r7, #23]
 8102f7e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102f80:	687b      	ldr	r3, [r7, #4]
 8102f82:	681b      	ldr	r3, [r3, #0]
 8102f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	d032      	beq.n	8102ff2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102f8c:	687b      	ldr	r3, [r7, #4]
 8102f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102f90:	2b30      	cmp	r3, #48	; 0x30
 8102f92:	d01c      	beq.n	8102fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102f94:	2b30      	cmp	r3, #48	; 0x30
 8102f96:	d817      	bhi.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102f98:	2b20      	cmp	r3, #32
 8102f9a:	d00c      	beq.n	8102fb6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8102f9c:	2b20      	cmp	r3, #32
 8102f9e:	d813      	bhi.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102fa0:	2b00      	cmp	r3, #0
 8102fa2:	d016      	beq.n	8102fd2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8102fa4:	2b10      	cmp	r3, #16
 8102fa6:	d10f      	bne.n	8102fc8 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fa8:	4baf      	ldr	r3, [pc, #700]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fac:	4aae      	ldr	r2, [pc, #696]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102fb4:	e00e      	b.n	8102fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	3304      	adds	r3, #4
 8102fba:	2102      	movs	r1, #2
 8102fbc:	4618      	mov	r0, r3
 8102fbe:	f001 f85f 	bl	8104080 <RCCEx_PLL2_Config>
 8102fc2:	4603      	mov	r3, r0
 8102fc4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102fc6:	e005      	b.n	8102fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102fc8:	2301      	movs	r3, #1
 8102fca:	75fb      	strb	r3, [r7, #23]
      break;
 8102fcc:	e002      	b.n	8102fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102fce:	bf00      	nop
 8102fd0:	e000      	b.n	8102fd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8102fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fd4:	7dfb      	ldrb	r3, [r7, #23]
 8102fd6:	2b00      	cmp	r3, #0
 8102fd8:	d109      	bne.n	8102fee <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102fda:	4ba3      	ldr	r3, [pc, #652]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102fde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102fe6:	49a0      	ldr	r1, [pc, #640]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102fe8:	4313      	orrs	r3, r2
 8102fea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102fec:	e001      	b.n	8102ff2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fee:	7dfb      	ldrb	r3, [r7, #23]
 8102ff0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102ff2:	687b      	ldr	r3, [r7, #4]
 8102ff4:	681b      	ldr	r3, [r3, #0]
 8102ff6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102ffa:	2b00      	cmp	r3, #0
 8102ffc:	d047      	beq.n	810308e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102ffe:	687b      	ldr	r3, [r7, #4]
 8103000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103006:	d030      	beq.n	810306a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8103008:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810300c:	d82a      	bhi.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810300e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103012:	d02c      	beq.n	810306e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8103014:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103018:	d824      	bhi.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810301a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810301e:	d018      	beq.n	8103052 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103024:	d81e      	bhi.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103026:	2b00      	cmp	r3, #0
 8103028:	d003      	beq.n	8103032 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810302a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810302e:	d007      	beq.n	8103040 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103030:	e018      	b.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103032:	4b8d      	ldr	r3, [pc, #564]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103036:	4a8c      	ldr	r2, [pc, #560]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810303c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810303e:	e017      	b.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	3304      	adds	r3, #4
 8103044:	2100      	movs	r1, #0
 8103046:	4618      	mov	r0, r3
 8103048:	f001 f81a 	bl	8104080 <RCCEx_PLL2_Config>
 810304c:	4603      	mov	r3, r0
 810304e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103050:	e00e      	b.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103052:	687b      	ldr	r3, [r7, #4]
 8103054:	3324      	adds	r3, #36	; 0x24
 8103056:	2100      	movs	r1, #0
 8103058:	4618      	mov	r0, r3
 810305a:	f001 f8c3 	bl	81041e4 <RCCEx_PLL3_Config>
 810305e:	4603      	mov	r3, r0
 8103060:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103062:	e005      	b.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103064:	2301      	movs	r3, #1
 8103066:	75fb      	strb	r3, [r7, #23]
      break;
 8103068:	e002      	b.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810306a:	bf00      	nop
 810306c:	e000      	b.n	8103070 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810306e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103070:	7dfb      	ldrb	r3, [r7, #23]
 8103072:	2b00      	cmp	r3, #0
 8103074:	d109      	bne.n	810308a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103076:	4b7c      	ldr	r3, [pc, #496]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810307a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810307e:	687b      	ldr	r3, [r7, #4]
 8103080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103082:	4979      	ldr	r1, [pc, #484]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103084:	4313      	orrs	r3, r2
 8103086:	650b      	str	r3, [r1, #80]	; 0x50
 8103088:	e001      	b.n	810308e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810308a:	7dfb      	ldrb	r3, [r7, #23]
 810308c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810308e:	687b      	ldr	r3, [r7, #4]
 8103090:	681b      	ldr	r3, [r3, #0]
 8103092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103096:	2b00      	cmp	r3, #0
 8103098:	d049      	beq.n	810312e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810309e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81030a2:	d02e      	beq.n	8103102 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81030a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81030a8:	d828      	bhi.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 81030aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81030ae:	d02a      	beq.n	8103106 <HAL_RCCEx_PeriphCLKConfig+0x482>
 81030b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81030b4:	d822      	bhi.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 81030b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81030ba:	d026      	beq.n	810310a <HAL_RCCEx_PeriphCLKConfig+0x486>
 81030bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81030c0:	d81c      	bhi.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 81030c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81030c6:	d010      	beq.n	81030ea <HAL_RCCEx_PeriphCLKConfig+0x466>
 81030c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81030cc:	d816      	bhi.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x478>
 81030ce:	2b00      	cmp	r3, #0
 81030d0:	d01d      	beq.n	810310e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81030d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81030d6:	d111      	bne.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81030d8:	687b      	ldr	r3, [r7, #4]
 81030da:	3304      	adds	r3, #4
 81030dc:	2101      	movs	r1, #1
 81030de:	4618      	mov	r0, r3
 81030e0:	f000 ffce 	bl	8104080 <RCCEx_PLL2_Config>
 81030e4:	4603      	mov	r3, r0
 81030e6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81030e8:	e012      	b.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81030ea:	687b      	ldr	r3, [r7, #4]
 81030ec:	3324      	adds	r3, #36	; 0x24
 81030ee:	2101      	movs	r1, #1
 81030f0:	4618      	mov	r0, r3
 81030f2:	f001 f877 	bl	81041e4 <RCCEx_PLL3_Config>
 81030f6:	4603      	mov	r3, r0
 81030f8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81030fa:	e009      	b.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81030fc:	2301      	movs	r3, #1
 81030fe:	75fb      	strb	r3, [r7, #23]
      break;
 8103100:	e006      	b.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103102:	bf00      	nop
 8103104:	e004      	b.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103106:	bf00      	nop
 8103108:	e002      	b.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810310a:	bf00      	nop
 810310c:	e000      	b.n	8103110 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810310e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103110:	7dfb      	ldrb	r3, [r7, #23]
 8103112:	2b00      	cmp	r3, #0
 8103114:	d109      	bne.n	810312a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103116:	4b54      	ldr	r3, [pc, #336]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810311a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810311e:	687b      	ldr	r3, [r7, #4]
 8103120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103122:	4951      	ldr	r1, [pc, #324]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103124:	4313      	orrs	r3, r2
 8103126:	650b      	str	r3, [r1, #80]	; 0x50
 8103128:	e001      	b.n	810312e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810312a:	7dfb      	ldrb	r3, [r7, #23]
 810312c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810312e:	687b      	ldr	r3, [r7, #4]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103136:	2b00      	cmp	r3, #0
 8103138:	d04b      	beq.n	81031d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103144:	d02e      	beq.n	81031a4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8103146:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810314a:	d828      	bhi.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103150:	d02a      	beq.n	81031a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8103152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103156:	d822      	bhi.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103158:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810315c:	d026      	beq.n	81031ac <HAL_RCCEx_PeriphCLKConfig+0x528>
 810315e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103162:	d81c      	bhi.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103164:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103168:	d010      	beq.n	810318c <HAL_RCCEx_PeriphCLKConfig+0x508>
 810316a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810316e:	d816      	bhi.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103170:	2b00      	cmp	r3, #0
 8103172:	d01d      	beq.n	81031b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8103174:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103178:	d111      	bne.n	810319e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	3304      	adds	r3, #4
 810317e:	2101      	movs	r1, #1
 8103180:	4618      	mov	r0, r3
 8103182:	f000 ff7d 	bl	8104080 <RCCEx_PLL2_Config>
 8103186:	4603      	mov	r3, r0
 8103188:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810318a:	e012      	b.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	3324      	adds	r3, #36	; 0x24
 8103190:	2101      	movs	r1, #1
 8103192:	4618      	mov	r0, r3
 8103194:	f001 f826 	bl	81041e4 <RCCEx_PLL3_Config>
 8103198:	4603      	mov	r3, r0
 810319a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810319c:	e009      	b.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810319e:	2301      	movs	r3, #1
 81031a0:	75fb      	strb	r3, [r7, #23]
      break;
 81031a2:	e006      	b.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81031a4:	bf00      	nop
 81031a6:	e004      	b.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81031a8:	bf00      	nop
 81031aa:	e002      	b.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81031ac:	bf00      	nop
 81031ae:	e000      	b.n	81031b2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81031b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81031b2:	7dfb      	ldrb	r3, [r7, #23]
 81031b4:	2b00      	cmp	r3, #0
 81031b6:	d10a      	bne.n	81031ce <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81031b8:	4b2b      	ldr	r3, [pc, #172]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81031bc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81031c6:	4928      	ldr	r1, [pc, #160]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031c8:	4313      	orrs	r3, r2
 81031ca:	658b      	str	r3, [r1, #88]	; 0x58
 81031cc:	e001      	b.n	81031d2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031ce:	7dfb      	ldrb	r3, [r7, #23]
 81031d0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81031da:	2b00      	cmp	r3, #0
 81031dc:	d02f      	beq.n	810323e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81031de:	687b      	ldr	r3, [r7, #4]
 81031e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81031e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031e6:	d00e      	beq.n	8103206 <HAL_RCCEx_PeriphCLKConfig+0x582>
 81031e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031ec:	d814      	bhi.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x594>
 81031ee:	2b00      	cmp	r3, #0
 81031f0:	d015      	beq.n	810321e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81031f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81031f6:	d10f      	bne.n	8103218 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81031f8:	4b1b      	ldr	r3, [pc, #108]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031fc:	4a1a      	ldr	r2, [pc, #104]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81031fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103202:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103204:	e00c      	b.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	3304      	adds	r3, #4
 810320a:	2101      	movs	r1, #1
 810320c:	4618      	mov	r0, r3
 810320e:	f000 ff37 	bl	8104080 <RCCEx_PLL2_Config>
 8103212:	4603      	mov	r3, r0
 8103214:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103216:	e003      	b.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103218:	2301      	movs	r3, #1
 810321a:	75fb      	strb	r3, [r7, #23]
      break;
 810321c:	e000      	b.n	8103220 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810321e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103220:	7dfb      	ldrb	r3, [r7, #23]
 8103222:	2b00      	cmp	r3, #0
 8103224:	d109      	bne.n	810323a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103226:	4b10      	ldr	r3, [pc, #64]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810322a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103232:	490d      	ldr	r1, [pc, #52]	; (8103268 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103234:	4313      	orrs	r3, r2
 8103236:	650b      	str	r3, [r1, #80]	; 0x50
 8103238:	e001      	b.n	810323e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810323a:	7dfb      	ldrb	r3, [r7, #23]
 810323c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810323e:	687b      	ldr	r3, [r7, #4]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103246:	2b00      	cmp	r3, #0
 8103248:	d033      	beq.n	81032b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810324e:	2b03      	cmp	r3, #3
 8103250:	d81c      	bhi.n	810328c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103252:	a201      	add	r2, pc, #4	; (adr r2, 8103258 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8103254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103258:	08103293 	.word	0x08103293
 810325c:	0810326d 	.word	0x0810326d
 8103260:	0810327b 	.word	0x0810327b
 8103264:	08103293 	.word	0x08103293
 8103268:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810326c:	4bb9      	ldr	r3, [pc, #740]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103270:	4ab8      	ldr	r2, [pc, #736]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103278:	e00c      	b.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810327a:	687b      	ldr	r3, [r7, #4]
 810327c:	3304      	adds	r3, #4
 810327e:	2102      	movs	r1, #2
 8103280:	4618      	mov	r0, r3
 8103282:	f000 fefd 	bl	8104080 <RCCEx_PLL2_Config>
 8103286:	4603      	mov	r3, r0
 8103288:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810328a:	e003      	b.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810328c:	2301      	movs	r3, #1
 810328e:	75fb      	strb	r3, [r7, #23]
      break;
 8103290:	e000      	b.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103294:	7dfb      	ldrb	r3, [r7, #23]
 8103296:	2b00      	cmp	r3, #0
 8103298:	d109      	bne.n	81032ae <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810329a:	4bae      	ldr	r3, [pc, #696]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810329c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810329e:	f023 0203 	bic.w	r2, r3, #3
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032a6:	49ab      	ldr	r1, [pc, #684]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032a8:	4313      	orrs	r3, r2
 81032aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 81032ac:	e001      	b.n	81032b2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032ae:	7dfb      	ldrb	r3, [r7, #23]
 81032b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81032ba:	2b00      	cmp	r3, #0
 81032bc:	f000 8088 	beq.w	81033d0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81032c0:	4ba5      	ldr	r3, [pc, #660]	; (8103558 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81032c2:	681b      	ldr	r3, [r3, #0]
 81032c4:	4aa4      	ldr	r2, [pc, #656]	; (8103558 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81032c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81032ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81032cc:	f7fe ff30 	bl	8102130 <HAL_GetTick>
 81032d0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81032d2:	e009      	b.n	81032e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81032d4:	f7fe ff2c 	bl	8102130 <HAL_GetTick>
 81032d8:	4602      	mov	r2, r0
 81032da:	693b      	ldr	r3, [r7, #16]
 81032dc:	1ad3      	subs	r3, r2, r3
 81032de:	2b64      	cmp	r3, #100	; 0x64
 81032e0:	d902      	bls.n	81032e8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81032e2:	2303      	movs	r3, #3
 81032e4:	75fb      	strb	r3, [r7, #23]
        break;
 81032e6:	e005      	b.n	81032f4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81032e8:	4b9b      	ldr	r3, [pc, #620]	; (8103558 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81032ea:	681b      	ldr	r3, [r3, #0]
 81032ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81032f0:	2b00      	cmp	r3, #0
 81032f2:	d0ef      	beq.n	81032d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81032f4:	7dfb      	ldrb	r3, [r7, #23]
 81032f6:	2b00      	cmp	r3, #0
 81032f8:	d168      	bne.n	81033cc <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81032fa:	4b96      	ldr	r3, [pc, #600]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103304:	4053      	eors	r3, r2
 8103306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810330a:	2b00      	cmp	r3, #0
 810330c:	d013      	beq.n	8103336 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810330e:	4b91      	ldr	r3, [pc, #580]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103316:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103318:	4b8e      	ldr	r3, [pc, #568]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810331a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810331c:	4a8d      	ldr	r2, [pc, #564]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810331e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103322:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103324:	4b8b      	ldr	r3, [pc, #556]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103328:	4a8a      	ldr	r2, [pc, #552]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810332a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810332e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103330:	4a88      	ldr	r2, [pc, #544]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103332:	68fb      	ldr	r3, [r7, #12]
 8103334:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103336:	687b      	ldr	r3, [r7, #4]
 8103338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810333c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103340:	d115      	bne.n	810336e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103342:	f7fe fef5 	bl	8102130 <HAL_GetTick>
 8103346:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103348:	e00b      	b.n	8103362 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810334a:	f7fe fef1 	bl	8102130 <HAL_GetTick>
 810334e:	4602      	mov	r2, r0
 8103350:	693b      	ldr	r3, [r7, #16]
 8103352:	1ad3      	subs	r3, r2, r3
 8103354:	f241 3288 	movw	r2, #5000	; 0x1388
 8103358:	4293      	cmp	r3, r2
 810335a:	d902      	bls.n	8103362 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810335c:	2303      	movs	r3, #3
 810335e:	75fb      	strb	r3, [r7, #23]
            break;
 8103360:	e005      	b.n	810336e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103362:	4b7c      	ldr	r3, [pc, #496]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103366:	f003 0302 	and.w	r3, r3, #2
 810336a:	2b00      	cmp	r3, #0
 810336c:	d0ed      	beq.n	810334a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810336e:	7dfb      	ldrb	r3, [r7, #23]
 8103370:	2b00      	cmp	r3, #0
 8103372:	d128      	bne.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810337e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103382:	d10f      	bne.n	81033a4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103384:	4b73      	ldr	r3, [pc, #460]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103386:	691b      	ldr	r3, [r3, #16]
 8103388:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810338c:	687b      	ldr	r3, [r7, #4]
 810338e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103392:	091b      	lsrs	r3, r3, #4
 8103394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103398:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810339c:	496d      	ldr	r1, [pc, #436]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810339e:	4313      	orrs	r3, r2
 81033a0:	610b      	str	r3, [r1, #16]
 81033a2:	e005      	b.n	81033b0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81033a4:	4b6b      	ldr	r3, [pc, #428]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81033a6:	691b      	ldr	r3, [r3, #16]
 81033a8:	4a6a      	ldr	r2, [pc, #424]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81033aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81033ae:	6113      	str	r3, [r2, #16]
 81033b0:	4b68      	ldr	r3, [pc, #416]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81033b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81033b4:	687b      	ldr	r3, [r7, #4]
 81033b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81033ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81033be:	4965      	ldr	r1, [pc, #404]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81033c0:	4313      	orrs	r3, r2
 81033c2:	670b      	str	r3, [r1, #112]	; 0x70
 81033c4:	e004      	b.n	81033d0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81033c6:	7dfb      	ldrb	r3, [r7, #23]
 81033c8:	75bb      	strb	r3, [r7, #22]
 81033ca:	e001      	b.n	81033d0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81033cc:	7dfb      	ldrb	r3, [r7, #23]
 81033ce:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	f003 0301 	and.w	r3, r3, #1
 81033d8:	2b00      	cmp	r3, #0
 81033da:	d07e      	beq.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81033dc:	687b      	ldr	r3, [r7, #4]
 81033de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81033e0:	2b28      	cmp	r3, #40	; 0x28
 81033e2:	d867      	bhi.n	81034b4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81033e4:	a201      	add	r2, pc, #4	; (adr r2, 81033ec <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033ea:	bf00      	nop
 81033ec:	081034bb 	.word	0x081034bb
 81033f0:	081034b5 	.word	0x081034b5
 81033f4:	081034b5 	.word	0x081034b5
 81033f8:	081034b5 	.word	0x081034b5
 81033fc:	081034b5 	.word	0x081034b5
 8103400:	081034b5 	.word	0x081034b5
 8103404:	081034b5 	.word	0x081034b5
 8103408:	081034b5 	.word	0x081034b5
 810340c:	08103491 	.word	0x08103491
 8103410:	081034b5 	.word	0x081034b5
 8103414:	081034b5 	.word	0x081034b5
 8103418:	081034b5 	.word	0x081034b5
 810341c:	081034b5 	.word	0x081034b5
 8103420:	081034b5 	.word	0x081034b5
 8103424:	081034b5 	.word	0x081034b5
 8103428:	081034b5 	.word	0x081034b5
 810342c:	081034a3 	.word	0x081034a3
 8103430:	081034b5 	.word	0x081034b5
 8103434:	081034b5 	.word	0x081034b5
 8103438:	081034b5 	.word	0x081034b5
 810343c:	081034b5 	.word	0x081034b5
 8103440:	081034b5 	.word	0x081034b5
 8103444:	081034b5 	.word	0x081034b5
 8103448:	081034b5 	.word	0x081034b5
 810344c:	081034bb 	.word	0x081034bb
 8103450:	081034b5 	.word	0x081034b5
 8103454:	081034b5 	.word	0x081034b5
 8103458:	081034b5 	.word	0x081034b5
 810345c:	081034b5 	.word	0x081034b5
 8103460:	081034b5 	.word	0x081034b5
 8103464:	081034b5 	.word	0x081034b5
 8103468:	081034b5 	.word	0x081034b5
 810346c:	081034bb 	.word	0x081034bb
 8103470:	081034b5 	.word	0x081034b5
 8103474:	081034b5 	.word	0x081034b5
 8103478:	081034b5 	.word	0x081034b5
 810347c:	081034b5 	.word	0x081034b5
 8103480:	081034b5 	.word	0x081034b5
 8103484:	081034b5 	.word	0x081034b5
 8103488:	081034b5 	.word	0x081034b5
 810348c:	081034bb 	.word	0x081034bb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103490:	687b      	ldr	r3, [r7, #4]
 8103492:	3304      	adds	r3, #4
 8103494:	2101      	movs	r1, #1
 8103496:	4618      	mov	r0, r3
 8103498:	f000 fdf2 	bl	8104080 <RCCEx_PLL2_Config>
 810349c:	4603      	mov	r3, r0
 810349e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81034a0:	e00c      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	3324      	adds	r3, #36	; 0x24
 81034a6:	2101      	movs	r1, #1
 81034a8:	4618      	mov	r0, r3
 81034aa:	f000 fe9b 	bl	81041e4 <RCCEx_PLL3_Config>
 81034ae:	4603      	mov	r3, r0
 81034b0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81034b2:	e003      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034b4:	2301      	movs	r3, #1
 81034b6:	75fb      	strb	r3, [r7, #23]
      break;
 81034b8:	e000      	b.n	81034bc <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81034ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034bc:	7dfb      	ldrb	r3, [r7, #23]
 81034be:	2b00      	cmp	r3, #0
 81034c0:	d109      	bne.n	81034d6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81034c2:	4b24      	ldr	r3, [pc, #144]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034c6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81034ce:	4921      	ldr	r1, [pc, #132]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81034d0:	4313      	orrs	r3, r2
 81034d2:	654b      	str	r3, [r1, #84]	; 0x54
 81034d4:	e001      	b.n	81034da <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034d6:	7dfb      	ldrb	r3, [r7, #23]
 81034d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	f003 0302 	and.w	r3, r3, #2
 81034e2:	2b00      	cmp	r3, #0
 81034e4:	d03c      	beq.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81034e6:	687b      	ldr	r3, [r7, #4]
 81034e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81034ea:	2b05      	cmp	r3, #5
 81034ec:	d820      	bhi.n	8103530 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 81034ee:	a201      	add	r2, pc, #4	; (adr r2, 81034f4 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034f4:	08103537 	.word	0x08103537
 81034f8:	0810350d 	.word	0x0810350d
 81034fc:	0810351f 	.word	0x0810351f
 8103500:	08103537 	.word	0x08103537
 8103504:	08103537 	.word	0x08103537
 8103508:	08103537 	.word	0x08103537
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	3304      	adds	r3, #4
 8103510:	2101      	movs	r1, #1
 8103512:	4618      	mov	r0, r3
 8103514:	f000 fdb4 	bl	8104080 <RCCEx_PLL2_Config>
 8103518:	4603      	mov	r3, r0
 810351a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810351c:	e00c      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	3324      	adds	r3, #36	; 0x24
 8103522:	2101      	movs	r1, #1
 8103524:	4618      	mov	r0, r3
 8103526:	f000 fe5d 	bl	81041e4 <RCCEx_PLL3_Config>
 810352a:	4603      	mov	r3, r0
 810352c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810352e:	e003      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103530:	2301      	movs	r3, #1
 8103532:	75fb      	strb	r3, [r7, #23]
      break;
 8103534:	e000      	b.n	8103538 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8103536:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103538:	7dfb      	ldrb	r3, [r7, #23]
 810353a:	2b00      	cmp	r3, #0
 810353c:	d10e      	bne.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810353e:	4b05      	ldr	r3, [pc, #20]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103542:	f023 0207 	bic.w	r2, r3, #7
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810354a:	4902      	ldr	r1, [pc, #8]	; (8103554 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810354c:	4313      	orrs	r3, r2
 810354e:	654b      	str	r3, [r1, #84]	; 0x54
 8103550:	e006      	b.n	8103560 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103552:	bf00      	nop
 8103554:	58024400 	.word	0x58024400
 8103558:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 810355c:	7dfb      	ldrb	r3, [r7, #23]
 810355e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	681b      	ldr	r3, [r3, #0]
 8103564:	f003 0304 	and.w	r3, r3, #4
 8103568:	2b00      	cmp	r3, #0
 810356a:	d039      	beq.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103572:	2b05      	cmp	r3, #5
 8103574:	d820      	bhi.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103576:	a201      	add	r2, pc, #4	; (adr r2, 810357c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810357c:	081035bf 	.word	0x081035bf
 8103580:	08103595 	.word	0x08103595
 8103584:	081035a7 	.word	0x081035a7
 8103588:	081035bf 	.word	0x081035bf
 810358c:	081035bf 	.word	0x081035bf
 8103590:	081035bf 	.word	0x081035bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	3304      	adds	r3, #4
 8103598:	2101      	movs	r1, #1
 810359a:	4618      	mov	r0, r3
 810359c:	f000 fd70 	bl	8104080 <RCCEx_PLL2_Config>
 81035a0:	4603      	mov	r3, r0
 81035a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81035a4:	e00c      	b.n	81035c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81035a6:	687b      	ldr	r3, [r7, #4]
 81035a8:	3324      	adds	r3, #36	; 0x24
 81035aa:	2101      	movs	r1, #1
 81035ac:	4618      	mov	r0, r3
 81035ae:	f000 fe19 	bl	81041e4 <RCCEx_PLL3_Config>
 81035b2:	4603      	mov	r3, r0
 81035b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81035b6:	e003      	b.n	81035c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81035b8:	2301      	movs	r3, #1
 81035ba:	75fb      	strb	r3, [r7, #23]
      break;
 81035bc:	e000      	b.n	81035c0 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81035be:	bf00      	nop
    }

    if(ret == HAL_OK)
 81035c0:	7dfb      	ldrb	r3, [r7, #23]
 81035c2:	2b00      	cmp	r3, #0
 81035c4:	d10a      	bne.n	81035dc <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81035c6:	4bb7      	ldr	r3, [pc, #732]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81035ca:	f023 0207 	bic.w	r2, r3, #7
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035d4:	49b3      	ldr	r1, [pc, #716]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81035d6:	4313      	orrs	r3, r2
 81035d8:	658b      	str	r3, [r1, #88]	; 0x58
 81035da:	e001      	b.n	81035e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035dc:	7dfb      	ldrb	r3, [r7, #23]
 81035de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	f003 0320 	and.w	r3, r3, #32
 81035e8:	2b00      	cmp	r3, #0
 81035ea:	d04b      	beq.n	8103684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81035f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81035f6:	d02e      	beq.n	8103656 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 81035f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81035fc:	d828      	bhi.n	8103650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 81035fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103602:	d02a      	beq.n	810365a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103608:	d822      	bhi.n	8103650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810360a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810360e:	d026      	beq.n	810365e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103610:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103614:	d81c      	bhi.n	8103650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810361a:	d010      	beq.n	810363e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810361c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103620:	d816      	bhi.n	8103650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103622:	2b00      	cmp	r3, #0
 8103624:	d01d      	beq.n	8103662 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810362a:	d111      	bne.n	8103650 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810362c:	687b      	ldr	r3, [r7, #4]
 810362e:	3304      	adds	r3, #4
 8103630:	2100      	movs	r1, #0
 8103632:	4618      	mov	r0, r3
 8103634:	f000 fd24 	bl	8104080 <RCCEx_PLL2_Config>
 8103638:	4603      	mov	r3, r0
 810363a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810363c:	e012      	b.n	8103664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810363e:	687b      	ldr	r3, [r7, #4]
 8103640:	3324      	adds	r3, #36	; 0x24
 8103642:	2102      	movs	r1, #2
 8103644:	4618      	mov	r0, r3
 8103646:	f000 fdcd 	bl	81041e4 <RCCEx_PLL3_Config>
 810364a:	4603      	mov	r3, r0
 810364c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810364e:	e009      	b.n	8103664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103650:	2301      	movs	r3, #1
 8103652:	75fb      	strb	r3, [r7, #23]
      break;
 8103654:	e006      	b.n	8103664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103656:	bf00      	nop
 8103658:	e004      	b.n	8103664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810365a:	bf00      	nop
 810365c:	e002      	b.n	8103664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810365e:	bf00      	nop
 8103660:	e000      	b.n	8103664 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103664:	7dfb      	ldrb	r3, [r7, #23]
 8103666:	2b00      	cmp	r3, #0
 8103668:	d10a      	bne.n	8103680 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810366a:	4b8e      	ldr	r3, [pc, #568]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810366c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810366e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103672:	687b      	ldr	r3, [r7, #4]
 8103674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103678:	498a      	ldr	r1, [pc, #552]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810367a:	4313      	orrs	r3, r2
 810367c:	654b      	str	r3, [r1, #84]	; 0x54
 810367e:	e001      	b.n	8103684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103680:	7dfb      	ldrb	r3, [r7, #23]
 8103682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810368c:	2b00      	cmp	r3, #0
 810368e:	d04b      	beq.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103690:	687b      	ldr	r3, [r7, #4]
 8103692:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103696:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810369a:	d02e      	beq.n	81036fa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810369c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81036a0:	d828      	bhi.n	81036f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81036a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81036a6:	d02a      	beq.n	81036fe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81036a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81036ac:	d822      	bhi.n	81036f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81036ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81036b2:	d026      	beq.n	8103702 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81036b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81036b8:	d81c      	bhi.n	81036f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81036ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81036be:	d010      	beq.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81036c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81036c4:	d816      	bhi.n	81036f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81036c6:	2b00      	cmp	r3, #0
 81036c8:	d01d      	beq.n	8103706 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81036ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81036ce:	d111      	bne.n	81036f4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81036d0:	687b      	ldr	r3, [r7, #4]
 81036d2:	3304      	adds	r3, #4
 81036d4:	2100      	movs	r1, #0
 81036d6:	4618      	mov	r0, r3
 81036d8:	f000 fcd2 	bl	8104080 <RCCEx_PLL2_Config>
 81036dc:	4603      	mov	r3, r0
 81036de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81036e0:	e012      	b.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81036e2:	687b      	ldr	r3, [r7, #4]
 81036e4:	3324      	adds	r3, #36	; 0x24
 81036e6:	2102      	movs	r1, #2
 81036e8:	4618      	mov	r0, r3
 81036ea:	f000 fd7b 	bl	81041e4 <RCCEx_PLL3_Config>
 81036ee:	4603      	mov	r3, r0
 81036f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81036f2:	e009      	b.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81036f4:	2301      	movs	r3, #1
 81036f6:	75fb      	strb	r3, [r7, #23]
      break;
 81036f8:	e006      	b.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81036fa:	bf00      	nop
 81036fc:	e004      	b.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 81036fe:	bf00      	nop
 8103700:	e002      	b.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103702:	bf00      	nop
 8103704:	e000      	b.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103706:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103708:	7dfb      	ldrb	r3, [r7, #23]
 810370a:	2b00      	cmp	r3, #0
 810370c:	d10a      	bne.n	8103724 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810370e:	4b65      	ldr	r3, [pc, #404]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103712:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103716:	687b      	ldr	r3, [r7, #4]
 8103718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810371c:	4961      	ldr	r1, [pc, #388]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810371e:	4313      	orrs	r3, r2
 8103720:	658b      	str	r3, [r1, #88]	; 0x58
 8103722:	e001      	b.n	8103728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103724:	7dfb      	ldrb	r3, [r7, #23]
 8103726:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	681b      	ldr	r3, [r3, #0]
 810372c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103730:	2b00      	cmp	r3, #0
 8103732:	d04b      	beq.n	81037cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103734:	687b      	ldr	r3, [r7, #4]
 8103736:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810373a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810373e:	d02e      	beq.n	810379e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103740:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103744:	d828      	bhi.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810374a:	d02a      	beq.n	81037a2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810374c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103750:	d822      	bhi.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103752:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103756:	d026      	beq.n	81037a6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103758:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810375c:	d81c      	bhi.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810375e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103762:	d010      	beq.n	8103786 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103768:	d816      	bhi.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810376a:	2b00      	cmp	r3, #0
 810376c:	d01d      	beq.n	81037aa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 810376e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103772:	d111      	bne.n	8103798 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103774:	687b      	ldr	r3, [r7, #4]
 8103776:	3304      	adds	r3, #4
 8103778:	2100      	movs	r1, #0
 810377a:	4618      	mov	r0, r3
 810377c:	f000 fc80 	bl	8104080 <RCCEx_PLL2_Config>
 8103780:	4603      	mov	r3, r0
 8103782:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103784:	e012      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103786:	687b      	ldr	r3, [r7, #4]
 8103788:	3324      	adds	r3, #36	; 0x24
 810378a:	2102      	movs	r1, #2
 810378c:	4618      	mov	r0, r3
 810378e:	f000 fd29 	bl	81041e4 <RCCEx_PLL3_Config>
 8103792:	4603      	mov	r3, r0
 8103794:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103796:	e009      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103798:	2301      	movs	r3, #1
 810379a:	75fb      	strb	r3, [r7, #23]
      break;
 810379c:	e006      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810379e:	bf00      	nop
 81037a0:	e004      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81037a2:	bf00      	nop
 81037a4:	e002      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81037a6:	bf00      	nop
 81037a8:	e000      	b.n	81037ac <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81037aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037ac:	7dfb      	ldrb	r3, [r7, #23]
 81037ae:	2b00      	cmp	r3, #0
 81037b0:	d10a      	bne.n	81037c8 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81037b2:	4b3c      	ldr	r3, [pc, #240]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81037ba:	687b      	ldr	r3, [r7, #4]
 81037bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81037c0:	4938      	ldr	r1, [pc, #224]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81037c2:	4313      	orrs	r3, r2
 81037c4:	658b      	str	r3, [r1, #88]	; 0x58
 81037c6:	e001      	b.n	81037cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037c8:	7dfb      	ldrb	r3, [r7, #23]
 81037ca:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	f003 0308 	and.w	r3, r3, #8
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d01a      	beq.n	810380e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81037d8:	687b      	ldr	r3, [r7, #4]
 81037da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81037de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81037e2:	d10a      	bne.n	81037fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	3324      	adds	r3, #36	; 0x24
 81037e8:	2102      	movs	r1, #2
 81037ea:	4618      	mov	r0, r3
 81037ec:	f000 fcfa 	bl	81041e4 <RCCEx_PLL3_Config>
 81037f0:	4603      	mov	r3, r0
 81037f2:	2b00      	cmp	r3, #0
 81037f4:	d001      	beq.n	81037fa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 81037f6:	2301      	movs	r3, #1
 81037f8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81037fa:	4b2a      	ldr	r3, [pc, #168]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81037fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81037fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103802:	687b      	ldr	r3, [r7, #4]
 8103804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103808:	4926      	ldr	r1, [pc, #152]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810380a:	4313      	orrs	r3, r2
 810380c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810380e:	687b      	ldr	r3, [r7, #4]
 8103810:	681b      	ldr	r3, [r3, #0]
 8103812:	f003 0310 	and.w	r3, r3, #16
 8103816:	2b00      	cmp	r3, #0
 8103818:	d01a      	beq.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810381a:	687b      	ldr	r3, [r7, #4]
 810381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103824:	d10a      	bne.n	810383c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	3324      	adds	r3, #36	; 0x24
 810382a:	2102      	movs	r1, #2
 810382c:	4618      	mov	r0, r3
 810382e:	f000 fcd9 	bl	81041e4 <RCCEx_PLL3_Config>
 8103832:	4603      	mov	r3, r0
 8103834:	2b00      	cmp	r3, #0
 8103836:	d001      	beq.n	810383c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103838:	2301      	movs	r3, #1
 810383a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810383c:	4b19      	ldr	r3, [pc, #100]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810383e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103844:	687b      	ldr	r3, [r7, #4]
 8103846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810384a:	4916      	ldr	r1, [pc, #88]	; (81038a4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810384c:	4313      	orrs	r3, r2
 810384e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	681b      	ldr	r3, [r3, #0]
 8103854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103858:	2b00      	cmp	r3, #0
 810385a:	d036      	beq.n	81038ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103866:	d01f      	beq.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810386c:	d817      	bhi.n	810389e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 810386e:	2b00      	cmp	r3, #0
 8103870:	d003      	beq.n	810387a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103876:	d009      	beq.n	810388c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103878:	e011      	b.n	810389e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	3304      	adds	r3, #4
 810387e:	2100      	movs	r1, #0
 8103880:	4618      	mov	r0, r3
 8103882:	f000 fbfd 	bl	8104080 <RCCEx_PLL2_Config>
 8103886:	4603      	mov	r3, r0
 8103888:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810388a:	e00e      	b.n	81038aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810388c:	687b      	ldr	r3, [r7, #4]
 810388e:	3324      	adds	r3, #36	; 0x24
 8103890:	2102      	movs	r1, #2
 8103892:	4618      	mov	r0, r3
 8103894:	f000 fca6 	bl	81041e4 <RCCEx_PLL3_Config>
 8103898:	4603      	mov	r3, r0
 810389a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810389c:	e005      	b.n	81038aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810389e:	2301      	movs	r3, #1
 81038a0:	75fb      	strb	r3, [r7, #23]
      break;
 81038a2:	e002      	b.n	81038aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81038a4:	58024400 	.word	0x58024400
      break;
 81038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038aa:	7dfb      	ldrb	r3, [r7, #23]
 81038ac:	2b00      	cmp	r3, #0
 81038ae:	d10a      	bne.n	81038c6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81038b0:	4b93      	ldr	r3, [pc, #588]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81038b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81038be:	4990      	ldr	r1, [pc, #576]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81038c0:	4313      	orrs	r3, r2
 81038c2:	658b      	str	r3, [r1, #88]	; 0x58
 81038c4:	e001      	b.n	81038ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038c6:	7dfb      	ldrb	r3, [r7, #23]
 81038c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81038ca:	687b      	ldr	r3, [r7, #4]
 81038cc:	681b      	ldr	r3, [r3, #0]
 81038ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81038d2:	2b00      	cmp	r3, #0
 81038d4:	d033      	beq.n	810393e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81038dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81038e0:	d01c      	beq.n	810391c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 81038e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81038e6:	d816      	bhi.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 81038e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81038ec:	d003      	beq.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81038ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81038f2:	d007      	beq.n	8103904 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 81038f4:	e00f      	b.n	8103916 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038f6:	4b82      	ldr	r3, [pc, #520]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038fa:	4a81      	ldr	r2, [pc, #516]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81038fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103900:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8103902:	e00c      	b.n	810391e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	3324      	adds	r3, #36	; 0x24
 8103908:	2101      	movs	r1, #1
 810390a:	4618      	mov	r0, r3
 810390c:	f000 fc6a 	bl	81041e4 <RCCEx_PLL3_Config>
 8103910:	4603      	mov	r3, r0
 8103912:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8103914:	e003      	b.n	810391e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103916:	2301      	movs	r3, #1
 8103918:	75fb      	strb	r3, [r7, #23]
      break;
 810391a:	e000      	b.n	810391e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810391c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810391e:	7dfb      	ldrb	r3, [r7, #23]
 8103920:	2b00      	cmp	r3, #0
 8103922:	d10a      	bne.n	810393a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103924:	4b76      	ldr	r3, [pc, #472]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103928:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103932:	4973      	ldr	r1, [pc, #460]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103934:	4313      	orrs	r3, r2
 8103936:	654b      	str	r3, [r1, #84]	; 0x54
 8103938:	e001      	b.n	810393e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810393a:	7dfb      	ldrb	r3, [r7, #23]
 810393c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810393e:	687b      	ldr	r3, [r7, #4]
 8103940:	681b      	ldr	r3, [r3, #0]
 8103942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103946:	2b00      	cmp	r3, #0
 8103948:	d029      	beq.n	810399e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810394a:	687b      	ldr	r3, [r7, #4]
 810394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810394e:	2b00      	cmp	r3, #0
 8103950:	d003      	beq.n	810395a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8103952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103956:	d007      	beq.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8103958:	e00f      	b.n	810397a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810395a:	4b69      	ldr	r3, [pc, #420]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810395e:	4a68      	ldr	r2, [pc, #416]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103964:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103966:	e00b      	b.n	8103980 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	3304      	adds	r3, #4
 810396c:	2102      	movs	r1, #2
 810396e:	4618      	mov	r0, r3
 8103970:	f000 fb86 	bl	8104080 <RCCEx_PLL2_Config>
 8103974:	4603      	mov	r3, r0
 8103976:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8103978:	e002      	b.n	8103980 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 810397a:	2301      	movs	r3, #1
 810397c:	75fb      	strb	r3, [r7, #23]
      break;
 810397e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103980:	7dfb      	ldrb	r3, [r7, #23]
 8103982:	2b00      	cmp	r3, #0
 8103984:	d109      	bne.n	810399a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103986:	4b5e      	ldr	r3, [pc, #376]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810398a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103992:	495b      	ldr	r1, [pc, #364]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103994:	4313      	orrs	r3, r2
 8103996:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103998:	e001      	b.n	810399e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810399a:	7dfb      	ldrb	r3, [r7, #23]
 810399c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	681b      	ldr	r3, [r3, #0]
 81039a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81039a6:	2b00      	cmp	r3, #0
 81039a8:	d00a      	beq.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	3324      	adds	r3, #36	; 0x24
 81039ae:	2102      	movs	r1, #2
 81039b0:	4618      	mov	r0, r3
 81039b2:	f000 fc17 	bl	81041e4 <RCCEx_PLL3_Config>
 81039b6:	4603      	mov	r3, r0
 81039b8:	2b00      	cmp	r3, #0
 81039ba:	d001      	beq.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81039bc:	2301      	movs	r3, #1
 81039be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	681b      	ldr	r3, [r3, #0]
 81039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81039c8:	2b00      	cmp	r3, #0
 81039ca:	d030      	beq.n	8103a2e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81039cc:	687b      	ldr	r3, [r7, #4]
 81039ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81039d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81039d4:	d017      	beq.n	8103a06 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81039d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81039da:	d811      	bhi.n	8103a00 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81039dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81039e0:	d013      	beq.n	8103a0a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81039e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81039e6:	d80b      	bhi.n	8103a00 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81039e8:	2b00      	cmp	r3, #0
 81039ea:	d010      	beq.n	8103a0e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81039ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81039f0:	d106      	bne.n	8103a00 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039f2:	4b43      	ldr	r3, [pc, #268]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039f6:	4a42      	ldr	r2, [pc, #264]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 81039fe:	e007      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a00:	2301      	movs	r3, #1
 8103a02:	75fb      	strb	r3, [r7, #23]
      break;
 8103a04:	e004      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103a06:	bf00      	nop
 8103a08:	e002      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103a0a:	bf00      	nop
 8103a0c:	e000      	b.n	8103a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103a0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a10:	7dfb      	ldrb	r3, [r7, #23]
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	d109      	bne.n	8103a2a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103a16:	4b3a      	ldr	r3, [pc, #232]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103a22:	4937      	ldr	r1, [pc, #220]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a24:	4313      	orrs	r3, r2
 8103a26:	654b      	str	r3, [r1, #84]	; 0x54
 8103a28:	e001      	b.n	8103a2e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a2a:	7dfb      	ldrb	r3, [r7, #23]
 8103a2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	681b      	ldr	r3, [r3, #0]
 8103a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d008      	beq.n	8103a4c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103a3a:	4b31      	ldr	r3, [pc, #196]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103a42:	687b      	ldr	r3, [r7, #4]
 8103a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a46:	492e      	ldr	r1, [pc, #184]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a48:	4313      	orrs	r3, r2
 8103a4a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	681b      	ldr	r3, [r3, #0]
 8103a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103a54:	2b00      	cmp	r3, #0
 8103a56:	d009      	beq.n	8103a6c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103a58:	4b29      	ldr	r3, [pc, #164]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a5a:	691b      	ldr	r3, [r3, #16]
 8103a5c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103a60:	687b      	ldr	r3, [r7, #4]
 8103a62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103a66:	4926      	ldr	r1, [pc, #152]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a68:	4313      	orrs	r3, r2
 8103a6a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103a6c:	687b      	ldr	r3, [r7, #4]
 8103a6e:	681b      	ldr	r3, [r3, #0]
 8103a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103a74:	2b00      	cmp	r3, #0
 8103a76:	d008      	beq.n	8103a8a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103a78:	4b21      	ldr	r3, [pc, #132]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103a84:	491e      	ldr	r1, [pc, #120]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a86:	4313      	orrs	r3, r2
 8103a88:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	681b      	ldr	r3, [r3, #0]
 8103a8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d00d      	beq.n	8103ab2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103a96:	4b1a      	ldr	r3, [pc, #104]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a98:	691b      	ldr	r3, [r3, #16]
 8103a9a:	4a19      	ldr	r2, [pc, #100]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103aa0:	6113      	str	r3, [r2, #16]
 8103aa2:	4b17      	ldr	r3, [pc, #92]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103aa4:	691a      	ldr	r2, [r3, #16]
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103aac:	4914      	ldr	r1, [pc, #80]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103aae:	4313      	orrs	r3, r2
 8103ab0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	681b      	ldr	r3, [r3, #0]
 8103ab6:	2b00      	cmp	r3, #0
 8103ab8:	da08      	bge.n	8103acc <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103aba:	4b11      	ldr	r3, [pc, #68]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103ac2:	687b      	ldr	r3, [r7, #4]
 8103ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ac6:	490e      	ldr	r1, [pc, #56]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ac8:	4313      	orrs	r3, r2
 8103aca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103ad4:	2b00      	cmp	r3, #0
 8103ad6:	d009      	beq.n	8103aec <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103ad8:	4b09      	ldr	r3, [pc, #36]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103adc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103ae0:	687b      	ldr	r3, [r7, #4]
 8103ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103ae6:	4906      	ldr	r1, [pc, #24]	; (8103b00 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ae8:	4313      	orrs	r3, r2
 8103aea:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103aec:	7dbb      	ldrb	r3, [r7, #22]
 8103aee:	2b00      	cmp	r3, #0
 8103af0:	d101      	bne.n	8103af6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103af2:	2300      	movs	r3, #0
 8103af4:	e000      	b.n	8103af8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103af6:	2301      	movs	r3, #1
}
 8103af8:	4618      	mov	r0, r3
 8103afa:	3718      	adds	r7, #24
 8103afc:	46bd      	mov	sp, r7
 8103afe:	bd80      	pop	{r7, pc}
 8103b00:	58024400 	.word	0x58024400

08103b04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103b04:	b580      	push	{r7, lr}
 8103b06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103b08:	f7ff f85e 	bl	8102bc8 <HAL_RCC_GetHCLKFreq>
 8103b0c:	4602      	mov	r2, r0
 8103b0e:	4b06      	ldr	r3, [pc, #24]	; (8103b28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103b10:	6a1b      	ldr	r3, [r3, #32]
 8103b12:	091b      	lsrs	r3, r3, #4
 8103b14:	f003 0307 	and.w	r3, r3, #7
 8103b18:	4904      	ldr	r1, [pc, #16]	; (8103b2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103b1a:	5ccb      	ldrb	r3, [r1, r3]
 8103b1c:	f003 031f 	and.w	r3, r3, #31
 8103b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103b24:	4618      	mov	r0, r3
 8103b26:	bd80      	pop	{r7, pc}
 8103b28:	58024400 	.word	0x58024400
 8103b2c:	0810b408 	.word	0x0810b408

08103b30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103b30:	b480      	push	{r7}
 8103b32:	b089      	sub	sp, #36	; 0x24
 8103b34:	af00      	add	r7, sp, #0
 8103b36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103b38:	4ba1      	ldr	r3, [pc, #644]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b3c:	f003 0303 	and.w	r3, r3, #3
 8103b40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103b42:	4b9f      	ldr	r3, [pc, #636]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b46:	0b1b      	lsrs	r3, r3, #12
 8103b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103b4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103b4e:	4b9c      	ldr	r3, [pc, #624]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b52:	091b      	lsrs	r3, r3, #4
 8103b54:	f003 0301 	and.w	r3, r3, #1
 8103b58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103b5a:	4b99      	ldr	r3, [pc, #612]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103b5e:	08db      	lsrs	r3, r3, #3
 8103b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103b64:	693a      	ldr	r2, [r7, #16]
 8103b66:	fb02 f303 	mul.w	r3, r2, r3
 8103b6a:	ee07 3a90 	vmov	s15, r3
 8103b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103b76:	697b      	ldr	r3, [r7, #20]
 8103b78:	2b00      	cmp	r3, #0
 8103b7a:	f000 8111 	beq.w	8103da0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103b7e:	69bb      	ldr	r3, [r7, #24]
 8103b80:	2b02      	cmp	r3, #2
 8103b82:	f000 8083 	beq.w	8103c8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103b86:	69bb      	ldr	r3, [r7, #24]
 8103b88:	2b02      	cmp	r3, #2
 8103b8a:	f200 80a1 	bhi.w	8103cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103b8e:	69bb      	ldr	r3, [r7, #24]
 8103b90:	2b00      	cmp	r3, #0
 8103b92:	d003      	beq.n	8103b9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103b94:	69bb      	ldr	r3, [r7, #24]
 8103b96:	2b01      	cmp	r3, #1
 8103b98:	d056      	beq.n	8103c48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103b9a:	e099      	b.n	8103cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103b9c:	4b88      	ldr	r3, [pc, #544]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	f003 0320 	and.w	r3, r3, #32
 8103ba4:	2b00      	cmp	r3, #0
 8103ba6:	d02d      	beq.n	8103c04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103ba8:	4b85      	ldr	r3, [pc, #532]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	08db      	lsrs	r3, r3, #3
 8103bae:	f003 0303 	and.w	r3, r3, #3
 8103bb2:	4a84      	ldr	r2, [pc, #528]	; (8103dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8103bb8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103bba:	68bb      	ldr	r3, [r7, #8]
 8103bbc:	ee07 3a90 	vmov	s15, r3
 8103bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103bc4:	697b      	ldr	r3, [r7, #20]
 8103bc6:	ee07 3a90 	vmov	s15, r3
 8103bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103bd2:	4b7b      	ldr	r3, [pc, #492]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103bda:	ee07 3a90 	vmov	s15, r3
 8103bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8103be6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103bf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103bfe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103c02:	e087      	b.n	8103d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c04:	697b      	ldr	r3, [r7, #20]
 8103c06:	ee07 3a90 	vmov	s15, r3
 8103c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103dcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c16:	4b6a      	ldr	r3, [pc, #424]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c1e:	ee07 3a90 	vmov	s15, r3
 8103c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103c46:	e065      	b.n	8103d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c48:	697b      	ldr	r3, [r7, #20]
 8103c4a:	ee07 3a90 	vmov	s15, r3
 8103c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c5a:	4b59      	ldr	r3, [pc, #356]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c62:	ee07 3a90 	vmov	s15, r3
 8103c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103c8a:	e043      	b.n	8103d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c8c:	697b      	ldr	r3, [r7, #20]
 8103c8e:	ee07 3a90 	vmov	s15, r3
 8103c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c9e:	4b48      	ldr	r3, [pc, #288]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ca6:	ee07 3a90 	vmov	s15, r3
 8103caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8103cb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103cca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103cce:	e021      	b.n	8103d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103cd0:	697b      	ldr	r3, [r7, #20]
 8103cd2:	ee07 3a90 	vmov	s15, r3
 8103cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103cda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ce2:	4b37      	ldr	r3, [pc, #220]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103cea:	ee07 3a90 	vmov	s15, r3
 8103cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8103cf6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103d12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8103d14:	4b2a      	ldr	r3, [pc, #168]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d18:	0a5b      	lsrs	r3, r3, #9
 8103d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103d1e:	ee07 3a90 	vmov	s15, r3
 8103d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103d3a:	ee17 2a90 	vmov	r2, s15
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8103d42:	4b1f      	ldr	r3, [pc, #124]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d46:	0c1b      	lsrs	r3, r3, #16
 8103d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103d4c:	ee07 3a90 	vmov	s15, r3
 8103d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103d58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103d68:	ee17 2a90 	vmov	r2, s15
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8103d70:	4b13      	ldr	r3, [pc, #76]	; (8103dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d74:	0e1b      	lsrs	r3, r3, #24
 8103d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103d7a:	ee07 3a90 	vmov	s15, r3
 8103d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103d96:	ee17 2a90 	vmov	r2, s15
 8103d9a:	687b      	ldr	r3, [r7, #4]
 8103d9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8103d9e:	e008      	b.n	8103db2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	2200      	movs	r2, #0
 8103da4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	2200      	movs	r2, #0
 8103daa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	2200      	movs	r2, #0
 8103db0:	609a      	str	r2, [r3, #8]
}
 8103db2:	bf00      	nop
 8103db4:	3724      	adds	r7, #36	; 0x24
 8103db6:	46bd      	mov	sp, r7
 8103db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103dbc:	4770      	bx	lr
 8103dbe:	bf00      	nop
 8103dc0:	58024400 	.word	0x58024400
 8103dc4:	03d09000 	.word	0x03d09000
 8103dc8:	46000000 	.word	0x46000000
 8103dcc:	4c742400 	.word	0x4c742400
 8103dd0:	4a742400 	.word	0x4a742400
 8103dd4:	4af42400 	.word	0x4af42400

08103dd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8103dd8:	b480      	push	{r7}
 8103dda:	b089      	sub	sp, #36	; 0x24
 8103ddc:	af00      	add	r7, sp, #0
 8103dde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103de0:	4ba1      	ldr	r3, [pc, #644]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103de4:	f003 0303 	and.w	r3, r3, #3
 8103de8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8103dea:	4b9f      	ldr	r3, [pc, #636]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103dee:	0d1b      	lsrs	r3, r3, #20
 8103df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103df4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8103df6:	4b9c      	ldr	r3, [pc, #624]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103dfa:	0a1b      	lsrs	r3, r3, #8
 8103dfc:	f003 0301 	and.w	r3, r3, #1
 8103e00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8103e02:	4b99      	ldr	r3, [pc, #612]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103e06:	08db      	lsrs	r3, r3, #3
 8103e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103e0c:	693a      	ldr	r2, [r7, #16]
 8103e0e:	fb02 f303 	mul.w	r3, r2, r3
 8103e12:	ee07 3a90 	vmov	s15, r3
 8103e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103e1e:	697b      	ldr	r3, [r7, #20]
 8103e20:	2b00      	cmp	r3, #0
 8103e22:	f000 8111 	beq.w	8104048 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103e26:	69bb      	ldr	r3, [r7, #24]
 8103e28:	2b02      	cmp	r3, #2
 8103e2a:	f000 8083 	beq.w	8103f34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8103e2e:	69bb      	ldr	r3, [r7, #24]
 8103e30:	2b02      	cmp	r3, #2
 8103e32:	f200 80a1 	bhi.w	8103f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103e36:	69bb      	ldr	r3, [r7, #24]
 8103e38:	2b00      	cmp	r3, #0
 8103e3a:	d003      	beq.n	8103e44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103e3c:	69bb      	ldr	r3, [r7, #24]
 8103e3e:	2b01      	cmp	r3, #1
 8103e40:	d056      	beq.n	8103ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103e42:	e099      	b.n	8103f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103e44:	4b88      	ldr	r3, [pc, #544]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	f003 0320 	and.w	r3, r3, #32
 8103e4c:	2b00      	cmp	r3, #0
 8103e4e:	d02d      	beq.n	8103eac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103e50:	4b85      	ldr	r3, [pc, #532]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e52:	681b      	ldr	r3, [r3, #0]
 8103e54:	08db      	lsrs	r3, r3, #3
 8103e56:	f003 0303 	and.w	r3, r3, #3
 8103e5a:	4a84      	ldr	r2, [pc, #528]	; (810406c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8103e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8103e60:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103e62:	68bb      	ldr	r3, [r7, #8]
 8103e64:	ee07 3a90 	vmov	s15, r3
 8103e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e6c:	697b      	ldr	r3, [r7, #20]
 8103e6e:	ee07 3a90 	vmov	s15, r3
 8103e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e7a:	4b7b      	ldr	r3, [pc, #492]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e82:	ee07 3a90 	vmov	s15, r3
 8103e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e8e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103eaa:	e087      	b.n	8103fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103eac:	697b      	ldr	r3, [r7, #20]
 8103eae:	ee07 3a90 	vmov	s15, r3
 8103eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103eb6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104074 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ebe:	4b6a      	ldr	r3, [pc, #424]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ec6:	ee07 3a90 	vmov	s15, r3
 8103eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ed2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103eee:	e065      	b.n	8103fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103ef0:	697b      	ldr	r3, [r7, #20]
 8103ef2:	ee07 3a90 	vmov	s15, r3
 8103ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103efa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f02:	4b59      	ldr	r3, [pc, #356]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f0a:	ee07 3a90 	vmov	s15, r3
 8103f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f16:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f32:	e043      	b.n	8103fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103f34:	697b      	ldr	r3, [r7, #20]
 8103f36:	ee07 3a90 	vmov	s15, r3
 8103f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810407c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f46:	4b48      	ldr	r3, [pc, #288]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f4e:	ee07 3a90 	vmov	s15, r3
 8103f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f76:	e021      	b.n	8103fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103f78:	697b      	ldr	r3, [r7, #20]
 8103f7a:	ee07 3a90 	vmov	s15, r3
 8103f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f8a:	4b37      	ldr	r3, [pc, #220]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f92:	ee07 3a90 	vmov	s15, r3
 8103f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103fba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103fbc:	4b2a      	ldr	r3, [pc, #168]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fc0:	0a5b      	lsrs	r3, r3, #9
 8103fc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103fc6:	ee07 3a90 	vmov	s15, r3
 8103fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8103fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103fe2:	ee17 2a90 	vmov	r2, s15
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8103fea:	4b1f      	ldr	r3, [pc, #124]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fee:	0c1b      	lsrs	r3, r3, #16
 8103ff0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103ff4:	ee07 3a90 	vmov	s15, r3
 8103ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ffc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104004:	edd7 6a07 	vldr	s13, [r7, #28]
 8104008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810400c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104010:	ee17 2a90 	vmov	r2, s15
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104018:	4b13      	ldr	r3, [pc, #76]	; (8104068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810401c:	0e1b      	lsrs	r3, r3, #24
 810401e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104022:	ee07 3a90 	vmov	s15, r3
 8104026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810402a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810402e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104032:	edd7 6a07 	vldr	s13, [r7, #28]
 8104036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810403a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810403e:	ee17 2a90 	vmov	r2, s15
 8104042:	687b      	ldr	r3, [r7, #4]
 8104044:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104046:	e008      	b.n	810405a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104048:	687b      	ldr	r3, [r7, #4]
 810404a:	2200      	movs	r2, #0
 810404c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	2200      	movs	r2, #0
 8104052:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104054:	687b      	ldr	r3, [r7, #4]
 8104056:	2200      	movs	r2, #0
 8104058:	609a      	str	r2, [r3, #8]
}
 810405a:	bf00      	nop
 810405c:	3724      	adds	r7, #36	; 0x24
 810405e:	46bd      	mov	sp, r7
 8104060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104064:	4770      	bx	lr
 8104066:	bf00      	nop
 8104068:	58024400 	.word	0x58024400
 810406c:	03d09000 	.word	0x03d09000
 8104070:	46000000 	.word	0x46000000
 8104074:	4c742400 	.word	0x4c742400
 8104078:	4a742400 	.word	0x4a742400
 810407c:	4af42400 	.word	0x4af42400

08104080 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104080:	b580      	push	{r7, lr}
 8104082:	b084      	sub	sp, #16
 8104084:	af00      	add	r7, sp, #0
 8104086:	6078      	str	r0, [r7, #4]
 8104088:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810408a:	2300      	movs	r3, #0
 810408c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810408e:	4b54      	ldr	r3, [pc, #336]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104092:	f003 0303 	and.w	r3, r3, #3
 8104096:	2b03      	cmp	r3, #3
 8104098:	d101      	bne.n	810409e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810409a:	2301      	movs	r3, #1
 810409c:	e09b      	b.n	81041d6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810409e:	4b50      	ldr	r3, [pc, #320]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 81040a0:	681b      	ldr	r3, [r3, #0]
 81040a2:	4a4f      	ldr	r2, [pc, #316]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 81040a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81040a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81040aa:	f7fe f841 	bl	8102130 <HAL_GetTick>
 81040ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81040b0:	e008      	b.n	81040c4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81040b2:	f7fe f83d 	bl	8102130 <HAL_GetTick>
 81040b6:	4602      	mov	r2, r0
 81040b8:	68bb      	ldr	r3, [r7, #8]
 81040ba:	1ad3      	subs	r3, r2, r3
 81040bc:	2b02      	cmp	r3, #2
 81040be:	d901      	bls.n	81040c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81040c0:	2303      	movs	r3, #3
 81040c2:	e088      	b.n	81041d6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81040c4:	4b46      	ldr	r3, [pc, #280]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 81040c6:	681b      	ldr	r3, [r3, #0]
 81040c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81040cc:	2b00      	cmp	r3, #0
 81040ce:	d1f0      	bne.n	81040b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81040d0:	4b43      	ldr	r3, [pc, #268]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 81040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81040d8:	687b      	ldr	r3, [r7, #4]
 81040da:	681b      	ldr	r3, [r3, #0]
 81040dc:	031b      	lsls	r3, r3, #12
 81040de:	4940      	ldr	r1, [pc, #256]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 81040e0:	4313      	orrs	r3, r2
 81040e2:	628b      	str	r3, [r1, #40]	; 0x28
 81040e4:	687b      	ldr	r3, [r7, #4]
 81040e6:	685b      	ldr	r3, [r3, #4]
 81040e8:	3b01      	subs	r3, #1
 81040ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81040ee:	687b      	ldr	r3, [r7, #4]
 81040f0:	689b      	ldr	r3, [r3, #8]
 81040f2:	3b01      	subs	r3, #1
 81040f4:	025b      	lsls	r3, r3, #9
 81040f6:	b29b      	uxth	r3, r3
 81040f8:	431a      	orrs	r2, r3
 81040fa:	687b      	ldr	r3, [r7, #4]
 81040fc:	68db      	ldr	r3, [r3, #12]
 81040fe:	3b01      	subs	r3, #1
 8104100:	041b      	lsls	r3, r3, #16
 8104102:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104106:	431a      	orrs	r2, r3
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	691b      	ldr	r3, [r3, #16]
 810410c:	3b01      	subs	r3, #1
 810410e:	061b      	lsls	r3, r3, #24
 8104110:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104114:	4932      	ldr	r1, [pc, #200]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104116:	4313      	orrs	r3, r2
 8104118:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810411a:	4b31      	ldr	r3, [pc, #196]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810411e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	695b      	ldr	r3, [r3, #20]
 8104126:	492e      	ldr	r1, [pc, #184]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104128:	4313      	orrs	r3, r2
 810412a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810412c:	4b2c      	ldr	r3, [pc, #176]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104130:	f023 0220 	bic.w	r2, r3, #32
 8104134:	687b      	ldr	r3, [r7, #4]
 8104136:	699b      	ldr	r3, [r3, #24]
 8104138:	4929      	ldr	r1, [pc, #164]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810413a:	4313      	orrs	r3, r2
 810413c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810413e:	4b28      	ldr	r3, [pc, #160]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104142:	4a27      	ldr	r2, [pc, #156]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104144:	f023 0310 	bic.w	r3, r3, #16
 8104148:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810414a:	4b25      	ldr	r3, [pc, #148]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810414e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104152:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104156:	687a      	ldr	r2, [r7, #4]
 8104158:	69d2      	ldr	r2, [r2, #28]
 810415a:	00d2      	lsls	r2, r2, #3
 810415c:	4920      	ldr	r1, [pc, #128]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810415e:	4313      	orrs	r3, r2
 8104160:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104162:	4b1f      	ldr	r3, [pc, #124]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104166:	4a1e      	ldr	r2, [pc, #120]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104168:	f043 0310 	orr.w	r3, r3, #16
 810416c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810416e:	683b      	ldr	r3, [r7, #0]
 8104170:	2b00      	cmp	r3, #0
 8104172:	d106      	bne.n	8104182 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104174:	4b1a      	ldr	r3, [pc, #104]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104178:	4a19      	ldr	r2, [pc, #100]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810417e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104180:	e00f      	b.n	81041a2 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104182:	683b      	ldr	r3, [r7, #0]
 8104184:	2b01      	cmp	r3, #1
 8104186:	d106      	bne.n	8104196 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104188:	4b15      	ldr	r3, [pc, #84]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810418c:	4a14      	ldr	r2, [pc, #80]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810418e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104192:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104194:	e005      	b.n	81041a2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104196:	4b12      	ldr	r3, [pc, #72]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 8104198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810419a:	4a11      	ldr	r2, [pc, #68]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 810419c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81041a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81041a2:	4b0f      	ldr	r3, [pc, #60]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 81041a4:	681b      	ldr	r3, [r3, #0]
 81041a6:	4a0e      	ldr	r2, [pc, #56]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 81041a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81041ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81041ae:	f7fd ffbf 	bl	8102130 <HAL_GetTick>
 81041b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81041b4:	e008      	b.n	81041c8 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81041b6:	f7fd ffbb 	bl	8102130 <HAL_GetTick>
 81041ba:	4602      	mov	r2, r0
 81041bc:	68bb      	ldr	r3, [r7, #8]
 81041be:	1ad3      	subs	r3, r2, r3
 81041c0:	2b02      	cmp	r3, #2
 81041c2:	d901      	bls.n	81041c8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81041c4:	2303      	movs	r3, #3
 81041c6:	e006      	b.n	81041d6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81041c8:	4b05      	ldr	r3, [pc, #20]	; (81041e0 <RCCEx_PLL2_Config+0x160>)
 81041ca:	681b      	ldr	r3, [r3, #0]
 81041cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81041d0:	2b00      	cmp	r3, #0
 81041d2:	d0f0      	beq.n	81041b6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81041d4:	7bfb      	ldrb	r3, [r7, #15]
}
 81041d6:	4618      	mov	r0, r3
 81041d8:	3710      	adds	r7, #16
 81041da:	46bd      	mov	sp, r7
 81041dc:	bd80      	pop	{r7, pc}
 81041de:	bf00      	nop
 81041e0:	58024400 	.word	0x58024400

081041e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81041e4:	b580      	push	{r7, lr}
 81041e6:	b084      	sub	sp, #16
 81041e8:	af00      	add	r7, sp, #0
 81041ea:	6078      	str	r0, [r7, #4]
 81041ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81041ee:	2300      	movs	r3, #0
 81041f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81041f2:	4b54      	ldr	r3, [pc, #336]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81041f6:	f003 0303 	and.w	r3, r3, #3
 81041fa:	2b03      	cmp	r3, #3
 81041fc:	d101      	bne.n	8104202 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81041fe:	2301      	movs	r3, #1
 8104200:	e09b      	b.n	810433a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104202:	4b50      	ldr	r3, [pc, #320]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 8104204:	681b      	ldr	r3, [r3, #0]
 8104206:	4a4f      	ldr	r2, [pc, #316]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 8104208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810420c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810420e:	f7fd ff8f 	bl	8102130 <HAL_GetTick>
 8104212:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104214:	e008      	b.n	8104228 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104216:	f7fd ff8b 	bl	8102130 <HAL_GetTick>
 810421a:	4602      	mov	r2, r0
 810421c:	68bb      	ldr	r3, [r7, #8]
 810421e:	1ad3      	subs	r3, r2, r3
 8104220:	2b02      	cmp	r3, #2
 8104222:	d901      	bls.n	8104228 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104224:	2303      	movs	r3, #3
 8104226:	e088      	b.n	810433a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104228:	4b46      	ldr	r3, [pc, #280]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 810422a:	681b      	ldr	r3, [r3, #0]
 810422c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104230:	2b00      	cmp	r3, #0
 8104232:	d1f0      	bne.n	8104216 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104234:	4b43      	ldr	r3, [pc, #268]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 8104236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104238:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810423c:	687b      	ldr	r3, [r7, #4]
 810423e:	681b      	ldr	r3, [r3, #0]
 8104240:	051b      	lsls	r3, r3, #20
 8104242:	4940      	ldr	r1, [pc, #256]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 8104244:	4313      	orrs	r3, r2
 8104246:	628b      	str	r3, [r1, #40]	; 0x28
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	685b      	ldr	r3, [r3, #4]
 810424c:	3b01      	subs	r3, #1
 810424e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104252:	687b      	ldr	r3, [r7, #4]
 8104254:	689b      	ldr	r3, [r3, #8]
 8104256:	3b01      	subs	r3, #1
 8104258:	025b      	lsls	r3, r3, #9
 810425a:	b29b      	uxth	r3, r3
 810425c:	431a      	orrs	r2, r3
 810425e:	687b      	ldr	r3, [r7, #4]
 8104260:	68db      	ldr	r3, [r3, #12]
 8104262:	3b01      	subs	r3, #1
 8104264:	041b      	lsls	r3, r3, #16
 8104266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810426a:	431a      	orrs	r2, r3
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	691b      	ldr	r3, [r3, #16]
 8104270:	3b01      	subs	r3, #1
 8104272:	061b      	lsls	r3, r3, #24
 8104274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104278:	4932      	ldr	r1, [pc, #200]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 810427a:	4313      	orrs	r3, r2
 810427c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810427e:	4b31      	ldr	r3, [pc, #196]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 8104280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104282:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104286:	687b      	ldr	r3, [r7, #4]
 8104288:	695b      	ldr	r3, [r3, #20]
 810428a:	492e      	ldr	r1, [pc, #184]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 810428c:	4313      	orrs	r3, r2
 810428e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104290:	4b2c      	ldr	r3, [pc, #176]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 8104292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104294:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104298:	687b      	ldr	r3, [r7, #4]
 810429a:	699b      	ldr	r3, [r3, #24]
 810429c:	4929      	ldr	r1, [pc, #164]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 810429e:	4313      	orrs	r3, r2
 81042a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81042a2:	4b28      	ldr	r3, [pc, #160]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042a6:	4a27      	ldr	r2, [pc, #156]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81042ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81042ae:	4b25      	ldr	r3, [pc, #148]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81042b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81042b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81042ba:	687a      	ldr	r2, [r7, #4]
 81042bc:	69d2      	ldr	r2, [r2, #28]
 81042be:	00d2      	lsls	r2, r2, #3
 81042c0:	4920      	ldr	r1, [pc, #128]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042c2:	4313      	orrs	r3, r2
 81042c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81042c6:	4b1f      	ldr	r3, [pc, #124]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042ca:	4a1e      	ldr	r2, [pc, #120]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81042d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81042d2:	683b      	ldr	r3, [r7, #0]
 81042d4:	2b00      	cmp	r3, #0
 81042d6:	d106      	bne.n	81042e6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81042d8:	4b1a      	ldr	r3, [pc, #104]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042dc:	4a19      	ldr	r2, [pc, #100]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81042e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81042e4:	e00f      	b.n	8104306 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81042e6:	683b      	ldr	r3, [r7, #0]
 81042e8:	2b01      	cmp	r3, #1
 81042ea:	d106      	bne.n	81042fa <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81042ec:	4b15      	ldr	r3, [pc, #84]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042f0:	4a14      	ldr	r2, [pc, #80]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81042f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81042f8:	e005      	b.n	8104306 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81042fa:	4b12      	ldr	r3, [pc, #72]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 81042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042fe:	4a11      	ldr	r2, [pc, #68]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 8104300:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104304:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104306:	4b0f      	ldr	r3, [pc, #60]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 8104308:	681b      	ldr	r3, [r3, #0]
 810430a:	4a0e      	ldr	r2, [pc, #56]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 810430c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104310:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104312:	f7fd ff0d 	bl	8102130 <HAL_GetTick>
 8104316:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104318:	e008      	b.n	810432c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810431a:	f7fd ff09 	bl	8102130 <HAL_GetTick>
 810431e:	4602      	mov	r2, r0
 8104320:	68bb      	ldr	r3, [r7, #8]
 8104322:	1ad3      	subs	r3, r2, r3
 8104324:	2b02      	cmp	r3, #2
 8104326:	d901      	bls.n	810432c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104328:	2303      	movs	r3, #3
 810432a:	e006      	b.n	810433a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810432c:	4b05      	ldr	r3, [pc, #20]	; (8104344 <RCCEx_PLL3_Config+0x160>)
 810432e:	681b      	ldr	r3, [r3, #0]
 8104330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104334:	2b00      	cmp	r3, #0
 8104336:	d0f0      	beq.n	810431a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104338:	7bfb      	ldrb	r3, [r7, #15]
}
 810433a:	4618      	mov	r0, r3
 810433c:	3710      	adds	r7, #16
 810433e:	46bd      	mov	sp, r7
 8104340:	bd80      	pop	{r7, pc}
 8104342:	bf00      	nop
 8104344:	58024400 	.word	0x58024400

08104348 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104348:	b580      	push	{r7, lr}
 810434a:	b084      	sub	sp, #16
 810434c:	af00      	add	r7, sp, #0
 810434e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	2b00      	cmp	r3, #0
 8104354:	d101      	bne.n	810435a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8104356:	2301      	movs	r3, #1
 8104358:	e0f1      	b.n	810453e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	2200      	movs	r2, #0
 810435e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	681b      	ldr	r3, [r3, #0]
 8104364:	4a78      	ldr	r2, [pc, #480]	; (8104548 <HAL_SPI_Init+0x200>)
 8104366:	4293      	cmp	r3, r2
 8104368:	d00f      	beq.n	810438a <HAL_SPI_Init+0x42>
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	4a77      	ldr	r2, [pc, #476]	; (810454c <HAL_SPI_Init+0x204>)
 8104370:	4293      	cmp	r3, r2
 8104372:	d00a      	beq.n	810438a <HAL_SPI_Init+0x42>
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	4a75      	ldr	r2, [pc, #468]	; (8104550 <HAL_SPI_Init+0x208>)
 810437a:	4293      	cmp	r3, r2
 810437c:	d005      	beq.n	810438a <HAL_SPI_Init+0x42>
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	68db      	ldr	r3, [r3, #12]
 8104382:	2b0f      	cmp	r3, #15
 8104384:	d901      	bls.n	810438a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8104386:	2301      	movs	r3, #1
 8104388:	e0d9      	b.n	810453e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810438a:	6878      	ldr	r0, [r7, #4]
 810438c:	f001 f877 	bl	810547e <SPI_GetPacketSize>
 8104390:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104392:	687b      	ldr	r3, [r7, #4]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	4a6c      	ldr	r2, [pc, #432]	; (8104548 <HAL_SPI_Init+0x200>)
 8104398:	4293      	cmp	r3, r2
 810439a:	d00c      	beq.n	81043b6 <HAL_SPI_Init+0x6e>
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	4a6a      	ldr	r2, [pc, #424]	; (810454c <HAL_SPI_Init+0x204>)
 81043a2:	4293      	cmp	r3, r2
 81043a4:	d007      	beq.n	81043b6 <HAL_SPI_Init+0x6e>
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	4a69      	ldr	r2, [pc, #420]	; (8104550 <HAL_SPI_Init+0x208>)
 81043ac:	4293      	cmp	r3, r2
 81043ae:	d002      	beq.n	81043b6 <HAL_SPI_Init+0x6e>
 81043b0:	68fb      	ldr	r3, [r7, #12]
 81043b2:	2b08      	cmp	r3, #8
 81043b4:	d811      	bhi.n	81043da <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81043ba:	4a63      	ldr	r2, [pc, #396]	; (8104548 <HAL_SPI_Init+0x200>)
 81043bc:	4293      	cmp	r3, r2
 81043be:	d009      	beq.n	81043d4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	4a61      	ldr	r2, [pc, #388]	; (810454c <HAL_SPI_Init+0x204>)
 81043c6:	4293      	cmp	r3, r2
 81043c8:	d004      	beq.n	81043d4 <HAL_SPI_Init+0x8c>
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a60      	ldr	r2, [pc, #384]	; (8104550 <HAL_SPI_Init+0x208>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d104      	bne.n	81043de <HAL_SPI_Init+0x96>
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	2b10      	cmp	r3, #16
 81043d8:	d901      	bls.n	81043de <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81043da:	2301      	movs	r3, #1
 81043dc:	e0af      	b.n	810453e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81043e4:	b2db      	uxtb	r3, r3
 81043e6:	2b00      	cmp	r3, #0
 81043e8:	d106      	bne.n	81043f8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	2200      	movs	r2, #0
 81043ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81043f2:	6878      	ldr	r0, [r7, #4]
 81043f4:	f7fd fbee 	bl	8101bd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	2202      	movs	r2, #2
 81043fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104400:	687b      	ldr	r3, [r7, #4]
 8104402:	681b      	ldr	r3, [r3, #0]
 8104404:	681a      	ldr	r2, [r3, #0]
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	681b      	ldr	r3, [r3, #0]
 810440a:	f022 0201 	bic.w	r2, r2, #1
 810440e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	689b      	ldr	r3, [r3, #8]
 8104416:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 810441a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	699b      	ldr	r3, [r3, #24]
 8104420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104424:	d119      	bne.n	810445a <HAL_SPI_Init+0x112>
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	685b      	ldr	r3, [r3, #4]
 810442a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810442e:	d103      	bne.n	8104438 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104434:	2b00      	cmp	r3, #0
 8104436:	d008      	beq.n	810444a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104438:	687b      	ldr	r3, [r7, #4]
 810443a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810443c:	2b00      	cmp	r3, #0
 810443e:	d10c      	bne.n	810445a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104440:	687b      	ldr	r3, [r7, #4]
 8104442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104448:	d107      	bne.n	810445a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	681a      	ldr	r2, [r3, #0]
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	681b      	ldr	r3, [r3, #0]
 8104454:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104458:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810445a:	687b      	ldr	r3, [r7, #4]
 810445c:	69da      	ldr	r2, [r3, #28]
 810445e:	687b      	ldr	r3, [r7, #4]
 8104460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104462:	431a      	orrs	r2, r3
 8104464:	68bb      	ldr	r3, [r7, #8]
 8104466:	431a      	orrs	r2, r3
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810446c:	ea42 0103 	orr.w	r1, r2, r3
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	68da      	ldr	r2, [r3, #12]
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	681b      	ldr	r3, [r3, #0]
 8104478:	430a      	orrs	r2, r1
 810447a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810447c:	687b      	ldr	r3, [r7, #4]
 810447e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104484:	431a      	orrs	r2, r3
 8104486:	687b      	ldr	r3, [r7, #4]
 8104488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810448a:	431a      	orrs	r2, r3
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	699b      	ldr	r3, [r3, #24]
 8104490:	431a      	orrs	r2, r3
 8104492:	687b      	ldr	r3, [r7, #4]
 8104494:	691b      	ldr	r3, [r3, #16]
 8104496:	431a      	orrs	r2, r3
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	695b      	ldr	r3, [r3, #20]
 810449c:	431a      	orrs	r2, r3
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	6a1b      	ldr	r3, [r3, #32]
 81044a2:	431a      	orrs	r2, r3
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	685b      	ldr	r3, [r3, #4]
 81044a8:	431a      	orrs	r2, r3
 81044aa:	687b      	ldr	r3, [r7, #4]
 81044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81044ae:	431a      	orrs	r2, r3
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	689b      	ldr	r3, [r3, #8]
 81044b4:	431a      	orrs	r2, r3
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81044ba:	ea42 0103 	orr.w	r1, r2, r3
 81044be:	687b      	ldr	r3, [r7, #4]
 81044c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	681b      	ldr	r3, [r3, #0]
 81044c6:	430a      	orrs	r2, r1
 81044c8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81044ca:	687b      	ldr	r3, [r7, #4]
 81044cc:	685b      	ldr	r3, [r3, #4]
 81044ce:	2b00      	cmp	r3, #0
 81044d0:	d113      	bne.n	81044fa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81044d2:	687b      	ldr	r3, [r7, #4]
 81044d4:	681b      	ldr	r3, [r3, #0]
 81044d6:	689b      	ldr	r3, [r3, #8]
 81044d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81044dc:	687b      	ldr	r3, [r7, #4]
 81044de:	681b      	ldr	r3, [r3, #0]
 81044e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81044e4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	681b      	ldr	r3, [r3, #0]
 81044ea:	689b      	ldr	r3, [r3, #8]
 81044ec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81044f8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	681b      	ldr	r3, [r3, #0]
 81044fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	f022 0201 	bic.w	r2, r2, #1
 8104508:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	685b      	ldr	r3, [r3, #4]
 810450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104512:	2b00      	cmp	r3, #0
 8104514:	d00a      	beq.n	810452c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	681b      	ldr	r3, [r3, #0]
 810451a:	68db      	ldr	r3, [r3, #12]
 810451c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104524:	687b      	ldr	r3, [r7, #4]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	430a      	orrs	r2, r1
 810452a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	2200      	movs	r2, #0
 8104530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	2201      	movs	r2, #1
 8104538:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 810453c:	2300      	movs	r3, #0
}
 810453e:	4618      	mov	r0, r3
 8104540:	3710      	adds	r7, #16
 8104542:	46bd      	mov	sp, r7
 8104544:	bd80      	pop	{r7, pc}
 8104546:	bf00      	nop
 8104548:	40013000 	.word	0x40013000
 810454c:	40003800 	.word	0x40003800
 8104550:	40003c00 	.word	0x40003c00

08104554 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104554:	b580      	push	{r7, lr}
 8104556:	b08a      	sub	sp, #40	; 0x28
 8104558:	af02      	add	r7, sp, #8
 810455a:	60f8      	str	r0, [r7, #12]
 810455c:	60b9      	str	r1, [r7, #8]
 810455e:	603b      	str	r3, [r7, #0]
 8104560:	4613      	mov	r3, r2
 8104562:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104564:	68fb      	ldr	r3, [r7, #12]
 8104566:	681b      	ldr	r3, [r3, #0]
 8104568:	3320      	adds	r3, #32
 810456a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810456c:	2300      	movs	r3, #0
 810456e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104570:	68fb      	ldr	r3, [r7, #12]
 8104572:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104576:	2b01      	cmp	r3, #1
 8104578:	d101      	bne.n	810457e <HAL_SPI_Transmit+0x2a>
 810457a:	2302      	movs	r3, #2
 810457c:	e1d4      	b.n	8104928 <HAL_SPI_Transmit+0x3d4>
 810457e:	68fb      	ldr	r3, [r7, #12]
 8104580:	2201      	movs	r2, #1
 8104582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104586:	f7fd fdd3 	bl	8102130 <HAL_GetTick>
 810458a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 810458c:	68fb      	ldr	r3, [r7, #12]
 810458e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104592:	b2db      	uxtb	r3, r3
 8104594:	2b01      	cmp	r3, #1
 8104596:	d007      	beq.n	81045a8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8104598:	2302      	movs	r3, #2
 810459a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810459c:	68fb      	ldr	r3, [r7, #12]
 810459e:	2200      	movs	r2, #0
 81045a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81045a4:	7efb      	ldrb	r3, [r7, #27]
 81045a6:	e1bf      	b.n	8104928 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 81045a8:	68bb      	ldr	r3, [r7, #8]
 81045aa:	2b00      	cmp	r3, #0
 81045ac:	d002      	beq.n	81045b4 <HAL_SPI_Transmit+0x60>
 81045ae:	88fb      	ldrh	r3, [r7, #6]
 81045b0:	2b00      	cmp	r3, #0
 81045b2:	d107      	bne.n	81045c4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 81045b4:	2301      	movs	r3, #1
 81045b6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81045b8:	68fb      	ldr	r3, [r7, #12]
 81045ba:	2200      	movs	r2, #0
 81045bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81045c0:	7efb      	ldrb	r3, [r7, #27]
 81045c2:	e1b1      	b.n	8104928 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 81045c4:	68fb      	ldr	r3, [r7, #12]
 81045c6:	2203      	movs	r2, #3
 81045c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81045cc:	68fb      	ldr	r3, [r7, #12]
 81045ce:	2200      	movs	r2, #0
 81045d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 81045d4:	68fb      	ldr	r3, [r7, #12]
 81045d6:	68ba      	ldr	r2, [r7, #8]
 81045d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 81045da:	68fb      	ldr	r3, [r7, #12]
 81045dc:	88fa      	ldrh	r2, [r7, #6]
 81045de:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	88fa      	ldrh	r2, [r7, #6]
 81045e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	2200      	movs	r2, #0
 81045ee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 81045f0:	68fb      	ldr	r3, [r7, #12]
 81045f2:	2200      	movs	r2, #0
 81045f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 81045f8:	68fb      	ldr	r3, [r7, #12]
 81045fa:	2200      	movs	r2, #0
 81045fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8104600:	68fb      	ldr	r3, [r7, #12]
 8104602:	2200      	movs	r2, #0
 8104604:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	2200      	movs	r2, #0
 810460a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810460c:	68fb      	ldr	r3, [r7, #12]
 810460e:	689b      	ldr	r3, [r3, #8]
 8104610:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8104614:	d107      	bne.n	8104626 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8104616:	68fb      	ldr	r3, [r7, #12]
 8104618:	681b      	ldr	r3, [r3, #0]
 810461a:	681a      	ldr	r2, [r3, #0]
 810461c:	68fb      	ldr	r3, [r7, #12]
 810461e:	681b      	ldr	r3, [r3, #0]
 8104620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104624:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104626:	68fb      	ldr	r3, [r7, #12]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	685b      	ldr	r3, [r3, #4]
 810462c:	0c1b      	lsrs	r3, r3, #16
 810462e:	041b      	lsls	r3, r3, #16
 8104630:	88f9      	ldrh	r1, [r7, #6]
 8104632:	68fa      	ldr	r2, [r7, #12]
 8104634:	6812      	ldr	r2, [r2, #0]
 8104636:	430b      	orrs	r3, r1
 8104638:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	681b      	ldr	r3, [r3, #0]
 810463e:	681a      	ldr	r2, [r3, #0]
 8104640:	68fb      	ldr	r3, [r7, #12]
 8104642:	681b      	ldr	r3, [r3, #0]
 8104644:	f042 0201 	orr.w	r2, r2, #1
 8104648:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 810464a:	68fb      	ldr	r3, [r7, #12]
 810464c:	685b      	ldr	r3, [r3, #4]
 810464e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104652:	d107      	bne.n	8104664 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104654:	68fb      	ldr	r3, [r7, #12]
 8104656:	681b      	ldr	r3, [r3, #0]
 8104658:	681a      	ldr	r2, [r3, #0]
 810465a:	68fb      	ldr	r3, [r7, #12]
 810465c:	681b      	ldr	r3, [r3, #0]
 810465e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104662:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104664:	68fb      	ldr	r3, [r7, #12]
 8104666:	68db      	ldr	r3, [r3, #12]
 8104668:	2b0f      	cmp	r3, #15
 810466a:	d947      	bls.n	81046fc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810466c:	e03f      	b.n	81046ee <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	695b      	ldr	r3, [r3, #20]
 8104674:	f003 0302 	and.w	r3, r3, #2
 8104678:	2b02      	cmp	r3, #2
 810467a:	d114      	bne.n	81046a6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810467c:	68fb      	ldr	r3, [r7, #12]
 810467e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104680:	68fb      	ldr	r3, [r7, #12]
 8104682:	681b      	ldr	r3, [r3, #0]
 8104684:	6812      	ldr	r2, [r2, #0]
 8104686:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810468c:	1d1a      	adds	r2, r3, #4
 810468e:	68fb      	ldr	r3, [r7, #12]
 8104690:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104692:	68fb      	ldr	r3, [r7, #12]
 8104694:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104698:	b29b      	uxth	r3, r3
 810469a:	3b01      	subs	r3, #1
 810469c:	b29a      	uxth	r2, r3
 810469e:	68fb      	ldr	r3, [r7, #12]
 81046a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81046a4:	e023      	b.n	81046ee <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81046a6:	f7fd fd43 	bl	8102130 <HAL_GetTick>
 81046aa:	4602      	mov	r2, r0
 81046ac:	697b      	ldr	r3, [r7, #20]
 81046ae:	1ad3      	subs	r3, r2, r3
 81046b0:	683a      	ldr	r2, [r7, #0]
 81046b2:	429a      	cmp	r2, r3
 81046b4:	d803      	bhi.n	81046be <HAL_SPI_Transmit+0x16a>
 81046b6:	683b      	ldr	r3, [r7, #0]
 81046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81046bc:	d102      	bne.n	81046c4 <HAL_SPI_Transmit+0x170>
 81046be:	683b      	ldr	r3, [r7, #0]
 81046c0:	2b00      	cmp	r3, #0
 81046c2:	d114      	bne.n	81046ee <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81046c4:	68f8      	ldr	r0, [r7, #12]
 81046c6:	f000 fe0c 	bl	81052e2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81046ca:	68fb      	ldr	r3, [r7, #12]
 81046cc:	2200      	movs	r2, #0
 81046ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81046d2:	68fb      	ldr	r3, [r7, #12]
 81046d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81046d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81046dc:	68fb      	ldr	r3, [r7, #12]
 81046de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81046e2:	68fb      	ldr	r3, [r7, #12]
 81046e4:	2201      	movs	r2, #1
 81046e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81046ea:	2303      	movs	r3, #3
 81046ec:	e11c      	b.n	8104928 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81046ee:	68fb      	ldr	r3, [r7, #12]
 81046f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046f4:	b29b      	uxth	r3, r3
 81046f6:	2b00      	cmp	r3, #0
 81046f8:	d1b9      	bne.n	810466e <HAL_SPI_Transmit+0x11a>
 81046fa:	e0ef      	b.n	81048dc <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81046fc:	68fb      	ldr	r3, [r7, #12]
 81046fe:	68db      	ldr	r3, [r3, #12]
 8104700:	2b07      	cmp	r3, #7
 8104702:	f240 80e4 	bls.w	81048ce <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8104706:	e05d      	b.n	81047c4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104708:	68fb      	ldr	r3, [r7, #12]
 810470a:	681b      	ldr	r3, [r3, #0]
 810470c:	695b      	ldr	r3, [r3, #20]
 810470e:	f003 0302 	and.w	r3, r3, #2
 8104712:	2b02      	cmp	r3, #2
 8104714:	d132      	bne.n	810477c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104716:	68fb      	ldr	r3, [r7, #12]
 8104718:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810471c:	b29b      	uxth	r3, r3
 810471e:	2b01      	cmp	r3, #1
 8104720:	d918      	bls.n	8104754 <HAL_SPI_Transmit+0x200>
 8104722:	68fb      	ldr	r3, [r7, #12]
 8104724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104726:	2b00      	cmp	r3, #0
 8104728:	d014      	beq.n	8104754 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810472a:	68fb      	ldr	r3, [r7, #12]
 810472c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810472e:	68fb      	ldr	r3, [r7, #12]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	6812      	ldr	r2, [r2, #0]
 8104734:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104736:	68fb      	ldr	r3, [r7, #12]
 8104738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810473a:	1d1a      	adds	r2, r3, #4
 810473c:	68fb      	ldr	r3, [r7, #12]
 810473e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104740:	68fb      	ldr	r3, [r7, #12]
 8104742:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104746:	b29b      	uxth	r3, r3
 8104748:	3b02      	subs	r3, #2
 810474a:	b29a      	uxth	r2, r3
 810474c:	68fb      	ldr	r3, [r7, #12]
 810474e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104752:	e037      	b.n	81047c4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104758:	881a      	ldrh	r2, [r3, #0]
 810475a:	69fb      	ldr	r3, [r7, #28]
 810475c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810475e:	68fb      	ldr	r3, [r7, #12]
 8104760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104762:	1c9a      	adds	r2, r3, #2
 8104764:	68fb      	ldr	r3, [r7, #12]
 8104766:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104768:	68fb      	ldr	r3, [r7, #12]
 810476a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810476e:	b29b      	uxth	r3, r3
 8104770:	3b01      	subs	r3, #1
 8104772:	b29a      	uxth	r2, r3
 8104774:	68fb      	ldr	r3, [r7, #12]
 8104776:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810477a:	e023      	b.n	81047c4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810477c:	f7fd fcd8 	bl	8102130 <HAL_GetTick>
 8104780:	4602      	mov	r2, r0
 8104782:	697b      	ldr	r3, [r7, #20]
 8104784:	1ad3      	subs	r3, r2, r3
 8104786:	683a      	ldr	r2, [r7, #0]
 8104788:	429a      	cmp	r2, r3
 810478a:	d803      	bhi.n	8104794 <HAL_SPI_Transmit+0x240>
 810478c:	683b      	ldr	r3, [r7, #0]
 810478e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104792:	d102      	bne.n	810479a <HAL_SPI_Transmit+0x246>
 8104794:	683b      	ldr	r3, [r7, #0]
 8104796:	2b00      	cmp	r3, #0
 8104798:	d114      	bne.n	81047c4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810479a:	68f8      	ldr	r0, [r7, #12]
 810479c:	f000 fda1 	bl	81052e2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81047a0:	68fb      	ldr	r3, [r7, #12]
 81047a2:	2200      	movs	r2, #0
 81047a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81047a8:	68fb      	ldr	r3, [r7, #12]
 81047aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81047ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81047b2:	68fb      	ldr	r3, [r7, #12]
 81047b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81047b8:	68fb      	ldr	r3, [r7, #12]
 81047ba:	2201      	movs	r2, #1
 81047bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81047c0:	2303      	movs	r3, #3
 81047c2:	e0b1      	b.n	8104928 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81047c4:	68fb      	ldr	r3, [r7, #12]
 81047c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81047ca:	b29b      	uxth	r3, r3
 81047cc:	2b00      	cmp	r3, #0
 81047ce:	d19b      	bne.n	8104708 <HAL_SPI_Transmit+0x1b4>
 81047d0:	e084      	b.n	81048dc <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81047d2:	68fb      	ldr	r3, [r7, #12]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	695b      	ldr	r3, [r3, #20]
 81047d8:	f003 0302 	and.w	r3, r3, #2
 81047dc:	2b02      	cmp	r3, #2
 81047de:	d152      	bne.n	8104886 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81047e0:	68fb      	ldr	r3, [r7, #12]
 81047e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81047e6:	b29b      	uxth	r3, r3
 81047e8:	2b03      	cmp	r3, #3
 81047ea:	d918      	bls.n	810481e <HAL_SPI_Transmit+0x2ca>
 81047ec:	68fb      	ldr	r3, [r7, #12]
 81047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81047f0:	2b40      	cmp	r3, #64	; 0x40
 81047f2:	d914      	bls.n	810481e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81047f4:	68fb      	ldr	r3, [r7, #12]
 81047f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81047f8:	68fb      	ldr	r3, [r7, #12]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	6812      	ldr	r2, [r2, #0]
 81047fe:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104800:	68fb      	ldr	r3, [r7, #12]
 8104802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104804:	1d1a      	adds	r2, r3, #4
 8104806:	68fb      	ldr	r3, [r7, #12]
 8104808:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810480a:	68fb      	ldr	r3, [r7, #12]
 810480c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104810:	b29b      	uxth	r3, r3
 8104812:	3b04      	subs	r3, #4
 8104814:	b29a      	uxth	r2, r3
 8104816:	68fb      	ldr	r3, [r7, #12]
 8104818:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810481c:	e057      	b.n	81048ce <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810481e:	68fb      	ldr	r3, [r7, #12]
 8104820:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104824:	b29b      	uxth	r3, r3
 8104826:	2b01      	cmp	r3, #1
 8104828:	d917      	bls.n	810485a <HAL_SPI_Transmit+0x306>
 810482a:	68fb      	ldr	r3, [r7, #12]
 810482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810482e:	2b00      	cmp	r3, #0
 8104830:	d013      	beq.n	810485a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104832:	68fb      	ldr	r3, [r7, #12]
 8104834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104836:	881a      	ldrh	r2, [r3, #0]
 8104838:	69fb      	ldr	r3, [r7, #28]
 810483a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810483c:	68fb      	ldr	r3, [r7, #12]
 810483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104840:	1c9a      	adds	r2, r3, #2
 8104842:	68fb      	ldr	r3, [r7, #12]
 8104844:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104846:	68fb      	ldr	r3, [r7, #12]
 8104848:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810484c:	b29b      	uxth	r3, r3
 810484e:	3b02      	subs	r3, #2
 8104850:	b29a      	uxth	r2, r3
 8104852:	68fb      	ldr	r3, [r7, #12]
 8104854:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104858:	e039      	b.n	81048ce <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810485a:	68fb      	ldr	r3, [r7, #12]
 810485c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810485e:	68fb      	ldr	r3, [r7, #12]
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	3320      	adds	r3, #32
 8104864:	7812      	ldrb	r2, [r2, #0]
 8104866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104868:	68fb      	ldr	r3, [r7, #12]
 810486a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810486c:	1c5a      	adds	r2, r3, #1
 810486e:	68fb      	ldr	r3, [r7, #12]
 8104870:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104872:	68fb      	ldr	r3, [r7, #12]
 8104874:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104878:	b29b      	uxth	r3, r3
 810487a:	3b01      	subs	r3, #1
 810487c:	b29a      	uxth	r2, r3
 810487e:	68fb      	ldr	r3, [r7, #12]
 8104880:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104884:	e023      	b.n	81048ce <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104886:	f7fd fc53 	bl	8102130 <HAL_GetTick>
 810488a:	4602      	mov	r2, r0
 810488c:	697b      	ldr	r3, [r7, #20]
 810488e:	1ad3      	subs	r3, r2, r3
 8104890:	683a      	ldr	r2, [r7, #0]
 8104892:	429a      	cmp	r2, r3
 8104894:	d803      	bhi.n	810489e <HAL_SPI_Transmit+0x34a>
 8104896:	683b      	ldr	r3, [r7, #0]
 8104898:	f1b3 3fff 	cmp.w	r3, #4294967295
 810489c:	d102      	bne.n	81048a4 <HAL_SPI_Transmit+0x350>
 810489e:	683b      	ldr	r3, [r7, #0]
 81048a0:	2b00      	cmp	r3, #0
 81048a2:	d114      	bne.n	81048ce <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81048a4:	68f8      	ldr	r0, [r7, #12]
 81048a6:	f000 fd1c 	bl	81052e2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81048aa:	68fb      	ldr	r3, [r7, #12]
 81048ac:	2200      	movs	r2, #0
 81048ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81048b2:	68fb      	ldr	r3, [r7, #12]
 81048b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81048b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81048bc:	68fb      	ldr	r3, [r7, #12]
 81048be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81048c2:	68fb      	ldr	r3, [r7, #12]
 81048c4:	2201      	movs	r2, #1
 81048c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81048ca:	2303      	movs	r3, #3
 81048cc:	e02c      	b.n	8104928 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81048ce:	68fb      	ldr	r3, [r7, #12]
 81048d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81048d4:	b29b      	uxth	r3, r3
 81048d6:	2b00      	cmp	r3, #0
 81048d8:	f47f af7b 	bne.w	81047d2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81048dc:	683b      	ldr	r3, [r7, #0]
 81048de:	9300      	str	r3, [sp, #0]
 81048e0:	697b      	ldr	r3, [r7, #20]
 81048e2:	2200      	movs	r2, #0
 81048e4:	2108      	movs	r1, #8
 81048e6:	68f8      	ldr	r0, [r7, #12]
 81048e8:	f000 fd9b 	bl	8105422 <SPI_WaitOnFlagUntilTimeout>
 81048ec:	4603      	mov	r3, r0
 81048ee:	2b00      	cmp	r3, #0
 81048f0:	d007      	beq.n	8104902 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81048f2:	68fb      	ldr	r3, [r7, #12]
 81048f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81048f8:	f043 0220 	orr.w	r2, r3, #32
 81048fc:	68fb      	ldr	r3, [r7, #12]
 81048fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104902:	68f8      	ldr	r0, [r7, #12]
 8104904:	f000 fced 	bl	81052e2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104908:	68fb      	ldr	r3, [r7, #12]
 810490a:	2200      	movs	r2, #0
 810490c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104910:	68fb      	ldr	r3, [r7, #12]
 8104912:	2201      	movs	r2, #1
 8104914:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104918:	68fb      	ldr	r3, [r7, #12]
 810491a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810491e:	2b00      	cmp	r3, #0
 8104920:	d001      	beq.n	8104926 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8104922:	2301      	movs	r3, #1
 8104924:	e000      	b.n	8104928 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8104926:	7efb      	ldrb	r3, [r7, #27]
}
 8104928:	4618      	mov	r0, r3
 810492a:	3720      	adds	r7, #32
 810492c:	46bd      	mov	sp, r7
 810492e:	bd80      	pop	{r7, pc}

08104930 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104930:	b580      	push	{r7, lr}
 8104932:	b08a      	sub	sp, #40	; 0x28
 8104934:	af02      	add	r7, sp, #8
 8104936:	60f8      	str	r0, [r7, #12]
 8104938:	60b9      	str	r1, [r7, #8]
 810493a:	603b      	str	r3, [r7, #0]
 810493c:	4613      	mov	r3, r2
 810493e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104940:	2300      	movs	r3, #0
 8104942:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104944:	68fb      	ldr	r3, [r7, #12]
 8104946:	681b      	ldr	r3, [r3, #0]
 8104948:	3330      	adds	r3, #48	; 0x30
 810494a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 810494c:	68fb      	ldr	r3, [r7, #12]
 810494e:	685b      	ldr	r3, [r3, #4]
 8104950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104954:	d112      	bne.n	810497c <HAL_SPI_Receive+0x4c>
 8104956:	68fb      	ldr	r3, [r7, #12]
 8104958:	689b      	ldr	r3, [r3, #8]
 810495a:	2b00      	cmp	r3, #0
 810495c:	d10e      	bne.n	810497c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 810495e:	68fb      	ldr	r3, [r7, #12]
 8104960:	2204      	movs	r2, #4
 8104962:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8104966:	88fa      	ldrh	r2, [r7, #6]
 8104968:	683b      	ldr	r3, [r7, #0]
 810496a:	9300      	str	r3, [sp, #0]
 810496c:	4613      	mov	r3, r2
 810496e:	68ba      	ldr	r2, [r7, #8]
 8104970:	68b9      	ldr	r1, [r7, #8]
 8104972:	68f8      	ldr	r0, [r7, #12]
 8104974:	f000 f9cc 	bl	8104d10 <HAL_SPI_TransmitReceive>
 8104978:	4603      	mov	r3, r0
 810497a:	e1c5      	b.n	8104d08 <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 810497c:	68fb      	ldr	r3, [r7, #12]
 810497e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104982:	2b01      	cmp	r3, #1
 8104984:	d101      	bne.n	810498a <HAL_SPI_Receive+0x5a>
 8104986:	2302      	movs	r3, #2
 8104988:	e1be      	b.n	8104d08 <HAL_SPI_Receive+0x3d8>
 810498a:	68fb      	ldr	r3, [r7, #12]
 810498c:	2201      	movs	r2, #1
 810498e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104992:	f7fd fbcd 	bl	8102130 <HAL_GetTick>
 8104996:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8104998:	68fb      	ldr	r3, [r7, #12]
 810499a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810499e:	b2db      	uxtb	r3, r3
 81049a0:	2b01      	cmp	r3, #1
 81049a2:	d007      	beq.n	81049b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 81049a4:	2302      	movs	r3, #2
 81049a6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81049a8:	68fb      	ldr	r3, [r7, #12]
 81049aa:	2200      	movs	r2, #0
 81049ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81049b0:	7ffb      	ldrb	r3, [r7, #31]
 81049b2:	e1a9      	b.n	8104d08 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 81049b4:	68bb      	ldr	r3, [r7, #8]
 81049b6:	2b00      	cmp	r3, #0
 81049b8:	d002      	beq.n	81049c0 <HAL_SPI_Receive+0x90>
 81049ba:	88fb      	ldrh	r3, [r7, #6]
 81049bc:	2b00      	cmp	r3, #0
 81049be:	d107      	bne.n	81049d0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 81049c0:	2301      	movs	r3, #1
 81049c2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81049c4:	68fb      	ldr	r3, [r7, #12]
 81049c6:	2200      	movs	r2, #0
 81049c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81049cc:	7ffb      	ldrb	r3, [r7, #31]
 81049ce:	e19b      	b.n	8104d08 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 81049d0:	68fb      	ldr	r3, [r7, #12]
 81049d2:	2204      	movs	r2, #4
 81049d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81049d8:	68fb      	ldr	r3, [r7, #12]
 81049da:	2200      	movs	r2, #0
 81049dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 81049e0:	68fb      	ldr	r3, [r7, #12]
 81049e2:	68ba      	ldr	r2, [r7, #8]
 81049e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 81049e6:	68fb      	ldr	r3, [r7, #12]
 81049e8:	88fa      	ldrh	r2, [r7, #6]
 81049ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 81049ee:	68fb      	ldr	r3, [r7, #12]
 81049f0:	88fa      	ldrh	r2, [r7, #6]
 81049f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	2200      	movs	r2, #0
 81049fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 81049fc:	68fb      	ldr	r3, [r7, #12]
 81049fe:	2200      	movs	r2, #0
 8104a00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8104a04:	68fb      	ldr	r3, [r7, #12]
 8104a06:	2200      	movs	r2, #0
 8104a08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8104a0c:	68fb      	ldr	r3, [r7, #12]
 8104a0e:	2200      	movs	r2, #0
 8104a10:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8104a12:	68fb      	ldr	r3, [r7, #12]
 8104a14:	2200      	movs	r2, #0
 8104a16:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104a18:	68fb      	ldr	r3, [r7, #12]
 8104a1a:	689b      	ldr	r3, [r3, #8]
 8104a1c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8104a20:	d107      	bne.n	8104a32 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8104a22:	68fb      	ldr	r3, [r7, #12]
 8104a24:	681b      	ldr	r3, [r3, #0]
 8104a26:	681a      	ldr	r2, [r3, #0]
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	681b      	ldr	r3, [r3, #0]
 8104a2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8104a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104a32:	68fb      	ldr	r3, [r7, #12]
 8104a34:	681b      	ldr	r3, [r3, #0]
 8104a36:	685b      	ldr	r3, [r3, #4]
 8104a38:	0c1b      	lsrs	r3, r3, #16
 8104a3a:	041b      	lsls	r3, r3, #16
 8104a3c:	88f9      	ldrh	r1, [r7, #6]
 8104a3e:	68fa      	ldr	r2, [r7, #12]
 8104a40:	6812      	ldr	r2, [r2, #0]
 8104a42:	430b      	orrs	r3, r1
 8104a44:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104a46:	68fb      	ldr	r3, [r7, #12]
 8104a48:	681b      	ldr	r3, [r3, #0]
 8104a4a:	681a      	ldr	r2, [r3, #0]
 8104a4c:	68fb      	ldr	r3, [r7, #12]
 8104a4e:	681b      	ldr	r3, [r3, #0]
 8104a50:	f042 0201 	orr.w	r2, r2, #1
 8104a54:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	685b      	ldr	r3, [r3, #4]
 8104a5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104a5e:	d107      	bne.n	8104a70 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104a60:	68fb      	ldr	r3, [r7, #12]
 8104a62:	681b      	ldr	r3, [r3, #0]
 8104a64:	681a      	ldr	r2, [r3, #0]
 8104a66:	68fb      	ldr	r3, [r7, #12]
 8104a68:	681b      	ldr	r3, [r3, #0]
 8104a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104a6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104a70:	68fb      	ldr	r3, [r7, #12]
 8104a72:	68db      	ldr	r3, [r3, #12]
 8104a74:	2b0f      	cmp	r3, #15
 8104a76:	d948      	bls.n	8104b0a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104a78:	e040      	b.n	8104afc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8104a7a:	68fb      	ldr	r3, [r7, #12]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	695a      	ldr	r2, [r3, #20]
 8104a80:	f248 0308 	movw	r3, #32776	; 0x8008
 8104a84:	4013      	ands	r3, r2
 8104a86:	2b00      	cmp	r3, #0
 8104a88:	d014      	beq.n	8104ab4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104a8a:	68fb      	ldr	r3, [r7, #12]
 8104a8c:	681a      	ldr	r2, [r3, #0]
 8104a8e:	68fb      	ldr	r3, [r7, #12]
 8104a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104a94:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104a96:	68fb      	ldr	r3, [r7, #12]
 8104a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104a9a:	1d1a      	adds	r2, r3, #4
 8104a9c:	68fb      	ldr	r3, [r7, #12]
 8104a9e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104aa0:	68fb      	ldr	r3, [r7, #12]
 8104aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104aa6:	b29b      	uxth	r3, r3
 8104aa8:	3b01      	subs	r3, #1
 8104aaa:	b29a      	uxth	r2, r3
 8104aac:	68fb      	ldr	r3, [r7, #12]
 8104aae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104ab2:	e023      	b.n	8104afc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104ab4:	f7fd fb3c 	bl	8102130 <HAL_GetTick>
 8104ab8:	4602      	mov	r2, r0
 8104aba:	697b      	ldr	r3, [r7, #20]
 8104abc:	1ad3      	subs	r3, r2, r3
 8104abe:	683a      	ldr	r2, [r7, #0]
 8104ac0:	429a      	cmp	r2, r3
 8104ac2:	d803      	bhi.n	8104acc <HAL_SPI_Receive+0x19c>
 8104ac4:	683b      	ldr	r3, [r7, #0]
 8104ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104aca:	d102      	bne.n	8104ad2 <HAL_SPI_Receive+0x1a2>
 8104acc:	683b      	ldr	r3, [r7, #0]
 8104ace:	2b00      	cmp	r3, #0
 8104ad0:	d114      	bne.n	8104afc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104ad2:	68f8      	ldr	r0, [r7, #12]
 8104ad4:	f000 fc05 	bl	81052e2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104ad8:	68fb      	ldr	r3, [r7, #12]
 8104ada:	2200      	movs	r2, #0
 8104adc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104ae0:	68fb      	ldr	r3, [r7, #12]
 8104ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104ae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104aea:	68fb      	ldr	r3, [r7, #12]
 8104aec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	2201      	movs	r2, #1
 8104af4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104af8:	2303      	movs	r3, #3
 8104afa:	e105      	b.n	8104d08 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104afc:	68fb      	ldr	r3, [r7, #12]
 8104afe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104b02:	b29b      	uxth	r3, r3
 8104b04:	2b00      	cmp	r3, #0
 8104b06:	d1b8      	bne.n	8104a7a <HAL_SPI_Receive+0x14a>
 8104b08:	e0eb      	b.n	8104ce2 <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104b0a:	68fb      	ldr	r3, [r7, #12]
 8104b0c:	68db      	ldr	r3, [r3, #12]
 8104b0e:	2b07      	cmp	r3, #7
 8104b10:	f240 80e0 	bls.w	8104cd4 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104b14:	e05b      	b.n	8104bce <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8104b16:	68fb      	ldr	r3, [r7, #12]
 8104b18:	681b      	ldr	r3, [r3, #0]
 8104b1a:	695b      	ldr	r3, [r3, #20]
 8104b1c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8104b20:	2b00      	cmp	r3, #0
 8104b22:	d030      	beq.n	8104b86 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104b24:	68fb      	ldr	r3, [r7, #12]
 8104b26:	681b      	ldr	r3, [r3, #0]
 8104b28:	695b      	ldr	r3, [r3, #20]
 8104b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104b2e:	2b00      	cmp	r3, #0
 8104b30:	d014      	beq.n	8104b5c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104b32:	68fb      	ldr	r3, [r7, #12]
 8104b34:	681a      	ldr	r2, [r3, #0]
 8104b36:	68fb      	ldr	r3, [r7, #12]
 8104b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104b3c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104b3e:	68fb      	ldr	r3, [r7, #12]
 8104b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b42:	1d1a      	adds	r2, r3, #4
 8104b44:	68fb      	ldr	r3, [r7, #12]
 8104b46:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104b4e:	b29b      	uxth	r3, r3
 8104b50:	3b02      	subs	r3, #2
 8104b52:	b29a      	uxth	r2, r3
 8104b54:	68fb      	ldr	r3, [r7, #12]
 8104b56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104b5a:	e038      	b.n	8104bce <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104b5c:	68fb      	ldr	r3, [r7, #12]
 8104b5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b60:	69ba      	ldr	r2, [r7, #24]
 8104b62:	8812      	ldrh	r2, [r2, #0]
 8104b64:	b292      	uxth	r2, r2
 8104b66:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104b68:	68fb      	ldr	r3, [r7, #12]
 8104b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b6c:	1c9a      	adds	r2, r3, #2
 8104b6e:	68fb      	ldr	r3, [r7, #12]
 8104b70:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104b72:	68fb      	ldr	r3, [r7, #12]
 8104b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104b78:	b29b      	uxth	r3, r3
 8104b7a:	3b01      	subs	r3, #1
 8104b7c:	b29a      	uxth	r2, r3
 8104b7e:	68fb      	ldr	r3, [r7, #12]
 8104b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104b84:	e023      	b.n	8104bce <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104b86:	f7fd fad3 	bl	8102130 <HAL_GetTick>
 8104b8a:	4602      	mov	r2, r0
 8104b8c:	697b      	ldr	r3, [r7, #20]
 8104b8e:	1ad3      	subs	r3, r2, r3
 8104b90:	683a      	ldr	r2, [r7, #0]
 8104b92:	429a      	cmp	r2, r3
 8104b94:	d803      	bhi.n	8104b9e <HAL_SPI_Receive+0x26e>
 8104b96:	683b      	ldr	r3, [r7, #0]
 8104b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104b9c:	d102      	bne.n	8104ba4 <HAL_SPI_Receive+0x274>
 8104b9e:	683b      	ldr	r3, [r7, #0]
 8104ba0:	2b00      	cmp	r3, #0
 8104ba2:	d114      	bne.n	8104bce <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104ba4:	68f8      	ldr	r0, [r7, #12]
 8104ba6:	f000 fb9c 	bl	81052e2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104baa:	68fb      	ldr	r3, [r7, #12]
 8104bac:	2200      	movs	r2, #0
 8104bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104bb2:	68fb      	ldr	r3, [r7, #12]
 8104bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104bb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104bbc:	68fb      	ldr	r3, [r7, #12]
 8104bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104bc2:	68fb      	ldr	r3, [r7, #12]
 8104bc4:	2201      	movs	r2, #1
 8104bc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104bca:	2303      	movs	r3, #3
 8104bcc:	e09c      	b.n	8104d08 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104bce:	68fb      	ldr	r3, [r7, #12]
 8104bd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104bd4:	b29b      	uxth	r3, r3
 8104bd6:	2b00      	cmp	r3, #0
 8104bd8:	d19d      	bne.n	8104b16 <HAL_SPI_Receive+0x1e6>
 8104bda:	e082      	b.n	8104ce2 <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8104bdc:	68fb      	ldr	r3, [r7, #12]
 8104bde:	681b      	ldr	r3, [r3, #0]
 8104be0:	695b      	ldr	r3, [r3, #20]
 8104be2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8104be6:	2b00      	cmp	r3, #0
 8104be8:	d050      	beq.n	8104c8c <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104bea:	68fb      	ldr	r3, [r7, #12]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	695b      	ldr	r3, [r3, #20]
 8104bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104bf4:	2b00      	cmp	r3, #0
 8104bf6:	d014      	beq.n	8104c22 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104bf8:	68fb      	ldr	r3, [r7, #12]
 8104bfa:	681a      	ldr	r2, [r3, #0]
 8104bfc:	68fb      	ldr	r3, [r7, #12]
 8104bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104c02:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104c04:	68fb      	ldr	r3, [r7, #12]
 8104c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c08:	1d1a      	adds	r2, r3, #4
 8104c0a:	68fb      	ldr	r3, [r7, #12]
 8104c0c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8104c0e:	68fb      	ldr	r3, [r7, #12]
 8104c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104c14:	b29b      	uxth	r3, r3
 8104c16:	3b04      	subs	r3, #4
 8104c18:	b29a      	uxth	r2, r3
 8104c1a:	68fb      	ldr	r3, [r7, #12]
 8104c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104c20:	e058      	b.n	8104cd4 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8104c22:	68fb      	ldr	r3, [r7, #12]
 8104c24:	681b      	ldr	r3, [r3, #0]
 8104c26:	695b      	ldr	r3, [r3, #20]
 8104c28:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8104c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c30:	d914      	bls.n	8104c5c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104c32:	68fb      	ldr	r3, [r7, #12]
 8104c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c36:	69ba      	ldr	r2, [r7, #24]
 8104c38:	8812      	ldrh	r2, [r2, #0]
 8104c3a:	b292      	uxth	r2, r2
 8104c3c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104c3e:	68fb      	ldr	r3, [r7, #12]
 8104c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c42:	1c9a      	adds	r2, r3, #2
 8104c44:	68fb      	ldr	r3, [r7, #12]
 8104c46:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104c48:	68fb      	ldr	r3, [r7, #12]
 8104c4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104c4e:	b29b      	uxth	r3, r3
 8104c50:	3b02      	subs	r3, #2
 8104c52:	b29a      	uxth	r2, r3
 8104c54:	68fb      	ldr	r3, [r7, #12]
 8104c56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104c5a:	e03b      	b.n	8104cd4 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104c5c:	68fb      	ldr	r3, [r7, #12]
 8104c5e:	681b      	ldr	r3, [r3, #0]
 8104c60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104c64:	68fb      	ldr	r3, [r7, #12]
 8104c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c68:	7812      	ldrb	r2, [r2, #0]
 8104c6a:	b2d2      	uxtb	r2, r2
 8104c6c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104c6e:	68fb      	ldr	r3, [r7, #12]
 8104c70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c72:	1c5a      	adds	r2, r3, #1
 8104c74:	68fb      	ldr	r3, [r7, #12]
 8104c76:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104c7e:	b29b      	uxth	r3, r3
 8104c80:	3b01      	subs	r3, #1
 8104c82:	b29a      	uxth	r2, r3
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104c8a:	e023      	b.n	8104cd4 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104c8c:	f7fd fa50 	bl	8102130 <HAL_GetTick>
 8104c90:	4602      	mov	r2, r0
 8104c92:	697b      	ldr	r3, [r7, #20]
 8104c94:	1ad3      	subs	r3, r2, r3
 8104c96:	683a      	ldr	r2, [r7, #0]
 8104c98:	429a      	cmp	r2, r3
 8104c9a:	d803      	bhi.n	8104ca4 <HAL_SPI_Receive+0x374>
 8104c9c:	683b      	ldr	r3, [r7, #0]
 8104c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104ca2:	d102      	bne.n	8104caa <HAL_SPI_Receive+0x37a>
 8104ca4:	683b      	ldr	r3, [r7, #0]
 8104ca6:	2b00      	cmp	r3, #0
 8104ca8:	d114      	bne.n	8104cd4 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104caa:	68f8      	ldr	r0, [r7, #12]
 8104cac:	f000 fb19 	bl	81052e2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104cb0:	68fb      	ldr	r3, [r7, #12]
 8104cb2:	2200      	movs	r2, #0
 8104cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104cb8:	68fb      	ldr	r3, [r7, #12]
 8104cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104cbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104cc2:	68fb      	ldr	r3, [r7, #12]
 8104cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104cc8:	68fb      	ldr	r3, [r7, #12]
 8104cca:	2201      	movs	r2, #1
 8104ccc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104cd0:	2303      	movs	r3, #3
 8104cd2:	e019      	b.n	8104d08 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104cd4:	68fb      	ldr	r3, [r7, #12]
 8104cd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104cda:	b29b      	uxth	r3, r3
 8104cdc:	2b00      	cmp	r3, #0
 8104cde:	f47f af7d 	bne.w	8104bdc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104ce2:	68f8      	ldr	r0, [r7, #12]
 8104ce4:	f000 fafd 	bl	81052e2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104ce8:	68fb      	ldr	r3, [r7, #12]
 8104cea:	2200      	movs	r2, #0
 8104cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104cf0:	68fb      	ldr	r3, [r7, #12]
 8104cf2:	2201      	movs	r2, #1
 8104cf4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104cf8:	68fb      	ldr	r3, [r7, #12]
 8104cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104cfe:	2b00      	cmp	r3, #0
 8104d00:	d001      	beq.n	8104d06 <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 8104d02:	2301      	movs	r3, #1
 8104d04:	e000      	b.n	8104d08 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 8104d06:	7ffb      	ldrb	r3, [r7, #31]
}
 8104d08:	4618      	mov	r0, r3
 8104d0a:	3720      	adds	r7, #32
 8104d0c:	46bd      	mov	sp, r7
 8104d0e:	bd80      	pop	{r7, pc}

08104d10 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8104d10:	b580      	push	{r7, lr}
 8104d12:	b08e      	sub	sp, #56	; 0x38
 8104d14:	af02      	add	r7, sp, #8
 8104d16:	60f8      	str	r0, [r7, #12]
 8104d18:	60b9      	str	r1, [r7, #8]
 8104d1a:	607a      	str	r2, [r7, #4]
 8104d1c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104d1e:	2300      	movs	r3, #0
 8104d20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104d24:	68fb      	ldr	r3, [r7, #12]
 8104d26:	681b      	ldr	r3, [r3, #0]
 8104d28:	3320      	adds	r3, #32
 8104d2a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104d2c:	68fb      	ldr	r3, [r7, #12]
 8104d2e:	681b      	ldr	r3, [r3, #0]
 8104d30:	3330      	adds	r3, #48	; 0x30
 8104d32:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104d34:	68fb      	ldr	r3, [r7, #12]
 8104d36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104d3a:	2b01      	cmp	r3, #1
 8104d3c:	d101      	bne.n	8104d42 <HAL_SPI_TransmitReceive+0x32>
 8104d3e:	2302      	movs	r3, #2
 8104d40:	e2cb      	b.n	81052da <HAL_SPI_TransmitReceive+0x5ca>
 8104d42:	68fb      	ldr	r3, [r7, #12]
 8104d44:	2201      	movs	r2, #1
 8104d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104d4a:	f7fd f9f1 	bl	8102130 <HAL_GetTick>
 8104d4e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8104d50:	887b      	ldrh	r3, [r7, #2]
 8104d52:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8104d54:	887b      	ldrh	r3, [r7, #2]
 8104d56:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8104d58:	68fb      	ldr	r3, [r7, #12]
 8104d5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104d5e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8104d60:	68fb      	ldr	r3, [r7, #12]
 8104d62:	685b      	ldr	r3, [r3, #4]
 8104d64:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8104d66:	7efb      	ldrb	r3, [r7, #27]
 8104d68:	2b01      	cmp	r3, #1
 8104d6a:	d014      	beq.n	8104d96 <HAL_SPI_TransmitReceive+0x86>
 8104d6c:	697b      	ldr	r3, [r7, #20]
 8104d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104d72:	d106      	bne.n	8104d82 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104d74:	68fb      	ldr	r3, [r7, #12]
 8104d76:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8104d78:	2b00      	cmp	r3, #0
 8104d7a:	d102      	bne.n	8104d82 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104d7c:	7efb      	ldrb	r3, [r7, #27]
 8104d7e:	2b04      	cmp	r3, #4
 8104d80:	d009      	beq.n	8104d96 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8104d82:	2302      	movs	r3, #2
 8104d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104d88:	68fb      	ldr	r3, [r7, #12]
 8104d8a:	2200      	movs	r2, #0
 8104d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104d90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104d94:	e2a1      	b.n	81052da <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8104d96:	68bb      	ldr	r3, [r7, #8]
 8104d98:	2b00      	cmp	r3, #0
 8104d9a:	d005      	beq.n	8104da8 <HAL_SPI_TransmitReceive+0x98>
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	2b00      	cmp	r3, #0
 8104da0:	d002      	beq.n	8104da8 <HAL_SPI_TransmitReceive+0x98>
 8104da2:	887b      	ldrh	r3, [r7, #2]
 8104da4:	2b00      	cmp	r3, #0
 8104da6:	d109      	bne.n	8104dbc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8104da8:	2301      	movs	r3, #1
 8104daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104dae:	68fb      	ldr	r3, [r7, #12]
 8104db0:	2200      	movs	r2, #0
 8104db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104db6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104dba:	e28e      	b.n	81052da <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104dbc:	68fb      	ldr	r3, [r7, #12]
 8104dbe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104dc2:	b2db      	uxtb	r3, r3
 8104dc4:	2b04      	cmp	r3, #4
 8104dc6:	d003      	beq.n	8104dd0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8104dc8:	68fb      	ldr	r3, [r7, #12]
 8104dca:	2205      	movs	r2, #5
 8104dcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104dd0:	68fb      	ldr	r3, [r7, #12]
 8104dd2:	2200      	movs	r2, #0
 8104dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8104dd8:	68fb      	ldr	r3, [r7, #12]
 8104dda:	687a      	ldr	r2, [r7, #4]
 8104ddc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8104dde:	68fb      	ldr	r3, [r7, #12]
 8104de0:	887a      	ldrh	r2, [r7, #2]
 8104de2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8104de6:	68fb      	ldr	r3, [r7, #12]
 8104de8:	887a      	ldrh	r2, [r7, #2]
 8104dea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8104dee:	68fb      	ldr	r3, [r7, #12]
 8104df0:	68ba      	ldr	r2, [r7, #8]
 8104df2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8104df4:	68fb      	ldr	r3, [r7, #12]
 8104df6:	887a      	ldrh	r2, [r7, #2]
 8104df8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8104dfc:	68fb      	ldr	r3, [r7, #12]
 8104dfe:	887a      	ldrh	r2, [r7, #2]
 8104e00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8104e04:	68fb      	ldr	r3, [r7, #12]
 8104e06:	2200      	movs	r2, #0
 8104e08:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8104e0a:	68fb      	ldr	r3, [r7, #12]
 8104e0c:	2200      	movs	r2, #0
 8104e0e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104e10:	68fb      	ldr	r3, [r7, #12]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	685b      	ldr	r3, [r3, #4]
 8104e16:	0c1b      	lsrs	r3, r3, #16
 8104e18:	041b      	lsls	r3, r3, #16
 8104e1a:	8879      	ldrh	r1, [r7, #2]
 8104e1c:	68fa      	ldr	r2, [r7, #12]
 8104e1e:	6812      	ldr	r2, [r2, #0]
 8104e20:	430b      	orrs	r3, r1
 8104e22:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8104e24:	68fb      	ldr	r3, [r7, #12]
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	681a      	ldr	r2, [r3, #0]
 8104e2a:	68fb      	ldr	r3, [r7, #12]
 8104e2c:	681b      	ldr	r3, [r3, #0]
 8104e2e:	f042 0201 	orr.w	r2, r2, #1
 8104e32:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104e34:	68fb      	ldr	r3, [r7, #12]
 8104e36:	685b      	ldr	r3, [r3, #4]
 8104e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104e3c:	d107      	bne.n	8104e4e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104e3e:	68fb      	ldr	r3, [r7, #12]
 8104e40:	681b      	ldr	r3, [r3, #0]
 8104e42:	681a      	ldr	r2, [r3, #0]
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	681b      	ldr	r3, [r3, #0]
 8104e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104e4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104e4e:	68fb      	ldr	r3, [r7, #12]
 8104e50:	68db      	ldr	r3, [r3, #12]
 8104e52:	2b0f      	cmp	r3, #15
 8104e54:	d970      	bls.n	8104f38 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104e56:	e068      	b.n	8104f2a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104e58:	68fb      	ldr	r3, [r7, #12]
 8104e5a:	681b      	ldr	r3, [r3, #0]
 8104e5c:	695b      	ldr	r3, [r3, #20]
 8104e5e:	f003 0302 	and.w	r3, r3, #2
 8104e62:	2b02      	cmp	r3, #2
 8104e64:	d11a      	bne.n	8104e9c <HAL_SPI_TransmitReceive+0x18c>
 8104e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104e68:	2b00      	cmp	r3, #0
 8104e6a:	d017      	beq.n	8104e9c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104e6c:	68fb      	ldr	r3, [r7, #12]
 8104e6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104e70:	68fb      	ldr	r3, [r7, #12]
 8104e72:	681b      	ldr	r3, [r3, #0]
 8104e74:	6812      	ldr	r2, [r2, #0]
 8104e76:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104e78:	68fb      	ldr	r3, [r7, #12]
 8104e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e7c:	1d1a      	adds	r2, r3, #4
 8104e7e:	68fb      	ldr	r3, [r7, #12]
 8104e80:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8104e82:	68fb      	ldr	r3, [r7, #12]
 8104e84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104e88:	b29b      	uxth	r3, r3
 8104e8a:	3b01      	subs	r3, #1
 8104e8c:	b29a      	uxth	r2, r3
 8104e8e:	68fb      	ldr	r3, [r7, #12]
 8104e90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104e94:	68fb      	ldr	r3, [r7, #12]
 8104e96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104e9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8104e9c:	68fb      	ldr	r3, [r7, #12]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	695a      	ldr	r2, [r3, #20]
 8104ea2:	f248 0308 	movw	r3, #32776	; 0x8008
 8104ea6:	4013      	ands	r3, r2
 8104ea8:	2b00      	cmp	r3, #0
 8104eaa:	d01a      	beq.n	8104ee2 <HAL_SPI_TransmitReceive+0x1d2>
 8104eac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104eae:	2b00      	cmp	r3, #0
 8104eb0:	d017      	beq.n	8104ee2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104eb2:	68fb      	ldr	r3, [r7, #12]
 8104eb4:	681a      	ldr	r2, [r3, #0]
 8104eb6:	68fb      	ldr	r3, [r7, #12]
 8104eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104eba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104ebc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104ebe:	68fb      	ldr	r3, [r7, #12]
 8104ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ec2:	1d1a      	adds	r2, r3, #4
 8104ec4:	68fb      	ldr	r3, [r7, #12]
 8104ec6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104ece:	b29b      	uxth	r3, r3
 8104ed0:	3b01      	subs	r3, #1
 8104ed2:	b29a      	uxth	r2, r3
 8104ed4:	68fb      	ldr	r3, [r7, #12]
 8104ed6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104eda:	68fb      	ldr	r3, [r7, #12]
 8104edc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104ee0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104ee2:	f7fd f925 	bl	8102130 <HAL_GetTick>
 8104ee6:	4602      	mov	r2, r0
 8104ee8:	69fb      	ldr	r3, [r7, #28]
 8104eea:	1ad3      	subs	r3, r2, r3
 8104eec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104eee:	429a      	cmp	r2, r3
 8104ef0:	d803      	bhi.n	8104efa <HAL_SPI_TransmitReceive+0x1ea>
 8104ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104ef8:	d102      	bne.n	8104f00 <HAL_SPI_TransmitReceive+0x1f0>
 8104efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104efc:	2b00      	cmp	r3, #0
 8104efe:	d114      	bne.n	8104f2a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104f00:	68f8      	ldr	r0, [r7, #12]
 8104f02:	f000 f9ee 	bl	81052e2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104f06:	68fb      	ldr	r3, [r7, #12]
 8104f08:	2200      	movs	r2, #0
 8104f0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104f0e:	68fb      	ldr	r3, [r7, #12]
 8104f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104f14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104f18:	68fb      	ldr	r3, [r7, #12]
 8104f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104f1e:	68fb      	ldr	r3, [r7, #12]
 8104f20:	2201      	movs	r2, #1
 8104f22:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104f26:	2303      	movs	r3, #3
 8104f28:	e1d7      	b.n	81052da <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104f2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104f2c:	2b00      	cmp	r3, #0
 8104f2e:	d193      	bne.n	8104e58 <HAL_SPI_TransmitReceive+0x148>
 8104f30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104f32:	2b00      	cmp	r3, #0
 8104f34:	d190      	bne.n	8104e58 <HAL_SPI_TransmitReceive+0x148>
 8104f36:	e1a9      	b.n	810528c <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104f38:	68fb      	ldr	r3, [r7, #12]
 8104f3a:	68db      	ldr	r3, [r3, #12]
 8104f3c:	2b07      	cmp	r3, #7
 8104f3e:	f240 819d 	bls.w	810527c <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104f42:	e0a6      	b.n	8105092 <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104f44:	68fb      	ldr	r3, [r7, #12]
 8104f46:	681b      	ldr	r3, [r3, #0]
 8104f48:	695b      	ldr	r3, [r3, #20]
 8104f4a:	f003 0302 	and.w	r3, r3, #2
 8104f4e:	2b02      	cmp	r3, #2
 8104f50:	d139      	bne.n	8104fc6 <HAL_SPI_TransmitReceive+0x2b6>
 8104f52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104f54:	2b00      	cmp	r3, #0
 8104f56:	d036      	beq.n	8104fc6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104f58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104f5a:	2b01      	cmp	r3, #1
 8104f5c:	d91c      	bls.n	8104f98 <HAL_SPI_TransmitReceive+0x288>
 8104f5e:	68fb      	ldr	r3, [r7, #12]
 8104f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104f62:	2b00      	cmp	r3, #0
 8104f64:	d018      	beq.n	8104f98 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104f66:	68fb      	ldr	r3, [r7, #12]
 8104f68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104f6a:	68fb      	ldr	r3, [r7, #12]
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	6812      	ldr	r2, [r2, #0]
 8104f70:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104f72:	68fb      	ldr	r3, [r7, #12]
 8104f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f76:	1d1a      	adds	r2, r3, #4
 8104f78:	68fb      	ldr	r3, [r7, #12]
 8104f7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104f7c:	68fb      	ldr	r3, [r7, #12]
 8104f7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f82:	b29b      	uxth	r3, r3
 8104f84:	3b02      	subs	r3, #2
 8104f86:	b29a      	uxth	r2, r3
 8104f88:	68fb      	ldr	r3, [r7, #12]
 8104f8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104f8e:	68fb      	ldr	r3, [r7, #12]
 8104f90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f94:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8104f96:	e016      	b.n	8104fc6 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104f98:	68fb      	ldr	r3, [r7, #12]
 8104f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f9c:	881a      	ldrh	r2, [r3, #0]
 8104f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104fa0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104fa2:	68fb      	ldr	r3, [r7, #12]
 8104fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fa6:	1c9a      	adds	r2, r3, #2
 8104fa8:	68fb      	ldr	r3, [r7, #12]
 8104faa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104fac:	68fb      	ldr	r3, [r7, #12]
 8104fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104fb2:	b29b      	uxth	r3, r3
 8104fb4:	3b01      	subs	r3, #1
 8104fb6:	b29a      	uxth	r2, r3
 8104fb8:	68fb      	ldr	r3, [r7, #12]
 8104fba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104fbe:	68fb      	ldr	r3, [r7, #12]
 8104fc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104fc4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8104fc6:	68fb      	ldr	r3, [r7, #12]
 8104fc8:	681b      	ldr	r3, [r3, #0]
 8104fca:	695b      	ldr	r3, [r3, #20]
 8104fcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8104fd0:	2b00      	cmp	r3, #0
 8104fd2:	d03a      	beq.n	810504a <HAL_SPI_TransmitReceive+0x33a>
 8104fd4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104fd6:	2b00      	cmp	r3, #0
 8104fd8:	d037      	beq.n	810504a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104fda:	68fb      	ldr	r3, [r7, #12]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	695b      	ldr	r3, [r3, #20]
 8104fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104fe4:	2b00      	cmp	r3, #0
 8104fe6:	d018      	beq.n	810501a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104fe8:	68fb      	ldr	r3, [r7, #12]
 8104fea:	681a      	ldr	r2, [r3, #0]
 8104fec:	68fb      	ldr	r3, [r7, #12]
 8104fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104ff2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104ff4:	68fb      	ldr	r3, [r7, #12]
 8104ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104ff8:	1d1a      	adds	r2, r3, #4
 8104ffa:	68fb      	ldr	r3, [r7, #12]
 8104ffc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104ffe:	68fb      	ldr	r3, [r7, #12]
 8105000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105004:	b29b      	uxth	r3, r3
 8105006:	3b02      	subs	r3, #2
 8105008:	b29a      	uxth	r2, r3
 810500a:	68fb      	ldr	r3, [r7, #12]
 810500c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105016:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105018:	e017      	b.n	810504a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810501a:	68fb      	ldr	r3, [r7, #12]
 810501c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810501e:	6a3a      	ldr	r2, [r7, #32]
 8105020:	8812      	ldrh	r2, [r2, #0]
 8105022:	b292      	uxth	r2, r2
 8105024:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105026:	68fb      	ldr	r3, [r7, #12]
 8105028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810502a:	1c9a      	adds	r2, r3, #2
 810502c:	68fb      	ldr	r3, [r7, #12]
 810502e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8105030:	68fb      	ldr	r3, [r7, #12]
 8105032:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105036:	b29b      	uxth	r3, r3
 8105038:	3b01      	subs	r3, #1
 810503a:	b29a      	uxth	r2, r3
 810503c:	68fb      	ldr	r3, [r7, #12]
 810503e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105042:	68fb      	ldr	r3, [r7, #12]
 8105044:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105048:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810504a:	f7fd f871 	bl	8102130 <HAL_GetTick>
 810504e:	4602      	mov	r2, r0
 8105050:	69fb      	ldr	r3, [r7, #28]
 8105052:	1ad3      	subs	r3, r2, r3
 8105054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105056:	429a      	cmp	r2, r3
 8105058:	d803      	bhi.n	8105062 <HAL_SPI_TransmitReceive+0x352>
 810505a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105060:	d102      	bne.n	8105068 <HAL_SPI_TransmitReceive+0x358>
 8105062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105064:	2b00      	cmp	r3, #0
 8105066:	d114      	bne.n	8105092 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105068:	68f8      	ldr	r0, [r7, #12]
 810506a:	f000 f93a 	bl	81052e2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810506e:	68fb      	ldr	r3, [r7, #12]
 8105070:	2200      	movs	r2, #0
 8105072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105076:	68fb      	ldr	r3, [r7, #12]
 8105078:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810507c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105080:	68fb      	ldr	r3, [r7, #12]
 8105082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105086:	68fb      	ldr	r3, [r7, #12]
 8105088:	2201      	movs	r2, #1
 810508a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 810508e:	2303      	movs	r3, #3
 8105090:	e123      	b.n	81052da <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105092:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105094:	2b00      	cmp	r3, #0
 8105096:	f47f af55 	bne.w	8104f44 <HAL_SPI_TransmitReceive+0x234>
 810509a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810509c:	2b00      	cmp	r3, #0
 810509e:	f47f af51 	bne.w	8104f44 <HAL_SPI_TransmitReceive+0x234>
 81050a2:	e0f3      	b.n	810528c <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81050a4:	68fb      	ldr	r3, [r7, #12]
 81050a6:	681b      	ldr	r3, [r3, #0]
 81050a8:	695b      	ldr	r3, [r3, #20]
 81050aa:	f003 0302 	and.w	r3, r3, #2
 81050ae:	2b02      	cmp	r3, #2
 81050b0:	d15a      	bne.n	8105168 <HAL_SPI_TransmitReceive+0x458>
 81050b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81050b4:	2b00      	cmp	r3, #0
 81050b6:	d057      	beq.n	8105168 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81050b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81050ba:	2b03      	cmp	r3, #3
 81050bc:	d91c      	bls.n	81050f8 <HAL_SPI_TransmitReceive+0x3e8>
 81050be:	68fb      	ldr	r3, [r7, #12]
 81050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81050c2:	2b40      	cmp	r3, #64	; 0x40
 81050c4:	d918      	bls.n	81050f8 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81050c6:	68fb      	ldr	r3, [r7, #12]
 81050c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81050ca:	68fb      	ldr	r3, [r7, #12]
 81050cc:	681b      	ldr	r3, [r3, #0]
 81050ce:	6812      	ldr	r2, [r2, #0]
 81050d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81050d2:	68fb      	ldr	r3, [r7, #12]
 81050d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81050d6:	1d1a      	adds	r2, r3, #4
 81050d8:	68fb      	ldr	r3, [r7, #12]
 81050da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81050dc:	68fb      	ldr	r3, [r7, #12]
 81050de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81050e2:	b29b      	uxth	r3, r3
 81050e4:	3b04      	subs	r3, #4
 81050e6:	b29a      	uxth	r2, r3
 81050e8:	68fb      	ldr	r3, [r7, #12]
 81050ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81050ee:	68fb      	ldr	r3, [r7, #12]
 81050f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81050f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 81050f6:	e037      	b.n	8105168 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81050f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81050fa:	2b01      	cmp	r3, #1
 81050fc:	d91b      	bls.n	8105136 <HAL_SPI_TransmitReceive+0x426>
 81050fe:	68fb      	ldr	r3, [r7, #12]
 8105100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105102:	2b00      	cmp	r3, #0
 8105104:	d017      	beq.n	8105136 <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105106:	68fb      	ldr	r3, [r7, #12]
 8105108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810510a:	881a      	ldrh	r2, [r3, #0]
 810510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810510e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8105110:	68fb      	ldr	r3, [r7, #12]
 8105112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105114:	1c9a      	adds	r2, r3, #2
 8105116:	68fb      	ldr	r3, [r7, #12]
 8105118:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810511a:	68fb      	ldr	r3, [r7, #12]
 810511c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105120:	b29b      	uxth	r3, r3
 8105122:	3b02      	subs	r3, #2
 8105124:	b29a      	uxth	r2, r3
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810512c:	68fb      	ldr	r3, [r7, #12]
 810512e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105132:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105134:	e018      	b.n	8105168 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8105136:	68fb      	ldr	r3, [r7, #12]
 8105138:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810513a:	68fb      	ldr	r3, [r7, #12]
 810513c:	681b      	ldr	r3, [r3, #0]
 810513e:	3320      	adds	r3, #32
 8105140:	7812      	ldrb	r2, [r2, #0]
 8105142:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8105144:	68fb      	ldr	r3, [r7, #12]
 8105146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105148:	1c5a      	adds	r2, r3, #1
 810514a:	68fb      	ldr	r3, [r7, #12]
 810514c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810514e:	68fb      	ldr	r3, [r7, #12]
 8105150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105154:	b29b      	uxth	r3, r3
 8105156:	3b01      	subs	r3, #1
 8105158:	b29a      	uxth	r2, r3
 810515a:	68fb      	ldr	r3, [r7, #12]
 810515c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105160:	68fb      	ldr	r3, [r7, #12]
 8105162:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105166:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8105168:	68fb      	ldr	r3, [r7, #12]
 810516a:	681b      	ldr	r3, [r3, #0]
 810516c:	695b      	ldr	r3, [r3, #20]
 810516e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105172:	2b00      	cmp	r3, #0
 8105174:	d05e      	beq.n	8105234 <HAL_SPI_TransmitReceive+0x524>
 8105176:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105178:	2b00      	cmp	r3, #0
 810517a:	d05b      	beq.n	8105234 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810517c:	68fb      	ldr	r3, [r7, #12]
 810517e:	681b      	ldr	r3, [r3, #0]
 8105180:	695b      	ldr	r3, [r3, #20]
 8105182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105186:	2b00      	cmp	r3, #0
 8105188:	d018      	beq.n	81051bc <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810518a:	68fb      	ldr	r3, [r7, #12]
 810518c:	681a      	ldr	r2, [r3, #0]
 810518e:	68fb      	ldr	r3, [r7, #12]
 8105190:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105192:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105194:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810519a:	1d1a      	adds	r2, r3, #4
 810519c:	68fb      	ldr	r3, [r7, #12]
 810519e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 81051a0:	68fb      	ldr	r3, [r7, #12]
 81051a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81051a6:	b29b      	uxth	r3, r3
 81051a8:	3b04      	subs	r3, #4
 81051aa:	b29a      	uxth	r2, r3
 81051ac:	68fb      	ldr	r3, [r7, #12]
 81051ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81051b2:	68fb      	ldr	r3, [r7, #12]
 81051b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81051b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81051ba:	e03b      	b.n	8105234 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 81051bc:	68fb      	ldr	r3, [r7, #12]
 81051be:	681b      	ldr	r3, [r3, #0]
 81051c0:	695b      	ldr	r3, [r3, #20]
 81051c2:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 81051c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81051ca:	d918      	bls.n	81051fe <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81051cc:	68fb      	ldr	r3, [r7, #12]
 81051ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81051d0:	6a3a      	ldr	r2, [r7, #32]
 81051d2:	8812      	ldrh	r2, [r2, #0]
 81051d4:	b292      	uxth	r2, r2
 81051d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81051d8:	68fb      	ldr	r3, [r7, #12]
 81051da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81051dc:	1c9a      	adds	r2, r3, #2
 81051de:	68fb      	ldr	r3, [r7, #12]
 81051e0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81051e2:	68fb      	ldr	r3, [r7, #12]
 81051e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81051e8:	b29b      	uxth	r3, r3
 81051ea:	3b02      	subs	r3, #2
 81051ec:	b29a      	uxth	r2, r3
 81051ee:	68fb      	ldr	r3, [r7, #12]
 81051f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81051f4:	68fb      	ldr	r3, [r7, #12]
 81051f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81051fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81051fc:	e01a      	b.n	8105234 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81051fe:	68fb      	ldr	r3, [r7, #12]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8105206:	68fb      	ldr	r3, [r7, #12]
 8105208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810520a:	7812      	ldrb	r2, [r2, #0]
 810520c:	b2d2      	uxtb	r2, r2
 810520e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105210:	68fb      	ldr	r3, [r7, #12]
 8105212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105214:	1c5a      	adds	r2, r3, #1
 8105216:	68fb      	ldr	r3, [r7, #12]
 8105218:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810521a:	68fb      	ldr	r3, [r7, #12]
 810521c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105220:	b29b      	uxth	r3, r3
 8105222:	3b01      	subs	r3, #1
 8105224:	b29a      	uxth	r2, r3
 8105226:	68fb      	ldr	r3, [r7, #12]
 8105228:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810522c:	68fb      	ldr	r3, [r7, #12]
 810522e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105232:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105234:	f7fc ff7c 	bl	8102130 <HAL_GetTick>
 8105238:	4602      	mov	r2, r0
 810523a:	69fb      	ldr	r3, [r7, #28]
 810523c:	1ad3      	subs	r3, r2, r3
 810523e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105240:	429a      	cmp	r2, r3
 8105242:	d803      	bhi.n	810524c <HAL_SPI_TransmitReceive+0x53c>
 8105244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105246:	f1b3 3fff 	cmp.w	r3, #4294967295
 810524a:	d102      	bne.n	8105252 <HAL_SPI_TransmitReceive+0x542>
 810524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810524e:	2b00      	cmp	r3, #0
 8105250:	d114      	bne.n	810527c <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105252:	68f8      	ldr	r0, [r7, #12]
 8105254:	f000 f845 	bl	81052e2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105258:	68fb      	ldr	r3, [r7, #12]
 810525a:	2200      	movs	r2, #0
 810525c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105260:	68fb      	ldr	r3, [r7, #12]
 8105262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105266:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810526a:	68fb      	ldr	r3, [r7, #12]
 810526c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105270:	68fb      	ldr	r3, [r7, #12]
 8105272:	2201      	movs	r2, #1
 8105274:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105278:	2303      	movs	r3, #3
 810527a:	e02e      	b.n	81052da <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810527c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810527e:	2b00      	cmp	r3, #0
 8105280:	f47f af10 	bne.w	81050a4 <HAL_SPI_TransmitReceive+0x394>
 8105284:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105286:	2b00      	cmp	r3, #0
 8105288:	f47f af0c 	bne.w	81050a4 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810528e:	9300      	str	r3, [sp, #0]
 8105290:	69fb      	ldr	r3, [r7, #28]
 8105292:	2200      	movs	r2, #0
 8105294:	2108      	movs	r1, #8
 8105296:	68f8      	ldr	r0, [r7, #12]
 8105298:	f000 f8c3 	bl	8105422 <SPI_WaitOnFlagUntilTimeout>
 810529c:	4603      	mov	r3, r0
 810529e:	2b00      	cmp	r3, #0
 81052a0:	d007      	beq.n	81052b2 <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81052a2:	68fb      	ldr	r3, [r7, #12]
 81052a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81052a8:	f043 0220 	orr.w	r2, r3, #32
 81052ac:	68fb      	ldr	r3, [r7, #12]
 81052ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81052b2:	68f8      	ldr	r0, [r7, #12]
 81052b4:	f000 f815 	bl	81052e2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81052b8:	68fb      	ldr	r3, [r7, #12]
 81052ba:	2200      	movs	r2, #0
 81052bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81052c0:	68fb      	ldr	r3, [r7, #12]
 81052c2:	2201      	movs	r2, #1
 81052c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81052c8:	68fb      	ldr	r3, [r7, #12]
 81052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81052ce:	2b00      	cmp	r3, #0
 81052d0:	d001      	beq.n	81052d6 <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 81052d2:	2301      	movs	r3, #1
 81052d4:	e001      	b.n	81052da <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 81052d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 81052da:	4618      	mov	r0, r3
 81052dc:	3730      	adds	r7, #48	; 0x30
 81052de:	46bd      	mov	sp, r7
 81052e0:	bd80      	pop	{r7, pc}

081052e2 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81052e2:	b480      	push	{r7}
 81052e4:	b085      	sub	sp, #20
 81052e6:	af00      	add	r7, sp, #0
 81052e8:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	695b      	ldr	r3, [r3, #20]
 81052f0:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81052f2:	687b      	ldr	r3, [r7, #4]
 81052f4:	681b      	ldr	r3, [r3, #0]
 81052f6:	699a      	ldr	r2, [r3, #24]
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	f042 0208 	orr.w	r2, r2, #8
 8105300:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	681b      	ldr	r3, [r3, #0]
 8105306:	699a      	ldr	r2, [r3, #24]
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	681b      	ldr	r3, [r3, #0]
 810530c:	f042 0210 	orr.w	r2, r2, #16
 8105310:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	681b      	ldr	r3, [r3, #0]
 8105316:	681a      	ldr	r2, [r3, #0]
 8105318:	687b      	ldr	r3, [r7, #4]
 810531a:	681b      	ldr	r3, [r3, #0]
 810531c:	f022 0201 	bic.w	r2, r2, #1
 8105320:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8105322:	687b      	ldr	r3, [r7, #4]
 8105324:	681b      	ldr	r3, [r3, #0]
 8105326:	691b      	ldr	r3, [r3, #16]
 8105328:	687a      	ldr	r2, [r7, #4]
 810532a:	6812      	ldr	r2, [r2, #0]
 810532c:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8105330:	f023 0303 	bic.w	r3, r3, #3
 8105334:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	681b      	ldr	r3, [r3, #0]
 810533a:	689a      	ldr	r2, [r3, #8]
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8105344:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810534c:	b2db      	uxtb	r3, r3
 810534e:	2b04      	cmp	r3, #4
 8105350:	d014      	beq.n	810537c <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8105352:	68fb      	ldr	r3, [r7, #12]
 8105354:	f003 0320 	and.w	r3, r3, #32
 8105358:	2b00      	cmp	r3, #0
 810535a:	d00f      	beq.n	810537c <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810535c:	687b      	ldr	r3, [r7, #4]
 810535e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105362:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	681b      	ldr	r3, [r3, #0]
 8105370:	699a      	ldr	r2, [r3, #24]
 8105372:	687b      	ldr	r3, [r7, #4]
 8105374:	681b      	ldr	r3, [r3, #0]
 8105376:	f042 0220 	orr.w	r2, r2, #32
 810537a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810537c:	687b      	ldr	r3, [r7, #4]
 810537e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105382:	b2db      	uxtb	r3, r3
 8105384:	2b03      	cmp	r3, #3
 8105386:	d014      	beq.n	81053b2 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8105388:	68fb      	ldr	r3, [r7, #12]
 810538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810538e:	2b00      	cmp	r3, #0
 8105390:	d00f      	beq.n	81053b2 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105398:	f043 0204 	orr.w	r2, r3, #4
 810539c:	687b      	ldr	r3, [r7, #4]
 810539e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	681b      	ldr	r3, [r3, #0]
 81053a6:	699a      	ldr	r2, [r3, #24]
 81053a8:	687b      	ldr	r3, [r7, #4]
 81053aa:	681b      	ldr	r3, [r3, #0]
 81053ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81053b0:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81053b2:	68fb      	ldr	r3, [r7, #12]
 81053b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81053b8:	2b00      	cmp	r3, #0
 81053ba:	d00f      	beq.n	81053dc <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81053c2:	f043 0201 	orr.w	r2, r3, #1
 81053c6:	687b      	ldr	r3, [r7, #4]
 81053c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81053cc:	687b      	ldr	r3, [r7, #4]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	699a      	ldr	r2, [r3, #24]
 81053d2:	687b      	ldr	r3, [r7, #4]
 81053d4:	681b      	ldr	r3, [r3, #0]
 81053d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81053da:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81053dc:	68fb      	ldr	r3, [r7, #12]
 81053de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81053e2:	2b00      	cmp	r3, #0
 81053e4:	d00f      	beq.n	8105406 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81053e6:	687b      	ldr	r3, [r7, #4]
 81053e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81053ec:	f043 0208 	orr.w	r2, r3, #8
 81053f0:	687b      	ldr	r3, [r7, #4]
 81053f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81053f6:	687b      	ldr	r3, [r7, #4]
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	699a      	ldr	r2, [r3, #24]
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105404:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	2200      	movs	r2, #0
 810540a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810540e:	687b      	ldr	r3, [r7, #4]
 8105410:	2200      	movs	r2, #0
 8105412:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8105416:	bf00      	nop
 8105418:	3714      	adds	r7, #20
 810541a:	46bd      	mov	sp, r7
 810541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105420:	4770      	bx	lr

08105422 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8105422:	b580      	push	{r7, lr}
 8105424:	b084      	sub	sp, #16
 8105426:	af00      	add	r7, sp, #0
 8105428:	60f8      	str	r0, [r7, #12]
 810542a:	60b9      	str	r1, [r7, #8]
 810542c:	603b      	str	r3, [r7, #0]
 810542e:	4613      	mov	r3, r2
 8105430:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8105432:	e010      	b.n	8105456 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105434:	f7fc fe7c 	bl	8102130 <HAL_GetTick>
 8105438:	4602      	mov	r2, r0
 810543a:	683b      	ldr	r3, [r7, #0]
 810543c:	1ad3      	subs	r3, r2, r3
 810543e:	69ba      	ldr	r2, [r7, #24]
 8105440:	429a      	cmp	r2, r3
 8105442:	d803      	bhi.n	810544c <SPI_WaitOnFlagUntilTimeout+0x2a>
 8105444:	69bb      	ldr	r3, [r7, #24]
 8105446:	f1b3 3fff 	cmp.w	r3, #4294967295
 810544a:	d102      	bne.n	8105452 <SPI_WaitOnFlagUntilTimeout+0x30>
 810544c:	69bb      	ldr	r3, [r7, #24]
 810544e:	2b00      	cmp	r3, #0
 8105450:	d101      	bne.n	8105456 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8105452:	2303      	movs	r3, #3
 8105454:	e00f      	b.n	8105476 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8105456:	68fb      	ldr	r3, [r7, #12]
 8105458:	681b      	ldr	r3, [r3, #0]
 810545a:	695a      	ldr	r2, [r3, #20]
 810545c:	68bb      	ldr	r3, [r7, #8]
 810545e:	4013      	ands	r3, r2
 8105460:	68ba      	ldr	r2, [r7, #8]
 8105462:	429a      	cmp	r2, r3
 8105464:	bf0c      	ite	eq
 8105466:	2301      	moveq	r3, #1
 8105468:	2300      	movne	r3, #0
 810546a:	b2db      	uxtb	r3, r3
 810546c:	461a      	mov	r2, r3
 810546e:	79fb      	ldrb	r3, [r7, #7]
 8105470:	429a      	cmp	r2, r3
 8105472:	d0df      	beq.n	8105434 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8105474:	2300      	movs	r3, #0
}
 8105476:	4618      	mov	r0, r3
 8105478:	3710      	adds	r7, #16
 810547a:	46bd      	mov	sp, r7
 810547c:	bd80      	pop	{r7, pc}

0810547e <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810547e:	b480      	push	{r7}
 8105480:	b085      	sub	sp, #20
 8105482:	af00      	add	r7, sp, #0
 8105484:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8105486:	687b      	ldr	r3, [r7, #4]
 8105488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810548a:	095b      	lsrs	r3, r3, #5
 810548c:	3301      	adds	r3, #1
 810548e:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8105490:	687b      	ldr	r3, [r7, #4]
 8105492:	68db      	ldr	r3, [r3, #12]
 8105494:	3301      	adds	r3, #1
 8105496:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8105498:	68bb      	ldr	r3, [r7, #8]
 810549a:	3307      	adds	r3, #7
 810549c:	08db      	lsrs	r3, r3, #3
 810549e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81054a0:	68bb      	ldr	r3, [r7, #8]
 81054a2:	68fa      	ldr	r2, [r7, #12]
 81054a4:	fb02 f303 	mul.w	r3, r2, r3
}
 81054a8:	4618      	mov	r0, r3
 81054aa:	3714      	adds	r7, #20
 81054ac:	46bd      	mov	sp, r7
 81054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054b2:	4770      	bx	lr

081054b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81054b4:	b580      	push	{r7, lr}
 81054b6:	b082      	sub	sp, #8
 81054b8:	af00      	add	r7, sp, #0
 81054ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81054bc:	687b      	ldr	r3, [r7, #4]
 81054be:	2b00      	cmp	r3, #0
 81054c0:	d101      	bne.n	81054c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81054c2:	2301      	movs	r3, #1
 81054c4:	e042      	b.n	810554c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81054cc:	2b00      	cmp	r3, #0
 81054ce:	d106      	bne.n	81054de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	2200      	movs	r2, #0
 81054d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81054d8:	6878      	ldr	r0, [r7, #4]
 81054da:	f7fc fbf5 	bl	8101cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	2224      	movs	r2, #36	; 0x24
 81054e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	681a      	ldr	r2, [r3, #0]
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	681b      	ldr	r3, [r3, #0]
 81054f0:	f022 0201 	bic.w	r2, r2, #1
 81054f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81054f6:	6878      	ldr	r0, [r7, #4]
 81054f8:	f000 f996 	bl	8105828 <UART_SetConfig>
 81054fc:	4603      	mov	r3, r0
 81054fe:	2b01      	cmp	r3, #1
 8105500:	d101      	bne.n	8105506 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8105502:	2301      	movs	r3, #1
 8105504:	e022      	b.n	810554c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810550a:	2b00      	cmp	r3, #0
 810550c:	d002      	beq.n	8105514 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810550e:	6878      	ldr	r0, [r7, #4]
 8105510:	f000 feea 	bl	81062e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	681b      	ldr	r3, [r3, #0]
 8105518:	685a      	ldr	r2, [r3, #4]
 810551a:	687b      	ldr	r3, [r7, #4]
 810551c:	681b      	ldr	r3, [r3, #0]
 810551e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8105522:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8105524:	687b      	ldr	r3, [r7, #4]
 8105526:	681b      	ldr	r3, [r3, #0]
 8105528:	689a      	ldr	r2, [r3, #8]
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8105532:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	681a      	ldr	r2, [r3, #0]
 810553a:	687b      	ldr	r3, [r7, #4]
 810553c:	681b      	ldr	r3, [r3, #0]
 810553e:	f042 0201 	orr.w	r2, r2, #1
 8105542:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8105544:	6878      	ldr	r0, [r7, #4]
 8105546:	f000 ff71 	bl	810642c <UART_CheckIdleState>
 810554a:	4603      	mov	r3, r0
}
 810554c:	4618      	mov	r0, r3
 810554e:	3708      	adds	r7, #8
 8105550:	46bd      	mov	sp, r7
 8105552:	bd80      	pop	{r7, pc}

08105554 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105554:	b580      	push	{r7, lr}
 8105556:	b08a      	sub	sp, #40	; 0x28
 8105558:	af02      	add	r7, sp, #8
 810555a:	60f8      	str	r0, [r7, #12]
 810555c:	60b9      	str	r1, [r7, #8]
 810555e:	603b      	str	r3, [r7, #0]
 8105560:	4613      	mov	r3, r2
 8105562:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810556a:	2b20      	cmp	r3, #32
 810556c:	f040 8083 	bne.w	8105676 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8105570:	68bb      	ldr	r3, [r7, #8]
 8105572:	2b00      	cmp	r3, #0
 8105574:	d002      	beq.n	810557c <HAL_UART_Transmit+0x28>
 8105576:	88fb      	ldrh	r3, [r7, #6]
 8105578:	2b00      	cmp	r3, #0
 810557a:	d101      	bne.n	8105580 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 810557c:	2301      	movs	r3, #1
 810557e:	e07b      	b.n	8105678 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8105580:	68fb      	ldr	r3, [r7, #12]
 8105582:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105586:	2b01      	cmp	r3, #1
 8105588:	d101      	bne.n	810558e <HAL_UART_Transmit+0x3a>
 810558a:	2302      	movs	r3, #2
 810558c:	e074      	b.n	8105678 <HAL_UART_Transmit+0x124>
 810558e:	68fb      	ldr	r3, [r7, #12]
 8105590:	2201      	movs	r2, #1
 8105592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105596:	68fb      	ldr	r3, [r7, #12]
 8105598:	2200      	movs	r2, #0
 810559a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810559e:	68fb      	ldr	r3, [r7, #12]
 81055a0:	2221      	movs	r2, #33	; 0x21
 81055a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81055a6:	f7fc fdc3 	bl	8102130 <HAL_GetTick>
 81055aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81055ac:	68fb      	ldr	r3, [r7, #12]
 81055ae:	88fa      	ldrh	r2, [r7, #6]
 81055b0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81055b4:	68fb      	ldr	r3, [r7, #12]
 81055b6:	88fa      	ldrh	r2, [r7, #6]
 81055b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	689b      	ldr	r3, [r3, #8]
 81055c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81055c4:	d108      	bne.n	81055d8 <HAL_UART_Transmit+0x84>
 81055c6:	68fb      	ldr	r3, [r7, #12]
 81055c8:	691b      	ldr	r3, [r3, #16]
 81055ca:	2b00      	cmp	r3, #0
 81055cc:	d104      	bne.n	81055d8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81055ce:	2300      	movs	r3, #0
 81055d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81055d2:	68bb      	ldr	r3, [r7, #8]
 81055d4:	61bb      	str	r3, [r7, #24]
 81055d6:	e003      	b.n	81055e0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81055d8:	68bb      	ldr	r3, [r7, #8]
 81055da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81055dc:	2300      	movs	r3, #0
 81055de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81055e0:	68fb      	ldr	r3, [r7, #12]
 81055e2:	2200      	movs	r2, #0
 81055e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81055e8:	e02c      	b.n	8105644 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81055ea:	683b      	ldr	r3, [r7, #0]
 81055ec:	9300      	str	r3, [sp, #0]
 81055ee:	697b      	ldr	r3, [r7, #20]
 81055f0:	2200      	movs	r2, #0
 81055f2:	2180      	movs	r1, #128	; 0x80
 81055f4:	68f8      	ldr	r0, [r7, #12]
 81055f6:	f000 ff64 	bl	81064c2 <UART_WaitOnFlagUntilTimeout>
 81055fa:	4603      	mov	r3, r0
 81055fc:	2b00      	cmp	r3, #0
 81055fe:	d001      	beq.n	8105604 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8105600:	2303      	movs	r3, #3
 8105602:	e039      	b.n	8105678 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8105604:	69fb      	ldr	r3, [r7, #28]
 8105606:	2b00      	cmp	r3, #0
 8105608:	d10b      	bne.n	8105622 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810560a:	69bb      	ldr	r3, [r7, #24]
 810560c:	881b      	ldrh	r3, [r3, #0]
 810560e:	461a      	mov	r2, r3
 8105610:	68fb      	ldr	r3, [r7, #12]
 8105612:	681b      	ldr	r3, [r3, #0]
 8105614:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105618:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810561a:	69bb      	ldr	r3, [r7, #24]
 810561c:	3302      	adds	r3, #2
 810561e:	61bb      	str	r3, [r7, #24]
 8105620:	e007      	b.n	8105632 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8105622:	69fb      	ldr	r3, [r7, #28]
 8105624:	781a      	ldrb	r2, [r3, #0]
 8105626:	68fb      	ldr	r3, [r7, #12]
 8105628:	681b      	ldr	r3, [r3, #0]
 810562a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 810562c:	69fb      	ldr	r3, [r7, #28]
 810562e:	3301      	adds	r3, #1
 8105630:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8105632:	68fb      	ldr	r3, [r7, #12]
 8105634:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105638:	b29b      	uxth	r3, r3
 810563a:	3b01      	subs	r3, #1
 810563c:	b29a      	uxth	r2, r3
 810563e:	68fb      	ldr	r3, [r7, #12]
 8105640:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8105644:	68fb      	ldr	r3, [r7, #12]
 8105646:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 810564a:	b29b      	uxth	r3, r3
 810564c:	2b00      	cmp	r3, #0
 810564e:	d1cc      	bne.n	81055ea <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8105650:	683b      	ldr	r3, [r7, #0]
 8105652:	9300      	str	r3, [sp, #0]
 8105654:	697b      	ldr	r3, [r7, #20]
 8105656:	2200      	movs	r2, #0
 8105658:	2140      	movs	r1, #64	; 0x40
 810565a:	68f8      	ldr	r0, [r7, #12]
 810565c:	f000 ff31 	bl	81064c2 <UART_WaitOnFlagUntilTimeout>
 8105660:	4603      	mov	r3, r0
 8105662:	2b00      	cmp	r3, #0
 8105664:	d001      	beq.n	810566a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8105666:	2303      	movs	r3, #3
 8105668:	e006      	b.n	8105678 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810566a:	68fb      	ldr	r3, [r7, #12]
 810566c:	2220      	movs	r2, #32
 810566e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8105672:	2300      	movs	r3, #0
 8105674:	e000      	b.n	8105678 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8105676:	2302      	movs	r3, #2
  }
}
 8105678:	4618      	mov	r0, r3
 810567a:	3720      	adds	r7, #32
 810567c:	46bd      	mov	sp, r7
 810567e:	bd80      	pop	{r7, pc}

08105680 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105680:	b580      	push	{r7, lr}
 8105682:	b08a      	sub	sp, #40	; 0x28
 8105684:	af02      	add	r7, sp, #8
 8105686:	60f8      	str	r0, [r7, #12]
 8105688:	60b9      	str	r1, [r7, #8]
 810568a:	603b      	str	r3, [r7, #0]
 810568c:	4613      	mov	r3, r2
 810568e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8105690:	68fb      	ldr	r3, [r7, #12]
 8105692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105696:	2b20      	cmp	r3, #32
 8105698:	f040 80c0 	bne.w	810581c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 810569c:	68bb      	ldr	r3, [r7, #8]
 810569e:	2b00      	cmp	r3, #0
 81056a0:	d002      	beq.n	81056a8 <HAL_UART_Receive+0x28>
 81056a2:	88fb      	ldrh	r3, [r7, #6]
 81056a4:	2b00      	cmp	r3, #0
 81056a6:	d101      	bne.n	81056ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 81056a8:	2301      	movs	r3, #1
 81056aa:	e0b8      	b.n	810581e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 81056ac:	68fb      	ldr	r3, [r7, #12]
 81056ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81056b2:	2b01      	cmp	r3, #1
 81056b4:	d101      	bne.n	81056ba <HAL_UART_Receive+0x3a>
 81056b6:	2302      	movs	r3, #2
 81056b8:	e0b1      	b.n	810581e <HAL_UART_Receive+0x19e>
 81056ba:	68fb      	ldr	r3, [r7, #12]
 81056bc:	2201      	movs	r2, #1
 81056be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81056c2:	68fb      	ldr	r3, [r7, #12]
 81056c4:	2200      	movs	r2, #0
 81056c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 81056ca:	68fb      	ldr	r3, [r7, #12]
 81056cc:	2222      	movs	r2, #34	; 0x22
 81056ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81056d2:	68fb      	ldr	r3, [r7, #12]
 81056d4:	2200      	movs	r2, #0
 81056d6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81056d8:	f7fc fd2a 	bl	8102130 <HAL_GetTick>
 81056dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 81056de:	68fb      	ldr	r3, [r7, #12]
 81056e0:	88fa      	ldrh	r2, [r7, #6]
 81056e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 81056e6:	68fb      	ldr	r3, [r7, #12]
 81056e8:	88fa      	ldrh	r2, [r7, #6]
 81056ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 81056ee:	68fb      	ldr	r3, [r7, #12]
 81056f0:	689b      	ldr	r3, [r3, #8]
 81056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81056f6:	d10e      	bne.n	8105716 <HAL_UART_Receive+0x96>
 81056f8:	68fb      	ldr	r3, [r7, #12]
 81056fa:	691b      	ldr	r3, [r3, #16]
 81056fc:	2b00      	cmp	r3, #0
 81056fe:	d105      	bne.n	810570c <HAL_UART_Receive+0x8c>
 8105700:	68fb      	ldr	r3, [r7, #12]
 8105702:	f240 12ff 	movw	r2, #511	; 0x1ff
 8105706:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810570a:	e02d      	b.n	8105768 <HAL_UART_Receive+0xe8>
 810570c:	68fb      	ldr	r3, [r7, #12]
 810570e:	22ff      	movs	r2, #255	; 0xff
 8105710:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105714:	e028      	b.n	8105768 <HAL_UART_Receive+0xe8>
 8105716:	68fb      	ldr	r3, [r7, #12]
 8105718:	689b      	ldr	r3, [r3, #8]
 810571a:	2b00      	cmp	r3, #0
 810571c:	d10d      	bne.n	810573a <HAL_UART_Receive+0xba>
 810571e:	68fb      	ldr	r3, [r7, #12]
 8105720:	691b      	ldr	r3, [r3, #16]
 8105722:	2b00      	cmp	r3, #0
 8105724:	d104      	bne.n	8105730 <HAL_UART_Receive+0xb0>
 8105726:	68fb      	ldr	r3, [r7, #12]
 8105728:	22ff      	movs	r2, #255	; 0xff
 810572a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810572e:	e01b      	b.n	8105768 <HAL_UART_Receive+0xe8>
 8105730:	68fb      	ldr	r3, [r7, #12]
 8105732:	227f      	movs	r2, #127	; 0x7f
 8105734:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105738:	e016      	b.n	8105768 <HAL_UART_Receive+0xe8>
 810573a:	68fb      	ldr	r3, [r7, #12]
 810573c:	689b      	ldr	r3, [r3, #8]
 810573e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105742:	d10d      	bne.n	8105760 <HAL_UART_Receive+0xe0>
 8105744:	68fb      	ldr	r3, [r7, #12]
 8105746:	691b      	ldr	r3, [r3, #16]
 8105748:	2b00      	cmp	r3, #0
 810574a:	d104      	bne.n	8105756 <HAL_UART_Receive+0xd6>
 810574c:	68fb      	ldr	r3, [r7, #12]
 810574e:	227f      	movs	r2, #127	; 0x7f
 8105750:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105754:	e008      	b.n	8105768 <HAL_UART_Receive+0xe8>
 8105756:	68fb      	ldr	r3, [r7, #12]
 8105758:	223f      	movs	r2, #63	; 0x3f
 810575a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810575e:	e003      	b.n	8105768 <HAL_UART_Receive+0xe8>
 8105760:	68fb      	ldr	r3, [r7, #12]
 8105762:	2200      	movs	r2, #0
 8105764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8105768:	68fb      	ldr	r3, [r7, #12]
 810576a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 810576e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105770:	68fb      	ldr	r3, [r7, #12]
 8105772:	689b      	ldr	r3, [r3, #8]
 8105774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105778:	d108      	bne.n	810578c <HAL_UART_Receive+0x10c>
 810577a:	68fb      	ldr	r3, [r7, #12]
 810577c:	691b      	ldr	r3, [r3, #16]
 810577e:	2b00      	cmp	r3, #0
 8105780:	d104      	bne.n	810578c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8105782:	2300      	movs	r3, #0
 8105784:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8105786:	68bb      	ldr	r3, [r7, #8]
 8105788:	61bb      	str	r3, [r7, #24]
 810578a:	e003      	b.n	8105794 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 810578c:	68bb      	ldr	r3, [r7, #8]
 810578e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105790:	2300      	movs	r3, #0
 8105792:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	2200      	movs	r2, #0
 8105798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810579c:	e032      	b.n	8105804 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810579e:	683b      	ldr	r3, [r7, #0]
 81057a0:	9300      	str	r3, [sp, #0]
 81057a2:	697b      	ldr	r3, [r7, #20]
 81057a4:	2200      	movs	r2, #0
 81057a6:	2120      	movs	r1, #32
 81057a8:	68f8      	ldr	r0, [r7, #12]
 81057aa:	f000 fe8a 	bl	81064c2 <UART_WaitOnFlagUntilTimeout>
 81057ae:	4603      	mov	r3, r0
 81057b0:	2b00      	cmp	r3, #0
 81057b2:	d001      	beq.n	81057b8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 81057b4:	2303      	movs	r3, #3
 81057b6:	e032      	b.n	810581e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 81057b8:	69fb      	ldr	r3, [r7, #28]
 81057ba:	2b00      	cmp	r3, #0
 81057bc:	d10c      	bne.n	81057d8 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 81057be:	68fb      	ldr	r3, [r7, #12]
 81057c0:	681b      	ldr	r3, [r3, #0]
 81057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81057c4:	b29a      	uxth	r2, r3
 81057c6:	8a7b      	ldrh	r3, [r7, #18]
 81057c8:	4013      	ands	r3, r2
 81057ca:	b29a      	uxth	r2, r3
 81057cc:	69bb      	ldr	r3, [r7, #24]
 81057ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 81057d0:	69bb      	ldr	r3, [r7, #24]
 81057d2:	3302      	adds	r3, #2
 81057d4:	61bb      	str	r3, [r7, #24]
 81057d6:	e00c      	b.n	81057f2 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 81057d8:	68fb      	ldr	r3, [r7, #12]
 81057da:	681b      	ldr	r3, [r3, #0]
 81057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81057de:	b2da      	uxtb	r2, r3
 81057e0:	8a7b      	ldrh	r3, [r7, #18]
 81057e2:	b2db      	uxtb	r3, r3
 81057e4:	4013      	ands	r3, r2
 81057e6:	b2da      	uxtb	r2, r3
 81057e8:	69fb      	ldr	r3, [r7, #28]
 81057ea:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 81057ec:	69fb      	ldr	r3, [r7, #28]
 81057ee:	3301      	adds	r3, #1
 81057f0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 81057f2:	68fb      	ldr	r3, [r7, #12]
 81057f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81057f8:	b29b      	uxth	r3, r3
 81057fa:	3b01      	subs	r3, #1
 81057fc:	b29a      	uxth	r2, r3
 81057fe:	68fb      	ldr	r3, [r7, #12]
 8105800:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8105804:	68fb      	ldr	r3, [r7, #12]
 8105806:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810580a:	b29b      	uxth	r3, r3
 810580c:	2b00      	cmp	r3, #0
 810580e:	d1c6      	bne.n	810579e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8105810:	68fb      	ldr	r3, [r7, #12]
 8105812:	2220      	movs	r2, #32
 8105814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8105818:	2300      	movs	r3, #0
 810581a:	e000      	b.n	810581e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 810581c:	2302      	movs	r3, #2
  }
}
 810581e:	4618      	mov	r0, r3
 8105820:	3720      	adds	r7, #32
 8105822:	46bd      	mov	sp, r7
 8105824:	bd80      	pop	{r7, pc}
	...

08105828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8105828:	b5b0      	push	{r4, r5, r7, lr}
 810582a:	b08e      	sub	sp, #56	; 0x38
 810582c:	af00      	add	r7, sp, #0
 810582e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8105830:	2300      	movs	r3, #0
 8105832:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8105836:	687b      	ldr	r3, [r7, #4]
 8105838:	689a      	ldr	r2, [r3, #8]
 810583a:	687b      	ldr	r3, [r7, #4]
 810583c:	691b      	ldr	r3, [r3, #16]
 810583e:	431a      	orrs	r2, r3
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	695b      	ldr	r3, [r3, #20]
 8105844:	431a      	orrs	r2, r3
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	69db      	ldr	r3, [r3, #28]
 810584a:	4313      	orrs	r3, r2
 810584c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810584e:	687b      	ldr	r3, [r7, #4]
 8105850:	681b      	ldr	r3, [r3, #0]
 8105852:	681a      	ldr	r2, [r3, #0]
 8105854:	4bc0      	ldr	r3, [pc, #768]	; (8105b58 <UART_SetConfig+0x330>)
 8105856:	4013      	ands	r3, r2
 8105858:	687a      	ldr	r2, [r7, #4]
 810585a:	6812      	ldr	r2, [r2, #0]
 810585c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810585e:	430b      	orrs	r3, r1
 8105860:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	681b      	ldr	r3, [r3, #0]
 8105866:	685b      	ldr	r3, [r3, #4]
 8105868:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810586c:	687b      	ldr	r3, [r7, #4]
 810586e:	68da      	ldr	r2, [r3, #12]
 8105870:	687b      	ldr	r3, [r7, #4]
 8105872:	681b      	ldr	r3, [r3, #0]
 8105874:	430a      	orrs	r2, r1
 8105876:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105878:	687b      	ldr	r3, [r7, #4]
 810587a:	699b      	ldr	r3, [r3, #24]
 810587c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	681b      	ldr	r3, [r3, #0]
 8105882:	4ab6      	ldr	r2, [pc, #728]	; (8105b5c <UART_SetConfig+0x334>)
 8105884:	4293      	cmp	r3, r2
 8105886:	d004      	beq.n	8105892 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105888:	687b      	ldr	r3, [r7, #4]
 810588a:	6a1b      	ldr	r3, [r3, #32]
 810588c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810588e:	4313      	orrs	r3, r2
 8105890:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	689b      	ldr	r3, [r3, #8]
 8105898:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810589c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81058a0:	687a      	ldr	r2, [r7, #4]
 81058a2:	6812      	ldr	r2, [r2, #0]
 81058a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81058a6:	430b      	orrs	r3, r1
 81058a8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81058aa:	687b      	ldr	r3, [r7, #4]
 81058ac:	681b      	ldr	r3, [r3, #0]
 81058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81058b0:	f023 010f 	bic.w	r1, r3, #15
 81058b4:	687b      	ldr	r3, [r7, #4]
 81058b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	430a      	orrs	r2, r1
 81058be:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81058c0:	687b      	ldr	r3, [r7, #4]
 81058c2:	681b      	ldr	r3, [r3, #0]
 81058c4:	4aa6      	ldr	r2, [pc, #664]	; (8105b60 <UART_SetConfig+0x338>)
 81058c6:	4293      	cmp	r3, r2
 81058c8:	d176      	bne.n	81059b8 <UART_SetConfig+0x190>
 81058ca:	4ba6      	ldr	r3, [pc, #664]	; (8105b64 <UART_SetConfig+0x33c>)
 81058cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81058ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81058d2:	2b28      	cmp	r3, #40	; 0x28
 81058d4:	d86c      	bhi.n	81059b0 <UART_SetConfig+0x188>
 81058d6:	a201      	add	r2, pc, #4	; (adr r2, 81058dc <UART_SetConfig+0xb4>)
 81058d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81058dc:	08105981 	.word	0x08105981
 81058e0:	081059b1 	.word	0x081059b1
 81058e4:	081059b1 	.word	0x081059b1
 81058e8:	081059b1 	.word	0x081059b1
 81058ec:	081059b1 	.word	0x081059b1
 81058f0:	081059b1 	.word	0x081059b1
 81058f4:	081059b1 	.word	0x081059b1
 81058f8:	081059b1 	.word	0x081059b1
 81058fc:	08105989 	.word	0x08105989
 8105900:	081059b1 	.word	0x081059b1
 8105904:	081059b1 	.word	0x081059b1
 8105908:	081059b1 	.word	0x081059b1
 810590c:	081059b1 	.word	0x081059b1
 8105910:	081059b1 	.word	0x081059b1
 8105914:	081059b1 	.word	0x081059b1
 8105918:	081059b1 	.word	0x081059b1
 810591c:	08105991 	.word	0x08105991
 8105920:	081059b1 	.word	0x081059b1
 8105924:	081059b1 	.word	0x081059b1
 8105928:	081059b1 	.word	0x081059b1
 810592c:	081059b1 	.word	0x081059b1
 8105930:	081059b1 	.word	0x081059b1
 8105934:	081059b1 	.word	0x081059b1
 8105938:	081059b1 	.word	0x081059b1
 810593c:	08105999 	.word	0x08105999
 8105940:	081059b1 	.word	0x081059b1
 8105944:	081059b1 	.word	0x081059b1
 8105948:	081059b1 	.word	0x081059b1
 810594c:	081059b1 	.word	0x081059b1
 8105950:	081059b1 	.word	0x081059b1
 8105954:	081059b1 	.word	0x081059b1
 8105958:	081059b1 	.word	0x081059b1
 810595c:	081059a1 	.word	0x081059a1
 8105960:	081059b1 	.word	0x081059b1
 8105964:	081059b1 	.word	0x081059b1
 8105968:	081059b1 	.word	0x081059b1
 810596c:	081059b1 	.word	0x081059b1
 8105970:	081059b1 	.word	0x081059b1
 8105974:	081059b1 	.word	0x081059b1
 8105978:	081059b1 	.word	0x081059b1
 810597c:	081059a9 	.word	0x081059a9
 8105980:	2301      	movs	r3, #1
 8105982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105986:	e220      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105988:	2304      	movs	r3, #4
 810598a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810598e:	e21c      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105990:	2308      	movs	r3, #8
 8105992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105996:	e218      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105998:	2310      	movs	r3, #16
 810599a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810599e:	e214      	b.n	8105dca <UART_SetConfig+0x5a2>
 81059a0:	2320      	movs	r3, #32
 81059a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059a6:	e210      	b.n	8105dca <UART_SetConfig+0x5a2>
 81059a8:	2340      	movs	r3, #64	; 0x40
 81059aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059ae:	e20c      	b.n	8105dca <UART_SetConfig+0x5a2>
 81059b0:	2380      	movs	r3, #128	; 0x80
 81059b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059b6:	e208      	b.n	8105dca <UART_SetConfig+0x5a2>
 81059b8:	687b      	ldr	r3, [r7, #4]
 81059ba:	681b      	ldr	r3, [r3, #0]
 81059bc:	4a6a      	ldr	r2, [pc, #424]	; (8105b68 <UART_SetConfig+0x340>)
 81059be:	4293      	cmp	r3, r2
 81059c0:	d130      	bne.n	8105a24 <UART_SetConfig+0x1fc>
 81059c2:	4b68      	ldr	r3, [pc, #416]	; (8105b64 <UART_SetConfig+0x33c>)
 81059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81059c6:	f003 0307 	and.w	r3, r3, #7
 81059ca:	2b05      	cmp	r3, #5
 81059cc:	d826      	bhi.n	8105a1c <UART_SetConfig+0x1f4>
 81059ce:	a201      	add	r2, pc, #4	; (adr r2, 81059d4 <UART_SetConfig+0x1ac>)
 81059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059d4:	081059ed 	.word	0x081059ed
 81059d8:	081059f5 	.word	0x081059f5
 81059dc:	081059fd 	.word	0x081059fd
 81059e0:	08105a05 	.word	0x08105a05
 81059e4:	08105a0d 	.word	0x08105a0d
 81059e8:	08105a15 	.word	0x08105a15
 81059ec:	2300      	movs	r3, #0
 81059ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059f2:	e1ea      	b.n	8105dca <UART_SetConfig+0x5a2>
 81059f4:	2304      	movs	r3, #4
 81059f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059fa:	e1e6      	b.n	8105dca <UART_SetConfig+0x5a2>
 81059fc:	2308      	movs	r3, #8
 81059fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a02:	e1e2      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a04:	2310      	movs	r3, #16
 8105a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a0a:	e1de      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a0c:	2320      	movs	r3, #32
 8105a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a12:	e1da      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a14:	2340      	movs	r3, #64	; 0x40
 8105a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a1a:	e1d6      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a1c:	2380      	movs	r3, #128	; 0x80
 8105a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a22:	e1d2      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a24:	687b      	ldr	r3, [r7, #4]
 8105a26:	681b      	ldr	r3, [r3, #0]
 8105a28:	4a50      	ldr	r2, [pc, #320]	; (8105b6c <UART_SetConfig+0x344>)
 8105a2a:	4293      	cmp	r3, r2
 8105a2c:	d130      	bne.n	8105a90 <UART_SetConfig+0x268>
 8105a2e:	4b4d      	ldr	r3, [pc, #308]	; (8105b64 <UART_SetConfig+0x33c>)
 8105a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a32:	f003 0307 	and.w	r3, r3, #7
 8105a36:	2b05      	cmp	r3, #5
 8105a38:	d826      	bhi.n	8105a88 <UART_SetConfig+0x260>
 8105a3a:	a201      	add	r2, pc, #4	; (adr r2, 8105a40 <UART_SetConfig+0x218>)
 8105a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a40:	08105a59 	.word	0x08105a59
 8105a44:	08105a61 	.word	0x08105a61
 8105a48:	08105a69 	.word	0x08105a69
 8105a4c:	08105a71 	.word	0x08105a71
 8105a50:	08105a79 	.word	0x08105a79
 8105a54:	08105a81 	.word	0x08105a81
 8105a58:	2300      	movs	r3, #0
 8105a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a5e:	e1b4      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a60:	2304      	movs	r3, #4
 8105a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a66:	e1b0      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a68:	2308      	movs	r3, #8
 8105a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a6e:	e1ac      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a70:	2310      	movs	r3, #16
 8105a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a76:	e1a8      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a78:	2320      	movs	r3, #32
 8105a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a7e:	e1a4      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a80:	2340      	movs	r3, #64	; 0x40
 8105a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a86:	e1a0      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a88:	2380      	movs	r3, #128	; 0x80
 8105a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a8e:	e19c      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105a90:	687b      	ldr	r3, [r7, #4]
 8105a92:	681b      	ldr	r3, [r3, #0]
 8105a94:	4a36      	ldr	r2, [pc, #216]	; (8105b70 <UART_SetConfig+0x348>)
 8105a96:	4293      	cmp	r3, r2
 8105a98:	d130      	bne.n	8105afc <UART_SetConfig+0x2d4>
 8105a9a:	4b32      	ldr	r3, [pc, #200]	; (8105b64 <UART_SetConfig+0x33c>)
 8105a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a9e:	f003 0307 	and.w	r3, r3, #7
 8105aa2:	2b05      	cmp	r3, #5
 8105aa4:	d826      	bhi.n	8105af4 <UART_SetConfig+0x2cc>
 8105aa6:	a201      	add	r2, pc, #4	; (adr r2, 8105aac <UART_SetConfig+0x284>)
 8105aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105aac:	08105ac5 	.word	0x08105ac5
 8105ab0:	08105acd 	.word	0x08105acd
 8105ab4:	08105ad5 	.word	0x08105ad5
 8105ab8:	08105add 	.word	0x08105add
 8105abc:	08105ae5 	.word	0x08105ae5
 8105ac0:	08105aed 	.word	0x08105aed
 8105ac4:	2300      	movs	r3, #0
 8105ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105aca:	e17e      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105acc:	2304      	movs	r3, #4
 8105ace:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ad2:	e17a      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105ad4:	2308      	movs	r3, #8
 8105ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ada:	e176      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105adc:	2310      	movs	r3, #16
 8105ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ae2:	e172      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105ae4:	2320      	movs	r3, #32
 8105ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105aea:	e16e      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105aec:	2340      	movs	r3, #64	; 0x40
 8105aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105af2:	e16a      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105af4:	2380      	movs	r3, #128	; 0x80
 8105af6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105afa:	e166      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	681b      	ldr	r3, [r3, #0]
 8105b00:	4a1c      	ldr	r2, [pc, #112]	; (8105b74 <UART_SetConfig+0x34c>)
 8105b02:	4293      	cmp	r3, r2
 8105b04:	d140      	bne.n	8105b88 <UART_SetConfig+0x360>
 8105b06:	4b17      	ldr	r3, [pc, #92]	; (8105b64 <UART_SetConfig+0x33c>)
 8105b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b0a:	f003 0307 	and.w	r3, r3, #7
 8105b0e:	2b05      	cmp	r3, #5
 8105b10:	d836      	bhi.n	8105b80 <UART_SetConfig+0x358>
 8105b12:	a201      	add	r2, pc, #4	; (adr r2, 8105b18 <UART_SetConfig+0x2f0>)
 8105b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b18:	08105b31 	.word	0x08105b31
 8105b1c:	08105b39 	.word	0x08105b39
 8105b20:	08105b41 	.word	0x08105b41
 8105b24:	08105b49 	.word	0x08105b49
 8105b28:	08105b51 	.word	0x08105b51
 8105b2c:	08105b79 	.word	0x08105b79
 8105b30:	2300      	movs	r3, #0
 8105b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b36:	e148      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105b38:	2304      	movs	r3, #4
 8105b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b3e:	e144      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105b40:	2308      	movs	r3, #8
 8105b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b46:	e140      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105b48:	2310      	movs	r3, #16
 8105b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b4e:	e13c      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105b50:	2320      	movs	r3, #32
 8105b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b56:	e138      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105b58:	cfff69f3 	.word	0xcfff69f3
 8105b5c:	58000c00 	.word	0x58000c00
 8105b60:	40011000 	.word	0x40011000
 8105b64:	58024400 	.word	0x58024400
 8105b68:	40004400 	.word	0x40004400
 8105b6c:	40004800 	.word	0x40004800
 8105b70:	40004c00 	.word	0x40004c00
 8105b74:	40005000 	.word	0x40005000
 8105b78:	2340      	movs	r3, #64	; 0x40
 8105b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b7e:	e124      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105b80:	2380      	movs	r3, #128	; 0x80
 8105b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b86:	e120      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	681b      	ldr	r3, [r3, #0]
 8105b8c:	4acc      	ldr	r2, [pc, #816]	; (8105ec0 <UART_SetConfig+0x698>)
 8105b8e:	4293      	cmp	r3, r2
 8105b90:	d176      	bne.n	8105c80 <UART_SetConfig+0x458>
 8105b92:	4bcc      	ldr	r3, [pc, #816]	; (8105ec4 <UART_SetConfig+0x69c>)
 8105b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105b9a:	2b28      	cmp	r3, #40	; 0x28
 8105b9c:	d86c      	bhi.n	8105c78 <UART_SetConfig+0x450>
 8105b9e:	a201      	add	r2, pc, #4	; (adr r2, 8105ba4 <UART_SetConfig+0x37c>)
 8105ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105ba4:	08105c49 	.word	0x08105c49
 8105ba8:	08105c79 	.word	0x08105c79
 8105bac:	08105c79 	.word	0x08105c79
 8105bb0:	08105c79 	.word	0x08105c79
 8105bb4:	08105c79 	.word	0x08105c79
 8105bb8:	08105c79 	.word	0x08105c79
 8105bbc:	08105c79 	.word	0x08105c79
 8105bc0:	08105c79 	.word	0x08105c79
 8105bc4:	08105c51 	.word	0x08105c51
 8105bc8:	08105c79 	.word	0x08105c79
 8105bcc:	08105c79 	.word	0x08105c79
 8105bd0:	08105c79 	.word	0x08105c79
 8105bd4:	08105c79 	.word	0x08105c79
 8105bd8:	08105c79 	.word	0x08105c79
 8105bdc:	08105c79 	.word	0x08105c79
 8105be0:	08105c79 	.word	0x08105c79
 8105be4:	08105c59 	.word	0x08105c59
 8105be8:	08105c79 	.word	0x08105c79
 8105bec:	08105c79 	.word	0x08105c79
 8105bf0:	08105c79 	.word	0x08105c79
 8105bf4:	08105c79 	.word	0x08105c79
 8105bf8:	08105c79 	.word	0x08105c79
 8105bfc:	08105c79 	.word	0x08105c79
 8105c00:	08105c79 	.word	0x08105c79
 8105c04:	08105c61 	.word	0x08105c61
 8105c08:	08105c79 	.word	0x08105c79
 8105c0c:	08105c79 	.word	0x08105c79
 8105c10:	08105c79 	.word	0x08105c79
 8105c14:	08105c79 	.word	0x08105c79
 8105c18:	08105c79 	.word	0x08105c79
 8105c1c:	08105c79 	.word	0x08105c79
 8105c20:	08105c79 	.word	0x08105c79
 8105c24:	08105c69 	.word	0x08105c69
 8105c28:	08105c79 	.word	0x08105c79
 8105c2c:	08105c79 	.word	0x08105c79
 8105c30:	08105c79 	.word	0x08105c79
 8105c34:	08105c79 	.word	0x08105c79
 8105c38:	08105c79 	.word	0x08105c79
 8105c3c:	08105c79 	.word	0x08105c79
 8105c40:	08105c79 	.word	0x08105c79
 8105c44:	08105c71 	.word	0x08105c71
 8105c48:	2301      	movs	r3, #1
 8105c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105c4e:	e0bc      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105c50:	2304      	movs	r3, #4
 8105c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105c56:	e0b8      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105c58:	2308      	movs	r3, #8
 8105c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105c5e:	e0b4      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105c60:	2310      	movs	r3, #16
 8105c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105c66:	e0b0      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105c68:	2320      	movs	r3, #32
 8105c6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105c6e:	e0ac      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105c70:	2340      	movs	r3, #64	; 0x40
 8105c72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105c76:	e0a8      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105c78:	2380      	movs	r3, #128	; 0x80
 8105c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105c7e:	e0a4      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	681b      	ldr	r3, [r3, #0]
 8105c84:	4a90      	ldr	r2, [pc, #576]	; (8105ec8 <UART_SetConfig+0x6a0>)
 8105c86:	4293      	cmp	r3, r2
 8105c88:	d130      	bne.n	8105cec <UART_SetConfig+0x4c4>
 8105c8a:	4b8e      	ldr	r3, [pc, #568]	; (8105ec4 <UART_SetConfig+0x69c>)
 8105c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105c8e:	f003 0307 	and.w	r3, r3, #7
 8105c92:	2b05      	cmp	r3, #5
 8105c94:	d826      	bhi.n	8105ce4 <UART_SetConfig+0x4bc>
 8105c96:	a201      	add	r2, pc, #4	; (adr r2, 8105c9c <UART_SetConfig+0x474>)
 8105c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105c9c:	08105cb5 	.word	0x08105cb5
 8105ca0:	08105cbd 	.word	0x08105cbd
 8105ca4:	08105cc5 	.word	0x08105cc5
 8105ca8:	08105ccd 	.word	0x08105ccd
 8105cac:	08105cd5 	.word	0x08105cd5
 8105cb0:	08105cdd 	.word	0x08105cdd
 8105cb4:	2300      	movs	r3, #0
 8105cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cba:	e086      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105cbc:	2304      	movs	r3, #4
 8105cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cc2:	e082      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105cc4:	2308      	movs	r3, #8
 8105cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cca:	e07e      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105ccc:	2310      	movs	r3, #16
 8105cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cd2:	e07a      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105cd4:	2320      	movs	r3, #32
 8105cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cda:	e076      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105cdc:	2340      	movs	r3, #64	; 0x40
 8105cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ce2:	e072      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105ce4:	2380      	movs	r3, #128	; 0x80
 8105ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cea:	e06e      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105cec:	687b      	ldr	r3, [r7, #4]
 8105cee:	681b      	ldr	r3, [r3, #0]
 8105cf0:	4a76      	ldr	r2, [pc, #472]	; (8105ecc <UART_SetConfig+0x6a4>)
 8105cf2:	4293      	cmp	r3, r2
 8105cf4:	d130      	bne.n	8105d58 <UART_SetConfig+0x530>
 8105cf6:	4b73      	ldr	r3, [pc, #460]	; (8105ec4 <UART_SetConfig+0x69c>)
 8105cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105cfa:	f003 0307 	and.w	r3, r3, #7
 8105cfe:	2b05      	cmp	r3, #5
 8105d00:	d826      	bhi.n	8105d50 <UART_SetConfig+0x528>
 8105d02:	a201      	add	r2, pc, #4	; (adr r2, 8105d08 <UART_SetConfig+0x4e0>)
 8105d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d08:	08105d21 	.word	0x08105d21
 8105d0c:	08105d29 	.word	0x08105d29
 8105d10:	08105d31 	.word	0x08105d31
 8105d14:	08105d39 	.word	0x08105d39
 8105d18:	08105d41 	.word	0x08105d41
 8105d1c:	08105d49 	.word	0x08105d49
 8105d20:	2300      	movs	r3, #0
 8105d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d26:	e050      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d28:	2304      	movs	r3, #4
 8105d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d2e:	e04c      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d30:	2308      	movs	r3, #8
 8105d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d36:	e048      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d38:	2310      	movs	r3, #16
 8105d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d3e:	e044      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d40:	2320      	movs	r3, #32
 8105d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d46:	e040      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d48:	2340      	movs	r3, #64	; 0x40
 8105d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d4e:	e03c      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d50:	2380      	movs	r3, #128	; 0x80
 8105d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d56:	e038      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d58:	687b      	ldr	r3, [r7, #4]
 8105d5a:	681b      	ldr	r3, [r3, #0]
 8105d5c:	4a5c      	ldr	r2, [pc, #368]	; (8105ed0 <UART_SetConfig+0x6a8>)
 8105d5e:	4293      	cmp	r3, r2
 8105d60:	d130      	bne.n	8105dc4 <UART_SetConfig+0x59c>
 8105d62:	4b58      	ldr	r3, [pc, #352]	; (8105ec4 <UART_SetConfig+0x69c>)
 8105d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d66:	f003 0307 	and.w	r3, r3, #7
 8105d6a:	2b05      	cmp	r3, #5
 8105d6c:	d826      	bhi.n	8105dbc <UART_SetConfig+0x594>
 8105d6e:	a201      	add	r2, pc, #4	; (adr r2, 8105d74 <UART_SetConfig+0x54c>)
 8105d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d74:	08105d8d 	.word	0x08105d8d
 8105d78:	08105d95 	.word	0x08105d95
 8105d7c:	08105d9d 	.word	0x08105d9d
 8105d80:	08105da5 	.word	0x08105da5
 8105d84:	08105dad 	.word	0x08105dad
 8105d88:	08105db5 	.word	0x08105db5
 8105d8c:	2302      	movs	r3, #2
 8105d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d92:	e01a      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d94:	2304      	movs	r3, #4
 8105d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d9a:	e016      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105d9c:	2308      	movs	r3, #8
 8105d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105da2:	e012      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105da4:	2310      	movs	r3, #16
 8105da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105daa:	e00e      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105dac:	2320      	movs	r3, #32
 8105dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105db2:	e00a      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105db4:	2340      	movs	r3, #64	; 0x40
 8105db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105dba:	e006      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105dbc:	2380      	movs	r3, #128	; 0x80
 8105dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105dc2:	e002      	b.n	8105dca <UART_SetConfig+0x5a2>
 8105dc4:	2380      	movs	r3, #128	; 0x80
 8105dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	4a40      	ldr	r2, [pc, #256]	; (8105ed0 <UART_SetConfig+0x6a8>)
 8105dd0:	4293      	cmp	r3, r2
 8105dd2:	f040 80ef 	bne.w	8105fb4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105dda:	2b20      	cmp	r3, #32
 8105ddc:	dc46      	bgt.n	8105e6c <UART_SetConfig+0x644>
 8105dde:	2b02      	cmp	r3, #2
 8105de0:	f2c0 8081 	blt.w	8105ee6 <UART_SetConfig+0x6be>
 8105de4:	3b02      	subs	r3, #2
 8105de6:	2b1e      	cmp	r3, #30
 8105de8:	d87d      	bhi.n	8105ee6 <UART_SetConfig+0x6be>
 8105dea:	a201      	add	r2, pc, #4	; (adr r2, 8105df0 <UART_SetConfig+0x5c8>)
 8105dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105df0:	08105e73 	.word	0x08105e73
 8105df4:	08105ee7 	.word	0x08105ee7
 8105df8:	08105e7b 	.word	0x08105e7b
 8105dfc:	08105ee7 	.word	0x08105ee7
 8105e00:	08105ee7 	.word	0x08105ee7
 8105e04:	08105ee7 	.word	0x08105ee7
 8105e08:	08105e8b 	.word	0x08105e8b
 8105e0c:	08105ee7 	.word	0x08105ee7
 8105e10:	08105ee7 	.word	0x08105ee7
 8105e14:	08105ee7 	.word	0x08105ee7
 8105e18:	08105ee7 	.word	0x08105ee7
 8105e1c:	08105ee7 	.word	0x08105ee7
 8105e20:	08105ee7 	.word	0x08105ee7
 8105e24:	08105ee7 	.word	0x08105ee7
 8105e28:	08105e9b 	.word	0x08105e9b
 8105e2c:	08105ee7 	.word	0x08105ee7
 8105e30:	08105ee7 	.word	0x08105ee7
 8105e34:	08105ee7 	.word	0x08105ee7
 8105e38:	08105ee7 	.word	0x08105ee7
 8105e3c:	08105ee7 	.word	0x08105ee7
 8105e40:	08105ee7 	.word	0x08105ee7
 8105e44:	08105ee7 	.word	0x08105ee7
 8105e48:	08105ee7 	.word	0x08105ee7
 8105e4c:	08105ee7 	.word	0x08105ee7
 8105e50:	08105ee7 	.word	0x08105ee7
 8105e54:	08105ee7 	.word	0x08105ee7
 8105e58:	08105ee7 	.word	0x08105ee7
 8105e5c:	08105ee7 	.word	0x08105ee7
 8105e60:	08105ee7 	.word	0x08105ee7
 8105e64:	08105ee7 	.word	0x08105ee7
 8105e68:	08105ed9 	.word	0x08105ed9
 8105e6c:	2b40      	cmp	r3, #64	; 0x40
 8105e6e:	d036      	beq.n	8105ede <UART_SetConfig+0x6b6>
 8105e70:	e039      	b.n	8105ee6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105e72:	f7fd fe47 	bl	8103b04 <HAL_RCCEx_GetD3PCLK1Freq>
 8105e76:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105e78:	e03b      	b.n	8105ef2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105e7a:	f107 0314 	add.w	r3, r7, #20
 8105e7e:	4618      	mov	r0, r3
 8105e80:	f7fd fe56 	bl	8103b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105e84:	69bb      	ldr	r3, [r7, #24]
 8105e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105e88:	e033      	b.n	8105ef2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105e8a:	f107 0308 	add.w	r3, r7, #8
 8105e8e:	4618      	mov	r0, r3
 8105e90:	f7fd ffa2 	bl	8103dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105e94:	68fb      	ldr	r3, [r7, #12]
 8105e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105e98:	e02b      	b.n	8105ef2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105e9a:	4b0a      	ldr	r3, [pc, #40]	; (8105ec4 <UART_SetConfig+0x69c>)
 8105e9c:	681b      	ldr	r3, [r3, #0]
 8105e9e:	f003 0320 	and.w	r3, r3, #32
 8105ea2:	2b00      	cmp	r3, #0
 8105ea4:	d009      	beq.n	8105eba <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105ea6:	4b07      	ldr	r3, [pc, #28]	; (8105ec4 <UART_SetConfig+0x69c>)
 8105ea8:	681b      	ldr	r3, [r3, #0]
 8105eaa:	08db      	lsrs	r3, r3, #3
 8105eac:	f003 0303 	and.w	r3, r3, #3
 8105eb0:	4a08      	ldr	r2, [pc, #32]	; (8105ed4 <UART_SetConfig+0x6ac>)
 8105eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8105eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105eb8:	e01b      	b.n	8105ef2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8105eba:	4b06      	ldr	r3, [pc, #24]	; (8105ed4 <UART_SetConfig+0x6ac>)
 8105ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ebe:	e018      	b.n	8105ef2 <UART_SetConfig+0x6ca>
 8105ec0:	40011400 	.word	0x40011400
 8105ec4:	58024400 	.word	0x58024400
 8105ec8:	40007800 	.word	0x40007800
 8105ecc:	40007c00 	.word	0x40007c00
 8105ed0:	58000c00 	.word	0x58000c00
 8105ed4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105ed8:	4bc4      	ldr	r3, [pc, #784]	; (81061ec <UART_SetConfig+0x9c4>)
 8105eda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105edc:	e009      	b.n	8105ef2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ee4:	e005      	b.n	8105ef2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8105ee6:	2300      	movs	r3, #0
 8105ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105eea:	2301      	movs	r3, #1
 8105eec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105ef0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105ef4:	2b00      	cmp	r3, #0
 8105ef6:	f000 81da 	beq.w	81062ae <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105efe:	4abc      	ldr	r2, [pc, #752]	; (81061f0 <UART_SetConfig+0x9c8>)
 8105f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105f04:	461a      	mov	r2, r3
 8105f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f08:	fbb3 f3f2 	udiv	r3, r3, r2
 8105f0c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	685a      	ldr	r2, [r3, #4]
 8105f12:	4613      	mov	r3, r2
 8105f14:	005b      	lsls	r3, r3, #1
 8105f16:	4413      	add	r3, r2
 8105f18:	6a3a      	ldr	r2, [r7, #32]
 8105f1a:	429a      	cmp	r2, r3
 8105f1c:	d305      	bcc.n	8105f2a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105f1e:	687b      	ldr	r3, [r7, #4]
 8105f20:	685b      	ldr	r3, [r3, #4]
 8105f22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105f24:	6a3a      	ldr	r2, [r7, #32]
 8105f26:	429a      	cmp	r2, r3
 8105f28:	d903      	bls.n	8105f32 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8105f2a:	2301      	movs	r3, #1
 8105f2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105f30:	e1bd      	b.n	81062ae <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f34:	4618      	mov	r0, r3
 8105f36:	f04f 0100 	mov.w	r1, #0
 8105f3a:	687b      	ldr	r3, [r7, #4]
 8105f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f3e:	4aac      	ldr	r2, [pc, #688]	; (81061f0 <UART_SetConfig+0x9c8>)
 8105f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105f44:	b29a      	uxth	r2, r3
 8105f46:	f04f 0300 	mov.w	r3, #0
 8105f4a:	f7fa ff25 	bl	8100d98 <__aeabi_uldivmod>
 8105f4e:	4602      	mov	r2, r0
 8105f50:	460b      	mov	r3, r1
 8105f52:	4610      	mov	r0, r2
 8105f54:	4619      	mov	r1, r3
 8105f56:	f04f 0200 	mov.w	r2, #0
 8105f5a:	f04f 0300 	mov.w	r3, #0
 8105f5e:	020b      	lsls	r3, r1, #8
 8105f60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105f64:	0202      	lsls	r2, r0, #8
 8105f66:	6879      	ldr	r1, [r7, #4]
 8105f68:	6849      	ldr	r1, [r1, #4]
 8105f6a:	0849      	lsrs	r1, r1, #1
 8105f6c:	4608      	mov	r0, r1
 8105f6e:	f04f 0100 	mov.w	r1, #0
 8105f72:	1814      	adds	r4, r2, r0
 8105f74:	eb43 0501 	adc.w	r5, r3, r1
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	685b      	ldr	r3, [r3, #4]
 8105f7c:	461a      	mov	r2, r3
 8105f7e:	f04f 0300 	mov.w	r3, #0
 8105f82:	4620      	mov	r0, r4
 8105f84:	4629      	mov	r1, r5
 8105f86:	f7fa ff07 	bl	8100d98 <__aeabi_uldivmod>
 8105f8a:	4602      	mov	r2, r0
 8105f8c:	460b      	mov	r3, r1
 8105f8e:	4613      	mov	r3, r2
 8105f90:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105f98:	d308      	bcc.n	8105fac <UART_SetConfig+0x784>
 8105f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105fa0:	d204      	bcs.n	8105fac <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8105fa8:	60da      	str	r2, [r3, #12]
 8105faa:	e180      	b.n	81062ae <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8105fac:	2301      	movs	r3, #1
 8105fae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105fb2:	e17c      	b.n	81062ae <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105fb4:	687b      	ldr	r3, [r7, #4]
 8105fb6:	69db      	ldr	r3, [r3, #28]
 8105fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105fbc:	f040 80be 	bne.w	810613c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8105fc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105fc4:	2b20      	cmp	r3, #32
 8105fc6:	dc49      	bgt.n	810605c <UART_SetConfig+0x834>
 8105fc8:	2b00      	cmp	r3, #0
 8105fca:	db7c      	blt.n	81060c6 <UART_SetConfig+0x89e>
 8105fcc:	2b20      	cmp	r3, #32
 8105fce:	d87a      	bhi.n	81060c6 <UART_SetConfig+0x89e>
 8105fd0:	a201      	add	r2, pc, #4	; (adr r2, 8105fd8 <UART_SetConfig+0x7b0>)
 8105fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105fd6:	bf00      	nop
 8105fd8:	08106063 	.word	0x08106063
 8105fdc:	0810606b 	.word	0x0810606b
 8105fe0:	081060c7 	.word	0x081060c7
 8105fe4:	081060c7 	.word	0x081060c7
 8105fe8:	08106073 	.word	0x08106073
 8105fec:	081060c7 	.word	0x081060c7
 8105ff0:	081060c7 	.word	0x081060c7
 8105ff4:	081060c7 	.word	0x081060c7
 8105ff8:	08106083 	.word	0x08106083
 8105ffc:	081060c7 	.word	0x081060c7
 8106000:	081060c7 	.word	0x081060c7
 8106004:	081060c7 	.word	0x081060c7
 8106008:	081060c7 	.word	0x081060c7
 810600c:	081060c7 	.word	0x081060c7
 8106010:	081060c7 	.word	0x081060c7
 8106014:	081060c7 	.word	0x081060c7
 8106018:	08106093 	.word	0x08106093
 810601c:	081060c7 	.word	0x081060c7
 8106020:	081060c7 	.word	0x081060c7
 8106024:	081060c7 	.word	0x081060c7
 8106028:	081060c7 	.word	0x081060c7
 810602c:	081060c7 	.word	0x081060c7
 8106030:	081060c7 	.word	0x081060c7
 8106034:	081060c7 	.word	0x081060c7
 8106038:	081060c7 	.word	0x081060c7
 810603c:	081060c7 	.word	0x081060c7
 8106040:	081060c7 	.word	0x081060c7
 8106044:	081060c7 	.word	0x081060c7
 8106048:	081060c7 	.word	0x081060c7
 810604c:	081060c7 	.word	0x081060c7
 8106050:	081060c7 	.word	0x081060c7
 8106054:	081060c7 	.word	0x081060c7
 8106058:	081060b9 	.word	0x081060b9
 810605c:	2b40      	cmp	r3, #64	; 0x40
 810605e:	d02e      	beq.n	81060be <UART_SetConfig+0x896>
 8106060:	e031      	b.n	81060c6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106062:	f7fc fde3 	bl	8102c2c <HAL_RCC_GetPCLK1Freq>
 8106066:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106068:	e033      	b.n	81060d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810606a:	f7fc fdf5 	bl	8102c58 <HAL_RCC_GetPCLK2Freq>
 810606e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106070:	e02f      	b.n	81060d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106072:	f107 0314 	add.w	r3, r7, #20
 8106076:	4618      	mov	r0, r3
 8106078:	f7fd fd5a 	bl	8103b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810607c:	69bb      	ldr	r3, [r7, #24]
 810607e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106080:	e027      	b.n	81060d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106082:	f107 0308 	add.w	r3, r7, #8
 8106086:	4618      	mov	r0, r3
 8106088:	f7fd fea6 	bl	8103dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810608c:	68fb      	ldr	r3, [r7, #12]
 810608e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106090:	e01f      	b.n	81060d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106092:	4b58      	ldr	r3, [pc, #352]	; (81061f4 <UART_SetConfig+0x9cc>)
 8106094:	681b      	ldr	r3, [r3, #0]
 8106096:	f003 0320 	and.w	r3, r3, #32
 810609a:	2b00      	cmp	r3, #0
 810609c:	d009      	beq.n	81060b2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810609e:	4b55      	ldr	r3, [pc, #340]	; (81061f4 <UART_SetConfig+0x9cc>)
 81060a0:	681b      	ldr	r3, [r3, #0]
 81060a2:	08db      	lsrs	r3, r3, #3
 81060a4:	f003 0303 	and.w	r3, r3, #3
 81060a8:	4a53      	ldr	r2, [pc, #332]	; (81061f8 <UART_SetConfig+0x9d0>)
 81060aa:	fa22 f303 	lsr.w	r3, r2, r3
 81060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81060b0:	e00f      	b.n	81060d2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 81060b2:	4b51      	ldr	r3, [pc, #324]	; (81061f8 <UART_SetConfig+0x9d0>)
 81060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81060b6:	e00c      	b.n	81060d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81060b8:	4b4c      	ldr	r3, [pc, #304]	; (81061ec <UART_SetConfig+0x9c4>)
 81060ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81060bc:	e009      	b.n	81060d2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81060be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81060c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81060c4:	e005      	b.n	81060d2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 81060c6:	2300      	movs	r3, #0
 81060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81060ca:	2301      	movs	r3, #1
 81060cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81060d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81060d4:	2b00      	cmp	r3, #0
 81060d6:	f000 80ea 	beq.w	81062ae <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81060da:	687b      	ldr	r3, [r7, #4]
 81060dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81060de:	4a44      	ldr	r2, [pc, #272]	; (81061f0 <UART_SetConfig+0x9c8>)
 81060e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81060e4:	461a      	mov	r2, r3
 81060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81060e8:	fbb3 f3f2 	udiv	r3, r3, r2
 81060ec:	005a      	lsls	r2, r3, #1
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	685b      	ldr	r3, [r3, #4]
 81060f2:	085b      	lsrs	r3, r3, #1
 81060f4:	441a      	add	r2, r3
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	685b      	ldr	r3, [r3, #4]
 81060fa:	fbb2 f3f3 	udiv	r3, r2, r3
 81060fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106102:	2b0f      	cmp	r3, #15
 8106104:	d916      	bls.n	8106134 <UART_SetConfig+0x90c>
 8106106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810610c:	d212      	bcs.n	8106134 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106110:	b29b      	uxth	r3, r3
 8106112:	f023 030f 	bic.w	r3, r3, #15
 8106116:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810611a:	085b      	lsrs	r3, r3, #1
 810611c:	b29b      	uxth	r3, r3
 810611e:	f003 0307 	and.w	r3, r3, #7
 8106122:	b29a      	uxth	r2, r3
 8106124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8106126:	4313      	orrs	r3, r2
 8106128:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810612a:	687b      	ldr	r3, [r7, #4]
 810612c:	681b      	ldr	r3, [r3, #0]
 810612e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8106130:	60da      	str	r2, [r3, #12]
 8106132:	e0bc      	b.n	81062ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106134:	2301      	movs	r3, #1
 8106136:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810613a:	e0b8      	b.n	81062ae <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810613c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106140:	2b20      	cmp	r3, #32
 8106142:	dc4b      	bgt.n	81061dc <UART_SetConfig+0x9b4>
 8106144:	2b00      	cmp	r3, #0
 8106146:	f2c0 8087 	blt.w	8106258 <UART_SetConfig+0xa30>
 810614a:	2b20      	cmp	r3, #32
 810614c:	f200 8084 	bhi.w	8106258 <UART_SetConfig+0xa30>
 8106150:	a201      	add	r2, pc, #4	; (adr r2, 8106158 <UART_SetConfig+0x930>)
 8106152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106156:	bf00      	nop
 8106158:	081061e3 	.word	0x081061e3
 810615c:	081061fd 	.word	0x081061fd
 8106160:	08106259 	.word	0x08106259
 8106164:	08106259 	.word	0x08106259
 8106168:	08106205 	.word	0x08106205
 810616c:	08106259 	.word	0x08106259
 8106170:	08106259 	.word	0x08106259
 8106174:	08106259 	.word	0x08106259
 8106178:	08106215 	.word	0x08106215
 810617c:	08106259 	.word	0x08106259
 8106180:	08106259 	.word	0x08106259
 8106184:	08106259 	.word	0x08106259
 8106188:	08106259 	.word	0x08106259
 810618c:	08106259 	.word	0x08106259
 8106190:	08106259 	.word	0x08106259
 8106194:	08106259 	.word	0x08106259
 8106198:	08106225 	.word	0x08106225
 810619c:	08106259 	.word	0x08106259
 81061a0:	08106259 	.word	0x08106259
 81061a4:	08106259 	.word	0x08106259
 81061a8:	08106259 	.word	0x08106259
 81061ac:	08106259 	.word	0x08106259
 81061b0:	08106259 	.word	0x08106259
 81061b4:	08106259 	.word	0x08106259
 81061b8:	08106259 	.word	0x08106259
 81061bc:	08106259 	.word	0x08106259
 81061c0:	08106259 	.word	0x08106259
 81061c4:	08106259 	.word	0x08106259
 81061c8:	08106259 	.word	0x08106259
 81061cc:	08106259 	.word	0x08106259
 81061d0:	08106259 	.word	0x08106259
 81061d4:	08106259 	.word	0x08106259
 81061d8:	0810624b 	.word	0x0810624b
 81061dc:	2b40      	cmp	r3, #64	; 0x40
 81061de:	d037      	beq.n	8106250 <UART_SetConfig+0xa28>
 81061e0:	e03a      	b.n	8106258 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81061e2:	f7fc fd23 	bl	8102c2c <HAL_RCC_GetPCLK1Freq>
 81061e6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81061e8:	e03c      	b.n	8106264 <UART_SetConfig+0xa3c>
 81061ea:	bf00      	nop
 81061ec:	003d0900 	.word	0x003d0900
 81061f0:	0810b418 	.word	0x0810b418
 81061f4:	58024400 	.word	0x58024400
 81061f8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81061fc:	f7fc fd2c 	bl	8102c58 <HAL_RCC_GetPCLK2Freq>
 8106200:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106202:	e02f      	b.n	8106264 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106204:	f107 0314 	add.w	r3, r7, #20
 8106208:	4618      	mov	r0, r3
 810620a:	f7fd fc91 	bl	8103b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810620e:	69bb      	ldr	r3, [r7, #24]
 8106210:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106212:	e027      	b.n	8106264 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106214:	f107 0308 	add.w	r3, r7, #8
 8106218:	4618      	mov	r0, r3
 810621a:	f7fd fddd 	bl	8103dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810621e:	68fb      	ldr	r3, [r7, #12]
 8106220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106222:	e01f      	b.n	8106264 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106224:	4b2c      	ldr	r3, [pc, #176]	; (81062d8 <UART_SetConfig+0xab0>)
 8106226:	681b      	ldr	r3, [r3, #0]
 8106228:	f003 0320 	and.w	r3, r3, #32
 810622c:	2b00      	cmp	r3, #0
 810622e:	d009      	beq.n	8106244 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106230:	4b29      	ldr	r3, [pc, #164]	; (81062d8 <UART_SetConfig+0xab0>)
 8106232:	681b      	ldr	r3, [r3, #0]
 8106234:	08db      	lsrs	r3, r3, #3
 8106236:	f003 0303 	and.w	r3, r3, #3
 810623a:	4a28      	ldr	r2, [pc, #160]	; (81062dc <UART_SetConfig+0xab4>)
 810623c:	fa22 f303 	lsr.w	r3, r2, r3
 8106240:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106242:	e00f      	b.n	8106264 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8106244:	4b25      	ldr	r3, [pc, #148]	; (81062dc <UART_SetConfig+0xab4>)
 8106246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106248:	e00c      	b.n	8106264 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810624a:	4b25      	ldr	r3, [pc, #148]	; (81062e0 <UART_SetConfig+0xab8>)
 810624c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810624e:	e009      	b.n	8106264 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106256:	e005      	b.n	8106264 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8106258:	2300      	movs	r3, #0
 810625a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810625c:	2301      	movs	r3, #1
 810625e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106262:	bf00      	nop
    }

    if (pclk != 0U)
 8106264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106266:	2b00      	cmp	r3, #0
 8106268:	d021      	beq.n	81062ae <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810626a:	687b      	ldr	r3, [r7, #4]
 810626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810626e:	4a1d      	ldr	r2, [pc, #116]	; (81062e4 <UART_SetConfig+0xabc>)
 8106270:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106274:	461a      	mov	r2, r3
 8106276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106278:	fbb3 f2f2 	udiv	r2, r3, r2
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	685b      	ldr	r3, [r3, #4]
 8106280:	085b      	lsrs	r3, r3, #1
 8106282:	441a      	add	r2, r3
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	685b      	ldr	r3, [r3, #4]
 8106288:	fbb2 f3f3 	udiv	r3, r2, r3
 810628c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106290:	2b0f      	cmp	r3, #15
 8106292:	d909      	bls.n	81062a8 <UART_SetConfig+0xa80>
 8106294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810629a:	d205      	bcs.n	81062a8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810629e:	b29a      	uxth	r2, r3
 81062a0:	687b      	ldr	r3, [r7, #4]
 81062a2:	681b      	ldr	r3, [r3, #0]
 81062a4:	60da      	str	r2, [r3, #12]
 81062a6:	e002      	b.n	81062ae <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81062a8:	2301      	movs	r3, #1
 81062aa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81062ae:	687b      	ldr	r3, [r7, #4]
 81062b0:	2201      	movs	r2, #1
 81062b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81062b6:	687b      	ldr	r3, [r7, #4]
 81062b8:	2201      	movs	r2, #1
 81062ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81062be:	687b      	ldr	r3, [r7, #4]
 81062c0:	2200      	movs	r2, #0
 81062c2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81062c4:	687b      	ldr	r3, [r7, #4]
 81062c6:	2200      	movs	r2, #0
 81062c8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81062ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 81062ce:	4618      	mov	r0, r3
 81062d0:	3738      	adds	r7, #56	; 0x38
 81062d2:	46bd      	mov	sp, r7
 81062d4:	bdb0      	pop	{r4, r5, r7, pc}
 81062d6:	bf00      	nop
 81062d8:	58024400 	.word	0x58024400
 81062dc:	03d09000 	.word	0x03d09000
 81062e0:	003d0900 	.word	0x003d0900
 81062e4:	0810b418 	.word	0x0810b418

081062e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81062e8:	b480      	push	{r7}
 81062ea:	b083      	sub	sp, #12
 81062ec:	af00      	add	r7, sp, #0
 81062ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81062f4:	f003 0301 	and.w	r3, r3, #1
 81062f8:	2b00      	cmp	r3, #0
 81062fa:	d00a      	beq.n	8106312 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81062fc:	687b      	ldr	r3, [r7, #4]
 81062fe:	681b      	ldr	r3, [r3, #0]
 8106300:	685b      	ldr	r3, [r3, #4]
 8106302:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810630a:	687b      	ldr	r3, [r7, #4]
 810630c:	681b      	ldr	r3, [r3, #0]
 810630e:	430a      	orrs	r2, r1
 8106310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106312:	687b      	ldr	r3, [r7, #4]
 8106314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106316:	f003 0302 	and.w	r3, r3, #2
 810631a:	2b00      	cmp	r3, #0
 810631c:	d00a      	beq.n	8106334 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	681b      	ldr	r3, [r3, #0]
 8106322:	685b      	ldr	r3, [r3, #4]
 8106324:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810632c:	687b      	ldr	r3, [r7, #4]
 810632e:	681b      	ldr	r3, [r3, #0]
 8106330:	430a      	orrs	r2, r1
 8106332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106338:	f003 0304 	and.w	r3, r3, #4
 810633c:	2b00      	cmp	r3, #0
 810633e:	d00a      	beq.n	8106356 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106340:	687b      	ldr	r3, [r7, #4]
 8106342:	681b      	ldr	r3, [r3, #0]
 8106344:	685b      	ldr	r3, [r3, #4]
 8106346:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810634a:	687b      	ldr	r3, [r7, #4]
 810634c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	430a      	orrs	r2, r1
 8106354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810635a:	f003 0308 	and.w	r3, r3, #8
 810635e:	2b00      	cmp	r3, #0
 8106360:	d00a      	beq.n	8106378 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	685b      	ldr	r3, [r3, #4]
 8106368:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	681b      	ldr	r3, [r3, #0]
 8106374:	430a      	orrs	r2, r1
 8106376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106378:	687b      	ldr	r3, [r7, #4]
 810637a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810637c:	f003 0310 	and.w	r3, r3, #16
 8106380:	2b00      	cmp	r3, #0
 8106382:	d00a      	beq.n	810639a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	681b      	ldr	r3, [r3, #0]
 8106388:	689b      	ldr	r3, [r3, #8]
 810638a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8106392:	687b      	ldr	r3, [r7, #4]
 8106394:	681b      	ldr	r3, [r3, #0]
 8106396:	430a      	orrs	r2, r1
 8106398:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810639e:	f003 0320 	and.w	r3, r3, #32
 81063a2:	2b00      	cmp	r3, #0
 81063a4:	d00a      	beq.n	81063bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	681b      	ldr	r3, [r3, #0]
 81063aa:	689b      	ldr	r3, [r3, #8]
 81063ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81063b0:	687b      	ldr	r3, [r7, #4]
 81063b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	430a      	orrs	r2, r1
 81063ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81063bc:	687b      	ldr	r3, [r7, #4]
 81063be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81063c4:	2b00      	cmp	r3, #0
 81063c6:	d01a      	beq.n	81063fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	681b      	ldr	r3, [r3, #0]
 81063cc:	685b      	ldr	r3, [r3, #4]
 81063ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81063d2:	687b      	ldr	r3, [r7, #4]
 81063d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	681b      	ldr	r3, [r3, #0]
 81063da:	430a      	orrs	r2, r1
 81063dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81063e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81063e6:	d10a      	bne.n	81063fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81063e8:	687b      	ldr	r3, [r7, #4]
 81063ea:	681b      	ldr	r3, [r3, #0]
 81063ec:	685b      	ldr	r3, [r3, #4]
 81063ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 81063f6:	687b      	ldr	r3, [r7, #4]
 81063f8:	681b      	ldr	r3, [r3, #0]
 81063fa:	430a      	orrs	r2, r1
 81063fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106406:	2b00      	cmp	r3, #0
 8106408:	d00a      	beq.n	8106420 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	681b      	ldr	r3, [r3, #0]
 810640e:	685b      	ldr	r3, [r3, #4]
 8106410:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	681b      	ldr	r3, [r3, #0]
 810641c:	430a      	orrs	r2, r1
 810641e:	605a      	str	r2, [r3, #4]
  }
}
 8106420:	bf00      	nop
 8106422:	370c      	adds	r7, #12
 8106424:	46bd      	mov	sp, r7
 8106426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810642a:	4770      	bx	lr

0810642c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810642c:	b580      	push	{r7, lr}
 810642e:	b086      	sub	sp, #24
 8106430:	af02      	add	r7, sp, #8
 8106432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106434:	687b      	ldr	r3, [r7, #4]
 8106436:	2200      	movs	r2, #0
 8106438:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810643c:	f7fb fe78 	bl	8102130 <HAL_GetTick>
 8106440:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	681b      	ldr	r3, [r3, #0]
 8106446:	681b      	ldr	r3, [r3, #0]
 8106448:	f003 0308 	and.w	r3, r3, #8
 810644c:	2b08      	cmp	r3, #8
 810644e:	d10e      	bne.n	810646e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106454:	9300      	str	r3, [sp, #0]
 8106456:	68fb      	ldr	r3, [r7, #12]
 8106458:	2200      	movs	r2, #0
 810645a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810645e:	6878      	ldr	r0, [r7, #4]
 8106460:	f000 f82f 	bl	81064c2 <UART_WaitOnFlagUntilTimeout>
 8106464:	4603      	mov	r3, r0
 8106466:	2b00      	cmp	r3, #0
 8106468:	d001      	beq.n	810646e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810646a:	2303      	movs	r3, #3
 810646c:	e025      	b.n	81064ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810646e:	687b      	ldr	r3, [r7, #4]
 8106470:	681b      	ldr	r3, [r3, #0]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	f003 0304 	and.w	r3, r3, #4
 8106478:	2b04      	cmp	r3, #4
 810647a:	d10e      	bne.n	810649a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810647c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106480:	9300      	str	r3, [sp, #0]
 8106482:	68fb      	ldr	r3, [r7, #12]
 8106484:	2200      	movs	r2, #0
 8106486:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810648a:	6878      	ldr	r0, [r7, #4]
 810648c:	f000 f819 	bl	81064c2 <UART_WaitOnFlagUntilTimeout>
 8106490:	4603      	mov	r3, r0
 8106492:	2b00      	cmp	r3, #0
 8106494:	d001      	beq.n	810649a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106496:	2303      	movs	r3, #3
 8106498:	e00f      	b.n	81064ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	2220      	movs	r2, #32
 810649e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81064a2:	687b      	ldr	r3, [r7, #4]
 81064a4:	2220      	movs	r2, #32
 81064a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	2200      	movs	r2, #0
 81064ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81064b0:	687b      	ldr	r3, [r7, #4]
 81064b2:	2200      	movs	r2, #0
 81064b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81064b8:	2300      	movs	r3, #0
}
 81064ba:	4618      	mov	r0, r3
 81064bc:	3710      	adds	r7, #16
 81064be:	46bd      	mov	sp, r7
 81064c0:	bd80      	pop	{r7, pc}

081064c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81064c2:	b580      	push	{r7, lr}
 81064c4:	b09c      	sub	sp, #112	; 0x70
 81064c6:	af00      	add	r7, sp, #0
 81064c8:	60f8      	str	r0, [r7, #12]
 81064ca:	60b9      	str	r1, [r7, #8]
 81064cc:	603b      	str	r3, [r7, #0]
 81064ce:	4613      	mov	r3, r2
 81064d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81064d2:	e0a9      	b.n	8106628 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81064d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81064d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81064da:	f000 80a5 	beq.w	8106628 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81064de:	f7fb fe27 	bl	8102130 <HAL_GetTick>
 81064e2:	4602      	mov	r2, r0
 81064e4:	683b      	ldr	r3, [r7, #0]
 81064e6:	1ad3      	subs	r3, r2, r3
 81064e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81064ea:	429a      	cmp	r2, r3
 81064ec:	d302      	bcc.n	81064f4 <UART_WaitOnFlagUntilTimeout+0x32>
 81064ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81064f0:	2b00      	cmp	r3, #0
 81064f2:	d140      	bne.n	8106576 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81064f4:	68fb      	ldr	r3, [r7, #12]
 81064f6:	681b      	ldr	r3, [r3, #0]
 81064f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81064fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81064fc:	e853 3f00 	ldrex	r3, [r3]
 8106500:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8106502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106504:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106508:	667b      	str	r3, [r7, #100]	; 0x64
 810650a:	68fb      	ldr	r3, [r7, #12]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	461a      	mov	r2, r3
 8106510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8106512:	65fb      	str	r3, [r7, #92]	; 0x5c
 8106514:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106516:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8106518:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810651a:	e841 2300 	strex	r3, r2, [r1]
 810651e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8106520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106522:	2b00      	cmp	r3, #0
 8106524:	d1e6      	bne.n	81064f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106526:	68fb      	ldr	r3, [r7, #12]
 8106528:	681b      	ldr	r3, [r3, #0]
 810652a:	3308      	adds	r3, #8
 810652c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106530:	e853 3f00 	ldrex	r3, [r3]
 8106534:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8106536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106538:	f023 0301 	bic.w	r3, r3, #1
 810653c:	663b      	str	r3, [r7, #96]	; 0x60
 810653e:	68fb      	ldr	r3, [r7, #12]
 8106540:	681b      	ldr	r3, [r3, #0]
 8106542:	3308      	adds	r3, #8
 8106544:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8106546:	64ba      	str	r2, [r7, #72]	; 0x48
 8106548:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810654a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810654c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810654e:	e841 2300 	strex	r3, r2, [r1]
 8106552:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8106554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106556:	2b00      	cmp	r3, #0
 8106558:	d1e5      	bne.n	8106526 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810655a:	68fb      	ldr	r3, [r7, #12]
 810655c:	2220      	movs	r2, #32
 810655e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8106562:	68fb      	ldr	r3, [r7, #12]
 8106564:	2220      	movs	r2, #32
 8106566:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810656a:	68fb      	ldr	r3, [r7, #12]
 810656c:	2200      	movs	r2, #0
 810656e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8106572:	2303      	movs	r3, #3
 8106574:	e069      	b.n	810664a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8106576:	68fb      	ldr	r3, [r7, #12]
 8106578:	681b      	ldr	r3, [r3, #0]
 810657a:	681b      	ldr	r3, [r3, #0]
 810657c:	f003 0304 	and.w	r3, r3, #4
 8106580:	2b00      	cmp	r3, #0
 8106582:	d051      	beq.n	8106628 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106584:	68fb      	ldr	r3, [r7, #12]
 8106586:	681b      	ldr	r3, [r3, #0]
 8106588:	69db      	ldr	r3, [r3, #28]
 810658a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810658e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106592:	d149      	bne.n	8106628 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106594:	68fb      	ldr	r3, [r7, #12]
 8106596:	681b      	ldr	r3, [r3, #0]
 8106598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810659c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810659e:	68fb      	ldr	r3, [r7, #12]
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81065a6:	e853 3f00 	ldrex	r3, [r3]
 81065aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81065ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81065b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 81065b4:	68fb      	ldr	r3, [r7, #12]
 81065b6:	681b      	ldr	r3, [r3, #0]
 81065b8:	461a      	mov	r2, r3
 81065ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81065bc:	637b      	str	r3, [r7, #52]	; 0x34
 81065be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81065c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81065c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81065c4:	e841 2300 	strex	r3, r2, [r1]
 81065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81065ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81065cc:	2b00      	cmp	r3, #0
 81065ce:	d1e6      	bne.n	810659e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81065d0:	68fb      	ldr	r3, [r7, #12]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	3308      	adds	r3, #8
 81065d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81065d8:	697b      	ldr	r3, [r7, #20]
 81065da:	e853 3f00 	ldrex	r3, [r3]
 81065de:	613b      	str	r3, [r7, #16]
   return(result);
 81065e0:	693b      	ldr	r3, [r7, #16]
 81065e2:	f023 0301 	bic.w	r3, r3, #1
 81065e6:	66bb      	str	r3, [r7, #104]	; 0x68
 81065e8:	68fb      	ldr	r3, [r7, #12]
 81065ea:	681b      	ldr	r3, [r3, #0]
 81065ec:	3308      	adds	r3, #8
 81065ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 81065f0:	623a      	str	r2, [r7, #32]
 81065f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81065f4:	69f9      	ldr	r1, [r7, #28]
 81065f6:	6a3a      	ldr	r2, [r7, #32]
 81065f8:	e841 2300 	strex	r3, r2, [r1]
 81065fc:	61bb      	str	r3, [r7, #24]
   return(result);
 81065fe:	69bb      	ldr	r3, [r7, #24]
 8106600:	2b00      	cmp	r3, #0
 8106602:	d1e5      	bne.n	81065d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8106604:	68fb      	ldr	r3, [r7, #12]
 8106606:	2220      	movs	r2, #32
 8106608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810660c:	68fb      	ldr	r3, [r7, #12]
 810660e:	2220      	movs	r2, #32
 8106610:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106614:	68fb      	ldr	r3, [r7, #12]
 8106616:	2220      	movs	r2, #32
 8106618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810661c:	68fb      	ldr	r3, [r7, #12]
 810661e:	2200      	movs	r2, #0
 8106620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8106624:	2303      	movs	r3, #3
 8106626:	e010      	b.n	810664a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106628:	68fb      	ldr	r3, [r7, #12]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	69da      	ldr	r2, [r3, #28]
 810662e:	68bb      	ldr	r3, [r7, #8]
 8106630:	4013      	ands	r3, r2
 8106632:	68ba      	ldr	r2, [r7, #8]
 8106634:	429a      	cmp	r2, r3
 8106636:	bf0c      	ite	eq
 8106638:	2301      	moveq	r3, #1
 810663a:	2300      	movne	r3, #0
 810663c:	b2db      	uxtb	r3, r3
 810663e:	461a      	mov	r2, r3
 8106640:	79fb      	ldrb	r3, [r7, #7]
 8106642:	429a      	cmp	r2, r3
 8106644:	f43f af46 	beq.w	81064d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106648:	2300      	movs	r3, #0
}
 810664a:	4618      	mov	r0, r3
 810664c:	3770      	adds	r7, #112	; 0x70
 810664e:	46bd      	mov	sp, r7
 8106650:	bd80      	pop	{r7, pc}

08106652 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8106652:	b480      	push	{r7}
 8106654:	b085      	sub	sp, #20
 8106656:	af00      	add	r7, sp, #0
 8106658:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810665a:	687b      	ldr	r3, [r7, #4]
 810665c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106660:	2b01      	cmp	r3, #1
 8106662:	d101      	bne.n	8106668 <HAL_UARTEx_DisableFifoMode+0x16>
 8106664:	2302      	movs	r3, #2
 8106666:	e027      	b.n	81066b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8106668:	687b      	ldr	r3, [r7, #4]
 810666a:	2201      	movs	r2, #1
 810666c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106670:	687b      	ldr	r3, [r7, #4]
 8106672:	2224      	movs	r2, #36	; 0x24
 8106674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	681b      	ldr	r3, [r3, #0]
 810667c:	681b      	ldr	r3, [r3, #0]
 810667e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106680:	687b      	ldr	r3, [r7, #4]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	681a      	ldr	r2, [r3, #0]
 8106686:	687b      	ldr	r3, [r7, #4]
 8106688:	681b      	ldr	r3, [r3, #0]
 810668a:	f022 0201 	bic.w	r2, r2, #1
 810668e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106690:	68fb      	ldr	r3, [r7, #12]
 8106692:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8106696:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	2200      	movs	r2, #0
 810669c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810669e:	687b      	ldr	r3, [r7, #4]
 81066a0:	681b      	ldr	r3, [r3, #0]
 81066a2:	68fa      	ldr	r2, [r7, #12]
 81066a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81066a6:	687b      	ldr	r3, [r7, #4]
 81066a8:	2220      	movs	r2, #32
 81066aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81066ae:	687b      	ldr	r3, [r7, #4]
 81066b0:	2200      	movs	r2, #0
 81066b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81066b6:	2300      	movs	r3, #0
}
 81066b8:	4618      	mov	r0, r3
 81066ba:	3714      	adds	r7, #20
 81066bc:	46bd      	mov	sp, r7
 81066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81066c2:	4770      	bx	lr

081066c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81066c4:	b580      	push	{r7, lr}
 81066c6:	b084      	sub	sp, #16
 81066c8:	af00      	add	r7, sp, #0
 81066ca:	6078      	str	r0, [r7, #4]
 81066cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81066ce:	687b      	ldr	r3, [r7, #4]
 81066d0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81066d4:	2b01      	cmp	r3, #1
 81066d6:	d101      	bne.n	81066dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81066d8:	2302      	movs	r3, #2
 81066da:	e02d      	b.n	8106738 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81066dc:	687b      	ldr	r3, [r7, #4]
 81066de:	2201      	movs	r2, #1
 81066e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	2224      	movs	r2, #36	; 0x24
 81066e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81066ec:	687b      	ldr	r3, [r7, #4]
 81066ee:	681b      	ldr	r3, [r3, #0]
 81066f0:	681b      	ldr	r3, [r3, #0]
 81066f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	681b      	ldr	r3, [r3, #0]
 81066f8:	681a      	ldr	r2, [r3, #0]
 81066fa:	687b      	ldr	r3, [r7, #4]
 81066fc:	681b      	ldr	r3, [r3, #0]
 81066fe:	f022 0201 	bic.w	r2, r2, #1
 8106702:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8106704:	687b      	ldr	r3, [r7, #4]
 8106706:	681b      	ldr	r3, [r3, #0]
 8106708:	689b      	ldr	r3, [r3, #8]
 810670a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810670e:	687b      	ldr	r3, [r7, #4]
 8106710:	681b      	ldr	r3, [r3, #0]
 8106712:	683a      	ldr	r2, [r7, #0]
 8106714:	430a      	orrs	r2, r1
 8106716:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106718:	6878      	ldr	r0, [r7, #4]
 810671a:	f000 f84f 	bl	81067bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	681b      	ldr	r3, [r3, #0]
 8106722:	68fa      	ldr	r2, [r7, #12]
 8106724:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	2220      	movs	r2, #32
 810672a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810672e:	687b      	ldr	r3, [r7, #4]
 8106730:	2200      	movs	r2, #0
 8106732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106736:	2300      	movs	r3, #0
}
 8106738:	4618      	mov	r0, r3
 810673a:	3710      	adds	r7, #16
 810673c:	46bd      	mov	sp, r7
 810673e:	bd80      	pop	{r7, pc}

08106740 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106740:	b580      	push	{r7, lr}
 8106742:	b084      	sub	sp, #16
 8106744:	af00      	add	r7, sp, #0
 8106746:	6078      	str	r0, [r7, #4]
 8106748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106750:	2b01      	cmp	r3, #1
 8106752:	d101      	bne.n	8106758 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8106754:	2302      	movs	r3, #2
 8106756:	e02d      	b.n	81067b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8106758:	687b      	ldr	r3, [r7, #4]
 810675a:	2201      	movs	r2, #1
 810675c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	2224      	movs	r2, #36	; 0x24
 8106764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106768:	687b      	ldr	r3, [r7, #4]
 810676a:	681b      	ldr	r3, [r3, #0]
 810676c:	681b      	ldr	r3, [r3, #0]
 810676e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106770:	687b      	ldr	r3, [r7, #4]
 8106772:	681b      	ldr	r3, [r3, #0]
 8106774:	681a      	ldr	r2, [r3, #0]
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	f022 0201 	bic.w	r2, r2, #1
 810677e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106780:	687b      	ldr	r3, [r7, #4]
 8106782:	681b      	ldr	r3, [r3, #0]
 8106784:	689b      	ldr	r3, [r3, #8]
 8106786:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810678a:	687b      	ldr	r3, [r7, #4]
 810678c:	681b      	ldr	r3, [r3, #0]
 810678e:	683a      	ldr	r2, [r7, #0]
 8106790:	430a      	orrs	r2, r1
 8106792:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106794:	6878      	ldr	r0, [r7, #4]
 8106796:	f000 f811 	bl	81067bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810679a:	687b      	ldr	r3, [r7, #4]
 810679c:	681b      	ldr	r3, [r3, #0]
 810679e:	68fa      	ldr	r2, [r7, #12]
 81067a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	2220      	movs	r2, #32
 81067a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81067aa:	687b      	ldr	r3, [r7, #4]
 81067ac:	2200      	movs	r2, #0
 81067ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81067b2:	2300      	movs	r3, #0
}
 81067b4:	4618      	mov	r0, r3
 81067b6:	3710      	adds	r7, #16
 81067b8:	46bd      	mov	sp, r7
 81067ba:	bd80      	pop	{r7, pc}

081067bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81067bc:	b480      	push	{r7}
 81067be:	b085      	sub	sp, #20
 81067c0:	af00      	add	r7, sp, #0
 81067c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81067c8:	2b00      	cmp	r3, #0
 81067ca:	d108      	bne.n	81067de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	2201      	movs	r2, #1
 81067d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	2201      	movs	r2, #1
 81067d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81067dc:	e031      	b.n	8106842 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81067de:	2310      	movs	r3, #16
 81067e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81067e2:	2310      	movs	r3, #16
 81067e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81067e6:	687b      	ldr	r3, [r7, #4]
 81067e8:	681b      	ldr	r3, [r3, #0]
 81067ea:	689b      	ldr	r3, [r3, #8]
 81067ec:	0e5b      	lsrs	r3, r3, #25
 81067ee:	b2db      	uxtb	r3, r3
 81067f0:	f003 0307 	and.w	r3, r3, #7
 81067f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81067f6:	687b      	ldr	r3, [r7, #4]
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	689b      	ldr	r3, [r3, #8]
 81067fc:	0f5b      	lsrs	r3, r3, #29
 81067fe:	b2db      	uxtb	r3, r3
 8106800:	f003 0307 	and.w	r3, r3, #7
 8106804:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106806:	7bbb      	ldrb	r3, [r7, #14]
 8106808:	7b3a      	ldrb	r2, [r7, #12]
 810680a:	4911      	ldr	r1, [pc, #68]	; (8106850 <UARTEx_SetNbDataToProcess+0x94>)
 810680c:	5c8a      	ldrb	r2, [r1, r2]
 810680e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8106812:	7b3a      	ldrb	r2, [r7, #12]
 8106814:	490f      	ldr	r1, [pc, #60]	; (8106854 <UARTEx_SetNbDataToProcess+0x98>)
 8106816:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106818:	fb93 f3f2 	sdiv	r3, r3, r2
 810681c:	b29a      	uxth	r2, r3
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106824:	7bfb      	ldrb	r3, [r7, #15]
 8106826:	7b7a      	ldrb	r2, [r7, #13]
 8106828:	4909      	ldr	r1, [pc, #36]	; (8106850 <UARTEx_SetNbDataToProcess+0x94>)
 810682a:	5c8a      	ldrb	r2, [r1, r2]
 810682c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106830:	7b7a      	ldrb	r2, [r7, #13]
 8106832:	4908      	ldr	r1, [pc, #32]	; (8106854 <UARTEx_SetNbDataToProcess+0x98>)
 8106834:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106836:	fb93 f3f2 	sdiv	r3, r3, r2
 810683a:	b29a      	uxth	r2, r3
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8106842:	bf00      	nop
 8106844:	3714      	adds	r7, #20
 8106846:	46bd      	mov	sp, r7
 8106848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810684c:	4770      	bx	lr
 810684e:	bf00      	nop
 8106850:	0810b430 	.word	0x0810b430
 8106854:	0810b438 	.word	0x0810b438

08106858 <__errno>:
 8106858:	4b01      	ldr	r3, [pc, #4]	; (8106860 <__errno+0x8>)
 810685a:	6818      	ldr	r0, [r3, #0]
 810685c:	4770      	bx	lr
 810685e:	bf00      	nop
 8106860:	10000010 	.word	0x10000010

08106864 <__sflush_r>:
 8106864:	898a      	ldrh	r2, [r1, #12]
 8106866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810686a:	4605      	mov	r5, r0
 810686c:	0710      	lsls	r0, r2, #28
 810686e:	460c      	mov	r4, r1
 8106870:	d458      	bmi.n	8106924 <__sflush_r+0xc0>
 8106872:	684b      	ldr	r3, [r1, #4]
 8106874:	2b00      	cmp	r3, #0
 8106876:	dc05      	bgt.n	8106884 <__sflush_r+0x20>
 8106878:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810687a:	2b00      	cmp	r3, #0
 810687c:	dc02      	bgt.n	8106884 <__sflush_r+0x20>
 810687e:	2000      	movs	r0, #0
 8106880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106884:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8106886:	2e00      	cmp	r6, #0
 8106888:	d0f9      	beq.n	810687e <__sflush_r+0x1a>
 810688a:	2300      	movs	r3, #0
 810688c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8106890:	682f      	ldr	r7, [r5, #0]
 8106892:	602b      	str	r3, [r5, #0]
 8106894:	d032      	beq.n	81068fc <__sflush_r+0x98>
 8106896:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8106898:	89a3      	ldrh	r3, [r4, #12]
 810689a:	075a      	lsls	r2, r3, #29
 810689c:	d505      	bpl.n	81068aa <__sflush_r+0x46>
 810689e:	6863      	ldr	r3, [r4, #4]
 81068a0:	1ac0      	subs	r0, r0, r3
 81068a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81068a4:	b10b      	cbz	r3, 81068aa <__sflush_r+0x46>
 81068a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81068a8:	1ac0      	subs	r0, r0, r3
 81068aa:	2300      	movs	r3, #0
 81068ac:	4602      	mov	r2, r0
 81068ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81068b0:	6a21      	ldr	r1, [r4, #32]
 81068b2:	4628      	mov	r0, r5
 81068b4:	47b0      	blx	r6
 81068b6:	1c43      	adds	r3, r0, #1
 81068b8:	89a3      	ldrh	r3, [r4, #12]
 81068ba:	d106      	bne.n	81068ca <__sflush_r+0x66>
 81068bc:	6829      	ldr	r1, [r5, #0]
 81068be:	291d      	cmp	r1, #29
 81068c0:	d82c      	bhi.n	810691c <__sflush_r+0xb8>
 81068c2:	4a2a      	ldr	r2, [pc, #168]	; (810696c <__sflush_r+0x108>)
 81068c4:	40ca      	lsrs	r2, r1
 81068c6:	07d6      	lsls	r6, r2, #31
 81068c8:	d528      	bpl.n	810691c <__sflush_r+0xb8>
 81068ca:	2200      	movs	r2, #0
 81068cc:	6062      	str	r2, [r4, #4]
 81068ce:	04d9      	lsls	r1, r3, #19
 81068d0:	6922      	ldr	r2, [r4, #16]
 81068d2:	6022      	str	r2, [r4, #0]
 81068d4:	d504      	bpl.n	81068e0 <__sflush_r+0x7c>
 81068d6:	1c42      	adds	r2, r0, #1
 81068d8:	d101      	bne.n	81068de <__sflush_r+0x7a>
 81068da:	682b      	ldr	r3, [r5, #0]
 81068dc:	b903      	cbnz	r3, 81068e0 <__sflush_r+0x7c>
 81068de:	6560      	str	r0, [r4, #84]	; 0x54
 81068e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81068e2:	602f      	str	r7, [r5, #0]
 81068e4:	2900      	cmp	r1, #0
 81068e6:	d0ca      	beq.n	810687e <__sflush_r+0x1a>
 81068e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81068ec:	4299      	cmp	r1, r3
 81068ee:	d002      	beq.n	81068f6 <__sflush_r+0x92>
 81068f0:	4628      	mov	r0, r5
 81068f2:	f000 f99f 	bl	8106c34 <_free_r>
 81068f6:	2000      	movs	r0, #0
 81068f8:	6360      	str	r0, [r4, #52]	; 0x34
 81068fa:	e7c1      	b.n	8106880 <__sflush_r+0x1c>
 81068fc:	6a21      	ldr	r1, [r4, #32]
 81068fe:	2301      	movs	r3, #1
 8106900:	4628      	mov	r0, r5
 8106902:	47b0      	blx	r6
 8106904:	1c41      	adds	r1, r0, #1
 8106906:	d1c7      	bne.n	8106898 <__sflush_r+0x34>
 8106908:	682b      	ldr	r3, [r5, #0]
 810690a:	2b00      	cmp	r3, #0
 810690c:	d0c4      	beq.n	8106898 <__sflush_r+0x34>
 810690e:	2b1d      	cmp	r3, #29
 8106910:	d001      	beq.n	8106916 <__sflush_r+0xb2>
 8106912:	2b16      	cmp	r3, #22
 8106914:	d101      	bne.n	810691a <__sflush_r+0xb6>
 8106916:	602f      	str	r7, [r5, #0]
 8106918:	e7b1      	b.n	810687e <__sflush_r+0x1a>
 810691a:	89a3      	ldrh	r3, [r4, #12]
 810691c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106920:	81a3      	strh	r3, [r4, #12]
 8106922:	e7ad      	b.n	8106880 <__sflush_r+0x1c>
 8106924:	690f      	ldr	r7, [r1, #16]
 8106926:	2f00      	cmp	r7, #0
 8106928:	d0a9      	beq.n	810687e <__sflush_r+0x1a>
 810692a:	0793      	lsls	r3, r2, #30
 810692c:	680e      	ldr	r6, [r1, #0]
 810692e:	bf08      	it	eq
 8106930:	694b      	ldreq	r3, [r1, #20]
 8106932:	600f      	str	r7, [r1, #0]
 8106934:	bf18      	it	ne
 8106936:	2300      	movne	r3, #0
 8106938:	eba6 0807 	sub.w	r8, r6, r7
 810693c:	608b      	str	r3, [r1, #8]
 810693e:	f1b8 0f00 	cmp.w	r8, #0
 8106942:	dd9c      	ble.n	810687e <__sflush_r+0x1a>
 8106944:	6a21      	ldr	r1, [r4, #32]
 8106946:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8106948:	4643      	mov	r3, r8
 810694a:	463a      	mov	r2, r7
 810694c:	4628      	mov	r0, r5
 810694e:	47b0      	blx	r6
 8106950:	2800      	cmp	r0, #0
 8106952:	dc06      	bgt.n	8106962 <__sflush_r+0xfe>
 8106954:	89a3      	ldrh	r3, [r4, #12]
 8106956:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810695a:	81a3      	strh	r3, [r4, #12]
 810695c:	f04f 30ff 	mov.w	r0, #4294967295
 8106960:	e78e      	b.n	8106880 <__sflush_r+0x1c>
 8106962:	4407      	add	r7, r0
 8106964:	eba8 0800 	sub.w	r8, r8, r0
 8106968:	e7e9      	b.n	810693e <__sflush_r+0xda>
 810696a:	bf00      	nop
 810696c:	20400001 	.word	0x20400001

08106970 <_fflush_r>:
 8106970:	b538      	push	{r3, r4, r5, lr}
 8106972:	690b      	ldr	r3, [r1, #16]
 8106974:	4605      	mov	r5, r0
 8106976:	460c      	mov	r4, r1
 8106978:	b913      	cbnz	r3, 8106980 <_fflush_r+0x10>
 810697a:	2500      	movs	r5, #0
 810697c:	4628      	mov	r0, r5
 810697e:	bd38      	pop	{r3, r4, r5, pc}
 8106980:	b118      	cbz	r0, 810698a <_fflush_r+0x1a>
 8106982:	6983      	ldr	r3, [r0, #24]
 8106984:	b90b      	cbnz	r3, 810698a <_fflush_r+0x1a>
 8106986:	f000 f887 	bl	8106a98 <__sinit>
 810698a:	4b14      	ldr	r3, [pc, #80]	; (81069dc <_fflush_r+0x6c>)
 810698c:	429c      	cmp	r4, r3
 810698e:	d11b      	bne.n	81069c8 <_fflush_r+0x58>
 8106990:	686c      	ldr	r4, [r5, #4]
 8106992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8106996:	2b00      	cmp	r3, #0
 8106998:	d0ef      	beq.n	810697a <_fflush_r+0xa>
 810699a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810699c:	07d0      	lsls	r0, r2, #31
 810699e:	d404      	bmi.n	81069aa <_fflush_r+0x3a>
 81069a0:	0599      	lsls	r1, r3, #22
 81069a2:	d402      	bmi.n	81069aa <_fflush_r+0x3a>
 81069a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81069a6:	f000 f93a 	bl	8106c1e <__retarget_lock_acquire_recursive>
 81069aa:	4628      	mov	r0, r5
 81069ac:	4621      	mov	r1, r4
 81069ae:	f7ff ff59 	bl	8106864 <__sflush_r>
 81069b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81069b4:	07da      	lsls	r2, r3, #31
 81069b6:	4605      	mov	r5, r0
 81069b8:	d4e0      	bmi.n	810697c <_fflush_r+0xc>
 81069ba:	89a3      	ldrh	r3, [r4, #12]
 81069bc:	059b      	lsls	r3, r3, #22
 81069be:	d4dd      	bmi.n	810697c <_fflush_r+0xc>
 81069c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81069c2:	f000 f92d 	bl	8106c20 <__retarget_lock_release_recursive>
 81069c6:	e7d9      	b.n	810697c <_fflush_r+0xc>
 81069c8:	4b05      	ldr	r3, [pc, #20]	; (81069e0 <_fflush_r+0x70>)
 81069ca:	429c      	cmp	r4, r3
 81069cc:	d101      	bne.n	81069d2 <_fflush_r+0x62>
 81069ce:	68ac      	ldr	r4, [r5, #8]
 81069d0:	e7df      	b.n	8106992 <_fflush_r+0x22>
 81069d2:	4b04      	ldr	r3, [pc, #16]	; (81069e4 <_fflush_r+0x74>)
 81069d4:	429c      	cmp	r4, r3
 81069d6:	bf08      	it	eq
 81069d8:	68ec      	ldreq	r4, [r5, #12]
 81069da:	e7da      	b.n	8106992 <_fflush_r+0x22>
 81069dc:	0810b460 	.word	0x0810b460
 81069e0:	0810b480 	.word	0x0810b480
 81069e4:	0810b440 	.word	0x0810b440

081069e8 <std>:
 81069e8:	2300      	movs	r3, #0
 81069ea:	b510      	push	{r4, lr}
 81069ec:	4604      	mov	r4, r0
 81069ee:	e9c0 3300 	strd	r3, r3, [r0]
 81069f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 81069f6:	6083      	str	r3, [r0, #8]
 81069f8:	8181      	strh	r1, [r0, #12]
 81069fa:	6643      	str	r3, [r0, #100]	; 0x64
 81069fc:	81c2      	strh	r2, [r0, #14]
 81069fe:	6183      	str	r3, [r0, #24]
 8106a00:	4619      	mov	r1, r3
 8106a02:	2208      	movs	r2, #8
 8106a04:	305c      	adds	r0, #92	; 0x5c
 8106a06:	f000 f90c 	bl	8106c22 <memset>
 8106a0a:	4b05      	ldr	r3, [pc, #20]	; (8106a20 <std+0x38>)
 8106a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8106a0e:	4b05      	ldr	r3, [pc, #20]	; (8106a24 <std+0x3c>)
 8106a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8106a12:	4b05      	ldr	r3, [pc, #20]	; (8106a28 <std+0x40>)
 8106a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8106a16:	4b05      	ldr	r3, [pc, #20]	; (8106a2c <std+0x44>)
 8106a18:	6224      	str	r4, [r4, #32]
 8106a1a:	6323      	str	r3, [r4, #48]	; 0x30
 8106a1c:	bd10      	pop	{r4, pc}
 8106a1e:	bf00      	nop
 8106a20:	08107d91 	.word	0x08107d91
 8106a24:	08107db3 	.word	0x08107db3
 8106a28:	08107deb 	.word	0x08107deb
 8106a2c:	08107e0f 	.word	0x08107e0f

08106a30 <_cleanup_r>:
 8106a30:	4901      	ldr	r1, [pc, #4]	; (8106a38 <_cleanup_r+0x8>)
 8106a32:	f000 b8af 	b.w	8106b94 <_fwalk_reent>
 8106a36:	bf00      	nop
 8106a38:	08106971 	.word	0x08106971

08106a3c <__sfmoreglue>:
 8106a3c:	b570      	push	{r4, r5, r6, lr}
 8106a3e:	1e4a      	subs	r2, r1, #1
 8106a40:	2568      	movs	r5, #104	; 0x68
 8106a42:	4355      	muls	r5, r2
 8106a44:	460e      	mov	r6, r1
 8106a46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8106a4a:	f000 f943 	bl	8106cd4 <_malloc_r>
 8106a4e:	4604      	mov	r4, r0
 8106a50:	b140      	cbz	r0, 8106a64 <__sfmoreglue+0x28>
 8106a52:	2100      	movs	r1, #0
 8106a54:	e9c0 1600 	strd	r1, r6, [r0]
 8106a58:	300c      	adds	r0, #12
 8106a5a:	60a0      	str	r0, [r4, #8]
 8106a5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8106a60:	f000 f8df 	bl	8106c22 <memset>
 8106a64:	4620      	mov	r0, r4
 8106a66:	bd70      	pop	{r4, r5, r6, pc}

08106a68 <__sfp_lock_acquire>:
 8106a68:	4801      	ldr	r0, [pc, #4]	; (8106a70 <__sfp_lock_acquire+0x8>)
 8106a6a:	f000 b8d8 	b.w	8106c1e <__retarget_lock_acquire_recursive>
 8106a6e:	bf00      	nop
 8106a70:	100003f4 	.word	0x100003f4

08106a74 <__sfp_lock_release>:
 8106a74:	4801      	ldr	r0, [pc, #4]	; (8106a7c <__sfp_lock_release+0x8>)
 8106a76:	f000 b8d3 	b.w	8106c20 <__retarget_lock_release_recursive>
 8106a7a:	bf00      	nop
 8106a7c:	100003f4 	.word	0x100003f4

08106a80 <__sinit_lock_acquire>:
 8106a80:	4801      	ldr	r0, [pc, #4]	; (8106a88 <__sinit_lock_acquire+0x8>)
 8106a82:	f000 b8cc 	b.w	8106c1e <__retarget_lock_acquire_recursive>
 8106a86:	bf00      	nop
 8106a88:	100003ef 	.word	0x100003ef

08106a8c <__sinit_lock_release>:
 8106a8c:	4801      	ldr	r0, [pc, #4]	; (8106a94 <__sinit_lock_release+0x8>)
 8106a8e:	f000 b8c7 	b.w	8106c20 <__retarget_lock_release_recursive>
 8106a92:	bf00      	nop
 8106a94:	100003ef 	.word	0x100003ef

08106a98 <__sinit>:
 8106a98:	b510      	push	{r4, lr}
 8106a9a:	4604      	mov	r4, r0
 8106a9c:	f7ff fff0 	bl	8106a80 <__sinit_lock_acquire>
 8106aa0:	69a3      	ldr	r3, [r4, #24]
 8106aa2:	b11b      	cbz	r3, 8106aac <__sinit+0x14>
 8106aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106aa8:	f7ff bff0 	b.w	8106a8c <__sinit_lock_release>
 8106aac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8106ab0:	6523      	str	r3, [r4, #80]	; 0x50
 8106ab2:	4b13      	ldr	r3, [pc, #76]	; (8106b00 <__sinit+0x68>)
 8106ab4:	4a13      	ldr	r2, [pc, #76]	; (8106b04 <__sinit+0x6c>)
 8106ab6:	681b      	ldr	r3, [r3, #0]
 8106ab8:	62a2      	str	r2, [r4, #40]	; 0x28
 8106aba:	42a3      	cmp	r3, r4
 8106abc:	bf04      	itt	eq
 8106abe:	2301      	moveq	r3, #1
 8106ac0:	61a3      	streq	r3, [r4, #24]
 8106ac2:	4620      	mov	r0, r4
 8106ac4:	f000 f820 	bl	8106b08 <__sfp>
 8106ac8:	6060      	str	r0, [r4, #4]
 8106aca:	4620      	mov	r0, r4
 8106acc:	f000 f81c 	bl	8106b08 <__sfp>
 8106ad0:	60a0      	str	r0, [r4, #8]
 8106ad2:	4620      	mov	r0, r4
 8106ad4:	f000 f818 	bl	8106b08 <__sfp>
 8106ad8:	2200      	movs	r2, #0
 8106ada:	60e0      	str	r0, [r4, #12]
 8106adc:	2104      	movs	r1, #4
 8106ade:	6860      	ldr	r0, [r4, #4]
 8106ae0:	f7ff ff82 	bl	81069e8 <std>
 8106ae4:	68a0      	ldr	r0, [r4, #8]
 8106ae6:	2201      	movs	r2, #1
 8106ae8:	2109      	movs	r1, #9
 8106aea:	f7ff ff7d 	bl	81069e8 <std>
 8106aee:	68e0      	ldr	r0, [r4, #12]
 8106af0:	2202      	movs	r2, #2
 8106af2:	2112      	movs	r1, #18
 8106af4:	f7ff ff78 	bl	81069e8 <std>
 8106af8:	2301      	movs	r3, #1
 8106afa:	61a3      	str	r3, [r4, #24]
 8106afc:	e7d2      	b.n	8106aa4 <__sinit+0xc>
 8106afe:	bf00      	nop
 8106b00:	0810b4a0 	.word	0x0810b4a0
 8106b04:	08106a31 	.word	0x08106a31

08106b08 <__sfp>:
 8106b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106b0a:	4607      	mov	r7, r0
 8106b0c:	f7ff ffac 	bl	8106a68 <__sfp_lock_acquire>
 8106b10:	4b1e      	ldr	r3, [pc, #120]	; (8106b8c <__sfp+0x84>)
 8106b12:	681e      	ldr	r6, [r3, #0]
 8106b14:	69b3      	ldr	r3, [r6, #24]
 8106b16:	b913      	cbnz	r3, 8106b1e <__sfp+0x16>
 8106b18:	4630      	mov	r0, r6
 8106b1a:	f7ff ffbd 	bl	8106a98 <__sinit>
 8106b1e:	3648      	adds	r6, #72	; 0x48
 8106b20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8106b24:	3b01      	subs	r3, #1
 8106b26:	d503      	bpl.n	8106b30 <__sfp+0x28>
 8106b28:	6833      	ldr	r3, [r6, #0]
 8106b2a:	b30b      	cbz	r3, 8106b70 <__sfp+0x68>
 8106b2c:	6836      	ldr	r6, [r6, #0]
 8106b2e:	e7f7      	b.n	8106b20 <__sfp+0x18>
 8106b30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8106b34:	b9d5      	cbnz	r5, 8106b6c <__sfp+0x64>
 8106b36:	4b16      	ldr	r3, [pc, #88]	; (8106b90 <__sfp+0x88>)
 8106b38:	60e3      	str	r3, [r4, #12]
 8106b3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8106b3e:	6665      	str	r5, [r4, #100]	; 0x64
 8106b40:	f000 f86c 	bl	8106c1c <__retarget_lock_init_recursive>
 8106b44:	f7ff ff96 	bl	8106a74 <__sfp_lock_release>
 8106b48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8106b4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8106b50:	6025      	str	r5, [r4, #0]
 8106b52:	61a5      	str	r5, [r4, #24]
 8106b54:	2208      	movs	r2, #8
 8106b56:	4629      	mov	r1, r5
 8106b58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8106b5c:	f000 f861 	bl	8106c22 <memset>
 8106b60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8106b64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8106b68:	4620      	mov	r0, r4
 8106b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106b6c:	3468      	adds	r4, #104	; 0x68
 8106b6e:	e7d9      	b.n	8106b24 <__sfp+0x1c>
 8106b70:	2104      	movs	r1, #4
 8106b72:	4638      	mov	r0, r7
 8106b74:	f7ff ff62 	bl	8106a3c <__sfmoreglue>
 8106b78:	4604      	mov	r4, r0
 8106b7a:	6030      	str	r0, [r6, #0]
 8106b7c:	2800      	cmp	r0, #0
 8106b7e:	d1d5      	bne.n	8106b2c <__sfp+0x24>
 8106b80:	f7ff ff78 	bl	8106a74 <__sfp_lock_release>
 8106b84:	230c      	movs	r3, #12
 8106b86:	603b      	str	r3, [r7, #0]
 8106b88:	e7ee      	b.n	8106b68 <__sfp+0x60>
 8106b8a:	bf00      	nop
 8106b8c:	0810b4a0 	.word	0x0810b4a0
 8106b90:	ffff0001 	.word	0xffff0001

08106b94 <_fwalk_reent>:
 8106b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106b98:	4606      	mov	r6, r0
 8106b9a:	4688      	mov	r8, r1
 8106b9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8106ba0:	2700      	movs	r7, #0
 8106ba2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8106ba6:	f1b9 0901 	subs.w	r9, r9, #1
 8106baa:	d505      	bpl.n	8106bb8 <_fwalk_reent+0x24>
 8106bac:	6824      	ldr	r4, [r4, #0]
 8106bae:	2c00      	cmp	r4, #0
 8106bb0:	d1f7      	bne.n	8106ba2 <_fwalk_reent+0xe>
 8106bb2:	4638      	mov	r0, r7
 8106bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106bb8:	89ab      	ldrh	r3, [r5, #12]
 8106bba:	2b01      	cmp	r3, #1
 8106bbc:	d907      	bls.n	8106bce <_fwalk_reent+0x3a>
 8106bbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8106bc2:	3301      	adds	r3, #1
 8106bc4:	d003      	beq.n	8106bce <_fwalk_reent+0x3a>
 8106bc6:	4629      	mov	r1, r5
 8106bc8:	4630      	mov	r0, r6
 8106bca:	47c0      	blx	r8
 8106bcc:	4307      	orrs	r7, r0
 8106bce:	3568      	adds	r5, #104	; 0x68
 8106bd0:	e7e9      	b.n	8106ba6 <_fwalk_reent+0x12>
	...

08106bd4 <__libc_init_array>:
 8106bd4:	b570      	push	{r4, r5, r6, lr}
 8106bd6:	4d0d      	ldr	r5, [pc, #52]	; (8106c0c <__libc_init_array+0x38>)
 8106bd8:	4c0d      	ldr	r4, [pc, #52]	; (8106c10 <__libc_init_array+0x3c>)
 8106bda:	1b64      	subs	r4, r4, r5
 8106bdc:	10a4      	asrs	r4, r4, #2
 8106bde:	2600      	movs	r6, #0
 8106be0:	42a6      	cmp	r6, r4
 8106be2:	d109      	bne.n	8106bf8 <__libc_init_array+0x24>
 8106be4:	4d0b      	ldr	r5, [pc, #44]	; (8106c14 <__libc_init_array+0x40>)
 8106be6:	4c0c      	ldr	r4, [pc, #48]	; (8106c18 <__libc_init_array+0x44>)
 8106be8:	f004 fbe0 	bl	810b3ac <_init>
 8106bec:	1b64      	subs	r4, r4, r5
 8106bee:	10a4      	asrs	r4, r4, #2
 8106bf0:	2600      	movs	r6, #0
 8106bf2:	42a6      	cmp	r6, r4
 8106bf4:	d105      	bne.n	8106c02 <__libc_init_array+0x2e>
 8106bf6:	bd70      	pop	{r4, r5, r6, pc}
 8106bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8106bfc:	4798      	blx	r3
 8106bfe:	3601      	adds	r6, #1
 8106c00:	e7ee      	b.n	8106be0 <__libc_init_array+0xc>
 8106c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8106c06:	4798      	blx	r3
 8106c08:	3601      	adds	r6, #1
 8106c0a:	e7f2      	b.n	8106bf2 <__libc_init_array+0x1e>
 8106c0c:	0810b8fc 	.word	0x0810b8fc
 8106c10:	0810b8fc 	.word	0x0810b8fc
 8106c14:	0810b8fc 	.word	0x0810b8fc
 8106c18:	0810b900 	.word	0x0810b900

08106c1c <__retarget_lock_init_recursive>:
 8106c1c:	4770      	bx	lr

08106c1e <__retarget_lock_acquire_recursive>:
 8106c1e:	4770      	bx	lr

08106c20 <__retarget_lock_release_recursive>:
 8106c20:	4770      	bx	lr

08106c22 <memset>:
 8106c22:	4402      	add	r2, r0
 8106c24:	4603      	mov	r3, r0
 8106c26:	4293      	cmp	r3, r2
 8106c28:	d100      	bne.n	8106c2c <memset+0xa>
 8106c2a:	4770      	bx	lr
 8106c2c:	f803 1b01 	strb.w	r1, [r3], #1
 8106c30:	e7f9      	b.n	8106c26 <memset+0x4>
	...

08106c34 <_free_r>:
 8106c34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8106c36:	2900      	cmp	r1, #0
 8106c38:	d048      	beq.n	8106ccc <_free_r+0x98>
 8106c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106c3e:	9001      	str	r0, [sp, #4]
 8106c40:	2b00      	cmp	r3, #0
 8106c42:	f1a1 0404 	sub.w	r4, r1, #4
 8106c46:	bfb8      	it	lt
 8106c48:	18e4      	addlt	r4, r4, r3
 8106c4a:	f003 fb03 	bl	810a254 <__malloc_lock>
 8106c4e:	4a20      	ldr	r2, [pc, #128]	; (8106cd0 <_free_r+0x9c>)
 8106c50:	9801      	ldr	r0, [sp, #4]
 8106c52:	6813      	ldr	r3, [r2, #0]
 8106c54:	4615      	mov	r5, r2
 8106c56:	b933      	cbnz	r3, 8106c66 <_free_r+0x32>
 8106c58:	6063      	str	r3, [r4, #4]
 8106c5a:	6014      	str	r4, [r2, #0]
 8106c5c:	b003      	add	sp, #12
 8106c5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8106c62:	f003 bafd 	b.w	810a260 <__malloc_unlock>
 8106c66:	42a3      	cmp	r3, r4
 8106c68:	d90b      	bls.n	8106c82 <_free_r+0x4e>
 8106c6a:	6821      	ldr	r1, [r4, #0]
 8106c6c:	1862      	adds	r2, r4, r1
 8106c6e:	4293      	cmp	r3, r2
 8106c70:	bf04      	itt	eq
 8106c72:	681a      	ldreq	r2, [r3, #0]
 8106c74:	685b      	ldreq	r3, [r3, #4]
 8106c76:	6063      	str	r3, [r4, #4]
 8106c78:	bf04      	itt	eq
 8106c7a:	1852      	addeq	r2, r2, r1
 8106c7c:	6022      	streq	r2, [r4, #0]
 8106c7e:	602c      	str	r4, [r5, #0]
 8106c80:	e7ec      	b.n	8106c5c <_free_r+0x28>
 8106c82:	461a      	mov	r2, r3
 8106c84:	685b      	ldr	r3, [r3, #4]
 8106c86:	b10b      	cbz	r3, 8106c8c <_free_r+0x58>
 8106c88:	42a3      	cmp	r3, r4
 8106c8a:	d9fa      	bls.n	8106c82 <_free_r+0x4e>
 8106c8c:	6811      	ldr	r1, [r2, #0]
 8106c8e:	1855      	adds	r5, r2, r1
 8106c90:	42a5      	cmp	r5, r4
 8106c92:	d10b      	bne.n	8106cac <_free_r+0x78>
 8106c94:	6824      	ldr	r4, [r4, #0]
 8106c96:	4421      	add	r1, r4
 8106c98:	1854      	adds	r4, r2, r1
 8106c9a:	42a3      	cmp	r3, r4
 8106c9c:	6011      	str	r1, [r2, #0]
 8106c9e:	d1dd      	bne.n	8106c5c <_free_r+0x28>
 8106ca0:	681c      	ldr	r4, [r3, #0]
 8106ca2:	685b      	ldr	r3, [r3, #4]
 8106ca4:	6053      	str	r3, [r2, #4]
 8106ca6:	4421      	add	r1, r4
 8106ca8:	6011      	str	r1, [r2, #0]
 8106caa:	e7d7      	b.n	8106c5c <_free_r+0x28>
 8106cac:	d902      	bls.n	8106cb4 <_free_r+0x80>
 8106cae:	230c      	movs	r3, #12
 8106cb0:	6003      	str	r3, [r0, #0]
 8106cb2:	e7d3      	b.n	8106c5c <_free_r+0x28>
 8106cb4:	6825      	ldr	r5, [r4, #0]
 8106cb6:	1961      	adds	r1, r4, r5
 8106cb8:	428b      	cmp	r3, r1
 8106cba:	bf04      	itt	eq
 8106cbc:	6819      	ldreq	r1, [r3, #0]
 8106cbe:	685b      	ldreq	r3, [r3, #4]
 8106cc0:	6063      	str	r3, [r4, #4]
 8106cc2:	bf04      	itt	eq
 8106cc4:	1949      	addeq	r1, r1, r5
 8106cc6:	6021      	streq	r1, [r4, #0]
 8106cc8:	6054      	str	r4, [r2, #4]
 8106cca:	e7c7      	b.n	8106c5c <_free_r+0x28>
 8106ccc:	b003      	add	sp, #12
 8106cce:	bd30      	pop	{r4, r5, pc}
 8106cd0:	1000020c 	.word	0x1000020c

08106cd4 <_malloc_r>:
 8106cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106cd6:	1ccd      	adds	r5, r1, #3
 8106cd8:	f025 0503 	bic.w	r5, r5, #3
 8106cdc:	3508      	adds	r5, #8
 8106cde:	2d0c      	cmp	r5, #12
 8106ce0:	bf38      	it	cc
 8106ce2:	250c      	movcc	r5, #12
 8106ce4:	2d00      	cmp	r5, #0
 8106ce6:	4606      	mov	r6, r0
 8106ce8:	db01      	blt.n	8106cee <_malloc_r+0x1a>
 8106cea:	42a9      	cmp	r1, r5
 8106cec:	d903      	bls.n	8106cf6 <_malloc_r+0x22>
 8106cee:	230c      	movs	r3, #12
 8106cf0:	6033      	str	r3, [r6, #0]
 8106cf2:	2000      	movs	r0, #0
 8106cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106cf6:	f003 faad 	bl	810a254 <__malloc_lock>
 8106cfa:	4921      	ldr	r1, [pc, #132]	; (8106d80 <_malloc_r+0xac>)
 8106cfc:	680a      	ldr	r2, [r1, #0]
 8106cfe:	4614      	mov	r4, r2
 8106d00:	b99c      	cbnz	r4, 8106d2a <_malloc_r+0x56>
 8106d02:	4f20      	ldr	r7, [pc, #128]	; (8106d84 <_malloc_r+0xb0>)
 8106d04:	683b      	ldr	r3, [r7, #0]
 8106d06:	b923      	cbnz	r3, 8106d12 <_malloc_r+0x3e>
 8106d08:	4621      	mov	r1, r4
 8106d0a:	4630      	mov	r0, r6
 8106d0c:	f000 ff44 	bl	8107b98 <_sbrk_r>
 8106d10:	6038      	str	r0, [r7, #0]
 8106d12:	4629      	mov	r1, r5
 8106d14:	4630      	mov	r0, r6
 8106d16:	f000 ff3f 	bl	8107b98 <_sbrk_r>
 8106d1a:	1c43      	adds	r3, r0, #1
 8106d1c:	d123      	bne.n	8106d66 <_malloc_r+0x92>
 8106d1e:	230c      	movs	r3, #12
 8106d20:	6033      	str	r3, [r6, #0]
 8106d22:	4630      	mov	r0, r6
 8106d24:	f003 fa9c 	bl	810a260 <__malloc_unlock>
 8106d28:	e7e3      	b.n	8106cf2 <_malloc_r+0x1e>
 8106d2a:	6823      	ldr	r3, [r4, #0]
 8106d2c:	1b5b      	subs	r3, r3, r5
 8106d2e:	d417      	bmi.n	8106d60 <_malloc_r+0x8c>
 8106d30:	2b0b      	cmp	r3, #11
 8106d32:	d903      	bls.n	8106d3c <_malloc_r+0x68>
 8106d34:	6023      	str	r3, [r4, #0]
 8106d36:	441c      	add	r4, r3
 8106d38:	6025      	str	r5, [r4, #0]
 8106d3a:	e004      	b.n	8106d46 <_malloc_r+0x72>
 8106d3c:	6863      	ldr	r3, [r4, #4]
 8106d3e:	42a2      	cmp	r2, r4
 8106d40:	bf0c      	ite	eq
 8106d42:	600b      	streq	r3, [r1, #0]
 8106d44:	6053      	strne	r3, [r2, #4]
 8106d46:	4630      	mov	r0, r6
 8106d48:	f003 fa8a 	bl	810a260 <__malloc_unlock>
 8106d4c:	f104 000b 	add.w	r0, r4, #11
 8106d50:	1d23      	adds	r3, r4, #4
 8106d52:	f020 0007 	bic.w	r0, r0, #7
 8106d56:	1ac2      	subs	r2, r0, r3
 8106d58:	d0cc      	beq.n	8106cf4 <_malloc_r+0x20>
 8106d5a:	1a1b      	subs	r3, r3, r0
 8106d5c:	50a3      	str	r3, [r4, r2]
 8106d5e:	e7c9      	b.n	8106cf4 <_malloc_r+0x20>
 8106d60:	4622      	mov	r2, r4
 8106d62:	6864      	ldr	r4, [r4, #4]
 8106d64:	e7cc      	b.n	8106d00 <_malloc_r+0x2c>
 8106d66:	1cc4      	adds	r4, r0, #3
 8106d68:	f024 0403 	bic.w	r4, r4, #3
 8106d6c:	42a0      	cmp	r0, r4
 8106d6e:	d0e3      	beq.n	8106d38 <_malloc_r+0x64>
 8106d70:	1a21      	subs	r1, r4, r0
 8106d72:	4630      	mov	r0, r6
 8106d74:	f000 ff10 	bl	8107b98 <_sbrk_r>
 8106d78:	3001      	adds	r0, #1
 8106d7a:	d1dd      	bne.n	8106d38 <_malloc_r+0x64>
 8106d7c:	e7cf      	b.n	8106d1e <_malloc_r+0x4a>
 8106d7e:	bf00      	nop
 8106d80:	1000020c 	.word	0x1000020c
 8106d84:	10000210 	.word	0x10000210

08106d88 <__cvt>:
 8106d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106d8c:	ec55 4b10 	vmov	r4, r5, d0
 8106d90:	2d00      	cmp	r5, #0
 8106d92:	460e      	mov	r6, r1
 8106d94:	4619      	mov	r1, r3
 8106d96:	462b      	mov	r3, r5
 8106d98:	bfbb      	ittet	lt
 8106d9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8106d9e:	461d      	movlt	r5, r3
 8106da0:	2300      	movge	r3, #0
 8106da2:	232d      	movlt	r3, #45	; 0x2d
 8106da4:	700b      	strb	r3, [r1, #0]
 8106da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8106da8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8106dac:	4691      	mov	r9, r2
 8106dae:	f023 0820 	bic.w	r8, r3, #32
 8106db2:	bfbc      	itt	lt
 8106db4:	4622      	movlt	r2, r4
 8106db6:	4614      	movlt	r4, r2
 8106db8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106dbc:	d005      	beq.n	8106dca <__cvt+0x42>
 8106dbe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8106dc2:	d100      	bne.n	8106dc6 <__cvt+0x3e>
 8106dc4:	3601      	adds	r6, #1
 8106dc6:	2102      	movs	r1, #2
 8106dc8:	e000      	b.n	8106dcc <__cvt+0x44>
 8106dca:	2103      	movs	r1, #3
 8106dcc:	ab03      	add	r3, sp, #12
 8106dce:	9301      	str	r3, [sp, #4]
 8106dd0:	ab02      	add	r3, sp, #8
 8106dd2:	9300      	str	r3, [sp, #0]
 8106dd4:	ec45 4b10 	vmov	d0, r4, r5
 8106dd8:	4653      	mov	r3, sl
 8106dda:	4632      	mov	r2, r6
 8106ddc:	f002 f83c 	bl	8108e58 <_dtoa_r>
 8106de0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8106de4:	4607      	mov	r7, r0
 8106de6:	d102      	bne.n	8106dee <__cvt+0x66>
 8106de8:	f019 0f01 	tst.w	r9, #1
 8106dec:	d022      	beq.n	8106e34 <__cvt+0xac>
 8106dee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106df2:	eb07 0906 	add.w	r9, r7, r6
 8106df6:	d110      	bne.n	8106e1a <__cvt+0x92>
 8106df8:	783b      	ldrb	r3, [r7, #0]
 8106dfa:	2b30      	cmp	r3, #48	; 0x30
 8106dfc:	d10a      	bne.n	8106e14 <__cvt+0x8c>
 8106dfe:	2200      	movs	r2, #0
 8106e00:	2300      	movs	r3, #0
 8106e02:	4620      	mov	r0, r4
 8106e04:	4629      	mov	r1, r5
 8106e06:	f7f9 fee7 	bl	8100bd8 <__aeabi_dcmpeq>
 8106e0a:	b918      	cbnz	r0, 8106e14 <__cvt+0x8c>
 8106e0c:	f1c6 0601 	rsb	r6, r6, #1
 8106e10:	f8ca 6000 	str.w	r6, [sl]
 8106e14:	f8da 3000 	ldr.w	r3, [sl]
 8106e18:	4499      	add	r9, r3
 8106e1a:	2200      	movs	r2, #0
 8106e1c:	2300      	movs	r3, #0
 8106e1e:	4620      	mov	r0, r4
 8106e20:	4629      	mov	r1, r5
 8106e22:	f7f9 fed9 	bl	8100bd8 <__aeabi_dcmpeq>
 8106e26:	b108      	cbz	r0, 8106e2c <__cvt+0xa4>
 8106e28:	f8cd 900c 	str.w	r9, [sp, #12]
 8106e2c:	2230      	movs	r2, #48	; 0x30
 8106e2e:	9b03      	ldr	r3, [sp, #12]
 8106e30:	454b      	cmp	r3, r9
 8106e32:	d307      	bcc.n	8106e44 <__cvt+0xbc>
 8106e34:	9b03      	ldr	r3, [sp, #12]
 8106e36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8106e38:	1bdb      	subs	r3, r3, r7
 8106e3a:	4638      	mov	r0, r7
 8106e3c:	6013      	str	r3, [r2, #0]
 8106e3e:	b004      	add	sp, #16
 8106e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106e44:	1c59      	adds	r1, r3, #1
 8106e46:	9103      	str	r1, [sp, #12]
 8106e48:	701a      	strb	r2, [r3, #0]
 8106e4a:	e7f0      	b.n	8106e2e <__cvt+0xa6>

08106e4c <__exponent>:
 8106e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8106e4e:	4603      	mov	r3, r0
 8106e50:	2900      	cmp	r1, #0
 8106e52:	bfb8      	it	lt
 8106e54:	4249      	neglt	r1, r1
 8106e56:	f803 2b02 	strb.w	r2, [r3], #2
 8106e5a:	bfb4      	ite	lt
 8106e5c:	222d      	movlt	r2, #45	; 0x2d
 8106e5e:	222b      	movge	r2, #43	; 0x2b
 8106e60:	2909      	cmp	r1, #9
 8106e62:	7042      	strb	r2, [r0, #1]
 8106e64:	dd2a      	ble.n	8106ebc <__exponent+0x70>
 8106e66:	f10d 0407 	add.w	r4, sp, #7
 8106e6a:	46a4      	mov	ip, r4
 8106e6c:	270a      	movs	r7, #10
 8106e6e:	46a6      	mov	lr, r4
 8106e70:	460a      	mov	r2, r1
 8106e72:	fb91 f6f7 	sdiv	r6, r1, r7
 8106e76:	fb07 1516 	mls	r5, r7, r6, r1
 8106e7a:	3530      	adds	r5, #48	; 0x30
 8106e7c:	2a63      	cmp	r2, #99	; 0x63
 8106e7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8106e82:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8106e86:	4631      	mov	r1, r6
 8106e88:	dcf1      	bgt.n	8106e6e <__exponent+0x22>
 8106e8a:	3130      	adds	r1, #48	; 0x30
 8106e8c:	f1ae 0502 	sub.w	r5, lr, #2
 8106e90:	f804 1c01 	strb.w	r1, [r4, #-1]
 8106e94:	1c44      	adds	r4, r0, #1
 8106e96:	4629      	mov	r1, r5
 8106e98:	4561      	cmp	r1, ip
 8106e9a:	d30a      	bcc.n	8106eb2 <__exponent+0x66>
 8106e9c:	f10d 0209 	add.w	r2, sp, #9
 8106ea0:	eba2 020e 	sub.w	r2, r2, lr
 8106ea4:	4565      	cmp	r5, ip
 8106ea6:	bf88      	it	hi
 8106ea8:	2200      	movhi	r2, #0
 8106eaa:	4413      	add	r3, r2
 8106eac:	1a18      	subs	r0, r3, r0
 8106eae:	b003      	add	sp, #12
 8106eb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8106eb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106eb6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8106eba:	e7ed      	b.n	8106e98 <__exponent+0x4c>
 8106ebc:	2330      	movs	r3, #48	; 0x30
 8106ebe:	3130      	adds	r1, #48	; 0x30
 8106ec0:	7083      	strb	r3, [r0, #2]
 8106ec2:	70c1      	strb	r1, [r0, #3]
 8106ec4:	1d03      	adds	r3, r0, #4
 8106ec6:	e7f1      	b.n	8106eac <__exponent+0x60>

08106ec8 <_printf_float>:
 8106ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106ecc:	ed2d 8b02 	vpush	{d8}
 8106ed0:	b08d      	sub	sp, #52	; 0x34
 8106ed2:	460c      	mov	r4, r1
 8106ed4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8106ed8:	4616      	mov	r6, r2
 8106eda:	461f      	mov	r7, r3
 8106edc:	4605      	mov	r5, r0
 8106ede:	f003 f917 	bl	810a110 <_localeconv_r>
 8106ee2:	f8d0 a000 	ldr.w	sl, [r0]
 8106ee6:	4650      	mov	r0, sl
 8106ee8:	f7f9 f9fa 	bl	81002e0 <strlen>
 8106eec:	2300      	movs	r3, #0
 8106eee:	930a      	str	r3, [sp, #40]	; 0x28
 8106ef0:	6823      	ldr	r3, [r4, #0]
 8106ef2:	9305      	str	r3, [sp, #20]
 8106ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8106ef8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8106efc:	3307      	adds	r3, #7
 8106efe:	f023 0307 	bic.w	r3, r3, #7
 8106f02:	f103 0208 	add.w	r2, r3, #8
 8106f06:	f8c8 2000 	str.w	r2, [r8]
 8106f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f0e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8106f12:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8106f16:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8106f1a:	9307      	str	r3, [sp, #28]
 8106f1c:	f8cd 8018 	str.w	r8, [sp, #24]
 8106f20:	ee08 0a10 	vmov	s16, r0
 8106f24:	4b9f      	ldr	r3, [pc, #636]	; (81071a4 <_printf_float+0x2dc>)
 8106f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8106f2e:	f7f9 fe85 	bl	8100c3c <__aeabi_dcmpun>
 8106f32:	bb88      	cbnz	r0, 8106f98 <_printf_float+0xd0>
 8106f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106f38:	4b9a      	ldr	r3, [pc, #616]	; (81071a4 <_printf_float+0x2dc>)
 8106f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8106f3e:	f7f9 fe5f 	bl	8100c00 <__aeabi_dcmple>
 8106f42:	bb48      	cbnz	r0, 8106f98 <_printf_float+0xd0>
 8106f44:	2200      	movs	r2, #0
 8106f46:	2300      	movs	r3, #0
 8106f48:	4640      	mov	r0, r8
 8106f4a:	4649      	mov	r1, r9
 8106f4c:	f7f9 fe4e 	bl	8100bec <__aeabi_dcmplt>
 8106f50:	b110      	cbz	r0, 8106f58 <_printf_float+0x90>
 8106f52:	232d      	movs	r3, #45	; 0x2d
 8106f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106f58:	4b93      	ldr	r3, [pc, #588]	; (81071a8 <_printf_float+0x2e0>)
 8106f5a:	4894      	ldr	r0, [pc, #592]	; (81071ac <_printf_float+0x2e4>)
 8106f5c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8106f60:	bf94      	ite	ls
 8106f62:	4698      	movls	r8, r3
 8106f64:	4680      	movhi	r8, r0
 8106f66:	2303      	movs	r3, #3
 8106f68:	6123      	str	r3, [r4, #16]
 8106f6a:	9b05      	ldr	r3, [sp, #20]
 8106f6c:	f023 0204 	bic.w	r2, r3, #4
 8106f70:	6022      	str	r2, [r4, #0]
 8106f72:	f04f 0900 	mov.w	r9, #0
 8106f76:	9700      	str	r7, [sp, #0]
 8106f78:	4633      	mov	r3, r6
 8106f7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8106f7c:	4621      	mov	r1, r4
 8106f7e:	4628      	mov	r0, r5
 8106f80:	f000 f9d8 	bl	8107334 <_printf_common>
 8106f84:	3001      	adds	r0, #1
 8106f86:	f040 8090 	bne.w	81070aa <_printf_float+0x1e2>
 8106f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8106f8e:	b00d      	add	sp, #52	; 0x34
 8106f90:	ecbd 8b02 	vpop	{d8}
 8106f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106f98:	4642      	mov	r2, r8
 8106f9a:	464b      	mov	r3, r9
 8106f9c:	4640      	mov	r0, r8
 8106f9e:	4649      	mov	r1, r9
 8106fa0:	f7f9 fe4c 	bl	8100c3c <__aeabi_dcmpun>
 8106fa4:	b140      	cbz	r0, 8106fb8 <_printf_float+0xf0>
 8106fa6:	464b      	mov	r3, r9
 8106fa8:	2b00      	cmp	r3, #0
 8106faa:	bfbc      	itt	lt
 8106fac:	232d      	movlt	r3, #45	; 0x2d
 8106fae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8106fb2:	487f      	ldr	r0, [pc, #508]	; (81071b0 <_printf_float+0x2e8>)
 8106fb4:	4b7f      	ldr	r3, [pc, #508]	; (81071b4 <_printf_float+0x2ec>)
 8106fb6:	e7d1      	b.n	8106f5c <_printf_float+0x94>
 8106fb8:	6863      	ldr	r3, [r4, #4]
 8106fba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8106fbe:	9206      	str	r2, [sp, #24]
 8106fc0:	1c5a      	adds	r2, r3, #1
 8106fc2:	d13f      	bne.n	8107044 <_printf_float+0x17c>
 8106fc4:	2306      	movs	r3, #6
 8106fc6:	6063      	str	r3, [r4, #4]
 8106fc8:	9b05      	ldr	r3, [sp, #20]
 8106fca:	6861      	ldr	r1, [r4, #4]
 8106fcc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8106fd0:	2300      	movs	r3, #0
 8106fd2:	9303      	str	r3, [sp, #12]
 8106fd4:	ab0a      	add	r3, sp, #40	; 0x28
 8106fd6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8106fda:	ab09      	add	r3, sp, #36	; 0x24
 8106fdc:	ec49 8b10 	vmov	d0, r8, r9
 8106fe0:	9300      	str	r3, [sp, #0]
 8106fe2:	6022      	str	r2, [r4, #0]
 8106fe4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8106fe8:	4628      	mov	r0, r5
 8106fea:	f7ff fecd 	bl	8106d88 <__cvt>
 8106fee:	9b06      	ldr	r3, [sp, #24]
 8106ff0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8106ff2:	2b47      	cmp	r3, #71	; 0x47
 8106ff4:	4680      	mov	r8, r0
 8106ff6:	d108      	bne.n	810700a <_printf_float+0x142>
 8106ff8:	1cc8      	adds	r0, r1, #3
 8106ffa:	db02      	blt.n	8107002 <_printf_float+0x13a>
 8106ffc:	6863      	ldr	r3, [r4, #4]
 8106ffe:	4299      	cmp	r1, r3
 8107000:	dd41      	ble.n	8107086 <_printf_float+0x1be>
 8107002:	f1ab 0b02 	sub.w	fp, fp, #2
 8107006:	fa5f fb8b 	uxtb.w	fp, fp
 810700a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810700e:	d820      	bhi.n	8107052 <_printf_float+0x18a>
 8107010:	3901      	subs	r1, #1
 8107012:	465a      	mov	r2, fp
 8107014:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107018:	9109      	str	r1, [sp, #36]	; 0x24
 810701a:	f7ff ff17 	bl	8106e4c <__exponent>
 810701e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107020:	1813      	adds	r3, r2, r0
 8107022:	2a01      	cmp	r2, #1
 8107024:	4681      	mov	r9, r0
 8107026:	6123      	str	r3, [r4, #16]
 8107028:	dc02      	bgt.n	8107030 <_printf_float+0x168>
 810702a:	6822      	ldr	r2, [r4, #0]
 810702c:	07d2      	lsls	r2, r2, #31
 810702e:	d501      	bpl.n	8107034 <_printf_float+0x16c>
 8107030:	3301      	adds	r3, #1
 8107032:	6123      	str	r3, [r4, #16]
 8107034:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107038:	2b00      	cmp	r3, #0
 810703a:	d09c      	beq.n	8106f76 <_printf_float+0xae>
 810703c:	232d      	movs	r3, #45	; 0x2d
 810703e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107042:	e798      	b.n	8106f76 <_printf_float+0xae>
 8107044:	9a06      	ldr	r2, [sp, #24]
 8107046:	2a47      	cmp	r2, #71	; 0x47
 8107048:	d1be      	bne.n	8106fc8 <_printf_float+0x100>
 810704a:	2b00      	cmp	r3, #0
 810704c:	d1bc      	bne.n	8106fc8 <_printf_float+0x100>
 810704e:	2301      	movs	r3, #1
 8107050:	e7b9      	b.n	8106fc6 <_printf_float+0xfe>
 8107052:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107056:	d118      	bne.n	810708a <_printf_float+0x1c2>
 8107058:	2900      	cmp	r1, #0
 810705a:	6863      	ldr	r3, [r4, #4]
 810705c:	dd0b      	ble.n	8107076 <_printf_float+0x1ae>
 810705e:	6121      	str	r1, [r4, #16]
 8107060:	b913      	cbnz	r3, 8107068 <_printf_float+0x1a0>
 8107062:	6822      	ldr	r2, [r4, #0]
 8107064:	07d0      	lsls	r0, r2, #31
 8107066:	d502      	bpl.n	810706e <_printf_float+0x1a6>
 8107068:	3301      	adds	r3, #1
 810706a:	440b      	add	r3, r1
 810706c:	6123      	str	r3, [r4, #16]
 810706e:	65a1      	str	r1, [r4, #88]	; 0x58
 8107070:	f04f 0900 	mov.w	r9, #0
 8107074:	e7de      	b.n	8107034 <_printf_float+0x16c>
 8107076:	b913      	cbnz	r3, 810707e <_printf_float+0x1b6>
 8107078:	6822      	ldr	r2, [r4, #0]
 810707a:	07d2      	lsls	r2, r2, #31
 810707c:	d501      	bpl.n	8107082 <_printf_float+0x1ba>
 810707e:	3302      	adds	r3, #2
 8107080:	e7f4      	b.n	810706c <_printf_float+0x1a4>
 8107082:	2301      	movs	r3, #1
 8107084:	e7f2      	b.n	810706c <_printf_float+0x1a4>
 8107086:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810708a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810708c:	4299      	cmp	r1, r3
 810708e:	db05      	blt.n	810709c <_printf_float+0x1d4>
 8107090:	6823      	ldr	r3, [r4, #0]
 8107092:	6121      	str	r1, [r4, #16]
 8107094:	07d8      	lsls	r0, r3, #31
 8107096:	d5ea      	bpl.n	810706e <_printf_float+0x1a6>
 8107098:	1c4b      	adds	r3, r1, #1
 810709a:	e7e7      	b.n	810706c <_printf_float+0x1a4>
 810709c:	2900      	cmp	r1, #0
 810709e:	bfd4      	ite	le
 81070a0:	f1c1 0202 	rsble	r2, r1, #2
 81070a4:	2201      	movgt	r2, #1
 81070a6:	4413      	add	r3, r2
 81070a8:	e7e0      	b.n	810706c <_printf_float+0x1a4>
 81070aa:	6823      	ldr	r3, [r4, #0]
 81070ac:	055a      	lsls	r2, r3, #21
 81070ae:	d407      	bmi.n	81070c0 <_printf_float+0x1f8>
 81070b0:	6923      	ldr	r3, [r4, #16]
 81070b2:	4642      	mov	r2, r8
 81070b4:	4631      	mov	r1, r6
 81070b6:	4628      	mov	r0, r5
 81070b8:	47b8      	blx	r7
 81070ba:	3001      	adds	r0, #1
 81070bc:	d12c      	bne.n	8107118 <_printf_float+0x250>
 81070be:	e764      	b.n	8106f8a <_printf_float+0xc2>
 81070c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81070c4:	f240 80e0 	bls.w	8107288 <_printf_float+0x3c0>
 81070c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81070cc:	2200      	movs	r2, #0
 81070ce:	2300      	movs	r3, #0
 81070d0:	f7f9 fd82 	bl	8100bd8 <__aeabi_dcmpeq>
 81070d4:	2800      	cmp	r0, #0
 81070d6:	d034      	beq.n	8107142 <_printf_float+0x27a>
 81070d8:	4a37      	ldr	r2, [pc, #220]	; (81071b8 <_printf_float+0x2f0>)
 81070da:	2301      	movs	r3, #1
 81070dc:	4631      	mov	r1, r6
 81070de:	4628      	mov	r0, r5
 81070e0:	47b8      	blx	r7
 81070e2:	3001      	adds	r0, #1
 81070e4:	f43f af51 	beq.w	8106f8a <_printf_float+0xc2>
 81070e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81070ec:	429a      	cmp	r2, r3
 81070ee:	db02      	blt.n	81070f6 <_printf_float+0x22e>
 81070f0:	6823      	ldr	r3, [r4, #0]
 81070f2:	07d8      	lsls	r0, r3, #31
 81070f4:	d510      	bpl.n	8107118 <_printf_float+0x250>
 81070f6:	ee18 3a10 	vmov	r3, s16
 81070fa:	4652      	mov	r2, sl
 81070fc:	4631      	mov	r1, r6
 81070fe:	4628      	mov	r0, r5
 8107100:	47b8      	blx	r7
 8107102:	3001      	adds	r0, #1
 8107104:	f43f af41 	beq.w	8106f8a <_printf_float+0xc2>
 8107108:	f04f 0800 	mov.w	r8, #0
 810710c:	f104 091a 	add.w	r9, r4, #26
 8107110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107112:	3b01      	subs	r3, #1
 8107114:	4543      	cmp	r3, r8
 8107116:	dc09      	bgt.n	810712c <_printf_float+0x264>
 8107118:	6823      	ldr	r3, [r4, #0]
 810711a:	079b      	lsls	r3, r3, #30
 810711c:	f100 8105 	bmi.w	810732a <_printf_float+0x462>
 8107120:	68e0      	ldr	r0, [r4, #12]
 8107122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107124:	4298      	cmp	r0, r3
 8107126:	bfb8      	it	lt
 8107128:	4618      	movlt	r0, r3
 810712a:	e730      	b.n	8106f8e <_printf_float+0xc6>
 810712c:	2301      	movs	r3, #1
 810712e:	464a      	mov	r2, r9
 8107130:	4631      	mov	r1, r6
 8107132:	4628      	mov	r0, r5
 8107134:	47b8      	blx	r7
 8107136:	3001      	adds	r0, #1
 8107138:	f43f af27 	beq.w	8106f8a <_printf_float+0xc2>
 810713c:	f108 0801 	add.w	r8, r8, #1
 8107140:	e7e6      	b.n	8107110 <_printf_float+0x248>
 8107142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107144:	2b00      	cmp	r3, #0
 8107146:	dc39      	bgt.n	81071bc <_printf_float+0x2f4>
 8107148:	4a1b      	ldr	r2, [pc, #108]	; (81071b8 <_printf_float+0x2f0>)
 810714a:	2301      	movs	r3, #1
 810714c:	4631      	mov	r1, r6
 810714e:	4628      	mov	r0, r5
 8107150:	47b8      	blx	r7
 8107152:	3001      	adds	r0, #1
 8107154:	f43f af19 	beq.w	8106f8a <_printf_float+0xc2>
 8107158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810715c:	4313      	orrs	r3, r2
 810715e:	d102      	bne.n	8107166 <_printf_float+0x29e>
 8107160:	6823      	ldr	r3, [r4, #0]
 8107162:	07d9      	lsls	r1, r3, #31
 8107164:	d5d8      	bpl.n	8107118 <_printf_float+0x250>
 8107166:	ee18 3a10 	vmov	r3, s16
 810716a:	4652      	mov	r2, sl
 810716c:	4631      	mov	r1, r6
 810716e:	4628      	mov	r0, r5
 8107170:	47b8      	blx	r7
 8107172:	3001      	adds	r0, #1
 8107174:	f43f af09 	beq.w	8106f8a <_printf_float+0xc2>
 8107178:	f04f 0900 	mov.w	r9, #0
 810717c:	f104 0a1a 	add.w	sl, r4, #26
 8107180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107182:	425b      	negs	r3, r3
 8107184:	454b      	cmp	r3, r9
 8107186:	dc01      	bgt.n	810718c <_printf_float+0x2c4>
 8107188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810718a:	e792      	b.n	81070b2 <_printf_float+0x1ea>
 810718c:	2301      	movs	r3, #1
 810718e:	4652      	mov	r2, sl
 8107190:	4631      	mov	r1, r6
 8107192:	4628      	mov	r0, r5
 8107194:	47b8      	blx	r7
 8107196:	3001      	adds	r0, #1
 8107198:	f43f aef7 	beq.w	8106f8a <_printf_float+0xc2>
 810719c:	f109 0901 	add.w	r9, r9, #1
 81071a0:	e7ee      	b.n	8107180 <_printf_float+0x2b8>
 81071a2:	bf00      	nop
 81071a4:	7fefffff 	.word	0x7fefffff
 81071a8:	0810b4a4 	.word	0x0810b4a4
 81071ac:	0810b4a8 	.word	0x0810b4a8
 81071b0:	0810b4b0 	.word	0x0810b4b0
 81071b4:	0810b4ac 	.word	0x0810b4ac
 81071b8:	0810b4b4 	.word	0x0810b4b4
 81071bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81071be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81071c0:	429a      	cmp	r2, r3
 81071c2:	bfa8      	it	ge
 81071c4:	461a      	movge	r2, r3
 81071c6:	2a00      	cmp	r2, #0
 81071c8:	4691      	mov	r9, r2
 81071ca:	dc37      	bgt.n	810723c <_printf_float+0x374>
 81071cc:	f04f 0b00 	mov.w	fp, #0
 81071d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81071d4:	f104 021a 	add.w	r2, r4, #26
 81071d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 81071da:	9305      	str	r3, [sp, #20]
 81071dc:	eba3 0309 	sub.w	r3, r3, r9
 81071e0:	455b      	cmp	r3, fp
 81071e2:	dc33      	bgt.n	810724c <_printf_float+0x384>
 81071e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81071e8:	429a      	cmp	r2, r3
 81071ea:	db3b      	blt.n	8107264 <_printf_float+0x39c>
 81071ec:	6823      	ldr	r3, [r4, #0]
 81071ee:	07da      	lsls	r2, r3, #31
 81071f0:	d438      	bmi.n	8107264 <_printf_float+0x39c>
 81071f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81071f4:	9b05      	ldr	r3, [sp, #20]
 81071f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 81071f8:	1ad3      	subs	r3, r2, r3
 81071fa:	eba2 0901 	sub.w	r9, r2, r1
 81071fe:	4599      	cmp	r9, r3
 8107200:	bfa8      	it	ge
 8107202:	4699      	movge	r9, r3
 8107204:	f1b9 0f00 	cmp.w	r9, #0
 8107208:	dc35      	bgt.n	8107276 <_printf_float+0x3ae>
 810720a:	f04f 0800 	mov.w	r8, #0
 810720e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107212:	f104 0a1a 	add.w	sl, r4, #26
 8107216:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810721a:	1a9b      	subs	r3, r3, r2
 810721c:	eba3 0309 	sub.w	r3, r3, r9
 8107220:	4543      	cmp	r3, r8
 8107222:	f77f af79 	ble.w	8107118 <_printf_float+0x250>
 8107226:	2301      	movs	r3, #1
 8107228:	4652      	mov	r2, sl
 810722a:	4631      	mov	r1, r6
 810722c:	4628      	mov	r0, r5
 810722e:	47b8      	blx	r7
 8107230:	3001      	adds	r0, #1
 8107232:	f43f aeaa 	beq.w	8106f8a <_printf_float+0xc2>
 8107236:	f108 0801 	add.w	r8, r8, #1
 810723a:	e7ec      	b.n	8107216 <_printf_float+0x34e>
 810723c:	4613      	mov	r3, r2
 810723e:	4631      	mov	r1, r6
 8107240:	4642      	mov	r2, r8
 8107242:	4628      	mov	r0, r5
 8107244:	47b8      	blx	r7
 8107246:	3001      	adds	r0, #1
 8107248:	d1c0      	bne.n	81071cc <_printf_float+0x304>
 810724a:	e69e      	b.n	8106f8a <_printf_float+0xc2>
 810724c:	2301      	movs	r3, #1
 810724e:	4631      	mov	r1, r6
 8107250:	4628      	mov	r0, r5
 8107252:	9205      	str	r2, [sp, #20]
 8107254:	47b8      	blx	r7
 8107256:	3001      	adds	r0, #1
 8107258:	f43f ae97 	beq.w	8106f8a <_printf_float+0xc2>
 810725c:	9a05      	ldr	r2, [sp, #20]
 810725e:	f10b 0b01 	add.w	fp, fp, #1
 8107262:	e7b9      	b.n	81071d8 <_printf_float+0x310>
 8107264:	ee18 3a10 	vmov	r3, s16
 8107268:	4652      	mov	r2, sl
 810726a:	4631      	mov	r1, r6
 810726c:	4628      	mov	r0, r5
 810726e:	47b8      	blx	r7
 8107270:	3001      	adds	r0, #1
 8107272:	d1be      	bne.n	81071f2 <_printf_float+0x32a>
 8107274:	e689      	b.n	8106f8a <_printf_float+0xc2>
 8107276:	9a05      	ldr	r2, [sp, #20]
 8107278:	464b      	mov	r3, r9
 810727a:	4442      	add	r2, r8
 810727c:	4631      	mov	r1, r6
 810727e:	4628      	mov	r0, r5
 8107280:	47b8      	blx	r7
 8107282:	3001      	adds	r0, #1
 8107284:	d1c1      	bne.n	810720a <_printf_float+0x342>
 8107286:	e680      	b.n	8106f8a <_printf_float+0xc2>
 8107288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810728a:	2a01      	cmp	r2, #1
 810728c:	dc01      	bgt.n	8107292 <_printf_float+0x3ca>
 810728e:	07db      	lsls	r3, r3, #31
 8107290:	d538      	bpl.n	8107304 <_printf_float+0x43c>
 8107292:	2301      	movs	r3, #1
 8107294:	4642      	mov	r2, r8
 8107296:	4631      	mov	r1, r6
 8107298:	4628      	mov	r0, r5
 810729a:	47b8      	blx	r7
 810729c:	3001      	adds	r0, #1
 810729e:	f43f ae74 	beq.w	8106f8a <_printf_float+0xc2>
 81072a2:	ee18 3a10 	vmov	r3, s16
 81072a6:	4652      	mov	r2, sl
 81072a8:	4631      	mov	r1, r6
 81072aa:	4628      	mov	r0, r5
 81072ac:	47b8      	blx	r7
 81072ae:	3001      	adds	r0, #1
 81072b0:	f43f ae6b 	beq.w	8106f8a <_printf_float+0xc2>
 81072b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 81072b8:	2200      	movs	r2, #0
 81072ba:	2300      	movs	r3, #0
 81072bc:	f7f9 fc8c 	bl	8100bd8 <__aeabi_dcmpeq>
 81072c0:	b9d8      	cbnz	r0, 81072fa <_printf_float+0x432>
 81072c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81072c4:	f108 0201 	add.w	r2, r8, #1
 81072c8:	3b01      	subs	r3, #1
 81072ca:	4631      	mov	r1, r6
 81072cc:	4628      	mov	r0, r5
 81072ce:	47b8      	blx	r7
 81072d0:	3001      	adds	r0, #1
 81072d2:	d10e      	bne.n	81072f2 <_printf_float+0x42a>
 81072d4:	e659      	b.n	8106f8a <_printf_float+0xc2>
 81072d6:	2301      	movs	r3, #1
 81072d8:	4652      	mov	r2, sl
 81072da:	4631      	mov	r1, r6
 81072dc:	4628      	mov	r0, r5
 81072de:	47b8      	blx	r7
 81072e0:	3001      	adds	r0, #1
 81072e2:	f43f ae52 	beq.w	8106f8a <_printf_float+0xc2>
 81072e6:	f108 0801 	add.w	r8, r8, #1
 81072ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81072ec:	3b01      	subs	r3, #1
 81072ee:	4543      	cmp	r3, r8
 81072f0:	dcf1      	bgt.n	81072d6 <_printf_float+0x40e>
 81072f2:	464b      	mov	r3, r9
 81072f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81072f8:	e6dc      	b.n	81070b4 <_printf_float+0x1ec>
 81072fa:	f04f 0800 	mov.w	r8, #0
 81072fe:	f104 0a1a 	add.w	sl, r4, #26
 8107302:	e7f2      	b.n	81072ea <_printf_float+0x422>
 8107304:	2301      	movs	r3, #1
 8107306:	4642      	mov	r2, r8
 8107308:	e7df      	b.n	81072ca <_printf_float+0x402>
 810730a:	2301      	movs	r3, #1
 810730c:	464a      	mov	r2, r9
 810730e:	4631      	mov	r1, r6
 8107310:	4628      	mov	r0, r5
 8107312:	47b8      	blx	r7
 8107314:	3001      	adds	r0, #1
 8107316:	f43f ae38 	beq.w	8106f8a <_printf_float+0xc2>
 810731a:	f108 0801 	add.w	r8, r8, #1
 810731e:	68e3      	ldr	r3, [r4, #12]
 8107320:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8107322:	1a5b      	subs	r3, r3, r1
 8107324:	4543      	cmp	r3, r8
 8107326:	dcf0      	bgt.n	810730a <_printf_float+0x442>
 8107328:	e6fa      	b.n	8107120 <_printf_float+0x258>
 810732a:	f04f 0800 	mov.w	r8, #0
 810732e:	f104 0919 	add.w	r9, r4, #25
 8107332:	e7f4      	b.n	810731e <_printf_float+0x456>

08107334 <_printf_common>:
 8107334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107338:	4616      	mov	r6, r2
 810733a:	4699      	mov	r9, r3
 810733c:	688a      	ldr	r2, [r1, #8]
 810733e:	690b      	ldr	r3, [r1, #16]
 8107340:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8107344:	4293      	cmp	r3, r2
 8107346:	bfb8      	it	lt
 8107348:	4613      	movlt	r3, r2
 810734a:	6033      	str	r3, [r6, #0]
 810734c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8107350:	4607      	mov	r7, r0
 8107352:	460c      	mov	r4, r1
 8107354:	b10a      	cbz	r2, 810735a <_printf_common+0x26>
 8107356:	3301      	adds	r3, #1
 8107358:	6033      	str	r3, [r6, #0]
 810735a:	6823      	ldr	r3, [r4, #0]
 810735c:	0699      	lsls	r1, r3, #26
 810735e:	bf42      	ittt	mi
 8107360:	6833      	ldrmi	r3, [r6, #0]
 8107362:	3302      	addmi	r3, #2
 8107364:	6033      	strmi	r3, [r6, #0]
 8107366:	6825      	ldr	r5, [r4, #0]
 8107368:	f015 0506 	ands.w	r5, r5, #6
 810736c:	d106      	bne.n	810737c <_printf_common+0x48>
 810736e:	f104 0a19 	add.w	sl, r4, #25
 8107372:	68e3      	ldr	r3, [r4, #12]
 8107374:	6832      	ldr	r2, [r6, #0]
 8107376:	1a9b      	subs	r3, r3, r2
 8107378:	42ab      	cmp	r3, r5
 810737a:	dc26      	bgt.n	81073ca <_printf_common+0x96>
 810737c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8107380:	1e13      	subs	r3, r2, #0
 8107382:	6822      	ldr	r2, [r4, #0]
 8107384:	bf18      	it	ne
 8107386:	2301      	movne	r3, #1
 8107388:	0692      	lsls	r2, r2, #26
 810738a:	d42b      	bmi.n	81073e4 <_printf_common+0xb0>
 810738c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107390:	4649      	mov	r1, r9
 8107392:	4638      	mov	r0, r7
 8107394:	47c0      	blx	r8
 8107396:	3001      	adds	r0, #1
 8107398:	d01e      	beq.n	81073d8 <_printf_common+0xa4>
 810739a:	6823      	ldr	r3, [r4, #0]
 810739c:	68e5      	ldr	r5, [r4, #12]
 810739e:	6832      	ldr	r2, [r6, #0]
 81073a0:	f003 0306 	and.w	r3, r3, #6
 81073a4:	2b04      	cmp	r3, #4
 81073a6:	bf08      	it	eq
 81073a8:	1aad      	subeq	r5, r5, r2
 81073aa:	68a3      	ldr	r3, [r4, #8]
 81073ac:	6922      	ldr	r2, [r4, #16]
 81073ae:	bf0c      	ite	eq
 81073b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81073b4:	2500      	movne	r5, #0
 81073b6:	4293      	cmp	r3, r2
 81073b8:	bfc4      	itt	gt
 81073ba:	1a9b      	subgt	r3, r3, r2
 81073bc:	18ed      	addgt	r5, r5, r3
 81073be:	2600      	movs	r6, #0
 81073c0:	341a      	adds	r4, #26
 81073c2:	42b5      	cmp	r5, r6
 81073c4:	d11a      	bne.n	81073fc <_printf_common+0xc8>
 81073c6:	2000      	movs	r0, #0
 81073c8:	e008      	b.n	81073dc <_printf_common+0xa8>
 81073ca:	2301      	movs	r3, #1
 81073cc:	4652      	mov	r2, sl
 81073ce:	4649      	mov	r1, r9
 81073d0:	4638      	mov	r0, r7
 81073d2:	47c0      	blx	r8
 81073d4:	3001      	adds	r0, #1
 81073d6:	d103      	bne.n	81073e0 <_printf_common+0xac>
 81073d8:	f04f 30ff 	mov.w	r0, #4294967295
 81073dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81073e0:	3501      	adds	r5, #1
 81073e2:	e7c6      	b.n	8107372 <_printf_common+0x3e>
 81073e4:	18e1      	adds	r1, r4, r3
 81073e6:	1c5a      	adds	r2, r3, #1
 81073e8:	2030      	movs	r0, #48	; 0x30
 81073ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81073ee:	4422      	add	r2, r4
 81073f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81073f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81073f8:	3302      	adds	r3, #2
 81073fa:	e7c7      	b.n	810738c <_printf_common+0x58>
 81073fc:	2301      	movs	r3, #1
 81073fe:	4622      	mov	r2, r4
 8107400:	4649      	mov	r1, r9
 8107402:	4638      	mov	r0, r7
 8107404:	47c0      	blx	r8
 8107406:	3001      	adds	r0, #1
 8107408:	d0e6      	beq.n	81073d8 <_printf_common+0xa4>
 810740a:	3601      	adds	r6, #1
 810740c:	e7d9      	b.n	81073c2 <_printf_common+0x8e>
	...

08107410 <_printf_i>:
 8107410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107414:	460c      	mov	r4, r1
 8107416:	4691      	mov	r9, r2
 8107418:	7e27      	ldrb	r7, [r4, #24]
 810741a:	990c      	ldr	r1, [sp, #48]	; 0x30
 810741c:	2f78      	cmp	r7, #120	; 0x78
 810741e:	4680      	mov	r8, r0
 8107420:	469a      	mov	sl, r3
 8107422:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107426:	d807      	bhi.n	8107438 <_printf_i+0x28>
 8107428:	2f62      	cmp	r7, #98	; 0x62
 810742a:	d80a      	bhi.n	8107442 <_printf_i+0x32>
 810742c:	2f00      	cmp	r7, #0
 810742e:	f000 80d8 	beq.w	81075e2 <_printf_i+0x1d2>
 8107432:	2f58      	cmp	r7, #88	; 0x58
 8107434:	f000 80a3 	beq.w	810757e <_printf_i+0x16e>
 8107438:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810743c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8107440:	e03a      	b.n	81074b8 <_printf_i+0xa8>
 8107442:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8107446:	2b15      	cmp	r3, #21
 8107448:	d8f6      	bhi.n	8107438 <_printf_i+0x28>
 810744a:	a001      	add	r0, pc, #4	; (adr r0, 8107450 <_printf_i+0x40>)
 810744c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8107450:	081074a9 	.word	0x081074a9
 8107454:	081074bd 	.word	0x081074bd
 8107458:	08107439 	.word	0x08107439
 810745c:	08107439 	.word	0x08107439
 8107460:	08107439 	.word	0x08107439
 8107464:	08107439 	.word	0x08107439
 8107468:	081074bd 	.word	0x081074bd
 810746c:	08107439 	.word	0x08107439
 8107470:	08107439 	.word	0x08107439
 8107474:	08107439 	.word	0x08107439
 8107478:	08107439 	.word	0x08107439
 810747c:	081075c9 	.word	0x081075c9
 8107480:	081074ed 	.word	0x081074ed
 8107484:	081075ab 	.word	0x081075ab
 8107488:	08107439 	.word	0x08107439
 810748c:	08107439 	.word	0x08107439
 8107490:	081075eb 	.word	0x081075eb
 8107494:	08107439 	.word	0x08107439
 8107498:	081074ed 	.word	0x081074ed
 810749c:	08107439 	.word	0x08107439
 81074a0:	08107439 	.word	0x08107439
 81074a4:	081075b3 	.word	0x081075b3
 81074a8:	680b      	ldr	r3, [r1, #0]
 81074aa:	1d1a      	adds	r2, r3, #4
 81074ac:	681b      	ldr	r3, [r3, #0]
 81074ae:	600a      	str	r2, [r1, #0]
 81074b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81074b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 81074b8:	2301      	movs	r3, #1
 81074ba:	e0a3      	b.n	8107604 <_printf_i+0x1f4>
 81074bc:	6825      	ldr	r5, [r4, #0]
 81074be:	6808      	ldr	r0, [r1, #0]
 81074c0:	062e      	lsls	r6, r5, #24
 81074c2:	f100 0304 	add.w	r3, r0, #4
 81074c6:	d50a      	bpl.n	81074de <_printf_i+0xce>
 81074c8:	6805      	ldr	r5, [r0, #0]
 81074ca:	600b      	str	r3, [r1, #0]
 81074cc:	2d00      	cmp	r5, #0
 81074ce:	da03      	bge.n	81074d8 <_printf_i+0xc8>
 81074d0:	232d      	movs	r3, #45	; 0x2d
 81074d2:	426d      	negs	r5, r5
 81074d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81074d8:	485e      	ldr	r0, [pc, #376]	; (8107654 <_printf_i+0x244>)
 81074da:	230a      	movs	r3, #10
 81074dc:	e019      	b.n	8107512 <_printf_i+0x102>
 81074de:	f015 0f40 	tst.w	r5, #64	; 0x40
 81074e2:	6805      	ldr	r5, [r0, #0]
 81074e4:	600b      	str	r3, [r1, #0]
 81074e6:	bf18      	it	ne
 81074e8:	b22d      	sxthne	r5, r5
 81074ea:	e7ef      	b.n	81074cc <_printf_i+0xbc>
 81074ec:	680b      	ldr	r3, [r1, #0]
 81074ee:	6825      	ldr	r5, [r4, #0]
 81074f0:	1d18      	adds	r0, r3, #4
 81074f2:	6008      	str	r0, [r1, #0]
 81074f4:	0628      	lsls	r0, r5, #24
 81074f6:	d501      	bpl.n	81074fc <_printf_i+0xec>
 81074f8:	681d      	ldr	r5, [r3, #0]
 81074fa:	e002      	b.n	8107502 <_printf_i+0xf2>
 81074fc:	0669      	lsls	r1, r5, #25
 81074fe:	d5fb      	bpl.n	81074f8 <_printf_i+0xe8>
 8107500:	881d      	ldrh	r5, [r3, #0]
 8107502:	4854      	ldr	r0, [pc, #336]	; (8107654 <_printf_i+0x244>)
 8107504:	2f6f      	cmp	r7, #111	; 0x6f
 8107506:	bf0c      	ite	eq
 8107508:	2308      	moveq	r3, #8
 810750a:	230a      	movne	r3, #10
 810750c:	2100      	movs	r1, #0
 810750e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8107512:	6866      	ldr	r6, [r4, #4]
 8107514:	60a6      	str	r6, [r4, #8]
 8107516:	2e00      	cmp	r6, #0
 8107518:	bfa2      	ittt	ge
 810751a:	6821      	ldrge	r1, [r4, #0]
 810751c:	f021 0104 	bicge.w	r1, r1, #4
 8107520:	6021      	strge	r1, [r4, #0]
 8107522:	b90d      	cbnz	r5, 8107528 <_printf_i+0x118>
 8107524:	2e00      	cmp	r6, #0
 8107526:	d04d      	beq.n	81075c4 <_printf_i+0x1b4>
 8107528:	4616      	mov	r6, r2
 810752a:	fbb5 f1f3 	udiv	r1, r5, r3
 810752e:	fb03 5711 	mls	r7, r3, r1, r5
 8107532:	5dc7      	ldrb	r7, [r0, r7]
 8107534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8107538:	462f      	mov	r7, r5
 810753a:	42bb      	cmp	r3, r7
 810753c:	460d      	mov	r5, r1
 810753e:	d9f4      	bls.n	810752a <_printf_i+0x11a>
 8107540:	2b08      	cmp	r3, #8
 8107542:	d10b      	bne.n	810755c <_printf_i+0x14c>
 8107544:	6823      	ldr	r3, [r4, #0]
 8107546:	07df      	lsls	r7, r3, #31
 8107548:	d508      	bpl.n	810755c <_printf_i+0x14c>
 810754a:	6923      	ldr	r3, [r4, #16]
 810754c:	6861      	ldr	r1, [r4, #4]
 810754e:	4299      	cmp	r1, r3
 8107550:	bfde      	ittt	le
 8107552:	2330      	movle	r3, #48	; 0x30
 8107554:	f806 3c01 	strble.w	r3, [r6, #-1]
 8107558:	f106 36ff 	addle.w	r6, r6, #4294967295
 810755c:	1b92      	subs	r2, r2, r6
 810755e:	6122      	str	r2, [r4, #16]
 8107560:	f8cd a000 	str.w	sl, [sp]
 8107564:	464b      	mov	r3, r9
 8107566:	aa03      	add	r2, sp, #12
 8107568:	4621      	mov	r1, r4
 810756a:	4640      	mov	r0, r8
 810756c:	f7ff fee2 	bl	8107334 <_printf_common>
 8107570:	3001      	adds	r0, #1
 8107572:	d14c      	bne.n	810760e <_printf_i+0x1fe>
 8107574:	f04f 30ff 	mov.w	r0, #4294967295
 8107578:	b004      	add	sp, #16
 810757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810757e:	4835      	ldr	r0, [pc, #212]	; (8107654 <_printf_i+0x244>)
 8107580:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8107584:	6823      	ldr	r3, [r4, #0]
 8107586:	680e      	ldr	r6, [r1, #0]
 8107588:	061f      	lsls	r7, r3, #24
 810758a:	f856 5b04 	ldr.w	r5, [r6], #4
 810758e:	600e      	str	r6, [r1, #0]
 8107590:	d514      	bpl.n	81075bc <_printf_i+0x1ac>
 8107592:	07d9      	lsls	r1, r3, #31
 8107594:	bf44      	itt	mi
 8107596:	f043 0320 	orrmi.w	r3, r3, #32
 810759a:	6023      	strmi	r3, [r4, #0]
 810759c:	b91d      	cbnz	r5, 81075a6 <_printf_i+0x196>
 810759e:	6823      	ldr	r3, [r4, #0]
 81075a0:	f023 0320 	bic.w	r3, r3, #32
 81075a4:	6023      	str	r3, [r4, #0]
 81075a6:	2310      	movs	r3, #16
 81075a8:	e7b0      	b.n	810750c <_printf_i+0xfc>
 81075aa:	6823      	ldr	r3, [r4, #0]
 81075ac:	f043 0320 	orr.w	r3, r3, #32
 81075b0:	6023      	str	r3, [r4, #0]
 81075b2:	2378      	movs	r3, #120	; 0x78
 81075b4:	4828      	ldr	r0, [pc, #160]	; (8107658 <_printf_i+0x248>)
 81075b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 81075ba:	e7e3      	b.n	8107584 <_printf_i+0x174>
 81075bc:	065e      	lsls	r6, r3, #25
 81075be:	bf48      	it	mi
 81075c0:	b2ad      	uxthmi	r5, r5
 81075c2:	e7e6      	b.n	8107592 <_printf_i+0x182>
 81075c4:	4616      	mov	r6, r2
 81075c6:	e7bb      	b.n	8107540 <_printf_i+0x130>
 81075c8:	680b      	ldr	r3, [r1, #0]
 81075ca:	6826      	ldr	r6, [r4, #0]
 81075cc:	6960      	ldr	r0, [r4, #20]
 81075ce:	1d1d      	adds	r5, r3, #4
 81075d0:	600d      	str	r5, [r1, #0]
 81075d2:	0635      	lsls	r5, r6, #24
 81075d4:	681b      	ldr	r3, [r3, #0]
 81075d6:	d501      	bpl.n	81075dc <_printf_i+0x1cc>
 81075d8:	6018      	str	r0, [r3, #0]
 81075da:	e002      	b.n	81075e2 <_printf_i+0x1d2>
 81075dc:	0671      	lsls	r1, r6, #25
 81075de:	d5fb      	bpl.n	81075d8 <_printf_i+0x1c8>
 81075e0:	8018      	strh	r0, [r3, #0]
 81075e2:	2300      	movs	r3, #0
 81075e4:	6123      	str	r3, [r4, #16]
 81075e6:	4616      	mov	r6, r2
 81075e8:	e7ba      	b.n	8107560 <_printf_i+0x150>
 81075ea:	680b      	ldr	r3, [r1, #0]
 81075ec:	1d1a      	adds	r2, r3, #4
 81075ee:	600a      	str	r2, [r1, #0]
 81075f0:	681e      	ldr	r6, [r3, #0]
 81075f2:	6862      	ldr	r2, [r4, #4]
 81075f4:	2100      	movs	r1, #0
 81075f6:	4630      	mov	r0, r6
 81075f8:	f7f8 fe7a 	bl	81002f0 <memchr>
 81075fc:	b108      	cbz	r0, 8107602 <_printf_i+0x1f2>
 81075fe:	1b80      	subs	r0, r0, r6
 8107600:	6060      	str	r0, [r4, #4]
 8107602:	6863      	ldr	r3, [r4, #4]
 8107604:	6123      	str	r3, [r4, #16]
 8107606:	2300      	movs	r3, #0
 8107608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810760c:	e7a8      	b.n	8107560 <_printf_i+0x150>
 810760e:	6923      	ldr	r3, [r4, #16]
 8107610:	4632      	mov	r2, r6
 8107612:	4649      	mov	r1, r9
 8107614:	4640      	mov	r0, r8
 8107616:	47d0      	blx	sl
 8107618:	3001      	adds	r0, #1
 810761a:	d0ab      	beq.n	8107574 <_printf_i+0x164>
 810761c:	6823      	ldr	r3, [r4, #0]
 810761e:	079b      	lsls	r3, r3, #30
 8107620:	d413      	bmi.n	810764a <_printf_i+0x23a>
 8107622:	68e0      	ldr	r0, [r4, #12]
 8107624:	9b03      	ldr	r3, [sp, #12]
 8107626:	4298      	cmp	r0, r3
 8107628:	bfb8      	it	lt
 810762a:	4618      	movlt	r0, r3
 810762c:	e7a4      	b.n	8107578 <_printf_i+0x168>
 810762e:	2301      	movs	r3, #1
 8107630:	4632      	mov	r2, r6
 8107632:	4649      	mov	r1, r9
 8107634:	4640      	mov	r0, r8
 8107636:	47d0      	blx	sl
 8107638:	3001      	adds	r0, #1
 810763a:	d09b      	beq.n	8107574 <_printf_i+0x164>
 810763c:	3501      	adds	r5, #1
 810763e:	68e3      	ldr	r3, [r4, #12]
 8107640:	9903      	ldr	r1, [sp, #12]
 8107642:	1a5b      	subs	r3, r3, r1
 8107644:	42ab      	cmp	r3, r5
 8107646:	dcf2      	bgt.n	810762e <_printf_i+0x21e>
 8107648:	e7eb      	b.n	8107622 <_printf_i+0x212>
 810764a:	2500      	movs	r5, #0
 810764c:	f104 0619 	add.w	r6, r4, #25
 8107650:	e7f5      	b.n	810763e <_printf_i+0x22e>
 8107652:	bf00      	nop
 8107654:	0810b4b6 	.word	0x0810b4b6
 8107658:	0810b4c7 	.word	0x0810b4c7

0810765c <_scanf_float>:
 810765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107660:	b087      	sub	sp, #28
 8107662:	4617      	mov	r7, r2
 8107664:	9303      	str	r3, [sp, #12]
 8107666:	688b      	ldr	r3, [r1, #8]
 8107668:	1e5a      	subs	r2, r3, #1
 810766a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810766e:	bf83      	ittte	hi
 8107670:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8107674:	195b      	addhi	r3, r3, r5
 8107676:	9302      	strhi	r3, [sp, #8]
 8107678:	2300      	movls	r3, #0
 810767a:	bf86      	itte	hi
 810767c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8107680:	608b      	strhi	r3, [r1, #8]
 8107682:	9302      	strls	r3, [sp, #8]
 8107684:	680b      	ldr	r3, [r1, #0]
 8107686:	468b      	mov	fp, r1
 8107688:	2500      	movs	r5, #0
 810768a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810768e:	f84b 3b1c 	str.w	r3, [fp], #28
 8107692:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8107696:	4680      	mov	r8, r0
 8107698:	460c      	mov	r4, r1
 810769a:	465e      	mov	r6, fp
 810769c:	46aa      	mov	sl, r5
 810769e:	46a9      	mov	r9, r5
 81076a0:	9501      	str	r5, [sp, #4]
 81076a2:	68a2      	ldr	r2, [r4, #8]
 81076a4:	b152      	cbz	r2, 81076bc <_scanf_float+0x60>
 81076a6:	683b      	ldr	r3, [r7, #0]
 81076a8:	781b      	ldrb	r3, [r3, #0]
 81076aa:	2b4e      	cmp	r3, #78	; 0x4e
 81076ac:	d864      	bhi.n	8107778 <_scanf_float+0x11c>
 81076ae:	2b40      	cmp	r3, #64	; 0x40
 81076b0:	d83c      	bhi.n	810772c <_scanf_float+0xd0>
 81076b2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 81076b6:	b2c8      	uxtb	r0, r1
 81076b8:	280e      	cmp	r0, #14
 81076ba:	d93a      	bls.n	8107732 <_scanf_float+0xd6>
 81076bc:	f1b9 0f00 	cmp.w	r9, #0
 81076c0:	d003      	beq.n	81076ca <_scanf_float+0x6e>
 81076c2:	6823      	ldr	r3, [r4, #0]
 81076c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81076c8:	6023      	str	r3, [r4, #0]
 81076ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 81076ce:	f1ba 0f01 	cmp.w	sl, #1
 81076d2:	f200 8113 	bhi.w	81078fc <_scanf_float+0x2a0>
 81076d6:	455e      	cmp	r6, fp
 81076d8:	f200 8105 	bhi.w	81078e6 <_scanf_float+0x28a>
 81076dc:	2501      	movs	r5, #1
 81076de:	4628      	mov	r0, r5
 81076e0:	b007      	add	sp, #28
 81076e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81076e6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 81076ea:	2a0d      	cmp	r2, #13
 81076ec:	d8e6      	bhi.n	81076bc <_scanf_float+0x60>
 81076ee:	a101      	add	r1, pc, #4	; (adr r1, 81076f4 <_scanf_float+0x98>)
 81076f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81076f4:	08107833 	.word	0x08107833
 81076f8:	081076bd 	.word	0x081076bd
 81076fc:	081076bd 	.word	0x081076bd
 8107700:	081076bd 	.word	0x081076bd
 8107704:	08107893 	.word	0x08107893
 8107708:	0810786b 	.word	0x0810786b
 810770c:	081076bd 	.word	0x081076bd
 8107710:	081076bd 	.word	0x081076bd
 8107714:	08107841 	.word	0x08107841
 8107718:	081076bd 	.word	0x081076bd
 810771c:	081076bd 	.word	0x081076bd
 8107720:	081076bd 	.word	0x081076bd
 8107724:	081076bd 	.word	0x081076bd
 8107728:	081077f9 	.word	0x081077f9
 810772c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8107730:	e7db      	b.n	81076ea <_scanf_float+0x8e>
 8107732:	290e      	cmp	r1, #14
 8107734:	d8c2      	bhi.n	81076bc <_scanf_float+0x60>
 8107736:	a001      	add	r0, pc, #4	; (adr r0, 810773c <_scanf_float+0xe0>)
 8107738:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810773c:	081077eb 	.word	0x081077eb
 8107740:	081076bd 	.word	0x081076bd
 8107744:	081077eb 	.word	0x081077eb
 8107748:	0810787f 	.word	0x0810787f
 810774c:	081076bd 	.word	0x081076bd
 8107750:	08107799 	.word	0x08107799
 8107754:	081077d5 	.word	0x081077d5
 8107758:	081077d5 	.word	0x081077d5
 810775c:	081077d5 	.word	0x081077d5
 8107760:	081077d5 	.word	0x081077d5
 8107764:	081077d5 	.word	0x081077d5
 8107768:	081077d5 	.word	0x081077d5
 810776c:	081077d5 	.word	0x081077d5
 8107770:	081077d5 	.word	0x081077d5
 8107774:	081077d5 	.word	0x081077d5
 8107778:	2b6e      	cmp	r3, #110	; 0x6e
 810777a:	d809      	bhi.n	8107790 <_scanf_float+0x134>
 810777c:	2b60      	cmp	r3, #96	; 0x60
 810777e:	d8b2      	bhi.n	81076e6 <_scanf_float+0x8a>
 8107780:	2b54      	cmp	r3, #84	; 0x54
 8107782:	d077      	beq.n	8107874 <_scanf_float+0x218>
 8107784:	2b59      	cmp	r3, #89	; 0x59
 8107786:	d199      	bne.n	81076bc <_scanf_float+0x60>
 8107788:	2d07      	cmp	r5, #7
 810778a:	d197      	bne.n	81076bc <_scanf_float+0x60>
 810778c:	2508      	movs	r5, #8
 810778e:	e029      	b.n	81077e4 <_scanf_float+0x188>
 8107790:	2b74      	cmp	r3, #116	; 0x74
 8107792:	d06f      	beq.n	8107874 <_scanf_float+0x218>
 8107794:	2b79      	cmp	r3, #121	; 0x79
 8107796:	e7f6      	b.n	8107786 <_scanf_float+0x12a>
 8107798:	6821      	ldr	r1, [r4, #0]
 810779a:	05c8      	lsls	r0, r1, #23
 810779c:	d51a      	bpl.n	81077d4 <_scanf_float+0x178>
 810779e:	9b02      	ldr	r3, [sp, #8]
 81077a0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81077a4:	6021      	str	r1, [r4, #0]
 81077a6:	f109 0901 	add.w	r9, r9, #1
 81077aa:	b11b      	cbz	r3, 81077b4 <_scanf_float+0x158>
 81077ac:	3b01      	subs	r3, #1
 81077ae:	3201      	adds	r2, #1
 81077b0:	9302      	str	r3, [sp, #8]
 81077b2:	60a2      	str	r2, [r4, #8]
 81077b4:	68a3      	ldr	r3, [r4, #8]
 81077b6:	3b01      	subs	r3, #1
 81077b8:	60a3      	str	r3, [r4, #8]
 81077ba:	6923      	ldr	r3, [r4, #16]
 81077bc:	3301      	adds	r3, #1
 81077be:	6123      	str	r3, [r4, #16]
 81077c0:	687b      	ldr	r3, [r7, #4]
 81077c2:	3b01      	subs	r3, #1
 81077c4:	2b00      	cmp	r3, #0
 81077c6:	607b      	str	r3, [r7, #4]
 81077c8:	f340 8084 	ble.w	81078d4 <_scanf_float+0x278>
 81077cc:	683b      	ldr	r3, [r7, #0]
 81077ce:	3301      	adds	r3, #1
 81077d0:	603b      	str	r3, [r7, #0]
 81077d2:	e766      	b.n	81076a2 <_scanf_float+0x46>
 81077d4:	eb1a 0f05 	cmn.w	sl, r5
 81077d8:	f47f af70 	bne.w	81076bc <_scanf_float+0x60>
 81077dc:	6822      	ldr	r2, [r4, #0]
 81077de:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 81077e2:	6022      	str	r2, [r4, #0]
 81077e4:	f806 3b01 	strb.w	r3, [r6], #1
 81077e8:	e7e4      	b.n	81077b4 <_scanf_float+0x158>
 81077ea:	6822      	ldr	r2, [r4, #0]
 81077ec:	0610      	lsls	r0, r2, #24
 81077ee:	f57f af65 	bpl.w	81076bc <_scanf_float+0x60>
 81077f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81077f6:	e7f4      	b.n	81077e2 <_scanf_float+0x186>
 81077f8:	f1ba 0f00 	cmp.w	sl, #0
 81077fc:	d10e      	bne.n	810781c <_scanf_float+0x1c0>
 81077fe:	f1b9 0f00 	cmp.w	r9, #0
 8107802:	d10e      	bne.n	8107822 <_scanf_float+0x1c6>
 8107804:	6822      	ldr	r2, [r4, #0]
 8107806:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810780a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810780e:	d108      	bne.n	8107822 <_scanf_float+0x1c6>
 8107810:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8107814:	6022      	str	r2, [r4, #0]
 8107816:	f04f 0a01 	mov.w	sl, #1
 810781a:	e7e3      	b.n	81077e4 <_scanf_float+0x188>
 810781c:	f1ba 0f02 	cmp.w	sl, #2
 8107820:	d055      	beq.n	81078ce <_scanf_float+0x272>
 8107822:	2d01      	cmp	r5, #1
 8107824:	d002      	beq.n	810782c <_scanf_float+0x1d0>
 8107826:	2d04      	cmp	r5, #4
 8107828:	f47f af48 	bne.w	81076bc <_scanf_float+0x60>
 810782c:	3501      	adds	r5, #1
 810782e:	b2ed      	uxtb	r5, r5
 8107830:	e7d8      	b.n	81077e4 <_scanf_float+0x188>
 8107832:	f1ba 0f01 	cmp.w	sl, #1
 8107836:	f47f af41 	bne.w	81076bc <_scanf_float+0x60>
 810783a:	f04f 0a02 	mov.w	sl, #2
 810783e:	e7d1      	b.n	81077e4 <_scanf_float+0x188>
 8107840:	b97d      	cbnz	r5, 8107862 <_scanf_float+0x206>
 8107842:	f1b9 0f00 	cmp.w	r9, #0
 8107846:	f47f af3c 	bne.w	81076c2 <_scanf_float+0x66>
 810784a:	6822      	ldr	r2, [r4, #0]
 810784c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8107850:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8107854:	f47f af39 	bne.w	81076ca <_scanf_float+0x6e>
 8107858:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810785c:	6022      	str	r2, [r4, #0]
 810785e:	2501      	movs	r5, #1
 8107860:	e7c0      	b.n	81077e4 <_scanf_float+0x188>
 8107862:	2d03      	cmp	r5, #3
 8107864:	d0e2      	beq.n	810782c <_scanf_float+0x1d0>
 8107866:	2d05      	cmp	r5, #5
 8107868:	e7de      	b.n	8107828 <_scanf_float+0x1cc>
 810786a:	2d02      	cmp	r5, #2
 810786c:	f47f af26 	bne.w	81076bc <_scanf_float+0x60>
 8107870:	2503      	movs	r5, #3
 8107872:	e7b7      	b.n	81077e4 <_scanf_float+0x188>
 8107874:	2d06      	cmp	r5, #6
 8107876:	f47f af21 	bne.w	81076bc <_scanf_float+0x60>
 810787a:	2507      	movs	r5, #7
 810787c:	e7b2      	b.n	81077e4 <_scanf_float+0x188>
 810787e:	6822      	ldr	r2, [r4, #0]
 8107880:	0591      	lsls	r1, r2, #22
 8107882:	f57f af1b 	bpl.w	81076bc <_scanf_float+0x60>
 8107886:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810788a:	6022      	str	r2, [r4, #0]
 810788c:	f8cd 9004 	str.w	r9, [sp, #4]
 8107890:	e7a8      	b.n	81077e4 <_scanf_float+0x188>
 8107892:	6822      	ldr	r2, [r4, #0]
 8107894:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8107898:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810789c:	d006      	beq.n	81078ac <_scanf_float+0x250>
 810789e:	0550      	lsls	r0, r2, #21
 81078a0:	f57f af0c 	bpl.w	81076bc <_scanf_float+0x60>
 81078a4:	f1b9 0f00 	cmp.w	r9, #0
 81078a8:	f43f af0f 	beq.w	81076ca <_scanf_float+0x6e>
 81078ac:	0591      	lsls	r1, r2, #22
 81078ae:	bf58      	it	pl
 81078b0:	9901      	ldrpl	r1, [sp, #4]
 81078b2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81078b6:	bf58      	it	pl
 81078b8:	eba9 0101 	subpl.w	r1, r9, r1
 81078bc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 81078c0:	bf58      	it	pl
 81078c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 81078c6:	6022      	str	r2, [r4, #0]
 81078c8:	f04f 0900 	mov.w	r9, #0
 81078cc:	e78a      	b.n	81077e4 <_scanf_float+0x188>
 81078ce:	f04f 0a03 	mov.w	sl, #3
 81078d2:	e787      	b.n	81077e4 <_scanf_float+0x188>
 81078d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 81078d8:	4639      	mov	r1, r7
 81078da:	4640      	mov	r0, r8
 81078dc:	4798      	blx	r3
 81078de:	2800      	cmp	r0, #0
 81078e0:	f43f aedf 	beq.w	81076a2 <_scanf_float+0x46>
 81078e4:	e6ea      	b.n	81076bc <_scanf_float+0x60>
 81078e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81078ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81078ee:	463a      	mov	r2, r7
 81078f0:	4640      	mov	r0, r8
 81078f2:	4798      	blx	r3
 81078f4:	6923      	ldr	r3, [r4, #16]
 81078f6:	3b01      	subs	r3, #1
 81078f8:	6123      	str	r3, [r4, #16]
 81078fa:	e6ec      	b.n	81076d6 <_scanf_float+0x7a>
 81078fc:	1e6b      	subs	r3, r5, #1
 81078fe:	2b06      	cmp	r3, #6
 8107900:	d825      	bhi.n	810794e <_scanf_float+0x2f2>
 8107902:	2d02      	cmp	r5, #2
 8107904:	d836      	bhi.n	8107974 <_scanf_float+0x318>
 8107906:	455e      	cmp	r6, fp
 8107908:	f67f aee8 	bls.w	81076dc <_scanf_float+0x80>
 810790c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107910:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107914:	463a      	mov	r2, r7
 8107916:	4640      	mov	r0, r8
 8107918:	4798      	blx	r3
 810791a:	6923      	ldr	r3, [r4, #16]
 810791c:	3b01      	subs	r3, #1
 810791e:	6123      	str	r3, [r4, #16]
 8107920:	e7f1      	b.n	8107906 <_scanf_float+0x2aa>
 8107922:	9802      	ldr	r0, [sp, #8]
 8107924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107928:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810792c:	9002      	str	r0, [sp, #8]
 810792e:	463a      	mov	r2, r7
 8107930:	4640      	mov	r0, r8
 8107932:	4798      	blx	r3
 8107934:	6923      	ldr	r3, [r4, #16]
 8107936:	3b01      	subs	r3, #1
 8107938:	6123      	str	r3, [r4, #16]
 810793a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810793e:	fa5f fa8a 	uxtb.w	sl, sl
 8107942:	f1ba 0f02 	cmp.w	sl, #2
 8107946:	d1ec      	bne.n	8107922 <_scanf_float+0x2c6>
 8107948:	3d03      	subs	r5, #3
 810794a:	b2ed      	uxtb	r5, r5
 810794c:	1b76      	subs	r6, r6, r5
 810794e:	6823      	ldr	r3, [r4, #0]
 8107950:	05da      	lsls	r2, r3, #23
 8107952:	d52f      	bpl.n	81079b4 <_scanf_float+0x358>
 8107954:	055b      	lsls	r3, r3, #21
 8107956:	d510      	bpl.n	810797a <_scanf_float+0x31e>
 8107958:	455e      	cmp	r6, fp
 810795a:	f67f aebf 	bls.w	81076dc <_scanf_float+0x80>
 810795e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107962:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107966:	463a      	mov	r2, r7
 8107968:	4640      	mov	r0, r8
 810796a:	4798      	blx	r3
 810796c:	6923      	ldr	r3, [r4, #16]
 810796e:	3b01      	subs	r3, #1
 8107970:	6123      	str	r3, [r4, #16]
 8107972:	e7f1      	b.n	8107958 <_scanf_float+0x2fc>
 8107974:	46aa      	mov	sl, r5
 8107976:	9602      	str	r6, [sp, #8]
 8107978:	e7df      	b.n	810793a <_scanf_float+0x2de>
 810797a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810797e:	6923      	ldr	r3, [r4, #16]
 8107980:	2965      	cmp	r1, #101	; 0x65
 8107982:	f103 33ff 	add.w	r3, r3, #4294967295
 8107986:	f106 35ff 	add.w	r5, r6, #4294967295
 810798a:	6123      	str	r3, [r4, #16]
 810798c:	d00c      	beq.n	81079a8 <_scanf_float+0x34c>
 810798e:	2945      	cmp	r1, #69	; 0x45
 8107990:	d00a      	beq.n	81079a8 <_scanf_float+0x34c>
 8107992:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107996:	463a      	mov	r2, r7
 8107998:	4640      	mov	r0, r8
 810799a:	4798      	blx	r3
 810799c:	6923      	ldr	r3, [r4, #16]
 810799e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81079a2:	3b01      	subs	r3, #1
 81079a4:	1eb5      	subs	r5, r6, #2
 81079a6:	6123      	str	r3, [r4, #16]
 81079a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81079ac:	463a      	mov	r2, r7
 81079ae:	4640      	mov	r0, r8
 81079b0:	4798      	blx	r3
 81079b2:	462e      	mov	r6, r5
 81079b4:	6825      	ldr	r5, [r4, #0]
 81079b6:	f015 0510 	ands.w	r5, r5, #16
 81079ba:	d158      	bne.n	8107a6e <_scanf_float+0x412>
 81079bc:	7035      	strb	r5, [r6, #0]
 81079be:	6823      	ldr	r3, [r4, #0]
 81079c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 81079c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81079c8:	d11c      	bne.n	8107a04 <_scanf_float+0x3a8>
 81079ca:	9b01      	ldr	r3, [sp, #4]
 81079cc:	454b      	cmp	r3, r9
 81079ce:	eba3 0209 	sub.w	r2, r3, r9
 81079d2:	d124      	bne.n	8107a1e <_scanf_float+0x3c2>
 81079d4:	2200      	movs	r2, #0
 81079d6:	4659      	mov	r1, fp
 81079d8:	4640      	mov	r0, r8
 81079da:	f001 f843 	bl	8108a64 <_strtod_r>
 81079de:	9b03      	ldr	r3, [sp, #12]
 81079e0:	6821      	ldr	r1, [r4, #0]
 81079e2:	681b      	ldr	r3, [r3, #0]
 81079e4:	f011 0f02 	tst.w	r1, #2
 81079e8:	ec57 6b10 	vmov	r6, r7, d0
 81079ec:	f103 0204 	add.w	r2, r3, #4
 81079f0:	d020      	beq.n	8107a34 <_scanf_float+0x3d8>
 81079f2:	9903      	ldr	r1, [sp, #12]
 81079f4:	600a      	str	r2, [r1, #0]
 81079f6:	681b      	ldr	r3, [r3, #0]
 81079f8:	e9c3 6700 	strd	r6, r7, [r3]
 81079fc:	68e3      	ldr	r3, [r4, #12]
 81079fe:	3301      	adds	r3, #1
 8107a00:	60e3      	str	r3, [r4, #12]
 8107a02:	e66c      	b.n	81076de <_scanf_float+0x82>
 8107a04:	9b04      	ldr	r3, [sp, #16]
 8107a06:	2b00      	cmp	r3, #0
 8107a08:	d0e4      	beq.n	81079d4 <_scanf_float+0x378>
 8107a0a:	9905      	ldr	r1, [sp, #20]
 8107a0c:	230a      	movs	r3, #10
 8107a0e:	462a      	mov	r2, r5
 8107a10:	3101      	adds	r1, #1
 8107a12:	4640      	mov	r0, r8
 8107a14:	f001 f8b0 	bl	8108b78 <_strtol_r>
 8107a18:	9b04      	ldr	r3, [sp, #16]
 8107a1a:	9e05      	ldr	r6, [sp, #20]
 8107a1c:	1ac2      	subs	r2, r0, r3
 8107a1e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8107a22:	429e      	cmp	r6, r3
 8107a24:	bf28      	it	cs
 8107a26:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8107a2a:	4912      	ldr	r1, [pc, #72]	; (8107a74 <_scanf_float+0x418>)
 8107a2c:	4630      	mov	r0, r6
 8107a2e:	f000 f98f 	bl	8107d50 <siprintf>
 8107a32:	e7cf      	b.n	81079d4 <_scanf_float+0x378>
 8107a34:	f011 0f04 	tst.w	r1, #4
 8107a38:	9903      	ldr	r1, [sp, #12]
 8107a3a:	600a      	str	r2, [r1, #0]
 8107a3c:	d1db      	bne.n	81079f6 <_scanf_float+0x39a>
 8107a3e:	f8d3 8000 	ldr.w	r8, [r3]
 8107a42:	ee10 2a10 	vmov	r2, s0
 8107a46:	ee10 0a10 	vmov	r0, s0
 8107a4a:	463b      	mov	r3, r7
 8107a4c:	4639      	mov	r1, r7
 8107a4e:	f7f9 f8f5 	bl	8100c3c <__aeabi_dcmpun>
 8107a52:	b128      	cbz	r0, 8107a60 <_scanf_float+0x404>
 8107a54:	4808      	ldr	r0, [pc, #32]	; (8107a78 <_scanf_float+0x41c>)
 8107a56:	f000 f975 	bl	8107d44 <nanf>
 8107a5a:	ed88 0a00 	vstr	s0, [r8]
 8107a5e:	e7cd      	b.n	81079fc <_scanf_float+0x3a0>
 8107a60:	4630      	mov	r0, r6
 8107a62:	4639      	mov	r1, r7
 8107a64:	f7f9 f948 	bl	8100cf8 <__aeabi_d2f>
 8107a68:	f8c8 0000 	str.w	r0, [r8]
 8107a6c:	e7c6      	b.n	81079fc <_scanf_float+0x3a0>
 8107a6e:	2500      	movs	r5, #0
 8107a70:	e635      	b.n	81076de <_scanf_float+0x82>
 8107a72:	bf00      	nop
 8107a74:	0810b4d8 	.word	0x0810b4d8
 8107a78:	0810b8f0 	.word	0x0810b8f0

08107a7c <iprintf>:
 8107a7c:	b40f      	push	{r0, r1, r2, r3}
 8107a7e:	4b0a      	ldr	r3, [pc, #40]	; (8107aa8 <iprintf+0x2c>)
 8107a80:	b513      	push	{r0, r1, r4, lr}
 8107a82:	681c      	ldr	r4, [r3, #0]
 8107a84:	b124      	cbz	r4, 8107a90 <iprintf+0x14>
 8107a86:	69a3      	ldr	r3, [r4, #24]
 8107a88:	b913      	cbnz	r3, 8107a90 <iprintf+0x14>
 8107a8a:	4620      	mov	r0, r4
 8107a8c:	f7ff f804 	bl	8106a98 <__sinit>
 8107a90:	ab05      	add	r3, sp, #20
 8107a92:	9a04      	ldr	r2, [sp, #16]
 8107a94:	68a1      	ldr	r1, [r4, #8]
 8107a96:	9301      	str	r3, [sp, #4]
 8107a98:	4620      	mov	r0, r4
 8107a9a:	f003 fa37 	bl	810af0c <_vfiprintf_r>
 8107a9e:	b002      	add	sp, #8
 8107aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107aa4:	b004      	add	sp, #16
 8107aa6:	4770      	bx	lr
 8107aa8:	10000010 	.word	0x10000010

08107aac <_puts_r>:
 8107aac:	b570      	push	{r4, r5, r6, lr}
 8107aae:	460e      	mov	r6, r1
 8107ab0:	4605      	mov	r5, r0
 8107ab2:	b118      	cbz	r0, 8107abc <_puts_r+0x10>
 8107ab4:	6983      	ldr	r3, [r0, #24]
 8107ab6:	b90b      	cbnz	r3, 8107abc <_puts_r+0x10>
 8107ab8:	f7fe ffee 	bl	8106a98 <__sinit>
 8107abc:	69ab      	ldr	r3, [r5, #24]
 8107abe:	68ac      	ldr	r4, [r5, #8]
 8107ac0:	b913      	cbnz	r3, 8107ac8 <_puts_r+0x1c>
 8107ac2:	4628      	mov	r0, r5
 8107ac4:	f7fe ffe8 	bl	8106a98 <__sinit>
 8107ac8:	4b2c      	ldr	r3, [pc, #176]	; (8107b7c <_puts_r+0xd0>)
 8107aca:	429c      	cmp	r4, r3
 8107acc:	d120      	bne.n	8107b10 <_puts_r+0x64>
 8107ace:	686c      	ldr	r4, [r5, #4]
 8107ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107ad2:	07db      	lsls	r3, r3, #31
 8107ad4:	d405      	bmi.n	8107ae2 <_puts_r+0x36>
 8107ad6:	89a3      	ldrh	r3, [r4, #12]
 8107ad8:	0598      	lsls	r0, r3, #22
 8107ada:	d402      	bmi.n	8107ae2 <_puts_r+0x36>
 8107adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107ade:	f7ff f89e 	bl	8106c1e <__retarget_lock_acquire_recursive>
 8107ae2:	89a3      	ldrh	r3, [r4, #12]
 8107ae4:	0719      	lsls	r1, r3, #28
 8107ae6:	d51d      	bpl.n	8107b24 <_puts_r+0x78>
 8107ae8:	6923      	ldr	r3, [r4, #16]
 8107aea:	b1db      	cbz	r3, 8107b24 <_puts_r+0x78>
 8107aec:	3e01      	subs	r6, #1
 8107aee:	68a3      	ldr	r3, [r4, #8]
 8107af0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8107af4:	3b01      	subs	r3, #1
 8107af6:	60a3      	str	r3, [r4, #8]
 8107af8:	bb39      	cbnz	r1, 8107b4a <_puts_r+0x9e>
 8107afa:	2b00      	cmp	r3, #0
 8107afc:	da38      	bge.n	8107b70 <_puts_r+0xc4>
 8107afe:	4622      	mov	r2, r4
 8107b00:	210a      	movs	r1, #10
 8107b02:	4628      	mov	r0, r5
 8107b04:	f001 f83a 	bl	8108b7c <__swbuf_r>
 8107b08:	3001      	adds	r0, #1
 8107b0a:	d011      	beq.n	8107b30 <_puts_r+0x84>
 8107b0c:	250a      	movs	r5, #10
 8107b0e:	e011      	b.n	8107b34 <_puts_r+0x88>
 8107b10:	4b1b      	ldr	r3, [pc, #108]	; (8107b80 <_puts_r+0xd4>)
 8107b12:	429c      	cmp	r4, r3
 8107b14:	d101      	bne.n	8107b1a <_puts_r+0x6e>
 8107b16:	68ac      	ldr	r4, [r5, #8]
 8107b18:	e7da      	b.n	8107ad0 <_puts_r+0x24>
 8107b1a:	4b1a      	ldr	r3, [pc, #104]	; (8107b84 <_puts_r+0xd8>)
 8107b1c:	429c      	cmp	r4, r3
 8107b1e:	bf08      	it	eq
 8107b20:	68ec      	ldreq	r4, [r5, #12]
 8107b22:	e7d5      	b.n	8107ad0 <_puts_r+0x24>
 8107b24:	4621      	mov	r1, r4
 8107b26:	4628      	mov	r0, r5
 8107b28:	f001 f88c 	bl	8108c44 <__swsetup_r>
 8107b2c:	2800      	cmp	r0, #0
 8107b2e:	d0dd      	beq.n	8107aec <_puts_r+0x40>
 8107b30:	f04f 35ff 	mov.w	r5, #4294967295
 8107b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107b36:	07da      	lsls	r2, r3, #31
 8107b38:	d405      	bmi.n	8107b46 <_puts_r+0x9a>
 8107b3a:	89a3      	ldrh	r3, [r4, #12]
 8107b3c:	059b      	lsls	r3, r3, #22
 8107b3e:	d402      	bmi.n	8107b46 <_puts_r+0x9a>
 8107b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107b42:	f7ff f86d 	bl	8106c20 <__retarget_lock_release_recursive>
 8107b46:	4628      	mov	r0, r5
 8107b48:	bd70      	pop	{r4, r5, r6, pc}
 8107b4a:	2b00      	cmp	r3, #0
 8107b4c:	da04      	bge.n	8107b58 <_puts_r+0xac>
 8107b4e:	69a2      	ldr	r2, [r4, #24]
 8107b50:	429a      	cmp	r2, r3
 8107b52:	dc06      	bgt.n	8107b62 <_puts_r+0xb6>
 8107b54:	290a      	cmp	r1, #10
 8107b56:	d004      	beq.n	8107b62 <_puts_r+0xb6>
 8107b58:	6823      	ldr	r3, [r4, #0]
 8107b5a:	1c5a      	adds	r2, r3, #1
 8107b5c:	6022      	str	r2, [r4, #0]
 8107b5e:	7019      	strb	r1, [r3, #0]
 8107b60:	e7c5      	b.n	8107aee <_puts_r+0x42>
 8107b62:	4622      	mov	r2, r4
 8107b64:	4628      	mov	r0, r5
 8107b66:	f001 f809 	bl	8108b7c <__swbuf_r>
 8107b6a:	3001      	adds	r0, #1
 8107b6c:	d1bf      	bne.n	8107aee <_puts_r+0x42>
 8107b6e:	e7df      	b.n	8107b30 <_puts_r+0x84>
 8107b70:	6823      	ldr	r3, [r4, #0]
 8107b72:	250a      	movs	r5, #10
 8107b74:	1c5a      	adds	r2, r3, #1
 8107b76:	6022      	str	r2, [r4, #0]
 8107b78:	701d      	strb	r5, [r3, #0]
 8107b7a:	e7db      	b.n	8107b34 <_puts_r+0x88>
 8107b7c:	0810b460 	.word	0x0810b460
 8107b80:	0810b480 	.word	0x0810b480
 8107b84:	0810b440 	.word	0x0810b440

08107b88 <puts>:
 8107b88:	4b02      	ldr	r3, [pc, #8]	; (8107b94 <puts+0xc>)
 8107b8a:	4601      	mov	r1, r0
 8107b8c:	6818      	ldr	r0, [r3, #0]
 8107b8e:	f7ff bf8d 	b.w	8107aac <_puts_r>
 8107b92:	bf00      	nop
 8107b94:	10000010 	.word	0x10000010

08107b98 <_sbrk_r>:
 8107b98:	b538      	push	{r3, r4, r5, lr}
 8107b9a:	4d06      	ldr	r5, [pc, #24]	; (8107bb4 <_sbrk_r+0x1c>)
 8107b9c:	2300      	movs	r3, #0
 8107b9e:	4604      	mov	r4, r0
 8107ba0:	4608      	mov	r0, r1
 8107ba2:	602b      	str	r3, [r5, #0]
 8107ba4:	f7fa f9bc 	bl	8101f20 <_sbrk>
 8107ba8:	1c43      	adds	r3, r0, #1
 8107baa:	d102      	bne.n	8107bb2 <_sbrk_r+0x1a>
 8107bac:	682b      	ldr	r3, [r5, #0]
 8107bae:	b103      	cbz	r3, 8107bb2 <_sbrk_r+0x1a>
 8107bb0:	6023      	str	r3, [r4, #0]
 8107bb2:	bd38      	pop	{r3, r4, r5, pc}
 8107bb4:	100003f8 	.word	0x100003f8

08107bb8 <setvbuf>:
 8107bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8107bbc:	461d      	mov	r5, r3
 8107bbe:	4b5d      	ldr	r3, [pc, #372]	; (8107d34 <setvbuf+0x17c>)
 8107bc0:	681f      	ldr	r7, [r3, #0]
 8107bc2:	4604      	mov	r4, r0
 8107bc4:	460e      	mov	r6, r1
 8107bc6:	4690      	mov	r8, r2
 8107bc8:	b127      	cbz	r7, 8107bd4 <setvbuf+0x1c>
 8107bca:	69bb      	ldr	r3, [r7, #24]
 8107bcc:	b913      	cbnz	r3, 8107bd4 <setvbuf+0x1c>
 8107bce:	4638      	mov	r0, r7
 8107bd0:	f7fe ff62 	bl	8106a98 <__sinit>
 8107bd4:	4b58      	ldr	r3, [pc, #352]	; (8107d38 <setvbuf+0x180>)
 8107bd6:	429c      	cmp	r4, r3
 8107bd8:	d167      	bne.n	8107caa <setvbuf+0xf2>
 8107bda:	687c      	ldr	r4, [r7, #4]
 8107bdc:	f1b8 0f02 	cmp.w	r8, #2
 8107be0:	d006      	beq.n	8107bf0 <setvbuf+0x38>
 8107be2:	f1b8 0f01 	cmp.w	r8, #1
 8107be6:	f200 809f 	bhi.w	8107d28 <setvbuf+0x170>
 8107bea:	2d00      	cmp	r5, #0
 8107bec:	f2c0 809c 	blt.w	8107d28 <setvbuf+0x170>
 8107bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107bf2:	07db      	lsls	r3, r3, #31
 8107bf4:	d405      	bmi.n	8107c02 <setvbuf+0x4a>
 8107bf6:	89a3      	ldrh	r3, [r4, #12]
 8107bf8:	0598      	lsls	r0, r3, #22
 8107bfa:	d402      	bmi.n	8107c02 <setvbuf+0x4a>
 8107bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107bfe:	f7ff f80e 	bl	8106c1e <__retarget_lock_acquire_recursive>
 8107c02:	4621      	mov	r1, r4
 8107c04:	4638      	mov	r0, r7
 8107c06:	f7fe feb3 	bl	8106970 <_fflush_r>
 8107c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107c0c:	b141      	cbz	r1, 8107c20 <setvbuf+0x68>
 8107c0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107c12:	4299      	cmp	r1, r3
 8107c14:	d002      	beq.n	8107c1c <setvbuf+0x64>
 8107c16:	4638      	mov	r0, r7
 8107c18:	f7ff f80c 	bl	8106c34 <_free_r>
 8107c1c:	2300      	movs	r3, #0
 8107c1e:	6363      	str	r3, [r4, #52]	; 0x34
 8107c20:	2300      	movs	r3, #0
 8107c22:	61a3      	str	r3, [r4, #24]
 8107c24:	6063      	str	r3, [r4, #4]
 8107c26:	89a3      	ldrh	r3, [r4, #12]
 8107c28:	0619      	lsls	r1, r3, #24
 8107c2a:	d503      	bpl.n	8107c34 <setvbuf+0x7c>
 8107c2c:	6921      	ldr	r1, [r4, #16]
 8107c2e:	4638      	mov	r0, r7
 8107c30:	f7ff f800 	bl	8106c34 <_free_r>
 8107c34:	89a3      	ldrh	r3, [r4, #12]
 8107c36:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8107c3a:	f023 0303 	bic.w	r3, r3, #3
 8107c3e:	f1b8 0f02 	cmp.w	r8, #2
 8107c42:	81a3      	strh	r3, [r4, #12]
 8107c44:	d06c      	beq.n	8107d20 <setvbuf+0x168>
 8107c46:	ab01      	add	r3, sp, #4
 8107c48:	466a      	mov	r2, sp
 8107c4a:	4621      	mov	r1, r4
 8107c4c:	4638      	mov	r0, r7
 8107c4e:	f002 fa75 	bl	810a13c <__swhatbuf_r>
 8107c52:	89a3      	ldrh	r3, [r4, #12]
 8107c54:	4318      	orrs	r0, r3
 8107c56:	81a0      	strh	r0, [r4, #12]
 8107c58:	2d00      	cmp	r5, #0
 8107c5a:	d130      	bne.n	8107cbe <setvbuf+0x106>
 8107c5c:	9d00      	ldr	r5, [sp, #0]
 8107c5e:	4628      	mov	r0, r5
 8107c60:	f002 fad0 	bl	810a204 <malloc>
 8107c64:	4606      	mov	r6, r0
 8107c66:	2800      	cmp	r0, #0
 8107c68:	d155      	bne.n	8107d16 <setvbuf+0x15e>
 8107c6a:	f8dd 9000 	ldr.w	r9, [sp]
 8107c6e:	45a9      	cmp	r9, r5
 8107c70:	d14a      	bne.n	8107d08 <setvbuf+0x150>
 8107c72:	f04f 35ff 	mov.w	r5, #4294967295
 8107c76:	2200      	movs	r2, #0
 8107c78:	60a2      	str	r2, [r4, #8]
 8107c7a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8107c7e:	6022      	str	r2, [r4, #0]
 8107c80:	6122      	str	r2, [r4, #16]
 8107c82:	2201      	movs	r2, #1
 8107c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107c88:	6162      	str	r2, [r4, #20]
 8107c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107c8c:	f043 0302 	orr.w	r3, r3, #2
 8107c90:	07d2      	lsls	r2, r2, #31
 8107c92:	81a3      	strh	r3, [r4, #12]
 8107c94:	d405      	bmi.n	8107ca2 <setvbuf+0xea>
 8107c96:	f413 7f00 	tst.w	r3, #512	; 0x200
 8107c9a:	d102      	bne.n	8107ca2 <setvbuf+0xea>
 8107c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107c9e:	f7fe ffbf 	bl	8106c20 <__retarget_lock_release_recursive>
 8107ca2:	4628      	mov	r0, r5
 8107ca4:	b003      	add	sp, #12
 8107ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8107caa:	4b24      	ldr	r3, [pc, #144]	; (8107d3c <setvbuf+0x184>)
 8107cac:	429c      	cmp	r4, r3
 8107cae:	d101      	bne.n	8107cb4 <setvbuf+0xfc>
 8107cb0:	68bc      	ldr	r4, [r7, #8]
 8107cb2:	e793      	b.n	8107bdc <setvbuf+0x24>
 8107cb4:	4b22      	ldr	r3, [pc, #136]	; (8107d40 <setvbuf+0x188>)
 8107cb6:	429c      	cmp	r4, r3
 8107cb8:	bf08      	it	eq
 8107cba:	68fc      	ldreq	r4, [r7, #12]
 8107cbc:	e78e      	b.n	8107bdc <setvbuf+0x24>
 8107cbe:	2e00      	cmp	r6, #0
 8107cc0:	d0cd      	beq.n	8107c5e <setvbuf+0xa6>
 8107cc2:	69bb      	ldr	r3, [r7, #24]
 8107cc4:	b913      	cbnz	r3, 8107ccc <setvbuf+0x114>
 8107cc6:	4638      	mov	r0, r7
 8107cc8:	f7fe fee6 	bl	8106a98 <__sinit>
 8107ccc:	f1b8 0f01 	cmp.w	r8, #1
 8107cd0:	bf08      	it	eq
 8107cd2:	89a3      	ldrheq	r3, [r4, #12]
 8107cd4:	6026      	str	r6, [r4, #0]
 8107cd6:	bf04      	itt	eq
 8107cd8:	f043 0301 	orreq.w	r3, r3, #1
 8107cdc:	81a3      	strheq	r3, [r4, #12]
 8107cde:	89a2      	ldrh	r2, [r4, #12]
 8107ce0:	f012 0308 	ands.w	r3, r2, #8
 8107ce4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8107ce8:	d01c      	beq.n	8107d24 <setvbuf+0x16c>
 8107cea:	07d3      	lsls	r3, r2, #31
 8107cec:	bf41      	itttt	mi
 8107cee:	2300      	movmi	r3, #0
 8107cf0:	426d      	negmi	r5, r5
 8107cf2:	60a3      	strmi	r3, [r4, #8]
 8107cf4:	61a5      	strmi	r5, [r4, #24]
 8107cf6:	bf58      	it	pl
 8107cf8:	60a5      	strpl	r5, [r4, #8]
 8107cfa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8107cfc:	f015 0501 	ands.w	r5, r5, #1
 8107d00:	d115      	bne.n	8107d2e <setvbuf+0x176>
 8107d02:	f412 7f00 	tst.w	r2, #512	; 0x200
 8107d06:	e7c8      	b.n	8107c9a <setvbuf+0xe2>
 8107d08:	4648      	mov	r0, r9
 8107d0a:	f002 fa7b 	bl	810a204 <malloc>
 8107d0e:	4606      	mov	r6, r0
 8107d10:	2800      	cmp	r0, #0
 8107d12:	d0ae      	beq.n	8107c72 <setvbuf+0xba>
 8107d14:	464d      	mov	r5, r9
 8107d16:	89a3      	ldrh	r3, [r4, #12]
 8107d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8107d1c:	81a3      	strh	r3, [r4, #12]
 8107d1e:	e7d0      	b.n	8107cc2 <setvbuf+0x10a>
 8107d20:	2500      	movs	r5, #0
 8107d22:	e7a8      	b.n	8107c76 <setvbuf+0xbe>
 8107d24:	60a3      	str	r3, [r4, #8]
 8107d26:	e7e8      	b.n	8107cfa <setvbuf+0x142>
 8107d28:	f04f 35ff 	mov.w	r5, #4294967295
 8107d2c:	e7b9      	b.n	8107ca2 <setvbuf+0xea>
 8107d2e:	2500      	movs	r5, #0
 8107d30:	e7b7      	b.n	8107ca2 <setvbuf+0xea>
 8107d32:	bf00      	nop
 8107d34:	10000010 	.word	0x10000010
 8107d38:	0810b460 	.word	0x0810b460
 8107d3c:	0810b480 	.word	0x0810b480
 8107d40:	0810b440 	.word	0x0810b440

08107d44 <nanf>:
 8107d44:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8107d4c <nanf+0x8>
 8107d48:	4770      	bx	lr
 8107d4a:	bf00      	nop
 8107d4c:	7fc00000 	.word	0x7fc00000

08107d50 <siprintf>:
 8107d50:	b40e      	push	{r1, r2, r3}
 8107d52:	b500      	push	{lr}
 8107d54:	b09c      	sub	sp, #112	; 0x70
 8107d56:	ab1d      	add	r3, sp, #116	; 0x74
 8107d58:	9002      	str	r0, [sp, #8]
 8107d5a:	9006      	str	r0, [sp, #24]
 8107d5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8107d60:	4809      	ldr	r0, [pc, #36]	; (8107d88 <siprintf+0x38>)
 8107d62:	9107      	str	r1, [sp, #28]
 8107d64:	9104      	str	r1, [sp, #16]
 8107d66:	4909      	ldr	r1, [pc, #36]	; (8107d8c <siprintf+0x3c>)
 8107d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8107d6c:	9105      	str	r1, [sp, #20]
 8107d6e:	6800      	ldr	r0, [r0, #0]
 8107d70:	9301      	str	r3, [sp, #4]
 8107d72:	a902      	add	r1, sp, #8
 8107d74:	f002 ffa0 	bl	810acb8 <_svfiprintf_r>
 8107d78:	9b02      	ldr	r3, [sp, #8]
 8107d7a:	2200      	movs	r2, #0
 8107d7c:	701a      	strb	r2, [r3, #0]
 8107d7e:	b01c      	add	sp, #112	; 0x70
 8107d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8107d84:	b003      	add	sp, #12
 8107d86:	4770      	bx	lr
 8107d88:	10000010 	.word	0x10000010
 8107d8c:	ffff0208 	.word	0xffff0208

08107d90 <__sread>:
 8107d90:	b510      	push	{r4, lr}
 8107d92:	460c      	mov	r4, r1
 8107d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107d98:	f003 f9e8 	bl	810b16c <_read_r>
 8107d9c:	2800      	cmp	r0, #0
 8107d9e:	bfab      	itete	ge
 8107da0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8107da2:	89a3      	ldrhlt	r3, [r4, #12]
 8107da4:	181b      	addge	r3, r3, r0
 8107da6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8107daa:	bfac      	ite	ge
 8107dac:	6563      	strge	r3, [r4, #84]	; 0x54
 8107dae:	81a3      	strhlt	r3, [r4, #12]
 8107db0:	bd10      	pop	{r4, pc}

08107db2 <__swrite>:
 8107db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107db6:	461f      	mov	r7, r3
 8107db8:	898b      	ldrh	r3, [r1, #12]
 8107dba:	05db      	lsls	r3, r3, #23
 8107dbc:	4605      	mov	r5, r0
 8107dbe:	460c      	mov	r4, r1
 8107dc0:	4616      	mov	r6, r2
 8107dc2:	d505      	bpl.n	8107dd0 <__swrite+0x1e>
 8107dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107dc8:	2302      	movs	r3, #2
 8107dca:	2200      	movs	r2, #0
 8107dcc:	f002 f9a4 	bl	810a118 <_lseek_r>
 8107dd0:	89a3      	ldrh	r3, [r4, #12]
 8107dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107dda:	81a3      	strh	r3, [r4, #12]
 8107ddc:	4632      	mov	r2, r6
 8107dde:	463b      	mov	r3, r7
 8107de0:	4628      	mov	r0, r5
 8107de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107de6:	f000 bf1b 	b.w	8108c20 <_write_r>

08107dea <__sseek>:
 8107dea:	b510      	push	{r4, lr}
 8107dec:	460c      	mov	r4, r1
 8107dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107df2:	f002 f991 	bl	810a118 <_lseek_r>
 8107df6:	1c43      	adds	r3, r0, #1
 8107df8:	89a3      	ldrh	r3, [r4, #12]
 8107dfa:	bf15      	itete	ne
 8107dfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8107dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8107e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8107e06:	81a3      	strheq	r3, [r4, #12]
 8107e08:	bf18      	it	ne
 8107e0a:	81a3      	strhne	r3, [r4, #12]
 8107e0c:	bd10      	pop	{r4, pc}

08107e0e <__sclose>:
 8107e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e12:	f000 bf85 	b.w	8108d20 <_close_r>

08107e16 <sulp>:
 8107e16:	b570      	push	{r4, r5, r6, lr}
 8107e18:	4604      	mov	r4, r0
 8107e1a:	460d      	mov	r5, r1
 8107e1c:	ec45 4b10 	vmov	d0, r4, r5
 8107e20:	4616      	mov	r6, r2
 8107e22:	f002 fd8f 	bl	810a944 <__ulp>
 8107e26:	ec51 0b10 	vmov	r0, r1, d0
 8107e2a:	b17e      	cbz	r6, 8107e4c <sulp+0x36>
 8107e2c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8107e30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8107e34:	2b00      	cmp	r3, #0
 8107e36:	dd09      	ble.n	8107e4c <sulp+0x36>
 8107e38:	051b      	lsls	r3, r3, #20
 8107e3a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8107e3e:	2400      	movs	r4, #0
 8107e40:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8107e44:	4622      	mov	r2, r4
 8107e46:	462b      	mov	r3, r5
 8107e48:	f7f8 fc5e 	bl	8100708 <__aeabi_dmul>
 8107e4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08107e50 <_strtod_l>:
 8107e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107e54:	b0a3      	sub	sp, #140	; 0x8c
 8107e56:	461f      	mov	r7, r3
 8107e58:	2300      	movs	r3, #0
 8107e5a:	931e      	str	r3, [sp, #120]	; 0x78
 8107e5c:	4ba4      	ldr	r3, [pc, #656]	; (81080f0 <_strtod_l+0x2a0>)
 8107e5e:	9219      	str	r2, [sp, #100]	; 0x64
 8107e60:	681b      	ldr	r3, [r3, #0]
 8107e62:	9307      	str	r3, [sp, #28]
 8107e64:	4604      	mov	r4, r0
 8107e66:	4618      	mov	r0, r3
 8107e68:	4688      	mov	r8, r1
 8107e6a:	f7f8 fa39 	bl	81002e0 <strlen>
 8107e6e:	f04f 0a00 	mov.w	sl, #0
 8107e72:	4605      	mov	r5, r0
 8107e74:	f04f 0b00 	mov.w	fp, #0
 8107e78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8107e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8107e7e:	781a      	ldrb	r2, [r3, #0]
 8107e80:	2a2b      	cmp	r2, #43	; 0x2b
 8107e82:	d04c      	beq.n	8107f1e <_strtod_l+0xce>
 8107e84:	d839      	bhi.n	8107efa <_strtod_l+0xaa>
 8107e86:	2a0d      	cmp	r2, #13
 8107e88:	d832      	bhi.n	8107ef0 <_strtod_l+0xa0>
 8107e8a:	2a08      	cmp	r2, #8
 8107e8c:	d832      	bhi.n	8107ef4 <_strtod_l+0xa4>
 8107e8e:	2a00      	cmp	r2, #0
 8107e90:	d03c      	beq.n	8107f0c <_strtod_l+0xbc>
 8107e92:	2300      	movs	r3, #0
 8107e94:	930e      	str	r3, [sp, #56]	; 0x38
 8107e96:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8107e98:	7833      	ldrb	r3, [r6, #0]
 8107e9a:	2b30      	cmp	r3, #48	; 0x30
 8107e9c:	f040 80b4 	bne.w	8108008 <_strtod_l+0x1b8>
 8107ea0:	7873      	ldrb	r3, [r6, #1]
 8107ea2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8107ea6:	2b58      	cmp	r3, #88	; 0x58
 8107ea8:	d16c      	bne.n	8107f84 <_strtod_l+0x134>
 8107eaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8107eac:	9301      	str	r3, [sp, #4]
 8107eae:	ab1e      	add	r3, sp, #120	; 0x78
 8107eb0:	9702      	str	r7, [sp, #8]
 8107eb2:	9300      	str	r3, [sp, #0]
 8107eb4:	4a8f      	ldr	r2, [pc, #572]	; (81080f4 <_strtod_l+0x2a4>)
 8107eb6:	ab1f      	add	r3, sp, #124	; 0x7c
 8107eb8:	a91d      	add	r1, sp, #116	; 0x74
 8107eba:	4620      	mov	r0, r4
 8107ebc:	f001 fe20 	bl	8109b00 <__gethex>
 8107ec0:	f010 0707 	ands.w	r7, r0, #7
 8107ec4:	4605      	mov	r5, r0
 8107ec6:	d005      	beq.n	8107ed4 <_strtod_l+0x84>
 8107ec8:	2f06      	cmp	r7, #6
 8107eca:	d12a      	bne.n	8107f22 <_strtod_l+0xd2>
 8107ecc:	3601      	adds	r6, #1
 8107ece:	2300      	movs	r3, #0
 8107ed0:	961d      	str	r6, [sp, #116]	; 0x74
 8107ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8107ed4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8107ed6:	2b00      	cmp	r3, #0
 8107ed8:	f040 8596 	bne.w	8108a08 <_strtod_l+0xbb8>
 8107edc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8107ede:	b1db      	cbz	r3, 8107f18 <_strtod_l+0xc8>
 8107ee0:	4652      	mov	r2, sl
 8107ee2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8107ee6:	ec43 2b10 	vmov	d0, r2, r3
 8107eea:	b023      	add	sp, #140	; 0x8c
 8107eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107ef0:	2a20      	cmp	r2, #32
 8107ef2:	d1ce      	bne.n	8107e92 <_strtod_l+0x42>
 8107ef4:	3301      	adds	r3, #1
 8107ef6:	931d      	str	r3, [sp, #116]	; 0x74
 8107ef8:	e7c0      	b.n	8107e7c <_strtod_l+0x2c>
 8107efa:	2a2d      	cmp	r2, #45	; 0x2d
 8107efc:	d1c9      	bne.n	8107e92 <_strtod_l+0x42>
 8107efe:	2201      	movs	r2, #1
 8107f00:	920e      	str	r2, [sp, #56]	; 0x38
 8107f02:	1c5a      	adds	r2, r3, #1
 8107f04:	921d      	str	r2, [sp, #116]	; 0x74
 8107f06:	785b      	ldrb	r3, [r3, #1]
 8107f08:	2b00      	cmp	r3, #0
 8107f0a:	d1c4      	bne.n	8107e96 <_strtod_l+0x46>
 8107f0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8107f0e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8107f12:	2b00      	cmp	r3, #0
 8107f14:	f040 8576 	bne.w	8108a04 <_strtod_l+0xbb4>
 8107f18:	4652      	mov	r2, sl
 8107f1a:	465b      	mov	r3, fp
 8107f1c:	e7e3      	b.n	8107ee6 <_strtod_l+0x96>
 8107f1e:	2200      	movs	r2, #0
 8107f20:	e7ee      	b.n	8107f00 <_strtod_l+0xb0>
 8107f22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8107f24:	b13a      	cbz	r2, 8107f36 <_strtod_l+0xe6>
 8107f26:	2135      	movs	r1, #53	; 0x35
 8107f28:	a820      	add	r0, sp, #128	; 0x80
 8107f2a:	f002 fe16 	bl	810ab5a <__copybits>
 8107f2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8107f30:	4620      	mov	r0, r4
 8107f32:	f002 f9db 	bl	810a2ec <_Bfree>
 8107f36:	3f01      	subs	r7, #1
 8107f38:	2f05      	cmp	r7, #5
 8107f3a:	d807      	bhi.n	8107f4c <_strtod_l+0xfc>
 8107f3c:	e8df f007 	tbb	[pc, r7]
 8107f40:	1d180b0e 	.word	0x1d180b0e
 8107f44:	030e      	.short	0x030e
 8107f46:	f04f 0b00 	mov.w	fp, #0
 8107f4a:	46da      	mov	sl, fp
 8107f4c:	0728      	lsls	r0, r5, #28
 8107f4e:	d5c1      	bpl.n	8107ed4 <_strtod_l+0x84>
 8107f50:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8107f54:	e7be      	b.n	8107ed4 <_strtod_l+0x84>
 8107f56:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8107f5a:	e7f7      	b.n	8107f4c <_strtod_l+0xfc>
 8107f5c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8107f60:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8107f62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8107f66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8107f6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8107f6e:	e7ed      	b.n	8107f4c <_strtod_l+0xfc>
 8107f70:	f8df b184 	ldr.w	fp, [pc, #388]	; 81080f8 <_strtod_l+0x2a8>
 8107f74:	f04f 0a00 	mov.w	sl, #0
 8107f78:	e7e8      	b.n	8107f4c <_strtod_l+0xfc>
 8107f7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8107f7e:	f04f 3aff 	mov.w	sl, #4294967295
 8107f82:	e7e3      	b.n	8107f4c <_strtod_l+0xfc>
 8107f84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8107f86:	1c5a      	adds	r2, r3, #1
 8107f88:	921d      	str	r2, [sp, #116]	; 0x74
 8107f8a:	785b      	ldrb	r3, [r3, #1]
 8107f8c:	2b30      	cmp	r3, #48	; 0x30
 8107f8e:	d0f9      	beq.n	8107f84 <_strtod_l+0x134>
 8107f90:	2b00      	cmp	r3, #0
 8107f92:	d09f      	beq.n	8107ed4 <_strtod_l+0x84>
 8107f94:	2301      	movs	r3, #1
 8107f96:	f04f 0900 	mov.w	r9, #0
 8107f9a:	9304      	str	r3, [sp, #16]
 8107f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8107f9e:	930a      	str	r3, [sp, #40]	; 0x28
 8107fa0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8107fa4:	464f      	mov	r7, r9
 8107fa6:	220a      	movs	r2, #10
 8107fa8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8107faa:	7806      	ldrb	r6, [r0, #0]
 8107fac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8107fb0:	b2d9      	uxtb	r1, r3
 8107fb2:	2909      	cmp	r1, #9
 8107fb4:	d92a      	bls.n	810800c <_strtod_l+0x1bc>
 8107fb6:	9907      	ldr	r1, [sp, #28]
 8107fb8:	462a      	mov	r2, r5
 8107fba:	f003 f8f1 	bl	810b1a0 <strncmp>
 8107fbe:	b398      	cbz	r0, 8108028 <_strtod_l+0x1d8>
 8107fc0:	2000      	movs	r0, #0
 8107fc2:	4633      	mov	r3, r6
 8107fc4:	463d      	mov	r5, r7
 8107fc6:	9007      	str	r0, [sp, #28]
 8107fc8:	4602      	mov	r2, r0
 8107fca:	2b65      	cmp	r3, #101	; 0x65
 8107fcc:	d001      	beq.n	8107fd2 <_strtod_l+0x182>
 8107fce:	2b45      	cmp	r3, #69	; 0x45
 8107fd0:	d118      	bne.n	8108004 <_strtod_l+0x1b4>
 8107fd2:	b91d      	cbnz	r5, 8107fdc <_strtod_l+0x18c>
 8107fd4:	9b04      	ldr	r3, [sp, #16]
 8107fd6:	4303      	orrs	r3, r0
 8107fd8:	d098      	beq.n	8107f0c <_strtod_l+0xbc>
 8107fda:	2500      	movs	r5, #0
 8107fdc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8107fe0:	f108 0301 	add.w	r3, r8, #1
 8107fe4:	931d      	str	r3, [sp, #116]	; 0x74
 8107fe6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8107fea:	2b2b      	cmp	r3, #43	; 0x2b
 8107fec:	d075      	beq.n	81080da <_strtod_l+0x28a>
 8107fee:	2b2d      	cmp	r3, #45	; 0x2d
 8107ff0:	d07b      	beq.n	81080ea <_strtod_l+0x29a>
 8107ff2:	f04f 0c00 	mov.w	ip, #0
 8107ff6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8107ffa:	2909      	cmp	r1, #9
 8107ffc:	f240 8082 	bls.w	8108104 <_strtod_l+0x2b4>
 8108000:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108004:	2600      	movs	r6, #0
 8108006:	e09d      	b.n	8108144 <_strtod_l+0x2f4>
 8108008:	2300      	movs	r3, #0
 810800a:	e7c4      	b.n	8107f96 <_strtod_l+0x146>
 810800c:	2f08      	cmp	r7, #8
 810800e:	bfd8      	it	le
 8108010:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8108012:	f100 0001 	add.w	r0, r0, #1
 8108016:	bfda      	itte	le
 8108018:	fb02 3301 	mlale	r3, r2, r1, r3
 810801c:	9309      	strle	r3, [sp, #36]	; 0x24
 810801e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8108022:	3701      	adds	r7, #1
 8108024:	901d      	str	r0, [sp, #116]	; 0x74
 8108026:	e7bf      	b.n	8107fa8 <_strtod_l+0x158>
 8108028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810802a:	195a      	adds	r2, r3, r5
 810802c:	921d      	str	r2, [sp, #116]	; 0x74
 810802e:	5d5b      	ldrb	r3, [r3, r5]
 8108030:	2f00      	cmp	r7, #0
 8108032:	d037      	beq.n	81080a4 <_strtod_l+0x254>
 8108034:	9007      	str	r0, [sp, #28]
 8108036:	463d      	mov	r5, r7
 8108038:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 810803c:	2a09      	cmp	r2, #9
 810803e:	d912      	bls.n	8108066 <_strtod_l+0x216>
 8108040:	2201      	movs	r2, #1
 8108042:	e7c2      	b.n	8107fca <_strtod_l+0x17a>
 8108044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108046:	1c5a      	adds	r2, r3, #1
 8108048:	921d      	str	r2, [sp, #116]	; 0x74
 810804a:	785b      	ldrb	r3, [r3, #1]
 810804c:	3001      	adds	r0, #1
 810804e:	2b30      	cmp	r3, #48	; 0x30
 8108050:	d0f8      	beq.n	8108044 <_strtod_l+0x1f4>
 8108052:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8108056:	2a08      	cmp	r2, #8
 8108058:	f200 84db 	bhi.w	8108a12 <_strtod_l+0xbc2>
 810805c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 810805e:	9007      	str	r0, [sp, #28]
 8108060:	2000      	movs	r0, #0
 8108062:	920a      	str	r2, [sp, #40]	; 0x28
 8108064:	4605      	mov	r5, r0
 8108066:	3b30      	subs	r3, #48	; 0x30
 8108068:	f100 0201 	add.w	r2, r0, #1
 810806c:	d014      	beq.n	8108098 <_strtod_l+0x248>
 810806e:	9907      	ldr	r1, [sp, #28]
 8108070:	4411      	add	r1, r2
 8108072:	9107      	str	r1, [sp, #28]
 8108074:	462a      	mov	r2, r5
 8108076:	eb00 0e05 	add.w	lr, r0, r5
 810807a:	210a      	movs	r1, #10
 810807c:	4572      	cmp	r2, lr
 810807e:	d113      	bne.n	81080a8 <_strtod_l+0x258>
 8108080:	182a      	adds	r2, r5, r0
 8108082:	2a08      	cmp	r2, #8
 8108084:	f105 0501 	add.w	r5, r5, #1
 8108088:	4405      	add	r5, r0
 810808a:	dc1c      	bgt.n	81080c6 <_strtod_l+0x276>
 810808c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810808e:	220a      	movs	r2, #10
 8108090:	fb02 3301 	mla	r3, r2, r1, r3
 8108094:	9309      	str	r3, [sp, #36]	; 0x24
 8108096:	2200      	movs	r2, #0
 8108098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810809a:	1c59      	adds	r1, r3, #1
 810809c:	911d      	str	r1, [sp, #116]	; 0x74
 810809e:	785b      	ldrb	r3, [r3, #1]
 81080a0:	4610      	mov	r0, r2
 81080a2:	e7c9      	b.n	8108038 <_strtod_l+0x1e8>
 81080a4:	4638      	mov	r0, r7
 81080a6:	e7d2      	b.n	810804e <_strtod_l+0x1fe>
 81080a8:	2a08      	cmp	r2, #8
 81080aa:	dc04      	bgt.n	81080b6 <_strtod_l+0x266>
 81080ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 81080ae:	434e      	muls	r6, r1
 81080b0:	9609      	str	r6, [sp, #36]	; 0x24
 81080b2:	3201      	adds	r2, #1
 81080b4:	e7e2      	b.n	810807c <_strtod_l+0x22c>
 81080b6:	f102 0c01 	add.w	ip, r2, #1
 81080ba:	f1bc 0f10 	cmp.w	ip, #16
 81080be:	bfd8      	it	le
 81080c0:	fb01 f909 	mulle.w	r9, r1, r9
 81080c4:	e7f5      	b.n	81080b2 <_strtod_l+0x262>
 81080c6:	2d10      	cmp	r5, #16
 81080c8:	bfdc      	itt	le
 81080ca:	220a      	movle	r2, #10
 81080cc:	fb02 3909 	mlale	r9, r2, r9, r3
 81080d0:	e7e1      	b.n	8108096 <_strtod_l+0x246>
 81080d2:	2300      	movs	r3, #0
 81080d4:	9307      	str	r3, [sp, #28]
 81080d6:	2201      	movs	r2, #1
 81080d8:	e77c      	b.n	8107fd4 <_strtod_l+0x184>
 81080da:	f04f 0c00 	mov.w	ip, #0
 81080de:	f108 0302 	add.w	r3, r8, #2
 81080e2:	931d      	str	r3, [sp, #116]	; 0x74
 81080e4:	f898 3002 	ldrb.w	r3, [r8, #2]
 81080e8:	e785      	b.n	8107ff6 <_strtod_l+0x1a6>
 81080ea:	f04f 0c01 	mov.w	ip, #1
 81080ee:	e7f6      	b.n	81080de <_strtod_l+0x28e>
 81080f0:	0810b730 	.word	0x0810b730
 81080f4:	0810b4e0 	.word	0x0810b4e0
 81080f8:	7ff00000 	.word	0x7ff00000
 81080fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81080fe:	1c59      	adds	r1, r3, #1
 8108100:	911d      	str	r1, [sp, #116]	; 0x74
 8108102:	785b      	ldrb	r3, [r3, #1]
 8108104:	2b30      	cmp	r3, #48	; 0x30
 8108106:	d0f9      	beq.n	81080fc <_strtod_l+0x2ac>
 8108108:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 810810c:	2908      	cmp	r1, #8
 810810e:	f63f af79 	bhi.w	8108004 <_strtod_l+0x1b4>
 8108112:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8108116:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108118:	9308      	str	r3, [sp, #32]
 810811a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810811c:	1c59      	adds	r1, r3, #1
 810811e:	911d      	str	r1, [sp, #116]	; 0x74
 8108120:	785b      	ldrb	r3, [r3, #1]
 8108122:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8108126:	2e09      	cmp	r6, #9
 8108128:	d937      	bls.n	810819a <_strtod_l+0x34a>
 810812a:	9e08      	ldr	r6, [sp, #32]
 810812c:	1b89      	subs	r1, r1, r6
 810812e:	2908      	cmp	r1, #8
 8108130:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8108134:	dc02      	bgt.n	810813c <_strtod_l+0x2ec>
 8108136:	4576      	cmp	r6, lr
 8108138:	bfa8      	it	ge
 810813a:	4676      	movge	r6, lr
 810813c:	f1bc 0f00 	cmp.w	ip, #0
 8108140:	d000      	beq.n	8108144 <_strtod_l+0x2f4>
 8108142:	4276      	negs	r6, r6
 8108144:	2d00      	cmp	r5, #0
 8108146:	d14f      	bne.n	81081e8 <_strtod_l+0x398>
 8108148:	9904      	ldr	r1, [sp, #16]
 810814a:	4301      	orrs	r1, r0
 810814c:	f47f aec2 	bne.w	8107ed4 <_strtod_l+0x84>
 8108150:	2a00      	cmp	r2, #0
 8108152:	f47f aedb 	bne.w	8107f0c <_strtod_l+0xbc>
 8108156:	2b69      	cmp	r3, #105	; 0x69
 8108158:	d027      	beq.n	81081aa <_strtod_l+0x35a>
 810815a:	dc24      	bgt.n	81081a6 <_strtod_l+0x356>
 810815c:	2b49      	cmp	r3, #73	; 0x49
 810815e:	d024      	beq.n	81081aa <_strtod_l+0x35a>
 8108160:	2b4e      	cmp	r3, #78	; 0x4e
 8108162:	f47f aed3 	bne.w	8107f0c <_strtod_l+0xbc>
 8108166:	499e      	ldr	r1, [pc, #632]	; (81083e0 <_strtod_l+0x590>)
 8108168:	a81d      	add	r0, sp, #116	; 0x74
 810816a:	f001 ff21 	bl	8109fb0 <__match>
 810816e:	2800      	cmp	r0, #0
 8108170:	f43f aecc 	beq.w	8107f0c <_strtod_l+0xbc>
 8108174:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108176:	781b      	ldrb	r3, [r3, #0]
 8108178:	2b28      	cmp	r3, #40	; 0x28
 810817a:	d12d      	bne.n	81081d8 <_strtod_l+0x388>
 810817c:	4999      	ldr	r1, [pc, #612]	; (81083e4 <_strtod_l+0x594>)
 810817e:	aa20      	add	r2, sp, #128	; 0x80
 8108180:	a81d      	add	r0, sp, #116	; 0x74
 8108182:	f001 ff29 	bl	8109fd8 <__hexnan>
 8108186:	2805      	cmp	r0, #5
 8108188:	d126      	bne.n	81081d8 <_strtod_l+0x388>
 810818a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810818c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8108190:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8108194:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8108198:	e69c      	b.n	8107ed4 <_strtod_l+0x84>
 810819a:	210a      	movs	r1, #10
 810819c:	fb01 3e0e 	mla	lr, r1, lr, r3
 81081a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 81081a4:	e7b9      	b.n	810811a <_strtod_l+0x2ca>
 81081a6:	2b6e      	cmp	r3, #110	; 0x6e
 81081a8:	e7db      	b.n	8108162 <_strtod_l+0x312>
 81081aa:	498f      	ldr	r1, [pc, #572]	; (81083e8 <_strtod_l+0x598>)
 81081ac:	a81d      	add	r0, sp, #116	; 0x74
 81081ae:	f001 feff 	bl	8109fb0 <__match>
 81081b2:	2800      	cmp	r0, #0
 81081b4:	f43f aeaa 	beq.w	8107f0c <_strtod_l+0xbc>
 81081b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81081ba:	498c      	ldr	r1, [pc, #560]	; (81083ec <_strtod_l+0x59c>)
 81081bc:	3b01      	subs	r3, #1
 81081be:	a81d      	add	r0, sp, #116	; 0x74
 81081c0:	931d      	str	r3, [sp, #116]	; 0x74
 81081c2:	f001 fef5 	bl	8109fb0 <__match>
 81081c6:	b910      	cbnz	r0, 81081ce <_strtod_l+0x37e>
 81081c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81081ca:	3301      	adds	r3, #1
 81081cc:	931d      	str	r3, [sp, #116]	; 0x74
 81081ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; 81083fc <_strtod_l+0x5ac>
 81081d2:	f04f 0a00 	mov.w	sl, #0
 81081d6:	e67d      	b.n	8107ed4 <_strtod_l+0x84>
 81081d8:	4885      	ldr	r0, [pc, #532]	; (81083f0 <_strtod_l+0x5a0>)
 81081da:	f002 ffd9 	bl	810b190 <nan>
 81081de:	ed8d 0b04 	vstr	d0, [sp, #16]
 81081e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 81081e6:	e675      	b.n	8107ed4 <_strtod_l+0x84>
 81081e8:	9b07      	ldr	r3, [sp, #28]
 81081ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 81081ec:	1af3      	subs	r3, r6, r3
 81081ee:	2f00      	cmp	r7, #0
 81081f0:	bf08      	it	eq
 81081f2:	462f      	moveq	r7, r5
 81081f4:	2d10      	cmp	r5, #16
 81081f6:	9308      	str	r3, [sp, #32]
 81081f8:	46a8      	mov	r8, r5
 81081fa:	bfa8      	it	ge
 81081fc:	f04f 0810 	movge.w	r8, #16
 8108200:	f7f8 fa08 	bl	8100614 <__aeabi_ui2d>
 8108204:	2d09      	cmp	r5, #9
 8108206:	4682      	mov	sl, r0
 8108208:	468b      	mov	fp, r1
 810820a:	dd13      	ble.n	8108234 <_strtod_l+0x3e4>
 810820c:	4b79      	ldr	r3, [pc, #484]	; (81083f4 <_strtod_l+0x5a4>)
 810820e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8108212:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8108216:	f7f8 fa77 	bl	8100708 <__aeabi_dmul>
 810821a:	4682      	mov	sl, r0
 810821c:	4648      	mov	r0, r9
 810821e:	468b      	mov	fp, r1
 8108220:	f7f8 f9f8 	bl	8100614 <__aeabi_ui2d>
 8108224:	4602      	mov	r2, r0
 8108226:	460b      	mov	r3, r1
 8108228:	4650      	mov	r0, sl
 810822a:	4659      	mov	r1, fp
 810822c:	f7f8 f8b6 	bl	810039c <__adddf3>
 8108230:	4682      	mov	sl, r0
 8108232:	468b      	mov	fp, r1
 8108234:	2d0f      	cmp	r5, #15
 8108236:	dc38      	bgt.n	81082aa <_strtod_l+0x45a>
 8108238:	9b08      	ldr	r3, [sp, #32]
 810823a:	2b00      	cmp	r3, #0
 810823c:	f43f ae4a 	beq.w	8107ed4 <_strtod_l+0x84>
 8108240:	dd24      	ble.n	810828c <_strtod_l+0x43c>
 8108242:	2b16      	cmp	r3, #22
 8108244:	dc0b      	bgt.n	810825e <_strtod_l+0x40e>
 8108246:	4d6b      	ldr	r5, [pc, #428]	; (81083f4 <_strtod_l+0x5a4>)
 8108248:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 810824c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8108250:	4652      	mov	r2, sl
 8108252:	465b      	mov	r3, fp
 8108254:	f7f8 fa58 	bl	8100708 <__aeabi_dmul>
 8108258:	4682      	mov	sl, r0
 810825a:	468b      	mov	fp, r1
 810825c:	e63a      	b.n	8107ed4 <_strtod_l+0x84>
 810825e:	9a08      	ldr	r2, [sp, #32]
 8108260:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8108264:	4293      	cmp	r3, r2
 8108266:	db20      	blt.n	81082aa <_strtod_l+0x45a>
 8108268:	4c62      	ldr	r4, [pc, #392]	; (81083f4 <_strtod_l+0x5a4>)
 810826a:	f1c5 050f 	rsb	r5, r5, #15
 810826e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8108272:	4652      	mov	r2, sl
 8108274:	465b      	mov	r3, fp
 8108276:	e9d1 0100 	ldrd	r0, r1, [r1]
 810827a:	f7f8 fa45 	bl	8100708 <__aeabi_dmul>
 810827e:	9b08      	ldr	r3, [sp, #32]
 8108280:	1b5d      	subs	r5, r3, r5
 8108282:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8108286:	e9d4 2300 	ldrd	r2, r3, [r4]
 810828a:	e7e3      	b.n	8108254 <_strtod_l+0x404>
 810828c:	9b08      	ldr	r3, [sp, #32]
 810828e:	3316      	adds	r3, #22
 8108290:	db0b      	blt.n	81082aa <_strtod_l+0x45a>
 8108292:	9b07      	ldr	r3, [sp, #28]
 8108294:	4a57      	ldr	r2, [pc, #348]	; (81083f4 <_strtod_l+0x5a4>)
 8108296:	1b9e      	subs	r6, r3, r6
 8108298:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 810829c:	e9d6 2300 	ldrd	r2, r3, [r6]
 81082a0:	4650      	mov	r0, sl
 81082a2:	4659      	mov	r1, fp
 81082a4:	f7f8 fb5a 	bl	810095c <__aeabi_ddiv>
 81082a8:	e7d6      	b.n	8108258 <_strtod_l+0x408>
 81082aa:	9b08      	ldr	r3, [sp, #32]
 81082ac:	eba5 0808 	sub.w	r8, r5, r8
 81082b0:	4498      	add	r8, r3
 81082b2:	f1b8 0f00 	cmp.w	r8, #0
 81082b6:	dd71      	ble.n	810839c <_strtod_l+0x54c>
 81082b8:	f018 030f 	ands.w	r3, r8, #15
 81082bc:	d00a      	beq.n	81082d4 <_strtod_l+0x484>
 81082be:	494d      	ldr	r1, [pc, #308]	; (81083f4 <_strtod_l+0x5a4>)
 81082c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81082c4:	4652      	mov	r2, sl
 81082c6:	465b      	mov	r3, fp
 81082c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 81082cc:	f7f8 fa1c 	bl	8100708 <__aeabi_dmul>
 81082d0:	4682      	mov	sl, r0
 81082d2:	468b      	mov	fp, r1
 81082d4:	f038 080f 	bics.w	r8, r8, #15
 81082d8:	d04d      	beq.n	8108376 <_strtod_l+0x526>
 81082da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 81082de:	dd22      	ble.n	8108326 <_strtod_l+0x4d6>
 81082e0:	2500      	movs	r5, #0
 81082e2:	462e      	mov	r6, r5
 81082e4:	9509      	str	r5, [sp, #36]	; 0x24
 81082e6:	9507      	str	r5, [sp, #28]
 81082e8:	2322      	movs	r3, #34	; 0x22
 81082ea:	f8df b110 	ldr.w	fp, [pc, #272]	; 81083fc <_strtod_l+0x5ac>
 81082ee:	6023      	str	r3, [r4, #0]
 81082f0:	f04f 0a00 	mov.w	sl, #0
 81082f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81082f6:	2b00      	cmp	r3, #0
 81082f8:	f43f adec 	beq.w	8107ed4 <_strtod_l+0x84>
 81082fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 81082fe:	4620      	mov	r0, r4
 8108300:	f001 fff4 	bl	810a2ec <_Bfree>
 8108304:	9907      	ldr	r1, [sp, #28]
 8108306:	4620      	mov	r0, r4
 8108308:	f001 fff0 	bl	810a2ec <_Bfree>
 810830c:	4631      	mov	r1, r6
 810830e:	4620      	mov	r0, r4
 8108310:	f001 ffec 	bl	810a2ec <_Bfree>
 8108314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108316:	4620      	mov	r0, r4
 8108318:	f001 ffe8 	bl	810a2ec <_Bfree>
 810831c:	4629      	mov	r1, r5
 810831e:	4620      	mov	r0, r4
 8108320:	f001 ffe4 	bl	810a2ec <_Bfree>
 8108324:	e5d6      	b.n	8107ed4 <_strtod_l+0x84>
 8108326:	2300      	movs	r3, #0
 8108328:	ea4f 1828 	mov.w	r8, r8, asr #4
 810832c:	4650      	mov	r0, sl
 810832e:	4659      	mov	r1, fp
 8108330:	4699      	mov	r9, r3
 8108332:	f1b8 0f01 	cmp.w	r8, #1
 8108336:	dc21      	bgt.n	810837c <_strtod_l+0x52c>
 8108338:	b10b      	cbz	r3, 810833e <_strtod_l+0x4ee>
 810833a:	4682      	mov	sl, r0
 810833c:	468b      	mov	fp, r1
 810833e:	4b2e      	ldr	r3, [pc, #184]	; (81083f8 <_strtod_l+0x5a8>)
 8108340:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8108344:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8108348:	4652      	mov	r2, sl
 810834a:	465b      	mov	r3, fp
 810834c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8108350:	f7f8 f9da 	bl	8100708 <__aeabi_dmul>
 8108354:	4b29      	ldr	r3, [pc, #164]	; (81083fc <_strtod_l+0x5ac>)
 8108356:	460a      	mov	r2, r1
 8108358:	400b      	ands	r3, r1
 810835a:	4929      	ldr	r1, [pc, #164]	; (8108400 <_strtod_l+0x5b0>)
 810835c:	428b      	cmp	r3, r1
 810835e:	4682      	mov	sl, r0
 8108360:	d8be      	bhi.n	81082e0 <_strtod_l+0x490>
 8108362:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8108366:	428b      	cmp	r3, r1
 8108368:	bf86      	itte	hi
 810836a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8108404 <_strtod_l+0x5b4>
 810836e:	f04f 3aff 	movhi.w	sl, #4294967295
 8108372:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8108376:	2300      	movs	r3, #0
 8108378:	9304      	str	r3, [sp, #16]
 810837a:	e081      	b.n	8108480 <_strtod_l+0x630>
 810837c:	f018 0f01 	tst.w	r8, #1
 8108380:	d007      	beq.n	8108392 <_strtod_l+0x542>
 8108382:	4b1d      	ldr	r3, [pc, #116]	; (81083f8 <_strtod_l+0x5a8>)
 8108384:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8108388:	e9d3 2300 	ldrd	r2, r3, [r3]
 810838c:	f7f8 f9bc 	bl	8100708 <__aeabi_dmul>
 8108390:	2301      	movs	r3, #1
 8108392:	f109 0901 	add.w	r9, r9, #1
 8108396:	ea4f 0868 	mov.w	r8, r8, asr #1
 810839a:	e7ca      	b.n	8108332 <_strtod_l+0x4e2>
 810839c:	d0eb      	beq.n	8108376 <_strtod_l+0x526>
 810839e:	f1c8 0800 	rsb	r8, r8, #0
 81083a2:	f018 020f 	ands.w	r2, r8, #15
 81083a6:	d00a      	beq.n	81083be <_strtod_l+0x56e>
 81083a8:	4b12      	ldr	r3, [pc, #72]	; (81083f4 <_strtod_l+0x5a4>)
 81083aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81083ae:	4650      	mov	r0, sl
 81083b0:	4659      	mov	r1, fp
 81083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81083b6:	f7f8 fad1 	bl	810095c <__aeabi_ddiv>
 81083ba:	4682      	mov	sl, r0
 81083bc:	468b      	mov	fp, r1
 81083be:	ea5f 1828 	movs.w	r8, r8, asr #4
 81083c2:	d0d8      	beq.n	8108376 <_strtod_l+0x526>
 81083c4:	f1b8 0f1f 	cmp.w	r8, #31
 81083c8:	dd1e      	ble.n	8108408 <_strtod_l+0x5b8>
 81083ca:	2500      	movs	r5, #0
 81083cc:	462e      	mov	r6, r5
 81083ce:	9509      	str	r5, [sp, #36]	; 0x24
 81083d0:	9507      	str	r5, [sp, #28]
 81083d2:	2322      	movs	r3, #34	; 0x22
 81083d4:	f04f 0a00 	mov.w	sl, #0
 81083d8:	f04f 0b00 	mov.w	fp, #0
 81083dc:	6023      	str	r3, [r4, #0]
 81083de:	e789      	b.n	81082f4 <_strtod_l+0x4a4>
 81083e0:	0810b4b1 	.word	0x0810b4b1
 81083e4:	0810b4f4 	.word	0x0810b4f4
 81083e8:	0810b4a9 	.word	0x0810b4a9
 81083ec:	0810b634 	.word	0x0810b634
 81083f0:	0810b8f0 	.word	0x0810b8f0
 81083f4:	0810b7d0 	.word	0x0810b7d0
 81083f8:	0810b7a8 	.word	0x0810b7a8
 81083fc:	7ff00000 	.word	0x7ff00000
 8108400:	7ca00000 	.word	0x7ca00000
 8108404:	7fefffff 	.word	0x7fefffff
 8108408:	f018 0310 	ands.w	r3, r8, #16
 810840c:	bf18      	it	ne
 810840e:	236a      	movne	r3, #106	; 0x6a
 8108410:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 81087c8 <_strtod_l+0x978>
 8108414:	9304      	str	r3, [sp, #16]
 8108416:	4650      	mov	r0, sl
 8108418:	4659      	mov	r1, fp
 810841a:	2300      	movs	r3, #0
 810841c:	f018 0f01 	tst.w	r8, #1
 8108420:	d004      	beq.n	810842c <_strtod_l+0x5dc>
 8108422:	e9d9 2300 	ldrd	r2, r3, [r9]
 8108426:	f7f8 f96f 	bl	8100708 <__aeabi_dmul>
 810842a:	2301      	movs	r3, #1
 810842c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108430:	f109 0908 	add.w	r9, r9, #8
 8108434:	d1f2      	bne.n	810841c <_strtod_l+0x5cc>
 8108436:	b10b      	cbz	r3, 810843c <_strtod_l+0x5ec>
 8108438:	4682      	mov	sl, r0
 810843a:	468b      	mov	fp, r1
 810843c:	9b04      	ldr	r3, [sp, #16]
 810843e:	b1bb      	cbz	r3, 8108470 <_strtod_l+0x620>
 8108440:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8108444:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108448:	2b00      	cmp	r3, #0
 810844a:	4659      	mov	r1, fp
 810844c:	dd10      	ble.n	8108470 <_strtod_l+0x620>
 810844e:	2b1f      	cmp	r3, #31
 8108450:	f340 8128 	ble.w	81086a4 <_strtod_l+0x854>
 8108454:	2b34      	cmp	r3, #52	; 0x34
 8108456:	bfde      	ittt	le
 8108458:	3b20      	suble	r3, #32
 810845a:	f04f 32ff 	movle.w	r2, #4294967295
 810845e:	fa02 f303 	lslle.w	r3, r2, r3
 8108462:	f04f 0a00 	mov.w	sl, #0
 8108466:	bfcc      	ite	gt
 8108468:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810846c:	ea03 0b01 	andle.w	fp, r3, r1
 8108470:	2200      	movs	r2, #0
 8108472:	2300      	movs	r3, #0
 8108474:	4650      	mov	r0, sl
 8108476:	4659      	mov	r1, fp
 8108478:	f7f8 fbae 	bl	8100bd8 <__aeabi_dcmpeq>
 810847c:	2800      	cmp	r0, #0
 810847e:	d1a4      	bne.n	81083ca <_strtod_l+0x57a>
 8108480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108482:	9300      	str	r3, [sp, #0]
 8108484:	990a      	ldr	r1, [sp, #40]	; 0x28
 8108486:	462b      	mov	r3, r5
 8108488:	463a      	mov	r2, r7
 810848a:	4620      	mov	r0, r4
 810848c:	f001 ff9a 	bl	810a3c4 <__s2b>
 8108490:	9009      	str	r0, [sp, #36]	; 0x24
 8108492:	2800      	cmp	r0, #0
 8108494:	f43f af24 	beq.w	81082e0 <_strtod_l+0x490>
 8108498:	9b07      	ldr	r3, [sp, #28]
 810849a:	1b9e      	subs	r6, r3, r6
 810849c:	9b08      	ldr	r3, [sp, #32]
 810849e:	2b00      	cmp	r3, #0
 81084a0:	bfb4      	ite	lt
 81084a2:	4633      	movlt	r3, r6
 81084a4:	2300      	movge	r3, #0
 81084a6:	9310      	str	r3, [sp, #64]	; 0x40
 81084a8:	9b08      	ldr	r3, [sp, #32]
 81084aa:	2500      	movs	r5, #0
 81084ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 81084b0:	9318      	str	r3, [sp, #96]	; 0x60
 81084b2:	462e      	mov	r6, r5
 81084b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81084b6:	4620      	mov	r0, r4
 81084b8:	6859      	ldr	r1, [r3, #4]
 81084ba:	f001 fed7 	bl	810a26c <_Balloc>
 81084be:	9007      	str	r0, [sp, #28]
 81084c0:	2800      	cmp	r0, #0
 81084c2:	f43f af11 	beq.w	81082e8 <_strtod_l+0x498>
 81084c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81084c8:	691a      	ldr	r2, [r3, #16]
 81084ca:	3202      	adds	r2, #2
 81084cc:	f103 010c 	add.w	r1, r3, #12
 81084d0:	0092      	lsls	r2, r2, #2
 81084d2:	300c      	adds	r0, #12
 81084d4:	f001 feb0 	bl	810a238 <memcpy>
 81084d8:	ec4b ab10 	vmov	d0, sl, fp
 81084dc:	aa20      	add	r2, sp, #128	; 0x80
 81084de:	a91f      	add	r1, sp, #124	; 0x7c
 81084e0:	4620      	mov	r0, r4
 81084e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 81084e6:	f002 faa9 	bl	810aa3c <__d2b>
 81084ea:	901e      	str	r0, [sp, #120]	; 0x78
 81084ec:	2800      	cmp	r0, #0
 81084ee:	f43f aefb 	beq.w	81082e8 <_strtod_l+0x498>
 81084f2:	2101      	movs	r1, #1
 81084f4:	4620      	mov	r0, r4
 81084f6:	f001 ffff 	bl	810a4f8 <__i2b>
 81084fa:	4606      	mov	r6, r0
 81084fc:	2800      	cmp	r0, #0
 81084fe:	f43f aef3 	beq.w	81082e8 <_strtod_l+0x498>
 8108502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8108504:	9904      	ldr	r1, [sp, #16]
 8108506:	2b00      	cmp	r3, #0
 8108508:	bfab      	itete	ge
 810850a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 810850c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 810850e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8108510:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8108514:	bfac      	ite	ge
 8108516:	eb03 0902 	addge.w	r9, r3, r2
 810851a:	1ad7      	sublt	r7, r2, r3
 810851c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810851e:	eba3 0801 	sub.w	r8, r3, r1
 8108522:	4490      	add	r8, r2
 8108524:	4ba3      	ldr	r3, [pc, #652]	; (81087b4 <_strtod_l+0x964>)
 8108526:	f108 38ff 	add.w	r8, r8, #4294967295
 810852a:	4598      	cmp	r8, r3
 810852c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8108530:	f280 80cc 	bge.w	81086cc <_strtod_l+0x87c>
 8108534:	eba3 0308 	sub.w	r3, r3, r8
 8108538:	2b1f      	cmp	r3, #31
 810853a:	eba2 0203 	sub.w	r2, r2, r3
 810853e:	f04f 0101 	mov.w	r1, #1
 8108542:	f300 80b6 	bgt.w	81086b2 <_strtod_l+0x862>
 8108546:	fa01 f303 	lsl.w	r3, r1, r3
 810854a:	9311      	str	r3, [sp, #68]	; 0x44
 810854c:	2300      	movs	r3, #0
 810854e:	930c      	str	r3, [sp, #48]	; 0x30
 8108550:	eb09 0802 	add.w	r8, r9, r2
 8108554:	9b04      	ldr	r3, [sp, #16]
 8108556:	45c1      	cmp	r9, r8
 8108558:	4417      	add	r7, r2
 810855a:	441f      	add	r7, r3
 810855c:	464b      	mov	r3, r9
 810855e:	bfa8      	it	ge
 8108560:	4643      	movge	r3, r8
 8108562:	42bb      	cmp	r3, r7
 8108564:	bfa8      	it	ge
 8108566:	463b      	movge	r3, r7
 8108568:	2b00      	cmp	r3, #0
 810856a:	bfc2      	ittt	gt
 810856c:	eba8 0803 	subgt.w	r8, r8, r3
 8108570:	1aff      	subgt	r7, r7, r3
 8108572:	eba9 0903 	subgt.w	r9, r9, r3
 8108576:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108578:	2b00      	cmp	r3, #0
 810857a:	dd17      	ble.n	81085ac <_strtod_l+0x75c>
 810857c:	4631      	mov	r1, r6
 810857e:	461a      	mov	r2, r3
 8108580:	4620      	mov	r0, r4
 8108582:	f002 f875 	bl	810a670 <__pow5mult>
 8108586:	4606      	mov	r6, r0
 8108588:	2800      	cmp	r0, #0
 810858a:	f43f aead 	beq.w	81082e8 <_strtod_l+0x498>
 810858e:	4601      	mov	r1, r0
 8108590:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8108592:	4620      	mov	r0, r4
 8108594:	f001 ffc6 	bl	810a524 <__multiply>
 8108598:	900f      	str	r0, [sp, #60]	; 0x3c
 810859a:	2800      	cmp	r0, #0
 810859c:	f43f aea4 	beq.w	81082e8 <_strtod_l+0x498>
 81085a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 81085a2:	4620      	mov	r0, r4
 81085a4:	f001 fea2 	bl	810a2ec <_Bfree>
 81085a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81085aa:	931e      	str	r3, [sp, #120]	; 0x78
 81085ac:	f1b8 0f00 	cmp.w	r8, #0
 81085b0:	f300 8091 	bgt.w	81086d6 <_strtod_l+0x886>
 81085b4:	9b08      	ldr	r3, [sp, #32]
 81085b6:	2b00      	cmp	r3, #0
 81085b8:	dd08      	ble.n	81085cc <_strtod_l+0x77c>
 81085ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 81085bc:	9907      	ldr	r1, [sp, #28]
 81085be:	4620      	mov	r0, r4
 81085c0:	f002 f856 	bl	810a670 <__pow5mult>
 81085c4:	9007      	str	r0, [sp, #28]
 81085c6:	2800      	cmp	r0, #0
 81085c8:	f43f ae8e 	beq.w	81082e8 <_strtod_l+0x498>
 81085cc:	2f00      	cmp	r7, #0
 81085ce:	dd08      	ble.n	81085e2 <_strtod_l+0x792>
 81085d0:	9907      	ldr	r1, [sp, #28]
 81085d2:	463a      	mov	r2, r7
 81085d4:	4620      	mov	r0, r4
 81085d6:	f002 f8a5 	bl	810a724 <__lshift>
 81085da:	9007      	str	r0, [sp, #28]
 81085dc:	2800      	cmp	r0, #0
 81085de:	f43f ae83 	beq.w	81082e8 <_strtod_l+0x498>
 81085e2:	f1b9 0f00 	cmp.w	r9, #0
 81085e6:	dd08      	ble.n	81085fa <_strtod_l+0x7aa>
 81085e8:	4631      	mov	r1, r6
 81085ea:	464a      	mov	r2, r9
 81085ec:	4620      	mov	r0, r4
 81085ee:	f002 f899 	bl	810a724 <__lshift>
 81085f2:	4606      	mov	r6, r0
 81085f4:	2800      	cmp	r0, #0
 81085f6:	f43f ae77 	beq.w	81082e8 <_strtod_l+0x498>
 81085fa:	9a07      	ldr	r2, [sp, #28]
 81085fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 81085fe:	4620      	mov	r0, r4
 8108600:	f002 f918 	bl	810a834 <__mdiff>
 8108604:	4605      	mov	r5, r0
 8108606:	2800      	cmp	r0, #0
 8108608:	f43f ae6e 	beq.w	81082e8 <_strtod_l+0x498>
 810860c:	68c3      	ldr	r3, [r0, #12]
 810860e:	930f      	str	r3, [sp, #60]	; 0x3c
 8108610:	2300      	movs	r3, #0
 8108612:	60c3      	str	r3, [r0, #12]
 8108614:	4631      	mov	r1, r6
 8108616:	f002 f8f1 	bl	810a7fc <__mcmp>
 810861a:	2800      	cmp	r0, #0
 810861c:	da65      	bge.n	81086ea <_strtod_l+0x89a>
 810861e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108620:	ea53 030a 	orrs.w	r3, r3, sl
 8108624:	f040 8087 	bne.w	8108736 <_strtod_l+0x8e6>
 8108628:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810862c:	2b00      	cmp	r3, #0
 810862e:	f040 8082 	bne.w	8108736 <_strtod_l+0x8e6>
 8108632:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108636:	0d1b      	lsrs	r3, r3, #20
 8108638:	051b      	lsls	r3, r3, #20
 810863a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810863e:	d97a      	bls.n	8108736 <_strtod_l+0x8e6>
 8108640:	696b      	ldr	r3, [r5, #20]
 8108642:	b913      	cbnz	r3, 810864a <_strtod_l+0x7fa>
 8108644:	692b      	ldr	r3, [r5, #16]
 8108646:	2b01      	cmp	r3, #1
 8108648:	dd75      	ble.n	8108736 <_strtod_l+0x8e6>
 810864a:	4629      	mov	r1, r5
 810864c:	2201      	movs	r2, #1
 810864e:	4620      	mov	r0, r4
 8108650:	f002 f868 	bl	810a724 <__lshift>
 8108654:	4631      	mov	r1, r6
 8108656:	4605      	mov	r5, r0
 8108658:	f002 f8d0 	bl	810a7fc <__mcmp>
 810865c:	2800      	cmp	r0, #0
 810865e:	dd6a      	ble.n	8108736 <_strtod_l+0x8e6>
 8108660:	9904      	ldr	r1, [sp, #16]
 8108662:	4a55      	ldr	r2, [pc, #340]	; (81087b8 <_strtod_l+0x968>)
 8108664:	465b      	mov	r3, fp
 8108666:	2900      	cmp	r1, #0
 8108668:	f000 8085 	beq.w	8108776 <_strtod_l+0x926>
 810866c:	ea02 010b 	and.w	r1, r2, fp
 8108670:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8108674:	dc7f      	bgt.n	8108776 <_strtod_l+0x926>
 8108676:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810867a:	f77f aeaa 	ble.w	81083d2 <_strtod_l+0x582>
 810867e:	4a4f      	ldr	r2, [pc, #316]	; (81087bc <_strtod_l+0x96c>)
 8108680:	2300      	movs	r3, #0
 8108682:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8108686:	4650      	mov	r0, sl
 8108688:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 810868c:	4659      	mov	r1, fp
 810868e:	f7f8 f83b 	bl	8100708 <__aeabi_dmul>
 8108692:	460b      	mov	r3, r1
 8108694:	4303      	orrs	r3, r0
 8108696:	bf08      	it	eq
 8108698:	2322      	moveq	r3, #34	; 0x22
 810869a:	4682      	mov	sl, r0
 810869c:	468b      	mov	fp, r1
 810869e:	bf08      	it	eq
 81086a0:	6023      	streq	r3, [r4, #0]
 81086a2:	e62b      	b.n	81082fc <_strtod_l+0x4ac>
 81086a4:	f04f 32ff 	mov.w	r2, #4294967295
 81086a8:	fa02 f303 	lsl.w	r3, r2, r3
 81086ac:	ea03 0a0a 	and.w	sl, r3, sl
 81086b0:	e6de      	b.n	8108470 <_strtod_l+0x620>
 81086b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 81086b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 81086ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 81086be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 81086c2:	fa01 f308 	lsl.w	r3, r1, r8
 81086c6:	930c      	str	r3, [sp, #48]	; 0x30
 81086c8:	9111      	str	r1, [sp, #68]	; 0x44
 81086ca:	e741      	b.n	8108550 <_strtod_l+0x700>
 81086cc:	2300      	movs	r3, #0
 81086ce:	930c      	str	r3, [sp, #48]	; 0x30
 81086d0:	2301      	movs	r3, #1
 81086d2:	9311      	str	r3, [sp, #68]	; 0x44
 81086d4:	e73c      	b.n	8108550 <_strtod_l+0x700>
 81086d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 81086d8:	4642      	mov	r2, r8
 81086da:	4620      	mov	r0, r4
 81086dc:	f002 f822 	bl	810a724 <__lshift>
 81086e0:	901e      	str	r0, [sp, #120]	; 0x78
 81086e2:	2800      	cmp	r0, #0
 81086e4:	f47f af66 	bne.w	81085b4 <_strtod_l+0x764>
 81086e8:	e5fe      	b.n	81082e8 <_strtod_l+0x498>
 81086ea:	465f      	mov	r7, fp
 81086ec:	d16e      	bne.n	81087cc <_strtod_l+0x97c>
 81086ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81086f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81086f4:	b342      	cbz	r2, 8108748 <_strtod_l+0x8f8>
 81086f6:	4a32      	ldr	r2, [pc, #200]	; (81087c0 <_strtod_l+0x970>)
 81086f8:	4293      	cmp	r3, r2
 81086fa:	d128      	bne.n	810874e <_strtod_l+0x8fe>
 81086fc:	9b04      	ldr	r3, [sp, #16]
 81086fe:	4650      	mov	r0, sl
 8108700:	b1eb      	cbz	r3, 810873e <_strtod_l+0x8ee>
 8108702:	4a2d      	ldr	r2, [pc, #180]	; (81087b8 <_strtod_l+0x968>)
 8108704:	403a      	ands	r2, r7
 8108706:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 810870a:	f04f 31ff 	mov.w	r1, #4294967295
 810870e:	d819      	bhi.n	8108744 <_strtod_l+0x8f4>
 8108710:	0d12      	lsrs	r2, r2, #20
 8108712:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108716:	fa01 f303 	lsl.w	r3, r1, r3
 810871a:	4298      	cmp	r0, r3
 810871c:	d117      	bne.n	810874e <_strtod_l+0x8fe>
 810871e:	4b29      	ldr	r3, [pc, #164]	; (81087c4 <_strtod_l+0x974>)
 8108720:	429f      	cmp	r7, r3
 8108722:	d102      	bne.n	810872a <_strtod_l+0x8da>
 8108724:	3001      	adds	r0, #1
 8108726:	f43f addf 	beq.w	81082e8 <_strtod_l+0x498>
 810872a:	4b23      	ldr	r3, [pc, #140]	; (81087b8 <_strtod_l+0x968>)
 810872c:	403b      	ands	r3, r7
 810872e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8108732:	f04f 0a00 	mov.w	sl, #0
 8108736:	9b04      	ldr	r3, [sp, #16]
 8108738:	2b00      	cmp	r3, #0
 810873a:	d1a0      	bne.n	810867e <_strtod_l+0x82e>
 810873c:	e5de      	b.n	81082fc <_strtod_l+0x4ac>
 810873e:	f04f 33ff 	mov.w	r3, #4294967295
 8108742:	e7ea      	b.n	810871a <_strtod_l+0x8ca>
 8108744:	460b      	mov	r3, r1
 8108746:	e7e8      	b.n	810871a <_strtod_l+0x8ca>
 8108748:	ea53 030a 	orrs.w	r3, r3, sl
 810874c:	d088      	beq.n	8108660 <_strtod_l+0x810>
 810874e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108750:	b1db      	cbz	r3, 810878a <_strtod_l+0x93a>
 8108752:	423b      	tst	r3, r7
 8108754:	d0ef      	beq.n	8108736 <_strtod_l+0x8e6>
 8108756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108758:	9a04      	ldr	r2, [sp, #16]
 810875a:	4650      	mov	r0, sl
 810875c:	4659      	mov	r1, fp
 810875e:	b1c3      	cbz	r3, 8108792 <_strtod_l+0x942>
 8108760:	f7ff fb59 	bl	8107e16 <sulp>
 8108764:	4602      	mov	r2, r0
 8108766:	460b      	mov	r3, r1
 8108768:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810876c:	f7f7 fe16 	bl	810039c <__adddf3>
 8108770:	4682      	mov	sl, r0
 8108772:	468b      	mov	fp, r1
 8108774:	e7df      	b.n	8108736 <_strtod_l+0x8e6>
 8108776:	4013      	ands	r3, r2
 8108778:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810877c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8108780:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8108784:	f04f 3aff 	mov.w	sl, #4294967295
 8108788:	e7d5      	b.n	8108736 <_strtod_l+0x8e6>
 810878a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810878c:	ea13 0f0a 	tst.w	r3, sl
 8108790:	e7e0      	b.n	8108754 <_strtod_l+0x904>
 8108792:	f7ff fb40 	bl	8107e16 <sulp>
 8108796:	4602      	mov	r2, r0
 8108798:	460b      	mov	r3, r1
 810879a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810879e:	f7f7 fdfb 	bl	8100398 <__aeabi_dsub>
 81087a2:	2200      	movs	r2, #0
 81087a4:	2300      	movs	r3, #0
 81087a6:	4682      	mov	sl, r0
 81087a8:	468b      	mov	fp, r1
 81087aa:	f7f8 fa15 	bl	8100bd8 <__aeabi_dcmpeq>
 81087ae:	2800      	cmp	r0, #0
 81087b0:	d0c1      	beq.n	8108736 <_strtod_l+0x8e6>
 81087b2:	e60e      	b.n	81083d2 <_strtod_l+0x582>
 81087b4:	fffffc02 	.word	0xfffffc02
 81087b8:	7ff00000 	.word	0x7ff00000
 81087bc:	39500000 	.word	0x39500000
 81087c0:	000fffff 	.word	0x000fffff
 81087c4:	7fefffff 	.word	0x7fefffff
 81087c8:	0810b508 	.word	0x0810b508
 81087cc:	4631      	mov	r1, r6
 81087ce:	4628      	mov	r0, r5
 81087d0:	f002 f990 	bl	810aaf4 <__ratio>
 81087d4:	ec59 8b10 	vmov	r8, r9, d0
 81087d8:	ee10 0a10 	vmov	r0, s0
 81087dc:	2200      	movs	r2, #0
 81087de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81087e2:	4649      	mov	r1, r9
 81087e4:	f7f8 fa0c 	bl	8100c00 <__aeabi_dcmple>
 81087e8:	2800      	cmp	r0, #0
 81087ea:	d07c      	beq.n	81088e6 <_strtod_l+0xa96>
 81087ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81087ee:	2b00      	cmp	r3, #0
 81087f0:	d04c      	beq.n	810888c <_strtod_l+0xa3c>
 81087f2:	4b95      	ldr	r3, [pc, #596]	; (8108a48 <_strtod_l+0xbf8>)
 81087f4:	2200      	movs	r2, #0
 81087f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81087fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8108a48 <_strtod_l+0xbf8>
 81087fe:	f04f 0800 	mov.w	r8, #0
 8108802:	4b92      	ldr	r3, [pc, #584]	; (8108a4c <_strtod_l+0xbfc>)
 8108804:	403b      	ands	r3, r7
 8108806:	9311      	str	r3, [sp, #68]	; 0x44
 8108808:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810880a:	4b91      	ldr	r3, [pc, #580]	; (8108a50 <_strtod_l+0xc00>)
 810880c:	429a      	cmp	r2, r3
 810880e:	f040 80b2 	bne.w	8108976 <_strtod_l+0xb26>
 8108812:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8108816:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810881a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810881e:	ec4b ab10 	vmov	d0, sl, fp
 8108822:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8108826:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810882a:	f002 f88b 	bl	810a944 <__ulp>
 810882e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108832:	ec53 2b10 	vmov	r2, r3, d0
 8108836:	f7f7 ff67 	bl	8100708 <__aeabi_dmul>
 810883a:	4652      	mov	r2, sl
 810883c:	465b      	mov	r3, fp
 810883e:	f7f7 fdad 	bl	810039c <__adddf3>
 8108842:	460b      	mov	r3, r1
 8108844:	4981      	ldr	r1, [pc, #516]	; (8108a4c <_strtod_l+0xbfc>)
 8108846:	4a83      	ldr	r2, [pc, #524]	; (8108a54 <_strtod_l+0xc04>)
 8108848:	4019      	ands	r1, r3
 810884a:	4291      	cmp	r1, r2
 810884c:	4682      	mov	sl, r0
 810884e:	d95e      	bls.n	810890e <_strtod_l+0xabe>
 8108850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108852:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8108856:	4293      	cmp	r3, r2
 8108858:	d103      	bne.n	8108862 <_strtod_l+0xa12>
 810885a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810885c:	3301      	adds	r3, #1
 810885e:	f43f ad43 	beq.w	81082e8 <_strtod_l+0x498>
 8108862:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8108a60 <_strtod_l+0xc10>
 8108866:	f04f 3aff 	mov.w	sl, #4294967295
 810886a:	991e      	ldr	r1, [sp, #120]	; 0x78
 810886c:	4620      	mov	r0, r4
 810886e:	f001 fd3d 	bl	810a2ec <_Bfree>
 8108872:	9907      	ldr	r1, [sp, #28]
 8108874:	4620      	mov	r0, r4
 8108876:	f001 fd39 	bl	810a2ec <_Bfree>
 810887a:	4631      	mov	r1, r6
 810887c:	4620      	mov	r0, r4
 810887e:	f001 fd35 	bl	810a2ec <_Bfree>
 8108882:	4629      	mov	r1, r5
 8108884:	4620      	mov	r0, r4
 8108886:	f001 fd31 	bl	810a2ec <_Bfree>
 810888a:	e613      	b.n	81084b4 <_strtod_l+0x664>
 810888c:	f1ba 0f00 	cmp.w	sl, #0
 8108890:	d11b      	bne.n	81088ca <_strtod_l+0xa7a>
 8108892:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108896:	b9f3      	cbnz	r3, 81088d6 <_strtod_l+0xa86>
 8108898:	4b6b      	ldr	r3, [pc, #428]	; (8108a48 <_strtod_l+0xbf8>)
 810889a:	2200      	movs	r2, #0
 810889c:	4640      	mov	r0, r8
 810889e:	4649      	mov	r1, r9
 81088a0:	f7f8 f9a4 	bl	8100bec <__aeabi_dcmplt>
 81088a4:	b9d0      	cbnz	r0, 81088dc <_strtod_l+0xa8c>
 81088a6:	4640      	mov	r0, r8
 81088a8:	4649      	mov	r1, r9
 81088aa:	4b6b      	ldr	r3, [pc, #428]	; (8108a58 <_strtod_l+0xc08>)
 81088ac:	2200      	movs	r2, #0
 81088ae:	f7f7 ff2b 	bl	8100708 <__aeabi_dmul>
 81088b2:	4680      	mov	r8, r0
 81088b4:	4689      	mov	r9, r1
 81088b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 81088ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 81088be:	931b      	str	r3, [sp, #108]	; 0x6c
 81088c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 81088c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81088c8:	e79b      	b.n	8108802 <_strtod_l+0x9b2>
 81088ca:	f1ba 0f01 	cmp.w	sl, #1
 81088ce:	d102      	bne.n	81088d6 <_strtod_l+0xa86>
 81088d0:	2f00      	cmp	r7, #0
 81088d2:	f43f ad7e 	beq.w	81083d2 <_strtod_l+0x582>
 81088d6:	4b61      	ldr	r3, [pc, #388]	; (8108a5c <_strtod_l+0xc0c>)
 81088d8:	2200      	movs	r2, #0
 81088da:	e78c      	b.n	81087f6 <_strtod_l+0x9a6>
 81088dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8108a58 <_strtod_l+0xc08>
 81088e0:	f04f 0800 	mov.w	r8, #0
 81088e4:	e7e7      	b.n	81088b6 <_strtod_l+0xa66>
 81088e6:	4b5c      	ldr	r3, [pc, #368]	; (8108a58 <_strtod_l+0xc08>)
 81088e8:	4640      	mov	r0, r8
 81088ea:	4649      	mov	r1, r9
 81088ec:	2200      	movs	r2, #0
 81088ee:	f7f7 ff0b 	bl	8100708 <__aeabi_dmul>
 81088f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81088f4:	4680      	mov	r8, r0
 81088f6:	4689      	mov	r9, r1
 81088f8:	b933      	cbnz	r3, 8108908 <_strtod_l+0xab8>
 81088fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81088fe:	9012      	str	r0, [sp, #72]	; 0x48
 8108900:	9313      	str	r3, [sp, #76]	; 0x4c
 8108902:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8108906:	e7dd      	b.n	81088c4 <_strtod_l+0xa74>
 8108908:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 810890c:	e7f9      	b.n	8108902 <_strtod_l+0xab2>
 810890e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8108912:	9b04      	ldr	r3, [sp, #16]
 8108914:	2b00      	cmp	r3, #0
 8108916:	d1a8      	bne.n	810886a <_strtod_l+0xa1a>
 8108918:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810891c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810891e:	0d1b      	lsrs	r3, r3, #20
 8108920:	051b      	lsls	r3, r3, #20
 8108922:	429a      	cmp	r2, r3
 8108924:	d1a1      	bne.n	810886a <_strtod_l+0xa1a>
 8108926:	4640      	mov	r0, r8
 8108928:	4649      	mov	r1, r9
 810892a:	f7f8 fa4d 	bl	8100dc8 <__aeabi_d2lz>
 810892e:	f7f7 febd 	bl	81006ac <__aeabi_l2d>
 8108932:	4602      	mov	r2, r0
 8108934:	460b      	mov	r3, r1
 8108936:	4640      	mov	r0, r8
 8108938:	4649      	mov	r1, r9
 810893a:	f7f7 fd2d 	bl	8100398 <__aeabi_dsub>
 810893e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108940:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108944:	ea43 030a 	orr.w	r3, r3, sl
 8108948:	4313      	orrs	r3, r2
 810894a:	4680      	mov	r8, r0
 810894c:	4689      	mov	r9, r1
 810894e:	d053      	beq.n	81089f8 <_strtod_l+0xba8>
 8108950:	a335      	add	r3, pc, #212	; (adr r3, 8108a28 <_strtod_l+0xbd8>)
 8108952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108956:	f7f8 f949 	bl	8100bec <__aeabi_dcmplt>
 810895a:	2800      	cmp	r0, #0
 810895c:	f47f acce 	bne.w	81082fc <_strtod_l+0x4ac>
 8108960:	a333      	add	r3, pc, #204	; (adr r3, 8108a30 <_strtod_l+0xbe0>)
 8108962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108966:	4640      	mov	r0, r8
 8108968:	4649      	mov	r1, r9
 810896a:	f7f8 f95d 	bl	8100c28 <__aeabi_dcmpgt>
 810896e:	2800      	cmp	r0, #0
 8108970:	f43f af7b 	beq.w	810886a <_strtod_l+0xa1a>
 8108974:	e4c2      	b.n	81082fc <_strtod_l+0x4ac>
 8108976:	9b04      	ldr	r3, [sp, #16]
 8108978:	b333      	cbz	r3, 81089c8 <_strtod_l+0xb78>
 810897a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810897c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8108980:	d822      	bhi.n	81089c8 <_strtod_l+0xb78>
 8108982:	a32d      	add	r3, pc, #180	; (adr r3, 8108a38 <_strtod_l+0xbe8>)
 8108984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108988:	4640      	mov	r0, r8
 810898a:	4649      	mov	r1, r9
 810898c:	f7f8 f938 	bl	8100c00 <__aeabi_dcmple>
 8108990:	b1a0      	cbz	r0, 81089bc <_strtod_l+0xb6c>
 8108992:	4649      	mov	r1, r9
 8108994:	4640      	mov	r0, r8
 8108996:	f7f8 f98f 	bl	8100cb8 <__aeabi_d2uiz>
 810899a:	2801      	cmp	r0, #1
 810899c:	bf38      	it	cc
 810899e:	2001      	movcc	r0, #1
 81089a0:	f7f7 fe38 	bl	8100614 <__aeabi_ui2d>
 81089a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81089a6:	4680      	mov	r8, r0
 81089a8:	4689      	mov	r9, r1
 81089aa:	bb13      	cbnz	r3, 81089f2 <_strtod_l+0xba2>
 81089ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81089b0:	9014      	str	r0, [sp, #80]	; 0x50
 81089b2:	9315      	str	r3, [sp, #84]	; 0x54
 81089b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 81089b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81089bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81089be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 81089c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81089c4:	1a9b      	subs	r3, r3, r2
 81089c6:	930d      	str	r3, [sp, #52]	; 0x34
 81089c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81089cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 81089d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 81089d4:	f001 ffb6 	bl	810a944 <__ulp>
 81089d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81089dc:	ec53 2b10 	vmov	r2, r3, d0
 81089e0:	f7f7 fe92 	bl	8100708 <__aeabi_dmul>
 81089e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 81089e8:	f7f7 fcd8 	bl	810039c <__adddf3>
 81089ec:	4682      	mov	sl, r0
 81089ee:	468b      	mov	fp, r1
 81089f0:	e78f      	b.n	8108912 <_strtod_l+0xac2>
 81089f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 81089f6:	e7dd      	b.n	81089b4 <_strtod_l+0xb64>
 81089f8:	a311      	add	r3, pc, #68	; (adr r3, 8108a40 <_strtod_l+0xbf0>)
 81089fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81089fe:	f7f8 f8f5 	bl	8100bec <__aeabi_dcmplt>
 8108a02:	e7b4      	b.n	810896e <_strtod_l+0xb1e>
 8108a04:	2300      	movs	r3, #0
 8108a06:	930e      	str	r3, [sp, #56]	; 0x38
 8108a08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8108a0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108a0c:	6013      	str	r3, [r2, #0]
 8108a0e:	f7ff ba65 	b.w	8107edc <_strtod_l+0x8c>
 8108a12:	2b65      	cmp	r3, #101	; 0x65
 8108a14:	f43f ab5d 	beq.w	81080d2 <_strtod_l+0x282>
 8108a18:	2b45      	cmp	r3, #69	; 0x45
 8108a1a:	f43f ab5a 	beq.w	81080d2 <_strtod_l+0x282>
 8108a1e:	2201      	movs	r2, #1
 8108a20:	f7ff bb92 	b.w	8108148 <_strtod_l+0x2f8>
 8108a24:	f3af 8000 	nop.w
 8108a28:	94a03595 	.word	0x94a03595
 8108a2c:	3fdfffff 	.word	0x3fdfffff
 8108a30:	35afe535 	.word	0x35afe535
 8108a34:	3fe00000 	.word	0x3fe00000
 8108a38:	ffc00000 	.word	0xffc00000
 8108a3c:	41dfffff 	.word	0x41dfffff
 8108a40:	94a03595 	.word	0x94a03595
 8108a44:	3fcfffff 	.word	0x3fcfffff
 8108a48:	3ff00000 	.word	0x3ff00000
 8108a4c:	7ff00000 	.word	0x7ff00000
 8108a50:	7fe00000 	.word	0x7fe00000
 8108a54:	7c9fffff 	.word	0x7c9fffff
 8108a58:	3fe00000 	.word	0x3fe00000
 8108a5c:	bff00000 	.word	0xbff00000
 8108a60:	7fefffff 	.word	0x7fefffff

08108a64 <_strtod_r>:
 8108a64:	4b01      	ldr	r3, [pc, #4]	; (8108a6c <_strtod_r+0x8>)
 8108a66:	f7ff b9f3 	b.w	8107e50 <_strtod_l>
 8108a6a:	bf00      	nop
 8108a6c:	10000078 	.word	0x10000078

08108a70 <_strtol_l.isra.0>:
 8108a70:	2b01      	cmp	r3, #1
 8108a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108a76:	d001      	beq.n	8108a7c <_strtol_l.isra.0+0xc>
 8108a78:	2b24      	cmp	r3, #36	; 0x24
 8108a7a:	d906      	bls.n	8108a8a <_strtol_l.isra.0+0x1a>
 8108a7c:	f7fd feec 	bl	8106858 <__errno>
 8108a80:	2316      	movs	r3, #22
 8108a82:	6003      	str	r3, [r0, #0]
 8108a84:	2000      	movs	r0, #0
 8108a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108a8a:	4f3a      	ldr	r7, [pc, #232]	; (8108b74 <_strtol_l.isra.0+0x104>)
 8108a8c:	468e      	mov	lr, r1
 8108a8e:	4676      	mov	r6, lr
 8108a90:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8108a94:	5de5      	ldrb	r5, [r4, r7]
 8108a96:	f015 0508 	ands.w	r5, r5, #8
 8108a9a:	d1f8      	bne.n	8108a8e <_strtol_l.isra.0+0x1e>
 8108a9c:	2c2d      	cmp	r4, #45	; 0x2d
 8108a9e:	d134      	bne.n	8108b0a <_strtol_l.isra.0+0x9a>
 8108aa0:	f89e 4000 	ldrb.w	r4, [lr]
 8108aa4:	f04f 0801 	mov.w	r8, #1
 8108aa8:	f106 0e02 	add.w	lr, r6, #2
 8108aac:	2b00      	cmp	r3, #0
 8108aae:	d05c      	beq.n	8108b6a <_strtol_l.isra.0+0xfa>
 8108ab0:	2b10      	cmp	r3, #16
 8108ab2:	d10c      	bne.n	8108ace <_strtol_l.isra.0+0x5e>
 8108ab4:	2c30      	cmp	r4, #48	; 0x30
 8108ab6:	d10a      	bne.n	8108ace <_strtol_l.isra.0+0x5e>
 8108ab8:	f89e 4000 	ldrb.w	r4, [lr]
 8108abc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8108ac0:	2c58      	cmp	r4, #88	; 0x58
 8108ac2:	d14d      	bne.n	8108b60 <_strtol_l.isra.0+0xf0>
 8108ac4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8108ac8:	2310      	movs	r3, #16
 8108aca:	f10e 0e02 	add.w	lr, lr, #2
 8108ace:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8108ad2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8108ad6:	2600      	movs	r6, #0
 8108ad8:	fbbc f9f3 	udiv	r9, ip, r3
 8108adc:	4635      	mov	r5, r6
 8108ade:	fb03 ca19 	mls	sl, r3, r9, ip
 8108ae2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8108ae6:	2f09      	cmp	r7, #9
 8108ae8:	d818      	bhi.n	8108b1c <_strtol_l.isra.0+0xac>
 8108aea:	463c      	mov	r4, r7
 8108aec:	42a3      	cmp	r3, r4
 8108aee:	dd24      	ble.n	8108b3a <_strtol_l.isra.0+0xca>
 8108af0:	2e00      	cmp	r6, #0
 8108af2:	db1f      	blt.n	8108b34 <_strtol_l.isra.0+0xc4>
 8108af4:	45a9      	cmp	r9, r5
 8108af6:	d31d      	bcc.n	8108b34 <_strtol_l.isra.0+0xc4>
 8108af8:	d101      	bne.n	8108afe <_strtol_l.isra.0+0x8e>
 8108afa:	45a2      	cmp	sl, r4
 8108afc:	db1a      	blt.n	8108b34 <_strtol_l.isra.0+0xc4>
 8108afe:	fb05 4503 	mla	r5, r5, r3, r4
 8108b02:	2601      	movs	r6, #1
 8108b04:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8108b08:	e7eb      	b.n	8108ae2 <_strtol_l.isra.0+0x72>
 8108b0a:	2c2b      	cmp	r4, #43	; 0x2b
 8108b0c:	bf08      	it	eq
 8108b0e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8108b12:	46a8      	mov	r8, r5
 8108b14:	bf08      	it	eq
 8108b16:	f106 0e02 	addeq.w	lr, r6, #2
 8108b1a:	e7c7      	b.n	8108aac <_strtol_l.isra.0+0x3c>
 8108b1c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8108b20:	2f19      	cmp	r7, #25
 8108b22:	d801      	bhi.n	8108b28 <_strtol_l.isra.0+0xb8>
 8108b24:	3c37      	subs	r4, #55	; 0x37
 8108b26:	e7e1      	b.n	8108aec <_strtol_l.isra.0+0x7c>
 8108b28:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8108b2c:	2f19      	cmp	r7, #25
 8108b2e:	d804      	bhi.n	8108b3a <_strtol_l.isra.0+0xca>
 8108b30:	3c57      	subs	r4, #87	; 0x57
 8108b32:	e7db      	b.n	8108aec <_strtol_l.isra.0+0x7c>
 8108b34:	f04f 36ff 	mov.w	r6, #4294967295
 8108b38:	e7e4      	b.n	8108b04 <_strtol_l.isra.0+0x94>
 8108b3a:	2e00      	cmp	r6, #0
 8108b3c:	da05      	bge.n	8108b4a <_strtol_l.isra.0+0xda>
 8108b3e:	2322      	movs	r3, #34	; 0x22
 8108b40:	6003      	str	r3, [r0, #0]
 8108b42:	4665      	mov	r5, ip
 8108b44:	b942      	cbnz	r2, 8108b58 <_strtol_l.isra.0+0xe8>
 8108b46:	4628      	mov	r0, r5
 8108b48:	e79d      	b.n	8108a86 <_strtol_l.isra.0+0x16>
 8108b4a:	f1b8 0f00 	cmp.w	r8, #0
 8108b4e:	d000      	beq.n	8108b52 <_strtol_l.isra.0+0xe2>
 8108b50:	426d      	negs	r5, r5
 8108b52:	2a00      	cmp	r2, #0
 8108b54:	d0f7      	beq.n	8108b46 <_strtol_l.isra.0+0xd6>
 8108b56:	b10e      	cbz	r6, 8108b5c <_strtol_l.isra.0+0xec>
 8108b58:	f10e 31ff 	add.w	r1, lr, #4294967295
 8108b5c:	6011      	str	r1, [r2, #0]
 8108b5e:	e7f2      	b.n	8108b46 <_strtol_l.isra.0+0xd6>
 8108b60:	2430      	movs	r4, #48	; 0x30
 8108b62:	2b00      	cmp	r3, #0
 8108b64:	d1b3      	bne.n	8108ace <_strtol_l.isra.0+0x5e>
 8108b66:	2308      	movs	r3, #8
 8108b68:	e7b1      	b.n	8108ace <_strtol_l.isra.0+0x5e>
 8108b6a:	2c30      	cmp	r4, #48	; 0x30
 8108b6c:	d0a4      	beq.n	8108ab8 <_strtol_l.isra.0+0x48>
 8108b6e:	230a      	movs	r3, #10
 8108b70:	e7ad      	b.n	8108ace <_strtol_l.isra.0+0x5e>
 8108b72:	bf00      	nop
 8108b74:	0810b531 	.word	0x0810b531

08108b78 <_strtol_r>:
 8108b78:	f7ff bf7a 	b.w	8108a70 <_strtol_l.isra.0>

08108b7c <__swbuf_r>:
 8108b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108b7e:	460e      	mov	r6, r1
 8108b80:	4614      	mov	r4, r2
 8108b82:	4605      	mov	r5, r0
 8108b84:	b118      	cbz	r0, 8108b8e <__swbuf_r+0x12>
 8108b86:	6983      	ldr	r3, [r0, #24]
 8108b88:	b90b      	cbnz	r3, 8108b8e <__swbuf_r+0x12>
 8108b8a:	f7fd ff85 	bl	8106a98 <__sinit>
 8108b8e:	4b21      	ldr	r3, [pc, #132]	; (8108c14 <__swbuf_r+0x98>)
 8108b90:	429c      	cmp	r4, r3
 8108b92:	d12b      	bne.n	8108bec <__swbuf_r+0x70>
 8108b94:	686c      	ldr	r4, [r5, #4]
 8108b96:	69a3      	ldr	r3, [r4, #24]
 8108b98:	60a3      	str	r3, [r4, #8]
 8108b9a:	89a3      	ldrh	r3, [r4, #12]
 8108b9c:	071a      	lsls	r2, r3, #28
 8108b9e:	d52f      	bpl.n	8108c00 <__swbuf_r+0x84>
 8108ba0:	6923      	ldr	r3, [r4, #16]
 8108ba2:	b36b      	cbz	r3, 8108c00 <__swbuf_r+0x84>
 8108ba4:	6923      	ldr	r3, [r4, #16]
 8108ba6:	6820      	ldr	r0, [r4, #0]
 8108ba8:	1ac0      	subs	r0, r0, r3
 8108baa:	6963      	ldr	r3, [r4, #20]
 8108bac:	b2f6      	uxtb	r6, r6
 8108bae:	4283      	cmp	r3, r0
 8108bb0:	4637      	mov	r7, r6
 8108bb2:	dc04      	bgt.n	8108bbe <__swbuf_r+0x42>
 8108bb4:	4621      	mov	r1, r4
 8108bb6:	4628      	mov	r0, r5
 8108bb8:	f7fd feda 	bl	8106970 <_fflush_r>
 8108bbc:	bb30      	cbnz	r0, 8108c0c <__swbuf_r+0x90>
 8108bbe:	68a3      	ldr	r3, [r4, #8]
 8108bc0:	3b01      	subs	r3, #1
 8108bc2:	60a3      	str	r3, [r4, #8]
 8108bc4:	6823      	ldr	r3, [r4, #0]
 8108bc6:	1c5a      	adds	r2, r3, #1
 8108bc8:	6022      	str	r2, [r4, #0]
 8108bca:	701e      	strb	r6, [r3, #0]
 8108bcc:	6963      	ldr	r3, [r4, #20]
 8108bce:	3001      	adds	r0, #1
 8108bd0:	4283      	cmp	r3, r0
 8108bd2:	d004      	beq.n	8108bde <__swbuf_r+0x62>
 8108bd4:	89a3      	ldrh	r3, [r4, #12]
 8108bd6:	07db      	lsls	r3, r3, #31
 8108bd8:	d506      	bpl.n	8108be8 <__swbuf_r+0x6c>
 8108bda:	2e0a      	cmp	r6, #10
 8108bdc:	d104      	bne.n	8108be8 <__swbuf_r+0x6c>
 8108bde:	4621      	mov	r1, r4
 8108be0:	4628      	mov	r0, r5
 8108be2:	f7fd fec5 	bl	8106970 <_fflush_r>
 8108be6:	b988      	cbnz	r0, 8108c0c <__swbuf_r+0x90>
 8108be8:	4638      	mov	r0, r7
 8108bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108bec:	4b0a      	ldr	r3, [pc, #40]	; (8108c18 <__swbuf_r+0x9c>)
 8108bee:	429c      	cmp	r4, r3
 8108bf0:	d101      	bne.n	8108bf6 <__swbuf_r+0x7a>
 8108bf2:	68ac      	ldr	r4, [r5, #8]
 8108bf4:	e7cf      	b.n	8108b96 <__swbuf_r+0x1a>
 8108bf6:	4b09      	ldr	r3, [pc, #36]	; (8108c1c <__swbuf_r+0xa0>)
 8108bf8:	429c      	cmp	r4, r3
 8108bfa:	bf08      	it	eq
 8108bfc:	68ec      	ldreq	r4, [r5, #12]
 8108bfe:	e7ca      	b.n	8108b96 <__swbuf_r+0x1a>
 8108c00:	4621      	mov	r1, r4
 8108c02:	4628      	mov	r0, r5
 8108c04:	f000 f81e 	bl	8108c44 <__swsetup_r>
 8108c08:	2800      	cmp	r0, #0
 8108c0a:	d0cb      	beq.n	8108ba4 <__swbuf_r+0x28>
 8108c0c:	f04f 37ff 	mov.w	r7, #4294967295
 8108c10:	e7ea      	b.n	8108be8 <__swbuf_r+0x6c>
 8108c12:	bf00      	nop
 8108c14:	0810b460 	.word	0x0810b460
 8108c18:	0810b480 	.word	0x0810b480
 8108c1c:	0810b440 	.word	0x0810b440

08108c20 <_write_r>:
 8108c20:	b538      	push	{r3, r4, r5, lr}
 8108c22:	4d07      	ldr	r5, [pc, #28]	; (8108c40 <_write_r+0x20>)
 8108c24:	4604      	mov	r4, r0
 8108c26:	4608      	mov	r0, r1
 8108c28:	4611      	mov	r1, r2
 8108c2a:	2200      	movs	r2, #0
 8108c2c:	602a      	str	r2, [r5, #0]
 8108c2e:	461a      	mov	r2, r3
 8108c30:	f7f9 f925 	bl	8101e7e <_write>
 8108c34:	1c43      	adds	r3, r0, #1
 8108c36:	d102      	bne.n	8108c3e <_write_r+0x1e>
 8108c38:	682b      	ldr	r3, [r5, #0]
 8108c3a:	b103      	cbz	r3, 8108c3e <_write_r+0x1e>
 8108c3c:	6023      	str	r3, [r4, #0]
 8108c3e:	bd38      	pop	{r3, r4, r5, pc}
 8108c40:	100003f8 	.word	0x100003f8

08108c44 <__swsetup_r>:
 8108c44:	4b32      	ldr	r3, [pc, #200]	; (8108d10 <__swsetup_r+0xcc>)
 8108c46:	b570      	push	{r4, r5, r6, lr}
 8108c48:	681d      	ldr	r5, [r3, #0]
 8108c4a:	4606      	mov	r6, r0
 8108c4c:	460c      	mov	r4, r1
 8108c4e:	b125      	cbz	r5, 8108c5a <__swsetup_r+0x16>
 8108c50:	69ab      	ldr	r3, [r5, #24]
 8108c52:	b913      	cbnz	r3, 8108c5a <__swsetup_r+0x16>
 8108c54:	4628      	mov	r0, r5
 8108c56:	f7fd ff1f 	bl	8106a98 <__sinit>
 8108c5a:	4b2e      	ldr	r3, [pc, #184]	; (8108d14 <__swsetup_r+0xd0>)
 8108c5c:	429c      	cmp	r4, r3
 8108c5e:	d10f      	bne.n	8108c80 <__swsetup_r+0x3c>
 8108c60:	686c      	ldr	r4, [r5, #4]
 8108c62:	89a3      	ldrh	r3, [r4, #12]
 8108c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8108c68:	0719      	lsls	r1, r3, #28
 8108c6a:	d42c      	bmi.n	8108cc6 <__swsetup_r+0x82>
 8108c6c:	06dd      	lsls	r5, r3, #27
 8108c6e:	d411      	bmi.n	8108c94 <__swsetup_r+0x50>
 8108c70:	2309      	movs	r3, #9
 8108c72:	6033      	str	r3, [r6, #0]
 8108c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8108c78:	81a3      	strh	r3, [r4, #12]
 8108c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8108c7e:	e03e      	b.n	8108cfe <__swsetup_r+0xba>
 8108c80:	4b25      	ldr	r3, [pc, #148]	; (8108d18 <__swsetup_r+0xd4>)
 8108c82:	429c      	cmp	r4, r3
 8108c84:	d101      	bne.n	8108c8a <__swsetup_r+0x46>
 8108c86:	68ac      	ldr	r4, [r5, #8]
 8108c88:	e7eb      	b.n	8108c62 <__swsetup_r+0x1e>
 8108c8a:	4b24      	ldr	r3, [pc, #144]	; (8108d1c <__swsetup_r+0xd8>)
 8108c8c:	429c      	cmp	r4, r3
 8108c8e:	bf08      	it	eq
 8108c90:	68ec      	ldreq	r4, [r5, #12]
 8108c92:	e7e6      	b.n	8108c62 <__swsetup_r+0x1e>
 8108c94:	0758      	lsls	r0, r3, #29
 8108c96:	d512      	bpl.n	8108cbe <__swsetup_r+0x7a>
 8108c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108c9a:	b141      	cbz	r1, 8108cae <__swsetup_r+0x6a>
 8108c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8108ca0:	4299      	cmp	r1, r3
 8108ca2:	d002      	beq.n	8108caa <__swsetup_r+0x66>
 8108ca4:	4630      	mov	r0, r6
 8108ca6:	f7fd ffc5 	bl	8106c34 <_free_r>
 8108caa:	2300      	movs	r3, #0
 8108cac:	6363      	str	r3, [r4, #52]	; 0x34
 8108cae:	89a3      	ldrh	r3, [r4, #12]
 8108cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8108cb4:	81a3      	strh	r3, [r4, #12]
 8108cb6:	2300      	movs	r3, #0
 8108cb8:	6063      	str	r3, [r4, #4]
 8108cba:	6923      	ldr	r3, [r4, #16]
 8108cbc:	6023      	str	r3, [r4, #0]
 8108cbe:	89a3      	ldrh	r3, [r4, #12]
 8108cc0:	f043 0308 	orr.w	r3, r3, #8
 8108cc4:	81a3      	strh	r3, [r4, #12]
 8108cc6:	6923      	ldr	r3, [r4, #16]
 8108cc8:	b94b      	cbnz	r3, 8108cde <__swsetup_r+0x9a>
 8108cca:	89a3      	ldrh	r3, [r4, #12]
 8108ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8108cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108cd4:	d003      	beq.n	8108cde <__swsetup_r+0x9a>
 8108cd6:	4621      	mov	r1, r4
 8108cd8:	4630      	mov	r0, r6
 8108cda:	f001 fa53 	bl	810a184 <__smakebuf_r>
 8108cde:	89a0      	ldrh	r0, [r4, #12]
 8108ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8108ce4:	f010 0301 	ands.w	r3, r0, #1
 8108ce8:	d00a      	beq.n	8108d00 <__swsetup_r+0xbc>
 8108cea:	2300      	movs	r3, #0
 8108cec:	60a3      	str	r3, [r4, #8]
 8108cee:	6963      	ldr	r3, [r4, #20]
 8108cf0:	425b      	negs	r3, r3
 8108cf2:	61a3      	str	r3, [r4, #24]
 8108cf4:	6923      	ldr	r3, [r4, #16]
 8108cf6:	b943      	cbnz	r3, 8108d0a <__swsetup_r+0xc6>
 8108cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8108cfc:	d1ba      	bne.n	8108c74 <__swsetup_r+0x30>
 8108cfe:	bd70      	pop	{r4, r5, r6, pc}
 8108d00:	0781      	lsls	r1, r0, #30
 8108d02:	bf58      	it	pl
 8108d04:	6963      	ldrpl	r3, [r4, #20]
 8108d06:	60a3      	str	r3, [r4, #8]
 8108d08:	e7f4      	b.n	8108cf4 <__swsetup_r+0xb0>
 8108d0a:	2000      	movs	r0, #0
 8108d0c:	e7f7      	b.n	8108cfe <__swsetup_r+0xba>
 8108d0e:	bf00      	nop
 8108d10:	10000010 	.word	0x10000010
 8108d14:	0810b460 	.word	0x0810b460
 8108d18:	0810b480 	.word	0x0810b480
 8108d1c:	0810b440 	.word	0x0810b440

08108d20 <_close_r>:
 8108d20:	b538      	push	{r3, r4, r5, lr}
 8108d22:	4d06      	ldr	r5, [pc, #24]	; (8108d3c <_close_r+0x1c>)
 8108d24:	2300      	movs	r3, #0
 8108d26:	4604      	mov	r4, r0
 8108d28:	4608      	mov	r0, r1
 8108d2a:	602b      	str	r3, [r5, #0]
 8108d2c:	f7f9 f8c3 	bl	8101eb6 <_close>
 8108d30:	1c43      	adds	r3, r0, #1
 8108d32:	d102      	bne.n	8108d3a <_close_r+0x1a>
 8108d34:	682b      	ldr	r3, [r5, #0]
 8108d36:	b103      	cbz	r3, 8108d3a <_close_r+0x1a>
 8108d38:	6023      	str	r3, [r4, #0]
 8108d3a:	bd38      	pop	{r3, r4, r5, pc}
 8108d3c:	100003f8 	.word	0x100003f8

08108d40 <quorem>:
 8108d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108d44:	6903      	ldr	r3, [r0, #16]
 8108d46:	690c      	ldr	r4, [r1, #16]
 8108d48:	42a3      	cmp	r3, r4
 8108d4a:	4607      	mov	r7, r0
 8108d4c:	f2c0 8081 	blt.w	8108e52 <quorem+0x112>
 8108d50:	3c01      	subs	r4, #1
 8108d52:	f101 0814 	add.w	r8, r1, #20
 8108d56:	f100 0514 	add.w	r5, r0, #20
 8108d5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108d5e:	9301      	str	r3, [sp, #4]
 8108d60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8108d64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108d68:	3301      	adds	r3, #1
 8108d6a:	429a      	cmp	r2, r3
 8108d6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8108d70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8108d74:	fbb2 f6f3 	udiv	r6, r2, r3
 8108d78:	d331      	bcc.n	8108dde <quorem+0x9e>
 8108d7a:	f04f 0e00 	mov.w	lr, #0
 8108d7e:	4640      	mov	r0, r8
 8108d80:	46ac      	mov	ip, r5
 8108d82:	46f2      	mov	sl, lr
 8108d84:	f850 2b04 	ldr.w	r2, [r0], #4
 8108d88:	b293      	uxth	r3, r2
 8108d8a:	fb06 e303 	mla	r3, r6, r3, lr
 8108d8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8108d92:	b29b      	uxth	r3, r3
 8108d94:	ebaa 0303 	sub.w	r3, sl, r3
 8108d98:	0c12      	lsrs	r2, r2, #16
 8108d9a:	f8dc a000 	ldr.w	sl, [ip]
 8108d9e:	fb06 e202 	mla	r2, r6, r2, lr
 8108da2:	fa13 f38a 	uxtah	r3, r3, sl
 8108da6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8108daa:	fa1f fa82 	uxth.w	sl, r2
 8108dae:	f8dc 2000 	ldr.w	r2, [ip]
 8108db2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8108db6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8108dba:	b29b      	uxth	r3, r3
 8108dbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8108dc0:	4581      	cmp	r9, r0
 8108dc2:	f84c 3b04 	str.w	r3, [ip], #4
 8108dc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8108dca:	d2db      	bcs.n	8108d84 <quorem+0x44>
 8108dcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8108dd0:	b92b      	cbnz	r3, 8108dde <quorem+0x9e>
 8108dd2:	9b01      	ldr	r3, [sp, #4]
 8108dd4:	3b04      	subs	r3, #4
 8108dd6:	429d      	cmp	r5, r3
 8108dd8:	461a      	mov	r2, r3
 8108dda:	d32e      	bcc.n	8108e3a <quorem+0xfa>
 8108ddc:	613c      	str	r4, [r7, #16]
 8108dde:	4638      	mov	r0, r7
 8108de0:	f001 fd0c 	bl	810a7fc <__mcmp>
 8108de4:	2800      	cmp	r0, #0
 8108de6:	db24      	blt.n	8108e32 <quorem+0xf2>
 8108de8:	3601      	adds	r6, #1
 8108dea:	4628      	mov	r0, r5
 8108dec:	f04f 0c00 	mov.w	ip, #0
 8108df0:	f858 2b04 	ldr.w	r2, [r8], #4
 8108df4:	f8d0 e000 	ldr.w	lr, [r0]
 8108df8:	b293      	uxth	r3, r2
 8108dfa:	ebac 0303 	sub.w	r3, ip, r3
 8108dfe:	0c12      	lsrs	r2, r2, #16
 8108e00:	fa13 f38e 	uxtah	r3, r3, lr
 8108e04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8108e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8108e0c:	b29b      	uxth	r3, r3
 8108e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8108e12:	45c1      	cmp	r9, r8
 8108e14:	f840 3b04 	str.w	r3, [r0], #4
 8108e18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8108e1c:	d2e8      	bcs.n	8108df0 <quorem+0xb0>
 8108e1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108e22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108e26:	b922      	cbnz	r2, 8108e32 <quorem+0xf2>
 8108e28:	3b04      	subs	r3, #4
 8108e2a:	429d      	cmp	r5, r3
 8108e2c:	461a      	mov	r2, r3
 8108e2e:	d30a      	bcc.n	8108e46 <quorem+0x106>
 8108e30:	613c      	str	r4, [r7, #16]
 8108e32:	4630      	mov	r0, r6
 8108e34:	b003      	add	sp, #12
 8108e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108e3a:	6812      	ldr	r2, [r2, #0]
 8108e3c:	3b04      	subs	r3, #4
 8108e3e:	2a00      	cmp	r2, #0
 8108e40:	d1cc      	bne.n	8108ddc <quorem+0x9c>
 8108e42:	3c01      	subs	r4, #1
 8108e44:	e7c7      	b.n	8108dd6 <quorem+0x96>
 8108e46:	6812      	ldr	r2, [r2, #0]
 8108e48:	3b04      	subs	r3, #4
 8108e4a:	2a00      	cmp	r2, #0
 8108e4c:	d1f0      	bne.n	8108e30 <quorem+0xf0>
 8108e4e:	3c01      	subs	r4, #1
 8108e50:	e7eb      	b.n	8108e2a <quorem+0xea>
 8108e52:	2000      	movs	r0, #0
 8108e54:	e7ee      	b.n	8108e34 <quorem+0xf4>
	...

08108e58 <_dtoa_r>:
 8108e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108e5c:	ed2d 8b02 	vpush	{d8}
 8108e60:	ec57 6b10 	vmov	r6, r7, d0
 8108e64:	b095      	sub	sp, #84	; 0x54
 8108e66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8108e68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8108e6c:	9105      	str	r1, [sp, #20]
 8108e6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8108e72:	4604      	mov	r4, r0
 8108e74:	9209      	str	r2, [sp, #36]	; 0x24
 8108e76:	930f      	str	r3, [sp, #60]	; 0x3c
 8108e78:	b975      	cbnz	r5, 8108e98 <_dtoa_r+0x40>
 8108e7a:	2010      	movs	r0, #16
 8108e7c:	f001 f9c2 	bl	810a204 <malloc>
 8108e80:	4602      	mov	r2, r0
 8108e82:	6260      	str	r0, [r4, #36]	; 0x24
 8108e84:	b920      	cbnz	r0, 8108e90 <_dtoa_r+0x38>
 8108e86:	4bb2      	ldr	r3, [pc, #712]	; (8109150 <_dtoa_r+0x2f8>)
 8108e88:	21ea      	movs	r1, #234	; 0xea
 8108e8a:	48b2      	ldr	r0, [pc, #712]	; (8109154 <_dtoa_r+0x2fc>)
 8108e8c:	f002 f9a8 	bl	810b1e0 <__assert_func>
 8108e90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8108e94:	6005      	str	r5, [r0, #0]
 8108e96:	60c5      	str	r5, [r0, #12]
 8108e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108e9a:	6819      	ldr	r1, [r3, #0]
 8108e9c:	b151      	cbz	r1, 8108eb4 <_dtoa_r+0x5c>
 8108e9e:	685a      	ldr	r2, [r3, #4]
 8108ea0:	604a      	str	r2, [r1, #4]
 8108ea2:	2301      	movs	r3, #1
 8108ea4:	4093      	lsls	r3, r2
 8108ea6:	608b      	str	r3, [r1, #8]
 8108ea8:	4620      	mov	r0, r4
 8108eaa:	f001 fa1f 	bl	810a2ec <_Bfree>
 8108eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108eb0:	2200      	movs	r2, #0
 8108eb2:	601a      	str	r2, [r3, #0]
 8108eb4:	1e3b      	subs	r3, r7, #0
 8108eb6:	bfb9      	ittee	lt
 8108eb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8108ebc:	9303      	strlt	r3, [sp, #12]
 8108ebe:	2300      	movge	r3, #0
 8108ec0:	f8c8 3000 	strge.w	r3, [r8]
 8108ec4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8108ec8:	4ba3      	ldr	r3, [pc, #652]	; (8109158 <_dtoa_r+0x300>)
 8108eca:	bfbc      	itt	lt
 8108ecc:	2201      	movlt	r2, #1
 8108ece:	f8c8 2000 	strlt.w	r2, [r8]
 8108ed2:	ea33 0309 	bics.w	r3, r3, r9
 8108ed6:	d11b      	bne.n	8108f10 <_dtoa_r+0xb8>
 8108ed8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108eda:	f242 730f 	movw	r3, #9999	; 0x270f
 8108ede:	6013      	str	r3, [r2, #0]
 8108ee0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8108ee4:	4333      	orrs	r3, r6
 8108ee6:	f000 857a 	beq.w	81099de <_dtoa_r+0xb86>
 8108eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108eec:	b963      	cbnz	r3, 8108f08 <_dtoa_r+0xb0>
 8108eee:	4b9b      	ldr	r3, [pc, #620]	; (810915c <_dtoa_r+0x304>)
 8108ef0:	e024      	b.n	8108f3c <_dtoa_r+0xe4>
 8108ef2:	4b9b      	ldr	r3, [pc, #620]	; (8109160 <_dtoa_r+0x308>)
 8108ef4:	9300      	str	r3, [sp, #0]
 8108ef6:	3308      	adds	r3, #8
 8108ef8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8108efa:	6013      	str	r3, [r2, #0]
 8108efc:	9800      	ldr	r0, [sp, #0]
 8108efe:	b015      	add	sp, #84	; 0x54
 8108f00:	ecbd 8b02 	vpop	{d8}
 8108f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108f08:	4b94      	ldr	r3, [pc, #592]	; (810915c <_dtoa_r+0x304>)
 8108f0a:	9300      	str	r3, [sp, #0]
 8108f0c:	3303      	adds	r3, #3
 8108f0e:	e7f3      	b.n	8108ef8 <_dtoa_r+0xa0>
 8108f10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8108f14:	2200      	movs	r2, #0
 8108f16:	ec51 0b17 	vmov	r0, r1, d7
 8108f1a:	2300      	movs	r3, #0
 8108f1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8108f20:	f7f7 fe5a 	bl	8100bd8 <__aeabi_dcmpeq>
 8108f24:	4680      	mov	r8, r0
 8108f26:	b158      	cbz	r0, 8108f40 <_dtoa_r+0xe8>
 8108f28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108f2a:	2301      	movs	r3, #1
 8108f2c:	6013      	str	r3, [r2, #0]
 8108f2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108f30:	2b00      	cmp	r3, #0
 8108f32:	f000 8551 	beq.w	81099d8 <_dtoa_r+0xb80>
 8108f36:	488b      	ldr	r0, [pc, #556]	; (8109164 <_dtoa_r+0x30c>)
 8108f38:	6018      	str	r0, [r3, #0]
 8108f3a:	1e43      	subs	r3, r0, #1
 8108f3c:	9300      	str	r3, [sp, #0]
 8108f3e:	e7dd      	b.n	8108efc <_dtoa_r+0xa4>
 8108f40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8108f44:	aa12      	add	r2, sp, #72	; 0x48
 8108f46:	a913      	add	r1, sp, #76	; 0x4c
 8108f48:	4620      	mov	r0, r4
 8108f4a:	f001 fd77 	bl	810aa3c <__d2b>
 8108f4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8108f52:	4683      	mov	fp, r0
 8108f54:	2d00      	cmp	r5, #0
 8108f56:	d07c      	beq.n	8109052 <_dtoa_r+0x1fa>
 8108f58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108f5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8108f5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108f62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8108f66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8108f6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8108f6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8108f72:	4b7d      	ldr	r3, [pc, #500]	; (8109168 <_dtoa_r+0x310>)
 8108f74:	2200      	movs	r2, #0
 8108f76:	4630      	mov	r0, r6
 8108f78:	4639      	mov	r1, r7
 8108f7a:	f7f7 fa0d 	bl	8100398 <__aeabi_dsub>
 8108f7e:	a36e      	add	r3, pc, #440	; (adr r3, 8109138 <_dtoa_r+0x2e0>)
 8108f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f84:	f7f7 fbc0 	bl	8100708 <__aeabi_dmul>
 8108f88:	a36d      	add	r3, pc, #436	; (adr r3, 8109140 <_dtoa_r+0x2e8>)
 8108f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108f8e:	f7f7 fa05 	bl	810039c <__adddf3>
 8108f92:	4606      	mov	r6, r0
 8108f94:	4628      	mov	r0, r5
 8108f96:	460f      	mov	r7, r1
 8108f98:	f7f7 fb4c 	bl	8100634 <__aeabi_i2d>
 8108f9c:	a36a      	add	r3, pc, #424	; (adr r3, 8109148 <_dtoa_r+0x2f0>)
 8108f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fa2:	f7f7 fbb1 	bl	8100708 <__aeabi_dmul>
 8108fa6:	4602      	mov	r2, r0
 8108fa8:	460b      	mov	r3, r1
 8108faa:	4630      	mov	r0, r6
 8108fac:	4639      	mov	r1, r7
 8108fae:	f7f7 f9f5 	bl	810039c <__adddf3>
 8108fb2:	4606      	mov	r6, r0
 8108fb4:	460f      	mov	r7, r1
 8108fb6:	f7f7 fe57 	bl	8100c68 <__aeabi_d2iz>
 8108fba:	2200      	movs	r2, #0
 8108fbc:	4682      	mov	sl, r0
 8108fbe:	2300      	movs	r3, #0
 8108fc0:	4630      	mov	r0, r6
 8108fc2:	4639      	mov	r1, r7
 8108fc4:	f7f7 fe12 	bl	8100bec <__aeabi_dcmplt>
 8108fc8:	b148      	cbz	r0, 8108fde <_dtoa_r+0x186>
 8108fca:	4650      	mov	r0, sl
 8108fcc:	f7f7 fb32 	bl	8100634 <__aeabi_i2d>
 8108fd0:	4632      	mov	r2, r6
 8108fd2:	463b      	mov	r3, r7
 8108fd4:	f7f7 fe00 	bl	8100bd8 <__aeabi_dcmpeq>
 8108fd8:	b908      	cbnz	r0, 8108fde <_dtoa_r+0x186>
 8108fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108fde:	f1ba 0f16 	cmp.w	sl, #22
 8108fe2:	d854      	bhi.n	810908e <_dtoa_r+0x236>
 8108fe4:	4b61      	ldr	r3, [pc, #388]	; (810916c <_dtoa_r+0x314>)
 8108fe6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8108fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108ff2:	f7f7 fdfb 	bl	8100bec <__aeabi_dcmplt>
 8108ff6:	2800      	cmp	r0, #0
 8108ff8:	d04b      	beq.n	8109092 <_dtoa_r+0x23a>
 8108ffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108ffe:	2300      	movs	r3, #0
 8109000:	930e      	str	r3, [sp, #56]	; 0x38
 8109002:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109004:	1b5d      	subs	r5, r3, r5
 8109006:	1e6b      	subs	r3, r5, #1
 8109008:	9304      	str	r3, [sp, #16]
 810900a:	bf43      	ittte	mi
 810900c:	2300      	movmi	r3, #0
 810900e:	f1c5 0801 	rsbmi	r8, r5, #1
 8109012:	9304      	strmi	r3, [sp, #16]
 8109014:	f04f 0800 	movpl.w	r8, #0
 8109018:	f1ba 0f00 	cmp.w	sl, #0
 810901c:	db3b      	blt.n	8109096 <_dtoa_r+0x23e>
 810901e:	9b04      	ldr	r3, [sp, #16]
 8109020:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8109024:	4453      	add	r3, sl
 8109026:	9304      	str	r3, [sp, #16]
 8109028:	2300      	movs	r3, #0
 810902a:	9306      	str	r3, [sp, #24]
 810902c:	9b05      	ldr	r3, [sp, #20]
 810902e:	2b09      	cmp	r3, #9
 8109030:	d869      	bhi.n	8109106 <_dtoa_r+0x2ae>
 8109032:	2b05      	cmp	r3, #5
 8109034:	bfc4      	itt	gt
 8109036:	3b04      	subgt	r3, #4
 8109038:	9305      	strgt	r3, [sp, #20]
 810903a:	9b05      	ldr	r3, [sp, #20]
 810903c:	f1a3 0302 	sub.w	r3, r3, #2
 8109040:	bfcc      	ite	gt
 8109042:	2500      	movgt	r5, #0
 8109044:	2501      	movle	r5, #1
 8109046:	2b03      	cmp	r3, #3
 8109048:	d869      	bhi.n	810911e <_dtoa_r+0x2c6>
 810904a:	e8df f003 	tbb	[pc, r3]
 810904e:	4e2c      	.short	0x4e2c
 8109050:	5a4c      	.short	0x5a4c
 8109052:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8109056:	441d      	add	r5, r3
 8109058:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810905c:	2b20      	cmp	r3, #32
 810905e:	bfc1      	itttt	gt
 8109060:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8109064:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8109068:	fa09 f303 	lslgt.w	r3, r9, r3
 810906c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8109070:	bfda      	itte	le
 8109072:	f1c3 0320 	rsble	r3, r3, #32
 8109076:	fa06 f003 	lslle.w	r0, r6, r3
 810907a:	4318      	orrgt	r0, r3
 810907c:	f7f7 faca 	bl	8100614 <__aeabi_ui2d>
 8109080:	2301      	movs	r3, #1
 8109082:	4606      	mov	r6, r0
 8109084:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8109088:	3d01      	subs	r5, #1
 810908a:	9310      	str	r3, [sp, #64]	; 0x40
 810908c:	e771      	b.n	8108f72 <_dtoa_r+0x11a>
 810908e:	2301      	movs	r3, #1
 8109090:	e7b6      	b.n	8109000 <_dtoa_r+0x1a8>
 8109092:	900e      	str	r0, [sp, #56]	; 0x38
 8109094:	e7b5      	b.n	8109002 <_dtoa_r+0x1aa>
 8109096:	f1ca 0300 	rsb	r3, sl, #0
 810909a:	9306      	str	r3, [sp, #24]
 810909c:	2300      	movs	r3, #0
 810909e:	eba8 080a 	sub.w	r8, r8, sl
 81090a2:	930d      	str	r3, [sp, #52]	; 0x34
 81090a4:	e7c2      	b.n	810902c <_dtoa_r+0x1d4>
 81090a6:	2300      	movs	r3, #0
 81090a8:	9308      	str	r3, [sp, #32]
 81090aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81090ac:	2b00      	cmp	r3, #0
 81090ae:	dc39      	bgt.n	8109124 <_dtoa_r+0x2cc>
 81090b0:	f04f 0901 	mov.w	r9, #1
 81090b4:	f8cd 9004 	str.w	r9, [sp, #4]
 81090b8:	464b      	mov	r3, r9
 81090ba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 81090be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 81090c0:	2200      	movs	r2, #0
 81090c2:	6042      	str	r2, [r0, #4]
 81090c4:	2204      	movs	r2, #4
 81090c6:	f102 0614 	add.w	r6, r2, #20
 81090ca:	429e      	cmp	r6, r3
 81090cc:	6841      	ldr	r1, [r0, #4]
 81090ce:	d92f      	bls.n	8109130 <_dtoa_r+0x2d8>
 81090d0:	4620      	mov	r0, r4
 81090d2:	f001 f8cb 	bl	810a26c <_Balloc>
 81090d6:	9000      	str	r0, [sp, #0]
 81090d8:	2800      	cmp	r0, #0
 81090da:	d14b      	bne.n	8109174 <_dtoa_r+0x31c>
 81090dc:	4b24      	ldr	r3, [pc, #144]	; (8109170 <_dtoa_r+0x318>)
 81090de:	4602      	mov	r2, r0
 81090e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 81090e4:	e6d1      	b.n	8108e8a <_dtoa_r+0x32>
 81090e6:	2301      	movs	r3, #1
 81090e8:	e7de      	b.n	81090a8 <_dtoa_r+0x250>
 81090ea:	2300      	movs	r3, #0
 81090ec:	9308      	str	r3, [sp, #32]
 81090ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81090f0:	eb0a 0903 	add.w	r9, sl, r3
 81090f4:	f109 0301 	add.w	r3, r9, #1
 81090f8:	2b01      	cmp	r3, #1
 81090fa:	9301      	str	r3, [sp, #4]
 81090fc:	bfb8      	it	lt
 81090fe:	2301      	movlt	r3, #1
 8109100:	e7dd      	b.n	81090be <_dtoa_r+0x266>
 8109102:	2301      	movs	r3, #1
 8109104:	e7f2      	b.n	81090ec <_dtoa_r+0x294>
 8109106:	2501      	movs	r5, #1
 8109108:	2300      	movs	r3, #0
 810910a:	9305      	str	r3, [sp, #20]
 810910c:	9508      	str	r5, [sp, #32]
 810910e:	f04f 39ff 	mov.w	r9, #4294967295
 8109112:	2200      	movs	r2, #0
 8109114:	f8cd 9004 	str.w	r9, [sp, #4]
 8109118:	2312      	movs	r3, #18
 810911a:	9209      	str	r2, [sp, #36]	; 0x24
 810911c:	e7cf      	b.n	81090be <_dtoa_r+0x266>
 810911e:	2301      	movs	r3, #1
 8109120:	9308      	str	r3, [sp, #32]
 8109122:	e7f4      	b.n	810910e <_dtoa_r+0x2b6>
 8109124:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8109128:	f8cd 9004 	str.w	r9, [sp, #4]
 810912c:	464b      	mov	r3, r9
 810912e:	e7c6      	b.n	81090be <_dtoa_r+0x266>
 8109130:	3101      	adds	r1, #1
 8109132:	6041      	str	r1, [r0, #4]
 8109134:	0052      	lsls	r2, r2, #1
 8109136:	e7c6      	b.n	81090c6 <_dtoa_r+0x26e>
 8109138:	636f4361 	.word	0x636f4361
 810913c:	3fd287a7 	.word	0x3fd287a7
 8109140:	8b60c8b3 	.word	0x8b60c8b3
 8109144:	3fc68a28 	.word	0x3fc68a28
 8109148:	509f79fb 	.word	0x509f79fb
 810914c:	3fd34413 	.word	0x3fd34413
 8109150:	0810b63e 	.word	0x0810b63e
 8109154:	0810b655 	.word	0x0810b655
 8109158:	7ff00000 	.word	0x7ff00000
 810915c:	0810b63a 	.word	0x0810b63a
 8109160:	0810b631 	.word	0x0810b631
 8109164:	0810b4b5 	.word	0x0810b4b5
 8109168:	3ff80000 	.word	0x3ff80000
 810916c:	0810b7d0 	.word	0x0810b7d0
 8109170:	0810b6b4 	.word	0x0810b6b4
 8109174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109176:	9a00      	ldr	r2, [sp, #0]
 8109178:	601a      	str	r2, [r3, #0]
 810917a:	9b01      	ldr	r3, [sp, #4]
 810917c:	2b0e      	cmp	r3, #14
 810917e:	f200 80ad 	bhi.w	81092dc <_dtoa_r+0x484>
 8109182:	2d00      	cmp	r5, #0
 8109184:	f000 80aa 	beq.w	81092dc <_dtoa_r+0x484>
 8109188:	f1ba 0f00 	cmp.w	sl, #0
 810918c:	dd36      	ble.n	81091fc <_dtoa_r+0x3a4>
 810918e:	4ac3      	ldr	r2, [pc, #780]	; (810949c <_dtoa_r+0x644>)
 8109190:	f00a 030f 	and.w	r3, sl, #15
 8109194:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109198:	ed93 7b00 	vldr	d7, [r3]
 810919c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81091a0:	ea4f 172a 	mov.w	r7, sl, asr #4
 81091a4:	eeb0 8a47 	vmov.f32	s16, s14
 81091a8:	eef0 8a67 	vmov.f32	s17, s15
 81091ac:	d016      	beq.n	81091dc <_dtoa_r+0x384>
 81091ae:	4bbc      	ldr	r3, [pc, #752]	; (81094a0 <_dtoa_r+0x648>)
 81091b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81091b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 81091b8:	f7f7 fbd0 	bl	810095c <__aeabi_ddiv>
 81091bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81091c0:	f007 070f 	and.w	r7, r7, #15
 81091c4:	2503      	movs	r5, #3
 81091c6:	4eb6      	ldr	r6, [pc, #728]	; (81094a0 <_dtoa_r+0x648>)
 81091c8:	b957      	cbnz	r7, 81091e0 <_dtoa_r+0x388>
 81091ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81091ce:	ec53 2b18 	vmov	r2, r3, d8
 81091d2:	f7f7 fbc3 	bl	810095c <__aeabi_ddiv>
 81091d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81091da:	e029      	b.n	8109230 <_dtoa_r+0x3d8>
 81091dc:	2502      	movs	r5, #2
 81091de:	e7f2      	b.n	81091c6 <_dtoa_r+0x36e>
 81091e0:	07f9      	lsls	r1, r7, #31
 81091e2:	d508      	bpl.n	81091f6 <_dtoa_r+0x39e>
 81091e4:	ec51 0b18 	vmov	r0, r1, d8
 81091e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 81091ec:	f7f7 fa8c 	bl	8100708 <__aeabi_dmul>
 81091f0:	ec41 0b18 	vmov	d8, r0, r1
 81091f4:	3501      	adds	r5, #1
 81091f6:	107f      	asrs	r7, r7, #1
 81091f8:	3608      	adds	r6, #8
 81091fa:	e7e5      	b.n	81091c8 <_dtoa_r+0x370>
 81091fc:	f000 80a6 	beq.w	810934c <_dtoa_r+0x4f4>
 8109200:	f1ca 0600 	rsb	r6, sl, #0
 8109204:	4ba5      	ldr	r3, [pc, #660]	; (810949c <_dtoa_r+0x644>)
 8109206:	4fa6      	ldr	r7, [pc, #664]	; (81094a0 <_dtoa_r+0x648>)
 8109208:	f006 020f 	and.w	r2, r6, #15
 810920c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109214:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109218:	f7f7 fa76 	bl	8100708 <__aeabi_dmul>
 810921c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109220:	1136      	asrs	r6, r6, #4
 8109222:	2300      	movs	r3, #0
 8109224:	2502      	movs	r5, #2
 8109226:	2e00      	cmp	r6, #0
 8109228:	f040 8085 	bne.w	8109336 <_dtoa_r+0x4de>
 810922c:	2b00      	cmp	r3, #0
 810922e:	d1d2      	bne.n	81091d6 <_dtoa_r+0x37e>
 8109230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109232:	2b00      	cmp	r3, #0
 8109234:	f000 808c 	beq.w	8109350 <_dtoa_r+0x4f8>
 8109238:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810923c:	4b99      	ldr	r3, [pc, #612]	; (81094a4 <_dtoa_r+0x64c>)
 810923e:	2200      	movs	r2, #0
 8109240:	4630      	mov	r0, r6
 8109242:	4639      	mov	r1, r7
 8109244:	f7f7 fcd2 	bl	8100bec <__aeabi_dcmplt>
 8109248:	2800      	cmp	r0, #0
 810924a:	f000 8081 	beq.w	8109350 <_dtoa_r+0x4f8>
 810924e:	9b01      	ldr	r3, [sp, #4]
 8109250:	2b00      	cmp	r3, #0
 8109252:	d07d      	beq.n	8109350 <_dtoa_r+0x4f8>
 8109254:	f1b9 0f00 	cmp.w	r9, #0
 8109258:	dd3c      	ble.n	81092d4 <_dtoa_r+0x47c>
 810925a:	f10a 33ff 	add.w	r3, sl, #4294967295
 810925e:	9307      	str	r3, [sp, #28]
 8109260:	2200      	movs	r2, #0
 8109262:	4b91      	ldr	r3, [pc, #580]	; (81094a8 <_dtoa_r+0x650>)
 8109264:	4630      	mov	r0, r6
 8109266:	4639      	mov	r1, r7
 8109268:	f7f7 fa4e 	bl	8100708 <__aeabi_dmul>
 810926c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109270:	3501      	adds	r5, #1
 8109272:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8109276:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810927a:	4628      	mov	r0, r5
 810927c:	f7f7 f9da 	bl	8100634 <__aeabi_i2d>
 8109280:	4632      	mov	r2, r6
 8109282:	463b      	mov	r3, r7
 8109284:	f7f7 fa40 	bl	8100708 <__aeabi_dmul>
 8109288:	4b88      	ldr	r3, [pc, #544]	; (81094ac <_dtoa_r+0x654>)
 810928a:	2200      	movs	r2, #0
 810928c:	f7f7 f886 	bl	810039c <__adddf3>
 8109290:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8109294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109298:	9303      	str	r3, [sp, #12]
 810929a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810929c:	2b00      	cmp	r3, #0
 810929e:	d15c      	bne.n	810935a <_dtoa_r+0x502>
 81092a0:	4b83      	ldr	r3, [pc, #524]	; (81094b0 <_dtoa_r+0x658>)
 81092a2:	2200      	movs	r2, #0
 81092a4:	4630      	mov	r0, r6
 81092a6:	4639      	mov	r1, r7
 81092a8:	f7f7 f876 	bl	8100398 <__aeabi_dsub>
 81092ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81092b0:	4606      	mov	r6, r0
 81092b2:	460f      	mov	r7, r1
 81092b4:	f7f7 fcb8 	bl	8100c28 <__aeabi_dcmpgt>
 81092b8:	2800      	cmp	r0, #0
 81092ba:	f040 8296 	bne.w	81097ea <_dtoa_r+0x992>
 81092be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 81092c2:	4630      	mov	r0, r6
 81092c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81092c8:	4639      	mov	r1, r7
 81092ca:	f7f7 fc8f 	bl	8100bec <__aeabi_dcmplt>
 81092ce:	2800      	cmp	r0, #0
 81092d0:	f040 8288 	bne.w	81097e4 <_dtoa_r+0x98c>
 81092d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 81092d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81092dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 81092de:	2b00      	cmp	r3, #0
 81092e0:	f2c0 8158 	blt.w	8109594 <_dtoa_r+0x73c>
 81092e4:	f1ba 0f0e 	cmp.w	sl, #14
 81092e8:	f300 8154 	bgt.w	8109594 <_dtoa_r+0x73c>
 81092ec:	4b6b      	ldr	r3, [pc, #428]	; (810949c <_dtoa_r+0x644>)
 81092ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 81092f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 81092f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81092f8:	2b00      	cmp	r3, #0
 81092fa:	f280 80e3 	bge.w	81094c4 <_dtoa_r+0x66c>
 81092fe:	9b01      	ldr	r3, [sp, #4]
 8109300:	2b00      	cmp	r3, #0
 8109302:	f300 80df 	bgt.w	81094c4 <_dtoa_r+0x66c>
 8109306:	f040 826d 	bne.w	81097e4 <_dtoa_r+0x98c>
 810930a:	4b69      	ldr	r3, [pc, #420]	; (81094b0 <_dtoa_r+0x658>)
 810930c:	2200      	movs	r2, #0
 810930e:	4640      	mov	r0, r8
 8109310:	4649      	mov	r1, r9
 8109312:	f7f7 f9f9 	bl	8100708 <__aeabi_dmul>
 8109316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810931a:	f7f7 fc7b 	bl	8100c14 <__aeabi_dcmpge>
 810931e:	9e01      	ldr	r6, [sp, #4]
 8109320:	4637      	mov	r7, r6
 8109322:	2800      	cmp	r0, #0
 8109324:	f040 8243 	bne.w	81097ae <_dtoa_r+0x956>
 8109328:	9d00      	ldr	r5, [sp, #0]
 810932a:	2331      	movs	r3, #49	; 0x31
 810932c:	f805 3b01 	strb.w	r3, [r5], #1
 8109330:	f10a 0a01 	add.w	sl, sl, #1
 8109334:	e23f      	b.n	81097b6 <_dtoa_r+0x95e>
 8109336:	07f2      	lsls	r2, r6, #31
 8109338:	d505      	bpl.n	8109346 <_dtoa_r+0x4ee>
 810933a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810933e:	f7f7 f9e3 	bl	8100708 <__aeabi_dmul>
 8109342:	3501      	adds	r5, #1
 8109344:	2301      	movs	r3, #1
 8109346:	1076      	asrs	r6, r6, #1
 8109348:	3708      	adds	r7, #8
 810934a:	e76c      	b.n	8109226 <_dtoa_r+0x3ce>
 810934c:	2502      	movs	r5, #2
 810934e:	e76f      	b.n	8109230 <_dtoa_r+0x3d8>
 8109350:	9b01      	ldr	r3, [sp, #4]
 8109352:	f8cd a01c 	str.w	sl, [sp, #28]
 8109356:	930c      	str	r3, [sp, #48]	; 0x30
 8109358:	e78d      	b.n	8109276 <_dtoa_r+0x41e>
 810935a:	9900      	ldr	r1, [sp, #0]
 810935c:	980c      	ldr	r0, [sp, #48]	; 0x30
 810935e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109360:	4b4e      	ldr	r3, [pc, #312]	; (810949c <_dtoa_r+0x644>)
 8109362:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109366:	4401      	add	r1, r0
 8109368:	9102      	str	r1, [sp, #8]
 810936a:	9908      	ldr	r1, [sp, #32]
 810936c:	eeb0 8a47 	vmov.f32	s16, s14
 8109370:	eef0 8a67 	vmov.f32	s17, s15
 8109374:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109378:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810937c:	2900      	cmp	r1, #0
 810937e:	d045      	beq.n	810940c <_dtoa_r+0x5b4>
 8109380:	494c      	ldr	r1, [pc, #304]	; (81094b4 <_dtoa_r+0x65c>)
 8109382:	2000      	movs	r0, #0
 8109384:	f7f7 faea 	bl	810095c <__aeabi_ddiv>
 8109388:	ec53 2b18 	vmov	r2, r3, d8
 810938c:	f7f7 f804 	bl	8100398 <__aeabi_dsub>
 8109390:	9d00      	ldr	r5, [sp, #0]
 8109392:	ec41 0b18 	vmov	d8, r0, r1
 8109396:	4639      	mov	r1, r7
 8109398:	4630      	mov	r0, r6
 810939a:	f7f7 fc65 	bl	8100c68 <__aeabi_d2iz>
 810939e:	900c      	str	r0, [sp, #48]	; 0x30
 81093a0:	f7f7 f948 	bl	8100634 <__aeabi_i2d>
 81093a4:	4602      	mov	r2, r0
 81093a6:	460b      	mov	r3, r1
 81093a8:	4630      	mov	r0, r6
 81093aa:	4639      	mov	r1, r7
 81093ac:	f7f6 fff4 	bl	8100398 <__aeabi_dsub>
 81093b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81093b2:	3330      	adds	r3, #48	; 0x30
 81093b4:	f805 3b01 	strb.w	r3, [r5], #1
 81093b8:	ec53 2b18 	vmov	r2, r3, d8
 81093bc:	4606      	mov	r6, r0
 81093be:	460f      	mov	r7, r1
 81093c0:	f7f7 fc14 	bl	8100bec <__aeabi_dcmplt>
 81093c4:	2800      	cmp	r0, #0
 81093c6:	d165      	bne.n	8109494 <_dtoa_r+0x63c>
 81093c8:	4632      	mov	r2, r6
 81093ca:	463b      	mov	r3, r7
 81093cc:	4935      	ldr	r1, [pc, #212]	; (81094a4 <_dtoa_r+0x64c>)
 81093ce:	2000      	movs	r0, #0
 81093d0:	f7f6 ffe2 	bl	8100398 <__aeabi_dsub>
 81093d4:	ec53 2b18 	vmov	r2, r3, d8
 81093d8:	f7f7 fc08 	bl	8100bec <__aeabi_dcmplt>
 81093dc:	2800      	cmp	r0, #0
 81093de:	f040 80b9 	bne.w	8109554 <_dtoa_r+0x6fc>
 81093e2:	9b02      	ldr	r3, [sp, #8]
 81093e4:	429d      	cmp	r5, r3
 81093e6:	f43f af75 	beq.w	81092d4 <_dtoa_r+0x47c>
 81093ea:	4b2f      	ldr	r3, [pc, #188]	; (81094a8 <_dtoa_r+0x650>)
 81093ec:	ec51 0b18 	vmov	r0, r1, d8
 81093f0:	2200      	movs	r2, #0
 81093f2:	f7f7 f989 	bl	8100708 <__aeabi_dmul>
 81093f6:	4b2c      	ldr	r3, [pc, #176]	; (81094a8 <_dtoa_r+0x650>)
 81093f8:	ec41 0b18 	vmov	d8, r0, r1
 81093fc:	2200      	movs	r2, #0
 81093fe:	4630      	mov	r0, r6
 8109400:	4639      	mov	r1, r7
 8109402:	f7f7 f981 	bl	8100708 <__aeabi_dmul>
 8109406:	4606      	mov	r6, r0
 8109408:	460f      	mov	r7, r1
 810940a:	e7c4      	b.n	8109396 <_dtoa_r+0x53e>
 810940c:	ec51 0b17 	vmov	r0, r1, d7
 8109410:	f7f7 f97a 	bl	8100708 <__aeabi_dmul>
 8109414:	9b02      	ldr	r3, [sp, #8]
 8109416:	9d00      	ldr	r5, [sp, #0]
 8109418:	930c      	str	r3, [sp, #48]	; 0x30
 810941a:	ec41 0b18 	vmov	d8, r0, r1
 810941e:	4639      	mov	r1, r7
 8109420:	4630      	mov	r0, r6
 8109422:	f7f7 fc21 	bl	8100c68 <__aeabi_d2iz>
 8109426:	9011      	str	r0, [sp, #68]	; 0x44
 8109428:	f7f7 f904 	bl	8100634 <__aeabi_i2d>
 810942c:	4602      	mov	r2, r0
 810942e:	460b      	mov	r3, r1
 8109430:	4630      	mov	r0, r6
 8109432:	4639      	mov	r1, r7
 8109434:	f7f6 ffb0 	bl	8100398 <__aeabi_dsub>
 8109438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810943a:	3330      	adds	r3, #48	; 0x30
 810943c:	f805 3b01 	strb.w	r3, [r5], #1
 8109440:	9b02      	ldr	r3, [sp, #8]
 8109442:	429d      	cmp	r5, r3
 8109444:	4606      	mov	r6, r0
 8109446:	460f      	mov	r7, r1
 8109448:	f04f 0200 	mov.w	r2, #0
 810944c:	d134      	bne.n	81094b8 <_dtoa_r+0x660>
 810944e:	4b19      	ldr	r3, [pc, #100]	; (81094b4 <_dtoa_r+0x65c>)
 8109450:	ec51 0b18 	vmov	r0, r1, d8
 8109454:	f7f6 ffa2 	bl	810039c <__adddf3>
 8109458:	4602      	mov	r2, r0
 810945a:	460b      	mov	r3, r1
 810945c:	4630      	mov	r0, r6
 810945e:	4639      	mov	r1, r7
 8109460:	f7f7 fbe2 	bl	8100c28 <__aeabi_dcmpgt>
 8109464:	2800      	cmp	r0, #0
 8109466:	d175      	bne.n	8109554 <_dtoa_r+0x6fc>
 8109468:	ec53 2b18 	vmov	r2, r3, d8
 810946c:	4911      	ldr	r1, [pc, #68]	; (81094b4 <_dtoa_r+0x65c>)
 810946e:	2000      	movs	r0, #0
 8109470:	f7f6 ff92 	bl	8100398 <__aeabi_dsub>
 8109474:	4602      	mov	r2, r0
 8109476:	460b      	mov	r3, r1
 8109478:	4630      	mov	r0, r6
 810947a:	4639      	mov	r1, r7
 810947c:	f7f7 fbb6 	bl	8100bec <__aeabi_dcmplt>
 8109480:	2800      	cmp	r0, #0
 8109482:	f43f af27 	beq.w	81092d4 <_dtoa_r+0x47c>
 8109486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109488:	1e6b      	subs	r3, r5, #1
 810948a:	930c      	str	r3, [sp, #48]	; 0x30
 810948c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109490:	2b30      	cmp	r3, #48	; 0x30
 8109492:	d0f8      	beq.n	8109486 <_dtoa_r+0x62e>
 8109494:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109498:	e04a      	b.n	8109530 <_dtoa_r+0x6d8>
 810949a:	bf00      	nop
 810949c:	0810b7d0 	.word	0x0810b7d0
 81094a0:	0810b7a8 	.word	0x0810b7a8
 81094a4:	3ff00000 	.word	0x3ff00000
 81094a8:	40240000 	.word	0x40240000
 81094ac:	401c0000 	.word	0x401c0000
 81094b0:	40140000 	.word	0x40140000
 81094b4:	3fe00000 	.word	0x3fe00000
 81094b8:	4baf      	ldr	r3, [pc, #700]	; (8109778 <_dtoa_r+0x920>)
 81094ba:	f7f7 f925 	bl	8100708 <__aeabi_dmul>
 81094be:	4606      	mov	r6, r0
 81094c0:	460f      	mov	r7, r1
 81094c2:	e7ac      	b.n	810941e <_dtoa_r+0x5c6>
 81094c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81094c8:	9d00      	ldr	r5, [sp, #0]
 81094ca:	4642      	mov	r2, r8
 81094cc:	464b      	mov	r3, r9
 81094ce:	4630      	mov	r0, r6
 81094d0:	4639      	mov	r1, r7
 81094d2:	f7f7 fa43 	bl	810095c <__aeabi_ddiv>
 81094d6:	f7f7 fbc7 	bl	8100c68 <__aeabi_d2iz>
 81094da:	9002      	str	r0, [sp, #8]
 81094dc:	f7f7 f8aa 	bl	8100634 <__aeabi_i2d>
 81094e0:	4642      	mov	r2, r8
 81094e2:	464b      	mov	r3, r9
 81094e4:	f7f7 f910 	bl	8100708 <__aeabi_dmul>
 81094e8:	4602      	mov	r2, r0
 81094ea:	460b      	mov	r3, r1
 81094ec:	4630      	mov	r0, r6
 81094ee:	4639      	mov	r1, r7
 81094f0:	f7f6 ff52 	bl	8100398 <__aeabi_dsub>
 81094f4:	9e02      	ldr	r6, [sp, #8]
 81094f6:	9f01      	ldr	r7, [sp, #4]
 81094f8:	3630      	adds	r6, #48	; 0x30
 81094fa:	f805 6b01 	strb.w	r6, [r5], #1
 81094fe:	9e00      	ldr	r6, [sp, #0]
 8109500:	1bae      	subs	r6, r5, r6
 8109502:	42b7      	cmp	r7, r6
 8109504:	4602      	mov	r2, r0
 8109506:	460b      	mov	r3, r1
 8109508:	d137      	bne.n	810957a <_dtoa_r+0x722>
 810950a:	f7f6 ff47 	bl	810039c <__adddf3>
 810950e:	4642      	mov	r2, r8
 8109510:	464b      	mov	r3, r9
 8109512:	4606      	mov	r6, r0
 8109514:	460f      	mov	r7, r1
 8109516:	f7f7 fb87 	bl	8100c28 <__aeabi_dcmpgt>
 810951a:	b9c8      	cbnz	r0, 8109550 <_dtoa_r+0x6f8>
 810951c:	4642      	mov	r2, r8
 810951e:	464b      	mov	r3, r9
 8109520:	4630      	mov	r0, r6
 8109522:	4639      	mov	r1, r7
 8109524:	f7f7 fb58 	bl	8100bd8 <__aeabi_dcmpeq>
 8109528:	b110      	cbz	r0, 8109530 <_dtoa_r+0x6d8>
 810952a:	9b02      	ldr	r3, [sp, #8]
 810952c:	07d9      	lsls	r1, r3, #31
 810952e:	d40f      	bmi.n	8109550 <_dtoa_r+0x6f8>
 8109530:	4620      	mov	r0, r4
 8109532:	4659      	mov	r1, fp
 8109534:	f000 feda 	bl	810a2ec <_Bfree>
 8109538:	2300      	movs	r3, #0
 810953a:	702b      	strb	r3, [r5, #0]
 810953c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810953e:	f10a 0001 	add.w	r0, sl, #1
 8109542:	6018      	str	r0, [r3, #0]
 8109544:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109546:	2b00      	cmp	r3, #0
 8109548:	f43f acd8 	beq.w	8108efc <_dtoa_r+0xa4>
 810954c:	601d      	str	r5, [r3, #0]
 810954e:	e4d5      	b.n	8108efc <_dtoa_r+0xa4>
 8109550:	f8cd a01c 	str.w	sl, [sp, #28]
 8109554:	462b      	mov	r3, r5
 8109556:	461d      	mov	r5, r3
 8109558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810955c:	2a39      	cmp	r2, #57	; 0x39
 810955e:	d108      	bne.n	8109572 <_dtoa_r+0x71a>
 8109560:	9a00      	ldr	r2, [sp, #0]
 8109562:	429a      	cmp	r2, r3
 8109564:	d1f7      	bne.n	8109556 <_dtoa_r+0x6fe>
 8109566:	9a07      	ldr	r2, [sp, #28]
 8109568:	9900      	ldr	r1, [sp, #0]
 810956a:	3201      	adds	r2, #1
 810956c:	9207      	str	r2, [sp, #28]
 810956e:	2230      	movs	r2, #48	; 0x30
 8109570:	700a      	strb	r2, [r1, #0]
 8109572:	781a      	ldrb	r2, [r3, #0]
 8109574:	3201      	adds	r2, #1
 8109576:	701a      	strb	r2, [r3, #0]
 8109578:	e78c      	b.n	8109494 <_dtoa_r+0x63c>
 810957a:	4b7f      	ldr	r3, [pc, #508]	; (8109778 <_dtoa_r+0x920>)
 810957c:	2200      	movs	r2, #0
 810957e:	f7f7 f8c3 	bl	8100708 <__aeabi_dmul>
 8109582:	2200      	movs	r2, #0
 8109584:	2300      	movs	r3, #0
 8109586:	4606      	mov	r6, r0
 8109588:	460f      	mov	r7, r1
 810958a:	f7f7 fb25 	bl	8100bd8 <__aeabi_dcmpeq>
 810958e:	2800      	cmp	r0, #0
 8109590:	d09b      	beq.n	81094ca <_dtoa_r+0x672>
 8109592:	e7cd      	b.n	8109530 <_dtoa_r+0x6d8>
 8109594:	9a08      	ldr	r2, [sp, #32]
 8109596:	2a00      	cmp	r2, #0
 8109598:	f000 80c4 	beq.w	8109724 <_dtoa_r+0x8cc>
 810959c:	9a05      	ldr	r2, [sp, #20]
 810959e:	2a01      	cmp	r2, #1
 81095a0:	f300 80a8 	bgt.w	81096f4 <_dtoa_r+0x89c>
 81095a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 81095a6:	2a00      	cmp	r2, #0
 81095a8:	f000 80a0 	beq.w	81096ec <_dtoa_r+0x894>
 81095ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 81095b0:	9e06      	ldr	r6, [sp, #24]
 81095b2:	4645      	mov	r5, r8
 81095b4:	9a04      	ldr	r2, [sp, #16]
 81095b6:	2101      	movs	r1, #1
 81095b8:	441a      	add	r2, r3
 81095ba:	4620      	mov	r0, r4
 81095bc:	4498      	add	r8, r3
 81095be:	9204      	str	r2, [sp, #16]
 81095c0:	f000 ff9a 	bl	810a4f8 <__i2b>
 81095c4:	4607      	mov	r7, r0
 81095c6:	2d00      	cmp	r5, #0
 81095c8:	dd0b      	ble.n	81095e2 <_dtoa_r+0x78a>
 81095ca:	9b04      	ldr	r3, [sp, #16]
 81095cc:	2b00      	cmp	r3, #0
 81095ce:	dd08      	ble.n	81095e2 <_dtoa_r+0x78a>
 81095d0:	42ab      	cmp	r3, r5
 81095d2:	9a04      	ldr	r2, [sp, #16]
 81095d4:	bfa8      	it	ge
 81095d6:	462b      	movge	r3, r5
 81095d8:	eba8 0803 	sub.w	r8, r8, r3
 81095dc:	1aed      	subs	r5, r5, r3
 81095de:	1ad3      	subs	r3, r2, r3
 81095e0:	9304      	str	r3, [sp, #16]
 81095e2:	9b06      	ldr	r3, [sp, #24]
 81095e4:	b1fb      	cbz	r3, 8109626 <_dtoa_r+0x7ce>
 81095e6:	9b08      	ldr	r3, [sp, #32]
 81095e8:	2b00      	cmp	r3, #0
 81095ea:	f000 809f 	beq.w	810972c <_dtoa_r+0x8d4>
 81095ee:	2e00      	cmp	r6, #0
 81095f0:	dd11      	ble.n	8109616 <_dtoa_r+0x7be>
 81095f2:	4639      	mov	r1, r7
 81095f4:	4632      	mov	r2, r6
 81095f6:	4620      	mov	r0, r4
 81095f8:	f001 f83a 	bl	810a670 <__pow5mult>
 81095fc:	465a      	mov	r2, fp
 81095fe:	4601      	mov	r1, r0
 8109600:	4607      	mov	r7, r0
 8109602:	4620      	mov	r0, r4
 8109604:	f000 ff8e 	bl	810a524 <__multiply>
 8109608:	4659      	mov	r1, fp
 810960a:	9007      	str	r0, [sp, #28]
 810960c:	4620      	mov	r0, r4
 810960e:	f000 fe6d 	bl	810a2ec <_Bfree>
 8109612:	9b07      	ldr	r3, [sp, #28]
 8109614:	469b      	mov	fp, r3
 8109616:	9b06      	ldr	r3, [sp, #24]
 8109618:	1b9a      	subs	r2, r3, r6
 810961a:	d004      	beq.n	8109626 <_dtoa_r+0x7ce>
 810961c:	4659      	mov	r1, fp
 810961e:	4620      	mov	r0, r4
 8109620:	f001 f826 	bl	810a670 <__pow5mult>
 8109624:	4683      	mov	fp, r0
 8109626:	2101      	movs	r1, #1
 8109628:	4620      	mov	r0, r4
 810962a:	f000 ff65 	bl	810a4f8 <__i2b>
 810962e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109630:	2b00      	cmp	r3, #0
 8109632:	4606      	mov	r6, r0
 8109634:	dd7c      	ble.n	8109730 <_dtoa_r+0x8d8>
 8109636:	461a      	mov	r2, r3
 8109638:	4601      	mov	r1, r0
 810963a:	4620      	mov	r0, r4
 810963c:	f001 f818 	bl	810a670 <__pow5mult>
 8109640:	9b05      	ldr	r3, [sp, #20]
 8109642:	2b01      	cmp	r3, #1
 8109644:	4606      	mov	r6, r0
 8109646:	dd76      	ble.n	8109736 <_dtoa_r+0x8de>
 8109648:	2300      	movs	r3, #0
 810964a:	9306      	str	r3, [sp, #24]
 810964c:	6933      	ldr	r3, [r6, #16]
 810964e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8109652:	6918      	ldr	r0, [r3, #16]
 8109654:	f000 ff00 	bl	810a458 <__hi0bits>
 8109658:	f1c0 0020 	rsb	r0, r0, #32
 810965c:	9b04      	ldr	r3, [sp, #16]
 810965e:	4418      	add	r0, r3
 8109660:	f010 001f 	ands.w	r0, r0, #31
 8109664:	f000 8086 	beq.w	8109774 <_dtoa_r+0x91c>
 8109668:	f1c0 0320 	rsb	r3, r0, #32
 810966c:	2b04      	cmp	r3, #4
 810966e:	dd7f      	ble.n	8109770 <_dtoa_r+0x918>
 8109670:	f1c0 001c 	rsb	r0, r0, #28
 8109674:	9b04      	ldr	r3, [sp, #16]
 8109676:	4403      	add	r3, r0
 8109678:	4480      	add	r8, r0
 810967a:	4405      	add	r5, r0
 810967c:	9304      	str	r3, [sp, #16]
 810967e:	f1b8 0f00 	cmp.w	r8, #0
 8109682:	dd05      	ble.n	8109690 <_dtoa_r+0x838>
 8109684:	4659      	mov	r1, fp
 8109686:	4642      	mov	r2, r8
 8109688:	4620      	mov	r0, r4
 810968a:	f001 f84b 	bl	810a724 <__lshift>
 810968e:	4683      	mov	fp, r0
 8109690:	9b04      	ldr	r3, [sp, #16]
 8109692:	2b00      	cmp	r3, #0
 8109694:	dd05      	ble.n	81096a2 <_dtoa_r+0x84a>
 8109696:	4631      	mov	r1, r6
 8109698:	461a      	mov	r2, r3
 810969a:	4620      	mov	r0, r4
 810969c:	f001 f842 	bl	810a724 <__lshift>
 81096a0:	4606      	mov	r6, r0
 81096a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81096a4:	2b00      	cmp	r3, #0
 81096a6:	d069      	beq.n	810977c <_dtoa_r+0x924>
 81096a8:	4631      	mov	r1, r6
 81096aa:	4658      	mov	r0, fp
 81096ac:	f001 f8a6 	bl	810a7fc <__mcmp>
 81096b0:	2800      	cmp	r0, #0
 81096b2:	da63      	bge.n	810977c <_dtoa_r+0x924>
 81096b4:	2300      	movs	r3, #0
 81096b6:	4659      	mov	r1, fp
 81096b8:	220a      	movs	r2, #10
 81096ba:	4620      	mov	r0, r4
 81096bc:	f000 fe38 	bl	810a330 <__multadd>
 81096c0:	9b08      	ldr	r3, [sp, #32]
 81096c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 81096c6:	4683      	mov	fp, r0
 81096c8:	2b00      	cmp	r3, #0
 81096ca:	f000 818f 	beq.w	81099ec <_dtoa_r+0xb94>
 81096ce:	4639      	mov	r1, r7
 81096d0:	2300      	movs	r3, #0
 81096d2:	220a      	movs	r2, #10
 81096d4:	4620      	mov	r0, r4
 81096d6:	f000 fe2b 	bl	810a330 <__multadd>
 81096da:	f1b9 0f00 	cmp.w	r9, #0
 81096de:	4607      	mov	r7, r0
 81096e0:	f300 808e 	bgt.w	8109800 <_dtoa_r+0x9a8>
 81096e4:	9b05      	ldr	r3, [sp, #20]
 81096e6:	2b02      	cmp	r3, #2
 81096e8:	dc50      	bgt.n	810978c <_dtoa_r+0x934>
 81096ea:	e089      	b.n	8109800 <_dtoa_r+0x9a8>
 81096ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 81096ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 81096f2:	e75d      	b.n	81095b0 <_dtoa_r+0x758>
 81096f4:	9b01      	ldr	r3, [sp, #4]
 81096f6:	1e5e      	subs	r6, r3, #1
 81096f8:	9b06      	ldr	r3, [sp, #24]
 81096fa:	42b3      	cmp	r3, r6
 81096fc:	bfbf      	itttt	lt
 81096fe:	9b06      	ldrlt	r3, [sp, #24]
 8109700:	9606      	strlt	r6, [sp, #24]
 8109702:	1af2      	sublt	r2, r6, r3
 8109704:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8109706:	bfb6      	itet	lt
 8109708:	189b      	addlt	r3, r3, r2
 810970a:	1b9e      	subge	r6, r3, r6
 810970c:	930d      	strlt	r3, [sp, #52]	; 0x34
 810970e:	9b01      	ldr	r3, [sp, #4]
 8109710:	bfb8      	it	lt
 8109712:	2600      	movlt	r6, #0
 8109714:	2b00      	cmp	r3, #0
 8109716:	bfb5      	itete	lt
 8109718:	eba8 0503 	sublt.w	r5, r8, r3
 810971c:	9b01      	ldrge	r3, [sp, #4]
 810971e:	2300      	movlt	r3, #0
 8109720:	4645      	movge	r5, r8
 8109722:	e747      	b.n	81095b4 <_dtoa_r+0x75c>
 8109724:	9e06      	ldr	r6, [sp, #24]
 8109726:	9f08      	ldr	r7, [sp, #32]
 8109728:	4645      	mov	r5, r8
 810972a:	e74c      	b.n	81095c6 <_dtoa_r+0x76e>
 810972c:	9a06      	ldr	r2, [sp, #24]
 810972e:	e775      	b.n	810961c <_dtoa_r+0x7c4>
 8109730:	9b05      	ldr	r3, [sp, #20]
 8109732:	2b01      	cmp	r3, #1
 8109734:	dc18      	bgt.n	8109768 <_dtoa_r+0x910>
 8109736:	9b02      	ldr	r3, [sp, #8]
 8109738:	b9b3      	cbnz	r3, 8109768 <_dtoa_r+0x910>
 810973a:	9b03      	ldr	r3, [sp, #12]
 810973c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109740:	b9a3      	cbnz	r3, 810976c <_dtoa_r+0x914>
 8109742:	9b03      	ldr	r3, [sp, #12]
 8109744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8109748:	0d1b      	lsrs	r3, r3, #20
 810974a:	051b      	lsls	r3, r3, #20
 810974c:	b12b      	cbz	r3, 810975a <_dtoa_r+0x902>
 810974e:	9b04      	ldr	r3, [sp, #16]
 8109750:	3301      	adds	r3, #1
 8109752:	9304      	str	r3, [sp, #16]
 8109754:	f108 0801 	add.w	r8, r8, #1
 8109758:	2301      	movs	r3, #1
 810975a:	9306      	str	r3, [sp, #24]
 810975c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810975e:	2b00      	cmp	r3, #0
 8109760:	f47f af74 	bne.w	810964c <_dtoa_r+0x7f4>
 8109764:	2001      	movs	r0, #1
 8109766:	e779      	b.n	810965c <_dtoa_r+0x804>
 8109768:	2300      	movs	r3, #0
 810976a:	e7f6      	b.n	810975a <_dtoa_r+0x902>
 810976c:	9b02      	ldr	r3, [sp, #8]
 810976e:	e7f4      	b.n	810975a <_dtoa_r+0x902>
 8109770:	d085      	beq.n	810967e <_dtoa_r+0x826>
 8109772:	4618      	mov	r0, r3
 8109774:	301c      	adds	r0, #28
 8109776:	e77d      	b.n	8109674 <_dtoa_r+0x81c>
 8109778:	40240000 	.word	0x40240000
 810977c:	9b01      	ldr	r3, [sp, #4]
 810977e:	2b00      	cmp	r3, #0
 8109780:	dc38      	bgt.n	81097f4 <_dtoa_r+0x99c>
 8109782:	9b05      	ldr	r3, [sp, #20]
 8109784:	2b02      	cmp	r3, #2
 8109786:	dd35      	ble.n	81097f4 <_dtoa_r+0x99c>
 8109788:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810978c:	f1b9 0f00 	cmp.w	r9, #0
 8109790:	d10d      	bne.n	81097ae <_dtoa_r+0x956>
 8109792:	4631      	mov	r1, r6
 8109794:	464b      	mov	r3, r9
 8109796:	2205      	movs	r2, #5
 8109798:	4620      	mov	r0, r4
 810979a:	f000 fdc9 	bl	810a330 <__multadd>
 810979e:	4601      	mov	r1, r0
 81097a0:	4606      	mov	r6, r0
 81097a2:	4658      	mov	r0, fp
 81097a4:	f001 f82a 	bl	810a7fc <__mcmp>
 81097a8:	2800      	cmp	r0, #0
 81097aa:	f73f adbd 	bgt.w	8109328 <_dtoa_r+0x4d0>
 81097ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81097b0:	9d00      	ldr	r5, [sp, #0]
 81097b2:	ea6f 0a03 	mvn.w	sl, r3
 81097b6:	f04f 0800 	mov.w	r8, #0
 81097ba:	4631      	mov	r1, r6
 81097bc:	4620      	mov	r0, r4
 81097be:	f000 fd95 	bl	810a2ec <_Bfree>
 81097c2:	2f00      	cmp	r7, #0
 81097c4:	f43f aeb4 	beq.w	8109530 <_dtoa_r+0x6d8>
 81097c8:	f1b8 0f00 	cmp.w	r8, #0
 81097cc:	d005      	beq.n	81097da <_dtoa_r+0x982>
 81097ce:	45b8      	cmp	r8, r7
 81097d0:	d003      	beq.n	81097da <_dtoa_r+0x982>
 81097d2:	4641      	mov	r1, r8
 81097d4:	4620      	mov	r0, r4
 81097d6:	f000 fd89 	bl	810a2ec <_Bfree>
 81097da:	4639      	mov	r1, r7
 81097dc:	4620      	mov	r0, r4
 81097de:	f000 fd85 	bl	810a2ec <_Bfree>
 81097e2:	e6a5      	b.n	8109530 <_dtoa_r+0x6d8>
 81097e4:	2600      	movs	r6, #0
 81097e6:	4637      	mov	r7, r6
 81097e8:	e7e1      	b.n	81097ae <_dtoa_r+0x956>
 81097ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 81097ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 81097f0:	4637      	mov	r7, r6
 81097f2:	e599      	b.n	8109328 <_dtoa_r+0x4d0>
 81097f4:	9b08      	ldr	r3, [sp, #32]
 81097f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 81097fa:	2b00      	cmp	r3, #0
 81097fc:	f000 80fd 	beq.w	81099fa <_dtoa_r+0xba2>
 8109800:	2d00      	cmp	r5, #0
 8109802:	dd05      	ble.n	8109810 <_dtoa_r+0x9b8>
 8109804:	4639      	mov	r1, r7
 8109806:	462a      	mov	r2, r5
 8109808:	4620      	mov	r0, r4
 810980a:	f000 ff8b 	bl	810a724 <__lshift>
 810980e:	4607      	mov	r7, r0
 8109810:	9b06      	ldr	r3, [sp, #24]
 8109812:	2b00      	cmp	r3, #0
 8109814:	d05c      	beq.n	81098d0 <_dtoa_r+0xa78>
 8109816:	6879      	ldr	r1, [r7, #4]
 8109818:	4620      	mov	r0, r4
 810981a:	f000 fd27 	bl	810a26c <_Balloc>
 810981e:	4605      	mov	r5, r0
 8109820:	b928      	cbnz	r0, 810982e <_dtoa_r+0x9d6>
 8109822:	4b80      	ldr	r3, [pc, #512]	; (8109a24 <_dtoa_r+0xbcc>)
 8109824:	4602      	mov	r2, r0
 8109826:	f240 21ea 	movw	r1, #746	; 0x2ea
 810982a:	f7ff bb2e 	b.w	8108e8a <_dtoa_r+0x32>
 810982e:	693a      	ldr	r2, [r7, #16]
 8109830:	3202      	adds	r2, #2
 8109832:	0092      	lsls	r2, r2, #2
 8109834:	f107 010c 	add.w	r1, r7, #12
 8109838:	300c      	adds	r0, #12
 810983a:	f000 fcfd 	bl	810a238 <memcpy>
 810983e:	2201      	movs	r2, #1
 8109840:	4629      	mov	r1, r5
 8109842:	4620      	mov	r0, r4
 8109844:	f000 ff6e 	bl	810a724 <__lshift>
 8109848:	9b00      	ldr	r3, [sp, #0]
 810984a:	3301      	adds	r3, #1
 810984c:	9301      	str	r3, [sp, #4]
 810984e:	9b00      	ldr	r3, [sp, #0]
 8109850:	444b      	add	r3, r9
 8109852:	9307      	str	r3, [sp, #28]
 8109854:	9b02      	ldr	r3, [sp, #8]
 8109856:	f003 0301 	and.w	r3, r3, #1
 810985a:	46b8      	mov	r8, r7
 810985c:	9306      	str	r3, [sp, #24]
 810985e:	4607      	mov	r7, r0
 8109860:	9b01      	ldr	r3, [sp, #4]
 8109862:	4631      	mov	r1, r6
 8109864:	3b01      	subs	r3, #1
 8109866:	4658      	mov	r0, fp
 8109868:	9302      	str	r3, [sp, #8]
 810986a:	f7ff fa69 	bl	8108d40 <quorem>
 810986e:	4603      	mov	r3, r0
 8109870:	3330      	adds	r3, #48	; 0x30
 8109872:	9004      	str	r0, [sp, #16]
 8109874:	4641      	mov	r1, r8
 8109876:	4658      	mov	r0, fp
 8109878:	9308      	str	r3, [sp, #32]
 810987a:	f000 ffbf 	bl	810a7fc <__mcmp>
 810987e:	463a      	mov	r2, r7
 8109880:	4681      	mov	r9, r0
 8109882:	4631      	mov	r1, r6
 8109884:	4620      	mov	r0, r4
 8109886:	f000 ffd5 	bl	810a834 <__mdiff>
 810988a:	68c2      	ldr	r2, [r0, #12]
 810988c:	9b08      	ldr	r3, [sp, #32]
 810988e:	4605      	mov	r5, r0
 8109890:	bb02      	cbnz	r2, 81098d4 <_dtoa_r+0xa7c>
 8109892:	4601      	mov	r1, r0
 8109894:	4658      	mov	r0, fp
 8109896:	f000 ffb1 	bl	810a7fc <__mcmp>
 810989a:	9b08      	ldr	r3, [sp, #32]
 810989c:	4602      	mov	r2, r0
 810989e:	4629      	mov	r1, r5
 81098a0:	4620      	mov	r0, r4
 81098a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 81098a6:	f000 fd21 	bl	810a2ec <_Bfree>
 81098aa:	9b05      	ldr	r3, [sp, #20]
 81098ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81098ae:	9d01      	ldr	r5, [sp, #4]
 81098b0:	ea43 0102 	orr.w	r1, r3, r2
 81098b4:	9b06      	ldr	r3, [sp, #24]
 81098b6:	430b      	orrs	r3, r1
 81098b8:	9b08      	ldr	r3, [sp, #32]
 81098ba:	d10d      	bne.n	81098d8 <_dtoa_r+0xa80>
 81098bc:	2b39      	cmp	r3, #57	; 0x39
 81098be:	d029      	beq.n	8109914 <_dtoa_r+0xabc>
 81098c0:	f1b9 0f00 	cmp.w	r9, #0
 81098c4:	dd01      	ble.n	81098ca <_dtoa_r+0xa72>
 81098c6:	9b04      	ldr	r3, [sp, #16]
 81098c8:	3331      	adds	r3, #49	; 0x31
 81098ca:	9a02      	ldr	r2, [sp, #8]
 81098cc:	7013      	strb	r3, [r2, #0]
 81098ce:	e774      	b.n	81097ba <_dtoa_r+0x962>
 81098d0:	4638      	mov	r0, r7
 81098d2:	e7b9      	b.n	8109848 <_dtoa_r+0x9f0>
 81098d4:	2201      	movs	r2, #1
 81098d6:	e7e2      	b.n	810989e <_dtoa_r+0xa46>
 81098d8:	f1b9 0f00 	cmp.w	r9, #0
 81098dc:	db06      	blt.n	81098ec <_dtoa_r+0xa94>
 81098de:	9905      	ldr	r1, [sp, #20]
 81098e0:	ea41 0909 	orr.w	r9, r1, r9
 81098e4:	9906      	ldr	r1, [sp, #24]
 81098e6:	ea59 0101 	orrs.w	r1, r9, r1
 81098ea:	d120      	bne.n	810992e <_dtoa_r+0xad6>
 81098ec:	2a00      	cmp	r2, #0
 81098ee:	ddec      	ble.n	81098ca <_dtoa_r+0xa72>
 81098f0:	4659      	mov	r1, fp
 81098f2:	2201      	movs	r2, #1
 81098f4:	4620      	mov	r0, r4
 81098f6:	9301      	str	r3, [sp, #4]
 81098f8:	f000 ff14 	bl	810a724 <__lshift>
 81098fc:	4631      	mov	r1, r6
 81098fe:	4683      	mov	fp, r0
 8109900:	f000 ff7c 	bl	810a7fc <__mcmp>
 8109904:	2800      	cmp	r0, #0
 8109906:	9b01      	ldr	r3, [sp, #4]
 8109908:	dc02      	bgt.n	8109910 <_dtoa_r+0xab8>
 810990a:	d1de      	bne.n	81098ca <_dtoa_r+0xa72>
 810990c:	07da      	lsls	r2, r3, #31
 810990e:	d5dc      	bpl.n	81098ca <_dtoa_r+0xa72>
 8109910:	2b39      	cmp	r3, #57	; 0x39
 8109912:	d1d8      	bne.n	81098c6 <_dtoa_r+0xa6e>
 8109914:	9a02      	ldr	r2, [sp, #8]
 8109916:	2339      	movs	r3, #57	; 0x39
 8109918:	7013      	strb	r3, [r2, #0]
 810991a:	462b      	mov	r3, r5
 810991c:	461d      	mov	r5, r3
 810991e:	3b01      	subs	r3, #1
 8109920:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8109924:	2a39      	cmp	r2, #57	; 0x39
 8109926:	d050      	beq.n	81099ca <_dtoa_r+0xb72>
 8109928:	3201      	adds	r2, #1
 810992a:	701a      	strb	r2, [r3, #0]
 810992c:	e745      	b.n	81097ba <_dtoa_r+0x962>
 810992e:	2a00      	cmp	r2, #0
 8109930:	dd03      	ble.n	810993a <_dtoa_r+0xae2>
 8109932:	2b39      	cmp	r3, #57	; 0x39
 8109934:	d0ee      	beq.n	8109914 <_dtoa_r+0xabc>
 8109936:	3301      	adds	r3, #1
 8109938:	e7c7      	b.n	81098ca <_dtoa_r+0xa72>
 810993a:	9a01      	ldr	r2, [sp, #4]
 810993c:	9907      	ldr	r1, [sp, #28]
 810993e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8109942:	428a      	cmp	r2, r1
 8109944:	d02a      	beq.n	810999c <_dtoa_r+0xb44>
 8109946:	4659      	mov	r1, fp
 8109948:	2300      	movs	r3, #0
 810994a:	220a      	movs	r2, #10
 810994c:	4620      	mov	r0, r4
 810994e:	f000 fcef 	bl	810a330 <__multadd>
 8109952:	45b8      	cmp	r8, r7
 8109954:	4683      	mov	fp, r0
 8109956:	f04f 0300 	mov.w	r3, #0
 810995a:	f04f 020a 	mov.w	r2, #10
 810995e:	4641      	mov	r1, r8
 8109960:	4620      	mov	r0, r4
 8109962:	d107      	bne.n	8109974 <_dtoa_r+0xb1c>
 8109964:	f000 fce4 	bl	810a330 <__multadd>
 8109968:	4680      	mov	r8, r0
 810996a:	4607      	mov	r7, r0
 810996c:	9b01      	ldr	r3, [sp, #4]
 810996e:	3301      	adds	r3, #1
 8109970:	9301      	str	r3, [sp, #4]
 8109972:	e775      	b.n	8109860 <_dtoa_r+0xa08>
 8109974:	f000 fcdc 	bl	810a330 <__multadd>
 8109978:	4639      	mov	r1, r7
 810997a:	4680      	mov	r8, r0
 810997c:	2300      	movs	r3, #0
 810997e:	220a      	movs	r2, #10
 8109980:	4620      	mov	r0, r4
 8109982:	f000 fcd5 	bl	810a330 <__multadd>
 8109986:	4607      	mov	r7, r0
 8109988:	e7f0      	b.n	810996c <_dtoa_r+0xb14>
 810998a:	f1b9 0f00 	cmp.w	r9, #0
 810998e:	9a00      	ldr	r2, [sp, #0]
 8109990:	bfcc      	ite	gt
 8109992:	464d      	movgt	r5, r9
 8109994:	2501      	movle	r5, #1
 8109996:	4415      	add	r5, r2
 8109998:	f04f 0800 	mov.w	r8, #0
 810999c:	4659      	mov	r1, fp
 810999e:	2201      	movs	r2, #1
 81099a0:	4620      	mov	r0, r4
 81099a2:	9301      	str	r3, [sp, #4]
 81099a4:	f000 febe 	bl	810a724 <__lshift>
 81099a8:	4631      	mov	r1, r6
 81099aa:	4683      	mov	fp, r0
 81099ac:	f000 ff26 	bl	810a7fc <__mcmp>
 81099b0:	2800      	cmp	r0, #0
 81099b2:	dcb2      	bgt.n	810991a <_dtoa_r+0xac2>
 81099b4:	d102      	bne.n	81099bc <_dtoa_r+0xb64>
 81099b6:	9b01      	ldr	r3, [sp, #4]
 81099b8:	07db      	lsls	r3, r3, #31
 81099ba:	d4ae      	bmi.n	810991a <_dtoa_r+0xac2>
 81099bc:	462b      	mov	r3, r5
 81099be:	461d      	mov	r5, r3
 81099c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81099c4:	2a30      	cmp	r2, #48	; 0x30
 81099c6:	d0fa      	beq.n	81099be <_dtoa_r+0xb66>
 81099c8:	e6f7      	b.n	81097ba <_dtoa_r+0x962>
 81099ca:	9a00      	ldr	r2, [sp, #0]
 81099cc:	429a      	cmp	r2, r3
 81099ce:	d1a5      	bne.n	810991c <_dtoa_r+0xac4>
 81099d0:	f10a 0a01 	add.w	sl, sl, #1
 81099d4:	2331      	movs	r3, #49	; 0x31
 81099d6:	e779      	b.n	81098cc <_dtoa_r+0xa74>
 81099d8:	4b13      	ldr	r3, [pc, #76]	; (8109a28 <_dtoa_r+0xbd0>)
 81099da:	f7ff baaf 	b.w	8108f3c <_dtoa_r+0xe4>
 81099de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81099e0:	2b00      	cmp	r3, #0
 81099e2:	f47f aa86 	bne.w	8108ef2 <_dtoa_r+0x9a>
 81099e6:	4b11      	ldr	r3, [pc, #68]	; (8109a2c <_dtoa_r+0xbd4>)
 81099e8:	f7ff baa8 	b.w	8108f3c <_dtoa_r+0xe4>
 81099ec:	f1b9 0f00 	cmp.w	r9, #0
 81099f0:	dc03      	bgt.n	81099fa <_dtoa_r+0xba2>
 81099f2:	9b05      	ldr	r3, [sp, #20]
 81099f4:	2b02      	cmp	r3, #2
 81099f6:	f73f aec9 	bgt.w	810978c <_dtoa_r+0x934>
 81099fa:	9d00      	ldr	r5, [sp, #0]
 81099fc:	4631      	mov	r1, r6
 81099fe:	4658      	mov	r0, fp
 8109a00:	f7ff f99e 	bl	8108d40 <quorem>
 8109a04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8109a08:	f805 3b01 	strb.w	r3, [r5], #1
 8109a0c:	9a00      	ldr	r2, [sp, #0]
 8109a0e:	1aaa      	subs	r2, r5, r2
 8109a10:	4591      	cmp	r9, r2
 8109a12:	ddba      	ble.n	810998a <_dtoa_r+0xb32>
 8109a14:	4659      	mov	r1, fp
 8109a16:	2300      	movs	r3, #0
 8109a18:	220a      	movs	r2, #10
 8109a1a:	4620      	mov	r0, r4
 8109a1c:	f000 fc88 	bl	810a330 <__multadd>
 8109a20:	4683      	mov	fp, r0
 8109a22:	e7eb      	b.n	81099fc <_dtoa_r+0xba4>
 8109a24:	0810b6b4 	.word	0x0810b6b4
 8109a28:	0810b4b4 	.word	0x0810b4b4
 8109a2c:	0810b631 	.word	0x0810b631

08109a30 <rshift>:
 8109a30:	6903      	ldr	r3, [r0, #16]
 8109a32:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8109a36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8109a3a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8109a3e:	f100 0414 	add.w	r4, r0, #20
 8109a42:	dd45      	ble.n	8109ad0 <rshift+0xa0>
 8109a44:	f011 011f 	ands.w	r1, r1, #31
 8109a48:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8109a4c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8109a50:	d10c      	bne.n	8109a6c <rshift+0x3c>
 8109a52:	f100 0710 	add.w	r7, r0, #16
 8109a56:	4629      	mov	r1, r5
 8109a58:	42b1      	cmp	r1, r6
 8109a5a:	d334      	bcc.n	8109ac6 <rshift+0x96>
 8109a5c:	1a9b      	subs	r3, r3, r2
 8109a5e:	009b      	lsls	r3, r3, #2
 8109a60:	1eea      	subs	r2, r5, #3
 8109a62:	4296      	cmp	r6, r2
 8109a64:	bf38      	it	cc
 8109a66:	2300      	movcc	r3, #0
 8109a68:	4423      	add	r3, r4
 8109a6a:	e015      	b.n	8109a98 <rshift+0x68>
 8109a6c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8109a70:	f1c1 0820 	rsb	r8, r1, #32
 8109a74:	40cf      	lsrs	r7, r1
 8109a76:	f105 0e04 	add.w	lr, r5, #4
 8109a7a:	46a1      	mov	r9, r4
 8109a7c:	4576      	cmp	r6, lr
 8109a7e:	46f4      	mov	ip, lr
 8109a80:	d815      	bhi.n	8109aae <rshift+0x7e>
 8109a82:	1a9b      	subs	r3, r3, r2
 8109a84:	009a      	lsls	r2, r3, #2
 8109a86:	3a04      	subs	r2, #4
 8109a88:	3501      	adds	r5, #1
 8109a8a:	42ae      	cmp	r6, r5
 8109a8c:	bf38      	it	cc
 8109a8e:	2200      	movcc	r2, #0
 8109a90:	18a3      	adds	r3, r4, r2
 8109a92:	50a7      	str	r7, [r4, r2]
 8109a94:	b107      	cbz	r7, 8109a98 <rshift+0x68>
 8109a96:	3304      	adds	r3, #4
 8109a98:	1b1a      	subs	r2, r3, r4
 8109a9a:	42a3      	cmp	r3, r4
 8109a9c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8109aa0:	bf08      	it	eq
 8109aa2:	2300      	moveq	r3, #0
 8109aa4:	6102      	str	r2, [r0, #16]
 8109aa6:	bf08      	it	eq
 8109aa8:	6143      	streq	r3, [r0, #20]
 8109aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109aae:	f8dc c000 	ldr.w	ip, [ip]
 8109ab2:	fa0c fc08 	lsl.w	ip, ip, r8
 8109ab6:	ea4c 0707 	orr.w	r7, ip, r7
 8109aba:	f849 7b04 	str.w	r7, [r9], #4
 8109abe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8109ac2:	40cf      	lsrs	r7, r1
 8109ac4:	e7da      	b.n	8109a7c <rshift+0x4c>
 8109ac6:	f851 cb04 	ldr.w	ip, [r1], #4
 8109aca:	f847 cf04 	str.w	ip, [r7, #4]!
 8109ace:	e7c3      	b.n	8109a58 <rshift+0x28>
 8109ad0:	4623      	mov	r3, r4
 8109ad2:	e7e1      	b.n	8109a98 <rshift+0x68>

08109ad4 <__hexdig_fun>:
 8109ad4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8109ad8:	2b09      	cmp	r3, #9
 8109ada:	d802      	bhi.n	8109ae2 <__hexdig_fun+0xe>
 8109adc:	3820      	subs	r0, #32
 8109ade:	b2c0      	uxtb	r0, r0
 8109ae0:	4770      	bx	lr
 8109ae2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8109ae6:	2b05      	cmp	r3, #5
 8109ae8:	d801      	bhi.n	8109aee <__hexdig_fun+0x1a>
 8109aea:	3847      	subs	r0, #71	; 0x47
 8109aec:	e7f7      	b.n	8109ade <__hexdig_fun+0xa>
 8109aee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8109af2:	2b05      	cmp	r3, #5
 8109af4:	d801      	bhi.n	8109afa <__hexdig_fun+0x26>
 8109af6:	3827      	subs	r0, #39	; 0x27
 8109af8:	e7f1      	b.n	8109ade <__hexdig_fun+0xa>
 8109afa:	2000      	movs	r0, #0
 8109afc:	4770      	bx	lr
	...

08109b00 <__gethex>:
 8109b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b04:	ed2d 8b02 	vpush	{d8}
 8109b08:	b089      	sub	sp, #36	; 0x24
 8109b0a:	ee08 0a10 	vmov	s16, r0
 8109b0e:	9304      	str	r3, [sp, #16]
 8109b10:	4bbc      	ldr	r3, [pc, #752]	; (8109e04 <__gethex+0x304>)
 8109b12:	681b      	ldr	r3, [r3, #0]
 8109b14:	9301      	str	r3, [sp, #4]
 8109b16:	4618      	mov	r0, r3
 8109b18:	468b      	mov	fp, r1
 8109b1a:	4690      	mov	r8, r2
 8109b1c:	f7f6 fbe0 	bl	81002e0 <strlen>
 8109b20:	9b01      	ldr	r3, [sp, #4]
 8109b22:	f8db 2000 	ldr.w	r2, [fp]
 8109b26:	4403      	add	r3, r0
 8109b28:	4682      	mov	sl, r0
 8109b2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8109b2e:	9305      	str	r3, [sp, #20]
 8109b30:	1c93      	adds	r3, r2, #2
 8109b32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8109b36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8109b3a:	32fe      	adds	r2, #254	; 0xfe
 8109b3c:	18d1      	adds	r1, r2, r3
 8109b3e:	461f      	mov	r7, r3
 8109b40:	f813 0b01 	ldrb.w	r0, [r3], #1
 8109b44:	9100      	str	r1, [sp, #0]
 8109b46:	2830      	cmp	r0, #48	; 0x30
 8109b48:	d0f8      	beq.n	8109b3c <__gethex+0x3c>
 8109b4a:	f7ff ffc3 	bl	8109ad4 <__hexdig_fun>
 8109b4e:	4604      	mov	r4, r0
 8109b50:	2800      	cmp	r0, #0
 8109b52:	d13a      	bne.n	8109bca <__gethex+0xca>
 8109b54:	9901      	ldr	r1, [sp, #4]
 8109b56:	4652      	mov	r2, sl
 8109b58:	4638      	mov	r0, r7
 8109b5a:	f001 fb21 	bl	810b1a0 <strncmp>
 8109b5e:	4605      	mov	r5, r0
 8109b60:	2800      	cmp	r0, #0
 8109b62:	d168      	bne.n	8109c36 <__gethex+0x136>
 8109b64:	f817 000a 	ldrb.w	r0, [r7, sl]
 8109b68:	eb07 060a 	add.w	r6, r7, sl
 8109b6c:	f7ff ffb2 	bl	8109ad4 <__hexdig_fun>
 8109b70:	2800      	cmp	r0, #0
 8109b72:	d062      	beq.n	8109c3a <__gethex+0x13a>
 8109b74:	4633      	mov	r3, r6
 8109b76:	7818      	ldrb	r0, [r3, #0]
 8109b78:	2830      	cmp	r0, #48	; 0x30
 8109b7a:	461f      	mov	r7, r3
 8109b7c:	f103 0301 	add.w	r3, r3, #1
 8109b80:	d0f9      	beq.n	8109b76 <__gethex+0x76>
 8109b82:	f7ff ffa7 	bl	8109ad4 <__hexdig_fun>
 8109b86:	2301      	movs	r3, #1
 8109b88:	fab0 f480 	clz	r4, r0
 8109b8c:	0964      	lsrs	r4, r4, #5
 8109b8e:	4635      	mov	r5, r6
 8109b90:	9300      	str	r3, [sp, #0]
 8109b92:	463a      	mov	r2, r7
 8109b94:	4616      	mov	r6, r2
 8109b96:	3201      	adds	r2, #1
 8109b98:	7830      	ldrb	r0, [r6, #0]
 8109b9a:	f7ff ff9b 	bl	8109ad4 <__hexdig_fun>
 8109b9e:	2800      	cmp	r0, #0
 8109ba0:	d1f8      	bne.n	8109b94 <__gethex+0x94>
 8109ba2:	9901      	ldr	r1, [sp, #4]
 8109ba4:	4652      	mov	r2, sl
 8109ba6:	4630      	mov	r0, r6
 8109ba8:	f001 fafa 	bl	810b1a0 <strncmp>
 8109bac:	b980      	cbnz	r0, 8109bd0 <__gethex+0xd0>
 8109bae:	b94d      	cbnz	r5, 8109bc4 <__gethex+0xc4>
 8109bb0:	eb06 050a 	add.w	r5, r6, sl
 8109bb4:	462a      	mov	r2, r5
 8109bb6:	4616      	mov	r6, r2
 8109bb8:	3201      	adds	r2, #1
 8109bba:	7830      	ldrb	r0, [r6, #0]
 8109bbc:	f7ff ff8a 	bl	8109ad4 <__hexdig_fun>
 8109bc0:	2800      	cmp	r0, #0
 8109bc2:	d1f8      	bne.n	8109bb6 <__gethex+0xb6>
 8109bc4:	1bad      	subs	r5, r5, r6
 8109bc6:	00ad      	lsls	r5, r5, #2
 8109bc8:	e004      	b.n	8109bd4 <__gethex+0xd4>
 8109bca:	2400      	movs	r4, #0
 8109bcc:	4625      	mov	r5, r4
 8109bce:	e7e0      	b.n	8109b92 <__gethex+0x92>
 8109bd0:	2d00      	cmp	r5, #0
 8109bd2:	d1f7      	bne.n	8109bc4 <__gethex+0xc4>
 8109bd4:	7833      	ldrb	r3, [r6, #0]
 8109bd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8109bda:	2b50      	cmp	r3, #80	; 0x50
 8109bdc:	d13b      	bne.n	8109c56 <__gethex+0x156>
 8109bde:	7873      	ldrb	r3, [r6, #1]
 8109be0:	2b2b      	cmp	r3, #43	; 0x2b
 8109be2:	d02c      	beq.n	8109c3e <__gethex+0x13e>
 8109be4:	2b2d      	cmp	r3, #45	; 0x2d
 8109be6:	d02e      	beq.n	8109c46 <__gethex+0x146>
 8109be8:	1c71      	adds	r1, r6, #1
 8109bea:	f04f 0900 	mov.w	r9, #0
 8109bee:	7808      	ldrb	r0, [r1, #0]
 8109bf0:	f7ff ff70 	bl	8109ad4 <__hexdig_fun>
 8109bf4:	1e43      	subs	r3, r0, #1
 8109bf6:	b2db      	uxtb	r3, r3
 8109bf8:	2b18      	cmp	r3, #24
 8109bfa:	d82c      	bhi.n	8109c56 <__gethex+0x156>
 8109bfc:	f1a0 0210 	sub.w	r2, r0, #16
 8109c00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8109c04:	f7ff ff66 	bl	8109ad4 <__hexdig_fun>
 8109c08:	1e43      	subs	r3, r0, #1
 8109c0a:	b2db      	uxtb	r3, r3
 8109c0c:	2b18      	cmp	r3, #24
 8109c0e:	d91d      	bls.n	8109c4c <__gethex+0x14c>
 8109c10:	f1b9 0f00 	cmp.w	r9, #0
 8109c14:	d000      	beq.n	8109c18 <__gethex+0x118>
 8109c16:	4252      	negs	r2, r2
 8109c18:	4415      	add	r5, r2
 8109c1a:	f8cb 1000 	str.w	r1, [fp]
 8109c1e:	b1e4      	cbz	r4, 8109c5a <__gethex+0x15a>
 8109c20:	9b00      	ldr	r3, [sp, #0]
 8109c22:	2b00      	cmp	r3, #0
 8109c24:	bf14      	ite	ne
 8109c26:	2700      	movne	r7, #0
 8109c28:	2706      	moveq	r7, #6
 8109c2a:	4638      	mov	r0, r7
 8109c2c:	b009      	add	sp, #36	; 0x24
 8109c2e:	ecbd 8b02 	vpop	{d8}
 8109c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109c36:	463e      	mov	r6, r7
 8109c38:	4625      	mov	r5, r4
 8109c3a:	2401      	movs	r4, #1
 8109c3c:	e7ca      	b.n	8109bd4 <__gethex+0xd4>
 8109c3e:	f04f 0900 	mov.w	r9, #0
 8109c42:	1cb1      	adds	r1, r6, #2
 8109c44:	e7d3      	b.n	8109bee <__gethex+0xee>
 8109c46:	f04f 0901 	mov.w	r9, #1
 8109c4a:	e7fa      	b.n	8109c42 <__gethex+0x142>
 8109c4c:	230a      	movs	r3, #10
 8109c4e:	fb03 0202 	mla	r2, r3, r2, r0
 8109c52:	3a10      	subs	r2, #16
 8109c54:	e7d4      	b.n	8109c00 <__gethex+0x100>
 8109c56:	4631      	mov	r1, r6
 8109c58:	e7df      	b.n	8109c1a <__gethex+0x11a>
 8109c5a:	1bf3      	subs	r3, r6, r7
 8109c5c:	3b01      	subs	r3, #1
 8109c5e:	4621      	mov	r1, r4
 8109c60:	2b07      	cmp	r3, #7
 8109c62:	dc0b      	bgt.n	8109c7c <__gethex+0x17c>
 8109c64:	ee18 0a10 	vmov	r0, s16
 8109c68:	f000 fb00 	bl	810a26c <_Balloc>
 8109c6c:	4604      	mov	r4, r0
 8109c6e:	b940      	cbnz	r0, 8109c82 <__gethex+0x182>
 8109c70:	4b65      	ldr	r3, [pc, #404]	; (8109e08 <__gethex+0x308>)
 8109c72:	4602      	mov	r2, r0
 8109c74:	21de      	movs	r1, #222	; 0xde
 8109c76:	4865      	ldr	r0, [pc, #404]	; (8109e0c <__gethex+0x30c>)
 8109c78:	f001 fab2 	bl	810b1e0 <__assert_func>
 8109c7c:	3101      	adds	r1, #1
 8109c7e:	105b      	asrs	r3, r3, #1
 8109c80:	e7ee      	b.n	8109c60 <__gethex+0x160>
 8109c82:	f100 0914 	add.w	r9, r0, #20
 8109c86:	f04f 0b00 	mov.w	fp, #0
 8109c8a:	f1ca 0301 	rsb	r3, sl, #1
 8109c8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8109c92:	f8cd b000 	str.w	fp, [sp]
 8109c96:	9306      	str	r3, [sp, #24]
 8109c98:	42b7      	cmp	r7, r6
 8109c9a:	d340      	bcc.n	8109d1e <__gethex+0x21e>
 8109c9c:	9802      	ldr	r0, [sp, #8]
 8109c9e:	9b00      	ldr	r3, [sp, #0]
 8109ca0:	f840 3b04 	str.w	r3, [r0], #4
 8109ca4:	eba0 0009 	sub.w	r0, r0, r9
 8109ca8:	1080      	asrs	r0, r0, #2
 8109caa:	0146      	lsls	r6, r0, #5
 8109cac:	6120      	str	r0, [r4, #16]
 8109cae:	4618      	mov	r0, r3
 8109cb0:	f000 fbd2 	bl	810a458 <__hi0bits>
 8109cb4:	1a30      	subs	r0, r6, r0
 8109cb6:	f8d8 6000 	ldr.w	r6, [r8]
 8109cba:	42b0      	cmp	r0, r6
 8109cbc:	dd63      	ble.n	8109d86 <__gethex+0x286>
 8109cbe:	1b87      	subs	r7, r0, r6
 8109cc0:	4639      	mov	r1, r7
 8109cc2:	4620      	mov	r0, r4
 8109cc4:	f000 ff6c 	bl	810aba0 <__any_on>
 8109cc8:	4682      	mov	sl, r0
 8109cca:	b1a8      	cbz	r0, 8109cf8 <__gethex+0x1f8>
 8109ccc:	1e7b      	subs	r3, r7, #1
 8109cce:	1159      	asrs	r1, r3, #5
 8109cd0:	f003 021f 	and.w	r2, r3, #31
 8109cd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8109cd8:	f04f 0a01 	mov.w	sl, #1
 8109cdc:	fa0a f202 	lsl.w	r2, sl, r2
 8109ce0:	420a      	tst	r2, r1
 8109ce2:	d009      	beq.n	8109cf8 <__gethex+0x1f8>
 8109ce4:	4553      	cmp	r3, sl
 8109ce6:	dd05      	ble.n	8109cf4 <__gethex+0x1f4>
 8109ce8:	1eb9      	subs	r1, r7, #2
 8109cea:	4620      	mov	r0, r4
 8109cec:	f000 ff58 	bl	810aba0 <__any_on>
 8109cf0:	2800      	cmp	r0, #0
 8109cf2:	d145      	bne.n	8109d80 <__gethex+0x280>
 8109cf4:	f04f 0a02 	mov.w	sl, #2
 8109cf8:	4639      	mov	r1, r7
 8109cfa:	4620      	mov	r0, r4
 8109cfc:	f7ff fe98 	bl	8109a30 <rshift>
 8109d00:	443d      	add	r5, r7
 8109d02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8109d06:	42ab      	cmp	r3, r5
 8109d08:	da4c      	bge.n	8109da4 <__gethex+0x2a4>
 8109d0a:	ee18 0a10 	vmov	r0, s16
 8109d0e:	4621      	mov	r1, r4
 8109d10:	f000 faec 	bl	810a2ec <_Bfree>
 8109d14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8109d16:	2300      	movs	r3, #0
 8109d18:	6013      	str	r3, [r2, #0]
 8109d1a:	27a3      	movs	r7, #163	; 0xa3
 8109d1c:	e785      	b.n	8109c2a <__gethex+0x12a>
 8109d1e:	1e73      	subs	r3, r6, #1
 8109d20:	9a05      	ldr	r2, [sp, #20]
 8109d22:	9303      	str	r3, [sp, #12]
 8109d24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8109d28:	4293      	cmp	r3, r2
 8109d2a:	d019      	beq.n	8109d60 <__gethex+0x260>
 8109d2c:	f1bb 0f20 	cmp.w	fp, #32
 8109d30:	d107      	bne.n	8109d42 <__gethex+0x242>
 8109d32:	9b02      	ldr	r3, [sp, #8]
 8109d34:	9a00      	ldr	r2, [sp, #0]
 8109d36:	f843 2b04 	str.w	r2, [r3], #4
 8109d3a:	9302      	str	r3, [sp, #8]
 8109d3c:	2300      	movs	r3, #0
 8109d3e:	9300      	str	r3, [sp, #0]
 8109d40:	469b      	mov	fp, r3
 8109d42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8109d46:	f7ff fec5 	bl	8109ad4 <__hexdig_fun>
 8109d4a:	9b00      	ldr	r3, [sp, #0]
 8109d4c:	f000 000f 	and.w	r0, r0, #15
 8109d50:	fa00 f00b 	lsl.w	r0, r0, fp
 8109d54:	4303      	orrs	r3, r0
 8109d56:	9300      	str	r3, [sp, #0]
 8109d58:	f10b 0b04 	add.w	fp, fp, #4
 8109d5c:	9b03      	ldr	r3, [sp, #12]
 8109d5e:	e00d      	b.n	8109d7c <__gethex+0x27c>
 8109d60:	9b03      	ldr	r3, [sp, #12]
 8109d62:	9a06      	ldr	r2, [sp, #24]
 8109d64:	4413      	add	r3, r2
 8109d66:	42bb      	cmp	r3, r7
 8109d68:	d3e0      	bcc.n	8109d2c <__gethex+0x22c>
 8109d6a:	4618      	mov	r0, r3
 8109d6c:	9901      	ldr	r1, [sp, #4]
 8109d6e:	9307      	str	r3, [sp, #28]
 8109d70:	4652      	mov	r2, sl
 8109d72:	f001 fa15 	bl	810b1a0 <strncmp>
 8109d76:	9b07      	ldr	r3, [sp, #28]
 8109d78:	2800      	cmp	r0, #0
 8109d7a:	d1d7      	bne.n	8109d2c <__gethex+0x22c>
 8109d7c:	461e      	mov	r6, r3
 8109d7e:	e78b      	b.n	8109c98 <__gethex+0x198>
 8109d80:	f04f 0a03 	mov.w	sl, #3
 8109d84:	e7b8      	b.n	8109cf8 <__gethex+0x1f8>
 8109d86:	da0a      	bge.n	8109d9e <__gethex+0x29e>
 8109d88:	1a37      	subs	r7, r6, r0
 8109d8a:	4621      	mov	r1, r4
 8109d8c:	ee18 0a10 	vmov	r0, s16
 8109d90:	463a      	mov	r2, r7
 8109d92:	f000 fcc7 	bl	810a724 <__lshift>
 8109d96:	1bed      	subs	r5, r5, r7
 8109d98:	4604      	mov	r4, r0
 8109d9a:	f100 0914 	add.w	r9, r0, #20
 8109d9e:	f04f 0a00 	mov.w	sl, #0
 8109da2:	e7ae      	b.n	8109d02 <__gethex+0x202>
 8109da4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8109da8:	42a8      	cmp	r0, r5
 8109daa:	dd72      	ble.n	8109e92 <__gethex+0x392>
 8109dac:	1b45      	subs	r5, r0, r5
 8109dae:	42ae      	cmp	r6, r5
 8109db0:	dc36      	bgt.n	8109e20 <__gethex+0x320>
 8109db2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8109db6:	2b02      	cmp	r3, #2
 8109db8:	d02a      	beq.n	8109e10 <__gethex+0x310>
 8109dba:	2b03      	cmp	r3, #3
 8109dbc:	d02c      	beq.n	8109e18 <__gethex+0x318>
 8109dbe:	2b01      	cmp	r3, #1
 8109dc0:	d115      	bne.n	8109dee <__gethex+0x2ee>
 8109dc2:	42ae      	cmp	r6, r5
 8109dc4:	d113      	bne.n	8109dee <__gethex+0x2ee>
 8109dc6:	2e01      	cmp	r6, #1
 8109dc8:	d10b      	bne.n	8109de2 <__gethex+0x2e2>
 8109dca:	9a04      	ldr	r2, [sp, #16]
 8109dcc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8109dd0:	6013      	str	r3, [r2, #0]
 8109dd2:	2301      	movs	r3, #1
 8109dd4:	6123      	str	r3, [r4, #16]
 8109dd6:	f8c9 3000 	str.w	r3, [r9]
 8109dda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109ddc:	2762      	movs	r7, #98	; 0x62
 8109dde:	601c      	str	r4, [r3, #0]
 8109de0:	e723      	b.n	8109c2a <__gethex+0x12a>
 8109de2:	1e71      	subs	r1, r6, #1
 8109de4:	4620      	mov	r0, r4
 8109de6:	f000 fedb 	bl	810aba0 <__any_on>
 8109dea:	2800      	cmp	r0, #0
 8109dec:	d1ed      	bne.n	8109dca <__gethex+0x2ca>
 8109dee:	ee18 0a10 	vmov	r0, s16
 8109df2:	4621      	mov	r1, r4
 8109df4:	f000 fa7a 	bl	810a2ec <_Bfree>
 8109df8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8109dfa:	2300      	movs	r3, #0
 8109dfc:	6013      	str	r3, [r2, #0]
 8109dfe:	2750      	movs	r7, #80	; 0x50
 8109e00:	e713      	b.n	8109c2a <__gethex+0x12a>
 8109e02:	bf00      	nop
 8109e04:	0810b730 	.word	0x0810b730
 8109e08:	0810b6b4 	.word	0x0810b6b4
 8109e0c:	0810b6c5 	.word	0x0810b6c5
 8109e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109e12:	2b00      	cmp	r3, #0
 8109e14:	d1eb      	bne.n	8109dee <__gethex+0x2ee>
 8109e16:	e7d8      	b.n	8109dca <__gethex+0x2ca>
 8109e18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109e1a:	2b00      	cmp	r3, #0
 8109e1c:	d1d5      	bne.n	8109dca <__gethex+0x2ca>
 8109e1e:	e7e6      	b.n	8109dee <__gethex+0x2ee>
 8109e20:	1e6f      	subs	r7, r5, #1
 8109e22:	f1ba 0f00 	cmp.w	sl, #0
 8109e26:	d131      	bne.n	8109e8c <__gethex+0x38c>
 8109e28:	b127      	cbz	r7, 8109e34 <__gethex+0x334>
 8109e2a:	4639      	mov	r1, r7
 8109e2c:	4620      	mov	r0, r4
 8109e2e:	f000 feb7 	bl	810aba0 <__any_on>
 8109e32:	4682      	mov	sl, r0
 8109e34:	117b      	asrs	r3, r7, #5
 8109e36:	2101      	movs	r1, #1
 8109e38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8109e3c:	f007 071f 	and.w	r7, r7, #31
 8109e40:	fa01 f707 	lsl.w	r7, r1, r7
 8109e44:	421f      	tst	r7, r3
 8109e46:	4629      	mov	r1, r5
 8109e48:	4620      	mov	r0, r4
 8109e4a:	bf18      	it	ne
 8109e4c:	f04a 0a02 	orrne.w	sl, sl, #2
 8109e50:	1b76      	subs	r6, r6, r5
 8109e52:	f7ff fded 	bl	8109a30 <rshift>
 8109e56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8109e5a:	2702      	movs	r7, #2
 8109e5c:	f1ba 0f00 	cmp.w	sl, #0
 8109e60:	d048      	beq.n	8109ef4 <__gethex+0x3f4>
 8109e62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8109e66:	2b02      	cmp	r3, #2
 8109e68:	d015      	beq.n	8109e96 <__gethex+0x396>
 8109e6a:	2b03      	cmp	r3, #3
 8109e6c:	d017      	beq.n	8109e9e <__gethex+0x39e>
 8109e6e:	2b01      	cmp	r3, #1
 8109e70:	d109      	bne.n	8109e86 <__gethex+0x386>
 8109e72:	f01a 0f02 	tst.w	sl, #2
 8109e76:	d006      	beq.n	8109e86 <__gethex+0x386>
 8109e78:	f8d9 0000 	ldr.w	r0, [r9]
 8109e7c:	ea4a 0a00 	orr.w	sl, sl, r0
 8109e80:	f01a 0f01 	tst.w	sl, #1
 8109e84:	d10e      	bne.n	8109ea4 <__gethex+0x3a4>
 8109e86:	f047 0710 	orr.w	r7, r7, #16
 8109e8a:	e033      	b.n	8109ef4 <__gethex+0x3f4>
 8109e8c:	f04f 0a01 	mov.w	sl, #1
 8109e90:	e7d0      	b.n	8109e34 <__gethex+0x334>
 8109e92:	2701      	movs	r7, #1
 8109e94:	e7e2      	b.n	8109e5c <__gethex+0x35c>
 8109e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109e98:	f1c3 0301 	rsb	r3, r3, #1
 8109e9c:	9315      	str	r3, [sp, #84]	; 0x54
 8109e9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109ea0:	2b00      	cmp	r3, #0
 8109ea2:	d0f0      	beq.n	8109e86 <__gethex+0x386>
 8109ea4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8109ea8:	f104 0314 	add.w	r3, r4, #20
 8109eac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8109eb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8109eb4:	f04f 0c00 	mov.w	ip, #0
 8109eb8:	4618      	mov	r0, r3
 8109eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8109ebe:	f1b2 3fff 	cmp.w	r2, #4294967295
 8109ec2:	d01c      	beq.n	8109efe <__gethex+0x3fe>
 8109ec4:	3201      	adds	r2, #1
 8109ec6:	6002      	str	r2, [r0, #0]
 8109ec8:	2f02      	cmp	r7, #2
 8109eca:	f104 0314 	add.w	r3, r4, #20
 8109ece:	d13f      	bne.n	8109f50 <__gethex+0x450>
 8109ed0:	f8d8 2000 	ldr.w	r2, [r8]
 8109ed4:	3a01      	subs	r2, #1
 8109ed6:	42b2      	cmp	r2, r6
 8109ed8:	d10a      	bne.n	8109ef0 <__gethex+0x3f0>
 8109eda:	1171      	asrs	r1, r6, #5
 8109edc:	2201      	movs	r2, #1
 8109ede:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8109ee2:	f006 061f 	and.w	r6, r6, #31
 8109ee6:	fa02 f606 	lsl.w	r6, r2, r6
 8109eea:	421e      	tst	r6, r3
 8109eec:	bf18      	it	ne
 8109eee:	4617      	movne	r7, r2
 8109ef0:	f047 0720 	orr.w	r7, r7, #32
 8109ef4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109ef6:	601c      	str	r4, [r3, #0]
 8109ef8:	9b04      	ldr	r3, [sp, #16]
 8109efa:	601d      	str	r5, [r3, #0]
 8109efc:	e695      	b.n	8109c2a <__gethex+0x12a>
 8109efe:	4299      	cmp	r1, r3
 8109f00:	f843 cc04 	str.w	ip, [r3, #-4]
 8109f04:	d8d8      	bhi.n	8109eb8 <__gethex+0x3b8>
 8109f06:	68a3      	ldr	r3, [r4, #8]
 8109f08:	459b      	cmp	fp, r3
 8109f0a:	db19      	blt.n	8109f40 <__gethex+0x440>
 8109f0c:	6861      	ldr	r1, [r4, #4]
 8109f0e:	ee18 0a10 	vmov	r0, s16
 8109f12:	3101      	adds	r1, #1
 8109f14:	f000 f9aa 	bl	810a26c <_Balloc>
 8109f18:	4681      	mov	r9, r0
 8109f1a:	b918      	cbnz	r0, 8109f24 <__gethex+0x424>
 8109f1c:	4b1a      	ldr	r3, [pc, #104]	; (8109f88 <__gethex+0x488>)
 8109f1e:	4602      	mov	r2, r0
 8109f20:	2184      	movs	r1, #132	; 0x84
 8109f22:	e6a8      	b.n	8109c76 <__gethex+0x176>
 8109f24:	6922      	ldr	r2, [r4, #16]
 8109f26:	3202      	adds	r2, #2
 8109f28:	f104 010c 	add.w	r1, r4, #12
 8109f2c:	0092      	lsls	r2, r2, #2
 8109f2e:	300c      	adds	r0, #12
 8109f30:	f000 f982 	bl	810a238 <memcpy>
 8109f34:	4621      	mov	r1, r4
 8109f36:	ee18 0a10 	vmov	r0, s16
 8109f3a:	f000 f9d7 	bl	810a2ec <_Bfree>
 8109f3e:	464c      	mov	r4, r9
 8109f40:	6923      	ldr	r3, [r4, #16]
 8109f42:	1c5a      	adds	r2, r3, #1
 8109f44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8109f48:	6122      	str	r2, [r4, #16]
 8109f4a:	2201      	movs	r2, #1
 8109f4c:	615a      	str	r2, [r3, #20]
 8109f4e:	e7bb      	b.n	8109ec8 <__gethex+0x3c8>
 8109f50:	6922      	ldr	r2, [r4, #16]
 8109f52:	455a      	cmp	r2, fp
 8109f54:	dd0b      	ble.n	8109f6e <__gethex+0x46e>
 8109f56:	2101      	movs	r1, #1
 8109f58:	4620      	mov	r0, r4
 8109f5a:	f7ff fd69 	bl	8109a30 <rshift>
 8109f5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8109f62:	3501      	adds	r5, #1
 8109f64:	42ab      	cmp	r3, r5
 8109f66:	f6ff aed0 	blt.w	8109d0a <__gethex+0x20a>
 8109f6a:	2701      	movs	r7, #1
 8109f6c:	e7c0      	b.n	8109ef0 <__gethex+0x3f0>
 8109f6e:	f016 061f 	ands.w	r6, r6, #31
 8109f72:	d0fa      	beq.n	8109f6a <__gethex+0x46a>
 8109f74:	449a      	add	sl, r3
 8109f76:	f1c6 0620 	rsb	r6, r6, #32
 8109f7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8109f7e:	f000 fa6b 	bl	810a458 <__hi0bits>
 8109f82:	42b0      	cmp	r0, r6
 8109f84:	dbe7      	blt.n	8109f56 <__gethex+0x456>
 8109f86:	e7f0      	b.n	8109f6a <__gethex+0x46a>
 8109f88:	0810b6b4 	.word	0x0810b6b4

08109f8c <L_shift>:
 8109f8c:	f1c2 0208 	rsb	r2, r2, #8
 8109f90:	0092      	lsls	r2, r2, #2
 8109f92:	b570      	push	{r4, r5, r6, lr}
 8109f94:	f1c2 0620 	rsb	r6, r2, #32
 8109f98:	6843      	ldr	r3, [r0, #4]
 8109f9a:	6804      	ldr	r4, [r0, #0]
 8109f9c:	fa03 f506 	lsl.w	r5, r3, r6
 8109fa0:	432c      	orrs	r4, r5
 8109fa2:	40d3      	lsrs	r3, r2
 8109fa4:	6004      	str	r4, [r0, #0]
 8109fa6:	f840 3f04 	str.w	r3, [r0, #4]!
 8109faa:	4288      	cmp	r0, r1
 8109fac:	d3f4      	bcc.n	8109f98 <L_shift+0xc>
 8109fae:	bd70      	pop	{r4, r5, r6, pc}

08109fb0 <__match>:
 8109fb0:	b530      	push	{r4, r5, lr}
 8109fb2:	6803      	ldr	r3, [r0, #0]
 8109fb4:	3301      	adds	r3, #1
 8109fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8109fba:	b914      	cbnz	r4, 8109fc2 <__match+0x12>
 8109fbc:	6003      	str	r3, [r0, #0]
 8109fbe:	2001      	movs	r0, #1
 8109fc0:	bd30      	pop	{r4, r5, pc}
 8109fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8109fc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8109fca:	2d19      	cmp	r5, #25
 8109fcc:	bf98      	it	ls
 8109fce:	3220      	addls	r2, #32
 8109fd0:	42a2      	cmp	r2, r4
 8109fd2:	d0f0      	beq.n	8109fb6 <__match+0x6>
 8109fd4:	2000      	movs	r0, #0
 8109fd6:	e7f3      	b.n	8109fc0 <__match+0x10>

08109fd8 <__hexnan>:
 8109fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109fdc:	680b      	ldr	r3, [r1, #0]
 8109fde:	6801      	ldr	r1, [r0, #0]
 8109fe0:	115e      	asrs	r6, r3, #5
 8109fe2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8109fe6:	f013 031f 	ands.w	r3, r3, #31
 8109fea:	b087      	sub	sp, #28
 8109fec:	bf18      	it	ne
 8109fee:	3604      	addne	r6, #4
 8109ff0:	2500      	movs	r5, #0
 8109ff2:	1f37      	subs	r7, r6, #4
 8109ff4:	4682      	mov	sl, r0
 8109ff6:	4690      	mov	r8, r2
 8109ff8:	9301      	str	r3, [sp, #4]
 8109ffa:	f846 5c04 	str.w	r5, [r6, #-4]
 8109ffe:	46b9      	mov	r9, r7
 810a000:	463c      	mov	r4, r7
 810a002:	9502      	str	r5, [sp, #8]
 810a004:	46ab      	mov	fp, r5
 810a006:	784a      	ldrb	r2, [r1, #1]
 810a008:	1c4b      	adds	r3, r1, #1
 810a00a:	9303      	str	r3, [sp, #12]
 810a00c:	b342      	cbz	r2, 810a060 <__hexnan+0x88>
 810a00e:	4610      	mov	r0, r2
 810a010:	9105      	str	r1, [sp, #20]
 810a012:	9204      	str	r2, [sp, #16]
 810a014:	f7ff fd5e 	bl	8109ad4 <__hexdig_fun>
 810a018:	2800      	cmp	r0, #0
 810a01a:	d14f      	bne.n	810a0bc <__hexnan+0xe4>
 810a01c:	9a04      	ldr	r2, [sp, #16]
 810a01e:	9905      	ldr	r1, [sp, #20]
 810a020:	2a20      	cmp	r2, #32
 810a022:	d818      	bhi.n	810a056 <__hexnan+0x7e>
 810a024:	9b02      	ldr	r3, [sp, #8]
 810a026:	459b      	cmp	fp, r3
 810a028:	dd13      	ble.n	810a052 <__hexnan+0x7a>
 810a02a:	454c      	cmp	r4, r9
 810a02c:	d206      	bcs.n	810a03c <__hexnan+0x64>
 810a02e:	2d07      	cmp	r5, #7
 810a030:	dc04      	bgt.n	810a03c <__hexnan+0x64>
 810a032:	462a      	mov	r2, r5
 810a034:	4649      	mov	r1, r9
 810a036:	4620      	mov	r0, r4
 810a038:	f7ff ffa8 	bl	8109f8c <L_shift>
 810a03c:	4544      	cmp	r4, r8
 810a03e:	d950      	bls.n	810a0e2 <__hexnan+0x10a>
 810a040:	2300      	movs	r3, #0
 810a042:	f1a4 0904 	sub.w	r9, r4, #4
 810a046:	f844 3c04 	str.w	r3, [r4, #-4]
 810a04a:	f8cd b008 	str.w	fp, [sp, #8]
 810a04e:	464c      	mov	r4, r9
 810a050:	461d      	mov	r5, r3
 810a052:	9903      	ldr	r1, [sp, #12]
 810a054:	e7d7      	b.n	810a006 <__hexnan+0x2e>
 810a056:	2a29      	cmp	r2, #41	; 0x29
 810a058:	d156      	bne.n	810a108 <__hexnan+0x130>
 810a05a:	3102      	adds	r1, #2
 810a05c:	f8ca 1000 	str.w	r1, [sl]
 810a060:	f1bb 0f00 	cmp.w	fp, #0
 810a064:	d050      	beq.n	810a108 <__hexnan+0x130>
 810a066:	454c      	cmp	r4, r9
 810a068:	d206      	bcs.n	810a078 <__hexnan+0xa0>
 810a06a:	2d07      	cmp	r5, #7
 810a06c:	dc04      	bgt.n	810a078 <__hexnan+0xa0>
 810a06e:	462a      	mov	r2, r5
 810a070:	4649      	mov	r1, r9
 810a072:	4620      	mov	r0, r4
 810a074:	f7ff ff8a 	bl	8109f8c <L_shift>
 810a078:	4544      	cmp	r4, r8
 810a07a:	d934      	bls.n	810a0e6 <__hexnan+0x10e>
 810a07c:	f1a8 0204 	sub.w	r2, r8, #4
 810a080:	4623      	mov	r3, r4
 810a082:	f853 1b04 	ldr.w	r1, [r3], #4
 810a086:	f842 1f04 	str.w	r1, [r2, #4]!
 810a08a:	429f      	cmp	r7, r3
 810a08c:	d2f9      	bcs.n	810a082 <__hexnan+0xaa>
 810a08e:	1b3b      	subs	r3, r7, r4
 810a090:	f023 0303 	bic.w	r3, r3, #3
 810a094:	3304      	adds	r3, #4
 810a096:	3401      	adds	r4, #1
 810a098:	3e03      	subs	r6, #3
 810a09a:	42b4      	cmp	r4, r6
 810a09c:	bf88      	it	hi
 810a09e:	2304      	movhi	r3, #4
 810a0a0:	4443      	add	r3, r8
 810a0a2:	2200      	movs	r2, #0
 810a0a4:	f843 2b04 	str.w	r2, [r3], #4
 810a0a8:	429f      	cmp	r7, r3
 810a0aa:	d2fb      	bcs.n	810a0a4 <__hexnan+0xcc>
 810a0ac:	683b      	ldr	r3, [r7, #0]
 810a0ae:	b91b      	cbnz	r3, 810a0b8 <__hexnan+0xe0>
 810a0b0:	4547      	cmp	r7, r8
 810a0b2:	d127      	bne.n	810a104 <__hexnan+0x12c>
 810a0b4:	2301      	movs	r3, #1
 810a0b6:	603b      	str	r3, [r7, #0]
 810a0b8:	2005      	movs	r0, #5
 810a0ba:	e026      	b.n	810a10a <__hexnan+0x132>
 810a0bc:	3501      	adds	r5, #1
 810a0be:	2d08      	cmp	r5, #8
 810a0c0:	f10b 0b01 	add.w	fp, fp, #1
 810a0c4:	dd06      	ble.n	810a0d4 <__hexnan+0xfc>
 810a0c6:	4544      	cmp	r4, r8
 810a0c8:	d9c3      	bls.n	810a052 <__hexnan+0x7a>
 810a0ca:	2300      	movs	r3, #0
 810a0cc:	f844 3c04 	str.w	r3, [r4, #-4]
 810a0d0:	2501      	movs	r5, #1
 810a0d2:	3c04      	subs	r4, #4
 810a0d4:	6822      	ldr	r2, [r4, #0]
 810a0d6:	f000 000f 	and.w	r0, r0, #15
 810a0da:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810a0de:	6022      	str	r2, [r4, #0]
 810a0e0:	e7b7      	b.n	810a052 <__hexnan+0x7a>
 810a0e2:	2508      	movs	r5, #8
 810a0e4:	e7b5      	b.n	810a052 <__hexnan+0x7a>
 810a0e6:	9b01      	ldr	r3, [sp, #4]
 810a0e8:	2b00      	cmp	r3, #0
 810a0ea:	d0df      	beq.n	810a0ac <__hexnan+0xd4>
 810a0ec:	f04f 32ff 	mov.w	r2, #4294967295
 810a0f0:	f1c3 0320 	rsb	r3, r3, #32
 810a0f4:	fa22 f303 	lsr.w	r3, r2, r3
 810a0f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810a0fc:	401a      	ands	r2, r3
 810a0fe:	f846 2c04 	str.w	r2, [r6, #-4]
 810a102:	e7d3      	b.n	810a0ac <__hexnan+0xd4>
 810a104:	3f04      	subs	r7, #4
 810a106:	e7d1      	b.n	810a0ac <__hexnan+0xd4>
 810a108:	2004      	movs	r0, #4
 810a10a:	b007      	add	sp, #28
 810a10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810a110 <_localeconv_r>:
 810a110:	4800      	ldr	r0, [pc, #0]	; (810a114 <_localeconv_r+0x4>)
 810a112:	4770      	bx	lr
 810a114:	10000168 	.word	0x10000168

0810a118 <_lseek_r>:
 810a118:	b538      	push	{r3, r4, r5, lr}
 810a11a:	4d07      	ldr	r5, [pc, #28]	; (810a138 <_lseek_r+0x20>)
 810a11c:	4604      	mov	r4, r0
 810a11e:	4608      	mov	r0, r1
 810a120:	4611      	mov	r1, r2
 810a122:	2200      	movs	r2, #0
 810a124:	602a      	str	r2, [r5, #0]
 810a126:	461a      	mov	r2, r3
 810a128:	f7f7 feec 	bl	8101f04 <_lseek>
 810a12c:	1c43      	adds	r3, r0, #1
 810a12e:	d102      	bne.n	810a136 <_lseek_r+0x1e>
 810a130:	682b      	ldr	r3, [r5, #0]
 810a132:	b103      	cbz	r3, 810a136 <_lseek_r+0x1e>
 810a134:	6023      	str	r3, [r4, #0]
 810a136:	bd38      	pop	{r3, r4, r5, pc}
 810a138:	100003f8 	.word	0x100003f8

0810a13c <__swhatbuf_r>:
 810a13c:	b570      	push	{r4, r5, r6, lr}
 810a13e:	460e      	mov	r6, r1
 810a140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a144:	2900      	cmp	r1, #0
 810a146:	b096      	sub	sp, #88	; 0x58
 810a148:	4614      	mov	r4, r2
 810a14a:	461d      	mov	r5, r3
 810a14c:	da07      	bge.n	810a15e <__swhatbuf_r+0x22>
 810a14e:	2300      	movs	r3, #0
 810a150:	602b      	str	r3, [r5, #0]
 810a152:	89b3      	ldrh	r3, [r6, #12]
 810a154:	061a      	lsls	r2, r3, #24
 810a156:	d410      	bmi.n	810a17a <__swhatbuf_r+0x3e>
 810a158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a15c:	e00e      	b.n	810a17c <__swhatbuf_r+0x40>
 810a15e:	466a      	mov	r2, sp
 810a160:	f001 f86e 	bl	810b240 <_fstat_r>
 810a164:	2800      	cmp	r0, #0
 810a166:	dbf2      	blt.n	810a14e <__swhatbuf_r+0x12>
 810a168:	9a01      	ldr	r2, [sp, #4]
 810a16a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810a16e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810a172:	425a      	negs	r2, r3
 810a174:	415a      	adcs	r2, r3
 810a176:	602a      	str	r2, [r5, #0]
 810a178:	e7ee      	b.n	810a158 <__swhatbuf_r+0x1c>
 810a17a:	2340      	movs	r3, #64	; 0x40
 810a17c:	2000      	movs	r0, #0
 810a17e:	6023      	str	r3, [r4, #0]
 810a180:	b016      	add	sp, #88	; 0x58
 810a182:	bd70      	pop	{r4, r5, r6, pc}

0810a184 <__smakebuf_r>:
 810a184:	898b      	ldrh	r3, [r1, #12]
 810a186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810a188:	079d      	lsls	r5, r3, #30
 810a18a:	4606      	mov	r6, r0
 810a18c:	460c      	mov	r4, r1
 810a18e:	d507      	bpl.n	810a1a0 <__smakebuf_r+0x1c>
 810a190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810a194:	6023      	str	r3, [r4, #0]
 810a196:	6123      	str	r3, [r4, #16]
 810a198:	2301      	movs	r3, #1
 810a19a:	6163      	str	r3, [r4, #20]
 810a19c:	b002      	add	sp, #8
 810a19e:	bd70      	pop	{r4, r5, r6, pc}
 810a1a0:	ab01      	add	r3, sp, #4
 810a1a2:	466a      	mov	r2, sp
 810a1a4:	f7ff ffca 	bl	810a13c <__swhatbuf_r>
 810a1a8:	9900      	ldr	r1, [sp, #0]
 810a1aa:	4605      	mov	r5, r0
 810a1ac:	4630      	mov	r0, r6
 810a1ae:	f7fc fd91 	bl	8106cd4 <_malloc_r>
 810a1b2:	b948      	cbnz	r0, 810a1c8 <__smakebuf_r+0x44>
 810a1b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a1b8:	059a      	lsls	r2, r3, #22
 810a1ba:	d4ef      	bmi.n	810a19c <__smakebuf_r+0x18>
 810a1bc:	f023 0303 	bic.w	r3, r3, #3
 810a1c0:	f043 0302 	orr.w	r3, r3, #2
 810a1c4:	81a3      	strh	r3, [r4, #12]
 810a1c6:	e7e3      	b.n	810a190 <__smakebuf_r+0xc>
 810a1c8:	4b0d      	ldr	r3, [pc, #52]	; (810a200 <__smakebuf_r+0x7c>)
 810a1ca:	62b3      	str	r3, [r6, #40]	; 0x28
 810a1cc:	89a3      	ldrh	r3, [r4, #12]
 810a1ce:	6020      	str	r0, [r4, #0]
 810a1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a1d4:	81a3      	strh	r3, [r4, #12]
 810a1d6:	9b00      	ldr	r3, [sp, #0]
 810a1d8:	6163      	str	r3, [r4, #20]
 810a1da:	9b01      	ldr	r3, [sp, #4]
 810a1dc:	6120      	str	r0, [r4, #16]
 810a1de:	b15b      	cbz	r3, 810a1f8 <__smakebuf_r+0x74>
 810a1e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a1e4:	4630      	mov	r0, r6
 810a1e6:	f001 f83d 	bl	810b264 <_isatty_r>
 810a1ea:	b128      	cbz	r0, 810a1f8 <__smakebuf_r+0x74>
 810a1ec:	89a3      	ldrh	r3, [r4, #12]
 810a1ee:	f023 0303 	bic.w	r3, r3, #3
 810a1f2:	f043 0301 	orr.w	r3, r3, #1
 810a1f6:	81a3      	strh	r3, [r4, #12]
 810a1f8:	89a0      	ldrh	r0, [r4, #12]
 810a1fa:	4305      	orrs	r5, r0
 810a1fc:	81a5      	strh	r5, [r4, #12]
 810a1fe:	e7cd      	b.n	810a19c <__smakebuf_r+0x18>
 810a200:	08106a31 	.word	0x08106a31

0810a204 <malloc>:
 810a204:	4b02      	ldr	r3, [pc, #8]	; (810a210 <malloc+0xc>)
 810a206:	4601      	mov	r1, r0
 810a208:	6818      	ldr	r0, [r3, #0]
 810a20a:	f7fc bd63 	b.w	8106cd4 <_malloc_r>
 810a20e:	bf00      	nop
 810a210:	10000010 	.word	0x10000010

0810a214 <__ascii_mbtowc>:
 810a214:	b082      	sub	sp, #8
 810a216:	b901      	cbnz	r1, 810a21a <__ascii_mbtowc+0x6>
 810a218:	a901      	add	r1, sp, #4
 810a21a:	b142      	cbz	r2, 810a22e <__ascii_mbtowc+0x1a>
 810a21c:	b14b      	cbz	r3, 810a232 <__ascii_mbtowc+0x1e>
 810a21e:	7813      	ldrb	r3, [r2, #0]
 810a220:	600b      	str	r3, [r1, #0]
 810a222:	7812      	ldrb	r2, [r2, #0]
 810a224:	1e10      	subs	r0, r2, #0
 810a226:	bf18      	it	ne
 810a228:	2001      	movne	r0, #1
 810a22a:	b002      	add	sp, #8
 810a22c:	4770      	bx	lr
 810a22e:	4610      	mov	r0, r2
 810a230:	e7fb      	b.n	810a22a <__ascii_mbtowc+0x16>
 810a232:	f06f 0001 	mvn.w	r0, #1
 810a236:	e7f8      	b.n	810a22a <__ascii_mbtowc+0x16>

0810a238 <memcpy>:
 810a238:	440a      	add	r2, r1
 810a23a:	4291      	cmp	r1, r2
 810a23c:	f100 33ff 	add.w	r3, r0, #4294967295
 810a240:	d100      	bne.n	810a244 <memcpy+0xc>
 810a242:	4770      	bx	lr
 810a244:	b510      	push	{r4, lr}
 810a246:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a24a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a24e:	4291      	cmp	r1, r2
 810a250:	d1f9      	bne.n	810a246 <memcpy+0xe>
 810a252:	bd10      	pop	{r4, pc}

0810a254 <__malloc_lock>:
 810a254:	4801      	ldr	r0, [pc, #4]	; (810a25c <__malloc_lock+0x8>)
 810a256:	f7fc bce2 	b.w	8106c1e <__retarget_lock_acquire_recursive>
 810a25a:	bf00      	nop
 810a25c:	100003f0 	.word	0x100003f0

0810a260 <__malloc_unlock>:
 810a260:	4801      	ldr	r0, [pc, #4]	; (810a268 <__malloc_unlock+0x8>)
 810a262:	f7fc bcdd 	b.w	8106c20 <__retarget_lock_release_recursive>
 810a266:	bf00      	nop
 810a268:	100003f0 	.word	0x100003f0

0810a26c <_Balloc>:
 810a26c:	b570      	push	{r4, r5, r6, lr}
 810a26e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810a270:	4604      	mov	r4, r0
 810a272:	460d      	mov	r5, r1
 810a274:	b976      	cbnz	r6, 810a294 <_Balloc+0x28>
 810a276:	2010      	movs	r0, #16
 810a278:	f7ff ffc4 	bl	810a204 <malloc>
 810a27c:	4602      	mov	r2, r0
 810a27e:	6260      	str	r0, [r4, #36]	; 0x24
 810a280:	b920      	cbnz	r0, 810a28c <_Balloc+0x20>
 810a282:	4b18      	ldr	r3, [pc, #96]	; (810a2e4 <_Balloc+0x78>)
 810a284:	4818      	ldr	r0, [pc, #96]	; (810a2e8 <_Balloc+0x7c>)
 810a286:	2166      	movs	r1, #102	; 0x66
 810a288:	f000 ffaa 	bl	810b1e0 <__assert_func>
 810a28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810a290:	6006      	str	r6, [r0, #0]
 810a292:	60c6      	str	r6, [r0, #12]
 810a294:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810a296:	68f3      	ldr	r3, [r6, #12]
 810a298:	b183      	cbz	r3, 810a2bc <_Balloc+0x50>
 810a29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a29c:	68db      	ldr	r3, [r3, #12]
 810a29e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810a2a2:	b9b8      	cbnz	r0, 810a2d4 <_Balloc+0x68>
 810a2a4:	2101      	movs	r1, #1
 810a2a6:	fa01 f605 	lsl.w	r6, r1, r5
 810a2aa:	1d72      	adds	r2, r6, #5
 810a2ac:	0092      	lsls	r2, r2, #2
 810a2ae:	4620      	mov	r0, r4
 810a2b0:	f000 fc97 	bl	810abe2 <_calloc_r>
 810a2b4:	b160      	cbz	r0, 810a2d0 <_Balloc+0x64>
 810a2b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810a2ba:	e00e      	b.n	810a2da <_Balloc+0x6e>
 810a2bc:	2221      	movs	r2, #33	; 0x21
 810a2be:	2104      	movs	r1, #4
 810a2c0:	4620      	mov	r0, r4
 810a2c2:	f000 fc8e 	bl	810abe2 <_calloc_r>
 810a2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a2c8:	60f0      	str	r0, [r6, #12]
 810a2ca:	68db      	ldr	r3, [r3, #12]
 810a2cc:	2b00      	cmp	r3, #0
 810a2ce:	d1e4      	bne.n	810a29a <_Balloc+0x2e>
 810a2d0:	2000      	movs	r0, #0
 810a2d2:	bd70      	pop	{r4, r5, r6, pc}
 810a2d4:	6802      	ldr	r2, [r0, #0]
 810a2d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810a2da:	2300      	movs	r3, #0
 810a2dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810a2e0:	e7f7      	b.n	810a2d2 <_Balloc+0x66>
 810a2e2:	bf00      	nop
 810a2e4:	0810b63e 	.word	0x0810b63e
 810a2e8:	0810b744 	.word	0x0810b744

0810a2ec <_Bfree>:
 810a2ec:	b570      	push	{r4, r5, r6, lr}
 810a2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810a2f0:	4605      	mov	r5, r0
 810a2f2:	460c      	mov	r4, r1
 810a2f4:	b976      	cbnz	r6, 810a314 <_Bfree+0x28>
 810a2f6:	2010      	movs	r0, #16
 810a2f8:	f7ff ff84 	bl	810a204 <malloc>
 810a2fc:	4602      	mov	r2, r0
 810a2fe:	6268      	str	r0, [r5, #36]	; 0x24
 810a300:	b920      	cbnz	r0, 810a30c <_Bfree+0x20>
 810a302:	4b09      	ldr	r3, [pc, #36]	; (810a328 <_Bfree+0x3c>)
 810a304:	4809      	ldr	r0, [pc, #36]	; (810a32c <_Bfree+0x40>)
 810a306:	218a      	movs	r1, #138	; 0x8a
 810a308:	f000 ff6a 	bl	810b1e0 <__assert_func>
 810a30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810a310:	6006      	str	r6, [r0, #0]
 810a312:	60c6      	str	r6, [r0, #12]
 810a314:	b13c      	cbz	r4, 810a326 <_Bfree+0x3a>
 810a316:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810a318:	6862      	ldr	r2, [r4, #4]
 810a31a:	68db      	ldr	r3, [r3, #12]
 810a31c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810a320:	6021      	str	r1, [r4, #0]
 810a322:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810a326:	bd70      	pop	{r4, r5, r6, pc}
 810a328:	0810b63e 	.word	0x0810b63e
 810a32c:	0810b744 	.word	0x0810b744

0810a330 <__multadd>:
 810a330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a334:	690e      	ldr	r6, [r1, #16]
 810a336:	4607      	mov	r7, r0
 810a338:	4698      	mov	r8, r3
 810a33a:	460c      	mov	r4, r1
 810a33c:	f101 0014 	add.w	r0, r1, #20
 810a340:	2300      	movs	r3, #0
 810a342:	6805      	ldr	r5, [r0, #0]
 810a344:	b2a9      	uxth	r1, r5
 810a346:	fb02 8101 	mla	r1, r2, r1, r8
 810a34a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810a34e:	0c2d      	lsrs	r5, r5, #16
 810a350:	fb02 c505 	mla	r5, r2, r5, ip
 810a354:	b289      	uxth	r1, r1
 810a356:	3301      	adds	r3, #1
 810a358:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810a35c:	429e      	cmp	r6, r3
 810a35e:	f840 1b04 	str.w	r1, [r0], #4
 810a362:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810a366:	dcec      	bgt.n	810a342 <__multadd+0x12>
 810a368:	f1b8 0f00 	cmp.w	r8, #0
 810a36c:	d022      	beq.n	810a3b4 <__multadd+0x84>
 810a36e:	68a3      	ldr	r3, [r4, #8]
 810a370:	42b3      	cmp	r3, r6
 810a372:	dc19      	bgt.n	810a3a8 <__multadd+0x78>
 810a374:	6861      	ldr	r1, [r4, #4]
 810a376:	4638      	mov	r0, r7
 810a378:	3101      	adds	r1, #1
 810a37a:	f7ff ff77 	bl	810a26c <_Balloc>
 810a37e:	4605      	mov	r5, r0
 810a380:	b928      	cbnz	r0, 810a38e <__multadd+0x5e>
 810a382:	4602      	mov	r2, r0
 810a384:	4b0d      	ldr	r3, [pc, #52]	; (810a3bc <__multadd+0x8c>)
 810a386:	480e      	ldr	r0, [pc, #56]	; (810a3c0 <__multadd+0x90>)
 810a388:	21b5      	movs	r1, #181	; 0xb5
 810a38a:	f000 ff29 	bl	810b1e0 <__assert_func>
 810a38e:	6922      	ldr	r2, [r4, #16]
 810a390:	3202      	adds	r2, #2
 810a392:	f104 010c 	add.w	r1, r4, #12
 810a396:	0092      	lsls	r2, r2, #2
 810a398:	300c      	adds	r0, #12
 810a39a:	f7ff ff4d 	bl	810a238 <memcpy>
 810a39e:	4621      	mov	r1, r4
 810a3a0:	4638      	mov	r0, r7
 810a3a2:	f7ff ffa3 	bl	810a2ec <_Bfree>
 810a3a6:	462c      	mov	r4, r5
 810a3a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810a3ac:	3601      	adds	r6, #1
 810a3ae:	f8c3 8014 	str.w	r8, [r3, #20]
 810a3b2:	6126      	str	r6, [r4, #16]
 810a3b4:	4620      	mov	r0, r4
 810a3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a3ba:	bf00      	nop
 810a3bc:	0810b6b4 	.word	0x0810b6b4
 810a3c0:	0810b744 	.word	0x0810b744

0810a3c4 <__s2b>:
 810a3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a3c8:	460c      	mov	r4, r1
 810a3ca:	4615      	mov	r5, r2
 810a3cc:	461f      	mov	r7, r3
 810a3ce:	2209      	movs	r2, #9
 810a3d0:	3308      	adds	r3, #8
 810a3d2:	4606      	mov	r6, r0
 810a3d4:	fb93 f3f2 	sdiv	r3, r3, r2
 810a3d8:	2100      	movs	r1, #0
 810a3da:	2201      	movs	r2, #1
 810a3dc:	429a      	cmp	r2, r3
 810a3de:	db09      	blt.n	810a3f4 <__s2b+0x30>
 810a3e0:	4630      	mov	r0, r6
 810a3e2:	f7ff ff43 	bl	810a26c <_Balloc>
 810a3e6:	b940      	cbnz	r0, 810a3fa <__s2b+0x36>
 810a3e8:	4602      	mov	r2, r0
 810a3ea:	4b19      	ldr	r3, [pc, #100]	; (810a450 <__s2b+0x8c>)
 810a3ec:	4819      	ldr	r0, [pc, #100]	; (810a454 <__s2b+0x90>)
 810a3ee:	21ce      	movs	r1, #206	; 0xce
 810a3f0:	f000 fef6 	bl	810b1e0 <__assert_func>
 810a3f4:	0052      	lsls	r2, r2, #1
 810a3f6:	3101      	adds	r1, #1
 810a3f8:	e7f0      	b.n	810a3dc <__s2b+0x18>
 810a3fa:	9b08      	ldr	r3, [sp, #32]
 810a3fc:	6143      	str	r3, [r0, #20]
 810a3fe:	2d09      	cmp	r5, #9
 810a400:	f04f 0301 	mov.w	r3, #1
 810a404:	6103      	str	r3, [r0, #16]
 810a406:	dd16      	ble.n	810a436 <__s2b+0x72>
 810a408:	f104 0909 	add.w	r9, r4, #9
 810a40c:	46c8      	mov	r8, r9
 810a40e:	442c      	add	r4, r5
 810a410:	f818 3b01 	ldrb.w	r3, [r8], #1
 810a414:	4601      	mov	r1, r0
 810a416:	3b30      	subs	r3, #48	; 0x30
 810a418:	220a      	movs	r2, #10
 810a41a:	4630      	mov	r0, r6
 810a41c:	f7ff ff88 	bl	810a330 <__multadd>
 810a420:	45a0      	cmp	r8, r4
 810a422:	d1f5      	bne.n	810a410 <__s2b+0x4c>
 810a424:	f1a5 0408 	sub.w	r4, r5, #8
 810a428:	444c      	add	r4, r9
 810a42a:	1b2d      	subs	r5, r5, r4
 810a42c:	1963      	adds	r3, r4, r5
 810a42e:	42bb      	cmp	r3, r7
 810a430:	db04      	blt.n	810a43c <__s2b+0x78>
 810a432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a436:	340a      	adds	r4, #10
 810a438:	2509      	movs	r5, #9
 810a43a:	e7f6      	b.n	810a42a <__s2b+0x66>
 810a43c:	f814 3b01 	ldrb.w	r3, [r4], #1
 810a440:	4601      	mov	r1, r0
 810a442:	3b30      	subs	r3, #48	; 0x30
 810a444:	220a      	movs	r2, #10
 810a446:	4630      	mov	r0, r6
 810a448:	f7ff ff72 	bl	810a330 <__multadd>
 810a44c:	e7ee      	b.n	810a42c <__s2b+0x68>
 810a44e:	bf00      	nop
 810a450:	0810b6b4 	.word	0x0810b6b4
 810a454:	0810b744 	.word	0x0810b744

0810a458 <__hi0bits>:
 810a458:	0c03      	lsrs	r3, r0, #16
 810a45a:	041b      	lsls	r3, r3, #16
 810a45c:	b9d3      	cbnz	r3, 810a494 <__hi0bits+0x3c>
 810a45e:	0400      	lsls	r0, r0, #16
 810a460:	2310      	movs	r3, #16
 810a462:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810a466:	bf04      	itt	eq
 810a468:	0200      	lsleq	r0, r0, #8
 810a46a:	3308      	addeq	r3, #8
 810a46c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810a470:	bf04      	itt	eq
 810a472:	0100      	lsleq	r0, r0, #4
 810a474:	3304      	addeq	r3, #4
 810a476:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810a47a:	bf04      	itt	eq
 810a47c:	0080      	lsleq	r0, r0, #2
 810a47e:	3302      	addeq	r3, #2
 810a480:	2800      	cmp	r0, #0
 810a482:	db05      	blt.n	810a490 <__hi0bits+0x38>
 810a484:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810a488:	f103 0301 	add.w	r3, r3, #1
 810a48c:	bf08      	it	eq
 810a48e:	2320      	moveq	r3, #32
 810a490:	4618      	mov	r0, r3
 810a492:	4770      	bx	lr
 810a494:	2300      	movs	r3, #0
 810a496:	e7e4      	b.n	810a462 <__hi0bits+0xa>

0810a498 <__lo0bits>:
 810a498:	6803      	ldr	r3, [r0, #0]
 810a49a:	f013 0207 	ands.w	r2, r3, #7
 810a49e:	4601      	mov	r1, r0
 810a4a0:	d00b      	beq.n	810a4ba <__lo0bits+0x22>
 810a4a2:	07da      	lsls	r2, r3, #31
 810a4a4:	d424      	bmi.n	810a4f0 <__lo0bits+0x58>
 810a4a6:	0798      	lsls	r0, r3, #30
 810a4a8:	bf49      	itett	mi
 810a4aa:	085b      	lsrmi	r3, r3, #1
 810a4ac:	089b      	lsrpl	r3, r3, #2
 810a4ae:	2001      	movmi	r0, #1
 810a4b0:	600b      	strmi	r3, [r1, #0]
 810a4b2:	bf5c      	itt	pl
 810a4b4:	600b      	strpl	r3, [r1, #0]
 810a4b6:	2002      	movpl	r0, #2
 810a4b8:	4770      	bx	lr
 810a4ba:	b298      	uxth	r0, r3
 810a4bc:	b9b0      	cbnz	r0, 810a4ec <__lo0bits+0x54>
 810a4be:	0c1b      	lsrs	r3, r3, #16
 810a4c0:	2010      	movs	r0, #16
 810a4c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 810a4c6:	bf04      	itt	eq
 810a4c8:	0a1b      	lsreq	r3, r3, #8
 810a4ca:	3008      	addeq	r0, #8
 810a4cc:	071a      	lsls	r2, r3, #28
 810a4ce:	bf04      	itt	eq
 810a4d0:	091b      	lsreq	r3, r3, #4
 810a4d2:	3004      	addeq	r0, #4
 810a4d4:	079a      	lsls	r2, r3, #30
 810a4d6:	bf04      	itt	eq
 810a4d8:	089b      	lsreq	r3, r3, #2
 810a4da:	3002      	addeq	r0, #2
 810a4dc:	07da      	lsls	r2, r3, #31
 810a4de:	d403      	bmi.n	810a4e8 <__lo0bits+0x50>
 810a4e0:	085b      	lsrs	r3, r3, #1
 810a4e2:	f100 0001 	add.w	r0, r0, #1
 810a4e6:	d005      	beq.n	810a4f4 <__lo0bits+0x5c>
 810a4e8:	600b      	str	r3, [r1, #0]
 810a4ea:	4770      	bx	lr
 810a4ec:	4610      	mov	r0, r2
 810a4ee:	e7e8      	b.n	810a4c2 <__lo0bits+0x2a>
 810a4f0:	2000      	movs	r0, #0
 810a4f2:	4770      	bx	lr
 810a4f4:	2020      	movs	r0, #32
 810a4f6:	4770      	bx	lr

0810a4f8 <__i2b>:
 810a4f8:	b510      	push	{r4, lr}
 810a4fa:	460c      	mov	r4, r1
 810a4fc:	2101      	movs	r1, #1
 810a4fe:	f7ff feb5 	bl	810a26c <_Balloc>
 810a502:	4602      	mov	r2, r0
 810a504:	b928      	cbnz	r0, 810a512 <__i2b+0x1a>
 810a506:	4b05      	ldr	r3, [pc, #20]	; (810a51c <__i2b+0x24>)
 810a508:	4805      	ldr	r0, [pc, #20]	; (810a520 <__i2b+0x28>)
 810a50a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810a50e:	f000 fe67 	bl	810b1e0 <__assert_func>
 810a512:	2301      	movs	r3, #1
 810a514:	6144      	str	r4, [r0, #20]
 810a516:	6103      	str	r3, [r0, #16]
 810a518:	bd10      	pop	{r4, pc}
 810a51a:	bf00      	nop
 810a51c:	0810b6b4 	.word	0x0810b6b4
 810a520:	0810b744 	.word	0x0810b744

0810a524 <__multiply>:
 810a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a528:	4614      	mov	r4, r2
 810a52a:	690a      	ldr	r2, [r1, #16]
 810a52c:	6923      	ldr	r3, [r4, #16]
 810a52e:	429a      	cmp	r2, r3
 810a530:	bfb8      	it	lt
 810a532:	460b      	movlt	r3, r1
 810a534:	460d      	mov	r5, r1
 810a536:	bfbc      	itt	lt
 810a538:	4625      	movlt	r5, r4
 810a53a:	461c      	movlt	r4, r3
 810a53c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810a540:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810a544:	68ab      	ldr	r3, [r5, #8]
 810a546:	6869      	ldr	r1, [r5, #4]
 810a548:	eb0a 0709 	add.w	r7, sl, r9
 810a54c:	42bb      	cmp	r3, r7
 810a54e:	b085      	sub	sp, #20
 810a550:	bfb8      	it	lt
 810a552:	3101      	addlt	r1, #1
 810a554:	f7ff fe8a 	bl	810a26c <_Balloc>
 810a558:	b930      	cbnz	r0, 810a568 <__multiply+0x44>
 810a55a:	4602      	mov	r2, r0
 810a55c:	4b42      	ldr	r3, [pc, #264]	; (810a668 <__multiply+0x144>)
 810a55e:	4843      	ldr	r0, [pc, #268]	; (810a66c <__multiply+0x148>)
 810a560:	f240 115d 	movw	r1, #349	; 0x15d
 810a564:	f000 fe3c 	bl	810b1e0 <__assert_func>
 810a568:	f100 0614 	add.w	r6, r0, #20
 810a56c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810a570:	4633      	mov	r3, r6
 810a572:	2200      	movs	r2, #0
 810a574:	4543      	cmp	r3, r8
 810a576:	d31e      	bcc.n	810a5b6 <__multiply+0x92>
 810a578:	f105 0c14 	add.w	ip, r5, #20
 810a57c:	f104 0314 	add.w	r3, r4, #20
 810a580:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810a584:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810a588:	9202      	str	r2, [sp, #8]
 810a58a:	ebac 0205 	sub.w	r2, ip, r5
 810a58e:	3a15      	subs	r2, #21
 810a590:	f022 0203 	bic.w	r2, r2, #3
 810a594:	3204      	adds	r2, #4
 810a596:	f105 0115 	add.w	r1, r5, #21
 810a59a:	458c      	cmp	ip, r1
 810a59c:	bf38      	it	cc
 810a59e:	2204      	movcc	r2, #4
 810a5a0:	9201      	str	r2, [sp, #4]
 810a5a2:	9a02      	ldr	r2, [sp, #8]
 810a5a4:	9303      	str	r3, [sp, #12]
 810a5a6:	429a      	cmp	r2, r3
 810a5a8:	d808      	bhi.n	810a5bc <__multiply+0x98>
 810a5aa:	2f00      	cmp	r7, #0
 810a5ac:	dc55      	bgt.n	810a65a <__multiply+0x136>
 810a5ae:	6107      	str	r7, [r0, #16]
 810a5b0:	b005      	add	sp, #20
 810a5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a5b6:	f843 2b04 	str.w	r2, [r3], #4
 810a5ba:	e7db      	b.n	810a574 <__multiply+0x50>
 810a5bc:	f8b3 a000 	ldrh.w	sl, [r3]
 810a5c0:	f1ba 0f00 	cmp.w	sl, #0
 810a5c4:	d020      	beq.n	810a608 <__multiply+0xe4>
 810a5c6:	f105 0e14 	add.w	lr, r5, #20
 810a5ca:	46b1      	mov	r9, r6
 810a5cc:	2200      	movs	r2, #0
 810a5ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 810a5d2:	f8d9 b000 	ldr.w	fp, [r9]
 810a5d6:	b2a1      	uxth	r1, r4
 810a5d8:	fa1f fb8b 	uxth.w	fp, fp
 810a5dc:	fb0a b101 	mla	r1, sl, r1, fp
 810a5e0:	4411      	add	r1, r2
 810a5e2:	f8d9 2000 	ldr.w	r2, [r9]
 810a5e6:	0c24      	lsrs	r4, r4, #16
 810a5e8:	0c12      	lsrs	r2, r2, #16
 810a5ea:	fb0a 2404 	mla	r4, sl, r4, r2
 810a5ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810a5f2:	b289      	uxth	r1, r1
 810a5f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810a5f8:	45f4      	cmp	ip, lr
 810a5fa:	f849 1b04 	str.w	r1, [r9], #4
 810a5fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810a602:	d8e4      	bhi.n	810a5ce <__multiply+0xaa>
 810a604:	9901      	ldr	r1, [sp, #4]
 810a606:	5072      	str	r2, [r6, r1]
 810a608:	9a03      	ldr	r2, [sp, #12]
 810a60a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810a60e:	3304      	adds	r3, #4
 810a610:	f1b9 0f00 	cmp.w	r9, #0
 810a614:	d01f      	beq.n	810a656 <__multiply+0x132>
 810a616:	6834      	ldr	r4, [r6, #0]
 810a618:	f105 0114 	add.w	r1, r5, #20
 810a61c:	46b6      	mov	lr, r6
 810a61e:	f04f 0a00 	mov.w	sl, #0
 810a622:	880a      	ldrh	r2, [r1, #0]
 810a624:	f8be b002 	ldrh.w	fp, [lr, #2]
 810a628:	fb09 b202 	mla	r2, r9, r2, fp
 810a62c:	4492      	add	sl, r2
 810a62e:	b2a4      	uxth	r4, r4
 810a630:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810a634:	f84e 4b04 	str.w	r4, [lr], #4
 810a638:	f851 4b04 	ldr.w	r4, [r1], #4
 810a63c:	f8be 2000 	ldrh.w	r2, [lr]
 810a640:	0c24      	lsrs	r4, r4, #16
 810a642:	fb09 2404 	mla	r4, r9, r4, r2
 810a646:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810a64a:	458c      	cmp	ip, r1
 810a64c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810a650:	d8e7      	bhi.n	810a622 <__multiply+0xfe>
 810a652:	9a01      	ldr	r2, [sp, #4]
 810a654:	50b4      	str	r4, [r6, r2]
 810a656:	3604      	adds	r6, #4
 810a658:	e7a3      	b.n	810a5a2 <__multiply+0x7e>
 810a65a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810a65e:	2b00      	cmp	r3, #0
 810a660:	d1a5      	bne.n	810a5ae <__multiply+0x8a>
 810a662:	3f01      	subs	r7, #1
 810a664:	e7a1      	b.n	810a5aa <__multiply+0x86>
 810a666:	bf00      	nop
 810a668:	0810b6b4 	.word	0x0810b6b4
 810a66c:	0810b744 	.word	0x0810b744

0810a670 <__pow5mult>:
 810a670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a674:	4615      	mov	r5, r2
 810a676:	f012 0203 	ands.w	r2, r2, #3
 810a67a:	4606      	mov	r6, r0
 810a67c:	460f      	mov	r7, r1
 810a67e:	d007      	beq.n	810a690 <__pow5mult+0x20>
 810a680:	4c25      	ldr	r4, [pc, #148]	; (810a718 <__pow5mult+0xa8>)
 810a682:	3a01      	subs	r2, #1
 810a684:	2300      	movs	r3, #0
 810a686:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810a68a:	f7ff fe51 	bl	810a330 <__multadd>
 810a68e:	4607      	mov	r7, r0
 810a690:	10ad      	asrs	r5, r5, #2
 810a692:	d03d      	beq.n	810a710 <__pow5mult+0xa0>
 810a694:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810a696:	b97c      	cbnz	r4, 810a6b8 <__pow5mult+0x48>
 810a698:	2010      	movs	r0, #16
 810a69a:	f7ff fdb3 	bl	810a204 <malloc>
 810a69e:	4602      	mov	r2, r0
 810a6a0:	6270      	str	r0, [r6, #36]	; 0x24
 810a6a2:	b928      	cbnz	r0, 810a6b0 <__pow5mult+0x40>
 810a6a4:	4b1d      	ldr	r3, [pc, #116]	; (810a71c <__pow5mult+0xac>)
 810a6a6:	481e      	ldr	r0, [pc, #120]	; (810a720 <__pow5mult+0xb0>)
 810a6a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810a6ac:	f000 fd98 	bl	810b1e0 <__assert_func>
 810a6b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810a6b4:	6004      	str	r4, [r0, #0]
 810a6b6:	60c4      	str	r4, [r0, #12]
 810a6b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810a6bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810a6c0:	b94c      	cbnz	r4, 810a6d6 <__pow5mult+0x66>
 810a6c2:	f240 2171 	movw	r1, #625	; 0x271
 810a6c6:	4630      	mov	r0, r6
 810a6c8:	f7ff ff16 	bl	810a4f8 <__i2b>
 810a6cc:	2300      	movs	r3, #0
 810a6ce:	f8c8 0008 	str.w	r0, [r8, #8]
 810a6d2:	4604      	mov	r4, r0
 810a6d4:	6003      	str	r3, [r0, #0]
 810a6d6:	f04f 0900 	mov.w	r9, #0
 810a6da:	07eb      	lsls	r3, r5, #31
 810a6dc:	d50a      	bpl.n	810a6f4 <__pow5mult+0x84>
 810a6de:	4639      	mov	r1, r7
 810a6e0:	4622      	mov	r2, r4
 810a6e2:	4630      	mov	r0, r6
 810a6e4:	f7ff ff1e 	bl	810a524 <__multiply>
 810a6e8:	4639      	mov	r1, r7
 810a6ea:	4680      	mov	r8, r0
 810a6ec:	4630      	mov	r0, r6
 810a6ee:	f7ff fdfd 	bl	810a2ec <_Bfree>
 810a6f2:	4647      	mov	r7, r8
 810a6f4:	106d      	asrs	r5, r5, #1
 810a6f6:	d00b      	beq.n	810a710 <__pow5mult+0xa0>
 810a6f8:	6820      	ldr	r0, [r4, #0]
 810a6fa:	b938      	cbnz	r0, 810a70c <__pow5mult+0x9c>
 810a6fc:	4622      	mov	r2, r4
 810a6fe:	4621      	mov	r1, r4
 810a700:	4630      	mov	r0, r6
 810a702:	f7ff ff0f 	bl	810a524 <__multiply>
 810a706:	6020      	str	r0, [r4, #0]
 810a708:	f8c0 9000 	str.w	r9, [r0]
 810a70c:	4604      	mov	r4, r0
 810a70e:	e7e4      	b.n	810a6da <__pow5mult+0x6a>
 810a710:	4638      	mov	r0, r7
 810a712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a716:	bf00      	nop
 810a718:	0810b898 	.word	0x0810b898
 810a71c:	0810b63e 	.word	0x0810b63e
 810a720:	0810b744 	.word	0x0810b744

0810a724 <__lshift>:
 810a724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a728:	460c      	mov	r4, r1
 810a72a:	6849      	ldr	r1, [r1, #4]
 810a72c:	6923      	ldr	r3, [r4, #16]
 810a72e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810a732:	68a3      	ldr	r3, [r4, #8]
 810a734:	4607      	mov	r7, r0
 810a736:	4691      	mov	r9, r2
 810a738:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810a73c:	f108 0601 	add.w	r6, r8, #1
 810a740:	42b3      	cmp	r3, r6
 810a742:	db0b      	blt.n	810a75c <__lshift+0x38>
 810a744:	4638      	mov	r0, r7
 810a746:	f7ff fd91 	bl	810a26c <_Balloc>
 810a74a:	4605      	mov	r5, r0
 810a74c:	b948      	cbnz	r0, 810a762 <__lshift+0x3e>
 810a74e:	4602      	mov	r2, r0
 810a750:	4b28      	ldr	r3, [pc, #160]	; (810a7f4 <__lshift+0xd0>)
 810a752:	4829      	ldr	r0, [pc, #164]	; (810a7f8 <__lshift+0xd4>)
 810a754:	f240 11d9 	movw	r1, #473	; 0x1d9
 810a758:	f000 fd42 	bl	810b1e0 <__assert_func>
 810a75c:	3101      	adds	r1, #1
 810a75e:	005b      	lsls	r3, r3, #1
 810a760:	e7ee      	b.n	810a740 <__lshift+0x1c>
 810a762:	2300      	movs	r3, #0
 810a764:	f100 0114 	add.w	r1, r0, #20
 810a768:	f100 0210 	add.w	r2, r0, #16
 810a76c:	4618      	mov	r0, r3
 810a76e:	4553      	cmp	r3, sl
 810a770:	db33      	blt.n	810a7da <__lshift+0xb6>
 810a772:	6920      	ldr	r0, [r4, #16]
 810a774:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810a778:	f104 0314 	add.w	r3, r4, #20
 810a77c:	f019 091f 	ands.w	r9, r9, #31
 810a780:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810a784:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810a788:	d02b      	beq.n	810a7e2 <__lshift+0xbe>
 810a78a:	f1c9 0e20 	rsb	lr, r9, #32
 810a78e:	468a      	mov	sl, r1
 810a790:	2200      	movs	r2, #0
 810a792:	6818      	ldr	r0, [r3, #0]
 810a794:	fa00 f009 	lsl.w	r0, r0, r9
 810a798:	4302      	orrs	r2, r0
 810a79a:	f84a 2b04 	str.w	r2, [sl], #4
 810a79e:	f853 2b04 	ldr.w	r2, [r3], #4
 810a7a2:	459c      	cmp	ip, r3
 810a7a4:	fa22 f20e 	lsr.w	r2, r2, lr
 810a7a8:	d8f3      	bhi.n	810a792 <__lshift+0x6e>
 810a7aa:	ebac 0304 	sub.w	r3, ip, r4
 810a7ae:	3b15      	subs	r3, #21
 810a7b0:	f023 0303 	bic.w	r3, r3, #3
 810a7b4:	3304      	adds	r3, #4
 810a7b6:	f104 0015 	add.w	r0, r4, #21
 810a7ba:	4584      	cmp	ip, r0
 810a7bc:	bf38      	it	cc
 810a7be:	2304      	movcc	r3, #4
 810a7c0:	50ca      	str	r2, [r1, r3]
 810a7c2:	b10a      	cbz	r2, 810a7c8 <__lshift+0xa4>
 810a7c4:	f108 0602 	add.w	r6, r8, #2
 810a7c8:	3e01      	subs	r6, #1
 810a7ca:	4638      	mov	r0, r7
 810a7cc:	612e      	str	r6, [r5, #16]
 810a7ce:	4621      	mov	r1, r4
 810a7d0:	f7ff fd8c 	bl	810a2ec <_Bfree>
 810a7d4:	4628      	mov	r0, r5
 810a7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a7da:	f842 0f04 	str.w	r0, [r2, #4]!
 810a7de:	3301      	adds	r3, #1
 810a7e0:	e7c5      	b.n	810a76e <__lshift+0x4a>
 810a7e2:	3904      	subs	r1, #4
 810a7e4:	f853 2b04 	ldr.w	r2, [r3], #4
 810a7e8:	f841 2f04 	str.w	r2, [r1, #4]!
 810a7ec:	459c      	cmp	ip, r3
 810a7ee:	d8f9      	bhi.n	810a7e4 <__lshift+0xc0>
 810a7f0:	e7ea      	b.n	810a7c8 <__lshift+0xa4>
 810a7f2:	bf00      	nop
 810a7f4:	0810b6b4 	.word	0x0810b6b4
 810a7f8:	0810b744 	.word	0x0810b744

0810a7fc <__mcmp>:
 810a7fc:	b530      	push	{r4, r5, lr}
 810a7fe:	6902      	ldr	r2, [r0, #16]
 810a800:	690c      	ldr	r4, [r1, #16]
 810a802:	1b12      	subs	r2, r2, r4
 810a804:	d10e      	bne.n	810a824 <__mcmp+0x28>
 810a806:	f100 0314 	add.w	r3, r0, #20
 810a80a:	3114      	adds	r1, #20
 810a80c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810a810:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810a814:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810a818:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810a81c:	42a5      	cmp	r5, r4
 810a81e:	d003      	beq.n	810a828 <__mcmp+0x2c>
 810a820:	d305      	bcc.n	810a82e <__mcmp+0x32>
 810a822:	2201      	movs	r2, #1
 810a824:	4610      	mov	r0, r2
 810a826:	bd30      	pop	{r4, r5, pc}
 810a828:	4283      	cmp	r3, r0
 810a82a:	d3f3      	bcc.n	810a814 <__mcmp+0x18>
 810a82c:	e7fa      	b.n	810a824 <__mcmp+0x28>
 810a82e:	f04f 32ff 	mov.w	r2, #4294967295
 810a832:	e7f7      	b.n	810a824 <__mcmp+0x28>

0810a834 <__mdiff>:
 810a834:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a838:	460c      	mov	r4, r1
 810a83a:	4606      	mov	r6, r0
 810a83c:	4611      	mov	r1, r2
 810a83e:	4620      	mov	r0, r4
 810a840:	4617      	mov	r7, r2
 810a842:	f7ff ffdb 	bl	810a7fc <__mcmp>
 810a846:	1e05      	subs	r5, r0, #0
 810a848:	d110      	bne.n	810a86c <__mdiff+0x38>
 810a84a:	4629      	mov	r1, r5
 810a84c:	4630      	mov	r0, r6
 810a84e:	f7ff fd0d 	bl	810a26c <_Balloc>
 810a852:	b930      	cbnz	r0, 810a862 <__mdiff+0x2e>
 810a854:	4b39      	ldr	r3, [pc, #228]	; (810a93c <__mdiff+0x108>)
 810a856:	4602      	mov	r2, r0
 810a858:	f240 2132 	movw	r1, #562	; 0x232
 810a85c:	4838      	ldr	r0, [pc, #224]	; (810a940 <__mdiff+0x10c>)
 810a85e:	f000 fcbf 	bl	810b1e0 <__assert_func>
 810a862:	2301      	movs	r3, #1
 810a864:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810a868:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a86c:	bfa4      	itt	ge
 810a86e:	463b      	movge	r3, r7
 810a870:	4627      	movge	r7, r4
 810a872:	4630      	mov	r0, r6
 810a874:	6879      	ldr	r1, [r7, #4]
 810a876:	bfa6      	itte	ge
 810a878:	461c      	movge	r4, r3
 810a87a:	2500      	movge	r5, #0
 810a87c:	2501      	movlt	r5, #1
 810a87e:	f7ff fcf5 	bl	810a26c <_Balloc>
 810a882:	b920      	cbnz	r0, 810a88e <__mdiff+0x5a>
 810a884:	4b2d      	ldr	r3, [pc, #180]	; (810a93c <__mdiff+0x108>)
 810a886:	4602      	mov	r2, r0
 810a888:	f44f 7110 	mov.w	r1, #576	; 0x240
 810a88c:	e7e6      	b.n	810a85c <__mdiff+0x28>
 810a88e:	693e      	ldr	r6, [r7, #16]
 810a890:	60c5      	str	r5, [r0, #12]
 810a892:	6925      	ldr	r5, [r4, #16]
 810a894:	f107 0114 	add.w	r1, r7, #20
 810a898:	f104 0914 	add.w	r9, r4, #20
 810a89c:	f100 0e14 	add.w	lr, r0, #20
 810a8a0:	f107 0210 	add.w	r2, r7, #16
 810a8a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810a8a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810a8ac:	46f2      	mov	sl, lr
 810a8ae:	2700      	movs	r7, #0
 810a8b0:	f859 3b04 	ldr.w	r3, [r9], #4
 810a8b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810a8b8:	fa1f f883 	uxth.w	r8, r3
 810a8bc:	fa17 f78b 	uxtah	r7, r7, fp
 810a8c0:	0c1b      	lsrs	r3, r3, #16
 810a8c2:	eba7 0808 	sub.w	r8, r7, r8
 810a8c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810a8ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810a8ce:	fa1f f888 	uxth.w	r8, r8
 810a8d2:	141f      	asrs	r7, r3, #16
 810a8d4:	454d      	cmp	r5, r9
 810a8d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810a8da:	f84a 3b04 	str.w	r3, [sl], #4
 810a8de:	d8e7      	bhi.n	810a8b0 <__mdiff+0x7c>
 810a8e0:	1b2b      	subs	r3, r5, r4
 810a8e2:	3b15      	subs	r3, #21
 810a8e4:	f023 0303 	bic.w	r3, r3, #3
 810a8e8:	3304      	adds	r3, #4
 810a8ea:	3415      	adds	r4, #21
 810a8ec:	42a5      	cmp	r5, r4
 810a8ee:	bf38      	it	cc
 810a8f0:	2304      	movcc	r3, #4
 810a8f2:	4419      	add	r1, r3
 810a8f4:	4473      	add	r3, lr
 810a8f6:	469e      	mov	lr, r3
 810a8f8:	460d      	mov	r5, r1
 810a8fa:	4565      	cmp	r5, ip
 810a8fc:	d30e      	bcc.n	810a91c <__mdiff+0xe8>
 810a8fe:	f10c 0203 	add.w	r2, ip, #3
 810a902:	1a52      	subs	r2, r2, r1
 810a904:	f022 0203 	bic.w	r2, r2, #3
 810a908:	3903      	subs	r1, #3
 810a90a:	458c      	cmp	ip, r1
 810a90c:	bf38      	it	cc
 810a90e:	2200      	movcc	r2, #0
 810a910:	441a      	add	r2, r3
 810a912:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810a916:	b17b      	cbz	r3, 810a938 <__mdiff+0x104>
 810a918:	6106      	str	r6, [r0, #16]
 810a91a:	e7a5      	b.n	810a868 <__mdiff+0x34>
 810a91c:	f855 8b04 	ldr.w	r8, [r5], #4
 810a920:	fa17 f488 	uxtah	r4, r7, r8
 810a924:	1422      	asrs	r2, r4, #16
 810a926:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810a92a:	b2a4      	uxth	r4, r4
 810a92c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810a930:	f84e 4b04 	str.w	r4, [lr], #4
 810a934:	1417      	asrs	r7, r2, #16
 810a936:	e7e0      	b.n	810a8fa <__mdiff+0xc6>
 810a938:	3e01      	subs	r6, #1
 810a93a:	e7ea      	b.n	810a912 <__mdiff+0xde>
 810a93c:	0810b6b4 	.word	0x0810b6b4
 810a940:	0810b744 	.word	0x0810b744

0810a944 <__ulp>:
 810a944:	b082      	sub	sp, #8
 810a946:	ed8d 0b00 	vstr	d0, [sp]
 810a94a:	9b01      	ldr	r3, [sp, #4]
 810a94c:	4912      	ldr	r1, [pc, #72]	; (810a998 <__ulp+0x54>)
 810a94e:	4019      	ands	r1, r3
 810a950:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810a954:	2900      	cmp	r1, #0
 810a956:	dd05      	ble.n	810a964 <__ulp+0x20>
 810a958:	2200      	movs	r2, #0
 810a95a:	460b      	mov	r3, r1
 810a95c:	ec43 2b10 	vmov	d0, r2, r3
 810a960:	b002      	add	sp, #8
 810a962:	4770      	bx	lr
 810a964:	4249      	negs	r1, r1
 810a966:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810a96a:	ea4f 5021 	mov.w	r0, r1, asr #20
 810a96e:	f04f 0200 	mov.w	r2, #0
 810a972:	f04f 0300 	mov.w	r3, #0
 810a976:	da04      	bge.n	810a982 <__ulp+0x3e>
 810a978:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810a97c:	fa41 f300 	asr.w	r3, r1, r0
 810a980:	e7ec      	b.n	810a95c <__ulp+0x18>
 810a982:	f1a0 0114 	sub.w	r1, r0, #20
 810a986:	291e      	cmp	r1, #30
 810a988:	bfda      	itte	le
 810a98a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810a98e:	fa20 f101 	lsrle.w	r1, r0, r1
 810a992:	2101      	movgt	r1, #1
 810a994:	460a      	mov	r2, r1
 810a996:	e7e1      	b.n	810a95c <__ulp+0x18>
 810a998:	7ff00000 	.word	0x7ff00000

0810a99c <__b2d>:
 810a99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a99e:	6905      	ldr	r5, [r0, #16]
 810a9a0:	f100 0714 	add.w	r7, r0, #20
 810a9a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810a9a8:	1f2e      	subs	r6, r5, #4
 810a9aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810a9ae:	4620      	mov	r0, r4
 810a9b0:	f7ff fd52 	bl	810a458 <__hi0bits>
 810a9b4:	f1c0 0320 	rsb	r3, r0, #32
 810a9b8:	280a      	cmp	r0, #10
 810a9ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810aa38 <__b2d+0x9c>
 810a9be:	600b      	str	r3, [r1, #0]
 810a9c0:	dc14      	bgt.n	810a9ec <__b2d+0x50>
 810a9c2:	f1c0 0e0b 	rsb	lr, r0, #11
 810a9c6:	fa24 f10e 	lsr.w	r1, r4, lr
 810a9ca:	42b7      	cmp	r7, r6
 810a9cc:	ea41 030c 	orr.w	r3, r1, ip
 810a9d0:	bf34      	ite	cc
 810a9d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810a9d6:	2100      	movcs	r1, #0
 810a9d8:	3015      	adds	r0, #21
 810a9da:	fa04 f000 	lsl.w	r0, r4, r0
 810a9de:	fa21 f10e 	lsr.w	r1, r1, lr
 810a9e2:	ea40 0201 	orr.w	r2, r0, r1
 810a9e6:	ec43 2b10 	vmov	d0, r2, r3
 810a9ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810a9ec:	42b7      	cmp	r7, r6
 810a9ee:	bf3a      	itte	cc
 810a9f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810a9f4:	f1a5 0608 	subcc.w	r6, r5, #8
 810a9f8:	2100      	movcs	r1, #0
 810a9fa:	380b      	subs	r0, #11
 810a9fc:	d017      	beq.n	810aa2e <__b2d+0x92>
 810a9fe:	f1c0 0c20 	rsb	ip, r0, #32
 810aa02:	fa04 f500 	lsl.w	r5, r4, r0
 810aa06:	42be      	cmp	r6, r7
 810aa08:	fa21 f40c 	lsr.w	r4, r1, ip
 810aa0c:	ea45 0504 	orr.w	r5, r5, r4
 810aa10:	bf8c      	ite	hi
 810aa12:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810aa16:	2400      	movls	r4, #0
 810aa18:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810aa1c:	fa01 f000 	lsl.w	r0, r1, r0
 810aa20:	fa24 f40c 	lsr.w	r4, r4, ip
 810aa24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810aa28:	ea40 0204 	orr.w	r2, r0, r4
 810aa2c:	e7db      	b.n	810a9e6 <__b2d+0x4a>
 810aa2e:	ea44 030c 	orr.w	r3, r4, ip
 810aa32:	460a      	mov	r2, r1
 810aa34:	e7d7      	b.n	810a9e6 <__b2d+0x4a>
 810aa36:	bf00      	nop
 810aa38:	3ff00000 	.word	0x3ff00000

0810aa3c <__d2b>:
 810aa3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810aa40:	4689      	mov	r9, r1
 810aa42:	2101      	movs	r1, #1
 810aa44:	ec57 6b10 	vmov	r6, r7, d0
 810aa48:	4690      	mov	r8, r2
 810aa4a:	f7ff fc0f 	bl	810a26c <_Balloc>
 810aa4e:	4604      	mov	r4, r0
 810aa50:	b930      	cbnz	r0, 810aa60 <__d2b+0x24>
 810aa52:	4602      	mov	r2, r0
 810aa54:	4b25      	ldr	r3, [pc, #148]	; (810aaec <__d2b+0xb0>)
 810aa56:	4826      	ldr	r0, [pc, #152]	; (810aaf0 <__d2b+0xb4>)
 810aa58:	f240 310a 	movw	r1, #778	; 0x30a
 810aa5c:	f000 fbc0 	bl	810b1e0 <__assert_func>
 810aa60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810aa64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810aa68:	bb35      	cbnz	r5, 810aab8 <__d2b+0x7c>
 810aa6a:	2e00      	cmp	r6, #0
 810aa6c:	9301      	str	r3, [sp, #4]
 810aa6e:	d028      	beq.n	810aac2 <__d2b+0x86>
 810aa70:	4668      	mov	r0, sp
 810aa72:	9600      	str	r6, [sp, #0]
 810aa74:	f7ff fd10 	bl	810a498 <__lo0bits>
 810aa78:	9900      	ldr	r1, [sp, #0]
 810aa7a:	b300      	cbz	r0, 810aabe <__d2b+0x82>
 810aa7c:	9a01      	ldr	r2, [sp, #4]
 810aa7e:	f1c0 0320 	rsb	r3, r0, #32
 810aa82:	fa02 f303 	lsl.w	r3, r2, r3
 810aa86:	430b      	orrs	r3, r1
 810aa88:	40c2      	lsrs	r2, r0
 810aa8a:	6163      	str	r3, [r4, #20]
 810aa8c:	9201      	str	r2, [sp, #4]
 810aa8e:	9b01      	ldr	r3, [sp, #4]
 810aa90:	61a3      	str	r3, [r4, #24]
 810aa92:	2b00      	cmp	r3, #0
 810aa94:	bf14      	ite	ne
 810aa96:	2202      	movne	r2, #2
 810aa98:	2201      	moveq	r2, #1
 810aa9a:	6122      	str	r2, [r4, #16]
 810aa9c:	b1d5      	cbz	r5, 810aad4 <__d2b+0x98>
 810aa9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810aaa2:	4405      	add	r5, r0
 810aaa4:	f8c9 5000 	str.w	r5, [r9]
 810aaa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810aaac:	f8c8 0000 	str.w	r0, [r8]
 810aab0:	4620      	mov	r0, r4
 810aab2:	b003      	add	sp, #12
 810aab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810aab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810aabc:	e7d5      	b.n	810aa6a <__d2b+0x2e>
 810aabe:	6161      	str	r1, [r4, #20]
 810aac0:	e7e5      	b.n	810aa8e <__d2b+0x52>
 810aac2:	a801      	add	r0, sp, #4
 810aac4:	f7ff fce8 	bl	810a498 <__lo0bits>
 810aac8:	9b01      	ldr	r3, [sp, #4]
 810aaca:	6163      	str	r3, [r4, #20]
 810aacc:	2201      	movs	r2, #1
 810aace:	6122      	str	r2, [r4, #16]
 810aad0:	3020      	adds	r0, #32
 810aad2:	e7e3      	b.n	810aa9c <__d2b+0x60>
 810aad4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810aad8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810aadc:	f8c9 0000 	str.w	r0, [r9]
 810aae0:	6918      	ldr	r0, [r3, #16]
 810aae2:	f7ff fcb9 	bl	810a458 <__hi0bits>
 810aae6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810aaea:	e7df      	b.n	810aaac <__d2b+0x70>
 810aaec:	0810b6b4 	.word	0x0810b6b4
 810aaf0:	0810b744 	.word	0x0810b744

0810aaf4 <__ratio>:
 810aaf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810aaf8:	4688      	mov	r8, r1
 810aafa:	4669      	mov	r1, sp
 810aafc:	4681      	mov	r9, r0
 810aafe:	f7ff ff4d 	bl	810a99c <__b2d>
 810ab02:	a901      	add	r1, sp, #4
 810ab04:	4640      	mov	r0, r8
 810ab06:	ec55 4b10 	vmov	r4, r5, d0
 810ab0a:	f7ff ff47 	bl	810a99c <__b2d>
 810ab0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810ab12:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810ab16:	eba3 0c02 	sub.w	ip, r3, r2
 810ab1a:	e9dd 3200 	ldrd	r3, r2, [sp]
 810ab1e:	1a9b      	subs	r3, r3, r2
 810ab20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810ab24:	ec51 0b10 	vmov	r0, r1, d0
 810ab28:	2b00      	cmp	r3, #0
 810ab2a:	bfd6      	itet	le
 810ab2c:	460a      	movle	r2, r1
 810ab2e:	462a      	movgt	r2, r5
 810ab30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ab34:	468b      	mov	fp, r1
 810ab36:	462f      	mov	r7, r5
 810ab38:	bfd4      	ite	le
 810ab3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810ab3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ab42:	4620      	mov	r0, r4
 810ab44:	ee10 2a10 	vmov	r2, s0
 810ab48:	465b      	mov	r3, fp
 810ab4a:	4639      	mov	r1, r7
 810ab4c:	f7f5 ff06 	bl	810095c <__aeabi_ddiv>
 810ab50:	ec41 0b10 	vmov	d0, r0, r1
 810ab54:	b003      	add	sp, #12
 810ab56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ab5a <__copybits>:
 810ab5a:	3901      	subs	r1, #1
 810ab5c:	b570      	push	{r4, r5, r6, lr}
 810ab5e:	1149      	asrs	r1, r1, #5
 810ab60:	6914      	ldr	r4, [r2, #16]
 810ab62:	3101      	adds	r1, #1
 810ab64:	f102 0314 	add.w	r3, r2, #20
 810ab68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810ab6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810ab70:	1f05      	subs	r5, r0, #4
 810ab72:	42a3      	cmp	r3, r4
 810ab74:	d30c      	bcc.n	810ab90 <__copybits+0x36>
 810ab76:	1aa3      	subs	r3, r4, r2
 810ab78:	3b11      	subs	r3, #17
 810ab7a:	f023 0303 	bic.w	r3, r3, #3
 810ab7e:	3211      	adds	r2, #17
 810ab80:	42a2      	cmp	r2, r4
 810ab82:	bf88      	it	hi
 810ab84:	2300      	movhi	r3, #0
 810ab86:	4418      	add	r0, r3
 810ab88:	2300      	movs	r3, #0
 810ab8a:	4288      	cmp	r0, r1
 810ab8c:	d305      	bcc.n	810ab9a <__copybits+0x40>
 810ab8e:	bd70      	pop	{r4, r5, r6, pc}
 810ab90:	f853 6b04 	ldr.w	r6, [r3], #4
 810ab94:	f845 6f04 	str.w	r6, [r5, #4]!
 810ab98:	e7eb      	b.n	810ab72 <__copybits+0x18>
 810ab9a:	f840 3b04 	str.w	r3, [r0], #4
 810ab9e:	e7f4      	b.n	810ab8a <__copybits+0x30>

0810aba0 <__any_on>:
 810aba0:	f100 0214 	add.w	r2, r0, #20
 810aba4:	6900      	ldr	r0, [r0, #16]
 810aba6:	114b      	asrs	r3, r1, #5
 810aba8:	4298      	cmp	r0, r3
 810abaa:	b510      	push	{r4, lr}
 810abac:	db11      	blt.n	810abd2 <__any_on+0x32>
 810abae:	dd0a      	ble.n	810abc6 <__any_on+0x26>
 810abb0:	f011 011f 	ands.w	r1, r1, #31
 810abb4:	d007      	beq.n	810abc6 <__any_on+0x26>
 810abb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810abba:	fa24 f001 	lsr.w	r0, r4, r1
 810abbe:	fa00 f101 	lsl.w	r1, r0, r1
 810abc2:	428c      	cmp	r4, r1
 810abc4:	d10b      	bne.n	810abde <__any_on+0x3e>
 810abc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810abca:	4293      	cmp	r3, r2
 810abcc:	d803      	bhi.n	810abd6 <__any_on+0x36>
 810abce:	2000      	movs	r0, #0
 810abd0:	bd10      	pop	{r4, pc}
 810abd2:	4603      	mov	r3, r0
 810abd4:	e7f7      	b.n	810abc6 <__any_on+0x26>
 810abd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810abda:	2900      	cmp	r1, #0
 810abdc:	d0f5      	beq.n	810abca <__any_on+0x2a>
 810abde:	2001      	movs	r0, #1
 810abe0:	e7f6      	b.n	810abd0 <__any_on+0x30>

0810abe2 <_calloc_r>:
 810abe2:	b513      	push	{r0, r1, r4, lr}
 810abe4:	434a      	muls	r2, r1
 810abe6:	4611      	mov	r1, r2
 810abe8:	9201      	str	r2, [sp, #4]
 810abea:	f7fc f873 	bl	8106cd4 <_malloc_r>
 810abee:	4604      	mov	r4, r0
 810abf0:	b118      	cbz	r0, 810abfa <_calloc_r+0x18>
 810abf2:	9a01      	ldr	r2, [sp, #4]
 810abf4:	2100      	movs	r1, #0
 810abf6:	f7fc f814 	bl	8106c22 <memset>
 810abfa:	4620      	mov	r0, r4
 810abfc:	b002      	add	sp, #8
 810abfe:	bd10      	pop	{r4, pc}

0810ac00 <__ssputs_r>:
 810ac00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ac04:	688e      	ldr	r6, [r1, #8]
 810ac06:	429e      	cmp	r6, r3
 810ac08:	4682      	mov	sl, r0
 810ac0a:	460c      	mov	r4, r1
 810ac0c:	4690      	mov	r8, r2
 810ac0e:	461f      	mov	r7, r3
 810ac10:	d838      	bhi.n	810ac84 <__ssputs_r+0x84>
 810ac12:	898a      	ldrh	r2, [r1, #12]
 810ac14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810ac18:	d032      	beq.n	810ac80 <__ssputs_r+0x80>
 810ac1a:	6825      	ldr	r5, [r4, #0]
 810ac1c:	6909      	ldr	r1, [r1, #16]
 810ac1e:	eba5 0901 	sub.w	r9, r5, r1
 810ac22:	6965      	ldr	r5, [r4, #20]
 810ac24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810ac28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810ac2c:	3301      	adds	r3, #1
 810ac2e:	444b      	add	r3, r9
 810ac30:	106d      	asrs	r5, r5, #1
 810ac32:	429d      	cmp	r5, r3
 810ac34:	bf38      	it	cc
 810ac36:	461d      	movcc	r5, r3
 810ac38:	0553      	lsls	r3, r2, #21
 810ac3a:	d531      	bpl.n	810aca0 <__ssputs_r+0xa0>
 810ac3c:	4629      	mov	r1, r5
 810ac3e:	f7fc f849 	bl	8106cd4 <_malloc_r>
 810ac42:	4606      	mov	r6, r0
 810ac44:	b950      	cbnz	r0, 810ac5c <__ssputs_r+0x5c>
 810ac46:	230c      	movs	r3, #12
 810ac48:	f8ca 3000 	str.w	r3, [sl]
 810ac4c:	89a3      	ldrh	r3, [r4, #12]
 810ac4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810ac52:	81a3      	strh	r3, [r4, #12]
 810ac54:	f04f 30ff 	mov.w	r0, #4294967295
 810ac58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810ac5c:	6921      	ldr	r1, [r4, #16]
 810ac5e:	464a      	mov	r2, r9
 810ac60:	f7ff faea 	bl	810a238 <memcpy>
 810ac64:	89a3      	ldrh	r3, [r4, #12]
 810ac66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810ac6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810ac6e:	81a3      	strh	r3, [r4, #12]
 810ac70:	6126      	str	r6, [r4, #16]
 810ac72:	6165      	str	r5, [r4, #20]
 810ac74:	444e      	add	r6, r9
 810ac76:	eba5 0509 	sub.w	r5, r5, r9
 810ac7a:	6026      	str	r6, [r4, #0]
 810ac7c:	60a5      	str	r5, [r4, #8]
 810ac7e:	463e      	mov	r6, r7
 810ac80:	42be      	cmp	r6, r7
 810ac82:	d900      	bls.n	810ac86 <__ssputs_r+0x86>
 810ac84:	463e      	mov	r6, r7
 810ac86:	4632      	mov	r2, r6
 810ac88:	6820      	ldr	r0, [r4, #0]
 810ac8a:	4641      	mov	r1, r8
 810ac8c:	f000 fafa 	bl	810b284 <memmove>
 810ac90:	68a3      	ldr	r3, [r4, #8]
 810ac92:	6822      	ldr	r2, [r4, #0]
 810ac94:	1b9b      	subs	r3, r3, r6
 810ac96:	4432      	add	r2, r6
 810ac98:	60a3      	str	r3, [r4, #8]
 810ac9a:	6022      	str	r2, [r4, #0]
 810ac9c:	2000      	movs	r0, #0
 810ac9e:	e7db      	b.n	810ac58 <__ssputs_r+0x58>
 810aca0:	462a      	mov	r2, r5
 810aca2:	f000 fb09 	bl	810b2b8 <_realloc_r>
 810aca6:	4606      	mov	r6, r0
 810aca8:	2800      	cmp	r0, #0
 810acaa:	d1e1      	bne.n	810ac70 <__ssputs_r+0x70>
 810acac:	6921      	ldr	r1, [r4, #16]
 810acae:	4650      	mov	r0, sl
 810acb0:	f7fb ffc0 	bl	8106c34 <_free_r>
 810acb4:	e7c7      	b.n	810ac46 <__ssputs_r+0x46>
	...

0810acb8 <_svfiprintf_r>:
 810acb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810acbc:	4698      	mov	r8, r3
 810acbe:	898b      	ldrh	r3, [r1, #12]
 810acc0:	061b      	lsls	r3, r3, #24
 810acc2:	b09d      	sub	sp, #116	; 0x74
 810acc4:	4607      	mov	r7, r0
 810acc6:	460d      	mov	r5, r1
 810acc8:	4614      	mov	r4, r2
 810acca:	d50e      	bpl.n	810acea <_svfiprintf_r+0x32>
 810accc:	690b      	ldr	r3, [r1, #16]
 810acce:	b963      	cbnz	r3, 810acea <_svfiprintf_r+0x32>
 810acd0:	2140      	movs	r1, #64	; 0x40
 810acd2:	f7fb ffff 	bl	8106cd4 <_malloc_r>
 810acd6:	6028      	str	r0, [r5, #0]
 810acd8:	6128      	str	r0, [r5, #16]
 810acda:	b920      	cbnz	r0, 810ace6 <_svfiprintf_r+0x2e>
 810acdc:	230c      	movs	r3, #12
 810acde:	603b      	str	r3, [r7, #0]
 810ace0:	f04f 30ff 	mov.w	r0, #4294967295
 810ace4:	e0d1      	b.n	810ae8a <_svfiprintf_r+0x1d2>
 810ace6:	2340      	movs	r3, #64	; 0x40
 810ace8:	616b      	str	r3, [r5, #20]
 810acea:	2300      	movs	r3, #0
 810acec:	9309      	str	r3, [sp, #36]	; 0x24
 810acee:	2320      	movs	r3, #32
 810acf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810acf4:	f8cd 800c 	str.w	r8, [sp, #12]
 810acf8:	2330      	movs	r3, #48	; 0x30
 810acfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810aea4 <_svfiprintf_r+0x1ec>
 810acfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810ad02:	f04f 0901 	mov.w	r9, #1
 810ad06:	4623      	mov	r3, r4
 810ad08:	469a      	mov	sl, r3
 810ad0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ad0e:	b10a      	cbz	r2, 810ad14 <_svfiprintf_r+0x5c>
 810ad10:	2a25      	cmp	r2, #37	; 0x25
 810ad12:	d1f9      	bne.n	810ad08 <_svfiprintf_r+0x50>
 810ad14:	ebba 0b04 	subs.w	fp, sl, r4
 810ad18:	d00b      	beq.n	810ad32 <_svfiprintf_r+0x7a>
 810ad1a:	465b      	mov	r3, fp
 810ad1c:	4622      	mov	r2, r4
 810ad1e:	4629      	mov	r1, r5
 810ad20:	4638      	mov	r0, r7
 810ad22:	f7ff ff6d 	bl	810ac00 <__ssputs_r>
 810ad26:	3001      	adds	r0, #1
 810ad28:	f000 80aa 	beq.w	810ae80 <_svfiprintf_r+0x1c8>
 810ad2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810ad2e:	445a      	add	r2, fp
 810ad30:	9209      	str	r2, [sp, #36]	; 0x24
 810ad32:	f89a 3000 	ldrb.w	r3, [sl]
 810ad36:	2b00      	cmp	r3, #0
 810ad38:	f000 80a2 	beq.w	810ae80 <_svfiprintf_r+0x1c8>
 810ad3c:	2300      	movs	r3, #0
 810ad3e:	f04f 32ff 	mov.w	r2, #4294967295
 810ad42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ad46:	f10a 0a01 	add.w	sl, sl, #1
 810ad4a:	9304      	str	r3, [sp, #16]
 810ad4c:	9307      	str	r3, [sp, #28]
 810ad4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ad52:	931a      	str	r3, [sp, #104]	; 0x68
 810ad54:	4654      	mov	r4, sl
 810ad56:	2205      	movs	r2, #5
 810ad58:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ad5c:	4851      	ldr	r0, [pc, #324]	; (810aea4 <_svfiprintf_r+0x1ec>)
 810ad5e:	f7f5 fac7 	bl	81002f0 <memchr>
 810ad62:	9a04      	ldr	r2, [sp, #16]
 810ad64:	b9d8      	cbnz	r0, 810ad9e <_svfiprintf_r+0xe6>
 810ad66:	06d0      	lsls	r0, r2, #27
 810ad68:	bf44      	itt	mi
 810ad6a:	2320      	movmi	r3, #32
 810ad6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ad70:	0711      	lsls	r1, r2, #28
 810ad72:	bf44      	itt	mi
 810ad74:	232b      	movmi	r3, #43	; 0x2b
 810ad76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ad7a:	f89a 3000 	ldrb.w	r3, [sl]
 810ad7e:	2b2a      	cmp	r3, #42	; 0x2a
 810ad80:	d015      	beq.n	810adae <_svfiprintf_r+0xf6>
 810ad82:	9a07      	ldr	r2, [sp, #28]
 810ad84:	4654      	mov	r4, sl
 810ad86:	2000      	movs	r0, #0
 810ad88:	f04f 0c0a 	mov.w	ip, #10
 810ad8c:	4621      	mov	r1, r4
 810ad8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ad92:	3b30      	subs	r3, #48	; 0x30
 810ad94:	2b09      	cmp	r3, #9
 810ad96:	d94e      	bls.n	810ae36 <_svfiprintf_r+0x17e>
 810ad98:	b1b0      	cbz	r0, 810adc8 <_svfiprintf_r+0x110>
 810ad9a:	9207      	str	r2, [sp, #28]
 810ad9c:	e014      	b.n	810adc8 <_svfiprintf_r+0x110>
 810ad9e:	eba0 0308 	sub.w	r3, r0, r8
 810ada2:	fa09 f303 	lsl.w	r3, r9, r3
 810ada6:	4313      	orrs	r3, r2
 810ada8:	9304      	str	r3, [sp, #16]
 810adaa:	46a2      	mov	sl, r4
 810adac:	e7d2      	b.n	810ad54 <_svfiprintf_r+0x9c>
 810adae:	9b03      	ldr	r3, [sp, #12]
 810adb0:	1d19      	adds	r1, r3, #4
 810adb2:	681b      	ldr	r3, [r3, #0]
 810adb4:	9103      	str	r1, [sp, #12]
 810adb6:	2b00      	cmp	r3, #0
 810adb8:	bfbb      	ittet	lt
 810adba:	425b      	neglt	r3, r3
 810adbc:	f042 0202 	orrlt.w	r2, r2, #2
 810adc0:	9307      	strge	r3, [sp, #28]
 810adc2:	9307      	strlt	r3, [sp, #28]
 810adc4:	bfb8      	it	lt
 810adc6:	9204      	strlt	r2, [sp, #16]
 810adc8:	7823      	ldrb	r3, [r4, #0]
 810adca:	2b2e      	cmp	r3, #46	; 0x2e
 810adcc:	d10c      	bne.n	810ade8 <_svfiprintf_r+0x130>
 810adce:	7863      	ldrb	r3, [r4, #1]
 810add0:	2b2a      	cmp	r3, #42	; 0x2a
 810add2:	d135      	bne.n	810ae40 <_svfiprintf_r+0x188>
 810add4:	9b03      	ldr	r3, [sp, #12]
 810add6:	1d1a      	adds	r2, r3, #4
 810add8:	681b      	ldr	r3, [r3, #0]
 810adda:	9203      	str	r2, [sp, #12]
 810addc:	2b00      	cmp	r3, #0
 810adde:	bfb8      	it	lt
 810ade0:	f04f 33ff 	movlt.w	r3, #4294967295
 810ade4:	3402      	adds	r4, #2
 810ade6:	9305      	str	r3, [sp, #20]
 810ade8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810aeb4 <_svfiprintf_r+0x1fc>
 810adec:	7821      	ldrb	r1, [r4, #0]
 810adee:	2203      	movs	r2, #3
 810adf0:	4650      	mov	r0, sl
 810adf2:	f7f5 fa7d 	bl	81002f0 <memchr>
 810adf6:	b140      	cbz	r0, 810ae0a <_svfiprintf_r+0x152>
 810adf8:	2340      	movs	r3, #64	; 0x40
 810adfa:	eba0 000a 	sub.w	r0, r0, sl
 810adfe:	fa03 f000 	lsl.w	r0, r3, r0
 810ae02:	9b04      	ldr	r3, [sp, #16]
 810ae04:	4303      	orrs	r3, r0
 810ae06:	3401      	adds	r4, #1
 810ae08:	9304      	str	r3, [sp, #16]
 810ae0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ae0e:	4826      	ldr	r0, [pc, #152]	; (810aea8 <_svfiprintf_r+0x1f0>)
 810ae10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810ae14:	2206      	movs	r2, #6
 810ae16:	f7f5 fa6b 	bl	81002f0 <memchr>
 810ae1a:	2800      	cmp	r0, #0
 810ae1c:	d038      	beq.n	810ae90 <_svfiprintf_r+0x1d8>
 810ae1e:	4b23      	ldr	r3, [pc, #140]	; (810aeac <_svfiprintf_r+0x1f4>)
 810ae20:	bb1b      	cbnz	r3, 810ae6a <_svfiprintf_r+0x1b2>
 810ae22:	9b03      	ldr	r3, [sp, #12]
 810ae24:	3307      	adds	r3, #7
 810ae26:	f023 0307 	bic.w	r3, r3, #7
 810ae2a:	3308      	adds	r3, #8
 810ae2c:	9303      	str	r3, [sp, #12]
 810ae2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ae30:	4433      	add	r3, r6
 810ae32:	9309      	str	r3, [sp, #36]	; 0x24
 810ae34:	e767      	b.n	810ad06 <_svfiprintf_r+0x4e>
 810ae36:	fb0c 3202 	mla	r2, ip, r2, r3
 810ae3a:	460c      	mov	r4, r1
 810ae3c:	2001      	movs	r0, #1
 810ae3e:	e7a5      	b.n	810ad8c <_svfiprintf_r+0xd4>
 810ae40:	2300      	movs	r3, #0
 810ae42:	3401      	adds	r4, #1
 810ae44:	9305      	str	r3, [sp, #20]
 810ae46:	4619      	mov	r1, r3
 810ae48:	f04f 0c0a 	mov.w	ip, #10
 810ae4c:	4620      	mov	r0, r4
 810ae4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810ae52:	3a30      	subs	r2, #48	; 0x30
 810ae54:	2a09      	cmp	r2, #9
 810ae56:	d903      	bls.n	810ae60 <_svfiprintf_r+0x1a8>
 810ae58:	2b00      	cmp	r3, #0
 810ae5a:	d0c5      	beq.n	810ade8 <_svfiprintf_r+0x130>
 810ae5c:	9105      	str	r1, [sp, #20]
 810ae5e:	e7c3      	b.n	810ade8 <_svfiprintf_r+0x130>
 810ae60:	fb0c 2101 	mla	r1, ip, r1, r2
 810ae64:	4604      	mov	r4, r0
 810ae66:	2301      	movs	r3, #1
 810ae68:	e7f0      	b.n	810ae4c <_svfiprintf_r+0x194>
 810ae6a:	ab03      	add	r3, sp, #12
 810ae6c:	9300      	str	r3, [sp, #0]
 810ae6e:	462a      	mov	r2, r5
 810ae70:	4b0f      	ldr	r3, [pc, #60]	; (810aeb0 <_svfiprintf_r+0x1f8>)
 810ae72:	a904      	add	r1, sp, #16
 810ae74:	4638      	mov	r0, r7
 810ae76:	f7fc f827 	bl	8106ec8 <_printf_float>
 810ae7a:	1c42      	adds	r2, r0, #1
 810ae7c:	4606      	mov	r6, r0
 810ae7e:	d1d6      	bne.n	810ae2e <_svfiprintf_r+0x176>
 810ae80:	89ab      	ldrh	r3, [r5, #12]
 810ae82:	065b      	lsls	r3, r3, #25
 810ae84:	f53f af2c 	bmi.w	810ace0 <_svfiprintf_r+0x28>
 810ae88:	9809      	ldr	r0, [sp, #36]	; 0x24
 810ae8a:	b01d      	add	sp, #116	; 0x74
 810ae8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810ae90:	ab03      	add	r3, sp, #12
 810ae92:	9300      	str	r3, [sp, #0]
 810ae94:	462a      	mov	r2, r5
 810ae96:	4b06      	ldr	r3, [pc, #24]	; (810aeb0 <_svfiprintf_r+0x1f8>)
 810ae98:	a904      	add	r1, sp, #16
 810ae9a:	4638      	mov	r0, r7
 810ae9c:	f7fc fab8 	bl	8107410 <_printf_i>
 810aea0:	e7eb      	b.n	810ae7a <_svfiprintf_r+0x1c2>
 810aea2:	bf00      	nop
 810aea4:	0810b8a4 	.word	0x0810b8a4
 810aea8:	0810b8ae 	.word	0x0810b8ae
 810aeac:	08106ec9 	.word	0x08106ec9
 810aeb0:	0810ac01 	.word	0x0810ac01
 810aeb4:	0810b8aa 	.word	0x0810b8aa

0810aeb8 <__sfputc_r>:
 810aeb8:	6893      	ldr	r3, [r2, #8]
 810aeba:	3b01      	subs	r3, #1
 810aebc:	2b00      	cmp	r3, #0
 810aebe:	b410      	push	{r4}
 810aec0:	6093      	str	r3, [r2, #8]
 810aec2:	da08      	bge.n	810aed6 <__sfputc_r+0x1e>
 810aec4:	6994      	ldr	r4, [r2, #24]
 810aec6:	42a3      	cmp	r3, r4
 810aec8:	db01      	blt.n	810aece <__sfputc_r+0x16>
 810aeca:	290a      	cmp	r1, #10
 810aecc:	d103      	bne.n	810aed6 <__sfputc_r+0x1e>
 810aece:	f85d 4b04 	ldr.w	r4, [sp], #4
 810aed2:	f7fd be53 	b.w	8108b7c <__swbuf_r>
 810aed6:	6813      	ldr	r3, [r2, #0]
 810aed8:	1c58      	adds	r0, r3, #1
 810aeda:	6010      	str	r0, [r2, #0]
 810aedc:	7019      	strb	r1, [r3, #0]
 810aede:	4608      	mov	r0, r1
 810aee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 810aee4:	4770      	bx	lr

0810aee6 <__sfputs_r>:
 810aee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aee8:	4606      	mov	r6, r0
 810aeea:	460f      	mov	r7, r1
 810aeec:	4614      	mov	r4, r2
 810aeee:	18d5      	adds	r5, r2, r3
 810aef0:	42ac      	cmp	r4, r5
 810aef2:	d101      	bne.n	810aef8 <__sfputs_r+0x12>
 810aef4:	2000      	movs	r0, #0
 810aef6:	e007      	b.n	810af08 <__sfputs_r+0x22>
 810aef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810aefc:	463a      	mov	r2, r7
 810aefe:	4630      	mov	r0, r6
 810af00:	f7ff ffda 	bl	810aeb8 <__sfputc_r>
 810af04:	1c43      	adds	r3, r0, #1
 810af06:	d1f3      	bne.n	810aef0 <__sfputs_r+0xa>
 810af08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810af0c <_vfiprintf_r>:
 810af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810af10:	460d      	mov	r5, r1
 810af12:	b09d      	sub	sp, #116	; 0x74
 810af14:	4614      	mov	r4, r2
 810af16:	4698      	mov	r8, r3
 810af18:	4606      	mov	r6, r0
 810af1a:	b118      	cbz	r0, 810af24 <_vfiprintf_r+0x18>
 810af1c:	6983      	ldr	r3, [r0, #24]
 810af1e:	b90b      	cbnz	r3, 810af24 <_vfiprintf_r+0x18>
 810af20:	f7fb fdba 	bl	8106a98 <__sinit>
 810af24:	4b89      	ldr	r3, [pc, #548]	; (810b14c <_vfiprintf_r+0x240>)
 810af26:	429d      	cmp	r5, r3
 810af28:	d11b      	bne.n	810af62 <_vfiprintf_r+0x56>
 810af2a:	6875      	ldr	r5, [r6, #4]
 810af2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810af2e:	07d9      	lsls	r1, r3, #31
 810af30:	d405      	bmi.n	810af3e <_vfiprintf_r+0x32>
 810af32:	89ab      	ldrh	r3, [r5, #12]
 810af34:	059a      	lsls	r2, r3, #22
 810af36:	d402      	bmi.n	810af3e <_vfiprintf_r+0x32>
 810af38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810af3a:	f7fb fe70 	bl	8106c1e <__retarget_lock_acquire_recursive>
 810af3e:	89ab      	ldrh	r3, [r5, #12]
 810af40:	071b      	lsls	r3, r3, #28
 810af42:	d501      	bpl.n	810af48 <_vfiprintf_r+0x3c>
 810af44:	692b      	ldr	r3, [r5, #16]
 810af46:	b9eb      	cbnz	r3, 810af84 <_vfiprintf_r+0x78>
 810af48:	4629      	mov	r1, r5
 810af4a:	4630      	mov	r0, r6
 810af4c:	f7fd fe7a 	bl	8108c44 <__swsetup_r>
 810af50:	b1c0      	cbz	r0, 810af84 <_vfiprintf_r+0x78>
 810af52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810af54:	07dc      	lsls	r4, r3, #31
 810af56:	d50e      	bpl.n	810af76 <_vfiprintf_r+0x6a>
 810af58:	f04f 30ff 	mov.w	r0, #4294967295
 810af5c:	b01d      	add	sp, #116	; 0x74
 810af5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810af62:	4b7b      	ldr	r3, [pc, #492]	; (810b150 <_vfiprintf_r+0x244>)
 810af64:	429d      	cmp	r5, r3
 810af66:	d101      	bne.n	810af6c <_vfiprintf_r+0x60>
 810af68:	68b5      	ldr	r5, [r6, #8]
 810af6a:	e7df      	b.n	810af2c <_vfiprintf_r+0x20>
 810af6c:	4b79      	ldr	r3, [pc, #484]	; (810b154 <_vfiprintf_r+0x248>)
 810af6e:	429d      	cmp	r5, r3
 810af70:	bf08      	it	eq
 810af72:	68f5      	ldreq	r5, [r6, #12]
 810af74:	e7da      	b.n	810af2c <_vfiprintf_r+0x20>
 810af76:	89ab      	ldrh	r3, [r5, #12]
 810af78:	0598      	lsls	r0, r3, #22
 810af7a:	d4ed      	bmi.n	810af58 <_vfiprintf_r+0x4c>
 810af7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810af7e:	f7fb fe4f 	bl	8106c20 <__retarget_lock_release_recursive>
 810af82:	e7e9      	b.n	810af58 <_vfiprintf_r+0x4c>
 810af84:	2300      	movs	r3, #0
 810af86:	9309      	str	r3, [sp, #36]	; 0x24
 810af88:	2320      	movs	r3, #32
 810af8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810af8e:	f8cd 800c 	str.w	r8, [sp, #12]
 810af92:	2330      	movs	r3, #48	; 0x30
 810af94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810b158 <_vfiprintf_r+0x24c>
 810af98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810af9c:	f04f 0901 	mov.w	r9, #1
 810afa0:	4623      	mov	r3, r4
 810afa2:	469a      	mov	sl, r3
 810afa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 810afa8:	b10a      	cbz	r2, 810afae <_vfiprintf_r+0xa2>
 810afaa:	2a25      	cmp	r2, #37	; 0x25
 810afac:	d1f9      	bne.n	810afa2 <_vfiprintf_r+0x96>
 810afae:	ebba 0b04 	subs.w	fp, sl, r4
 810afb2:	d00b      	beq.n	810afcc <_vfiprintf_r+0xc0>
 810afb4:	465b      	mov	r3, fp
 810afb6:	4622      	mov	r2, r4
 810afb8:	4629      	mov	r1, r5
 810afba:	4630      	mov	r0, r6
 810afbc:	f7ff ff93 	bl	810aee6 <__sfputs_r>
 810afc0:	3001      	adds	r0, #1
 810afc2:	f000 80aa 	beq.w	810b11a <_vfiprintf_r+0x20e>
 810afc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810afc8:	445a      	add	r2, fp
 810afca:	9209      	str	r2, [sp, #36]	; 0x24
 810afcc:	f89a 3000 	ldrb.w	r3, [sl]
 810afd0:	2b00      	cmp	r3, #0
 810afd2:	f000 80a2 	beq.w	810b11a <_vfiprintf_r+0x20e>
 810afd6:	2300      	movs	r3, #0
 810afd8:	f04f 32ff 	mov.w	r2, #4294967295
 810afdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810afe0:	f10a 0a01 	add.w	sl, sl, #1
 810afe4:	9304      	str	r3, [sp, #16]
 810afe6:	9307      	str	r3, [sp, #28]
 810afe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810afec:	931a      	str	r3, [sp, #104]	; 0x68
 810afee:	4654      	mov	r4, sl
 810aff0:	2205      	movs	r2, #5
 810aff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810aff6:	4858      	ldr	r0, [pc, #352]	; (810b158 <_vfiprintf_r+0x24c>)
 810aff8:	f7f5 f97a 	bl	81002f0 <memchr>
 810affc:	9a04      	ldr	r2, [sp, #16]
 810affe:	b9d8      	cbnz	r0, 810b038 <_vfiprintf_r+0x12c>
 810b000:	06d1      	lsls	r1, r2, #27
 810b002:	bf44      	itt	mi
 810b004:	2320      	movmi	r3, #32
 810b006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b00a:	0713      	lsls	r3, r2, #28
 810b00c:	bf44      	itt	mi
 810b00e:	232b      	movmi	r3, #43	; 0x2b
 810b010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b014:	f89a 3000 	ldrb.w	r3, [sl]
 810b018:	2b2a      	cmp	r3, #42	; 0x2a
 810b01a:	d015      	beq.n	810b048 <_vfiprintf_r+0x13c>
 810b01c:	9a07      	ldr	r2, [sp, #28]
 810b01e:	4654      	mov	r4, sl
 810b020:	2000      	movs	r0, #0
 810b022:	f04f 0c0a 	mov.w	ip, #10
 810b026:	4621      	mov	r1, r4
 810b028:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b02c:	3b30      	subs	r3, #48	; 0x30
 810b02e:	2b09      	cmp	r3, #9
 810b030:	d94e      	bls.n	810b0d0 <_vfiprintf_r+0x1c4>
 810b032:	b1b0      	cbz	r0, 810b062 <_vfiprintf_r+0x156>
 810b034:	9207      	str	r2, [sp, #28]
 810b036:	e014      	b.n	810b062 <_vfiprintf_r+0x156>
 810b038:	eba0 0308 	sub.w	r3, r0, r8
 810b03c:	fa09 f303 	lsl.w	r3, r9, r3
 810b040:	4313      	orrs	r3, r2
 810b042:	9304      	str	r3, [sp, #16]
 810b044:	46a2      	mov	sl, r4
 810b046:	e7d2      	b.n	810afee <_vfiprintf_r+0xe2>
 810b048:	9b03      	ldr	r3, [sp, #12]
 810b04a:	1d19      	adds	r1, r3, #4
 810b04c:	681b      	ldr	r3, [r3, #0]
 810b04e:	9103      	str	r1, [sp, #12]
 810b050:	2b00      	cmp	r3, #0
 810b052:	bfbb      	ittet	lt
 810b054:	425b      	neglt	r3, r3
 810b056:	f042 0202 	orrlt.w	r2, r2, #2
 810b05a:	9307      	strge	r3, [sp, #28]
 810b05c:	9307      	strlt	r3, [sp, #28]
 810b05e:	bfb8      	it	lt
 810b060:	9204      	strlt	r2, [sp, #16]
 810b062:	7823      	ldrb	r3, [r4, #0]
 810b064:	2b2e      	cmp	r3, #46	; 0x2e
 810b066:	d10c      	bne.n	810b082 <_vfiprintf_r+0x176>
 810b068:	7863      	ldrb	r3, [r4, #1]
 810b06a:	2b2a      	cmp	r3, #42	; 0x2a
 810b06c:	d135      	bne.n	810b0da <_vfiprintf_r+0x1ce>
 810b06e:	9b03      	ldr	r3, [sp, #12]
 810b070:	1d1a      	adds	r2, r3, #4
 810b072:	681b      	ldr	r3, [r3, #0]
 810b074:	9203      	str	r2, [sp, #12]
 810b076:	2b00      	cmp	r3, #0
 810b078:	bfb8      	it	lt
 810b07a:	f04f 33ff 	movlt.w	r3, #4294967295
 810b07e:	3402      	adds	r4, #2
 810b080:	9305      	str	r3, [sp, #20]
 810b082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810b168 <_vfiprintf_r+0x25c>
 810b086:	7821      	ldrb	r1, [r4, #0]
 810b088:	2203      	movs	r2, #3
 810b08a:	4650      	mov	r0, sl
 810b08c:	f7f5 f930 	bl	81002f0 <memchr>
 810b090:	b140      	cbz	r0, 810b0a4 <_vfiprintf_r+0x198>
 810b092:	2340      	movs	r3, #64	; 0x40
 810b094:	eba0 000a 	sub.w	r0, r0, sl
 810b098:	fa03 f000 	lsl.w	r0, r3, r0
 810b09c:	9b04      	ldr	r3, [sp, #16]
 810b09e:	4303      	orrs	r3, r0
 810b0a0:	3401      	adds	r4, #1
 810b0a2:	9304      	str	r3, [sp, #16]
 810b0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b0a8:	482c      	ldr	r0, [pc, #176]	; (810b15c <_vfiprintf_r+0x250>)
 810b0aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b0ae:	2206      	movs	r2, #6
 810b0b0:	f7f5 f91e 	bl	81002f0 <memchr>
 810b0b4:	2800      	cmp	r0, #0
 810b0b6:	d03f      	beq.n	810b138 <_vfiprintf_r+0x22c>
 810b0b8:	4b29      	ldr	r3, [pc, #164]	; (810b160 <_vfiprintf_r+0x254>)
 810b0ba:	bb1b      	cbnz	r3, 810b104 <_vfiprintf_r+0x1f8>
 810b0bc:	9b03      	ldr	r3, [sp, #12]
 810b0be:	3307      	adds	r3, #7
 810b0c0:	f023 0307 	bic.w	r3, r3, #7
 810b0c4:	3308      	adds	r3, #8
 810b0c6:	9303      	str	r3, [sp, #12]
 810b0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b0ca:	443b      	add	r3, r7
 810b0cc:	9309      	str	r3, [sp, #36]	; 0x24
 810b0ce:	e767      	b.n	810afa0 <_vfiprintf_r+0x94>
 810b0d0:	fb0c 3202 	mla	r2, ip, r2, r3
 810b0d4:	460c      	mov	r4, r1
 810b0d6:	2001      	movs	r0, #1
 810b0d8:	e7a5      	b.n	810b026 <_vfiprintf_r+0x11a>
 810b0da:	2300      	movs	r3, #0
 810b0dc:	3401      	adds	r4, #1
 810b0de:	9305      	str	r3, [sp, #20]
 810b0e0:	4619      	mov	r1, r3
 810b0e2:	f04f 0c0a 	mov.w	ip, #10
 810b0e6:	4620      	mov	r0, r4
 810b0e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b0ec:	3a30      	subs	r2, #48	; 0x30
 810b0ee:	2a09      	cmp	r2, #9
 810b0f0:	d903      	bls.n	810b0fa <_vfiprintf_r+0x1ee>
 810b0f2:	2b00      	cmp	r3, #0
 810b0f4:	d0c5      	beq.n	810b082 <_vfiprintf_r+0x176>
 810b0f6:	9105      	str	r1, [sp, #20]
 810b0f8:	e7c3      	b.n	810b082 <_vfiprintf_r+0x176>
 810b0fa:	fb0c 2101 	mla	r1, ip, r1, r2
 810b0fe:	4604      	mov	r4, r0
 810b100:	2301      	movs	r3, #1
 810b102:	e7f0      	b.n	810b0e6 <_vfiprintf_r+0x1da>
 810b104:	ab03      	add	r3, sp, #12
 810b106:	9300      	str	r3, [sp, #0]
 810b108:	462a      	mov	r2, r5
 810b10a:	4b16      	ldr	r3, [pc, #88]	; (810b164 <_vfiprintf_r+0x258>)
 810b10c:	a904      	add	r1, sp, #16
 810b10e:	4630      	mov	r0, r6
 810b110:	f7fb feda 	bl	8106ec8 <_printf_float>
 810b114:	4607      	mov	r7, r0
 810b116:	1c78      	adds	r0, r7, #1
 810b118:	d1d6      	bne.n	810b0c8 <_vfiprintf_r+0x1bc>
 810b11a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810b11c:	07d9      	lsls	r1, r3, #31
 810b11e:	d405      	bmi.n	810b12c <_vfiprintf_r+0x220>
 810b120:	89ab      	ldrh	r3, [r5, #12]
 810b122:	059a      	lsls	r2, r3, #22
 810b124:	d402      	bmi.n	810b12c <_vfiprintf_r+0x220>
 810b126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810b128:	f7fb fd7a 	bl	8106c20 <__retarget_lock_release_recursive>
 810b12c:	89ab      	ldrh	r3, [r5, #12]
 810b12e:	065b      	lsls	r3, r3, #25
 810b130:	f53f af12 	bmi.w	810af58 <_vfiprintf_r+0x4c>
 810b134:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b136:	e711      	b.n	810af5c <_vfiprintf_r+0x50>
 810b138:	ab03      	add	r3, sp, #12
 810b13a:	9300      	str	r3, [sp, #0]
 810b13c:	462a      	mov	r2, r5
 810b13e:	4b09      	ldr	r3, [pc, #36]	; (810b164 <_vfiprintf_r+0x258>)
 810b140:	a904      	add	r1, sp, #16
 810b142:	4630      	mov	r0, r6
 810b144:	f7fc f964 	bl	8107410 <_printf_i>
 810b148:	e7e4      	b.n	810b114 <_vfiprintf_r+0x208>
 810b14a:	bf00      	nop
 810b14c:	0810b460 	.word	0x0810b460
 810b150:	0810b480 	.word	0x0810b480
 810b154:	0810b440 	.word	0x0810b440
 810b158:	0810b8a4 	.word	0x0810b8a4
 810b15c:	0810b8ae 	.word	0x0810b8ae
 810b160:	08106ec9 	.word	0x08106ec9
 810b164:	0810aee7 	.word	0x0810aee7
 810b168:	0810b8aa 	.word	0x0810b8aa

0810b16c <_read_r>:
 810b16c:	b538      	push	{r3, r4, r5, lr}
 810b16e:	4d07      	ldr	r5, [pc, #28]	; (810b18c <_read_r+0x20>)
 810b170:	4604      	mov	r4, r0
 810b172:	4608      	mov	r0, r1
 810b174:	4611      	mov	r1, r2
 810b176:	2200      	movs	r2, #0
 810b178:	602a      	str	r2, [r5, #0]
 810b17a:	461a      	mov	r2, r3
 810b17c:	f7f6 fe62 	bl	8101e44 <_read>
 810b180:	1c43      	adds	r3, r0, #1
 810b182:	d102      	bne.n	810b18a <_read_r+0x1e>
 810b184:	682b      	ldr	r3, [r5, #0]
 810b186:	b103      	cbz	r3, 810b18a <_read_r+0x1e>
 810b188:	6023      	str	r3, [r4, #0]
 810b18a:	bd38      	pop	{r3, r4, r5, pc}
 810b18c:	100003f8 	.word	0x100003f8

0810b190 <nan>:
 810b190:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810b198 <nan+0x8>
 810b194:	4770      	bx	lr
 810b196:	bf00      	nop
 810b198:	00000000 	.word	0x00000000
 810b19c:	7ff80000 	.word	0x7ff80000

0810b1a0 <strncmp>:
 810b1a0:	b510      	push	{r4, lr}
 810b1a2:	b16a      	cbz	r2, 810b1c0 <strncmp+0x20>
 810b1a4:	3901      	subs	r1, #1
 810b1a6:	1884      	adds	r4, r0, r2
 810b1a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b1ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810b1b0:	4293      	cmp	r3, r2
 810b1b2:	d103      	bne.n	810b1bc <strncmp+0x1c>
 810b1b4:	42a0      	cmp	r0, r4
 810b1b6:	d001      	beq.n	810b1bc <strncmp+0x1c>
 810b1b8:	2b00      	cmp	r3, #0
 810b1ba:	d1f5      	bne.n	810b1a8 <strncmp+0x8>
 810b1bc:	1a98      	subs	r0, r3, r2
 810b1be:	bd10      	pop	{r4, pc}
 810b1c0:	4610      	mov	r0, r2
 810b1c2:	e7fc      	b.n	810b1be <strncmp+0x1e>

0810b1c4 <__ascii_wctomb>:
 810b1c4:	b149      	cbz	r1, 810b1da <__ascii_wctomb+0x16>
 810b1c6:	2aff      	cmp	r2, #255	; 0xff
 810b1c8:	bf85      	ittet	hi
 810b1ca:	238a      	movhi	r3, #138	; 0x8a
 810b1cc:	6003      	strhi	r3, [r0, #0]
 810b1ce:	700a      	strbls	r2, [r1, #0]
 810b1d0:	f04f 30ff 	movhi.w	r0, #4294967295
 810b1d4:	bf98      	it	ls
 810b1d6:	2001      	movls	r0, #1
 810b1d8:	4770      	bx	lr
 810b1da:	4608      	mov	r0, r1
 810b1dc:	4770      	bx	lr
	...

0810b1e0 <__assert_func>:
 810b1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b1e2:	4614      	mov	r4, r2
 810b1e4:	461a      	mov	r2, r3
 810b1e6:	4b09      	ldr	r3, [pc, #36]	; (810b20c <__assert_func+0x2c>)
 810b1e8:	681b      	ldr	r3, [r3, #0]
 810b1ea:	4605      	mov	r5, r0
 810b1ec:	68d8      	ldr	r0, [r3, #12]
 810b1ee:	b14c      	cbz	r4, 810b204 <__assert_func+0x24>
 810b1f0:	4b07      	ldr	r3, [pc, #28]	; (810b210 <__assert_func+0x30>)
 810b1f2:	9100      	str	r1, [sp, #0]
 810b1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810b1f8:	4906      	ldr	r1, [pc, #24]	; (810b214 <__assert_func+0x34>)
 810b1fa:	462b      	mov	r3, r5
 810b1fc:	f000 f80e 	bl	810b21c <fiprintf>
 810b200:	f000 f880 	bl	810b304 <abort>
 810b204:	4b04      	ldr	r3, [pc, #16]	; (810b218 <__assert_func+0x38>)
 810b206:	461c      	mov	r4, r3
 810b208:	e7f3      	b.n	810b1f2 <__assert_func+0x12>
 810b20a:	bf00      	nop
 810b20c:	10000010 	.word	0x10000010
 810b210:	0810b8b5 	.word	0x0810b8b5
 810b214:	0810b8c2 	.word	0x0810b8c2
 810b218:	0810b8f0 	.word	0x0810b8f0

0810b21c <fiprintf>:
 810b21c:	b40e      	push	{r1, r2, r3}
 810b21e:	b503      	push	{r0, r1, lr}
 810b220:	4601      	mov	r1, r0
 810b222:	ab03      	add	r3, sp, #12
 810b224:	4805      	ldr	r0, [pc, #20]	; (810b23c <fiprintf+0x20>)
 810b226:	f853 2b04 	ldr.w	r2, [r3], #4
 810b22a:	6800      	ldr	r0, [r0, #0]
 810b22c:	9301      	str	r3, [sp, #4]
 810b22e:	f7ff fe6d 	bl	810af0c <_vfiprintf_r>
 810b232:	b002      	add	sp, #8
 810b234:	f85d eb04 	ldr.w	lr, [sp], #4
 810b238:	b003      	add	sp, #12
 810b23a:	4770      	bx	lr
 810b23c:	10000010 	.word	0x10000010

0810b240 <_fstat_r>:
 810b240:	b538      	push	{r3, r4, r5, lr}
 810b242:	4d07      	ldr	r5, [pc, #28]	; (810b260 <_fstat_r+0x20>)
 810b244:	2300      	movs	r3, #0
 810b246:	4604      	mov	r4, r0
 810b248:	4608      	mov	r0, r1
 810b24a:	4611      	mov	r1, r2
 810b24c:	602b      	str	r3, [r5, #0]
 810b24e:	f7f6 fe3e 	bl	8101ece <_fstat>
 810b252:	1c43      	adds	r3, r0, #1
 810b254:	d102      	bne.n	810b25c <_fstat_r+0x1c>
 810b256:	682b      	ldr	r3, [r5, #0]
 810b258:	b103      	cbz	r3, 810b25c <_fstat_r+0x1c>
 810b25a:	6023      	str	r3, [r4, #0]
 810b25c:	bd38      	pop	{r3, r4, r5, pc}
 810b25e:	bf00      	nop
 810b260:	100003f8 	.word	0x100003f8

0810b264 <_isatty_r>:
 810b264:	b538      	push	{r3, r4, r5, lr}
 810b266:	4d06      	ldr	r5, [pc, #24]	; (810b280 <_isatty_r+0x1c>)
 810b268:	2300      	movs	r3, #0
 810b26a:	4604      	mov	r4, r0
 810b26c:	4608      	mov	r0, r1
 810b26e:	602b      	str	r3, [r5, #0]
 810b270:	f7f6 fe3d 	bl	8101eee <_isatty>
 810b274:	1c43      	adds	r3, r0, #1
 810b276:	d102      	bne.n	810b27e <_isatty_r+0x1a>
 810b278:	682b      	ldr	r3, [r5, #0]
 810b27a:	b103      	cbz	r3, 810b27e <_isatty_r+0x1a>
 810b27c:	6023      	str	r3, [r4, #0]
 810b27e:	bd38      	pop	{r3, r4, r5, pc}
 810b280:	100003f8 	.word	0x100003f8

0810b284 <memmove>:
 810b284:	4288      	cmp	r0, r1
 810b286:	b510      	push	{r4, lr}
 810b288:	eb01 0402 	add.w	r4, r1, r2
 810b28c:	d902      	bls.n	810b294 <memmove+0x10>
 810b28e:	4284      	cmp	r4, r0
 810b290:	4623      	mov	r3, r4
 810b292:	d807      	bhi.n	810b2a4 <memmove+0x20>
 810b294:	1e43      	subs	r3, r0, #1
 810b296:	42a1      	cmp	r1, r4
 810b298:	d008      	beq.n	810b2ac <memmove+0x28>
 810b29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b29e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810b2a2:	e7f8      	b.n	810b296 <memmove+0x12>
 810b2a4:	4402      	add	r2, r0
 810b2a6:	4601      	mov	r1, r0
 810b2a8:	428a      	cmp	r2, r1
 810b2aa:	d100      	bne.n	810b2ae <memmove+0x2a>
 810b2ac:	bd10      	pop	{r4, pc}
 810b2ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810b2b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810b2b6:	e7f7      	b.n	810b2a8 <memmove+0x24>

0810b2b8 <_realloc_r>:
 810b2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b2ba:	4607      	mov	r7, r0
 810b2bc:	4614      	mov	r4, r2
 810b2be:	460e      	mov	r6, r1
 810b2c0:	b921      	cbnz	r1, 810b2cc <_realloc_r+0x14>
 810b2c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810b2c6:	4611      	mov	r1, r2
 810b2c8:	f7fb bd04 	b.w	8106cd4 <_malloc_r>
 810b2cc:	b922      	cbnz	r2, 810b2d8 <_realloc_r+0x20>
 810b2ce:	f7fb fcb1 	bl	8106c34 <_free_r>
 810b2d2:	4625      	mov	r5, r4
 810b2d4:	4628      	mov	r0, r5
 810b2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b2d8:	f000 f81b 	bl	810b312 <_malloc_usable_size_r>
 810b2dc:	42a0      	cmp	r0, r4
 810b2de:	d20f      	bcs.n	810b300 <_realloc_r+0x48>
 810b2e0:	4621      	mov	r1, r4
 810b2e2:	4638      	mov	r0, r7
 810b2e4:	f7fb fcf6 	bl	8106cd4 <_malloc_r>
 810b2e8:	4605      	mov	r5, r0
 810b2ea:	2800      	cmp	r0, #0
 810b2ec:	d0f2      	beq.n	810b2d4 <_realloc_r+0x1c>
 810b2ee:	4631      	mov	r1, r6
 810b2f0:	4622      	mov	r2, r4
 810b2f2:	f7fe ffa1 	bl	810a238 <memcpy>
 810b2f6:	4631      	mov	r1, r6
 810b2f8:	4638      	mov	r0, r7
 810b2fa:	f7fb fc9b 	bl	8106c34 <_free_r>
 810b2fe:	e7e9      	b.n	810b2d4 <_realloc_r+0x1c>
 810b300:	4635      	mov	r5, r6
 810b302:	e7e7      	b.n	810b2d4 <_realloc_r+0x1c>

0810b304 <abort>:
 810b304:	b508      	push	{r3, lr}
 810b306:	2006      	movs	r0, #6
 810b308:	f000 f834 	bl	810b374 <raise>
 810b30c:	2001      	movs	r0, #1
 810b30e:	f7f6 fd8f 	bl	8101e30 <_exit>

0810b312 <_malloc_usable_size_r>:
 810b312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b316:	1f18      	subs	r0, r3, #4
 810b318:	2b00      	cmp	r3, #0
 810b31a:	bfbc      	itt	lt
 810b31c:	580b      	ldrlt	r3, [r1, r0]
 810b31e:	18c0      	addlt	r0, r0, r3
 810b320:	4770      	bx	lr

0810b322 <_raise_r>:
 810b322:	291f      	cmp	r1, #31
 810b324:	b538      	push	{r3, r4, r5, lr}
 810b326:	4604      	mov	r4, r0
 810b328:	460d      	mov	r5, r1
 810b32a:	d904      	bls.n	810b336 <_raise_r+0x14>
 810b32c:	2316      	movs	r3, #22
 810b32e:	6003      	str	r3, [r0, #0]
 810b330:	f04f 30ff 	mov.w	r0, #4294967295
 810b334:	bd38      	pop	{r3, r4, r5, pc}
 810b336:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b338:	b112      	cbz	r2, 810b340 <_raise_r+0x1e>
 810b33a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b33e:	b94b      	cbnz	r3, 810b354 <_raise_r+0x32>
 810b340:	4620      	mov	r0, r4
 810b342:	f000 f831 	bl	810b3a8 <_getpid_r>
 810b346:	462a      	mov	r2, r5
 810b348:	4601      	mov	r1, r0
 810b34a:	4620      	mov	r0, r4
 810b34c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b350:	f000 b818 	b.w	810b384 <_kill_r>
 810b354:	2b01      	cmp	r3, #1
 810b356:	d00a      	beq.n	810b36e <_raise_r+0x4c>
 810b358:	1c59      	adds	r1, r3, #1
 810b35a:	d103      	bne.n	810b364 <_raise_r+0x42>
 810b35c:	2316      	movs	r3, #22
 810b35e:	6003      	str	r3, [r0, #0]
 810b360:	2001      	movs	r0, #1
 810b362:	e7e7      	b.n	810b334 <_raise_r+0x12>
 810b364:	2400      	movs	r4, #0
 810b366:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b36a:	4628      	mov	r0, r5
 810b36c:	4798      	blx	r3
 810b36e:	2000      	movs	r0, #0
 810b370:	e7e0      	b.n	810b334 <_raise_r+0x12>
	...

0810b374 <raise>:
 810b374:	4b02      	ldr	r3, [pc, #8]	; (810b380 <raise+0xc>)
 810b376:	4601      	mov	r1, r0
 810b378:	6818      	ldr	r0, [r3, #0]
 810b37a:	f7ff bfd2 	b.w	810b322 <_raise_r>
 810b37e:	bf00      	nop
 810b380:	10000010 	.word	0x10000010

0810b384 <_kill_r>:
 810b384:	b538      	push	{r3, r4, r5, lr}
 810b386:	4d07      	ldr	r5, [pc, #28]	; (810b3a4 <_kill_r+0x20>)
 810b388:	2300      	movs	r3, #0
 810b38a:	4604      	mov	r4, r0
 810b38c:	4608      	mov	r0, r1
 810b38e:	4611      	mov	r1, r2
 810b390:	602b      	str	r3, [r5, #0]
 810b392:	f7f6 fd3d 	bl	8101e10 <_kill>
 810b396:	1c43      	adds	r3, r0, #1
 810b398:	d102      	bne.n	810b3a0 <_kill_r+0x1c>
 810b39a:	682b      	ldr	r3, [r5, #0]
 810b39c:	b103      	cbz	r3, 810b3a0 <_kill_r+0x1c>
 810b39e:	6023      	str	r3, [r4, #0]
 810b3a0:	bd38      	pop	{r3, r4, r5, pc}
 810b3a2:	bf00      	nop
 810b3a4:	100003f8 	.word	0x100003f8

0810b3a8 <_getpid_r>:
 810b3a8:	f7f6 bd2a 	b.w	8101e00 <_getpid>

0810b3ac <_init>:
 810b3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b3ae:	bf00      	nop
 810b3b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b3b2:	bc08      	pop	{r3}
 810b3b4:	469e      	mov	lr, r3
 810b3b6:	4770      	bx	lr

0810b3b8 <_fini>:
 810b3b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b3ba:	bf00      	nop
 810b3bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b3be:	bc08      	pop	{r3}
 810b3c0:	469e      	mov	lr, r3
 810b3c2:	4770      	bx	lr
