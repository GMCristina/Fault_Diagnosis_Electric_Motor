
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08106c94  08106c94  00016c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08106e90  08106e90  00016e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08106e98  08106e98  00016e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08106e9c  08106e9c  00016e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  08106ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  10000074  08106f14  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000028c  08106f14  0002028c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f583  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003211  00000000  00000000  0003f627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e10  00000000  00000000  00042838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d28  00000000  00000000  00043648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bebe  00000000  00000000  00044370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012bfc  00000000  00000000  0008022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018554a  00000000  00000000  00092e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00218374  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000041b4  00000000  00000000  002183c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106c7c 	.word	0x08106c7c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	08106c7c 	.word	0x08106c7c

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b96e 	b.w	8100674 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9d08      	ldr	r5, [sp, #32]
 81003b6:	4604      	mov	r4, r0
 81003b8:	468c      	mov	ip, r1
 81003ba:	2b00      	cmp	r3, #0
 81003bc:	f040 8083 	bne.w	81004c6 <__udivmoddi4+0x116>
 81003c0:	428a      	cmp	r2, r1
 81003c2:	4617      	mov	r7, r2
 81003c4:	d947      	bls.n	8100456 <__udivmoddi4+0xa6>
 81003c6:	fab2 f282 	clz	r2, r2
 81003ca:	b142      	cbz	r2, 81003de <__udivmoddi4+0x2e>
 81003cc:	f1c2 0020 	rsb	r0, r2, #32
 81003d0:	fa24 f000 	lsr.w	r0, r4, r0
 81003d4:	4091      	lsls	r1, r2
 81003d6:	4097      	lsls	r7, r2
 81003d8:	ea40 0c01 	orr.w	ip, r0, r1
 81003dc:	4094      	lsls	r4, r2
 81003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 81003e2:	0c23      	lsrs	r3, r4, #16
 81003e4:	fbbc f6f8 	udiv	r6, ip, r8
 81003e8:	fa1f fe87 	uxth.w	lr, r7
 81003ec:	fb08 c116 	mls	r1, r8, r6, ip
 81003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81003f4:	fb06 f10e 	mul.w	r1, r6, lr
 81003f8:	4299      	cmp	r1, r3
 81003fa:	d909      	bls.n	8100410 <__udivmoddi4+0x60>
 81003fc:	18fb      	adds	r3, r7, r3
 81003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8100402:	f080 8119 	bcs.w	8100638 <__udivmoddi4+0x288>
 8100406:	4299      	cmp	r1, r3
 8100408:	f240 8116 	bls.w	8100638 <__udivmoddi4+0x288>
 810040c:	3e02      	subs	r6, #2
 810040e:	443b      	add	r3, r7
 8100410:	1a5b      	subs	r3, r3, r1
 8100412:	b2a4      	uxth	r4, r4
 8100414:	fbb3 f0f8 	udiv	r0, r3, r8
 8100418:	fb08 3310 	mls	r3, r8, r0, r3
 810041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100420:	fb00 fe0e 	mul.w	lr, r0, lr
 8100424:	45a6      	cmp	lr, r4
 8100426:	d909      	bls.n	810043c <__udivmoddi4+0x8c>
 8100428:	193c      	adds	r4, r7, r4
 810042a:	f100 33ff 	add.w	r3, r0, #4294967295
 810042e:	f080 8105 	bcs.w	810063c <__udivmoddi4+0x28c>
 8100432:	45a6      	cmp	lr, r4
 8100434:	f240 8102 	bls.w	810063c <__udivmoddi4+0x28c>
 8100438:	3802      	subs	r0, #2
 810043a:	443c      	add	r4, r7
 810043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100440:	eba4 040e 	sub.w	r4, r4, lr
 8100444:	2600      	movs	r6, #0
 8100446:	b11d      	cbz	r5, 8100450 <__udivmoddi4+0xa0>
 8100448:	40d4      	lsrs	r4, r2
 810044a:	2300      	movs	r3, #0
 810044c:	e9c5 4300 	strd	r4, r3, [r5]
 8100450:	4631      	mov	r1, r6
 8100452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100456:	b902      	cbnz	r2, 810045a <__udivmoddi4+0xaa>
 8100458:	deff      	udf	#255	; 0xff
 810045a:	fab2 f282 	clz	r2, r2
 810045e:	2a00      	cmp	r2, #0
 8100460:	d150      	bne.n	8100504 <__udivmoddi4+0x154>
 8100462:	1bcb      	subs	r3, r1, r7
 8100464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100468:	fa1f f887 	uxth.w	r8, r7
 810046c:	2601      	movs	r6, #1
 810046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8100472:	0c21      	lsrs	r1, r4, #16
 8100474:	fb0e 331c 	mls	r3, lr, ip, r3
 8100478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810047c:	fb08 f30c 	mul.w	r3, r8, ip
 8100480:	428b      	cmp	r3, r1
 8100482:	d907      	bls.n	8100494 <__udivmoddi4+0xe4>
 8100484:	1879      	adds	r1, r7, r1
 8100486:	f10c 30ff 	add.w	r0, ip, #4294967295
 810048a:	d202      	bcs.n	8100492 <__udivmoddi4+0xe2>
 810048c:	428b      	cmp	r3, r1
 810048e:	f200 80e9 	bhi.w	8100664 <__udivmoddi4+0x2b4>
 8100492:	4684      	mov	ip, r0
 8100494:	1ac9      	subs	r1, r1, r3
 8100496:	b2a3      	uxth	r3, r4
 8100498:	fbb1 f0fe 	udiv	r0, r1, lr
 810049c:	fb0e 1110 	mls	r1, lr, r0, r1
 81004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81004a4:	fb08 f800 	mul.w	r8, r8, r0
 81004a8:	45a0      	cmp	r8, r4
 81004aa:	d907      	bls.n	81004bc <__udivmoddi4+0x10c>
 81004ac:	193c      	adds	r4, r7, r4
 81004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 81004b2:	d202      	bcs.n	81004ba <__udivmoddi4+0x10a>
 81004b4:	45a0      	cmp	r8, r4
 81004b6:	f200 80d9 	bhi.w	810066c <__udivmoddi4+0x2bc>
 81004ba:	4618      	mov	r0, r3
 81004bc:	eba4 0408 	sub.w	r4, r4, r8
 81004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 81004c4:	e7bf      	b.n	8100446 <__udivmoddi4+0x96>
 81004c6:	428b      	cmp	r3, r1
 81004c8:	d909      	bls.n	81004de <__udivmoddi4+0x12e>
 81004ca:	2d00      	cmp	r5, #0
 81004cc:	f000 80b1 	beq.w	8100632 <__udivmoddi4+0x282>
 81004d0:	2600      	movs	r6, #0
 81004d2:	e9c5 0100 	strd	r0, r1, [r5]
 81004d6:	4630      	mov	r0, r6
 81004d8:	4631      	mov	r1, r6
 81004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81004de:	fab3 f683 	clz	r6, r3
 81004e2:	2e00      	cmp	r6, #0
 81004e4:	d14a      	bne.n	810057c <__udivmoddi4+0x1cc>
 81004e6:	428b      	cmp	r3, r1
 81004e8:	d302      	bcc.n	81004f0 <__udivmoddi4+0x140>
 81004ea:	4282      	cmp	r2, r0
 81004ec:	f200 80b8 	bhi.w	8100660 <__udivmoddi4+0x2b0>
 81004f0:	1a84      	subs	r4, r0, r2
 81004f2:	eb61 0103 	sbc.w	r1, r1, r3
 81004f6:	2001      	movs	r0, #1
 81004f8:	468c      	mov	ip, r1
 81004fa:	2d00      	cmp	r5, #0
 81004fc:	d0a8      	beq.n	8100450 <__udivmoddi4+0xa0>
 81004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8100502:	e7a5      	b.n	8100450 <__udivmoddi4+0xa0>
 8100504:	f1c2 0320 	rsb	r3, r2, #32
 8100508:	fa20 f603 	lsr.w	r6, r0, r3
 810050c:	4097      	lsls	r7, r2
 810050e:	fa01 f002 	lsl.w	r0, r1, r2
 8100512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100516:	40d9      	lsrs	r1, r3
 8100518:	4330      	orrs	r0, r6
 810051a:	0c03      	lsrs	r3, r0, #16
 810051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8100520:	fa1f f887 	uxth.w	r8, r7
 8100524:	fb0e 1116 	mls	r1, lr, r6, r1
 8100528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810052c:	fb06 f108 	mul.w	r1, r6, r8
 8100530:	4299      	cmp	r1, r3
 8100532:	fa04 f402 	lsl.w	r4, r4, r2
 8100536:	d909      	bls.n	810054c <__udivmoddi4+0x19c>
 8100538:	18fb      	adds	r3, r7, r3
 810053a:	f106 3cff 	add.w	ip, r6, #4294967295
 810053e:	f080 808d 	bcs.w	810065c <__udivmoddi4+0x2ac>
 8100542:	4299      	cmp	r1, r3
 8100544:	f240 808a 	bls.w	810065c <__udivmoddi4+0x2ac>
 8100548:	3e02      	subs	r6, #2
 810054a:	443b      	add	r3, r7
 810054c:	1a5b      	subs	r3, r3, r1
 810054e:	b281      	uxth	r1, r0
 8100550:	fbb3 f0fe 	udiv	r0, r3, lr
 8100554:	fb0e 3310 	mls	r3, lr, r0, r3
 8100558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810055c:	fb00 f308 	mul.w	r3, r0, r8
 8100560:	428b      	cmp	r3, r1
 8100562:	d907      	bls.n	8100574 <__udivmoddi4+0x1c4>
 8100564:	1879      	adds	r1, r7, r1
 8100566:	f100 3cff 	add.w	ip, r0, #4294967295
 810056a:	d273      	bcs.n	8100654 <__udivmoddi4+0x2a4>
 810056c:	428b      	cmp	r3, r1
 810056e:	d971      	bls.n	8100654 <__udivmoddi4+0x2a4>
 8100570:	3802      	subs	r0, #2
 8100572:	4439      	add	r1, r7
 8100574:	1acb      	subs	r3, r1, r3
 8100576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 810057a:	e778      	b.n	810046e <__udivmoddi4+0xbe>
 810057c:	f1c6 0c20 	rsb	ip, r6, #32
 8100580:	fa03 f406 	lsl.w	r4, r3, r6
 8100584:	fa22 f30c 	lsr.w	r3, r2, ip
 8100588:	431c      	orrs	r4, r3
 810058a:	fa20 f70c 	lsr.w	r7, r0, ip
 810058e:	fa01 f306 	lsl.w	r3, r1, r6
 8100592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100596:	fa21 f10c 	lsr.w	r1, r1, ip
 810059a:	431f      	orrs	r7, r3
 810059c:	0c3b      	lsrs	r3, r7, #16
 810059e:	fbb1 f9fe 	udiv	r9, r1, lr
 81005a2:	fa1f f884 	uxth.w	r8, r4
 81005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 81005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 81005ae:	fb09 fa08 	mul.w	sl, r9, r8
 81005b2:	458a      	cmp	sl, r1
 81005b4:	fa02 f206 	lsl.w	r2, r2, r6
 81005b8:	fa00 f306 	lsl.w	r3, r0, r6
 81005bc:	d908      	bls.n	81005d0 <__udivmoddi4+0x220>
 81005be:	1861      	adds	r1, r4, r1
 81005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 81005c4:	d248      	bcs.n	8100658 <__udivmoddi4+0x2a8>
 81005c6:	458a      	cmp	sl, r1
 81005c8:	d946      	bls.n	8100658 <__udivmoddi4+0x2a8>
 81005ca:	f1a9 0902 	sub.w	r9, r9, #2
 81005ce:	4421      	add	r1, r4
 81005d0:	eba1 010a 	sub.w	r1, r1, sl
 81005d4:	b2bf      	uxth	r7, r7
 81005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 81005da:	fb0e 1110 	mls	r1, lr, r0, r1
 81005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 81005e2:	fb00 f808 	mul.w	r8, r0, r8
 81005e6:	45b8      	cmp	r8, r7
 81005e8:	d907      	bls.n	81005fa <__udivmoddi4+0x24a>
 81005ea:	19e7      	adds	r7, r4, r7
 81005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 81005f0:	d22e      	bcs.n	8100650 <__udivmoddi4+0x2a0>
 81005f2:	45b8      	cmp	r8, r7
 81005f4:	d92c      	bls.n	8100650 <__udivmoddi4+0x2a0>
 81005f6:	3802      	subs	r0, #2
 81005f8:	4427      	add	r7, r4
 81005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81005fe:	eba7 0708 	sub.w	r7, r7, r8
 8100602:	fba0 8902 	umull	r8, r9, r0, r2
 8100606:	454f      	cmp	r7, r9
 8100608:	46c6      	mov	lr, r8
 810060a:	4649      	mov	r1, r9
 810060c:	d31a      	bcc.n	8100644 <__udivmoddi4+0x294>
 810060e:	d017      	beq.n	8100640 <__udivmoddi4+0x290>
 8100610:	b15d      	cbz	r5, 810062a <__udivmoddi4+0x27a>
 8100612:	ebb3 020e 	subs.w	r2, r3, lr
 8100616:	eb67 0701 	sbc.w	r7, r7, r1
 810061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 810061e:	40f2      	lsrs	r2, r6
 8100620:	ea4c 0202 	orr.w	r2, ip, r2
 8100624:	40f7      	lsrs	r7, r6
 8100626:	e9c5 2700 	strd	r2, r7, [r5]
 810062a:	2600      	movs	r6, #0
 810062c:	4631      	mov	r1, r6
 810062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100632:	462e      	mov	r6, r5
 8100634:	4628      	mov	r0, r5
 8100636:	e70b      	b.n	8100450 <__udivmoddi4+0xa0>
 8100638:	4606      	mov	r6, r0
 810063a:	e6e9      	b.n	8100410 <__udivmoddi4+0x60>
 810063c:	4618      	mov	r0, r3
 810063e:	e6fd      	b.n	810043c <__udivmoddi4+0x8c>
 8100640:	4543      	cmp	r3, r8
 8100642:	d2e5      	bcs.n	8100610 <__udivmoddi4+0x260>
 8100644:	ebb8 0e02 	subs.w	lr, r8, r2
 8100648:	eb69 0104 	sbc.w	r1, r9, r4
 810064c:	3801      	subs	r0, #1
 810064e:	e7df      	b.n	8100610 <__udivmoddi4+0x260>
 8100650:	4608      	mov	r0, r1
 8100652:	e7d2      	b.n	81005fa <__udivmoddi4+0x24a>
 8100654:	4660      	mov	r0, ip
 8100656:	e78d      	b.n	8100574 <__udivmoddi4+0x1c4>
 8100658:	4681      	mov	r9, r0
 810065a:	e7b9      	b.n	81005d0 <__udivmoddi4+0x220>
 810065c:	4666      	mov	r6, ip
 810065e:	e775      	b.n	810054c <__udivmoddi4+0x19c>
 8100660:	4630      	mov	r0, r6
 8100662:	e74a      	b.n	81004fa <__udivmoddi4+0x14a>
 8100664:	f1ac 0c02 	sub.w	ip, ip, #2
 8100668:	4439      	add	r1, r7
 810066a:	e713      	b.n	8100494 <__udivmoddi4+0xe4>
 810066c:	3802      	subs	r0, #2
 810066e:	443c      	add	r4, r7
 8100670:	e724      	b.n	81004bc <__udivmoddi4+0x10c>
 8100672:	bf00      	nop

08100674 <__aeabi_idiv0>:
 8100674:	4770      	bx	lr
 8100676:	bf00      	nop

08100678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100678:	b480      	push	{r7}
 810067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810067c:	4b0b      	ldr	r3, [pc, #44]	; (81006ac <SystemInit+0x34>)
 810067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100682:	4a0a      	ldr	r2, [pc, #40]	; (81006ac <SystemInit+0x34>)
 8100684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810068c:	4b07      	ldr	r3, [pc, #28]	; (81006ac <SystemInit+0x34>)
 810068e:	691b      	ldr	r3, [r3, #16]
 8100690:	4a06      	ldr	r2, [pc, #24]	; (81006ac <SystemInit+0x34>)
 8100692:	f043 0310 	orr.w	r3, r3, #16
 8100696:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100698:	4b04      	ldr	r3, [pc, #16]	; (81006ac <SystemInit+0x34>)
 810069a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810069e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006a0:	bf00      	nop
 81006a2:	46bd      	mov	sp, r7
 81006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a8:	4770      	bx	lr
 81006aa:	bf00      	nop
 81006ac:	e000ed00 	.word	0xe000ed00

081006b0 <ADE9000_Setup>:
#include "main.h"

int8_t flag_read = 0;
int32_t n_int = 0;

void ADE9000_Setup(){
 81006b0:	b580      	push	{r7, lr}
 81006b2:	b082      	sub	sp, #8
 81006b4:	af00      	add	r7, sp, #0
	uint32_t value_reg_32;
	uint16_t value_reg_16;

	// ADDR_PGA_GAIN
	value_reg_16 = 0x0000; //gain all channel 1
 81006b6:	2300      	movs	r3, #0
 81006b8:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_PGA_GAIN,value_reg_16);
 81006ba:	88fb      	ldrh	r3, [r7, #6]
 81006bc:	4619      	mov	r1, r3
 81006be:	f240 40b9 	movw	r0, #1209	; 0x4b9
 81006c2:	f000 f8e5 	bl	8100890 <ADE9000_SPI_Write_16>

	//CONFIG2
	value_reg_16 = 	0x0C00;			//Default High pass corner frequency of 1.25Hz
 81006c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81006ca:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG2,value_reg_16);
 81006cc:	88fb      	ldrh	r3, [r7, #6]
 81006ce:	4619      	mov	r1, r3
 81006d0:	f240 40af 	movw	r0, #1199	; 0x4af
 81006d4:	f000 f8dc 	bl	8100890 <ADE9000_SPI_Write_16>

	//ACCMODE
	value_reg_16= 0x0000;			//3P4W Wye configuration
 81006d8:	2300      	movs	r3, #0
 81006da:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_ACCMODE,value_reg_16);
 81006dc:	88fb      	ldrh	r3, [r7, #6]
 81006de:	4619      	mov	r1, r3
 81006e0:	f240 4092 	movw	r0, #1170	; 0x492
 81006e4:	f000 f8d4 	bl	8100890 <ADE9000_SPI_Write_16>
	//value_reg_16 = 0x1020;//IN, sinc4, stop full, fixed rate, stop, tutti canali(0000)
	//value_reg_16 = 0x0029; //no IN, sinc4, stop full, fixed rate, stop, solo VA (1001)
	//value_reg_16 = 0x0021; //no IN, sinc4, stop full, fixed rate, stop, solo Ia e VA (0001)
	//value_reg_16 = 0x0221; //no IN, LPF, stop full, fixed rate, stop, solo Ia e VA (0001)

	value_reg_16 = 0x0000;
 81006e8:	2300      	movs	r3, #0
 81006ea:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_IN_EN<<12);
	value_reg_16 = value_reg_16 | (WF_SRC<<8);
 81006ec:	88fb      	ldrh	r3, [r7, #6]
 81006ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81006f2:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_MODE<<6);
 81006f4:	88fb      	ldrh	r3, [r7, #6]
 81006f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81006fa:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_CAP_SEL<<5);
 81006fc:	88fb      	ldrh	r3, [r7, #6]
 81006fe:	f043 0320 	orr.w	r3, r3, #32
 8100702:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | BURST_CHAN;
 8100704:	88fb      	ldrh	r3, [r7, #6]
 8100706:	f043 0301 	orr.w	r3, r3, #1
 810070a:	80fb      	strh	r3, [r7, #6]

	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 810070c:	88fb      	ldrh	r3, [r7, #6]
 810070e:	4619      	mov	r1, r3
 8100710:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8100714:	f000 f8bc 	bl	8100890 <ADE9000_SPI_Write_16>
	// 1 bit per pagina: pag15-pag0
	//fa PageFULL in STATUS0

	//value_reg_16 = 0x8000; //page 15
	//value_reg_16 = 0xFFFF; //all page
	value_reg_16 = 0x8080; //page 15, page 7 (metà)
 8100718:	f248 0380 	movw	r3, #32896	; 0x8080
 810071c:	80fb      	strh	r3, [r7, #6]
	//value_reg_16 = 0x0000; //no int
	ADE9000_SPI_Write_16(ADDR_WFB_PG_IRQEN,value_reg_16);
 810071e:	88fb      	ldrh	r3, [r7, #6]
 8100720:	4619      	mov	r1, r3
 8100722:	f240 40a1 	movw	r0, #1185	; 0x4a1
 8100726:	f000 f8b3 	bl	8100890 <ADE9000_SPI_Write_16>

	//ADDR_MASK0
	//IRQ0 per full page (bit 17)
	//quando una delle pagine settate è piena
	value_reg_32 = 0x00020000;
 810072a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810072e:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK0,value_reg_32);
 8100730:	6839      	ldr	r1, [r7, #0]
 8100732:	f240 4005 	movw	r0, #1029	; 0x405
 8100736:	f000 f8df 	bl	81008f8 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK0);
 810073a:	f240 4005 	movw	r0, #1029	; 0x405
 810073e:	f000 f86b 	bl	8100818 <ADE9000_SPI_Read_32>
 8100742:	6038      	str	r0, [r7, #0]

	//ADDR_MASK1
	//disable all int
	value_reg_32 = 0x00000000;
 8100744:	2300      	movs	r3, #0
 8100746:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK1,value_reg_32);
 8100748:	6839      	ldr	r1, [r7, #0]
 810074a:	f240 4006 	movw	r0, #1030	; 0x406
 810074e:	f000 f8d3 	bl	81008f8 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK1);
 8100752:	f240 4006 	movw	r0, #1030	; 0x406
 8100756:	f000 f85f 	bl	8100818 <ADE9000_SPI_Read_32>
 810075a:	6038      	str	r0, [r7, #0]

	//ADDR_RUN
	//Start ADE9000 measurement
	value_reg_16 = 0x0001;
 810075c:	2301      	movs	r3, #1
 810075e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16);
 8100760:	88fb      	ldrh	r3, [r7, #6]
 8100762:	4619      	mov	r1, r3
 8100764:	f44f 6090 	mov.w	r0, #1152	; 0x480
 8100768:	f000 f892 	bl	8100890 <ADE9000_SPI_Write_16>
}
 810076c:	bf00      	nop
 810076e:	3708      	adds	r7, #8
 8100770:	46bd      	mov	sp, r7
 8100772:	bd80      	pop	{r7, pc}

08100774 <ADE9000_Power>:

//power-on sequence
void ADE9000_Power(void){
 8100774:	b580      	push	{r7, lr}
 8100776:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8100778:	2200      	movs	r2, #0
 810077a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810077e:	480c      	ldr	r0, [pc, #48]	; (81007b0 <ADE9000_Power+0x3c>)
 8100780:	f001 fac2 	bl	8101d08 <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8100784:	2200      	movs	r2, #0
 8100786:	f44f 6100 	mov.w	r1, #2048	; 0x800
 810078a:	4809      	ldr	r0, [pc, #36]	; (81007b0 <ADE9000_Power+0x3c>)
 810078c:	f001 fabc 	bl	8101d08 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8100790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8100794:	f000 ffc0 	bl	8101718 <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8100798:	2201      	movs	r2, #1
 810079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 810079e:	4804      	ldr	r0, [pc, #16]	; (81007b0 <ADE9000_Power+0x3c>)
 81007a0:	f001 fab2 	bl	8101d08 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 81007a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81007a8:	f000 ffb6 	bl	8101718 <HAL_Delay>
    } while ((value_reg_32 & 0x00010000)==0);
    //Clear IRQ1
    value_reg_32 = value_reg_32 & 0x00010000;
    ADE9000_SPI_Write_32(ADDR_STATUS1,value_reg_32);
    */
}
 81007ac:	bf00      	nop
 81007ae:	bd80      	pop	{r7, pc}
 81007b0:	58021000 	.word	0x58021000

081007b4 <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 81007b4:	b580      	push	{r7, lr}
 81007b6:	b084      	sub	sp, #16
 81007b8:	af00      	add	r7, sp, #0
 81007ba:	4603      	mov	r3, r0
 81007bc:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81007be:	88fb      	ldrh	r3, [r7, #6]
 81007c0:	011b      	lsls	r3, r3, #4
 81007c2:	b29b      	uxth	r3, r3
 81007c4:	3308      	adds	r3, #8
 81007c6:	b29b      	uxth	r3, r3
 81007c8:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81007ca:	2200      	movs	r2, #0
 81007cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 81007d0:	480f      	ldr	r0, [pc, #60]	; (8100810 <ADE9000_SPI_Read_16+0x5c>)
 81007d2:	f001 fa99 	bl	8101d08 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81007d6:	f107 0108 	add.w	r1, r7, #8
 81007da:	2364      	movs	r3, #100	; 0x64
 81007dc:	2201      	movs	r2, #1
 81007de:	480d      	ldr	r0, [pc, #52]	; (8100814 <ADE9000_SPI_Read_16+0x60>)
 81007e0:	f003 f9a0 	bl	8103b24 <HAL_SPI_Transmit>
 81007e4:	4603      	mov	r3, r0
 81007e6:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 81007e8:	f107 010c 	add.w	r1, r7, #12
 81007ec:	2364      	movs	r3, #100	; 0x64
 81007ee:	2201      	movs	r2, #1
 81007f0:	4808      	ldr	r0, [pc, #32]	; (8100814 <ADE9000_SPI_Read_16+0x60>)
 81007f2:	f003 fb85 	bl	8103f00 <HAL_SPI_Receive>
 81007f6:	4603      	mov	r3, r0
 81007f8:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81007fa:	2201      	movs	r2, #1
 81007fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100800:	4803      	ldr	r0, [pc, #12]	; (8100810 <ADE9000_SPI_Read_16+0x5c>)
 8100802:	f001 fa81 	bl	8101d08 <HAL_GPIO_WritePin>

	return data.data_16;
 8100806:	89bb      	ldrh	r3, [r7, #12]
}
 8100808:	4618      	mov	r0, r3
 810080a:	3710      	adds	r7, #16
 810080c:	46bd      	mov	sp, r7
 810080e:	bd80      	pop	{r7, pc}
 8100810:	58021800 	.word	0x58021800
 8100814:	10000134 	.word	0x10000134

08100818 <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 8100818:	b580      	push	{r7, lr}
 810081a:	b086      	sub	sp, #24
 810081c:	af00      	add	r7, sp, #0
 810081e:	4603      	mov	r3, r0
 8100820:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 8100822:	88fb      	ldrh	r3, [r7, #6]
 8100824:	011b      	lsls	r3, r3, #4
 8100826:	b29b      	uxth	r3, r3
 8100828:	3308      	adds	r3, #8
 810082a:	b29b      	uxth	r3, r3
 810082c:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 810082e:	2200      	movs	r2, #0
 8100830:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100834:	4814      	ldr	r0, [pc, #80]	; (8100888 <ADE9000_SPI_Read_32+0x70>)
 8100836:	f001 fa67 	bl	8101d08 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 810083a:	f107 010c 	add.w	r1, r7, #12
 810083e:	2364      	movs	r3, #100	; 0x64
 8100840:	2201      	movs	r2, #1
 8100842:	4812      	ldr	r0, [pc, #72]	; (810088c <ADE9000_SPI_Read_32+0x74>)
 8100844:	f003 f96e 	bl	8103b24 <HAL_SPI_Transmit>
 8100848:	4603      	mov	r3, r0
 810084a:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi3,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 810084c:	f107 0110 	add.w	r1, r7, #16
 8100850:	3102      	adds	r1, #2
 8100852:	2364      	movs	r3, #100	; 0x64
 8100854:	2201      	movs	r2, #1
 8100856:	480d      	ldr	r0, [pc, #52]	; (810088c <ADE9000_SPI_Read_32+0x74>)
 8100858:	f003 fb52 	bl	8103f00 <HAL_SPI_Receive>
 810085c:	4603      	mov	r3, r0
 810085e:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 8100860:	f107 0110 	add.w	r1, r7, #16
 8100864:	2364      	movs	r3, #100	; 0x64
 8100866:	2201      	movs	r2, #1
 8100868:	4808      	ldr	r0, [pc, #32]	; (810088c <ADE9000_SPI_Read_32+0x74>)
 810086a:	f003 fb49 	bl	8103f00 <HAL_SPI_Receive>
 810086e:	4603      	mov	r3, r0
 8100870:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100872:	2201      	movs	r2, #1
 8100874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100878:	4803      	ldr	r0, [pc, #12]	; (8100888 <ADE9000_SPI_Read_32+0x70>)
 810087a:	f001 fa45 	bl	8101d08 <HAL_GPIO_WritePin>

	return data.data_32;
 810087e:	693b      	ldr	r3, [r7, #16]
}
 8100880:	4618      	mov	r0, r3
 8100882:	3718      	adds	r7, #24
 8100884:	46bd      	mov	sp, r7
 8100886:	bd80      	pop	{r7, pc}
 8100888:	58021800 	.word	0x58021800
 810088c:	10000134 	.word	0x10000134

08100890 <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 8100890:	b580      	push	{r7, lr}
 8100892:	b084      	sub	sp, #16
 8100894:	af00      	add	r7, sp, #0
 8100896:	4603      	mov	r3, r0
 8100898:	460a      	mov	r2, r1
 810089a:	80fb      	strh	r3, [r7, #6]
 810089c:	4613      	mov	r3, r2
 810089e:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 81008a0:	88fb      	ldrh	r3, [r7, #6]
 81008a2:	011b      	lsls	r3, r3, #4
 81008a4:	b29b      	uxth	r3, r3
 81008a6:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81008a8:	2200      	movs	r2, #0
 81008aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 81008ae:	4810      	ldr	r0, [pc, #64]	; (81008f0 <ADE9000_SPI_Write_16+0x60>)
 81008b0:	f001 fa2a 	bl	8101d08 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81008b4:	f107 010c 	add.w	r1, r7, #12
 81008b8:	2364      	movs	r3, #100	; 0x64
 81008ba:	2201      	movs	r2, #1
 81008bc:	480d      	ldr	r0, [pc, #52]	; (81008f4 <ADE9000_SPI_Write_16+0x64>)
 81008be:	f003 f931 	bl	8103b24 <HAL_SPI_Transmit>
 81008c2:	4603      	mov	r3, r0
 81008c4:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 81008c6:	88bb      	ldrh	r3, [r7, #4]
 81008c8:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 81008ca:	f107 0108 	add.w	r1, r7, #8
 81008ce:	2364      	movs	r3, #100	; 0x64
 81008d0:	2201      	movs	r2, #1
 81008d2:	4808      	ldr	r0, [pc, #32]	; (81008f4 <ADE9000_SPI_Write_16+0x64>)
 81008d4:	f003 f926 	bl	8103b24 <HAL_SPI_Transmit>
 81008d8:	4603      	mov	r3, r0
 81008da:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81008dc:	2201      	movs	r2, #1
 81008de:	f44f 7100 	mov.w	r1, #512	; 0x200
 81008e2:	4803      	ldr	r0, [pc, #12]	; (81008f0 <ADE9000_SPI_Write_16+0x60>)
 81008e4:	f001 fa10 	bl	8101d08 <HAL_GPIO_WritePin>

}
 81008e8:	bf00      	nop
 81008ea:	3710      	adds	r7, #16
 81008ec:	46bd      	mov	sp, r7
 81008ee:	bd80      	pop	{r7, pc}
 81008f0:	58021800 	.word	0x58021800
 81008f4:	10000134 	.word	0x10000134

081008f8 <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 81008f8:	b580      	push	{r7, lr}
 81008fa:	b084      	sub	sp, #16
 81008fc:	af00      	add	r7, sp, #0
 81008fe:	4603      	mov	r3, r0
 8100900:	6039      	str	r1, [r7, #0]
 8100902:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8100904:	88fb      	ldrh	r3, [r7, #6]
 8100906:	011b      	lsls	r3, r3, #4
 8100908:	b29b      	uxth	r3, r3
 810090a:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 810090c:	2200      	movs	r2, #0
 810090e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100912:	4815      	ldr	r0, [pc, #84]	; (8100968 <ADE9000_SPI_Write_32+0x70>)
 8100914:	f001 f9f8 	bl	8101d08 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100918:	f107 010c 	add.w	r1, r7, #12
 810091c:	2364      	movs	r3, #100	; 0x64
 810091e:	2201      	movs	r2, #1
 8100920:	4812      	ldr	r0, [pc, #72]	; (810096c <ADE9000_SPI_Write_32+0x74>)
 8100922:	f003 f8ff 	bl	8103b24 <HAL_SPI_Transmit>
 8100926:	4603      	mov	r3, r0
 8100928:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 810092a:	683b      	ldr	r3, [r7, #0]
 810092c:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 810092e:	f107 0108 	add.w	r1, r7, #8
 8100932:	3102      	adds	r1, #2
 8100934:	2364      	movs	r3, #100	; 0x64
 8100936:	2201      	movs	r2, #1
 8100938:	480c      	ldr	r0, [pc, #48]	; (810096c <ADE9000_SPI_Write_32+0x74>)
 810093a:	f003 f8f3 	bl	8103b24 <HAL_SPI_Transmit>
 810093e:	4603      	mov	r3, r0
 8100940:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 8100942:	f107 0108 	add.w	r1, r7, #8
 8100946:	2364      	movs	r3, #100	; 0x64
 8100948:	2201      	movs	r2, #1
 810094a:	4808      	ldr	r0, [pc, #32]	; (810096c <ADE9000_SPI_Write_32+0x74>)
 810094c:	f003 f8ea 	bl	8103b24 <HAL_SPI_Transmit>
 8100950:	4603      	mov	r3, r0
 8100952:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100954:	2201      	movs	r2, #1
 8100956:	f44f 7100 	mov.w	r1, #512	; 0x200
 810095a:	4803      	ldr	r0, [pc, #12]	; (8100968 <ADE9000_SPI_Write_32+0x70>)
 810095c:	f001 f9d4 	bl	8101d08 <HAL_GPIO_WritePin>

}
 8100960:	bf00      	nop
 8100962:	3710      	adds	r7, #16
 8100964:	46bd      	mov	sp, r7
 8100966:	bd80      	pop	{r7, pc}
 8100968:	58021800 	.word	0x58021800
 810096c:	10000134 	.word	0x10000134

08100970 <Start_Waveform_Buffer>:


void Start_Waveform_Buffer() {
 8100970:	b580      	push	{r7, lr}
 8100972:	b082      	sub	sp, #8
 8100974:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 8100976:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810097a:	f7ff ff1b 	bl	81007b4 <ADE9000_SPI_Read_16>
 810097e:	4603      	mov	r3, r0
 8100980:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16|0x0010);
 8100982:	88fb      	ldrh	r3, [r7, #6]
 8100984:	f043 0310 	orr.w	r3, r3, #16
 8100988:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 810098a:	88fb      	ldrh	r3, [r7, #6]
 810098c:	4619      	mov	r1, r3
 810098e:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8100992:	f7ff ff7d 	bl	8100890 <ADE9000_SPI_Write_16>
}
 8100996:	bf00      	nop
 8100998:	3708      	adds	r7, #8
 810099a:	46bd      	mov	sp, r7
 810099c:	bd80      	pop	{r7, pc}

0810099e <Stop_Waveform_Buffer>:

void Stop_Waveform_Buffer(){
 810099e:	b580      	push	{r7, lr}
 81009a0:	b082      	sub	sp, #8
 81009a2:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 81009a4:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81009a8:	f7ff ff04 	bl	81007b4 <ADE9000_SPI_Read_16>
 81009ac:	4603      	mov	r3, r0
 81009ae:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16 & 0xFFEF);
 81009b0:	88fb      	ldrh	r3, [r7, #6]
 81009b2:	f023 0310 	bic.w	r3, r3, #16
 81009b6:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 81009b8:	88fb      	ldrh	r3, [r7, #6]
 81009ba:	4619      	mov	r1, r3
 81009bc:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81009c0:	f7ff ff66 	bl	8100890 <ADE9000_SPI_Write_16>
}
 81009c4:	bf00      	nop
 81009c6:	3708      	adds	r7, #8
 81009c8:	46bd      	mov	sp, r7
 81009ca:	bd80      	pop	{r7, pc}

081009cc <ADE9000_SPI_Burst_Read_two_ch>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_SPI_Burst_Read_two_ch(uint16_t Address, uint16_t n, int32_t* i, int32_t* v){
 81009cc:	b580      	push	{r7, lr}
 81009ce:	b088      	sub	sp, #32
 81009d0:	af00      	add	r7, sp, #0
 81009d2:	60ba      	str	r2, [r7, #8]
 81009d4:	607b      	str	r3, [r7, #4]
 81009d6:	4603      	mov	r3, r0
 81009d8:	81fb      	strh	r3, [r7, #14]
 81009da:	460b      	mov	r3, r1
 81009dc:	81bb      	strh	r3, [r7, #12]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81009de:	89fb      	ldrh	r3, [r7, #14]
 81009e0:	011b      	lsls	r3, r3, #4
 81009e2:	b29b      	uxth	r3, r3
 81009e4:	3308      	adds	r3, #8
 81009e6:	b29b      	uxth	r3, r3
 81009e8:	82bb      	strh	r3, [r7, #20]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81009ea:	2200      	movs	r2, #0
 81009ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 81009f0:	4829      	ldr	r0, [pc, #164]	; (8100a98 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 81009f2:	f001 f989 	bl	8101d08 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81009f6:	f107 0114 	add.w	r1, r7, #20
 81009fa:	2364      	movs	r3, #100	; 0x64
 81009fc:	2201      	movs	r2, #1
 81009fe:	4827      	ldr	r0, [pc, #156]	; (8100a9c <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a00:	f003 f890 	bl	8103b24 <HAL_SPI_Transmit>
 8100a04:	4603      	mov	r3, r0
 8100a06:	777b      	strb	r3, [r7, #29]

	for(uint16_t j=0; j<n; j++){
 8100a08:	2300      	movs	r3, #0
 8100a0a:	83fb      	strh	r3, [r7, #30]
 8100a0c:	e036      	b.n	8100a7c <ADE9000_SPI_Burst_Read_two_ch+0xb0>
		//Receive data

		//NB: CONTROLLARE ORDINE (REGISTRI è I,V)
		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100a0e:	f107 0118 	add.w	r1, r7, #24
 8100a12:	3102      	adds	r1, #2
 8100a14:	2364      	movs	r3, #100	; 0x64
 8100a16:	2201      	movs	r2, #1
 8100a18:	4820      	ldr	r0, [pc, #128]	; (8100a9c <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a1a:	f003 fa71 	bl	8103f00 <HAL_SPI_Receive>
 8100a1e:	4603      	mov	r3, r0
 8100a20:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100a22:	f107 0118 	add.w	r1, r7, #24
 8100a26:	2364      	movs	r3, #100	; 0x64
 8100a28:	2201      	movs	r2, #1
 8100a2a:	481c      	ldr	r0, [pc, #112]	; (8100a9c <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a2c:	f003 fa68 	bl	8103f00 <HAL_SPI_Receive>
 8100a30:	4603      	mov	r3, r0
 8100a32:	777b      	strb	r3, [r7, #29]
		*(i + j)= app.data_32;
 8100a34:	69b9      	ldr	r1, [r7, #24]
 8100a36:	8bfb      	ldrh	r3, [r7, #30]
 8100a38:	009b      	lsls	r3, r3, #2
 8100a3a:	68ba      	ldr	r2, [r7, #8]
 8100a3c:	4413      	add	r3, r2
 8100a3e:	460a      	mov	r2, r1
 8100a40:	601a      	str	r2, [r3, #0]

		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100a42:	f107 0118 	add.w	r1, r7, #24
 8100a46:	3102      	adds	r1, #2
 8100a48:	2364      	movs	r3, #100	; 0x64
 8100a4a:	2201      	movs	r2, #1
 8100a4c:	4813      	ldr	r0, [pc, #76]	; (8100a9c <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a4e:	f003 fa57 	bl	8103f00 <HAL_SPI_Receive>
 8100a52:	4603      	mov	r3, r0
 8100a54:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100a56:	f107 0118 	add.w	r1, r7, #24
 8100a5a:	2364      	movs	r3, #100	; 0x64
 8100a5c:	2201      	movs	r2, #1
 8100a5e:	480f      	ldr	r0, [pc, #60]	; (8100a9c <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 8100a60:	f003 fa4e 	bl	8103f00 <HAL_SPI_Receive>
 8100a64:	4603      	mov	r3, r0
 8100a66:	777b      	strb	r3, [r7, #29]
		*(v + j)= app.data_32;
 8100a68:	69b9      	ldr	r1, [r7, #24]
 8100a6a:	8bfb      	ldrh	r3, [r7, #30]
 8100a6c:	009b      	lsls	r3, r3, #2
 8100a6e:	687a      	ldr	r2, [r7, #4]
 8100a70:	4413      	add	r3, r2
 8100a72:	460a      	mov	r2, r1
 8100a74:	601a      	str	r2, [r3, #0]
	for(uint16_t j=0; j<n; j++){
 8100a76:	8bfb      	ldrh	r3, [r7, #30]
 8100a78:	3301      	adds	r3, #1
 8100a7a:	83fb      	strh	r3, [r7, #30]
 8100a7c:	8bfa      	ldrh	r2, [r7, #30]
 8100a7e:	89bb      	ldrh	r3, [r7, #12]
 8100a80:	429a      	cmp	r2, r3
 8100a82:	d3c4      	bcc.n	8100a0e <ADE9000_SPI_Burst_Read_two_ch+0x42>
	}

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100a84:	2201      	movs	r2, #1
 8100a86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100a8a:	4803      	ldr	r0, [pc, #12]	; (8100a98 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 8100a8c:	f001 f93c 	bl	8101d08 <HAL_GPIO_WritePin>
}
 8100a90:	bf00      	nop
 8100a92:	3720      	adds	r7, #32
 8100a94:	46bd      	mov	sp, r7
 8100a96:	bd80      	pop	{r7, pc}
 8100a98:	58021800 	.word	0x58021800
 8100a9c:	10000134 	.word	0x10000134

08100aa0 <ADE9000_Conv_ADC>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_Conv_ADC(int32_t* data, uint32_t n){
 8100aa0:	b580      	push	{r7, lr}
 8100aa2:	b086      	sub	sp, #24
 8100aa4:	af00      	add	r7, sp, #0
 8100aa6:	6078      	str	r0, [r7, #4]
 8100aa8:	6039      	str	r1, [r7, #0]
	//printf("conv\r\n");
	int32_t app, err = 0;
 8100aaa:	2300      	movs	r3, #0
 8100aac:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0; i<n; i++){
 8100aae:	2300      	movs	r3, #0
 8100ab0:	60fb      	str	r3, [r7, #12]
 8100ab2:	e02e      	b.n	8100b12 <ADE9000_Conv_ADC+0x72>
		app = *(data + i);
 8100ab4:	68fb      	ldr	r3, [r7, #12]
 8100ab6:	009b      	lsls	r3, r3, #2
 8100ab8:	687a      	ldr	r2, [r7, #4]
 8100aba:	4413      	add	r3, r2
 8100abc:	681b      	ldr	r3, [r3, #0]
 8100abe:	617b      	str	r3, [r7, #20]
		if((app & 0x0000000F)!=0) {
 8100ac0:	697b      	ldr	r3, [r7, #20]
 8100ac2:	f003 030f 	and.w	r3, r3, #15
 8100ac6:	2b00      	cmp	r3, #0
 8100ac8:	d002      	beq.n	8100ad0 <ADE9000_Conv_ADC+0x30>
			//printf("Error code\r\n");
			err +=1;
 8100aca:	693b      	ldr	r3, [r7, #16]
 8100acc:	3301      	adds	r3, #1
 8100ace:	613b      	str	r3, [r7, #16]
		}
		if ((app &0xF0000000)==0xF0000000){
 8100ad0:	697b      	ldr	r3, [r7, #20]
 8100ad2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100ad6:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8100ada:	d105      	bne.n	8100ae8 <ADE9000_Conv_ADC+0x48>
			app = ((app>>4)|0xF0000000);
 8100adc:	697b      	ldr	r3, [r7, #20]
 8100ade:	111b      	asrs	r3, r3, #4
 8100ae0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8100ae4:	617b      	str	r3, [r7, #20]
 8100ae6:	e00b      	b.n	8100b00 <ADE9000_Conv_ADC+0x60>
		}else if((app &0xF0000000)==0x00000000) {
 8100ae8:	697b      	ldr	r3, [r7, #20]
 8100aea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100aee:	2b00      	cmp	r3, #0
 8100af0:	d103      	bne.n	8100afa <ADE9000_Conv_ADC+0x5a>
			app = ((app>>4)|0x00000000);
 8100af2:	697b      	ldr	r3, [r7, #20]
 8100af4:	111b      	asrs	r3, r3, #4
 8100af6:	617b      	str	r3, [r7, #20]
 8100af8:	e002      	b.n	8100b00 <ADE9000_Conv_ADC+0x60>
		}
		else {
			//printf("Error code\r\n");
			err +=1;
 8100afa:	693b      	ldr	r3, [r7, #16]
 8100afc:	3301      	adds	r3, #1
 8100afe:	613b      	str	r3, [r7, #16]
		}
		*(data+i) = app;
 8100b00:	68fb      	ldr	r3, [r7, #12]
 8100b02:	009b      	lsls	r3, r3, #2
 8100b04:	687a      	ldr	r2, [r7, #4]
 8100b06:	4413      	add	r3, r2
 8100b08:	697a      	ldr	r2, [r7, #20]
 8100b0a:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<n; i++){
 8100b0c:	68fb      	ldr	r3, [r7, #12]
 8100b0e:	3301      	adds	r3, #1
 8100b10:	60fb      	str	r3, [r7, #12]
 8100b12:	68fa      	ldr	r2, [r7, #12]
 8100b14:	683b      	ldr	r3, [r7, #0]
 8100b16:	429a      	cmp	r2, r3
 8100b18:	d3cc      	bcc.n	8100ab4 <ADE9000_Conv_ADC+0x14>

	}
	printf("errori: %d\r\n",err);
 8100b1a:	6939      	ldr	r1, [r7, #16]
 8100b1c:	4803      	ldr	r0, [pc, #12]	; (8100b2c <ADE9000_Conv_ADC+0x8c>)
 8100b1e:	f005 f8e1 	bl	8105ce4 <iprintf>

}
 8100b22:	bf00      	nop
 8100b24:	3718      	adds	r7, #24
 8100b26:	46bd      	mov	sp, r7
 8100b28:	bd80      	pop	{r7, pc}
 8100b2a:	bf00      	nop
 8100b2c:	08106d38 	.word	0x08106d38

08100b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100b30:	b580      	push	{r7, lr}
 8100b32:	f5ad 3d80 	sub.w	sp, sp, #65536	; 0x10000
 8100b36:	b086      	sub	sp, #24
 8100b38:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100b3a:	4bd5      	ldr	r3, [pc, #852]	; (8100e90 <main+0x360>)
 8100b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b40:	4ad3      	ldr	r2, [pc, #844]	; (8100e90 <main+0x360>)
 8100b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b4a:	4bd1      	ldr	r3, [pc, #836]	; (8100e90 <main+0x360>)
 8100b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b50:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8100b54:	f107 0318 	add.w	r3, r7, #24
 8100b58:	3b18      	subs	r3, #24
 8100b5a:	601a      	str	r2, [r3, #0]
 8100b5c:	f107 0318 	add.w	r3, r7, #24
 8100b60:	3b18      	subs	r3, #24
 8100b62:	681b      	ldr	r3, [r3, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b64:	2001      	movs	r0, #1
 8100b66:	f001 f903 	bl	8101d70 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100b6a:	f001 f98d 	bl	8101e88 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100b6e:	2201      	movs	r2, #1
 8100b70:	2102      	movs	r1, #2
 8100b72:	2000      	movs	r0, #0
 8100b74:	f001 f90e 	bl	8101d94 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100b78:	4bc6      	ldr	r3, [pc, #792]	; (8100e94 <main+0x364>)
 8100b7a:	681b      	ldr	r3, [r3, #0]
 8100b7c:	091b      	lsrs	r3, r3, #4
 8100b7e:	f003 030f 	and.w	r3, r3, #15
 8100b82:	2b07      	cmp	r3, #7
 8100b84:	d108      	bne.n	8100b98 <main+0x68>
 8100b86:	4bc4      	ldr	r3, [pc, #784]	; (8100e98 <main+0x368>)
 8100b88:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100b8c:	4ac2      	ldr	r2, [pc, #776]	; (8100e98 <main+0x368>)
 8100b8e:	f043 0301 	orr.w	r3, r3, #1
 8100b92:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100b96:	e007      	b.n	8100ba8 <main+0x78>
 8100b98:	4bbf      	ldr	r3, [pc, #764]	; (8100e98 <main+0x368>)
 8100b9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100b9e:	4abe      	ldr	r2, [pc, #760]	; (8100e98 <main+0x368>)
 8100ba0:	f043 0301 	orr.w	r3, r3, #1
 8100ba4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100ba8:	f000 fd02 	bl	81015b0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100bac:	f000 fa2e 	bl	810100c <MX_GPIO_Init>
  MX_SPI3_Init();
 8100bb0:	f000 f98a 	bl	8100ec8 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8100bb4:	f000 f9de 	bl	8100f74 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  ADE9000_Power();
 8100bb8:	f7ff fddc 	bl	8100774 <ADE9000_Power>

  ADE9000_Setup();
 8100bbc:	f7ff fd78 	bl	81006b0 <ADE9000_Setup>

  printf("Start buffer\r\n");
 8100bc0:	48b6      	ldr	r0, [pc, #728]	; (8100e9c <main+0x36c>)
 8100bc2:	f005 f915 	bl	8105df0 <puts>
  Start_Waveform_Buffer();
 8100bc6:	f7ff fed3 	bl	8100970 <Start_Waveform_Buffer>
	HAL_Delay(24);
	Stop_Waveform_Buffer();
*/

  int32_t va[N_SAMPLE], ia[N_SAMPLE];
  uint16_t index = 0;
 8100bca:	2300      	movs	r3, #0
 8100bcc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100bd0:	f102 0216 	add.w	r2, r2, #22
 8100bd4:	8013      	strh	r3, [r2, #0]
  printf("%d,%d,%d",N_BUFFER, N_SAMPLE,BURST_READ_N);
 8100bd6:	2380      	movs	r3, #128	; 0x80
 8100bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8100bdc:	2120      	movs	r1, #32
 8100bde:	48b0      	ldr	r0, [pc, #704]	; (8100ea0 <main+0x370>)
 8100be0:	f005 f880 	bl	8105ce4 <iprintf>

  uint32_t start;
  while(index < N_SAMPLE){
 8100be4:	e0f8      	b.n	8100dd8 <main+0x2a8>
 		  while(flag_read == 0){}
 8100be6:	bf00      	nop
 8100be8:	4bae      	ldr	r3, [pc, #696]	; (8100ea4 <main+0x374>)
 8100bea:	f993 3000 	ldrsb.w	r3, [r3]
 8100bee:	2b00      	cmp	r3, #0
 8100bf0:	d0fa      	beq.n	8100be8 <main+0xb8>
		  printf("nint: %d", n_int);
 8100bf2:	4bad      	ldr	r3, [pc, #692]	; (8100ea8 <main+0x378>)
 8100bf4:	681b      	ldr	r3, [r3, #0]
 8100bf6:	4619      	mov	r1, r3
 8100bf8:	48ac      	ldr	r0, [pc, #688]	; (8100eac <main+0x37c>)
 8100bfa:	f005 f873 	bl	8105ce4 <iprintf>
 		  flag_read = 0;
 8100bfe:	4ba9      	ldr	r3, [pc, #676]	; (8100ea4 <main+0x374>)
 8100c00:	2200      	movs	r2, #0
 8100c02:	701a      	strb	r2, [r3, #0]
 		  uint32_t value_reg_32 = 0x00020000;
 8100c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8100c08:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100c0c:	f102 020c 	add.w	r2, r2, #12
 8100c10:	6013      	str	r3, [r2, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8100c12:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100c16:	f103 030c 	add.w	r3, r3, #12
 8100c1a:	6819      	ldr	r1, [r3, #0]
 8100c1c:	f240 4002 	movw	r0, #1026	; 0x402
 8100c20:	f7ff fe6a 	bl	81008f8 <ADE9000_SPI_Write_32>
		  uint16_t value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 8100c24:	f240 40a3 	movw	r0, #1187	; 0x4a3
 8100c28:	f7ff fdc4 	bl	81007b4 <ADE9000_SPI_Read_16>
 8100c2c:	4603      	mov	r3, r0
 8100c2e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100c32:	f102 020a 	add.w	r2, r2, #10
 8100c36:	8013      	strh	r3, [r2, #0]
		  value_reg_16 = (value_reg_16>>12)&0x0F;
 8100c38:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100c3c:	f103 030a 	add.w	r3, r3, #10
 8100c40:	881b      	ldrh	r3, [r3, #0]
 8100c42:	0b1b      	lsrs	r3, r3, #12
 8100c44:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100c48:	f102 020a 	add.w	r2, r2, #10
 8100c4c:	8013      	strh	r3, [r2, #0]
		  printf("pg: %i\r\n",value_reg_16);
 8100c4e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100c52:	f103 030a 	add.w	r3, r3, #10
 8100c56:	881b      	ldrh	r3, [r3, #0]
 8100c58:	4619      	mov	r1, r3
 8100c5a:	4895      	ldr	r0, [pc, #596]	; (8100eb0 <main+0x380>)
 8100c5c:	f005 f842 	bl	8105ce4 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR;
 8100c60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8100c64:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100c68:	f102 0204 	add.w	r2, r2, #4
 8100c6c:	6013      	str	r3, [r2, #0]
 		  ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 8100c6e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100c72:	f103 0304 	add.w	r3, r3, #4
 8100c76:	681b      	ldr	r3, [r3, #0]
 8100c78:	b298      	uxth	r0, r3
 8100c7a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100c7e:	f103 0316 	add.w	r3, r3, #22
 8100c82:	881b      	ldrh	r3, [r3, #0]
 8100c84:	009a      	lsls	r2, r3, #2
 8100c86:	f107 0318 	add.w	r3, r7, #24
 8100c8a:	3b14      	subs	r3, #20
 8100c8c:	1899      	adds	r1, r3, r2
 8100c8e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100c92:	f103 0316 	add.w	r3, r3, #22
 8100c96:	881b      	ldrh	r3, [r3, #0]
 8100c98:	009a      	lsls	r2, r3, #2
 8100c9a:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8100c9e:	f103 0318 	add.w	r3, r3, #24
 8100ca2:	3b14      	subs	r3, #20
 8100ca4:	4413      	add	r3, r2
 8100ca6:	460a      	mov	r2, r1
 8100ca8:	2180      	movs	r1, #128	; 0x80
 8100caa:	f7ff fe8f 	bl	81009cc <ADE9000_SPI_Burst_Read_two_ch>
 		  printf("Read from 0x%x\r\n", start);
 8100cae:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100cb2:	f103 0304 	add.w	r3, r3, #4
 8100cb6:	6819      	ldr	r1, [r3, #0]
 8100cb8:	487e      	ldr	r0, [pc, #504]	; (8100eb4 <main+0x384>)
 8100cba:	f005 f813 	bl	8105ce4 <iprintf>
 		  printf("Write on index %d\r\n",index);
 8100cbe:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100cc2:	f103 0316 	add.w	r3, r3, #22
 8100cc6:	881b      	ldrh	r3, [r3, #0]
 8100cc8:	4619      	mov	r1, r3
 8100cca:	487b      	ldr	r0, [pc, #492]	; (8100eb8 <main+0x388>)
 8100ccc:	f005 f80a 	bl	8105ce4 <iprintf>
 		  index += BURST_READ_N;
 8100cd0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100cd4:	f103 0316 	add.w	r3, r3, #22
 8100cd8:	881b      	ldrh	r3, [r3, #0]
 8100cda:	3380      	adds	r3, #128	; 0x80
 8100cdc:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100ce0:	f102 0216 	add.w	r2, r2, #22
 8100ce4:	8013      	strh	r3, [r2, #0]
 		  while(flag_read == 0){}
 8100ce6:	bf00      	nop
 8100ce8:	4b6e      	ldr	r3, [pc, #440]	; (8100ea4 <main+0x374>)
 8100cea:	f993 3000 	ldrsb.w	r3, [r3]
 8100cee:	2b00      	cmp	r3, #0
 8100cf0:	d0fa      	beq.n	8100ce8 <main+0x1b8>
 		  printf("nint: %d", n_int);
 8100cf2:	4b6d      	ldr	r3, [pc, #436]	; (8100ea8 <main+0x378>)
 8100cf4:	681b      	ldr	r3, [r3, #0]
 8100cf6:	4619      	mov	r1, r3
 8100cf8:	486c      	ldr	r0, [pc, #432]	; (8100eac <main+0x37c>)
 8100cfa:	f004 fff3 	bl	8105ce4 <iprintf>
 		  flag_read = 0;
 8100cfe:	4b69      	ldr	r3, [pc, #420]	; (8100ea4 <main+0x374>)
 8100d00:	2200      	movs	r2, #0
 8100d02:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8100d04:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100d08:	f103 030c 	add.w	r3, r3, #12
 8100d0c:	6819      	ldr	r1, [r3, #0]
 8100d0e:	f240 4002 	movw	r0, #1026	; 0x402
 8100d12:	f7ff fdf1 	bl	81008f8 <ADE9000_SPI_Write_32>
 		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 8100d16:	f240 40a3 	movw	r0, #1187	; 0x4a3
 8100d1a:	f7ff fd4b 	bl	81007b4 <ADE9000_SPI_Read_16>
 8100d1e:	4603      	mov	r3, r0
 8100d20:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100d24:	f102 020a 	add.w	r2, r2, #10
 8100d28:	8013      	strh	r3, [r2, #0]
 		  value_reg_16 = (value_reg_16>>12)&0x0F;
 8100d2a:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100d2e:	f103 030a 	add.w	r3, r3, #10
 8100d32:	881b      	ldrh	r3, [r3, #0]
 8100d34:	0b1b      	lsrs	r3, r3, #12
 8100d36:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100d3a:	f102 020a 	add.w	r2, r2, #10
 8100d3e:	8013      	strh	r3, [r2, #0]
 		  printf("pg: %i\r\n",value_reg_16);
 8100d40:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100d44:	f103 030a 	add.w	r3, r3, #10
 8100d48:	881b      	ldrh	r3, [r3, #0]
 8100d4a:	4619      	mov	r1, r3
 8100d4c:	4858      	ldr	r0, [pc, #352]	; (8100eb0 <main+0x380>)
 8100d4e:	f004 ffc9 	bl	8105ce4 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR + BURST_READ_N*8;
 8100d52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8100d56:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100d5a:	f102 0204 	add.w	r2, r2, #4
 8100d5e:	6013      	str	r3, [r2, #0]
 		  ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 8100d60:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100d64:	f103 0304 	add.w	r3, r3, #4
 8100d68:	681b      	ldr	r3, [r3, #0]
 8100d6a:	b298      	uxth	r0, r3
 8100d6c:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100d70:	f103 0316 	add.w	r3, r3, #22
 8100d74:	881b      	ldrh	r3, [r3, #0]
 8100d76:	009a      	lsls	r2, r3, #2
 8100d78:	f107 0318 	add.w	r3, r7, #24
 8100d7c:	3b14      	subs	r3, #20
 8100d7e:	1899      	adds	r1, r3, r2
 8100d80:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100d84:	f103 0316 	add.w	r3, r3, #22
 8100d88:	881b      	ldrh	r3, [r3, #0]
 8100d8a:	009a      	lsls	r2, r3, #2
 8100d8c:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8100d90:	f103 0318 	add.w	r3, r3, #24
 8100d94:	3b14      	subs	r3, #20
 8100d96:	4413      	add	r3, r2
 8100d98:	460a      	mov	r2, r1
 8100d9a:	2180      	movs	r1, #128	; 0x80
 8100d9c:	f7ff fe16 	bl	81009cc <ADE9000_SPI_Burst_Read_two_ch>
 		  printf("Read from 0x%x\r\n", start);
 8100da0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100da4:	f103 0304 	add.w	r3, r3, #4
 8100da8:	6819      	ldr	r1, [r3, #0]
 8100daa:	4842      	ldr	r0, [pc, #264]	; (8100eb4 <main+0x384>)
 8100dac:	f004 ff9a 	bl	8105ce4 <iprintf>
 		  printf("Write on index %d\r\n",index);
 8100db0:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100db4:	f103 0316 	add.w	r3, r3, #22
 8100db8:	881b      	ldrh	r3, [r3, #0]
 8100dba:	4619      	mov	r1, r3
 8100dbc:	483e      	ldr	r0, [pc, #248]	; (8100eb8 <main+0x388>)
 8100dbe:	f004 ff91 	bl	8105ce4 <iprintf>
 		 index += BURST_READ_N;
 8100dc2:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100dc6:	f103 0316 	add.w	r3, r3, #22
 8100dca:	881b      	ldrh	r3, [r3, #0]
 8100dcc:	3380      	adds	r3, #128	; 0x80
 8100dce:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100dd2:	f102 0216 	add.w	r2, r2, #22
 8100dd6:	8013      	strh	r3, [r2, #0]
  while(index < N_SAMPLE){
 8100dd8:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100ddc:	f103 0316 	add.w	r3, r3, #22
 8100de0:	881b      	ldrh	r3, [r3, #0]
 8100de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8100de6:	f4ff aefe 	bcc.w	8100be6 <main+0xb6>
 }
  Stop_Waveform_Buffer();
 8100dea:	f7ff fdd8 	bl	810099e <Stop_Waveform_Buffer>
  printf("Conv 1 sec\r\n");
 8100dee:	4833      	ldr	r0, [pc, #204]	; (8100ebc <main+0x38c>)
 8100df0:	f004 fffe 	bl	8105df0 <puts>
  ADE9000_Conv_ADC(va,N_SAMPLE);
 8100df4:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8100df8:	f103 0318 	add.w	r3, r3, #24
 8100dfc:	3b14      	subs	r3, #20
 8100dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100e02:	4618      	mov	r0, r3
 8100e04:	f7ff fe4c 	bl	8100aa0 <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(ia,N_SAMPLE);
 8100e08:	f107 0318 	add.w	r3, r7, #24
 8100e0c:	3b14      	subs	r3, #20
 8100e0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8100e12:	4618      	mov	r0, r3
 8100e14:	f7ff fe44 	bl	8100aa0 <ADE9000_Conv_ADC>

  HAL_Delay(5000);
 8100e18:	f241 3088 	movw	r0, #5000	; 0x1388
 8100e1c:	f000 fc7c 	bl	8101718 <HAL_Delay>
  printf("VA,IA\r\n");
 8100e20:	4827      	ldr	r0, [pc, #156]	; (8100ec0 <main+0x390>)
 8100e22:	f004 ffe5 	bl	8105df0 <puts>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8100e26:	2300      	movs	r3, #0
 8100e28:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100e2c:	f102 0210 	add.w	r2, r2, #16
 8100e30:	6013      	str	r3, [r2, #0]
 8100e32:	e024      	b.n	8100e7e <main+0x34e>
	  printf("%d,%d\r\n",va[i],ia[i]);
 8100e34:	f507 4300 	add.w	r3, r7, #32768	; 0x8000
 8100e38:	f103 0318 	add.w	r3, r3, #24
 8100e3c:	3b14      	subs	r3, #20
 8100e3e:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100e42:	f102 0210 	add.w	r2, r2, #16
 8100e46:	6812      	ldr	r2, [r2, #0]
 8100e48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8100e4c:	f107 0318 	add.w	r3, r7, #24
 8100e50:	3b14      	subs	r3, #20
 8100e52:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100e56:	f102 0210 	add.w	r2, r2, #16
 8100e5a:	6812      	ldr	r2, [r2, #0]
 8100e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e60:	461a      	mov	r2, r3
 8100e62:	4818      	ldr	r0, [pc, #96]	; (8100ec4 <main+0x394>)
 8100e64:	f004 ff3e 	bl	8105ce4 <iprintf>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8100e68:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100e6c:	f103 0310 	add.w	r3, r3, #16
 8100e70:	681b      	ldr	r3, [r3, #0]
 8100e72:	3301      	adds	r3, #1
 8100e74:	f507 3280 	add.w	r2, r7, #65536	; 0x10000
 8100e78:	f102 0210 	add.w	r2, r2, #16
 8100e7c:	6013      	str	r3, [r2, #0]
 8100e7e:	f507 3380 	add.w	r3, r7, #65536	; 0x10000
 8100e82:	f103 0310 	add.w	r3, r3, #16
 8100e86:	681b      	ldr	r3, [r3, #0]
 8100e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8100e8c:	d3d2      	bcc.n	8100e34 <main+0x304>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100e8e:	e7fe      	b.n	8100e8e <main+0x35e>
 8100e90:	58024400 	.word	0x58024400
 8100e94:	e000ed00 	.word	0xe000ed00
 8100e98:	58026400 	.word	0x58026400
 8100e9c:	08106d48 	.word	0x08106d48
 8100ea0:	08106d58 	.word	0x08106d58
 8100ea4:	10000090 	.word	0x10000090
 8100ea8:	10000094 	.word	0x10000094
 8100eac:	08106d64 	.word	0x08106d64
 8100eb0:	08106d70 	.word	0x08106d70
 8100eb4:	08106d7c 	.word	0x08106d7c
 8100eb8:	08106d90 	.word	0x08106d90
 8100ebc:	08106da4 	.word	0x08106da4
 8100ec0:	08106db0 	.word	0x08106db0
 8100ec4:	08106db8 	.word	0x08106db8

08100ec8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8100ec8:	b580      	push	{r7, lr}
 8100eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8100ecc:	4b27      	ldr	r3, [pc, #156]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100ece:	4a28      	ldr	r2, [pc, #160]	; (8100f70 <MX_SPI3_Init+0xa8>)
 8100ed0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8100ed2:	4b26      	ldr	r3, [pc, #152]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100ed4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100ed8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8100eda:	4b24      	ldr	r3, [pc, #144]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100edc:	2200      	movs	r2, #0
 8100ede:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8100ee0:	4b22      	ldr	r3, [pc, #136]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100ee2:	220f      	movs	r2, #15
 8100ee4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100ee6:	4b21      	ldr	r3, [pc, #132]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100ee8:	2200      	movs	r2, #0
 8100eea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100eec:	4b1f      	ldr	r3, [pc, #124]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100eee:	2200      	movs	r2, #0
 8100ef0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8100ef2:	4b1e      	ldr	r3, [pc, #120]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100ef4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8100ef8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8100efa:	4b1c      	ldr	r3, [pc, #112]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100efc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8100f00:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100f02:	4b1a      	ldr	r3, [pc, #104]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f04:	2200      	movs	r2, #0
 8100f06:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8100f08:	4b18      	ldr	r3, [pc, #96]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f0a:	2200      	movs	r2, #0
 8100f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100f0e:	4b17      	ldr	r3, [pc, #92]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f10:	2200      	movs	r2, #0
 8100f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8100f14:	4b15      	ldr	r3, [pc, #84]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f16:	2200      	movs	r2, #0
 8100f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100f1a:	4b14      	ldr	r3, [pc, #80]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100f20:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100f22:	4b12      	ldr	r3, [pc, #72]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f24:	2200      	movs	r2, #0
 8100f26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100f28:	4b10      	ldr	r3, [pc, #64]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f2a:	2200      	movs	r2, #0
 8100f2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f2e:	4b0f      	ldr	r3, [pc, #60]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f30:	2200      	movs	r2, #0
 8100f32:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f34:	4b0d      	ldr	r3, [pc, #52]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f36:	2200      	movs	r2, #0
 8100f38:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100f3a:	4b0c      	ldr	r3, [pc, #48]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f3c:	2200      	movs	r2, #0
 8100f3e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100f40:	4b0a      	ldr	r3, [pc, #40]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f42:	2200      	movs	r2, #0
 8100f44:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100f46:	4b09      	ldr	r3, [pc, #36]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f48:	2200      	movs	r2, #0
 8100f4a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100f4c:	4b07      	ldr	r3, [pc, #28]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f4e:	2200      	movs	r2, #0
 8100f50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100f52:	4b06      	ldr	r3, [pc, #24]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f54:	2200      	movs	r2, #0
 8100f56:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8100f58:	4804      	ldr	r0, [pc, #16]	; (8100f6c <MX_SPI3_Init+0xa4>)
 8100f5a:	f002 fcdd 	bl	8103918 <HAL_SPI_Init>
 8100f5e:	4603      	mov	r3, r0
 8100f60:	2b00      	cmp	r3, #0
 8100f62:	d001      	beq.n	8100f68 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8100f64:	f000 f920 	bl	81011a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8100f68:	bf00      	nop
 8100f6a:	bd80      	pop	{r7, pc}
 8100f6c:	10000134 	.word	0x10000134
 8100f70:	40003c00 	.word	0x40003c00

08100f74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100f74:	b580      	push	{r7, lr}
 8100f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100f78:	4b22      	ldr	r3, [pc, #136]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100f7a:	4a23      	ldr	r2, [pc, #140]	; (8101008 <MX_USART3_UART_Init+0x94>)
 8100f7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100f7e:	4b21      	ldr	r3, [pc, #132]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100f84:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100f86:	4b1f      	ldr	r3, [pc, #124]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100f88:	2200      	movs	r2, #0
 8100f8a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100f8c:	4b1d      	ldr	r3, [pc, #116]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100f8e:	2200      	movs	r2, #0
 8100f90:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100f92:	4b1c      	ldr	r3, [pc, #112]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100f94:	2200      	movs	r2, #0
 8100f96:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100f98:	4b1a      	ldr	r3, [pc, #104]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100f9a:	220c      	movs	r2, #12
 8100f9c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100f9e:	4b19      	ldr	r3, [pc, #100]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100fa0:	2200      	movs	r2, #0
 8100fa2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100fa4:	4b17      	ldr	r3, [pc, #92]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100fa6:	2200      	movs	r2, #0
 8100fa8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100faa:	4b16      	ldr	r3, [pc, #88]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100fac:	2200      	movs	r2, #0
 8100fae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100fb0:	4b14      	ldr	r3, [pc, #80]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100fb2:	2200      	movs	r2, #0
 8100fb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100fb6:	4b13      	ldr	r3, [pc, #76]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100fb8:	2200      	movs	r2, #0
 8100fba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100fbc:	4811      	ldr	r0, [pc, #68]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100fbe:	f003 fd61 	bl	8104a84 <HAL_UART_Init>
 8100fc2:	4603      	mov	r3, r0
 8100fc4:	2b00      	cmp	r3, #0
 8100fc6:	d001      	beq.n	8100fcc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100fc8:	f000 f8ee 	bl	81011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100fcc:	2100      	movs	r1, #0
 8100fce:	480d      	ldr	r0, [pc, #52]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100fd0:	f004 fd8c 	bl	8105aec <HAL_UARTEx_SetTxFifoThreshold>
 8100fd4:	4603      	mov	r3, r0
 8100fd6:	2b00      	cmp	r3, #0
 8100fd8:	d001      	beq.n	8100fde <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100fda:	f000 f8e5 	bl	81011a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100fde:	2100      	movs	r1, #0
 8100fe0:	4808      	ldr	r0, [pc, #32]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100fe2:	f004 fdc1 	bl	8105b68 <HAL_UARTEx_SetRxFifoThreshold>
 8100fe6:	4603      	mov	r3, r0
 8100fe8:	2b00      	cmp	r3, #0
 8100fea:	d001      	beq.n	8100ff0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100fec:	f000 f8dc 	bl	81011a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100ff0:	4804      	ldr	r0, [pc, #16]	; (8101004 <MX_USART3_UART_Init+0x90>)
 8100ff2:	f004 fd42 	bl	8105a7a <HAL_UARTEx_DisableFifoMode>
 8100ff6:	4603      	mov	r3, r0
 8100ff8:	2b00      	cmp	r3, #0
 8100ffa:	d001      	beq.n	8101000 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100ffc:	f000 f8d4 	bl	81011a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8101000:	bf00      	nop
 8101002:	bd80      	pop	{r7, pc}
 8101004:	100000a4 	.word	0x100000a4
 8101008:	40004800 	.word	0x40004800

0810100c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 810100c:	b580      	push	{r7, lr}
 810100e:	b08a      	sub	sp, #40	; 0x28
 8101010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101012:	f107 0314 	add.w	r3, r7, #20
 8101016:	2200      	movs	r2, #0
 8101018:	601a      	str	r2, [r3, #0]
 810101a:	605a      	str	r2, [r3, #4]
 810101c:	609a      	str	r2, [r3, #8]
 810101e:	60da      	str	r2, [r3, #12]
 8101020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101022:	4b47      	ldr	r3, [pc, #284]	; (8101140 <MX_GPIO_Init+0x134>)
 8101024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101028:	4a45      	ldr	r2, [pc, #276]	; (8101140 <MX_GPIO_Init+0x134>)
 810102a:	f043 0310 	orr.w	r3, r3, #16
 810102e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101032:	4b43      	ldr	r3, [pc, #268]	; (8101140 <MX_GPIO_Init+0x134>)
 8101034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101038:	f003 0310 	and.w	r3, r3, #16
 810103c:	613b      	str	r3, [r7, #16]
 810103e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101040:	4b3f      	ldr	r3, [pc, #252]	; (8101140 <MX_GPIO_Init+0x134>)
 8101042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101046:	4a3e      	ldr	r2, [pc, #248]	; (8101140 <MX_GPIO_Init+0x134>)
 8101048:	f043 0308 	orr.w	r3, r3, #8
 810104c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101050:	4b3b      	ldr	r3, [pc, #236]	; (8101140 <MX_GPIO_Init+0x134>)
 8101052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101056:	f003 0308 	and.w	r3, r3, #8
 810105a:	60fb      	str	r3, [r7, #12]
 810105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 810105e:	4b38      	ldr	r3, [pc, #224]	; (8101140 <MX_GPIO_Init+0x134>)
 8101060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101064:	4a36      	ldr	r2, [pc, #216]	; (8101140 <MX_GPIO_Init+0x134>)
 8101066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810106a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810106e:	4b34      	ldr	r3, [pc, #208]	; (8101140 <MX_GPIO_Init+0x134>)
 8101070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101078:	60bb      	str	r3, [r7, #8]
 810107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810107c:	4b30      	ldr	r3, [pc, #192]	; (8101140 <MX_GPIO_Init+0x134>)
 810107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101082:	4a2f      	ldr	r2, [pc, #188]	; (8101140 <MX_GPIO_Init+0x134>)
 8101084:	f043 0302 	orr.w	r3, r3, #2
 8101088:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810108c:	4b2c      	ldr	r3, [pc, #176]	; (8101140 <MX_GPIO_Init+0x134>)
 810108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101092:	f003 0302 	and.w	r3, r3, #2
 8101096:	607b      	str	r3, [r7, #4]
 8101098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADE9000_Reset_Pin|ADE9000_PM1_Pin, GPIO_PIN_RESET);
 810109a:	2200      	movs	r2, #0
 810109c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 81010a0:	4828      	ldr	r0, [pc, #160]	; (8101144 <MX_GPIO_Init+0x138>)
 81010a2:	f000 fe31 	bl	8101d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADE9000_CS_GPIO_Port, ADE9000_CS_Pin, GPIO_PIN_SET);
 81010a6:	2201      	movs	r2, #1
 81010a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 81010ac:	4826      	ldr	r0, [pc, #152]	; (8101148 <MX_GPIO_Init+0x13c>)
 81010ae:	f000 fe2b 	bl	8101d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADE9000_Reset_Pin ADE9000_PM1_Pin */
  GPIO_InitStruct.Pin = ADE9000_Reset_Pin|ADE9000_PM1_Pin;
 81010b2:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 81010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81010b8:	2301      	movs	r3, #1
 81010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010bc:	2300      	movs	r3, #0
 81010be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010c0:	2300      	movs	r3, #0
 81010c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81010c4:	f107 0314 	add.w	r3, r7, #20
 81010c8:	4619      	mov	r1, r3
 81010ca:	481e      	ldr	r0, [pc, #120]	; (8101144 <MX_GPIO_Init+0x138>)
 81010cc:	f000 fc6c 	bl	81019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ1_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ1_Pin;
 81010d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 81010d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 81010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010dc:	2300      	movs	r3, #0
 81010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ1_GPIO_Port, &GPIO_InitStruct);
 81010e0:	f107 0314 	add.w	r3, r7, #20
 81010e4:	4619      	mov	r1, r3
 81010e6:	4817      	ldr	r0, [pc, #92]	; (8101144 <MX_GPIO_Init+0x138>)
 81010e8:	f000 fc5e 	bl	81019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_CS_Pin */
  GPIO_InitStruct.Pin = ADE9000_CS_Pin;
 81010ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 81010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81010f2:	2301      	movs	r3, #1
 81010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81010f6:	2300      	movs	r3, #0
 81010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81010fa:	2300      	movs	r3, #0
 81010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADE9000_CS_GPIO_Port, &GPIO_InitStruct);
 81010fe:	f107 0314 	add.w	r3, r7, #20
 8101102:	4619      	mov	r1, r3
 8101104:	4810      	ldr	r0, [pc, #64]	; (8101148 <MX_GPIO_Init+0x13c>)
 8101106:	f000 fc4f 	bl	81019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ0_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ0_Pin;
 810110a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8101110:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8101114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101116:	2300      	movs	r3, #0
 8101118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ0_GPIO_Port, &GPIO_InitStruct);
 810111a:	f107 0314 	add.w	r3, r7, #20
 810111e:	4619      	mov	r1, r3
 8101120:	4809      	ldr	r0, [pc, #36]	; (8101148 <MX_GPIO_Init+0x13c>)
 8101122:	f000 fc41 	bl	81019a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8101126:	2200      	movs	r2, #0
 8101128:	2100      	movs	r1, #0
 810112a:	2028      	movs	r0, #40	; 0x28
 810112c:	f000 fbf3 	bl	8101916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8101130:	2028      	movs	r0, #40	; 0x28
 8101132:	f000 fc0a 	bl	810194a <HAL_NVIC_EnableIRQ>

}
 8101136:	bf00      	nop
 8101138:	3728      	adds	r7, #40	; 0x28
 810113a:	46bd      	mov	sp, r7
 810113c:	bd80      	pop	{r7, pc}
 810113e:	bf00      	nop
 8101140:	58024400 	.word	0x58024400
 8101144:	58021000 	.word	0x58021000
 8101148:	58021800 	.word	0x58021800

0810114c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 810114c:	b580      	push	{r7, lr}
 810114e:	b082      	sub	sp, #8
 8101150:	af00      	add	r7, sp, #0
 8101152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101154:	1d39      	adds	r1, r7, #4
 8101156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810115a:	2201      	movs	r2, #1
 810115c:	4803      	ldr	r0, [pc, #12]	; (810116c <__io_putchar+0x20>)
 810115e:	f003 fce1 	bl	8104b24 <HAL_UART_Transmit>
	return ch;
 8101162:	687b      	ldr	r3, [r7, #4]
}
 8101164:	4618      	mov	r0, r3
 8101166:	3708      	adds	r7, #8
 8101168:	46bd      	mov	sp, r7
 810116a:	bd80      	pop	{r7, pc}
 810116c:	100000a4 	.word	0x100000a4

08101170 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8101170:	b480      	push	{r7}
 8101172:	b083      	sub	sp, #12
 8101174:	af00      	add	r7, sp, #0
 8101176:	4603      	mov	r3, r0
 8101178:	80fb      	strh	r3, [r7, #6]
	// If the interrupt source is pin IRQ0
	if (GPIO_Pin == ADE9000_IRQ0_Pin)
 810117a:	88fb      	ldrh	r3, [r7, #6]
 810117c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101180:	d107      	bne.n	8101192 <HAL_GPIO_EXTI_Callback+0x22>
	{
		//printf("IRQ0s\r\n");
		flag_read = 1;
 8101182:	4b07      	ldr	r3, [pc, #28]	; (81011a0 <HAL_GPIO_EXTI_Callback+0x30>)
 8101184:	2201      	movs	r2, #1
 8101186:	701a      	strb	r2, [r3, #0]
		n_int ++;
 8101188:	4b06      	ldr	r3, [pc, #24]	; (81011a4 <HAL_GPIO_EXTI_Callback+0x34>)
 810118a:	681b      	ldr	r3, [r3, #0]
 810118c:	3301      	adds	r3, #1
 810118e:	4a05      	ldr	r2, [pc, #20]	; (81011a4 <HAL_GPIO_EXTI_Callback+0x34>)
 8101190:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == ADE9000_IRQ1_Pin)
		{
			//printf("IRQ1\r\n");
		}
}
 8101192:	bf00      	nop
 8101194:	370c      	adds	r7, #12
 8101196:	46bd      	mov	sp, r7
 8101198:	f85d 7b04 	ldr.w	r7, [sp], #4
 810119c:	4770      	bx	lr
 810119e:	bf00      	nop
 81011a0:	10000090 	.word	0x10000090
 81011a4:	10000094 	.word	0x10000094

081011a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81011a8:	b480      	push	{r7}
 81011aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81011ac:	b672      	cpsid	i
}
 81011ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81011b0:	e7fe      	b.n	81011b0 <Error_Handler+0x8>
	...

081011b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81011b4:	b480      	push	{r7}
 81011b6:	b083      	sub	sp, #12
 81011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81011ba:	4b0a      	ldr	r3, [pc, #40]	; (81011e4 <HAL_MspInit+0x30>)
 81011bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81011c0:	4a08      	ldr	r2, [pc, #32]	; (81011e4 <HAL_MspInit+0x30>)
 81011c2:	f043 0302 	orr.w	r3, r3, #2
 81011c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81011ca:	4b06      	ldr	r3, [pc, #24]	; (81011e4 <HAL_MspInit+0x30>)
 81011cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81011d0:	f003 0302 	and.w	r3, r3, #2
 81011d4:	607b      	str	r3, [r7, #4]
 81011d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81011d8:	bf00      	nop
 81011da:	370c      	adds	r7, #12
 81011dc:	46bd      	mov	sp, r7
 81011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011e2:	4770      	bx	lr
 81011e4:	58024400 	.word	0x58024400

081011e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 81011e8:	b580      	push	{r7, lr}
 81011ea:	b0b8      	sub	sp, #224	; 0xe0
 81011ec:	af00      	add	r7, sp, #0
 81011ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81011f4:	2200      	movs	r2, #0
 81011f6:	601a      	str	r2, [r3, #0]
 81011f8:	605a      	str	r2, [r3, #4]
 81011fa:	609a      	str	r2, [r3, #8]
 81011fc:	60da      	str	r2, [r3, #12]
 81011fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101200:	f107 0310 	add.w	r3, r7, #16
 8101204:	22bc      	movs	r2, #188	; 0xbc
 8101206:	2100      	movs	r1, #0
 8101208:	4618      	mov	r0, r3
 810120a:	f004 fd63 	bl	8105cd4 <memset>
  if(hspi->Instance==SPI3)
 810120e:	687b      	ldr	r3, [r7, #4]
 8101210:	681b      	ldr	r3, [r3, #0]
 8101212:	4a2f      	ldr	r2, [pc, #188]	; (81012d0 <HAL_SPI_MspInit+0xe8>)
 8101214:	4293      	cmp	r3, r2
 8101216:	d157      	bne.n	81012c8 <HAL_SPI_MspInit+0xe0>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8101218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810121c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 810121e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101222:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101224:	f107 0310 	add.w	r3, r7, #16
 8101228:	4618      	mov	r0, r3
 810122a:	f001 f813 	bl	8102254 <HAL_RCCEx_PeriphCLKConfig>
 810122e:	4603      	mov	r3, r0
 8101230:	2b00      	cmp	r3, #0
 8101232:	d001      	beq.n	8101238 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8101234:	f7ff ffb8 	bl	81011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8101238:	4b26      	ldr	r3, [pc, #152]	; (81012d4 <HAL_SPI_MspInit+0xec>)
 810123a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810123e:	4a25      	ldr	r2, [pc, #148]	; (81012d4 <HAL_SPI_MspInit+0xec>)
 8101240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101244:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101248:	4b22      	ldr	r3, [pc, #136]	; (81012d4 <HAL_SPI_MspInit+0xec>)
 810124a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810124e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8101252:	60fb      	str	r3, [r7, #12]
 8101254:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101256:	4b1f      	ldr	r3, [pc, #124]	; (81012d4 <HAL_SPI_MspInit+0xec>)
 8101258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810125c:	4a1d      	ldr	r2, [pc, #116]	; (81012d4 <HAL_SPI_MspInit+0xec>)
 810125e:	f043 0302 	orr.w	r3, r3, #2
 8101262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101266:	4b1b      	ldr	r3, [pc, #108]	; (81012d4 <HAL_SPI_MspInit+0xec>)
 8101268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810126c:	f003 0302 	and.w	r3, r3, #2
 8101270:	60bb      	str	r3, [r7, #8]
 8101272:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8101274:	2318      	movs	r3, #24
 8101276:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810127a:	2302      	movs	r3, #2
 810127c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101280:	2300      	movs	r3, #0
 8101282:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101286:	2303      	movs	r3, #3
 8101288:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 810128c:	2306      	movs	r3, #6
 810128e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101292:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101296:	4619      	mov	r1, r3
 8101298:	480f      	ldr	r0, [pc, #60]	; (81012d8 <HAL_SPI_MspInit+0xf0>)
 810129a:	f000 fb85 	bl	81019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810129e:	2320      	movs	r3, #32
 81012a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81012a4:	2302      	movs	r3, #2
 81012a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81012aa:	2300      	movs	r3, #0
 81012ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81012b0:	2303      	movs	r3, #3
 81012b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 81012b6:	2307      	movs	r3, #7
 81012b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81012bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81012c0:	4619      	mov	r1, r3
 81012c2:	4805      	ldr	r0, [pc, #20]	; (81012d8 <HAL_SPI_MspInit+0xf0>)
 81012c4:	f000 fb70 	bl	81019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 81012c8:	bf00      	nop
 81012ca:	37e0      	adds	r7, #224	; 0xe0
 81012cc:	46bd      	mov	sp, r7
 81012ce:	bd80      	pop	{r7, pc}
 81012d0:	40003c00 	.word	0x40003c00
 81012d4:	58024400 	.word	0x58024400
 81012d8:	58020400 	.word	0x58020400

081012dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81012dc:	b580      	push	{r7, lr}
 81012de:	b0b8      	sub	sp, #224	; 0xe0
 81012e0:	af00      	add	r7, sp, #0
 81012e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81012e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81012e8:	2200      	movs	r2, #0
 81012ea:	601a      	str	r2, [r3, #0]
 81012ec:	605a      	str	r2, [r3, #4]
 81012ee:	609a      	str	r2, [r3, #8]
 81012f0:	60da      	str	r2, [r3, #12]
 81012f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81012f4:	f107 0310 	add.w	r3, r7, #16
 81012f8:	22bc      	movs	r2, #188	; 0xbc
 81012fa:	2100      	movs	r1, #0
 81012fc:	4618      	mov	r0, r3
 81012fe:	f004 fce9 	bl	8105cd4 <memset>
  if(huart->Instance==USART3)
 8101302:	687b      	ldr	r3, [r7, #4]
 8101304:	681b      	ldr	r3, [r3, #0]
 8101306:	4a25      	ldr	r2, [pc, #148]	; (810139c <HAL_UART_MspInit+0xc0>)
 8101308:	4293      	cmp	r3, r2
 810130a:	d142      	bne.n	8101392 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 810130c:	2302      	movs	r3, #2
 810130e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101310:	2300      	movs	r3, #0
 8101312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101316:	f107 0310 	add.w	r3, r7, #16
 810131a:	4618      	mov	r0, r3
 810131c:	f000 ff9a 	bl	8102254 <HAL_RCCEx_PeriphCLKConfig>
 8101320:	4603      	mov	r3, r0
 8101322:	2b00      	cmp	r3, #0
 8101324:	d001      	beq.n	810132a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101326:	f7ff ff3f 	bl	81011a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810132a:	4b1d      	ldr	r3, [pc, #116]	; (81013a0 <HAL_UART_MspInit+0xc4>)
 810132c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101330:	4a1b      	ldr	r2, [pc, #108]	; (81013a0 <HAL_UART_MspInit+0xc4>)
 8101332:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810133a:	4b19      	ldr	r3, [pc, #100]	; (81013a0 <HAL_UART_MspInit+0xc4>)
 810133c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101344:	60fb      	str	r3, [r7, #12]
 8101346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101348:	4b15      	ldr	r3, [pc, #84]	; (81013a0 <HAL_UART_MspInit+0xc4>)
 810134a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810134e:	4a14      	ldr	r2, [pc, #80]	; (81013a0 <HAL_UART_MspInit+0xc4>)
 8101350:	f043 0308 	orr.w	r3, r3, #8
 8101354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101358:	4b11      	ldr	r3, [pc, #68]	; (81013a0 <HAL_UART_MspInit+0xc4>)
 810135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810135e:	f003 0308 	and.w	r3, r3, #8
 8101362:	60bb      	str	r3, [r7, #8]
 8101364:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101366:	f44f 7340 	mov.w	r3, #768	; 0x300
 810136a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810136e:	2302      	movs	r3, #2
 8101370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101374:	2300      	movs	r3, #0
 8101376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810137a:	2300      	movs	r3, #0
 810137c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101380:	2307      	movs	r3, #7
 8101382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101386:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 810138a:	4619      	mov	r1, r3
 810138c:	4805      	ldr	r0, [pc, #20]	; (81013a4 <HAL_UART_MspInit+0xc8>)
 810138e:	f000 fb0b 	bl	81019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101392:	bf00      	nop
 8101394:	37e0      	adds	r7, #224	; 0xe0
 8101396:	46bd      	mov	sp, r7
 8101398:	bd80      	pop	{r7, pc}
 810139a:	bf00      	nop
 810139c:	40004800 	.word	0x40004800
 81013a0:	58024400 	.word	0x58024400
 81013a4:	58020c00 	.word	0x58020c00

081013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81013a8:	b480      	push	{r7}
 81013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81013ac:	e7fe      	b.n	81013ac <NMI_Handler+0x4>

081013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81013ae:	b480      	push	{r7}
 81013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81013b2:	e7fe      	b.n	81013b2 <HardFault_Handler+0x4>

081013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81013b4:	b480      	push	{r7}
 81013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81013b8:	e7fe      	b.n	81013b8 <MemManage_Handler+0x4>

081013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81013ba:	b480      	push	{r7}
 81013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81013be:	e7fe      	b.n	81013be <BusFault_Handler+0x4>

081013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81013c0:	b480      	push	{r7}
 81013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81013c4:	e7fe      	b.n	81013c4 <UsageFault_Handler+0x4>

081013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81013c6:	b480      	push	{r7}
 81013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81013ca:	bf00      	nop
 81013cc:	46bd      	mov	sp, r7
 81013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013d2:	4770      	bx	lr

081013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81013d4:	b480      	push	{r7}
 81013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81013d8:	bf00      	nop
 81013da:	46bd      	mov	sp, r7
 81013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e0:	4770      	bx	lr

081013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81013e2:	b480      	push	{r7}
 81013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81013e6:	bf00      	nop
 81013e8:	46bd      	mov	sp, r7
 81013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ee:	4770      	bx	lr

081013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81013f0:	b580      	push	{r7, lr}
 81013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81013f4:	f000 f970 	bl	81016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81013f8:	bf00      	nop
 81013fa:	bd80      	pop	{r7, pc}

081013fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81013fc:	b580      	push	{r7, lr}
 81013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADE9000_IRQ1_Pin);
 8101400:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101404:	f000 fc99 	bl	8101d3a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADE9000_PM1_Pin);
 8101408:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 810140c:	f000 fc95 	bl	8101d3a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101410:	bf00      	nop
 8101412:	bd80      	pop	{r7, pc}

08101414 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101414:	b580      	push	{r7, lr}
 8101416:	b086      	sub	sp, #24
 8101418:	af00      	add	r7, sp, #0
 810141a:	60f8      	str	r0, [r7, #12]
 810141c:	60b9      	str	r1, [r7, #8]
 810141e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101420:	2300      	movs	r3, #0
 8101422:	617b      	str	r3, [r7, #20]
 8101424:	e00a      	b.n	810143c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101426:	f3af 8000 	nop.w
 810142a:	4601      	mov	r1, r0
 810142c:	68bb      	ldr	r3, [r7, #8]
 810142e:	1c5a      	adds	r2, r3, #1
 8101430:	60ba      	str	r2, [r7, #8]
 8101432:	b2ca      	uxtb	r2, r1
 8101434:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101436:	697b      	ldr	r3, [r7, #20]
 8101438:	3301      	adds	r3, #1
 810143a:	617b      	str	r3, [r7, #20]
 810143c:	697a      	ldr	r2, [r7, #20]
 810143e:	687b      	ldr	r3, [r7, #4]
 8101440:	429a      	cmp	r2, r3
 8101442:	dbf0      	blt.n	8101426 <_read+0x12>
	}

return len;
 8101444:	687b      	ldr	r3, [r7, #4]
}
 8101446:	4618      	mov	r0, r3
 8101448:	3718      	adds	r7, #24
 810144a:	46bd      	mov	sp, r7
 810144c:	bd80      	pop	{r7, pc}

0810144e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810144e:	b580      	push	{r7, lr}
 8101450:	b086      	sub	sp, #24
 8101452:	af00      	add	r7, sp, #0
 8101454:	60f8      	str	r0, [r7, #12]
 8101456:	60b9      	str	r1, [r7, #8]
 8101458:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810145a:	2300      	movs	r3, #0
 810145c:	617b      	str	r3, [r7, #20]
 810145e:	e009      	b.n	8101474 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101460:	68bb      	ldr	r3, [r7, #8]
 8101462:	1c5a      	adds	r2, r3, #1
 8101464:	60ba      	str	r2, [r7, #8]
 8101466:	781b      	ldrb	r3, [r3, #0]
 8101468:	4618      	mov	r0, r3
 810146a:	f7ff fe6f 	bl	810114c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810146e:	697b      	ldr	r3, [r7, #20]
 8101470:	3301      	adds	r3, #1
 8101472:	617b      	str	r3, [r7, #20]
 8101474:	697a      	ldr	r2, [r7, #20]
 8101476:	687b      	ldr	r3, [r7, #4]
 8101478:	429a      	cmp	r2, r3
 810147a:	dbf1      	blt.n	8101460 <_write+0x12>
	}
	return len;
 810147c:	687b      	ldr	r3, [r7, #4]
}
 810147e:	4618      	mov	r0, r3
 8101480:	3718      	adds	r7, #24
 8101482:	46bd      	mov	sp, r7
 8101484:	bd80      	pop	{r7, pc}

08101486 <_close>:

int _close(int file)
{
 8101486:	b480      	push	{r7}
 8101488:	b083      	sub	sp, #12
 810148a:	af00      	add	r7, sp, #0
 810148c:	6078      	str	r0, [r7, #4]
	return -1;
 810148e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101492:	4618      	mov	r0, r3
 8101494:	370c      	adds	r7, #12
 8101496:	46bd      	mov	sp, r7
 8101498:	f85d 7b04 	ldr.w	r7, [sp], #4
 810149c:	4770      	bx	lr

0810149e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810149e:	b480      	push	{r7}
 81014a0:	b083      	sub	sp, #12
 81014a2:	af00      	add	r7, sp, #0
 81014a4:	6078      	str	r0, [r7, #4]
 81014a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 81014a8:	683b      	ldr	r3, [r7, #0]
 81014aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 81014ae:	605a      	str	r2, [r3, #4]
	return 0;
 81014b0:	2300      	movs	r3, #0
}
 81014b2:	4618      	mov	r0, r3
 81014b4:	370c      	adds	r7, #12
 81014b6:	46bd      	mov	sp, r7
 81014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014bc:	4770      	bx	lr

081014be <_isatty>:

int _isatty(int file)
{
 81014be:	b480      	push	{r7}
 81014c0:	b083      	sub	sp, #12
 81014c2:	af00      	add	r7, sp, #0
 81014c4:	6078      	str	r0, [r7, #4]
	return 1;
 81014c6:	2301      	movs	r3, #1
}
 81014c8:	4618      	mov	r0, r3
 81014ca:	370c      	adds	r7, #12
 81014cc:	46bd      	mov	sp, r7
 81014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014d2:	4770      	bx	lr

081014d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81014d4:	b480      	push	{r7}
 81014d6:	b085      	sub	sp, #20
 81014d8:	af00      	add	r7, sp, #0
 81014da:	60f8      	str	r0, [r7, #12]
 81014dc:	60b9      	str	r1, [r7, #8]
 81014de:	607a      	str	r2, [r7, #4]
	return 0;
 81014e0:	2300      	movs	r3, #0
}
 81014e2:	4618      	mov	r0, r3
 81014e4:	3714      	adds	r7, #20
 81014e6:	46bd      	mov	sp, r7
 81014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014ec:	4770      	bx	lr
	...

081014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81014f0:	b580      	push	{r7, lr}
 81014f2:	b086      	sub	sp, #24
 81014f4:	af00      	add	r7, sp, #0
 81014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81014f8:	4a14      	ldr	r2, [pc, #80]	; (810154c <_sbrk+0x5c>)
 81014fa:	4b15      	ldr	r3, [pc, #84]	; (8101550 <_sbrk+0x60>)
 81014fc:	1ad3      	subs	r3, r2, r3
 81014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101500:	697b      	ldr	r3, [r7, #20]
 8101502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101504:	4b13      	ldr	r3, [pc, #76]	; (8101554 <_sbrk+0x64>)
 8101506:	681b      	ldr	r3, [r3, #0]
 8101508:	2b00      	cmp	r3, #0
 810150a:	d102      	bne.n	8101512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810150c:	4b11      	ldr	r3, [pc, #68]	; (8101554 <_sbrk+0x64>)
 810150e:	4a12      	ldr	r2, [pc, #72]	; (8101558 <_sbrk+0x68>)
 8101510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101512:	4b10      	ldr	r3, [pc, #64]	; (8101554 <_sbrk+0x64>)
 8101514:	681a      	ldr	r2, [r3, #0]
 8101516:	687b      	ldr	r3, [r7, #4]
 8101518:	4413      	add	r3, r2
 810151a:	693a      	ldr	r2, [r7, #16]
 810151c:	429a      	cmp	r2, r3
 810151e:	d207      	bcs.n	8101530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101520:	f004 fbae 	bl	8105c80 <__errno>
 8101524:	4603      	mov	r3, r0
 8101526:	220c      	movs	r2, #12
 8101528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810152a:	f04f 33ff 	mov.w	r3, #4294967295
 810152e:	e009      	b.n	8101544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101530:	4b08      	ldr	r3, [pc, #32]	; (8101554 <_sbrk+0x64>)
 8101532:	681b      	ldr	r3, [r3, #0]
 8101534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101536:	4b07      	ldr	r3, [pc, #28]	; (8101554 <_sbrk+0x64>)
 8101538:	681a      	ldr	r2, [r3, #0]
 810153a:	687b      	ldr	r3, [r7, #4]
 810153c:	4413      	add	r3, r2
 810153e:	4a05      	ldr	r2, [pc, #20]	; (8101554 <_sbrk+0x64>)
 8101540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101542:	68fb      	ldr	r3, [r7, #12]
}
 8101544:	4618      	mov	r0, r3
 8101546:	3718      	adds	r7, #24
 8101548:	46bd      	mov	sp, r7
 810154a:	bd80      	pop	{r7, pc}
 810154c:	10048000 	.word	0x10048000
 8101550:	00000400 	.word	0x00000400
 8101554:	10000098 	.word	0x10000098
 8101558:	10000290 	.word	0x10000290

0810155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 810155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101594 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101560:	f7ff f88a 	bl	8100678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101564:	480c      	ldr	r0, [pc, #48]	; (8101598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101566:	490d      	ldr	r1, [pc, #52]	; (810159c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101568:	4a0d      	ldr	r2, [pc, #52]	; (81015a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810156c:	e002      	b.n	8101574 <LoopCopyDataInit>

0810156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101572:	3304      	adds	r3, #4

08101574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101578:	d3f9      	bcc.n	810156e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810157a:	4a0a      	ldr	r2, [pc, #40]	; (81015a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810157c:	4c0a      	ldr	r4, [pc, #40]	; (81015a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 810157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101580:	e001      	b.n	8101586 <LoopFillZerobss>

08101582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101584:	3204      	adds	r2, #4

08101586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101588:	d3fb      	bcc.n	8101582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810158a:	f004 fb7f 	bl	8105c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810158e:	f7ff facf 	bl	8100b30 <main>
  bx  lr
 8101592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101594:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101598:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810159c:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 81015a0:	08106ea0 	.word	0x08106ea0
  ldr r2, =_sbss
 81015a4:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 81015a8:	1000028c 	.word	0x1000028c

081015ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81015ac:	e7fe      	b.n	81015ac <ADC3_IRQHandler>
	...

081015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81015b0:	b580      	push	{r7, lr}
 81015b2:	b082      	sub	sp, #8
 81015b4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81015b6:	4b28      	ldr	r3, [pc, #160]	; (8101658 <HAL_Init+0xa8>)
 81015b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81015bc:	4a26      	ldr	r2, [pc, #152]	; (8101658 <HAL_Init+0xa8>)
 81015be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81015c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81015c6:	4b24      	ldr	r3, [pc, #144]	; (8101658 <HAL_Init+0xa8>)
 81015c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81015cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81015d0:	603b      	str	r3, [r7, #0]
 81015d2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81015d4:	4b21      	ldr	r3, [pc, #132]	; (810165c <HAL_Init+0xac>)
 81015d6:	681b      	ldr	r3, [r3, #0]
 81015d8:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81015dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81015e0:	4a1e      	ldr	r2, [pc, #120]	; (810165c <HAL_Init+0xac>)
 81015e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81015e6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81015e8:	4b1c      	ldr	r3, [pc, #112]	; (810165c <HAL_Init+0xac>)
 81015ea:	681b      	ldr	r3, [r3, #0]
 81015ec:	4a1b      	ldr	r2, [pc, #108]	; (810165c <HAL_Init+0xac>)
 81015ee:	f043 0301 	orr.w	r3, r3, #1
 81015f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81015f4:	2003      	movs	r0, #3
 81015f6:	f000 f983 	bl	8101900 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81015fa:	f000 fc53 	bl	8101ea4 <HAL_RCC_GetSysClockFreq>
 81015fe:	4602      	mov	r2, r0
 8101600:	4b15      	ldr	r3, [pc, #84]	; (8101658 <HAL_Init+0xa8>)
 8101602:	699b      	ldr	r3, [r3, #24]
 8101604:	0a1b      	lsrs	r3, r3, #8
 8101606:	f003 030f 	and.w	r3, r3, #15
 810160a:	4915      	ldr	r1, [pc, #84]	; (8101660 <HAL_Init+0xb0>)
 810160c:	5ccb      	ldrb	r3, [r1, r3]
 810160e:	f003 031f 	and.w	r3, r3, #31
 8101612:	fa22 f303 	lsr.w	r3, r2, r3
 8101616:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101618:	4b0f      	ldr	r3, [pc, #60]	; (8101658 <HAL_Init+0xa8>)
 810161a:	699b      	ldr	r3, [r3, #24]
 810161c:	f003 030f 	and.w	r3, r3, #15
 8101620:	4a0f      	ldr	r2, [pc, #60]	; (8101660 <HAL_Init+0xb0>)
 8101622:	5cd3      	ldrb	r3, [r2, r3]
 8101624:	f003 031f 	and.w	r3, r3, #31
 8101628:	687a      	ldr	r2, [r7, #4]
 810162a:	fa22 f303 	lsr.w	r3, r2, r3
 810162e:	4a0d      	ldr	r2, [pc, #52]	; (8101664 <HAL_Init+0xb4>)
 8101630:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101632:	4b0c      	ldr	r3, [pc, #48]	; (8101664 <HAL_Init+0xb4>)
 8101634:	681b      	ldr	r3, [r3, #0]
 8101636:	4a0c      	ldr	r2, [pc, #48]	; (8101668 <HAL_Init+0xb8>)
 8101638:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810163a:	2000      	movs	r0, #0
 810163c:	f000 f816 	bl	810166c <HAL_InitTick>
 8101640:	4603      	mov	r3, r0
 8101642:	2b00      	cmp	r3, #0
 8101644:	d001      	beq.n	810164a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101646:	2301      	movs	r3, #1
 8101648:	e002      	b.n	8101650 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810164a:	f7ff fdb3 	bl	81011b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810164e:	2300      	movs	r3, #0
}
 8101650:	4618      	mov	r0, r3
 8101652:	3708      	adds	r7, #8
 8101654:	46bd      	mov	sp, r7
 8101656:	bd80      	pop	{r7, pc}
 8101658:	58024400 	.word	0x58024400
 810165c:	40024400 	.word	0x40024400
 8101660:	08106dc0 	.word	0x08106dc0
 8101664:	10000004 	.word	0x10000004
 8101668:	10000000 	.word	0x10000000

0810166c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 810166c:	b580      	push	{r7, lr}
 810166e:	b082      	sub	sp, #8
 8101670:	af00      	add	r7, sp, #0
 8101672:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101674:	4b15      	ldr	r3, [pc, #84]	; (81016cc <HAL_InitTick+0x60>)
 8101676:	781b      	ldrb	r3, [r3, #0]
 8101678:	2b00      	cmp	r3, #0
 810167a:	d101      	bne.n	8101680 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 810167c:	2301      	movs	r3, #1
 810167e:	e021      	b.n	81016c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101680:	4b13      	ldr	r3, [pc, #76]	; (81016d0 <HAL_InitTick+0x64>)
 8101682:	681a      	ldr	r2, [r3, #0]
 8101684:	4b11      	ldr	r3, [pc, #68]	; (81016cc <HAL_InitTick+0x60>)
 8101686:	781b      	ldrb	r3, [r3, #0]
 8101688:	4619      	mov	r1, r3
 810168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101692:	fbb2 f3f3 	udiv	r3, r2, r3
 8101696:	4618      	mov	r0, r3
 8101698:	f000 f965 	bl	8101966 <HAL_SYSTICK_Config>
 810169c:	4603      	mov	r3, r0
 810169e:	2b00      	cmp	r3, #0
 81016a0:	d001      	beq.n	81016a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 81016a2:	2301      	movs	r3, #1
 81016a4:	e00e      	b.n	81016c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	2b0f      	cmp	r3, #15
 81016aa:	d80a      	bhi.n	81016c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 81016ac:	2200      	movs	r2, #0
 81016ae:	6879      	ldr	r1, [r7, #4]
 81016b0:	f04f 30ff 	mov.w	r0, #4294967295
 81016b4:	f000 f92f 	bl	8101916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81016b8:	4a06      	ldr	r2, [pc, #24]	; (81016d4 <HAL_InitTick+0x68>)
 81016ba:	687b      	ldr	r3, [r7, #4]
 81016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81016be:	2300      	movs	r3, #0
 81016c0:	e000      	b.n	81016c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81016c2:	2301      	movs	r3, #1
}
 81016c4:	4618      	mov	r0, r3
 81016c6:	3708      	adds	r7, #8
 81016c8:	46bd      	mov	sp, r7
 81016ca:	bd80      	pop	{r7, pc}
 81016cc:	1000000c 	.word	0x1000000c
 81016d0:	10000000 	.word	0x10000000
 81016d4:	10000008 	.word	0x10000008

081016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81016d8:	b480      	push	{r7}
 81016da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81016dc:	4b06      	ldr	r3, [pc, #24]	; (81016f8 <HAL_IncTick+0x20>)
 81016de:	781b      	ldrb	r3, [r3, #0]
 81016e0:	461a      	mov	r2, r3
 81016e2:	4b06      	ldr	r3, [pc, #24]	; (81016fc <HAL_IncTick+0x24>)
 81016e4:	681b      	ldr	r3, [r3, #0]
 81016e6:	4413      	add	r3, r2
 81016e8:	4a04      	ldr	r2, [pc, #16]	; (81016fc <HAL_IncTick+0x24>)
 81016ea:	6013      	str	r3, [r2, #0]
}
 81016ec:	bf00      	nop
 81016ee:	46bd      	mov	sp, r7
 81016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016f4:	4770      	bx	lr
 81016f6:	bf00      	nop
 81016f8:	1000000c 	.word	0x1000000c
 81016fc:	10000278 	.word	0x10000278

08101700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101700:	b480      	push	{r7}
 8101702:	af00      	add	r7, sp, #0
  return uwTick;
 8101704:	4b03      	ldr	r3, [pc, #12]	; (8101714 <HAL_GetTick+0x14>)
 8101706:	681b      	ldr	r3, [r3, #0]
}
 8101708:	4618      	mov	r0, r3
 810170a:	46bd      	mov	sp, r7
 810170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101710:	4770      	bx	lr
 8101712:	bf00      	nop
 8101714:	10000278 	.word	0x10000278

08101718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101718:	b580      	push	{r7, lr}
 810171a:	b084      	sub	sp, #16
 810171c:	af00      	add	r7, sp, #0
 810171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101720:	f7ff ffee 	bl	8101700 <HAL_GetTick>
 8101724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810172a:	68fb      	ldr	r3, [r7, #12]
 810172c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101730:	d005      	beq.n	810173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101732:	4b0a      	ldr	r3, [pc, #40]	; (810175c <HAL_Delay+0x44>)
 8101734:	781b      	ldrb	r3, [r3, #0]
 8101736:	461a      	mov	r2, r3
 8101738:	68fb      	ldr	r3, [r7, #12]
 810173a:	4413      	add	r3, r2
 810173c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810173e:	bf00      	nop
 8101740:	f7ff ffde 	bl	8101700 <HAL_GetTick>
 8101744:	4602      	mov	r2, r0
 8101746:	68bb      	ldr	r3, [r7, #8]
 8101748:	1ad3      	subs	r3, r2, r3
 810174a:	68fa      	ldr	r2, [r7, #12]
 810174c:	429a      	cmp	r2, r3
 810174e:	d8f7      	bhi.n	8101740 <HAL_Delay+0x28>
  {
  }
}
 8101750:	bf00      	nop
 8101752:	bf00      	nop
 8101754:	3710      	adds	r7, #16
 8101756:	46bd      	mov	sp, r7
 8101758:	bd80      	pop	{r7, pc}
 810175a:	bf00      	nop
 810175c:	1000000c 	.word	0x1000000c

08101760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101760:	b480      	push	{r7}
 8101762:	b085      	sub	sp, #20
 8101764:	af00      	add	r7, sp, #0
 8101766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	f003 0307 	and.w	r3, r3, #7
 810176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101770:	4b0c      	ldr	r3, [pc, #48]	; (81017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8101772:	68db      	ldr	r3, [r3, #12]
 8101774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101776:	68ba      	ldr	r2, [r7, #8]
 8101778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810177c:	4013      	ands	r3, r2
 810177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101780:	68fb      	ldr	r3, [r7, #12]
 8101782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101784:	68bb      	ldr	r3, [r7, #8]
 8101786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810178c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101792:	4a04      	ldr	r2, [pc, #16]	; (81017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8101794:	68bb      	ldr	r3, [r7, #8]
 8101796:	60d3      	str	r3, [r2, #12]
}
 8101798:	bf00      	nop
 810179a:	3714      	adds	r7, #20
 810179c:	46bd      	mov	sp, r7
 810179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a2:	4770      	bx	lr
 81017a4:	e000ed00 	.word	0xe000ed00

081017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81017a8:	b480      	push	{r7}
 81017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81017ac:	4b04      	ldr	r3, [pc, #16]	; (81017c0 <__NVIC_GetPriorityGrouping+0x18>)
 81017ae:	68db      	ldr	r3, [r3, #12]
 81017b0:	0a1b      	lsrs	r3, r3, #8
 81017b2:	f003 0307 	and.w	r3, r3, #7
}
 81017b6:	4618      	mov	r0, r3
 81017b8:	46bd      	mov	sp, r7
 81017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017be:	4770      	bx	lr
 81017c0:	e000ed00 	.word	0xe000ed00

081017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81017c4:	b480      	push	{r7}
 81017c6:	b083      	sub	sp, #12
 81017c8:	af00      	add	r7, sp, #0
 81017ca:	4603      	mov	r3, r0
 81017cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017d2:	2b00      	cmp	r3, #0
 81017d4:	db0b      	blt.n	81017ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81017d6:	88fb      	ldrh	r3, [r7, #6]
 81017d8:	f003 021f 	and.w	r2, r3, #31
 81017dc:	4907      	ldr	r1, [pc, #28]	; (81017fc <__NVIC_EnableIRQ+0x38>)
 81017de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017e2:	095b      	lsrs	r3, r3, #5
 81017e4:	2001      	movs	r0, #1
 81017e6:	fa00 f202 	lsl.w	r2, r0, r2
 81017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81017ee:	bf00      	nop
 81017f0:	370c      	adds	r7, #12
 81017f2:	46bd      	mov	sp, r7
 81017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017f8:	4770      	bx	lr
 81017fa:	bf00      	nop
 81017fc:	e000e100 	.word	0xe000e100

08101800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101800:	b480      	push	{r7}
 8101802:	b083      	sub	sp, #12
 8101804:	af00      	add	r7, sp, #0
 8101806:	4603      	mov	r3, r0
 8101808:	6039      	str	r1, [r7, #0]
 810180a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810180c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101810:	2b00      	cmp	r3, #0
 8101812:	db0a      	blt.n	810182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101814:	683b      	ldr	r3, [r7, #0]
 8101816:	b2da      	uxtb	r2, r3
 8101818:	490c      	ldr	r1, [pc, #48]	; (810184c <__NVIC_SetPriority+0x4c>)
 810181a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810181e:	0112      	lsls	r2, r2, #4
 8101820:	b2d2      	uxtb	r2, r2
 8101822:	440b      	add	r3, r1
 8101824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101828:	e00a      	b.n	8101840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810182a:	683b      	ldr	r3, [r7, #0]
 810182c:	b2da      	uxtb	r2, r3
 810182e:	4908      	ldr	r1, [pc, #32]	; (8101850 <__NVIC_SetPriority+0x50>)
 8101830:	88fb      	ldrh	r3, [r7, #6]
 8101832:	f003 030f 	and.w	r3, r3, #15
 8101836:	3b04      	subs	r3, #4
 8101838:	0112      	lsls	r2, r2, #4
 810183a:	b2d2      	uxtb	r2, r2
 810183c:	440b      	add	r3, r1
 810183e:	761a      	strb	r2, [r3, #24]
}
 8101840:	bf00      	nop
 8101842:	370c      	adds	r7, #12
 8101844:	46bd      	mov	sp, r7
 8101846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810184a:	4770      	bx	lr
 810184c:	e000e100 	.word	0xe000e100
 8101850:	e000ed00 	.word	0xe000ed00

08101854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101854:	b480      	push	{r7}
 8101856:	b089      	sub	sp, #36	; 0x24
 8101858:	af00      	add	r7, sp, #0
 810185a:	60f8      	str	r0, [r7, #12]
 810185c:	60b9      	str	r1, [r7, #8]
 810185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101860:	68fb      	ldr	r3, [r7, #12]
 8101862:	f003 0307 	and.w	r3, r3, #7
 8101866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101868:	69fb      	ldr	r3, [r7, #28]
 810186a:	f1c3 0307 	rsb	r3, r3, #7
 810186e:	2b04      	cmp	r3, #4
 8101870:	bf28      	it	cs
 8101872:	2304      	movcs	r3, #4
 8101874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101876:	69fb      	ldr	r3, [r7, #28]
 8101878:	3304      	adds	r3, #4
 810187a:	2b06      	cmp	r3, #6
 810187c:	d902      	bls.n	8101884 <NVIC_EncodePriority+0x30>
 810187e:	69fb      	ldr	r3, [r7, #28]
 8101880:	3b03      	subs	r3, #3
 8101882:	e000      	b.n	8101886 <NVIC_EncodePriority+0x32>
 8101884:	2300      	movs	r3, #0
 8101886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101888:	f04f 32ff 	mov.w	r2, #4294967295
 810188c:	69bb      	ldr	r3, [r7, #24]
 810188e:	fa02 f303 	lsl.w	r3, r2, r3
 8101892:	43da      	mvns	r2, r3
 8101894:	68bb      	ldr	r3, [r7, #8]
 8101896:	401a      	ands	r2, r3
 8101898:	697b      	ldr	r3, [r7, #20]
 810189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810189c:	f04f 31ff 	mov.w	r1, #4294967295
 81018a0:	697b      	ldr	r3, [r7, #20]
 81018a2:	fa01 f303 	lsl.w	r3, r1, r3
 81018a6:	43d9      	mvns	r1, r3
 81018a8:	687b      	ldr	r3, [r7, #4]
 81018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81018ac:	4313      	orrs	r3, r2
         );
}
 81018ae:	4618      	mov	r0, r3
 81018b0:	3724      	adds	r7, #36	; 0x24
 81018b2:	46bd      	mov	sp, r7
 81018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b8:	4770      	bx	lr
	...

081018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81018bc:	b580      	push	{r7, lr}
 81018be:	b082      	sub	sp, #8
 81018c0:	af00      	add	r7, sp, #0
 81018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81018c4:	687b      	ldr	r3, [r7, #4]
 81018c6:	3b01      	subs	r3, #1
 81018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81018cc:	d301      	bcc.n	81018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81018ce:	2301      	movs	r3, #1
 81018d0:	e00f      	b.n	81018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81018d2:	4a0a      	ldr	r2, [pc, #40]	; (81018fc <SysTick_Config+0x40>)
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	3b01      	subs	r3, #1
 81018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81018da:	210f      	movs	r1, #15
 81018dc:	f04f 30ff 	mov.w	r0, #4294967295
 81018e0:	f7ff ff8e 	bl	8101800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81018e4:	4b05      	ldr	r3, [pc, #20]	; (81018fc <SysTick_Config+0x40>)
 81018e6:	2200      	movs	r2, #0
 81018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81018ea:	4b04      	ldr	r3, [pc, #16]	; (81018fc <SysTick_Config+0x40>)
 81018ec:	2207      	movs	r2, #7
 81018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81018f0:	2300      	movs	r3, #0
}
 81018f2:	4618      	mov	r0, r3
 81018f4:	3708      	adds	r7, #8
 81018f6:	46bd      	mov	sp, r7
 81018f8:	bd80      	pop	{r7, pc}
 81018fa:	bf00      	nop
 81018fc:	e000e010 	.word	0xe000e010

08101900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101900:	b580      	push	{r7, lr}
 8101902:	b082      	sub	sp, #8
 8101904:	af00      	add	r7, sp, #0
 8101906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101908:	6878      	ldr	r0, [r7, #4]
 810190a:	f7ff ff29 	bl	8101760 <__NVIC_SetPriorityGrouping>
}
 810190e:	bf00      	nop
 8101910:	3708      	adds	r7, #8
 8101912:	46bd      	mov	sp, r7
 8101914:	bd80      	pop	{r7, pc}

08101916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101916:	b580      	push	{r7, lr}
 8101918:	b086      	sub	sp, #24
 810191a:	af00      	add	r7, sp, #0
 810191c:	4603      	mov	r3, r0
 810191e:	60b9      	str	r1, [r7, #8]
 8101920:	607a      	str	r2, [r7, #4]
 8101922:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101924:	f7ff ff40 	bl	81017a8 <__NVIC_GetPriorityGrouping>
 8101928:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810192a:	687a      	ldr	r2, [r7, #4]
 810192c:	68b9      	ldr	r1, [r7, #8]
 810192e:	6978      	ldr	r0, [r7, #20]
 8101930:	f7ff ff90 	bl	8101854 <NVIC_EncodePriority>
 8101934:	4602      	mov	r2, r0
 8101936:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810193a:	4611      	mov	r1, r2
 810193c:	4618      	mov	r0, r3
 810193e:	f7ff ff5f 	bl	8101800 <__NVIC_SetPriority>
}
 8101942:	bf00      	nop
 8101944:	3718      	adds	r7, #24
 8101946:	46bd      	mov	sp, r7
 8101948:	bd80      	pop	{r7, pc}

0810194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810194a:	b580      	push	{r7, lr}
 810194c:	b082      	sub	sp, #8
 810194e:	af00      	add	r7, sp, #0
 8101950:	4603      	mov	r3, r0
 8101952:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101958:	4618      	mov	r0, r3
 810195a:	f7ff ff33 	bl	81017c4 <__NVIC_EnableIRQ>
}
 810195e:	bf00      	nop
 8101960:	3708      	adds	r7, #8
 8101962:	46bd      	mov	sp, r7
 8101964:	bd80      	pop	{r7, pc}

08101966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101966:	b580      	push	{r7, lr}
 8101968:	b082      	sub	sp, #8
 810196a:	af00      	add	r7, sp, #0
 810196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810196e:	6878      	ldr	r0, [r7, #4]
 8101970:	f7ff ffa4 	bl	81018bc <SysTick_Config>
 8101974:	4603      	mov	r3, r0
}
 8101976:	4618      	mov	r0, r3
 8101978:	3708      	adds	r7, #8
 810197a:	46bd      	mov	sp, r7
 810197c:	bd80      	pop	{r7, pc}
	...

08101980 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101980:	b480      	push	{r7}
 8101982:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101984:	4b07      	ldr	r3, [pc, #28]	; (81019a4 <HAL_GetCurrentCPUID+0x24>)
 8101986:	681b      	ldr	r3, [r3, #0]
 8101988:	091b      	lsrs	r3, r3, #4
 810198a:	f003 030f 	and.w	r3, r3, #15
 810198e:	2b07      	cmp	r3, #7
 8101990:	d101      	bne.n	8101996 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101992:	2303      	movs	r3, #3
 8101994:	e000      	b.n	8101998 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101996:	2301      	movs	r3, #1
  }
}
 8101998:	4618      	mov	r0, r3
 810199a:	46bd      	mov	sp, r7
 810199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019a0:	4770      	bx	lr
 81019a2:	bf00      	nop
 81019a4:	e000ed00 	.word	0xe000ed00

081019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81019a8:	b480      	push	{r7}
 81019aa:	b089      	sub	sp, #36	; 0x24
 81019ac:	af00      	add	r7, sp, #0
 81019ae:	6078      	str	r0, [r7, #4]
 81019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81019b2:	2300      	movs	r3, #0
 81019b4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81019b6:	4b89      	ldr	r3, [pc, #548]	; (8101bdc <HAL_GPIO_Init+0x234>)
 81019b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81019ba:	e194      	b.n	8101ce6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81019bc:	683b      	ldr	r3, [r7, #0]
 81019be:	681a      	ldr	r2, [r3, #0]
 81019c0:	2101      	movs	r1, #1
 81019c2:	69fb      	ldr	r3, [r7, #28]
 81019c4:	fa01 f303 	lsl.w	r3, r1, r3
 81019c8:	4013      	ands	r3, r2
 81019ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81019cc:	693b      	ldr	r3, [r7, #16]
 81019ce:	2b00      	cmp	r3, #0
 81019d0:	f000 8186 	beq.w	8101ce0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81019d4:	683b      	ldr	r3, [r7, #0]
 81019d6:	685b      	ldr	r3, [r3, #4]
 81019d8:	f003 0303 	and.w	r3, r3, #3
 81019dc:	2b01      	cmp	r3, #1
 81019de:	d005      	beq.n	81019ec <HAL_GPIO_Init+0x44>
 81019e0:	683b      	ldr	r3, [r7, #0]
 81019e2:	685b      	ldr	r3, [r3, #4]
 81019e4:	f003 0303 	and.w	r3, r3, #3
 81019e8:	2b02      	cmp	r3, #2
 81019ea:	d130      	bne.n	8101a4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	689b      	ldr	r3, [r3, #8]
 81019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81019f2:	69fb      	ldr	r3, [r7, #28]
 81019f4:	005b      	lsls	r3, r3, #1
 81019f6:	2203      	movs	r2, #3
 81019f8:	fa02 f303 	lsl.w	r3, r2, r3
 81019fc:	43db      	mvns	r3, r3
 81019fe:	69ba      	ldr	r2, [r7, #24]
 8101a00:	4013      	ands	r3, r2
 8101a02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101a04:	683b      	ldr	r3, [r7, #0]
 8101a06:	68da      	ldr	r2, [r3, #12]
 8101a08:	69fb      	ldr	r3, [r7, #28]
 8101a0a:	005b      	lsls	r3, r3, #1
 8101a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8101a10:	69ba      	ldr	r2, [r7, #24]
 8101a12:	4313      	orrs	r3, r2
 8101a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101a16:	687b      	ldr	r3, [r7, #4]
 8101a18:	69ba      	ldr	r2, [r7, #24]
 8101a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	685b      	ldr	r3, [r3, #4]
 8101a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8101a22:	2201      	movs	r2, #1
 8101a24:	69fb      	ldr	r3, [r7, #28]
 8101a26:	fa02 f303 	lsl.w	r3, r2, r3
 8101a2a:	43db      	mvns	r3, r3
 8101a2c:	69ba      	ldr	r2, [r7, #24]
 8101a2e:	4013      	ands	r3, r2
 8101a30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8101a32:	683b      	ldr	r3, [r7, #0]
 8101a34:	685b      	ldr	r3, [r3, #4]
 8101a36:	091b      	lsrs	r3, r3, #4
 8101a38:	f003 0201 	and.w	r2, r3, #1
 8101a3c:	69fb      	ldr	r3, [r7, #28]
 8101a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8101a42:	69ba      	ldr	r2, [r7, #24]
 8101a44:	4313      	orrs	r3, r2
 8101a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101a48:	687b      	ldr	r3, [r7, #4]
 8101a4a:	69ba      	ldr	r2, [r7, #24]
 8101a4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8101a4e:	683b      	ldr	r3, [r7, #0]
 8101a50:	685b      	ldr	r3, [r3, #4]
 8101a52:	f003 0303 	and.w	r3, r3, #3
 8101a56:	2b03      	cmp	r3, #3
 8101a58:	d017      	beq.n	8101a8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101a5a:	687b      	ldr	r3, [r7, #4]
 8101a5c:	68db      	ldr	r3, [r3, #12]
 8101a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8101a60:	69fb      	ldr	r3, [r7, #28]
 8101a62:	005b      	lsls	r3, r3, #1
 8101a64:	2203      	movs	r2, #3
 8101a66:	fa02 f303 	lsl.w	r3, r2, r3
 8101a6a:	43db      	mvns	r3, r3
 8101a6c:	69ba      	ldr	r2, [r7, #24]
 8101a6e:	4013      	ands	r3, r2
 8101a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101a72:	683b      	ldr	r3, [r7, #0]
 8101a74:	689a      	ldr	r2, [r3, #8]
 8101a76:	69fb      	ldr	r3, [r7, #28]
 8101a78:	005b      	lsls	r3, r3, #1
 8101a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a7e:	69ba      	ldr	r2, [r7, #24]
 8101a80:	4313      	orrs	r3, r2
 8101a82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101a84:	687b      	ldr	r3, [r7, #4]
 8101a86:	69ba      	ldr	r2, [r7, #24]
 8101a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101a8a:	683b      	ldr	r3, [r7, #0]
 8101a8c:	685b      	ldr	r3, [r3, #4]
 8101a8e:	f003 0303 	and.w	r3, r3, #3
 8101a92:	2b02      	cmp	r3, #2
 8101a94:	d123      	bne.n	8101ade <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101a96:	69fb      	ldr	r3, [r7, #28]
 8101a98:	08da      	lsrs	r2, r3, #3
 8101a9a:	687b      	ldr	r3, [r7, #4]
 8101a9c:	3208      	adds	r2, #8
 8101a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101aa4:	69fb      	ldr	r3, [r7, #28]
 8101aa6:	f003 0307 	and.w	r3, r3, #7
 8101aaa:	009b      	lsls	r3, r3, #2
 8101aac:	220f      	movs	r2, #15
 8101aae:	fa02 f303 	lsl.w	r3, r2, r3
 8101ab2:	43db      	mvns	r3, r3
 8101ab4:	69ba      	ldr	r2, [r7, #24]
 8101ab6:	4013      	ands	r3, r2
 8101ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101aba:	683b      	ldr	r3, [r7, #0]
 8101abc:	691a      	ldr	r2, [r3, #16]
 8101abe:	69fb      	ldr	r3, [r7, #28]
 8101ac0:	f003 0307 	and.w	r3, r3, #7
 8101ac4:	009b      	lsls	r3, r3, #2
 8101ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8101aca:	69ba      	ldr	r2, [r7, #24]
 8101acc:	4313      	orrs	r3, r2
 8101ace:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101ad0:	69fb      	ldr	r3, [r7, #28]
 8101ad2:	08da      	lsrs	r2, r3, #3
 8101ad4:	687b      	ldr	r3, [r7, #4]
 8101ad6:	3208      	adds	r2, #8
 8101ad8:	69b9      	ldr	r1, [r7, #24]
 8101ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101ade:	687b      	ldr	r3, [r7, #4]
 8101ae0:	681b      	ldr	r3, [r3, #0]
 8101ae2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101ae4:	69fb      	ldr	r3, [r7, #28]
 8101ae6:	005b      	lsls	r3, r3, #1
 8101ae8:	2203      	movs	r2, #3
 8101aea:	fa02 f303 	lsl.w	r3, r2, r3
 8101aee:	43db      	mvns	r3, r3
 8101af0:	69ba      	ldr	r2, [r7, #24]
 8101af2:	4013      	ands	r3, r2
 8101af4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101af6:	683b      	ldr	r3, [r7, #0]
 8101af8:	685b      	ldr	r3, [r3, #4]
 8101afa:	f003 0203 	and.w	r2, r3, #3
 8101afe:	69fb      	ldr	r3, [r7, #28]
 8101b00:	005b      	lsls	r3, r3, #1
 8101b02:	fa02 f303 	lsl.w	r3, r2, r3
 8101b06:	69ba      	ldr	r2, [r7, #24]
 8101b08:	4313      	orrs	r3, r2
 8101b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101b0c:	687b      	ldr	r3, [r7, #4]
 8101b0e:	69ba      	ldr	r2, [r7, #24]
 8101b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101b12:	683b      	ldr	r3, [r7, #0]
 8101b14:	685b      	ldr	r3, [r3, #4]
 8101b16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101b1a:	2b00      	cmp	r3, #0
 8101b1c:	f000 80e0 	beq.w	8101ce0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101b20:	4b2f      	ldr	r3, [pc, #188]	; (8101be0 <HAL_GPIO_Init+0x238>)
 8101b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b26:	4a2e      	ldr	r2, [pc, #184]	; (8101be0 <HAL_GPIO_Init+0x238>)
 8101b28:	f043 0302 	orr.w	r3, r3, #2
 8101b2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101b30:	4b2b      	ldr	r3, [pc, #172]	; (8101be0 <HAL_GPIO_Init+0x238>)
 8101b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101b36:	f003 0302 	and.w	r3, r3, #2
 8101b3a:	60fb      	str	r3, [r7, #12]
 8101b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101b3e:	4a29      	ldr	r2, [pc, #164]	; (8101be4 <HAL_GPIO_Init+0x23c>)
 8101b40:	69fb      	ldr	r3, [r7, #28]
 8101b42:	089b      	lsrs	r3, r3, #2
 8101b44:	3302      	adds	r3, #2
 8101b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101b4c:	69fb      	ldr	r3, [r7, #28]
 8101b4e:	f003 0303 	and.w	r3, r3, #3
 8101b52:	009b      	lsls	r3, r3, #2
 8101b54:	220f      	movs	r2, #15
 8101b56:	fa02 f303 	lsl.w	r3, r2, r3
 8101b5a:	43db      	mvns	r3, r3
 8101b5c:	69ba      	ldr	r2, [r7, #24]
 8101b5e:	4013      	ands	r3, r2
 8101b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	4a20      	ldr	r2, [pc, #128]	; (8101be8 <HAL_GPIO_Init+0x240>)
 8101b66:	4293      	cmp	r3, r2
 8101b68:	d052      	beq.n	8101c10 <HAL_GPIO_Init+0x268>
 8101b6a:	687b      	ldr	r3, [r7, #4]
 8101b6c:	4a1f      	ldr	r2, [pc, #124]	; (8101bec <HAL_GPIO_Init+0x244>)
 8101b6e:	4293      	cmp	r3, r2
 8101b70:	d031      	beq.n	8101bd6 <HAL_GPIO_Init+0x22e>
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	4a1e      	ldr	r2, [pc, #120]	; (8101bf0 <HAL_GPIO_Init+0x248>)
 8101b76:	4293      	cmp	r3, r2
 8101b78:	d02b      	beq.n	8101bd2 <HAL_GPIO_Init+0x22a>
 8101b7a:	687b      	ldr	r3, [r7, #4]
 8101b7c:	4a1d      	ldr	r2, [pc, #116]	; (8101bf4 <HAL_GPIO_Init+0x24c>)
 8101b7e:	4293      	cmp	r3, r2
 8101b80:	d025      	beq.n	8101bce <HAL_GPIO_Init+0x226>
 8101b82:	687b      	ldr	r3, [r7, #4]
 8101b84:	4a1c      	ldr	r2, [pc, #112]	; (8101bf8 <HAL_GPIO_Init+0x250>)
 8101b86:	4293      	cmp	r3, r2
 8101b88:	d01f      	beq.n	8101bca <HAL_GPIO_Init+0x222>
 8101b8a:	687b      	ldr	r3, [r7, #4]
 8101b8c:	4a1b      	ldr	r2, [pc, #108]	; (8101bfc <HAL_GPIO_Init+0x254>)
 8101b8e:	4293      	cmp	r3, r2
 8101b90:	d019      	beq.n	8101bc6 <HAL_GPIO_Init+0x21e>
 8101b92:	687b      	ldr	r3, [r7, #4]
 8101b94:	4a1a      	ldr	r2, [pc, #104]	; (8101c00 <HAL_GPIO_Init+0x258>)
 8101b96:	4293      	cmp	r3, r2
 8101b98:	d013      	beq.n	8101bc2 <HAL_GPIO_Init+0x21a>
 8101b9a:	687b      	ldr	r3, [r7, #4]
 8101b9c:	4a19      	ldr	r2, [pc, #100]	; (8101c04 <HAL_GPIO_Init+0x25c>)
 8101b9e:	4293      	cmp	r3, r2
 8101ba0:	d00d      	beq.n	8101bbe <HAL_GPIO_Init+0x216>
 8101ba2:	687b      	ldr	r3, [r7, #4]
 8101ba4:	4a18      	ldr	r2, [pc, #96]	; (8101c08 <HAL_GPIO_Init+0x260>)
 8101ba6:	4293      	cmp	r3, r2
 8101ba8:	d007      	beq.n	8101bba <HAL_GPIO_Init+0x212>
 8101baa:	687b      	ldr	r3, [r7, #4]
 8101bac:	4a17      	ldr	r2, [pc, #92]	; (8101c0c <HAL_GPIO_Init+0x264>)
 8101bae:	4293      	cmp	r3, r2
 8101bb0:	d101      	bne.n	8101bb6 <HAL_GPIO_Init+0x20e>
 8101bb2:	2309      	movs	r3, #9
 8101bb4:	e02d      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bb6:	230a      	movs	r3, #10
 8101bb8:	e02b      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bba:	2308      	movs	r3, #8
 8101bbc:	e029      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bbe:	2307      	movs	r3, #7
 8101bc0:	e027      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bc2:	2306      	movs	r3, #6
 8101bc4:	e025      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bc6:	2305      	movs	r3, #5
 8101bc8:	e023      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bca:	2304      	movs	r3, #4
 8101bcc:	e021      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bce:	2303      	movs	r3, #3
 8101bd0:	e01f      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bd2:	2302      	movs	r3, #2
 8101bd4:	e01d      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bd6:	2301      	movs	r3, #1
 8101bd8:	e01b      	b.n	8101c12 <HAL_GPIO_Init+0x26a>
 8101bda:	bf00      	nop
 8101bdc:	580000c0 	.word	0x580000c0
 8101be0:	58024400 	.word	0x58024400
 8101be4:	58000400 	.word	0x58000400
 8101be8:	58020000 	.word	0x58020000
 8101bec:	58020400 	.word	0x58020400
 8101bf0:	58020800 	.word	0x58020800
 8101bf4:	58020c00 	.word	0x58020c00
 8101bf8:	58021000 	.word	0x58021000
 8101bfc:	58021400 	.word	0x58021400
 8101c00:	58021800 	.word	0x58021800
 8101c04:	58021c00 	.word	0x58021c00
 8101c08:	58022000 	.word	0x58022000
 8101c0c:	58022400 	.word	0x58022400
 8101c10:	2300      	movs	r3, #0
 8101c12:	69fa      	ldr	r2, [r7, #28]
 8101c14:	f002 0203 	and.w	r2, r2, #3
 8101c18:	0092      	lsls	r2, r2, #2
 8101c1a:	4093      	lsls	r3, r2
 8101c1c:	69ba      	ldr	r2, [r7, #24]
 8101c1e:	4313      	orrs	r3, r2
 8101c20:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101c22:	4938      	ldr	r1, [pc, #224]	; (8101d04 <HAL_GPIO_Init+0x35c>)
 8101c24:	69fb      	ldr	r3, [r7, #28]
 8101c26:	089b      	lsrs	r3, r3, #2
 8101c28:	3302      	adds	r3, #2
 8101c2a:	69ba      	ldr	r2, [r7, #24]
 8101c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101c34:	681b      	ldr	r3, [r3, #0]
 8101c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c38:	693b      	ldr	r3, [r7, #16]
 8101c3a:	43db      	mvns	r3, r3
 8101c3c:	69ba      	ldr	r2, [r7, #24]
 8101c3e:	4013      	ands	r3, r2
 8101c40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101c42:	683b      	ldr	r3, [r7, #0]
 8101c44:	685b      	ldr	r3, [r3, #4]
 8101c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101c4a:	2b00      	cmp	r3, #0
 8101c4c:	d003      	beq.n	8101c56 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101c4e:	69ba      	ldr	r2, [r7, #24]
 8101c50:	693b      	ldr	r3, [r7, #16]
 8101c52:	4313      	orrs	r3, r2
 8101c54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101c5a:	69bb      	ldr	r3, [r7, #24]
 8101c5c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101c62:	685b      	ldr	r3, [r3, #4]
 8101c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c66:	693b      	ldr	r3, [r7, #16]
 8101c68:	43db      	mvns	r3, r3
 8101c6a:	69ba      	ldr	r2, [r7, #24]
 8101c6c:	4013      	ands	r3, r2
 8101c6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101c70:	683b      	ldr	r3, [r7, #0]
 8101c72:	685b      	ldr	r3, [r3, #4]
 8101c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101c78:	2b00      	cmp	r3, #0
 8101c7a:	d003      	beq.n	8101c84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101c7c:	69ba      	ldr	r2, [r7, #24]
 8101c7e:	693b      	ldr	r3, [r7, #16]
 8101c80:	4313      	orrs	r3, r2
 8101c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101c88:	69bb      	ldr	r3, [r7, #24]
 8101c8a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101c8c:	697b      	ldr	r3, [r7, #20]
 8101c8e:	685b      	ldr	r3, [r3, #4]
 8101c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c92:	693b      	ldr	r3, [r7, #16]
 8101c94:	43db      	mvns	r3, r3
 8101c96:	69ba      	ldr	r2, [r7, #24]
 8101c98:	4013      	ands	r3, r2
 8101c9a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101c9c:	683b      	ldr	r3, [r7, #0]
 8101c9e:	685b      	ldr	r3, [r3, #4]
 8101ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101ca4:	2b00      	cmp	r3, #0
 8101ca6:	d003      	beq.n	8101cb0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101ca8:	69ba      	ldr	r2, [r7, #24]
 8101caa:	693b      	ldr	r3, [r7, #16]
 8101cac:	4313      	orrs	r3, r2
 8101cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101cb0:	697b      	ldr	r3, [r7, #20]
 8101cb2:	69ba      	ldr	r2, [r7, #24]
 8101cb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101cb6:	697b      	ldr	r3, [r7, #20]
 8101cb8:	681b      	ldr	r3, [r3, #0]
 8101cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101cbc:	693b      	ldr	r3, [r7, #16]
 8101cbe:	43db      	mvns	r3, r3
 8101cc0:	69ba      	ldr	r2, [r7, #24]
 8101cc2:	4013      	ands	r3, r2
 8101cc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101cc6:	683b      	ldr	r3, [r7, #0]
 8101cc8:	685b      	ldr	r3, [r3, #4]
 8101cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101cce:	2b00      	cmp	r3, #0
 8101cd0:	d003      	beq.n	8101cda <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101cd2:	69ba      	ldr	r2, [r7, #24]
 8101cd4:	693b      	ldr	r3, [r7, #16]
 8101cd6:	4313      	orrs	r3, r2
 8101cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101cda:	697b      	ldr	r3, [r7, #20]
 8101cdc:	69ba      	ldr	r2, [r7, #24]
 8101cde:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101ce0:	69fb      	ldr	r3, [r7, #28]
 8101ce2:	3301      	adds	r3, #1
 8101ce4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101ce6:	683b      	ldr	r3, [r7, #0]
 8101ce8:	681a      	ldr	r2, [r3, #0]
 8101cea:	69fb      	ldr	r3, [r7, #28]
 8101cec:	fa22 f303 	lsr.w	r3, r2, r3
 8101cf0:	2b00      	cmp	r3, #0
 8101cf2:	f47f ae63 	bne.w	81019bc <HAL_GPIO_Init+0x14>
  }
}
 8101cf6:	bf00      	nop
 8101cf8:	bf00      	nop
 8101cfa:	3724      	adds	r7, #36	; 0x24
 8101cfc:	46bd      	mov	sp, r7
 8101cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d02:	4770      	bx	lr
 8101d04:	58000400 	.word	0x58000400

08101d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101d08:	b480      	push	{r7}
 8101d0a:	b083      	sub	sp, #12
 8101d0c:	af00      	add	r7, sp, #0
 8101d0e:	6078      	str	r0, [r7, #4]
 8101d10:	460b      	mov	r3, r1
 8101d12:	807b      	strh	r3, [r7, #2]
 8101d14:	4613      	mov	r3, r2
 8101d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101d18:	787b      	ldrb	r3, [r7, #1]
 8101d1a:	2b00      	cmp	r3, #0
 8101d1c:	d003      	beq.n	8101d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101d1e:	887a      	ldrh	r2, [r7, #2]
 8101d20:	687b      	ldr	r3, [r7, #4]
 8101d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101d24:	e003      	b.n	8101d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101d26:	887b      	ldrh	r3, [r7, #2]
 8101d28:	041a      	lsls	r2, r3, #16
 8101d2a:	687b      	ldr	r3, [r7, #4]
 8101d2c:	619a      	str	r2, [r3, #24]
}
 8101d2e:	bf00      	nop
 8101d30:	370c      	adds	r7, #12
 8101d32:	46bd      	mov	sp, r7
 8101d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d38:	4770      	bx	lr

08101d3a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8101d3a:	b580      	push	{r7, lr}
 8101d3c:	b082      	sub	sp, #8
 8101d3e:	af00      	add	r7, sp, #0
 8101d40:	4603      	mov	r3, r0
 8101d42:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8101d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101d48:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101d4c:	88fb      	ldrh	r3, [r7, #6]
 8101d4e:	4013      	ands	r3, r2
 8101d50:	2b00      	cmp	r3, #0
 8101d52:	d008      	beq.n	8101d66 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8101d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101d58:	88fb      	ldrh	r3, [r7, #6]
 8101d5a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8101d5e:	88fb      	ldrh	r3, [r7, #6]
 8101d60:	4618      	mov	r0, r3
 8101d62:	f7ff fa05 	bl	8101170 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8101d66:	bf00      	nop
 8101d68:	3708      	adds	r7, #8
 8101d6a:	46bd      	mov	sp, r7
 8101d6c:	bd80      	pop	{r7, pc}
	...

08101d70 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101d70:	b480      	push	{r7}
 8101d72:	b083      	sub	sp, #12
 8101d74:	af00      	add	r7, sp, #0
 8101d76:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101d78:	4b05      	ldr	r3, [pc, #20]	; (8101d90 <HAL_HSEM_ActivateNotification+0x20>)
 8101d7a:	681a      	ldr	r2, [r3, #0]
 8101d7c:	4904      	ldr	r1, [pc, #16]	; (8101d90 <HAL_HSEM_ActivateNotification+0x20>)
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	4313      	orrs	r3, r2
 8101d82:	600b      	str	r3, [r1, #0]
#endif
}
 8101d84:	bf00      	nop
 8101d86:	370c      	adds	r7, #12
 8101d88:	46bd      	mov	sp, r7
 8101d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d8e:	4770      	bx	lr
 8101d90:	58026510 	.word	0x58026510

08101d94 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101d94:	b580      	push	{r7, lr}
 8101d96:	b084      	sub	sp, #16
 8101d98:	af00      	add	r7, sp, #0
 8101d9a:	60f8      	str	r0, [r7, #12]
 8101d9c:	460b      	mov	r3, r1
 8101d9e:	607a      	str	r2, [r7, #4]
 8101da0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101da2:	4b37      	ldr	r3, [pc, #220]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101da4:	681b      	ldr	r3, [r3, #0]
 8101da6:	f023 0201 	bic.w	r2, r3, #1
 8101daa:	4935      	ldr	r1, [pc, #212]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101dac:	68fb      	ldr	r3, [r7, #12]
 8101dae:	4313      	orrs	r3, r2
 8101db0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101db2:	687b      	ldr	r3, [r7, #4]
 8101db4:	2b00      	cmp	r3, #0
 8101db6:	d123      	bne.n	8101e00 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101db8:	f7ff fde2 	bl	8101980 <HAL_GetCurrentCPUID>
 8101dbc:	4603      	mov	r3, r0
 8101dbe:	2b03      	cmp	r3, #3
 8101dc0:	d158      	bne.n	8101e74 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101dc2:	4b2f      	ldr	r3, [pc, #188]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101dc4:	691b      	ldr	r3, [r3, #16]
 8101dc6:	4a2e      	ldr	r2, [pc, #184]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101dc8:	f023 0301 	bic.w	r3, r3, #1
 8101dcc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101dce:	4b2d      	ldr	r3, [pc, #180]	; (8101e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101dd0:	691b      	ldr	r3, [r3, #16]
 8101dd2:	4a2c      	ldr	r2, [pc, #176]	; (8101e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101dd4:	f043 0304 	orr.w	r3, r3, #4
 8101dd8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101dda:	f3bf 8f4f 	dsb	sy
}
 8101dde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101de0:	f3bf 8f6f 	isb	sy
}
 8101de4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101de6:	7afb      	ldrb	r3, [r7, #11]
 8101de8:	2b01      	cmp	r3, #1
 8101dea:	d101      	bne.n	8101df0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101dec:	bf30      	wfi
 8101dee:	e000      	b.n	8101df2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101df0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101df2:	4b24      	ldr	r3, [pc, #144]	; (8101e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101df4:	691b      	ldr	r3, [r3, #16]
 8101df6:	4a23      	ldr	r2, [pc, #140]	; (8101e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101df8:	f023 0304 	bic.w	r3, r3, #4
 8101dfc:	6113      	str	r3, [r2, #16]
 8101dfe:	e03c      	b.n	8101e7a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	2b01      	cmp	r3, #1
 8101e04:	d123      	bne.n	8101e4e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101e06:	f7ff fdbb 	bl	8101980 <HAL_GetCurrentCPUID>
 8101e0a:	4603      	mov	r3, r0
 8101e0c:	2b01      	cmp	r3, #1
 8101e0e:	d133      	bne.n	8101e78 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101e10:	4b1b      	ldr	r3, [pc, #108]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e12:	695b      	ldr	r3, [r3, #20]
 8101e14:	4a1a      	ldr	r2, [pc, #104]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e16:	f023 0302 	bic.w	r3, r3, #2
 8101e1a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101e1c:	4b19      	ldr	r3, [pc, #100]	; (8101e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101e1e:	691b      	ldr	r3, [r3, #16]
 8101e20:	4a18      	ldr	r2, [pc, #96]	; (8101e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101e22:	f043 0304 	orr.w	r3, r3, #4
 8101e26:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101e28:	f3bf 8f4f 	dsb	sy
}
 8101e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101e2e:	f3bf 8f6f 	isb	sy
}
 8101e32:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101e34:	7afb      	ldrb	r3, [r7, #11]
 8101e36:	2b01      	cmp	r3, #1
 8101e38:	d101      	bne.n	8101e3e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101e3a:	bf30      	wfi
 8101e3c:	e000      	b.n	8101e40 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101e3e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101e40:	4b10      	ldr	r3, [pc, #64]	; (8101e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101e42:	691b      	ldr	r3, [r3, #16]
 8101e44:	4a0f      	ldr	r2, [pc, #60]	; (8101e84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101e46:	f023 0304 	bic.w	r3, r3, #4
 8101e4a:	6113      	str	r3, [r2, #16]
 8101e4c:	e015      	b.n	8101e7a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101e4e:	f7ff fd97 	bl	8101980 <HAL_GetCurrentCPUID>
 8101e52:	4603      	mov	r3, r0
 8101e54:	2b03      	cmp	r3, #3
 8101e56:	d106      	bne.n	8101e66 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101e58:	4b09      	ldr	r3, [pc, #36]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e5a:	691b      	ldr	r3, [r3, #16]
 8101e5c:	4a08      	ldr	r2, [pc, #32]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e5e:	f023 0304 	bic.w	r3, r3, #4
 8101e62:	6113      	str	r3, [r2, #16]
 8101e64:	e009      	b.n	8101e7a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101e66:	4b06      	ldr	r3, [pc, #24]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e68:	695b      	ldr	r3, [r3, #20]
 8101e6a:	4a05      	ldr	r2, [pc, #20]	; (8101e80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e6c:	f023 0304 	bic.w	r3, r3, #4
 8101e70:	6153      	str	r3, [r2, #20]
 8101e72:	e002      	b.n	8101e7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101e74:	bf00      	nop
 8101e76:	e000      	b.n	8101e7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101e78:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101e7a:	3710      	adds	r7, #16
 8101e7c:	46bd      	mov	sp, r7
 8101e7e:	bd80      	pop	{r7, pc}
 8101e80:	58024800 	.word	0x58024800
 8101e84:	e000ed00 	.word	0xe000ed00

08101e88 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101e88:	b580      	push	{r7, lr}
 8101e8a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101e8c:	f7ff fd78 	bl	8101980 <HAL_GetCurrentCPUID>
 8101e90:	4603      	mov	r3, r0
 8101e92:	2b03      	cmp	r3, #3
 8101e94:	d101      	bne.n	8101e9a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101e96:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101e98:	e001      	b.n	8101e9e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101e9a:	bf40      	sev
    __WFE ();
 8101e9c:	bf20      	wfe
}
 8101e9e:	bf00      	nop
 8101ea0:	bd80      	pop	{r7, pc}
	...

08101ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101ea4:	b480      	push	{r7}
 8101ea6:	b089      	sub	sp, #36	; 0x24
 8101ea8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101eaa:	4bb3      	ldr	r3, [pc, #716]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101eac:	691b      	ldr	r3, [r3, #16]
 8101eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101eb2:	2b18      	cmp	r3, #24
 8101eb4:	f200 8155 	bhi.w	8102162 <HAL_RCC_GetSysClockFreq+0x2be>
 8101eb8:	a201      	add	r2, pc, #4	; (adr r2, 8101ec0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ebe:	bf00      	nop
 8101ec0:	08101f25 	.word	0x08101f25
 8101ec4:	08102163 	.word	0x08102163
 8101ec8:	08102163 	.word	0x08102163
 8101ecc:	08102163 	.word	0x08102163
 8101ed0:	08102163 	.word	0x08102163
 8101ed4:	08102163 	.word	0x08102163
 8101ed8:	08102163 	.word	0x08102163
 8101edc:	08102163 	.word	0x08102163
 8101ee0:	08101f4b 	.word	0x08101f4b
 8101ee4:	08102163 	.word	0x08102163
 8101ee8:	08102163 	.word	0x08102163
 8101eec:	08102163 	.word	0x08102163
 8101ef0:	08102163 	.word	0x08102163
 8101ef4:	08102163 	.word	0x08102163
 8101ef8:	08102163 	.word	0x08102163
 8101efc:	08102163 	.word	0x08102163
 8101f00:	08101f51 	.word	0x08101f51
 8101f04:	08102163 	.word	0x08102163
 8101f08:	08102163 	.word	0x08102163
 8101f0c:	08102163 	.word	0x08102163
 8101f10:	08102163 	.word	0x08102163
 8101f14:	08102163 	.word	0x08102163
 8101f18:	08102163 	.word	0x08102163
 8101f1c:	08102163 	.word	0x08102163
 8101f20:	08101f57 	.word	0x08101f57
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101f24:	4b94      	ldr	r3, [pc, #592]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f26:	681b      	ldr	r3, [r3, #0]
 8101f28:	f003 0320 	and.w	r3, r3, #32
 8101f2c:	2b00      	cmp	r3, #0
 8101f2e:	d009      	beq.n	8101f44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101f30:	4b91      	ldr	r3, [pc, #580]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f32:	681b      	ldr	r3, [r3, #0]
 8101f34:	08db      	lsrs	r3, r3, #3
 8101f36:	f003 0303 	and.w	r3, r3, #3
 8101f3a:	4a90      	ldr	r2, [pc, #576]	; (810217c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8101f40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8101f42:	e111      	b.n	8102168 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101f44:	4b8d      	ldr	r3, [pc, #564]	; (810217c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101f46:	61bb      	str	r3, [r7, #24]
    break;
 8101f48:	e10e      	b.n	8102168 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101f4a:	4b8d      	ldr	r3, [pc, #564]	; (8102180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101f4c:	61bb      	str	r3, [r7, #24]
    break;
 8101f4e:	e10b      	b.n	8102168 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101f50:	4b8c      	ldr	r3, [pc, #560]	; (8102184 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101f52:	61bb      	str	r3, [r7, #24]
    break;
 8101f54:	e108      	b.n	8102168 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101f56:	4b88      	ldr	r3, [pc, #544]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101f5a:	f003 0303 	and.w	r3, r3, #3
 8101f5e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101f60:	4b85      	ldr	r3, [pc, #532]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101f64:	091b      	lsrs	r3, r3, #4
 8101f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101f6a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101f6c:	4b82      	ldr	r3, [pc, #520]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f70:	f003 0301 	and.w	r3, r3, #1
 8101f74:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101f76:	4b80      	ldr	r3, [pc, #512]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101f7a:	08db      	lsrs	r3, r3, #3
 8101f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101f80:	68fa      	ldr	r2, [r7, #12]
 8101f82:	fb02 f303 	mul.w	r3, r2, r3
 8101f86:	ee07 3a90 	vmov	s15, r3
 8101f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f8e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8101f92:	693b      	ldr	r3, [r7, #16]
 8101f94:	2b00      	cmp	r3, #0
 8101f96:	f000 80e1 	beq.w	810215c <HAL_RCC_GetSysClockFreq+0x2b8>
 8101f9a:	697b      	ldr	r3, [r7, #20]
 8101f9c:	2b02      	cmp	r3, #2
 8101f9e:	f000 8083 	beq.w	81020a8 <HAL_RCC_GetSysClockFreq+0x204>
 8101fa2:	697b      	ldr	r3, [r7, #20]
 8101fa4:	2b02      	cmp	r3, #2
 8101fa6:	f200 80a1 	bhi.w	81020ec <HAL_RCC_GetSysClockFreq+0x248>
 8101faa:	697b      	ldr	r3, [r7, #20]
 8101fac:	2b00      	cmp	r3, #0
 8101fae:	d003      	beq.n	8101fb8 <HAL_RCC_GetSysClockFreq+0x114>
 8101fb0:	697b      	ldr	r3, [r7, #20]
 8101fb2:	2b01      	cmp	r3, #1
 8101fb4:	d056      	beq.n	8102064 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101fb6:	e099      	b.n	81020ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101fb8:	4b6f      	ldr	r3, [pc, #444]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	f003 0320 	and.w	r3, r3, #32
 8101fc0:	2b00      	cmp	r3, #0
 8101fc2:	d02d      	beq.n	8102020 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101fc4:	4b6c      	ldr	r3, [pc, #432]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fc6:	681b      	ldr	r3, [r3, #0]
 8101fc8:	08db      	lsrs	r3, r3, #3
 8101fca:	f003 0303 	and.w	r3, r3, #3
 8101fce:	4a6b      	ldr	r2, [pc, #428]	; (810217c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8101fd4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	ee07 3a90 	vmov	s15, r3
 8101fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101fe0:	693b      	ldr	r3, [r7, #16]
 8101fe2:	ee07 3a90 	vmov	s15, r3
 8101fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fee:	4b62      	ldr	r3, [pc, #392]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ff6:	ee07 3a90 	vmov	s15, r3
 8101ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8102002:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810200a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810200e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102016:	ee67 7a27 	vmul.f32	s15, s14, s15
 810201a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810201e:	e087      	b.n	8102130 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102020:	693b      	ldr	r3, [r7, #16]
 8102022:	ee07 3a90 	vmov	s15, r3
 8102026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810202a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810218c <HAL_RCC_GetSysClockFreq+0x2e8>
 810202e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102032:	4b51      	ldr	r3, [pc, #324]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810203a:	ee07 3a90 	vmov	s15, r3
 810203e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102042:	ed97 6a02 	vldr	s12, [r7, #8]
 8102046:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102188 <HAL_RCC_GetSysClockFreq+0x2e4>
 810204a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810204e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810205a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810205e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102062:	e065      	b.n	8102130 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102064:	693b      	ldr	r3, [r7, #16]
 8102066:	ee07 3a90 	vmov	s15, r3
 810206a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810206e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102190 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102076:	4b40      	ldr	r3, [pc, #256]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810207a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810207e:	ee07 3a90 	vmov	s15, r3
 8102082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102086:	ed97 6a02 	vldr	s12, [r7, #8]
 810208a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102188 <HAL_RCC_GetSysClockFreq+0x2e4>
 810208e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810209a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810209e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81020a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81020a6:	e043      	b.n	8102130 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81020a8:	693b      	ldr	r3, [r7, #16]
 81020aa:	ee07 3a90 	vmov	s15, r3
 81020ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81020b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102194 <HAL_RCC_GetSysClockFreq+0x2f0>
 81020b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81020ba:	4b2f      	ldr	r3, [pc, #188]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81020be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81020c2:	ee07 3a90 	vmov	s15, r3
 81020c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81020ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81020ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102188 <HAL_RCC_GetSysClockFreq+0x2e4>
 81020d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81020d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81020da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81020de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81020e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81020e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81020ea:	e021      	b.n	8102130 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81020ec:	693b      	ldr	r3, [r7, #16]
 81020ee:	ee07 3a90 	vmov	s15, r3
 81020f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81020f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102190 <HAL_RCC_GetSysClockFreq+0x2ec>
 81020fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81020fe:	4b1e      	ldr	r3, [pc, #120]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102106:	ee07 3a90 	vmov	s15, r3
 810210a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810210e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102112:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810211a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810211e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102126:	ee67 7a27 	vmul.f32	s15, s14, s15
 810212a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810212e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102130:	4b11      	ldr	r3, [pc, #68]	; (8102178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102134:	0a5b      	lsrs	r3, r3, #9
 8102136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810213a:	3301      	adds	r3, #1
 810213c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810213e:	683b      	ldr	r3, [r7, #0]
 8102140:	ee07 3a90 	vmov	s15, r3
 8102144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102148:	edd7 6a07 	vldr	s13, [r7, #28]
 810214c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102154:	ee17 3a90 	vmov	r3, s15
 8102158:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810215a:	e005      	b.n	8102168 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810215c:	2300      	movs	r3, #0
 810215e:	61bb      	str	r3, [r7, #24]
    break;
 8102160:	e002      	b.n	8102168 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102162:	4b07      	ldr	r3, [pc, #28]	; (8102180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102164:	61bb      	str	r3, [r7, #24]
    break;
 8102166:	bf00      	nop
  }

  return sysclockfreq;
 8102168:	69bb      	ldr	r3, [r7, #24]
}
 810216a:	4618      	mov	r0, r3
 810216c:	3724      	adds	r7, #36	; 0x24
 810216e:	46bd      	mov	sp, r7
 8102170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102174:	4770      	bx	lr
 8102176:	bf00      	nop
 8102178:	58024400 	.word	0x58024400
 810217c:	03d09000 	.word	0x03d09000
 8102180:	003d0900 	.word	0x003d0900
 8102184:	007a1200 	.word	0x007a1200
 8102188:	46000000 	.word	0x46000000
 810218c:	4c742400 	.word	0x4c742400
 8102190:	4a742400 	.word	0x4a742400
 8102194:	4af42400 	.word	0x4af42400

08102198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102198:	b580      	push	{r7, lr}
 810219a:	b082      	sub	sp, #8
 810219c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810219e:	f7ff fe81 	bl	8101ea4 <HAL_RCC_GetSysClockFreq>
 81021a2:	4602      	mov	r2, r0
 81021a4:	4b11      	ldr	r3, [pc, #68]	; (81021ec <HAL_RCC_GetHCLKFreq+0x54>)
 81021a6:	699b      	ldr	r3, [r3, #24]
 81021a8:	0a1b      	lsrs	r3, r3, #8
 81021aa:	f003 030f 	and.w	r3, r3, #15
 81021ae:	4910      	ldr	r1, [pc, #64]	; (81021f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81021b0:	5ccb      	ldrb	r3, [r1, r3]
 81021b2:	f003 031f 	and.w	r3, r3, #31
 81021b6:	fa22 f303 	lsr.w	r3, r2, r3
 81021ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81021bc:	4b0b      	ldr	r3, [pc, #44]	; (81021ec <HAL_RCC_GetHCLKFreq+0x54>)
 81021be:	699b      	ldr	r3, [r3, #24]
 81021c0:	f003 030f 	and.w	r3, r3, #15
 81021c4:	4a0a      	ldr	r2, [pc, #40]	; (81021f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81021c6:	5cd3      	ldrb	r3, [r2, r3]
 81021c8:	f003 031f 	and.w	r3, r3, #31
 81021cc:	687a      	ldr	r2, [r7, #4]
 81021ce:	fa22 f303 	lsr.w	r3, r2, r3
 81021d2:	4a08      	ldr	r2, [pc, #32]	; (81021f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81021d4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81021d6:	4b07      	ldr	r3, [pc, #28]	; (81021f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	4a07      	ldr	r2, [pc, #28]	; (81021f8 <HAL_RCC_GetHCLKFreq+0x60>)
 81021dc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81021de:	4b05      	ldr	r3, [pc, #20]	; (81021f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81021e0:	681b      	ldr	r3, [r3, #0]
}
 81021e2:	4618      	mov	r0, r3
 81021e4:	3708      	adds	r7, #8
 81021e6:	46bd      	mov	sp, r7
 81021e8:	bd80      	pop	{r7, pc}
 81021ea:	bf00      	nop
 81021ec:	58024400 	.word	0x58024400
 81021f0:	08106dc0 	.word	0x08106dc0
 81021f4:	10000004 	.word	0x10000004
 81021f8:	10000000 	.word	0x10000000

081021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81021fc:	b580      	push	{r7, lr}
 81021fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102200:	f7ff ffca 	bl	8102198 <HAL_RCC_GetHCLKFreq>
 8102204:	4602      	mov	r2, r0
 8102206:	4b06      	ldr	r3, [pc, #24]	; (8102220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102208:	69db      	ldr	r3, [r3, #28]
 810220a:	091b      	lsrs	r3, r3, #4
 810220c:	f003 0307 	and.w	r3, r3, #7
 8102210:	4904      	ldr	r1, [pc, #16]	; (8102224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102212:	5ccb      	ldrb	r3, [r1, r3]
 8102214:	f003 031f 	and.w	r3, r3, #31
 8102218:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810221c:	4618      	mov	r0, r3
 810221e:	bd80      	pop	{r7, pc}
 8102220:	58024400 	.word	0x58024400
 8102224:	08106dc0 	.word	0x08106dc0

08102228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102228:	b580      	push	{r7, lr}
 810222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810222c:	f7ff ffb4 	bl	8102198 <HAL_RCC_GetHCLKFreq>
 8102230:	4602      	mov	r2, r0
 8102232:	4b06      	ldr	r3, [pc, #24]	; (810224c <HAL_RCC_GetPCLK2Freq+0x24>)
 8102234:	69db      	ldr	r3, [r3, #28]
 8102236:	0a1b      	lsrs	r3, r3, #8
 8102238:	f003 0307 	and.w	r3, r3, #7
 810223c:	4904      	ldr	r1, [pc, #16]	; (8102250 <HAL_RCC_GetPCLK2Freq+0x28>)
 810223e:	5ccb      	ldrb	r3, [r1, r3]
 8102240:	f003 031f 	and.w	r3, r3, #31
 8102244:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102248:	4618      	mov	r0, r3
 810224a:	bd80      	pop	{r7, pc}
 810224c:	58024400 	.word	0x58024400
 8102250:	08106dc0 	.word	0x08106dc0

08102254 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102254:	b580      	push	{r7, lr}
 8102256:	b086      	sub	sp, #24
 8102258:	af00      	add	r7, sp, #0
 810225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810225c:	2300      	movs	r3, #0
 810225e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102260:	2300      	movs	r3, #0
 8102262:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810226c:	2b00      	cmp	r3, #0
 810226e:	d03f      	beq.n	81022f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102274:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102278:	d02a      	beq.n	81022d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810227a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810227e:	d824      	bhi.n	81022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102280:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102284:	d018      	beq.n	81022b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810228a:	d81e      	bhi.n	81022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 810228c:	2b00      	cmp	r3, #0
 810228e:	d003      	beq.n	8102298 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102294:	d007      	beq.n	81022a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102296:	e018      	b.n	81022ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102298:	4bab      	ldr	r3, [pc, #684]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810229c:	4aaa      	ldr	r2, [pc, #680]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810229e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81022a4:	e015      	b.n	81022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81022a6:	687b      	ldr	r3, [r7, #4]
 81022a8:	3304      	adds	r3, #4
 81022aa:	2102      	movs	r1, #2
 81022ac:	4618      	mov	r0, r3
 81022ae:	f001 f9cf 	bl	8103650 <RCCEx_PLL2_Config>
 81022b2:	4603      	mov	r3, r0
 81022b4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81022b6:	e00c      	b.n	81022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81022b8:	687b      	ldr	r3, [r7, #4]
 81022ba:	3324      	adds	r3, #36	; 0x24
 81022bc:	2102      	movs	r1, #2
 81022be:	4618      	mov	r0, r3
 81022c0:	f001 fa78 	bl	81037b4 <RCCEx_PLL3_Config>
 81022c4:	4603      	mov	r3, r0
 81022c6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81022c8:	e003      	b.n	81022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81022ca:	2301      	movs	r3, #1
 81022cc:	75fb      	strb	r3, [r7, #23]
      break;
 81022ce:	e000      	b.n	81022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81022d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81022d2:	7dfb      	ldrb	r3, [r7, #23]
 81022d4:	2b00      	cmp	r3, #0
 81022d6:	d109      	bne.n	81022ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81022d8:	4b9b      	ldr	r3, [pc, #620]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81022da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81022dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81022e0:	687b      	ldr	r3, [r7, #4]
 81022e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81022e4:	4998      	ldr	r1, [pc, #608]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81022e6:	4313      	orrs	r3, r2
 81022e8:	650b      	str	r3, [r1, #80]	; 0x50
 81022ea:	e001      	b.n	81022f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022ec:	7dfb      	ldrb	r3, [r7, #23]
 81022ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81022f0:	687b      	ldr	r3, [r7, #4]
 81022f2:	681b      	ldr	r3, [r3, #0]
 81022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81022f8:	2b00      	cmp	r3, #0
 81022fa:	d03d      	beq.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102300:	2b04      	cmp	r3, #4
 8102302:	d826      	bhi.n	8102352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102304:	a201      	add	r2, pc, #4	; (adr r2, 810230c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810230a:	bf00      	nop
 810230c:	08102321 	.word	0x08102321
 8102310:	0810232f 	.word	0x0810232f
 8102314:	08102341 	.word	0x08102341
 8102318:	08102359 	.word	0x08102359
 810231c:	08102359 	.word	0x08102359
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102320:	4b89      	ldr	r3, [pc, #548]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102324:	4a88      	ldr	r2, [pc, #544]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810232a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810232c:	e015      	b.n	810235a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810232e:	687b      	ldr	r3, [r7, #4]
 8102330:	3304      	adds	r3, #4
 8102332:	2100      	movs	r1, #0
 8102334:	4618      	mov	r0, r3
 8102336:	f001 f98b 	bl	8103650 <RCCEx_PLL2_Config>
 810233a:	4603      	mov	r3, r0
 810233c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810233e:	e00c      	b.n	810235a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102340:	687b      	ldr	r3, [r7, #4]
 8102342:	3324      	adds	r3, #36	; 0x24
 8102344:	2100      	movs	r1, #0
 8102346:	4618      	mov	r0, r3
 8102348:	f001 fa34 	bl	81037b4 <RCCEx_PLL3_Config>
 810234c:	4603      	mov	r3, r0
 810234e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102350:	e003      	b.n	810235a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102352:	2301      	movs	r3, #1
 8102354:	75fb      	strb	r3, [r7, #23]
      break;
 8102356:	e000      	b.n	810235a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102358:	bf00      	nop
    }

    if(ret == HAL_OK)
 810235a:	7dfb      	ldrb	r3, [r7, #23]
 810235c:	2b00      	cmp	r3, #0
 810235e:	d109      	bne.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102360:	4b79      	ldr	r3, [pc, #484]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102364:	f023 0207 	bic.w	r2, r3, #7
 8102368:	687b      	ldr	r3, [r7, #4]
 810236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810236c:	4976      	ldr	r1, [pc, #472]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810236e:	4313      	orrs	r3, r2
 8102370:	650b      	str	r3, [r1, #80]	; 0x50
 8102372:	e001      	b.n	8102378 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102374:	7dfb      	ldrb	r3, [r7, #23]
 8102376:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102378:	687b      	ldr	r3, [r7, #4]
 810237a:	681b      	ldr	r3, [r3, #0]
 810237c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102380:	2b00      	cmp	r3, #0
 8102382:	d042      	beq.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810238c:	d02b      	beq.n	81023e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810238e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102392:	d825      	bhi.n	81023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102394:	2bc0      	cmp	r3, #192	; 0xc0
 8102396:	d028      	beq.n	81023ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102398:	2bc0      	cmp	r3, #192	; 0xc0
 810239a:	d821      	bhi.n	81023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810239c:	2b80      	cmp	r3, #128	; 0x80
 810239e:	d016      	beq.n	81023ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
 81023a0:	2b80      	cmp	r3, #128	; 0x80
 81023a2:	d81d      	bhi.n	81023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 81023a4:	2b00      	cmp	r3, #0
 81023a6:	d002      	beq.n	81023ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
 81023a8:	2b40      	cmp	r3, #64	; 0x40
 81023aa:	d007      	beq.n	81023bc <HAL_RCCEx_PeriphCLKConfig+0x168>
 81023ac:	e018      	b.n	81023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023ae:	4b66      	ldr	r3, [pc, #408]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023b2:	4a65      	ldr	r2, [pc, #404]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81023b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81023b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81023ba:	e017      	b.n	81023ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	3304      	adds	r3, #4
 81023c0:	2100      	movs	r1, #0
 81023c2:	4618      	mov	r0, r3
 81023c4:	f001 f944 	bl	8103650 <RCCEx_PLL2_Config>
 81023c8:	4603      	mov	r3, r0
 81023ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81023cc:	e00e      	b.n	81023ec <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81023ce:	687b      	ldr	r3, [r7, #4]
 81023d0:	3324      	adds	r3, #36	; 0x24
 81023d2:	2100      	movs	r1, #0
 81023d4:	4618      	mov	r0, r3
 81023d6:	f001 f9ed 	bl	81037b4 <RCCEx_PLL3_Config>
 81023da:	4603      	mov	r3, r0
 81023dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81023de:	e005      	b.n	81023ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81023e0:	2301      	movs	r3, #1
 81023e2:	75fb      	strb	r3, [r7, #23]
      break;
 81023e4:	e002      	b.n	81023ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81023e6:	bf00      	nop
 81023e8:	e000      	b.n	81023ec <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81023ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81023ec:	7dfb      	ldrb	r3, [r7, #23]
 81023ee:	2b00      	cmp	r3, #0
 81023f0:	d109      	bne.n	8102406 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81023f2:	4b55      	ldr	r3, [pc, #340]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81023f6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81023fa:	687b      	ldr	r3, [r7, #4]
 81023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81023fe:	4952      	ldr	r1, [pc, #328]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102400:	4313      	orrs	r3, r2
 8102402:	650b      	str	r3, [r1, #80]	; 0x50
 8102404:	e001      	b.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102406:	7dfb      	ldrb	r3, [r7, #23]
 8102408:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810240a:	687b      	ldr	r3, [r7, #4]
 810240c:	681b      	ldr	r3, [r3, #0]
 810240e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102412:	2b00      	cmp	r3, #0
 8102414:	d049      	beq.n	81024aa <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810241c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102420:	d030      	beq.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102422:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102426:	d82a      	bhi.n	810247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102428:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810242c:	d02c      	beq.n	8102488 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810242e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102432:	d824      	bhi.n	810247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102438:	d018      	beq.n	810246c <HAL_RCCEx_PeriphCLKConfig+0x218>
 810243a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810243e:	d81e      	bhi.n	810247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102440:	2b00      	cmp	r3, #0
 8102442:	d003      	beq.n	810244c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102448:	d007      	beq.n	810245a <HAL_RCCEx_PeriphCLKConfig+0x206>
 810244a:	e018      	b.n	810247e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810244c:	4b3e      	ldr	r3, [pc, #248]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102450:	4a3d      	ldr	r2, [pc, #244]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102458:	e017      	b.n	810248a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810245a:	687b      	ldr	r3, [r7, #4]
 810245c:	3304      	adds	r3, #4
 810245e:	2100      	movs	r1, #0
 8102460:	4618      	mov	r0, r3
 8102462:	f001 f8f5 	bl	8103650 <RCCEx_PLL2_Config>
 8102466:	4603      	mov	r3, r0
 8102468:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810246a:	e00e      	b.n	810248a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810246c:	687b      	ldr	r3, [r7, #4]
 810246e:	3324      	adds	r3, #36	; 0x24
 8102470:	2100      	movs	r1, #0
 8102472:	4618      	mov	r0, r3
 8102474:	f001 f99e 	bl	81037b4 <RCCEx_PLL3_Config>
 8102478:	4603      	mov	r3, r0
 810247a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810247c:	e005      	b.n	810248a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810247e:	2301      	movs	r3, #1
 8102480:	75fb      	strb	r3, [r7, #23]
      break;
 8102482:	e002      	b.n	810248a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102484:	bf00      	nop
 8102486:	e000      	b.n	810248a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102488:	bf00      	nop
    }

    if(ret == HAL_OK)
 810248a:	7dfb      	ldrb	r3, [r7, #23]
 810248c:	2b00      	cmp	r3, #0
 810248e:	d10a      	bne.n	81024a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102490:	4b2d      	ldr	r3, [pc, #180]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102494:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810249e:	492a      	ldr	r1, [pc, #168]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81024a0:	4313      	orrs	r3, r2
 81024a2:	658b      	str	r3, [r1, #88]	; 0x58
 81024a4:	e001      	b.n	81024aa <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024a6:	7dfb      	ldrb	r3, [r7, #23]
 81024a8:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	681b      	ldr	r3, [r3, #0]
 81024ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81024b2:	2b00      	cmp	r3, #0
 81024b4:	d04c      	beq.n	8102550 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81024b6:	687b      	ldr	r3, [r7, #4]
 81024b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81024bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81024c0:	d030      	beq.n	8102524 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81024c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81024c6:	d82a      	bhi.n	810251e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81024c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81024cc:	d02c      	beq.n	8102528 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81024ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81024d2:	d824      	bhi.n	810251e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81024d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81024d8:	d018      	beq.n	810250c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81024da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81024de:	d81e      	bhi.n	810251e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81024e0:	2b00      	cmp	r3, #0
 81024e2:	d003      	beq.n	81024ec <HAL_RCCEx_PeriphCLKConfig+0x298>
 81024e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81024e8:	d007      	beq.n	81024fa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81024ea:	e018      	b.n	810251e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81024ec:	4b16      	ldr	r3, [pc, #88]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024f0:	4a15      	ldr	r2, [pc, #84]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81024f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81024f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81024f8:	e017      	b.n	810252a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81024fa:	687b      	ldr	r3, [r7, #4]
 81024fc:	3304      	adds	r3, #4
 81024fe:	2100      	movs	r1, #0
 8102500:	4618      	mov	r0, r3
 8102502:	f001 f8a5 	bl	8103650 <RCCEx_PLL2_Config>
 8102506:	4603      	mov	r3, r0
 8102508:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810250a:	e00e      	b.n	810252a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	3324      	adds	r3, #36	; 0x24
 8102510:	2100      	movs	r1, #0
 8102512:	4618      	mov	r0, r3
 8102514:	f001 f94e 	bl	81037b4 <RCCEx_PLL3_Config>
 8102518:	4603      	mov	r3, r0
 810251a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810251c:	e005      	b.n	810252a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810251e:	2301      	movs	r3, #1
 8102520:	75fb      	strb	r3, [r7, #23]
      break;
 8102522:	e002      	b.n	810252a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102524:	bf00      	nop
 8102526:	e000      	b.n	810252a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102528:	bf00      	nop
    }

    if(ret == HAL_OK)
 810252a:	7dfb      	ldrb	r3, [r7, #23]
 810252c:	2b00      	cmp	r3, #0
 810252e:	d10d      	bne.n	810254c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102530:	4b05      	ldr	r3, [pc, #20]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102534:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810253e:	4902      	ldr	r1, [pc, #8]	; (8102548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102540:	4313      	orrs	r3, r2
 8102542:	658b      	str	r3, [r1, #88]	; 0x58
 8102544:	e004      	b.n	8102550 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8102546:	bf00      	nop
 8102548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810254c:	7dfb      	ldrb	r3, [r7, #23]
 810254e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102550:	687b      	ldr	r3, [r7, #4]
 8102552:	681b      	ldr	r3, [r3, #0]
 8102554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102558:	2b00      	cmp	r3, #0
 810255a:	d032      	beq.n	81025c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102560:	2b30      	cmp	r3, #48	; 0x30
 8102562:	d01c      	beq.n	810259e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102564:	2b30      	cmp	r3, #48	; 0x30
 8102566:	d817      	bhi.n	8102598 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102568:	2b20      	cmp	r3, #32
 810256a:	d00c      	beq.n	8102586 <HAL_RCCEx_PeriphCLKConfig+0x332>
 810256c:	2b20      	cmp	r3, #32
 810256e:	d813      	bhi.n	8102598 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102570:	2b00      	cmp	r3, #0
 8102572:	d016      	beq.n	81025a2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8102574:	2b10      	cmp	r3, #16
 8102576:	d10f      	bne.n	8102598 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102578:	4baf      	ldr	r3, [pc, #700]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810257c:	4aae      	ldr	r2, [pc, #696]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810257e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102584:	e00e      	b.n	81025a4 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	3304      	adds	r3, #4
 810258a:	2102      	movs	r1, #2
 810258c:	4618      	mov	r0, r3
 810258e:	f001 f85f 	bl	8103650 <RCCEx_PLL2_Config>
 8102592:	4603      	mov	r3, r0
 8102594:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102596:	e005      	b.n	81025a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102598:	2301      	movs	r3, #1
 810259a:	75fb      	strb	r3, [r7, #23]
      break;
 810259c:	e002      	b.n	81025a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810259e:	bf00      	nop
 81025a0:	e000      	b.n	81025a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 81025a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81025a4:	7dfb      	ldrb	r3, [r7, #23]
 81025a6:	2b00      	cmp	r3, #0
 81025a8:	d109      	bne.n	81025be <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81025aa:	4ba3      	ldr	r3, [pc, #652]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81025ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 81025b2:	687b      	ldr	r3, [r7, #4]
 81025b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81025b6:	49a0      	ldr	r1, [pc, #640]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81025b8:	4313      	orrs	r3, r2
 81025ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 81025bc:	e001      	b.n	81025c2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025be:	7dfb      	ldrb	r3, [r7, #23]
 81025c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	681b      	ldr	r3, [r3, #0]
 81025c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81025ca:	2b00      	cmp	r3, #0
 81025cc:	d047      	beq.n	810265e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81025d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81025d6:	d030      	beq.n	810263a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81025d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81025dc:	d82a      	bhi.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81025de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81025e2:	d02c      	beq.n	810263e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81025e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81025e8:	d824      	bhi.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81025ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81025ee:	d018      	beq.n	8102622 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81025f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81025f4:	d81e      	bhi.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	d003      	beq.n	8102602 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81025fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81025fe:	d007      	beq.n	8102610 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8102600:	e018      	b.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102602:	4b8d      	ldr	r3, [pc, #564]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102606:	4a8c      	ldr	r2, [pc, #560]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810260c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810260e:	e017      	b.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102610:	687b      	ldr	r3, [r7, #4]
 8102612:	3304      	adds	r3, #4
 8102614:	2100      	movs	r1, #0
 8102616:	4618      	mov	r0, r3
 8102618:	f001 f81a 	bl	8103650 <RCCEx_PLL2_Config>
 810261c:	4603      	mov	r3, r0
 810261e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102620:	e00e      	b.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	3324      	adds	r3, #36	; 0x24
 8102626:	2100      	movs	r1, #0
 8102628:	4618      	mov	r0, r3
 810262a:	f001 f8c3 	bl	81037b4 <RCCEx_PLL3_Config>
 810262e:	4603      	mov	r3, r0
 8102630:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102632:	e005      	b.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102634:	2301      	movs	r3, #1
 8102636:	75fb      	strb	r3, [r7, #23]
      break;
 8102638:	e002      	b.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810263a:	bf00      	nop
 810263c:	e000      	b.n	8102640 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810263e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102640:	7dfb      	ldrb	r3, [r7, #23]
 8102642:	2b00      	cmp	r3, #0
 8102644:	d109      	bne.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102646:	4b7c      	ldr	r3, [pc, #496]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810264a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810264e:	687b      	ldr	r3, [r7, #4]
 8102650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8102652:	4979      	ldr	r1, [pc, #484]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102654:	4313      	orrs	r3, r2
 8102656:	650b      	str	r3, [r1, #80]	; 0x50
 8102658:	e001      	b.n	810265e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810265a:	7dfb      	ldrb	r3, [r7, #23]
 810265c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810265e:	687b      	ldr	r3, [r7, #4]
 8102660:	681b      	ldr	r3, [r3, #0]
 8102662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102666:	2b00      	cmp	r3, #0
 8102668:	d049      	beq.n	81026fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 810266a:	687b      	ldr	r3, [r7, #4]
 810266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810266e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102672:	d02e      	beq.n	81026d2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8102674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102678:	d828      	bhi.n	81026cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 810267a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810267e:	d02a      	beq.n	81026d6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8102680:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102684:	d822      	bhi.n	81026cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102686:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810268a:	d026      	beq.n	81026da <HAL_RCCEx_PeriphCLKConfig+0x486>
 810268c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102690:	d81c      	bhi.n	81026cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102692:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102696:	d010      	beq.n	81026ba <HAL_RCCEx_PeriphCLKConfig+0x466>
 8102698:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810269c:	d816      	bhi.n	81026cc <HAL_RCCEx_PeriphCLKConfig+0x478>
 810269e:	2b00      	cmp	r3, #0
 81026a0:	d01d      	beq.n	81026de <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81026a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81026a6:	d111      	bne.n	81026cc <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81026a8:	687b      	ldr	r3, [r7, #4]
 81026aa:	3304      	adds	r3, #4
 81026ac:	2101      	movs	r1, #1
 81026ae:	4618      	mov	r0, r3
 81026b0:	f000 ffce 	bl	8103650 <RCCEx_PLL2_Config>
 81026b4:	4603      	mov	r3, r0
 81026b6:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81026b8:	e012      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81026ba:	687b      	ldr	r3, [r7, #4]
 81026bc:	3324      	adds	r3, #36	; 0x24
 81026be:	2101      	movs	r1, #1
 81026c0:	4618      	mov	r0, r3
 81026c2:	f001 f877 	bl	81037b4 <RCCEx_PLL3_Config>
 81026c6:	4603      	mov	r3, r0
 81026c8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81026ca:	e009      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81026cc:	2301      	movs	r3, #1
 81026ce:	75fb      	strb	r3, [r7, #23]
      break;
 81026d0:	e006      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81026d2:	bf00      	nop
 81026d4:	e004      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81026d6:	bf00      	nop
 81026d8:	e002      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81026da:	bf00      	nop
 81026dc:	e000      	b.n	81026e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81026de:	bf00      	nop
    }

    if(ret == HAL_OK)
 81026e0:	7dfb      	ldrb	r3, [r7, #23]
 81026e2:	2b00      	cmp	r3, #0
 81026e4:	d109      	bne.n	81026fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81026e6:	4b54      	ldr	r3, [pc, #336]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81026ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81026f2:	4951      	ldr	r1, [pc, #324]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81026f4:	4313      	orrs	r3, r2
 81026f6:	650b      	str	r3, [r1, #80]	; 0x50
 81026f8:	e001      	b.n	81026fe <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026fa:	7dfb      	ldrb	r3, [r7, #23]
 81026fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81026fe:	687b      	ldr	r3, [r7, #4]
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102706:	2b00      	cmp	r3, #0
 8102708:	d04b      	beq.n	81027a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810270a:	687b      	ldr	r3, [r7, #4]
 810270c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102710:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102714:	d02e      	beq.n	8102774 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8102716:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810271a:	d828      	bhi.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810271c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102720:	d02a      	beq.n	8102778 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8102722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102726:	d822      	bhi.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102728:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810272c:	d026      	beq.n	810277c <HAL_RCCEx_PeriphCLKConfig+0x528>
 810272e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102732:	d81c      	bhi.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102738:	d010      	beq.n	810275c <HAL_RCCEx_PeriphCLKConfig+0x508>
 810273a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810273e:	d816      	bhi.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102740:	2b00      	cmp	r3, #0
 8102742:	d01d      	beq.n	8102780 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8102744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102748:	d111      	bne.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	3304      	adds	r3, #4
 810274e:	2101      	movs	r1, #1
 8102750:	4618      	mov	r0, r3
 8102752:	f000 ff7d 	bl	8103650 <RCCEx_PLL2_Config>
 8102756:	4603      	mov	r3, r0
 8102758:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810275a:	e012      	b.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810275c:	687b      	ldr	r3, [r7, #4]
 810275e:	3324      	adds	r3, #36	; 0x24
 8102760:	2101      	movs	r1, #1
 8102762:	4618      	mov	r0, r3
 8102764:	f001 f826 	bl	81037b4 <RCCEx_PLL3_Config>
 8102768:	4603      	mov	r3, r0
 810276a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 810276c:	e009      	b.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810276e:	2301      	movs	r3, #1
 8102770:	75fb      	strb	r3, [r7, #23]
      break;
 8102772:	e006      	b.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102774:	bf00      	nop
 8102776:	e004      	b.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102778:	bf00      	nop
 810277a:	e002      	b.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810277c:	bf00      	nop
 810277e:	e000      	b.n	8102782 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102780:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102782:	7dfb      	ldrb	r3, [r7, #23]
 8102784:	2b00      	cmp	r3, #0
 8102786:	d10a      	bne.n	810279e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102788:	4b2b      	ldr	r3, [pc, #172]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810278a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810278c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102790:	687b      	ldr	r3, [r7, #4]
 8102792:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102796:	4928      	ldr	r1, [pc, #160]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102798:	4313      	orrs	r3, r2
 810279a:	658b      	str	r3, [r1, #88]	; 0x58
 810279c:	e001      	b.n	81027a2 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810279e:	7dfb      	ldrb	r3, [r7, #23]
 81027a0:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81027a2:	687b      	ldr	r3, [r7, #4]
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81027aa:	2b00      	cmp	r3, #0
 81027ac:	d02f      	beq.n	810280e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81027ae:	687b      	ldr	r3, [r7, #4]
 81027b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81027b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81027b6:	d00e      	beq.n	81027d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 81027b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81027bc:	d814      	bhi.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 81027be:	2b00      	cmp	r3, #0
 81027c0:	d015      	beq.n	81027ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81027c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81027c6:	d10f      	bne.n	81027e8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81027c8:	4b1b      	ldr	r3, [pc, #108]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81027cc:	4a1a      	ldr	r2, [pc, #104]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81027ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81027d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81027d4:	e00c      	b.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	3304      	adds	r3, #4
 81027da:	2101      	movs	r1, #1
 81027dc:	4618      	mov	r0, r3
 81027de:	f000 ff37 	bl	8103650 <RCCEx_PLL2_Config>
 81027e2:	4603      	mov	r3, r0
 81027e4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81027e6:	e003      	b.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81027e8:	2301      	movs	r3, #1
 81027ea:	75fb      	strb	r3, [r7, #23]
      break;
 81027ec:	e000      	b.n	81027f0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81027ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 81027f0:	7dfb      	ldrb	r3, [r7, #23]
 81027f2:	2b00      	cmp	r3, #0
 81027f4:	d109      	bne.n	810280a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81027f6:	4b10      	ldr	r3, [pc, #64]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81027f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81027fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102802:	490d      	ldr	r1, [pc, #52]	; (8102838 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102804:	4313      	orrs	r3, r2
 8102806:	650b      	str	r3, [r1, #80]	; 0x50
 8102808:	e001      	b.n	810280e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810280a:	7dfb      	ldrb	r3, [r7, #23]
 810280c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	681b      	ldr	r3, [r3, #0]
 8102812:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102816:	2b00      	cmp	r3, #0
 8102818:	d033      	beq.n	8102882 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810281e:	2b03      	cmp	r3, #3
 8102820:	d81c      	bhi.n	810285c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8102822:	a201      	add	r2, pc, #4	; (adr r2, 8102828 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8102824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102828:	08102863 	.word	0x08102863
 810282c:	0810283d 	.word	0x0810283d
 8102830:	0810284b 	.word	0x0810284b
 8102834:	08102863 	.word	0x08102863
 8102838:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810283c:	4bb9      	ldr	r3, [pc, #740]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810283e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102840:	4ab8      	ldr	r2, [pc, #736]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102846:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102848:	e00c      	b.n	8102864 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810284a:	687b      	ldr	r3, [r7, #4]
 810284c:	3304      	adds	r3, #4
 810284e:	2102      	movs	r1, #2
 8102850:	4618      	mov	r0, r3
 8102852:	f000 fefd 	bl	8103650 <RCCEx_PLL2_Config>
 8102856:	4603      	mov	r3, r0
 8102858:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 810285a:	e003      	b.n	8102864 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 810285c:	2301      	movs	r3, #1
 810285e:	75fb      	strb	r3, [r7, #23]
      break;
 8102860:	e000      	b.n	8102864 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8102862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102864:	7dfb      	ldrb	r3, [r7, #23]
 8102866:	2b00      	cmp	r3, #0
 8102868:	d109      	bne.n	810287e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810286a:	4bae      	ldr	r3, [pc, #696]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810286e:	f023 0203 	bic.w	r2, r3, #3
 8102872:	687b      	ldr	r3, [r7, #4]
 8102874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102876:	49ab      	ldr	r1, [pc, #684]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102878:	4313      	orrs	r3, r2
 810287a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810287c:	e001      	b.n	8102882 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810287e:	7dfb      	ldrb	r3, [r7, #23]
 8102880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	681b      	ldr	r3, [r3, #0]
 8102886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810288a:	2b00      	cmp	r3, #0
 810288c:	f000 8088 	beq.w	81029a0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102890:	4ba5      	ldr	r3, [pc, #660]	; (8102b28 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8102892:	681b      	ldr	r3, [r3, #0]
 8102894:	4aa4      	ldr	r2, [pc, #656]	; (8102b28 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8102896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810289a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810289c:	f7fe ff30 	bl	8101700 <HAL_GetTick>
 81028a0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81028a2:	e009      	b.n	81028b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81028a4:	f7fe ff2c 	bl	8101700 <HAL_GetTick>
 81028a8:	4602      	mov	r2, r0
 81028aa:	693b      	ldr	r3, [r7, #16]
 81028ac:	1ad3      	subs	r3, r2, r3
 81028ae:	2b64      	cmp	r3, #100	; 0x64
 81028b0:	d902      	bls.n	81028b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81028b2:	2303      	movs	r3, #3
 81028b4:	75fb      	strb	r3, [r7, #23]
        break;
 81028b6:	e005      	b.n	81028c4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81028b8:	4b9b      	ldr	r3, [pc, #620]	; (8102b28 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81028c0:	2b00      	cmp	r3, #0
 81028c2:	d0ef      	beq.n	81028a4 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81028c4:	7dfb      	ldrb	r3, [r7, #23]
 81028c6:	2b00      	cmp	r3, #0
 81028c8:	d168      	bne.n	810299c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81028ca:	4b96      	ldr	r3, [pc, #600]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81028d4:	4053      	eors	r3, r2
 81028d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81028da:	2b00      	cmp	r3, #0
 81028dc:	d013      	beq.n	8102906 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81028de:	4b91      	ldr	r3, [pc, #580]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81028e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81028e6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81028e8:	4b8e      	ldr	r3, [pc, #568]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81028ec:	4a8d      	ldr	r2, [pc, #564]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81028f2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81028f4:	4b8b      	ldr	r3, [pc, #556]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81028f8:	4a8a      	ldr	r2, [pc, #552]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81028fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81028fe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102900:	4a88      	ldr	r2, [pc, #544]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102902:	68fb      	ldr	r3, [r7, #12]
 8102904:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102906:	687b      	ldr	r3, [r7, #4]
 8102908:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810290c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102910:	d115      	bne.n	810293e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102912:	f7fe fef5 	bl	8101700 <HAL_GetTick>
 8102916:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102918:	e00b      	b.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810291a:	f7fe fef1 	bl	8101700 <HAL_GetTick>
 810291e:	4602      	mov	r2, r0
 8102920:	693b      	ldr	r3, [r7, #16]
 8102922:	1ad3      	subs	r3, r2, r3
 8102924:	f241 3288 	movw	r2, #5000	; 0x1388
 8102928:	4293      	cmp	r3, r2
 810292a:	d902      	bls.n	8102932 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810292c:	2303      	movs	r3, #3
 810292e:	75fb      	strb	r3, [r7, #23]
            break;
 8102930:	e005      	b.n	810293e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102932:	4b7c      	ldr	r3, [pc, #496]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102936:	f003 0302 	and.w	r3, r3, #2
 810293a:	2b00      	cmp	r3, #0
 810293c:	d0ed      	beq.n	810291a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810293e:	7dfb      	ldrb	r3, [r7, #23]
 8102940:	2b00      	cmp	r3, #0
 8102942:	d128      	bne.n	8102996 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102944:	687b      	ldr	r3, [r7, #4]
 8102946:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810294e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102952:	d10f      	bne.n	8102974 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8102954:	4b73      	ldr	r3, [pc, #460]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102956:	691b      	ldr	r3, [r3, #16]
 8102958:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 810295c:	687b      	ldr	r3, [r7, #4]
 810295e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102962:	091b      	lsrs	r3, r3, #4
 8102964:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102968:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810296c:	496d      	ldr	r1, [pc, #436]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810296e:	4313      	orrs	r3, r2
 8102970:	610b      	str	r3, [r1, #16]
 8102972:	e005      	b.n	8102980 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8102974:	4b6b      	ldr	r3, [pc, #428]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102976:	691b      	ldr	r3, [r3, #16]
 8102978:	4a6a      	ldr	r2, [pc, #424]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810297a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810297e:	6113      	str	r3, [r2, #16]
 8102980:	4b68      	ldr	r3, [pc, #416]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102982:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102984:	687b      	ldr	r3, [r7, #4]
 8102986:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810298a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810298e:	4965      	ldr	r1, [pc, #404]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102990:	4313      	orrs	r3, r2
 8102992:	670b      	str	r3, [r1, #112]	; 0x70
 8102994:	e004      	b.n	81029a0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102996:	7dfb      	ldrb	r3, [r7, #23]
 8102998:	75bb      	strb	r3, [r7, #22]
 810299a:	e001      	b.n	81029a0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810299c:	7dfb      	ldrb	r3, [r7, #23]
 810299e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	f003 0301 	and.w	r3, r3, #1
 81029a8:	2b00      	cmp	r3, #0
 81029aa:	d07e      	beq.n	8102aaa <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81029ac:	687b      	ldr	r3, [r7, #4]
 81029ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81029b0:	2b28      	cmp	r3, #40	; 0x28
 81029b2:	d867      	bhi.n	8102a84 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81029b4:	a201      	add	r2, pc, #4	; (adr r2, 81029bc <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81029ba:	bf00      	nop
 81029bc:	08102a8b 	.word	0x08102a8b
 81029c0:	08102a85 	.word	0x08102a85
 81029c4:	08102a85 	.word	0x08102a85
 81029c8:	08102a85 	.word	0x08102a85
 81029cc:	08102a85 	.word	0x08102a85
 81029d0:	08102a85 	.word	0x08102a85
 81029d4:	08102a85 	.word	0x08102a85
 81029d8:	08102a85 	.word	0x08102a85
 81029dc:	08102a61 	.word	0x08102a61
 81029e0:	08102a85 	.word	0x08102a85
 81029e4:	08102a85 	.word	0x08102a85
 81029e8:	08102a85 	.word	0x08102a85
 81029ec:	08102a85 	.word	0x08102a85
 81029f0:	08102a85 	.word	0x08102a85
 81029f4:	08102a85 	.word	0x08102a85
 81029f8:	08102a85 	.word	0x08102a85
 81029fc:	08102a73 	.word	0x08102a73
 8102a00:	08102a85 	.word	0x08102a85
 8102a04:	08102a85 	.word	0x08102a85
 8102a08:	08102a85 	.word	0x08102a85
 8102a0c:	08102a85 	.word	0x08102a85
 8102a10:	08102a85 	.word	0x08102a85
 8102a14:	08102a85 	.word	0x08102a85
 8102a18:	08102a85 	.word	0x08102a85
 8102a1c:	08102a8b 	.word	0x08102a8b
 8102a20:	08102a85 	.word	0x08102a85
 8102a24:	08102a85 	.word	0x08102a85
 8102a28:	08102a85 	.word	0x08102a85
 8102a2c:	08102a85 	.word	0x08102a85
 8102a30:	08102a85 	.word	0x08102a85
 8102a34:	08102a85 	.word	0x08102a85
 8102a38:	08102a85 	.word	0x08102a85
 8102a3c:	08102a8b 	.word	0x08102a8b
 8102a40:	08102a85 	.word	0x08102a85
 8102a44:	08102a85 	.word	0x08102a85
 8102a48:	08102a85 	.word	0x08102a85
 8102a4c:	08102a85 	.word	0x08102a85
 8102a50:	08102a85 	.word	0x08102a85
 8102a54:	08102a85 	.word	0x08102a85
 8102a58:	08102a85 	.word	0x08102a85
 8102a5c:	08102a8b 	.word	0x08102a8b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102a60:	687b      	ldr	r3, [r7, #4]
 8102a62:	3304      	adds	r3, #4
 8102a64:	2101      	movs	r1, #1
 8102a66:	4618      	mov	r0, r3
 8102a68:	f000 fdf2 	bl	8103650 <RCCEx_PLL2_Config>
 8102a6c:	4603      	mov	r3, r0
 8102a6e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102a70:	e00c      	b.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102a72:	687b      	ldr	r3, [r7, #4]
 8102a74:	3324      	adds	r3, #36	; 0x24
 8102a76:	2101      	movs	r1, #1
 8102a78:	4618      	mov	r0, r3
 8102a7a:	f000 fe9b 	bl	81037b4 <RCCEx_PLL3_Config>
 8102a7e:	4603      	mov	r3, r0
 8102a80:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8102a82:	e003      	b.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102a84:	2301      	movs	r3, #1
 8102a86:	75fb      	strb	r3, [r7, #23]
      break;
 8102a88:	e000      	b.n	8102a8c <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8102a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a8c:	7dfb      	ldrb	r3, [r7, #23]
 8102a8e:	2b00      	cmp	r3, #0
 8102a90:	d109      	bne.n	8102aa6 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102a92:	4b24      	ldr	r3, [pc, #144]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a96:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8102a9a:	687b      	ldr	r3, [r7, #4]
 8102a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102a9e:	4921      	ldr	r1, [pc, #132]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102aa0:	4313      	orrs	r3, r2
 8102aa2:	654b      	str	r3, [r1, #84]	; 0x54
 8102aa4:	e001      	b.n	8102aaa <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102aa6:	7dfb      	ldrb	r3, [r7, #23]
 8102aa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102aaa:	687b      	ldr	r3, [r7, #4]
 8102aac:	681b      	ldr	r3, [r3, #0]
 8102aae:	f003 0302 	and.w	r3, r3, #2
 8102ab2:	2b00      	cmp	r3, #0
 8102ab4:	d03c      	beq.n	8102b30 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102aba:	2b05      	cmp	r3, #5
 8102abc:	d820      	bhi.n	8102b00 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8102abe:	a201      	add	r2, pc, #4	; (adr r2, 8102ac4 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8102ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102ac4:	08102b07 	.word	0x08102b07
 8102ac8:	08102add 	.word	0x08102add
 8102acc:	08102aef 	.word	0x08102aef
 8102ad0:	08102b07 	.word	0x08102b07
 8102ad4:	08102b07 	.word	0x08102b07
 8102ad8:	08102b07 	.word	0x08102b07
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102adc:	687b      	ldr	r3, [r7, #4]
 8102ade:	3304      	adds	r3, #4
 8102ae0:	2101      	movs	r1, #1
 8102ae2:	4618      	mov	r0, r3
 8102ae4:	f000 fdb4 	bl	8103650 <RCCEx_PLL2_Config>
 8102ae8:	4603      	mov	r3, r0
 8102aea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102aec:	e00c      	b.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102aee:	687b      	ldr	r3, [r7, #4]
 8102af0:	3324      	adds	r3, #36	; 0x24
 8102af2:	2101      	movs	r1, #1
 8102af4:	4618      	mov	r0, r3
 8102af6:	f000 fe5d 	bl	81037b4 <RCCEx_PLL3_Config>
 8102afa:	4603      	mov	r3, r0
 8102afc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102afe:	e003      	b.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b00:	2301      	movs	r3, #1
 8102b02:	75fb      	strb	r3, [r7, #23]
      break;
 8102b04:	e000      	b.n	8102b08 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8102b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b08:	7dfb      	ldrb	r3, [r7, #23]
 8102b0a:	2b00      	cmp	r3, #0
 8102b0c:	d10e      	bne.n	8102b2c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102b0e:	4b05      	ldr	r3, [pc, #20]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b12:	f023 0207 	bic.w	r2, r3, #7
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102b1a:	4902      	ldr	r1, [pc, #8]	; (8102b24 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102b1c:	4313      	orrs	r3, r2
 8102b1e:	654b      	str	r3, [r1, #84]	; 0x54
 8102b20:	e006      	b.n	8102b30 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8102b22:	bf00      	nop
 8102b24:	58024400 	.word	0x58024400
 8102b28:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b2c:	7dfb      	ldrb	r3, [r7, #23]
 8102b2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102b30:	687b      	ldr	r3, [r7, #4]
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	f003 0304 	and.w	r3, r3, #4
 8102b38:	2b00      	cmp	r3, #0
 8102b3a:	d039      	beq.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102b3c:	687b      	ldr	r3, [r7, #4]
 8102b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102b42:	2b05      	cmp	r3, #5
 8102b44:	d820      	bhi.n	8102b88 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8102b46:	a201      	add	r2, pc, #4	; (adr r2, 8102b4c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8102b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102b4c:	08102b8f 	.word	0x08102b8f
 8102b50:	08102b65 	.word	0x08102b65
 8102b54:	08102b77 	.word	0x08102b77
 8102b58:	08102b8f 	.word	0x08102b8f
 8102b5c:	08102b8f 	.word	0x08102b8f
 8102b60:	08102b8f 	.word	0x08102b8f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102b64:	687b      	ldr	r3, [r7, #4]
 8102b66:	3304      	adds	r3, #4
 8102b68:	2101      	movs	r1, #1
 8102b6a:	4618      	mov	r0, r3
 8102b6c:	f000 fd70 	bl	8103650 <RCCEx_PLL2_Config>
 8102b70:	4603      	mov	r3, r0
 8102b72:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102b74:	e00c      	b.n	8102b90 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102b76:	687b      	ldr	r3, [r7, #4]
 8102b78:	3324      	adds	r3, #36	; 0x24
 8102b7a:	2101      	movs	r1, #1
 8102b7c:	4618      	mov	r0, r3
 8102b7e:	f000 fe19 	bl	81037b4 <RCCEx_PLL3_Config>
 8102b82:	4603      	mov	r3, r0
 8102b84:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102b86:	e003      	b.n	8102b90 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b88:	2301      	movs	r3, #1
 8102b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8102b8c:	e000      	b.n	8102b90 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8102b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b90:	7dfb      	ldrb	r3, [r7, #23]
 8102b92:	2b00      	cmp	r3, #0
 8102b94:	d10a      	bne.n	8102bac <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102b96:	4bb7      	ldr	r3, [pc, #732]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102b9a:	f023 0207 	bic.w	r2, r3, #7
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102ba4:	49b3      	ldr	r1, [pc, #716]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102ba6:	4313      	orrs	r3, r2
 8102ba8:	658b      	str	r3, [r1, #88]	; 0x58
 8102baa:	e001      	b.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102bac:	7dfb      	ldrb	r3, [r7, #23]
 8102bae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102bb0:	687b      	ldr	r3, [r7, #4]
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	f003 0320 	and.w	r3, r3, #32
 8102bb8:	2b00      	cmp	r3, #0
 8102bba:	d04b      	beq.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8102bbc:	687b      	ldr	r3, [r7, #4]
 8102bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102bc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102bc6:	d02e      	beq.n	8102c26 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8102bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102bcc:	d828      	bhi.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102bd2:	d02a      	beq.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8102bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102bd8:	d822      	bhi.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102bda:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102bde:	d026      	beq.n	8102c2e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102be0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102be4:	d81c      	bhi.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102bea:	d010      	beq.n	8102c0e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8102bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102bf0:	d816      	bhi.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102bf2:	2b00      	cmp	r3, #0
 8102bf4:	d01d      	beq.n	8102c32 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8102bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102bfa:	d111      	bne.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	3304      	adds	r3, #4
 8102c00:	2100      	movs	r1, #0
 8102c02:	4618      	mov	r0, r3
 8102c04:	f000 fd24 	bl	8103650 <RCCEx_PLL2_Config>
 8102c08:	4603      	mov	r3, r0
 8102c0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102c0c:	e012      	b.n	8102c34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102c0e:	687b      	ldr	r3, [r7, #4]
 8102c10:	3324      	adds	r3, #36	; 0x24
 8102c12:	2102      	movs	r1, #2
 8102c14:	4618      	mov	r0, r3
 8102c16:	f000 fdcd 	bl	81037b4 <RCCEx_PLL3_Config>
 8102c1a:	4603      	mov	r3, r0
 8102c1c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102c1e:	e009      	b.n	8102c34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102c20:	2301      	movs	r3, #1
 8102c22:	75fb      	strb	r3, [r7, #23]
      break;
 8102c24:	e006      	b.n	8102c34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102c26:	bf00      	nop
 8102c28:	e004      	b.n	8102c34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102c2a:	bf00      	nop
 8102c2c:	e002      	b.n	8102c34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102c2e:	bf00      	nop
 8102c30:	e000      	b.n	8102c34 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102c32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c34:	7dfb      	ldrb	r3, [r7, #23]
 8102c36:	2b00      	cmp	r3, #0
 8102c38:	d10a      	bne.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102c3a:	4b8e      	ldr	r3, [pc, #568]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102c3e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102c48:	498a      	ldr	r1, [pc, #552]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102c4a:	4313      	orrs	r3, r2
 8102c4c:	654b      	str	r3, [r1, #84]	; 0x54
 8102c4e:	e001      	b.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c50:	7dfb      	ldrb	r3, [r7, #23]
 8102c52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102c54:	687b      	ldr	r3, [r7, #4]
 8102c56:	681b      	ldr	r3, [r3, #0]
 8102c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102c5c:	2b00      	cmp	r3, #0
 8102c5e:	d04b      	beq.n	8102cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102c60:	687b      	ldr	r3, [r7, #4]
 8102c62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102c66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102c6a:	d02e      	beq.n	8102cca <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8102c6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102c70:	d828      	bhi.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102c76:	d02a      	beq.n	8102cce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8102c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102c7c:	d822      	bhi.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102c7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102c82:	d026      	beq.n	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8102c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102c88:	d81c      	bhi.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102c8e:	d010      	beq.n	8102cb2 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8102c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102c94:	d816      	bhi.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102c96:	2b00      	cmp	r3, #0
 8102c98:	d01d      	beq.n	8102cd6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8102c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102c9e:	d111      	bne.n	8102cc4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	3304      	adds	r3, #4
 8102ca4:	2100      	movs	r1, #0
 8102ca6:	4618      	mov	r0, r3
 8102ca8:	f000 fcd2 	bl	8103650 <RCCEx_PLL2_Config>
 8102cac:	4603      	mov	r3, r0
 8102cae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102cb0:	e012      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102cb2:	687b      	ldr	r3, [r7, #4]
 8102cb4:	3324      	adds	r3, #36	; 0x24
 8102cb6:	2102      	movs	r1, #2
 8102cb8:	4618      	mov	r0, r3
 8102cba:	f000 fd7b 	bl	81037b4 <RCCEx_PLL3_Config>
 8102cbe:	4603      	mov	r3, r0
 8102cc0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102cc2:	e009      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102cc4:	2301      	movs	r3, #1
 8102cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8102cc8:	e006      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102cca:	bf00      	nop
 8102ccc:	e004      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102cce:	bf00      	nop
 8102cd0:	e002      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102cd2:	bf00      	nop
 8102cd4:	e000      	b.n	8102cd8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102cd8:	7dfb      	ldrb	r3, [r7, #23]
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	d10a      	bne.n	8102cf4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102cde:	4b65      	ldr	r3, [pc, #404]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102ce2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102cec:	4961      	ldr	r1, [pc, #388]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102cee:	4313      	orrs	r3, r2
 8102cf0:	658b      	str	r3, [r1, #88]	; 0x58
 8102cf2:	e001      	b.n	8102cf8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cf4:	7dfb      	ldrb	r3, [r7, #23]
 8102cf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	681b      	ldr	r3, [r3, #0]
 8102cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102d00:	2b00      	cmp	r3, #0
 8102d02:	d04b      	beq.n	8102d9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102d04:	687b      	ldr	r3, [r7, #4]
 8102d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102d0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102d0e:	d02e      	beq.n	8102d6e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8102d10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102d14:	d828      	bhi.n	8102d68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102d1a:	d02a      	beq.n	8102d72 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8102d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102d20:	d822      	bhi.n	8102d68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102d22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102d26:	d026      	beq.n	8102d76 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102d28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102d2c:	d81c      	bhi.n	8102d68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102d32:	d010      	beq.n	8102d56 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8102d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102d38:	d816      	bhi.n	8102d68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102d3a:	2b00      	cmp	r3, #0
 8102d3c:	d01d      	beq.n	8102d7a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102d42:	d111      	bne.n	8102d68 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102d44:	687b      	ldr	r3, [r7, #4]
 8102d46:	3304      	adds	r3, #4
 8102d48:	2100      	movs	r1, #0
 8102d4a:	4618      	mov	r0, r3
 8102d4c:	f000 fc80 	bl	8103650 <RCCEx_PLL2_Config>
 8102d50:	4603      	mov	r3, r0
 8102d52:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102d54:	e012      	b.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	3324      	adds	r3, #36	; 0x24
 8102d5a:	2102      	movs	r1, #2
 8102d5c:	4618      	mov	r0, r3
 8102d5e:	f000 fd29 	bl	81037b4 <RCCEx_PLL3_Config>
 8102d62:	4603      	mov	r3, r0
 8102d64:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102d66:	e009      	b.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d68:	2301      	movs	r3, #1
 8102d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8102d6c:	e006      	b.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102d6e:	bf00      	nop
 8102d70:	e004      	b.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102d72:	bf00      	nop
 8102d74:	e002      	b.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102d76:	bf00      	nop
 8102d78:	e000      	b.n	8102d7c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d7c:	7dfb      	ldrb	r3, [r7, #23]
 8102d7e:	2b00      	cmp	r3, #0
 8102d80:	d10a      	bne.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102d82:	4b3c      	ldr	r3, [pc, #240]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8102d8a:	687b      	ldr	r3, [r7, #4]
 8102d8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102d90:	4938      	ldr	r1, [pc, #224]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102d92:	4313      	orrs	r3, r2
 8102d94:	658b      	str	r3, [r1, #88]	; 0x58
 8102d96:	e001      	b.n	8102d9c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d98:	7dfb      	ldrb	r3, [r7, #23]
 8102d9a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102d9c:	687b      	ldr	r3, [r7, #4]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	f003 0308 	and.w	r3, r3, #8
 8102da4:	2b00      	cmp	r3, #0
 8102da6:	d01a      	beq.n	8102dde <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102db2:	d10a      	bne.n	8102dca <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	3324      	adds	r3, #36	; 0x24
 8102db8:	2102      	movs	r1, #2
 8102dba:	4618      	mov	r0, r3
 8102dbc:	f000 fcfa 	bl	81037b4 <RCCEx_PLL3_Config>
 8102dc0:	4603      	mov	r3, r0
 8102dc2:	2b00      	cmp	r3, #0
 8102dc4:	d001      	beq.n	8102dca <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8102dc6:	2301      	movs	r3, #1
 8102dc8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102dca:	4b2a      	ldr	r3, [pc, #168]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102dce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102dd8:	4926      	ldr	r1, [pc, #152]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102dda:	4313      	orrs	r3, r2
 8102ddc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102dde:	687b      	ldr	r3, [r7, #4]
 8102de0:	681b      	ldr	r3, [r3, #0]
 8102de2:	f003 0310 	and.w	r3, r3, #16
 8102de6:	2b00      	cmp	r3, #0
 8102de8:	d01a      	beq.n	8102e20 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102df4:	d10a      	bne.n	8102e0c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102df6:	687b      	ldr	r3, [r7, #4]
 8102df8:	3324      	adds	r3, #36	; 0x24
 8102dfa:	2102      	movs	r1, #2
 8102dfc:	4618      	mov	r0, r3
 8102dfe:	f000 fcd9 	bl	81037b4 <RCCEx_PLL3_Config>
 8102e02:	4603      	mov	r3, r0
 8102e04:	2b00      	cmp	r3, #0
 8102e06:	d001      	beq.n	8102e0c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8102e08:	2301      	movs	r3, #1
 8102e0a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102e0c:	4b19      	ldr	r3, [pc, #100]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102e14:	687b      	ldr	r3, [r7, #4]
 8102e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102e1a:	4916      	ldr	r1, [pc, #88]	; (8102e74 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102e1c:	4313      	orrs	r3, r2
 8102e1e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	681b      	ldr	r3, [r3, #0]
 8102e24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102e28:	2b00      	cmp	r3, #0
 8102e2a:	d036      	beq.n	8102e9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102e2c:	687b      	ldr	r3, [r7, #4]
 8102e2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e36:	d01f      	beq.n	8102e78 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8102e38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e3c:	d817      	bhi.n	8102e6e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102e3e:	2b00      	cmp	r3, #0
 8102e40:	d003      	beq.n	8102e4a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8102e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102e46:	d009      	beq.n	8102e5c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8102e48:	e011      	b.n	8102e6e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	3304      	adds	r3, #4
 8102e4e:	2100      	movs	r1, #0
 8102e50:	4618      	mov	r0, r3
 8102e52:	f000 fbfd 	bl	8103650 <RCCEx_PLL2_Config>
 8102e56:	4603      	mov	r3, r0
 8102e58:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102e5a:	e00e      	b.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102e5c:	687b      	ldr	r3, [r7, #4]
 8102e5e:	3324      	adds	r3, #36	; 0x24
 8102e60:	2102      	movs	r1, #2
 8102e62:	4618      	mov	r0, r3
 8102e64:	f000 fca6 	bl	81037b4 <RCCEx_PLL3_Config>
 8102e68:	4603      	mov	r3, r0
 8102e6a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102e6c:	e005      	b.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e6e:	2301      	movs	r3, #1
 8102e70:	75fb      	strb	r3, [r7, #23]
      break;
 8102e72:	e002      	b.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8102e74:	58024400 	.word	0x58024400
      break;
 8102e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e7a:	7dfb      	ldrb	r3, [r7, #23]
 8102e7c:	2b00      	cmp	r3, #0
 8102e7e:	d10a      	bne.n	8102e96 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102e80:	4b93      	ldr	r3, [pc, #588]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102e8e:	4990      	ldr	r1, [pc, #576]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e90:	4313      	orrs	r3, r2
 8102e92:	658b      	str	r3, [r1, #88]	; 0x58
 8102e94:	e001      	b.n	8102e9a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e96:	7dfb      	ldrb	r3, [r7, #23]
 8102e98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	681b      	ldr	r3, [r3, #0]
 8102e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102ea2:	2b00      	cmp	r3, #0
 8102ea4:	d033      	beq.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8102ea6:	687b      	ldr	r3, [r7, #4]
 8102ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102eac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102eb0:	d01c      	beq.n	8102eec <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8102eb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102eb6:	d816      	bhi.n	8102ee6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8102eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102ebc:	d003      	beq.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8102ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102ec2:	d007      	beq.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8102ec4:	e00f      	b.n	8102ee6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ec6:	4b82      	ldr	r3, [pc, #520]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102eca:	4a81      	ldr	r2, [pc, #516]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8102ed2:	e00c      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	3324      	adds	r3, #36	; 0x24
 8102ed8:	2101      	movs	r1, #1
 8102eda:	4618      	mov	r0, r3
 8102edc:	f000 fc6a 	bl	81037b4 <RCCEx_PLL3_Config>
 8102ee0:	4603      	mov	r3, r0
 8102ee2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102ee4:	e003      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102ee6:	2301      	movs	r3, #1
 8102ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8102eea:	e000      	b.n	8102eee <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8102eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102eee:	7dfb      	ldrb	r3, [r7, #23]
 8102ef0:	2b00      	cmp	r3, #0
 8102ef2:	d10a      	bne.n	8102f0a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102ef4:	4b76      	ldr	r3, [pc, #472]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ef8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102efc:	687b      	ldr	r3, [r7, #4]
 8102efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102f02:	4973      	ldr	r1, [pc, #460]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f04:	4313      	orrs	r3, r2
 8102f06:	654b      	str	r3, [r1, #84]	; 0x54
 8102f08:	e001      	b.n	8102f0e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f0a:	7dfb      	ldrb	r3, [r7, #23]
 8102f0c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102f0e:	687b      	ldr	r3, [r7, #4]
 8102f10:	681b      	ldr	r3, [r3, #0]
 8102f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102f16:	2b00      	cmp	r3, #0
 8102f18:	d029      	beq.n	8102f6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8102f1a:	687b      	ldr	r3, [r7, #4]
 8102f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f1e:	2b00      	cmp	r3, #0
 8102f20:	d003      	beq.n	8102f2a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8102f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102f26:	d007      	beq.n	8102f38 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8102f28:	e00f      	b.n	8102f4a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f2a:	4b69      	ldr	r3, [pc, #420]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f2e:	4a68      	ldr	r2, [pc, #416]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102f36:	e00b      	b.n	8102f50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	3304      	adds	r3, #4
 8102f3c:	2102      	movs	r1, #2
 8102f3e:	4618      	mov	r0, r3
 8102f40:	f000 fb86 	bl	8103650 <RCCEx_PLL2_Config>
 8102f44:	4603      	mov	r3, r0
 8102f46:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102f48:	e002      	b.n	8102f50 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8102f4a:	2301      	movs	r3, #1
 8102f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8102f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f50:	7dfb      	ldrb	r3, [r7, #23]
 8102f52:	2b00      	cmp	r3, #0
 8102f54:	d109      	bne.n	8102f6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102f56:	4b5e      	ldr	r3, [pc, #376]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102f5e:	687b      	ldr	r3, [r7, #4]
 8102f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f62:	495b      	ldr	r1, [pc, #364]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f64:	4313      	orrs	r3, r2
 8102f66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102f68:	e001      	b.n	8102f6e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f6a:	7dfb      	ldrb	r3, [r7, #23]
 8102f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102f76:	2b00      	cmp	r3, #0
 8102f78:	d00a      	beq.n	8102f90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8102f7a:	687b      	ldr	r3, [r7, #4]
 8102f7c:	3324      	adds	r3, #36	; 0x24
 8102f7e:	2102      	movs	r1, #2
 8102f80:	4618      	mov	r0, r3
 8102f82:	f000 fc17 	bl	81037b4 <RCCEx_PLL3_Config>
 8102f86:	4603      	mov	r3, r0
 8102f88:	2b00      	cmp	r3, #0
 8102f8a:	d001      	beq.n	8102f90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8102f8c:	2301      	movs	r3, #1
 8102f8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102f98:	2b00      	cmp	r3, #0
 8102f9a:	d030      	beq.n	8102ffe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102fa4:	d017      	beq.n	8102fd6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8102fa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102faa:	d811      	bhi.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102fb0:	d013      	beq.n	8102fda <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8102fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102fb6:	d80b      	bhi.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102fb8:	2b00      	cmp	r3, #0
 8102fba:	d010      	beq.n	8102fde <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8102fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102fc0:	d106      	bne.n	8102fd0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fc2:	4b43      	ldr	r3, [pc, #268]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102fc6:	4a42      	ldr	r2, [pc, #264]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102fce:	e007      	b.n	8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102fd0:	2301      	movs	r3, #1
 8102fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8102fd4:	e004      	b.n	8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102fd6:	bf00      	nop
 8102fd8:	e002      	b.n	8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102fda:	bf00      	nop
 8102fdc:	e000      	b.n	8102fe0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fe0:	7dfb      	ldrb	r3, [r7, #23]
 8102fe2:	2b00      	cmp	r3, #0
 8102fe4:	d109      	bne.n	8102ffa <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102fe6:	4b3a      	ldr	r3, [pc, #232]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102ff2:	4937      	ldr	r1, [pc, #220]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ff4:	4313      	orrs	r3, r2
 8102ff6:	654b      	str	r3, [r1, #84]	; 0x54
 8102ff8:	e001      	b.n	8102ffe <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ffa:	7dfb      	ldrb	r3, [r7, #23]
 8102ffc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102ffe:	687b      	ldr	r3, [r7, #4]
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103006:	2b00      	cmp	r3, #0
 8103008:	d008      	beq.n	810301c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810300a:	4b31      	ldr	r3, [pc, #196]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810300c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810300e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103012:	687b      	ldr	r3, [r7, #4]
 8103014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103016:	492e      	ldr	r1, [pc, #184]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103018:	4313      	orrs	r3, r2
 810301a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	681b      	ldr	r3, [r3, #0]
 8103020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103024:	2b00      	cmp	r3, #0
 8103026:	d009      	beq.n	810303c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103028:	4b29      	ldr	r3, [pc, #164]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810302a:	691b      	ldr	r3, [r3, #16]
 810302c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103036:	4926      	ldr	r1, [pc, #152]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103038:	4313      	orrs	r3, r2
 810303a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	681b      	ldr	r3, [r3, #0]
 8103040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103044:	2b00      	cmp	r3, #0
 8103046:	d008      	beq.n	810305a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103048:	4b21      	ldr	r3, [pc, #132]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810304c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103054:	491e      	ldr	r1, [pc, #120]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103056:	4313      	orrs	r3, r2
 8103058:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	681b      	ldr	r3, [r3, #0]
 810305e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103062:	2b00      	cmp	r3, #0
 8103064:	d00d      	beq.n	8103082 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103066:	4b1a      	ldr	r3, [pc, #104]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103068:	691b      	ldr	r3, [r3, #16]
 810306a:	4a19      	ldr	r2, [pc, #100]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810306c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103070:	6113      	str	r3, [r2, #16]
 8103072:	4b17      	ldr	r3, [pc, #92]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103074:	691a      	ldr	r2, [r3, #16]
 8103076:	687b      	ldr	r3, [r7, #4]
 8103078:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810307c:	4914      	ldr	r1, [pc, #80]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810307e:	4313      	orrs	r3, r2
 8103080:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103082:	687b      	ldr	r3, [r7, #4]
 8103084:	681b      	ldr	r3, [r3, #0]
 8103086:	2b00      	cmp	r3, #0
 8103088:	da08      	bge.n	810309c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810308a:	4b11      	ldr	r3, [pc, #68]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810308e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103096:	490e      	ldr	r1, [pc, #56]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103098:	4313      	orrs	r3, r2
 810309a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810309c:	687b      	ldr	r3, [r7, #4]
 810309e:	681b      	ldr	r3, [r3, #0]
 81030a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81030a4:	2b00      	cmp	r3, #0
 81030a6:	d009      	beq.n	81030bc <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81030a8:	4b09      	ldr	r3, [pc, #36]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 81030b0:	687b      	ldr	r3, [r7, #4]
 81030b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81030b6:	4906      	ldr	r1, [pc, #24]	; (81030d0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81030b8:	4313      	orrs	r3, r2
 81030ba:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 81030bc:	7dbb      	ldrb	r3, [r7, #22]
 81030be:	2b00      	cmp	r3, #0
 81030c0:	d101      	bne.n	81030c6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 81030c2:	2300      	movs	r3, #0
 81030c4:	e000      	b.n	81030c8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 81030c6:	2301      	movs	r3, #1
}
 81030c8:	4618      	mov	r0, r3
 81030ca:	3718      	adds	r7, #24
 81030cc:	46bd      	mov	sp, r7
 81030ce:	bd80      	pop	{r7, pc}
 81030d0:	58024400 	.word	0x58024400

081030d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81030d4:	b580      	push	{r7, lr}
 81030d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81030d8:	f7ff f85e 	bl	8102198 <HAL_RCC_GetHCLKFreq>
 81030dc:	4602      	mov	r2, r0
 81030de:	4b06      	ldr	r3, [pc, #24]	; (81030f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81030e0:	6a1b      	ldr	r3, [r3, #32]
 81030e2:	091b      	lsrs	r3, r3, #4
 81030e4:	f003 0307 	and.w	r3, r3, #7
 81030e8:	4904      	ldr	r1, [pc, #16]	; (81030fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81030ea:	5ccb      	ldrb	r3, [r1, r3]
 81030ec:	f003 031f 	and.w	r3, r3, #31
 81030f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 81030f4:	4618      	mov	r0, r3
 81030f6:	bd80      	pop	{r7, pc}
 81030f8:	58024400 	.word	0x58024400
 81030fc:	08106dc0 	.word	0x08106dc0

08103100 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103100:	b480      	push	{r7}
 8103102:	b089      	sub	sp, #36	; 0x24
 8103104:	af00      	add	r7, sp, #0
 8103106:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103108:	4ba1      	ldr	r3, [pc, #644]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810310c:	f003 0303 	and.w	r3, r3, #3
 8103110:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103112:	4b9f      	ldr	r3, [pc, #636]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103116:	0b1b      	lsrs	r3, r3, #12
 8103118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810311c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810311e:	4b9c      	ldr	r3, [pc, #624]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103122:	091b      	lsrs	r3, r3, #4
 8103124:	f003 0301 	and.w	r3, r3, #1
 8103128:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810312a:	4b99      	ldr	r3, [pc, #612]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810312c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810312e:	08db      	lsrs	r3, r3, #3
 8103130:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103134:	693a      	ldr	r2, [r7, #16]
 8103136:	fb02 f303 	mul.w	r3, r2, r3
 810313a:	ee07 3a90 	vmov	s15, r3
 810313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103142:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103146:	697b      	ldr	r3, [r7, #20]
 8103148:	2b00      	cmp	r3, #0
 810314a:	f000 8111 	beq.w	8103370 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810314e:	69bb      	ldr	r3, [r7, #24]
 8103150:	2b02      	cmp	r3, #2
 8103152:	f000 8083 	beq.w	810325c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103156:	69bb      	ldr	r3, [r7, #24]
 8103158:	2b02      	cmp	r3, #2
 810315a:	f200 80a1 	bhi.w	81032a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810315e:	69bb      	ldr	r3, [r7, #24]
 8103160:	2b00      	cmp	r3, #0
 8103162:	d003      	beq.n	810316c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103164:	69bb      	ldr	r3, [r7, #24]
 8103166:	2b01      	cmp	r3, #1
 8103168:	d056      	beq.n	8103218 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810316a:	e099      	b.n	81032a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810316c:	4b88      	ldr	r3, [pc, #544]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	f003 0320 	and.w	r3, r3, #32
 8103174:	2b00      	cmp	r3, #0
 8103176:	d02d      	beq.n	81031d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103178:	4b85      	ldr	r3, [pc, #532]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810317a:	681b      	ldr	r3, [r3, #0]
 810317c:	08db      	lsrs	r3, r3, #3
 810317e:	f003 0303 	and.w	r3, r3, #3
 8103182:	4a84      	ldr	r2, [pc, #528]	; (8103394 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103184:	fa22 f303 	lsr.w	r3, r2, r3
 8103188:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810318a:	68bb      	ldr	r3, [r7, #8]
 810318c:	ee07 3a90 	vmov	s15, r3
 8103190:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103194:	697b      	ldr	r3, [r7, #20]
 8103196:	ee07 3a90 	vmov	s15, r3
 810319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031a2:	4b7b      	ldr	r3, [pc, #492]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031aa:	ee07 3a90 	vmov	s15, r3
 81031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81031b6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031ce:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81031d2:	e087      	b.n	81032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81031d4:	697b      	ldr	r3, [r7, #20]
 81031d6:	ee07 3a90 	vmov	s15, r3
 81031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810339c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031e6:	4b6a      	ldr	r3, [pc, #424]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031ee:	ee07 3a90 	vmov	s15, r3
 81031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81031fa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103212:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103216:	e065      	b.n	81032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103218:	697b      	ldr	r3, [r7, #20]
 810321a:	ee07 3a90 	vmov	s15, r3
 810321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103222:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81033a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810322a:	4b59      	ldr	r3, [pc, #356]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103232:	ee07 3a90 	vmov	s15, r3
 8103236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810323a:	ed97 6a03 	vldr	s12, [r7, #12]
 810323e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103256:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810325a:	e043      	b.n	81032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810325c:	697b      	ldr	r3, [r7, #20]
 810325e:	ee07 3a90 	vmov	s15, r3
 8103262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103266:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81033a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810326e:	4b48      	ldr	r3, [pc, #288]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103276:	ee07 3a90 	vmov	s15, r3
 810327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810327e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103282:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103296:	ee67 7a27 	vmul.f32	s15, s14, s15
 810329a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810329e:	e021      	b.n	81032e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81032a0:	697b      	ldr	r3, [r7, #20]
 81032a2:	ee07 3a90 	vmov	s15, r3
 81032a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032aa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81033a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81032ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81032b2:	4b37      	ldr	r3, [pc, #220]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81032b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81032ba:	ee07 3a90 	vmov	s15, r3
 81032be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81032c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81032c6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103398 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81032ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81032ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81032d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81032d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81032da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81032de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81032e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81032e4:	4b2a      	ldr	r3, [pc, #168]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81032e8:	0a5b      	lsrs	r3, r3, #9
 81032ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81032ee:	ee07 3a90 	vmov	s15, r3
 81032f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81032fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 81032fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8103302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810330a:	ee17 2a90 	vmov	r2, s15
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8103312:	4b1f      	ldr	r3, [pc, #124]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103316:	0c1b      	lsrs	r3, r3, #16
 8103318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810331c:	ee07 3a90 	vmov	s15, r3
 8103320:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103328:	ee37 7a87 	vadd.f32	s14, s15, s14
 810332c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103338:	ee17 2a90 	vmov	r2, s15
 810333c:	687b      	ldr	r3, [r7, #4]
 810333e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8103340:	4b13      	ldr	r3, [pc, #76]	; (8103390 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103344:	0e1b      	lsrs	r3, r3, #24
 8103346:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810334a:	ee07 3a90 	vmov	s15, r3
 810334e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103352:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103356:	ee37 7a87 	vadd.f32	s14, s15, s14
 810335a:	edd7 6a07 	vldr	s13, [r7, #28]
 810335e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103366:	ee17 2a90 	vmov	r2, s15
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810336e:	e008      	b.n	8103382 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103370:	687b      	ldr	r3, [r7, #4]
 8103372:	2200      	movs	r2, #0
 8103374:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103376:	687b      	ldr	r3, [r7, #4]
 8103378:	2200      	movs	r2, #0
 810337a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	2200      	movs	r2, #0
 8103380:	609a      	str	r2, [r3, #8]
}
 8103382:	bf00      	nop
 8103384:	3724      	adds	r7, #36	; 0x24
 8103386:	46bd      	mov	sp, r7
 8103388:	f85d 7b04 	ldr.w	r7, [sp], #4
 810338c:	4770      	bx	lr
 810338e:	bf00      	nop
 8103390:	58024400 	.word	0x58024400
 8103394:	03d09000 	.word	0x03d09000
 8103398:	46000000 	.word	0x46000000
 810339c:	4c742400 	.word	0x4c742400
 81033a0:	4a742400 	.word	0x4a742400
 81033a4:	4af42400 	.word	0x4af42400

081033a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81033a8:	b480      	push	{r7}
 81033aa:	b089      	sub	sp, #36	; 0x24
 81033ac:	af00      	add	r7, sp, #0
 81033ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81033b0:	4ba1      	ldr	r3, [pc, #644]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81033b4:	f003 0303 	and.w	r3, r3, #3
 81033b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81033ba:	4b9f      	ldr	r3, [pc, #636]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81033be:	0d1b      	lsrs	r3, r3, #20
 81033c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81033c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81033c6:	4b9c      	ldr	r3, [pc, #624]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81033ca:	0a1b      	lsrs	r3, r3, #8
 81033cc:	f003 0301 	and.w	r3, r3, #1
 81033d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81033d2:	4b99      	ldr	r3, [pc, #612]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81033d6:	08db      	lsrs	r3, r3, #3
 81033d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81033dc:	693a      	ldr	r2, [r7, #16]
 81033de:	fb02 f303 	mul.w	r3, r2, r3
 81033e2:	ee07 3a90 	vmov	s15, r3
 81033e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81033ee:	697b      	ldr	r3, [r7, #20]
 81033f0:	2b00      	cmp	r3, #0
 81033f2:	f000 8111 	beq.w	8103618 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81033f6:	69bb      	ldr	r3, [r7, #24]
 81033f8:	2b02      	cmp	r3, #2
 81033fa:	f000 8083 	beq.w	8103504 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81033fe:	69bb      	ldr	r3, [r7, #24]
 8103400:	2b02      	cmp	r3, #2
 8103402:	f200 80a1 	bhi.w	8103548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103406:	69bb      	ldr	r3, [r7, #24]
 8103408:	2b00      	cmp	r3, #0
 810340a:	d003      	beq.n	8103414 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810340c:	69bb      	ldr	r3, [r7, #24]
 810340e:	2b01      	cmp	r3, #1
 8103410:	d056      	beq.n	81034c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103412:	e099      	b.n	8103548 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103414:	4b88      	ldr	r3, [pc, #544]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103416:	681b      	ldr	r3, [r3, #0]
 8103418:	f003 0320 	and.w	r3, r3, #32
 810341c:	2b00      	cmp	r3, #0
 810341e:	d02d      	beq.n	810347c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103420:	4b85      	ldr	r3, [pc, #532]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103422:	681b      	ldr	r3, [r3, #0]
 8103424:	08db      	lsrs	r3, r3, #3
 8103426:	f003 0303 	and.w	r3, r3, #3
 810342a:	4a84      	ldr	r2, [pc, #528]	; (810363c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810342c:	fa22 f303 	lsr.w	r3, r2, r3
 8103430:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103432:	68bb      	ldr	r3, [r7, #8]
 8103434:	ee07 3a90 	vmov	s15, r3
 8103438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810343c:	697b      	ldr	r3, [r7, #20]
 810343e:	ee07 3a90 	vmov	s15, r3
 8103442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810344a:	4b7b      	ldr	r3, [pc, #492]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103452:	ee07 3a90 	vmov	s15, r3
 8103456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810345a:	ed97 6a03 	vldr	s12, [r7, #12]
 810345e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103476:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810347a:	e087      	b.n	810358c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810347c:	697b      	ldr	r3, [r7, #20]
 810347e:	ee07 3a90 	vmov	s15, r3
 8103482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103486:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103644 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810348e:	4b6a      	ldr	r3, [pc, #424]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103496:	ee07 3a90 	vmov	s15, r3
 810349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810349e:	ed97 6a03 	vldr	s12, [r7, #12]
 81034a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81034be:	e065      	b.n	810358c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81034c0:	697b      	ldr	r3, [r7, #20]
 81034c2:	ee07 3a90 	vmov	s15, r3
 81034c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81034ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034d2:	4b59      	ldr	r3, [pc, #356]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034da:	ee07 3a90 	vmov	s15, r3
 81034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81034e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103502:	e043      	b.n	810358c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103504:	697b      	ldr	r3, [r7, #20]
 8103506:	ee07 3a90 	vmov	s15, r3
 810350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810350e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 810364c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103516:	4b48      	ldr	r3, [pc, #288]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810351a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810351e:	ee07 3a90 	vmov	s15, r3
 8103522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103526:	ed97 6a03 	vldr	s12, [r7, #12]
 810352a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810352e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103542:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103546:	e021      	b.n	810358c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103548:	697b      	ldr	r3, [r7, #20]
 810354a:	ee07 3a90 	vmov	s15, r3
 810354e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103552:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103648 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810355a:	4b37      	ldr	r3, [pc, #220]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810355e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103562:	ee07 3a90 	vmov	s15, r3
 8103566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810356a:	ed97 6a03 	vldr	s12, [r7, #12]
 810356e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103640 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810357a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810357e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103586:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810358a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 810358c:	4b2a      	ldr	r3, [pc, #168]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103590:	0a5b      	lsrs	r3, r3, #9
 8103592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103596:	ee07 3a90 	vmov	s15, r3
 810359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810359e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81035a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81035a6:	edd7 6a07 	vldr	s13, [r7, #28]
 81035aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81035ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81035b2:	ee17 2a90 	vmov	r2, s15
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81035ba:	4b1f      	ldr	r3, [pc, #124]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035be:	0c1b      	lsrs	r3, r3, #16
 81035c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81035c4:	ee07 3a90 	vmov	s15, r3
 81035c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81035d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 81035d4:	edd7 6a07 	vldr	s13, [r7, #28]
 81035d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81035dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81035e0:	ee17 2a90 	vmov	r2, s15
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81035e8:	4b13      	ldr	r3, [pc, #76]	; (8103638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81035ec:	0e1b      	lsrs	r3, r3, #24
 81035ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81035f2:	ee07 3a90 	vmov	s15, r3
 81035f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81035fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103602:	edd7 6a07 	vldr	s13, [r7, #28]
 8103606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810360a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810360e:	ee17 2a90 	vmov	r2, s15
 8103612:	687b      	ldr	r3, [r7, #4]
 8103614:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103616:	e008      	b.n	810362a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103618:	687b      	ldr	r3, [r7, #4]
 810361a:	2200      	movs	r2, #0
 810361c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810361e:	687b      	ldr	r3, [r7, #4]
 8103620:	2200      	movs	r2, #0
 8103622:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	2200      	movs	r2, #0
 8103628:	609a      	str	r2, [r3, #8]
}
 810362a:	bf00      	nop
 810362c:	3724      	adds	r7, #36	; 0x24
 810362e:	46bd      	mov	sp, r7
 8103630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103634:	4770      	bx	lr
 8103636:	bf00      	nop
 8103638:	58024400 	.word	0x58024400
 810363c:	03d09000 	.word	0x03d09000
 8103640:	46000000 	.word	0x46000000
 8103644:	4c742400 	.word	0x4c742400
 8103648:	4a742400 	.word	0x4a742400
 810364c:	4af42400 	.word	0x4af42400

08103650 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103650:	b580      	push	{r7, lr}
 8103652:	b084      	sub	sp, #16
 8103654:	af00      	add	r7, sp, #0
 8103656:	6078      	str	r0, [r7, #4]
 8103658:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810365a:	2300      	movs	r3, #0
 810365c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810365e:	4b54      	ldr	r3, [pc, #336]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103662:	f003 0303 	and.w	r3, r3, #3
 8103666:	2b03      	cmp	r3, #3
 8103668:	d101      	bne.n	810366e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810366a:	2301      	movs	r3, #1
 810366c:	e09b      	b.n	81037a6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810366e:	4b50      	ldr	r3, [pc, #320]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103670:	681b      	ldr	r3, [r3, #0]
 8103672:	4a4f      	ldr	r2, [pc, #316]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103678:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810367a:	f7fe f841 	bl	8101700 <HAL_GetTick>
 810367e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103680:	e008      	b.n	8103694 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103682:	f7fe f83d 	bl	8101700 <HAL_GetTick>
 8103686:	4602      	mov	r2, r0
 8103688:	68bb      	ldr	r3, [r7, #8]
 810368a:	1ad3      	subs	r3, r2, r3
 810368c:	2b02      	cmp	r3, #2
 810368e:	d901      	bls.n	8103694 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103690:	2303      	movs	r3, #3
 8103692:	e088      	b.n	81037a6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103694:	4b46      	ldr	r3, [pc, #280]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810369c:	2b00      	cmp	r3, #0
 810369e:	d1f0      	bne.n	8103682 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81036a0:	4b43      	ldr	r3, [pc, #268]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 81036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	031b      	lsls	r3, r3, #12
 81036ae:	4940      	ldr	r1, [pc, #256]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 81036b0:	4313      	orrs	r3, r2
 81036b2:	628b      	str	r3, [r1, #40]	; 0x28
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	685b      	ldr	r3, [r3, #4]
 81036b8:	3b01      	subs	r3, #1
 81036ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	689b      	ldr	r3, [r3, #8]
 81036c2:	3b01      	subs	r3, #1
 81036c4:	025b      	lsls	r3, r3, #9
 81036c6:	b29b      	uxth	r3, r3
 81036c8:	431a      	orrs	r2, r3
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	68db      	ldr	r3, [r3, #12]
 81036ce:	3b01      	subs	r3, #1
 81036d0:	041b      	lsls	r3, r3, #16
 81036d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81036d6:	431a      	orrs	r2, r3
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	691b      	ldr	r3, [r3, #16]
 81036dc:	3b01      	subs	r3, #1
 81036de:	061b      	lsls	r3, r3, #24
 81036e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81036e4:	4932      	ldr	r1, [pc, #200]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 81036e6:	4313      	orrs	r3, r2
 81036e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81036ea:	4b31      	ldr	r3, [pc, #196]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 81036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81036f2:	687b      	ldr	r3, [r7, #4]
 81036f4:	695b      	ldr	r3, [r3, #20]
 81036f6:	492e      	ldr	r1, [pc, #184]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 81036f8:	4313      	orrs	r3, r2
 81036fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81036fc:	4b2c      	ldr	r3, [pc, #176]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 81036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103700:	f023 0220 	bic.w	r2, r3, #32
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	699b      	ldr	r3, [r3, #24]
 8103708:	4929      	ldr	r1, [pc, #164]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 810370a:	4313      	orrs	r3, r2
 810370c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810370e:	4b28      	ldr	r3, [pc, #160]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103712:	4a27      	ldr	r2, [pc, #156]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103714:	f023 0310 	bic.w	r3, r3, #16
 8103718:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810371a:	4b25      	ldr	r3, [pc, #148]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 810371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810371e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103722:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103726:	687a      	ldr	r2, [r7, #4]
 8103728:	69d2      	ldr	r2, [r2, #28]
 810372a:	00d2      	lsls	r2, r2, #3
 810372c:	4920      	ldr	r1, [pc, #128]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 810372e:	4313      	orrs	r3, r2
 8103730:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103732:	4b1f      	ldr	r3, [pc, #124]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103736:	4a1e      	ldr	r2, [pc, #120]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103738:	f043 0310 	orr.w	r3, r3, #16
 810373c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810373e:	683b      	ldr	r3, [r7, #0]
 8103740:	2b00      	cmp	r3, #0
 8103742:	d106      	bne.n	8103752 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103744:	4b1a      	ldr	r3, [pc, #104]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103748:	4a19      	ldr	r2, [pc, #100]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 810374a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810374e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103750:	e00f      	b.n	8103772 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8103752:	683b      	ldr	r3, [r7, #0]
 8103754:	2b01      	cmp	r3, #1
 8103756:	d106      	bne.n	8103766 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103758:	4b15      	ldr	r3, [pc, #84]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 810375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810375c:	4a14      	ldr	r2, [pc, #80]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 810375e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103762:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103764:	e005      	b.n	8103772 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103766:	4b12      	ldr	r3, [pc, #72]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810376a:	4a11      	ldr	r2, [pc, #68]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 810376c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103770:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103772:	4b0f      	ldr	r3, [pc, #60]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103774:	681b      	ldr	r3, [r3, #0]
 8103776:	4a0e      	ldr	r2, [pc, #56]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 8103778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 810377c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810377e:	f7fd ffbf 	bl	8101700 <HAL_GetTick>
 8103782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103784:	e008      	b.n	8103798 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103786:	f7fd ffbb 	bl	8101700 <HAL_GetTick>
 810378a:	4602      	mov	r2, r0
 810378c:	68bb      	ldr	r3, [r7, #8]
 810378e:	1ad3      	subs	r3, r2, r3
 8103790:	2b02      	cmp	r3, #2
 8103792:	d901      	bls.n	8103798 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103794:	2303      	movs	r3, #3
 8103796:	e006      	b.n	81037a6 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103798:	4b05      	ldr	r3, [pc, #20]	; (81037b0 <RCCEx_PLL2_Config+0x160>)
 810379a:	681b      	ldr	r3, [r3, #0]
 810379c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81037a0:	2b00      	cmp	r3, #0
 81037a2:	d0f0      	beq.n	8103786 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81037a4:	7bfb      	ldrb	r3, [r7, #15]
}
 81037a6:	4618      	mov	r0, r3
 81037a8:	3710      	adds	r7, #16
 81037aa:	46bd      	mov	sp, r7
 81037ac:	bd80      	pop	{r7, pc}
 81037ae:	bf00      	nop
 81037b0:	58024400 	.word	0x58024400

081037b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81037b4:	b580      	push	{r7, lr}
 81037b6:	b084      	sub	sp, #16
 81037b8:	af00      	add	r7, sp, #0
 81037ba:	6078      	str	r0, [r7, #4]
 81037bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81037be:	2300      	movs	r3, #0
 81037c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81037c2:	4b54      	ldr	r3, [pc, #336]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81037c6:	f003 0303 	and.w	r3, r3, #3
 81037ca:	2b03      	cmp	r3, #3
 81037cc:	d101      	bne.n	81037d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81037ce:	2301      	movs	r3, #1
 81037d0:	e09b      	b.n	810390a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81037d2:	4b50      	ldr	r3, [pc, #320]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81037d4:	681b      	ldr	r3, [r3, #0]
 81037d6:	4a4f      	ldr	r2, [pc, #316]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81037d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81037dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81037de:	f7fd ff8f 	bl	8101700 <HAL_GetTick>
 81037e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81037e4:	e008      	b.n	81037f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81037e6:	f7fd ff8b 	bl	8101700 <HAL_GetTick>
 81037ea:	4602      	mov	r2, r0
 81037ec:	68bb      	ldr	r3, [r7, #8]
 81037ee:	1ad3      	subs	r3, r2, r3
 81037f0:	2b02      	cmp	r3, #2
 81037f2:	d901      	bls.n	81037f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81037f4:	2303      	movs	r3, #3
 81037f6:	e088      	b.n	810390a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81037f8:	4b46      	ldr	r3, [pc, #280]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81037fa:	681b      	ldr	r3, [r3, #0]
 81037fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103800:	2b00      	cmp	r3, #0
 8103802:	d1f0      	bne.n	81037e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103804:	4b43      	ldr	r3, [pc, #268]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103808:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	681b      	ldr	r3, [r3, #0]
 8103810:	051b      	lsls	r3, r3, #20
 8103812:	4940      	ldr	r1, [pc, #256]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103814:	4313      	orrs	r3, r2
 8103816:	628b      	str	r3, [r1, #40]	; 0x28
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	685b      	ldr	r3, [r3, #4]
 810381c:	3b01      	subs	r3, #1
 810381e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103822:	687b      	ldr	r3, [r7, #4]
 8103824:	689b      	ldr	r3, [r3, #8]
 8103826:	3b01      	subs	r3, #1
 8103828:	025b      	lsls	r3, r3, #9
 810382a:	b29b      	uxth	r3, r3
 810382c:	431a      	orrs	r2, r3
 810382e:	687b      	ldr	r3, [r7, #4]
 8103830:	68db      	ldr	r3, [r3, #12]
 8103832:	3b01      	subs	r3, #1
 8103834:	041b      	lsls	r3, r3, #16
 8103836:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810383a:	431a      	orrs	r2, r3
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	691b      	ldr	r3, [r3, #16]
 8103840:	3b01      	subs	r3, #1
 8103842:	061b      	lsls	r3, r3, #24
 8103844:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103848:	4932      	ldr	r1, [pc, #200]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 810384a:	4313      	orrs	r3, r2
 810384c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810384e:	4b31      	ldr	r3, [pc, #196]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103852:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	695b      	ldr	r3, [r3, #20]
 810385a:	492e      	ldr	r1, [pc, #184]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 810385c:	4313      	orrs	r3, r2
 810385e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103860:	4b2c      	ldr	r3, [pc, #176]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103864:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	699b      	ldr	r3, [r3, #24]
 810386c:	4929      	ldr	r1, [pc, #164]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 810386e:	4313      	orrs	r3, r2
 8103870:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103872:	4b28      	ldr	r3, [pc, #160]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103876:	4a27      	ldr	r2, [pc, #156]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810387c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810387e:	4b25      	ldr	r3, [pc, #148]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103886:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810388a:	687a      	ldr	r2, [r7, #4]
 810388c:	69d2      	ldr	r2, [r2, #28]
 810388e:	00d2      	lsls	r2, r2, #3
 8103890:	4920      	ldr	r1, [pc, #128]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103892:	4313      	orrs	r3, r2
 8103894:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103896:	4b1f      	ldr	r3, [pc, #124]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 8103898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810389a:	4a1e      	ldr	r2, [pc, #120]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 810389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81038a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81038a2:	683b      	ldr	r3, [r7, #0]
 81038a4:	2b00      	cmp	r3, #0
 81038a6:	d106      	bne.n	81038b6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81038a8:	4b1a      	ldr	r3, [pc, #104]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038ac:	4a19      	ldr	r2, [pc, #100]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81038b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81038b4:	e00f      	b.n	81038d6 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81038b6:	683b      	ldr	r3, [r7, #0]
 81038b8:	2b01      	cmp	r3, #1
 81038ba:	d106      	bne.n	81038ca <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81038bc:	4b15      	ldr	r3, [pc, #84]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038c0:	4a14      	ldr	r2, [pc, #80]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81038c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81038c8:	e005      	b.n	81038d6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81038ca:	4b12      	ldr	r3, [pc, #72]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038ce:	4a11      	ldr	r2, [pc, #68]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81038d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81038d6:	4b0f      	ldr	r3, [pc, #60]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038d8:	681b      	ldr	r3, [r3, #0]
 81038da:	4a0e      	ldr	r2, [pc, #56]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81038e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81038e2:	f7fd ff0d 	bl	8101700 <HAL_GetTick>
 81038e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81038e8:	e008      	b.n	81038fc <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81038ea:	f7fd ff09 	bl	8101700 <HAL_GetTick>
 81038ee:	4602      	mov	r2, r0
 81038f0:	68bb      	ldr	r3, [r7, #8]
 81038f2:	1ad3      	subs	r3, r2, r3
 81038f4:	2b02      	cmp	r3, #2
 81038f6:	d901      	bls.n	81038fc <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81038f8:	2303      	movs	r3, #3
 81038fa:	e006      	b.n	810390a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81038fc:	4b05      	ldr	r3, [pc, #20]	; (8103914 <RCCEx_PLL3_Config+0x160>)
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103904:	2b00      	cmp	r3, #0
 8103906:	d0f0      	beq.n	81038ea <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103908:	7bfb      	ldrb	r3, [r7, #15]
}
 810390a:	4618      	mov	r0, r3
 810390c:	3710      	adds	r7, #16
 810390e:	46bd      	mov	sp, r7
 8103910:	bd80      	pop	{r7, pc}
 8103912:	bf00      	nop
 8103914:	58024400 	.word	0x58024400

08103918 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103918:	b580      	push	{r7, lr}
 810391a:	b084      	sub	sp, #16
 810391c:	af00      	add	r7, sp, #0
 810391e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8103920:	687b      	ldr	r3, [r7, #4]
 8103922:	2b00      	cmp	r3, #0
 8103924:	d101      	bne.n	810392a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8103926:	2301      	movs	r3, #1
 8103928:	e0f1      	b.n	8103b0e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810392a:	687b      	ldr	r3, [r7, #4]
 810392c:	2200      	movs	r2, #0
 810392e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	4a78      	ldr	r2, [pc, #480]	; (8103b18 <HAL_SPI_Init+0x200>)
 8103936:	4293      	cmp	r3, r2
 8103938:	d00f      	beq.n	810395a <HAL_SPI_Init+0x42>
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	681b      	ldr	r3, [r3, #0]
 810393e:	4a77      	ldr	r2, [pc, #476]	; (8103b1c <HAL_SPI_Init+0x204>)
 8103940:	4293      	cmp	r3, r2
 8103942:	d00a      	beq.n	810395a <HAL_SPI_Init+0x42>
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	4a75      	ldr	r2, [pc, #468]	; (8103b20 <HAL_SPI_Init+0x208>)
 810394a:	4293      	cmp	r3, r2
 810394c:	d005      	beq.n	810395a <HAL_SPI_Init+0x42>
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	68db      	ldr	r3, [r3, #12]
 8103952:	2b0f      	cmp	r3, #15
 8103954:	d901      	bls.n	810395a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8103956:	2301      	movs	r3, #1
 8103958:	e0d9      	b.n	8103b0e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810395a:	6878      	ldr	r0, [r7, #4]
 810395c:	f001 f877 	bl	8104a4e <SPI_GetPacketSize>
 8103960:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	4a6c      	ldr	r2, [pc, #432]	; (8103b18 <HAL_SPI_Init+0x200>)
 8103968:	4293      	cmp	r3, r2
 810396a:	d00c      	beq.n	8103986 <HAL_SPI_Init+0x6e>
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	681b      	ldr	r3, [r3, #0]
 8103970:	4a6a      	ldr	r2, [pc, #424]	; (8103b1c <HAL_SPI_Init+0x204>)
 8103972:	4293      	cmp	r3, r2
 8103974:	d007      	beq.n	8103986 <HAL_SPI_Init+0x6e>
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	681b      	ldr	r3, [r3, #0]
 810397a:	4a69      	ldr	r2, [pc, #420]	; (8103b20 <HAL_SPI_Init+0x208>)
 810397c:	4293      	cmp	r3, r2
 810397e:	d002      	beq.n	8103986 <HAL_SPI_Init+0x6e>
 8103980:	68fb      	ldr	r3, [r7, #12]
 8103982:	2b08      	cmp	r3, #8
 8103984:	d811      	bhi.n	81039aa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810398a:	4a63      	ldr	r2, [pc, #396]	; (8103b18 <HAL_SPI_Init+0x200>)
 810398c:	4293      	cmp	r3, r2
 810398e:	d009      	beq.n	81039a4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	4a61      	ldr	r2, [pc, #388]	; (8103b1c <HAL_SPI_Init+0x204>)
 8103996:	4293      	cmp	r3, r2
 8103998:	d004      	beq.n	81039a4 <HAL_SPI_Init+0x8c>
 810399a:	687b      	ldr	r3, [r7, #4]
 810399c:	681b      	ldr	r3, [r3, #0]
 810399e:	4a60      	ldr	r2, [pc, #384]	; (8103b20 <HAL_SPI_Init+0x208>)
 81039a0:	4293      	cmp	r3, r2
 81039a2:	d104      	bne.n	81039ae <HAL_SPI_Init+0x96>
 81039a4:	68fb      	ldr	r3, [r7, #12]
 81039a6:	2b10      	cmp	r3, #16
 81039a8:	d901      	bls.n	81039ae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81039aa:	2301      	movs	r3, #1
 81039ac:	e0af      	b.n	8103b0e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81039ae:	687b      	ldr	r3, [r7, #4]
 81039b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81039b4:	b2db      	uxtb	r3, r3
 81039b6:	2b00      	cmp	r3, #0
 81039b8:	d106      	bne.n	81039c8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	2200      	movs	r2, #0
 81039be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81039c2:	6878      	ldr	r0, [r7, #4]
 81039c4:	f7fd fc10 	bl	81011e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	2202      	movs	r2, #2
 81039cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	681a      	ldr	r2, [r3, #0]
 81039d6:	687b      	ldr	r3, [r7, #4]
 81039d8:	681b      	ldr	r3, [r3, #0]
 81039da:	f022 0201 	bic.w	r2, r2, #1
 81039de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	689b      	ldr	r3, [r3, #8]
 81039e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 81039ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81039ec:	687b      	ldr	r3, [r7, #4]
 81039ee:	699b      	ldr	r3, [r3, #24]
 81039f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81039f4:	d119      	bne.n	8103a2a <HAL_SPI_Init+0x112>
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	685b      	ldr	r3, [r3, #4]
 81039fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81039fe:	d103      	bne.n	8103a08 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103a00:	687b      	ldr	r3, [r7, #4]
 8103a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8103a04:	2b00      	cmp	r3, #0
 8103a06:	d008      	beq.n	8103a1a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103a0c:	2b00      	cmp	r3, #0
 8103a0e:	d10c      	bne.n	8103a2a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103a18:	d107      	bne.n	8103a2a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8103a1a:	687b      	ldr	r3, [r7, #4]
 8103a1c:	681b      	ldr	r3, [r3, #0]
 8103a1e:	681a      	ldr	r2, [r3, #0]
 8103a20:	687b      	ldr	r3, [r7, #4]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8103a28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8103a2a:	687b      	ldr	r3, [r7, #4]
 8103a2c:	69da      	ldr	r2, [r3, #28]
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a32:	431a      	orrs	r2, r3
 8103a34:	68bb      	ldr	r3, [r7, #8]
 8103a36:	431a      	orrs	r2, r3
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103a3c:	ea42 0103 	orr.w	r1, r2, r3
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	68da      	ldr	r2, [r3, #12]
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	681b      	ldr	r3, [r3, #0]
 8103a48:	430a      	orrs	r2, r1
 8103a4a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103a50:	687b      	ldr	r3, [r7, #4]
 8103a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103a54:	431a      	orrs	r2, r3
 8103a56:	687b      	ldr	r3, [r7, #4]
 8103a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103a5a:	431a      	orrs	r2, r3
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	699b      	ldr	r3, [r3, #24]
 8103a60:	431a      	orrs	r2, r3
 8103a62:	687b      	ldr	r3, [r7, #4]
 8103a64:	691b      	ldr	r3, [r3, #16]
 8103a66:	431a      	orrs	r2, r3
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	695b      	ldr	r3, [r3, #20]
 8103a6c:	431a      	orrs	r2, r3
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	6a1b      	ldr	r3, [r3, #32]
 8103a72:	431a      	orrs	r2, r3
 8103a74:	687b      	ldr	r3, [r7, #4]
 8103a76:	685b      	ldr	r3, [r3, #4]
 8103a78:	431a      	orrs	r2, r3
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103a7e:	431a      	orrs	r2, r3
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	689b      	ldr	r3, [r3, #8]
 8103a84:	431a      	orrs	r2, r3
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103a8a:	ea42 0103 	orr.w	r1, r2, r3
 8103a8e:	687b      	ldr	r3, [r7, #4]
 8103a90:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8103a92:	687b      	ldr	r3, [r7, #4]
 8103a94:	681b      	ldr	r3, [r3, #0]
 8103a96:	430a      	orrs	r2, r1
 8103a98:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	685b      	ldr	r3, [r3, #4]
 8103a9e:	2b00      	cmp	r3, #0
 8103aa0:	d113      	bne.n	8103aca <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8103aa2:	687b      	ldr	r3, [r7, #4]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	689b      	ldr	r3, [r3, #8]
 8103aa8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103ab4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	689b      	ldr	r3, [r3, #8]
 8103abc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8103ac0:	687b      	ldr	r3, [r7, #4]
 8103ac2:	681b      	ldr	r3, [r3, #0]
 8103ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8103ac8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8103aca:	687b      	ldr	r3, [r7, #4]
 8103acc:	681b      	ldr	r3, [r3, #0]
 8103ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8103ad0:	687b      	ldr	r3, [r7, #4]
 8103ad2:	681b      	ldr	r3, [r3, #0]
 8103ad4:	f022 0201 	bic.w	r2, r2, #1
 8103ad8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	685b      	ldr	r3, [r3, #4]
 8103ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103ae2:	2b00      	cmp	r3, #0
 8103ae4:	d00a      	beq.n	8103afc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8103ae6:	687b      	ldr	r3, [r7, #4]
 8103ae8:	681b      	ldr	r3, [r3, #0]
 8103aea:	68db      	ldr	r3, [r3, #12]
 8103aec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	681b      	ldr	r3, [r3, #0]
 8103af8:	430a      	orrs	r2, r1
 8103afa:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8103afc:	687b      	ldr	r3, [r7, #4]
 8103afe:	2200      	movs	r2, #0
 8103b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8103b04:	687b      	ldr	r3, [r7, #4]
 8103b06:	2201      	movs	r2, #1
 8103b08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8103b0c:	2300      	movs	r3, #0
}
 8103b0e:	4618      	mov	r0, r3
 8103b10:	3710      	adds	r7, #16
 8103b12:	46bd      	mov	sp, r7
 8103b14:	bd80      	pop	{r7, pc}
 8103b16:	bf00      	nop
 8103b18:	40013000 	.word	0x40013000
 8103b1c:	40003800 	.word	0x40003800
 8103b20:	40003c00 	.word	0x40003c00

08103b24 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103b24:	b580      	push	{r7, lr}
 8103b26:	b08a      	sub	sp, #40	; 0x28
 8103b28:	af02      	add	r7, sp, #8
 8103b2a:	60f8      	str	r0, [r7, #12]
 8103b2c:	60b9      	str	r1, [r7, #8]
 8103b2e:	603b      	str	r3, [r7, #0]
 8103b30:	4613      	mov	r3, r2
 8103b32:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8103b34:	68fb      	ldr	r3, [r7, #12]
 8103b36:	681b      	ldr	r3, [r3, #0]
 8103b38:	3320      	adds	r3, #32
 8103b3a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103b3c:	2300      	movs	r3, #0
 8103b3e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103b40:	68fb      	ldr	r3, [r7, #12]
 8103b42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103b46:	2b01      	cmp	r3, #1
 8103b48:	d101      	bne.n	8103b4e <HAL_SPI_Transmit+0x2a>
 8103b4a:	2302      	movs	r3, #2
 8103b4c:	e1d4      	b.n	8103ef8 <HAL_SPI_Transmit+0x3d4>
 8103b4e:	68fb      	ldr	r3, [r7, #12]
 8103b50:	2201      	movs	r2, #1
 8103b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103b56:	f7fd fdd3 	bl	8101700 <HAL_GetTick>
 8103b5a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103b5c:	68fb      	ldr	r3, [r7, #12]
 8103b5e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103b62:	b2db      	uxtb	r3, r3
 8103b64:	2b01      	cmp	r3, #1
 8103b66:	d007      	beq.n	8103b78 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8103b68:	2302      	movs	r3, #2
 8103b6a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8103b6c:	68fb      	ldr	r3, [r7, #12]
 8103b6e:	2200      	movs	r2, #0
 8103b70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103b74:	7efb      	ldrb	r3, [r7, #27]
 8103b76:	e1bf      	b.n	8103ef8 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103b78:	68bb      	ldr	r3, [r7, #8]
 8103b7a:	2b00      	cmp	r3, #0
 8103b7c:	d002      	beq.n	8103b84 <HAL_SPI_Transmit+0x60>
 8103b7e:	88fb      	ldrh	r3, [r7, #6]
 8103b80:	2b00      	cmp	r3, #0
 8103b82:	d107      	bne.n	8103b94 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8103b84:	2301      	movs	r3, #1
 8103b86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8103b88:	68fb      	ldr	r3, [r7, #12]
 8103b8a:	2200      	movs	r2, #0
 8103b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103b90:	7efb      	ldrb	r3, [r7, #27]
 8103b92:	e1b1      	b.n	8103ef8 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8103b94:	68fb      	ldr	r3, [r7, #12]
 8103b96:	2203      	movs	r2, #3
 8103b98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103b9c:	68fb      	ldr	r3, [r7, #12]
 8103b9e:	2200      	movs	r2, #0
 8103ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8103ba4:	68fb      	ldr	r3, [r7, #12]
 8103ba6:	68ba      	ldr	r2, [r7, #8]
 8103ba8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8103baa:	68fb      	ldr	r3, [r7, #12]
 8103bac:	88fa      	ldrh	r2, [r7, #6]
 8103bae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8103bb2:	68fb      	ldr	r3, [r7, #12]
 8103bb4:	88fa      	ldrh	r2, [r7, #6]
 8103bb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	2200      	movs	r2, #0
 8103bbe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8103bc0:	68fb      	ldr	r3, [r7, #12]
 8103bc2:	2200      	movs	r2, #0
 8103bc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8103bc8:	68fb      	ldr	r3, [r7, #12]
 8103bca:	2200      	movs	r2, #0
 8103bcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8103bd0:	68fb      	ldr	r3, [r7, #12]
 8103bd2:	2200      	movs	r2, #0
 8103bd4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8103bd6:	68fb      	ldr	r3, [r7, #12]
 8103bd8:	2200      	movs	r2, #0
 8103bda:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103bdc:	68fb      	ldr	r3, [r7, #12]
 8103bde:	689b      	ldr	r3, [r3, #8]
 8103be0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8103be4:	d107      	bne.n	8103bf6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8103be6:	68fb      	ldr	r3, [r7, #12]
 8103be8:	681b      	ldr	r3, [r3, #0]
 8103bea:	681a      	ldr	r2, [r3, #0]
 8103bec:	68fb      	ldr	r3, [r7, #12]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103bf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103bf6:	68fb      	ldr	r3, [r7, #12]
 8103bf8:	681b      	ldr	r3, [r3, #0]
 8103bfa:	685b      	ldr	r3, [r3, #4]
 8103bfc:	0c1b      	lsrs	r3, r3, #16
 8103bfe:	041b      	lsls	r3, r3, #16
 8103c00:	88f9      	ldrh	r1, [r7, #6]
 8103c02:	68fa      	ldr	r2, [r7, #12]
 8103c04:	6812      	ldr	r2, [r2, #0]
 8103c06:	430b      	orrs	r3, r1
 8103c08:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103c0a:	68fb      	ldr	r3, [r7, #12]
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	681a      	ldr	r2, [r3, #0]
 8103c10:	68fb      	ldr	r3, [r7, #12]
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	f042 0201 	orr.w	r2, r2, #1
 8103c18:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103c1a:	68fb      	ldr	r3, [r7, #12]
 8103c1c:	685b      	ldr	r3, [r3, #4]
 8103c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103c22:	d107      	bne.n	8103c34 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103c24:	68fb      	ldr	r3, [r7, #12]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	681a      	ldr	r2, [r3, #0]
 8103c2a:	68fb      	ldr	r3, [r7, #12]
 8103c2c:	681b      	ldr	r3, [r3, #0]
 8103c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103c34:	68fb      	ldr	r3, [r7, #12]
 8103c36:	68db      	ldr	r3, [r3, #12]
 8103c38:	2b0f      	cmp	r3, #15
 8103c3a:	d947      	bls.n	8103ccc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8103c3c:	e03f      	b.n	8103cbe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103c3e:	68fb      	ldr	r3, [r7, #12]
 8103c40:	681b      	ldr	r3, [r3, #0]
 8103c42:	695b      	ldr	r3, [r3, #20]
 8103c44:	f003 0302 	and.w	r3, r3, #2
 8103c48:	2b02      	cmp	r3, #2
 8103c4a:	d114      	bne.n	8103c76 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103c4c:	68fb      	ldr	r3, [r7, #12]
 8103c4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103c50:	68fb      	ldr	r3, [r7, #12]
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	6812      	ldr	r2, [r2, #0]
 8103c56:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8103c58:	68fb      	ldr	r3, [r7, #12]
 8103c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c5c:	1d1a      	adds	r2, r3, #4
 8103c5e:	68fb      	ldr	r3, [r7, #12]
 8103c60:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8103c62:	68fb      	ldr	r3, [r7, #12]
 8103c64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103c68:	b29b      	uxth	r3, r3
 8103c6a:	3b01      	subs	r3, #1
 8103c6c:	b29a      	uxth	r2, r3
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103c74:	e023      	b.n	8103cbe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103c76:	f7fd fd43 	bl	8101700 <HAL_GetTick>
 8103c7a:	4602      	mov	r2, r0
 8103c7c:	697b      	ldr	r3, [r7, #20]
 8103c7e:	1ad3      	subs	r3, r2, r3
 8103c80:	683a      	ldr	r2, [r7, #0]
 8103c82:	429a      	cmp	r2, r3
 8103c84:	d803      	bhi.n	8103c8e <HAL_SPI_Transmit+0x16a>
 8103c86:	683b      	ldr	r3, [r7, #0]
 8103c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c8c:	d102      	bne.n	8103c94 <HAL_SPI_Transmit+0x170>
 8103c8e:	683b      	ldr	r3, [r7, #0]
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d114      	bne.n	8103cbe <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103c94:	68f8      	ldr	r0, [r7, #12]
 8103c96:	f000 fe0c 	bl	81048b2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103c9a:	68fb      	ldr	r3, [r7, #12]
 8103c9c:	2200      	movs	r2, #0
 8103c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103ca2:	68fb      	ldr	r3, [r7, #12]
 8103ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103ca8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103cac:	68fb      	ldr	r3, [r7, #12]
 8103cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103cb2:	68fb      	ldr	r3, [r7, #12]
 8103cb4:	2201      	movs	r2, #1
 8103cb6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103cba:	2303      	movs	r3, #3
 8103cbc:	e11c      	b.n	8103ef8 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103cbe:	68fb      	ldr	r3, [r7, #12]
 8103cc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103cc4:	b29b      	uxth	r3, r3
 8103cc6:	2b00      	cmp	r3, #0
 8103cc8:	d1b9      	bne.n	8103c3e <HAL_SPI_Transmit+0x11a>
 8103cca:	e0ef      	b.n	8103eac <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103ccc:	68fb      	ldr	r3, [r7, #12]
 8103cce:	68db      	ldr	r3, [r3, #12]
 8103cd0:	2b07      	cmp	r3, #7
 8103cd2:	f240 80e4 	bls.w	8103e9e <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8103cd6:	e05d      	b.n	8103d94 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103cd8:	68fb      	ldr	r3, [r7, #12]
 8103cda:	681b      	ldr	r3, [r3, #0]
 8103cdc:	695b      	ldr	r3, [r3, #20]
 8103cde:	f003 0302 	and.w	r3, r3, #2
 8103ce2:	2b02      	cmp	r3, #2
 8103ce4:	d132      	bne.n	8103d4c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103ce6:	68fb      	ldr	r3, [r7, #12]
 8103ce8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103cec:	b29b      	uxth	r3, r3
 8103cee:	2b01      	cmp	r3, #1
 8103cf0:	d918      	bls.n	8103d24 <HAL_SPI_Transmit+0x200>
 8103cf2:	68fb      	ldr	r3, [r7, #12]
 8103cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cf6:	2b00      	cmp	r3, #0
 8103cf8:	d014      	beq.n	8103d24 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103cfa:	68fb      	ldr	r3, [r7, #12]
 8103cfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103cfe:	68fb      	ldr	r3, [r7, #12]
 8103d00:	681b      	ldr	r3, [r3, #0]
 8103d02:	6812      	ldr	r2, [r2, #0]
 8103d04:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103d06:	68fb      	ldr	r3, [r7, #12]
 8103d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d0a:	1d1a      	adds	r2, r3, #4
 8103d0c:	68fb      	ldr	r3, [r7, #12]
 8103d0e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103d10:	68fb      	ldr	r3, [r7, #12]
 8103d12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d16:	b29b      	uxth	r3, r3
 8103d18:	3b02      	subs	r3, #2
 8103d1a:	b29a      	uxth	r2, r3
 8103d1c:	68fb      	ldr	r3, [r7, #12]
 8103d1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103d22:	e037      	b.n	8103d94 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103d24:	68fb      	ldr	r3, [r7, #12]
 8103d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d28:	881a      	ldrh	r2, [r3, #0]
 8103d2a:	69fb      	ldr	r3, [r7, #28]
 8103d2c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103d2e:	68fb      	ldr	r3, [r7, #12]
 8103d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d32:	1c9a      	adds	r2, r3, #2
 8103d34:	68fb      	ldr	r3, [r7, #12]
 8103d36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103d38:	68fb      	ldr	r3, [r7, #12]
 8103d3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d3e:	b29b      	uxth	r3, r3
 8103d40:	3b01      	subs	r3, #1
 8103d42:	b29a      	uxth	r2, r3
 8103d44:	68fb      	ldr	r3, [r7, #12]
 8103d46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103d4a:	e023      	b.n	8103d94 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103d4c:	f7fd fcd8 	bl	8101700 <HAL_GetTick>
 8103d50:	4602      	mov	r2, r0
 8103d52:	697b      	ldr	r3, [r7, #20]
 8103d54:	1ad3      	subs	r3, r2, r3
 8103d56:	683a      	ldr	r2, [r7, #0]
 8103d58:	429a      	cmp	r2, r3
 8103d5a:	d803      	bhi.n	8103d64 <HAL_SPI_Transmit+0x240>
 8103d5c:	683b      	ldr	r3, [r7, #0]
 8103d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103d62:	d102      	bne.n	8103d6a <HAL_SPI_Transmit+0x246>
 8103d64:	683b      	ldr	r3, [r7, #0]
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d114      	bne.n	8103d94 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103d6a:	68f8      	ldr	r0, [r7, #12]
 8103d6c:	f000 fda1 	bl	81048b2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103d70:	68fb      	ldr	r3, [r7, #12]
 8103d72:	2200      	movs	r2, #0
 8103d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103d78:	68fb      	ldr	r3, [r7, #12]
 8103d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103d7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103d82:	68fb      	ldr	r3, [r7, #12]
 8103d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103d88:	68fb      	ldr	r3, [r7, #12]
 8103d8a:	2201      	movs	r2, #1
 8103d8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103d90:	2303      	movs	r3, #3
 8103d92:	e0b1      	b.n	8103ef8 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103d94:	68fb      	ldr	r3, [r7, #12]
 8103d96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d9a:	b29b      	uxth	r3, r3
 8103d9c:	2b00      	cmp	r3, #0
 8103d9e:	d19b      	bne.n	8103cd8 <HAL_SPI_Transmit+0x1b4>
 8103da0:	e084      	b.n	8103eac <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103da2:	68fb      	ldr	r3, [r7, #12]
 8103da4:	681b      	ldr	r3, [r3, #0]
 8103da6:	695b      	ldr	r3, [r3, #20]
 8103da8:	f003 0302 	and.w	r3, r3, #2
 8103dac:	2b02      	cmp	r3, #2
 8103dae:	d152      	bne.n	8103e56 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8103db0:	68fb      	ldr	r3, [r7, #12]
 8103db2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103db6:	b29b      	uxth	r3, r3
 8103db8:	2b03      	cmp	r3, #3
 8103dba:	d918      	bls.n	8103dee <HAL_SPI_Transmit+0x2ca>
 8103dbc:	68fb      	ldr	r3, [r7, #12]
 8103dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103dc0:	2b40      	cmp	r3, #64	; 0x40
 8103dc2:	d914      	bls.n	8103dee <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103dc4:	68fb      	ldr	r3, [r7, #12]
 8103dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103dc8:	68fb      	ldr	r3, [r7, #12]
 8103dca:	681b      	ldr	r3, [r3, #0]
 8103dcc:	6812      	ldr	r2, [r2, #0]
 8103dce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103dd0:	68fb      	ldr	r3, [r7, #12]
 8103dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dd4:	1d1a      	adds	r2, r3, #4
 8103dd6:	68fb      	ldr	r3, [r7, #12]
 8103dd8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8103dda:	68fb      	ldr	r3, [r7, #12]
 8103ddc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103de0:	b29b      	uxth	r3, r3
 8103de2:	3b04      	subs	r3, #4
 8103de4:	b29a      	uxth	r2, r3
 8103de6:	68fb      	ldr	r3, [r7, #12]
 8103de8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103dec:	e057      	b.n	8103e9e <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103dee:	68fb      	ldr	r3, [r7, #12]
 8103df0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103df4:	b29b      	uxth	r3, r3
 8103df6:	2b01      	cmp	r3, #1
 8103df8:	d917      	bls.n	8103e2a <HAL_SPI_Transmit+0x306>
 8103dfa:	68fb      	ldr	r3, [r7, #12]
 8103dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103dfe:	2b00      	cmp	r3, #0
 8103e00:	d013      	beq.n	8103e2a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103e02:	68fb      	ldr	r3, [r7, #12]
 8103e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e06:	881a      	ldrh	r2, [r3, #0]
 8103e08:	69fb      	ldr	r3, [r7, #28]
 8103e0a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103e0c:	68fb      	ldr	r3, [r7, #12]
 8103e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e10:	1c9a      	adds	r2, r3, #2
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103e16:	68fb      	ldr	r3, [r7, #12]
 8103e18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103e1c:	b29b      	uxth	r3, r3
 8103e1e:	3b02      	subs	r3, #2
 8103e20:	b29a      	uxth	r2, r3
 8103e22:	68fb      	ldr	r3, [r7, #12]
 8103e24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103e28:	e039      	b.n	8103e9e <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8103e2a:	68fb      	ldr	r3, [r7, #12]
 8103e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103e2e:	68fb      	ldr	r3, [r7, #12]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	3320      	adds	r3, #32
 8103e34:	7812      	ldrb	r2, [r2, #0]
 8103e36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8103e38:	68fb      	ldr	r3, [r7, #12]
 8103e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e3c:	1c5a      	adds	r2, r3, #1
 8103e3e:	68fb      	ldr	r3, [r7, #12]
 8103e40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103e42:	68fb      	ldr	r3, [r7, #12]
 8103e44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103e48:	b29b      	uxth	r3, r3
 8103e4a:	3b01      	subs	r3, #1
 8103e4c:	b29a      	uxth	r2, r3
 8103e4e:	68fb      	ldr	r3, [r7, #12]
 8103e50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103e54:	e023      	b.n	8103e9e <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103e56:	f7fd fc53 	bl	8101700 <HAL_GetTick>
 8103e5a:	4602      	mov	r2, r0
 8103e5c:	697b      	ldr	r3, [r7, #20]
 8103e5e:	1ad3      	subs	r3, r2, r3
 8103e60:	683a      	ldr	r2, [r7, #0]
 8103e62:	429a      	cmp	r2, r3
 8103e64:	d803      	bhi.n	8103e6e <HAL_SPI_Transmit+0x34a>
 8103e66:	683b      	ldr	r3, [r7, #0]
 8103e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103e6c:	d102      	bne.n	8103e74 <HAL_SPI_Transmit+0x350>
 8103e6e:	683b      	ldr	r3, [r7, #0]
 8103e70:	2b00      	cmp	r3, #0
 8103e72:	d114      	bne.n	8103e9e <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103e74:	68f8      	ldr	r0, [r7, #12]
 8103e76:	f000 fd1c 	bl	81048b2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103e7a:	68fb      	ldr	r3, [r7, #12]
 8103e7c:	2200      	movs	r2, #0
 8103e7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103e82:	68fb      	ldr	r3, [r7, #12]
 8103e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103e88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103e8c:	68fb      	ldr	r3, [r7, #12]
 8103e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103e92:	68fb      	ldr	r3, [r7, #12]
 8103e94:	2201      	movs	r2, #1
 8103e96:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103e9a:	2303      	movs	r3, #3
 8103e9c:	e02c      	b.n	8103ef8 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103e9e:	68fb      	ldr	r3, [r7, #12]
 8103ea0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103ea4:	b29b      	uxth	r3, r3
 8103ea6:	2b00      	cmp	r3, #0
 8103ea8:	f47f af7b 	bne.w	8103da2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8103eac:	683b      	ldr	r3, [r7, #0]
 8103eae:	9300      	str	r3, [sp, #0]
 8103eb0:	697b      	ldr	r3, [r7, #20]
 8103eb2:	2200      	movs	r2, #0
 8103eb4:	2108      	movs	r1, #8
 8103eb6:	68f8      	ldr	r0, [r7, #12]
 8103eb8:	f000 fd9b 	bl	81049f2 <SPI_WaitOnFlagUntilTimeout>
 8103ebc:	4603      	mov	r3, r0
 8103ebe:	2b00      	cmp	r3, #0
 8103ec0:	d007      	beq.n	8103ed2 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8103ec2:	68fb      	ldr	r3, [r7, #12]
 8103ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103ec8:	f043 0220 	orr.w	r2, r3, #32
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8103ed2:	68f8      	ldr	r0, [r7, #12]
 8103ed4:	f000 fced 	bl	81048b2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8103ed8:	68fb      	ldr	r3, [r7, #12]
 8103eda:	2200      	movs	r2, #0
 8103edc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8103ee0:	68fb      	ldr	r3, [r7, #12]
 8103ee2:	2201      	movs	r2, #1
 8103ee4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8103ee8:	68fb      	ldr	r3, [r7, #12]
 8103eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103eee:	2b00      	cmp	r3, #0
 8103ef0:	d001      	beq.n	8103ef6 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8103ef2:	2301      	movs	r3, #1
 8103ef4:	e000      	b.n	8103ef8 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8103ef6:	7efb      	ldrb	r3, [r7, #27]
}
 8103ef8:	4618      	mov	r0, r3
 8103efa:	3720      	adds	r7, #32
 8103efc:	46bd      	mov	sp, r7
 8103efe:	bd80      	pop	{r7, pc}

08103f00 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103f00:	b580      	push	{r7, lr}
 8103f02:	b08a      	sub	sp, #40	; 0x28
 8103f04:	af02      	add	r7, sp, #8
 8103f06:	60f8      	str	r0, [r7, #12]
 8103f08:	60b9      	str	r1, [r7, #8]
 8103f0a:	603b      	str	r3, [r7, #0]
 8103f0c:	4613      	mov	r3, r2
 8103f0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103f10:	2300      	movs	r3, #0
 8103f12:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8103f14:	68fb      	ldr	r3, [r7, #12]
 8103f16:	681b      	ldr	r3, [r3, #0]
 8103f18:	3330      	adds	r3, #48	; 0x30
 8103f1a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8103f1c:	68fb      	ldr	r3, [r7, #12]
 8103f1e:	685b      	ldr	r3, [r3, #4]
 8103f20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103f24:	d112      	bne.n	8103f4c <HAL_SPI_Receive+0x4c>
 8103f26:	68fb      	ldr	r3, [r7, #12]
 8103f28:	689b      	ldr	r3, [r3, #8]
 8103f2a:	2b00      	cmp	r3, #0
 8103f2c:	d10e      	bne.n	8103f4c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8103f2e:	68fb      	ldr	r3, [r7, #12]
 8103f30:	2204      	movs	r2, #4
 8103f32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8103f36:	88fa      	ldrh	r2, [r7, #6]
 8103f38:	683b      	ldr	r3, [r7, #0]
 8103f3a:	9300      	str	r3, [sp, #0]
 8103f3c:	4613      	mov	r3, r2
 8103f3e:	68ba      	ldr	r2, [r7, #8]
 8103f40:	68b9      	ldr	r1, [r7, #8]
 8103f42:	68f8      	ldr	r0, [r7, #12]
 8103f44:	f000 f9cc 	bl	81042e0 <HAL_SPI_TransmitReceive>
 8103f48:	4603      	mov	r3, r0
 8103f4a:	e1c5      	b.n	81042d8 <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103f4c:	68fb      	ldr	r3, [r7, #12]
 8103f4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103f52:	2b01      	cmp	r3, #1
 8103f54:	d101      	bne.n	8103f5a <HAL_SPI_Receive+0x5a>
 8103f56:	2302      	movs	r3, #2
 8103f58:	e1be      	b.n	81042d8 <HAL_SPI_Receive+0x3d8>
 8103f5a:	68fb      	ldr	r3, [r7, #12]
 8103f5c:	2201      	movs	r2, #1
 8103f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103f62:	f7fd fbcd 	bl	8101700 <HAL_GetTick>
 8103f66:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103f6e:	b2db      	uxtb	r3, r3
 8103f70:	2b01      	cmp	r3, #1
 8103f72:	d007      	beq.n	8103f84 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8103f74:	2302      	movs	r3, #2
 8103f76:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	2200      	movs	r2, #0
 8103f7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103f80:	7ffb      	ldrb	r3, [r7, #31]
 8103f82:	e1a9      	b.n	81042d8 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103f84:	68bb      	ldr	r3, [r7, #8]
 8103f86:	2b00      	cmp	r3, #0
 8103f88:	d002      	beq.n	8103f90 <HAL_SPI_Receive+0x90>
 8103f8a:	88fb      	ldrh	r3, [r7, #6]
 8103f8c:	2b00      	cmp	r3, #0
 8103f8e:	d107      	bne.n	8103fa0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8103f90:	2301      	movs	r3, #1
 8103f92:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8103f94:	68fb      	ldr	r3, [r7, #12]
 8103f96:	2200      	movs	r2, #0
 8103f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103f9c:	7ffb      	ldrb	r3, [r7, #31]
 8103f9e:	e19b      	b.n	81042d8 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	2204      	movs	r2, #4
 8103fa4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103fa8:	68fb      	ldr	r3, [r7, #12]
 8103faa:	2200      	movs	r2, #0
 8103fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8103fb0:	68fb      	ldr	r3, [r7, #12]
 8103fb2:	68ba      	ldr	r2, [r7, #8]
 8103fb4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8103fb6:	68fb      	ldr	r3, [r7, #12]
 8103fb8:	88fa      	ldrh	r2, [r7, #6]
 8103fba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8103fbe:	68fb      	ldr	r3, [r7, #12]
 8103fc0:	88fa      	ldrh	r2, [r7, #6]
 8103fc2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	2200      	movs	r2, #0
 8103fca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8103fcc:	68fb      	ldr	r3, [r7, #12]
 8103fce:	2200      	movs	r2, #0
 8103fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8103fd4:	68fb      	ldr	r3, [r7, #12]
 8103fd6:	2200      	movs	r2, #0
 8103fd8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8103fdc:	68fb      	ldr	r3, [r7, #12]
 8103fde:	2200      	movs	r2, #0
 8103fe0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8103fe2:	68fb      	ldr	r3, [r7, #12]
 8103fe4:	2200      	movs	r2, #0
 8103fe6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103fe8:	68fb      	ldr	r3, [r7, #12]
 8103fea:	689b      	ldr	r3, [r3, #8]
 8103fec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8103ff0:	d107      	bne.n	8104002 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	681a      	ldr	r2, [r3, #0]
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	681b      	ldr	r3, [r3, #0]
 8103ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8104000:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104002:	68fb      	ldr	r3, [r7, #12]
 8104004:	681b      	ldr	r3, [r3, #0]
 8104006:	685b      	ldr	r3, [r3, #4]
 8104008:	0c1b      	lsrs	r3, r3, #16
 810400a:	041b      	lsls	r3, r3, #16
 810400c:	88f9      	ldrh	r1, [r7, #6]
 810400e:	68fa      	ldr	r2, [r7, #12]
 8104010:	6812      	ldr	r2, [r2, #0]
 8104012:	430b      	orrs	r3, r1
 8104014:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104016:	68fb      	ldr	r3, [r7, #12]
 8104018:	681b      	ldr	r3, [r3, #0]
 810401a:	681a      	ldr	r2, [r3, #0]
 810401c:	68fb      	ldr	r3, [r7, #12]
 810401e:	681b      	ldr	r3, [r3, #0]
 8104020:	f042 0201 	orr.w	r2, r2, #1
 8104024:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104026:	68fb      	ldr	r3, [r7, #12]
 8104028:	685b      	ldr	r3, [r3, #4]
 810402a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810402e:	d107      	bne.n	8104040 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104030:	68fb      	ldr	r3, [r7, #12]
 8104032:	681b      	ldr	r3, [r3, #0]
 8104034:	681a      	ldr	r2, [r3, #0]
 8104036:	68fb      	ldr	r3, [r7, #12]
 8104038:	681b      	ldr	r3, [r3, #0]
 810403a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810403e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104040:	68fb      	ldr	r3, [r7, #12]
 8104042:	68db      	ldr	r3, [r3, #12]
 8104044:	2b0f      	cmp	r3, #15
 8104046:	d948      	bls.n	81040da <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104048:	e040      	b.n	81040cc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	681b      	ldr	r3, [r3, #0]
 810404e:	695a      	ldr	r2, [r3, #20]
 8104050:	f248 0308 	movw	r3, #32776	; 0x8008
 8104054:	4013      	ands	r3, r2
 8104056:	2b00      	cmp	r3, #0
 8104058:	d014      	beq.n	8104084 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810405a:	68fb      	ldr	r3, [r7, #12]
 810405c:	681a      	ldr	r2, [r3, #0]
 810405e:	68fb      	ldr	r3, [r7, #12]
 8104060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104062:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104064:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810406a:	1d1a      	adds	r2, r3, #4
 810406c:	68fb      	ldr	r3, [r7, #12]
 810406e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104070:	68fb      	ldr	r3, [r7, #12]
 8104072:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104076:	b29b      	uxth	r3, r3
 8104078:	3b01      	subs	r3, #1
 810407a:	b29a      	uxth	r2, r3
 810407c:	68fb      	ldr	r3, [r7, #12]
 810407e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104082:	e023      	b.n	81040cc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104084:	f7fd fb3c 	bl	8101700 <HAL_GetTick>
 8104088:	4602      	mov	r2, r0
 810408a:	697b      	ldr	r3, [r7, #20]
 810408c:	1ad3      	subs	r3, r2, r3
 810408e:	683a      	ldr	r2, [r7, #0]
 8104090:	429a      	cmp	r2, r3
 8104092:	d803      	bhi.n	810409c <HAL_SPI_Receive+0x19c>
 8104094:	683b      	ldr	r3, [r7, #0]
 8104096:	f1b3 3fff 	cmp.w	r3, #4294967295
 810409a:	d102      	bne.n	81040a2 <HAL_SPI_Receive+0x1a2>
 810409c:	683b      	ldr	r3, [r7, #0]
 810409e:	2b00      	cmp	r3, #0
 81040a0:	d114      	bne.n	81040cc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81040a2:	68f8      	ldr	r0, [r7, #12]
 81040a4:	f000 fc05 	bl	81048b2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81040a8:	68fb      	ldr	r3, [r7, #12]
 81040aa:	2200      	movs	r2, #0
 81040ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81040b0:	68fb      	ldr	r3, [r7, #12]
 81040b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81040b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81040ba:	68fb      	ldr	r3, [r7, #12]
 81040bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81040c0:	68fb      	ldr	r3, [r7, #12]
 81040c2:	2201      	movs	r2, #1
 81040c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81040c8:	2303      	movs	r3, #3
 81040ca:	e105      	b.n	81042d8 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 81040cc:	68fb      	ldr	r3, [r7, #12]
 81040ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81040d2:	b29b      	uxth	r3, r3
 81040d4:	2b00      	cmp	r3, #0
 81040d6:	d1b8      	bne.n	810404a <HAL_SPI_Receive+0x14a>
 81040d8:	e0eb      	b.n	81042b2 <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81040da:	68fb      	ldr	r3, [r7, #12]
 81040dc:	68db      	ldr	r3, [r3, #12]
 81040de:	2b07      	cmp	r3, #7
 81040e0:	f240 80e0 	bls.w	81042a4 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 81040e4:	e05b      	b.n	810419e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 81040e6:	68fb      	ldr	r3, [r7, #12]
 81040e8:	681b      	ldr	r3, [r3, #0]
 81040ea:	695b      	ldr	r3, [r3, #20]
 81040ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 81040f0:	2b00      	cmp	r3, #0
 81040f2:	d030      	beq.n	8104156 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 81040f4:	68fb      	ldr	r3, [r7, #12]
 81040f6:	681b      	ldr	r3, [r3, #0]
 81040f8:	695b      	ldr	r3, [r3, #20]
 81040fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81040fe:	2b00      	cmp	r3, #0
 8104100:	d014      	beq.n	810412c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104102:	68fb      	ldr	r3, [r7, #12]
 8104104:	681a      	ldr	r2, [r3, #0]
 8104106:	68fb      	ldr	r3, [r7, #12]
 8104108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810410a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810410c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810410e:	68fb      	ldr	r3, [r7, #12]
 8104110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104112:	1d1a      	adds	r2, r3, #4
 8104114:	68fb      	ldr	r3, [r7, #12]
 8104116:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104118:	68fb      	ldr	r3, [r7, #12]
 810411a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810411e:	b29b      	uxth	r3, r3
 8104120:	3b02      	subs	r3, #2
 8104122:	b29a      	uxth	r2, r3
 8104124:	68fb      	ldr	r3, [r7, #12]
 8104126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810412a:	e038      	b.n	810419e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810412c:	68fb      	ldr	r3, [r7, #12]
 810412e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104130:	69ba      	ldr	r2, [r7, #24]
 8104132:	8812      	ldrh	r2, [r2, #0]
 8104134:	b292      	uxth	r2, r2
 8104136:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104138:	68fb      	ldr	r3, [r7, #12]
 810413a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810413c:	1c9a      	adds	r2, r3, #2
 810413e:	68fb      	ldr	r3, [r7, #12]
 8104140:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104148:	b29b      	uxth	r3, r3
 810414a:	3b01      	subs	r3, #1
 810414c:	b29a      	uxth	r2, r3
 810414e:	68fb      	ldr	r3, [r7, #12]
 8104150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104154:	e023      	b.n	810419e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104156:	f7fd fad3 	bl	8101700 <HAL_GetTick>
 810415a:	4602      	mov	r2, r0
 810415c:	697b      	ldr	r3, [r7, #20]
 810415e:	1ad3      	subs	r3, r2, r3
 8104160:	683a      	ldr	r2, [r7, #0]
 8104162:	429a      	cmp	r2, r3
 8104164:	d803      	bhi.n	810416e <HAL_SPI_Receive+0x26e>
 8104166:	683b      	ldr	r3, [r7, #0]
 8104168:	f1b3 3fff 	cmp.w	r3, #4294967295
 810416c:	d102      	bne.n	8104174 <HAL_SPI_Receive+0x274>
 810416e:	683b      	ldr	r3, [r7, #0]
 8104170:	2b00      	cmp	r3, #0
 8104172:	d114      	bne.n	810419e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104174:	68f8      	ldr	r0, [r7, #12]
 8104176:	f000 fb9c 	bl	81048b2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810417a:	68fb      	ldr	r3, [r7, #12]
 810417c:	2200      	movs	r2, #0
 810417e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104182:	68fb      	ldr	r3, [r7, #12]
 8104184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104188:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810418c:	68fb      	ldr	r3, [r7, #12]
 810418e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104192:	68fb      	ldr	r3, [r7, #12]
 8104194:	2201      	movs	r2, #1
 8104196:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810419a:	2303      	movs	r3, #3
 810419c:	e09c      	b.n	81042d8 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810419e:	68fb      	ldr	r3, [r7, #12]
 81041a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81041a4:	b29b      	uxth	r3, r3
 81041a6:	2b00      	cmp	r3, #0
 81041a8:	d19d      	bne.n	81040e6 <HAL_SPI_Receive+0x1e6>
 81041aa:	e082      	b.n	81042b2 <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	695b      	ldr	r3, [r3, #20]
 81041b2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 81041b6:	2b00      	cmp	r3, #0
 81041b8:	d050      	beq.n	810425c <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 81041ba:	68fb      	ldr	r3, [r7, #12]
 81041bc:	681b      	ldr	r3, [r3, #0]
 81041be:	695b      	ldr	r3, [r3, #20]
 81041c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81041c4:	2b00      	cmp	r3, #0
 81041c6:	d014      	beq.n	81041f2 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81041c8:	68fb      	ldr	r3, [r7, #12]
 81041ca:	681a      	ldr	r2, [r3, #0]
 81041cc:	68fb      	ldr	r3, [r7, #12]
 81041ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81041d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81041d2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81041d8:	1d1a      	adds	r2, r3, #4
 81041da:	68fb      	ldr	r3, [r7, #12]
 81041dc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 81041de:	68fb      	ldr	r3, [r7, #12]
 81041e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81041e4:	b29b      	uxth	r3, r3
 81041e6:	3b04      	subs	r3, #4
 81041e8:	b29a      	uxth	r2, r3
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81041f0:	e058      	b.n	81042a4 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 81041f2:	68fb      	ldr	r3, [r7, #12]
 81041f4:	681b      	ldr	r3, [r3, #0]
 81041f6:	695b      	ldr	r3, [r3, #20]
 81041f8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 81041fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104200:	d914      	bls.n	810422c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104202:	68fb      	ldr	r3, [r7, #12]
 8104204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104206:	69ba      	ldr	r2, [r7, #24]
 8104208:	8812      	ldrh	r2, [r2, #0]
 810420a:	b292      	uxth	r2, r2
 810420c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810420e:	68fb      	ldr	r3, [r7, #12]
 8104210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104212:	1c9a      	adds	r2, r3, #2
 8104214:	68fb      	ldr	r3, [r7, #12]
 8104216:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810421e:	b29b      	uxth	r3, r3
 8104220:	3b02      	subs	r3, #2
 8104222:	b29a      	uxth	r2, r3
 8104224:	68fb      	ldr	r3, [r7, #12]
 8104226:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810422a:	e03b      	b.n	81042a4 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810422c:	68fb      	ldr	r3, [r7, #12]
 810422e:	681b      	ldr	r3, [r3, #0]
 8104230:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104238:	7812      	ldrb	r2, [r2, #0]
 810423a:	b2d2      	uxtb	r2, r2
 810423c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810423e:	68fb      	ldr	r3, [r7, #12]
 8104240:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104242:	1c5a      	adds	r2, r3, #1
 8104244:	68fb      	ldr	r3, [r7, #12]
 8104246:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104248:	68fb      	ldr	r3, [r7, #12]
 810424a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810424e:	b29b      	uxth	r3, r3
 8104250:	3b01      	subs	r3, #1
 8104252:	b29a      	uxth	r2, r3
 8104254:	68fb      	ldr	r3, [r7, #12]
 8104256:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810425a:	e023      	b.n	81042a4 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810425c:	f7fd fa50 	bl	8101700 <HAL_GetTick>
 8104260:	4602      	mov	r2, r0
 8104262:	697b      	ldr	r3, [r7, #20]
 8104264:	1ad3      	subs	r3, r2, r3
 8104266:	683a      	ldr	r2, [r7, #0]
 8104268:	429a      	cmp	r2, r3
 810426a:	d803      	bhi.n	8104274 <HAL_SPI_Receive+0x374>
 810426c:	683b      	ldr	r3, [r7, #0]
 810426e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104272:	d102      	bne.n	810427a <HAL_SPI_Receive+0x37a>
 8104274:	683b      	ldr	r3, [r7, #0]
 8104276:	2b00      	cmp	r3, #0
 8104278:	d114      	bne.n	81042a4 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810427a:	68f8      	ldr	r0, [r7, #12]
 810427c:	f000 fb19 	bl	81048b2 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104280:	68fb      	ldr	r3, [r7, #12]
 8104282:	2200      	movs	r2, #0
 8104284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104288:	68fb      	ldr	r3, [r7, #12]
 810428a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810428e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104292:	68fb      	ldr	r3, [r7, #12]
 8104294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104298:	68fb      	ldr	r3, [r7, #12]
 810429a:	2201      	movs	r2, #1
 810429c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81042a0:	2303      	movs	r3, #3
 81042a2:	e019      	b.n	81042d8 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 81042a4:	68fb      	ldr	r3, [r7, #12]
 81042a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81042aa:	b29b      	uxth	r3, r3
 81042ac:	2b00      	cmp	r3, #0
 81042ae:	f47f af7d 	bne.w	81041ac <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81042b2:	68f8      	ldr	r0, [r7, #12]
 81042b4:	f000 fafd 	bl	81048b2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	2200      	movs	r2, #0
 81042bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81042c0:	68fb      	ldr	r3, [r7, #12]
 81042c2:	2201      	movs	r2, #1
 81042c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81042c8:	68fb      	ldr	r3, [r7, #12]
 81042ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81042ce:	2b00      	cmp	r3, #0
 81042d0:	d001      	beq.n	81042d6 <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 81042d2:	2301      	movs	r3, #1
 81042d4:	e000      	b.n	81042d8 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 81042d6:	7ffb      	ldrb	r3, [r7, #31]
}
 81042d8:	4618      	mov	r0, r3
 81042da:	3720      	adds	r7, #32
 81042dc:	46bd      	mov	sp, r7
 81042de:	bd80      	pop	{r7, pc}

081042e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 81042e0:	b580      	push	{r7, lr}
 81042e2:	b08e      	sub	sp, #56	; 0x38
 81042e4:	af02      	add	r7, sp, #8
 81042e6:	60f8      	str	r0, [r7, #12]
 81042e8:	60b9      	str	r1, [r7, #8]
 81042ea:	607a      	str	r2, [r7, #4]
 81042ec:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 81042ee:	2300      	movs	r3, #0
 81042f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81042f4:	68fb      	ldr	r3, [r7, #12]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	3320      	adds	r3, #32
 81042fa:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81042fc:	68fb      	ldr	r3, [r7, #12]
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	3330      	adds	r3, #48	; 0x30
 8104302:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104304:	68fb      	ldr	r3, [r7, #12]
 8104306:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810430a:	2b01      	cmp	r3, #1
 810430c:	d101      	bne.n	8104312 <HAL_SPI_TransmitReceive+0x32>
 810430e:	2302      	movs	r3, #2
 8104310:	e2cb      	b.n	81048aa <HAL_SPI_TransmitReceive+0x5ca>
 8104312:	68fb      	ldr	r3, [r7, #12]
 8104314:	2201      	movs	r2, #1
 8104316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810431a:	f7fd f9f1 	bl	8101700 <HAL_GetTick>
 810431e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8104320:	887b      	ldrh	r3, [r7, #2]
 8104322:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8104324:	887b      	ldrh	r3, [r7, #2]
 8104326:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8104328:	68fb      	ldr	r3, [r7, #12]
 810432a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810432e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8104330:	68fb      	ldr	r3, [r7, #12]
 8104332:	685b      	ldr	r3, [r3, #4]
 8104334:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8104336:	7efb      	ldrb	r3, [r7, #27]
 8104338:	2b01      	cmp	r3, #1
 810433a:	d014      	beq.n	8104366 <HAL_SPI_TransmitReceive+0x86>
 810433c:	697b      	ldr	r3, [r7, #20]
 810433e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104342:	d106      	bne.n	8104352 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104344:	68fb      	ldr	r3, [r7, #12]
 8104346:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8104348:	2b00      	cmp	r3, #0
 810434a:	d102      	bne.n	8104352 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 810434c:	7efb      	ldrb	r3, [r7, #27]
 810434e:	2b04      	cmp	r3, #4
 8104350:	d009      	beq.n	8104366 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8104352:	2302      	movs	r3, #2
 8104354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104358:	68fb      	ldr	r3, [r7, #12]
 810435a:	2200      	movs	r2, #0
 810435c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104360:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104364:	e2a1      	b.n	81048aa <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8104366:	68bb      	ldr	r3, [r7, #8]
 8104368:	2b00      	cmp	r3, #0
 810436a:	d005      	beq.n	8104378 <HAL_SPI_TransmitReceive+0x98>
 810436c:	687b      	ldr	r3, [r7, #4]
 810436e:	2b00      	cmp	r3, #0
 8104370:	d002      	beq.n	8104378 <HAL_SPI_TransmitReceive+0x98>
 8104372:	887b      	ldrh	r3, [r7, #2]
 8104374:	2b00      	cmp	r3, #0
 8104376:	d109      	bne.n	810438c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8104378:	2301      	movs	r3, #1
 810437a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810437e:	68fb      	ldr	r3, [r7, #12]
 8104380:	2200      	movs	r2, #0
 8104382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810438a:	e28e      	b.n	81048aa <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810438c:	68fb      	ldr	r3, [r7, #12]
 810438e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104392:	b2db      	uxtb	r3, r3
 8104394:	2b04      	cmp	r3, #4
 8104396:	d003      	beq.n	81043a0 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8104398:	68fb      	ldr	r3, [r7, #12]
 810439a:	2205      	movs	r2, #5
 810439c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81043a0:	68fb      	ldr	r3, [r7, #12]
 81043a2:	2200      	movs	r2, #0
 81043a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 81043a8:	68fb      	ldr	r3, [r7, #12]
 81043aa:	687a      	ldr	r2, [r7, #4]
 81043ac:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 81043ae:	68fb      	ldr	r3, [r7, #12]
 81043b0:	887a      	ldrh	r2, [r7, #2]
 81043b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 81043b6:	68fb      	ldr	r3, [r7, #12]
 81043b8:	887a      	ldrh	r2, [r7, #2]
 81043ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 81043be:	68fb      	ldr	r3, [r7, #12]
 81043c0:	68ba      	ldr	r2, [r7, #8]
 81043c2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 81043c4:	68fb      	ldr	r3, [r7, #12]
 81043c6:	887a      	ldrh	r2, [r7, #2]
 81043c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 81043cc:	68fb      	ldr	r3, [r7, #12]
 81043ce:	887a      	ldrh	r2, [r7, #2]
 81043d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	2200      	movs	r2, #0
 81043d8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 81043da:	68fb      	ldr	r3, [r7, #12]
 81043dc:	2200      	movs	r2, #0
 81043de:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81043e0:	68fb      	ldr	r3, [r7, #12]
 81043e2:	681b      	ldr	r3, [r3, #0]
 81043e4:	685b      	ldr	r3, [r3, #4]
 81043e6:	0c1b      	lsrs	r3, r3, #16
 81043e8:	041b      	lsls	r3, r3, #16
 81043ea:	8879      	ldrh	r1, [r7, #2]
 81043ec:	68fa      	ldr	r2, [r7, #12]
 81043ee:	6812      	ldr	r2, [r2, #0]
 81043f0:	430b      	orrs	r3, r1
 81043f2:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	681a      	ldr	r2, [r3, #0]
 81043fa:	68fb      	ldr	r3, [r7, #12]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	f042 0201 	orr.w	r2, r2, #1
 8104402:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104404:	68fb      	ldr	r3, [r7, #12]
 8104406:	685b      	ldr	r3, [r3, #4]
 8104408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810440c:	d107      	bne.n	810441e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810440e:	68fb      	ldr	r3, [r7, #12]
 8104410:	681b      	ldr	r3, [r3, #0]
 8104412:	681a      	ldr	r2, [r3, #0]
 8104414:	68fb      	ldr	r3, [r7, #12]
 8104416:	681b      	ldr	r3, [r3, #0]
 8104418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810441c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810441e:	68fb      	ldr	r3, [r7, #12]
 8104420:	68db      	ldr	r3, [r3, #12]
 8104422:	2b0f      	cmp	r3, #15
 8104424:	d970      	bls.n	8104508 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104426:	e068      	b.n	81044fa <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104428:	68fb      	ldr	r3, [r7, #12]
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	695b      	ldr	r3, [r3, #20]
 810442e:	f003 0302 	and.w	r3, r3, #2
 8104432:	2b02      	cmp	r3, #2
 8104434:	d11a      	bne.n	810446c <HAL_SPI_TransmitReceive+0x18c>
 8104436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104438:	2b00      	cmp	r3, #0
 810443a:	d017      	beq.n	810446c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810443c:	68fb      	ldr	r3, [r7, #12]
 810443e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104440:	68fb      	ldr	r3, [r7, #12]
 8104442:	681b      	ldr	r3, [r3, #0]
 8104444:	6812      	ldr	r2, [r2, #0]
 8104446:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104448:	68fb      	ldr	r3, [r7, #12]
 810444a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810444c:	1d1a      	adds	r2, r3, #4
 810444e:	68fb      	ldr	r3, [r7, #12]
 8104450:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8104452:	68fb      	ldr	r3, [r7, #12]
 8104454:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104458:	b29b      	uxth	r3, r3
 810445a:	3b01      	subs	r3, #1
 810445c:	b29a      	uxth	r2, r3
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104464:	68fb      	ldr	r3, [r7, #12]
 8104466:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810446a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 810446c:	68fb      	ldr	r3, [r7, #12]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	695a      	ldr	r2, [r3, #20]
 8104472:	f248 0308 	movw	r3, #32776	; 0x8008
 8104476:	4013      	ands	r3, r2
 8104478:	2b00      	cmp	r3, #0
 810447a:	d01a      	beq.n	81044b2 <HAL_SPI_TransmitReceive+0x1d2>
 810447c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810447e:	2b00      	cmp	r3, #0
 8104480:	d017      	beq.n	81044b2 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104482:	68fb      	ldr	r3, [r7, #12]
 8104484:	681a      	ldr	r2, [r3, #0]
 8104486:	68fb      	ldr	r3, [r7, #12]
 8104488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810448a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810448c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810448e:	68fb      	ldr	r3, [r7, #12]
 8104490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104492:	1d1a      	adds	r2, r3, #4
 8104494:	68fb      	ldr	r3, [r7, #12]
 8104496:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8104498:	68fb      	ldr	r3, [r7, #12]
 810449a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810449e:	b29b      	uxth	r3, r3
 81044a0:	3b01      	subs	r3, #1
 81044a2:	b29a      	uxth	r2, r3
 81044a4:	68fb      	ldr	r3, [r7, #12]
 81044a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 81044aa:	68fb      	ldr	r3, [r7, #12]
 81044ac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81044b0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81044b2:	f7fd f925 	bl	8101700 <HAL_GetTick>
 81044b6:	4602      	mov	r2, r0
 81044b8:	69fb      	ldr	r3, [r7, #28]
 81044ba:	1ad3      	subs	r3, r2, r3
 81044bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81044be:	429a      	cmp	r2, r3
 81044c0:	d803      	bhi.n	81044ca <HAL_SPI_TransmitReceive+0x1ea>
 81044c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81044c8:	d102      	bne.n	81044d0 <HAL_SPI_TransmitReceive+0x1f0>
 81044ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81044cc:	2b00      	cmp	r3, #0
 81044ce:	d114      	bne.n	81044fa <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81044d0:	68f8      	ldr	r0, [r7, #12]
 81044d2:	f000 f9ee 	bl	81048b2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81044d6:	68fb      	ldr	r3, [r7, #12]
 81044d8:	2200      	movs	r2, #0
 81044da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81044de:	68fb      	ldr	r3, [r7, #12]
 81044e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81044e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81044e8:	68fb      	ldr	r3, [r7, #12]
 81044ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81044ee:	68fb      	ldr	r3, [r7, #12]
 81044f0:	2201      	movs	r2, #1
 81044f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81044f6:	2303      	movs	r3, #3
 81044f8:	e1d7      	b.n	81048aa <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81044fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81044fc:	2b00      	cmp	r3, #0
 81044fe:	d193      	bne.n	8104428 <HAL_SPI_TransmitReceive+0x148>
 8104500:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104502:	2b00      	cmp	r3, #0
 8104504:	d190      	bne.n	8104428 <HAL_SPI_TransmitReceive+0x148>
 8104506:	e1a9      	b.n	810485c <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104508:	68fb      	ldr	r3, [r7, #12]
 810450a:	68db      	ldr	r3, [r3, #12]
 810450c:	2b07      	cmp	r3, #7
 810450e:	f240 819d 	bls.w	810484c <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104512:	e0a6      	b.n	8104662 <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104514:	68fb      	ldr	r3, [r7, #12]
 8104516:	681b      	ldr	r3, [r3, #0]
 8104518:	695b      	ldr	r3, [r3, #20]
 810451a:	f003 0302 	and.w	r3, r3, #2
 810451e:	2b02      	cmp	r3, #2
 8104520:	d139      	bne.n	8104596 <HAL_SPI_TransmitReceive+0x2b6>
 8104522:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104524:	2b00      	cmp	r3, #0
 8104526:	d036      	beq.n	8104596 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104528:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810452a:	2b01      	cmp	r3, #1
 810452c:	d91c      	bls.n	8104568 <HAL_SPI_TransmitReceive+0x288>
 810452e:	68fb      	ldr	r3, [r7, #12]
 8104530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104532:	2b00      	cmp	r3, #0
 8104534:	d018      	beq.n	8104568 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104536:	68fb      	ldr	r3, [r7, #12]
 8104538:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810453a:	68fb      	ldr	r3, [r7, #12]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	6812      	ldr	r2, [r2, #0]
 8104540:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104542:	68fb      	ldr	r3, [r7, #12]
 8104544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104546:	1d1a      	adds	r2, r3, #4
 8104548:	68fb      	ldr	r3, [r7, #12]
 810454a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810454c:	68fb      	ldr	r3, [r7, #12]
 810454e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104552:	b29b      	uxth	r3, r3
 8104554:	3b02      	subs	r3, #2
 8104556:	b29a      	uxth	r2, r3
 8104558:	68fb      	ldr	r3, [r7, #12]
 810455a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810455e:	68fb      	ldr	r3, [r7, #12]
 8104560:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104564:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8104566:	e016      	b.n	8104596 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104568:	68fb      	ldr	r3, [r7, #12]
 810456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810456c:	881a      	ldrh	r2, [r3, #0]
 810456e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104570:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104572:	68fb      	ldr	r3, [r7, #12]
 8104574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104576:	1c9a      	adds	r2, r3, #2
 8104578:	68fb      	ldr	r3, [r7, #12]
 810457a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810457c:	68fb      	ldr	r3, [r7, #12]
 810457e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104582:	b29b      	uxth	r3, r3
 8104584:	3b01      	subs	r3, #1
 8104586:	b29a      	uxth	r2, r3
 8104588:	68fb      	ldr	r3, [r7, #12]
 810458a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810458e:	68fb      	ldr	r3, [r7, #12]
 8104590:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104594:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8104596:	68fb      	ldr	r3, [r7, #12]
 8104598:	681b      	ldr	r3, [r3, #0]
 810459a:	695b      	ldr	r3, [r3, #20]
 810459c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 81045a0:	2b00      	cmp	r3, #0
 81045a2:	d03a      	beq.n	810461a <HAL_SPI_TransmitReceive+0x33a>
 81045a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81045a6:	2b00      	cmp	r3, #0
 81045a8:	d037      	beq.n	810461a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	681b      	ldr	r3, [r3, #0]
 81045ae:	695b      	ldr	r3, [r3, #20]
 81045b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81045b4:	2b00      	cmp	r3, #0
 81045b6:	d018      	beq.n	81045ea <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81045b8:	68fb      	ldr	r3, [r7, #12]
 81045ba:	681a      	ldr	r2, [r3, #0]
 81045bc:	68fb      	ldr	r3, [r7, #12]
 81045be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81045c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81045c2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81045c4:	68fb      	ldr	r3, [r7, #12]
 81045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81045c8:	1d1a      	adds	r2, r3, #4
 81045ca:	68fb      	ldr	r3, [r7, #12]
 81045cc:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81045ce:	68fb      	ldr	r3, [r7, #12]
 81045d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81045d4:	b29b      	uxth	r3, r3
 81045d6:	3b02      	subs	r3, #2
 81045d8:	b29a      	uxth	r2, r3
 81045da:	68fb      	ldr	r3, [r7, #12]
 81045dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81045e0:	68fb      	ldr	r3, [r7, #12]
 81045e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81045e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81045e8:	e017      	b.n	810461a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81045ea:	68fb      	ldr	r3, [r7, #12]
 81045ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81045ee:	6a3a      	ldr	r2, [r7, #32]
 81045f0:	8812      	ldrh	r2, [r2, #0]
 81045f2:	b292      	uxth	r2, r2
 81045f4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81045f6:	68fb      	ldr	r3, [r7, #12]
 81045f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81045fa:	1c9a      	adds	r2, r3, #2
 81045fc:	68fb      	ldr	r3, [r7, #12]
 81045fe:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104600:	68fb      	ldr	r3, [r7, #12]
 8104602:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104606:	b29b      	uxth	r3, r3
 8104608:	3b01      	subs	r3, #1
 810460a:	b29a      	uxth	r2, r3
 810460c:	68fb      	ldr	r3, [r7, #12]
 810460e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104612:	68fb      	ldr	r3, [r7, #12]
 8104614:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104618:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810461a:	f7fd f871 	bl	8101700 <HAL_GetTick>
 810461e:	4602      	mov	r2, r0
 8104620:	69fb      	ldr	r3, [r7, #28]
 8104622:	1ad3      	subs	r3, r2, r3
 8104624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104626:	429a      	cmp	r2, r3
 8104628:	d803      	bhi.n	8104632 <HAL_SPI_TransmitReceive+0x352>
 810462a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104630:	d102      	bne.n	8104638 <HAL_SPI_TransmitReceive+0x358>
 8104632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104634:	2b00      	cmp	r3, #0
 8104636:	d114      	bne.n	8104662 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104638:	68f8      	ldr	r0, [r7, #12]
 810463a:	f000 f93a 	bl	81048b2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810463e:	68fb      	ldr	r3, [r7, #12]
 8104640:	2200      	movs	r2, #0
 8104642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104646:	68fb      	ldr	r3, [r7, #12]
 8104648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810464c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104650:	68fb      	ldr	r3, [r7, #12]
 8104652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104656:	68fb      	ldr	r3, [r7, #12]
 8104658:	2201      	movs	r2, #1
 810465a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 810465e:	2303      	movs	r3, #3
 8104660:	e123      	b.n	81048aa <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104664:	2b00      	cmp	r3, #0
 8104666:	f47f af55 	bne.w	8104514 <HAL_SPI_TransmitReceive+0x234>
 810466a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810466c:	2b00      	cmp	r3, #0
 810466e:	f47f af51 	bne.w	8104514 <HAL_SPI_TransmitReceive+0x234>
 8104672:	e0f3      	b.n	810485c <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104674:	68fb      	ldr	r3, [r7, #12]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	695b      	ldr	r3, [r3, #20]
 810467a:	f003 0302 	and.w	r3, r3, #2
 810467e:	2b02      	cmp	r3, #2
 8104680:	d15a      	bne.n	8104738 <HAL_SPI_TransmitReceive+0x458>
 8104682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104684:	2b00      	cmp	r3, #0
 8104686:	d057      	beq.n	8104738 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8104688:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810468a:	2b03      	cmp	r3, #3
 810468c:	d91c      	bls.n	81046c8 <HAL_SPI_TransmitReceive+0x3e8>
 810468e:	68fb      	ldr	r3, [r7, #12]
 8104690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104692:	2b40      	cmp	r3, #64	; 0x40
 8104694:	d918      	bls.n	81046c8 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104696:	68fb      	ldr	r3, [r7, #12]
 8104698:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810469a:	68fb      	ldr	r3, [r7, #12]
 810469c:	681b      	ldr	r3, [r3, #0]
 810469e:	6812      	ldr	r2, [r2, #0]
 81046a0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81046a2:	68fb      	ldr	r3, [r7, #12]
 81046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046a6:	1d1a      	adds	r2, r3, #4
 81046a8:	68fb      	ldr	r3, [r7, #12]
 81046aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81046ac:	68fb      	ldr	r3, [r7, #12]
 81046ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046b2:	b29b      	uxth	r3, r3
 81046b4:	3b04      	subs	r3, #4
 81046b6:	b29a      	uxth	r2, r3
 81046b8:	68fb      	ldr	r3, [r7, #12]
 81046ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81046be:	68fb      	ldr	r3, [r7, #12]
 81046c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 81046c6:	e037      	b.n	8104738 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81046c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81046ca:	2b01      	cmp	r3, #1
 81046cc:	d91b      	bls.n	8104706 <HAL_SPI_TransmitReceive+0x426>
 81046ce:	68fb      	ldr	r3, [r7, #12]
 81046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81046d2:	2b00      	cmp	r3, #0
 81046d4:	d017      	beq.n	8104706 <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81046d6:	68fb      	ldr	r3, [r7, #12]
 81046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046da:	881a      	ldrh	r2, [r3, #0]
 81046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81046de:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81046e0:	68fb      	ldr	r3, [r7, #12]
 81046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046e4:	1c9a      	adds	r2, r3, #2
 81046e6:	68fb      	ldr	r3, [r7, #12]
 81046e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81046ea:	68fb      	ldr	r3, [r7, #12]
 81046ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046f0:	b29b      	uxth	r3, r3
 81046f2:	3b02      	subs	r3, #2
 81046f4:	b29a      	uxth	r2, r3
 81046f6:	68fb      	ldr	r3, [r7, #12]
 81046f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81046fc:	68fb      	ldr	r3, [r7, #12]
 81046fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104702:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8104704:	e018      	b.n	8104738 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104706:	68fb      	ldr	r3, [r7, #12]
 8104708:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810470a:	68fb      	ldr	r3, [r7, #12]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	3320      	adds	r3, #32
 8104710:	7812      	ldrb	r2, [r2, #0]
 8104712:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104714:	68fb      	ldr	r3, [r7, #12]
 8104716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104718:	1c5a      	adds	r2, r3, #1
 810471a:	68fb      	ldr	r3, [r7, #12]
 810471c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810471e:	68fb      	ldr	r3, [r7, #12]
 8104720:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104724:	b29b      	uxth	r3, r3
 8104726:	3b01      	subs	r3, #1
 8104728:	b29a      	uxth	r2, r3
 810472a:	68fb      	ldr	r3, [r7, #12]
 810472c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104730:	68fb      	ldr	r3, [r7, #12]
 8104732:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104736:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8104738:	68fb      	ldr	r3, [r7, #12]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	695b      	ldr	r3, [r3, #20]
 810473e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8104742:	2b00      	cmp	r3, #0
 8104744:	d05e      	beq.n	8104804 <HAL_SPI_TransmitReceive+0x524>
 8104746:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104748:	2b00      	cmp	r3, #0
 810474a:	d05b      	beq.n	8104804 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810474c:	68fb      	ldr	r3, [r7, #12]
 810474e:	681b      	ldr	r3, [r3, #0]
 8104750:	695b      	ldr	r3, [r3, #20]
 8104752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104756:	2b00      	cmp	r3, #0
 8104758:	d018      	beq.n	810478c <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810475a:	68fb      	ldr	r3, [r7, #12]
 810475c:	681a      	ldr	r2, [r3, #0]
 810475e:	68fb      	ldr	r3, [r7, #12]
 8104760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104762:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104764:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104766:	68fb      	ldr	r3, [r7, #12]
 8104768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810476a:	1d1a      	adds	r2, r3, #4
 810476c:	68fb      	ldr	r3, [r7, #12]
 810476e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8104770:	68fb      	ldr	r3, [r7, #12]
 8104772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104776:	b29b      	uxth	r3, r3
 8104778:	3b04      	subs	r3, #4
 810477a:	b29a      	uxth	r2, r3
 810477c:	68fb      	ldr	r3, [r7, #12]
 810477e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104782:	68fb      	ldr	r3, [r7, #12]
 8104784:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104788:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810478a:	e03b      	b.n	8104804 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 810478c:	68fb      	ldr	r3, [r7, #12]
 810478e:	681b      	ldr	r3, [r3, #0]
 8104790:	695b      	ldr	r3, [r3, #20]
 8104792:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8104796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810479a:	d918      	bls.n	81047ce <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810479c:	68fb      	ldr	r3, [r7, #12]
 810479e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81047a0:	6a3a      	ldr	r2, [r7, #32]
 81047a2:	8812      	ldrh	r2, [r2, #0]
 81047a4:	b292      	uxth	r2, r2
 81047a6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81047a8:	68fb      	ldr	r3, [r7, #12]
 81047aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81047ac:	1c9a      	adds	r2, r3, #2
 81047ae:	68fb      	ldr	r3, [r7, #12]
 81047b0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81047b2:	68fb      	ldr	r3, [r7, #12]
 81047b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81047b8:	b29b      	uxth	r3, r3
 81047ba:	3b02      	subs	r3, #2
 81047bc:	b29a      	uxth	r2, r3
 81047be:	68fb      	ldr	r3, [r7, #12]
 81047c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81047c4:	68fb      	ldr	r3, [r7, #12]
 81047c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81047ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81047cc:	e01a      	b.n	8104804 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81047ce:	68fb      	ldr	r3, [r7, #12]
 81047d0:	681b      	ldr	r3, [r3, #0]
 81047d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81047d6:	68fb      	ldr	r3, [r7, #12]
 81047d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81047da:	7812      	ldrb	r2, [r2, #0]
 81047dc:	b2d2      	uxtb	r2, r2
 81047de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81047e0:	68fb      	ldr	r3, [r7, #12]
 81047e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81047e4:	1c5a      	adds	r2, r3, #1
 81047e6:	68fb      	ldr	r3, [r7, #12]
 81047e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81047ea:	68fb      	ldr	r3, [r7, #12]
 81047ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81047f0:	b29b      	uxth	r3, r3
 81047f2:	3b01      	subs	r3, #1
 81047f4:	b29a      	uxth	r2, r3
 81047f6:	68fb      	ldr	r3, [r7, #12]
 81047f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104802:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104804:	f7fc ff7c 	bl	8101700 <HAL_GetTick>
 8104808:	4602      	mov	r2, r0
 810480a:	69fb      	ldr	r3, [r7, #28]
 810480c:	1ad3      	subs	r3, r2, r3
 810480e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104810:	429a      	cmp	r2, r3
 8104812:	d803      	bhi.n	810481c <HAL_SPI_TransmitReceive+0x53c>
 8104814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104816:	f1b3 3fff 	cmp.w	r3, #4294967295
 810481a:	d102      	bne.n	8104822 <HAL_SPI_TransmitReceive+0x542>
 810481c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810481e:	2b00      	cmp	r3, #0
 8104820:	d114      	bne.n	810484c <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104822:	68f8      	ldr	r0, [r7, #12]
 8104824:	f000 f845 	bl	81048b2 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104828:	68fb      	ldr	r3, [r7, #12]
 810482a:	2200      	movs	r2, #0
 810482c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104830:	68fb      	ldr	r3, [r7, #12]
 8104832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104836:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810483a:	68fb      	ldr	r3, [r7, #12]
 810483c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104840:	68fb      	ldr	r3, [r7, #12]
 8104842:	2201      	movs	r2, #1
 8104844:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104848:	2303      	movs	r3, #3
 810484a:	e02e      	b.n	81048aa <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810484c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810484e:	2b00      	cmp	r3, #0
 8104850:	f47f af10 	bne.w	8104674 <HAL_SPI_TransmitReceive+0x394>
 8104854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104856:	2b00      	cmp	r3, #0
 8104858:	f47f af0c 	bne.w	8104674 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810485e:	9300      	str	r3, [sp, #0]
 8104860:	69fb      	ldr	r3, [r7, #28]
 8104862:	2200      	movs	r2, #0
 8104864:	2108      	movs	r1, #8
 8104866:	68f8      	ldr	r0, [r7, #12]
 8104868:	f000 f8c3 	bl	81049f2 <SPI_WaitOnFlagUntilTimeout>
 810486c:	4603      	mov	r3, r0
 810486e:	2b00      	cmp	r3, #0
 8104870:	d007      	beq.n	8104882 <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8104872:	68fb      	ldr	r3, [r7, #12]
 8104874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104878:	f043 0220 	orr.w	r2, r3, #32
 810487c:	68fb      	ldr	r3, [r7, #12]
 810487e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104882:	68f8      	ldr	r0, [r7, #12]
 8104884:	f000 f815 	bl	81048b2 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104888:	68fb      	ldr	r3, [r7, #12]
 810488a:	2200      	movs	r2, #0
 810488c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104890:	68fb      	ldr	r3, [r7, #12]
 8104892:	2201      	movs	r2, #1
 8104894:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104898:	68fb      	ldr	r3, [r7, #12]
 810489a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810489e:	2b00      	cmp	r3, #0
 81048a0:	d001      	beq.n	81048a6 <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 81048a2:	2301      	movs	r3, #1
 81048a4:	e001      	b.n	81048aa <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 81048a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 81048aa:	4618      	mov	r0, r3
 81048ac:	3730      	adds	r7, #48	; 0x30
 81048ae:	46bd      	mov	sp, r7
 81048b0:	bd80      	pop	{r7, pc}

081048b2 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81048b2:	b480      	push	{r7}
 81048b4:	b085      	sub	sp, #20
 81048b6:	af00      	add	r7, sp, #0
 81048b8:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	681b      	ldr	r3, [r3, #0]
 81048be:	695b      	ldr	r3, [r3, #20]
 81048c0:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	681b      	ldr	r3, [r3, #0]
 81048c6:	699a      	ldr	r2, [r3, #24]
 81048c8:	687b      	ldr	r3, [r7, #4]
 81048ca:	681b      	ldr	r3, [r3, #0]
 81048cc:	f042 0208 	orr.w	r2, r2, #8
 81048d0:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81048d2:	687b      	ldr	r3, [r7, #4]
 81048d4:	681b      	ldr	r3, [r3, #0]
 81048d6:	699a      	ldr	r2, [r3, #24]
 81048d8:	687b      	ldr	r3, [r7, #4]
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	f042 0210 	orr.w	r2, r2, #16
 81048e0:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81048e2:	687b      	ldr	r3, [r7, #4]
 81048e4:	681b      	ldr	r3, [r3, #0]
 81048e6:	681a      	ldr	r2, [r3, #0]
 81048e8:	687b      	ldr	r3, [r7, #4]
 81048ea:	681b      	ldr	r3, [r3, #0]
 81048ec:	f022 0201 	bic.w	r2, r2, #1
 81048f0:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 81048f2:	687b      	ldr	r3, [r7, #4]
 81048f4:	681b      	ldr	r3, [r3, #0]
 81048f6:	691b      	ldr	r3, [r3, #16]
 81048f8:	687a      	ldr	r2, [r7, #4]
 81048fa:	6812      	ldr	r2, [r2, #0]
 81048fc:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8104900:	f023 0303 	bic.w	r3, r3, #3
 8104904:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8104906:	687b      	ldr	r3, [r7, #4]
 8104908:	681b      	ldr	r3, [r3, #0]
 810490a:	689a      	ldr	r2, [r3, #8]
 810490c:	687b      	ldr	r3, [r7, #4]
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104914:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810491c:	b2db      	uxtb	r3, r3
 810491e:	2b04      	cmp	r3, #4
 8104920:	d014      	beq.n	810494c <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8104922:	68fb      	ldr	r3, [r7, #12]
 8104924:	f003 0320 	and.w	r3, r3, #32
 8104928:	2b00      	cmp	r3, #0
 810492a:	d00f      	beq.n	810494c <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104932:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104936:	687b      	ldr	r3, [r7, #4]
 8104938:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 810493c:	687b      	ldr	r3, [r7, #4]
 810493e:	681b      	ldr	r3, [r3, #0]
 8104940:	699a      	ldr	r2, [r3, #24]
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	f042 0220 	orr.w	r2, r2, #32
 810494a:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104952:	b2db      	uxtb	r3, r3
 8104954:	2b03      	cmp	r3, #3
 8104956:	d014      	beq.n	8104982 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8104958:	68fb      	ldr	r3, [r7, #12]
 810495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810495e:	2b00      	cmp	r3, #0
 8104960:	d00f      	beq.n	8104982 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8104962:	687b      	ldr	r3, [r7, #4]
 8104964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104968:	f043 0204 	orr.w	r2, r3, #4
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8104972:	687b      	ldr	r3, [r7, #4]
 8104974:	681b      	ldr	r3, [r3, #0]
 8104976:	699a      	ldr	r2, [r3, #24]
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	681b      	ldr	r3, [r3, #0]
 810497c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8104980:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8104982:	68fb      	ldr	r3, [r7, #12]
 8104984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104988:	2b00      	cmp	r3, #0
 810498a:	d00f      	beq.n	81049ac <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810498c:	687b      	ldr	r3, [r7, #4]
 810498e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104992:	f043 0201 	orr.w	r2, r3, #1
 8104996:	687b      	ldr	r3, [r7, #4]
 8104998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810499c:	687b      	ldr	r3, [r7, #4]
 810499e:	681b      	ldr	r3, [r3, #0]
 81049a0:	699a      	ldr	r2, [r3, #24]
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	681b      	ldr	r3, [r3, #0]
 81049a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81049aa:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81049ac:	68fb      	ldr	r3, [r7, #12]
 81049ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81049b2:	2b00      	cmp	r3, #0
 81049b4:	d00f      	beq.n	81049d6 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81049b6:	687b      	ldr	r3, [r7, #4]
 81049b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81049bc:	f043 0208 	orr.w	r2, r3, #8
 81049c0:	687b      	ldr	r3, [r7, #4]
 81049c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	681b      	ldr	r3, [r3, #0]
 81049ca:	699a      	ldr	r2, [r3, #24]
 81049cc:	687b      	ldr	r3, [r7, #4]
 81049ce:	681b      	ldr	r3, [r3, #0]
 81049d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81049d4:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	2200      	movs	r2, #0
 81049da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	2200      	movs	r2, #0
 81049e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 81049e6:	bf00      	nop
 81049e8:	3714      	adds	r7, #20
 81049ea:	46bd      	mov	sp, r7
 81049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049f0:	4770      	bx	lr

081049f2 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 81049f2:	b580      	push	{r7, lr}
 81049f4:	b084      	sub	sp, #16
 81049f6:	af00      	add	r7, sp, #0
 81049f8:	60f8      	str	r0, [r7, #12]
 81049fa:	60b9      	str	r1, [r7, #8]
 81049fc:	603b      	str	r3, [r7, #0]
 81049fe:	4613      	mov	r3, r2
 8104a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104a02:	e010      	b.n	8104a26 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104a04:	f7fc fe7c 	bl	8101700 <HAL_GetTick>
 8104a08:	4602      	mov	r2, r0
 8104a0a:	683b      	ldr	r3, [r7, #0]
 8104a0c:	1ad3      	subs	r3, r2, r3
 8104a0e:	69ba      	ldr	r2, [r7, #24]
 8104a10:	429a      	cmp	r2, r3
 8104a12:	d803      	bhi.n	8104a1c <SPI_WaitOnFlagUntilTimeout+0x2a>
 8104a14:	69bb      	ldr	r3, [r7, #24]
 8104a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104a1a:	d102      	bne.n	8104a22 <SPI_WaitOnFlagUntilTimeout+0x30>
 8104a1c:	69bb      	ldr	r3, [r7, #24]
 8104a1e:	2b00      	cmp	r3, #0
 8104a20:	d101      	bne.n	8104a26 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8104a22:	2303      	movs	r3, #3
 8104a24:	e00f      	b.n	8104a46 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104a26:	68fb      	ldr	r3, [r7, #12]
 8104a28:	681b      	ldr	r3, [r3, #0]
 8104a2a:	695a      	ldr	r2, [r3, #20]
 8104a2c:	68bb      	ldr	r3, [r7, #8]
 8104a2e:	4013      	ands	r3, r2
 8104a30:	68ba      	ldr	r2, [r7, #8]
 8104a32:	429a      	cmp	r2, r3
 8104a34:	bf0c      	ite	eq
 8104a36:	2301      	moveq	r3, #1
 8104a38:	2300      	movne	r3, #0
 8104a3a:	b2db      	uxtb	r3, r3
 8104a3c:	461a      	mov	r2, r3
 8104a3e:	79fb      	ldrb	r3, [r7, #7]
 8104a40:	429a      	cmp	r2, r3
 8104a42:	d0df      	beq.n	8104a04 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8104a44:	2300      	movs	r3, #0
}
 8104a46:	4618      	mov	r0, r3
 8104a48:	3710      	adds	r7, #16
 8104a4a:	46bd      	mov	sp, r7
 8104a4c:	bd80      	pop	{r7, pc}

08104a4e <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8104a4e:	b480      	push	{r7}
 8104a50:	b085      	sub	sp, #20
 8104a52:	af00      	add	r7, sp, #0
 8104a54:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104a56:	687b      	ldr	r3, [r7, #4]
 8104a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104a5a:	095b      	lsrs	r3, r3, #5
 8104a5c:	3301      	adds	r3, #1
 8104a5e:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8104a60:	687b      	ldr	r3, [r7, #4]
 8104a62:	68db      	ldr	r3, [r3, #12]
 8104a64:	3301      	adds	r3, #1
 8104a66:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8104a68:	68bb      	ldr	r3, [r7, #8]
 8104a6a:	3307      	adds	r3, #7
 8104a6c:	08db      	lsrs	r3, r3, #3
 8104a6e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8104a70:	68bb      	ldr	r3, [r7, #8]
 8104a72:	68fa      	ldr	r2, [r7, #12]
 8104a74:	fb02 f303 	mul.w	r3, r2, r3
}
 8104a78:	4618      	mov	r0, r3
 8104a7a:	3714      	adds	r7, #20
 8104a7c:	46bd      	mov	sp, r7
 8104a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a82:	4770      	bx	lr

08104a84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104a84:	b580      	push	{r7, lr}
 8104a86:	b082      	sub	sp, #8
 8104a88:	af00      	add	r7, sp, #0
 8104a8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	2b00      	cmp	r3, #0
 8104a90:	d101      	bne.n	8104a96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8104a92:	2301      	movs	r3, #1
 8104a94:	e042      	b.n	8104b1c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104a9c:	2b00      	cmp	r3, #0
 8104a9e:	d106      	bne.n	8104aae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	2200      	movs	r2, #0
 8104aa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104aa8:	6878      	ldr	r0, [r7, #4]
 8104aaa:	f7fc fc17 	bl	81012dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	2224      	movs	r2, #36	; 0x24
 8104ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8104ab6:	687b      	ldr	r3, [r7, #4]
 8104ab8:	681b      	ldr	r3, [r3, #0]
 8104aba:	681a      	ldr	r2, [r3, #0]
 8104abc:	687b      	ldr	r3, [r7, #4]
 8104abe:	681b      	ldr	r3, [r3, #0]
 8104ac0:	f022 0201 	bic.w	r2, r2, #1
 8104ac4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8104ac6:	6878      	ldr	r0, [r7, #4]
 8104ac8:	f000 f8c2 	bl	8104c50 <UART_SetConfig>
 8104acc:	4603      	mov	r3, r0
 8104ace:	2b01      	cmp	r3, #1
 8104ad0:	d101      	bne.n	8104ad6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8104ad2:	2301      	movs	r3, #1
 8104ad4:	e022      	b.n	8104b1c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ada:	2b00      	cmp	r3, #0
 8104adc:	d002      	beq.n	8104ae4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8104ade:	6878      	ldr	r0, [r7, #4]
 8104ae0:	f000 fe16 	bl	8105710 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	681b      	ldr	r3, [r3, #0]
 8104ae8:	685a      	ldr	r2, [r3, #4]
 8104aea:	687b      	ldr	r3, [r7, #4]
 8104aec:	681b      	ldr	r3, [r3, #0]
 8104aee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8104af2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8104af4:	687b      	ldr	r3, [r7, #4]
 8104af6:	681b      	ldr	r3, [r3, #0]
 8104af8:	689a      	ldr	r2, [r3, #8]
 8104afa:	687b      	ldr	r3, [r7, #4]
 8104afc:	681b      	ldr	r3, [r3, #0]
 8104afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8104b02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8104b04:	687b      	ldr	r3, [r7, #4]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	681a      	ldr	r2, [r3, #0]
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	f042 0201 	orr.w	r2, r2, #1
 8104b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104b14:	6878      	ldr	r0, [r7, #4]
 8104b16:	f000 fe9d 	bl	8105854 <UART_CheckIdleState>
 8104b1a:	4603      	mov	r3, r0
}
 8104b1c:	4618      	mov	r0, r3
 8104b1e:	3708      	adds	r7, #8
 8104b20:	46bd      	mov	sp, r7
 8104b22:	bd80      	pop	{r7, pc}

08104b24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104b24:	b580      	push	{r7, lr}
 8104b26:	b08a      	sub	sp, #40	; 0x28
 8104b28:	af02      	add	r7, sp, #8
 8104b2a:	60f8      	str	r0, [r7, #12]
 8104b2c:	60b9      	str	r1, [r7, #8]
 8104b2e:	603b      	str	r3, [r7, #0]
 8104b30:	4613      	mov	r3, r2
 8104b32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104b34:	68fb      	ldr	r3, [r7, #12]
 8104b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104b3a:	2b20      	cmp	r3, #32
 8104b3c:	f040 8083 	bne.w	8104c46 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8104b40:	68bb      	ldr	r3, [r7, #8]
 8104b42:	2b00      	cmp	r3, #0
 8104b44:	d002      	beq.n	8104b4c <HAL_UART_Transmit+0x28>
 8104b46:	88fb      	ldrh	r3, [r7, #6]
 8104b48:	2b00      	cmp	r3, #0
 8104b4a:	d101      	bne.n	8104b50 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8104b4c:	2301      	movs	r3, #1
 8104b4e:	e07b      	b.n	8104c48 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8104b50:	68fb      	ldr	r3, [r7, #12]
 8104b52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104b56:	2b01      	cmp	r3, #1
 8104b58:	d101      	bne.n	8104b5e <HAL_UART_Transmit+0x3a>
 8104b5a:	2302      	movs	r3, #2
 8104b5c:	e074      	b.n	8104c48 <HAL_UART_Transmit+0x124>
 8104b5e:	68fb      	ldr	r3, [r7, #12]
 8104b60:	2201      	movs	r2, #1
 8104b62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104b66:	68fb      	ldr	r3, [r7, #12]
 8104b68:	2200      	movs	r2, #0
 8104b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8104b6e:	68fb      	ldr	r3, [r7, #12]
 8104b70:	2221      	movs	r2, #33	; 0x21
 8104b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104b76:	f7fc fdc3 	bl	8101700 <HAL_GetTick>
 8104b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104b7c:	68fb      	ldr	r3, [r7, #12]
 8104b7e:	88fa      	ldrh	r2, [r7, #6]
 8104b80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104b84:	68fb      	ldr	r3, [r7, #12]
 8104b86:	88fa      	ldrh	r2, [r7, #6]
 8104b88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104b8c:	68fb      	ldr	r3, [r7, #12]
 8104b8e:	689b      	ldr	r3, [r3, #8]
 8104b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104b94:	d108      	bne.n	8104ba8 <HAL_UART_Transmit+0x84>
 8104b96:	68fb      	ldr	r3, [r7, #12]
 8104b98:	691b      	ldr	r3, [r3, #16]
 8104b9a:	2b00      	cmp	r3, #0
 8104b9c:	d104      	bne.n	8104ba8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8104b9e:	2300      	movs	r3, #0
 8104ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8104ba2:	68bb      	ldr	r3, [r7, #8]
 8104ba4:	61bb      	str	r3, [r7, #24]
 8104ba6:	e003      	b.n	8104bb0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104ba8:	68bb      	ldr	r3, [r7, #8]
 8104baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104bac:	2300      	movs	r3, #0
 8104bae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8104bb0:	68fb      	ldr	r3, [r7, #12]
 8104bb2:	2200      	movs	r2, #0
 8104bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8104bb8:	e02c      	b.n	8104c14 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8104bba:	683b      	ldr	r3, [r7, #0]
 8104bbc:	9300      	str	r3, [sp, #0]
 8104bbe:	697b      	ldr	r3, [r7, #20]
 8104bc0:	2200      	movs	r2, #0
 8104bc2:	2180      	movs	r1, #128	; 0x80
 8104bc4:	68f8      	ldr	r0, [r7, #12]
 8104bc6:	f000 fe90 	bl	81058ea <UART_WaitOnFlagUntilTimeout>
 8104bca:	4603      	mov	r3, r0
 8104bcc:	2b00      	cmp	r3, #0
 8104bce:	d001      	beq.n	8104bd4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8104bd0:	2303      	movs	r3, #3
 8104bd2:	e039      	b.n	8104c48 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8104bd4:	69fb      	ldr	r3, [r7, #28]
 8104bd6:	2b00      	cmp	r3, #0
 8104bd8:	d10b      	bne.n	8104bf2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104bda:	69bb      	ldr	r3, [r7, #24]
 8104bdc:	881b      	ldrh	r3, [r3, #0]
 8104bde:	461a      	mov	r2, r3
 8104be0:	68fb      	ldr	r3, [r7, #12]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104be8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8104bea:	69bb      	ldr	r3, [r7, #24]
 8104bec:	3302      	adds	r3, #2
 8104bee:	61bb      	str	r3, [r7, #24]
 8104bf0:	e007      	b.n	8104c02 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104bf2:	69fb      	ldr	r3, [r7, #28]
 8104bf4:	781a      	ldrb	r2, [r3, #0]
 8104bf6:	68fb      	ldr	r3, [r7, #12]
 8104bf8:	681b      	ldr	r3, [r3, #0]
 8104bfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8104bfc:	69fb      	ldr	r3, [r7, #28]
 8104bfe:	3301      	adds	r3, #1
 8104c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104c08:	b29b      	uxth	r3, r3
 8104c0a:	3b01      	subs	r3, #1
 8104c0c:	b29a      	uxth	r2, r3
 8104c0e:	68fb      	ldr	r3, [r7, #12]
 8104c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8104c14:	68fb      	ldr	r3, [r7, #12]
 8104c16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104c1a:	b29b      	uxth	r3, r3
 8104c1c:	2b00      	cmp	r3, #0
 8104c1e:	d1cc      	bne.n	8104bba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104c20:	683b      	ldr	r3, [r7, #0]
 8104c22:	9300      	str	r3, [sp, #0]
 8104c24:	697b      	ldr	r3, [r7, #20]
 8104c26:	2200      	movs	r2, #0
 8104c28:	2140      	movs	r1, #64	; 0x40
 8104c2a:	68f8      	ldr	r0, [r7, #12]
 8104c2c:	f000 fe5d 	bl	81058ea <UART_WaitOnFlagUntilTimeout>
 8104c30:	4603      	mov	r3, r0
 8104c32:	2b00      	cmp	r3, #0
 8104c34:	d001      	beq.n	8104c3a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8104c36:	2303      	movs	r3, #3
 8104c38:	e006      	b.n	8104c48 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104c3a:	68fb      	ldr	r3, [r7, #12]
 8104c3c:	2220      	movs	r2, #32
 8104c3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8104c42:	2300      	movs	r3, #0
 8104c44:	e000      	b.n	8104c48 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8104c46:	2302      	movs	r3, #2
  }
}
 8104c48:	4618      	mov	r0, r3
 8104c4a:	3720      	adds	r7, #32
 8104c4c:	46bd      	mov	sp, r7
 8104c4e:	bd80      	pop	{r7, pc}

08104c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104c50:	b5b0      	push	{r4, r5, r7, lr}
 8104c52:	b08e      	sub	sp, #56	; 0x38
 8104c54:	af00      	add	r7, sp, #0
 8104c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104c58:	2300      	movs	r3, #0
 8104c5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104c5e:	687b      	ldr	r3, [r7, #4]
 8104c60:	689a      	ldr	r2, [r3, #8]
 8104c62:	687b      	ldr	r3, [r7, #4]
 8104c64:	691b      	ldr	r3, [r3, #16]
 8104c66:	431a      	orrs	r2, r3
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	695b      	ldr	r3, [r3, #20]
 8104c6c:	431a      	orrs	r2, r3
 8104c6e:	687b      	ldr	r3, [r7, #4]
 8104c70:	69db      	ldr	r3, [r3, #28]
 8104c72:	4313      	orrs	r3, r2
 8104c74:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	681a      	ldr	r2, [r3, #0]
 8104c7c:	4bc0      	ldr	r3, [pc, #768]	; (8104f80 <UART_SetConfig+0x330>)
 8104c7e:	4013      	ands	r3, r2
 8104c80:	687a      	ldr	r2, [r7, #4]
 8104c82:	6812      	ldr	r2, [r2, #0]
 8104c84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104c86:	430b      	orrs	r3, r1
 8104c88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	681b      	ldr	r3, [r3, #0]
 8104c8e:	685b      	ldr	r3, [r3, #4]
 8104c90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104c94:	687b      	ldr	r3, [r7, #4]
 8104c96:	68da      	ldr	r2, [r3, #12]
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	681b      	ldr	r3, [r3, #0]
 8104c9c:	430a      	orrs	r2, r1
 8104c9e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	699b      	ldr	r3, [r3, #24]
 8104ca4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	4ab6      	ldr	r2, [pc, #728]	; (8104f84 <UART_SetConfig+0x334>)
 8104cac:	4293      	cmp	r3, r2
 8104cae:	d004      	beq.n	8104cba <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	6a1b      	ldr	r3, [r3, #32]
 8104cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104cb6:	4313      	orrs	r3, r2
 8104cb8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	689b      	ldr	r3, [r3, #8]
 8104cc0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104cc4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104cc8:	687a      	ldr	r2, [r7, #4]
 8104cca:	6812      	ldr	r2, [r2, #0]
 8104ccc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104cce:	430b      	orrs	r3, r1
 8104cd0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104cd2:	687b      	ldr	r3, [r7, #4]
 8104cd4:	681b      	ldr	r3, [r3, #0]
 8104cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104cd8:	f023 010f 	bic.w	r1, r3, #15
 8104cdc:	687b      	ldr	r3, [r7, #4]
 8104cde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104ce0:	687b      	ldr	r3, [r7, #4]
 8104ce2:	681b      	ldr	r3, [r3, #0]
 8104ce4:	430a      	orrs	r2, r1
 8104ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	681b      	ldr	r3, [r3, #0]
 8104cec:	4aa6      	ldr	r2, [pc, #664]	; (8104f88 <UART_SetConfig+0x338>)
 8104cee:	4293      	cmp	r3, r2
 8104cf0:	d176      	bne.n	8104de0 <UART_SetConfig+0x190>
 8104cf2:	4ba6      	ldr	r3, [pc, #664]	; (8104f8c <UART_SetConfig+0x33c>)
 8104cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104cfa:	2b28      	cmp	r3, #40	; 0x28
 8104cfc:	d86c      	bhi.n	8104dd8 <UART_SetConfig+0x188>
 8104cfe:	a201      	add	r2, pc, #4	; (adr r2, 8104d04 <UART_SetConfig+0xb4>)
 8104d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d04:	08104da9 	.word	0x08104da9
 8104d08:	08104dd9 	.word	0x08104dd9
 8104d0c:	08104dd9 	.word	0x08104dd9
 8104d10:	08104dd9 	.word	0x08104dd9
 8104d14:	08104dd9 	.word	0x08104dd9
 8104d18:	08104dd9 	.word	0x08104dd9
 8104d1c:	08104dd9 	.word	0x08104dd9
 8104d20:	08104dd9 	.word	0x08104dd9
 8104d24:	08104db1 	.word	0x08104db1
 8104d28:	08104dd9 	.word	0x08104dd9
 8104d2c:	08104dd9 	.word	0x08104dd9
 8104d30:	08104dd9 	.word	0x08104dd9
 8104d34:	08104dd9 	.word	0x08104dd9
 8104d38:	08104dd9 	.word	0x08104dd9
 8104d3c:	08104dd9 	.word	0x08104dd9
 8104d40:	08104dd9 	.word	0x08104dd9
 8104d44:	08104db9 	.word	0x08104db9
 8104d48:	08104dd9 	.word	0x08104dd9
 8104d4c:	08104dd9 	.word	0x08104dd9
 8104d50:	08104dd9 	.word	0x08104dd9
 8104d54:	08104dd9 	.word	0x08104dd9
 8104d58:	08104dd9 	.word	0x08104dd9
 8104d5c:	08104dd9 	.word	0x08104dd9
 8104d60:	08104dd9 	.word	0x08104dd9
 8104d64:	08104dc1 	.word	0x08104dc1
 8104d68:	08104dd9 	.word	0x08104dd9
 8104d6c:	08104dd9 	.word	0x08104dd9
 8104d70:	08104dd9 	.word	0x08104dd9
 8104d74:	08104dd9 	.word	0x08104dd9
 8104d78:	08104dd9 	.word	0x08104dd9
 8104d7c:	08104dd9 	.word	0x08104dd9
 8104d80:	08104dd9 	.word	0x08104dd9
 8104d84:	08104dc9 	.word	0x08104dc9
 8104d88:	08104dd9 	.word	0x08104dd9
 8104d8c:	08104dd9 	.word	0x08104dd9
 8104d90:	08104dd9 	.word	0x08104dd9
 8104d94:	08104dd9 	.word	0x08104dd9
 8104d98:	08104dd9 	.word	0x08104dd9
 8104d9c:	08104dd9 	.word	0x08104dd9
 8104da0:	08104dd9 	.word	0x08104dd9
 8104da4:	08104dd1 	.word	0x08104dd1
 8104da8:	2301      	movs	r3, #1
 8104daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dae:	e220      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104db0:	2304      	movs	r3, #4
 8104db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104db6:	e21c      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104db8:	2308      	movs	r3, #8
 8104dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dbe:	e218      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104dc0:	2310      	movs	r3, #16
 8104dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dc6:	e214      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104dc8:	2320      	movs	r3, #32
 8104dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dce:	e210      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104dd0:	2340      	movs	r3, #64	; 0x40
 8104dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dd6:	e20c      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104dd8:	2380      	movs	r3, #128	; 0x80
 8104dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dde:	e208      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104de0:	687b      	ldr	r3, [r7, #4]
 8104de2:	681b      	ldr	r3, [r3, #0]
 8104de4:	4a6a      	ldr	r2, [pc, #424]	; (8104f90 <UART_SetConfig+0x340>)
 8104de6:	4293      	cmp	r3, r2
 8104de8:	d130      	bne.n	8104e4c <UART_SetConfig+0x1fc>
 8104dea:	4b68      	ldr	r3, [pc, #416]	; (8104f8c <UART_SetConfig+0x33c>)
 8104dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104dee:	f003 0307 	and.w	r3, r3, #7
 8104df2:	2b05      	cmp	r3, #5
 8104df4:	d826      	bhi.n	8104e44 <UART_SetConfig+0x1f4>
 8104df6:	a201      	add	r2, pc, #4	; (adr r2, 8104dfc <UART_SetConfig+0x1ac>)
 8104df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dfc:	08104e15 	.word	0x08104e15
 8104e00:	08104e1d 	.word	0x08104e1d
 8104e04:	08104e25 	.word	0x08104e25
 8104e08:	08104e2d 	.word	0x08104e2d
 8104e0c:	08104e35 	.word	0x08104e35
 8104e10:	08104e3d 	.word	0x08104e3d
 8104e14:	2300      	movs	r3, #0
 8104e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e1a:	e1ea      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e1c:	2304      	movs	r3, #4
 8104e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e22:	e1e6      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e24:	2308      	movs	r3, #8
 8104e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e2a:	e1e2      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e2c:	2310      	movs	r3, #16
 8104e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e32:	e1de      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e34:	2320      	movs	r3, #32
 8104e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e3a:	e1da      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e3c:	2340      	movs	r3, #64	; 0x40
 8104e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e42:	e1d6      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e44:	2380      	movs	r3, #128	; 0x80
 8104e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e4a:	e1d2      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e4c:	687b      	ldr	r3, [r7, #4]
 8104e4e:	681b      	ldr	r3, [r3, #0]
 8104e50:	4a50      	ldr	r2, [pc, #320]	; (8104f94 <UART_SetConfig+0x344>)
 8104e52:	4293      	cmp	r3, r2
 8104e54:	d130      	bne.n	8104eb8 <UART_SetConfig+0x268>
 8104e56:	4b4d      	ldr	r3, [pc, #308]	; (8104f8c <UART_SetConfig+0x33c>)
 8104e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e5a:	f003 0307 	and.w	r3, r3, #7
 8104e5e:	2b05      	cmp	r3, #5
 8104e60:	d826      	bhi.n	8104eb0 <UART_SetConfig+0x260>
 8104e62:	a201      	add	r2, pc, #4	; (adr r2, 8104e68 <UART_SetConfig+0x218>)
 8104e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e68:	08104e81 	.word	0x08104e81
 8104e6c:	08104e89 	.word	0x08104e89
 8104e70:	08104e91 	.word	0x08104e91
 8104e74:	08104e99 	.word	0x08104e99
 8104e78:	08104ea1 	.word	0x08104ea1
 8104e7c:	08104ea9 	.word	0x08104ea9
 8104e80:	2300      	movs	r3, #0
 8104e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e86:	e1b4      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e88:	2304      	movs	r3, #4
 8104e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e8e:	e1b0      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e90:	2308      	movs	r3, #8
 8104e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e96:	e1ac      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104e98:	2310      	movs	r3, #16
 8104e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e9e:	e1a8      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104ea0:	2320      	movs	r3, #32
 8104ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ea6:	e1a4      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104ea8:	2340      	movs	r3, #64	; 0x40
 8104eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104eae:	e1a0      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104eb0:	2380      	movs	r3, #128	; 0x80
 8104eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104eb6:	e19c      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	4a36      	ldr	r2, [pc, #216]	; (8104f98 <UART_SetConfig+0x348>)
 8104ebe:	4293      	cmp	r3, r2
 8104ec0:	d130      	bne.n	8104f24 <UART_SetConfig+0x2d4>
 8104ec2:	4b32      	ldr	r3, [pc, #200]	; (8104f8c <UART_SetConfig+0x33c>)
 8104ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104ec6:	f003 0307 	and.w	r3, r3, #7
 8104eca:	2b05      	cmp	r3, #5
 8104ecc:	d826      	bhi.n	8104f1c <UART_SetConfig+0x2cc>
 8104ece:	a201      	add	r2, pc, #4	; (adr r2, 8104ed4 <UART_SetConfig+0x284>)
 8104ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ed4:	08104eed 	.word	0x08104eed
 8104ed8:	08104ef5 	.word	0x08104ef5
 8104edc:	08104efd 	.word	0x08104efd
 8104ee0:	08104f05 	.word	0x08104f05
 8104ee4:	08104f0d 	.word	0x08104f0d
 8104ee8:	08104f15 	.word	0x08104f15
 8104eec:	2300      	movs	r3, #0
 8104eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ef2:	e17e      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104ef4:	2304      	movs	r3, #4
 8104ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104efa:	e17a      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104efc:	2308      	movs	r3, #8
 8104efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f02:	e176      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f04:	2310      	movs	r3, #16
 8104f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f0a:	e172      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f0c:	2320      	movs	r3, #32
 8104f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f12:	e16e      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f14:	2340      	movs	r3, #64	; 0x40
 8104f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f1a:	e16a      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f1c:	2380      	movs	r3, #128	; 0x80
 8104f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f22:	e166      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	681b      	ldr	r3, [r3, #0]
 8104f28:	4a1c      	ldr	r2, [pc, #112]	; (8104f9c <UART_SetConfig+0x34c>)
 8104f2a:	4293      	cmp	r3, r2
 8104f2c:	d140      	bne.n	8104fb0 <UART_SetConfig+0x360>
 8104f2e:	4b17      	ldr	r3, [pc, #92]	; (8104f8c <UART_SetConfig+0x33c>)
 8104f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104f32:	f003 0307 	and.w	r3, r3, #7
 8104f36:	2b05      	cmp	r3, #5
 8104f38:	d836      	bhi.n	8104fa8 <UART_SetConfig+0x358>
 8104f3a:	a201      	add	r2, pc, #4	; (adr r2, 8104f40 <UART_SetConfig+0x2f0>)
 8104f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f40:	08104f59 	.word	0x08104f59
 8104f44:	08104f61 	.word	0x08104f61
 8104f48:	08104f69 	.word	0x08104f69
 8104f4c:	08104f71 	.word	0x08104f71
 8104f50:	08104f79 	.word	0x08104f79
 8104f54:	08104fa1 	.word	0x08104fa1
 8104f58:	2300      	movs	r3, #0
 8104f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f5e:	e148      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f60:	2304      	movs	r3, #4
 8104f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f66:	e144      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f68:	2308      	movs	r3, #8
 8104f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f6e:	e140      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f70:	2310      	movs	r3, #16
 8104f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f76:	e13c      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f78:	2320      	movs	r3, #32
 8104f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f7e:	e138      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104f80:	cfff69f3 	.word	0xcfff69f3
 8104f84:	58000c00 	.word	0x58000c00
 8104f88:	40011000 	.word	0x40011000
 8104f8c:	58024400 	.word	0x58024400
 8104f90:	40004400 	.word	0x40004400
 8104f94:	40004800 	.word	0x40004800
 8104f98:	40004c00 	.word	0x40004c00
 8104f9c:	40005000 	.word	0x40005000
 8104fa0:	2340      	movs	r3, #64	; 0x40
 8104fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fa6:	e124      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104fa8:	2380      	movs	r3, #128	; 0x80
 8104faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fae:	e120      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	4acc      	ldr	r2, [pc, #816]	; (81052e8 <UART_SetConfig+0x698>)
 8104fb6:	4293      	cmp	r3, r2
 8104fb8:	d176      	bne.n	81050a8 <UART_SetConfig+0x458>
 8104fba:	4bcc      	ldr	r3, [pc, #816]	; (81052ec <UART_SetConfig+0x69c>)
 8104fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104fbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104fc2:	2b28      	cmp	r3, #40	; 0x28
 8104fc4:	d86c      	bhi.n	81050a0 <UART_SetConfig+0x450>
 8104fc6:	a201      	add	r2, pc, #4	; (adr r2, 8104fcc <UART_SetConfig+0x37c>)
 8104fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104fcc:	08105071 	.word	0x08105071
 8104fd0:	081050a1 	.word	0x081050a1
 8104fd4:	081050a1 	.word	0x081050a1
 8104fd8:	081050a1 	.word	0x081050a1
 8104fdc:	081050a1 	.word	0x081050a1
 8104fe0:	081050a1 	.word	0x081050a1
 8104fe4:	081050a1 	.word	0x081050a1
 8104fe8:	081050a1 	.word	0x081050a1
 8104fec:	08105079 	.word	0x08105079
 8104ff0:	081050a1 	.word	0x081050a1
 8104ff4:	081050a1 	.word	0x081050a1
 8104ff8:	081050a1 	.word	0x081050a1
 8104ffc:	081050a1 	.word	0x081050a1
 8105000:	081050a1 	.word	0x081050a1
 8105004:	081050a1 	.word	0x081050a1
 8105008:	081050a1 	.word	0x081050a1
 810500c:	08105081 	.word	0x08105081
 8105010:	081050a1 	.word	0x081050a1
 8105014:	081050a1 	.word	0x081050a1
 8105018:	081050a1 	.word	0x081050a1
 810501c:	081050a1 	.word	0x081050a1
 8105020:	081050a1 	.word	0x081050a1
 8105024:	081050a1 	.word	0x081050a1
 8105028:	081050a1 	.word	0x081050a1
 810502c:	08105089 	.word	0x08105089
 8105030:	081050a1 	.word	0x081050a1
 8105034:	081050a1 	.word	0x081050a1
 8105038:	081050a1 	.word	0x081050a1
 810503c:	081050a1 	.word	0x081050a1
 8105040:	081050a1 	.word	0x081050a1
 8105044:	081050a1 	.word	0x081050a1
 8105048:	081050a1 	.word	0x081050a1
 810504c:	08105091 	.word	0x08105091
 8105050:	081050a1 	.word	0x081050a1
 8105054:	081050a1 	.word	0x081050a1
 8105058:	081050a1 	.word	0x081050a1
 810505c:	081050a1 	.word	0x081050a1
 8105060:	081050a1 	.word	0x081050a1
 8105064:	081050a1 	.word	0x081050a1
 8105068:	081050a1 	.word	0x081050a1
 810506c:	08105099 	.word	0x08105099
 8105070:	2301      	movs	r3, #1
 8105072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105076:	e0bc      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105078:	2304      	movs	r3, #4
 810507a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810507e:	e0b8      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105080:	2308      	movs	r3, #8
 8105082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105086:	e0b4      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105088:	2310      	movs	r3, #16
 810508a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810508e:	e0b0      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105090:	2320      	movs	r3, #32
 8105092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105096:	e0ac      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105098:	2340      	movs	r3, #64	; 0x40
 810509a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810509e:	e0a8      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81050a0:	2380      	movs	r3, #128	; 0x80
 81050a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050a6:	e0a4      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	681b      	ldr	r3, [r3, #0]
 81050ac:	4a90      	ldr	r2, [pc, #576]	; (81052f0 <UART_SetConfig+0x6a0>)
 81050ae:	4293      	cmp	r3, r2
 81050b0:	d130      	bne.n	8105114 <UART_SetConfig+0x4c4>
 81050b2:	4b8e      	ldr	r3, [pc, #568]	; (81052ec <UART_SetConfig+0x69c>)
 81050b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81050b6:	f003 0307 	and.w	r3, r3, #7
 81050ba:	2b05      	cmp	r3, #5
 81050bc:	d826      	bhi.n	810510c <UART_SetConfig+0x4bc>
 81050be:	a201      	add	r2, pc, #4	; (adr r2, 81050c4 <UART_SetConfig+0x474>)
 81050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050c4:	081050dd 	.word	0x081050dd
 81050c8:	081050e5 	.word	0x081050e5
 81050cc:	081050ed 	.word	0x081050ed
 81050d0:	081050f5 	.word	0x081050f5
 81050d4:	081050fd 	.word	0x081050fd
 81050d8:	08105105 	.word	0x08105105
 81050dc:	2300      	movs	r3, #0
 81050de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050e2:	e086      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81050e4:	2304      	movs	r3, #4
 81050e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ea:	e082      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81050ec:	2308      	movs	r3, #8
 81050ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050f2:	e07e      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81050f4:	2310      	movs	r3, #16
 81050f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050fa:	e07a      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81050fc:	2320      	movs	r3, #32
 81050fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105102:	e076      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105104:	2340      	movs	r3, #64	; 0x40
 8105106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810510a:	e072      	b.n	81051f2 <UART_SetConfig+0x5a2>
 810510c:	2380      	movs	r3, #128	; 0x80
 810510e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105112:	e06e      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	681b      	ldr	r3, [r3, #0]
 8105118:	4a76      	ldr	r2, [pc, #472]	; (81052f4 <UART_SetConfig+0x6a4>)
 810511a:	4293      	cmp	r3, r2
 810511c:	d130      	bne.n	8105180 <UART_SetConfig+0x530>
 810511e:	4b73      	ldr	r3, [pc, #460]	; (81052ec <UART_SetConfig+0x69c>)
 8105120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105122:	f003 0307 	and.w	r3, r3, #7
 8105126:	2b05      	cmp	r3, #5
 8105128:	d826      	bhi.n	8105178 <UART_SetConfig+0x528>
 810512a:	a201      	add	r2, pc, #4	; (adr r2, 8105130 <UART_SetConfig+0x4e0>)
 810512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105130:	08105149 	.word	0x08105149
 8105134:	08105151 	.word	0x08105151
 8105138:	08105159 	.word	0x08105159
 810513c:	08105161 	.word	0x08105161
 8105140:	08105169 	.word	0x08105169
 8105144:	08105171 	.word	0x08105171
 8105148:	2300      	movs	r3, #0
 810514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810514e:	e050      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105150:	2304      	movs	r3, #4
 8105152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105156:	e04c      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105158:	2308      	movs	r3, #8
 810515a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810515e:	e048      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105160:	2310      	movs	r3, #16
 8105162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105166:	e044      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105168:	2320      	movs	r3, #32
 810516a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810516e:	e040      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105170:	2340      	movs	r3, #64	; 0x40
 8105172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105176:	e03c      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105178:	2380      	movs	r3, #128	; 0x80
 810517a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810517e:	e038      	b.n	81051f2 <UART_SetConfig+0x5a2>
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	681b      	ldr	r3, [r3, #0]
 8105184:	4a5c      	ldr	r2, [pc, #368]	; (81052f8 <UART_SetConfig+0x6a8>)
 8105186:	4293      	cmp	r3, r2
 8105188:	d130      	bne.n	81051ec <UART_SetConfig+0x59c>
 810518a:	4b58      	ldr	r3, [pc, #352]	; (81052ec <UART_SetConfig+0x69c>)
 810518c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810518e:	f003 0307 	and.w	r3, r3, #7
 8105192:	2b05      	cmp	r3, #5
 8105194:	d826      	bhi.n	81051e4 <UART_SetConfig+0x594>
 8105196:	a201      	add	r2, pc, #4	; (adr r2, 810519c <UART_SetConfig+0x54c>)
 8105198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810519c:	081051b5 	.word	0x081051b5
 81051a0:	081051bd 	.word	0x081051bd
 81051a4:	081051c5 	.word	0x081051c5
 81051a8:	081051cd 	.word	0x081051cd
 81051ac:	081051d5 	.word	0x081051d5
 81051b0:	081051dd 	.word	0x081051dd
 81051b4:	2302      	movs	r3, #2
 81051b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ba:	e01a      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81051bc:	2304      	movs	r3, #4
 81051be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051c2:	e016      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81051c4:	2308      	movs	r3, #8
 81051c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ca:	e012      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81051cc:	2310      	movs	r3, #16
 81051ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051d2:	e00e      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81051d4:	2320      	movs	r3, #32
 81051d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051da:	e00a      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81051dc:	2340      	movs	r3, #64	; 0x40
 81051de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051e2:	e006      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81051e4:	2380      	movs	r3, #128	; 0x80
 81051e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81051ea:	e002      	b.n	81051f2 <UART_SetConfig+0x5a2>
 81051ec:	2380      	movs	r3, #128	; 0x80
 81051ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	681b      	ldr	r3, [r3, #0]
 81051f6:	4a40      	ldr	r2, [pc, #256]	; (81052f8 <UART_SetConfig+0x6a8>)
 81051f8:	4293      	cmp	r3, r2
 81051fa:	f040 80ef 	bne.w	81053dc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81051fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105202:	2b20      	cmp	r3, #32
 8105204:	dc46      	bgt.n	8105294 <UART_SetConfig+0x644>
 8105206:	2b02      	cmp	r3, #2
 8105208:	f2c0 8081 	blt.w	810530e <UART_SetConfig+0x6be>
 810520c:	3b02      	subs	r3, #2
 810520e:	2b1e      	cmp	r3, #30
 8105210:	d87d      	bhi.n	810530e <UART_SetConfig+0x6be>
 8105212:	a201      	add	r2, pc, #4	; (adr r2, 8105218 <UART_SetConfig+0x5c8>)
 8105214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105218:	0810529b 	.word	0x0810529b
 810521c:	0810530f 	.word	0x0810530f
 8105220:	081052a3 	.word	0x081052a3
 8105224:	0810530f 	.word	0x0810530f
 8105228:	0810530f 	.word	0x0810530f
 810522c:	0810530f 	.word	0x0810530f
 8105230:	081052b3 	.word	0x081052b3
 8105234:	0810530f 	.word	0x0810530f
 8105238:	0810530f 	.word	0x0810530f
 810523c:	0810530f 	.word	0x0810530f
 8105240:	0810530f 	.word	0x0810530f
 8105244:	0810530f 	.word	0x0810530f
 8105248:	0810530f 	.word	0x0810530f
 810524c:	0810530f 	.word	0x0810530f
 8105250:	081052c3 	.word	0x081052c3
 8105254:	0810530f 	.word	0x0810530f
 8105258:	0810530f 	.word	0x0810530f
 810525c:	0810530f 	.word	0x0810530f
 8105260:	0810530f 	.word	0x0810530f
 8105264:	0810530f 	.word	0x0810530f
 8105268:	0810530f 	.word	0x0810530f
 810526c:	0810530f 	.word	0x0810530f
 8105270:	0810530f 	.word	0x0810530f
 8105274:	0810530f 	.word	0x0810530f
 8105278:	0810530f 	.word	0x0810530f
 810527c:	0810530f 	.word	0x0810530f
 8105280:	0810530f 	.word	0x0810530f
 8105284:	0810530f 	.word	0x0810530f
 8105288:	0810530f 	.word	0x0810530f
 810528c:	0810530f 	.word	0x0810530f
 8105290:	08105301 	.word	0x08105301
 8105294:	2b40      	cmp	r3, #64	; 0x40
 8105296:	d036      	beq.n	8105306 <UART_SetConfig+0x6b6>
 8105298:	e039      	b.n	810530e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810529a:	f7fd ff1b 	bl	81030d4 <HAL_RCCEx_GetD3PCLK1Freq>
 810529e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81052a0:	e03b      	b.n	810531a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81052a2:	f107 0314 	add.w	r3, r7, #20
 81052a6:	4618      	mov	r0, r3
 81052a8:	f7fd ff2a 	bl	8103100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81052ac:	69bb      	ldr	r3, [r7, #24]
 81052ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81052b0:	e033      	b.n	810531a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81052b2:	f107 0308 	add.w	r3, r7, #8
 81052b6:	4618      	mov	r0, r3
 81052b8:	f7fe f876 	bl	81033a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81052bc:	68fb      	ldr	r3, [r7, #12]
 81052be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81052c0:	e02b      	b.n	810531a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81052c2:	4b0a      	ldr	r3, [pc, #40]	; (81052ec <UART_SetConfig+0x69c>)
 81052c4:	681b      	ldr	r3, [r3, #0]
 81052c6:	f003 0320 	and.w	r3, r3, #32
 81052ca:	2b00      	cmp	r3, #0
 81052cc:	d009      	beq.n	81052e2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81052ce:	4b07      	ldr	r3, [pc, #28]	; (81052ec <UART_SetConfig+0x69c>)
 81052d0:	681b      	ldr	r3, [r3, #0]
 81052d2:	08db      	lsrs	r3, r3, #3
 81052d4:	f003 0303 	and.w	r3, r3, #3
 81052d8:	4a08      	ldr	r2, [pc, #32]	; (81052fc <UART_SetConfig+0x6ac>)
 81052da:	fa22 f303 	lsr.w	r3, r2, r3
 81052de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81052e0:	e01b      	b.n	810531a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 81052e2:	4b06      	ldr	r3, [pc, #24]	; (81052fc <UART_SetConfig+0x6ac>)
 81052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81052e6:	e018      	b.n	810531a <UART_SetConfig+0x6ca>
 81052e8:	40011400 	.word	0x40011400
 81052ec:	58024400 	.word	0x58024400
 81052f0:	40007800 	.word	0x40007800
 81052f4:	40007c00 	.word	0x40007c00
 81052f8:	58000c00 	.word	0x58000c00
 81052fc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105300:	4bc4      	ldr	r3, [pc, #784]	; (8105614 <UART_SetConfig+0x9c4>)
 8105302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105304:	e009      	b.n	810531a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105306:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810530a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810530c:	e005      	b.n	810531a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 810530e:	2300      	movs	r3, #0
 8105310:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105312:	2301      	movs	r3, #1
 8105314:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105318:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810531c:	2b00      	cmp	r3, #0
 810531e:	f000 81da 	beq.w	81056d6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105322:	687b      	ldr	r3, [r7, #4]
 8105324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105326:	4abc      	ldr	r2, [pc, #752]	; (8105618 <UART_SetConfig+0x9c8>)
 8105328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810532c:	461a      	mov	r2, r3
 810532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105330:	fbb3 f3f2 	udiv	r3, r3, r2
 8105334:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	685a      	ldr	r2, [r3, #4]
 810533a:	4613      	mov	r3, r2
 810533c:	005b      	lsls	r3, r3, #1
 810533e:	4413      	add	r3, r2
 8105340:	6a3a      	ldr	r2, [r7, #32]
 8105342:	429a      	cmp	r2, r3
 8105344:	d305      	bcc.n	8105352 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105346:	687b      	ldr	r3, [r7, #4]
 8105348:	685b      	ldr	r3, [r3, #4]
 810534a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810534c:	6a3a      	ldr	r2, [r7, #32]
 810534e:	429a      	cmp	r2, r3
 8105350:	d903      	bls.n	810535a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8105352:	2301      	movs	r3, #1
 8105354:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105358:	e1bd      	b.n	81056d6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810535c:	4618      	mov	r0, r3
 810535e:	f04f 0100 	mov.w	r1, #0
 8105362:	687b      	ldr	r3, [r7, #4]
 8105364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105366:	4aac      	ldr	r2, [pc, #688]	; (8105618 <UART_SetConfig+0x9c8>)
 8105368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810536c:	b29a      	uxth	r2, r3
 810536e:	f04f 0300 	mov.w	r3, #0
 8105372:	f7fb f805 	bl	8100380 <__aeabi_uldivmod>
 8105376:	4602      	mov	r2, r0
 8105378:	460b      	mov	r3, r1
 810537a:	4610      	mov	r0, r2
 810537c:	4619      	mov	r1, r3
 810537e:	f04f 0200 	mov.w	r2, #0
 8105382:	f04f 0300 	mov.w	r3, #0
 8105386:	020b      	lsls	r3, r1, #8
 8105388:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810538c:	0202      	lsls	r2, r0, #8
 810538e:	6879      	ldr	r1, [r7, #4]
 8105390:	6849      	ldr	r1, [r1, #4]
 8105392:	0849      	lsrs	r1, r1, #1
 8105394:	4608      	mov	r0, r1
 8105396:	f04f 0100 	mov.w	r1, #0
 810539a:	1814      	adds	r4, r2, r0
 810539c:	eb43 0501 	adc.w	r5, r3, r1
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	685b      	ldr	r3, [r3, #4]
 81053a4:	461a      	mov	r2, r3
 81053a6:	f04f 0300 	mov.w	r3, #0
 81053aa:	4620      	mov	r0, r4
 81053ac:	4629      	mov	r1, r5
 81053ae:	f7fa ffe7 	bl	8100380 <__aeabi_uldivmod>
 81053b2:	4602      	mov	r2, r0
 81053b4:	460b      	mov	r3, r1
 81053b6:	4613      	mov	r3, r2
 81053b8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81053ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81053bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81053c0:	d308      	bcc.n	81053d4 <UART_SetConfig+0x784>
 81053c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81053c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81053c8:	d204      	bcs.n	81053d4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81053d0:	60da      	str	r2, [r3, #12]
 81053d2:	e180      	b.n	81056d6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 81053d4:	2301      	movs	r3, #1
 81053d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81053da:	e17c      	b.n	81056d6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81053dc:	687b      	ldr	r3, [r7, #4]
 81053de:	69db      	ldr	r3, [r3, #28]
 81053e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81053e4:	f040 80be 	bne.w	8105564 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 81053e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81053ec:	2b20      	cmp	r3, #32
 81053ee:	dc49      	bgt.n	8105484 <UART_SetConfig+0x834>
 81053f0:	2b00      	cmp	r3, #0
 81053f2:	db7c      	blt.n	81054ee <UART_SetConfig+0x89e>
 81053f4:	2b20      	cmp	r3, #32
 81053f6:	d87a      	bhi.n	81054ee <UART_SetConfig+0x89e>
 81053f8:	a201      	add	r2, pc, #4	; (adr r2, 8105400 <UART_SetConfig+0x7b0>)
 81053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81053fe:	bf00      	nop
 8105400:	0810548b 	.word	0x0810548b
 8105404:	08105493 	.word	0x08105493
 8105408:	081054ef 	.word	0x081054ef
 810540c:	081054ef 	.word	0x081054ef
 8105410:	0810549b 	.word	0x0810549b
 8105414:	081054ef 	.word	0x081054ef
 8105418:	081054ef 	.word	0x081054ef
 810541c:	081054ef 	.word	0x081054ef
 8105420:	081054ab 	.word	0x081054ab
 8105424:	081054ef 	.word	0x081054ef
 8105428:	081054ef 	.word	0x081054ef
 810542c:	081054ef 	.word	0x081054ef
 8105430:	081054ef 	.word	0x081054ef
 8105434:	081054ef 	.word	0x081054ef
 8105438:	081054ef 	.word	0x081054ef
 810543c:	081054ef 	.word	0x081054ef
 8105440:	081054bb 	.word	0x081054bb
 8105444:	081054ef 	.word	0x081054ef
 8105448:	081054ef 	.word	0x081054ef
 810544c:	081054ef 	.word	0x081054ef
 8105450:	081054ef 	.word	0x081054ef
 8105454:	081054ef 	.word	0x081054ef
 8105458:	081054ef 	.word	0x081054ef
 810545c:	081054ef 	.word	0x081054ef
 8105460:	081054ef 	.word	0x081054ef
 8105464:	081054ef 	.word	0x081054ef
 8105468:	081054ef 	.word	0x081054ef
 810546c:	081054ef 	.word	0x081054ef
 8105470:	081054ef 	.word	0x081054ef
 8105474:	081054ef 	.word	0x081054ef
 8105478:	081054ef 	.word	0x081054ef
 810547c:	081054ef 	.word	0x081054ef
 8105480:	081054e1 	.word	0x081054e1
 8105484:	2b40      	cmp	r3, #64	; 0x40
 8105486:	d02e      	beq.n	81054e6 <UART_SetConfig+0x896>
 8105488:	e031      	b.n	81054ee <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810548a:	f7fc feb7 	bl	81021fc <HAL_RCC_GetPCLK1Freq>
 810548e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105490:	e033      	b.n	81054fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105492:	f7fc fec9 	bl	8102228 <HAL_RCC_GetPCLK2Freq>
 8105496:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105498:	e02f      	b.n	81054fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810549a:	f107 0314 	add.w	r3, r7, #20
 810549e:	4618      	mov	r0, r3
 81054a0:	f7fd fe2e 	bl	8103100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81054a4:	69bb      	ldr	r3, [r7, #24]
 81054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81054a8:	e027      	b.n	81054fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81054aa:	f107 0308 	add.w	r3, r7, #8
 81054ae:	4618      	mov	r0, r3
 81054b0:	f7fd ff7a 	bl	81033a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81054b4:	68fb      	ldr	r3, [r7, #12]
 81054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81054b8:	e01f      	b.n	81054fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81054ba:	4b58      	ldr	r3, [pc, #352]	; (810561c <UART_SetConfig+0x9cc>)
 81054bc:	681b      	ldr	r3, [r3, #0]
 81054be:	f003 0320 	and.w	r3, r3, #32
 81054c2:	2b00      	cmp	r3, #0
 81054c4:	d009      	beq.n	81054da <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81054c6:	4b55      	ldr	r3, [pc, #340]	; (810561c <UART_SetConfig+0x9cc>)
 81054c8:	681b      	ldr	r3, [r3, #0]
 81054ca:	08db      	lsrs	r3, r3, #3
 81054cc:	f003 0303 	and.w	r3, r3, #3
 81054d0:	4a53      	ldr	r2, [pc, #332]	; (8105620 <UART_SetConfig+0x9d0>)
 81054d2:	fa22 f303 	lsr.w	r3, r2, r3
 81054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81054d8:	e00f      	b.n	81054fa <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 81054da:	4b51      	ldr	r3, [pc, #324]	; (8105620 <UART_SetConfig+0x9d0>)
 81054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81054de:	e00c      	b.n	81054fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81054e0:	4b4c      	ldr	r3, [pc, #304]	; (8105614 <UART_SetConfig+0x9c4>)
 81054e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81054e4:	e009      	b.n	81054fa <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81054e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81054ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81054ec:	e005      	b.n	81054fa <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 81054ee:	2300      	movs	r3, #0
 81054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81054f2:	2301      	movs	r3, #1
 81054f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81054f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81054fc:	2b00      	cmp	r3, #0
 81054fe:	f000 80ea 	beq.w	81056d6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105502:	687b      	ldr	r3, [r7, #4]
 8105504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105506:	4a44      	ldr	r2, [pc, #272]	; (8105618 <UART_SetConfig+0x9c8>)
 8105508:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810550c:	461a      	mov	r2, r3
 810550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105510:	fbb3 f3f2 	udiv	r3, r3, r2
 8105514:	005a      	lsls	r2, r3, #1
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	685b      	ldr	r3, [r3, #4]
 810551a:	085b      	lsrs	r3, r3, #1
 810551c:	441a      	add	r2, r3
 810551e:	687b      	ldr	r3, [r7, #4]
 8105520:	685b      	ldr	r3, [r3, #4]
 8105522:	fbb2 f3f3 	udiv	r3, r2, r3
 8105526:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810552a:	2b0f      	cmp	r3, #15
 810552c:	d916      	bls.n	810555c <UART_SetConfig+0x90c>
 810552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105534:	d212      	bcs.n	810555c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8105536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105538:	b29b      	uxth	r3, r3
 810553a:	f023 030f 	bic.w	r3, r3, #15
 810553e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8105540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105542:	085b      	lsrs	r3, r3, #1
 8105544:	b29b      	uxth	r3, r3
 8105546:	f003 0307 	and.w	r3, r3, #7
 810554a:	b29a      	uxth	r2, r3
 810554c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810554e:	4313      	orrs	r3, r2
 8105550:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	681b      	ldr	r3, [r3, #0]
 8105556:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8105558:	60da      	str	r2, [r3, #12]
 810555a:	e0bc      	b.n	81056d6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810555c:	2301      	movs	r3, #1
 810555e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105562:	e0b8      	b.n	81056d6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8105564:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105568:	2b20      	cmp	r3, #32
 810556a:	dc4b      	bgt.n	8105604 <UART_SetConfig+0x9b4>
 810556c:	2b00      	cmp	r3, #0
 810556e:	f2c0 8087 	blt.w	8105680 <UART_SetConfig+0xa30>
 8105572:	2b20      	cmp	r3, #32
 8105574:	f200 8084 	bhi.w	8105680 <UART_SetConfig+0xa30>
 8105578:	a201      	add	r2, pc, #4	; (adr r2, 8105580 <UART_SetConfig+0x930>)
 810557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810557e:	bf00      	nop
 8105580:	0810560b 	.word	0x0810560b
 8105584:	08105625 	.word	0x08105625
 8105588:	08105681 	.word	0x08105681
 810558c:	08105681 	.word	0x08105681
 8105590:	0810562d 	.word	0x0810562d
 8105594:	08105681 	.word	0x08105681
 8105598:	08105681 	.word	0x08105681
 810559c:	08105681 	.word	0x08105681
 81055a0:	0810563d 	.word	0x0810563d
 81055a4:	08105681 	.word	0x08105681
 81055a8:	08105681 	.word	0x08105681
 81055ac:	08105681 	.word	0x08105681
 81055b0:	08105681 	.word	0x08105681
 81055b4:	08105681 	.word	0x08105681
 81055b8:	08105681 	.word	0x08105681
 81055bc:	08105681 	.word	0x08105681
 81055c0:	0810564d 	.word	0x0810564d
 81055c4:	08105681 	.word	0x08105681
 81055c8:	08105681 	.word	0x08105681
 81055cc:	08105681 	.word	0x08105681
 81055d0:	08105681 	.word	0x08105681
 81055d4:	08105681 	.word	0x08105681
 81055d8:	08105681 	.word	0x08105681
 81055dc:	08105681 	.word	0x08105681
 81055e0:	08105681 	.word	0x08105681
 81055e4:	08105681 	.word	0x08105681
 81055e8:	08105681 	.word	0x08105681
 81055ec:	08105681 	.word	0x08105681
 81055f0:	08105681 	.word	0x08105681
 81055f4:	08105681 	.word	0x08105681
 81055f8:	08105681 	.word	0x08105681
 81055fc:	08105681 	.word	0x08105681
 8105600:	08105673 	.word	0x08105673
 8105604:	2b40      	cmp	r3, #64	; 0x40
 8105606:	d037      	beq.n	8105678 <UART_SetConfig+0xa28>
 8105608:	e03a      	b.n	8105680 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810560a:	f7fc fdf7 	bl	81021fc <HAL_RCC_GetPCLK1Freq>
 810560e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105610:	e03c      	b.n	810568c <UART_SetConfig+0xa3c>
 8105612:	bf00      	nop
 8105614:	003d0900 	.word	0x003d0900
 8105618:	08106dd0 	.word	0x08106dd0
 810561c:	58024400 	.word	0x58024400
 8105620:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105624:	f7fc fe00 	bl	8102228 <HAL_RCC_GetPCLK2Freq>
 8105628:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810562a:	e02f      	b.n	810568c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810562c:	f107 0314 	add.w	r3, r7, #20
 8105630:	4618      	mov	r0, r3
 8105632:	f7fd fd65 	bl	8103100 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105636:	69bb      	ldr	r3, [r7, #24]
 8105638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810563a:	e027      	b.n	810568c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810563c:	f107 0308 	add.w	r3, r7, #8
 8105640:	4618      	mov	r0, r3
 8105642:	f7fd feb1 	bl	81033a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105646:	68fb      	ldr	r3, [r7, #12]
 8105648:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810564a:	e01f      	b.n	810568c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810564c:	4b2c      	ldr	r3, [pc, #176]	; (8105700 <UART_SetConfig+0xab0>)
 810564e:	681b      	ldr	r3, [r3, #0]
 8105650:	f003 0320 	and.w	r3, r3, #32
 8105654:	2b00      	cmp	r3, #0
 8105656:	d009      	beq.n	810566c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105658:	4b29      	ldr	r3, [pc, #164]	; (8105700 <UART_SetConfig+0xab0>)
 810565a:	681b      	ldr	r3, [r3, #0]
 810565c:	08db      	lsrs	r3, r3, #3
 810565e:	f003 0303 	and.w	r3, r3, #3
 8105662:	4a28      	ldr	r2, [pc, #160]	; (8105704 <UART_SetConfig+0xab4>)
 8105664:	fa22 f303 	lsr.w	r3, r2, r3
 8105668:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810566a:	e00f      	b.n	810568c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810566c:	4b25      	ldr	r3, [pc, #148]	; (8105704 <UART_SetConfig+0xab4>)
 810566e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105670:	e00c      	b.n	810568c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105672:	4b25      	ldr	r3, [pc, #148]	; (8105708 <UART_SetConfig+0xab8>)
 8105674:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105676:	e009      	b.n	810568c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105678:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810567c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810567e:	e005      	b.n	810568c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8105680:	2300      	movs	r3, #0
 8105682:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105684:	2301      	movs	r3, #1
 8105686:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 810568a:	bf00      	nop
    }

    if (pclk != 0U)
 810568c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810568e:	2b00      	cmp	r3, #0
 8105690:	d021      	beq.n	81056d6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105692:	687b      	ldr	r3, [r7, #4]
 8105694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105696:	4a1d      	ldr	r2, [pc, #116]	; (810570c <UART_SetConfig+0xabc>)
 8105698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810569c:	461a      	mov	r2, r3
 810569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81056a0:	fbb3 f2f2 	udiv	r2, r3, r2
 81056a4:	687b      	ldr	r3, [r7, #4]
 81056a6:	685b      	ldr	r3, [r3, #4]
 81056a8:	085b      	lsrs	r3, r3, #1
 81056aa:	441a      	add	r2, r3
 81056ac:	687b      	ldr	r3, [r7, #4]
 81056ae:	685b      	ldr	r3, [r3, #4]
 81056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 81056b4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056b8:	2b0f      	cmp	r3, #15
 81056ba:	d909      	bls.n	81056d0 <UART_SetConfig+0xa80>
 81056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81056c2:	d205      	bcs.n	81056d0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81056c6:	b29a      	uxth	r2, r3
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	60da      	str	r2, [r3, #12]
 81056ce:	e002      	b.n	81056d6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81056d0:	2301      	movs	r3, #1
 81056d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81056d6:	687b      	ldr	r3, [r7, #4]
 81056d8:	2201      	movs	r2, #1
 81056da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81056de:	687b      	ldr	r3, [r7, #4]
 81056e0:	2201      	movs	r2, #1
 81056e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	2200      	movs	r2, #0
 81056ea:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81056ec:	687b      	ldr	r3, [r7, #4]
 81056ee:	2200      	movs	r2, #0
 81056f0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81056f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 81056f6:	4618      	mov	r0, r3
 81056f8:	3738      	adds	r7, #56	; 0x38
 81056fa:	46bd      	mov	sp, r7
 81056fc:	bdb0      	pop	{r4, r5, r7, pc}
 81056fe:	bf00      	nop
 8105700:	58024400 	.word	0x58024400
 8105704:	03d09000 	.word	0x03d09000
 8105708:	003d0900 	.word	0x003d0900
 810570c:	08106dd0 	.word	0x08106dd0

08105710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105710:	b480      	push	{r7}
 8105712:	b083      	sub	sp, #12
 8105714:	af00      	add	r7, sp, #0
 8105716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105718:	687b      	ldr	r3, [r7, #4]
 810571a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810571c:	f003 0301 	and.w	r3, r3, #1
 8105720:	2b00      	cmp	r3, #0
 8105722:	d00a      	beq.n	810573a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105724:	687b      	ldr	r3, [r7, #4]
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	685b      	ldr	r3, [r3, #4]
 810572a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810572e:	687b      	ldr	r3, [r7, #4]
 8105730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8105732:	687b      	ldr	r3, [r7, #4]
 8105734:	681b      	ldr	r3, [r3, #0]
 8105736:	430a      	orrs	r2, r1
 8105738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810573a:	687b      	ldr	r3, [r7, #4]
 810573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810573e:	f003 0302 	and.w	r3, r3, #2
 8105742:	2b00      	cmp	r3, #0
 8105744:	d00a      	beq.n	810575c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105746:	687b      	ldr	r3, [r7, #4]
 8105748:	681b      	ldr	r3, [r3, #0]
 810574a:	685b      	ldr	r3, [r3, #4]
 810574c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105750:	687b      	ldr	r3, [r7, #4]
 8105752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105754:	687b      	ldr	r3, [r7, #4]
 8105756:	681b      	ldr	r3, [r3, #0]
 8105758:	430a      	orrs	r2, r1
 810575a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810575c:	687b      	ldr	r3, [r7, #4]
 810575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105760:	f003 0304 	and.w	r3, r3, #4
 8105764:	2b00      	cmp	r3, #0
 8105766:	d00a      	beq.n	810577e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105768:	687b      	ldr	r3, [r7, #4]
 810576a:	681b      	ldr	r3, [r3, #0]
 810576c:	685b      	ldr	r3, [r3, #4]
 810576e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8105772:	687b      	ldr	r3, [r7, #4]
 8105774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105776:	687b      	ldr	r3, [r7, #4]
 8105778:	681b      	ldr	r3, [r3, #0]
 810577a:	430a      	orrs	r2, r1
 810577c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105782:	f003 0308 	and.w	r3, r3, #8
 8105786:	2b00      	cmp	r3, #0
 8105788:	d00a      	beq.n	81057a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	681b      	ldr	r3, [r3, #0]
 810578e:	685b      	ldr	r3, [r3, #4]
 8105790:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105794:	687b      	ldr	r3, [r7, #4]
 8105796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105798:	687b      	ldr	r3, [r7, #4]
 810579a:	681b      	ldr	r3, [r3, #0]
 810579c:	430a      	orrs	r2, r1
 810579e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81057a0:	687b      	ldr	r3, [r7, #4]
 81057a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057a4:	f003 0310 	and.w	r3, r3, #16
 81057a8:	2b00      	cmp	r3, #0
 81057aa:	d00a      	beq.n	81057c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81057ac:	687b      	ldr	r3, [r7, #4]
 81057ae:	681b      	ldr	r3, [r3, #0]
 81057b0:	689b      	ldr	r3, [r3, #8]
 81057b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	681b      	ldr	r3, [r3, #0]
 81057be:	430a      	orrs	r2, r1
 81057c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057c6:	f003 0320 	and.w	r3, r3, #32
 81057ca:	2b00      	cmp	r3, #0
 81057cc:	d00a      	beq.n	81057e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81057ce:	687b      	ldr	r3, [r7, #4]
 81057d0:	681b      	ldr	r3, [r3, #0]
 81057d2:	689b      	ldr	r3, [r3, #8]
 81057d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81057d8:	687b      	ldr	r3, [r7, #4]
 81057da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81057dc:	687b      	ldr	r3, [r7, #4]
 81057de:	681b      	ldr	r3, [r3, #0]
 81057e0:	430a      	orrs	r2, r1
 81057e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81057e4:	687b      	ldr	r3, [r7, #4]
 81057e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81057ec:	2b00      	cmp	r3, #0
 81057ee:	d01a      	beq.n	8105826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81057f0:	687b      	ldr	r3, [r7, #4]
 81057f2:	681b      	ldr	r3, [r3, #0]
 81057f4:	685b      	ldr	r3, [r3, #4]
 81057f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81057fa:	687b      	ldr	r3, [r7, #4]
 81057fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81057fe:	687b      	ldr	r3, [r7, #4]
 8105800:	681b      	ldr	r3, [r3, #0]
 8105802:	430a      	orrs	r2, r1
 8105804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105806:	687b      	ldr	r3, [r7, #4]
 8105808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810580a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810580e:	d10a      	bne.n	8105826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105810:	687b      	ldr	r3, [r7, #4]
 8105812:	681b      	ldr	r3, [r3, #0]
 8105814:	685b      	ldr	r3, [r3, #4]
 8105816:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810581a:	687b      	ldr	r3, [r7, #4]
 810581c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810581e:	687b      	ldr	r3, [r7, #4]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	430a      	orrs	r2, r1
 8105824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105826:	687b      	ldr	r3, [r7, #4]
 8105828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810582e:	2b00      	cmp	r3, #0
 8105830:	d00a      	beq.n	8105848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105832:	687b      	ldr	r3, [r7, #4]
 8105834:	681b      	ldr	r3, [r3, #0]
 8105836:	685b      	ldr	r3, [r3, #4]
 8105838:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810583c:	687b      	ldr	r3, [r7, #4]
 810583e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105840:	687b      	ldr	r3, [r7, #4]
 8105842:	681b      	ldr	r3, [r3, #0]
 8105844:	430a      	orrs	r2, r1
 8105846:	605a      	str	r2, [r3, #4]
  }
}
 8105848:	bf00      	nop
 810584a:	370c      	adds	r7, #12
 810584c:	46bd      	mov	sp, r7
 810584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105852:	4770      	bx	lr

08105854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105854:	b580      	push	{r7, lr}
 8105856:	b086      	sub	sp, #24
 8105858:	af02      	add	r7, sp, #8
 810585a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810585c:	687b      	ldr	r3, [r7, #4]
 810585e:	2200      	movs	r2, #0
 8105860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8105864:	f7fb ff4c 	bl	8101700 <HAL_GetTick>
 8105868:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810586a:	687b      	ldr	r3, [r7, #4]
 810586c:	681b      	ldr	r3, [r3, #0]
 810586e:	681b      	ldr	r3, [r3, #0]
 8105870:	f003 0308 	and.w	r3, r3, #8
 8105874:	2b08      	cmp	r3, #8
 8105876:	d10e      	bne.n	8105896 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105878:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810587c:	9300      	str	r3, [sp, #0]
 810587e:	68fb      	ldr	r3, [r7, #12]
 8105880:	2200      	movs	r2, #0
 8105882:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105886:	6878      	ldr	r0, [r7, #4]
 8105888:	f000 f82f 	bl	81058ea <UART_WaitOnFlagUntilTimeout>
 810588c:	4603      	mov	r3, r0
 810588e:	2b00      	cmp	r3, #0
 8105890:	d001      	beq.n	8105896 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105892:	2303      	movs	r3, #3
 8105894:	e025      	b.n	81058e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105896:	687b      	ldr	r3, [r7, #4]
 8105898:	681b      	ldr	r3, [r3, #0]
 810589a:	681b      	ldr	r3, [r3, #0]
 810589c:	f003 0304 	and.w	r3, r3, #4
 81058a0:	2b04      	cmp	r3, #4
 81058a2:	d10e      	bne.n	81058c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81058a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81058a8:	9300      	str	r3, [sp, #0]
 81058aa:	68fb      	ldr	r3, [r7, #12]
 81058ac:	2200      	movs	r2, #0
 81058ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81058b2:	6878      	ldr	r0, [r7, #4]
 81058b4:	f000 f819 	bl	81058ea <UART_WaitOnFlagUntilTimeout>
 81058b8:	4603      	mov	r3, r0
 81058ba:	2b00      	cmp	r3, #0
 81058bc:	d001      	beq.n	81058c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81058be:	2303      	movs	r3, #3
 81058c0:	e00f      	b.n	81058e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81058c2:	687b      	ldr	r3, [r7, #4]
 81058c4:	2220      	movs	r2, #32
 81058c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81058ca:	687b      	ldr	r3, [r7, #4]
 81058cc:	2220      	movs	r2, #32
 81058ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81058d2:	687b      	ldr	r3, [r7, #4]
 81058d4:	2200      	movs	r2, #0
 81058d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81058d8:	687b      	ldr	r3, [r7, #4]
 81058da:	2200      	movs	r2, #0
 81058dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81058e0:	2300      	movs	r3, #0
}
 81058e2:	4618      	mov	r0, r3
 81058e4:	3710      	adds	r7, #16
 81058e6:	46bd      	mov	sp, r7
 81058e8:	bd80      	pop	{r7, pc}

081058ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81058ea:	b580      	push	{r7, lr}
 81058ec:	b09c      	sub	sp, #112	; 0x70
 81058ee:	af00      	add	r7, sp, #0
 81058f0:	60f8      	str	r0, [r7, #12]
 81058f2:	60b9      	str	r1, [r7, #8]
 81058f4:	603b      	str	r3, [r7, #0]
 81058f6:	4613      	mov	r3, r2
 81058f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81058fa:	e0a9      	b.n	8105a50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81058fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105902:	f000 80a5 	beq.w	8105a50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105906:	f7fb fefb 	bl	8101700 <HAL_GetTick>
 810590a:	4602      	mov	r2, r0
 810590c:	683b      	ldr	r3, [r7, #0]
 810590e:	1ad3      	subs	r3, r2, r3
 8105910:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8105912:	429a      	cmp	r2, r3
 8105914:	d302      	bcc.n	810591c <UART_WaitOnFlagUntilTimeout+0x32>
 8105916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105918:	2b00      	cmp	r3, #0
 810591a:	d140      	bne.n	810599e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810591c:	68fb      	ldr	r3, [r7, #12]
 810591e:	681b      	ldr	r3, [r3, #0]
 8105920:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105924:	e853 3f00 	ldrex	r3, [r3]
 8105928:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810592a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810592c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105930:	667b      	str	r3, [r7, #100]	; 0x64
 8105932:	68fb      	ldr	r3, [r7, #12]
 8105934:	681b      	ldr	r3, [r3, #0]
 8105936:	461a      	mov	r2, r3
 8105938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810593a:	65fb      	str	r3, [r7, #92]	; 0x5c
 810593c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810593e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105940:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8105942:	e841 2300 	strex	r3, r2, [r1]
 8105946:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8105948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810594a:	2b00      	cmp	r3, #0
 810594c:	d1e6      	bne.n	810591c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810594e:	68fb      	ldr	r3, [r7, #12]
 8105950:	681b      	ldr	r3, [r3, #0]
 8105952:	3308      	adds	r3, #8
 8105954:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105958:	e853 3f00 	ldrex	r3, [r3]
 810595c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105960:	f023 0301 	bic.w	r3, r3, #1
 8105964:	663b      	str	r3, [r7, #96]	; 0x60
 8105966:	68fb      	ldr	r3, [r7, #12]
 8105968:	681b      	ldr	r3, [r3, #0]
 810596a:	3308      	adds	r3, #8
 810596c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810596e:	64ba      	str	r2, [r7, #72]	; 0x48
 8105970:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105972:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105976:	e841 2300 	strex	r3, r2, [r1]
 810597a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 810597c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810597e:	2b00      	cmp	r3, #0
 8105980:	d1e5      	bne.n	810594e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8105982:	68fb      	ldr	r3, [r7, #12]
 8105984:	2220      	movs	r2, #32
 8105986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810598a:	68fb      	ldr	r3, [r7, #12]
 810598c:	2220      	movs	r2, #32
 810598e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8105992:	68fb      	ldr	r3, [r7, #12]
 8105994:	2200      	movs	r2, #0
 8105996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 810599a:	2303      	movs	r3, #3
 810599c:	e069      	b.n	8105a72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810599e:	68fb      	ldr	r3, [r7, #12]
 81059a0:	681b      	ldr	r3, [r3, #0]
 81059a2:	681b      	ldr	r3, [r3, #0]
 81059a4:	f003 0304 	and.w	r3, r3, #4
 81059a8:	2b00      	cmp	r3, #0
 81059aa:	d051      	beq.n	8105a50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81059ac:	68fb      	ldr	r3, [r7, #12]
 81059ae:	681b      	ldr	r3, [r3, #0]
 81059b0:	69db      	ldr	r3, [r3, #28]
 81059b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81059b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81059ba:	d149      	bne.n	8105a50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81059bc:	68fb      	ldr	r3, [r7, #12]
 81059be:	681b      	ldr	r3, [r3, #0]
 81059c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81059c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81059c6:	68fb      	ldr	r3, [r7, #12]
 81059c8:	681b      	ldr	r3, [r3, #0]
 81059ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81059cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81059ce:	e853 3f00 	ldrex	r3, [r3]
 81059d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81059d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81059da:	66fb      	str	r3, [r7, #108]	; 0x6c
 81059dc:	68fb      	ldr	r3, [r7, #12]
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	461a      	mov	r2, r3
 81059e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81059e4:	637b      	str	r3, [r7, #52]	; 0x34
 81059e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81059e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81059ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81059ec:	e841 2300 	strex	r3, r2, [r1]
 81059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81059f4:	2b00      	cmp	r3, #0
 81059f6:	d1e6      	bne.n	81059c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81059f8:	68fb      	ldr	r3, [r7, #12]
 81059fa:	681b      	ldr	r3, [r3, #0]
 81059fc:	3308      	adds	r3, #8
 81059fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105a00:	697b      	ldr	r3, [r7, #20]
 8105a02:	e853 3f00 	ldrex	r3, [r3]
 8105a06:	613b      	str	r3, [r7, #16]
   return(result);
 8105a08:	693b      	ldr	r3, [r7, #16]
 8105a0a:	f023 0301 	bic.w	r3, r3, #1
 8105a0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8105a10:	68fb      	ldr	r3, [r7, #12]
 8105a12:	681b      	ldr	r3, [r3, #0]
 8105a14:	3308      	adds	r3, #8
 8105a16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8105a18:	623a      	str	r2, [r7, #32]
 8105a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105a1c:	69f9      	ldr	r1, [r7, #28]
 8105a1e:	6a3a      	ldr	r2, [r7, #32]
 8105a20:	e841 2300 	strex	r3, r2, [r1]
 8105a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8105a26:	69bb      	ldr	r3, [r7, #24]
 8105a28:	2b00      	cmp	r3, #0
 8105a2a:	d1e5      	bne.n	81059f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8105a2c:	68fb      	ldr	r3, [r7, #12]
 8105a2e:	2220      	movs	r2, #32
 8105a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8105a34:	68fb      	ldr	r3, [r7, #12]
 8105a36:	2220      	movs	r2, #32
 8105a38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105a3c:	68fb      	ldr	r3, [r7, #12]
 8105a3e:	2220      	movs	r2, #32
 8105a40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105a44:	68fb      	ldr	r3, [r7, #12]
 8105a46:	2200      	movs	r2, #0
 8105a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8105a4c:	2303      	movs	r3, #3
 8105a4e:	e010      	b.n	8105a72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105a50:	68fb      	ldr	r3, [r7, #12]
 8105a52:	681b      	ldr	r3, [r3, #0]
 8105a54:	69da      	ldr	r2, [r3, #28]
 8105a56:	68bb      	ldr	r3, [r7, #8]
 8105a58:	4013      	ands	r3, r2
 8105a5a:	68ba      	ldr	r2, [r7, #8]
 8105a5c:	429a      	cmp	r2, r3
 8105a5e:	bf0c      	ite	eq
 8105a60:	2301      	moveq	r3, #1
 8105a62:	2300      	movne	r3, #0
 8105a64:	b2db      	uxtb	r3, r3
 8105a66:	461a      	mov	r2, r3
 8105a68:	79fb      	ldrb	r3, [r7, #7]
 8105a6a:	429a      	cmp	r2, r3
 8105a6c:	f43f af46 	beq.w	81058fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8105a70:	2300      	movs	r3, #0
}
 8105a72:	4618      	mov	r0, r3
 8105a74:	3770      	adds	r7, #112	; 0x70
 8105a76:	46bd      	mov	sp, r7
 8105a78:	bd80      	pop	{r7, pc}

08105a7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105a7a:	b480      	push	{r7}
 8105a7c:	b085      	sub	sp, #20
 8105a7e:	af00      	add	r7, sp, #0
 8105a80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105a82:	687b      	ldr	r3, [r7, #4]
 8105a84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105a88:	2b01      	cmp	r3, #1
 8105a8a:	d101      	bne.n	8105a90 <HAL_UARTEx_DisableFifoMode+0x16>
 8105a8c:	2302      	movs	r3, #2
 8105a8e:	e027      	b.n	8105ae0 <HAL_UARTEx_DisableFifoMode+0x66>
 8105a90:	687b      	ldr	r3, [r7, #4]
 8105a92:	2201      	movs	r2, #1
 8105a94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105a98:	687b      	ldr	r3, [r7, #4]
 8105a9a:	2224      	movs	r2, #36	; 0x24
 8105a9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105aa0:	687b      	ldr	r3, [r7, #4]
 8105aa2:	681b      	ldr	r3, [r3, #0]
 8105aa4:	681b      	ldr	r3, [r3, #0]
 8105aa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105aa8:	687b      	ldr	r3, [r7, #4]
 8105aaa:	681b      	ldr	r3, [r3, #0]
 8105aac:	681a      	ldr	r2, [r3, #0]
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	f022 0201 	bic.w	r2, r2, #1
 8105ab6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8105ab8:	68fb      	ldr	r3, [r7, #12]
 8105aba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8105abe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8105ac0:	687b      	ldr	r3, [r7, #4]
 8105ac2:	2200      	movs	r2, #0
 8105ac4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105ac6:	687b      	ldr	r3, [r7, #4]
 8105ac8:	681b      	ldr	r3, [r3, #0]
 8105aca:	68fa      	ldr	r2, [r7, #12]
 8105acc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105ace:	687b      	ldr	r3, [r7, #4]
 8105ad0:	2220      	movs	r2, #32
 8105ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105ad6:	687b      	ldr	r3, [r7, #4]
 8105ad8:	2200      	movs	r2, #0
 8105ada:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105ade:	2300      	movs	r3, #0
}
 8105ae0:	4618      	mov	r0, r3
 8105ae2:	3714      	adds	r7, #20
 8105ae4:	46bd      	mov	sp, r7
 8105ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105aea:	4770      	bx	lr

08105aec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105aec:	b580      	push	{r7, lr}
 8105aee:	b084      	sub	sp, #16
 8105af0:	af00      	add	r7, sp, #0
 8105af2:	6078      	str	r0, [r7, #4]
 8105af4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105af6:	687b      	ldr	r3, [r7, #4]
 8105af8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105afc:	2b01      	cmp	r3, #1
 8105afe:	d101      	bne.n	8105b04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105b00:	2302      	movs	r3, #2
 8105b02:	e02d      	b.n	8105b60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8105b04:	687b      	ldr	r3, [r7, #4]
 8105b06:	2201      	movs	r2, #1
 8105b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	2224      	movs	r2, #36	; 0x24
 8105b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105b14:	687b      	ldr	r3, [r7, #4]
 8105b16:	681b      	ldr	r3, [r3, #0]
 8105b18:	681b      	ldr	r3, [r3, #0]
 8105b1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105b1c:	687b      	ldr	r3, [r7, #4]
 8105b1e:	681b      	ldr	r3, [r3, #0]
 8105b20:	681a      	ldr	r2, [r3, #0]
 8105b22:	687b      	ldr	r3, [r7, #4]
 8105b24:	681b      	ldr	r3, [r3, #0]
 8105b26:	f022 0201 	bic.w	r2, r2, #1
 8105b2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	681b      	ldr	r3, [r3, #0]
 8105b30:	689b      	ldr	r3, [r3, #8]
 8105b32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	683a      	ldr	r2, [r7, #0]
 8105b3c:	430a      	orrs	r2, r1
 8105b3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105b40:	6878      	ldr	r0, [r7, #4]
 8105b42:	f000 f84f 	bl	8105be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	681b      	ldr	r3, [r3, #0]
 8105b4a:	68fa      	ldr	r2, [r7, #12]
 8105b4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	2220      	movs	r2, #32
 8105b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105b56:	687b      	ldr	r3, [r7, #4]
 8105b58:	2200      	movs	r2, #0
 8105b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105b5e:	2300      	movs	r3, #0
}
 8105b60:	4618      	mov	r0, r3
 8105b62:	3710      	adds	r7, #16
 8105b64:	46bd      	mov	sp, r7
 8105b66:	bd80      	pop	{r7, pc}

08105b68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105b68:	b580      	push	{r7, lr}
 8105b6a:	b084      	sub	sp, #16
 8105b6c:	af00      	add	r7, sp, #0
 8105b6e:	6078      	str	r0, [r7, #4]
 8105b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105b72:	687b      	ldr	r3, [r7, #4]
 8105b74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105b78:	2b01      	cmp	r3, #1
 8105b7a:	d101      	bne.n	8105b80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105b7c:	2302      	movs	r3, #2
 8105b7e:	e02d      	b.n	8105bdc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105b80:	687b      	ldr	r3, [r7, #4]
 8105b82:	2201      	movs	r2, #1
 8105b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105b88:	687b      	ldr	r3, [r7, #4]
 8105b8a:	2224      	movs	r2, #36	; 0x24
 8105b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105b90:	687b      	ldr	r3, [r7, #4]
 8105b92:	681b      	ldr	r3, [r3, #0]
 8105b94:	681b      	ldr	r3, [r3, #0]
 8105b96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	681a      	ldr	r2, [r3, #0]
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	681b      	ldr	r3, [r3, #0]
 8105ba2:	f022 0201 	bic.w	r2, r2, #1
 8105ba6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105ba8:	687b      	ldr	r3, [r7, #4]
 8105baa:	681b      	ldr	r3, [r3, #0]
 8105bac:	689b      	ldr	r3, [r3, #8]
 8105bae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8105bb2:	687b      	ldr	r3, [r7, #4]
 8105bb4:	681b      	ldr	r3, [r3, #0]
 8105bb6:	683a      	ldr	r2, [r7, #0]
 8105bb8:	430a      	orrs	r2, r1
 8105bba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105bbc:	6878      	ldr	r0, [r7, #4]
 8105bbe:	f000 f811 	bl	8105be4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	681b      	ldr	r3, [r3, #0]
 8105bc6:	68fa      	ldr	r2, [r7, #12]
 8105bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	2220      	movs	r2, #32
 8105bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	2200      	movs	r2, #0
 8105bd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105bda:	2300      	movs	r3, #0
}
 8105bdc:	4618      	mov	r0, r3
 8105bde:	3710      	adds	r7, #16
 8105be0:	46bd      	mov	sp, r7
 8105be2:	bd80      	pop	{r7, pc}

08105be4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105be4:	b480      	push	{r7}
 8105be6:	b085      	sub	sp, #20
 8105be8:	af00      	add	r7, sp, #0
 8105bea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105bec:	687b      	ldr	r3, [r7, #4]
 8105bee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105bf0:	2b00      	cmp	r3, #0
 8105bf2:	d108      	bne.n	8105c06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8105bf4:	687b      	ldr	r3, [r7, #4]
 8105bf6:	2201      	movs	r2, #1
 8105bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	2201      	movs	r2, #1
 8105c00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105c04:	e031      	b.n	8105c6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105c06:	2310      	movs	r3, #16
 8105c08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105c0a:	2310      	movs	r3, #16
 8105c0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105c0e:	687b      	ldr	r3, [r7, #4]
 8105c10:	681b      	ldr	r3, [r3, #0]
 8105c12:	689b      	ldr	r3, [r3, #8]
 8105c14:	0e5b      	lsrs	r3, r3, #25
 8105c16:	b2db      	uxtb	r3, r3
 8105c18:	f003 0307 	and.w	r3, r3, #7
 8105c1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	681b      	ldr	r3, [r3, #0]
 8105c22:	689b      	ldr	r3, [r3, #8]
 8105c24:	0f5b      	lsrs	r3, r3, #29
 8105c26:	b2db      	uxtb	r3, r3
 8105c28:	f003 0307 	and.w	r3, r3, #7
 8105c2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105c2e:	7bbb      	ldrb	r3, [r7, #14]
 8105c30:	7b3a      	ldrb	r2, [r7, #12]
 8105c32:	4911      	ldr	r1, [pc, #68]	; (8105c78 <UARTEx_SetNbDataToProcess+0x94>)
 8105c34:	5c8a      	ldrb	r2, [r1, r2]
 8105c36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8105c3a:	7b3a      	ldrb	r2, [r7, #12]
 8105c3c:	490f      	ldr	r1, [pc, #60]	; (8105c7c <UARTEx_SetNbDataToProcess+0x98>)
 8105c3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105c40:	fb93 f3f2 	sdiv	r3, r3, r2
 8105c44:	b29a      	uxth	r2, r3
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105c4c:	7bfb      	ldrb	r3, [r7, #15]
 8105c4e:	7b7a      	ldrb	r2, [r7, #13]
 8105c50:	4909      	ldr	r1, [pc, #36]	; (8105c78 <UARTEx_SetNbDataToProcess+0x94>)
 8105c52:	5c8a      	ldrb	r2, [r1, r2]
 8105c54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8105c58:	7b7a      	ldrb	r2, [r7, #13]
 8105c5a:	4908      	ldr	r1, [pc, #32]	; (8105c7c <UARTEx_SetNbDataToProcess+0x98>)
 8105c5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105c5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8105c62:	b29a      	uxth	r2, r3
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8105c6a:	bf00      	nop
 8105c6c:	3714      	adds	r7, #20
 8105c6e:	46bd      	mov	sp, r7
 8105c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c74:	4770      	bx	lr
 8105c76:	bf00      	nop
 8105c78:	08106de8 	.word	0x08106de8
 8105c7c:	08106df0 	.word	0x08106df0

08105c80 <__errno>:
 8105c80:	4b01      	ldr	r3, [pc, #4]	; (8105c88 <__errno+0x8>)
 8105c82:	6818      	ldr	r0, [r3, #0]
 8105c84:	4770      	bx	lr
 8105c86:	bf00      	nop
 8105c88:	10000010 	.word	0x10000010

08105c8c <__libc_init_array>:
 8105c8c:	b570      	push	{r4, r5, r6, lr}
 8105c8e:	4d0d      	ldr	r5, [pc, #52]	; (8105cc4 <__libc_init_array+0x38>)
 8105c90:	4c0d      	ldr	r4, [pc, #52]	; (8105cc8 <__libc_init_array+0x3c>)
 8105c92:	1b64      	subs	r4, r4, r5
 8105c94:	10a4      	asrs	r4, r4, #2
 8105c96:	2600      	movs	r6, #0
 8105c98:	42a6      	cmp	r6, r4
 8105c9a:	d109      	bne.n	8105cb0 <__libc_init_array+0x24>
 8105c9c:	4d0b      	ldr	r5, [pc, #44]	; (8105ccc <__libc_init_array+0x40>)
 8105c9e:	4c0c      	ldr	r4, [pc, #48]	; (8105cd0 <__libc_init_array+0x44>)
 8105ca0:	f000 ffec 	bl	8106c7c <_init>
 8105ca4:	1b64      	subs	r4, r4, r5
 8105ca6:	10a4      	asrs	r4, r4, #2
 8105ca8:	2600      	movs	r6, #0
 8105caa:	42a6      	cmp	r6, r4
 8105cac:	d105      	bne.n	8105cba <__libc_init_array+0x2e>
 8105cae:	bd70      	pop	{r4, r5, r6, pc}
 8105cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8105cb4:	4798      	blx	r3
 8105cb6:	3601      	adds	r6, #1
 8105cb8:	e7ee      	b.n	8105c98 <__libc_init_array+0xc>
 8105cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8105cbe:	4798      	blx	r3
 8105cc0:	3601      	adds	r6, #1
 8105cc2:	e7f2      	b.n	8105caa <__libc_init_array+0x1e>
 8105cc4:	08106e98 	.word	0x08106e98
 8105cc8:	08106e98 	.word	0x08106e98
 8105ccc:	08106e98 	.word	0x08106e98
 8105cd0:	08106e9c 	.word	0x08106e9c

08105cd4 <memset>:
 8105cd4:	4402      	add	r2, r0
 8105cd6:	4603      	mov	r3, r0
 8105cd8:	4293      	cmp	r3, r2
 8105cda:	d100      	bne.n	8105cde <memset+0xa>
 8105cdc:	4770      	bx	lr
 8105cde:	f803 1b01 	strb.w	r1, [r3], #1
 8105ce2:	e7f9      	b.n	8105cd8 <memset+0x4>

08105ce4 <iprintf>:
 8105ce4:	b40f      	push	{r0, r1, r2, r3}
 8105ce6:	4b0a      	ldr	r3, [pc, #40]	; (8105d10 <iprintf+0x2c>)
 8105ce8:	b513      	push	{r0, r1, r4, lr}
 8105cea:	681c      	ldr	r4, [r3, #0]
 8105cec:	b124      	cbz	r4, 8105cf8 <iprintf+0x14>
 8105cee:	69a3      	ldr	r3, [r4, #24]
 8105cf0:	b913      	cbnz	r3, 8105cf8 <iprintf+0x14>
 8105cf2:	4620      	mov	r0, r4
 8105cf4:	f000 fa5e 	bl	81061b4 <__sinit>
 8105cf8:	ab05      	add	r3, sp, #20
 8105cfa:	9a04      	ldr	r2, [sp, #16]
 8105cfc:	68a1      	ldr	r1, [r4, #8]
 8105cfe:	9301      	str	r3, [sp, #4]
 8105d00:	4620      	mov	r0, r4
 8105d02:	f000 fc2f 	bl	8106564 <_vfiprintf_r>
 8105d06:	b002      	add	sp, #8
 8105d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105d0c:	b004      	add	sp, #16
 8105d0e:	4770      	bx	lr
 8105d10:	10000010 	.word	0x10000010

08105d14 <_puts_r>:
 8105d14:	b570      	push	{r4, r5, r6, lr}
 8105d16:	460e      	mov	r6, r1
 8105d18:	4605      	mov	r5, r0
 8105d1a:	b118      	cbz	r0, 8105d24 <_puts_r+0x10>
 8105d1c:	6983      	ldr	r3, [r0, #24]
 8105d1e:	b90b      	cbnz	r3, 8105d24 <_puts_r+0x10>
 8105d20:	f000 fa48 	bl	81061b4 <__sinit>
 8105d24:	69ab      	ldr	r3, [r5, #24]
 8105d26:	68ac      	ldr	r4, [r5, #8]
 8105d28:	b913      	cbnz	r3, 8105d30 <_puts_r+0x1c>
 8105d2a:	4628      	mov	r0, r5
 8105d2c:	f000 fa42 	bl	81061b4 <__sinit>
 8105d30:	4b2c      	ldr	r3, [pc, #176]	; (8105de4 <_puts_r+0xd0>)
 8105d32:	429c      	cmp	r4, r3
 8105d34:	d120      	bne.n	8105d78 <_puts_r+0x64>
 8105d36:	686c      	ldr	r4, [r5, #4]
 8105d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105d3a:	07db      	lsls	r3, r3, #31
 8105d3c:	d405      	bmi.n	8105d4a <_puts_r+0x36>
 8105d3e:	89a3      	ldrh	r3, [r4, #12]
 8105d40:	0598      	lsls	r0, r3, #22
 8105d42:	d402      	bmi.n	8105d4a <_puts_r+0x36>
 8105d44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105d46:	f000 fad3 	bl	81062f0 <__retarget_lock_acquire_recursive>
 8105d4a:	89a3      	ldrh	r3, [r4, #12]
 8105d4c:	0719      	lsls	r1, r3, #28
 8105d4e:	d51d      	bpl.n	8105d8c <_puts_r+0x78>
 8105d50:	6923      	ldr	r3, [r4, #16]
 8105d52:	b1db      	cbz	r3, 8105d8c <_puts_r+0x78>
 8105d54:	3e01      	subs	r6, #1
 8105d56:	68a3      	ldr	r3, [r4, #8]
 8105d58:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8105d5c:	3b01      	subs	r3, #1
 8105d5e:	60a3      	str	r3, [r4, #8]
 8105d60:	bb39      	cbnz	r1, 8105db2 <_puts_r+0x9e>
 8105d62:	2b00      	cmp	r3, #0
 8105d64:	da38      	bge.n	8105dd8 <_puts_r+0xc4>
 8105d66:	4622      	mov	r2, r4
 8105d68:	210a      	movs	r1, #10
 8105d6a:	4628      	mov	r0, r5
 8105d6c:	f000 f848 	bl	8105e00 <__swbuf_r>
 8105d70:	3001      	adds	r0, #1
 8105d72:	d011      	beq.n	8105d98 <_puts_r+0x84>
 8105d74:	250a      	movs	r5, #10
 8105d76:	e011      	b.n	8105d9c <_puts_r+0x88>
 8105d78:	4b1b      	ldr	r3, [pc, #108]	; (8105de8 <_puts_r+0xd4>)
 8105d7a:	429c      	cmp	r4, r3
 8105d7c:	d101      	bne.n	8105d82 <_puts_r+0x6e>
 8105d7e:	68ac      	ldr	r4, [r5, #8]
 8105d80:	e7da      	b.n	8105d38 <_puts_r+0x24>
 8105d82:	4b1a      	ldr	r3, [pc, #104]	; (8105dec <_puts_r+0xd8>)
 8105d84:	429c      	cmp	r4, r3
 8105d86:	bf08      	it	eq
 8105d88:	68ec      	ldreq	r4, [r5, #12]
 8105d8a:	e7d5      	b.n	8105d38 <_puts_r+0x24>
 8105d8c:	4621      	mov	r1, r4
 8105d8e:	4628      	mov	r0, r5
 8105d90:	f000 f888 	bl	8105ea4 <__swsetup_r>
 8105d94:	2800      	cmp	r0, #0
 8105d96:	d0dd      	beq.n	8105d54 <_puts_r+0x40>
 8105d98:	f04f 35ff 	mov.w	r5, #4294967295
 8105d9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105d9e:	07da      	lsls	r2, r3, #31
 8105da0:	d405      	bmi.n	8105dae <_puts_r+0x9a>
 8105da2:	89a3      	ldrh	r3, [r4, #12]
 8105da4:	059b      	lsls	r3, r3, #22
 8105da6:	d402      	bmi.n	8105dae <_puts_r+0x9a>
 8105da8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105daa:	f000 faa2 	bl	81062f2 <__retarget_lock_release_recursive>
 8105dae:	4628      	mov	r0, r5
 8105db0:	bd70      	pop	{r4, r5, r6, pc}
 8105db2:	2b00      	cmp	r3, #0
 8105db4:	da04      	bge.n	8105dc0 <_puts_r+0xac>
 8105db6:	69a2      	ldr	r2, [r4, #24]
 8105db8:	429a      	cmp	r2, r3
 8105dba:	dc06      	bgt.n	8105dca <_puts_r+0xb6>
 8105dbc:	290a      	cmp	r1, #10
 8105dbe:	d004      	beq.n	8105dca <_puts_r+0xb6>
 8105dc0:	6823      	ldr	r3, [r4, #0]
 8105dc2:	1c5a      	adds	r2, r3, #1
 8105dc4:	6022      	str	r2, [r4, #0]
 8105dc6:	7019      	strb	r1, [r3, #0]
 8105dc8:	e7c5      	b.n	8105d56 <_puts_r+0x42>
 8105dca:	4622      	mov	r2, r4
 8105dcc:	4628      	mov	r0, r5
 8105dce:	f000 f817 	bl	8105e00 <__swbuf_r>
 8105dd2:	3001      	adds	r0, #1
 8105dd4:	d1bf      	bne.n	8105d56 <_puts_r+0x42>
 8105dd6:	e7df      	b.n	8105d98 <_puts_r+0x84>
 8105dd8:	6823      	ldr	r3, [r4, #0]
 8105dda:	250a      	movs	r5, #10
 8105ddc:	1c5a      	adds	r2, r3, #1
 8105dde:	6022      	str	r2, [r4, #0]
 8105de0:	701d      	strb	r5, [r3, #0]
 8105de2:	e7db      	b.n	8105d9c <_puts_r+0x88>
 8105de4:	08106e1c 	.word	0x08106e1c
 8105de8:	08106e3c 	.word	0x08106e3c
 8105dec:	08106dfc 	.word	0x08106dfc

08105df0 <puts>:
 8105df0:	4b02      	ldr	r3, [pc, #8]	; (8105dfc <puts+0xc>)
 8105df2:	4601      	mov	r1, r0
 8105df4:	6818      	ldr	r0, [r3, #0]
 8105df6:	f7ff bf8d 	b.w	8105d14 <_puts_r>
 8105dfa:	bf00      	nop
 8105dfc:	10000010 	.word	0x10000010

08105e00 <__swbuf_r>:
 8105e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105e02:	460e      	mov	r6, r1
 8105e04:	4614      	mov	r4, r2
 8105e06:	4605      	mov	r5, r0
 8105e08:	b118      	cbz	r0, 8105e12 <__swbuf_r+0x12>
 8105e0a:	6983      	ldr	r3, [r0, #24]
 8105e0c:	b90b      	cbnz	r3, 8105e12 <__swbuf_r+0x12>
 8105e0e:	f000 f9d1 	bl	81061b4 <__sinit>
 8105e12:	4b21      	ldr	r3, [pc, #132]	; (8105e98 <__swbuf_r+0x98>)
 8105e14:	429c      	cmp	r4, r3
 8105e16:	d12b      	bne.n	8105e70 <__swbuf_r+0x70>
 8105e18:	686c      	ldr	r4, [r5, #4]
 8105e1a:	69a3      	ldr	r3, [r4, #24]
 8105e1c:	60a3      	str	r3, [r4, #8]
 8105e1e:	89a3      	ldrh	r3, [r4, #12]
 8105e20:	071a      	lsls	r2, r3, #28
 8105e22:	d52f      	bpl.n	8105e84 <__swbuf_r+0x84>
 8105e24:	6923      	ldr	r3, [r4, #16]
 8105e26:	b36b      	cbz	r3, 8105e84 <__swbuf_r+0x84>
 8105e28:	6923      	ldr	r3, [r4, #16]
 8105e2a:	6820      	ldr	r0, [r4, #0]
 8105e2c:	1ac0      	subs	r0, r0, r3
 8105e2e:	6963      	ldr	r3, [r4, #20]
 8105e30:	b2f6      	uxtb	r6, r6
 8105e32:	4283      	cmp	r3, r0
 8105e34:	4637      	mov	r7, r6
 8105e36:	dc04      	bgt.n	8105e42 <__swbuf_r+0x42>
 8105e38:	4621      	mov	r1, r4
 8105e3a:	4628      	mov	r0, r5
 8105e3c:	f000 f926 	bl	810608c <_fflush_r>
 8105e40:	bb30      	cbnz	r0, 8105e90 <__swbuf_r+0x90>
 8105e42:	68a3      	ldr	r3, [r4, #8]
 8105e44:	3b01      	subs	r3, #1
 8105e46:	60a3      	str	r3, [r4, #8]
 8105e48:	6823      	ldr	r3, [r4, #0]
 8105e4a:	1c5a      	adds	r2, r3, #1
 8105e4c:	6022      	str	r2, [r4, #0]
 8105e4e:	701e      	strb	r6, [r3, #0]
 8105e50:	6963      	ldr	r3, [r4, #20]
 8105e52:	3001      	adds	r0, #1
 8105e54:	4283      	cmp	r3, r0
 8105e56:	d004      	beq.n	8105e62 <__swbuf_r+0x62>
 8105e58:	89a3      	ldrh	r3, [r4, #12]
 8105e5a:	07db      	lsls	r3, r3, #31
 8105e5c:	d506      	bpl.n	8105e6c <__swbuf_r+0x6c>
 8105e5e:	2e0a      	cmp	r6, #10
 8105e60:	d104      	bne.n	8105e6c <__swbuf_r+0x6c>
 8105e62:	4621      	mov	r1, r4
 8105e64:	4628      	mov	r0, r5
 8105e66:	f000 f911 	bl	810608c <_fflush_r>
 8105e6a:	b988      	cbnz	r0, 8105e90 <__swbuf_r+0x90>
 8105e6c:	4638      	mov	r0, r7
 8105e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8105e70:	4b0a      	ldr	r3, [pc, #40]	; (8105e9c <__swbuf_r+0x9c>)
 8105e72:	429c      	cmp	r4, r3
 8105e74:	d101      	bne.n	8105e7a <__swbuf_r+0x7a>
 8105e76:	68ac      	ldr	r4, [r5, #8]
 8105e78:	e7cf      	b.n	8105e1a <__swbuf_r+0x1a>
 8105e7a:	4b09      	ldr	r3, [pc, #36]	; (8105ea0 <__swbuf_r+0xa0>)
 8105e7c:	429c      	cmp	r4, r3
 8105e7e:	bf08      	it	eq
 8105e80:	68ec      	ldreq	r4, [r5, #12]
 8105e82:	e7ca      	b.n	8105e1a <__swbuf_r+0x1a>
 8105e84:	4621      	mov	r1, r4
 8105e86:	4628      	mov	r0, r5
 8105e88:	f000 f80c 	bl	8105ea4 <__swsetup_r>
 8105e8c:	2800      	cmp	r0, #0
 8105e8e:	d0cb      	beq.n	8105e28 <__swbuf_r+0x28>
 8105e90:	f04f 37ff 	mov.w	r7, #4294967295
 8105e94:	e7ea      	b.n	8105e6c <__swbuf_r+0x6c>
 8105e96:	bf00      	nop
 8105e98:	08106e1c 	.word	0x08106e1c
 8105e9c:	08106e3c 	.word	0x08106e3c
 8105ea0:	08106dfc 	.word	0x08106dfc

08105ea4 <__swsetup_r>:
 8105ea4:	4b32      	ldr	r3, [pc, #200]	; (8105f70 <__swsetup_r+0xcc>)
 8105ea6:	b570      	push	{r4, r5, r6, lr}
 8105ea8:	681d      	ldr	r5, [r3, #0]
 8105eaa:	4606      	mov	r6, r0
 8105eac:	460c      	mov	r4, r1
 8105eae:	b125      	cbz	r5, 8105eba <__swsetup_r+0x16>
 8105eb0:	69ab      	ldr	r3, [r5, #24]
 8105eb2:	b913      	cbnz	r3, 8105eba <__swsetup_r+0x16>
 8105eb4:	4628      	mov	r0, r5
 8105eb6:	f000 f97d 	bl	81061b4 <__sinit>
 8105eba:	4b2e      	ldr	r3, [pc, #184]	; (8105f74 <__swsetup_r+0xd0>)
 8105ebc:	429c      	cmp	r4, r3
 8105ebe:	d10f      	bne.n	8105ee0 <__swsetup_r+0x3c>
 8105ec0:	686c      	ldr	r4, [r5, #4]
 8105ec2:	89a3      	ldrh	r3, [r4, #12]
 8105ec4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105ec8:	0719      	lsls	r1, r3, #28
 8105eca:	d42c      	bmi.n	8105f26 <__swsetup_r+0x82>
 8105ecc:	06dd      	lsls	r5, r3, #27
 8105ece:	d411      	bmi.n	8105ef4 <__swsetup_r+0x50>
 8105ed0:	2309      	movs	r3, #9
 8105ed2:	6033      	str	r3, [r6, #0]
 8105ed4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8105ed8:	81a3      	strh	r3, [r4, #12]
 8105eda:	f04f 30ff 	mov.w	r0, #4294967295
 8105ede:	e03e      	b.n	8105f5e <__swsetup_r+0xba>
 8105ee0:	4b25      	ldr	r3, [pc, #148]	; (8105f78 <__swsetup_r+0xd4>)
 8105ee2:	429c      	cmp	r4, r3
 8105ee4:	d101      	bne.n	8105eea <__swsetup_r+0x46>
 8105ee6:	68ac      	ldr	r4, [r5, #8]
 8105ee8:	e7eb      	b.n	8105ec2 <__swsetup_r+0x1e>
 8105eea:	4b24      	ldr	r3, [pc, #144]	; (8105f7c <__swsetup_r+0xd8>)
 8105eec:	429c      	cmp	r4, r3
 8105eee:	bf08      	it	eq
 8105ef0:	68ec      	ldreq	r4, [r5, #12]
 8105ef2:	e7e6      	b.n	8105ec2 <__swsetup_r+0x1e>
 8105ef4:	0758      	lsls	r0, r3, #29
 8105ef6:	d512      	bpl.n	8105f1e <__swsetup_r+0x7a>
 8105ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105efa:	b141      	cbz	r1, 8105f0e <__swsetup_r+0x6a>
 8105efc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105f00:	4299      	cmp	r1, r3
 8105f02:	d002      	beq.n	8105f0a <__swsetup_r+0x66>
 8105f04:	4630      	mov	r0, r6
 8105f06:	f000 fa59 	bl	81063bc <_free_r>
 8105f0a:	2300      	movs	r3, #0
 8105f0c:	6363      	str	r3, [r4, #52]	; 0x34
 8105f0e:	89a3      	ldrh	r3, [r4, #12]
 8105f10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8105f14:	81a3      	strh	r3, [r4, #12]
 8105f16:	2300      	movs	r3, #0
 8105f18:	6063      	str	r3, [r4, #4]
 8105f1a:	6923      	ldr	r3, [r4, #16]
 8105f1c:	6023      	str	r3, [r4, #0]
 8105f1e:	89a3      	ldrh	r3, [r4, #12]
 8105f20:	f043 0308 	orr.w	r3, r3, #8
 8105f24:	81a3      	strh	r3, [r4, #12]
 8105f26:	6923      	ldr	r3, [r4, #16]
 8105f28:	b94b      	cbnz	r3, 8105f3e <__swsetup_r+0x9a>
 8105f2a:	89a3      	ldrh	r3, [r4, #12]
 8105f2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8105f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105f34:	d003      	beq.n	8105f3e <__swsetup_r+0x9a>
 8105f36:	4621      	mov	r1, r4
 8105f38:	4630      	mov	r0, r6
 8105f3a:	f000 f9ff 	bl	810633c <__smakebuf_r>
 8105f3e:	89a0      	ldrh	r0, [r4, #12]
 8105f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105f44:	f010 0301 	ands.w	r3, r0, #1
 8105f48:	d00a      	beq.n	8105f60 <__swsetup_r+0xbc>
 8105f4a:	2300      	movs	r3, #0
 8105f4c:	60a3      	str	r3, [r4, #8]
 8105f4e:	6963      	ldr	r3, [r4, #20]
 8105f50:	425b      	negs	r3, r3
 8105f52:	61a3      	str	r3, [r4, #24]
 8105f54:	6923      	ldr	r3, [r4, #16]
 8105f56:	b943      	cbnz	r3, 8105f6a <__swsetup_r+0xc6>
 8105f58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8105f5c:	d1ba      	bne.n	8105ed4 <__swsetup_r+0x30>
 8105f5e:	bd70      	pop	{r4, r5, r6, pc}
 8105f60:	0781      	lsls	r1, r0, #30
 8105f62:	bf58      	it	pl
 8105f64:	6963      	ldrpl	r3, [r4, #20]
 8105f66:	60a3      	str	r3, [r4, #8]
 8105f68:	e7f4      	b.n	8105f54 <__swsetup_r+0xb0>
 8105f6a:	2000      	movs	r0, #0
 8105f6c:	e7f7      	b.n	8105f5e <__swsetup_r+0xba>
 8105f6e:	bf00      	nop
 8105f70:	10000010 	.word	0x10000010
 8105f74:	08106e1c 	.word	0x08106e1c
 8105f78:	08106e3c 	.word	0x08106e3c
 8105f7c:	08106dfc 	.word	0x08106dfc

08105f80 <__sflush_r>:
 8105f80:	898a      	ldrh	r2, [r1, #12]
 8105f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105f86:	4605      	mov	r5, r0
 8105f88:	0710      	lsls	r0, r2, #28
 8105f8a:	460c      	mov	r4, r1
 8105f8c:	d458      	bmi.n	8106040 <__sflush_r+0xc0>
 8105f8e:	684b      	ldr	r3, [r1, #4]
 8105f90:	2b00      	cmp	r3, #0
 8105f92:	dc05      	bgt.n	8105fa0 <__sflush_r+0x20>
 8105f94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8105f96:	2b00      	cmp	r3, #0
 8105f98:	dc02      	bgt.n	8105fa0 <__sflush_r+0x20>
 8105f9a:	2000      	movs	r0, #0
 8105f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8105fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105fa2:	2e00      	cmp	r6, #0
 8105fa4:	d0f9      	beq.n	8105f9a <__sflush_r+0x1a>
 8105fa6:	2300      	movs	r3, #0
 8105fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8105fac:	682f      	ldr	r7, [r5, #0]
 8105fae:	602b      	str	r3, [r5, #0]
 8105fb0:	d032      	beq.n	8106018 <__sflush_r+0x98>
 8105fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8105fb4:	89a3      	ldrh	r3, [r4, #12]
 8105fb6:	075a      	lsls	r2, r3, #29
 8105fb8:	d505      	bpl.n	8105fc6 <__sflush_r+0x46>
 8105fba:	6863      	ldr	r3, [r4, #4]
 8105fbc:	1ac0      	subs	r0, r0, r3
 8105fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105fc0:	b10b      	cbz	r3, 8105fc6 <__sflush_r+0x46>
 8105fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8105fc4:	1ac0      	subs	r0, r0, r3
 8105fc6:	2300      	movs	r3, #0
 8105fc8:	4602      	mov	r2, r0
 8105fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105fcc:	6a21      	ldr	r1, [r4, #32]
 8105fce:	4628      	mov	r0, r5
 8105fd0:	47b0      	blx	r6
 8105fd2:	1c43      	adds	r3, r0, #1
 8105fd4:	89a3      	ldrh	r3, [r4, #12]
 8105fd6:	d106      	bne.n	8105fe6 <__sflush_r+0x66>
 8105fd8:	6829      	ldr	r1, [r5, #0]
 8105fda:	291d      	cmp	r1, #29
 8105fdc:	d82c      	bhi.n	8106038 <__sflush_r+0xb8>
 8105fde:	4a2a      	ldr	r2, [pc, #168]	; (8106088 <__sflush_r+0x108>)
 8105fe0:	40ca      	lsrs	r2, r1
 8105fe2:	07d6      	lsls	r6, r2, #31
 8105fe4:	d528      	bpl.n	8106038 <__sflush_r+0xb8>
 8105fe6:	2200      	movs	r2, #0
 8105fe8:	6062      	str	r2, [r4, #4]
 8105fea:	04d9      	lsls	r1, r3, #19
 8105fec:	6922      	ldr	r2, [r4, #16]
 8105fee:	6022      	str	r2, [r4, #0]
 8105ff0:	d504      	bpl.n	8105ffc <__sflush_r+0x7c>
 8105ff2:	1c42      	adds	r2, r0, #1
 8105ff4:	d101      	bne.n	8105ffa <__sflush_r+0x7a>
 8105ff6:	682b      	ldr	r3, [r5, #0]
 8105ff8:	b903      	cbnz	r3, 8105ffc <__sflush_r+0x7c>
 8105ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8105ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105ffe:	602f      	str	r7, [r5, #0]
 8106000:	2900      	cmp	r1, #0
 8106002:	d0ca      	beq.n	8105f9a <__sflush_r+0x1a>
 8106004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8106008:	4299      	cmp	r1, r3
 810600a:	d002      	beq.n	8106012 <__sflush_r+0x92>
 810600c:	4628      	mov	r0, r5
 810600e:	f000 f9d5 	bl	81063bc <_free_r>
 8106012:	2000      	movs	r0, #0
 8106014:	6360      	str	r0, [r4, #52]	; 0x34
 8106016:	e7c1      	b.n	8105f9c <__sflush_r+0x1c>
 8106018:	6a21      	ldr	r1, [r4, #32]
 810601a:	2301      	movs	r3, #1
 810601c:	4628      	mov	r0, r5
 810601e:	47b0      	blx	r6
 8106020:	1c41      	adds	r1, r0, #1
 8106022:	d1c7      	bne.n	8105fb4 <__sflush_r+0x34>
 8106024:	682b      	ldr	r3, [r5, #0]
 8106026:	2b00      	cmp	r3, #0
 8106028:	d0c4      	beq.n	8105fb4 <__sflush_r+0x34>
 810602a:	2b1d      	cmp	r3, #29
 810602c:	d001      	beq.n	8106032 <__sflush_r+0xb2>
 810602e:	2b16      	cmp	r3, #22
 8106030:	d101      	bne.n	8106036 <__sflush_r+0xb6>
 8106032:	602f      	str	r7, [r5, #0]
 8106034:	e7b1      	b.n	8105f9a <__sflush_r+0x1a>
 8106036:	89a3      	ldrh	r3, [r4, #12]
 8106038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810603c:	81a3      	strh	r3, [r4, #12]
 810603e:	e7ad      	b.n	8105f9c <__sflush_r+0x1c>
 8106040:	690f      	ldr	r7, [r1, #16]
 8106042:	2f00      	cmp	r7, #0
 8106044:	d0a9      	beq.n	8105f9a <__sflush_r+0x1a>
 8106046:	0793      	lsls	r3, r2, #30
 8106048:	680e      	ldr	r6, [r1, #0]
 810604a:	bf08      	it	eq
 810604c:	694b      	ldreq	r3, [r1, #20]
 810604e:	600f      	str	r7, [r1, #0]
 8106050:	bf18      	it	ne
 8106052:	2300      	movne	r3, #0
 8106054:	eba6 0807 	sub.w	r8, r6, r7
 8106058:	608b      	str	r3, [r1, #8]
 810605a:	f1b8 0f00 	cmp.w	r8, #0
 810605e:	dd9c      	ble.n	8105f9a <__sflush_r+0x1a>
 8106060:	6a21      	ldr	r1, [r4, #32]
 8106062:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8106064:	4643      	mov	r3, r8
 8106066:	463a      	mov	r2, r7
 8106068:	4628      	mov	r0, r5
 810606a:	47b0      	blx	r6
 810606c:	2800      	cmp	r0, #0
 810606e:	dc06      	bgt.n	810607e <__sflush_r+0xfe>
 8106070:	89a3      	ldrh	r3, [r4, #12]
 8106072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106076:	81a3      	strh	r3, [r4, #12]
 8106078:	f04f 30ff 	mov.w	r0, #4294967295
 810607c:	e78e      	b.n	8105f9c <__sflush_r+0x1c>
 810607e:	4407      	add	r7, r0
 8106080:	eba8 0800 	sub.w	r8, r8, r0
 8106084:	e7e9      	b.n	810605a <__sflush_r+0xda>
 8106086:	bf00      	nop
 8106088:	20400001 	.word	0x20400001

0810608c <_fflush_r>:
 810608c:	b538      	push	{r3, r4, r5, lr}
 810608e:	690b      	ldr	r3, [r1, #16]
 8106090:	4605      	mov	r5, r0
 8106092:	460c      	mov	r4, r1
 8106094:	b913      	cbnz	r3, 810609c <_fflush_r+0x10>
 8106096:	2500      	movs	r5, #0
 8106098:	4628      	mov	r0, r5
 810609a:	bd38      	pop	{r3, r4, r5, pc}
 810609c:	b118      	cbz	r0, 81060a6 <_fflush_r+0x1a>
 810609e:	6983      	ldr	r3, [r0, #24]
 81060a0:	b90b      	cbnz	r3, 81060a6 <_fflush_r+0x1a>
 81060a2:	f000 f887 	bl	81061b4 <__sinit>
 81060a6:	4b14      	ldr	r3, [pc, #80]	; (81060f8 <_fflush_r+0x6c>)
 81060a8:	429c      	cmp	r4, r3
 81060aa:	d11b      	bne.n	81060e4 <_fflush_r+0x58>
 81060ac:	686c      	ldr	r4, [r5, #4]
 81060ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81060b2:	2b00      	cmp	r3, #0
 81060b4:	d0ef      	beq.n	8106096 <_fflush_r+0xa>
 81060b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81060b8:	07d0      	lsls	r0, r2, #31
 81060ba:	d404      	bmi.n	81060c6 <_fflush_r+0x3a>
 81060bc:	0599      	lsls	r1, r3, #22
 81060be:	d402      	bmi.n	81060c6 <_fflush_r+0x3a>
 81060c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81060c2:	f000 f915 	bl	81062f0 <__retarget_lock_acquire_recursive>
 81060c6:	4628      	mov	r0, r5
 81060c8:	4621      	mov	r1, r4
 81060ca:	f7ff ff59 	bl	8105f80 <__sflush_r>
 81060ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81060d0:	07da      	lsls	r2, r3, #31
 81060d2:	4605      	mov	r5, r0
 81060d4:	d4e0      	bmi.n	8106098 <_fflush_r+0xc>
 81060d6:	89a3      	ldrh	r3, [r4, #12]
 81060d8:	059b      	lsls	r3, r3, #22
 81060da:	d4dd      	bmi.n	8106098 <_fflush_r+0xc>
 81060dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81060de:	f000 f908 	bl	81062f2 <__retarget_lock_release_recursive>
 81060e2:	e7d9      	b.n	8106098 <_fflush_r+0xc>
 81060e4:	4b05      	ldr	r3, [pc, #20]	; (81060fc <_fflush_r+0x70>)
 81060e6:	429c      	cmp	r4, r3
 81060e8:	d101      	bne.n	81060ee <_fflush_r+0x62>
 81060ea:	68ac      	ldr	r4, [r5, #8]
 81060ec:	e7df      	b.n	81060ae <_fflush_r+0x22>
 81060ee:	4b04      	ldr	r3, [pc, #16]	; (8106100 <_fflush_r+0x74>)
 81060f0:	429c      	cmp	r4, r3
 81060f2:	bf08      	it	eq
 81060f4:	68ec      	ldreq	r4, [r5, #12]
 81060f6:	e7da      	b.n	81060ae <_fflush_r+0x22>
 81060f8:	08106e1c 	.word	0x08106e1c
 81060fc:	08106e3c 	.word	0x08106e3c
 8106100:	08106dfc 	.word	0x08106dfc

08106104 <std>:
 8106104:	2300      	movs	r3, #0
 8106106:	b510      	push	{r4, lr}
 8106108:	4604      	mov	r4, r0
 810610a:	e9c0 3300 	strd	r3, r3, [r0]
 810610e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8106112:	6083      	str	r3, [r0, #8]
 8106114:	8181      	strh	r1, [r0, #12]
 8106116:	6643      	str	r3, [r0, #100]	; 0x64
 8106118:	81c2      	strh	r2, [r0, #14]
 810611a:	6183      	str	r3, [r0, #24]
 810611c:	4619      	mov	r1, r3
 810611e:	2208      	movs	r2, #8
 8106120:	305c      	adds	r0, #92	; 0x5c
 8106122:	f7ff fdd7 	bl	8105cd4 <memset>
 8106126:	4b05      	ldr	r3, [pc, #20]	; (810613c <std+0x38>)
 8106128:	6263      	str	r3, [r4, #36]	; 0x24
 810612a:	4b05      	ldr	r3, [pc, #20]	; (8106140 <std+0x3c>)
 810612c:	62a3      	str	r3, [r4, #40]	; 0x28
 810612e:	4b05      	ldr	r3, [pc, #20]	; (8106144 <std+0x40>)
 8106130:	62e3      	str	r3, [r4, #44]	; 0x2c
 8106132:	4b05      	ldr	r3, [pc, #20]	; (8106148 <std+0x44>)
 8106134:	6224      	str	r4, [r4, #32]
 8106136:	6323      	str	r3, [r4, #48]	; 0x30
 8106138:	bd10      	pop	{r4, pc}
 810613a:	bf00      	nop
 810613c:	08106b0d 	.word	0x08106b0d
 8106140:	08106b2f 	.word	0x08106b2f
 8106144:	08106b67 	.word	0x08106b67
 8106148:	08106b8b 	.word	0x08106b8b

0810614c <_cleanup_r>:
 810614c:	4901      	ldr	r1, [pc, #4]	; (8106154 <_cleanup_r+0x8>)
 810614e:	f000 b8af 	b.w	81062b0 <_fwalk_reent>
 8106152:	bf00      	nop
 8106154:	0810608d 	.word	0x0810608d

08106158 <__sfmoreglue>:
 8106158:	b570      	push	{r4, r5, r6, lr}
 810615a:	1e4a      	subs	r2, r1, #1
 810615c:	2568      	movs	r5, #104	; 0x68
 810615e:	4355      	muls	r5, r2
 8106160:	460e      	mov	r6, r1
 8106162:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8106166:	f000 f979 	bl	810645c <_malloc_r>
 810616a:	4604      	mov	r4, r0
 810616c:	b140      	cbz	r0, 8106180 <__sfmoreglue+0x28>
 810616e:	2100      	movs	r1, #0
 8106170:	e9c0 1600 	strd	r1, r6, [r0]
 8106174:	300c      	adds	r0, #12
 8106176:	60a0      	str	r0, [r4, #8]
 8106178:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810617c:	f7ff fdaa 	bl	8105cd4 <memset>
 8106180:	4620      	mov	r0, r4
 8106182:	bd70      	pop	{r4, r5, r6, pc}

08106184 <__sfp_lock_acquire>:
 8106184:	4801      	ldr	r0, [pc, #4]	; (810618c <__sfp_lock_acquire+0x8>)
 8106186:	f000 b8b3 	b.w	81062f0 <__retarget_lock_acquire_recursive>
 810618a:	bf00      	nop
 810618c:	10000284 	.word	0x10000284

08106190 <__sfp_lock_release>:
 8106190:	4801      	ldr	r0, [pc, #4]	; (8106198 <__sfp_lock_release+0x8>)
 8106192:	f000 b8ae 	b.w	81062f2 <__retarget_lock_release_recursive>
 8106196:	bf00      	nop
 8106198:	10000284 	.word	0x10000284

0810619c <__sinit_lock_acquire>:
 810619c:	4801      	ldr	r0, [pc, #4]	; (81061a4 <__sinit_lock_acquire+0x8>)
 810619e:	f000 b8a7 	b.w	81062f0 <__retarget_lock_acquire_recursive>
 81061a2:	bf00      	nop
 81061a4:	1000027f 	.word	0x1000027f

081061a8 <__sinit_lock_release>:
 81061a8:	4801      	ldr	r0, [pc, #4]	; (81061b0 <__sinit_lock_release+0x8>)
 81061aa:	f000 b8a2 	b.w	81062f2 <__retarget_lock_release_recursive>
 81061ae:	bf00      	nop
 81061b0:	1000027f 	.word	0x1000027f

081061b4 <__sinit>:
 81061b4:	b510      	push	{r4, lr}
 81061b6:	4604      	mov	r4, r0
 81061b8:	f7ff fff0 	bl	810619c <__sinit_lock_acquire>
 81061bc:	69a3      	ldr	r3, [r4, #24]
 81061be:	b11b      	cbz	r3, 81061c8 <__sinit+0x14>
 81061c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81061c4:	f7ff bff0 	b.w	81061a8 <__sinit_lock_release>
 81061c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 81061cc:	6523      	str	r3, [r4, #80]	; 0x50
 81061ce:	4b13      	ldr	r3, [pc, #76]	; (810621c <__sinit+0x68>)
 81061d0:	4a13      	ldr	r2, [pc, #76]	; (8106220 <__sinit+0x6c>)
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	62a2      	str	r2, [r4, #40]	; 0x28
 81061d6:	42a3      	cmp	r3, r4
 81061d8:	bf04      	itt	eq
 81061da:	2301      	moveq	r3, #1
 81061dc:	61a3      	streq	r3, [r4, #24]
 81061de:	4620      	mov	r0, r4
 81061e0:	f000 f820 	bl	8106224 <__sfp>
 81061e4:	6060      	str	r0, [r4, #4]
 81061e6:	4620      	mov	r0, r4
 81061e8:	f000 f81c 	bl	8106224 <__sfp>
 81061ec:	60a0      	str	r0, [r4, #8]
 81061ee:	4620      	mov	r0, r4
 81061f0:	f000 f818 	bl	8106224 <__sfp>
 81061f4:	2200      	movs	r2, #0
 81061f6:	60e0      	str	r0, [r4, #12]
 81061f8:	2104      	movs	r1, #4
 81061fa:	6860      	ldr	r0, [r4, #4]
 81061fc:	f7ff ff82 	bl	8106104 <std>
 8106200:	68a0      	ldr	r0, [r4, #8]
 8106202:	2201      	movs	r2, #1
 8106204:	2109      	movs	r1, #9
 8106206:	f7ff ff7d 	bl	8106104 <std>
 810620a:	68e0      	ldr	r0, [r4, #12]
 810620c:	2202      	movs	r2, #2
 810620e:	2112      	movs	r1, #18
 8106210:	f7ff ff78 	bl	8106104 <std>
 8106214:	2301      	movs	r3, #1
 8106216:	61a3      	str	r3, [r4, #24]
 8106218:	e7d2      	b.n	81061c0 <__sinit+0xc>
 810621a:	bf00      	nop
 810621c:	08106df8 	.word	0x08106df8
 8106220:	0810614d 	.word	0x0810614d

08106224 <__sfp>:
 8106224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106226:	4607      	mov	r7, r0
 8106228:	f7ff ffac 	bl	8106184 <__sfp_lock_acquire>
 810622c:	4b1e      	ldr	r3, [pc, #120]	; (81062a8 <__sfp+0x84>)
 810622e:	681e      	ldr	r6, [r3, #0]
 8106230:	69b3      	ldr	r3, [r6, #24]
 8106232:	b913      	cbnz	r3, 810623a <__sfp+0x16>
 8106234:	4630      	mov	r0, r6
 8106236:	f7ff ffbd 	bl	81061b4 <__sinit>
 810623a:	3648      	adds	r6, #72	; 0x48
 810623c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8106240:	3b01      	subs	r3, #1
 8106242:	d503      	bpl.n	810624c <__sfp+0x28>
 8106244:	6833      	ldr	r3, [r6, #0]
 8106246:	b30b      	cbz	r3, 810628c <__sfp+0x68>
 8106248:	6836      	ldr	r6, [r6, #0]
 810624a:	e7f7      	b.n	810623c <__sfp+0x18>
 810624c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8106250:	b9d5      	cbnz	r5, 8106288 <__sfp+0x64>
 8106252:	4b16      	ldr	r3, [pc, #88]	; (81062ac <__sfp+0x88>)
 8106254:	60e3      	str	r3, [r4, #12]
 8106256:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810625a:	6665      	str	r5, [r4, #100]	; 0x64
 810625c:	f000 f847 	bl	81062ee <__retarget_lock_init_recursive>
 8106260:	f7ff ff96 	bl	8106190 <__sfp_lock_release>
 8106264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8106268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810626c:	6025      	str	r5, [r4, #0]
 810626e:	61a5      	str	r5, [r4, #24]
 8106270:	2208      	movs	r2, #8
 8106272:	4629      	mov	r1, r5
 8106274:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8106278:	f7ff fd2c 	bl	8105cd4 <memset>
 810627c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8106280:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8106284:	4620      	mov	r0, r4
 8106286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106288:	3468      	adds	r4, #104	; 0x68
 810628a:	e7d9      	b.n	8106240 <__sfp+0x1c>
 810628c:	2104      	movs	r1, #4
 810628e:	4638      	mov	r0, r7
 8106290:	f7ff ff62 	bl	8106158 <__sfmoreglue>
 8106294:	4604      	mov	r4, r0
 8106296:	6030      	str	r0, [r6, #0]
 8106298:	2800      	cmp	r0, #0
 810629a:	d1d5      	bne.n	8106248 <__sfp+0x24>
 810629c:	f7ff ff78 	bl	8106190 <__sfp_lock_release>
 81062a0:	230c      	movs	r3, #12
 81062a2:	603b      	str	r3, [r7, #0]
 81062a4:	e7ee      	b.n	8106284 <__sfp+0x60>
 81062a6:	bf00      	nop
 81062a8:	08106df8 	.word	0x08106df8
 81062ac:	ffff0001 	.word	0xffff0001

081062b0 <_fwalk_reent>:
 81062b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81062b4:	4606      	mov	r6, r0
 81062b6:	4688      	mov	r8, r1
 81062b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 81062bc:	2700      	movs	r7, #0
 81062be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81062c2:	f1b9 0901 	subs.w	r9, r9, #1
 81062c6:	d505      	bpl.n	81062d4 <_fwalk_reent+0x24>
 81062c8:	6824      	ldr	r4, [r4, #0]
 81062ca:	2c00      	cmp	r4, #0
 81062cc:	d1f7      	bne.n	81062be <_fwalk_reent+0xe>
 81062ce:	4638      	mov	r0, r7
 81062d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81062d4:	89ab      	ldrh	r3, [r5, #12]
 81062d6:	2b01      	cmp	r3, #1
 81062d8:	d907      	bls.n	81062ea <_fwalk_reent+0x3a>
 81062da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81062de:	3301      	adds	r3, #1
 81062e0:	d003      	beq.n	81062ea <_fwalk_reent+0x3a>
 81062e2:	4629      	mov	r1, r5
 81062e4:	4630      	mov	r0, r6
 81062e6:	47c0      	blx	r8
 81062e8:	4307      	orrs	r7, r0
 81062ea:	3568      	adds	r5, #104	; 0x68
 81062ec:	e7e9      	b.n	81062c2 <_fwalk_reent+0x12>

081062ee <__retarget_lock_init_recursive>:
 81062ee:	4770      	bx	lr

081062f0 <__retarget_lock_acquire_recursive>:
 81062f0:	4770      	bx	lr

081062f2 <__retarget_lock_release_recursive>:
 81062f2:	4770      	bx	lr

081062f4 <__swhatbuf_r>:
 81062f4:	b570      	push	{r4, r5, r6, lr}
 81062f6:	460e      	mov	r6, r1
 81062f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81062fc:	2900      	cmp	r1, #0
 81062fe:	b096      	sub	sp, #88	; 0x58
 8106300:	4614      	mov	r4, r2
 8106302:	461d      	mov	r5, r3
 8106304:	da07      	bge.n	8106316 <__swhatbuf_r+0x22>
 8106306:	2300      	movs	r3, #0
 8106308:	602b      	str	r3, [r5, #0]
 810630a:	89b3      	ldrh	r3, [r6, #12]
 810630c:	061a      	lsls	r2, r3, #24
 810630e:	d410      	bmi.n	8106332 <__swhatbuf_r+0x3e>
 8106310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8106314:	e00e      	b.n	8106334 <__swhatbuf_r+0x40>
 8106316:	466a      	mov	r2, sp
 8106318:	f000 fc5e 	bl	8106bd8 <_fstat_r>
 810631c:	2800      	cmp	r0, #0
 810631e:	dbf2      	blt.n	8106306 <__swhatbuf_r+0x12>
 8106320:	9a01      	ldr	r2, [sp, #4]
 8106322:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8106326:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810632a:	425a      	negs	r2, r3
 810632c:	415a      	adcs	r2, r3
 810632e:	602a      	str	r2, [r5, #0]
 8106330:	e7ee      	b.n	8106310 <__swhatbuf_r+0x1c>
 8106332:	2340      	movs	r3, #64	; 0x40
 8106334:	2000      	movs	r0, #0
 8106336:	6023      	str	r3, [r4, #0]
 8106338:	b016      	add	sp, #88	; 0x58
 810633a:	bd70      	pop	{r4, r5, r6, pc}

0810633c <__smakebuf_r>:
 810633c:	898b      	ldrh	r3, [r1, #12]
 810633e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8106340:	079d      	lsls	r5, r3, #30
 8106342:	4606      	mov	r6, r0
 8106344:	460c      	mov	r4, r1
 8106346:	d507      	bpl.n	8106358 <__smakebuf_r+0x1c>
 8106348:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810634c:	6023      	str	r3, [r4, #0]
 810634e:	6123      	str	r3, [r4, #16]
 8106350:	2301      	movs	r3, #1
 8106352:	6163      	str	r3, [r4, #20]
 8106354:	b002      	add	sp, #8
 8106356:	bd70      	pop	{r4, r5, r6, pc}
 8106358:	ab01      	add	r3, sp, #4
 810635a:	466a      	mov	r2, sp
 810635c:	f7ff ffca 	bl	81062f4 <__swhatbuf_r>
 8106360:	9900      	ldr	r1, [sp, #0]
 8106362:	4605      	mov	r5, r0
 8106364:	4630      	mov	r0, r6
 8106366:	f000 f879 	bl	810645c <_malloc_r>
 810636a:	b948      	cbnz	r0, 8106380 <__smakebuf_r+0x44>
 810636c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8106370:	059a      	lsls	r2, r3, #22
 8106372:	d4ef      	bmi.n	8106354 <__smakebuf_r+0x18>
 8106374:	f023 0303 	bic.w	r3, r3, #3
 8106378:	f043 0302 	orr.w	r3, r3, #2
 810637c:	81a3      	strh	r3, [r4, #12]
 810637e:	e7e3      	b.n	8106348 <__smakebuf_r+0xc>
 8106380:	4b0d      	ldr	r3, [pc, #52]	; (81063b8 <__smakebuf_r+0x7c>)
 8106382:	62b3      	str	r3, [r6, #40]	; 0x28
 8106384:	89a3      	ldrh	r3, [r4, #12]
 8106386:	6020      	str	r0, [r4, #0]
 8106388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810638c:	81a3      	strh	r3, [r4, #12]
 810638e:	9b00      	ldr	r3, [sp, #0]
 8106390:	6163      	str	r3, [r4, #20]
 8106392:	9b01      	ldr	r3, [sp, #4]
 8106394:	6120      	str	r0, [r4, #16]
 8106396:	b15b      	cbz	r3, 81063b0 <__smakebuf_r+0x74>
 8106398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810639c:	4630      	mov	r0, r6
 810639e:	f000 fc2d 	bl	8106bfc <_isatty_r>
 81063a2:	b128      	cbz	r0, 81063b0 <__smakebuf_r+0x74>
 81063a4:	89a3      	ldrh	r3, [r4, #12]
 81063a6:	f023 0303 	bic.w	r3, r3, #3
 81063aa:	f043 0301 	orr.w	r3, r3, #1
 81063ae:	81a3      	strh	r3, [r4, #12]
 81063b0:	89a0      	ldrh	r0, [r4, #12]
 81063b2:	4305      	orrs	r5, r0
 81063b4:	81a5      	strh	r5, [r4, #12]
 81063b6:	e7cd      	b.n	8106354 <__smakebuf_r+0x18>
 81063b8:	0810614d 	.word	0x0810614d

081063bc <_free_r>:
 81063bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81063be:	2900      	cmp	r1, #0
 81063c0:	d048      	beq.n	8106454 <_free_r+0x98>
 81063c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81063c6:	9001      	str	r0, [sp, #4]
 81063c8:	2b00      	cmp	r3, #0
 81063ca:	f1a1 0404 	sub.w	r4, r1, #4
 81063ce:	bfb8      	it	lt
 81063d0:	18e4      	addlt	r4, r4, r3
 81063d2:	f000 fc35 	bl	8106c40 <__malloc_lock>
 81063d6:	4a20      	ldr	r2, [pc, #128]	; (8106458 <_free_r+0x9c>)
 81063d8:	9801      	ldr	r0, [sp, #4]
 81063da:	6813      	ldr	r3, [r2, #0]
 81063dc:	4615      	mov	r5, r2
 81063de:	b933      	cbnz	r3, 81063ee <_free_r+0x32>
 81063e0:	6063      	str	r3, [r4, #4]
 81063e2:	6014      	str	r4, [r2, #0]
 81063e4:	b003      	add	sp, #12
 81063e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81063ea:	f000 bc2f 	b.w	8106c4c <__malloc_unlock>
 81063ee:	42a3      	cmp	r3, r4
 81063f0:	d90b      	bls.n	810640a <_free_r+0x4e>
 81063f2:	6821      	ldr	r1, [r4, #0]
 81063f4:	1862      	adds	r2, r4, r1
 81063f6:	4293      	cmp	r3, r2
 81063f8:	bf04      	itt	eq
 81063fa:	681a      	ldreq	r2, [r3, #0]
 81063fc:	685b      	ldreq	r3, [r3, #4]
 81063fe:	6063      	str	r3, [r4, #4]
 8106400:	bf04      	itt	eq
 8106402:	1852      	addeq	r2, r2, r1
 8106404:	6022      	streq	r2, [r4, #0]
 8106406:	602c      	str	r4, [r5, #0]
 8106408:	e7ec      	b.n	81063e4 <_free_r+0x28>
 810640a:	461a      	mov	r2, r3
 810640c:	685b      	ldr	r3, [r3, #4]
 810640e:	b10b      	cbz	r3, 8106414 <_free_r+0x58>
 8106410:	42a3      	cmp	r3, r4
 8106412:	d9fa      	bls.n	810640a <_free_r+0x4e>
 8106414:	6811      	ldr	r1, [r2, #0]
 8106416:	1855      	adds	r5, r2, r1
 8106418:	42a5      	cmp	r5, r4
 810641a:	d10b      	bne.n	8106434 <_free_r+0x78>
 810641c:	6824      	ldr	r4, [r4, #0]
 810641e:	4421      	add	r1, r4
 8106420:	1854      	adds	r4, r2, r1
 8106422:	42a3      	cmp	r3, r4
 8106424:	6011      	str	r1, [r2, #0]
 8106426:	d1dd      	bne.n	81063e4 <_free_r+0x28>
 8106428:	681c      	ldr	r4, [r3, #0]
 810642a:	685b      	ldr	r3, [r3, #4]
 810642c:	6053      	str	r3, [r2, #4]
 810642e:	4421      	add	r1, r4
 8106430:	6011      	str	r1, [r2, #0]
 8106432:	e7d7      	b.n	81063e4 <_free_r+0x28>
 8106434:	d902      	bls.n	810643c <_free_r+0x80>
 8106436:	230c      	movs	r3, #12
 8106438:	6003      	str	r3, [r0, #0]
 810643a:	e7d3      	b.n	81063e4 <_free_r+0x28>
 810643c:	6825      	ldr	r5, [r4, #0]
 810643e:	1961      	adds	r1, r4, r5
 8106440:	428b      	cmp	r3, r1
 8106442:	bf04      	itt	eq
 8106444:	6819      	ldreq	r1, [r3, #0]
 8106446:	685b      	ldreq	r3, [r3, #4]
 8106448:	6063      	str	r3, [r4, #4]
 810644a:	bf04      	itt	eq
 810644c:	1949      	addeq	r1, r1, r5
 810644e:	6021      	streq	r1, [r4, #0]
 8106450:	6054      	str	r4, [r2, #4]
 8106452:	e7c7      	b.n	81063e4 <_free_r+0x28>
 8106454:	b003      	add	sp, #12
 8106456:	bd30      	pop	{r4, r5, pc}
 8106458:	1000009c 	.word	0x1000009c

0810645c <_malloc_r>:
 810645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810645e:	1ccd      	adds	r5, r1, #3
 8106460:	f025 0503 	bic.w	r5, r5, #3
 8106464:	3508      	adds	r5, #8
 8106466:	2d0c      	cmp	r5, #12
 8106468:	bf38      	it	cc
 810646a:	250c      	movcc	r5, #12
 810646c:	2d00      	cmp	r5, #0
 810646e:	4606      	mov	r6, r0
 8106470:	db01      	blt.n	8106476 <_malloc_r+0x1a>
 8106472:	42a9      	cmp	r1, r5
 8106474:	d903      	bls.n	810647e <_malloc_r+0x22>
 8106476:	230c      	movs	r3, #12
 8106478:	6033      	str	r3, [r6, #0]
 810647a:	2000      	movs	r0, #0
 810647c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810647e:	f000 fbdf 	bl	8106c40 <__malloc_lock>
 8106482:	4921      	ldr	r1, [pc, #132]	; (8106508 <_malloc_r+0xac>)
 8106484:	680a      	ldr	r2, [r1, #0]
 8106486:	4614      	mov	r4, r2
 8106488:	b99c      	cbnz	r4, 81064b2 <_malloc_r+0x56>
 810648a:	4f20      	ldr	r7, [pc, #128]	; (810650c <_malloc_r+0xb0>)
 810648c:	683b      	ldr	r3, [r7, #0]
 810648e:	b923      	cbnz	r3, 810649a <_malloc_r+0x3e>
 8106490:	4621      	mov	r1, r4
 8106492:	4630      	mov	r0, r6
 8106494:	f000 fb2a 	bl	8106aec <_sbrk_r>
 8106498:	6038      	str	r0, [r7, #0]
 810649a:	4629      	mov	r1, r5
 810649c:	4630      	mov	r0, r6
 810649e:	f000 fb25 	bl	8106aec <_sbrk_r>
 81064a2:	1c43      	adds	r3, r0, #1
 81064a4:	d123      	bne.n	81064ee <_malloc_r+0x92>
 81064a6:	230c      	movs	r3, #12
 81064a8:	6033      	str	r3, [r6, #0]
 81064aa:	4630      	mov	r0, r6
 81064ac:	f000 fbce 	bl	8106c4c <__malloc_unlock>
 81064b0:	e7e3      	b.n	810647a <_malloc_r+0x1e>
 81064b2:	6823      	ldr	r3, [r4, #0]
 81064b4:	1b5b      	subs	r3, r3, r5
 81064b6:	d417      	bmi.n	81064e8 <_malloc_r+0x8c>
 81064b8:	2b0b      	cmp	r3, #11
 81064ba:	d903      	bls.n	81064c4 <_malloc_r+0x68>
 81064bc:	6023      	str	r3, [r4, #0]
 81064be:	441c      	add	r4, r3
 81064c0:	6025      	str	r5, [r4, #0]
 81064c2:	e004      	b.n	81064ce <_malloc_r+0x72>
 81064c4:	6863      	ldr	r3, [r4, #4]
 81064c6:	42a2      	cmp	r2, r4
 81064c8:	bf0c      	ite	eq
 81064ca:	600b      	streq	r3, [r1, #0]
 81064cc:	6053      	strne	r3, [r2, #4]
 81064ce:	4630      	mov	r0, r6
 81064d0:	f000 fbbc 	bl	8106c4c <__malloc_unlock>
 81064d4:	f104 000b 	add.w	r0, r4, #11
 81064d8:	1d23      	adds	r3, r4, #4
 81064da:	f020 0007 	bic.w	r0, r0, #7
 81064de:	1ac2      	subs	r2, r0, r3
 81064e0:	d0cc      	beq.n	810647c <_malloc_r+0x20>
 81064e2:	1a1b      	subs	r3, r3, r0
 81064e4:	50a3      	str	r3, [r4, r2]
 81064e6:	e7c9      	b.n	810647c <_malloc_r+0x20>
 81064e8:	4622      	mov	r2, r4
 81064ea:	6864      	ldr	r4, [r4, #4]
 81064ec:	e7cc      	b.n	8106488 <_malloc_r+0x2c>
 81064ee:	1cc4      	adds	r4, r0, #3
 81064f0:	f024 0403 	bic.w	r4, r4, #3
 81064f4:	42a0      	cmp	r0, r4
 81064f6:	d0e3      	beq.n	81064c0 <_malloc_r+0x64>
 81064f8:	1a21      	subs	r1, r4, r0
 81064fa:	4630      	mov	r0, r6
 81064fc:	f000 faf6 	bl	8106aec <_sbrk_r>
 8106500:	3001      	adds	r0, #1
 8106502:	d1dd      	bne.n	81064c0 <_malloc_r+0x64>
 8106504:	e7cf      	b.n	81064a6 <_malloc_r+0x4a>
 8106506:	bf00      	nop
 8106508:	1000009c 	.word	0x1000009c
 810650c:	100000a0 	.word	0x100000a0

08106510 <__sfputc_r>:
 8106510:	6893      	ldr	r3, [r2, #8]
 8106512:	3b01      	subs	r3, #1
 8106514:	2b00      	cmp	r3, #0
 8106516:	b410      	push	{r4}
 8106518:	6093      	str	r3, [r2, #8]
 810651a:	da08      	bge.n	810652e <__sfputc_r+0x1e>
 810651c:	6994      	ldr	r4, [r2, #24]
 810651e:	42a3      	cmp	r3, r4
 8106520:	db01      	blt.n	8106526 <__sfputc_r+0x16>
 8106522:	290a      	cmp	r1, #10
 8106524:	d103      	bne.n	810652e <__sfputc_r+0x1e>
 8106526:	f85d 4b04 	ldr.w	r4, [sp], #4
 810652a:	f7ff bc69 	b.w	8105e00 <__swbuf_r>
 810652e:	6813      	ldr	r3, [r2, #0]
 8106530:	1c58      	adds	r0, r3, #1
 8106532:	6010      	str	r0, [r2, #0]
 8106534:	7019      	strb	r1, [r3, #0]
 8106536:	4608      	mov	r0, r1
 8106538:	f85d 4b04 	ldr.w	r4, [sp], #4
 810653c:	4770      	bx	lr

0810653e <__sfputs_r>:
 810653e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106540:	4606      	mov	r6, r0
 8106542:	460f      	mov	r7, r1
 8106544:	4614      	mov	r4, r2
 8106546:	18d5      	adds	r5, r2, r3
 8106548:	42ac      	cmp	r4, r5
 810654a:	d101      	bne.n	8106550 <__sfputs_r+0x12>
 810654c:	2000      	movs	r0, #0
 810654e:	e007      	b.n	8106560 <__sfputs_r+0x22>
 8106550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106554:	463a      	mov	r2, r7
 8106556:	4630      	mov	r0, r6
 8106558:	f7ff ffda 	bl	8106510 <__sfputc_r>
 810655c:	1c43      	adds	r3, r0, #1
 810655e:	d1f3      	bne.n	8106548 <__sfputs_r+0xa>
 8106560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08106564 <_vfiprintf_r>:
 8106564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106568:	460d      	mov	r5, r1
 810656a:	b09d      	sub	sp, #116	; 0x74
 810656c:	4614      	mov	r4, r2
 810656e:	4698      	mov	r8, r3
 8106570:	4606      	mov	r6, r0
 8106572:	b118      	cbz	r0, 810657c <_vfiprintf_r+0x18>
 8106574:	6983      	ldr	r3, [r0, #24]
 8106576:	b90b      	cbnz	r3, 810657c <_vfiprintf_r+0x18>
 8106578:	f7ff fe1c 	bl	81061b4 <__sinit>
 810657c:	4b89      	ldr	r3, [pc, #548]	; (81067a4 <_vfiprintf_r+0x240>)
 810657e:	429d      	cmp	r5, r3
 8106580:	d11b      	bne.n	81065ba <_vfiprintf_r+0x56>
 8106582:	6875      	ldr	r5, [r6, #4]
 8106584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106586:	07d9      	lsls	r1, r3, #31
 8106588:	d405      	bmi.n	8106596 <_vfiprintf_r+0x32>
 810658a:	89ab      	ldrh	r3, [r5, #12]
 810658c:	059a      	lsls	r2, r3, #22
 810658e:	d402      	bmi.n	8106596 <_vfiprintf_r+0x32>
 8106590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8106592:	f7ff fead 	bl	81062f0 <__retarget_lock_acquire_recursive>
 8106596:	89ab      	ldrh	r3, [r5, #12]
 8106598:	071b      	lsls	r3, r3, #28
 810659a:	d501      	bpl.n	81065a0 <_vfiprintf_r+0x3c>
 810659c:	692b      	ldr	r3, [r5, #16]
 810659e:	b9eb      	cbnz	r3, 81065dc <_vfiprintf_r+0x78>
 81065a0:	4629      	mov	r1, r5
 81065a2:	4630      	mov	r0, r6
 81065a4:	f7ff fc7e 	bl	8105ea4 <__swsetup_r>
 81065a8:	b1c0      	cbz	r0, 81065dc <_vfiprintf_r+0x78>
 81065aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81065ac:	07dc      	lsls	r4, r3, #31
 81065ae:	d50e      	bpl.n	81065ce <_vfiprintf_r+0x6a>
 81065b0:	f04f 30ff 	mov.w	r0, #4294967295
 81065b4:	b01d      	add	sp, #116	; 0x74
 81065b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81065ba:	4b7b      	ldr	r3, [pc, #492]	; (81067a8 <_vfiprintf_r+0x244>)
 81065bc:	429d      	cmp	r5, r3
 81065be:	d101      	bne.n	81065c4 <_vfiprintf_r+0x60>
 81065c0:	68b5      	ldr	r5, [r6, #8]
 81065c2:	e7df      	b.n	8106584 <_vfiprintf_r+0x20>
 81065c4:	4b79      	ldr	r3, [pc, #484]	; (81067ac <_vfiprintf_r+0x248>)
 81065c6:	429d      	cmp	r5, r3
 81065c8:	bf08      	it	eq
 81065ca:	68f5      	ldreq	r5, [r6, #12]
 81065cc:	e7da      	b.n	8106584 <_vfiprintf_r+0x20>
 81065ce:	89ab      	ldrh	r3, [r5, #12]
 81065d0:	0598      	lsls	r0, r3, #22
 81065d2:	d4ed      	bmi.n	81065b0 <_vfiprintf_r+0x4c>
 81065d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81065d6:	f7ff fe8c 	bl	81062f2 <__retarget_lock_release_recursive>
 81065da:	e7e9      	b.n	81065b0 <_vfiprintf_r+0x4c>
 81065dc:	2300      	movs	r3, #0
 81065de:	9309      	str	r3, [sp, #36]	; 0x24
 81065e0:	2320      	movs	r3, #32
 81065e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81065e6:	f8cd 800c 	str.w	r8, [sp, #12]
 81065ea:	2330      	movs	r3, #48	; 0x30
 81065ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 81067b0 <_vfiprintf_r+0x24c>
 81065f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81065f4:	f04f 0901 	mov.w	r9, #1
 81065f8:	4623      	mov	r3, r4
 81065fa:	469a      	mov	sl, r3
 81065fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106600:	b10a      	cbz	r2, 8106606 <_vfiprintf_r+0xa2>
 8106602:	2a25      	cmp	r2, #37	; 0x25
 8106604:	d1f9      	bne.n	81065fa <_vfiprintf_r+0x96>
 8106606:	ebba 0b04 	subs.w	fp, sl, r4
 810660a:	d00b      	beq.n	8106624 <_vfiprintf_r+0xc0>
 810660c:	465b      	mov	r3, fp
 810660e:	4622      	mov	r2, r4
 8106610:	4629      	mov	r1, r5
 8106612:	4630      	mov	r0, r6
 8106614:	f7ff ff93 	bl	810653e <__sfputs_r>
 8106618:	3001      	adds	r0, #1
 810661a:	f000 80aa 	beq.w	8106772 <_vfiprintf_r+0x20e>
 810661e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8106620:	445a      	add	r2, fp
 8106622:	9209      	str	r2, [sp, #36]	; 0x24
 8106624:	f89a 3000 	ldrb.w	r3, [sl]
 8106628:	2b00      	cmp	r3, #0
 810662a:	f000 80a2 	beq.w	8106772 <_vfiprintf_r+0x20e>
 810662e:	2300      	movs	r3, #0
 8106630:	f04f 32ff 	mov.w	r2, #4294967295
 8106634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106638:	f10a 0a01 	add.w	sl, sl, #1
 810663c:	9304      	str	r3, [sp, #16]
 810663e:	9307      	str	r3, [sp, #28]
 8106640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8106644:	931a      	str	r3, [sp, #104]	; 0x68
 8106646:	4654      	mov	r4, sl
 8106648:	2205      	movs	r2, #5
 810664a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810664e:	4858      	ldr	r0, [pc, #352]	; (81067b0 <_vfiprintf_r+0x24c>)
 8106650:	f7f9 fe46 	bl	81002e0 <memchr>
 8106654:	9a04      	ldr	r2, [sp, #16]
 8106656:	b9d8      	cbnz	r0, 8106690 <_vfiprintf_r+0x12c>
 8106658:	06d1      	lsls	r1, r2, #27
 810665a:	bf44      	itt	mi
 810665c:	2320      	movmi	r3, #32
 810665e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106662:	0713      	lsls	r3, r2, #28
 8106664:	bf44      	itt	mi
 8106666:	232b      	movmi	r3, #43	; 0x2b
 8106668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810666c:	f89a 3000 	ldrb.w	r3, [sl]
 8106670:	2b2a      	cmp	r3, #42	; 0x2a
 8106672:	d015      	beq.n	81066a0 <_vfiprintf_r+0x13c>
 8106674:	9a07      	ldr	r2, [sp, #28]
 8106676:	4654      	mov	r4, sl
 8106678:	2000      	movs	r0, #0
 810667a:	f04f 0c0a 	mov.w	ip, #10
 810667e:	4621      	mov	r1, r4
 8106680:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106684:	3b30      	subs	r3, #48	; 0x30
 8106686:	2b09      	cmp	r3, #9
 8106688:	d94e      	bls.n	8106728 <_vfiprintf_r+0x1c4>
 810668a:	b1b0      	cbz	r0, 81066ba <_vfiprintf_r+0x156>
 810668c:	9207      	str	r2, [sp, #28]
 810668e:	e014      	b.n	81066ba <_vfiprintf_r+0x156>
 8106690:	eba0 0308 	sub.w	r3, r0, r8
 8106694:	fa09 f303 	lsl.w	r3, r9, r3
 8106698:	4313      	orrs	r3, r2
 810669a:	9304      	str	r3, [sp, #16]
 810669c:	46a2      	mov	sl, r4
 810669e:	e7d2      	b.n	8106646 <_vfiprintf_r+0xe2>
 81066a0:	9b03      	ldr	r3, [sp, #12]
 81066a2:	1d19      	adds	r1, r3, #4
 81066a4:	681b      	ldr	r3, [r3, #0]
 81066a6:	9103      	str	r1, [sp, #12]
 81066a8:	2b00      	cmp	r3, #0
 81066aa:	bfbb      	ittet	lt
 81066ac:	425b      	neglt	r3, r3
 81066ae:	f042 0202 	orrlt.w	r2, r2, #2
 81066b2:	9307      	strge	r3, [sp, #28]
 81066b4:	9307      	strlt	r3, [sp, #28]
 81066b6:	bfb8      	it	lt
 81066b8:	9204      	strlt	r2, [sp, #16]
 81066ba:	7823      	ldrb	r3, [r4, #0]
 81066bc:	2b2e      	cmp	r3, #46	; 0x2e
 81066be:	d10c      	bne.n	81066da <_vfiprintf_r+0x176>
 81066c0:	7863      	ldrb	r3, [r4, #1]
 81066c2:	2b2a      	cmp	r3, #42	; 0x2a
 81066c4:	d135      	bne.n	8106732 <_vfiprintf_r+0x1ce>
 81066c6:	9b03      	ldr	r3, [sp, #12]
 81066c8:	1d1a      	adds	r2, r3, #4
 81066ca:	681b      	ldr	r3, [r3, #0]
 81066cc:	9203      	str	r2, [sp, #12]
 81066ce:	2b00      	cmp	r3, #0
 81066d0:	bfb8      	it	lt
 81066d2:	f04f 33ff 	movlt.w	r3, #4294967295
 81066d6:	3402      	adds	r4, #2
 81066d8:	9305      	str	r3, [sp, #20]
 81066da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 81067c0 <_vfiprintf_r+0x25c>
 81066de:	7821      	ldrb	r1, [r4, #0]
 81066e0:	2203      	movs	r2, #3
 81066e2:	4650      	mov	r0, sl
 81066e4:	f7f9 fdfc 	bl	81002e0 <memchr>
 81066e8:	b140      	cbz	r0, 81066fc <_vfiprintf_r+0x198>
 81066ea:	2340      	movs	r3, #64	; 0x40
 81066ec:	eba0 000a 	sub.w	r0, r0, sl
 81066f0:	fa03 f000 	lsl.w	r0, r3, r0
 81066f4:	9b04      	ldr	r3, [sp, #16]
 81066f6:	4303      	orrs	r3, r0
 81066f8:	3401      	adds	r4, #1
 81066fa:	9304      	str	r3, [sp, #16]
 81066fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106700:	482c      	ldr	r0, [pc, #176]	; (81067b4 <_vfiprintf_r+0x250>)
 8106702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8106706:	2206      	movs	r2, #6
 8106708:	f7f9 fdea 	bl	81002e0 <memchr>
 810670c:	2800      	cmp	r0, #0
 810670e:	d03f      	beq.n	8106790 <_vfiprintf_r+0x22c>
 8106710:	4b29      	ldr	r3, [pc, #164]	; (81067b8 <_vfiprintf_r+0x254>)
 8106712:	bb1b      	cbnz	r3, 810675c <_vfiprintf_r+0x1f8>
 8106714:	9b03      	ldr	r3, [sp, #12]
 8106716:	3307      	adds	r3, #7
 8106718:	f023 0307 	bic.w	r3, r3, #7
 810671c:	3308      	adds	r3, #8
 810671e:	9303      	str	r3, [sp, #12]
 8106720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106722:	443b      	add	r3, r7
 8106724:	9309      	str	r3, [sp, #36]	; 0x24
 8106726:	e767      	b.n	81065f8 <_vfiprintf_r+0x94>
 8106728:	fb0c 3202 	mla	r2, ip, r2, r3
 810672c:	460c      	mov	r4, r1
 810672e:	2001      	movs	r0, #1
 8106730:	e7a5      	b.n	810667e <_vfiprintf_r+0x11a>
 8106732:	2300      	movs	r3, #0
 8106734:	3401      	adds	r4, #1
 8106736:	9305      	str	r3, [sp, #20]
 8106738:	4619      	mov	r1, r3
 810673a:	f04f 0c0a 	mov.w	ip, #10
 810673e:	4620      	mov	r0, r4
 8106740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106744:	3a30      	subs	r2, #48	; 0x30
 8106746:	2a09      	cmp	r2, #9
 8106748:	d903      	bls.n	8106752 <_vfiprintf_r+0x1ee>
 810674a:	2b00      	cmp	r3, #0
 810674c:	d0c5      	beq.n	81066da <_vfiprintf_r+0x176>
 810674e:	9105      	str	r1, [sp, #20]
 8106750:	e7c3      	b.n	81066da <_vfiprintf_r+0x176>
 8106752:	fb0c 2101 	mla	r1, ip, r1, r2
 8106756:	4604      	mov	r4, r0
 8106758:	2301      	movs	r3, #1
 810675a:	e7f0      	b.n	810673e <_vfiprintf_r+0x1da>
 810675c:	ab03      	add	r3, sp, #12
 810675e:	9300      	str	r3, [sp, #0]
 8106760:	462a      	mov	r2, r5
 8106762:	4b16      	ldr	r3, [pc, #88]	; (81067bc <_vfiprintf_r+0x258>)
 8106764:	a904      	add	r1, sp, #16
 8106766:	4630      	mov	r0, r6
 8106768:	f3af 8000 	nop.w
 810676c:	4607      	mov	r7, r0
 810676e:	1c78      	adds	r0, r7, #1
 8106770:	d1d6      	bne.n	8106720 <_vfiprintf_r+0x1bc>
 8106772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106774:	07d9      	lsls	r1, r3, #31
 8106776:	d405      	bmi.n	8106784 <_vfiprintf_r+0x220>
 8106778:	89ab      	ldrh	r3, [r5, #12]
 810677a:	059a      	lsls	r2, r3, #22
 810677c:	d402      	bmi.n	8106784 <_vfiprintf_r+0x220>
 810677e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8106780:	f7ff fdb7 	bl	81062f2 <__retarget_lock_release_recursive>
 8106784:	89ab      	ldrh	r3, [r5, #12]
 8106786:	065b      	lsls	r3, r3, #25
 8106788:	f53f af12 	bmi.w	81065b0 <_vfiprintf_r+0x4c>
 810678c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810678e:	e711      	b.n	81065b4 <_vfiprintf_r+0x50>
 8106790:	ab03      	add	r3, sp, #12
 8106792:	9300      	str	r3, [sp, #0]
 8106794:	462a      	mov	r2, r5
 8106796:	4b09      	ldr	r3, [pc, #36]	; (81067bc <_vfiprintf_r+0x258>)
 8106798:	a904      	add	r1, sp, #16
 810679a:	4630      	mov	r0, r6
 810679c:	f000 f880 	bl	81068a0 <_printf_i>
 81067a0:	e7e4      	b.n	810676c <_vfiprintf_r+0x208>
 81067a2:	bf00      	nop
 81067a4:	08106e1c 	.word	0x08106e1c
 81067a8:	08106e3c 	.word	0x08106e3c
 81067ac:	08106dfc 	.word	0x08106dfc
 81067b0:	08106e5c 	.word	0x08106e5c
 81067b4:	08106e66 	.word	0x08106e66
 81067b8:	00000000 	.word	0x00000000
 81067bc:	0810653f 	.word	0x0810653f
 81067c0:	08106e62 	.word	0x08106e62

081067c4 <_printf_common>:
 81067c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81067c8:	4616      	mov	r6, r2
 81067ca:	4699      	mov	r9, r3
 81067cc:	688a      	ldr	r2, [r1, #8]
 81067ce:	690b      	ldr	r3, [r1, #16]
 81067d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81067d4:	4293      	cmp	r3, r2
 81067d6:	bfb8      	it	lt
 81067d8:	4613      	movlt	r3, r2
 81067da:	6033      	str	r3, [r6, #0]
 81067dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81067e0:	4607      	mov	r7, r0
 81067e2:	460c      	mov	r4, r1
 81067e4:	b10a      	cbz	r2, 81067ea <_printf_common+0x26>
 81067e6:	3301      	adds	r3, #1
 81067e8:	6033      	str	r3, [r6, #0]
 81067ea:	6823      	ldr	r3, [r4, #0]
 81067ec:	0699      	lsls	r1, r3, #26
 81067ee:	bf42      	ittt	mi
 81067f0:	6833      	ldrmi	r3, [r6, #0]
 81067f2:	3302      	addmi	r3, #2
 81067f4:	6033      	strmi	r3, [r6, #0]
 81067f6:	6825      	ldr	r5, [r4, #0]
 81067f8:	f015 0506 	ands.w	r5, r5, #6
 81067fc:	d106      	bne.n	810680c <_printf_common+0x48>
 81067fe:	f104 0a19 	add.w	sl, r4, #25
 8106802:	68e3      	ldr	r3, [r4, #12]
 8106804:	6832      	ldr	r2, [r6, #0]
 8106806:	1a9b      	subs	r3, r3, r2
 8106808:	42ab      	cmp	r3, r5
 810680a:	dc26      	bgt.n	810685a <_printf_common+0x96>
 810680c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106810:	1e13      	subs	r3, r2, #0
 8106812:	6822      	ldr	r2, [r4, #0]
 8106814:	bf18      	it	ne
 8106816:	2301      	movne	r3, #1
 8106818:	0692      	lsls	r2, r2, #26
 810681a:	d42b      	bmi.n	8106874 <_printf_common+0xb0>
 810681c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106820:	4649      	mov	r1, r9
 8106822:	4638      	mov	r0, r7
 8106824:	47c0      	blx	r8
 8106826:	3001      	adds	r0, #1
 8106828:	d01e      	beq.n	8106868 <_printf_common+0xa4>
 810682a:	6823      	ldr	r3, [r4, #0]
 810682c:	68e5      	ldr	r5, [r4, #12]
 810682e:	6832      	ldr	r2, [r6, #0]
 8106830:	f003 0306 	and.w	r3, r3, #6
 8106834:	2b04      	cmp	r3, #4
 8106836:	bf08      	it	eq
 8106838:	1aad      	subeq	r5, r5, r2
 810683a:	68a3      	ldr	r3, [r4, #8]
 810683c:	6922      	ldr	r2, [r4, #16]
 810683e:	bf0c      	ite	eq
 8106840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106844:	2500      	movne	r5, #0
 8106846:	4293      	cmp	r3, r2
 8106848:	bfc4      	itt	gt
 810684a:	1a9b      	subgt	r3, r3, r2
 810684c:	18ed      	addgt	r5, r5, r3
 810684e:	2600      	movs	r6, #0
 8106850:	341a      	adds	r4, #26
 8106852:	42b5      	cmp	r5, r6
 8106854:	d11a      	bne.n	810688c <_printf_common+0xc8>
 8106856:	2000      	movs	r0, #0
 8106858:	e008      	b.n	810686c <_printf_common+0xa8>
 810685a:	2301      	movs	r3, #1
 810685c:	4652      	mov	r2, sl
 810685e:	4649      	mov	r1, r9
 8106860:	4638      	mov	r0, r7
 8106862:	47c0      	blx	r8
 8106864:	3001      	adds	r0, #1
 8106866:	d103      	bne.n	8106870 <_printf_common+0xac>
 8106868:	f04f 30ff 	mov.w	r0, #4294967295
 810686c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106870:	3501      	adds	r5, #1
 8106872:	e7c6      	b.n	8106802 <_printf_common+0x3e>
 8106874:	18e1      	adds	r1, r4, r3
 8106876:	1c5a      	adds	r2, r3, #1
 8106878:	2030      	movs	r0, #48	; 0x30
 810687a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810687e:	4422      	add	r2, r4
 8106880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8106884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8106888:	3302      	adds	r3, #2
 810688a:	e7c7      	b.n	810681c <_printf_common+0x58>
 810688c:	2301      	movs	r3, #1
 810688e:	4622      	mov	r2, r4
 8106890:	4649      	mov	r1, r9
 8106892:	4638      	mov	r0, r7
 8106894:	47c0      	blx	r8
 8106896:	3001      	adds	r0, #1
 8106898:	d0e6      	beq.n	8106868 <_printf_common+0xa4>
 810689a:	3601      	adds	r6, #1
 810689c:	e7d9      	b.n	8106852 <_printf_common+0x8e>
	...

081068a0 <_printf_i>:
 81068a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81068a4:	460c      	mov	r4, r1
 81068a6:	4691      	mov	r9, r2
 81068a8:	7e27      	ldrb	r7, [r4, #24]
 81068aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 81068ac:	2f78      	cmp	r7, #120	; 0x78
 81068ae:	4680      	mov	r8, r0
 81068b0:	469a      	mov	sl, r3
 81068b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81068b6:	d807      	bhi.n	81068c8 <_printf_i+0x28>
 81068b8:	2f62      	cmp	r7, #98	; 0x62
 81068ba:	d80a      	bhi.n	81068d2 <_printf_i+0x32>
 81068bc:	2f00      	cmp	r7, #0
 81068be:	f000 80d8 	beq.w	8106a72 <_printf_i+0x1d2>
 81068c2:	2f58      	cmp	r7, #88	; 0x58
 81068c4:	f000 80a3 	beq.w	8106a0e <_printf_i+0x16e>
 81068c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81068cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81068d0:	e03a      	b.n	8106948 <_printf_i+0xa8>
 81068d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81068d6:	2b15      	cmp	r3, #21
 81068d8:	d8f6      	bhi.n	81068c8 <_printf_i+0x28>
 81068da:	a001      	add	r0, pc, #4	; (adr r0, 81068e0 <_printf_i+0x40>)
 81068dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 81068e0:	08106939 	.word	0x08106939
 81068e4:	0810694d 	.word	0x0810694d
 81068e8:	081068c9 	.word	0x081068c9
 81068ec:	081068c9 	.word	0x081068c9
 81068f0:	081068c9 	.word	0x081068c9
 81068f4:	081068c9 	.word	0x081068c9
 81068f8:	0810694d 	.word	0x0810694d
 81068fc:	081068c9 	.word	0x081068c9
 8106900:	081068c9 	.word	0x081068c9
 8106904:	081068c9 	.word	0x081068c9
 8106908:	081068c9 	.word	0x081068c9
 810690c:	08106a59 	.word	0x08106a59
 8106910:	0810697d 	.word	0x0810697d
 8106914:	08106a3b 	.word	0x08106a3b
 8106918:	081068c9 	.word	0x081068c9
 810691c:	081068c9 	.word	0x081068c9
 8106920:	08106a7b 	.word	0x08106a7b
 8106924:	081068c9 	.word	0x081068c9
 8106928:	0810697d 	.word	0x0810697d
 810692c:	081068c9 	.word	0x081068c9
 8106930:	081068c9 	.word	0x081068c9
 8106934:	08106a43 	.word	0x08106a43
 8106938:	680b      	ldr	r3, [r1, #0]
 810693a:	1d1a      	adds	r2, r3, #4
 810693c:	681b      	ldr	r3, [r3, #0]
 810693e:	600a      	str	r2, [r1, #0]
 8106940:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8106944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106948:	2301      	movs	r3, #1
 810694a:	e0a3      	b.n	8106a94 <_printf_i+0x1f4>
 810694c:	6825      	ldr	r5, [r4, #0]
 810694e:	6808      	ldr	r0, [r1, #0]
 8106950:	062e      	lsls	r6, r5, #24
 8106952:	f100 0304 	add.w	r3, r0, #4
 8106956:	d50a      	bpl.n	810696e <_printf_i+0xce>
 8106958:	6805      	ldr	r5, [r0, #0]
 810695a:	600b      	str	r3, [r1, #0]
 810695c:	2d00      	cmp	r5, #0
 810695e:	da03      	bge.n	8106968 <_printf_i+0xc8>
 8106960:	232d      	movs	r3, #45	; 0x2d
 8106962:	426d      	negs	r5, r5
 8106964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106968:	485e      	ldr	r0, [pc, #376]	; (8106ae4 <_printf_i+0x244>)
 810696a:	230a      	movs	r3, #10
 810696c:	e019      	b.n	81069a2 <_printf_i+0x102>
 810696e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8106972:	6805      	ldr	r5, [r0, #0]
 8106974:	600b      	str	r3, [r1, #0]
 8106976:	bf18      	it	ne
 8106978:	b22d      	sxthne	r5, r5
 810697a:	e7ef      	b.n	810695c <_printf_i+0xbc>
 810697c:	680b      	ldr	r3, [r1, #0]
 810697e:	6825      	ldr	r5, [r4, #0]
 8106980:	1d18      	adds	r0, r3, #4
 8106982:	6008      	str	r0, [r1, #0]
 8106984:	0628      	lsls	r0, r5, #24
 8106986:	d501      	bpl.n	810698c <_printf_i+0xec>
 8106988:	681d      	ldr	r5, [r3, #0]
 810698a:	e002      	b.n	8106992 <_printf_i+0xf2>
 810698c:	0669      	lsls	r1, r5, #25
 810698e:	d5fb      	bpl.n	8106988 <_printf_i+0xe8>
 8106990:	881d      	ldrh	r5, [r3, #0]
 8106992:	4854      	ldr	r0, [pc, #336]	; (8106ae4 <_printf_i+0x244>)
 8106994:	2f6f      	cmp	r7, #111	; 0x6f
 8106996:	bf0c      	ite	eq
 8106998:	2308      	moveq	r3, #8
 810699a:	230a      	movne	r3, #10
 810699c:	2100      	movs	r1, #0
 810699e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81069a2:	6866      	ldr	r6, [r4, #4]
 81069a4:	60a6      	str	r6, [r4, #8]
 81069a6:	2e00      	cmp	r6, #0
 81069a8:	bfa2      	ittt	ge
 81069aa:	6821      	ldrge	r1, [r4, #0]
 81069ac:	f021 0104 	bicge.w	r1, r1, #4
 81069b0:	6021      	strge	r1, [r4, #0]
 81069b2:	b90d      	cbnz	r5, 81069b8 <_printf_i+0x118>
 81069b4:	2e00      	cmp	r6, #0
 81069b6:	d04d      	beq.n	8106a54 <_printf_i+0x1b4>
 81069b8:	4616      	mov	r6, r2
 81069ba:	fbb5 f1f3 	udiv	r1, r5, r3
 81069be:	fb03 5711 	mls	r7, r3, r1, r5
 81069c2:	5dc7      	ldrb	r7, [r0, r7]
 81069c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 81069c8:	462f      	mov	r7, r5
 81069ca:	42bb      	cmp	r3, r7
 81069cc:	460d      	mov	r5, r1
 81069ce:	d9f4      	bls.n	81069ba <_printf_i+0x11a>
 81069d0:	2b08      	cmp	r3, #8
 81069d2:	d10b      	bne.n	81069ec <_printf_i+0x14c>
 81069d4:	6823      	ldr	r3, [r4, #0]
 81069d6:	07df      	lsls	r7, r3, #31
 81069d8:	d508      	bpl.n	81069ec <_printf_i+0x14c>
 81069da:	6923      	ldr	r3, [r4, #16]
 81069dc:	6861      	ldr	r1, [r4, #4]
 81069de:	4299      	cmp	r1, r3
 81069e0:	bfde      	ittt	le
 81069e2:	2330      	movle	r3, #48	; 0x30
 81069e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 81069e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 81069ec:	1b92      	subs	r2, r2, r6
 81069ee:	6122      	str	r2, [r4, #16]
 81069f0:	f8cd a000 	str.w	sl, [sp]
 81069f4:	464b      	mov	r3, r9
 81069f6:	aa03      	add	r2, sp, #12
 81069f8:	4621      	mov	r1, r4
 81069fa:	4640      	mov	r0, r8
 81069fc:	f7ff fee2 	bl	81067c4 <_printf_common>
 8106a00:	3001      	adds	r0, #1
 8106a02:	d14c      	bne.n	8106a9e <_printf_i+0x1fe>
 8106a04:	f04f 30ff 	mov.w	r0, #4294967295
 8106a08:	b004      	add	sp, #16
 8106a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106a0e:	4835      	ldr	r0, [pc, #212]	; (8106ae4 <_printf_i+0x244>)
 8106a10:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8106a14:	6823      	ldr	r3, [r4, #0]
 8106a16:	680e      	ldr	r6, [r1, #0]
 8106a18:	061f      	lsls	r7, r3, #24
 8106a1a:	f856 5b04 	ldr.w	r5, [r6], #4
 8106a1e:	600e      	str	r6, [r1, #0]
 8106a20:	d514      	bpl.n	8106a4c <_printf_i+0x1ac>
 8106a22:	07d9      	lsls	r1, r3, #31
 8106a24:	bf44      	itt	mi
 8106a26:	f043 0320 	orrmi.w	r3, r3, #32
 8106a2a:	6023      	strmi	r3, [r4, #0]
 8106a2c:	b91d      	cbnz	r5, 8106a36 <_printf_i+0x196>
 8106a2e:	6823      	ldr	r3, [r4, #0]
 8106a30:	f023 0320 	bic.w	r3, r3, #32
 8106a34:	6023      	str	r3, [r4, #0]
 8106a36:	2310      	movs	r3, #16
 8106a38:	e7b0      	b.n	810699c <_printf_i+0xfc>
 8106a3a:	6823      	ldr	r3, [r4, #0]
 8106a3c:	f043 0320 	orr.w	r3, r3, #32
 8106a40:	6023      	str	r3, [r4, #0]
 8106a42:	2378      	movs	r3, #120	; 0x78
 8106a44:	4828      	ldr	r0, [pc, #160]	; (8106ae8 <_printf_i+0x248>)
 8106a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106a4a:	e7e3      	b.n	8106a14 <_printf_i+0x174>
 8106a4c:	065e      	lsls	r6, r3, #25
 8106a4e:	bf48      	it	mi
 8106a50:	b2ad      	uxthmi	r5, r5
 8106a52:	e7e6      	b.n	8106a22 <_printf_i+0x182>
 8106a54:	4616      	mov	r6, r2
 8106a56:	e7bb      	b.n	81069d0 <_printf_i+0x130>
 8106a58:	680b      	ldr	r3, [r1, #0]
 8106a5a:	6826      	ldr	r6, [r4, #0]
 8106a5c:	6960      	ldr	r0, [r4, #20]
 8106a5e:	1d1d      	adds	r5, r3, #4
 8106a60:	600d      	str	r5, [r1, #0]
 8106a62:	0635      	lsls	r5, r6, #24
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	d501      	bpl.n	8106a6c <_printf_i+0x1cc>
 8106a68:	6018      	str	r0, [r3, #0]
 8106a6a:	e002      	b.n	8106a72 <_printf_i+0x1d2>
 8106a6c:	0671      	lsls	r1, r6, #25
 8106a6e:	d5fb      	bpl.n	8106a68 <_printf_i+0x1c8>
 8106a70:	8018      	strh	r0, [r3, #0]
 8106a72:	2300      	movs	r3, #0
 8106a74:	6123      	str	r3, [r4, #16]
 8106a76:	4616      	mov	r6, r2
 8106a78:	e7ba      	b.n	81069f0 <_printf_i+0x150>
 8106a7a:	680b      	ldr	r3, [r1, #0]
 8106a7c:	1d1a      	adds	r2, r3, #4
 8106a7e:	600a      	str	r2, [r1, #0]
 8106a80:	681e      	ldr	r6, [r3, #0]
 8106a82:	6862      	ldr	r2, [r4, #4]
 8106a84:	2100      	movs	r1, #0
 8106a86:	4630      	mov	r0, r6
 8106a88:	f7f9 fc2a 	bl	81002e0 <memchr>
 8106a8c:	b108      	cbz	r0, 8106a92 <_printf_i+0x1f2>
 8106a8e:	1b80      	subs	r0, r0, r6
 8106a90:	6060      	str	r0, [r4, #4]
 8106a92:	6863      	ldr	r3, [r4, #4]
 8106a94:	6123      	str	r3, [r4, #16]
 8106a96:	2300      	movs	r3, #0
 8106a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106a9c:	e7a8      	b.n	81069f0 <_printf_i+0x150>
 8106a9e:	6923      	ldr	r3, [r4, #16]
 8106aa0:	4632      	mov	r2, r6
 8106aa2:	4649      	mov	r1, r9
 8106aa4:	4640      	mov	r0, r8
 8106aa6:	47d0      	blx	sl
 8106aa8:	3001      	adds	r0, #1
 8106aaa:	d0ab      	beq.n	8106a04 <_printf_i+0x164>
 8106aac:	6823      	ldr	r3, [r4, #0]
 8106aae:	079b      	lsls	r3, r3, #30
 8106ab0:	d413      	bmi.n	8106ada <_printf_i+0x23a>
 8106ab2:	68e0      	ldr	r0, [r4, #12]
 8106ab4:	9b03      	ldr	r3, [sp, #12]
 8106ab6:	4298      	cmp	r0, r3
 8106ab8:	bfb8      	it	lt
 8106aba:	4618      	movlt	r0, r3
 8106abc:	e7a4      	b.n	8106a08 <_printf_i+0x168>
 8106abe:	2301      	movs	r3, #1
 8106ac0:	4632      	mov	r2, r6
 8106ac2:	4649      	mov	r1, r9
 8106ac4:	4640      	mov	r0, r8
 8106ac6:	47d0      	blx	sl
 8106ac8:	3001      	adds	r0, #1
 8106aca:	d09b      	beq.n	8106a04 <_printf_i+0x164>
 8106acc:	3501      	adds	r5, #1
 8106ace:	68e3      	ldr	r3, [r4, #12]
 8106ad0:	9903      	ldr	r1, [sp, #12]
 8106ad2:	1a5b      	subs	r3, r3, r1
 8106ad4:	42ab      	cmp	r3, r5
 8106ad6:	dcf2      	bgt.n	8106abe <_printf_i+0x21e>
 8106ad8:	e7eb      	b.n	8106ab2 <_printf_i+0x212>
 8106ada:	2500      	movs	r5, #0
 8106adc:	f104 0619 	add.w	r6, r4, #25
 8106ae0:	e7f5      	b.n	8106ace <_printf_i+0x22e>
 8106ae2:	bf00      	nop
 8106ae4:	08106e6d 	.word	0x08106e6d
 8106ae8:	08106e7e 	.word	0x08106e7e

08106aec <_sbrk_r>:
 8106aec:	b538      	push	{r3, r4, r5, lr}
 8106aee:	4d06      	ldr	r5, [pc, #24]	; (8106b08 <_sbrk_r+0x1c>)
 8106af0:	2300      	movs	r3, #0
 8106af2:	4604      	mov	r4, r0
 8106af4:	4608      	mov	r0, r1
 8106af6:	602b      	str	r3, [r5, #0]
 8106af8:	f7fa fcfa 	bl	81014f0 <_sbrk>
 8106afc:	1c43      	adds	r3, r0, #1
 8106afe:	d102      	bne.n	8106b06 <_sbrk_r+0x1a>
 8106b00:	682b      	ldr	r3, [r5, #0]
 8106b02:	b103      	cbz	r3, 8106b06 <_sbrk_r+0x1a>
 8106b04:	6023      	str	r3, [r4, #0]
 8106b06:	bd38      	pop	{r3, r4, r5, pc}
 8106b08:	10000288 	.word	0x10000288

08106b0c <__sread>:
 8106b0c:	b510      	push	{r4, lr}
 8106b0e:	460c      	mov	r4, r1
 8106b10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106b14:	f000 f8a0 	bl	8106c58 <_read_r>
 8106b18:	2800      	cmp	r0, #0
 8106b1a:	bfab      	itete	ge
 8106b1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8106b1e:	89a3      	ldrhlt	r3, [r4, #12]
 8106b20:	181b      	addge	r3, r3, r0
 8106b22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8106b26:	bfac      	ite	ge
 8106b28:	6563      	strge	r3, [r4, #84]	; 0x54
 8106b2a:	81a3      	strhlt	r3, [r4, #12]
 8106b2c:	bd10      	pop	{r4, pc}

08106b2e <__swrite>:
 8106b2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106b32:	461f      	mov	r7, r3
 8106b34:	898b      	ldrh	r3, [r1, #12]
 8106b36:	05db      	lsls	r3, r3, #23
 8106b38:	4605      	mov	r5, r0
 8106b3a:	460c      	mov	r4, r1
 8106b3c:	4616      	mov	r6, r2
 8106b3e:	d505      	bpl.n	8106b4c <__swrite+0x1e>
 8106b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106b44:	2302      	movs	r3, #2
 8106b46:	2200      	movs	r2, #0
 8106b48:	f000 f868 	bl	8106c1c <_lseek_r>
 8106b4c:	89a3      	ldrh	r3, [r4, #12]
 8106b4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106b52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106b56:	81a3      	strh	r3, [r4, #12]
 8106b58:	4632      	mov	r2, r6
 8106b5a:	463b      	mov	r3, r7
 8106b5c:	4628      	mov	r0, r5
 8106b5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106b62:	f000 b817 	b.w	8106b94 <_write_r>

08106b66 <__sseek>:
 8106b66:	b510      	push	{r4, lr}
 8106b68:	460c      	mov	r4, r1
 8106b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106b6e:	f000 f855 	bl	8106c1c <_lseek_r>
 8106b72:	1c43      	adds	r3, r0, #1
 8106b74:	89a3      	ldrh	r3, [r4, #12]
 8106b76:	bf15      	itete	ne
 8106b78:	6560      	strne	r0, [r4, #84]	; 0x54
 8106b7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8106b7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8106b82:	81a3      	strheq	r3, [r4, #12]
 8106b84:	bf18      	it	ne
 8106b86:	81a3      	strhne	r3, [r4, #12]
 8106b88:	bd10      	pop	{r4, pc}

08106b8a <__sclose>:
 8106b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106b8e:	f000 b813 	b.w	8106bb8 <_close_r>
	...

08106b94 <_write_r>:
 8106b94:	b538      	push	{r3, r4, r5, lr}
 8106b96:	4d07      	ldr	r5, [pc, #28]	; (8106bb4 <_write_r+0x20>)
 8106b98:	4604      	mov	r4, r0
 8106b9a:	4608      	mov	r0, r1
 8106b9c:	4611      	mov	r1, r2
 8106b9e:	2200      	movs	r2, #0
 8106ba0:	602a      	str	r2, [r5, #0]
 8106ba2:	461a      	mov	r2, r3
 8106ba4:	f7fa fc53 	bl	810144e <_write>
 8106ba8:	1c43      	adds	r3, r0, #1
 8106baa:	d102      	bne.n	8106bb2 <_write_r+0x1e>
 8106bac:	682b      	ldr	r3, [r5, #0]
 8106bae:	b103      	cbz	r3, 8106bb2 <_write_r+0x1e>
 8106bb0:	6023      	str	r3, [r4, #0]
 8106bb2:	bd38      	pop	{r3, r4, r5, pc}
 8106bb4:	10000288 	.word	0x10000288

08106bb8 <_close_r>:
 8106bb8:	b538      	push	{r3, r4, r5, lr}
 8106bba:	4d06      	ldr	r5, [pc, #24]	; (8106bd4 <_close_r+0x1c>)
 8106bbc:	2300      	movs	r3, #0
 8106bbe:	4604      	mov	r4, r0
 8106bc0:	4608      	mov	r0, r1
 8106bc2:	602b      	str	r3, [r5, #0]
 8106bc4:	f7fa fc5f 	bl	8101486 <_close>
 8106bc8:	1c43      	adds	r3, r0, #1
 8106bca:	d102      	bne.n	8106bd2 <_close_r+0x1a>
 8106bcc:	682b      	ldr	r3, [r5, #0]
 8106bce:	b103      	cbz	r3, 8106bd2 <_close_r+0x1a>
 8106bd0:	6023      	str	r3, [r4, #0]
 8106bd2:	bd38      	pop	{r3, r4, r5, pc}
 8106bd4:	10000288 	.word	0x10000288

08106bd8 <_fstat_r>:
 8106bd8:	b538      	push	{r3, r4, r5, lr}
 8106bda:	4d07      	ldr	r5, [pc, #28]	; (8106bf8 <_fstat_r+0x20>)
 8106bdc:	2300      	movs	r3, #0
 8106bde:	4604      	mov	r4, r0
 8106be0:	4608      	mov	r0, r1
 8106be2:	4611      	mov	r1, r2
 8106be4:	602b      	str	r3, [r5, #0]
 8106be6:	f7fa fc5a 	bl	810149e <_fstat>
 8106bea:	1c43      	adds	r3, r0, #1
 8106bec:	d102      	bne.n	8106bf4 <_fstat_r+0x1c>
 8106bee:	682b      	ldr	r3, [r5, #0]
 8106bf0:	b103      	cbz	r3, 8106bf4 <_fstat_r+0x1c>
 8106bf2:	6023      	str	r3, [r4, #0]
 8106bf4:	bd38      	pop	{r3, r4, r5, pc}
 8106bf6:	bf00      	nop
 8106bf8:	10000288 	.word	0x10000288

08106bfc <_isatty_r>:
 8106bfc:	b538      	push	{r3, r4, r5, lr}
 8106bfe:	4d06      	ldr	r5, [pc, #24]	; (8106c18 <_isatty_r+0x1c>)
 8106c00:	2300      	movs	r3, #0
 8106c02:	4604      	mov	r4, r0
 8106c04:	4608      	mov	r0, r1
 8106c06:	602b      	str	r3, [r5, #0]
 8106c08:	f7fa fc59 	bl	81014be <_isatty>
 8106c0c:	1c43      	adds	r3, r0, #1
 8106c0e:	d102      	bne.n	8106c16 <_isatty_r+0x1a>
 8106c10:	682b      	ldr	r3, [r5, #0]
 8106c12:	b103      	cbz	r3, 8106c16 <_isatty_r+0x1a>
 8106c14:	6023      	str	r3, [r4, #0]
 8106c16:	bd38      	pop	{r3, r4, r5, pc}
 8106c18:	10000288 	.word	0x10000288

08106c1c <_lseek_r>:
 8106c1c:	b538      	push	{r3, r4, r5, lr}
 8106c1e:	4d07      	ldr	r5, [pc, #28]	; (8106c3c <_lseek_r+0x20>)
 8106c20:	4604      	mov	r4, r0
 8106c22:	4608      	mov	r0, r1
 8106c24:	4611      	mov	r1, r2
 8106c26:	2200      	movs	r2, #0
 8106c28:	602a      	str	r2, [r5, #0]
 8106c2a:	461a      	mov	r2, r3
 8106c2c:	f7fa fc52 	bl	81014d4 <_lseek>
 8106c30:	1c43      	adds	r3, r0, #1
 8106c32:	d102      	bne.n	8106c3a <_lseek_r+0x1e>
 8106c34:	682b      	ldr	r3, [r5, #0]
 8106c36:	b103      	cbz	r3, 8106c3a <_lseek_r+0x1e>
 8106c38:	6023      	str	r3, [r4, #0]
 8106c3a:	bd38      	pop	{r3, r4, r5, pc}
 8106c3c:	10000288 	.word	0x10000288

08106c40 <__malloc_lock>:
 8106c40:	4801      	ldr	r0, [pc, #4]	; (8106c48 <__malloc_lock+0x8>)
 8106c42:	f7ff bb55 	b.w	81062f0 <__retarget_lock_acquire_recursive>
 8106c46:	bf00      	nop
 8106c48:	10000280 	.word	0x10000280

08106c4c <__malloc_unlock>:
 8106c4c:	4801      	ldr	r0, [pc, #4]	; (8106c54 <__malloc_unlock+0x8>)
 8106c4e:	f7ff bb50 	b.w	81062f2 <__retarget_lock_release_recursive>
 8106c52:	bf00      	nop
 8106c54:	10000280 	.word	0x10000280

08106c58 <_read_r>:
 8106c58:	b538      	push	{r3, r4, r5, lr}
 8106c5a:	4d07      	ldr	r5, [pc, #28]	; (8106c78 <_read_r+0x20>)
 8106c5c:	4604      	mov	r4, r0
 8106c5e:	4608      	mov	r0, r1
 8106c60:	4611      	mov	r1, r2
 8106c62:	2200      	movs	r2, #0
 8106c64:	602a      	str	r2, [r5, #0]
 8106c66:	461a      	mov	r2, r3
 8106c68:	f7fa fbd4 	bl	8101414 <_read>
 8106c6c:	1c43      	adds	r3, r0, #1
 8106c6e:	d102      	bne.n	8106c76 <_read_r+0x1e>
 8106c70:	682b      	ldr	r3, [r5, #0]
 8106c72:	b103      	cbz	r3, 8106c76 <_read_r+0x1e>
 8106c74:	6023      	str	r3, [r4, #0]
 8106c76:	bd38      	pop	{r3, r4, r5, pc}
 8106c78:	10000288 	.word	0x10000288

08106c7c <_init>:
 8106c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106c7e:	bf00      	nop
 8106c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106c82:	bc08      	pop	{r3}
 8106c84:	469e      	mov	lr, r3
 8106c86:	4770      	bx	lr

08106c88 <_fini>:
 8106c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106c8a:	bf00      	nop
 8106c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106c8e:	bc08      	pop	{r3}
 8106c90:	469e      	mov	lr, r3
 8106c92:	4770      	bx	lr
