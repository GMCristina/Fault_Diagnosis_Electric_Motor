
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b17c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000052c  0810b420  0810b420  0001b420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b94c  0810b94c  0001b94c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b954  0810b954  0001b954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810b958  0810b958  0001b958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  10000000  0810b95c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0003ea18  100001e4  0810bb40  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1003ebfc  0810bb40  0002ebfc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f8e9  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003298  00000000  00000000  0003fafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e28  00000000  00000000  00042d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d40  00000000  00000000  00043bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bf2b  00000000  00000000  00044900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012d8e  00000000  00000000  0008082b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185f7d  00000000  00000000  000935b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00219536  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000050a8  00000000  00000000  0021958c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e4 	.word	0x100001e4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810b404 	.word	0x0810b404

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e8 	.word	0x100001e8
 81002dc:	0810b404 	.word	0x0810b404

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a4 	b.w	81010f8 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468c      	mov	ip, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	f040 8083 	bne.w	8100f4a <__udivmoddi4+0x116>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4617      	mov	r7, r2
 8100e48:	d947      	bls.n	8100eda <__udivmoddi4+0xa6>
 8100e4a:	fab2 f282 	clz	r2, r2
 8100e4e:	b142      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	f1c2 0020 	rsb	r0, r2, #32
 8100e54:	fa24 f000 	lsr.w	r0, r4, r0
 8100e58:	4091      	lsls	r1, r2
 8100e5a:	4097      	lsls	r7, r2
 8100e5c:	ea40 0c01 	orr.w	ip, r0, r1
 8100e60:	4094      	lsls	r4, r2
 8100e62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100e66:	0c23      	lsrs	r3, r4, #16
 8100e68:	fbbc f6f8 	udiv	r6, ip, r8
 8100e6c:	fa1f fe87 	uxth.w	lr, r7
 8100e70:	fb08 c116 	mls	r1, r8, r6, ip
 8100e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e78:	fb06 f10e 	mul.w	r1, r6, lr
 8100e7c:	4299      	cmp	r1, r3
 8100e7e:	d909      	bls.n	8100e94 <__udivmoddi4+0x60>
 8100e80:	18fb      	adds	r3, r7, r3
 8100e82:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e86:	f080 8119 	bcs.w	81010bc <__udivmoddi4+0x288>
 8100e8a:	4299      	cmp	r1, r3
 8100e8c:	f240 8116 	bls.w	81010bc <__udivmoddi4+0x288>
 8100e90:	3e02      	subs	r6, #2
 8100e92:	443b      	add	r3, r7
 8100e94:	1a5b      	subs	r3, r3, r1
 8100e96:	b2a4      	uxth	r4, r4
 8100e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8100e9c:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea4:	fb00 fe0e 	mul.w	lr, r0, lr
 8100ea8:	45a6      	cmp	lr, r4
 8100eaa:	d909      	bls.n	8100ec0 <__udivmoddi4+0x8c>
 8100eac:	193c      	adds	r4, r7, r4
 8100eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb2:	f080 8105 	bcs.w	81010c0 <__udivmoddi4+0x28c>
 8100eb6:	45a6      	cmp	lr, r4
 8100eb8:	f240 8102 	bls.w	81010c0 <__udivmoddi4+0x28c>
 8100ebc:	3802      	subs	r0, #2
 8100ebe:	443c      	add	r4, r7
 8100ec0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100ec4:	eba4 040e 	sub.w	r4, r4, lr
 8100ec8:	2600      	movs	r6, #0
 8100eca:	b11d      	cbz	r5, 8100ed4 <__udivmoddi4+0xa0>
 8100ecc:	40d4      	lsrs	r4, r2
 8100ece:	2300      	movs	r3, #0
 8100ed0:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed4:	4631      	mov	r1, r6
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	b902      	cbnz	r2, 8100ede <__udivmoddi4+0xaa>
 8100edc:	deff      	udf	#255	; 0xff
 8100ede:	fab2 f282 	clz	r2, r2
 8100ee2:	2a00      	cmp	r2, #0
 8100ee4:	d150      	bne.n	8100f88 <__udivmoddi4+0x154>
 8100ee6:	1bcb      	subs	r3, r1, r7
 8100ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100eec:	fa1f f887 	uxth.w	r8, r7
 8100ef0:	2601      	movs	r6, #1
 8100ef2:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ef6:	0c21      	lsrs	r1, r4, #16
 8100ef8:	fb0e 331c 	mls	r3, lr, ip, r3
 8100efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f00:	fb08 f30c 	mul.w	r3, r8, ip
 8100f04:	428b      	cmp	r3, r1
 8100f06:	d907      	bls.n	8100f18 <__udivmoddi4+0xe4>
 8100f08:	1879      	adds	r1, r7, r1
 8100f0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100f0e:	d202      	bcs.n	8100f16 <__udivmoddi4+0xe2>
 8100f10:	428b      	cmp	r3, r1
 8100f12:	f200 80e9 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f16:	4684      	mov	ip, r0
 8100f18:	1ac9      	subs	r1, r1, r3
 8100f1a:	b2a3      	uxth	r3, r4
 8100f1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f20:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100f28:	fb08 f800 	mul.w	r8, r8, r0
 8100f2c:	45a0      	cmp	r8, r4
 8100f2e:	d907      	bls.n	8100f40 <__udivmoddi4+0x10c>
 8100f30:	193c      	adds	r4, r7, r4
 8100f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8100f36:	d202      	bcs.n	8100f3e <__udivmoddi4+0x10a>
 8100f38:	45a0      	cmp	r8, r4
 8100f3a:	f200 80d9 	bhi.w	81010f0 <__udivmoddi4+0x2bc>
 8100f3e:	4618      	mov	r0, r3
 8100f40:	eba4 0408 	sub.w	r4, r4, r8
 8100f44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f48:	e7bf      	b.n	8100eca <__udivmoddi4+0x96>
 8100f4a:	428b      	cmp	r3, r1
 8100f4c:	d909      	bls.n	8100f62 <__udivmoddi4+0x12e>
 8100f4e:	2d00      	cmp	r5, #0
 8100f50:	f000 80b1 	beq.w	81010b6 <__udivmoddi4+0x282>
 8100f54:	2600      	movs	r6, #0
 8100f56:	e9c5 0100 	strd	r0, r1, [r5]
 8100f5a:	4630      	mov	r0, r6
 8100f5c:	4631      	mov	r1, r6
 8100f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f62:	fab3 f683 	clz	r6, r3
 8100f66:	2e00      	cmp	r6, #0
 8100f68:	d14a      	bne.n	8101000 <__udivmoddi4+0x1cc>
 8100f6a:	428b      	cmp	r3, r1
 8100f6c:	d302      	bcc.n	8100f74 <__udivmoddi4+0x140>
 8100f6e:	4282      	cmp	r2, r0
 8100f70:	f200 80b8 	bhi.w	81010e4 <__udivmoddi4+0x2b0>
 8100f74:	1a84      	subs	r4, r0, r2
 8100f76:	eb61 0103 	sbc.w	r1, r1, r3
 8100f7a:	2001      	movs	r0, #1
 8100f7c:	468c      	mov	ip, r1
 8100f7e:	2d00      	cmp	r5, #0
 8100f80:	d0a8      	beq.n	8100ed4 <__udivmoddi4+0xa0>
 8100f82:	e9c5 4c00 	strd	r4, ip, [r5]
 8100f86:	e7a5      	b.n	8100ed4 <__udivmoddi4+0xa0>
 8100f88:	f1c2 0320 	rsb	r3, r2, #32
 8100f8c:	fa20 f603 	lsr.w	r6, r0, r3
 8100f90:	4097      	lsls	r7, r2
 8100f92:	fa01 f002 	lsl.w	r0, r1, r2
 8100f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f9a:	40d9      	lsrs	r1, r3
 8100f9c:	4330      	orrs	r0, r6
 8100f9e:	0c03      	lsrs	r3, r0, #16
 8100fa0:	fbb1 f6fe 	udiv	r6, r1, lr
 8100fa4:	fa1f f887 	uxth.w	r8, r7
 8100fa8:	fb0e 1116 	mls	r1, lr, r6, r1
 8100fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100fb0:	fb06 f108 	mul.w	r1, r6, r8
 8100fb4:	4299      	cmp	r1, r3
 8100fb6:	fa04 f402 	lsl.w	r4, r4, r2
 8100fba:	d909      	bls.n	8100fd0 <__udivmoddi4+0x19c>
 8100fbc:	18fb      	adds	r3, r7, r3
 8100fbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8100fc2:	f080 808d 	bcs.w	81010e0 <__udivmoddi4+0x2ac>
 8100fc6:	4299      	cmp	r1, r3
 8100fc8:	f240 808a 	bls.w	81010e0 <__udivmoddi4+0x2ac>
 8100fcc:	3e02      	subs	r6, #2
 8100fce:	443b      	add	r3, r7
 8100fd0:	1a5b      	subs	r3, r3, r1
 8100fd2:	b281      	uxth	r1, r0
 8100fd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8100fd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8100fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fe0:	fb00 f308 	mul.w	r3, r0, r8
 8100fe4:	428b      	cmp	r3, r1
 8100fe6:	d907      	bls.n	8100ff8 <__udivmoddi4+0x1c4>
 8100fe8:	1879      	adds	r1, r7, r1
 8100fea:	f100 3cff 	add.w	ip, r0, #4294967295
 8100fee:	d273      	bcs.n	81010d8 <__udivmoddi4+0x2a4>
 8100ff0:	428b      	cmp	r3, r1
 8100ff2:	d971      	bls.n	81010d8 <__udivmoddi4+0x2a4>
 8100ff4:	3802      	subs	r0, #2
 8100ff6:	4439      	add	r1, r7
 8100ff8:	1acb      	subs	r3, r1, r3
 8100ffa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100ffe:	e778      	b.n	8100ef2 <__udivmoddi4+0xbe>
 8101000:	f1c6 0c20 	rsb	ip, r6, #32
 8101004:	fa03 f406 	lsl.w	r4, r3, r6
 8101008:	fa22 f30c 	lsr.w	r3, r2, ip
 810100c:	431c      	orrs	r4, r3
 810100e:	fa20 f70c 	lsr.w	r7, r0, ip
 8101012:	fa01 f306 	lsl.w	r3, r1, r6
 8101016:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 810101a:	fa21 f10c 	lsr.w	r1, r1, ip
 810101e:	431f      	orrs	r7, r3
 8101020:	0c3b      	lsrs	r3, r7, #16
 8101022:	fbb1 f9fe 	udiv	r9, r1, lr
 8101026:	fa1f f884 	uxth.w	r8, r4
 810102a:	fb0e 1119 	mls	r1, lr, r9, r1
 810102e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8101032:	fb09 fa08 	mul.w	sl, r9, r8
 8101036:	458a      	cmp	sl, r1
 8101038:	fa02 f206 	lsl.w	r2, r2, r6
 810103c:	fa00 f306 	lsl.w	r3, r0, r6
 8101040:	d908      	bls.n	8101054 <__udivmoddi4+0x220>
 8101042:	1861      	adds	r1, r4, r1
 8101044:	f109 30ff 	add.w	r0, r9, #4294967295
 8101048:	d248      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 810104a:	458a      	cmp	sl, r1
 810104c:	d946      	bls.n	81010dc <__udivmoddi4+0x2a8>
 810104e:	f1a9 0902 	sub.w	r9, r9, #2
 8101052:	4421      	add	r1, r4
 8101054:	eba1 010a 	sub.w	r1, r1, sl
 8101058:	b2bf      	uxth	r7, r7
 810105a:	fbb1 f0fe 	udiv	r0, r1, lr
 810105e:	fb0e 1110 	mls	r1, lr, r0, r1
 8101062:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8101066:	fb00 f808 	mul.w	r8, r0, r8
 810106a:	45b8      	cmp	r8, r7
 810106c:	d907      	bls.n	810107e <__udivmoddi4+0x24a>
 810106e:	19e7      	adds	r7, r4, r7
 8101070:	f100 31ff 	add.w	r1, r0, #4294967295
 8101074:	d22e      	bcs.n	81010d4 <__udivmoddi4+0x2a0>
 8101076:	45b8      	cmp	r8, r7
 8101078:	d92c      	bls.n	81010d4 <__udivmoddi4+0x2a0>
 810107a:	3802      	subs	r0, #2
 810107c:	4427      	add	r7, r4
 810107e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101082:	eba7 0708 	sub.w	r7, r7, r8
 8101086:	fba0 8902 	umull	r8, r9, r0, r2
 810108a:	454f      	cmp	r7, r9
 810108c:	46c6      	mov	lr, r8
 810108e:	4649      	mov	r1, r9
 8101090:	d31a      	bcc.n	81010c8 <__udivmoddi4+0x294>
 8101092:	d017      	beq.n	81010c4 <__udivmoddi4+0x290>
 8101094:	b15d      	cbz	r5, 81010ae <__udivmoddi4+0x27a>
 8101096:	ebb3 020e 	subs.w	r2, r3, lr
 810109a:	eb67 0701 	sbc.w	r7, r7, r1
 810109e:	fa07 fc0c 	lsl.w	ip, r7, ip
 81010a2:	40f2      	lsrs	r2, r6
 81010a4:	ea4c 0202 	orr.w	r2, ip, r2
 81010a8:	40f7      	lsrs	r7, r6
 81010aa:	e9c5 2700 	strd	r2, r7, [r5]
 81010ae:	2600      	movs	r6, #0
 81010b0:	4631      	mov	r1, r6
 81010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81010b6:	462e      	mov	r6, r5
 81010b8:	4628      	mov	r0, r5
 81010ba:	e70b      	b.n	8100ed4 <__udivmoddi4+0xa0>
 81010bc:	4606      	mov	r6, r0
 81010be:	e6e9      	b.n	8100e94 <__udivmoddi4+0x60>
 81010c0:	4618      	mov	r0, r3
 81010c2:	e6fd      	b.n	8100ec0 <__udivmoddi4+0x8c>
 81010c4:	4543      	cmp	r3, r8
 81010c6:	d2e5      	bcs.n	8101094 <__udivmoddi4+0x260>
 81010c8:	ebb8 0e02 	subs.w	lr, r8, r2
 81010cc:	eb69 0104 	sbc.w	r1, r9, r4
 81010d0:	3801      	subs	r0, #1
 81010d2:	e7df      	b.n	8101094 <__udivmoddi4+0x260>
 81010d4:	4608      	mov	r0, r1
 81010d6:	e7d2      	b.n	810107e <__udivmoddi4+0x24a>
 81010d8:	4660      	mov	r0, ip
 81010da:	e78d      	b.n	8100ff8 <__udivmoddi4+0x1c4>
 81010dc:	4681      	mov	r9, r0
 81010de:	e7b9      	b.n	8101054 <__udivmoddi4+0x220>
 81010e0:	4666      	mov	r6, ip
 81010e2:	e775      	b.n	8100fd0 <__udivmoddi4+0x19c>
 81010e4:	4630      	mov	r0, r6
 81010e6:	e74a      	b.n	8100f7e <__udivmoddi4+0x14a>
 81010e8:	f1ac 0c02 	sub.w	ip, ip, #2
 81010ec:	4439      	add	r1, r7
 81010ee:	e713      	b.n	8100f18 <__udivmoddi4+0xe4>
 81010f0:	3802      	subs	r0, #2
 81010f2:	443c      	add	r4, r7
 81010f4:	e724      	b.n	8100f40 <__udivmoddi4+0x10c>
 81010f6:	bf00      	nop

081010f8 <__aeabi_idiv0>:
 81010f8:	4770      	bx	lr
 81010fa:	bf00      	nop

081010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010fc:	b480      	push	{r7}
 81010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101100:	4b0b      	ldr	r3, [pc, #44]	; (8101130 <SystemInit+0x34>)
 8101102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101106:	4a0a      	ldr	r2, [pc, #40]	; (8101130 <SystemInit+0x34>)
 8101108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101110:	4b07      	ldr	r3, [pc, #28]	; (8101130 <SystemInit+0x34>)
 8101112:	691b      	ldr	r3, [r3, #16]
 8101114:	4a06      	ldr	r2, [pc, #24]	; (8101130 <SystemInit+0x34>)
 8101116:	f043 0310 	orr.w	r3, r3, #16
 810111a:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810111c:	4b04      	ldr	r3, [pc, #16]	; (8101130 <SystemInit+0x34>)
 810111e:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8101122:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101124:	bf00      	nop
 8101126:	46bd      	mov	sp, r7
 8101128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810112c:	4770      	bx	lr
 810112e:	bf00      	nop
 8101130:	e000ed00 	.word	0xe000ed00

08101134 <ADE9000_Setup>:
int8_t flag_read = 0;
int32_t n_int = 0;

union DATA va[N_SAMPLE], ia[N_SAMPLE];

void ADE9000_Setup(){
 8101134:	b580      	push	{r7, lr}
 8101136:	b082      	sub	sp, #8
 8101138:	af00      	add	r7, sp, #0
	uint32_t value_reg_32;
	uint16_t value_reg_16;

	// ADDR_PGA_GAIN
	value_reg_16 = 0x0000; //gain all channel 1
 810113a:	2300      	movs	r3, #0
 810113c:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_PGA_GAIN,value_reg_16);
 810113e:	88fb      	ldrh	r3, [r7, #6]
 8101140:	4619      	mov	r1, r3
 8101142:	f240 40b9 	movw	r0, #1209	; 0x4b9
 8101146:	f000 f8e9 	bl	810131c <ADE9000_SPI_Write_16>

	//CONFIG2
	value_reg_16 = 	0x0C00;			//Default High pass corner frequency of 1.25Hz
 810114a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810114e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG2,value_reg_16);
 8101150:	88fb      	ldrh	r3, [r7, #6]
 8101152:	4619      	mov	r1, r3
 8101154:	f240 40af 	movw	r0, #1199	; 0x4af
 8101158:	f000 f8e0 	bl	810131c <ADE9000_SPI_Write_16>

	//CONFIG1
	//EXT_REF off
	value_reg_16 = 0x000000;
 810115c:	2300      	movs	r3, #0
 810115e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG1,value_reg_16);
 8101160:	88fb      	ldrh	r3, [r7, #6]
 8101162:	4619      	mov	r1, r3
 8101164:	f240 4081 	movw	r0, #1153	; 0x481
 8101168:	f000 f8d8 	bl	810131c <ADE9000_SPI_Write_16>

	//ACCMODE
	value_reg_16= 0x0000;			//3P4W Wye configuration
 810116c:	2300      	movs	r3, #0
 810116e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_ACCMODE,value_reg_16);
 8101170:	88fb      	ldrh	r3, [r7, #6]
 8101172:	4619      	mov	r1, r3
 8101174:	f240 4092 	movw	r0, #1170	; 0x492
 8101178:	f000 f8d0 	bl	810131c <ADE9000_SPI_Write_16>
	//value_reg_16 = 0x1020;//IN, sinc4, stop full, fixed rate, stop, tutti canali(0000)
	//value_reg_16 = 0x0029; //no IN, sinc4, stop full, fixed rate, stop, solo VA (1001)
	//value_reg_16 = 0x0021; //no IN, sinc4, stop full, fixed rate, stop, solo Ia e VA (0001)
	//value_reg_16 = 0x0221; //no IN, LPF, stop full, fixed rate, stop, solo Ia e VA (0001)

	value_reg_16 = 0x0000;
 810117c:	2300      	movs	r3, #0
 810117e:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_IN_EN<<12);
	value_reg_16 = value_reg_16 | (WF_SRC<<8);
	value_reg_16 = value_reg_16 | (WF_MODE<<6);
 8101180:	88fb      	ldrh	r3, [r7, #6]
 8101182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101186:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_CAP_SEL<<5);
 8101188:	88fb      	ldrh	r3, [r7, #6]
 810118a:	f043 0320 	orr.w	r3, r3, #32
 810118e:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | BURST_CHAN;
 8101190:	88fb      	ldrh	r3, [r7, #6]
 8101192:	f043 0301 	orr.w	r3, r3, #1
 8101196:	80fb      	strh	r3, [r7, #6]

	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101198:	88fb      	ldrh	r3, [r7, #6]
 810119a:	4619      	mov	r1, r3
 810119c:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81011a0:	f000 f8bc 	bl	810131c <ADE9000_SPI_Write_16>
	// 1 bit per pagina: pag15-pag0
	//fa PageFULL in STATUS0

	//value_reg_16 = 0x8000; //page 15
	//value_reg_16 = 0xFFFF; //all page
	value_reg_16 = 0x8080; //page 15, page 7 (metà)
 81011a4:	f248 0380 	movw	r3, #32896	; 0x8080
 81011a8:	80fb      	strh	r3, [r7, #6]
	//value_reg_16 = 0x0000; //no int
	ADE9000_SPI_Write_16(ADDR_WFB_PG_IRQEN,value_reg_16);
 81011aa:	88fb      	ldrh	r3, [r7, #6]
 81011ac:	4619      	mov	r1, r3
 81011ae:	f240 40a1 	movw	r0, #1185	; 0x4a1
 81011b2:	f000 f8b3 	bl	810131c <ADE9000_SPI_Write_16>

	//ADDR_MASK0
	//IRQ0 per full page (bit 17)
	//quando una delle pagine settate è piena
	value_reg_32 = 0x00020000;
 81011b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81011ba:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK0,value_reg_32);
 81011bc:	6839      	ldr	r1, [r7, #0]
 81011be:	f240 4005 	movw	r0, #1029	; 0x405
 81011c2:	f000 f8df 	bl	8101384 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK0);
 81011c6:	f240 4005 	movw	r0, #1029	; 0x405
 81011ca:	f000 f86b 	bl	81012a4 <ADE9000_SPI_Read_32>
 81011ce:	6038      	str	r0, [r7, #0]

	//ADDR_MASK1
	//disable all int
	value_reg_32 = 0x00000000;
 81011d0:	2300      	movs	r3, #0
 81011d2:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK1,value_reg_32);
 81011d4:	6839      	ldr	r1, [r7, #0]
 81011d6:	f240 4006 	movw	r0, #1030	; 0x406
 81011da:	f000 f8d3 	bl	8101384 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK1);
 81011de:	f240 4006 	movw	r0, #1030	; 0x406
 81011e2:	f000 f85f 	bl	81012a4 <ADE9000_SPI_Read_32>
 81011e6:	6038      	str	r0, [r7, #0]

	//ADDR_RUN
	//Start ADE9000 measurement
	value_reg_16 = 0x0001;
 81011e8:	2301      	movs	r3, #1
 81011ea:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16);
 81011ec:	88fb      	ldrh	r3, [r7, #6]
 81011ee:	4619      	mov	r1, r3
 81011f0:	f44f 6090 	mov.w	r0, #1152	; 0x480
 81011f4:	f000 f892 	bl	810131c <ADE9000_SPI_Write_16>
}
 81011f8:	bf00      	nop
 81011fa:	3708      	adds	r7, #8
 81011fc:	46bd      	mov	sp, r7
 81011fe:	bd80      	pop	{r7, pc}

08101200 <ADE9000_Power>:

//power-on sequence
void ADE9000_Power(void){
 8101200:	b580      	push	{r7, lr}
 8101202:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8101204:	2200      	movs	r2, #0
 8101206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810120a:	480c      	ldr	r0, [pc, #48]	; (810123c <ADE9000_Power+0x3c>)
 810120c:	f001 fac0 	bl	8102790 <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8101210:	2200      	movs	r2, #0
 8101212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101216:	4809      	ldr	r0, [pc, #36]	; (810123c <ADE9000_Power+0x3c>)
 8101218:	f001 faba 	bl	8102790 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 810121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101220:	f000 ffbe 	bl	81021a0 <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8101224:	2201      	movs	r2, #1
 8101226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 810122a:	4804      	ldr	r0, [pc, #16]	; (810123c <ADE9000_Power+0x3c>)
 810122c:	f001 fab0 	bl	8102790 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8101230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101234:	f000 ffb4 	bl	81021a0 <HAL_Delay>
    } while ((value_reg_32 & 0x00010000)==0);
    //Clear IRQ1
    value_reg_32 = value_reg_32 & 0x00010000;
    ADE9000_SPI_Write_32(ADDR_STATUS1,value_reg_32);
    */
}
 8101238:	bf00      	nop
 810123a:	bd80      	pop	{r7, pc}
 810123c:	58021000 	.word	0x58021000

08101240 <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 8101240:	b580      	push	{r7, lr}
 8101242:	b084      	sub	sp, #16
 8101244:	af00      	add	r7, sp, #0
 8101246:	4603      	mov	r3, r0
 8101248:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810124a:	88fb      	ldrh	r3, [r7, #6]
 810124c:	011b      	lsls	r3, r3, #4
 810124e:	b29b      	uxth	r3, r3
 8101250:	3308      	adds	r3, #8
 8101252:	b29b      	uxth	r3, r3
 8101254:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101256:	2200      	movs	r2, #0
 8101258:	f44f 7100 	mov.w	r1, #512	; 0x200
 810125c:	480f      	ldr	r0, [pc, #60]	; (810129c <ADE9000_SPI_Read_16+0x5c>)
 810125e:	f001 fa97 	bl	8102790 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101262:	f107 0108 	add.w	r1, r7, #8
 8101266:	2364      	movs	r3, #100	; 0x64
 8101268:	2201      	movs	r2, #1
 810126a:	480d      	ldr	r0, [pc, #52]	; (81012a0 <ADE9000_SPI_Read_16+0x60>)
 810126c:	f003 f99e 	bl	81045ac <HAL_SPI_Transmit>
 8101270:	4603      	mov	r3, r0
 8101272:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 8101274:	f107 010c 	add.w	r1, r7, #12
 8101278:	2364      	movs	r3, #100	; 0x64
 810127a:	2201      	movs	r2, #1
 810127c:	4808      	ldr	r0, [pc, #32]	; (81012a0 <ADE9000_SPI_Read_16+0x60>)
 810127e:	f003 fb83 	bl	8104988 <HAL_SPI_Receive>
 8101282:	4603      	mov	r3, r0
 8101284:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101286:	2201      	movs	r2, #1
 8101288:	f44f 7100 	mov.w	r1, #512	; 0x200
 810128c:	4803      	ldr	r0, [pc, #12]	; (810129c <ADE9000_SPI_Read_16+0x5c>)
 810128e:	f001 fa7f 	bl	8102790 <HAL_GPIO_WritePin>

	return data.data_16;
 8101292:	89bb      	ldrh	r3, [r7, #12]
}
 8101294:	4618      	mov	r0, r3
 8101296:	3710      	adds	r7, #16
 8101298:	46bd      	mov	sp, r7
 810129a:	bd80      	pop	{r7, pc}
 810129c:	58021800 	.word	0x58021800
 81012a0:	1003eaa4 	.word	0x1003eaa4

081012a4 <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 81012a4:	b580      	push	{r7, lr}
 81012a6:	b086      	sub	sp, #24
 81012a8:	af00      	add	r7, sp, #0
 81012aa:	4603      	mov	r3, r0
 81012ac:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81012ae:	88fb      	ldrh	r3, [r7, #6]
 81012b0:	011b      	lsls	r3, r3, #4
 81012b2:	b29b      	uxth	r3, r3
 81012b4:	3308      	adds	r3, #8
 81012b6:	b29b      	uxth	r3, r3
 81012b8:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81012ba:	2200      	movs	r2, #0
 81012bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 81012c0:	4814      	ldr	r0, [pc, #80]	; (8101314 <ADE9000_SPI_Read_32+0x70>)
 81012c2:	f001 fa65 	bl	8102790 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81012c6:	f107 010c 	add.w	r1, r7, #12
 81012ca:	2364      	movs	r3, #100	; 0x64
 81012cc:	2201      	movs	r2, #1
 81012ce:	4812      	ldr	r0, [pc, #72]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012d0:	f003 f96c 	bl	81045ac <HAL_SPI_Transmit>
 81012d4:	4603      	mov	r3, r0
 81012d6:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81012d8:	f107 0110 	add.w	r1, r7, #16
 81012dc:	3102      	adds	r1, #2
 81012de:	2364      	movs	r3, #100	; 0x64
 81012e0:	2201      	movs	r2, #1
 81012e2:	480d      	ldr	r0, [pc, #52]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012e4:	f003 fb50 	bl	8104988 <HAL_SPI_Receive>
 81012e8:	4603      	mov	r3, r0
 81012ea:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81012ec:	f107 0110 	add.w	r1, r7, #16
 81012f0:	2364      	movs	r3, #100	; 0x64
 81012f2:	2201      	movs	r2, #1
 81012f4:	4808      	ldr	r0, [pc, #32]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012f6:	f003 fb47 	bl	8104988 <HAL_SPI_Receive>
 81012fa:	4603      	mov	r3, r0
 81012fc:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81012fe:	2201      	movs	r2, #1
 8101300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101304:	4803      	ldr	r0, [pc, #12]	; (8101314 <ADE9000_SPI_Read_32+0x70>)
 8101306:	f001 fa43 	bl	8102790 <HAL_GPIO_WritePin>

	return data.data_32;
 810130a:	693b      	ldr	r3, [r7, #16]
}
 810130c:	4618      	mov	r0, r3
 810130e:	3718      	adds	r7, #24
 8101310:	46bd      	mov	sp, r7
 8101312:	bd80      	pop	{r7, pc}
 8101314:	58021800 	.word	0x58021800
 8101318:	1003eaa4 	.word	0x1003eaa4

0810131c <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 810131c:	b580      	push	{r7, lr}
 810131e:	b084      	sub	sp, #16
 8101320:	af00      	add	r7, sp, #0
 8101322:	4603      	mov	r3, r0
 8101324:	460a      	mov	r2, r1
 8101326:	80fb      	strh	r3, [r7, #6]
 8101328:	4613      	mov	r3, r2
 810132a:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 810132c:	88fb      	ldrh	r3, [r7, #6]
 810132e:	011b      	lsls	r3, r3, #4
 8101330:	b29b      	uxth	r3, r3
 8101332:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101334:	2200      	movs	r2, #0
 8101336:	f44f 7100 	mov.w	r1, #512	; 0x200
 810133a:	4810      	ldr	r0, [pc, #64]	; (810137c <ADE9000_SPI_Write_16+0x60>)
 810133c:	f001 fa28 	bl	8102790 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101340:	f107 010c 	add.w	r1, r7, #12
 8101344:	2364      	movs	r3, #100	; 0x64
 8101346:	2201      	movs	r2, #1
 8101348:	480d      	ldr	r0, [pc, #52]	; (8101380 <ADE9000_SPI_Write_16+0x64>)
 810134a:	f003 f92f 	bl	81045ac <HAL_SPI_Transmit>
 810134e:	4603      	mov	r3, r0
 8101350:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 8101352:	88bb      	ldrh	r3, [r7, #4]
 8101354:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 8101356:	f107 0108 	add.w	r1, r7, #8
 810135a:	2364      	movs	r3, #100	; 0x64
 810135c:	2201      	movs	r2, #1
 810135e:	4808      	ldr	r0, [pc, #32]	; (8101380 <ADE9000_SPI_Write_16+0x64>)
 8101360:	f003 f924 	bl	81045ac <HAL_SPI_Transmit>
 8101364:	4603      	mov	r3, r0
 8101366:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101368:	2201      	movs	r2, #1
 810136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810136e:	4803      	ldr	r0, [pc, #12]	; (810137c <ADE9000_SPI_Write_16+0x60>)
 8101370:	f001 fa0e 	bl	8102790 <HAL_GPIO_WritePin>

}
 8101374:	bf00      	nop
 8101376:	3710      	adds	r7, #16
 8101378:	46bd      	mov	sp, r7
 810137a:	bd80      	pop	{r7, pc}
 810137c:	58021800 	.word	0x58021800
 8101380:	1003eaa4 	.word	0x1003eaa4

08101384 <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 8101384:	b580      	push	{r7, lr}
 8101386:	b084      	sub	sp, #16
 8101388:	af00      	add	r7, sp, #0
 810138a:	4603      	mov	r3, r0
 810138c:	6039      	str	r1, [r7, #0]
 810138e:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8101390:	88fb      	ldrh	r3, [r7, #6]
 8101392:	011b      	lsls	r3, r3, #4
 8101394:	b29b      	uxth	r3, r3
 8101396:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101398:	2200      	movs	r2, #0
 810139a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810139e:	4815      	ldr	r0, [pc, #84]	; (81013f4 <ADE9000_SPI_Write_32+0x70>)
 81013a0:	f001 f9f6 	bl	8102790 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81013a4:	f107 010c 	add.w	r1, r7, #12
 81013a8:	2364      	movs	r3, #100	; 0x64
 81013aa:	2201      	movs	r2, #1
 81013ac:	4812      	ldr	r0, [pc, #72]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013ae:	f003 f8fd 	bl	81045ac <HAL_SPI_Transmit>
 81013b2:	4603      	mov	r3, r0
 81013b4:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 81013b6:	683b      	ldr	r3, [r7, #0]
 81013b8:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 81013ba:	f107 0108 	add.w	r1, r7, #8
 81013be:	3102      	adds	r1, #2
 81013c0:	2364      	movs	r3, #100	; 0x64
 81013c2:	2201      	movs	r2, #1
 81013c4:	480c      	ldr	r0, [pc, #48]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013c6:	f003 f8f1 	bl	81045ac <HAL_SPI_Transmit>
 81013ca:	4603      	mov	r3, r0
 81013cc:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81013ce:	f107 0108 	add.w	r1, r7, #8
 81013d2:	2364      	movs	r3, #100	; 0x64
 81013d4:	2201      	movs	r2, #1
 81013d6:	4808      	ldr	r0, [pc, #32]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013d8:	f003 f8e8 	bl	81045ac <HAL_SPI_Transmit>
 81013dc:	4603      	mov	r3, r0
 81013de:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81013e0:	2201      	movs	r2, #1
 81013e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 81013e6:	4803      	ldr	r0, [pc, #12]	; (81013f4 <ADE9000_SPI_Write_32+0x70>)
 81013e8:	f001 f9d2 	bl	8102790 <HAL_GPIO_WritePin>

}
 81013ec:	bf00      	nop
 81013ee:	3710      	adds	r7, #16
 81013f0:	46bd      	mov	sp, r7
 81013f2:	bd80      	pop	{r7, pc}
 81013f4:	58021800 	.word	0x58021800
 81013f8:	1003eaa4 	.word	0x1003eaa4

081013fc <Start_Waveform_Buffer>:


void Start_Waveform_Buffer() {
 81013fc:	b580      	push	{r7, lr}
 81013fe:	b082      	sub	sp, #8
 8101400:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 8101402:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101406:	f7ff ff1b 	bl	8101240 <ADE9000_SPI_Read_16>
 810140a:	4603      	mov	r3, r0
 810140c:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16|0x0010);
 810140e:	88fb      	ldrh	r3, [r7, #6]
 8101410:	f043 0310 	orr.w	r3, r3, #16
 8101414:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101416:	88fb      	ldrh	r3, [r7, #6]
 8101418:	4619      	mov	r1, r3
 810141a:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810141e:	f7ff ff7d 	bl	810131c <ADE9000_SPI_Write_16>
}
 8101422:	bf00      	nop
 8101424:	3708      	adds	r7, #8
 8101426:	46bd      	mov	sp, r7
 8101428:	bd80      	pop	{r7, pc}

0810142a <Stop_Waveform_Buffer>:

void Stop_Waveform_Buffer(){
 810142a:	b580      	push	{r7, lr}
 810142c:	b082      	sub	sp, #8
 810142e:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 8101430:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101434:	f7ff ff04 	bl	8101240 <ADE9000_SPI_Read_16>
 8101438:	4603      	mov	r3, r0
 810143a:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16 & 0xFFEF);
 810143c:	88fb      	ldrh	r3, [r7, #6]
 810143e:	f023 0310 	bic.w	r3, r3, #16
 8101442:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101444:	88fb      	ldrh	r3, [r7, #6]
 8101446:	4619      	mov	r1, r3
 8101448:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810144c:	f7ff ff66 	bl	810131c <ADE9000_SPI_Write_16>
}
 8101450:	bf00      	nop
 8101452:	3708      	adds	r7, #8
 8101454:	46bd      	mov	sp, r7
 8101456:	bd80      	pop	{r7, pc}

08101458 <ADE9000_SPI_Burst_Read_two_ch>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_SPI_Burst_Read_two_ch(uint16_t Address, uint16_t n, int32_t* i, int32_t* v){
 8101458:	b580      	push	{r7, lr}
 810145a:	b088      	sub	sp, #32
 810145c:	af00      	add	r7, sp, #0
 810145e:	60ba      	str	r2, [r7, #8]
 8101460:	607b      	str	r3, [r7, #4]
 8101462:	4603      	mov	r3, r0
 8101464:	81fb      	strh	r3, [r7, #14]
 8101466:	460b      	mov	r3, r1
 8101468:	81bb      	strh	r3, [r7, #12]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810146a:	89fb      	ldrh	r3, [r7, #14]
 810146c:	011b      	lsls	r3, r3, #4
 810146e:	b29b      	uxth	r3, r3
 8101470:	3308      	adds	r3, #8
 8101472:	b29b      	uxth	r3, r3
 8101474:	82bb      	strh	r3, [r7, #20]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101476:	2200      	movs	r2, #0
 8101478:	f44f 7100 	mov.w	r1, #512	; 0x200
 810147c:	4829      	ldr	r0, [pc, #164]	; (8101524 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 810147e:	f001 f987 	bl	8102790 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101482:	f107 0114 	add.w	r1, r7, #20
 8101486:	2364      	movs	r3, #100	; 0x64
 8101488:	2201      	movs	r2, #1
 810148a:	4827      	ldr	r0, [pc, #156]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 810148c:	f003 f88e 	bl	81045ac <HAL_SPI_Transmit>
 8101490:	4603      	mov	r3, r0
 8101492:	777b      	strb	r3, [r7, #29]

	for(uint16_t j=0; j<n; j++){
 8101494:	2300      	movs	r3, #0
 8101496:	83fb      	strh	r3, [r7, #30]
 8101498:	e036      	b.n	8101508 <ADE9000_SPI_Burst_Read_two_ch+0xb0>
		//Receive data

		//NB: CONTROLLARE ORDINE (REGISTRI è I,V)
		ret = HAL_SPI_Receive(&hspi1,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 810149a:	f107 0118 	add.w	r1, r7, #24
 810149e:	3102      	adds	r1, #2
 81014a0:	2364      	movs	r3, #100	; 0x64
 81014a2:	2201      	movs	r2, #1
 81014a4:	4820      	ldr	r0, [pc, #128]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014a6:	f003 fa6f 	bl	8104988 <HAL_SPI_Receive>
 81014aa:	4603      	mov	r3, r0
 81014ac:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi1,app.data_8,SIZE_16,TIMEOUT_SPI);
 81014ae:	f107 0118 	add.w	r1, r7, #24
 81014b2:	2364      	movs	r3, #100	; 0x64
 81014b4:	2201      	movs	r2, #1
 81014b6:	481c      	ldr	r0, [pc, #112]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014b8:	f003 fa66 	bl	8104988 <HAL_SPI_Receive>
 81014bc:	4603      	mov	r3, r0
 81014be:	777b      	strb	r3, [r7, #29]
		*(i + j)= app.data_32;
 81014c0:	69b9      	ldr	r1, [r7, #24]
 81014c2:	8bfb      	ldrh	r3, [r7, #30]
 81014c4:	009b      	lsls	r3, r3, #2
 81014c6:	68ba      	ldr	r2, [r7, #8]
 81014c8:	4413      	add	r3, r2
 81014ca:	460a      	mov	r2, r1
 81014cc:	601a      	str	r2, [r3, #0]

		ret = HAL_SPI_Receive(&hspi1,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81014ce:	f107 0118 	add.w	r1, r7, #24
 81014d2:	3102      	adds	r1, #2
 81014d4:	2364      	movs	r3, #100	; 0x64
 81014d6:	2201      	movs	r2, #1
 81014d8:	4813      	ldr	r0, [pc, #76]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014da:	f003 fa55 	bl	8104988 <HAL_SPI_Receive>
 81014de:	4603      	mov	r3, r0
 81014e0:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi1,app.data_8,SIZE_16,TIMEOUT_SPI);
 81014e2:	f107 0118 	add.w	r1, r7, #24
 81014e6:	2364      	movs	r3, #100	; 0x64
 81014e8:	2201      	movs	r2, #1
 81014ea:	480f      	ldr	r0, [pc, #60]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014ec:	f003 fa4c 	bl	8104988 <HAL_SPI_Receive>
 81014f0:	4603      	mov	r3, r0
 81014f2:	777b      	strb	r3, [r7, #29]
		*(v + j)= app.data_32;
 81014f4:	69b9      	ldr	r1, [r7, #24]
 81014f6:	8bfb      	ldrh	r3, [r7, #30]
 81014f8:	009b      	lsls	r3, r3, #2
 81014fa:	687a      	ldr	r2, [r7, #4]
 81014fc:	4413      	add	r3, r2
 81014fe:	460a      	mov	r2, r1
 8101500:	601a      	str	r2, [r3, #0]
	for(uint16_t j=0; j<n; j++){
 8101502:	8bfb      	ldrh	r3, [r7, #30]
 8101504:	3301      	adds	r3, #1
 8101506:	83fb      	strh	r3, [r7, #30]
 8101508:	8bfa      	ldrh	r2, [r7, #30]
 810150a:	89bb      	ldrh	r3, [r7, #12]
 810150c:	429a      	cmp	r2, r3
 810150e:	d3c4      	bcc.n	810149a <ADE9000_SPI_Burst_Read_two_ch+0x42>
	}

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101510:	2201      	movs	r2, #1
 8101512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101516:	4803      	ldr	r0, [pc, #12]	; (8101524 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 8101518:	f001 f93a 	bl	8102790 <HAL_GPIO_WritePin>
}
 810151c:	bf00      	nop
 810151e:	3720      	adds	r7, #32
 8101520:	46bd      	mov	sp, r7
 8101522:	bd80      	pop	{r7, pc}
 8101524:	58021800 	.word	0x58021800
 8101528:	1003eaa4 	.word	0x1003eaa4
 810152c:	00000000 	.word	0x00000000

08101530 <ADE9000_Conv_ADC_I>:
	}
	printf("errori: %d\r\n",err);

}

void ADE9000_Conv_ADC_I(union DATA *data_i, uint32_t n) {
 8101530:	b590      	push	{r4, r7, lr}
 8101532:	b085      	sub	sp, #20
 8101534:	af00      	add	r7, sp, #0
 8101536:	6078      	str	r0, [r7, #4]
 8101538:	6039      	str	r1, [r7, #0]
	if (ACQUISITION_FREQ == 32000) {
		for (uint32_t i = 0; i < n; i++) {
 810153a:	2300      	movs	r3, #0
 810153c:	60fb      	str	r3, [r7, #12]
 810153e:	e024      	b.n	810158a <ADE9000_Conv_ADC_I+0x5a>
			data_i[i].data_float = ((float) data_i[i].data_int * V_REF / FULL_SCALE_CODE_SINC4) / FDT_I;
 8101540:	68fb      	ldr	r3, [r7, #12]
 8101542:	009b      	lsls	r3, r3, #2
 8101544:	687a      	ldr	r2, [r7, #4]
 8101546:	4413      	add	r3, r2
 8101548:	681b      	ldr	r3, [r3, #0]
 810154a:	ee07 3a90 	vmov	s15, r3
 810154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101552:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 81015d0 <ADE9000_Conv_ADC_I+0xa0>
 8101556:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810155a:	ee16 0a90 	vmov	r0, s13
 810155e:	f7ff f87b 	bl	8100658 <__aeabi_f2d>
 8101562:	a319      	add	r3, pc, #100	; (adr r3, 81015c8 <ADE9000_Conv_ADC_I+0x98>)
 8101564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101568:	f7ff f9f8 	bl	810095c <__aeabi_ddiv>
 810156c:	4602      	mov	r2, r0
 810156e:	460b      	mov	r3, r1
 8101570:	4610      	mov	r0, r2
 8101572:	4619      	mov	r1, r3
 8101574:	68fb      	ldr	r3, [r7, #12]
 8101576:	009b      	lsls	r3, r3, #2
 8101578:	687a      	ldr	r2, [r7, #4]
 810157a:	18d4      	adds	r4, r2, r3
 810157c:	f7ff fbbc 	bl	8100cf8 <__aeabi_d2f>
 8101580:	4603      	mov	r3, r0
 8101582:	6023      	str	r3, [r4, #0]
		for (uint32_t i = 0; i < n; i++) {
 8101584:	68fb      	ldr	r3, [r7, #12]
 8101586:	3301      	adds	r3, #1
 8101588:	60fb      	str	r3, [r7, #12]
 810158a:	68fa      	ldr	r2, [r7, #12]
 810158c:	683b      	ldr	r3, [r7, #0]
 810158e:	429a      	cmp	r2, r3
 8101590:	d3d6      	bcc.n	8101540 <ADE9000_Conv_ADC_I+0x10>
		for (uint32_t i = 0; i < n; i++) {
			data_i[i].data_float = ((float) data_i[i].data_int * V_REF / FULL_SCALE_CODE_LPF) / FDT_I;
		}
	}

	for (uint32_t i = 0; i < n; i++) {
 8101592:	2300      	movs	r3, #0
 8101594:	60bb      	str	r3, [r7, #8]
 8101596:	e00c      	b.n	81015b2 <ADE9000_Conv_ADC_I+0x82>
				data_i[i].data_float = (data_i[i].data_float - OFFSET_I)*GAIN_I;
 8101598:	68bb      	ldr	r3, [r7, #8]
 810159a:	009b      	lsls	r3, r3, #2
 810159c:	687a      	ldr	r2, [r7, #4]
 810159e:	441a      	add	r2, r3
 81015a0:	68bb      	ldr	r3, [r7, #8]
 81015a2:	009b      	lsls	r3, r3, #2
 81015a4:	6879      	ldr	r1, [r7, #4]
 81015a6:	440b      	add	r3, r1
 81015a8:	6812      	ldr	r2, [r2, #0]
 81015aa:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < n; i++) {
 81015ac:	68bb      	ldr	r3, [r7, #8]
 81015ae:	3301      	adds	r3, #1
 81015b0:	60bb      	str	r3, [r7, #8]
 81015b2:	68ba      	ldr	r2, [r7, #8]
 81015b4:	683b      	ldr	r3, [r7, #0]
 81015b6:	429a      	cmp	r2, r3
 81015b8:	d3ee      	bcc.n	8101598 <ADE9000_Conv_ADC_I+0x68>
	}


}
 81015ba:	bf00      	nop
 81015bc:	bf00      	nop
 81015be:	3714      	adds	r7, #20
 81015c0:	46bd      	mov	sp, r7
 81015c2:	bd90      	pop	{r4, r7, pc}
 81015c4:	f3af 8000 	nop.w
 81015c8:	19ce075f 	.word	0x19ce075f
 81015cc:	3f7bda51 	.word	0x3f7bda51
 81015d0:	4c7fe070 	.word	0x4c7fe070
 81015d4:	00000000 	.word	0x00000000

081015d8 <ADE9000_Conv_ADC_V>:

void ADE9000_Conv_ADC_V(union DATA *data_v, uint32_t n) {
 81015d8:	b590      	push	{r4, r7, lr}
 81015da:	b085      	sub	sp, #20
 81015dc:	af00      	add	r7, sp, #0
 81015de:	6078      	str	r0, [r7, #4]
 81015e0:	6039      	str	r1, [r7, #0]
	if (ACQUISITION_FREQ == 32000) {
		for (uint32_t i = 0; i < n; i++) {
 81015e2:	2300      	movs	r3, #0
 81015e4:	60fb      	str	r3, [r7, #12]
 81015e6:	e024      	b.n	8101632 <ADE9000_Conv_ADC_V+0x5a>
			data_v[i].data_float = ((float) data_v[i].data_int * V_REF / FULL_SCALE_CODE_SINC4) / FDT_V;
 81015e8:	68fb      	ldr	r3, [r7, #12]
 81015ea:	009b      	lsls	r3, r3, #2
 81015ec:	687a      	ldr	r2, [r7, #4]
 81015ee:	4413      	add	r3, r2
 81015f0:	681b      	ldr	r3, [r3, #0]
 81015f2:	ee07 3a90 	vmov	s15, r3
 81015f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81015fa:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8101678 <ADE9000_Conv_ADC_V+0xa0>
 81015fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101602:	ee16 0a90 	vmov	r0, s13
 8101606:	f7ff f827 	bl	8100658 <__aeabi_f2d>
 810160a:	a319      	add	r3, pc, #100	; (adr r3, 8101670 <ADE9000_Conv_ADC_V+0x98>)
 810160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101610:	f7ff f9a4 	bl	810095c <__aeabi_ddiv>
 8101614:	4602      	mov	r2, r0
 8101616:	460b      	mov	r3, r1
 8101618:	4610      	mov	r0, r2
 810161a:	4619      	mov	r1, r3
 810161c:	68fb      	ldr	r3, [r7, #12]
 810161e:	009b      	lsls	r3, r3, #2
 8101620:	687a      	ldr	r2, [r7, #4]
 8101622:	18d4      	adds	r4, r2, r3
 8101624:	f7ff fb68 	bl	8100cf8 <__aeabi_d2f>
 8101628:	4603      	mov	r3, r0
 810162a:	6023      	str	r3, [r4, #0]
		for (uint32_t i = 0; i < n; i++) {
 810162c:	68fb      	ldr	r3, [r7, #12]
 810162e:	3301      	adds	r3, #1
 8101630:	60fb      	str	r3, [r7, #12]
 8101632:	68fa      	ldr	r2, [r7, #12]
 8101634:	683b      	ldr	r3, [r7, #0]
 8101636:	429a      	cmp	r2, r3
 8101638:	d3d6      	bcc.n	81015e8 <ADE9000_Conv_ADC_V+0x10>
		for (uint32_t i = 0; i < n; i++) {
			data_v[i].data_float = ((float) data_v[i].data_int * V_REF / FULL_SCALE_CODE_LPF) / FDT_V;
		}
	}

	for (uint32_t i = 0; i < n; i++) {
 810163a:	2300      	movs	r3, #0
 810163c:	60bb      	str	r3, [r7, #8]
 810163e:	e00c      	b.n	810165a <ADE9000_Conv_ADC_V+0x82>
				data_v[i].data_float = (data_v[i].data_float - OFFSET_V)*GAIN_V;
 8101640:	68bb      	ldr	r3, [r7, #8]
 8101642:	009b      	lsls	r3, r3, #2
 8101644:	687a      	ldr	r2, [r7, #4]
 8101646:	441a      	add	r2, r3
 8101648:	68bb      	ldr	r3, [r7, #8]
 810164a:	009b      	lsls	r3, r3, #2
 810164c:	6879      	ldr	r1, [r7, #4]
 810164e:	440b      	add	r3, r1
 8101650:	6812      	ldr	r2, [r2, #0]
 8101652:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < n; i++) {
 8101654:	68bb      	ldr	r3, [r7, #8]
 8101656:	3301      	adds	r3, #1
 8101658:	60bb      	str	r3, [r7, #8]
 810165a:	68ba      	ldr	r2, [r7, #8]
 810165c:	683b      	ldr	r3, [r7, #0]
 810165e:	429a      	cmp	r2, r3
 8101660:	d3ee      	bcc.n	8101640 <ADE9000_Conv_ADC_V+0x68>
	}

}
 8101662:	bf00      	nop
 8101664:	bf00      	nop
 8101666:	3714      	adds	r7, #20
 8101668:	46bd      	mov	sp, r7
 810166a:	bd90      	pop	{r4, r7, pc}
 810166c:	f3af 8000 	nop.w
 8101670:	a726abf2 	.word	0xa726abf2
 8101674:	3f547455 	.word	0x3f547455
 8101678:	4c7fe070 	.word	0x4c7fe070
 810167c:	00000000 	.word	0x00000000

08101680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101680:	b5b0      	push	{r4, r5, r7, lr}
 8101682:	b088      	sub	sp, #32
 8101684:	af02      	add	r7, sp, #8

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101686:	4b80      	ldr	r3, [pc, #512]	; (8101888 <main+0x208>)
 8101688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810168c:	4a7e      	ldr	r2, [pc, #504]	; (8101888 <main+0x208>)
 810168e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101696:	4b7c      	ldr	r3, [pc, #496]	; (8101888 <main+0x208>)
 8101698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81016a0:	603b      	str	r3, [r7, #0]
 81016a2:	683b      	ldr	r3, [r7, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016a4:	2001      	movs	r0, #1
 81016a6:	f001 f8a7 	bl	81027f8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81016aa:	f001 f931 	bl	8102910 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81016ae:	2201      	movs	r2, #1
 81016b0:	2102      	movs	r1, #2
 81016b2:	2000      	movs	r0, #0
 81016b4:	f001 f8b2 	bl	810281c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81016b8:	4b74      	ldr	r3, [pc, #464]	; (810188c <main+0x20c>)
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	091b      	lsrs	r3, r3, #4
 81016be:	f003 030f 	and.w	r3, r3, #15
 81016c2:	2b07      	cmp	r3, #7
 81016c4:	d108      	bne.n	81016d8 <main+0x58>
 81016c6:	4b72      	ldr	r3, [pc, #456]	; (8101890 <main+0x210>)
 81016c8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81016cc:	4a70      	ldr	r2, [pc, #448]	; (8101890 <main+0x210>)
 81016ce:	f043 0301 	orr.w	r3, r3, #1
 81016d2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81016d6:	e007      	b.n	81016e8 <main+0x68>
 81016d8:	4b6d      	ldr	r3, [pc, #436]	; (8101890 <main+0x210>)
 81016da:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81016de:	4a6c      	ldr	r2, [pc, #432]	; (8101890 <main+0x210>)
 81016e0:	f043 0301 	orr.w	r3, r3, #1
 81016e4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81016e8:	f000 fca6 	bl	8102038 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81016ec:	f000 f986 	bl	81019fc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81016f0:	f000 f938 	bl	8101964 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 81016f4:	f000 f8e0 	bl	81018b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ADE9000_Power();
 81016f8:	f7ff fd82 	bl	8101200 <ADE9000_Power>

//  test_read_write_reg();
  setvbuf( stdin, NULL, _IONBF, 0 );
 81016fc:	4b65      	ldr	r3, [pc, #404]	; (8101894 <main+0x214>)
 81016fe:	681b      	ldr	r3, [r3, #0]
 8101700:	6858      	ldr	r0, [r3, #4]
 8101702:	2300      	movs	r3, #0
 8101704:	2202      	movs	r2, #2
 8101706:	2100      	movs	r1, #0
 8101708:	f006 fa82 	bl	8107c10 <setvbuf>

  ADE9000_Setup();
 810170c:	f7ff fd12 	bl	8101134 <ADE9000_Setup>

  printf("%d,%d,%d\r\n",N_BUFFER, N_SAMPLE,BURST_READ_N);
 8101710:	2380      	movs	r3, #128	; 0x80
 8101712:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8101716:	217d      	movs	r1, #125	; 0x7d
 8101718:	485f      	ldr	r0, [pc, #380]	; (8101898 <main+0x218>)
 810171a:	f006 f9db 	bl	8107ad4 <iprintf>

  printf("fdti: %f\t fdtv: %f \r\n",CURRENT_TRANSFER_FUNCTION,VOLTAGE_TRANSFER_FUNCTION);
 810171e:	a356      	add	r3, pc, #344	; (adr r3, 8101878 <main+0x1f8>)
 8101720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101724:	e9cd 2300 	strd	r2, r3, [sp]
 8101728:	a355      	add	r3, pc, #340	; (adr r3, 8101880 <main+0x200>)
 810172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810172e:	485b      	ldr	r0, [pc, #364]	; (810189c <main+0x21c>)
 8101730:	f006 f9d0 	bl	8107ad4 <iprintf>
  //ADE9000_Calibration();

  uint16_t index = 0;
 8101734:	2300      	movs	r3, #0
 8101736:	82fb      	strh	r3, [r7, #22]
  uint32_t start;
  uint32_t value_reg_32 = 0x00020000;
 8101738:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 810173c:	60fb      	str	r3, [r7, #12]
  uint16_t value_reg_16;

  Start_Waveform_Buffer();
 810173e:	f7ff fe5d 	bl	81013fc <Start_Waveform_Buffer>

  while(index < N_SAMPLE){
 8101742:	e05d      	b.n	8101800 <main+0x180>
 		  while(flag_read == 0){}
 8101744:	bf00      	nop
 8101746:	4b56      	ldr	r3, [pc, #344]	; (81018a0 <main+0x220>)
 8101748:	f993 3000 	ldrsb.w	r3, [r3]
 810174c:	2b00      	cmp	r3, #0
 810174e:	d0fa      	beq.n	8101746 <main+0xc6>
 		 //uint32_t tickstart = HAL_GetTick();

		  //printf("nint: %d\t", n_int);
 		  flag_read = 0;
 8101750:	4b53      	ldr	r3, [pc, #332]	; (81018a0 <main+0x220>)
 8101752:	2200      	movs	r2, #0
 8101754:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8101756:	68f9      	ldr	r1, [r7, #12]
 8101758:	f240 4002 	movw	r0, #1026	; 0x402
 810175c:	f7ff fe12 	bl	8101384 <ADE9000_SPI_Write_32>

		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 8101760:	f240 40a3 	movw	r0, #1187	; 0x4a3
 8101764:	f7ff fd6c 	bl	8101240 <ADE9000_SPI_Read_16>
 8101768:	4603      	mov	r3, r0
 810176a:	817b      	strh	r3, [r7, #10]
		  value_reg_16 = (value_reg_16>>12)&0x0F;
 810176c:	897b      	ldrh	r3, [r7, #10]
 810176e:	0b1b      	lsrs	r3, r3, #12
 8101770:	817b      	strh	r3, [r7, #10]
		  printf("pg: %i\r\n",value_reg_16);
 8101772:	897b      	ldrh	r3, [r7, #10]
 8101774:	4619      	mov	r1, r3
 8101776:	484b      	ldr	r0, [pc, #300]	; (81018a4 <main+0x224>)
 8101778:	f006 f9ac 	bl	8107ad4 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR;
 810177c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101780:	607b      	str	r3, [r7, #4]



 		 //ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,ia + index);
 		 //ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 		 ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,&ia[index].data_int,&va[index].data_int);
 8101782:	687b      	ldr	r3, [r7, #4]
 8101784:	b298      	uxth	r0, r3
 8101786:	8afb      	ldrh	r3, [r7, #22]
 8101788:	009b      	lsls	r3, r3, #2
 810178a:	4a47      	ldr	r2, [pc, #284]	; (81018a8 <main+0x228>)
 810178c:	441a      	add	r2, r3
 810178e:	8afb      	ldrh	r3, [r7, #22]
 8101790:	009b      	lsls	r3, r3, #2
 8101792:	4946      	ldr	r1, [pc, #280]	; (81018ac <main+0x22c>)
 8101794:	440b      	add	r3, r1
 8101796:	2180      	movs	r1, #128	; 0x80
 8101798:	f7ff fe5e 	bl	8101458 <ADE9000_SPI_Burst_Read_two_ch>

 		  //printf("1 index %d\r\n",index);
 		  index += BURST_READ_N;
 810179c:	8afb      	ldrh	r3, [r7, #22]
 810179e:	3380      	adds	r3, #128	; 0x80
 81017a0:	82fb      	strh	r3, [r7, #22]
 		/*
 		 uint32_t tickend = HAL_GetTick();
 		 uint32_t ntick = tickend-tickstart;
 		 printf("TIME: %d MS\r\n",ntick);
 		*/
 		  while(flag_read == 0){}
 81017a2:	bf00      	nop
 81017a4:	4b3e      	ldr	r3, [pc, #248]	; (81018a0 <main+0x220>)
 81017a6:	f993 3000 	ldrsb.w	r3, [r3]
 81017aa:	2b00      	cmp	r3, #0
 81017ac:	d0fa      	beq.n	81017a4 <main+0x124>

  		 //tickstart = HAL_GetTick();
 		  //printf("nint: %d\t", n_int);
 		  flag_read = 0;
 81017ae:	4b3c      	ldr	r3, [pc, #240]	; (81018a0 <main+0x220>)
 81017b0:	2200      	movs	r2, #0
 81017b2:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 81017b4:	68f9      	ldr	r1, [r7, #12]
 81017b6:	f240 4002 	movw	r0, #1026	; 0x402
 81017ba:	f7ff fde3 	bl	8101384 <ADE9000_SPI_Write_32>
 		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 81017be:	f240 40a3 	movw	r0, #1187	; 0x4a3
 81017c2:	f7ff fd3d 	bl	8101240 <ADE9000_SPI_Read_16>
 81017c6:	4603      	mov	r3, r0
 81017c8:	817b      	strh	r3, [r7, #10]
 		  value_reg_16 = (value_reg_16>>12)&0x0F;
 81017ca:	897b      	ldrh	r3, [r7, #10]
 81017cc:	0b1b      	lsrs	r3, r3, #12
 81017ce:	817b      	strh	r3, [r7, #10]
 		  printf("pg: %i\r\n",value_reg_16);
 81017d0:	897b      	ldrh	r3, [r7, #10]
 81017d2:	4619      	mov	r1, r3
 81017d4:	4833      	ldr	r0, [pc, #204]	; (81018a4 <main+0x224>)
 81017d6:	f006 f97d 	bl	8107ad4 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR + BURST_READ_N*8;
 81017da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81017de:	607b      	str	r3, [r7, #4]


 		 //ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,ia + index);
 		// ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 		ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,&ia[index].data_int,&va[index].data_int);
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	b298      	uxth	r0, r3
 81017e4:	8afb      	ldrh	r3, [r7, #22]
 81017e6:	009b      	lsls	r3, r3, #2
 81017e8:	4a2f      	ldr	r2, [pc, #188]	; (81018a8 <main+0x228>)
 81017ea:	441a      	add	r2, r3
 81017ec:	8afb      	ldrh	r3, [r7, #22]
 81017ee:	009b      	lsls	r3, r3, #2
 81017f0:	492e      	ldr	r1, [pc, #184]	; (81018ac <main+0x22c>)
 81017f2:	440b      	add	r3, r1
 81017f4:	2180      	movs	r1, #128	; 0x80
 81017f6:	f7ff fe2f 	bl	8101458 <ADE9000_SPI_Burst_Read_two_ch>

 		 //printf("2 index %d\r\n",index);
 		 index += BURST_READ_N;
 81017fa:	8afb      	ldrh	r3, [r7, #22]
 81017fc:	3380      	adds	r3, #128	; 0x80
 81017fe:	82fb      	strh	r3, [r7, #22]
  while(index < N_SAMPLE){
 8101800:	8afb      	ldrh	r3, [r7, #22]
 8101802:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8101806:	d39d      	bcc.n	8101744 <main+0xc4>
   		 ntick = tickend-tickstart;
   		 printf("TIME: %d MS\r\n",ntick);
*/

 }
  Stop_Waveform_Buffer();
 8101808:	f7ff fe0f 	bl	810142a <Stop_Waveform_Buffer>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
	  printf("%d,%d\r\n",va[i].data_int,ia[i].data_int);
  }
  */

  ADE9000_Conv_ADC_V(va,N_SAMPLE);
 810180c:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8101810:	4826      	ldr	r0, [pc, #152]	; (81018ac <main+0x22c>)
 8101812:	f7ff fee1 	bl	81015d8 <ADE9000_Conv_ADC_V>
  ADE9000_Conv_ADC_I(ia,N_SAMPLE);
 8101816:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 810181a:	4823      	ldr	r0, [pc, #140]	; (81018a8 <main+0x228>)
 810181c:	f7ff fe88 	bl	8101530 <ADE9000_Conv_ADC_I>

  printf("VA,IA\r\n");
 8101820:	4823      	ldr	r0, [pc, #140]	; (81018b0 <main+0x230>)
 8101822:	f006 f9dd 	bl	8107be0 <puts>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8101826:	2300      	movs	r3, #0
 8101828:	613b      	str	r3, [r7, #16]
 810182a:	e01d      	b.n	8101868 <main+0x1e8>
	  printf("%f,%f\r\n",va[i].data_float,ia[i].data_float);
 810182c:	4a1f      	ldr	r2, [pc, #124]	; (81018ac <main+0x22c>)
 810182e:	693b      	ldr	r3, [r7, #16]
 8101830:	009b      	lsls	r3, r3, #2
 8101832:	4413      	add	r3, r2
 8101834:	681b      	ldr	r3, [r3, #0]
 8101836:	4618      	mov	r0, r3
 8101838:	f7fe ff0e 	bl	8100658 <__aeabi_f2d>
 810183c:	4604      	mov	r4, r0
 810183e:	460d      	mov	r5, r1
 8101840:	4a19      	ldr	r2, [pc, #100]	; (81018a8 <main+0x228>)
 8101842:	693b      	ldr	r3, [r7, #16]
 8101844:	009b      	lsls	r3, r3, #2
 8101846:	4413      	add	r3, r2
 8101848:	681b      	ldr	r3, [r3, #0]
 810184a:	4618      	mov	r0, r3
 810184c:	f7fe ff04 	bl	8100658 <__aeabi_f2d>
 8101850:	4602      	mov	r2, r0
 8101852:	460b      	mov	r3, r1
 8101854:	e9cd 2300 	strd	r2, r3, [sp]
 8101858:	4622      	mov	r2, r4
 810185a:	462b      	mov	r3, r5
 810185c:	4815      	ldr	r0, [pc, #84]	; (81018b4 <main+0x234>)
 810185e:	f006 f939 	bl	8107ad4 <iprintf>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8101862:	693b      	ldr	r3, [r7, #16]
 8101864:	3301      	adds	r3, #1
 8101866:	613b      	str	r3, [r7, #16]
 8101868:	693b      	ldr	r3, [r7, #16]
 810186a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 810186e:	d3dd      	bcc.n	810182c <main+0x1ac>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101870:	e7fe      	b.n	8101870 <main+0x1f0>
 8101872:	bf00      	nop
 8101874:	f3af 8000 	nop.w
 8101878:	a726abf2 	.word	0xa726abf2
 810187c:	3f547455 	.word	0x3f547455
 8101880:	19ce075f 	.word	0x19ce075f
 8101884:	3f7bda51 	.word	0x3f7bda51
 8101888:	58024400 	.word	0x58024400
 810188c:	e000ed00 	.word	0xe000ed00
 8101890:	58026400 	.word	0x58026400
 8101894:	10000010 	.word	0x10000010
 8101898:	0810b420 	.word	0x0810b420
 810189c:	0810b42c 	.word	0x0810b42c
 81018a0:	10000200 	.word	0x10000200
 81018a4:	0810b444 	.word	0x0810b444
 81018a8:	1001f614 	.word	0x1001f614
 81018ac:	10000214 	.word	0x10000214
 81018b0:	0810b450 	.word	0x0810b450
 81018b4:	0810b458 	.word	0x0810b458

081018b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 81018b8:	b580      	push	{r7, lr}
 81018ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 81018bc:	4b27      	ldr	r3, [pc, #156]	; (810195c <MX_SPI1_Init+0xa4>)
 81018be:	4a28      	ldr	r2, [pc, #160]	; (8101960 <MX_SPI1_Init+0xa8>)
 81018c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81018c2:	4b26      	ldr	r3, [pc, #152]	; (810195c <MX_SPI1_Init+0xa4>)
 81018c4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81018c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81018ca:	4b24      	ldr	r3, [pc, #144]	; (810195c <MX_SPI1_Init+0xa4>)
 81018cc:	2200      	movs	r2, #0
 81018ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 81018d0:	4b22      	ldr	r3, [pc, #136]	; (810195c <MX_SPI1_Init+0xa4>)
 81018d2:	220f      	movs	r2, #15
 81018d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81018d6:	4b21      	ldr	r3, [pc, #132]	; (810195c <MX_SPI1_Init+0xa4>)
 81018d8:	2200      	movs	r2, #0
 81018da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81018dc:	4b1f      	ldr	r3, [pc, #124]	; (810195c <MX_SPI1_Init+0xa4>)
 81018de:	2200      	movs	r2, #0
 81018e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81018e2:	4b1e      	ldr	r3, [pc, #120]	; (810195c <MX_SPI1_Init+0xa4>)
 81018e4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81018e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 81018ea:	4b1c      	ldr	r3, [pc, #112]	; (810195c <MX_SPI1_Init+0xa4>)
 81018ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 81018f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81018f2:	4b1a      	ldr	r3, [pc, #104]	; (810195c <MX_SPI1_Init+0xa4>)
 81018f4:	2200      	movs	r2, #0
 81018f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81018f8:	4b18      	ldr	r3, [pc, #96]	; (810195c <MX_SPI1_Init+0xa4>)
 81018fa:	2200      	movs	r2, #0
 81018fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81018fe:	4b17      	ldr	r3, [pc, #92]	; (810195c <MX_SPI1_Init+0xa4>)
 8101900:	2200      	movs	r2, #0
 8101902:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101904:	4b15      	ldr	r3, [pc, #84]	; (810195c <MX_SPI1_Init+0xa4>)
 8101906:	2200      	movs	r2, #0
 8101908:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 810190a:	4b14      	ldr	r3, [pc, #80]	; (810195c <MX_SPI1_Init+0xa4>)
 810190c:	2200      	movs	r2, #0
 810190e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101910:	4b12      	ldr	r3, [pc, #72]	; (810195c <MX_SPI1_Init+0xa4>)
 8101912:	2200      	movs	r2, #0
 8101914:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101916:	4b11      	ldr	r3, [pc, #68]	; (810195c <MX_SPI1_Init+0xa4>)
 8101918:	2200      	movs	r2, #0
 810191a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810191c:	4b0f      	ldr	r3, [pc, #60]	; (810195c <MX_SPI1_Init+0xa4>)
 810191e:	2200      	movs	r2, #0
 8101920:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101922:	4b0e      	ldr	r3, [pc, #56]	; (810195c <MX_SPI1_Init+0xa4>)
 8101924:	2200      	movs	r2, #0
 8101926:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101928:	4b0c      	ldr	r3, [pc, #48]	; (810195c <MX_SPI1_Init+0xa4>)
 810192a:	2200      	movs	r2, #0
 810192c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810192e:	4b0b      	ldr	r3, [pc, #44]	; (810195c <MX_SPI1_Init+0xa4>)
 8101930:	2200      	movs	r2, #0
 8101932:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101934:	4b09      	ldr	r3, [pc, #36]	; (810195c <MX_SPI1_Init+0xa4>)
 8101936:	2200      	movs	r2, #0
 8101938:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810193a:	4b08      	ldr	r3, [pc, #32]	; (810195c <MX_SPI1_Init+0xa4>)
 810193c:	2200      	movs	r2, #0
 810193e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8101940:	4b06      	ldr	r3, [pc, #24]	; (810195c <MX_SPI1_Init+0xa4>)
 8101942:	2200      	movs	r2, #0
 8101944:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8101946:	4805      	ldr	r0, [pc, #20]	; (810195c <MX_SPI1_Init+0xa4>)
 8101948:	f002 fd2a 	bl	81043a0 <HAL_SPI_Init>
 810194c:	4603      	mov	r3, r0
 810194e:	2b00      	cmp	r3, #0
 8101950:	d001      	beq.n	8101956 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8101952:	f000 f94b 	bl	8101bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8101956:	bf00      	nop
 8101958:	bd80      	pop	{r7, pc}
 810195a:	bf00      	nop
 810195c:	1003eaa4 	.word	0x1003eaa4
 8101960:	40013000 	.word	0x40013000

08101964 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8101964:	b580      	push	{r7, lr}
 8101966:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8101968:	4b22      	ldr	r3, [pc, #136]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 810196a:	4a23      	ldr	r2, [pc, #140]	; (81019f8 <MX_USART3_UART_Init+0x94>)
 810196c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810196e:	4b21      	ldr	r3, [pc, #132]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 8101970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101974:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8101976:	4b1f      	ldr	r3, [pc, #124]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 8101978:	2200      	movs	r2, #0
 810197a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 810197c:	4b1d      	ldr	r3, [pc, #116]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 810197e:	2200      	movs	r2, #0
 8101980:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101982:	4b1c      	ldr	r3, [pc, #112]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 8101984:	2200      	movs	r2, #0
 8101986:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8101988:	4b1a      	ldr	r3, [pc, #104]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 810198a:	220c      	movs	r2, #12
 810198c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810198e:	4b19      	ldr	r3, [pc, #100]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 8101990:	2200      	movs	r2, #0
 8101992:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101994:	4b17      	ldr	r3, [pc, #92]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 8101996:	2200      	movs	r2, #0
 8101998:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810199a:	4b16      	ldr	r3, [pc, #88]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 810199c:	2200      	movs	r2, #0
 810199e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81019a0:	4b14      	ldr	r3, [pc, #80]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 81019a2:	2200      	movs	r2, #0
 81019a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81019a6:	4b13      	ldr	r3, [pc, #76]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 81019a8:	2200      	movs	r2, #0
 81019aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81019ac:	4811      	ldr	r0, [pc, #68]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 81019ae:	f003 fdad 	bl	810550c <HAL_UART_Init>
 81019b2:	4603      	mov	r3, r0
 81019b4:	2b00      	cmp	r3, #0
 81019b6:	d001      	beq.n	81019bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81019b8:	f000 f918 	bl	8101bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81019bc:	2100      	movs	r1, #0
 81019be:	480d      	ldr	r0, [pc, #52]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 81019c0:	f004 feac 	bl	810671c <HAL_UARTEx_SetTxFifoThreshold>
 81019c4:	4603      	mov	r3, r0
 81019c6:	2b00      	cmp	r3, #0
 81019c8:	d001      	beq.n	81019ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81019ca:	f000 f90f 	bl	8101bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81019ce:	2100      	movs	r1, #0
 81019d0:	4808      	ldr	r0, [pc, #32]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 81019d2:	f004 fee1 	bl	8106798 <HAL_UARTEx_SetRxFifoThreshold>
 81019d6:	4603      	mov	r3, r0
 81019d8:	2b00      	cmp	r3, #0
 81019da:	d001      	beq.n	81019e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81019dc:	f000 f906 	bl	8101bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81019e0:	4804      	ldr	r0, [pc, #16]	; (81019f4 <MX_USART3_UART_Init+0x90>)
 81019e2:	f004 fe62 	bl	81066aa <HAL_UARTEx_DisableFifoMode>
 81019e6:	4603      	mov	r3, r0
 81019e8:	2b00      	cmp	r3, #0
 81019ea:	d001      	beq.n	81019f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81019ec:	f000 f8fe 	bl	8101bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81019f0:	bf00      	nop
 81019f2:	bd80      	pop	{r7, pc}
 81019f4:	1003ea14 	.word	0x1003ea14
 81019f8:	40004800 	.word	0x40004800

081019fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81019fc:	b580      	push	{r7, lr}
 81019fe:	b08a      	sub	sp, #40	; 0x28
 8101a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a02:	f107 0314 	add.w	r3, r7, #20
 8101a06:	2200      	movs	r2, #0
 8101a08:	601a      	str	r2, [r3, #0]
 8101a0a:	605a      	str	r2, [r3, #4]
 8101a0c:	609a      	str	r2, [r3, #8]
 8101a0e:	60da      	str	r2, [r3, #12]
 8101a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8101a12:	4b4e      	ldr	r3, [pc, #312]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a18:	4a4c      	ldr	r2, [pc, #304]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a1a:	f043 0301 	orr.w	r3, r3, #1
 8101a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a22:	4b4a      	ldr	r3, [pc, #296]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a28:	f003 0301 	and.w	r3, r3, #1
 8101a2c:	613b      	str	r3, [r7, #16]
 8101a2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101a30:	4b46      	ldr	r3, [pc, #280]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a36:	4a45      	ldr	r2, [pc, #276]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a38:	f043 0310 	orr.w	r3, r3, #16
 8101a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a40:	4b42      	ldr	r3, [pc, #264]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a46:	f003 0310 	and.w	r3, r3, #16
 8101a4a:	60fb      	str	r3, [r7, #12]
 8101a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a4e:	4b3f      	ldr	r3, [pc, #252]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a54:	4a3d      	ldr	r2, [pc, #244]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a56:	f043 0308 	orr.w	r3, r3, #8
 8101a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a5e:	4b3b      	ldr	r3, [pc, #236]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a64:	f003 0308 	and.w	r3, r3, #8
 8101a68:	60bb      	str	r3, [r7, #8]
 8101a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101a6c:	4b37      	ldr	r3, [pc, #220]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a72:	4a36      	ldr	r2, [pc, #216]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a7c:	4b33      	ldr	r3, [pc, #204]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8101a86:	607b      	str	r3, [r7, #4]
 8101a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101a8a:	4b30      	ldr	r3, [pc, #192]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a90:	4a2e      	ldr	r2, [pc, #184]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a92:	f043 0302 	orr.w	r3, r3, #2
 8101a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a9a:	4b2c      	ldr	r3, [pc, #176]	; (8101b4c <MX_GPIO_Init+0x150>)
 8101a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101aa0:	f003 0302 	and.w	r3, r3, #2
 8101aa4:	603b      	str	r3, [r7, #0]
 8101aa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADE9000_Reset_Pin|ADE9000_PM1_Pin, GPIO_PIN_RESET);
 8101aa8:	2200      	movs	r2, #0
 8101aaa:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8101aae:	4828      	ldr	r0, [pc, #160]	; (8101b50 <MX_GPIO_Init+0x154>)
 8101ab0:	f000 fe6e 	bl	8102790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADE9000_CS_GPIO_Port, ADE9000_CS_Pin, GPIO_PIN_SET);
 8101ab4:	2201      	movs	r2, #1
 8101ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101aba:	4826      	ldr	r0, [pc, #152]	; (8101b54 <MX_GPIO_Init+0x158>)
 8101abc:	f000 fe68 	bl	8102790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADE9000_Reset_Pin ADE9000_PM1_Pin */
  GPIO_InitStruct.Pin = ADE9000_Reset_Pin|ADE9000_PM1_Pin;
 8101ac0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8101ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101ac6:	2301      	movs	r3, #1
 8101ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101aca:	2300      	movs	r3, #0
 8101acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ace:	2300      	movs	r3, #0
 8101ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101ad2:	f107 0314 	add.w	r3, r7, #20
 8101ad6:	4619      	mov	r1, r3
 8101ad8:	481d      	ldr	r0, [pc, #116]	; (8101b50 <MX_GPIO_Init+0x154>)
 8101ada:	f000 fca9 	bl	8102430 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ1_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ1_Pin;
 8101ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8101ae4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8101ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101aea:	2300      	movs	r3, #0
 8101aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8101aee:	f107 0314 	add.w	r3, r7, #20
 8101af2:	4619      	mov	r1, r3
 8101af4:	4816      	ldr	r0, [pc, #88]	; (8101b50 <MX_GPIO_Init+0x154>)
 8101af6:	f000 fc9b 	bl	8102430 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_CS_Pin */
  GPIO_InitStruct.Pin = ADE9000_CS_Pin;
 8101afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8101afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101b00:	2301      	movs	r3, #1
 8101b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b04:	2300      	movs	r3, #0
 8101b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b08:	2300      	movs	r3, #0
 8101b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADE9000_CS_GPIO_Port, &GPIO_InitStruct);
 8101b0c:	f107 0314 	add.w	r3, r7, #20
 8101b10:	4619      	mov	r1, r3
 8101b12:	4810      	ldr	r0, [pc, #64]	; (8101b54 <MX_GPIO_Init+0x158>)
 8101b14:	f000 fc8c 	bl	8102430 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ0_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ0_Pin;
 8101b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8101b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8101b1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8101b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b24:	2300      	movs	r3, #0
 8101b26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ0_GPIO_Port, &GPIO_InitStruct);
 8101b28:	f107 0314 	add.w	r3, r7, #20
 8101b2c:	4619      	mov	r1, r3
 8101b2e:	4809      	ldr	r0, [pc, #36]	; (8101b54 <MX_GPIO_Init+0x158>)
 8101b30:	f000 fc7e 	bl	8102430 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8101b34:	2200      	movs	r2, #0
 8101b36:	2100      	movs	r1, #0
 8101b38:	2028      	movs	r0, #40	; 0x28
 8101b3a:	f000 fc30 	bl	810239e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8101b3e:	2028      	movs	r0, #40	; 0x28
 8101b40:	f000 fc47 	bl	81023d2 <HAL_NVIC_EnableIRQ>

}
 8101b44:	bf00      	nop
 8101b46:	3728      	adds	r7, #40	; 0x28
 8101b48:	46bd      	mov	sp, r7
 8101b4a:	bd80      	pop	{r7, pc}
 8101b4c:	58024400 	.word	0x58024400
 8101b50:	58021000 	.word	0x58021000
 8101b54:	58021800 	.word	0x58021800

08101b58 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8101b58:	b580      	push	{r7, lr}
 8101b5a:	b082      	sub	sp, #8
 8101b5c:	af00      	add	r7, sp, #0
 8101b5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101b60:	1d39      	adds	r1, r7, #4
 8101b62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b66:	2201      	movs	r2, #1
 8101b68:	4803      	ldr	r0, [pc, #12]	; (8101b78 <__io_putchar+0x20>)
 8101b6a:	f003 fd1f 	bl	81055ac <HAL_UART_Transmit>
	return ch;
 8101b6e:	687b      	ldr	r3, [r7, #4]
}
 8101b70:	4618      	mov	r0, r3
 8101b72:	3708      	adds	r7, #8
 8101b74:	46bd      	mov	sp, r7
 8101b76:	bd80      	pop	{r7, pc}
 8101b78:	1003ea14 	.word	0x1003ea14

08101b7c <__io_getchar>:

int __io_getchar(void)
{
 8101b7c:	b580      	push	{r7, lr}
 8101b7e:	b082      	sub	sp, #8
 8101b80:	af00      	add	r7, sp, #0

	uint8_t ch;
	// Clear the Overrun flag just before receiving the first character
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8101b82:	4b0b      	ldr	r3, [pc, #44]	; (8101bb0 <__io_getchar+0x34>)
 8101b84:	681b      	ldr	r3, [r3, #0]
 8101b86:	2208      	movs	r2, #8
 8101b88:	621a      	str	r2, [r3, #32]

	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101b8a:	1df9      	adds	r1, r7, #7
 8101b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b90:	2201      	movs	r2, #1
 8101b92:	4807      	ldr	r0, [pc, #28]	; (8101bb0 <__io_getchar+0x34>)
 8101b94:	f003 fda0 	bl	81056d8 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101b98:	1df9      	adds	r1, r7, #7
 8101b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101b9e:	2201      	movs	r2, #1
 8101ba0:	4803      	ldr	r0, [pc, #12]	; (8101bb0 <__io_getchar+0x34>)
 8101ba2:	f003 fd03 	bl	81055ac <HAL_UART_Transmit>

	return ch;
 8101ba6:	79fb      	ldrb	r3, [r7, #7]
}
 8101ba8:	4618      	mov	r0, r3
 8101baa:	3708      	adds	r7, #8
 8101bac:	46bd      	mov	sp, r7
 8101bae:	bd80      	pop	{r7, pc}
 8101bb0:	1003ea14 	.word	0x1003ea14

08101bb4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8101bb4:	b480      	push	{r7}
 8101bb6:	b083      	sub	sp, #12
 8101bb8:	af00      	add	r7, sp, #0
 8101bba:	4603      	mov	r3, r0
 8101bbc:	80fb      	strh	r3, [r7, #6]
	// If the interrupt source is pin IRQ0
	if (GPIO_Pin == ADE9000_IRQ0_Pin)
 8101bbe:	88fb      	ldrh	r3, [r7, #6]
 8101bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8101bc4:	d107      	bne.n	8101bd6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		//printf("IRQ0s\r\n");
		flag_read = 1;
 8101bc6:	4b07      	ldr	r3, [pc, #28]	; (8101be4 <HAL_GPIO_EXTI_Callback+0x30>)
 8101bc8:	2201      	movs	r2, #1
 8101bca:	701a      	strb	r2, [r3, #0]
		n_int ++;
 8101bcc:	4b06      	ldr	r3, [pc, #24]	; (8101be8 <HAL_GPIO_EXTI_Callback+0x34>)
 8101bce:	681b      	ldr	r3, [r3, #0]
 8101bd0:	3301      	adds	r3, #1
 8101bd2:	4a05      	ldr	r2, [pc, #20]	; (8101be8 <HAL_GPIO_EXTI_Callback+0x34>)
 8101bd4:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == ADE9000_IRQ1_Pin)
		{
			//printf("IRQ1\r\n");
		}
}
 8101bd6:	bf00      	nop
 8101bd8:	370c      	adds	r7, #12
 8101bda:	46bd      	mov	sp, r7
 8101bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101be0:	4770      	bx	lr
 8101be2:	bf00      	nop
 8101be4:	10000200 	.word	0x10000200
 8101be8:	10000204 	.word	0x10000204

08101bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101bec:	b480      	push	{r7}
 8101bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101bf0:	b672      	cpsid	i
}
 8101bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101bf4:	e7fe      	b.n	8101bf4 <Error_Handler+0x8>
	...

08101bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101bf8:	b480      	push	{r7}
 8101bfa:	b083      	sub	sp, #12
 8101bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101bfe:	4b0a      	ldr	r3, [pc, #40]	; (8101c28 <HAL_MspInit+0x30>)
 8101c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c04:	4a08      	ldr	r2, [pc, #32]	; (8101c28 <HAL_MspInit+0x30>)
 8101c06:	f043 0302 	orr.w	r3, r3, #2
 8101c0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101c0e:	4b06      	ldr	r3, [pc, #24]	; (8101c28 <HAL_MspInit+0x30>)
 8101c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101c14:	f003 0302 	and.w	r3, r3, #2
 8101c18:	607b      	str	r3, [r7, #4]
 8101c1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101c1c:	bf00      	nop
 8101c1e:	370c      	adds	r7, #12
 8101c20:	46bd      	mov	sp, r7
 8101c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c26:	4770      	bx	lr
 8101c28:	58024400 	.word	0x58024400

08101c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101c2c:	b580      	push	{r7, lr}
 8101c2e:	b08a      	sub	sp, #40	; 0x28
 8101c30:	af00      	add	r7, sp, #0
 8101c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101c34:	f107 0314 	add.w	r3, r7, #20
 8101c38:	2200      	movs	r2, #0
 8101c3a:	601a      	str	r2, [r3, #0]
 8101c3c:	605a      	str	r2, [r3, #4]
 8101c3e:	609a      	str	r2, [r3, #8]
 8101c40:	60da      	str	r2, [r3, #12]
 8101c42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8101c44:	687b      	ldr	r3, [r7, #4]
 8101c46:	681b      	ldr	r3, [r3, #0]
 8101c48:	4a31      	ldr	r2, [pc, #196]	; (8101d10 <HAL_SPI_MspInit+0xe4>)
 8101c4a:	4293      	cmp	r3, r2
 8101c4c:	d15c      	bne.n	8101d08 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8101c4e:	4b31      	ldr	r3, [pc, #196]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c54:	4a2f      	ldr	r2, [pc, #188]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8101c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8101c5e:	4b2d      	ldr	r3, [pc, #180]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8101c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101c68:	613b      	str	r3, [r7, #16]
 8101c6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101c6c:	4b29      	ldr	r3, [pc, #164]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c72:	4a28      	ldr	r2, [pc, #160]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c74:	f043 0301 	orr.w	r3, r3, #1
 8101c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c7c:	4b25      	ldr	r3, [pc, #148]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c82:	f003 0301 	and.w	r3, r3, #1
 8101c86:	60fb      	str	r3, [r7, #12]
 8101c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101c8a:	4b22      	ldr	r3, [pc, #136]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101c90:	4a20      	ldr	r2, [pc, #128]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c92:	f043 0302 	orr.w	r3, r3, #2
 8101c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101c9a:	4b1e      	ldr	r3, [pc, #120]	; (8101d14 <HAL_SPI_MspInit+0xe8>)
 8101c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101ca0:	f003 0302 	and.w	r3, r3, #2
 8101ca4:	60bb      	str	r3, [r7, #8]
 8101ca6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101ca8:	2320      	movs	r3, #32
 8101caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cac:	2302      	movs	r3, #2
 8101cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8101cb0:	2302      	movs	r3, #2
 8101cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101cb4:	2303      	movs	r3, #3
 8101cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101cb8:	2305      	movs	r3, #5
 8101cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101cbc:	f107 0314 	add.w	r3, r7, #20
 8101cc0:	4619      	mov	r1, r3
 8101cc2:	4815      	ldr	r0, [pc, #84]	; (8101d18 <HAL_SPI_MspInit+0xec>)
 8101cc4:	f000 fbb4 	bl	8102430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8101cc8:	2340      	movs	r3, #64	; 0x40
 8101cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ccc:	2302      	movs	r3, #2
 8101cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cd0:	2300      	movs	r3, #0
 8101cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101cd4:	2303      	movs	r3, #3
 8101cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101cd8:	2305      	movs	r3, #5
 8101cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101cdc:	f107 0314 	add.w	r3, r7, #20
 8101ce0:	4619      	mov	r1, r3
 8101ce2:	480d      	ldr	r0, [pc, #52]	; (8101d18 <HAL_SPI_MspInit+0xec>)
 8101ce4:	f000 fba4 	bl	8102430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8101ce8:	2320      	movs	r3, #32
 8101cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101cec:	2302      	movs	r3, #2
 8101cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101cf0:	2300      	movs	r3, #0
 8101cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101cf4:	2303      	movs	r3, #3
 8101cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8101cf8:	2305      	movs	r3, #5
 8101cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101cfc:	f107 0314 	add.w	r3, r7, #20
 8101d00:	4619      	mov	r1, r3
 8101d02:	4806      	ldr	r0, [pc, #24]	; (8101d1c <HAL_SPI_MspInit+0xf0>)
 8101d04:	f000 fb94 	bl	8102430 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8101d08:	bf00      	nop
 8101d0a:	3728      	adds	r7, #40	; 0x28
 8101d0c:	46bd      	mov	sp, r7
 8101d0e:	bd80      	pop	{r7, pc}
 8101d10:	40013000 	.word	0x40013000
 8101d14:	58024400 	.word	0x58024400
 8101d18:	58020000 	.word	0x58020000
 8101d1c:	58020400 	.word	0x58020400

08101d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8101d20:	b580      	push	{r7, lr}
 8101d22:	b0b8      	sub	sp, #224	; 0xe0
 8101d24:	af00      	add	r7, sp, #0
 8101d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101d2c:	2200      	movs	r2, #0
 8101d2e:	601a      	str	r2, [r3, #0]
 8101d30:	605a      	str	r2, [r3, #4]
 8101d32:	609a      	str	r2, [r3, #8]
 8101d34:	60da      	str	r2, [r3, #12]
 8101d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d38:	f107 0310 	add.w	r3, r7, #16
 8101d3c:	22bc      	movs	r2, #188	; 0xbc
 8101d3e:	2100      	movs	r1, #0
 8101d40:	4618      	mov	r0, r3
 8101d42:	f004 ff9a 	bl	8106c7a <memset>
  if(huart->Instance==USART3)
 8101d46:	687b      	ldr	r3, [r7, #4]
 8101d48:	681b      	ldr	r3, [r3, #0]
 8101d4a:	4a25      	ldr	r2, [pc, #148]	; (8101de0 <HAL_UART_MspInit+0xc0>)
 8101d4c:	4293      	cmp	r3, r2
 8101d4e:	d142      	bne.n	8101dd6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8101d50:	2302      	movs	r3, #2
 8101d52:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101d54:	2300      	movs	r3, #0
 8101d56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d5a:	f107 0310 	add.w	r3, r7, #16
 8101d5e:	4618      	mov	r0, r3
 8101d60:	f000 ffbc 	bl	8102cdc <HAL_RCCEx_PeriphCLKConfig>
 8101d64:	4603      	mov	r3, r0
 8101d66:	2b00      	cmp	r3, #0
 8101d68:	d001      	beq.n	8101d6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101d6a:	f7ff ff3f 	bl	8101bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101d6e:	4b1d      	ldr	r3, [pc, #116]	; (8101de4 <HAL_UART_MspInit+0xc4>)
 8101d70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d74:	4a1b      	ldr	r2, [pc, #108]	; (8101de4 <HAL_UART_MspInit+0xc4>)
 8101d76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101d7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101d7e:	4b19      	ldr	r3, [pc, #100]	; (8101de4 <HAL_UART_MspInit+0xc4>)
 8101d80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101d88:	60fb      	str	r3, [r7, #12]
 8101d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101d8c:	4b15      	ldr	r3, [pc, #84]	; (8101de4 <HAL_UART_MspInit+0xc4>)
 8101d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d92:	4a14      	ldr	r2, [pc, #80]	; (8101de4 <HAL_UART_MspInit+0xc4>)
 8101d94:	f043 0308 	orr.w	r3, r3, #8
 8101d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d9c:	4b11      	ldr	r3, [pc, #68]	; (8101de4 <HAL_UART_MspInit+0xc4>)
 8101d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101da2:	f003 0308 	and.w	r3, r3, #8
 8101da6:	60bb      	str	r3, [r7, #8]
 8101da8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101dae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101db2:	2302      	movs	r3, #2
 8101db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101db8:	2300      	movs	r3, #0
 8101dba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101dbe:	2300      	movs	r3, #0
 8101dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101dc4:	2307      	movs	r3, #7
 8101dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101dca:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101dce:	4619      	mov	r1, r3
 8101dd0:	4805      	ldr	r0, [pc, #20]	; (8101de8 <HAL_UART_MspInit+0xc8>)
 8101dd2:	f000 fb2d 	bl	8102430 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101dd6:	bf00      	nop
 8101dd8:	37e0      	adds	r7, #224	; 0xe0
 8101dda:	46bd      	mov	sp, r7
 8101ddc:	bd80      	pop	{r7, pc}
 8101dde:	bf00      	nop
 8101de0:	40004800 	.word	0x40004800
 8101de4:	58024400 	.word	0x58024400
 8101de8:	58020c00 	.word	0x58020c00

08101dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101dec:	b480      	push	{r7}
 8101dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101df0:	e7fe      	b.n	8101df0 <NMI_Handler+0x4>

08101df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101df2:	b480      	push	{r7}
 8101df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101df6:	e7fe      	b.n	8101df6 <HardFault_Handler+0x4>

08101df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101df8:	b480      	push	{r7}
 8101dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101dfc:	e7fe      	b.n	8101dfc <MemManage_Handler+0x4>

08101dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101dfe:	b480      	push	{r7}
 8101e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101e02:	e7fe      	b.n	8101e02 <BusFault_Handler+0x4>

08101e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101e04:	b480      	push	{r7}
 8101e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101e08:	e7fe      	b.n	8101e08 <UsageFault_Handler+0x4>

08101e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101e0a:	b480      	push	{r7}
 8101e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101e0e:	bf00      	nop
 8101e10:	46bd      	mov	sp, r7
 8101e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e16:	4770      	bx	lr

08101e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101e18:	b480      	push	{r7}
 8101e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101e1c:	bf00      	nop
 8101e1e:	46bd      	mov	sp, r7
 8101e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e24:	4770      	bx	lr

08101e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101e26:	b480      	push	{r7}
 8101e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101e2a:	bf00      	nop
 8101e2c:	46bd      	mov	sp, r7
 8101e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e32:	4770      	bx	lr

08101e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101e34:	b580      	push	{r7, lr}
 8101e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101e38:	f000 f992 	bl	8102160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101e3c:	bf00      	nop
 8101e3e:	bd80      	pop	{r7, pc}

08101e40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8101e40:	b580      	push	{r7, lr}
 8101e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADE9000_IRQ1_Pin);
 8101e44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8101e48:	f000 fcbb 	bl	81027c2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADE9000_PM1_Pin);
 8101e4c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8101e50:	f000 fcb7 	bl	81027c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8101e54:	bf00      	nop
 8101e56:	bd80      	pop	{r7, pc}

08101e58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101e58:	b480      	push	{r7}
 8101e5a:	af00      	add	r7, sp, #0
	return 1;
 8101e5c:	2301      	movs	r3, #1
}
 8101e5e:	4618      	mov	r0, r3
 8101e60:	46bd      	mov	sp, r7
 8101e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e66:	4770      	bx	lr

08101e68 <_kill>:

int _kill(int pid, int sig)
{
 8101e68:	b580      	push	{r7, lr}
 8101e6a:	b082      	sub	sp, #8
 8101e6c:	af00      	add	r7, sp, #0
 8101e6e:	6078      	str	r0, [r7, #4]
 8101e70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8101e72:	f004 fd1d 	bl	81068b0 <__errno>
 8101e76:	4603      	mov	r3, r0
 8101e78:	2216      	movs	r2, #22
 8101e7a:	601a      	str	r2, [r3, #0]
	return -1;
 8101e7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101e80:	4618      	mov	r0, r3
 8101e82:	3708      	adds	r7, #8
 8101e84:	46bd      	mov	sp, r7
 8101e86:	bd80      	pop	{r7, pc}

08101e88 <_exit>:

void _exit (int status)
{
 8101e88:	b580      	push	{r7, lr}
 8101e8a:	b082      	sub	sp, #8
 8101e8c:	af00      	add	r7, sp, #0
 8101e8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8101e90:	f04f 31ff 	mov.w	r1, #4294967295
 8101e94:	6878      	ldr	r0, [r7, #4]
 8101e96:	f7ff ffe7 	bl	8101e68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8101e9a:	e7fe      	b.n	8101e9a <_exit+0x12>

08101e9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101e9c:	b580      	push	{r7, lr}
 8101e9e:	b086      	sub	sp, #24
 8101ea0:	af00      	add	r7, sp, #0
 8101ea2:	60f8      	str	r0, [r7, #12]
 8101ea4:	60b9      	str	r1, [r7, #8]
 8101ea6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ea8:	2300      	movs	r3, #0
 8101eaa:	617b      	str	r3, [r7, #20]
 8101eac:	e00a      	b.n	8101ec4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101eae:	f7ff fe65 	bl	8101b7c <__io_getchar>
 8101eb2:	4601      	mov	r1, r0
 8101eb4:	68bb      	ldr	r3, [r7, #8]
 8101eb6:	1c5a      	adds	r2, r3, #1
 8101eb8:	60ba      	str	r2, [r7, #8]
 8101eba:	b2ca      	uxtb	r2, r1
 8101ebc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ebe:	697b      	ldr	r3, [r7, #20]
 8101ec0:	3301      	adds	r3, #1
 8101ec2:	617b      	str	r3, [r7, #20]
 8101ec4:	697a      	ldr	r2, [r7, #20]
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	429a      	cmp	r2, r3
 8101eca:	dbf0      	blt.n	8101eae <_read+0x12>
	}

return len;
 8101ecc:	687b      	ldr	r3, [r7, #4]
}
 8101ece:	4618      	mov	r0, r3
 8101ed0:	3718      	adds	r7, #24
 8101ed2:	46bd      	mov	sp, r7
 8101ed4:	bd80      	pop	{r7, pc}

08101ed6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101ed6:	b580      	push	{r7, lr}
 8101ed8:	b086      	sub	sp, #24
 8101eda:	af00      	add	r7, sp, #0
 8101edc:	60f8      	str	r0, [r7, #12]
 8101ede:	60b9      	str	r1, [r7, #8]
 8101ee0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ee2:	2300      	movs	r3, #0
 8101ee4:	617b      	str	r3, [r7, #20]
 8101ee6:	e009      	b.n	8101efc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8101ee8:	68bb      	ldr	r3, [r7, #8]
 8101eea:	1c5a      	adds	r2, r3, #1
 8101eec:	60ba      	str	r2, [r7, #8]
 8101eee:	781b      	ldrb	r3, [r3, #0]
 8101ef0:	4618      	mov	r0, r3
 8101ef2:	f7ff fe31 	bl	8101b58 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ef6:	697b      	ldr	r3, [r7, #20]
 8101ef8:	3301      	adds	r3, #1
 8101efa:	617b      	str	r3, [r7, #20]
 8101efc:	697a      	ldr	r2, [r7, #20]
 8101efe:	687b      	ldr	r3, [r7, #4]
 8101f00:	429a      	cmp	r2, r3
 8101f02:	dbf1      	blt.n	8101ee8 <_write+0x12>
	}
	return len;
 8101f04:	687b      	ldr	r3, [r7, #4]
}
 8101f06:	4618      	mov	r0, r3
 8101f08:	3718      	adds	r7, #24
 8101f0a:	46bd      	mov	sp, r7
 8101f0c:	bd80      	pop	{r7, pc}

08101f0e <_close>:

int _close(int file)
{
 8101f0e:	b480      	push	{r7}
 8101f10:	b083      	sub	sp, #12
 8101f12:	af00      	add	r7, sp, #0
 8101f14:	6078      	str	r0, [r7, #4]
	return -1;
 8101f16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101f1a:	4618      	mov	r0, r3
 8101f1c:	370c      	adds	r7, #12
 8101f1e:	46bd      	mov	sp, r7
 8101f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f24:	4770      	bx	lr

08101f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101f26:	b480      	push	{r7}
 8101f28:	b083      	sub	sp, #12
 8101f2a:	af00      	add	r7, sp, #0
 8101f2c:	6078      	str	r0, [r7, #4]
 8101f2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101f30:	683b      	ldr	r3, [r7, #0]
 8101f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101f36:	605a      	str	r2, [r3, #4]
	return 0;
 8101f38:	2300      	movs	r3, #0
}
 8101f3a:	4618      	mov	r0, r3
 8101f3c:	370c      	adds	r7, #12
 8101f3e:	46bd      	mov	sp, r7
 8101f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f44:	4770      	bx	lr

08101f46 <_isatty>:

int _isatty(int file)
{
 8101f46:	b480      	push	{r7}
 8101f48:	b083      	sub	sp, #12
 8101f4a:	af00      	add	r7, sp, #0
 8101f4c:	6078      	str	r0, [r7, #4]
	return 1;
 8101f4e:	2301      	movs	r3, #1
}
 8101f50:	4618      	mov	r0, r3
 8101f52:	370c      	adds	r7, #12
 8101f54:	46bd      	mov	sp, r7
 8101f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f5a:	4770      	bx	lr

08101f5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101f5c:	b480      	push	{r7}
 8101f5e:	b085      	sub	sp, #20
 8101f60:	af00      	add	r7, sp, #0
 8101f62:	60f8      	str	r0, [r7, #12]
 8101f64:	60b9      	str	r1, [r7, #8]
 8101f66:	607a      	str	r2, [r7, #4]
	return 0;
 8101f68:	2300      	movs	r3, #0
}
 8101f6a:	4618      	mov	r0, r3
 8101f6c:	3714      	adds	r7, #20
 8101f6e:	46bd      	mov	sp, r7
 8101f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f74:	4770      	bx	lr
	...

08101f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101f78:	b580      	push	{r7, lr}
 8101f7a:	b086      	sub	sp, #24
 8101f7c:	af00      	add	r7, sp, #0
 8101f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101f80:	4a14      	ldr	r2, [pc, #80]	; (8101fd4 <_sbrk+0x5c>)
 8101f82:	4b15      	ldr	r3, [pc, #84]	; (8101fd8 <_sbrk+0x60>)
 8101f84:	1ad3      	subs	r3, r2, r3
 8101f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101f88:	697b      	ldr	r3, [r7, #20]
 8101f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101f8c:	4b13      	ldr	r3, [pc, #76]	; (8101fdc <_sbrk+0x64>)
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	2b00      	cmp	r3, #0
 8101f92:	d102      	bne.n	8101f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101f94:	4b11      	ldr	r3, [pc, #68]	; (8101fdc <_sbrk+0x64>)
 8101f96:	4a12      	ldr	r2, [pc, #72]	; (8101fe0 <_sbrk+0x68>)
 8101f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101f9a:	4b10      	ldr	r3, [pc, #64]	; (8101fdc <_sbrk+0x64>)
 8101f9c:	681a      	ldr	r2, [r3, #0]
 8101f9e:	687b      	ldr	r3, [r7, #4]
 8101fa0:	4413      	add	r3, r2
 8101fa2:	693a      	ldr	r2, [r7, #16]
 8101fa4:	429a      	cmp	r2, r3
 8101fa6:	d207      	bcs.n	8101fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101fa8:	f004 fc82 	bl	81068b0 <__errno>
 8101fac:	4603      	mov	r3, r0
 8101fae:	220c      	movs	r2, #12
 8101fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8101fb6:	e009      	b.n	8101fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101fb8:	4b08      	ldr	r3, [pc, #32]	; (8101fdc <_sbrk+0x64>)
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101fbe:	4b07      	ldr	r3, [pc, #28]	; (8101fdc <_sbrk+0x64>)
 8101fc0:	681a      	ldr	r2, [r3, #0]
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	4413      	add	r3, r2
 8101fc6:	4a05      	ldr	r2, [pc, #20]	; (8101fdc <_sbrk+0x64>)
 8101fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101fca:	68fb      	ldr	r3, [r7, #12]
}
 8101fcc:	4618      	mov	r0, r3
 8101fce:	3718      	adds	r7, #24
 8101fd0:	46bd      	mov	sp, r7
 8101fd2:	bd80      	pop	{r7, pc}
 8101fd4:	10048000 	.word	0x10048000
 8101fd8:	00000400 	.word	0x00000400
 8101fdc:	10000208 	.word	0x10000208
 8101fe0:	1003ec00 	.word	0x1003ec00

08101fe4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 8101fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 810201c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101fe8:	f7ff f888 	bl	81010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101fec:	480c      	ldr	r0, [pc, #48]	; (8102020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101fee:	490d      	ldr	r1, [pc, #52]	; (8102024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101ff0:	4a0d      	ldr	r2, [pc, #52]	; (8102028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101ff4:	e002      	b.n	8101ffc <LoopCopyDataInit>

08101ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101ffa:	3304      	adds	r3, #4

08101ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102000:	d3f9      	bcc.n	8101ff6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102002:	4a0a      	ldr	r2, [pc, #40]	; (810202c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102004:	4c0a      	ldr	r4, [pc, #40]	; (8102030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102008:	e001      	b.n	810200e <LoopFillZerobss>

0810200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 810200c:	3204      	adds	r2, #4

0810200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102010:	d3fb      	bcc.n	810200a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102012:	f004 fe0b 	bl	8106c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102016:	f7ff fb33 	bl	8101680 <main>
  bx  lr
 810201a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 810201c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102020:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102024:	100001e4 	.word	0x100001e4
  ldr r2, =_sidata
 8102028:	0810b95c 	.word	0x0810b95c
  ldr r2, =_sbss
 810202c:	100001e4 	.word	0x100001e4
  ldr r4, =_ebss
 8102030:	1003ebfc 	.word	0x1003ebfc

08102034 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102034:	e7fe      	b.n	8102034 <ADC3_IRQHandler>
	...

08102038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102038:	b580      	push	{r7, lr}
 810203a:	b082      	sub	sp, #8
 810203c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810203e:	4b28      	ldr	r3, [pc, #160]	; (81020e0 <HAL_Init+0xa8>)
 8102040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102044:	4a26      	ldr	r2, [pc, #152]	; (81020e0 <HAL_Init+0xa8>)
 8102046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810204a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810204e:	4b24      	ldr	r3, [pc, #144]	; (81020e0 <HAL_Init+0xa8>)
 8102050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102054:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102058:	603b      	str	r3, [r7, #0]
 810205a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810205c:	4b21      	ldr	r3, [pc, #132]	; (81020e4 <HAL_Init+0xac>)
 810205e:	681b      	ldr	r3, [r3, #0]
 8102060:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102064:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102068:	4a1e      	ldr	r2, [pc, #120]	; (81020e4 <HAL_Init+0xac>)
 810206a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810206e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102070:	4b1c      	ldr	r3, [pc, #112]	; (81020e4 <HAL_Init+0xac>)
 8102072:	681b      	ldr	r3, [r3, #0]
 8102074:	4a1b      	ldr	r2, [pc, #108]	; (81020e4 <HAL_Init+0xac>)
 8102076:	f043 0301 	orr.w	r3, r3, #1
 810207a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810207c:	2003      	movs	r0, #3
 810207e:	f000 f983 	bl	8102388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102082:	f000 fc53 	bl	810292c <HAL_RCC_GetSysClockFreq>
 8102086:	4602      	mov	r2, r0
 8102088:	4b15      	ldr	r3, [pc, #84]	; (81020e0 <HAL_Init+0xa8>)
 810208a:	699b      	ldr	r3, [r3, #24]
 810208c:	0a1b      	lsrs	r3, r3, #8
 810208e:	f003 030f 	and.w	r3, r3, #15
 8102092:	4915      	ldr	r1, [pc, #84]	; (81020e8 <HAL_Init+0xb0>)
 8102094:	5ccb      	ldrb	r3, [r1, r3]
 8102096:	f003 031f 	and.w	r3, r3, #31
 810209a:	fa22 f303 	lsr.w	r3, r2, r3
 810209e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81020a0:	4b0f      	ldr	r3, [pc, #60]	; (81020e0 <HAL_Init+0xa8>)
 81020a2:	699b      	ldr	r3, [r3, #24]
 81020a4:	f003 030f 	and.w	r3, r3, #15
 81020a8:	4a0f      	ldr	r2, [pc, #60]	; (81020e8 <HAL_Init+0xb0>)
 81020aa:	5cd3      	ldrb	r3, [r2, r3]
 81020ac:	f003 031f 	and.w	r3, r3, #31
 81020b0:	687a      	ldr	r2, [r7, #4]
 81020b2:	fa22 f303 	lsr.w	r3, r2, r3
 81020b6:	4a0d      	ldr	r2, [pc, #52]	; (81020ec <HAL_Init+0xb4>)
 81020b8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81020ba:	4b0c      	ldr	r3, [pc, #48]	; (81020ec <HAL_Init+0xb4>)
 81020bc:	681b      	ldr	r3, [r3, #0]
 81020be:	4a0c      	ldr	r2, [pc, #48]	; (81020f0 <HAL_Init+0xb8>)
 81020c0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81020c2:	2000      	movs	r0, #0
 81020c4:	f000 f816 	bl	81020f4 <HAL_InitTick>
 81020c8:	4603      	mov	r3, r0
 81020ca:	2b00      	cmp	r3, #0
 81020cc:	d001      	beq.n	81020d2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81020ce:	2301      	movs	r3, #1
 81020d0:	e002      	b.n	81020d8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81020d2:	f7ff fd91 	bl	8101bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81020d6:	2300      	movs	r3, #0
}
 81020d8:	4618      	mov	r0, r3
 81020da:	3708      	adds	r7, #8
 81020dc:	46bd      	mov	sp, r7
 81020de:	bd80      	pop	{r7, pc}
 81020e0:	58024400 	.word	0x58024400
 81020e4:	40024400 	.word	0x40024400
 81020e8:	0810b460 	.word	0x0810b460
 81020ec:	10000004 	.word	0x10000004
 81020f0:	10000000 	.word	0x10000000

081020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81020f4:	b580      	push	{r7, lr}
 81020f6:	b082      	sub	sp, #8
 81020f8:	af00      	add	r7, sp, #0
 81020fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81020fc:	4b15      	ldr	r3, [pc, #84]	; (8102154 <HAL_InitTick+0x60>)
 81020fe:	781b      	ldrb	r3, [r3, #0]
 8102100:	2b00      	cmp	r3, #0
 8102102:	d101      	bne.n	8102108 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102104:	2301      	movs	r3, #1
 8102106:	e021      	b.n	810214c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102108:	4b13      	ldr	r3, [pc, #76]	; (8102158 <HAL_InitTick+0x64>)
 810210a:	681a      	ldr	r2, [r3, #0]
 810210c:	4b11      	ldr	r3, [pc, #68]	; (8102154 <HAL_InitTick+0x60>)
 810210e:	781b      	ldrb	r3, [r3, #0]
 8102110:	4619      	mov	r1, r3
 8102112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102116:	fbb3 f3f1 	udiv	r3, r3, r1
 810211a:	fbb2 f3f3 	udiv	r3, r2, r3
 810211e:	4618      	mov	r0, r3
 8102120:	f000 f965 	bl	81023ee <HAL_SYSTICK_Config>
 8102124:	4603      	mov	r3, r0
 8102126:	2b00      	cmp	r3, #0
 8102128:	d001      	beq.n	810212e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810212a:	2301      	movs	r3, #1
 810212c:	e00e      	b.n	810214c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	2b0f      	cmp	r3, #15
 8102132:	d80a      	bhi.n	810214a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102134:	2200      	movs	r2, #0
 8102136:	6879      	ldr	r1, [r7, #4]
 8102138:	f04f 30ff 	mov.w	r0, #4294967295
 810213c:	f000 f92f 	bl	810239e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102140:	4a06      	ldr	r2, [pc, #24]	; (810215c <HAL_InitTick+0x68>)
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102146:	2300      	movs	r3, #0
 8102148:	e000      	b.n	810214c <HAL_InitTick+0x58>
    return HAL_ERROR;
 810214a:	2301      	movs	r3, #1
}
 810214c:	4618      	mov	r0, r3
 810214e:	3708      	adds	r7, #8
 8102150:	46bd      	mov	sp, r7
 8102152:	bd80      	pop	{r7, pc}
 8102154:	1000000c 	.word	0x1000000c
 8102158:	10000000 	.word	0x10000000
 810215c:	10000008 	.word	0x10000008

08102160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102160:	b480      	push	{r7}
 8102162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102164:	4b06      	ldr	r3, [pc, #24]	; (8102180 <HAL_IncTick+0x20>)
 8102166:	781b      	ldrb	r3, [r3, #0]
 8102168:	461a      	mov	r2, r3
 810216a:	4b06      	ldr	r3, [pc, #24]	; (8102184 <HAL_IncTick+0x24>)
 810216c:	681b      	ldr	r3, [r3, #0]
 810216e:	4413      	add	r3, r2
 8102170:	4a04      	ldr	r2, [pc, #16]	; (8102184 <HAL_IncTick+0x24>)
 8102172:	6013      	str	r3, [r2, #0]
}
 8102174:	bf00      	nop
 8102176:	46bd      	mov	sp, r7
 8102178:	f85d 7b04 	ldr.w	r7, [sp], #4
 810217c:	4770      	bx	lr
 810217e:	bf00      	nop
 8102180:	1000000c 	.word	0x1000000c
 8102184:	1003ebe8 	.word	0x1003ebe8

08102188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102188:	b480      	push	{r7}
 810218a:	af00      	add	r7, sp, #0
  return uwTick;
 810218c:	4b03      	ldr	r3, [pc, #12]	; (810219c <HAL_GetTick+0x14>)
 810218e:	681b      	ldr	r3, [r3, #0]
}
 8102190:	4618      	mov	r0, r3
 8102192:	46bd      	mov	sp, r7
 8102194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102198:	4770      	bx	lr
 810219a:	bf00      	nop
 810219c:	1003ebe8 	.word	0x1003ebe8

081021a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81021a0:	b580      	push	{r7, lr}
 81021a2:	b084      	sub	sp, #16
 81021a4:	af00      	add	r7, sp, #0
 81021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81021a8:	f7ff ffee 	bl	8102188 <HAL_GetTick>
 81021ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81021ae:	687b      	ldr	r3, [r7, #4]
 81021b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81021b2:	68fb      	ldr	r3, [r7, #12]
 81021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81021b8:	d005      	beq.n	81021c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81021ba:	4b0a      	ldr	r3, [pc, #40]	; (81021e4 <HAL_Delay+0x44>)
 81021bc:	781b      	ldrb	r3, [r3, #0]
 81021be:	461a      	mov	r2, r3
 81021c0:	68fb      	ldr	r3, [r7, #12]
 81021c2:	4413      	add	r3, r2
 81021c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81021c6:	bf00      	nop
 81021c8:	f7ff ffde 	bl	8102188 <HAL_GetTick>
 81021cc:	4602      	mov	r2, r0
 81021ce:	68bb      	ldr	r3, [r7, #8]
 81021d0:	1ad3      	subs	r3, r2, r3
 81021d2:	68fa      	ldr	r2, [r7, #12]
 81021d4:	429a      	cmp	r2, r3
 81021d6:	d8f7      	bhi.n	81021c8 <HAL_Delay+0x28>
  {
  }
}
 81021d8:	bf00      	nop
 81021da:	bf00      	nop
 81021dc:	3710      	adds	r7, #16
 81021de:	46bd      	mov	sp, r7
 81021e0:	bd80      	pop	{r7, pc}
 81021e2:	bf00      	nop
 81021e4:	1000000c 	.word	0x1000000c

081021e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81021e8:	b480      	push	{r7}
 81021ea:	b085      	sub	sp, #20
 81021ec:	af00      	add	r7, sp, #0
 81021ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81021f0:	687b      	ldr	r3, [r7, #4]
 81021f2:	f003 0307 	and.w	r3, r3, #7
 81021f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81021f8:	4b0c      	ldr	r3, [pc, #48]	; (810222c <__NVIC_SetPriorityGrouping+0x44>)
 81021fa:	68db      	ldr	r3, [r3, #12]
 81021fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81021fe:	68ba      	ldr	r2, [r7, #8]
 8102200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102204:	4013      	ands	r3, r2
 8102206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102208:	68fb      	ldr	r3, [r7, #12]
 810220a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 810220c:	68bb      	ldr	r3, [r7, #8]
 810220e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810221a:	4a04      	ldr	r2, [pc, #16]	; (810222c <__NVIC_SetPriorityGrouping+0x44>)
 810221c:	68bb      	ldr	r3, [r7, #8]
 810221e:	60d3      	str	r3, [r2, #12]
}
 8102220:	bf00      	nop
 8102222:	3714      	adds	r7, #20
 8102224:	46bd      	mov	sp, r7
 8102226:	f85d 7b04 	ldr.w	r7, [sp], #4
 810222a:	4770      	bx	lr
 810222c:	e000ed00 	.word	0xe000ed00

08102230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102230:	b480      	push	{r7}
 8102232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102234:	4b04      	ldr	r3, [pc, #16]	; (8102248 <__NVIC_GetPriorityGrouping+0x18>)
 8102236:	68db      	ldr	r3, [r3, #12]
 8102238:	0a1b      	lsrs	r3, r3, #8
 810223a:	f003 0307 	and.w	r3, r3, #7
}
 810223e:	4618      	mov	r0, r3
 8102240:	46bd      	mov	sp, r7
 8102242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102246:	4770      	bx	lr
 8102248:	e000ed00 	.word	0xe000ed00

0810224c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810224c:	b480      	push	{r7}
 810224e:	b083      	sub	sp, #12
 8102250:	af00      	add	r7, sp, #0
 8102252:	4603      	mov	r3, r0
 8102254:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810225a:	2b00      	cmp	r3, #0
 810225c:	db0b      	blt.n	8102276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810225e:	88fb      	ldrh	r3, [r7, #6]
 8102260:	f003 021f 	and.w	r2, r3, #31
 8102264:	4907      	ldr	r1, [pc, #28]	; (8102284 <__NVIC_EnableIRQ+0x38>)
 8102266:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810226a:	095b      	lsrs	r3, r3, #5
 810226c:	2001      	movs	r0, #1
 810226e:	fa00 f202 	lsl.w	r2, r0, r2
 8102272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102276:	bf00      	nop
 8102278:	370c      	adds	r7, #12
 810227a:	46bd      	mov	sp, r7
 810227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102280:	4770      	bx	lr
 8102282:	bf00      	nop
 8102284:	e000e100 	.word	0xe000e100

08102288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102288:	b480      	push	{r7}
 810228a:	b083      	sub	sp, #12
 810228c:	af00      	add	r7, sp, #0
 810228e:	4603      	mov	r3, r0
 8102290:	6039      	str	r1, [r7, #0]
 8102292:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102298:	2b00      	cmp	r3, #0
 810229a:	db0a      	blt.n	81022b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810229c:	683b      	ldr	r3, [r7, #0]
 810229e:	b2da      	uxtb	r2, r3
 81022a0:	490c      	ldr	r1, [pc, #48]	; (81022d4 <__NVIC_SetPriority+0x4c>)
 81022a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81022a6:	0112      	lsls	r2, r2, #4
 81022a8:	b2d2      	uxtb	r2, r2
 81022aa:	440b      	add	r3, r1
 81022ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81022b0:	e00a      	b.n	81022c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81022b2:	683b      	ldr	r3, [r7, #0]
 81022b4:	b2da      	uxtb	r2, r3
 81022b6:	4908      	ldr	r1, [pc, #32]	; (81022d8 <__NVIC_SetPriority+0x50>)
 81022b8:	88fb      	ldrh	r3, [r7, #6]
 81022ba:	f003 030f 	and.w	r3, r3, #15
 81022be:	3b04      	subs	r3, #4
 81022c0:	0112      	lsls	r2, r2, #4
 81022c2:	b2d2      	uxtb	r2, r2
 81022c4:	440b      	add	r3, r1
 81022c6:	761a      	strb	r2, [r3, #24]
}
 81022c8:	bf00      	nop
 81022ca:	370c      	adds	r7, #12
 81022cc:	46bd      	mov	sp, r7
 81022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022d2:	4770      	bx	lr
 81022d4:	e000e100 	.word	0xe000e100
 81022d8:	e000ed00 	.word	0xe000ed00

081022dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81022dc:	b480      	push	{r7}
 81022de:	b089      	sub	sp, #36	; 0x24
 81022e0:	af00      	add	r7, sp, #0
 81022e2:	60f8      	str	r0, [r7, #12]
 81022e4:	60b9      	str	r1, [r7, #8]
 81022e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81022e8:	68fb      	ldr	r3, [r7, #12]
 81022ea:	f003 0307 	and.w	r3, r3, #7
 81022ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81022f0:	69fb      	ldr	r3, [r7, #28]
 81022f2:	f1c3 0307 	rsb	r3, r3, #7
 81022f6:	2b04      	cmp	r3, #4
 81022f8:	bf28      	it	cs
 81022fa:	2304      	movcs	r3, #4
 81022fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81022fe:	69fb      	ldr	r3, [r7, #28]
 8102300:	3304      	adds	r3, #4
 8102302:	2b06      	cmp	r3, #6
 8102304:	d902      	bls.n	810230c <NVIC_EncodePriority+0x30>
 8102306:	69fb      	ldr	r3, [r7, #28]
 8102308:	3b03      	subs	r3, #3
 810230a:	e000      	b.n	810230e <NVIC_EncodePriority+0x32>
 810230c:	2300      	movs	r3, #0
 810230e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102310:	f04f 32ff 	mov.w	r2, #4294967295
 8102314:	69bb      	ldr	r3, [r7, #24]
 8102316:	fa02 f303 	lsl.w	r3, r2, r3
 810231a:	43da      	mvns	r2, r3
 810231c:	68bb      	ldr	r3, [r7, #8]
 810231e:	401a      	ands	r2, r3
 8102320:	697b      	ldr	r3, [r7, #20]
 8102322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102324:	f04f 31ff 	mov.w	r1, #4294967295
 8102328:	697b      	ldr	r3, [r7, #20]
 810232a:	fa01 f303 	lsl.w	r3, r1, r3
 810232e:	43d9      	mvns	r1, r3
 8102330:	687b      	ldr	r3, [r7, #4]
 8102332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102334:	4313      	orrs	r3, r2
         );
}
 8102336:	4618      	mov	r0, r3
 8102338:	3724      	adds	r7, #36	; 0x24
 810233a:	46bd      	mov	sp, r7
 810233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102340:	4770      	bx	lr
	...

08102344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102344:	b580      	push	{r7, lr}
 8102346:	b082      	sub	sp, #8
 8102348:	af00      	add	r7, sp, #0
 810234a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810234c:	687b      	ldr	r3, [r7, #4]
 810234e:	3b01      	subs	r3, #1
 8102350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102354:	d301      	bcc.n	810235a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102356:	2301      	movs	r3, #1
 8102358:	e00f      	b.n	810237a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810235a:	4a0a      	ldr	r2, [pc, #40]	; (8102384 <SysTick_Config+0x40>)
 810235c:	687b      	ldr	r3, [r7, #4]
 810235e:	3b01      	subs	r3, #1
 8102360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102362:	210f      	movs	r1, #15
 8102364:	f04f 30ff 	mov.w	r0, #4294967295
 8102368:	f7ff ff8e 	bl	8102288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810236c:	4b05      	ldr	r3, [pc, #20]	; (8102384 <SysTick_Config+0x40>)
 810236e:	2200      	movs	r2, #0
 8102370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102372:	4b04      	ldr	r3, [pc, #16]	; (8102384 <SysTick_Config+0x40>)
 8102374:	2207      	movs	r2, #7
 8102376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102378:	2300      	movs	r3, #0
}
 810237a:	4618      	mov	r0, r3
 810237c:	3708      	adds	r7, #8
 810237e:	46bd      	mov	sp, r7
 8102380:	bd80      	pop	{r7, pc}
 8102382:	bf00      	nop
 8102384:	e000e010 	.word	0xe000e010

08102388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102388:	b580      	push	{r7, lr}
 810238a:	b082      	sub	sp, #8
 810238c:	af00      	add	r7, sp, #0
 810238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102390:	6878      	ldr	r0, [r7, #4]
 8102392:	f7ff ff29 	bl	81021e8 <__NVIC_SetPriorityGrouping>
}
 8102396:	bf00      	nop
 8102398:	3708      	adds	r7, #8
 810239a:	46bd      	mov	sp, r7
 810239c:	bd80      	pop	{r7, pc}

0810239e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810239e:	b580      	push	{r7, lr}
 81023a0:	b086      	sub	sp, #24
 81023a2:	af00      	add	r7, sp, #0
 81023a4:	4603      	mov	r3, r0
 81023a6:	60b9      	str	r1, [r7, #8]
 81023a8:	607a      	str	r2, [r7, #4]
 81023aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81023ac:	f7ff ff40 	bl	8102230 <__NVIC_GetPriorityGrouping>
 81023b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81023b2:	687a      	ldr	r2, [r7, #4]
 81023b4:	68b9      	ldr	r1, [r7, #8]
 81023b6:	6978      	ldr	r0, [r7, #20]
 81023b8:	f7ff ff90 	bl	81022dc <NVIC_EncodePriority>
 81023bc:	4602      	mov	r2, r0
 81023be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81023c2:	4611      	mov	r1, r2
 81023c4:	4618      	mov	r0, r3
 81023c6:	f7ff ff5f 	bl	8102288 <__NVIC_SetPriority>
}
 81023ca:	bf00      	nop
 81023cc:	3718      	adds	r7, #24
 81023ce:	46bd      	mov	sp, r7
 81023d0:	bd80      	pop	{r7, pc}

081023d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81023d2:	b580      	push	{r7, lr}
 81023d4:	b082      	sub	sp, #8
 81023d6:	af00      	add	r7, sp, #0
 81023d8:	4603      	mov	r3, r0
 81023da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81023dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81023e0:	4618      	mov	r0, r3
 81023e2:	f7ff ff33 	bl	810224c <__NVIC_EnableIRQ>
}
 81023e6:	bf00      	nop
 81023e8:	3708      	adds	r7, #8
 81023ea:	46bd      	mov	sp, r7
 81023ec:	bd80      	pop	{r7, pc}

081023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81023ee:	b580      	push	{r7, lr}
 81023f0:	b082      	sub	sp, #8
 81023f2:	af00      	add	r7, sp, #0
 81023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81023f6:	6878      	ldr	r0, [r7, #4]
 81023f8:	f7ff ffa4 	bl	8102344 <SysTick_Config>
 81023fc:	4603      	mov	r3, r0
}
 81023fe:	4618      	mov	r0, r3
 8102400:	3708      	adds	r7, #8
 8102402:	46bd      	mov	sp, r7
 8102404:	bd80      	pop	{r7, pc}
	...

08102408 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102408:	b480      	push	{r7}
 810240a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810240c:	4b07      	ldr	r3, [pc, #28]	; (810242c <HAL_GetCurrentCPUID+0x24>)
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	091b      	lsrs	r3, r3, #4
 8102412:	f003 030f 	and.w	r3, r3, #15
 8102416:	2b07      	cmp	r3, #7
 8102418:	d101      	bne.n	810241e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810241a:	2303      	movs	r3, #3
 810241c:	e000      	b.n	8102420 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810241e:	2301      	movs	r3, #1
  }
}
 8102420:	4618      	mov	r0, r3
 8102422:	46bd      	mov	sp, r7
 8102424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102428:	4770      	bx	lr
 810242a:	bf00      	nop
 810242c:	e000ed00 	.word	0xe000ed00

08102430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102430:	b480      	push	{r7}
 8102432:	b089      	sub	sp, #36	; 0x24
 8102434:	af00      	add	r7, sp, #0
 8102436:	6078      	str	r0, [r7, #4]
 8102438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810243a:	2300      	movs	r3, #0
 810243c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810243e:	4b89      	ldr	r3, [pc, #548]	; (8102664 <HAL_GPIO_Init+0x234>)
 8102440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102442:	e194      	b.n	810276e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102444:	683b      	ldr	r3, [r7, #0]
 8102446:	681a      	ldr	r2, [r3, #0]
 8102448:	2101      	movs	r1, #1
 810244a:	69fb      	ldr	r3, [r7, #28]
 810244c:	fa01 f303 	lsl.w	r3, r1, r3
 8102450:	4013      	ands	r3, r2
 8102452:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102454:	693b      	ldr	r3, [r7, #16]
 8102456:	2b00      	cmp	r3, #0
 8102458:	f000 8186 	beq.w	8102768 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810245c:	683b      	ldr	r3, [r7, #0]
 810245e:	685b      	ldr	r3, [r3, #4]
 8102460:	f003 0303 	and.w	r3, r3, #3
 8102464:	2b01      	cmp	r3, #1
 8102466:	d005      	beq.n	8102474 <HAL_GPIO_Init+0x44>
 8102468:	683b      	ldr	r3, [r7, #0]
 810246a:	685b      	ldr	r3, [r3, #4]
 810246c:	f003 0303 	and.w	r3, r3, #3
 8102470:	2b02      	cmp	r3, #2
 8102472:	d130      	bne.n	81024d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102474:	687b      	ldr	r3, [r7, #4]
 8102476:	689b      	ldr	r3, [r3, #8]
 8102478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810247a:	69fb      	ldr	r3, [r7, #28]
 810247c:	005b      	lsls	r3, r3, #1
 810247e:	2203      	movs	r2, #3
 8102480:	fa02 f303 	lsl.w	r3, r2, r3
 8102484:	43db      	mvns	r3, r3
 8102486:	69ba      	ldr	r2, [r7, #24]
 8102488:	4013      	ands	r3, r2
 810248a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810248c:	683b      	ldr	r3, [r7, #0]
 810248e:	68da      	ldr	r2, [r3, #12]
 8102490:	69fb      	ldr	r3, [r7, #28]
 8102492:	005b      	lsls	r3, r3, #1
 8102494:	fa02 f303 	lsl.w	r3, r2, r3
 8102498:	69ba      	ldr	r2, [r7, #24]
 810249a:	4313      	orrs	r3, r2
 810249c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	69ba      	ldr	r2, [r7, #24]
 81024a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	685b      	ldr	r3, [r3, #4]
 81024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81024aa:	2201      	movs	r2, #1
 81024ac:	69fb      	ldr	r3, [r7, #28]
 81024ae:	fa02 f303 	lsl.w	r3, r2, r3
 81024b2:	43db      	mvns	r3, r3
 81024b4:	69ba      	ldr	r2, [r7, #24]
 81024b6:	4013      	ands	r3, r2
 81024b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81024ba:	683b      	ldr	r3, [r7, #0]
 81024bc:	685b      	ldr	r3, [r3, #4]
 81024be:	091b      	lsrs	r3, r3, #4
 81024c0:	f003 0201 	and.w	r2, r3, #1
 81024c4:	69fb      	ldr	r3, [r7, #28]
 81024c6:	fa02 f303 	lsl.w	r3, r2, r3
 81024ca:	69ba      	ldr	r2, [r7, #24]
 81024cc:	4313      	orrs	r3, r2
 81024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81024d0:	687b      	ldr	r3, [r7, #4]
 81024d2:	69ba      	ldr	r2, [r7, #24]
 81024d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81024d6:	683b      	ldr	r3, [r7, #0]
 81024d8:	685b      	ldr	r3, [r3, #4]
 81024da:	f003 0303 	and.w	r3, r3, #3
 81024de:	2b03      	cmp	r3, #3
 81024e0:	d017      	beq.n	8102512 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	68db      	ldr	r3, [r3, #12]
 81024e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81024e8:	69fb      	ldr	r3, [r7, #28]
 81024ea:	005b      	lsls	r3, r3, #1
 81024ec:	2203      	movs	r2, #3
 81024ee:	fa02 f303 	lsl.w	r3, r2, r3
 81024f2:	43db      	mvns	r3, r3
 81024f4:	69ba      	ldr	r2, [r7, #24]
 81024f6:	4013      	ands	r3, r2
 81024f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81024fa:	683b      	ldr	r3, [r7, #0]
 81024fc:	689a      	ldr	r2, [r3, #8]
 81024fe:	69fb      	ldr	r3, [r7, #28]
 8102500:	005b      	lsls	r3, r3, #1
 8102502:	fa02 f303 	lsl.w	r3, r2, r3
 8102506:	69ba      	ldr	r2, [r7, #24]
 8102508:	4313      	orrs	r3, r2
 810250a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	69ba      	ldr	r2, [r7, #24]
 8102510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102512:	683b      	ldr	r3, [r7, #0]
 8102514:	685b      	ldr	r3, [r3, #4]
 8102516:	f003 0303 	and.w	r3, r3, #3
 810251a:	2b02      	cmp	r3, #2
 810251c:	d123      	bne.n	8102566 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810251e:	69fb      	ldr	r3, [r7, #28]
 8102520:	08da      	lsrs	r2, r3, #3
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	3208      	adds	r2, #8
 8102526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810252c:	69fb      	ldr	r3, [r7, #28]
 810252e:	f003 0307 	and.w	r3, r3, #7
 8102532:	009b      	lsls	r3, r3, #2
 8102534:	220f      	movs	r2, #15
 8102536:	fa02 f303 	lsl.w	r3, r2, r3
 810253a:	43db      	mvns	r3, r3
 810253c:	69ba      	ldr	r2, [r7, #24]
 810253e:	4013      	ands	r3, r2
 8102540:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102542:	683b      	ldr	r3, [r7, #0]
 8102544:	691a      	ldr	r2, [r3, #16]
 8102546:	69fb      	ldr	r3, [r7, #28]
 8102548:	f003 0307 	and.w	r3, r3, #7
 810254c:	009b      	lsls	r3, r3, #2
 810254e:	fa02 f303 	lsl.w	r3, r2, r3
 8102552:	69ba      	ldr	r2, [r7, #24]
 8102554:	4313      	orrs	r3, r2
 8102556:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102558:	69fb      	ldr	r3, [r7, #28]
 810255a:	08da      	lsrs	r2, r3, #3
 810255c:	687b      	ldr	r3, [r7, #4]
 810255e:	3208      	adds	r2, #8
 8102560:	69b9      	ldr	r1, [r7, #24]
 8102562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102566:	687b      	ldr	r3, [r7, #4]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810256c:	69fb      	ldr	r3, [r7, #28]
 810256e:	005b      	lsls	r3, r3, #1
 8102570:	2203      	movs	r2, #3
 8102572:	fa02 f303 	lsl.w	r3, r2, r3
 8102576:	43db      	mvns	r3, r3
 8102578:	69ba      	ldr	r2, [r7, #24]
 810257a:	4013      	ands	r3, r2
 810257c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810257e:	683b      	ldr	r3, [r7, #0]
 8102580:	685b      	ldr	r3, [r3, #4]
 8102582:	f003 0203 	and.w	r2, r3, #3
 8102586:	69fb      	ldr	r3, [r7, #28]
 8102588:	005b      	lsls	r3, r3, #1
 810258a:	fa02 f303 	lsl.w	r3, r2, r3
 810258e:	69ba      	ldr	r2, [r7, #24]
 8102590:	4313      	orrs	r3, r2
 8102592:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	69ba      	ldr	r2, [r7, #24]
 8102598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810259a:	683b      	ldr	r3, [r7, #0]
 810259c:	685b      	ldr	r3, [r3, #4]
 810259e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81025a2:	2b00      	cmp	r3, #0
 81025a4:	f000 80e0 	beq.w	8102768 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81025a8:	4b2f      	ldr	r3, [pc, #188]	; (8102668 <HAL_GPIO_Init+0x238>)
 81025aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81025ae:	4a2e      	ldr	r2, [pc, #184]	; (8102668 <HAL_GPIO_Init+0x238>)
 81025b0:	f043 0302 	orr.w	r3, r3, #2
 81025b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81025b8:	4b2b      	ldr	r3, [pc, #172]	; (8102668 <HAL_GPIO_Init+0x238>)
 81025ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81025be:	f003 0302 	and.w	r3, r3, #2
 81025c2:	60fb      	str	r3, [r7, #12]
 81025c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81025c6:	4a29      	ldr	r2, [pc, #164]	; (810266c <HAL_GPIO_Init+0x23c>)
 81025c8:	69fb      	ldr	r3, [r7, #28]
 81025ca:	089b      	lsrs	r3, r3, #2
 81025cc:	3302      	adds	r3, #2
 81025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81025d4:	69fb      	ldr	r3, [r7, #28]
 81025d6:	f003 0303 	and.w	r3, r3, #3
 81025da:	009b      	lsls	r3, r3, #2
 81025dc:	220f      	movs	r2, #15
 81025de:	fa02 f303 	lsl.w	r3, r2, r3
 81025e2:	43db      	mvns	r3, r3
 81025e4:	69ba      	ldr	r2, [r7, #24]
 81025e6:	4013      	ands	r3, r2
 81025e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	4a20      	ldr	r2, [pc, #128]	; (8102670 <HAL_GPIO_Init+0x240>)
 81025ee:	4293      	cmp	r3, r2
 81025f0:	d052      	beq.n	8102698 <HAL_GPIO_Init+0x268>
 81025f2:	687b      	ldr	r3, [r7, #4]
 81025f4:	4a1f      	ldr	r2, [pc, #124]	; (8102674 <HAL_GPIO_Init+0x244>)
 81025f6:	4293      	cmp	r3, r2
 81025f8:	d031      	beq.n	810265e <HAL_GPIO_Init+0x22e>
 81025fa:	687b      	ldr	r3, [r7, #4]
 81025fc:	4a1e      	ldr	r2, [pc, #120]	; (8102678 <HAL_GPIO_Init+0x248>)
 81025fe:	4293      	cmp	r3, r2
 8102600:	d02b      	beq.n	810265a <HAL_GPIO_Init+0x22a>
 8102602:	687b      	ldr	r3, [r7, #4]
 8102604:	4a1d      	ldr	r2, [pc, #116]	; (810267c <HAL_GPIO_Init+0x24c>)
 8102606:	4293      	cmp	r3, r2
 8102608:	d025      	beq.n	8102656 <HAL_GPIO_Init+0x226>
 810260a:	687b      	ldr	r3, [r7, #4]
 810260c:	4a1c      	ldr	r2, [pc, #112]	; (8102680 <HAL_GPIO_Init+0x250>)
 810260e:	4293      	cmp	r3, r2
 8102610:	d01f      	beq.n	8102652 <HAL_GPIO_Init+0x222>
 8102612:	687b      	ldr	r3, [r7, #4]
 8102614:	4a1b      	ldr	r2, [pc, #108]	; (8102684 <HAL_GPIO_Init+0x254>)
 8102616:	4293      	cmp	r3, r2
 8102618:	d019      	beq.n	810264e <HAL_GPIO_Init+0x21e>
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	4a1a      	ldr	r2, [pc, #104]	; (8102688 <HAL_GPIO_Init+0x258>)
 810261e:	4293      	cmp	r3, r2
 8102620:	d013      	beq.n	810264a <HAL_GPIO_Init+0x21a>
 8102622:	687b      	ldr	r3, [r7, #4]
 8102624:	4a19      	ldr	r2, [pc, #100]	; (810268c <HAL_GPIO_Init+0x25c>)
 8102626:	4293      	cmp	r3, r2
 8102628:	d00d      	beq.n	8102646 <HAL_GPIO_Init+0x216>
 810262a:	687b      	ldr	r3, [r7, #4]
 810262c:	4a18      	ldr	r2, [pc, #96]	; (8102690 <HAL_GPIO_Init+0x260>)
 810262e:	4293      	cmp	r3, r2
 8102630:	d007      	beq.n	8102642 <HAL_GPIO_Init+0x212>
 8102632:	687b      	ldr	r3, [r7, #4]
 8102634:	4a17      	ldr	r2, [pc, #92]	; (8102694 <HAL_GPIO_Init+0x264>)
 8102636:	4293      	cmp	r3, r2
 8102638:	d101      	bne.n	810263e <HAL_GPIO_Init+0x20e>
 810263a:	2309      	movs	r3, #9
 810263c:	e02d      	b.n	810269a <HAL_GPIO_Init+0x26a>
 810263e:	230a      	movs	r3, #10
 8102640:	e02b      	b.n	810269a <HAL_GPIO_Init+0x26a>
 8102642:	2308      	movs	r3, #8
 8102644:	e029      	b.n	810269a <HAL_GPIO_Init+0x26a>
 8102646:	2307      	movs	r3, #7
 8102648:	e027      	b.n	810269a <HAL_GPIO_Init+0x26a>
 810264a:	2306      	movs	r3, #6
 810264c:	e025      	b.n	810269a <HAL_GPIO_Init+0x26a>
 810264e:	2305      	movs	r3, #5
 8102650:	e023      	b.n	810269a <HAL_GPIO_Init+0x26a>
 8102652:	2304      	movs	r3, #4
 8102654:	e021      	b.n	810269a <HAL_GPIO_Init+0x26a>
 8102656:	2303      	movs	r3, #3
 8102658:	e01f      	b.n	810269a <HAL_GPIO_Init+0x26a>
 810265a:	2302      	movs	r3, #2
 810265c:	e01d      	b.n	810269a <HAL_GPIO_Init+0x26a>
 810265e:	2301      	movs	r3, #1
 8102660:	e01b      	b.n	810269a <HAL_GPIO_Init+0x26a>
 8102662:	bf00      	nop
 8102664:	580000c0 	.word	0x580000c0
 8102668:	58024400 	.word	0x58024400
 810266c:	58000400 	.word	0x58000400
 8102670:	58020000 	.word	0x58020000
 8102674:	58020400 	.word	0x58020400
 8102678:	58020800 	.word	0x58020800
 810267c:	58020c00 	.word	0x58020c00
 8102680:	58021000 	.word	0x58021000
 8102684:	58021400 	.word	0x58021400
 8102688:	58021800 	.word	0x58021800
 810268c:	58021c00 	.word	0x58021c00
 8102690:	58022000 	.word	0x58022000
 8102694:	58022400 	.word	0x58022400
 8102698:	2300      	movs	r3, #0
 810269a:	69fa      	ldr	r2, [r7, #28]
 810269c:	f002 0203 	and.w	r2, r2, #3
 81026a0:	0092      	lsls	r2, r2, #2
 81026a2:	4093      	lsls	r3, r2
 81026a4:	69ba      	ldr	r2, [r7, #24]
 81026a6:	4313      	orrs	r3, r2
 81026a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81026aa:	4938      	ldr	r1, [pc, #224]	; (810278c <HAL_GPIO_Init+0x35c>)
 81026ac:	69fb      	ldr	r3, [r7, #28]
 81026ae:	089b      	lsrs	r3, r3, #2
 81026b0:	3302      	adds	r3, #2
 81026b2:	69ba      	ldr	r2, [r7, #24]
 81026b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81026b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81026bc:	681b      	ldr	r3, [r3, #0]
 81026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026c0:	693b      	ldr	r3, [r7, #16]
 81026c2:	43db      	mvns	r3, r3
 81026c4:	69ba      	ldr	r2, [r7, #24]
 81026c6:	4013      	ands	r3, r2
 81026c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81026ca:	683b      	ldr	r3, [r7, #0]
 81026cc:	685b      	ldr	r3, [r3, #4]
 81026ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81026d2:	2b00      	cmp	r3, #0
 81026d4:	d003      	beq.n	81026de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81026d6:	69ba      	ldr	r2, [r7, #24]
 81026d8:	693b      	ldr	r3, [r7, #16]
 81026da:	4313      	orrs	r3, r2
 81026dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81026de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81026e2:	69bb      	ldr	r3, [r7, #24]
 81026e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81026e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81026ea:	685b      	ldr	r3, [r3, #4]
 81026ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81026ee:	693b      	ldr	r3, [r7, #16]
 81026f0:	43db      	mvns	r3, r3
 81026f2:	69ba      	ldr	r2, [r7, #24]
 81026f4:	4013      	ands	r3, r2
 81026f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81026f8:	683b      	ldr	r3, [r7, #0]
 81026fa:	685b      	ldr	r3, [r3, #4]
 81026fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102700:	2b00      	cmp	r3, #0
 8102702:	d003      	beq.n	810270c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102704:	69ba      	ldr	r2, [r7, #24]
 8102706:	693b      	ldr	r3, [r7, #16]
 8102708:	4313      	orrs	r3, r2
 810270a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810270c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102710:	69bb      	ldr	r3, [r7, #24]
 8102712:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102714:	697b      	ldr	r3, [r7, #20]
 8102716:	685b      	ldr	r3, [r3, #4]
 8102718:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810271a:	693b      	ldr	r3, [r7, #16]
 810271c:	43db      	mvns	r3, r3
 810271e:	69ba      	ldr	r2, [r7, #24]
 8102720:	4013      	ands	r3, r2
 8102722:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102724:	683b      	ldr	r3, [r7, #0]
 8102726:	685b      	ldr	r3, [r3, #4]
 8102728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810272c:	2b00      	cmp	r3, #0
 810272e:	d003      	beq.n	8102738 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102730:	69ba      	ldr	r2, [r7, #24]
 8102732:	693b      	ldr	r3, [r7, #16]
 8102734:	4313      	orrs	r3, r2
 8102736:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102738:	697b      	ldr	r3, [r7, #20]
 810273a:	69ba      	ldr	r2, [r7, #24]
 810273c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810273e:	697b      	ldr	r3, [r7, #20]
 8102740:	681b      	ldr	r3, [r3, #0]
 8102742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102744:	693b      	ldr	r3, [r7, #16]
 8102746:	43db      	mvns	r3, r3
 8102748:	69ba      	ldr	r2, [r7, #24]
 810274a:	4013      	ands	r3, r2
 810274c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810274e:	683b      	ldr	r3, [r7, #0]
 8102750:	685b      	ldr	r3, [r3, #4]
 8102752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102756:	2b00      	cmp	r3, #0
 8102758:	d003      	beq.n	8102762 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810275a:	69ba      	ldr	r2, [r7, #24]
 810275c:	693b      	ldr	r3, [r7, #16]
 810275e:	4313      	orrs	r3, r2
 8102760:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102762:	697b      	ldr	r3, [r7, #20]
 8102764:	69ba      	ldr	r2, [r7, #24]
 8102766:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102768:	69fb      	ldr	r3, [r7, #28]
 810276a:	3301      	adds	r3, #1
 810276c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810276e:	683b      	ldr	r3, [r7, #0]
 8102770:	681a      	ldr	r2, [r3, #0]
 8102772:	69fb      	ldr	r3, [r7, #28]
 8102774:	fa22 f303 	lsr.w	r3, r2, r3
 8102778:	2b00      	cmp	r3, #0
 810277a:	f47f ae63 	bne.w	8102444 <HAL_GPIO_Init+0x14>
  }
}
 810277e:	bf00      	nop
 8102780:	bf00      	nop
 8102782:	3724      	adds	r7, #36	; 0x24
 8102784:	46bd      	mov	sp, r7
 8102786:	f85d 7b04 	ldr.w	r7, [sp], #4
 810278a:	4770      	bx	lr
 810278c:	58000400 	.word	0x58000400

08102790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102790:	b480      	push	{r7}
 8102792:	b083      	sub	sp, #12
 8102794:	af00      	add	r7, sp, #0
 8102796:	6078      	str	r0, [r7, #4]
 8102798:	460b      	mov	r3, r1
 810279a:	807b      	strh	r3, [r7, #2]
 810279c:	4613      	mov	r3, r2
 810279e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81027a0:	787b      	ldrb	r3, [r7, #1]
 81027a2:	2b00      	cmp	r3, #0
 81027a4:	d003      	beq.n	81027ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81027a6:	887a      	ldrh	r2, [r7, #2]
 81027a8:	687b      	ldr	r3, [r7, #4]
 81027aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81027ac:	e003      	b.n	81027b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81027ae:	887b      	ldrh	r3, [r7, #2]
 81027b0:	041a      	lsls	r2, r3, #16
 81027b2:	687b      	ldr	r3, [r7, #4]
 81027b4:	619a      	str	r2, [r3, #24]
}
 81027b6:	bf00      	nop
 81027b8:	370c      	adds	r7, #12
 81027ba:	46bd      	mov	sp, r7
 81027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c0:	4770      	bx	lr

081027c2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81027c2:	b580      	push	{r7, lr}
 81027c4:	b082      	sub	sp, #8
 81027c6:	af00      	add	r7, sp, #0
 81027c8:	4603      	mov	r3, r0
 81027ca:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81027cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81027d0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81027d4:	88fb      	ldrh	r3, [r7, #6]
 81027d6:	4013      	ands	r3, r2
 81027d8:	2b00      	cmp	r3, #0
 81027da:	d008      	beq.n	81027ee <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81027dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81027e0:	88fb      	ldrh	r3, [r7, #6]
 81027e2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81027e6:	88fb      	ldrh	r3, [r7, #6]
 81027e8:	4618      	mov	r0, r3
 81027ea:	f7ff f9e3 	bl	8101bb4 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81027ee:	bf00      	nop
 81027f0:	3708      	adds	r7, #8
 81027f2:	46bd      	mov	sp, r7
 81027f4:	bd80      	pop	{r7, pc}
	...

081027f8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81027f8:	b480      	push	{r7}
 81027fa:	b083      	sub	sp, #12
 81027fc:	af00      	add	r7, sp, #0
 81027fe:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102800:	4b05      	ldr	r3, [pc, #20]	; (8102818 <HAL_HSEM_ActivateNotification+0x20>)
 8102802:	681a      	ldr	r2, [r3, #0]
 8102804:	4904      	ldr	r1, [pc, #16]	; (8102818 <HAL_HSEM_ActivateNotification+0x20>)
 8102806:	687b      	ldr	r3, [r7, #4]
 8102808:	4313      	orrs	r3, r2
 810280a:	600b      	str	r3, [r1, #0]
#endif
}
 810280c:	bf00      	nop
 810280e:	370c      	adds	r7, #12
 8102810:	46bd      	mov	sp, r7
 8102812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102816:	4770      	bx	lr
 8102818:	58026510 	.word	0x58026510

0810281c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810281c:	b580      	push	{r7, lr}
 810281e:	b084      	sub	sp, #16
 8102820:	af00      	add	r7, sp, #0
 8102822:	60f8      	str	r0, [r7, #12]
 8102824:	460b      	mov	r3, r1
 8102826:	607a      	str	r2, [r7, #4]
 8102828:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810282a:	4b37      	ldr	r3, [pc, #220]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 810282c:	681b      	ldr	r3, [r3, #0]
 810282e:	f023 0201 	bic.w	r2, r3, #1
 8102832:	4935      	ldr	r1, [pc, #212]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102834:	68fb      	ldr	r3, [r7, #12]
 8102836:	4313      	orrs	r3, r2
 8102838:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810283a:	687b      	ldr	r3, [r7, #4]
 810283c:	2b00      	cmp	r3, #0
 810283e:	d123      	bne.n	8102888 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102840:	f7ff fde2 	bl	8102408 <HAL_GetCurrentCPUID>
 8102844:	4603      	mov	r3, r0
 8102846:	2b03      	cmp	r3, #3
 8102848:	d158      	bne.n	81028fc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810284a:	4b2f      	ldr	r3, [pc, #188]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 810284c:	691b      	ldr	r3, [r3, #16]
 810284e:	4a2e      	ldr	r2, [pc, #184]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102850:	f023 0301 	bic.w	r3, r3, #1
 8102854:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102856:	4b2d      	ldr	r3, [pc, #180]	; (810290c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102858:	691b      	ldr	r3, [r3, #16]
 810285a:	4a2c      	ldr	r2, [pc, #176]	; (810290c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810285c:	f043 0304 	orr.w	r3, r3, #4
 8102860:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102862:	f3bf 8f4f 	dsb	sy
}
 8102866:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102868:	f3bf 8f6f 	isb	sy
}
 810286c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810286e:	7afb      	ldrb	r3, [r7, #11]
 8102870:	2b01      	cmp	r3, #1
 8102872:	d101      	bne.n	8102878 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102874:	bf30      	wfi
 8102876:	e000      	b.n	810287a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102878:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810287a:	4b24      	ldr	r3, [pc, #144]	; (810290c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810287c:	691b      	ldr	r3, [r3, #16]
 810287e:	4a23      	ldr	r2, [pc, #140]	; (810290c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102880:	f023 0304 	bic.w	r3, r3, #4
 8102884:	6113      	str	r3, [r2, #16]
 8102886:	e03c      	b.n	8102902 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	2b01      	cmp	r3, #1
 810288c:	d123      	bne.n	81028d6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810288e:	f7ff fdbb 	bl	8102408 <HAL_GetCurrentCPUID>
 8102892:	4603      	mov	r3, r0
 8102894:	2b01      	cmp	r3, #1
 8102896:	d133      	bne.n	8102900 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102898:	4b1b      	ldr	r3, [pc, #108]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 810289a:	695b      	ldr	r3, [r3, #20]
 810289c:	4a1a      	ldr	r2, [pc, #104]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 810289e:	f023 0302 	bic.w	r3, r3, #2
 81028a2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028a4:	4b19      	ldr	r3, [pc, #100]	; (810290c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028a6:	691b      	ldr	r3, [r3, #16]
 81028a8:	4a18      	ldr	r2, [pc, #96]	; (810290c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028aa:	f043 0304 	orr.w	r3, r3, #4
 81028ae:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81028b0:	f3bf 8f4f 	dsb	sy
}
 81028b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81028b6:	f3bf 8f6f 	isb	sy
}
 81028ba:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81028bc:	7afb      	ldrb	r3, [r7, #11]
 81028be:	2b01      	cmp	r3, #1
 81028c0:	d101      	bne.n	81028c6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81028c2:	bf30      	wfi
 81028c4:	e000      	b.n	81028c8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81028c6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81028c8:	4b10      	ldr	r3, [pc, #64]	; (810290c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028ca:	691b      	ldr	r3, [r3, #16]
 81028cc:	4a0f      	ldr	r2, [pc, #60]	; (810290c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81028ce:	f023 0304 	bic.w	r3, r3, #4
 81028d2:	6113      	str	r3, [r2, #16]
 81028d4:	e015      	b.n	8102902 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81028d6:	f7ff fd97 	bl	8102408 <HAL_GetCurrentCPUID>
 81028da:	4603      	mov	r3, r0
 81028dc:	2b03      	cmp	r3, #3
 81028de:	d106      	bne.n	81028ee <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81028e0:	4b09      	ldr	r3, [pc, #36]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028e2:	691b      	ldr	r3, [r3, #16]
 81028e4:	4a08      	ldr	r2, [pc, #32]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028e6:	f023 0304 	bic.w	r3, r3, #4
 81028ea:	6113      	str	r3, [r2, #16]
 81028ec:	e009      	b.n	8102902 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81028ee:	4b06      	ldr	r3, [pc, #24]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028f0:	695b      	ldr	r3, [r3, #20]
 81028f2:	4a05      	ldr	r2, [pc, #20]	; (8102908 <HAL_PWREx_EnterSTOPMode+0xec>)
 81028f4:	f023 0304 	bic.w	r3, r3, #4
 81028f8:	6153      	str	r3, [r2, #20]
 81028fa:	e002      	b.n	8102902 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81028fc:	bf00      	nop
 81028fe:	e000      	b.n	8102902 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102900:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102902:	3710      	adds	r7, #16
 8102904:	46bd      	mov	sp, r7
 8102906:	bd80      	pop	{r7, pc}
 8102908:	58024800 	.word	0x58024800
 810290c:	e000ed00 	.word	0xe000ed00

08102910 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102910:	b580      	push	{r7, lr}
 8102912:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102914:	f7ff fd78 	bl	8102408 <HAL_GetCurrentCPUID>
 8102918:	4603      	mov	r3, r0
 810291a:	2b03      	cmp	r3, #3
 810291c:	d101      	bne.n	8102922 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810291e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102920:	e001      	b.n	8102926 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102922:	bf40      	sev
    __WFE ();
 8102924:	bf20      	wfe
}
 8102926:	bf00      	nop
 8102928:	bd80      	pop	{r7, pc}
	...

0810292c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810292c:	b480      	push	{r7}
 810292e:	b089      	sub	sp, #36	; 0x24
 8102930:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102932:	4bb3      	ldr	r3, [pc, #716]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102934:	691b      	ldr	r3, [r3, #16]
 8102936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810293a:	2b18      	cmp	r3, #24
 810293c:	f200 8155 	bhi.w	8102bea <HAL_RCC_GetSysClockFreq+0x2be>
 8102940:	a201      	add	r2, pc, #4	; (adr r2, 8102948 <HAL_RCC_GetSysClockFreq+0x1c>)
 8102942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102946:	bf00      	nop
 8102948:	081029ad 	.word	0x081029ad
 810294c:	08102beb 	.word	0x08102beb
 8102950:	08102beb 	.word	0x08102beb
 8102954:	08102beb 	.word	0x08102beb
 8102958:	08102beb 	.word	0x08102beb
 810295c:	08102beb 	.word	0x08102beb
 8102960:	08102beb 	.word	0x08102beb
 8102964:	08102beb 	.word	0x08102beb
 8102968:	081029d3 	.word	0x081029d3
 810296c:	08102beb 	.word	0x08102beb
 8102970:	08102beb 	.word	0x08102beb
 8102974:	08102beb 	.word	0x08102beb
 8102978:	08102beb 	.word	0x08102beb
 810297c:	08102beb 	.word	0x08102beb
 8102980:	08102beb 	.word	0x08102beb
 8102984:	08102beb 	.word	0x08102beb
 8102988:	081029d9 	.word	0x081029d9
 810298c:	08102beb 	.word	0x08102beb
 8102990:	08102beb 	.word	0x08102beb
 8102994:	08102beb 	.word	0x08102beb
 8102998:	08102beb 	.word	0x08102beb
 810299c:	08102beb 	.word	0x08102beb
 81029a0:	08102beb 	.word	0x08102beb
 81029a4:	08102beb 	.word	0x08102beb
 81029a8:	081029df 	.word	0x081029df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81029ac:	4b94      	ldr	r3, [pc, #592]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	f003 0320 	and.w	r3, r3, #32
 81029b4:	2b00      	cmp	r3, #0
 81029b6:	d009      	beq.n	81029cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81029b8:	4b91      	ldr	r3, [pc, #580]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029ba:	681b      	ldr	r3, [r3, #0]
 81029bc:	08db      	lsrs	r3, r3, #3
 81029be:	f003 0303 	and.w	r3, r3, #3
 81029c2:	4a90      	ldr	r2, [pc, #576]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81029c4:	fa22 f303 	lsr.w	r3, r2, r3
 81029c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81029ca:	e111      	b.n	8102bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81029cc:	4b8d      	ldr	r3, [pc, #564]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81029ce:	61bb      	str	r3, [r7, #24]
    break;
 81029d0:	e10e      	b.n	8102bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81029d2:	4b8d      	ldr	r3, [pc, #564]	; (8102c08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81029d4:	61bb      	str	r3, [r7, #24]
    break;
 81029d6:	e10b      	b.n	8102bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81029d8:	4b8c      	ldr	r3, [pc, #560]	; (8102c0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 81029da:	61bb      	str	r3, [r7, #24]
    break;
 81029dc:	e108      	b.n	8102bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81029de:	4b88      	ldr	r3, [pc, #544]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81029e2:	f003 0303 	and.w	r3, r3, #3
 81029e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81029e8:	4b85      	ldr	r3, [pc, #532]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81029ec:	091b      	lsrs	r3, r3, #4
 81029ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81029f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81029f4:	4b82      	ldr	r3, [pc, #520]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029f8:	f003 0301 	and.w	r3, r3, #1
 81029fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81029fe:	4b80      	ldr	r3, [pc, #512]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8102a02:	08db      	lsrs	r3, r3, #3
 8102a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102a08:	68fa      	ldr	r2, [r7, #12]
 8102a0a:	fb02 f303 	mul.w	r3, r2, r3
 8102a0e:	ee07 3a90 	vmov	s15, r3
 8102a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a16:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8102a1a:	693b      	ldr	r3, [r7, #16]
 8102a1c:	2b00      	cmp	r3, #0
 8102a1e:	f000 80e1 	beq.w	8102be4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102a22:	697b      	ldr	r3, [r7, #20]
 8102a24:	2b02      	cmp	r3, #2
 8102a26:	f000 8083 	beq.w	8102b30 <HAL_RCC_GetSysClockFreq+0x204>
 8102a2a:	697b      	ldr	r3, [r7, #20]
 8102a2c:	2b02      	cmp	r3, #2
 8102a2e:	f200 80a1 	bhi.w	8102b74 <HAL_RCC_GetSysClockFreq+0x248>
 8102a32:	697b      	ldr	r3, [r7, #20]
 8102a34:	2b00      	cmp	r3, #0
 8102a36:	d003      	beq.n	8102a40 <HAL_RCC_GetSysClockFreq+0x114>
 8102a38:	697b      	ldr	r3, [r7, #20]
 8102a3a:	2b01      	cmp	r3, #1
 8102a3c:	d056      	beq.n	8102aec <HAL_RCC_GetSysClockFreq+0x1c0>
 8102a3e:	e099      	b.n	8102b74 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102a40:	4b6f      	ldr	r3, [pc, #444]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a42:	681b      	ldr	r3, [r3, #0]
 8102a44:	f003 0320 	and.w	r3, r3, #32
 8102a48:	2b00      	cmp	r3, #0
 8102a4a:	d02d      	beq.n	8102aa8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102a4c:	4b6c      	ldr	r3, [pc, #432]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	08db      	lsrs	r3, r3, #3
 8102a52:	f003 0303 	and.w	r3, r3, #3
 8102a56:	4a6b      	ldr	r2, [pc, #428]	; (8102c04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102a58:	fa22 f303 	lsr.w	r3, r2, r3
 8102a5c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102a5e:	687b      	ldr	r3, [r7, #4]
 8102a60:	ee07 3a90 	vmov	s15, r3
 8102a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a68:	693b      	ldr	r3, [r7, #16]
 8102a6a:	ee07 3a90 	vmov	s15, r3
 8102a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a76:	4b62      	ldr	r3, [pc, #392]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a7e:	ee07 3a90 	vmov	s15, r3
 8102a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8102a8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102aa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8102aa6:	e087      	b.n	8102bb8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102aa8:	693b      	ldr	r3, [r7, #16]
 8102aaa:	ee07 3a90 	vmov	s15, r3
 8102aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ab2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102c14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8102ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102aba:	4b51      	ldr	r3, [pc, #324]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ac2:	ee07 3a90 	vmov	s15, r3
 8102ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8102ace:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ae6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102aea:	e065      	b.n	8102bb8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102aec:	693b      	ldr	r3, [r7, #16]
 8102aee:	ee07 3a90 	vmov	s15, r3
 8102af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102af6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102c18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102afe:	4b40      	ldr	r3, [pc, #256]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b06:	ee07 3a90 	vmov	s15, r3
 8102b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b2e:	e043      	b.n	8102bb8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b30:	693b      	ldr	r3, [r7, #16]
 8102b32:	ee07 3a90 	vmov	s15, r3
 8102b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102c1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8102b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b42:	4b2f      	ldr	r3, [pc, #188]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b4a:	ee07 3a90 	vmov	s15, r3
 8102b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b72:	e021      	b.n	8102bb8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8102b74:	693b      	ldr	r3, [r7, #16]
 8102b76:	ee07 3a90 	vmov	s15, r3
 8102b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102c18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b86:	4b1e      	ldr	r3, [pc, #120]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b8e:	ee07 3a90 	vmov	s15, r3
 8102b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8102b9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102c10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102bb6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8102bb8:	4b11      	ldr	r3, [pc, #68]	; (8102c00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102bbc:	0a5b      	lsrs	r3, r3, #9
 8102bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102bc2:	3301      	adds	r3, #1
 8102bc4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8102bc6:	683b      	ldr	r3, [r7, #0]
 8102bc8:	ee07 3a90 	vmov	s15, r3
 8102bcc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102bd0:	edd7 6a07 	vldr	s13, [r7, #28]
 8102bd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bdc:	ee17 3a90 	vmov	r3, s15
 8102be0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102be2:	e005      	b.n	8102bf0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102be4:	2300      	movs	r3, #0
 8102be6:	61bb      	str	r3, [r7, #24]
    break;
 8102be8:	e002      	b.n	8102bf0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8102bea:	4b07      	ldr	r3, [pc, #28]	; (8102c08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102bec:	61bb      	str	r3, [r7, #24]
    break;
 8102bee:	bf00      	nop
  }

  return sysclockfreq;
 8102bf0:	69bb      	ldr	r3, [r7, #24]
}
 8102bf2:	4618      	mov	r0, r3
 8102bf4:	3724      	adds	r7, #36	; 0x24
 8102bf6:	46bd      	mov	sp, r7
 8102bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bfc:	4770      	bx	lr
 8102bfe:	bf00      	nop
 8102c00:	58024400 	.word	0x58024400
 8102c04:	03d09000 	.word	0x03d09000
 8102c08:	003d0900 	.word	0x003d0900
 8102c0c:	007a1200 	.word	0x007a1200
 8102c10:	46000000 	.word	0x46000000
 8102c14:	4c742400 	.word	0x4c742400
 8102c18:	4a742400 	.word	0x4a742400
 8102c1c:	4af42400 	.word	0x4af42400

08102c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102c20:	b580      	push	{r7, lr}
 8102c22:	b082      	sub	sp, #8
 8102c24:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8102c26:	f7ff fe81 	bl	810292c <HAL_RCC_GetSysClockFreq>
 8102c2a:	4602      	mov	r2, r0
 8102c2c:	4b11      	ldr	r3, [pc, #68]	; (8102c74 <HAL_RCC_GetHCLKFreq+0x54>)
 8102c2e:	699b      	ldr	r3, [r3, #24]
 8102c30:	0a1b      	lsrs	r3, r3, #8
 8102c32:	f003 030f 	and.w	r3, r3, #15
 8102c36:	4910      	ldr	r1, [pc, #64]	; (8102c78 <HAL_RCC_GetHCLKFreq+0x58>)
 8102c38:	5ccb      	ldrb	r3, [r1, r3]
 8102c3a:	f003 031f 	and.w	r3, r3, #31
 8102c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8102c42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102c44:	4b0b      	ldr	r3, [pc, #44]	; (8102c74 <HAL_RCC_GetHCLKFreq+0x54>)
 8102c46:	699b      	ldr	r3, [r3, #24]
 8102c48:	f003 030f 	and.w	r3, r3, #15
 8102c4c:	4a0a      	ldr	r2, [pc, #40]	; (8102c78 <HAL_RCC_GetHCLKFreq+0x58>)
 8102c4e:	5cd3      	ldrb	r3, [r2, r3]
 8102c50:	f003 031f 	and.w	r3, r3, #31
 8102c54:	687a      	ldr	r2, [r7, #4]
 8102c56:	fa22 f303 	lsr.w	r3, r2, r3
 8102c5a:	4a08      	ldr	r2, [pc, #32]	; (8102c7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c5c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102c5e:	4b07      	ldr	r3, [pc, #28]	; (8102c7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c60:	681b      	ldr	r3, [r3, #0]
 8102c62:	4a07      	ldr	r2, [pc, #28]	; (8102c80 <HAL_RCC_GetHCLKFreq+0x60>)
 8102c64:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8102c66:	4b05      	ldr	r3, [pc, #20]	; (8102c7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8102c68:	681b      	ldr	r3, [r3, #0]
}
 8102c6a:	4618      	mov	r0, r3
 8102c6c:	3708      	adds	r7, #8
 8102c6e:	46bd      	mov	sp, r7
 8102c70:	bd80      	pop	{r7, pc}
 8102c72:	bf00      	nop
 8102c74:	58024400 	.word	0x58024400
 8102c78:	0810b460 	.word	0x0810b460
 8102c7c:	10000004 	.word	0x10000004
 8102c80:	10000000 	.word	0x10000000

08102c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8102c84:	b580      	push	{r7, lr}
 8102c86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102c88:	f7ff ffca 	bl	8102c20 <HAL_RCC_GetHCLKFreq>
 8102c8c:	4602      	mov	r2, r0
 8102c8e:	4b06      	ldr	r3, [pc, #24]	; (8102ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102c90:	69db      	ldr	r3, [r3, #28]
 8102c92:	091b      	lsrs	r3, r3, #4
 8102c94:	f003 0307 	and.w	r3, r3, #7
 8102c98:	4904      	ldr	r1, [pc, #16]	; (8102cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8102c9a:	5ccb      	ldrb	r3, [r1, r3]
 8102c9c:	f003 031f 	and.w	r3, r3, #31
 8102ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102ca4:	4618      	mov	r0, r3
 8102ca6:	bd80      	pop	{r7, pc}
 8102ca8:	58024400 	.word	0x58024400
 8102cac:	0810b460 	.word	0x0810b460

08102cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102cb0:	b580      	push	{r7, lr}
 8102cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102cb4:	f7ff ffb4 	bl	8102c20 <HAL_RCC_GetHCLKFreq>
 8102cb8:	4602      	mov	r2, r0
 8102cba:	4b06      	ldr	r3, [pc, #24]	; (8102cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102cbc:	69db      	ldr	r3, [r3, #28]
 8102cbe:	0a1b      	lsrs	r3, r3, #8
 8102cc0:	f003 0307 	and.w	r3, r3, #7
 8102cc4:	4904      	ldr	r1, [pc, #16]	; (8102cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8102cc6:	5ccb      	ldrb	r3, [r1, r3]
 8102cc8:	f003 031f 	and.w	r3, r3, #31
 8102ccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102cd0:	4618      	mov	r0, r3
 8102cd2:	bd80      	pop	{r7, pc}
 8102cd4:	58024400 	.word	0x58024400
 8102cd8:	0810b460 	.word	0x0810b460

08102cdc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102cdc:	b580      	push	{r7, lr}
 8102cde:	b086      	sub	sp, #24
 8102ce0:	af00      	add	r7, sp, #0
 8102ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102ce4:	2300      	movs	r3, #0
 8102ce6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102ce8:	2300      	movs	r3, #0
 8102cea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102cf4:	2b00      	cmp	r3, #0
 8102cf6:	d03f      	beq.n	8102d78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8102cf8:	687b      	ldr	r3, [r7, #4]
 8102cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102cfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102d00:	d02a      	beq.n	8102d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102d02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102d06:	d824      	bhi.n	8102d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102d08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102d0c:	d018      	beq.n	8102d40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102d0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102d12:	d81e      	bhi.n	8102d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102d14:	2b00      	cmp	r3, #0
 8102d16:	d003      	beq.n	8102d20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8102d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102d1c:	d007      	beq.n	8102d2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102d1e:	e018      	b.n	8102d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102d20:	4bab      	ldr	r3, [pc, #684]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102d24:	4aaa      	ldr	r2, [pc, #680]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d2c:	e015      	b.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	3304      	adds	r3, #4
 8102d32:	2102      	movs	r1, #2
 8102d34:	4618      	mov	r0, r3
 8102d36:	f001 f9cf 	bl	81040d8 <RCCEx_PLL2_Config>
 8102d3a:	4603      	mov	r3, r0
 8102d3c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d3e:	e00c      	b.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	3324      	adds	r3, #36	; 0x24
 8102d44:	2102      	movs	r1, #2
 8102d46:	4618      	mov	r0, r3
 8102d48:	f001 fa78 	bl	810423c <RCCEx_PLL3_Config>
 8102d4c:	4603      	mov	r3, r0
 8102d4e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102d50:	e003      	b.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d52:	2301      	movs	r3, #1
 8102d54:	75fb      	strb	r3, [r7, #23]
      break;
 8102d56:	e000      	b.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8102d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d5a:	7dfb      	ldrb	r3, [r7, #23]
 8102d5c:	2b00      	cmp	r3, #0
 8102d5e:	d109      	bne.n	8102d74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8102d60:	4b9b      	ldr	r3, [pc, #620]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102d68:	687b      	ldr	r3, [r7, #4]
 8102d6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102d6c:	4998      	ldr	r1, [pc, #608]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102d6e:	4313      	orrs	r3, r2
 8102d70:	650b      	str	r3, [r1, #80]	; 0x50
 8102d72:	e001      	b.n	8102d78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d74:	7dfb      	ldrb	r3, [r7, #23]
 8102d76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102d78:	687b      	ldr	r3, [r7, #4]
 8102d7a:	681b      	ldr	r3, [r3, #0]
 8102d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102d80:	2b00      	cmp	r3, #0
 8102d82:	d03d      	beq.n	8102e00 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d88:	2b04      	cmp	r3, #4
 8102d8a:	d826      	bhi.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8102d8c:	a201      	add	r2, pc, #4	; (adr r2, 8102d94 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8102d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102d92:	bf00      	nop
 8102d94:	08102da9 	.word	0x08102da9
 8102d98:	08102db7 	.word	0x08102db7
 8102d9c:	08102dc9 	.word	0x08102dc9
 8102da0:	08102de1 	.word	0x08102de1
 8102da4:	08102de1 	.word	0x08102de1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102da8:	4b89      	ldr	r3, [pc, #548]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102dac:	4a88      	ldr	r2, [pc, #544]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102db2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102db4:	e015      	b.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	3304      	adds	r3, #4
 8102dba:	2100      	movs	r1, #0
 8102dbc:	4618      	mov	r0, r3
 8102dbe:	f001 f98b 	bl	81040d8 <RCCEx_PLL2_Config>
 8102dc2:	4603      	mov	r3, r0
 8102dc4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102dc6:	e00c      	b.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102dc8:	687b      	ldr	r3, [r7, #4]
 8102dca:	3324      	adds	r3, #36	; 0x24
 8102dcc:	2100      	movs	r1, #0
 8102dce:	4618      	mov	r0, r3
 8102dd0:	f001 fa34 	bl	810423c <RCCEx_PLL3_Config>
 8102dd4:	4603      	mov	r3, r0
 8102dd6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102dd8:	e003      	b.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102dda:	2301      	movs	r3, #1
 8102ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8102dde:	e000      	b.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102de2:	7dfb      	ldrb	r3, [r7, #23]
 8102de4:	2b00      	cmp	r3, #0
 8102de6:	d109      	bne.n	8102dfc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102de8:	4b79      	ldr	r3, [pc, #484]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102dec:	f023 0207 	bic.w	r2, r3, #7
 8102df0:	687b      	ldr	r3, [r7, #4]
 8102df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102df4:	4976      	ldr	r1, [pc, #472]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102df6:	4313      	orrs	r3, r2
 8102df8:	650b      	str	r3, [r1, #80]	; 0x50
 8102dfa:	e001      	b.n	8102e00 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dfc:	7dfb      	ldrb	r3, [r7, #23]
 8102dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102e00:	687b      	ldr	r3, [r7, #4]
 8102e02:	681b      	ldr	r3, [r3, #0]
 8102e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8102e08:	2b00      	cmp	r3, #0
 8102e0a:	d042      	beq.n	8102e92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102e14:	d02b      	beq.n	8102e6e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8102e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102e1a:	d825      	bhi.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e1c:	2bc0      	cmp	r3, #192	; 0xc0
 8102e1e:	d028      	beq.n	8102e72 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102e20:	2bc0      	cmp	r3, #192	; 0xc0
 8102e22:	d821      	bhi.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e24:	2b80      	cmp	r3, #128	; 0x80
 8102e26:	d016      	beq.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8102e28:	2b80      	cmp	r3, #128	; 0x80
 8102e2a:	d81d      	bhi.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102e2c:	2b00      	cmp	r3, #0
 8102e2e:	d002      	beq.n	8102e36 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102e30:	2b40      	cmp	r3, #64	; 0x40
 8102e32:	d007      	beq.n	8102e44 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102e34:	e018      	b.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e36:	4b66      	ldr	r3, [pc, #408]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e3a:	4a65      	ldr	r2, [pc, #404]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e42:	e017      	b.n	8102e74 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102e44:	687b      	ldr	r3, [r7, #4]
 8102e46:	3304      	adds	r3, #4
 8102e48:	2100      	movs	r1, #0
 8102e4a:	4618      	mov	r0, r3
 8102e4c:	f001 f944 	bl	81040d8 <RCCEx_PLL2_Config>
 8102e50:	4603      	mov	r3, r0
 8102e52:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e54:	e00e      	b.n	8102e74 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	3324      	adds	r3, #36	; 0x24
 8102e5a:	2100      	movs	r1, #0
 8102e5c:	4618      	mov	r0, r3
 8102e5e:	f001 f9ed 	bl	810423c <RCCEx_PLL3_Config>
 8102e62:	4603      	mov	r3, r0
 8102e64:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8102e66:	e005      	b.n	8102e74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102e68:	2301      	movs	r3, #1
 8102e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8102e6c:	e002      	b.n	8102e74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102e6e:	bf00      	nop
 8102e70:	e000      	b.n	8102e74 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8102e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e74:	7dfb      	ldrb	r3, [r7, #23]
 8102e76:	2b00      	cmp	r3, #0
 8102e78:	d109      	bne.n	8102e8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102e7a:	4b55      	ldr	r3, [pc, #340]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102e7e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e86:	4952      	ldr	r1, [pc, #328]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102e88:	4313      	orrs	r3, r2
 8102e8a:	650b      	str	r3, [r1, #80]	; 0x50
 8102e8c:	e001      	b.n	8102e92 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e8e:	7dfb      	ldrb	r3, [r7, #23]
 8102e90:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	681b      	ldr	r3, [r3, #0]
 8102e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8102e9a:	2b00      	cmp	r3, #0
 8102e9c:	d049      	beq.n	8102f32 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102ea4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102ea8:	d030      	beq.n	8102f0c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8102eaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102eae:	d82a      	bhi.n	8102f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102eb0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102eb4:	d02c      	beq.n	8102f10 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8102eb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102eba:	d824      	bhi.n	8102f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ebc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102ec0:	d018      	beq.n	8102ef4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102ec6:	d81e      	bhi.n	8102f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102ec8:	2b00      	cmp	r3, #0
 8102eca:	d003      	beq.n	8102ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102ed0:	d007      	beq.n	8102ee2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102ed2:	e018      	b.n	8102f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ed4:	4b3e      	ldr	r3, [pc, #248]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ed8:	4a3d      	ldr	r2, [pc, #244]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102ee0:	e017      	b.n	8102f12 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102ee2:	687b      	ldr	r3, [r7, #4]
 8102ee4:	3304      	adds	r3, #4
 8102ee6:	2100      	movs	r1, #0
 8102ee8:	4618      	mov	r0, r3
 8102eea:	f001 f8f5 	bl	81040d8 <RCCEx_PLL2_Config>
 8102eee:	4603      	mov	r3, r0
 8102ef0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102ef2:	e00e      	b.n	8102f12 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102ef4:	687b      	ldr	r3, [r7, #4]
 8102ef6:	3324      	adds	r3, #36	; 0x24
 8102ef8:	2100      	movs	r1, #0
 8102efa:	4618      	mov	r0, r3
 8102efc:	f001 f99e 	bl	810423c <RCCEx_PLL3_Config>
 8102f00:	4603      	mov	r3, r0
 8102f02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f04:	e005      	b.n	8102f12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102f06:	2301      	movs	r3, #1
 8102f08:	75fb      	strb	r3, [r7, #23]
      break;
 8102f0a:	e002      	b.n	8102f12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102f0c:	bf00      	nop
 8102f0e:	e000      	b.n	8102f12 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102f10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102f12:	7dfb      	ldrb	r3, [r7, #23]
 8102f14:	2b00      	cmp	r3, #0
 8102f16:	d10a      	bne.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102f18:	4b2d      	ldr	r3, [pc, #180]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f1c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102f20:	687b      	ldr	r3, [r7, #4]
 8102f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102f26:	492a      	ldr	r1, [pc, #168]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f28:	4313      	orrs	r3, r2
 8102f2a:	658b      	str	r3, [r1, #88]	; 0x58
 8102f2c:	e001      	b.n	8102f32 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f2e:	7dfb      	ldrb	r3, [r7, #23]
 8102f30:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102f32:	687b      	ldr	r3, [r7, #4]
 8102f34:	681b      	ldr	r3, [r3, #0]
 8102f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8102f3a:	2b00      	cmp	r3, #0
 8102f3c:	d04c      	beq.n	8102fd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8102f3e:	687b      	ldr	r3, [r7, #4]
 8102f40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102f44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102f48:	d030      	beq.n	8102fac <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8102f4a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102f4e:	d82a      	bhi.n	8102fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f50:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102f54:	d02c      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8102f56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102f5a:	d824      	bhi.n	8102fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102f60:	d018      	beq.n	8102f94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8102f62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102f66:	d81e      	bhi.n	8102fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8102f68:	2b00      	cmp	r3, #0
 8102f6a:	d003      	beq.n	8102f74 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8102f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102f70:	d007      	beq.n	8102f82 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8102f72:	e018      	b.n	8102fa6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102f74:	4b16      	ldr	r3, [pc, #88]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102f78:	4a15      	ldr	r2, [pc, #84]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102f7e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102f80:	e017      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102f82:	687b      	ldr	r3, [r7, #4]
 8102f84:	3304      	adds	r3, #4
 8102f86:	2100      	movs	r1, #0
 8102f88:	4618      	mov	r0, r3
 8102f8a:	f001 f8a5 	bl	81040d8 <RCCEx_PLL2_Config>
 8102f8e:	4603      	mov	r3, r0
 8102f90:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102f92:	e00e      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	3324      	adds	r3, #36	; 0x24
 8102f98:	2100      	movs	r1, #0
 8102f9a:	4618      	mov	r0, r3
 8102f9c:	f001 f94e 	bl	810423c <RCCEx_PLL3_Config>
 8102fa0:	4603      	mov	r3, r0
 8102fa2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102fa4:	e005      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8102fa6:	2301      	movs	r3, #1
 8102fa8:	75fb      	strb	r3, [r7, #23]
      break;
 8102faa:	e002      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102fac:	bf00      	nop
 8102fae:	e000      	b.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102fb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102fb2:	7dfb      	ldrb	r3, [r7, #23]
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d10d      	bne.n	8102fd4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102fb8:	4b05      	ldr	r3, [pc, #20]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102fbc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102fc0:	687b      	ldr	r3, [r7, #4]
 8102fc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102fc6:	4902      	ldr	r1, [pc, #8]	; (8102fd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102fc8:	4313      	orrs	r3, r2
 8102fca:	658b      	str	r3, [r1, #88]	; 0x58
 8102fcc:	e004      	b.n	8102fd8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8102fce:	bf00      	nop
 8102fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fd4:	7dfb      	ldrb	r3, [r7, #23]
 8102fd6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102fd8:	687b      	ldr	r3, [r7, #4]
 8102fda:	681b      	ldr	r3, [r3, #0]
 8102fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102fe0:	2b00      	cmp	r3, #0
 8102fe2:	d032      	beq.n	810304a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102fe4:	687b      	ldr	r3, [r7, #4]
 8102fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102fe8:	2b30      	cmp	r3, #48	; 0x30
 8102fea:	d01c      	beq.n	8103026 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102fec:	2b30      	cmp	r3, #48	; 0x30
 8102fee:	d817      	bhi.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102ff0:	2b20      	cmp	r3, #32
 8102ff2:	d00c      	beq.n	810300e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8102ff4:	2b20      	cmp	r3, #32
 8102ff6:	d813      	bhi.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102ff8:	2b00      	cmp	r3, #0
 8102ffa:	d016      	beq.n	810302a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8102ffc:	2b10      	cmp	r3, #16
 8102ffe:	d10f      	bne.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103000:	4baf      	ldr	r3, [pc, #700]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103004:	4aae      	ldr	r2, [pc, #696]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810300a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810300c:	e00e      	b.n	810302c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	3304      	adds	r3, #4
 8103012:	2102      	movs	r1, #2
 8103014:	4618      	mov	r0, r3
 8103016:	f001 f85f 	bl	81040d8 <RCCEx_PLL2_Config>
 810301a:	4603      	mov	r3, r0
 810301c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 810301e:	e005      	b.n	810302c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103020:	2301      	movs	r3, #1
 8103022:	75fb      	strb	r3, [r7, #23]
      break;
 8103024:	e002      	b.n	810302c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103026:	bf00      	nop
 8103028:	e000      	b.n	810302c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810302a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810302c:	7dfb      	ldrb	r3, [r7, #23]
 810302e:	2b00      	cmp	r3, #0
 8103030:	d109      	bne.n	8103046 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103032:	4ba3      	ldr	r3, [pc, #652]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103036:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810303a:	687b      	ldr	r3, [r7, #4]
 810303c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810303e:	49a0      	ldr	r1, [pc, #640]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103040:	4313      	orrs	r3, r2
 8103042:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103044:	e001      	b.n	810304a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103046:	7dfb      	ldrb	r3, [r7, #23]
 8103048:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	681b      	ldr	r3, [r3, #0]
 810304e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103052:	2b00      	cmp	r3, #0
 8103054:	d047      	beq.n	81030e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810305a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810305e:	d030      	beq.n	81030c2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8103060:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103064:	d82a      	bhi.n	81030bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810306a:	d02c      	beq.n	81030c6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810306c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103070:	d824      	bhi.n	81030bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103076:	d018      	beq.n	81030aa <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810307c:	d81e      	bhi.n	81030bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810307e:	2b00      	cmp	r3, #0
 8103080:	d003      	beq.n	810308a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8103082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103086:	d007      	beq.n	8103098 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103088:	e018      	b.n	81030bc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810308a:	4b8d      	ldr	r3, [pc, #564]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810308e:	4a8c      	ldr	r2, [pc, #560]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103094:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103096:	e017      	b.n	81030c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	3304      	adds	r3, #4
 810309c:	2100      	movs	r1, #0
 810309e:	4618      	mov	r0, r3
 81030a0:	f001 f81a 	bl	81040d8 <RCCEx_PLL2_Config>
 81030a4:	4603      	mov	r3, r0
 81030a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81030a8:	e00e      	b.n	81030c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	3324      	adds	r3, #36	; 0x24
 81030ae:	2100      	movs	r1, #0
 81030b0:	4618      	mov	r0, r3
 81030b2:	f001 f8c3 	bl	810423c <RCCEx_PLL3_Config>
 81030b6:	4603      	mov	r3, r0
 81030b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81030ba:	e005      	b.n	81030c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81030bc:	2301      	movs	r3, #1
 81030be:	75fb      	strb	r3, [r7, #23]
      break;
 81030c0:	e002      	b.n	81030c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81030c2:	bf00      	nop
 81030c4:	e000      	b.n	81030c8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81030c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81030c8:	7dfb      	ldrb	r3, [r7, #23]
 81030ca:	2b00      	cmp	r3, #0
 81030cc:	d109      	bne.n	81030e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81030ce:	4b7c      	ldr	r3, [pc, #496]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81030d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81030d2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81030d6:	687b      	ldr	r3, [r7, #4]
 81030d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81030da:	4979      	ldr	r1, [pc, #484]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81030dc:	4313      	orrs	r3, r2
 81030de:	650b      	str	r3, [r1, #80]	; 0x50
 81030e0:	e001      	b.n	81030e6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030e2:	7dfb      	ldrb	r3, [r7, #23]
 81030e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81030ee:	2b00      	cmp	r3, #0
 81030f0:	d049      	beq.n	8103186 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81030f2:	687b      	ldr	r3, [r7, #4]
 81030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81030f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81030fa:	d02e      	beq.n	810315a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81030fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103100:	d828      	bhi.n	8103154 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103102:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103106:	d02a      	beq.n	810315e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8103108:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810310c:	d822      	bhi.n	8103154 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810310e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103112:	d026      	beq.n	8103162 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8103114:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103118:	d81c      	bhi.n	8103154 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810311a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810311e:	d010      	beq.n	8103142 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103120:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103124:	d816      	bhi.n	8103154 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103126:	2b00      	cmp	r3, #0
 8103128:	d01d      	beq.n	8103166 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810312a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810312e:	d111      	bne.n	8103154 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103130:	687b      	ldr	r3, [r7, #4]
 8103132:	3304      	adds	r3, #4
 8103134:	2101      	movs	r1, #1
 8103136:	4618      	mov	r0, r3
 8103138:	f000 ffce 	bl	81040d8 <RCCEx_PLL2_Config>
 810313c:	4603      	mov	r3, r0
 810313e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103140:	e012      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103142:	687b      	ldr	r3, [r7, #4]
 8103144:	3324      	adds	r3, #36	; 0x24
 8103146:	2101      	movs	r1, #1
 8103148:	4618      	mov	r0, r3
 810314a:	f001 f877 	bl	810423c <RCCEx_PLL3_Config>
 810314e:	4603      	mov	r3, r0
 8103150:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103152:	e009      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103154:	2301      	movs	r3, #1
 8103156:	75fb      	strb	r3, [r7, #23]
      break;
 8103158:	e006      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810315a:	bf00      	nop
 810315c:	e004      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810315e:	bf00      	nop
 8103160:	e002      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103162:	bf00      	nop
 8103164:	e000      	b.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103168:	7dfb      	ldrb	r3, [r7, #23]
 810316a:	2b00      	cmp	r3, #0
 810316c:	d109      	bne.n	8103182 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810316e:	4b54      	ldr	r3, [pc, #336]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103172:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103176:	687b      	ldr	r3, [r7, #4]
 8103178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810317a:	4951      	ldr	r1, [pc, #324]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810317c:	4313      	orrs	r3, r2
 810317e:	650b      	str	r3, [r1, #80]	; 0x50
 8103180:	e001      	b.n	8103186 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103182:	7dfb      	ldrb	r3, [r7, #23]
 8103184:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103186:	687b      	ldr	r3, [r7, #4]
 8103188:	681b      	ldr	r3, [r3, #0]
 810318a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810318e:	2b00      	cmp	r3, #0
 8103190:	d04b      	beq.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103192:	687b      	ldr	r3, [r7, #4]
 8103194:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103198:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810319c:	d02e      	beq.n	81031fc <HAL_RCCEx_PeriphCLKConfig+0x520>
 810319e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81031a2:	d828      	bhi.n	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81031a8:	d02a      	beq.n	8103200 <HAL_RCCEx_PeriphCLKConfig+0x524>
 81031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81031ae:	d822      	bhi.n	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81031b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81031b4:	d026      	beq.n	8103204 <HAL_RCCEx_PeriphCLKConfig+0x528>
 81031b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81031ba:	d81c      	bhi.n	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81031bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031c0:	d010      	beq.n	81031e4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 81031c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81031c6:	d816      	bhi.n	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81031c8:	2b00      	cmp	r3, #0
 81031ca:	d01d      	beq.n	8103208 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81031cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81031d0:	d111      	bne.n	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	3304      	adds	r3, #4
 81031d6:	2101      	movs	r1, #1
 81031d8:	4618      	mov	r0, r3
 81031da:	f000 ff7d 	bl	81040d8 <RCCEx_PLL2_Config>
 81031de:	4603      	mov	r3, r0
 81031e0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81031e2:	e012      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81031e4:	687b      	ldr	r3, [r7, #4]
 81031e6:	3324      	adds	r3, #36	; 0x24
 81031e8:	2101      	movs	r1, #1
 81031ea:	4618      	mov	r0, r3
 81031ec:	f001 f826 	bl	810423c <RCCEx_PLL3_Config>
 81031f0:	4603      	mov	r3, r0
 81031f2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81031f4:	e009      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81031f6:	2301      	movs	r3, #1
 81031f8:	75fb      	strb	r3, [r7, #23]
      break;
 81031fa:	e006      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81031fc:	bf00      	nop
 81031fe:	e004      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103200:	bf00      	nop
 8103202:	e002      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103204:	bf00      	nop
 8103206:	e000      	b.n	810320a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103208:	bf00      	nop
    }

    if(ret == HAL_OK)
 810320a:	7dfb      	ldrb	r3, [r7, #23]
 810320c:	2b00      	cmp	r3, #0
 810320e:	d10a      	bne.n	8103226 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103210:	4b2b      	ldr	r3, [pc, #172]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103214:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103218:	687b      	ldr	r3, [r7, #4]
 810321a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810321e:	4928      	ldr	r1, [pc, #160]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103220:	4313      	orrs	r3, r2
 8103222:	658b      	str	r3, [r1, #88]	; 0x58
 8103224:	e001      	b.n	810322a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103226:	7dfb      	ldrb	r3, [r7, #23]
 8103228:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103232:	2b00      	cmp	r3, #0
 8103234:	d02f      	beq.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103236:	687b      	ldr	r3, [r7, #4]
 8103238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810323a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810323e:	d00e      	beq.n	810325e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103244:	d814      	bhi.n	8103270 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8103246:	2b00      	cmp	r3, #0
 8103248:	d015      	beq.n	8103276 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810324a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810324e:	d10f      	bne.n	8103270 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103250:	4b1b      	ldr	r3, [pc, #108]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103254:	4a1a      	ldr	r2, [pc, #104]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810325a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810325c:	e00c      	b.n	8103278 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810325e:	687b      	ldr	r3, [r7, #4]
 8103260:	3304      	adds	r3, #4
 8103262:	2101      	movs	r1, #1
 8103264:	4618      	mov	r0, r3
 8103266:	f000 ff37 	bl	81040d8 <RCCEx_PLL2_Config>
 810326a:	4603      	mov	r3, r0
 810326c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810326e:	e003      	b.n	8103278 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103270:	2301      	movs	r3, #1
 8103272:	75fb      	strb	r3, [r7, #23]
      break;
 8103274:	e000      	b.n	8103278 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8103276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103278:	7dfb      	ldrb	r3, [r7, #23]
 810327a:	2b00      	cmp	r3, #0
 810327c:	d109      	bne.n	8103292 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810327e:	4b10      	ldr	r3, [pc, #64]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103282:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810328a:	490d      	ldr	r1, [pc, #52]	; (81032c0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810328c:	4313      	orrs	r3, r2
 810328e:	650b      	str	r3, [r1, #80]	; 0x50
 8103290:	e001      	b.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103292:	7dfb      	ldrb	r3, [r7, #23]
 8103294:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	681b      	ldr	r3, [r3, #0]
 810329a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810329e:	2b00      	cmp	r3, #0
 81032a0:	d033      	beq.n	810330a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 81032a2:	687b      	ldr	r3, [r7, #4]
 81032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032a6:	2b03      	cmp	r3, #3
 81032a8:	d81c      	bhi.n	81032e4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 81032aa:	a201      	add	r2, pc, #4	; (adr r2, 81032b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 81032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032b0:	081032eb 	.word	0x081032eb
 81032b4:	081032c5 	.word	0x081032c5
 81032b8:	081032d3 	.word	0x081032d3
 81032bc:	081032eb 	.word	0x081032eb
 81032c0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81032c4:	4bb9      	ldr	r3, [pc, #740]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032c8:	4ab8      	ldr	r2, [pc, #736]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81032ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81032d0:	e00c      	b.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81032d2:	687b      	ldr	r3, [r7, #4]
 81032d4:	3304      	adds	r3, #4
 81032d6:	2102      	movs	r1, #2
 81032d8:	4618      	mov	r0, r3
 81032da:	f000 fefd 	bl	81040d8 <RCCEx_PLL2_Config>
 81032de:	4603      	mov	r3, r0
 81032e0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81032e2:	e003      	b.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81032e4:	2301      	movs	r3, #1
 81032e6:	75fb      	strb	r3, [r7, #23]
      break;
 81032e8:	e000      	b.n	81032ec <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81032ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81032ec:	7dfb      	ldrb	r3, [r7, #23]
 81032ee:	2b00      	cmp	r3, #0
 81032f0:	d109      	bne.n	8103306 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81032f2:	4bae      	ldr	r3, [pc, #696]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81032f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81032f6:	f023 0203 	bic.w	r2, r3, #3
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032fe:	49ab      	ldr	r1, [pc, #684]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103300:	4313      	orrs	r3, r2
 8103302:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103304:	e001      	b.n	810330a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103306:	7dfb      	ldrb	r3, [r7, #23]
 8103308:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	681b      	ldr	r3, [r3, #0]
 810330e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103312:	2b00      	cmp	r3, #0
 8103314:	f000 8088 	beq.w	8103428 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103318:	4ba5      	ldr	r3, [pc, #660]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	4aa4      	ldr	r2, [pc, #656]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810331e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103322:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103324:	f7fe ff30 	bl	8102188 <HAL_GetTick>
 8103328:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810332a:	e009      	b.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810332c:	f7fe ff2c 	bl	8102188 <HAL_GetTick>
 8103330:	4602      	mov	r2, r0
 8103332:	693b      	ldr	r3, [r7, #16]
 8103334:	1ad3      	subs	r3, r2, r3
 8103336:	2b64      	cmp	r3, #100	; 0x64
 8103338:	d902      	bls.n	8103340 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810333a:	2303      	movs	r3, #3
 810333c:	75fb      	strb	r3, [r7, #23]
        break;
 810333e:	e005      	b.n	810334c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103340:	4b9b      	ldr	r3, [pc, #620]	; (81035b0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103342:	681b      	ldr	r3, [r3, #0]
 8103344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103348:	2b00      	cmp	r3, #0
 810334a:	d0ef      	beq.n	810332c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 810334c:	7dfb      	ldrb	r3, [r7, #23]
 810334e:	2b00      	cmp	r3, #0
 8103350:	d168      	bne.n	8103424 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103352:	4b96      	ldr	r3, [pc, #600]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103354:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103356:	687b      	ldr	r3, [r7, #4]
 8103358:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810335c:	4053      	eors	r3, r2
 810335e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103362:	2b00      	cmp	r3, #0
 8103364:	d013      	beq.n	810338e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103366:	4b91      	ldr	r3, [pc, #580]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810336a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810336e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103370:	4b8e      	ldr	r3, [pc, #568]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103374:	4a8d      	ldr	r2, [pc, #564]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810337a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810337c:	4b8b      	ldr	r3, [pc, #556]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103380:	4a8a      	ldr	r2, [pc, #552]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103386:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103388:	4a88      	ldr	r2, [pc, #544]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810338a:	68fb      	ldr	r3, [r7, #12]
 810338c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103398:	d115      	bne.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810339a:	f7fe fef5 	bl	8102188 <HAL_GetTick>
 810339e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033a0:	e00b      	b.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81033a2:	f7fe fef1 	bl	8102188 <HAL_GetTick>
 81033a6:	4602      	mov	r2, r0
 81033a8:	693b      	ldr	r3, [r7, #16]
 81033aa:	1ad3      	subs	r3, r2, r3
 81033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 81033b0:	4293      	cmp	r3, r2
 81033b2:	d902      	bls.n	81033ba <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 81033b4:	2303      	movs	r3, #3
 81033b6:	75fb      	strb	r3, [r7, #23]
            break;
 81033b8:	e005      	b.n	81033c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81033ba:	4b7c      	ldr	r3, [pc, #496]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81033be:	f003 0302 	and.w	r3, r3, #2
 81033c2:	2b00      	cmp	r3, #0
 81033c4:	d0ed      	beq.n	81033a2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81033c6:	7dfb      	ldrb	r3, [r7, #23]
 81033c8:	2b00      	cmp	r3, #0
 81033ca:	d128      	bne.n	810341e <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81033d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81033d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81033da:	d10f      	bne.n	81033fc <HAL_RCCEx_PeriphCLKConfig+0x720>
 81033dc:	4b73      	ldr	r3, [pc, #460]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81033de:	691b      	ldr	r3, [r3, #16]
 81033e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81033e4:	687b      	ldr	r3, [r7, #4]
 81033e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81033ea:	091b      	lsrs	r3, r3, #4
 81033ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81033f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81033f4:	496d      	ldr	r1, [pc, #436]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81033f6:	4313      	orrs	r3, r2
 81033f8:	610b      	str	r3, [r1, #16]
 81033fa:	e005      	b.n	8103408 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81033fc:	4b6b      	ldr	r3, [pc, #428]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81033fe:	691b      	ldr	r3, [r3, #16]
 8103400:	4a6a      	ldr	r2, [pc, #424]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103402:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103406:	6113      	str	r3, [r2, #16]
 8103408:	4b68      	ldr	r3, [pc, #416]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810340a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103416:	4965      	ldr	r1, [pc, #404]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103418:	4313      	orrs	r3, r2
 810341a:	670b      	str	r3, [r1, #112]	; 0x70
 810341c:	e004      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810341e:	7dfb      	ldrb	r3, [r7, #23]
 8103420:	75bb      	strb	r3, [r7, #22]
 8103422:	e001      	b.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103424:	7dfb      	ldrb	r3, [r7, #23]
 8103426:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	681b      	ldr	r3, [r3, #0]
 810342c:	f003 0301 	and.w	r3, r3, #1
 8103430:	2b00      	cmp	r3, #0
 8103432:	d07e      	beq.n	8103532 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103434:	687b      	ldr	r3, [r7, #4]
 8103436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103438:	2b28      	cmp	r3, #40	; 0x28
 810343a:	d867      	bhi.n	810350c <HAL_RCCEx_PeriphCLKConfig+0x830>
 810343c:	a201      	add	r2, pc, #4	; (adr r2, 8103444 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 810343e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103442:	bf00      	nop
 8103444:	08103513 	.word	0x08103513
 8103448:	0810350d 	.word	0x0810350d
 810344c:	0810350d 	.word	0x0810350d
 8103450:	0810350d 	.word	0x0810350d
 8103454:	0810350d 	.word	0x0810350d
 8103458:	0810350d 	.word	0x0810350d
 810345c:	0810350d 	.word	0x0810350d
 8103460:	0810350d 	.word	0x0810350d
 8103464:	081034e9 	.word	0x081034e9
 8103468:	0810350d 	.word	0x0810350d
 810346c:	0810350d 	.word	0x0810350d
 8103470:	0810350d 	.word	0x0810350d
 8103474:	0810350d 	.word	0x0810350d
 8103478:	0810350d 	.word	0x0810350d
 810347c:	0810350d 	.word	0x0810350d
 8103480:	0810350d 	.word	0x0810350d
 8103484:	081034fb 	.word	0x081034fb
 8103488:	0810350d 	.word	0x0810350d
 810348c:	0810350d 	.word	0x0810350d
 8103490:	0810350d 	.word	0x0810350d
 8103494:	0810350d 	.word	0x0810350d
 8103498:	0810350d 	.word	0x0810350d
 810349c:	0810350d 	.word	0x0810350d
 81034a0:	0810350d 	.word	0x0810350d
 81034a4:	08103513 	.word	0x08103513
 81034a8:	0810350d 	.word	0x0810350d
 81034ac:	0810350d 	.word	0x0810350d
 81034b0:	0810350d 	.word	0x0810350d
 81034b4:	0810350d 	.word	0x0810350d
 81034b8:	0810350d 	.word	0x0810350d
 81034bc:	0810350d 	.word	0x0810350d
 81034c0:	0810350d 	.word	0x0810350d
 81034c4:	08103513 	.word	0x08103513
 81034c8:	0810350d 	.word	0x0810350d
 81034cc:	0810350d 	.word	0x0810350d
 81034d0:	0810350d 	.word	0x0810350d
 81034d4:	0810350d 	.word	0x0810350d
 81034d8:	0810350d 	.word	0x0810350d
 81034dc:	0810350d 	.word	0x0810350d
 81034e0:	0810350d 	.word	0x0810350d
 81034e4:	08103513 	.word	0x08103513
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	3304      	adds	r3, #4
 81034ec:	2101      	movs	r1, #1
 81034ee:	4618      	mov	r0, r3
 81034f0:	f000 fdf2 	bl	81040d8 <RCCEx_PLL2_Config>
 81034f4:	4603      	mov	r3, r0
 81034f6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81034f8:	e00c      	b.n	8103514 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	3324      	adds	r3, #36	; 0x24
 81034fe:	2101      	movs	r1, #1
 8103500:	4618      	mov	r0, r3
 8103502:	f000 fe9b 	bl	810423c <RCCEx_PLL3_Config>
 8103506:	4603      	mov	r3, r0
 8103508:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810350a:	e003      	b.n	8103514 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810350c:	2301      	movs	r3, #1
 810350e:	75fb      	strb	r3, [r7, #23]
      break;
 8103510:	e000      	b.n	8103514 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8103512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103514:	7dfb      	ldrb	r3, [r7, #23]
 8103516:	2b00      	cmp	r3, #0
 8103518:	d109      	bne.n	810352e <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810351a:	4b24      	ldr	r3, [pc, #144]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810351e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103526:	4921      	ldr	r1, [pc, #132]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103528:	4313      	orrs	r3, r2
 810352a:	654b      	str	r3, [r1, #84]	; 0x54
 810352c:	e001      	b.n	8103532 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810352e:	7dfb      	ldrb	r3, [r7, #23]
 8103530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	f003 0302 	and.w	r3, r3, #2
 810353a:	2b00      	cmp	r3, #0
 810353c:	d03c      	beq.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103542:	2b05      	cmp	r3, #5
 8103544:	d820      	bhi.n	8103588 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8103546:	a201      	add	r2, pc, #4	; (adr r2, 810354c <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8103548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810354c:	0810358f 	.word	0x0810358f
 8103550:	08103565 	.word	0x08103565
 8103554:	08103577 	.word	0x08103577
 8103558:	0810358f 	.word	0x0810358f
 810355c:	0810358f 	.word	0x0810358f
 8103560:	0810358f 	.word	0x0810358f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	3304      	adds	r3, #4
 8103568:	2101      	movs	r1, #1
 810356a:	4618      	mov	r0, r3
 810356c:	f000 fdb4 	bl	81040d8 <RCCEx_PLL2_Config>
 8103570:	4603      	mov	r3, r0
 8103572:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103574:	e00c      	b.n	8103590 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103576:	687b      	ldr	r3, [r7, #4]
 8103578:	3324      	adds	r3, #36	; 0x24
 810357a:	2101      	movs	r1, #1
 810357c:	4618      	mov	r0, r3
 810357e:	f000 fe5d 	bl	810423c <RCCEx_PLL3_Config>
 8103582:	4603      	mov	r3, r0
 8103584:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103586:	e003      	b.n	8103590 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103588:	2301      	movs	r3, #1
 810358a:	75fb      	strb	r3, [r7, #23]
      break;
 810358c:	e000      	b.n	8103590 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810358e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103590:	7dfb      	ldrb	r3, [r7, #23]
 8103592:	2b00      	cmp	r3, #0
 8103594:	d10e      	bne.n	81035b4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103596:	4b05      	ldr	r3, [pc, #20]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810359a:	f023 0207 	bic.w	r2, r3, #7
 810359e:	687b      	ldr	r3, [r7, #4]
 81035a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81035a2:	4902      	ldr	r1, [pc, #8]	; (81035ac <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81035a4:	4313      	orrs	r3, r2
 81035a6:	654b      	str	r3, [r1, #84]	; 0x54
 81035a8:	e006      	b.n	81035b8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81035aa:	bf00      	nop
 81035ac:	58024400 	.word	0x58024400
 81035b0:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035b4:	7dfb      	ldrb	r3, [r7, #23]
 81035b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81035b8:	687b      	ldr	r3, [r7, #4]
 81035ba:	681b      	ldr	r3, [r3, #0]
 81035bc:	f003 0304 	and.w	r3, r3, #4
 81035c0:	2b00      	cmp	r3, #0
 81035c2:	d039      	beq.n	8103638 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81035ca:	2b05      	cmp	r3, #5
 81035cc:	d820      	bhi.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81035ce:	a201      	add	r2, pc, #4	; (adr r2, 81035d4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035d4:	08103617 	.word	0x08103617
 81035d8:	081035ed 	.word	0x081035ed
 81035dc:	081035ff 	.word	0x081035ff
 81035e0:	08103617 	.word	0x08103617
 81035e4:	08103617 	.word	0x08103617
 81035e8:	08103617 	.word	0x08103617
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	3304      	adds	r3, #4
 81035f0:	2101      	movs	r1, #1
 81035f2:	4618      	mov	r0, r3
 81035f4:	f000 fd70 	bl	81040d8 <RCCEx_PLL2_Config>
 81035f8:	4603      	mov	r3, r0
 81035fa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81035fc:	e00c      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81035fe:	687b      	ldr	r3, [r7, #4]
 8103600:	3324      	adds	r3, #36	; 0x24
 8103602:	2101      	movs	r1, #1
 8103604:	4618      	mov	r0, r3
 8103606:	f000 fe19 	bl	810423c <RCCEx_PLL3_Config>
 810360a:	4603      	mov	r3, r0
 810360c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 810360e:	e003      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103610:	2301      	movs	r3, #1
 8103612:	75fb      	strb	r3, [r7, #23]
      break;
 8103614:	e000      	b.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103618:	7dfb      	ldrb	r3, [r7, #23]
 810361a:	2b00      	cmp	r3, #0
 810361c:	d10a      	bne.n	8103634 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810361e:	4bb7      	ldr	r3, [pc, #732]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103622:	f023 0207 	bic.w	r2, r3, #7
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810362c:	49b3      	ldr	r1, [pc, #716]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810362e:	4313      	orrs	r3, r2
 8103630:	658b      	str	r3, [r1, #88]	; 0x58
 8103632:	e001      	b.n	8103638 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103634:	7dfb      	ldrb	r3, [r7, #23]
 8103636:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	f003 0320 	and.w	r3, r3, #32
 8103640:	2b00      	cmp	r3, #0
 8103642:	d04b      	beq.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103644:	687b      	ldr	r3, [r7, #4]
 8103646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810364a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810364e:	d02e      	beq.n	81036ae <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103654:	d828      	bhi.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810365a:	d02a      	beq.n	81036b2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810365c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103660:	d822      	bhi.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103662:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103666:	d026      	beq.n	81036b6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103668:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810366c:	d81c      	bhi.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810366e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103672:	d010      	beq.n	8103696 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103678:	d816      	bhi.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810367a:	2b00      	cmp	r3, #0
 810367c:	d01d      	beq.n	81036ba <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810367e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103682:	d111      	bne.n	81036a8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103684:	687b      	ldr	r3, [r7, #4]
 8103686:	3304      	adds	r3, #4
 8103688:	2100      	movs	r1, #0
 810368a:	4618      	mov	r0, r3
 810368c:	f000 fd24 	bl	81040d8 <RCCEx_PLL2_Config>
 8103690:	4603      	mov	r3, r0
 8103692:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103694:	e012      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	3324      	adds	r3, #36	; 0x24
 810369a:	2102      	movs	r1, #2
 810369c:	4618      	mov	r0, r3
 810369e:	f000 fdcd 	bl	810423c <RCCEx_PLL3_Config>
 81036a2:	4603      	mov	r3, r0
 81036a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81036a6:	e009      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81036a8:	2301      	movs	r3, #1
 81036aa:	75fb      	strb	r3, [r7, #23]
      break;
 81036ac:	e006      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81036ae:	bf00      	nop
 81036b0:	e004      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81036b2:	bf00      	nop
 81036b4:	e002      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81036b6:	bf00      	nop
 81036b8:	e000      	b.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81036ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81036bc:	7dfb      	ldrb	r3, [r7, #23]
 81036be:	2b00      	cmp	r3, #0
 81036c0:	d10a      	bne.n	81036d8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81036c2:	4b8e      	ldr	r3, [pc, #568]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81036c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81036c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81036ca:	687b      	ldr	r3, [r7, #4]
 81036cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81036d0:	498a      	ldr	r1, [pc, #552]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81036d2:	4313      	orrs	r3, r2
 81036d4:	654b      	str	r3, [r1, #84]	; 0x54
 81036d6:	e001      	b.n	81036dc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036d8:	7dfb      	ldrb	r3, [r7, #23]
 81036da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81036dc:	687b      	ldr	r3, [r7, #4]
 81036de:	681b      	ldr	r3, [r3, #0]
 81036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81036e4:	2b00      	cmp	r3, #0
 81036e6:	d04b      	beq.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81036e8:	687b      	ldr	r3, [r7, #4]
 81036ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81036ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81036f2:	d02e      	beq.n	8103752 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81036f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81036f8:	d828      	bhi.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81036fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81036fe:	d02a      	beq.n	8103756 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103704:	d822      	bhi.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810370a:	d026      	beq.n	810375a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 810370c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103710:	d81c      	bhi.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103716:	d010      	beq.n	810373a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810371c:	d816      	bhi.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810371e:	2b00      	cmp	r3, #0
 8103720:	d01d      	beq.n	810375e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103726:	d111      	bne.n	810374c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	3304      	adds	r3, #4
 810372c:	2100      	movs	r1, #0
 810372e:	4618      	mov	r0, r3
 8103730:	f000 fcd2 	bl	81040d8 <RCCEx_PLL2_Config>
 8103734:	4603      	mov	r3, r0
 8103736:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103738:	e012      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810373a:	687b      	ldr	r3, [r7, #4]
 810373c:	3324      	adds	r3, #36	; 0x24
 810373e:	2102      	movs	r1, #2
 8103740:	4618      	mov	r0, r3
 8103742:	f000 fd7b 	bl	810423c <RCCEx_PLL3_Config>
 8103746:	4603      	mov	r3, r0
 8103748:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810374a:	e009      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810374c:	2301      	movs	r3, #1
 810374e:	75fb      	strb	r3, [r7, #23]
      break;
 8103750:	e006      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103752:	bf00      	nop
 8103754:	e004      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103756:	bf00      	nop
 8103758:	e002      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810375a:	bf00      	nop
 810375c:	e000      	b.n	8103760 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810375e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103760:	7dfb      	ldrb	r3, [r7, #23]
 8103762:	2b00      	cmp	r3, #0
 8103764:	d10a      	bne.n	810377c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103766:	4b65      	ldr	r3, [pc, #404]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810376a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810376e:	687b      	ldr	r3, [r7, #4]
 8103770:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103774:	4961      	ldr	r1, [pc, #388]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103776:	4313      	orrs	r3, r2
 8103778:	658b      	str	r3, [r1, #88]	; 0x58
 810377a:	e001      	b.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810377c:	7dfb      	ldrb	r3, [r7, #23]
 810377e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	681b      	ldr	r3, [r3, #0]
 8103784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103788:	2b00      	cmp	r3, #0
 810378a:	d04b      	beq.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810378c:	687b      	ldr	r3, [r7, #4]
 810378e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103792:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103796:	d02e      	beq.n	81037f6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103798:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810379c:	d828      	bhi.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810379e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81037a2:	d02a      	beq.n	81037fa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81037a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81037a8:	d822      	bhi.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81037aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81037ae:	d026      	beq.n	81037fe <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81037b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81037b4:	d81c      	bhi.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81037b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81037ba:	d010      	beq.n	81037de <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81037bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81037c0:	d816      	bhi.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81037c2:	2b00      	cmp	r3, #0
 81037c4:	d01d      	beq.n	8103802 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81037c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81037ca:	d111      	bne.n	81037f0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	3304      	adds	r3, #4
 81037d0:	2100      	movs	r1, #0
 81037d2:	4618      	mov	r0, r3
 81037d4:	f000 fc80 	bl	81040d8 <RCCEx_PLL2_Config>
 81037d8:	4603      	mov	r3, r0
 81037da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81037dc:	e012      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81037de:	687b      	ldr	r3, [r7, #4]
 81037e0:	3324      	adds	r3, #36	; 0x24
 81037e2:	2102      	movs	r1, #2
 81037e4:	4618      	mov	r0, r3
 81037e6:	f000 fd29 	bl	810423c <RCCEx_PLL3_Config>
 81037ea:	4603      	mov	r3, r0
 81037ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81037ee:	e009      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037f0:	2301      	movs	r3, #1
 81037f2:	75fb      	strb	r3, [r7, #23]
      break;
 81037f4:	e006      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81037f6:	bf00      	nop
 81037f8:	e004      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81037fa:	bf00      	nop
 81037fc:	e002      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81037fe:	bf00      	nop
 8103800:	e000      	b.n	8103804 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103804:	7dfb      	ldrb	r3, [r7, #23]
 8103806:	2b00      	cmp	r3, #0
 8103808:	d10a      	bne.n	8103820 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810380a:	4b3c      	ldr	r3, [pc, #240]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810380e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103812:	687b      	ldr	r3, [r7, #4]
 8103814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103818:	4938      	ldr	r1, [pc, #224]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810381a:	4313      	orrs	r3, r2
 810381c:	658b      	str	r3, [r1, #88]	; 0x58
 810381e:	e001      	b.n	8103824 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103820:	7dfb      	ldrb	r3, [r7, #23]
 8103822:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103824:	687b      	ldr	r3, [r7, #4]
 8103826:	681b      	ldr	r3, [r3, #0]
 8103828:	f003 0308 	and.w	r3, r3, #8
 810382c:	2b00      	cmp	r3, #0
 810382e:	d01a      	beq.n	8103866 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810383a:	d10a      	bne.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	3324      	adds	r3, #36	; 0x24
 8103840:	2102      	movs	r1, #2
 8103842:	4618      	mov	r0, r3
 8103844:	f000 fcfa 	bl	810423c <RCCEx_PLL3_Config>
 8103848:	4603      	mov	r3, r0
 810384a:	2b00      	cmp	r3, #0
 810384c:	d001      	beq.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 810384e:	2301      	movs	r3, #1
 8103850:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103852:	4b2a      	ldr	r3, [pc, #168]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103856:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810385a:	687b      	ldr	r3, [r7, #4]
 810385c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103860:	4926      	ldr	r1, [pc, #152]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103862:	4313      	orrs	r3, r2
 8103864:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103866:	687b      	ldr	r3, [r7, #4]
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	f003 0310 	and.w	r3, r3, #16
 810386e:	2b00      	cmp	r3, #0
 8103870:	d01a      	beq.n	81038a8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103878:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810387c:	d10a      	bne.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	3324      	adds	r3, #36	; 0x24
 8103882:	2102      	movs	r1, #2
 8103884:	4618      	mov	r0, r3
 8103886:	f000 fcd9 	bl	810423c <RCCEx_PLL3_Config>
 810388a:	4603      	mov	r3, r0
 810388c:	2b00      	cmp	r3, #0
 810388e:	d001      	beq.n	8103894 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103890:	2301      	movs	r3, #1
 8103892:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103894:	4b19      	ldr	r3, [pc, #100]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103898:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81038a2:	4916      	ldr	r1, [pc, #88]	; (81038fc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81038a4:	4313      	orrs	r3, r2
 81038a6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81038b0:	2b00      	cmp	r3, #0
 81038b2:	d036      	beq.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81038ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81038be:	d01f      	beq.n	8103900 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 81038c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81038c4:	d817      	bhi.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81038c6:	2b00      	cmp	r3, #0
 81038c8:	d003      	beq.n	81038d2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81038ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81038ce:	d009      	beq.n	81038e4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81038d0:	e011      	b.n	81038f6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	3304      	adds	r3, #4
 81038d6:	2100      	movs	r1, #0
 81038d8:	4618      	mov	r0, r3
 81038da:	f000 fbfd 	bl	81040d8 <RCCEx_PLL2_Config>
 81038de:	4603      	mov	r3, r0
 81038e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81038e2:	e00e      	b.n	8103902 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81038e4:	687b      	ldr	r3, [r7, #4]
 81038e6:	3324      	adds	r3, #36	; 0x24
 81038e8:	2102      	movs	r1, #2
 81038ea:	4618      	mov	r0, r3
 81038ec:	f000 fca6 	bl	810423c <RCCEx_PLL3_Config>
 81038f0:	4603      	mov	r3, r0
 81038f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81038f4:	e005      	b.n	8103902 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81038f6:	2301      	movs	r3, #1
 81038f8:	75fb      	strb	r3, [r7, #23]
      break;
 81038fa:	e002      	b.n	8103902 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81038fc:	58024400 	.word	0x58024400
      break;
 8103900:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103902:	7dfb      	ldrb	r3, [r7, #23]
 8103904:	2b00      	cmp	r3, #0
 8103906:	d10a      	bne.n	810391e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103908:	4b93      	ldr	r3, [pc, #588]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810390a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810390c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103916:	4990      	ldr	r1, [pc, #576]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103918:	4313      	orrs	r3, r2
 810391a:	658b      	str	r3, [r1, #88]	; 0x58
 810391c:	e001      	b.n	8103922 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810391e:	7dfb      	ldrb	r3, [r7, #23]
 8103920:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	681b      	ldr	r3, [r3, #0]
 8103926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810392a:	2b00      	cmp	r3, #0
 810392c:	d033      	beq.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103934:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103938:	d01c      	beq.n	8103974 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810393a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810393e:	d816      	bhi.n	810396e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8103940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103944:	d003      	beq.n	810394e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8103946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810394a:	d007      	beq.n	810395c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 810394c:	e00f      	b.n	810396e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810394e:	4b82      	ldr	r3, [pc, #520]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103952:	4a81      	ldr	r2, [pc, #516]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103958:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810395a:	e00c      	b.n	8103976 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810395c:	687b      	ldr	r3, [r7, #4]
 810395e:	3324      	adds	r3, #36	; 0x24
 8103960:	2101      	movs	r1, #1
 8103962:	4618      	mov	r0, r3
 8103964:	f000 fc6a 	bl	810423c <RCCEx_PLL3_Config>
 8103968:	4603      	mov	r3, r0
 810396a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810396c:	e003      	b.n	8103976 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810396e:	2301      	movs	r3, #1
 8103970:	75fb      	strb	r3, [r7, #23]
      break;
 8103972:	e000      	b.n	8103976 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8103974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103976:	7dfb      	ldrb	r3, [r7, #23]
 8103978:	2b00      	cmp	r3, #0
 810397a:	d10a      	bne.n	8103992 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810397c:	4b76      	ldr	r3, [pc, #472]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103980:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810398a:	4973      	ldr	r1, [pc, #460]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810398c:	4313      	orrs	r3, r2
 810398e:	654b      	str	r3, [r1, #84]	; 0x54
 8103990:	e001      	b.n	8103996 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103992:	7dfb      	ldrb	r3, [r7, #23]
 8103994:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810399e:	2b00      	cmp	r3, #0
 81039a0:	d029      	beq.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039a6:	2b00      	cmp	r3, #0
 81039a8:	d003      	beq.n	81039b2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 81039aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81039ae:	d007      	beq.n	81039c0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 81039b0:	e00f      	b.n	81039d2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039b2:	4b69      	ldr	r3, [pc, #420]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039b6:	4a68      	ldr	r2, [pc, #416]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81039be:	e00b      	b.n	81039d8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81039c0:	687b      	ldr	r3, [r7, #4]
 81039c2:	3304      	adds	r3, #4
 81039c4:	2102      	movs	r1, #2
 81039c6:	4618      	mov	r0, r3
 81039c8:	f000 fb86 	bl	81040d8 <RCCEx_PLL2_Config>
 81039cc:	4603      	mov	r3, r0
 81039ce:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81039d0:	e002      	b.n	81039d8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81039d2:	2301      	movs	r3, #1
 81039d4:	75fb      	strb	r3, [r7, #23]
      break;
 81039d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039d8:	7dfb      	ldrb	r3, [r7, #23]
 81039da:	2b00      	cmp	r3, #0
 81039dc:	d109      	bne.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81039de:	4b5e      	ldr	r3, [pc, #376]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039ea:	495b      	ldr	r1, [pc, #364]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81039ec:	4313      	orrs	r3, r2
 81039ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 81039f0:	e001      	b.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039f2:	7dfb      	ldrb	r3, [r7, #23]
 81039f4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	681b      	ldr	r3, [r3, #0]
 81039fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81039fe:	2b00      	cmp	r3, #0
 8103a00:	d00a      	beq.n	8103a18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8103a02:	687b      	ldr	r3, [r7, #4]
 8103a04:	3324      	adds	r3, #36	; 0x24
 8103a06:	2102      	movs	r1, #2
 8103a08:	4618      	mov	r0, r3
 8103a0a:	f000 fc17 	bl	810423c <RCCEx_PLL3_Config>
 8103a0e:	4603      	mov	r3, r0
 8103a10:	2b00      	cmp	r3, #0
 8103a12:	d001      	beq.n	8103a18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8103a14:	2301      	movs	r3, #1
 8103a16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	d030      	beq.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103a28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103a2c:	d017      	beq.n	8103a5e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8103a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103a32:	d811      	bhi.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103a38:	d013      	beq.n	8103a62 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8103a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103a3e:	d80b      	bhi.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d010      	beq.n	8103a66 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8103a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a48:	d106      	bne.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a4a:	4b43      	ldr	r3, [pc, #268]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a4e:	4a42      	ldr	r2, [pc, #264]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8103a56:	e007      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a58:	2301      	movs	r3, #1
 8103a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8103a5c:	e004      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103a5e:	bf00      	nop
 8103a60:	e002      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103a62:	bf00      	nop
 8103a64:	e000      	b.n	8103a68 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8103a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a68:	7dfb      	ldrb	r3, [r7, #23]
 8103a6a:	2b00      	cmp	r3, #0
 8103a6c:	d109      	bne.n	8103a82 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103a6e:	4b3a      	ldr	r3, [pc, #232]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8103a7a:	4937      	ldr	r1, [pc, #220]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a7c:	4313      	orrs	r3, r2
 8103a7e:	654b      	str	r3, [r1, #84]	; 0x54
 8103a80:	e001      	b.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a82:	7dfb      	ldrb	r3, [r7, #23]
 8103a84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103a86:	687b      	ldr	r3, [r7, #4]
 8103a88:	681b      	ldr	r3, [r3, #0]
 8103a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103a8e:	2b00      	cmp	r3, #0
 8103a90:	d008      	beq.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103a92:	4b31      	ldr	r3, [pc, #196]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a9e:	492e      	ldr	r1, [pc, #184]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103aa0:	4313      	orrs	r3, r2
 8103aa2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103aa4:	687b      	ldr	r3, [r7, #4]
 8103aa6:	681b      	ldr	r3, [r3, #0]
 8103aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103aac:	2b00      	cmp	r3, #0
 8103aae:	d009      	beq.n	8103ac4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103ab0:	4b29      	ldr	r3, [pc, #164]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ab2:	691b      	ldr	r3, [r3, #16]
 8103ab4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103abe:	4926      	ldr	r1, [pc, #152]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ac0:	4313      	orrs	r3, r2
 8103ac2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103ac4:	687b      	ldr	r3, [r7, #4]
 8103ac6:	681b      	ldr	r3, [r3, #0]
 8103ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103acc:	2b00      	cmp	r3, #0
 8103ace:	d008      	beq.n	8103ae2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103ad0:	4b21      	ldr	r3, [pc, #132]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ad4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8103ad8:	687b      	ldr	r3, [r7, #4]
 8103ada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103adc:	491e      	ldr	r1, [pc, #120]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ade:	4313      	orrs	r3, r2
 8103ae0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103ae2:	687b      	ldr	r3, [r7, #4]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8103aea:	2b00      	cmp	r3, #0
 8103aec:	d00d      	beq.n	8103b0a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103aee:	4b1a      	ldr	r3, [pc, #104]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103af0:	691b      	ldr	r3, [r3, #16]
 8103af2:	4a19      	ldr	r2, [pc, #100]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103af4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103af8:	6113      	str	r3, [r2, #16]
 8103afa:	4b17      	ldr	r3, [pc, #92]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103afc:	691a      	ldr	r2, [r3, #16]
 8103afe:	687b      	ldr	r3, [r7, #4]
 8103b00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8103b04:	4914      	ldr	r1, [pc, #80]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b06:	4313      	orrs	r3, r2
 8103b08:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103b0a:	687b      	ldr	r3, [r7, #4]
 8103b0c:	681b      	ldr	r3, [r3, #0]
 8103b0e:	2b00      	cmp	r3, #0
 8103b10:	da08      	bge.n	8103b24 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103b12:	4b11      	ldr	r3, [pc, #68]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103b1a:	687b      	ldr	r3, [r7, #4]
 8103b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b1e:	490e      	ldr	r1, [pc, #56]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b20:	4313      	orrs	r3, r2
 8103b22:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103b2c:	2b00      	cmp	r3, #0
 8103b2e:	d009      	beq.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103b30:	4b09      	ldr	r3, [pc, #36]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103b34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103b3e:	4906      	ldr	r1, [pc, #24]	; (8103b58 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103b40:	4313      	orrs	r3, r2
 8103b42:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8103b44:	7dbb      	ldrb	r3, [r7, #22]
 8103b46:	2b00      	cmp	r3, #0
 8103b48:	d101      	bne.n	8103b4e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8103b4a:	2300      	movs	r3, #0
 8103b4c:	e000      	b.n	8103b50 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8103b4e:	2301      	movs	r3, #1
}
 8103b50:	4618      	mov	r0, r3
 8103b52:	3718      	adds	r7, #24
 8103b54:	46bd      	mov	sp, r7
 8103b56:	bd80      	pop	{r7, pc}
 8103b58:	58024400 	.word	0x58024400

08103b5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103b5c:	b580      	push	{r7, lr}
 8103b5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103b60:	f7ff f85e 	bl	8102c20 <HAL_RCC_GetHCLKFreq>
 8103b64:	4602      	mov	r2, r0
 8103b66:	4b06      	ldr	r3, [pc, #24]	; (8103b80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103b68:	6a1b      	ldr	r3, [r3, #32]
 8103b6a:	091b      	lsrs	r3, r3, #4
 8103b6c:	f003 0307 	and.w	r3, r3, #7
 8103b70:	4904      	ldr	r1, [pc, #16]	; (8103b84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103b72:	5ccb      	ldrb	r3, [r1, r3]
 8103b74:	f003 031f 	and.w	r3, r3, #31
 8103b78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103b7c:	4618      	mov	r0, r3
 8103b7e:	bd80      	pop	{r7, pc}
 8103b80:	58024400 	.word	0x58024400
 8103b84:	0810b460 	.word	0x0810b460

08103b88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8103b88:	b480      	push	{r7}
 8103b8a:	b089      	sub	sp, #36	; 0x24
 8103b8c:	af00      	add	r7, sp, #0
 8103b8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103b90:	4ba1      	ldr	r3, [pc, #644]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b94:	f003 0303 	and.w	r3, r3, #3
 8103b98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8103b9a:	4b9f      	ldr	r3, [pc, #636]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b9e:	0b1b      	lsrs	r3, r3, #12
 8103ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103ba4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103ba6:	4b9c      	ldr	r3, [pc, #624]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103baa:	091b      	lsrs	r3, r3, #4
 8103bac:	f003 0301 	and.w	r3, r3, #1
 8103bb0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103bb2:	4b99      	ldr	r3, [pc, #612]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bb6:	08db      	lsrs	r3, r3, #3
 8103bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103bbc:	693a      	ldr	r2, [r7, #16]
 8103bbe:	fb02 f303 	mul.w	r3, r2, r3
 8103bc2:	ee07 3a90 	vmov	s15, r3
 8103bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103bce:	697b      	ldr	r3, [r7, #20]
 8103bd0:	2b00      	cmp	r3, #0
 8103bd2:	f000 8111 	beq.w	8103df8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103bd6:	69bb      	ldr	r3, [r7, #24]
 8103bd8:	2b02      	cmp	r3, #2
 8103bda:	f000 8083 	beq.w	8103ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103bde:	69bb      	ldr	r3, [r7, #24]
 8103be0:	2b02      	cmp	r3, #2
 8103be2:	f200 80a1 	bhi.w	8103d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103be6:	69bb      	ldr	r3, [r7, #24]
 8103be8:	2b00      	cmp	r3, #0
 8103bea:	d003      	beq.n	8103bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103bec:	69bb      	ldr	r3, [r7, #24]
 8103bee:	2b01      	cmp	r3, #1
 8103bf0:	d056      	beq.n	8103ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103bf2:	e099      	b.n	8103d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103bf4:	4b88      	ldr	r3, [pc, #544]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103bf6:	681b      	ldr	r3, [r3, #0]
 8103bf8:	f003 0320 	and.w	r3, r3, #32
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d02d      	beq.n	8103c5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103c00:	4b85      	ldr	r3, [pc, #532]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	08db      	lsrs	r3, r3, #3
 8103c06:	f003 0303 	and.w	r3, r3, #3
 8103c0a:	4a84      	ldr	r2, [pc, #528]	; (8103e1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8103c10:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c12:	68bb      	ldr	r3, [r7, #8]
 8103c14:	ee07 3a90 	vmov	s15, r3
 8103c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c1c:	697b      	ldr	r3, [r7, #20]
 8103c1e:	ee07 3a90 	vmov	s15, r3
 8103c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c2a:	4b7b      	ldr	r3, [pc, #492]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c32:	ee07 3a90 	vmov	s15, r3
 8103c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103c5a:	e087      	b.n	8103d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103c5c:	697b      	ldr	r3, [r7, #20]
 8103c5e:	ee07 3a90 	vmov	s15, r3
 8103c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103c66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103e24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103c6e:	4b6a      	ldr	r3, [pc, #424]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103c76:	ee07 3a90 	vmov	s15, r3
 8103c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8103c82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103c9e:	e065      	b.n	8103d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103ca0:	697b      	ldr	r3, [r7, #20]
 8103ca2:	ee07 3a90 	vmov	s15, r3
 8103ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103caa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103cb2:	4b59      	ldr	r3, [pc, #356]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103cba:	ee07 3a90 	vmov	s15, r3
 8103cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8103cc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103ce2:	e043      	b.n	8103d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103ce4:	697b      	ldr	r3, [r7, #20]
 8103ce6:	ee07 3a90 	vmov	s15, r3
 8103cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103cee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103cf6:	4b48      	ldr	r3, [pc, #288]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103cfe:	ee07 3a90 	vmov	s15, r3
 8103d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8103d0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103d26:	e021      	b.n	8103d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103d28:	697b      	ldr	r3, [r7, #20]
 8103d2a:	ee07 3a90 	vmov	s15, r3
 8103d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103d3a:	4b37      	ldr	r3, [pc, #220]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103d42:	ee07 3a90 	vmov	s15, r3
 8103d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103d4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103d6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8103d6c:	4b2a      	ldr	r3, [pc, #168]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d70:	0a5b      	lsrs	r3, r3, #9
 8103d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103d76:	ee07 3a90 	vmov	s15, r3
 8103d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8103d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103d92:	ee17 2a90 	vmov	r2, s15
 8103d96:	687b      	ldr	r3, [r7, #4]
 8103d98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8103d9a:	4b1f      	ldr	r3, [pc, #124]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103d9e:	0c1b      	lsrs	r3, r3, #16
 8103da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103da4:	ee07 3a90 	vmov	s15, r3
 8103da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8103db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103dc0:	ee17 2a90 	vmov	r2, s15
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8103dc8:	4b13      	ldr	r3, [pc, #76]	; (8103e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103dcc:	0e1b      	lsrs	r3, r3, #24
 8103dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103dd2:	ee07 3a90 	vmov	s15, r3
 8103dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8103de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103dee:	ee17 2a90 	vmov	r2, s15
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8103df6:	e008      	b.n	8103e0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103df8:	687b      	ldr	r3, [r7, #4]
 8103dfa:	2200      	movs	r2, #0
 8103dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	2200      	movs	r2, #0
 8103e02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103e04:	687b      	ldr	r3, [r7, #4]
 8103e06:	2200      	movs	r2, #0
 8103e08:	609a      	str	r2, [r3, #8]
}
 8103e0a:	bf00      	nop
 8103e0c:	3724      	adds	r7, #36	; 0x24
 8103e0e:	46bd      	mov	sp, r7
 8103e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e14:	4770      	bx	lr
 8103e16:	bf00      	nop
 8103e18:	58024400 	.word	0x58024400
 8103e1c:	03d09000 	.word	0x03d09000
 8103e20:	46000000 	.word	0x46000000
 8103e24:	4c742400 	.word	0x4c742400
 8103e28:	4a742400 	.word	0x4a742400
 8103e2c:	4af42400 	.word	0x4af42400

08103e30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8103e30:	b480      	push	{r7}
 8103e32:	b089      	sub	sp, #36	; 0x24
 8103e34:	af00      	add	r7, sp, #0
 8103e36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103e38:	4ba1      	ldr	r3, [pc, #644]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e3c:	f003 0303 	and.w	r3, r3, #3
 8103e40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8103e42:	4b9f      	ldr	r3, [pc, #636]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103e46:	0d1b      	lsrs	r3, r3, #20
 8103e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103e4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8103e4e:	4b9c      	ldr	r3, [pc, #624]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e52:	0a1b      	lsrs	r3, r3, #8
 8103e54:	f003 0301 	and.w	r3, r3, #1
 8103e58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8103e5a:	4b99      	ldr	r3, [pc, #612]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103e5e:	08db      	lsrs	r3, r3, #3
 8103e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103e64:	693a      	ldr	r2, [r7, #16]
 8103e66:	fb02 f303 	mul.w	r3, r2, r3
 8103e6a:	ee07 3a90 	vmov	s15, r3
 8103e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103e76:	697b      	ldr	r3, [r7, #20]
 8103e78:	2b00      	cmp	r3, #0
 8103e7a:	f000 8111 	beq.w	81040a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8103e7e:	69bb      	ldr	r3, [r7, #24]
 8103e80:	2b02      	cmp	r3, #2
 8103e82:	f000 8083 	beq.w	8103f8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8103e86:	69bb      	ldr	r3, [r7, #24]
 8103e88:	2b02      	cmp	r3, #2
 8103e8a:	f200 80a1 	bhi.w	8103fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8103e8e:	69bb      	ldr	r3, [r7, #24]
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d003      	beq.n	8103e9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8103e94:	69bb      	ldr	r3, [r7, #24]
 8103e96:	2b01      	cmp	r3, #1
 8103e98:	d056      	beq.n	8103f48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8103e9a:	e099      	b.n	8103fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103e9c:	4b88      	ldr	r3, [pc, #544]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103e9e:	681b      	ldr	r3, [r3, #0]
 8103ea0:	f003 0320 	and.w	r3, r3, #32
 8103ea4:	2b00      	cmp	r3, #0
 8103ea6:	d02d      	beq.n	8103f04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103ea8:	4b85      	ldr	r3, [pc, #532]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	08db      	lsrs	r3, r3, #3
 8103eae:	f003 0303 	and.w	r3, r3, #3
 8103eb2:	4a84      	ldr	r2, [pc, #528]	; (81040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8103eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8103eb8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103eba:	68bb      	ldr	r3, [r7, #8]
 8103ebc:	ee07 3a90 	vmov	s15, r3
 8103ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ec4:	697b      	ldr	r3, [r7, #20]
 8103ec6:	ee07 3a90 	vmov	s15, r3
 8103eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ed2:	4b7b      	ldr	r3, [pc, #492]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103eda:	ee07 3a90 	vmov	s15, r3
 8103ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ee6:	eddf 5a78 	vldr	s11, [pc, #480]	; 81040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103efe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103f02:	e087      	b.n	8104014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103f04:	697b      	ldr	r3, [r7, #20]
 8103f06:	ee07 3a90 	vmov	s15, r3
 8103f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81040cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f16:	4b6a      	ldr	r3, [pc, #424]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f1e:	ee07 3a90 	vmov	s15, r3
 8103f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 81040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f46:	e065      	b.n	8104014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103f48:	697b      	ldr	r3, [r7, #20]
 8103f4a:	ee07 3a90 	vmov	s15, r3
 8103f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81040d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f5a:	4b59      	ldr	r3, [pc, #356]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f62:	ee07 3a90 	vmov	s15, r3
 8103f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 81040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103f8a:	e043      	b.n	8104014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103f8c:	697b      	ldr	r3, [r7, #20]
 8103f8e:	ee07 3a90 	vmov	s15, r3
 8103f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81040d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8103f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f9e:	4b48      	ldr	r3, [pc, #288]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103fa6:	ee07 3a90 	vmov	s15, r3
 8103faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8103fb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 81040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103fca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103fce:	e021      	b.n	8104014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103fd0:	697b      	ldr	r3, [r7, #20]
 8103fd2:	ee07 3a90 	vmov	s15, r3
 8103fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81040d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103fe2:	4b37      	ldr	r3, [pc, #220]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103fea:	ee07 3a90 	vmov	s15, r3
 8103fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ff6:	eddf 5a34 	vldr	s11, [pc, #208]	; 81040c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810400a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810400e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104012:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104014:	4b2a      	ldr	r3, [pc, #168]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104018:	0a5b      	lsrs	r3, r3, #9
 810401a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810401e:	ee07 3a90 	vmov	s15, r3
 8104022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810402a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810402e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810403a:	ee17 2a90 	vmov	r2, s15
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104042:	4b1f      	ldr	r3, [pc, #124]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104046:	0c1b      	lsrs	r3, r3, #16
 8104048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810404c:	ee07 3a90 	vmov	s15, r3
 8104050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104058:	ee37 7a87 	vadd.f32	s14, s15, s14
 810405c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104068:	ee17 2a90 	vmov	r2, s15
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104070:	4b13      	ldr	r3, [pc, #76]	; (81040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104074:	0e1b      	lsrs	r3, r3, #24
 8104076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810407a:	ee07 3a90 	vmov	s15, r3
 810407e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104086:	ee37 7a87 	vadd.f32	s14, s15, s14
 810408a:	edd7 6a07 	vldr	s13, [r7, #28]
 810408e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104096:	ee17 2a90 	vmov	r2, s15
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810409e:	e008      	b.n	81040b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81040a0:	687b      	ldr	r3, [r7, #4]
 81040a2:	2200      	movs	r2, #0
 81040a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81040a6:	687b      	ldr	r3, [r7, #4]
 81040a8:	2200      	movs	r2, #0
 81040aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	2200      	movs	r2, #0
 81040b0:	609a      	str	r2, [r3, #8]
}
 81040b2:	bf00      	nop
 81040b4:	3724      	adds	r7, #36	; 0x24
 81040b6:	46bd      	mov	sp, r7
 81040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040bc:	4770      	bx	lr
 81040be:	bf00      	nop
 81040c0:	58024400 	.word	0x58024400
 81040c4:	03d09000 	.word	0x03d09000
 81040c8:	46000000 	.word	0x46000000
 81040cc:	4c742400 	.word	0x4c742400
 81040d0:	4a742400 	.word	0x4a742400
 81040d4:	4af42400 	.word	0x4af42400

081040d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81040d8:	b580      	push	{r7, lr}
 81040da:	b084      	sub	sp, #16
 81040dc:	af00      	add	r7, sp, #0
 81040de:	6078      	str	r0, [r7, #4]
 81040e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81040e2:	2300      	movs	r3, #0
 81040e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81040e6:	4b54      	ldr	r3, [pc, #336]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81040ea:	f003 0303 	and.w	r3, r3, #3
 81040ee:	2b03      	cmp	r3, #3
 81040f0:	d101      	bne.n	81040f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81040f2:	2301      	movs	r3, #1
 81040f4:	e09b      	b.n	810422e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81040f6:	4b50      	ldr	r3, [pc, #320]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81040f8:	681b      	ldr	r3, [r3, #0]
 81040fa:	4a4f      	ldr	r2, [pc, #316]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81040fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104102:	f7fe f841 	bl	8102188 <HAL_GetTick>
 8104106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104108:	e008      	b.n	810411c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810410a:	f7fe f83d 	bl	8102188 <HAL_GetTick>
 810410e:	4602      	mov	r2, r0
 8104110:	68bb      	ldr	r3, [r7, #8]
 8104112:	1ad3      	subs	r3, r2, r3
 8104114:	2b02      	cmp	r3, #2
 8104116:	d901      	bls.n	810411c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104118:	2303      	movs	r3, #3
 810411a:	e088      	b.n	810422e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810411c:	4b46      	ldr	r3, [pc, #280]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104124:	2b00      	cmp	r3, #0
 8104126:	d1f0      	bne.n	810410a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104128:	4b43      	ldr	r3, [pc, #268]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 810412a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810412c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	681b      	ldr	r3, [r3, #0]
 8104134:	031b      	lsls	r3, r3, #12
 8104136:	4940      	ldr	r1, [pc, #256]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 8104138:	4313      	orrs	r3, r2
 810413a:	628b      	str	r3, [r1, #40]	; 0x28
 810413c:	687b      	ldr	r3, [r7, #4]
 810413e:	685b      	ldr	r3, [r3, #4]
 8104140:	3b01      	subs	r3, #1
 8104142:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104146:	687b      	ldr	r3, [r7, #4]
 8104148:	689b      	ldr	r3, [r3, #8]
 810414a:	3b01      	subs	r3, #1
 810414c:	025b      	lsls	r3, r3, #9
 810414e:	b29b      	uxth	r3, r3
 8104150:	431a      	orrs	r2, r3
 8104152:	687b      	ldr	r3, [r7, #4]
 8104154:	68db      	ldr	r3, [r3, #12]
 8104156:	3b01      	subs	r3, #1
 8104158:	041b      	lsls	r3, r3, #16
 810415a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810415e:	431a      	orrs	r2, r3
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	691b      	ldr	r3, [r3, #16]
 8104164:	3b01      	subs	r3, #1
 8104166:	061b      	lsls	r3, r3, #24
 8104168:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810416c:	4932      	ldr	r1, [pc, #200]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 810416e:	4313      	orrs	r3, r2
 8104170:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104172:	4b31      	ldr	r3, [pc, #196]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 8104174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	695b      	ldr	r3, [r3, #20]
 810417e:	492e      	ldr	r1, [pc, #184]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 8104180:	4313      	orrs	r3, r2
 8104182:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104184:	4b2c      	ldr	r3, [pc, #176]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 8104186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104188:	f023 0220 	bic.w	r2, r3, #32
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	699b      	ldr	r3, [r3, #24]
 8104190:	4929      	ldr	r1, [pc, #164]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 8104192:	4313      	orrs	r3, r2
 8104194:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104196:	4b28      	ldr	r3, [pc, #160]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 8104198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810419a:	4a27      	ldr	r2, [pc, #156]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 810419c:	f023 0310 	bic.w	r3, r3, #16
 81041a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 81041a2:	4b25      	ldr	r3, [pc, #148]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81041a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81041aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81041ae:	687a      	ldr	r2, [r7, #4]
 81041b0:	69d2      	ldr	r2, [r2, #28]
 81041b2:	00d2      	lsls	r2, r2, #3
 81041b4:	4920      	ldr	r1, [pc, #128]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041b6:	4313      	orrs	r3, r2
 81041b8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81041ba:	4b1f      	ldr	r3, [pc, #124]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041be:	4a1e      	ldr	r2, [pc, #120]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041c0:	f043 0310 	orr.w	r3, r3, #16
 81041c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81041c6:	683b      	ldr	r3, [r7, #0]
 81041c8:	2b00      	cmp	r3, #0
 81041ca:	d106      	bne.n	81041da <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81041cc:	4b1a      	ldr	r3, [pc, #104]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041d0:	4a19      	ldr	r2, [pc, #100]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81041d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81041d8:	e00f      	b.n	81041fa <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81041da:	683b      	ldr	r3, [r7, #0]
 81041dc:	2b01      	cmp	r3, #1
 81041de:	d106      	bne.n	81041ee <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81041e0:	4b15      	ldr	r3, [pc, #84]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041e4:	4a14      	ldr	r2, [pc, #80]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81041ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 81041ec:	e005      	b.n	81041fa <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81041ee:	4b12      	ldr	r3, [pc, #72]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81041f2:	4a11      	ldr	r2, [pc, #68]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81041f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81041fa:	4b0f      	ldr	r3, [pc, #60]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	4a0e      	ldr	r2, [pc, #56]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 8104200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104206:	f7fd ffbf 	bl	8102188 <HAL_GetTick>
 810420a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 810420c:	e008      	b.n	8104220 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810420e:	f7fd ffbb 	bl	8102188 <HAL_GetTick>
 8104212:	4602      	mov	r2, r0
 8104214:	68bb      	ldr	r3, [r7, #8]
 8104216:	1ad3      	subs	r3, r2, r3
 8104218:	2b02      	cmp	r3, #2
 810421a:	d901      	bls.n	8104220 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 810421c:	2303      	movs	r3, #3
 810421e:	e006      	b.n	810422e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104220:	4b05      	ldr	r3, [pc, #20]	; (8104238 <RCCEx_PLL2_Config+0x160>)
 8104222:	681b      	ldr	r3, [r3, #0]
 8104224:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104228:	2b00      	cmp	r3, #0
 810422a:	d0f0      	beq.n	810420e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 810422c:	7bfb      	ldrb	r3, [r7, #15]
}
 810422e:	4618      	mov	r0, r3
 8104230:	3710      	adds	r7, #16
 8104232:	46bd      	mov	sp, r7
 8104234:	bd80      	pop	{r7, pc}
 8104236:	bf00      	nop
 8104238:	58024400 	.word	0x58024400

0810423c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 810423c:	b580      	push	{r7, lr}
 810423e:	b084      	sub	sp, #16
 8104240:	af00      	add	r7, sp, #0
 8104242:	6078      	str	r0, [r7, #4]
 8104244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104246:	2300      	movs	r3, #0
 8104248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810424a:	4b54      	ldr	r3, [pc, #336]	; (810439c <RCCEx_PLL3_Config+0x160>)
 810424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810424e:	f003 0303 	and.w	r3, r3, #3
 8104252:	2b03      	cmp	r3, #3
 8104254:	d101      	bne.n	810425a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104256:	2301      	movs	r3, #1
 8104258:	e09b      	b.n	8104392 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810425a:	4b50      	ldr	r3, [pc, #320]	; (810439c <RCCEx_PLL3_Config+0x160>)
 810425c:	681b      	ldr	r3, [r3, #0]
 810425e:	4a4f      	ldr	r2, [pc, #316]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104264:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104266:	f7fd ff8f 	bl	8102188 <HAL_GetTick>
 810426a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810426c:	e008      	b.n	8104280 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810426e:	f7fd ff8b 	bl	8102188 <HAL_GetTick>
 8104272:	4602      	mov	r2, r0
 8104274:	68bb      	ldr	r3, [r7, #8]
 8104276:	1ad3      	subs	r3, r2, r3
 8104278:	2b02      	cmp	r3, #2
 810427a:	d901      	bls.n	8104280 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810427c:	2303      	movs	r3, #3
 810427e:	e088      	b.n	8104392 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104280:	4b46      	ldr	r3, [pc, #280]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104282:	681b      	ldr	r3, [r3, #0]
 8104284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104288:	2b00      	cmp	r3, #0
 810428a:	d1f0      	bne.n	810426e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810428c:	4b43      	ldr	r3, [pc, #268]	; (810439c <RCCEx_PLL3_Config+0x160>)
 810428e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104290:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104294:	687b      	ldr	r3, [r7, #4]
 8104296:	681b      	ldr	r3, [r3, #0]
 8104298:	051b      	lsls	r3, r3, #20
 810429a:	4940      	ldr	r1, [pc, #256]	; (810439c <RCCEx_PLL3_Config+0x160>)
 810429c:	4313      	orrs	r3, r2
 810429e:	628b      	str	r3, [r1, #40]	; 0x28
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	685b      	ldr	r3, [r3, #4]
 81042a4:	3b01      	subs	r3, #1
 81042a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	689b      	ldr	r3, [r3, #8]
 81042ae:	3b01      	subs	r3, #1
 81042b0:	025b      	lsls	r3, r3, #9
 81042b2:	b29b      	uxth	r3, r3
 81042b4:	431a      	orrs	r2, r3
 81042b6:	687b      	ldr	r3, [r7, #4]
 81042b8:	68db      	ldr	r3, [r3, #12]
 81042ba:	3b01      	subs	r3, #1
 81042bc:	041b      	lsls	r3, r3, #16
 81042be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81042c2:	431a      	orrs	r2, r3
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	691b      	ldr	r3, [r3, #16]
 81042c8:	3b01      	subs	r3, #1
 81042ca:	061b      	lsls	r3, r3, #24
 81042cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81042d0:	4932      	ldr	r1, [pc, #200]	; (810439c <RCCEx_PLL3_Config+0x160>)
 81042d2:	4313      	orrs	r3, r2
 81042d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81042d6:	4b31      	ldr	r3, [pc, #196]	; (810439c <RCCEx_PLL3_Config+0x160>)
 81042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	695b      	ldr	r3, [r3, #20]
 81042e2:	492e      	ldr	r1, [pc, #184]	; (810439c <RCCEx_PLL3_Config+0x160>)
 81042e4:	4313      	orrs	r3, r2
 81042e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81042e8:	4b2c      	ldr	r3, [pc, #176]	; (810439c <RCCEx_PLL3_Config+0x160>)
 81042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81042f0:	687b      	ldr	r3, [r7, #4]
 81042f2:	699b      	ldr	r3, [r3, #24]
 81042f4:	4929      	ldr	r1, [pc, #164]	; (810439c <RCCEx_PLL3_Config+0x160>)
 81042f6:	4313      	orrs	r3, r2
 81042f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81042fa:	4b28      	ldr	r3, [pc, #160]	; (810439c <RCCEx_PLL3_Config+0x160>)
 81042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042fe:	4a27      	ldr	r2, [pc, #156]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104304:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104306:	4b25      	ldr	r3, [pc, #148]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810430a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810430e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104312:	687a      	ldr	r2, [r7, #4]
 8104314:	69d2      	ldr	r2, [r2, #28]
 8104316:	00d2      	lsls	r2, r2, #3
 8104318:	4920      	ldr	r1, [pc, #128]	; (810439c <RCCEx_PLL3_Config+0x160>)
 810431a:	4313      	orrs	r3, r2
 810431c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 810431e:	4b1f      	ldr	r3, [pc, #124]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104322:	4a1e      	ldr	r2, [pc, #120]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810432a:	683b      	ldr	r3, [r7, #0]
 810432c:	2b00      	cmp	r3, #0
 810432e:	d106      	bne.n	810433e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104330:	4b1a      	ldr	r3, [pc, #104]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104334:	4a19      	ldr	r2, [pc, #100]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104336:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810433a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810433c:	e00f      	b.n	810435e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810433e:	683b      	ldr	r3, [r7, #0]
 8104340:	2b01      	cmp	r3, #1
 8104342:	d106      	bne.n	8104352 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104344:	4b15      	ldr	r3, [pc, #84]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104348:	4a14      	ldr	r2, [pc, #80]	; (810439c <RCCEx_PLL3_Config+0x160>)
 810434a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 810434e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104350:	e005      	b.n	810435e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104352:	4b12      	ldr	r3, [pc, #72]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104356:	4a11      	ldr	r2, [pc, #68]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104358:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810435c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810435e:	4b0f      	ldr	r3, [pc, #60]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	4a0e      	ldr	r2, [pc, #56]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104368:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810436a:	f7fd ff0d 	bl	8102188 <HAL_GetTick>
 810436e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104370:	e008      	b.n	8104384 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104372:	f7fd ff09 	bl	8102188 <HAL_GetTick>
 8104376:	4602      	mov	r2, r0
 8104378:	68bb      	ldr	r3, [r7, #8]
 810437a:	1ad3      	subs	r3, r2, r3
 810437c:	2b02      	cmp	r3, #2
 810437e:	d901      	bls.n	8104384 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104380:	2303      	movs	r3, #3
 8104382:	e006      	b.n	8104392 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104384:	4b05      	ldr	r3, [pc, #20]	; (810439c <RCCEx_PLL3_Config+0x160>)
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810438c:	2b00      	cmp	r3, #0
 810438e:	d0f0      	beq.n	8104372 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104390:	7bfb      	ldrb	r3, [r7, #15]
}
 8104392:	4618      	mov	r0, r3
 8104394:	3710      	adds	r7, #16
 8104396:	46bd      	mov	sp, r7
 8104398:	bd80      	pop	{r7, pc}
 810439a:	bf00      	nop
 810439c:	58024400 	.word	0x58024400

081043a0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 81043a0:	b580      	push	{r7, lr}
 81043a2:	b084      	sub	sp, #16
 81043a4:	af00      	add	r7, sp, #0
 81043a6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 81043a8:	687b      	ldr	r3, [r7, #4]
 81043aa:	2b00      	cmp	r3, #0
 81043ac:	d101      	bne.n	81043b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 81043ae:	2301      	movs	r3, #1
 81043b0:	e0f1      	b.n	8104596 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81043b2:	687b      	ldr	r3, [r7, #4]
 81043b4:	2200      	movs	r2, #0
 81043b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	4a78      	ldr	r2, [pc, #480]	; (81045a0 <HAL_SPI_Init+0x200>)
 81043be:	4293      	cmp	r3, r2
 81043c0:	d00f      	beq.n	81043e2 <HAL_SPI_Init+0x42>
 81043c2:	687b      	ldr	r3, [r7, #4]
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	4a77      	ldr	r2, [pc, #476]	; (81045a4 <HAL_SPI_Init+0x204>)
 81043c8:	4293      	cmp	r3, r2
 81043ca:	d00a      	beq.n	81043e2 <HAL_SPI_Init+0x42>
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	681b      	ldr	r3, [r3, #0]
 81043d0:	4a75      	ldr	r2, [pc, #468]	; (81045a8 <HAL_SPI_Init+0x208>)
 81043d2:	4293      	cmp	r3, r2
 81043d4:	d005      	beq.n	81043e2 <HAL_SPI_Init+0x42>
 81043d6:	687b      	ldr	r3, [r7, #4]
 81043d8:	68db      	ldr	r3, [r3, #12]
 81043da:	2b0f      	cmp	r3, #15
 81043dc:	d901      	bls.n	81043e2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81043de:	2301      	movs	r3, #1
 81043e0:	e0d9      	b.n	8104596 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81043e2:	6878      	ldr	r0, [r7, #4]
 81043e4:	f001 f877 	bl	81054d6 <SPI_GetPacketSize>
 81043e8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	681b      	ldr	r3, [r3, #0]
 81043ee:	4a6c      	ldr	r2, [pc, #432]	; (81045a0 <HAL_SPI_Init+0x200>)
 81043f0:	4293      	cmp	r3, r2
 81043f2:	d00c      	beq.n	810440e <HAL_SPI_Init+0x6e>
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	4a6a      	ldr	r2, [pc, #424]	; (81045a4 <HAL_SPI_Init+0x204>)
 81043fa:	4293      	cmp	r3, r2
 81043fc:	d007      	beq.n	810440e <HAL_SPI_Init+0x6e>
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	4a69      	ldr	r2, [pc, #420]	; (81045a8 <HAL_SPI_Init+0x208>)
 8104404:	4293      	cmp	r3, r2
 8104406:	d002      	beq.n	810440e <HAL_SPI_Init+0x6e>
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	2b08      	cmp	r3, #8
 810440c:	d811      	bhi.n	8104432 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104412:	4a63      	ldr	r2, [pc, #396]	; (81045a0 <HAL_SPI_Init+0x200>)
 8104414:	4293      	cmp	r3, r2
 8104416:	d009      	beq.n	810442c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	681b      	ldr	r3, [r3, #0]
 810441c:	4a61      	ldr	r2, [pc, #388]	; (81045a4 <HAL_SPI_Init+0x204>)
 810441e:	4293      	cmp	r3, r2
 8104420:	d004      	beq.n	810442c <HAL_SPI_Init+0x8c>
 8104422:	687b      	ldr	r3, [r7, #4]
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	4a60      	ldr	r2, [pc, #384]	; (81045a8 <HAL_SPI_Init+0x208>)
 8104428:	4293      	cmp	r3, r2
 810442a:	d104      	bne.n	8104436 <HAL_SPI_Init+0x96>
 810442c:	68fb      	ldr	r3, [r7, #12]
 810442e:	2b10      	cmp	r3, #16
 8104430:	d901      	bls.n	8104436 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8104432:	2301      	movs	r3, #1
 8104434:	e0af      	b.n	8104596 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8104436:	687b      	ldr	r3, [r7, #4]
 8104438:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810443c:	b2db      	uxtb	r3, r3
 810443e:	2b00      	cmp	r3, #0
 8104440:	d106      	bne.n	8104450 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8104442:	687b      	ldr	r3, [r7, #4]
 8104444:	2200      	movs	r2, #0
 8104446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810444a:	6878      	ldr	r0, [r7, #4]
 810444c:	f7fd fbee 	bl	8101c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104450:	687b      	ldr	r3, [r7, #4]
 8104452:	2202      	movs	r2, #2
 8104454:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	681a      	ldr	r2, [r3, #0]
 810445e:	687b      	ldr	r3, [r7, #4]
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	f022 0201 	bic.w	r2, r2, #1
 8104466:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	681b      	ldr	r3, [r3, #0]
 810446c:	689b      	ldr	r3, [r3, #8]
 810446e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8104472:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104474:	687b      	ldr	r3, [r7, #4]
 8104476:	699b      	ldr	r3, [r3, #24]
 8104478:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810447c:	d119      	bne.n	81044b2 <HAL_SPI_Init+0x112>
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	685b      	ldr	r3, [r3, #4]
 8104482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104486:	d103      	bne.n	8104490 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104488:	687b      	ldr	r3, [r7, #4]
 810448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810448c:	2b00      	cmp	r3, #0
 810448e:	d008      	beq.n	81044a2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104494:	2b00      	cmp	r3, #0
 8104496:	d10c      	bne.n	81044b2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810449c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81044a0:	d107      	bne.n	81044b2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81044a2:	687b      	ldr	r3, [r7, #4]
 81044a4:	681b      	ldr	r3, [r3, #0]
 81044a6:	681a      	ldr	r2, [r3, #0]
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81044b0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	69da      	ldr	r2, [r3, #28]
 81044b6:	687b      	ldr	r3, [r7, #4]
 81044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81044ba:	431a      	orrs	r2, r3
 81044bc:	68bb      	ldr	r3, [r7, #8]
 81044be:	431a      	orrs	r2, r3
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81044c4:	ea42 0103 	orr.w	r1, r2, r3
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	68da      	ldr	r2, [r3, #12]
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	681b      	ldr	r3, [r3, #0]
 81044d0:	430a      	orrs	r2, r1
 81044d2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81044d8:	687b      	ldr	r3, [r7, #4]
 81044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81044dc:	431a      	orrs	r2, r3
 81044de:	687b      	ldr	r3, [r7, #4]
 81044e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81044e2:	431a      	orrs	r2, r3
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	699b      	ldr	r3, [r3, #24]
 81044e8:	431a      	orrs	r2, r3
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	691b      	ldr	r3, [r3, #16]
 81044ee:	431a      	orrs	r2, r3
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	695b      	ldr	r3, [r3, #20]
 81044f4:	431a      	orrs	r2, r3
 81044f6:	687b      	ldr	r3, [r7, #4]
 81044f8:	6a1b      	ldr	r3, [r3, #32]
 81044fa:	431a      	orrs	r2, r3
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	685b      	ldr	r3, [r3, #4]
 8104500:	431a      	orrs	r2, r3
 8104502:	687b      	ldr	r3, [r7, #4]
 8104504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104506:	431a      	orrs	r2, r3
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	689b      	ldr	r3, [r3, #8]
 810450c:	431a      	orrs	r2, r3
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104512:	ea42 0103 	orr.w	r1, r2, r3
 8104516:	687b      	ldr	r3, [r7, #4]
 8104518:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	430a      	orrs	r2, r1
 8104520:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	685b      	ldr	r3, [r3, #4]
 8104526:	2b00      	cmp	r3, #0
 8104528:	d113      	bne.n	8104552 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810452a:	687b      	ldr	r3, [r7, #4]
 810452c:	681b      	ldr	r3, [r3, #0]
 810452e:	689b      	ldr	r3, [r3, #8]
 8104530:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	681b      	ldr	r3, [r3, #0]
 8104538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810453c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	689b      	ldr	r3, [r3, #8]
 8104544:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8104550:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	681b      	ldr	r3, [r3, #0]
 8104556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8104558:	687b      	ldr	r3, [r7, #4]
 810455a:	681b      	ldr	r3, [r3, #0]
 810455c:	f022 0201 	bic.w	r2, r2, #1
 8104560:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	685b      	ldr	r3, [r3, #4]
 8104566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810456a:	2b00      	cmp	r3, #0
 810456c:	d00a      	beq.n	8104584 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810456e:	687b      	ldr	r3, [r7, #4]
 8104570:	681b      	ldr	r3, [r3, #0]
 8104572:	68db      	ldr	r3, [r3, #12]
 8104574:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104578:	687b      	ldr	r3, [r7, #4]
 810457a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810457c:	687b      	ldr	r3, [r7, #4]
 810457e:	681b      	ldr	r3, [r3, #0]
 8104580:	430a      	orrs	r2, r1
 8104582:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	2200      	movs	r2, #0
 8104588:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	2201      	movs	r2, #1
 8104590:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8104594:	2300      	movs	r3, #0
}
 8104596:	4618      	mov	r0, r3
 8104598:	3710      	adds	r7, #16
 810459a:	46bd      	mov	sp, r7
 810459c:	bd80      	pop	{r7, pc}
 810459e:	bf00      	nop
 81045a0:	40013000 	.word	0x40013000
 81045a4:	40003800 	.word	0x40003800
 81045a8:	40003c00 	.word	0x40003c00

081045ac <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81045ac:	b580      	push	{r7, lr}
 81045ae:	b08a      	sub	sp, #40	; 0x28
 81045b0:	af02      	add	r7, sp, #8
 81045b2:	60f8      	str	r0, [r7, #12]
 81045b4:	60b9      	str	r1, [r7, #8]
 81045b6:	603b      	str	r3, [r7, #0]
 81045b8:	4613      	mov	r3, r2
 81045ba:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81045bc:	68fb      	ldr	r3, [r7, #12]
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	3320      	adds	r3, #32
 81045c2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 81045c4:	2300      	movs	r3, #0
 81045c6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 81045c8:	68fb      	ldr	r3, [r7, #12]
 81045ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81045ce:	2b01      	cmp	r3, #1
 81045d0:	d101      	bne.n	81045d6 <HAL_SPI_Transmit+0x2a>
 81045d2:	2302      	movs	r3, #2
 81045d4:	e1d4      	b.n	8104980 <HAL_SPI_Transmit+0x3d4>
 81045d6:	68fb      	ldr	r3, [r7, #12]
 81045d8:	2201      	movs	r2, #1
 81045da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81045de:	f7fd fdd3 	bl	8102188 <HAL_GetTick>
 81045e2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81045e4:	68fb      	ldr	r3, [r7, #12]
 81045e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81045ea:	b2db      	uxtb	r3, r3
 81045ec:	2b01      	cmp	r3, #1
 81045ee:	d007      	beq.n	8104600 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 81045f0:	2302      	movs	r3, #2
 81045f2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81045f4:	68fb      	ldr	r3, [r7, #12]
 81045f6:	2200      	movs	r2, #0
 81045f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81045fc:	7efb      	ldrb	r3, [r7, #27]
 81045fe:	e1bf      	b.n	8104980 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8104600:	68bb      	ldr	r3, [r7, #8]
 8104602:	2b00      	cmp	r3, #0
 8104604:	d002      	beq.n	810460c <HAL_SPI_Transmit+0x60>
 8104606:	88fb      	ldrh	r3, [r7, #6]
 8104608:	2b00      	cmp	r3, #0
 810460a:	d107      	bne.n	810461c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 810460c:	2301      	movs	r3, #1
 810460e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8104610:	68fb      	ldr	r3, [r7, #12]
 8104612:	2200      	movs	r2, #0
 8104614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104618:	7efb      	ldrb	r3, [r7, #27]
 810461a:	e1b1      	b.n	8104980 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 810461c:	68fb      	ldr	r3, [r7, #12]
 810461e:	2203      	movs	r2, #3
 8104620:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	2200      	movs	r2, #0
 8104628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 810462c:	68fb      	ldr	r3, [r7, #12]
 810462e:	68ba      	ldr	r2, [r7, #8]
 8104630:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8104632:	68fb      	ldr	r3, [r7, #12]
 8104634:	88fa      	ldrh	r2, [r7, #6]
 8104636:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	88fa      	ldrh	r2, [r7, #6]
 810463e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8104642:	68fb      	ldr	r3, [r7, #12]
 8104644:	2200      	movs	r2, #0
 8104646:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8104648:	68fb      	ldr	r3, [r7, #12]
 810464a:	2200      	movs	r2, #0
 810464c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8104650:	68fb      	ldr	r3, [r7, #12]
 8104652:	2200      	movs	r2, #0
 8104654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	2200      	movs	r2, #0
 810465c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 810465e:	68fb      	ldr	r3, [r7, #12]
 8104660:	2200      	movs	r2, #0
 8104662:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104664:	68fb      	ldr	r3, [r7, #12]
 8104666:	689b      	ldr	r3, [r3, #8]
 8104668:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810466c:	d107      	bne.n	810467e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	681a      	ldr	r2, [r3, #0]
 8104674:	68fb      	ldr	r3, [r7, #12]
 8104676:	681b      	ldr	r3, [r3, #0]
 8104678:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810467c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810467e:	68fb      	ldr	r3, [r7, #12]
 8104680:	681b      	ldr	r3, [r3, #0]
 8104682:	685b      	ldr	r3, [r3, #4]
 8104684:	0c1b      	lsrs	r3, r3, #16
 8104686:	041b      	lsls	r3, r3, #16
 8104688:	88f9      	ldrh	r1, [r7, #6]
 810468a:	68fa      	ldr	r2, [r7, #12]
 810468c:	6812      	ldr	r2, [r2, #0]
 810468e:	430b      	orrs	r3, r1
 8104690:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104692:	68fb      	ldr	r3, [r7, #12]
 8104694:	681b      	ldr	r3, [r3, #0]
 8104696:	681a      	ldr	r2, [r3, #0]
 8104698:	68fb      	ldr	r3, [r7, #12]
 810469a:	681b      	ldr	r3, [r3, #0]
 810469c:	f042 0201 	orr.w	r2, r2, #1
 81046a0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81046a2:	68fb      	ldr	r3, [r7, #12]
 81046a4:	685b      	ldr	r3, [r3, #4]
 81046a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81046aa:	d107      	bne.n	81046bc <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81046ac:	68fb      	ldr	r3, [r7, #12]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	681a      	ldr	r2, [r3, #0]
 81046b2:	68fb      	ldr	r3, [r7, #12]
 81046b4:	681b      	ldr	r3, [r3, #0]
 81046b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81046ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81046bc:	68fb      	ldr	r3, [r7, #12]
 81046be:	68db      	ldr	r3, [r3, #12]
 81046c0:	2b0f      	cmp	r3, #15
 81046c2:	d947      	bls.n	8104754 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81046c4:	e03f      	b.n	8104746 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81046c6:	68fb      	ldr	r3, [r7, #12]
 81046c8:	681b      	ldr	r3, [r3, #0]
 81046ca:	695b      	ldr	r3, [r3, #20]
 81046cc:	f003 0302 	and.w	r3, r3, #2
 81046d0:	2b02      	cmp	r3, #2
 81046d2:	d114      	bne.n	81046fe <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81046d4:	68fb      	ldr	r3, [r7, #12]
 81046d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81046d8:	68fb      	ldr	r3, [r7, #12]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	6812      	ldr	r2, [r2, #0]
 81046de:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81046e0:	68fb      	ldr	r3, [r7, #12]
 81046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81046e4:	1d1a      	adds	r2, r3, #4
 81046e6:	68fb      	ldr	r3, [r7, #12]
 81046e8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 81046ea:	68fb      	ldr	r3, [r7, #12]
 81046ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81046f0:	b29b      	uxth	r3, r3
 81046f2:	3b01      	subs	r3, #1
 81046f4:	b29a      	uxth	r2, r3
 81046f6:	68fb      	ldr	r3, [r7, #12]
 81046f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81046fc:	e023      	b.n	8104746 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81046fe:	f7fd fd43 	bl	8102188 <HAL_GetTick>
 8104702:	4602      	mov	r2, r0
 8104704:	697b      	ldr	r3, [r7, #20]
 8104706:	1ad3      	subs	r3, r2, r3
 8104708:	683a      	ldr	r2, [r7, #0]
 810470a:	429a      	cmp	r2, r3
 810470c:	d803      	bhi.n	8104716 <HAL_SPI_Transmit+0x16a>
 810470e:	683b      	ldr	r3, [r7, #0]
 8104710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104714:	d102      	bne.n	810471c <HAL_SPI_Transmit+0x170>
 8104716:	683b      	ldr	r3, [r7, #0]
 8104718:	2b00      	cmp	r3, #0
 810471a:	d114      	bne.n	8104746 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810471c:	68f8      	ldr	r0, [r7, #12]
 810471e:	f000 fe0c 	bl	810533a <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104722:	68fb      	ldr	r3, [r7, #12]
 8104724:	2200      	movs	r2, #0
 8104726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810472a:	68fb      	ldr	r3, [r7, #12]
 810472c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104730:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104734:	68fb      	ldr	r3, [r7, #12]
 8104736:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810473a:	68fb      	ldr	r3, [r7, #12]
 810473c:	2201      	movs	r2, #1
 810473e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104742:	2303      	movs	r3, #3
 8104744:	e11c      	b.n	8104980 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104746:	68fb      	ldr	r3, [r7, #12]
 8104748:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810474c:	b29b      	uxth	r3, r3
 810474e:	2b00      	cmp	r3, #0
 8104750:	d1b9      	bne.n	81046c6 <HAL_SPI_Transmit+0x11a>
 8104752:	e0ef      	b.n	8104934 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104754:	68fb      	ldr	r3, [r7, #12]
 8104756:	68db      	ldr	r3, [r3, #12]
 8104758:	2b07      	cmp	r3, #7
 810475a:	f240 80e4 	bls.w	8104926 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810475e:	e05d      	b.n	810481c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104760:	68fb      	ldr	r3, [r7, #12]
 8104762:	681b      	ldr	r3, [r3, #0]
 8104764:	695b      	ldr	r3, [r3, #20]
 8104766:	f003 0302 	and.w	r3, r3, #2
 810476a:	2b02      	cmp	r3, #2
 810476c:	d132      	bne.n	81047d4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810476e:	68fb      	ldr	r3, [r7, #12]
 8104770:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104774:	b29b      	uxth	r3, r3
 8104776:	2b01      	cmp	r3, #1
 8104778:	d918      	bls.n	81047ac <HAL_SPI_Transmit+0x200>
 810477a:	68fb      	ldr	r3, [r7, #12]
 810477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810477e:	2b00      	cmp	r3, #0
 8104780:	d014      	beq.n	81047ac <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104782:	68fb      	ldr	r3, [r7, #12]
 8104784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104786:	68fb      	ldr	r3, [r7, #12]
 8104788:	681b      	ldr	r3, [r3, #0]
 810478a:	6812      	ldr	r2, [r2, #0]
 810478c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810478e:	68fb      	ldr	r3, [r7, #12]
 8104790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104792:	1d1a      	adds	r2, r3, #4
 8104794:	68fb      	ldr	r3, [r7, #12]
 8104796:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104798:	68fb      	ldr	r3, [r7, #12]
 810479a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810479e:	b29b      	uxth	r3, r3
 81047a0:	3b02      	subs	r3, #2
 81047a2:	b29a      	uxth	r2, r3
 81047a4:	68fb      	ldr	r3, [r7, #12]
 81047a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81047aa:	e037      	b.n	810481c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81047ac:	68fb      	ldr	r3, [r7, #12]
 81047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047b0:	881a      	ldrh	r2, [r3, #0]
 81047b2:	69fb      	ldr	r3, [r7, #28]
 81047b4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81047b6:	68fb      	ldr	r3, [r7, #12]
 81047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81047ba:	1c9a      	adds	r2, r3, #2
 81047bc:	68fb      	ldr	r3, [r7, #12]
 81047be:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81047c6:	b29b      	uxth	r3, r3
 81047c8:	3b01      	subs	r3, #1
 81047ca:	b29a      	uxth	r2, r3
 81047cc:	68fb      	ldr	r3, [r7, #12]
 81047ce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81047d2:	e023      	b.n	810481c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81047d4:	f7fd fcd8 	bl	8102188 <HAL_GetTick>
 81047d8:	4602      	mov	r2, r0
 81047da:	697b      	ldr	r3, [r7, #20]
 81047dc:	1ad3      	subs	r3, r2, r3
 81047de:	683a      	ldr	r2, [r7, #0]
 81047e0:	429a      	cmp	r2, r3
 81047e2:	d803      	bhi.n	81047ec <HAL_SPI_Transmit+0x240>
 81047e4:	683b      	ldr	r3, [r7, #0]
 81047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81047ea:	d102      	bne.n	81047f2 <HAL_SPI_Transmit+0x246>
 81047ec:	683b      	ldr	r3, [r7, #0]
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	d114      	bne.n	810481c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81047f2:	68f8      	ldr	r0, [r7, #12]
 81047f4:	f000 fda1 	bl	810533a <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81047f8:	68fb      	ldr	r3, [r7, #12]
 81047fa:	2200      	movs	r2, #0
 81047fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104800:	68fb      	ldr	r3, [r7, #12]
 8104802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104806:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810480a:	68fb      	ldr	r3, [r7, #12]
 810480c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104810:	68fb      	ldr	r3, [r7, #12]
 8104812:	2201      	movs	r2, #1
 8104814:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104818:	2303      	movs	r3, #3
 810481a:	e0b1      	b.n	8104980 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810481c:	68fb      	ldr	r3, [r7, #12]
 810481e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104822:	b29b      	uxth	r3, r3
 8104824:	2b00      	cmp	r3, #0
 8104826:	d19b      	bne.n	8104760 <HAL_SPI_Transmit+0x1b4>
 8104828:	e084      	b.n	8104934 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810482a:	68fb      	ldr	r3, [r7, #12]
 810482c:	681b      	ldr	r3, [r3, #0]
 810482e:	695b      	ldr	r3, [r3, #20]
 8104830:	f003 0302 	and.w	r3, r3, #2
 8104834:	2b02      	cmp	r3, #2
 8104836:	d152      	bne.n	81048de <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8104838:	68fb      	ldr	r3, [r7, #12]
 810483a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810483e:	b29b      	uxth	r3, r3
 8104840:	2b03      	cmp	r3, #3
 8104842:	d918      	bls.n	8104876 <HAL_SPI_Transmit+0x2ca>
 8104844:	68fb      	ldr	r3, [r7, #12]
 8104846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104848:	2b40      	cmp	r3, #64	; 0x40
 810484a:	d914      	bls.n	8104876 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810484c:	68fb      	ldr	r3, [r7, #12]
 810484e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104850:	68fb      	ldr	r3, [r7, #12]
 8104852:	681b      	ldr	r3, [r3, #0]
 8104854:	6812      	ldr	r2, [r2, #0]
 8104856:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104858:	68fb      	ldr	r3, [r7, #12]
 810485a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810485c:	1d1a      	adds	r2, r3, #4
 810485e:	68fb      	ldr	r3, [r7, #12]
 8104860:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8104862:	68fb      	ldr	r3, [r7, #12]
 8104864:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104868:	b29b      	uxth	r3, r3
 810486a:	3b04      	subs	r3, #4
 810486c:	b29a      	uxth	r2, r3
 810486e:	68fb      	ldr	r3, [r7, #12]
 8104870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104874:	e057      	b.n	8104926 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104876:	68fb      	ldr	r3, [r7, #12]
 8104878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810487c:	b29b      	uxth	r3, r3
 810487e:	2b01      	cmp	r3, #1
 8104880:	d917      	bls.n	81048b2 <HAL_SPI_Transmit+0x306>
 8104882:	68fb      	ldr	r3, [r7, #12]
 8104884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104886:	2b00      	cmp	r3, #0
 8104888:	d013      	beq.n	81048b2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810488a:	68fb      	ldr	r3, [r7, #12]
 810488c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810488e:	881a      	ldrh	r2, [r3, #0]
 8104890:	69fb      	ldr	r3, [r7, #28]
 8104892:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104894:	68fb      	ldr	r3, [r7, #12]
 8104896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104898:	1c9a      	adds	r2, r3, #2
 810489a:	68fb      	ldr	r3, [r7, #12]
 810489c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810489e:	68fb      	ldr	r3, [r7, #12]
 81048a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81048a4:	b29b      	uxth	r3, r3
 81048a6:	3b02      	subs	r3, #2
 81048a8:	b29a      	uxth	r2, r3
 81048aa:	68fb      	ldr	r3, [r7, #12]
 81048ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81048b0:	e039      	b.n	8104926 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 81048b2:	68fb      	ldr	r3, [r7, #12]
 81048b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81048b6:	68fb      	ldr	r3, [r7, #12]
 81048b8:	681b      	ldr	r3, [r3, #0]
 81048ba:	3320      	adds	r3, #32
 81048bc:	7812      	ldrb	r2, [r2, #0]
 81048be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 81048c0:	68fb      	ldr	r3, [r7, #12]
 81048c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81048c4:	1c5a      	adds	r2, r3, #1
 81048c6:	68fb      	ldr	r3, [r7, #12]
 81048c8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81048ca:	68fb      	ldr	r3, [r7, #12]
 81048cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81048d0:	b29b      	uxth	r3, r3
 81048d2:	3b01      	subs	r3, #1
 81048d4:	b29a      	uxth	r2, r3
 81048d6:	68fb      	ldr	r3, [r7, #12]
 81048d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81048dc:	e023      	b.n	8104926 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81048de:	f7fd fc53 	bl	8102188 <HAL_GetTick>
 81048e2:	4602      	mov	r2, r0
 81048e4:	697b      	ldr	r3, [r7, #20]
 81048e6:	1ad3      	subs	r3, r2, r3
 81048e8:	683a      	ldr	r2, [r7, #0]
 81048ea:	429a      	cmp	r2, r3
 81048ec:	d803      	bhi.n	81048f6 <HAL_SPI_Transmit+0x34a>
 81048ee:	683b      	ldr	r3, [r7, #0]
 81048f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81048f4:	d102      	bne.n	81048fc <HAL_SPI_Transmit+0x350>
 81048f6:	683b      	ldr	r3, [r7, #0]
 81048f8:	2b00      	cmp	r3, #0
 81048fa:	d114      	bne.n	8104926 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81048fc:	68f8      	ldr	r0, [r7, #12]
 81048fe:	f000 fd1c 	bl	810533a <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104902:	68fb      	ldr	r3, [r7, #12]
 8104904:	2200      	movs	r2, #0
 8104906:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810490a:	68fb      	ldr	r3, [r7, #12]
 810490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104910:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104914:	68fb      	ldr	r3, [r7, #12]
 8104916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810491a:	68fb      	ldr	r3, [r7, #12]
 810491c:	2201      	movs	r2, #1
 810491e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104922:	2303      	movs	r3, #3
 8104924:	e02c      	b.n	8104980 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104926:	68fb      	ldr	r3, [r7, #12]
 8104928:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810492c:	b29b      	uxth	r3, r3
 810492e:	2b00      	cmp	r3, #0
 8104930:	f47f af7b 	bne.w	810482a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8104934:	683b      	ldr	r3, [r7, #0]
 8104936:	9300      	str	r3, [sp, #0]
 8104938:	697b      	ldr	r3, [r7, #20]
 810493a:	2200      	movs	r2, #0
 810493c:	2108      	movs	r1, #8
 810493e:	68f8      	ldr	r0, [r7, #12]
 8104940:	f000 fd9b 	bl	810547a <SPI_WaitOnFlagUntilTimeout>
 8104944:	4603      	mov	r3, r0
 8104946:	2b00      	cmp	r3, #0
 8104948:	d007      	beq.n	810495a <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810494a:	68fb      	ldr	r3, [r7, #12]
 810494c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104950:	f043 0220 	orr.w	r2, r3, #32
 8104954:	68fb      	ldr	r3, [r7, #12]
 8104956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810495a:	68f8      	ldr	r0, [r7, #12]
 810495c:	f000 fced 	bl	810533a <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104960:	68fb      	ldr	r3, [r7, #12]
 8104962:	2200      	movs	r2, #0
 8104964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104968:	68fb      	ldr	r3, [r7, #12]
 810496a:	2201      	movs	r2, #1
 810496c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104970:	68fb      	ldr	r3, [r7, #12]
 8104972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104976:	2b00      	cmp	r3, #0
 8104978:	d001      	beq.n	810497e <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 810497a:	2301      	movs	r3, #1
 810497c:	e000      	b.n	8104980 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 810497e:	7efb      	ldrb	r3, [r7, #27]
}
 8104980:	4618      	mov	r0, r3
 8104982:	3720      	adds	r7, #32
 8104984:	46bd      	mov	sp, r7
 8104986:	bd80      	pop	{r7, pc}

08104988 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104988:	b580      	push	{r7, lr}
 810498a:	b08a      	sub	sp, #40	; 0x28
 810498c:	af02      	add	r7, sp, #8
 810498e:	60f8      	str	r0, [r7, #12]
 8104990:	60b9      	str	r1, [r7, #8]
 8104992:	603b      	str	r3, [r7, #0]
 8104994:	4613      	mov	r3, r2
 8104996:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104998:	2300      	movs	r3, #0
 810499a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810499c:	68fb      	ldr	r3, [r7, #12]
 810499e:	681b      	ldr	r3, [r3, #0]
 81049a0:	3330      	adds	r3, #48	; 0x30
 81049a2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 81049a4:	68fb      	ldr	r3, [r7, #12]
 81049a6:	685b      	ldr	r3, [r3, #4]
 81049a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81049ac:	d112      	bne.n	81049d4 <HAL_SPI_Receive+0x4c>
 81049ae:	68fb      	ldr	r3, [r7, #12]
 81049b0:	689b      	ldr	r3, [r3, #8]
 81049b2:	2b00      	cmp	r3, #0
 81049b4:	d10e      	bne.n	81049d4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 81049b6:	68fb      	ldr	r3, [r7, #12]
 81049b8:	2204      	movs	r2, #4
 81049ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 81049be:	88fa      	ldrh	r2, [r7, #6]
 81049c0:	683b      	ldr	r3, [r7, #0]
 81049c2:	9300      	str	r3, [sp, #0]
 81049c4:	4613      	mov	r3, r2
 81049c6:	68ba      	ldr	r2, [r7, #8]
 81049c8:	68b9      	ldr	r1, [r7, #8]
 81049ca:	68f8      	ldr	r0, [r7, #12]
 81049cc:	f000 f9cc 	bl	8104d68 <HAL_SPI_TransmitReceive>
 81049d0:	4603      	mov	r3, r0
 81049d2:	e1c5      	b.n	8104d60 <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 81049d4:	68fb      	ldr	r3, [r7, #12]
 81049d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81049da:	2b01      	cmp	r3, #1
 81049dc:	d101      	bne.n	81049e2 <HAL_SPI_Receive+0x5a>
 81049de:	2302      	movs	r3, #2
 81049e0:	e1be      	b.n	8104d60 <HAL_SPI_Receive+0x3d8>
 81049e2:	68fb      	ldr	r3, [r7, #12]
 81049e4:	2201      	movs	r2, #1
 81049e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81049ea:	f7fd fbcd 	bl	8102188 <HAL_GetTick>
 81049ee:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81049f0:	68fb      	ldr	r3, [r7, #12]
 81049f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81049f6:	b2db      	uxtb	r3, r3
 81049f8:	2b01      	cmp	r3, #1
 81049fa:	d007      	beq.n	8104a0c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 81049fc:	2302      	movs	r3, #2
 81049fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	2200      	movs	r2, #0
 8104a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104a08:	7ffb      	ldrb	r3, [r7, #31]
 8104a0a:	e1a9      	b.n	8104d60 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 8104a0c:	68bb      	ldr	r3, [r7, #8]
 8104a0e:	2b00      	cmp	r3, #0
 8104a10:	d002      	beq.n	8104a18 <HAL_SPI_Receive+0x90>
 8104a12:	88fb      	ldrh	r3, [r7, #6]
 8104a14:	2b00      	cmp	r3, #0
 8104a16:	d107      	bne.n	8104a28 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8104a18:	2301      	movs	r3, #1
 8104a1a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8104a1c:	68fb      	ldr	r3, [r7, #12]
 8104a1e:	2200      	movs	r2, #0
 8104a20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104a24:	7ffb      	ldrb	r3, [r7, #31]
 8104a26:	e19b      	b.n	8104d60 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	2204      	movs	r2, #4
 8104a2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104a30:	68fb      	ldr	r3, [r7, #12]
 8104a32:	2200      	movs	r2, #0
 8104a34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8104a38:	68fb      	ldr	r3, [r7, #12]
 8104a3a:	68ba      	ldr	r2, [r7, #8]
 8104a3c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8104a3e:	68fb      	ldr	r3, [r7, #12]
 8104a40:	88fa      	ldrh	r2, [r7, #6]
 8104a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8104a46:	68fb      	ldr	r3, [r7, #12]
 8104a48:	88fa      	ldrh	r2, [r7, #6]
 8104a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8104a4e:	68fb      	ldr	r3, [r7, #12]
 8104a50:	2200      	movs	r2, #0
 8104a52:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8104a54:	68fb      	ldr	r3, [r7, #12]
 8104a56:	2200      	movs	r2, #0
 8104a58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8104a5c:	68fb      	ldr	r3, [r7, #12]
 8104a5e:	2200      	movs	r2, #0
 8104a60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8104a64:	68fb      	ldr	r3, [r7, #12]
 8104a66:	2200      	movs	r2, #0
 8104a68:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8104a6a:	68fb      	ldr	r3, [r7, #12]
 8104a6c:	2200      	movs	r2, #0
 8104a6e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104a70:	68fb      	ldr	r3, [r7, #12]
 8104a72:	689b      	ldr	r3, [r3, #8]
 8104a74:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8104a78:	d107      	bne.n	8104a8a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8104a7a:	68fb      	ldr	r3, [r7, #12]
 8104a7c:	681b      	ldr	r3, [r3, #0]
 8104a7e:	681a      	ldr	r2, [r3, #0]
 8104a80:	68fb      	ldr	r3, [r7, #12]
 8104a82:	681b      	ldr	r3, [r3, #0]
 8104a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8104a88:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104a8a:	68fb      	ldr	r3, [r7, #12]
 8104a8c:	681b      	ldr	r3, [r3, #0]
 8104a8e:	685b      	ldr	r3, [r3, #4]
 8104a90:	0c1b      	lsrs	r3, r3, #16
 8104a92:	041b      	lsls	r3, r3, #16
 8104a94:	88f9      	ldrh	r1, [r7, #6]
 8104a96:	68fa      	ldr	r2, [r7, #12]
 8104a98:	6812      	ldr	r2, [r2, #0]
 8104a9a:	430b      	orrs	r3, r1
 8104a9c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104a9e:	68fb      	ldr	r3, [r7, #12]
 8104aa0:	681b      	ldr	r3, [r3, #0]
 8104aa2:	681a      	ldr	r2, [r3, #0]
 8104aa4:	68fb      	ldr	r3, [r7, #12]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	f042 0201 	orr.w	r2, r2, #1
 8104aac:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104aae:	68fb      	ldr	r3, [r7, #12]
 8104ab0:	685b      	ldr	r3, [r3, #4]
 8104ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104ab6:	d107      	bne.n	8104ac8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104ab8:	68fb      	ldr	r3, [r7, #12]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	681a      	ldr	r2, [r3, #0]
 8104abe:	68fb      	ldr	r3, [r7, #12]
 8104ac0:	681b      	ldr	r3, [r3, #0]
 8104ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104ac6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	68db      	ldr	r3, [r3, #12]
 8104acc:	2b0f      	cmp	r3, #15
 8104ace:	d948      	bls.n	8104b62 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104ad0:	e040      	b.n	8104b54 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8104ad2:	68fb      	ldr	r3, [r7, #12]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	695a      	ldr	r2, [r3, #20]
 8104ad8:	f248 0308 	movw	r3, #32776	; 0x8008
 8104adc:	4013      	ands	r3, r2
 8104ade:	2b00      	cmp	r3, #0
 8104ae0:	d014      	beq.n	8104b0c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104ae2:	68fb      	ldr	r3, [r7, #12]
 8104ae4:	681a      	ldr	r2, [r3, #0]
 8104ae6:	68fb      	ldr	r3, [r7, #12]
 8104ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104aea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104aec:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104aee:	68fb      	ldr	r3, [r7, #12]
 8104af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104af2:	1d1a      	adds	r2, r3, #4
 8104af4:	68fb      	ldr	r3, [r7, #12]
 8104af6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8104af8:	68fb      	ldr	r3, [r7, #12]
 8104afa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104afe:	b29b      	uxth	r3, r3
 8104b00:	3b01      	subs	r3, #1
 8104b02:	b29a      	uxth	r2, r3
 8104b04:	68fb      	ldr	r3, [r7, #12]
 8104b06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104b0a:	e023      	b.n	8104b54 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104b0c:	f7fd fb3c 	bl	8102188 <HAL_GetTick>
 8104b10:	4602      	mov	r2, r0
 8104b12:	697b      	ldr	r3, [r7, #20]
 8104b14:	1ad3      	subs	r3, r2, r3
 8104b16:	683a      	ldr	r2, [r7, #0]
 8104b18:	429a      	cmp	r2, r3
 8104b1a:	d803      	bhi.n	8104b24 <HAL_SPI_Receive+0x19c>
 8104b1c:	683b      	ldr	r3, [r7, #0]
 8104b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104b22:	d102      	bne.n	8104b2a <HAL_SPI_Receive+0x1a2>
 8104b24:	683b      	ldr	r3, [r7, #0]
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	d114      	bne.n	8104b54 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104b2a:	68f8      	ldr	r0, [r7, #12]
 8104b2c:	f000 fc05 	bl	810533a <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104b30:	68fb      	ldr	r3, [r7, #12]
 8104b32:	2200      	movs	r2, #0
 8104b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104b38:	68fb      	ldr	r3, [r7, #12]
 8104b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104b3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104b42:	68fb      	ldr	r3, [r7, #12]
 8104b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	2201      	movs	r2, #1
 8104b4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104b50:	2303      	movs	r3, #3
 8104b52:	e105      	b.n	8104d60 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104b54:	68fb      	ldr	r3, [r7, #12]
 8104b56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104b5a:	b29b      	uxth	r3, r3
 8104b5c:	2b00      	cmp	r3, #0
 8104b5e:	d1b8      	bne.n	8104ad2 <HAL_SPI_Receive+0x14a>
 8104b60:	e0eb      	b.n	8104d3a <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104b62:	68fb      	ldr	r3, [r7, #12]
 8104b64:	68db      	ldr	r3, [r3, #12]
 8104b66:	2b07      	cmp	r3, #7
 8104b68:	f240 80e0 	bls.w	8104d2c <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104b6c:	e05b      	b.n	8104c26 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8104b6e:	68fb      	ldr	r3, [r7, #12]
 8104b70:	681b      	ldr	r3, [r3, #0]
 8104b72:	695b      	ldr	r3, [r3, #20]
 8104b74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8104b78:	2b00      	cmp	r3, #0
 8104b7a:	d030      	beq.n	8104bde <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104b7c:	68fb      	ldr	r3, [r7, #12]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	695b      	ldr	r3, [r3, #20]
 8104b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104b86:	2b00      	cmp	r3, #0
 8104b88:	d014      	beq.n	8104bb4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104b8a:	68fb      	ldr	r3, [r7, #12]
 8104b8c:	681a      	ldr	r2, [r3, #0]
 8104b8e:	68fb      	ldr	r3, [r7, #12]
 8104b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104b94:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104b96:	68fb      	ldr	r3, [r7, #12]
 8104b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104b9a:	1d1a      	adds	r2, r3, #4
 8104b9c:	68fb      	ldr	r3, [r7, #12]
 8104b9e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104ba0:	68fb      	ldr	r3, [r7, #12]
 8104ba2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104ba6:	b29b      	uxth	r3, r3
 8104ba8:	3b02      	subs	r3, #2
 8104baa:	b29a      	uxth	r2, r3
 8104bac:	68fb      	ldr	r3, [r7, #12]
 8104bae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104bb2:	e038      	b.n	8104c26 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104bb4:	68fb      	ldr	r3, [r7, #12]
 8104bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104bb8:	69ba      	ldr	r2, [r7, #24]
 8104bba:	8812      	ldrh	r2, [r2, #0]
 8104bbc:	b292      	uxth	r2, r2
 8104bbe:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104bc0:	68fb      	ldr	r3, [r7, #12]
 8104bc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104bc4:	1c9a      	adds	r2, r3, #2
 8104bc6:	68fb      	ldr	r3, [r7, #12]
 8104bc8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104bca:	68fb      	ldr	r3, [r7, #12]
 8104bcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104bd0:	b29b      	uxth	r3, r3
 8104bd2:	3b01      	subs	r3, #1
 8104bd4:	b29a      	uxth	r2, r3
 8104bd6:	68fb      	ldr	r3, [r7, #12]
 8104bd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104bdc:	e023      	b.n	8104c26 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104bde:	f7fd fad3 	bl	8102188 <HAL_GetTick>
 8104be2:	4602      	mov	r2, r0
 8104be4:	697b      	ldr	r3, [r7, #20]
 8104be6:	1ad3      	subs	r3, r2, r3
 8104be8:	683a      	ldr	r2, [r7, #0]
 8104bea:	429a      	cmp	r2, r3
 8104bec:	d803      	bhi.n	8104bf6 <HAL_SPI_Receive+0x26e>
 8104bee:	683b      	ldr	r3, [r7, #0]
 8104bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104bf4:	d102      	bne.n	8104bfc <HAL_SPI_Receive+0x274>
 8104bf6:	683b      	ldr	r3, [r7, #0]
 8104bf8:	2b00      	cmp	r3, #0
 8104bfa:	d114      	bne.n	8104c26 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104bfc:	68f8      	ldr	r0, [r7, #12]
 8104bfe:	f000 fb9c 	bl	810533a <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104c02:	68fb      	ldr	r3, [r7, #12]
 8104c04:	2200      	movs	r2, #0
 8104c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104c0a:	68fb      	ldr	r3, [r7, #12]
 8104c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104c10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104c14:	68fb      	ldr	r3, [r7, #12]
 8104c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104c1a:	68fb      	ldr	r3, [r7, #12]
 8104c1c:	2201      	movs	r2, #1
 8104c1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104c22:	2303      	movs	r3, #3
 8104c24:	e09c      	b.n	8104d60 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104c26:	68fb      	ldr	r3, [r7, #12]
 8104c28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104c2c:	b29b      	uxth	r3, r3
 8104c2e:	2b00      	cmp	r3, #0
 8104c30:	d19d      	bne.n	8104b6e <HAL_SPI_Receive+0x1e6>
 8104c32:	e082      	b.n	8104d3a <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8104c34:	68fb      	ldr	r3, [r7, #12]
 8104c36:	681b      	ldr	r3, [r3, #0]
 8104c38:	695b      	ldr	r3, [r3, #20]
 8104c3a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8104c3e:	2b00      	cmp	r3, #0
 8104c40:	d050      	beq.n	8104ce4 <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104c42:	68fb      	ldr	r3, [r7, #12]
 8104c44:	681b      	ldr	r3, [r3, #0]
 8104c46:	695b      	ldr	r3, [r3, #20]
 8104c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104c4c:	2b00      	cmp	r3, #0
 8104c4e:	d014      	beq.n	8104c7a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104c50:	68fb      	ldr	r3, [r7, #12]
 8104c52:	681a      	ldr	r2, [r3, #0]
 8104c54:	68fb      	ldr	r3, [r7, #12]
 8104c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104c5a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104c5c:	68fb      	ldr	r3, [r7, #12]
 8104c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c60:	1d1a      	adds	r2, r3, #4
 8104c62:	68fb      	ldr	r3, [r7, #12]
 8104c64:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8104c66:	68fb      	ldr	r3, [r7, #12]
 8104c68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104c6c:	b29b      	uxth	r3, r3
 8104c6e:	3b04      	subs	r3, #4
 8104c70:	b29a      	uxth	r2, r3
 8104c72:	68fb      	ldr	r3, [r7, #12]
 8104c74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104c78:	e058      	b.n	8104d2c <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8104c7a:	68fb      	ldr	r3, [r7, #12]
 8104c7c:	681b      	ldr	r3, [r3, #0]
 8104c7e:	695b      	ldr	r3, [r3, #20]
 8104c80:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8104c84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104c88:	d914      	bls.n	8104cb4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104c8a:	68fb      	ldr	r3, [r7, #12]
 8104c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c8e:	69ba      	ldr	r2, [r7, #24]
 8104c90:	8812      	ldrh	r2, [r2, #0]
 8104c92:	b292      	uxth	r2, r2
 8104c94:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104c96:	68fb      	ldr	r3, [r7, #12]
 8104c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104c9a:	1c9a      	adds	r2, r3, #2
 8104c9c:	68fb      	ldr	r3, [r7, #12]
 8104c9e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104ca0:	68fb      	ldr	r3, [r7, #12]
 8104ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104ca6:	b29b      	uxth	r3, r3
 8104ca8:	3b02      	subs	r3, #2
 8104caa:	b29a      	uxth	r2, r3
 8104cac:	68fb      	ldr	r3, [r7, #12]
 8104cae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104cb2:	e03b      	b.n	8104d2c <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104cb4:	68fb      	ldr	r3, [r7, #12]
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104cbc:	68fb      	ldr	r3, [r7, #12]
 8104cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104cc0:	7812      	ldrb	r2, [r2, #0]
 8104cc2:	b2d2      	uxtb	r2, r2
 8104cc4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104cc6:	68fb      	ldr	r3, [r7, #12]
 8104cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104cca:	1c5a      	adds	r2, r3, #1
 8104ccc:	68fb      	ldr	r3, [r7, #12]
 8104cce:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104cd0:	68fb      	ldr	r3, [r7, #12]
 8104cd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104cd6:	b29b      	uxth	r3, r3
 8104cd8:	3b01      	subs	r3, #1
 8104cda:	b29a      	uxth	r2, r3
 8104cdc:	68fb      	ldr	r3, [r7, #12]
 8104cde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104ce2:	e023      	b.n	8104d2c <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104ce4:	f7fd fa50 	bl	8102188 <HAL_GetTick>
 8104ce8:	4602      	mov	r2, r0
 8104cea:	697b      	ldr	r3, [r7, #20]
 8104cec:	1ad3      	subs	r3, r2, r3
 8104cee:	683a      	ldr	r2, [r7, #0]
 8104cf0:	429a      	cmp	r2, r3
 8104cf2:	d803      	bhi.n	8104cfc <HAL_SPI_Receive+0x374>
 8104cf4:	683b      	ldr	r3, [r7, #0]
 8104cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104cfa:	d102      	bne.n	8104d02 <HAL_SPI_Receive+0x37a>
 8104cfc:	683b      	ldr	r3, [r7, #0]
 8104cfe:	2b00      	cmp	r3, #0
 8104d00:	d114      	bne.n	8104d2c <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104d02:	68f8      	ldr	r0, [r7, #12]
 8104d04:	f000 fb19 	bl	810533a <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104d08:	68fb      	ldr	r3, [r7, #12]
 8104d0a:	2200      	movs	r2, #0
 8104d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104d10:	68fb      	ldr	r3, [r7, #12]
 8104d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104d1a:	68fb      	ldr	r3, [r7, #12]
 8104d1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104d20:	68fb      	ldr	r3, [r7, #12]
 8104d22:	2201      	movs	r2, #1
 8104d24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104d28:	2303      	movs	r3, #3
 8104d2a:	e019      	b.n	8104d60 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104d2c:	68fb      	ldr	r3, [r7, #12]
 8104d2e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104d32:	b29b      	uxth	r3, r3
 8104d34:	2b00      	cmp	r3, #0
 8104d36:	f47f af7d 	bne.w	8104c34 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104d3a:	68f8      	ldr	r0, [r7, #12]
 8104d3c:	f000 fafd 	bl	810533a <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104d40:	68fb      	ldr	r3, [r7, #12]
 8104d42:	2200      	movs	r2, #0
 8104d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8104d48:	68fb      	ldr	r3, [r7, #12]
 8104d4a:	2201      	movs	r2, #1
 8104d4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104d50:	68fb      	ldr	r3, [r7, #12]
 8104d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104d56:	2b00      	cmp	r3, #0
 8104d58:	d001      	beq.n	8104d5e <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 8104d5a:	2301      	movs	r3, #1
 8104d5c:	e000      	b.n	8104d60 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 8104d5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8104d60:	4618      	mov	r0, r3
 8104d62:	3720      	adds	r7, #32
 8104d64:	46bd      	mov	sp, r7
 8104d66:	bd80      	pop	{r7, pc}

08104d68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8104d68:	b580      	push	{r7, lr}
 8104d6a:	b08e      	sub	sp, #56	; 0x38
 8104d6c:	af02      	add	r7, sp, #8
 8104d6e:	60f8      	str	r0, [r7, #12]
 8104d70:	60b9      	str	r1, [r7, #8]
 8104d72:	607a      	str	r2, [r7, #4]
 8104d74:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104d76:	2300      	movs	r3, #0
 8104d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104d7c:	68fb      	ldr	r3, [r7, #12]
 8104d7e:	681b      	ldr	r3, [r3, #0]
 8104d80:	3320      	adds	r3, #32
 8104d82:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104d84:	68fb      	ldr	r3, [r7, #12]
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	3330      	adds	r3, #48	; 0x30
 8104d8a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104d8c:	68fb      	ldr	r3, [r7, #12]
 8104d8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104d92:	2b01      	cmp	r3, #1
 8104d94:	d101      	bne.n	8104d9a <HAL_SPI_TransmitReceive+0x32>
 8104d96:	2302      	movs	r3, #2
 8104d98:	e2cb      	b.n	8105332 <HAL_SPI_TransmitReceive+0x5ca>
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	2201      	movs	r2, #1
 8104d9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104da2:	f7fd f9f1 	bl	8102188 <HAL_GetTick>
 8104da6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8104da8:	887b      	ldrh	r3, [r7, #2]
 8104daa:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8104dac:	887b      	ldrh	r3, [r7, #2]
 8104dae:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8104db0:	68fb      	ldr	r3, [r7, #12]
 8104db2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104db6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8104db8:	68fb      	ldr	r3, [r7, #12]
 8104dba:	685b      	ldr	r3, [r3, #4]
 8104dbc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8104dbe:	7efb      	ldrb	r3, [r7, #27]
 8104dc0:	2b01      	cmp	r3, #1
 8104dc2:	d014      	beq.n	8104dee <HAL_SPI_TransmitReceive+0x86>
 8104dc4:	697b      	ldr	r3, [r7, #20]
 8104dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104dca:	d106      	bne.n	8104dda <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104dcc:	68fb      	ldr	r3, [r7, #12]
 8104dce:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8104dd0:	2b00      	cmp	r3, #0
 8104dd2:	d102      	bne.n	8104dda <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104dd4:	7efb      	ldrb	r3, [r7, #27]
 8104dd6:	2b04      	cmp	r3, #4
 8104dd8:	d009      	beq.n	8104dee <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8104dda:	2302      	movs	r3, #2
 8104ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104de0:	68fb      	ldr	r3, [r7, #12]
 8104de2:	2200      	movs	r2, #0
 8104de4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104de8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104dec:	e2a1      	b.n	8105332 <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8104dee:	68bb      	ldr	r3, [r7, #8]
 8104df0:	2b00      	cmp	r3, #0
 8104df2:	d005      	beq.n	8104e00 <HAL_SPI_TransmitReceive+0x98>
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	2b00      	cmp	r3, #0
 8104df8:	d002      	beq.n	8104e00 <HAL_SPI_TransmitReceive+0x98>
 8104dfa:	887b      	ldrh	r3, [r7, #2]
 8104dfc:	2b00      	cmp	r3, #0
 8104dfe:	d109      	bne.n	8104e14 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8104e00:	2301      	movs	r3, #1
 8104e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104e06:	68fb      	ldr	r3, [r7, #12]
 8104e08:	2200      	movs	r2, #0
 8104e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104e0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104e12:	e28e      	b.n	8105332 <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104e14:	68fb      	ldr	r3, [r7, #12]
 8104e16:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104e1a:	b2db      	uxtb	r3, r3
 8104e1c:	2b04      	cmp	r3, #4
 8104e1e:	d003      	beq.n	8104e28 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8104e20:	68fb      	ldr	r3, [r7, #12]
 8104e22:	2205      	movs	r2, #5
 8104e24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104e28:	68fb      	ldr	r3, [r7, #12]
 8104e2a:	2200      	movs	r2, #0
 8104e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8104e30:	68fb      	ldr	r3, [r7, #12]
 8104e32:	687a      	ldr	r2, [r7, #4]
 8104e34:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8104e36:	68fb      	ldr	r3, [r7, #12]
 8104e38:	887a      	ldrh	r2, [r7, #2]
 8104e3a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8104e3e:	68fb      	ldr	r3, [r7, #12]
 8104e40:	887a      	ldrh	r2, [r7, #2]
 8104e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8104e46:	68fb      	ldr	r3, [r7, #12]
 8104e48:	68ba      	ldr	r2, [r7, #8]
 8104e4a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8104e4c:	68fb      	ldr	r3, [r7, #12]
 8104e4e:	887a      	ldrh	r2, [r7, #2]
 8104e50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8104e54:	68fb      	ldr	r3, [r7, #12]
 8104e56:	887a      	ldrh	r2, [r7, #2]
 8104e58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8104e5c:	68fb      	ldr	r3, [r7, #12]
 8104e5e:	2200      	movs	r2, #0
 8104e60:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8104e62:	68fb      	ldr	r3, [r7, #12]
 8104e64:	2200      	movs	r2, #0
 8104e66:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104e68:	68fb      	ldr	r3, [r7, #12]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	685b      	ldr	r3, [r3, #4]
 8104e6e:	0c1b      	lsrs	r3, r3, #16
 8104e70:	041b      	lsls	r3, r3, #16
 8104e72:	8879      	ldrh	r1, [r7, #2]
 8104e74:	68fa      	ldr	r2, [r7, #12]
 8104e76:	6812      	ldr	r2, [r2, #0]
 8104e78:	430b      	orrs	r3, r1
 8104e7a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8104e7c:	68fb      	ldr	r3, [r7, #12]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	681a      	ldr	r2, [r3, #0]
 8104e82:	68fb      	ldr	r3, [r7, #12]
 8104e84:	681b      	ldr	r3, [r3, #0]
 8104e86:	f042 0201 	orr.w	r2, r2, #1
 8104e8a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104e8c:	68fb      	ldr	r3, [r7, #12]
 8104e8e:	685b      	ldr	r3, [r3, #4]
 8104e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104e94:	d107      	bne.n	8104ea6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104e96:	68fb      	ldr	r3, [r7, #12]
 8104e98:	681b      	ldr	r3, [r3, #0]
 8104e9a:	681a      	ldr	r2, [r3, #0]
 8104e9c:	68fb      	ldr	r3, [r7, #12]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104ea4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104ea6:	68fb      	ldr	r3, [r7, #12]
 8104ea8:	68db      	ldr	r3, [r3, #12]
 8104eaa:	2b0f      	cmp	r3, #15
 8104eac:	d970      	bls.n	8104f90 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104eae:	e068      	b.n	8104f82 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104eb0:	68fb      	ldr	r3, [r7, #12]
 8104eb2:	681b      	ldr	r3, [r3, #0]
 8104eb4:	695b      	ldr	r3, [r3, #20]
 8104eb6:	f003 0302 	and.w	r3, r3, #2
 8104eba:	2b02      	cmp	r3, #2
 8104ebc:	d11a      	bne.n	8104ef4 <HAL_SPI_TransmitReceive+0x18c>
 8104ebe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104ec0:	2b00      	cmp	r3, #0
 8104ec2:	d017      	beq.n	8104ef4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104ec4:	68fb      	ldr	r3, [r7, #12]
 8104ec6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104ec8:	68fb      	ldr	r3, [r7, #12]
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	6812      	ldr	r2, [r2, #0]
 8104ece:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104ed0:	68fb      	ldr	r3, [r7, #12]
 8104ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ed4:	1d1a      	adds	r2, r3, #4
 8104ed6:	68fb      	ldr	r3, [r7, #12]
 8104ed8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8104eda:	68fb      	ldr	r3, [r7, #12]
 8104edc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104ee0:	b29b      	uxth	r3, r3
 8104ee2:	3b01      	subs	r3, #1
 8104ee4:	b29a      	uxth	r2, r3
 8104ee6:	68fb      	ldr	r3, [r7, #12]
 8104ee8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104eec:	68fb      	ldr	r3, [r7, #12]
 8104eee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104ef2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8104ef4:	68fb      	ldr	r3, [r7, #12]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	695a      	ldr	r2, [r3, #20]
 8104efa:	f248 0308 	movw	r3, #32776	; 0x8008
 8104efe:	4013      	ands	r3, r2
 8104f00:	2b00      	cmp	r3, #0
 8104f02:	d01a      	beq.n	8104f3a <HAL_SPI_TransmitReceive+0x1d2>
 8104f04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104f06:	2b00      	cmp	r3, #0
 8104f08:	d017      	beq.n	8104f3a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104f0a:	68fb      	ldr	r3, [r7, #12]
 8104f0c:	681a      	ldr	r2, [r3, #0]
 8104f0e:	68fb      	ldr	r3, [r7, #12]
 8104f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104f12:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104f14:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104f16:	68fb      	ldr	r3, [r7, #12]
 8104f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104f1a:	1d1a      	adds	r2, r3, #4
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8104f20:	68fb      	ldr	r3, [r7, #12]
 8104f22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104f26:	b29b      	uxth	r3, r3
 8104f28:	3b01      	subs	r3, #1
 8104f2a:	b29a      	uxth	r2, r3
 8104f2c:	68fb      	ldr	r3, [r7, #12]
 8104f2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104f32:	68fb      	ldr	r3, [r7, #12]
 8104f34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104f38:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104f3a:	f7fd f925 	bl	8102188 <HAL_GetTick>
 8104f3e:	4602      	mov	r2, r0
 8104f40:	69fb      	ldr	r3, [r7, #28]
 8104f42:	1ad3      	subs	r3, r2, r3
 8104f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104f46:	429a      	cmp	r2, r3
 8104f48:	d803      	bhi.n	8104f52 <HAL_SPI_TransmitReceive+0x1ea>
 8104f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104f50:	d102      	bne.n	8104f58 <HAL_SPI_TransmitReceive+0x1f0>
 8104f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f54:	2b00      	cmp	r3, #0
 8104f56:	d114      	bne.n	8104f82 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104f58:	68f8      	ldr	r0, [r7, #12]
 8104f5a:	f000 f9ee 	bl	810533a <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104f5e:	68fb      	ldr	r3, [r7, #12]
 8104f60:	2200      	movs	r2, #0
 8104f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104f66:	68fb      	ldr	r3, [r7, #12]
 8104f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104f6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104f70:	68fb      	ldr	r3, [r7, #12]
 8104f72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104f76:	68fb      	ldr	r3, [r7, #12]
 8104f78:	2201      	movs	r2, #1
 8104f7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104f7e:	2303      	movs	r3, #3
 8104f80:	e1d7      	b.n	8105332 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104f82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104f84:	2b00      	cmp	r3, #0
 8104f86:	d193      	bne.n	8104eb0 <HAL_SPI_TransmitReceive+0x148>
 8104f88:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104f8a:	2b00      	cmp	r3, #0
 8104f8c:	d190      	bne.n	8104eb0 <HAL_SPI_TransmitReceive+0x148>
 8104f8e:	e1a9      	b.n	81052e4 <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104f90:	68fb      	ldr	r3, [r7, #12]
 8104f92:	68db      	ldr	r3, [r3, #12]
 8104f94:	2b07      	cmp	r3, #7
 8104f96:	f240 819d 	bls.w	81052d4 <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104f9a:	e0a6      	b.n	81050ea <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	695b      	ldr	r3, [r3, #20]
 8104fa2:	f003 0302 	and.w	r3, r3, #2
 8104fa6:	2b02      	cmp	r3, #2
 8104fa8:	d139      	bne.n	810501e <HAL_SPI_TransmitReceive+0x2b6>
 8104faa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104fac:	2b00      	cmp	r3, #0
 8104fae:	d036      	beq.n	810501e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104fb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104fb2:	2b01      	cmp	r3, #1
 8104fb4:	d91c      	bls.n	8104ff0 <HAL_SPI_TransmitReceive+0x288>
 8104fb6:	68fb      	ldr	r3, [r7, #12]
 8104fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104fba:	2b00      	cmp	r3, #0
 8104fbc:	d018      	beq.n	8104ff0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104fbe:	68fb      	ldr	r3, [r7, #12]
 8104fc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104fc2:	68fb      	ldr	r3, [r7, #12]
 8104fc4:	681b      	ldr	r3, [r3, #0]
 8104fc6:	6812      	ldr	r2, [r2, #0]
 8104fc8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104fca:	68fb      	ldr	r3, [r7, #12]
 8104fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fce:	1d1a      	adds	r2, r3, #4
 8104fd0:	68fb      	ldr	r3, [r7, #12]
 8104fd2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104fd4:	68fb      	ldr	r3, [r7, #12]
 8104fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104fda:	b29b      	uxth	r3, r3
 8104fdc:	3b02      	subs	r3, #2
 8104fde:	b29a      	uxth	r2, r3
 8104fe0:	68fb      	ldr	r3, [r7, #12]
 8104fe2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104fe6:	68fb      	ldr	r3, [r7, #12]
 8104fe8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104fec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8104fee:	e016      	b.n	810501e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104ff0:	68fb      	ldr	r3, [r7, #12]
 8104ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ff4:	881a      	ldrh	r2, [r3, #0]
 8104ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104ff8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104ffa:	68fb      	ldr	r3, [r7, #12]
 8104ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ffe:	1c9a      	adds	r2, r3, #2
 8105000:	68fb      	ldr	r3, [r7, #12]
 8105002:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8105004:	68fb      	ldr	r3, [r7, #12]
 8105006:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810500a:	b29b      	uxth	r3, r3
 810500c:	3b01      	subs	r3, #1
 810500e:	b29a      	uxth	r2, r3
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105016:	68fb      	ldr	r3, [r7, #12]
 8105018:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810501c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 810501e:	68fb      	ldr	r3, [r7, #12]
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	695b      	ldr	r3, [r3, #20]
 8105024:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105028:	2b00      	cmp	r3, #0
 810502a:	d03a      	beq.n	81050a2 <HAL_SPI_TransmitReceive+0x33a>
 810502c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810502e:	2b00      	cmp	r3, #0
 8105030:	d037      	beq.n	81050a2 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105032:	68fb      	ldr	r3, [r7, #12]
 8105034:	681b      	ldr	r3, [r3, #0]
 8105036:	695b      	ldr	r3, [r3, #20]
 8105038:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810503c:	2b00      	cmp	r3, #0
 810503e:	d018      	beq.n	8105072 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105040:	68fb      	ldr	r3, [r7, #12]
 8105042:	681a      	ldr	r2, [r3, #0]
 8105044:	68fb      	ldr	r3, [r7, #12]
 8105046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105048:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810504a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810504c:	68fb      	ldr	r3, [r7, #12]
 810504e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105050:	1d1a      	adds	r2, r3, #4
 8105052:	68fb      	ldr	r3, [r7, #12]
 8105054:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105056:	68fb      	ldr	r3, [r7, #12]
 8105058:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810505c:	b29b      	uxth	r3, r3
 810505e:	3b02      	subs	r3, #2
 8105060:	b29a      	uxth	r2, r3
 8105062:	68fb      	ldr	r3, [r7, #12]
 8105064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105068:	68fb      	ldr	r3, [r7, #12]
 810506a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810506e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105070:	e017      	b.n	81050a2 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105072:	68fb      	ldr	r3, [r7, #12]
 8105074:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105076:	6a3a      	ldr	r2, [r7, #32]
 8105078:	8812      	ldrh	r2, [r2, #0]
 810507a:	b292      	uxth	r2, r2
 810507c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810507e:	68fb      	ldr	r3, [r7, #12]
 8105080:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105082:	1c9a      	adds	r2, r3, #2
 8105084:	68fb      	ldr	r3, [r7, #12]
 8105086:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8105088:	68fb      	ldr	r3, [r7, #12]
 810508a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810508e:	b29b      	uxth	r3, r3
 8105090:	3b01      	subs	r3, #1
 8105092:	b29a      	uxth	r2, r3
 8105094:	68fb      	ldr	r3, [r7, #12]
 8105096:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810509a:	68fb      	ldr	r3, [r7, #12]
 810509c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81050a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81050a2:	f7fd f871 	bl	8102188 <HAL_GetTick>
 81050a6:	4602      	mov	r2, r0
 81050a8:	69fb      	ldr	r3, [r7, #28]
 81050aa:	1ad3      	subs	r3, r2, r3
 81050ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81050ae:	429a      	cmp	r2, r3
 81050b0:	d803      	bhi.n	81050ba <HAL_SPI_TransmitReceive+0x352>
 81050b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81050b8:	d102      	bne.n	81050c0 <HAL_SPI_TransmitReceive+0x358>
 81050ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050bc:	2b00      	cmp	r3, #0
 81050be:	d114      	bne.n	81050ea <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81050c0:	68f8      	ldr	r0, [r7, #12]
 81050c2:	f000 f93a 	bl	810533a <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81050c6:	68fb      	ldr	r3, [r7, #12]
 81050c8:	2200      	movs	r2, #0
 81050ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81050ce:	68fb      	ldr	r3, [r7, #12]
 81050d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81050d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81050d8:	68fb      	ldr	r3, [r7, #12]
 81050da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81050de:	68fb      	ldr	r3, [r7, #12]
 81050e0:	2201      	movs	r2, #1
 81050e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81050e6:	2303      	movs	r3, #3
 81050e8:	e123      	b.n	8105332 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81050ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81050ec:	2b00      	cmp	r3, #0
 81050ee:	f47f af55 	bne.w	8104f9c <HAL_SPI_TransmitReceive+0x234>
 81050f2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81050f4:	2b00      	cmp	r3, #0
 81050f6:	f47f af51 	bne.w	8104f9c <HAL_SPI_TransmitReceive+0x234>
 81050fa:	e0f3      	b.n	81052e4 <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81050fc:	68fb      	ldr	r3, [r7, #12]
 81050fe:	681b      	ldr	r3, [r3, #0]
 8105100:	695b      	ldr	r3, [r3, #20]
 8105102:	f003 0302 	and.w	r3, r3, #2
 8105106:	2b02      	cmp	r3, #2
 8105108:	d15a      	bne.n	81051c0 <HAL_SPI_TransmitReceive+0x458>
 810510a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810510c:	2b00      	cmp	r3, #0
 810510e:	d057      	beq.n	81051c0 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8105110:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105112:	2b03      	cmp	r3, #3
 8105114:	d91c      	bls.n	8105150 <HAL_SPI_TransmitReceive+0x3e8>
 8105116:	68fb      	ldr	r3, [r7, #12]
 8105118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810511a:	2b40      	cmp	r3, #64	; 0x40
 810511c:	d918      	bls.n	8105150 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810511e:	68fb      	ldr	r3, [r7, #12]
 8105120:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105122:	68fb      	ldr	r3, [r7, #12]
 8105124:	681b      	ldr	r3, [r3, #0]
 8105126:	6812      	ldr	r2, [r2, #0]
 8105128:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810512a:	68fb      	ldr	r3, [r7, #12]
 810512c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810512e:	1d1a      	adds	r2, r3, #4
 8105130:	68fb      	ldr	r3, [r7, #12]
 8105132:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8105134:	68fb      	ldr	r3, [r7, #12]
 8105136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810513a:	b29b      	uxth	r3, r3
 810513c:	3b04      	subs	r3, #4
 810513e:	b29a      	uxth	r2, r3
 8105140:	68fb      	ldr	r3, [r7, #12]
 8105142:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105146:	68fb      	ldr	r3, [r7, #12]
 8105148:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810514c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810514e:	e037      	b.n	81051c0 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105150:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105152:	2b01      	cmp	r3, #1
 8105154:	d91b      	bls.n	810518e <HAL_SPI_TransmitReceive+0x426>
 8105156:	68fb      	ldr	r3, [r7, #12]
 8105158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810515a:	2b00      	cmp	r3, #0
 810515c:	d017      	beq.n	810518e <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810515e:	68fb      	ldr	r3, [r7, #12]
 8105160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105162:	881a      	ldrh	r2, [r3, #0]
 8105164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105166:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8105168:	68fb      	ldr	r3, [r7, #12]
 810516a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810516c:	1c9a      	adds	r2, r3, #2
 810516e:	68fb      	ldr	r3, [r7, #12]
 8105170:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8105172:	68fb      	ldr	r3, [r7, #12]
 8105174:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105178:	b29b      	uxth	r3, r3
 810517a:	3b02      	subs	r3, #2
 810517c:	b29a      	uxth	r2, r3
 810517e:	68fb      	ldr	r3, [r7, #12]
 8105180:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105184:	68fb      	ldr	r3, [r7, #12]
 8105186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810518a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810518c:	e018      	b.n	81051c0 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810518e:	68fb      	ldr	r3, [r7, #12]
 8105190:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105192:	68fb      	ldr	r3, [r7, #12]
 8105194:	681b      	ldr	r3, [r3, #0]
 8105196:	3320      	adds	r3, #32
 8105198:	7812      	ldrb	r2, [r2, #0]
 810519a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810519c:	68fb      	ldr	r3, [r7, #12]
 810519e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81051a0:	1c5a      	adds	r2, r3, #1
 81051a2:	68fb      	ldr	r3, [r7, #12]
 81051a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81051a6:	68fb      	ldr	r3, [r7, #12]
 81051a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81051ac:	b29b      	uxth	r3, r3
 81051ae:	3b01      	subs	r3, #1
 81051b0:	b29a      	uxth	r2, r3
 81051b2:	68fb      	ldr	r3, [r7, #12]
 81051b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81051b8:	68fb      	ldr	r3, [r7, #12]
 81051ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81051be:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 81051c0:	68fb      	ldr	r3, [r7, #12]
 81051c2:	681b      	ldr	r3, [r3, #0]
 81051c4:	695b      	ldr	r3, [r3, #20]
 81051c6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 81051ca:	2b00      	cmp	r3, #0
 81051cc:	d05e      	beq.n	810528c <HAL_SPI_TransmitReceive+0x524>
 81051ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81051d0:	2b00      	cmp	r3, #0
 81051d2:	d05b      	beq.n	810528c <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 81051d4:	68fb      	ldr	r3, [r7, #12]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	695b      	ldr	r3, [r3, #20]
 81051da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81051de:	2b00      	cmp	r3, #0
 81051e0:	d018      	beq.n	8105214 <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81051e2:	68fb      	ldr	r3, [r7, #12]
 81051e4:	681a      	ldr	r2, [r3, #0]
 81051e6:	68fb      	ldr	r3, [r7, #12]
 81051e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81051ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81051ec:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81051ee:	68fb      	ldr	r3, [r7, #12]
 81051f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81051f2:	1d1a      	adds	r2, r3, #4
 81051f4:	68fb      	ldr	r3, [r7, #12]
 81051f6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 81051f8:	68fb      	ldr	r3, [r7, #12]
 81051fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81051fe:	b29b      	uxth	r3, r3
 8105200:	3b04      	subs	r3, #4
 8105202:	b29a      	uxth	r2, r3
 8105204:	68fb      	ldr	r3, [r7, #12]
 8105206:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810520a:	68fb      	ldr	r3, [r7, #12]
 810520c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105210:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105212:	e03b      	b.n	810528c <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8105214:	68fb      	ldr	r3, [r7, #12]
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	695b      	ldr	r3, [r3, #20]
 810521a:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810521e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105222:	d918      	bls.n	8105256 <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105224:	68fb      	ldr	r3, [r7, #12]
 8105226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105228:	6a3a      	ldr	r2, [r7, #32]
 810522a:	8812      	ldrh	r2, [r2, #0]
 810522c:	b292      	uxth	r2, r2
 810522e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105230:	68fb      	ldr	r3, [r7, #12]
 8105232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105234:	1c9a      	adds	r2, r3, #2
 8105236:	68fb      	ldr	r3, [r7, #12]
 8105238:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810523a:	68fb      	ldr	r3, [r7, #12]
 810523c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105240:	b29b      	uxth	r3, r3
 8105242:	3b02      	subs	r3, #2
 8105244:	b29a      	uxth	r2, r3
 8105246:	68fb      	ldr	r3, [r7, #12]
 8105248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810524c:	68fb      	ldr	r3, [r7, #12]
 810524e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105252:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105254:	e01a      	b.n	810528c <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105256:	68fb      	ldr	r3, [r7, #12]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810525e:	68fb      	ldr	r3, [r7, #12]
 8105260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105262:	7812      	ldrb	r2, [r2, #0]
 8105264:	b2d2      	uxtb	r2, r2
 8105266:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105268:	68fb      	ldr	r3, [r7, #12]
 810526a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810526c:	1c5a      	adds	r2, r3, #1
 810526e:	68fb      	ldr	r3, [r7, #12]
 8105270:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8105272:	68fb      	ldr	r3, [r7, #12]
 8105274:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105278:	b29b      	uxth	r3, r3
 810527a:	3b01      	subs	r3, #1
 810527c:	b29a      	uxth	r2, r3
 810527e:	68fb      	ldr	r3, [r7, #12]
 8105280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105284:	68fb      	ldr	r3, [r7, #12]
 8105286:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810528a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810528c:	f7fc ff7c 	bl	8102188 <HAL_GetTick>
 8105290:	4602      	mov	r2, r0
 8105292:	69fb      	ldr	r3, [r7, #28]
 8105294:	1ad3      	subs	r3, r2, r3
 8105296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105298:	429a      	cmp	r2, r3
 810529a:	d803      	bhi.n	81052a4 <HAL_SPI_TransmitReceive+0x53c>
 810529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81052a2:	d102      	bne.n	81052aa <HAL_SPI_TransmitReceive+0x542>
 81052a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81052a6:	2b00      	cmp	r3, #0
 81052a8:	d114      	bne.n	81052d4 <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81052aa:	68f8      	ldr	r0, [r7, #12]
 81052ac:	f000 f845 	bl	810533a <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81052b0:	68fb      	ldr	r3, [r7, #12]
 81052b2:	2200      	movs	r2, #0
 81052b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81052b8:	68fb      	ldr	r3, [r7, #12]
 81052ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81052be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81052c2:	68fb      	ldr	r3, [r7, #12]
 81052c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81052c8:	68fb      	ldr	r3, [r7, #12]
 81052ca:	2201      	movs	r2, #1
 81052cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81052d0:	2303      	movs	r3, #3
 81052d2:	e02e      	b.n	8105332 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81052d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81052d6:	2b00      	cmp	r3, #0
 81052d8:	f47f af10 	bne.w	81050fc <HAL_SPI_TransmitReceive+0x394>
 81052dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81052de:	2b00      	cmp	r3, #0
 81052e0:	f47f af0c 	bne.w	81050fc <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81052e6:	9300      	str	r3, [sp, #0]
 81052e8:	69fb      	ldr	r3, [r7, #28]
 81052ea:	2200      	movs	r2, #0
 81052ec:	2108      	movs	r1, #8
 81052ee:	68f8      	ldr	r0, [r7, #12]
 81052f0:	f000 f8c3 	bl	810547a <SPI_WaitOnFlagUntilTimeout>
 81052f4:	4603      	mov	r3, r0
 81052f6:	2b00      	cmp	r3, #0
 81052f8:	d007      	beq.n	810530a <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81052fa:	68fb      	ldr	r3, [r7, #12]
 81052fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105300:	f043 0220 	orr.w	r2, r3, #32
 8105304:	68fb      	ldr	r3, [r7, #12]
 8105306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810530a:	68f8      	ldr	r0, [r7, #12]
 810530c:	f000 f815 	bl	810533a <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105310:	68fb      	ldr	r3, [r7, #12]
 8105312:	2200      	movs	r2, #0
 8105314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105318:	68fb      	ldr	r3, [r7, #12]
 810531a:	2201      	movs	r2, #1
 810531c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105320:	68fb      	ldr	r3, [r7, #12]
 8105322:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105326:	2b00      	cmp	r3, #0
 8105328:	d001      	beq.n	810532e <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 810532a:	2301      	movs	r3, #1
 810532c:	e001      	b.n	8105332 <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 810532e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8105332:	4618      	mov	r0, r3
 8105334:	3730      	adds	r7, #48	; 0x30
 8105336:	46bd      	mov	sp, r7
 8105338:	bd80      	pop	{r7, pc}

0810533a <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810533a:	b480      	push	{r7}
 810533c:	b085      	sub	sp, #20
 810533e:	af00      	add	r7, sp, #0
 8105340:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8105342:	687b      	ldr	r3, [r7, #4]
 8105344:	681b      	ldr	r3, [r3, #0]
 8105346:	695b      	ldr	r3, [r3, #20]
 8105348:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810534a:	687b      	ldr	r3, [r7, #4]
 810534c:	681b      	ldr	r3, [r3, #0]
 810534e:	699a      	ldr	r2, [r3, #24]
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	f042 0208 	orr.w	r2, r2, #8
 8105358:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	681b      	ldr	r3, [r3, #0]
 810535e:	699a      	ldr	r2, [r3, #24]
 8105360:	687b      	ldr	r3, [r7, #4]
 8105362:	681b      	ldr	r3, [r3, #0]
 8105364:	f042 0210 	orr.w	r2, r2, #16
 8105368:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810536a:	687b      	ldr	r3, [r7, #4]
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	681a      	ldr	r2, [r3, #0]
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	f022 0201 	bic.w	r2, r2, #1
 8105378:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	681b      	ldr	r3, [r3, #0]
 810537e:	691b      	ldr	r3, [r3, #16]
 8105380:	687a      	ldr	r2, [r7, #4]
 8105382:	6812      	ldr	r2, [r2, #0]
 8105384:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8105388:	f023 0303 	bic.w	r3, r3, #3
 810538c:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	681b      	ldr	r3, [r3, #0]
 8105392:	689a      	ldr	r2, [r3, #8]
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	681b      	ldr	r3, [r3, #0]
 8105398:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810539c:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810539e:	687b      	ldr	r3, [r7, #4]
 81053a0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81053a4:	b2db      	uxtb	r3, r3
 81053a6:	2b04      	cmp	r3, #4
 81053a8:	d014      	beq.n	81053d4 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81053aa:	68fb      	ldr	r3, [r7, #12]
 81053ac:	f003 0320 	and.w	r3, r3, #32
 81053b0:	2b00      	cmp	r3, #0
 81053b2:	d00f      	beq.n	81053d4 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81053b4:	687b      	ldr	r3, [r7, #4]
 81053b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81053ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81053be:	687b      	ldr	r3, [r7, #4]
 81053c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	681b      	ldr	r3, [r3, #0]
 81053c8:	699a      	ldr	r2, [r3, #24]
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	f042 0220 	orr.w	r2, r2, #32
 81053d2:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81053da:	b2db      	uxtb	r3, r3
 81053dc:	2b03      	cmp	r3, #3
 81053de:	d014      	beq.n	810540a <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81053e0:	68fb      	ldr	r3, [r7, #12]
 81053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81053e6:	2b00      	cmp	r3, #0
 81053e8:	d00f      	beq.n	810540a <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81053ea:	687b      	ldr	r3, [r7, #4]
 81053ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81053f0:	f043 0204 	orr.w	r2, r3, #4
 81053f4:	687b      	ldr	r3, [r7, #4]
 81053f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81053fa:	687b      	ldr	r3, [r7, #4]
 81053fc:	681b      	ldr	r3, [r3, #0]
 81053fe:	699a      	ldr	r2, [r3, #24]
 8105400:	687b      	ldr	r3, [r7, #4]
 8105402:	681b      	ldr	r3, [r3, #0]
 8105404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105408:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810540a:	68fb      	ldr	r3, [r7, #12]
 810540c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105410:	2b00      	cmp	r3, #0
 8105412:	d00f      	beq.n	8105434 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8105414:	687b      	ldr	r3, [r7, #4]
 8105416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810541a:	f043 0201 	orr.w	r2, r3, #1
 810541e:	687b      	ldr	r3, [r7, #4]
 8105420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	699a      	ldr	r2, [r3, #24]
 810542a:	687b      	ldr	r3, [r7, #4]
 810542c:	681b      	ldr	r3, [r3, #0]
 810542e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105432:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8105434:	68fb      	ldr	r3, [r7, #12]
 8105436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810543a:	2b00      	cmp	r3, #0
 810543c:	d00f      	beq.n	810545e <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810543e:	687b      	ldr	r3, [r7, #4]
 8105440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105444:	f043 0208 	orr.w	r2, r3, #8
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810544e:	687b      	ldr	r3, [r7, #4]
 8105450:	681b      	ldr	r3, [r3, #0]
 8105452:	699a      	ldr	r2, [r3, #24]
 8105454:	687b      	ldr	r3, [r7, #4]
 8105456:	681b      	ldr	r3, [r3, #0]
 8105458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810545c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810545e:	687b      	ldr	r3, [r7, #4]
 8105460:	2200      	movs	r2, #0
 8105462:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8105466:	687b      	ldr	r3, [r7, #4]
 8105468:	2200      	movs	r2, #0
 810546a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810546e:	bf00      	nop
 8105470:	3714      	adds	r7, #20
 8105472:	46bd      	mov	sp, r7
 8105474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105478:	4770      	bx	lr

0810547a <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 810547a:	b580      	push	{r7, lr}
 810547c:	b084      	sub	sp, #16
 810547e:	af00      	add	r7, sp, #0
 8105480:	60f8      	str	r0, [r7, #12]
 8105482:	60b9      	str	r1, [r7, #8]
 8105484:	603b      	str	r3, [r7, #0]
 8105486:	4613      	mov	r3, r2
 8105488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810548a:	e010      	b.n	81054ae <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810548c:	f7fc fe7c 	bl	8102188 <HAL_GetTick>
 8105490:	4602      	mov	r2, r0
 8105492:	683b      	ldr	r3, [r7, #0]
 8105494:	1ad3      	subs	r3, r2, r3
 8105496:	69ba      	ldr	r2, [r7, #24]
 8105498:	429a      	cmp	r2, r3
 810549a:	d803      	bhi.n	81054a4 <SPI_WaitOnFlagUntilTimeout+0x2a>
 810549c:	69bb      	ldr	r3, [r7, #24]
 810549e:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054a2:	d102      	bne.n	81054aa <SPI_WaitOnFlagUntilTimeout+0x30>
 81054a4:	69bb      	ldr	r3, [r7, #24]
 81054a6:	2b00      	cmp	r3, #0
 81054a8:	d101      	bne.n	81054ae <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81054aa:	2303      	movs	r3, #3
 81054ac:	e00f      	b.n	81054ce <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81054ae:	68fb      	ldr	r3, [r7, #12]
 81054b0:	681b      	ldr	r3, [r3, #0]
 81054b2:	695a      	ldr	r2, [r3, #20]
 81054b4:	68bb      	ldr	r3, [r7, #8]
 81054b6:	4013      	ands	r3, r2
 81054b8:	68ba      	ldr	r2, [r7, #8]
 81054ba:	429a      	cmp	r2, r3
 81054bc:	bf0c      	ite	eq
 81054be:	2301      	moveq	r3, #1
 81054c0:	2300      	movne	r3, #0
 81054c2:	b2db      	uxtb	r3, r3
 81054c4:	461a      	mov	r2, r3
 81054c6:	79fb      	ldrb	r3, [r7, #7]
 81054c8:	429a      	cmp	r2, r3
 81054ca:	d0df      	beq.n	810548c <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81054cc:	2300      	movs	r3, #0
}
 81054ce:	4618      	mov	r0, r3
 81054d0:	3710      	adds	r7, #16
 81054d2:	46bd      	mov	sp, r7
 81054d4:	bd80      	pop	{r7, pc}

081054d6 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81054d6:	b480      	push	{r7}
 81054d8:	b085      	sub	sp, #20
 81054da:	af00      	add	r7, sp, #0
 81054dc:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81054de:	687b      	ldr	r3, [r7, #4]
 81054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81054e2:	095b      	lsrs	r3, r3, #5
 81054e4:	3301      	adds	r3, #1
 81054e6:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81054e8:	687b      	ldr	r3, [r7, #4]
 81054ea:	68db      	ldr	r3, [r3, #12]
 81054ec:	3301      	adds	r3, #1
 81054ee:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81054f0:	68bb      	ldr	r3, [r7, #8]
 81054f2:	3307      	adds	r3, #7
 81054f4:	08db      	lsrs	r3, r3, #3
 81054f6:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81054f8:	68bb      	ldr	r3, [r7, #8]
 81054fa:	68fa      	ldr	r2, [r7, #12]
 81054fc:	fb02 f303 	mul.w	r3, r2, r3
}
 8105500:	4618      	mov	r0, r3
 8105502:	3714      	adds	r7, #20
 8105504:	46bd      	mov	sp, r7
 8105506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810550a:	4770      	bx	lr

0810550c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810550c:	b580      	push	{r7, lr}
 810550e:	b082      	sub	sp, #8
 8105510:	af00      	add	r7, sp, #0
 8105512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105514:	687b      	ldr	r3, [r7, #4]
 8105516:	2b00      	cmp	r3, #0
 8105518:	d101      	bne.n	810551e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810551a:	2301      	movs	r3, #1
 810551c:	e042      	b.n	81055a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810551e:	687b      	ldr	r3, [r7, #4]
 8105520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105524:	2b00      	cmp	r3, #0
 8105526:	d106      	bne.n	8105536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105528:	687b      	ldr	r3, [r7, #4]
 810552a:	2200      	movs	r2, #0
 810552c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105530:	6878      	ldr	r0, [r7, #4]
 8105532:	f7fc fbf5 	bl	8101d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8105536:	687b      	ldr	r3, [r7, #4]
 8105538:	2224      	movs	r2, #36	; 0x24
 810553a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	681a      	ldr	r2, [r3, #0]
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	681b      	ldr	r3, [r3, #0]
 8105548:	f022 0201 	bic.w	r2, r2, #1
 810554c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810554e:	6878      	ldr	r0, [r7, #4]
 8105550:	f000 f996 	bl	8105880 <UART_SetConfig>
 8105554:	4603      	mov	r3, r0
 8105556:	2b01      	cmp	r3, #1
 8105558:	d101      	bne.n	810555e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810555a:	2301      	movs	r3, #1
 810555c:	e022      	b.n	81055a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105562:	2b00      	cmp	r3, #0
 8105564:	d002      	beq.n	810556c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8105566:	6878      	ldr	r0, [r7, #4]
 8105568:	f000 feea 	bl	8106340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810556c:	687b      	ldr	r3, [r7, #4]
 810556e:	681b      	ldr	r3, [r3, #0]
 8105570:	685a      	ldr	r2, [r3, #4]
 8105572:	687b      	ldr	r3, [r7, #4]
 8105574:	681b      	ldr	r3, [r3, #0]
 8105576:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810557a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810557c:	687b      	ldr	r3, [r7, #4]
 810557e:	681b      	ldr	r3, [r3, #0]
 8105580:	689a      	ldr	r2, [r3, #8]
 8105582:	687b      	ldr	r3, [r7, #4]
 8105584:	681b      	ldr	r3, [r3, #0]
 8105586:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810558a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810558c:	687b      	ldr	r3, [r7, #4]
 810558e:	681b      	ldr	r3, [r3, #0]
 8105590:	681a      	ldr	r2, [r3, #0]
 8105592:	687b      	ldr	r3, [r7, #4]
 8105594:	681b      	ldr	r3, [r3, #0]
 8105596:	f042 0201 	orr.w	r2, r2, #1
 810559a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810559c:	6878      	ldr	r0, [r7, #4]
 810559e:	f000 ff71 	bl	8106484 <UART_CheckIdleState>
 81055a2:	4603      	mov	r3, r0
}
 81055a4:	4618      	mov	r0, r3
 81055a6:	3708      	adds	r7, #8
 81055a8:	46bd      	mov	sp, r7
 81055aa:	bd80      	pop	{r7, pc}

081055ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81055ac:	b580      	push	{r7, lr}
 81055ae:	b08a      	sub	sp, #40	; 0x28
 81055b0:	af02      	add	r7, sp, #8
 81055b2:	60f8      	str	r0, [r7, #12]
 81055b4:	60b9      	str	r1, [r7, #8]
 81055b6:	603b      	str	r3, [r7, #0]
 81055b8:	4613      	mov	r3, r2
 81055ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81055c2:	2b20      	cmp	r3, #32
 81055c4:	f040 8083 	bne.w	81056ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81055c8:	68bb      	ldr	r3, [r7, #8]
 81055ca:	2b00      	cmp	r3, #0
 81055cc:	d002      	beq.n	81055d4 <HAL_UART_Transmit+0x28>
 81055ce:	88fb      	ldrh	r3, [r7, #6]
 81055d0:	2b00      	cmp	r3, #0
 81055d2:	d101      	bne.n	81055d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81055d4:	2301      	movs	r3, #1
 81055d6:	e07b      	b.n	81056d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81055d8:	68fb      	ldr	r3, [r7, #12]
 81055da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81055de:	2b01      	cmp	r3, #1
 81055e0:	d101      	bne.n	81055e6 <HAL_UART_Transmit+0x3a>
 81055e2:	2302      	movs	r3, #2
 81055e4:	e074      	b.n	81056d0 <HAL_UART_Transmit+0x124>
 81055e6:	68fb      	ldr	r3, [r7, #12]
 81055e8:	2201      	movs	r2, #1
 81055ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81055ee:	68fb      	ldr	r3, [r7, #12]
 81055f0:	2200      	movs	r2, #0
 81055f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81055f6:	68fb      	ldr	r3, [r7, #12]
 81055f8:	2221      	movs	r2, #33	; 0x21
 81055fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81055fe:	f7fc fdc3 	bl	8102188 <HAL_GetTick>
 8105602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	88fa      	ldrh	r2, [r7, #6]
 8105608:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810560c:	68fb      	ldr	r3, [r7, #12]
 810560e:	88fa      	ldrh	r2, [r7, #6]
 8105610:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105614:	68fb      	ldr	r3, [r7, #12]
 8105616:	689b      	ldr	r3, [r3, #8]
 8105618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810561c:	d108      	bne.n	8105630 <HAL_UART_Transmit+0x84>
 810561e:	68fb      	ldr	r3, [r7, #12]
 8105620:	691b      	ldr	r3, [r3, #16]
 8105622:	2b00      	cmp	r3, #0
 8105624:	d104      	bne.n	8105630 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8105626:	2300      	movs	r3, #0
 8105628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810562a:	68bb      	ldr	r3, [r7, #8]
 810562c:	61bb      	str	r3, [r7, #24]
 810562e:	e003      	b.n	8105638 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8105630:	68bb      	ldr	r3, [r7, #8]
 8105632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105634:	2300      	movs	r3, #0
 8105636:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8105638:	68fb      	ldr	r3, [r7, #12]
 810563a:	2200      	movs	r2, #0
 810563c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8105640:	e02c      	b.n	810569c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8105642:	683b      	ldr	r3, [r7, #0]
 8105644:	9300      	str	r3, [sp, #0]
 8105646:	697b      	ldr	r3, [r7, #20]
 8105648:	2200      	movs	r2, #0
 810564a:	2180      	movs	r1, #128	; 0x80
 810564c:	68f8      	ldr	r0, [r7, #12]
 810564e:	f000 ff64 	bl	810651a <UART_WaitOnFlagUntilTimeout>
 8105652:	4603      	mov	r3, r0
 8105654:	2b00      	cmp	r3, #0
 8105656:	d001      	beq.n	810565c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8105658:	2303      	movs	r3, #3
 810565a:	e039      	b.n	81056d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 810565c:	69fb      	ldr	r3, [r7, #28]
 810565e:	2b00      	cmp	r3, #0
 8105660:	d10b      	bne.n	810567a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8105662:	69bb      	ldr	r3, [r7, #24]
 8105664:	881b      	ldrh	r3, [r3, #0]
 8105666:	461a      	mov	r2, r3
 8105668:	68fb      	ldr	r3, [r7, #12]
 810566a:	681b      	ldr	r3, [r3, #0]
 810566c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105670:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8105672:	69bb      	ldr	r3, [r7, #24]
 8105674:	3302      	adds	r3, #2
 8105676:	61bb      	str	r3, [r7, #24]
 8105678:	e007      	b.n	810568a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810567a:	69fb      	ldr	r3, [r7, #28]
 810567c:	781a      	ldrb	r2, [r3, #0]
 810567e:	68fb      	ldr	r3, [r7, #12]
 8105680:	681b      	ldr	r3, [r3, #0]
 8105682:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8105684:	69fb      	ldr	r3, [r7, #28]
 8105686:	3301      	adds	r3, #1
 8105688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810568a:	68fb      	ldr	r3, [r7, #12]
 810568c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105690:	b29b      	uxth	r3, r3
 8105692:	3b01      	subs	r3, #1
 8105694:	b29a      	uxth	r2, r3
 8105696:	68fb      	ldr	r3, [r7, #12]
 8105698:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 810569c:	68fb      	ldr	r3, [r7, #12]
 810569e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81056a2:	b29b      	uxth	r3, r3
 81056a4:	2b00      	cmp	r3, #0
 81056a6:	d1cc      	bne.n	8105642 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81056a8:	683b      	ldr	r3, [r7, #0]
 81056aa:	9300      	str	r3, [sp, #0]
 81056ac:	697b      	ldr	r3, [r7, #20]
 81056ae:	2200      	movs	r2, #0
 81056b0:	2140      	movs	r1, #64	; 0x40
 81056b2:	68f8      	ldr	r0, [r7, #12]
 81056b4:	f000 ff31 	bl	810651a <UART_WaitOnFlagUntilTimeout>
 81056b8:	4603      	mov	r3, r0
 81056ba:	2b00      	cmp	r3, #0
 81056bc:	d001      	beq.n	81056c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81056be:	2303      	movs	r3, #3
 81056c0:	e006      	b.n	81056d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81056c2:	68fb      	ldr	r3, [r7, #12]
 81056c4:	2220      	movs	r2, #32
 81056c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 81056ca:	2300      	movs	r3, #0
 81056cc:	e000      	b.n	81056d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81056ce:	2302      	movs	r3, #2
  }
}
 81056d0:	4618      	mov	r0, r3
 81056d2:	3720      	adds	r7, #32
 81056d4:	46bd      	mov	sp, r7
 81056d6:	bd80      	pop	{r7, pc}

081056d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81056d8:	b580      	push	{r7, lr}
 81056da:	b08a      	sub	sp, #40	; 0x28
 81056dc:	af02      	add	r7, sp, #8
 81056de:	60f8      	str	r0, [r7, #12]
 81056e0:	60b9      	str	r1, [r7, #8]
 81056e2:	603b      	str	r3, [r7, #0]
 81056e4:	4613      	mov	r3, r2
 81056e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 81056e8:	68fb      	ldr	r3, [r7, #12]
 81056ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81056ee:	2b20      	cmp	r3, #32
 81056f0:	f040 80c0 	bne.w	8105874 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 81056f4:	68bb      	ldr	r3, [r7, #8]
 81056f6:	2b00      	cmp	r3, #0
 81056f8:	d002      	beq.n	8105700 <HAL_UART_Receive+0x28>
 81056fa:	88fb      	ldrh	r3, [r7, #6]
 81056fc:	2b00      	cmp	r3, #0
 81056fe:	d101      	bne.n	8105704 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8105700:	2301      	movs	r3, #1
 8105702:	e0b8      	b.n	8105876 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8105704:	68fb      	ldr	r3, [r7, #12]
 8105706:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810570a:	2b01      	cmp	r3, #1
 810570c:	d101      	bne.n	8105712 <HAL_UART_Receive+0x3a>
 810570e:	2302      	movs	r3, #2
 8105710:	e0b1      	b.n	8105876 <HAL_UART_Receive+0x19e>
 8105712:	68fb      	ldr	r3, [r7, #12]
 8105714:	2201      	movs	r2, #1
 8105716:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810571a:	68fb      	ldr	r3, [r7, #12]
 810571c:	2200      	movs	r2, #0
 810571e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8105722:	68fb      	ldr	r3, [r7, #12]
 8105724:	2222      	movs	r2, #34	; 0x22
 8105726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810572a:	68fb      	ldr	r3, [r7, #12]
 810572c:	2200      	movs	r2, #0
 810572e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105730:	f7fc fd2a 	bl	8102188 <HAL_GetTick>
 8105734:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8105736:	68fb      	ldr	r3, [r7, #12]
 8105738:	88fa      	ldrh	r2, [r7, #6]
 810573a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 810573e:	68fb      	ldr	r3, [r7, #12]
 8105740:	88fa      	ldrh	r2, [r7, #6]
 8105742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8105746:	68fb      	ldr	r3, [r7, #12]
 8105748:	689b      	ldr	r3, [r3, #8]
 810574a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810574e:	d10e      	bne.n	810576e <HAL_UART_Receive+0x96>
 8105750:	68fb      	ldr	r3, [r7, #12]
 8105752:	691b      	ldr	r3, [r3, #16]
 8105754:	2b00      	cmp	r3, #0
 8105756:	d105      	bne.n	8105764 <HAL_UART_Receive+0x8c>
 8105758:	68fb      	ldr	r3, [r7, #12]
 810575a:	f240 12ff 	movw	r2, #511	; 0x1ff
 810575e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105762:	e02d      	b.n	81057c0 <HAL_UART_Receive+0xe8>
 8105764:	68fb      	ldr	r3, [r7, #12]
 8105766:	22ff      	movs	r2, #255	; 0xff
 8105768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810576c:	e028      	b.n	81057c0 <HAL_UART_Receive+0xe8>
 810576e:	68fb      	ldr	r3, [r7, #12]
 8105770:	689b      	ldr	r3, [r3, #8]
 8105772:	2b00      	cmp	r3, #0
 8105774:	d10d      	bne.n	8105792 <HAL_UART_Receive+0xba>
 8105776:	68fb      	ldr	r3, [r7, #12]
 8105778:	691b      	ldr	r3, [r3, #16]
 810577a:	2b00      	cmp	r3, #0
 810577c:	d104      	bne.n	8105788 <HAL_UART_Receive+0xb0>
 810577e:	68fb      	ldr	r3, [r7, #12]
 8105780:	22ff      	movs	r2, #255	; 0xff
 8105782:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105786:	e01b      	b.n	81057c0 <HAL_UART_Receive+0xe8>
 8105788:	68fb      	ldr	r3, [r7, #12]
 810578a:	227f      	movs	r2, #127	; 0x7f
 810578c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105790:	e016      	b.n	81057c0 <HAL_UART_Receive+0xe8>
 8105792:	68fb      	ldr	r3, [r7, #12]
 8105794:	689b      	ldr	r3, [r3, #8]
 8105796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810579a:	d10d      	bne.n	81057b8 <HAL_UART_Receive+0xe0>
 810579c:	68fb      	ldr	r3, [r7, #12]
 810579e:	691b      	ldr	r3, [r3, #16]
 81057a0:	2b00      	cmp	r3, #0
 81057a2:	d104      	bne.n	81057ae <HAL_UART_Receive+0xd6>
 81057a4:	68fb      	ldr	r3, [r7, #12]
 81057a6:	227f      	movs	r2, #127	; 0x7f
 81057a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81057ac:	e008      	b.n	81057c0 <HAL_UART_Receive+0xe8>
 81057ae:	68fb      	ldr	r3, [r7, #12]
 81057b0:	223f      	movs	r2, #63	; 0x3f
 81057b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81057b6:	e003      	b.n	81057c0 <HAL_UART_Receive+0xe8>
 81057b8:	68fb      	ldr	r3, [r7, #12]
 81057ba:	2200      	movs	r2, #0
 81057bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 81057c0:	68fb      	ldr	r3, [r7, #12]
 81057c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81057c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81057c8:	68fb      	ldr	r3, [r7, #12]
 81057ca:	689b      	ldr	r3, [r3, #8]
 81057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81057d0:	d108      	bne.n	81057e4 <HAL_UART_Receive+0x10c>
 81057d2:	68fb      	ldr	r3, [r7, #12]
 81057d4:	691b      	ldr	r3, [r3, #16]
 81057d6:	2b00      	cmp	r3, #0
 81057d8:	d104      	bne.n	81057e4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 81057da:	2300      	movs	r3, #0
 81057dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 81057de:	68bb      	ldr	r3, [r7, #8]
 81057e0:	61bb      	str	r3, [r7, #24]
 81057e2:	e003      	b.n	81057ec <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 81057e4:	68bb      	ldr	r3, [r7, #8]
 81057e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81057e8:	2300      	movs	r3, #0
 81057ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81057ec:	68fb      	ldr	r3, [r7, #12]
 81057ee:	2200      	movs	r2, #0
 81057f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 81057f4:	e032      	b.n	810585c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 81057f6:	683b      	ldr	r3, [r7, #0]
 81057f8:	9300      	str	r3, [sp, #0]
 81057fa:	697b      	ldr	r3, [r7, #20]
 81057fc:	2200      	movs	r2, #0
 81057fe:	2120      	movs	r1, #32
 8105800:	68f8      	ldr	r0, [r7, #12]
 8105802:	f000 fe8a 	bl	810651a <UART_WaitOnFlagUntilTimeout>
 8105806:	4603      	mov	r3, r0
 8105808:	2b00      	cmp	r3, #0
 810580a:	d001      	beq.n	8105810 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 810580c:	2303      	movs	r3, #3
 810580e:	e032      	b.n	8105876 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8105810:	69fb      	ldr	r3, [r7, #28]
 8105812:	2b00      	cmp	r3, #0
 8105814:	d10c      	bne.n	8105830 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8105816:	68fb      	ldr	r3, [r7, #12]
 8105818:	681b      	ldr	r3, [r3, #0]
 810581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810581c:	b29a      	uxth	r2, r3
 810581e:	8a7b      	ldrh	r3, [r7, #18]
 8105820:	4013      	ands	r3, r2
 8105822:	b29a      	uxth	r2, r3
 8105824:	69bb      	ldr	r3, [r7, #24]
 8105826:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8105828:	69bb      	ldr	r3, [r7, #24]
 810582a:	3302      	adds	r3, #2
 810582c:	61bb      	str	r3, [r7, #24]
 810582e:	e00c      	b.n	810584a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8105830:	68fb      	ldr	r3, [r7, #12]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105836:	b2da      	uxtb	r2, r3
 8105838:	8a7b      	ldrh	r3, [r7, #18]
 810583a:	b2db      	uxtb	r3, r3
 810583c:	4013      	ands	r3, r2
 810583e:	b2da      	uxtb	r2, r3
 8105840:	69fb      	ldr	r3, [r7, #28]
 8105842:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8105844:	69fb      	ldr	r3, [r7, #28]
 8105846:	3301      	adds	r3, #1
 8105848:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810584a:	68fb      	ldr	r3, [r7, #12]
 810584c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105850:	b29b      	uxth	r3, r3
 8105852:	3b01      	subs	r3, #1
 8105854:	b29a      	uxth	r2, r3
 8105856:	68fb      	ldr	r3, [r7, #12]
 8105858:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 810585c:	68fb      	ldr	r3, [r7, #12]
 810585e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105862:	b29b      	uxth	r3, r3
 8105864:	2b00      	cmp	r3, #0
 8105866:	d1c6      	bne.n	81057f6 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	2220      	movs	r2, #32
 810586c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8105870:	2300      	movs	r3, #0
 8105872:	e000      	b.n	8105876 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8105874:	2302      	movs	r3, #2
  }
}
 8105876:	4618      	mov	r0, r3
 8105878:	3720      	adds	r7, #32
 810587a:	46bd      	mov	sp, r7
 810587c:	bd80      	pop	{r7, pc}
	...

08105880 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8105880:	b5b0      	push	{r4, r5, r7, lr}
 8105882:	b08e      	sub	sp, #56	; 0x38
 8105884:	af00      	add	r7, sp, #0
 8105886:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8105888:	2300      	movs	r3, #0
 810588a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810588e:	687b      	ldr	r3, [r7, #4]
 8105890:	689a      	ldr	r2, [r3, #8]
 8105892:	687b      	ldr	r3, [r7, #4]
 8105894:	691b      	ldr	r3, [r3, #16]
 8105896:	431a      	orrs	r2, r3
 8105898:	687b      	ldr	r3, [r7, #4]
 810589a:	695b      	ldr	r3, [r3, #20]
 810589c:	431a      	orrs	r2, r3
 810589e:	687b      	ldr	r3, [r7, #4]
 81058a0:	69db      	ldr	r3, [r3, #28]
 81058a2:	4313      	orrs	r3, r2
 81058a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81058a6:	687b      	ldr	r3, [r7, #4]
 81058a8:	681b      	ldr	r3, [r3, #0]
 81058aa:	681a      	ldr	r2, [r3, #0]
 81058ac:	4bc0      	ldr	r3, [pc, #768]	; (8105bb0 <UART_SetConfig+0x330>)
 81058ae:	4013      	ands	r3, r2
 81058b0:	687a      	ldr	r2, [r7, #4]
 81058b2:	6812      	ldr	r2, [r2, #0]
 81058b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81058b6:	430b      	orrs	r3, r1
 81058b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81058ba:	687b      	ldr	r3, [r7, #4]
 81058bc:	681b      	ldr	r3, [r3, #0]
 81058be:	685b      	ldr	r3, [r3, #4]
 81058c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81058c4:	687b      	ldr	r3, [r7, #4]
 81058c6:	68da      	ldr	r2, [r3, #12]
 81058c8:	687b      	ldr	r3, [r7, #4]
 81058ca:	681b      	ldr	r3, [r3, #0]
 81058cc:	430a      	orrs	r2, r1
 81058ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81058d0:	687b      	ldr	r3, [r7, #4]
 81058d2:	699b      	ldr	r3, [r3, #24]
 81058d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81058d6:	687b      	ldr	r3, [r7, #4]
 81058d8:	681b      	ldr	r3, [r3, #0]
 81058da:	4ab6      	ldr	r2, [pc, #728]	; (8105bb4 <UART_SetConfig+0x334>)
 81058dc:	4293      	cmp	r3, r2
 81058de:	d004      	beq.n	81058ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81058e0:	687b      	ldr	r3, [r7, #4]
 81058e2:	6a1b      	ldr	r3, [r3, #32]
 81058e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81058e6:	4313      	orrs	r3, r2
 81058e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81058ea:	687b      	ldr	r3, [r7, #4]
 81058ec:	681b      	ldr	r3, [r3, #0]
 81058ee:	689b      	ldr	r3, [r3, #8]
 81058f0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81058f4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81058f8:	687a      	ldr	r2, [r7, #4]
 81058fa:	6812      	ldr	r2, [r2, #0]
 81058fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81058fe:	430b      	orrs	r3, r1
 8105900:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105902:	687b      	ldr	r3, [r7, #4]
 8105904:	681b      	ldr	r3, [r3, #0]
 8105906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105908:	f023 010f 	bic.w	r1, r3, #15
 810590c:	687b      	ldr	r3, [r7, #4]
 810590e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105910:	687b      	ldr	r3, [r7, #4]
 8105912:	681b      	ldr	r3, [r3, #0]
 8105914:	430a      	orrs	r2, r1
 8105916:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8105918:	687b      	ldr	r3, [r7, #4]
 810591a:	681b      	ldr	r3, [r3, #0]
 810591c:	4aa6      	ldr	r2, [pc, #664]	; (8105bb8 <UART_SetConfig+0x338>)
 810591e:	4293      	cmp	r3, r2
 8105920:	d176      	bne.n	8105a10 <UART_SetConfig+0x190>
 8105922:	4ba6      	ldr	r3, [pc, #664]	; (8105bbc <UART_SetConfig+0x33c>)
 8105924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810592a:	2b28      	cmp	r3, #40	; 0x28
 810592c:	d86c      	bhi.n	8105a08 <UART_SetConfig+0x188>
 810592e:	a201      	add	r2, pc, #4	; (adr r2, 8105934 <UART_SetConfig+0xb4>)
 8105930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105934:	081059d9 	.word	0x081059d9
 8105938:	08105a09 	.word	0x08105a09
 810593c:	08105a09 	.word	0x08105a09
 8105940:	08105a09 	.word	0x08105a09
 8105944:	08105a09 	.word	0x08105a09
 8105948:	08105a09 	.word	0x08105a09
 810594c:	08105a09 	.word	0x08105a09
 8105950:	08105a09 	.word	0x08105a09
 8105954:	081059e1 	.word	0x081059e1
 8105958:	08105a09 	.word	0x08105a09
 810595c:	08105a09 	.word	0x08105a09
 8105960:	08105a09 	.word	0x08105a09
 8105964:	08105a09 	.word	0x08105a09
 8105968:	08105a09 	.word	0x08105a09
 810596c:	08105a09 	.word	0x08105a09
 8105970:	08105a09 	.word	0x08105a09
 8105974:	081059e9 	.word	0x081059e9
 8105978:	08105a09 	.word	0x08105a09
 810597c:	08105a09 	.word	0x08105a09
 8105980:	08105a09 	.word	0x08105a09
 8105984:	08105a09 	.word	0x08105a09
 8105988:	08105a09 	.word	0x08105a09
 810598c:	08105a09 	.word	0x08105a09
 8105990:	08105a09 	.word	0x08105a09
 8105994:	081059f1 	.word	0x081059f1
 8105998:	08105a09 	.word	0x08105a09
 810599c:	08105a09 	.word	0x08105a09
 81059a0:	08105a09 	.word	0x08105a09
 81059a4:	08105a09 	.word	0x08105a09
 81059a8:	08105a09 	.word	0x08105a09
 81059ac:	08105a09 	.word	0x08105a09
 81059b0:	08105a09 	.word	0x08105a09
 81059b4:	081059f9 	.word	0x081059f9
 81059b8:	08105a09 	.word	0x08105a09
 81059bc:	08105a09 	.word	0x08105a09
 81059c0:	08105a09 	.word	0x08105a09
 81059c4:	08105a09 	.word	0x08105a09
 81059c8:	08105a09 	.word	0x08105a09
 81059cc:	08105a09 	.word	0x08105a09
 81059d0:	08105a09 	.word	0x08105a09
 81059d4:	08105a01 	.word	0x08105a01
 81059d8:	2301      	movs	r3, #1
 81059da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059de:	e220      	b.n	8105e22 <UART_SetConfig+0x5a2>
 81059e0:	2304      	movs	r3, #4
 81059e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059e6:	e21c      	b.n	8105e22 <UART_SetConfig+0x5a2>
 81059e8:	2308      	movs	r3, #8
 81059ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059ee:	e218      	b.n	8105e22 <UART_SetConfig+0x5a2>
 81059f0:	2310      	movs	r3, #16
 81059f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059f6:	e214      	b.n	8105e22 <UART_SetConfig+0x5a2>
 81059f8:	2320      	movs	r3, #32
 81059fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81059fe:	e210      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a00:	2340      	movs	r3, #64	; 0x40
 8105a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a06:	e20c      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a08:	2380      	movs	r3, #128	; 0x80
 8105a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a0e:	e208      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a10:	687b      	ldr	r3, [r7, #4]
 8105a12:	681b      	ldr	r3, [r3, #0]
 8105a14:	4a6a      	ldr	r2, [pc, #424]	; (8105bc0 <UART_SetConfig+0x340>)
 8105a16:	4293      	cmp	r3, r2
 8105a18:	d130      	bne.n	8105a7c <UART_SetConfig+0x1fc>
 8105a1a:	4b68      	ldr	r3, [pc, #416]	; (8105bbc <UART_SetConfig+0x33c>)
 8105a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a1e:	f003 0307 	and.w	r3, r3, #7
 8105a22:	2b05      	cmp	r3, #5
 8105a24:	d826      	bhi.n	8105a74 <UART_SetConfig+0x1f4>
 8105a26:	a201      	add	r2, pc, #4	; (adr r2, 8105a2c <UART_SetConfig+0x1ac>)
 8105a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a2c:	08105a45 	.word	0x08105a45
 8105a30:	08105a4d 	.word	0x08105a4d
 8105a34:	08105a55 	.word	0x08105a55
 8105a38:	08105a5d 	.word	0x08105a5d
 8105a3c:	08105a65 	.word	0x08105a65
 8105a40:	08105a6d 	.word	0x08105a6d
 8105a44:	2300      	movs	r3, #0
 8105a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a4a:	e1ea      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a4c:	2304      	movs	r3, #4
 8105a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a52:	e1e6      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a54:	2308      	movs	r3, #8
 8105a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a5a:	e1e2      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a5c:	2310      	movs	r3, #16
 8105a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a62:	e1de      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a64:	2320      	movs	r3, #32
 8105a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a6a:	e1da      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a6c:	2340      	movs	r3, #64	; 0x40
 8105a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a72:	e1d6      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a74:	2380      	movs	r3, #128	; 0x80
 8105a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105a7a:	e1d2      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	4a50      	ldr	r2, [pc, #320]	; (8105bc4 <UART_SetConfig+0x344>)
 8105a82:	4293      	cmp	r3, r2
 8105a84:	d130      	bne.n	8105ae8 <UART_SetConfig+0x268>
 8105a86:	4b4d      	ldr	r3, [pc, #308]	; (8105bbc <UART_SetConfig+0x33c>)
 8105a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a8a:	f003 0307 	and.w	r3, r3, #7
 8105a8e:	2b05      	cmp	r3, #5
 8105a90:	d826      	bhi.n	8105ae0 <UART_SetConfig+0x260>
 8105a92:	a201      	add	r2, pc, #4	; (adr r2, 8105a98 <UART_SetConfig+0x218>)
 8105a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a98:	08105ab1 	.word	0x08105ab1
 8105a9c:	08105ab9 	.word	0x08105ab9
 8105aa0:	08105ac1 	.word	0x08105ac1
 8105aa4:	08105ac9 	.word	0x08105ac9
 8105aa8:	08105ad1 	.word	0x08105ad1
 8105aac:	08105ad9 	.word	0x08105ad9
 8105ab0:	2300      	movs	r3, #0
 8105ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ab6:	e1b4      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ab8:	2304      	movs	r3, #4
 8105aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105abe:	e1b0      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ac0:	2308      	movs	r3, #8
 8105ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ac6:	e1ac      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ac8:	2310      	movs	r3, #16
 8105aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ace:	e1a8      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ad0:	2320      	movs	r3, #32
 8105ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ad6:	e1a4      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ad8:	2340      	movs	r3, #64	; 0x40
 8105ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ade:	e1a0      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ae0:	2380      	movs	r3, #128	; 0x80
 8105ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ae6:	e19c      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	681b      	ldr	r3, [r3, #0]
 8105aec:	4a36      	ldr	r2, [pc, #216]	; (8105bc8 <UART_SetConfig+0x348>)
 8105aee:	4293      	cmp	r3, r2
 8105af0:	d130      	bne.n	8105b54 <UART_SetConfig+0x2d4>
 8105af2:	4b32      	ldr	r3, [pc, #200]	; (8105bbc <UART_SetConfig+0x33c>)
 8105af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105af6:	f003 0307 	and.w	r3, r3, #7
 8105afa:	2b05      	cmp	r3, #5
 8105afc:	d826      	bhi.n	8105b4c <UART_SetConfig+0x2cc>
 8105afe:	a201      	add	r2, pc, #4	; (adr r2, 8105b04 <UART_SetConfig+0x284>)
 8105b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b04:	08105b1d 	.word	0x08105b1d
 8105b08:	08105b25 	.word	0x08105b25
 8105b0c:	08105b2d 	.word	0x08105b2d
 8105b10:	08105b35 	.word	0x08105b35
 8105b14:	08105b3d 	.word	0x08105b3d
 8105b18:	08105b45 	.word	0x08105b45
 8105b1c:	2300      	movs	r3, #0
 8105b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b22:	e17e      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b24:	2304      	movs	r3, #4
 8105b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b2a:	e17a      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b2c:	2308      	movs	r3, #8
 8105b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b32:	e176      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b34:	2310      	movs	r3, #16
 8105b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b3a:	e172      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b3c:	2320      	movs	r3, #32
 8105b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b42:	e16e      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b44:	2340      	movs	r3, #64	; 0x40
 8105b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b4a:	e16a      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b4c:	2380      	movs	r3, #128	; 0x80
 8105b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b52:	e166      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b54:	687b      	ldr	r3, [r7, #4]
 8105b56:	681b      	ldr	r3, [r3, #0]
 8105b58:	4a1c      	ldr	r2, [pc, #112]	; (8105bcc <UART_SetConfig+0x34c>)
 8105b5a:	4293      	cmp	r3, r2
 8105b5c:	d140      	bne.n	8105be0 <UART_SetConfig+0x360>
 8105b5e:	4b17      	ldr	r3, [pc, #92]	; (8105bbc <UART_SetConfig+0x33c>)
 8105b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b62:	f003 0307 	and.w	r3, r3, #7
 8105b66:	2b05      	cmp	r3, #5
 8105b68:	d836      	bhi.n	8105bd8 <UART_SetConfig+0x358>
 8105b6a:	a201      	add	r2, pc, #4	; (adr r2, 8105b70 <UART_SetConfig+0x2f0>)
 8105b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b70:	08105b89 	.word	0x08105b89
 8105b74:	08105b91 	.word	0x08105b91
 8105b78:	08105b99 	.word	0x08105b99
 8105b7c:	08105ba1 	.word	0x08105ba1
 8105b80:	08105ba9 	.word	0x08105ba9
 8105b84:	08105bd1 	.word	0x08105bd1
 8105b88:	2300      	movs	r3, #0
 8105b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b8e:	e148      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b90:	2304      	movs	r3, #4
 8105b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b96:	e144      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105b98:	2308      	movs	r3, #8
 8105b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105b9e:	e140      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ba0:	2310      	movs	r3, #16
 8105ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ba6:	e13c      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ba8:	2320      	movs	r3, #32
 8105baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105bae:	e138      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105bb0:	cfff69f3 	.word	0xcfff69f3
 8105bb4:	58000c00 	.word	0x58000c00
 8105bb8:	40011000 	.word	0x40011000
 8105bbc:	58024400 	.word	0x58024400
 8105bc0:	40004400 	.word	0x40004400
 8105bc4:	40004800 	.word	0x40004800
 8105bc8:	40004c00 	.word	0x40004c00
 8105bcc:	40005000 	.word	0x40005000
 8105bd0:	2340      	movs	r3, #64	; 0x40
 8105bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105bd6:	e124      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105bd8:	2380      	movs	r3, #128	; 0x80
 8105bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105bde:	e120      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105be0:	687b      	ldr	r3, [r7, #4]
 8105be2:	681b      	ldr	r3, [r3, #0]
 8105be4:	4acc      	ldr	r2, [pc, #816]	; (8105f18 <UART_SetConfig+0x698>)
 8105be6:	4293      	cmp	r3, r2
 8105be8:	d176      	bne.n	8105cd8 <UART_SetConfig+0x458>
 8105bea:	4bcc      	ldr	r3, [pc, #816]	; (8105f1c <UART_SetConfig+0x69c>)
 8105bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105bf2:	2b28      	cmp	r3, #40	; 0x28
 8105bf4:	d86c      	bhi.n	8105cd0 <UART_SetConfig+0x450>
 8105bf6:	a201      	add	r2, pc, #4	; (adr r2, 8105bfc <UART_SetConfig+0x37c>)
 8105bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105bfc:	08105ca1 	.word	0x08105ca1
 8105c00:	08105cd1 	.word	0x08105cd1
 8105c04:	08105cd1 	.word	0x08105cd1
 8105c08:	08105cd1 	.word	0x08105cd1
 8105c0c:	08105cd1 	.word	0x08105cd1
 8105c10:	08105cd1 	.word	0x08105cd1
 8105c14:	08105cd1 	.word	0x08105cd1
 8105c18:	08105cd1 	.word	0x08105cd1
 8105c1c:	08105ca9 	.word	0x08105ca9
 8105c20:	08105cd1 	.word	0x08105cd1
 8105c24:	08105cd1 	.word	0x08105cd1
 8105c28:	08105cd1 	.word	0x08105cd1
 8105c2c:	08105cd1 	.word	0x08105cd1
 8105c30:	08105cd1 	.word	0x08105cd1
 8105c34:	08105cd1 	.word	0x08105cd1
 8105c38:	08105cd1 	.word	0x08105cd1
 8105c3c:	08105cb1 	.word	0x08105cb1
 8105c40:	08105cd1 	.word	0x08105cd1
 8105c44:	08105cd1 	.word	0x08105cd1
 8105c48:	08105cd1 	.word	0x08105cd1
 8105c4c:	08105cd1 	.word	0x08105cd1
 8105c50:	08105cd1 	.word	0x08105cd1
 8105c54:	08105cd1 	.word	0x08105cd1
 8105c58:	08105cd1 	.word	0x08105cd1
 8105c5c:	08105cb9 	.word	0x08105cb9
 8105c60:	08105cd1 	.word	0x08105cd1
 8105c64:	08105cd1 	.word	0x08105cd1
 8105c68:	08105cd1 	.word	0x08105cd1
 8105c6c:	08105cd1 	.word	0x08105cd1
 8105c70:	08105cd1 	.word	0x08105cd1
 8105c74:	08105cd1 	.word	0x08105cd1
 8105c78:	08105cd1 	.word	0x08105cd1
 8105c7c:	08105cc1 	.word	0x08105cc1
 8105c80:	08105cd1 	.word	0x08105cd1
 8105c84:	08105cd1 	.word	0x08105cd1
 8105c88:	08105cd1 	.word	0x08105cd1
 8105c8c:	08105cd1 	.word	0x08105cd1
 8105c90:	08105cd1 	.word	0x08105cd1
 8105c94:	08105cd1 	.word	0x08105cd1
 8105c98:	08105cd1 	.word	0x08105cd1
 8105c9c:	08105cc9 	.word	0x08105cc9
 8105ca0:	2301      	movs	r3, #1
 8105ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105ca6:	e0bc      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105ca8:	2304      	movs	r3, #4
 8105caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cae:	e0b8      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105cb0:	2308      	movs	r3, #8
 8105cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cb6:	e0b4      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105cb8:	2310      	movs	r3, #16
 8105cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cbe:	e0b0      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105cc0:	2320      	movs	r3, #32
 8105cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cc6:	e0ac      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105cc8:	2340      	movs	r3, #64	; 0x40
 8105cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cce:	e0a8      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105cd0:	2380      	movs	r3, #128	; 0x80
 8105cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105cd6:	e0a4      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	681b      	ldr	r3, [r3, #0]
 8105cdc:	4a90      	ldr	r2, [pc, #576]	; (8105f20 <UART_SetConfig+0x6a0>)
 8105cde:	4293      	cmp	r3, r2
 8105ce0:	d130      	bne.n	8105d44 <UART_SetConfig+0x4c4>
 8105ce2:	4b8e      	ldr	r3, [pc, #568]	; (8105f1c <UART_SetConfig+0x69c>)
 8105ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105ce6:	f003 0307 	and.w	r3, r3, #7
 8105cea:	2b05      	cmp	r3, #5
 8105cec:	d826      	bhi.n	8105d3c <UART_SetConfig+0x4bc>
 8105cee:	a201      	add	r2, pc, #4	; (adr r2, 8105cf4 <UART_SetConfig+0x474>)
 8105cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105cf4:	08105d0d 	.word	0x08105d0d
 8105cf8:	08105d15 	.word	0x08105d15
 8105cfc:	08105d1d 	.word	0x08105d1d
 8105d00:	08105d25 	.word	0x08105d25
 8105d04:	08105d2d 	.word	0x08105d2d
 8105d08:	08105d35 	.word	0x08105d35
 8105d0c:	2300      	movs	r3, #0
 8105d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d12:	e086      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d14:	2304      	movs	r3, #4
 8105d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d1a:	e082      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d1c:	2308      	movs	r3, #8
 8105d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d22:	e07e      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d24:	2310      	movs	r3, #16
 8105d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d2a:	e07a      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d2c:	2320      	movs	r3, #32
 8105d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d32:	e076      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d34:	2340      	movs	r3, #64	; 0x40
 8105d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d3a:	e072      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d3c:	2380      	movs	r3, #128	; 0x80
 8105d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d42:	e06e      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d44:	687b      	ldr	r3, [r7, #4]
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	4a76      	ldr	r2, [pc, #472]	; (8105f24 <UART_SetConfig+0x6a4>)
 8105d4a:	4293      	cmp	r3, r2
 8105d4c:	d130      	bne.n	8105db0 <UART_SetConfig+0x530>
 8105d4e:	4b73      	ldr	r3, [pc, #460]	; (8105f1c <UART_SetConfig+0x69c>)
 8105d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105d52:	f003 0307 	and.w	r3, r3, #7
 8105d56:	2b05      	cmp	r3, #5
 8105d58:	d826      	bhi.n	8105da8 <UART_SetConfig+0x528>
 8105d5a:	a201      	add	r2, pc, #4	; (adr r2, 8105d60 <UART_SetConfig+0x4e0>)
 8105d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d60:	08105d79 	.word	0x08105d79
 8105d64:	08105d81 	.word	0x08105d81
 8105d68:	08105d89 	.word	0x08105d89
 8105d6c:	08105d91 	.word	0x08105d91
 8105d70:	08105d99 	.word	0x08105d99
 8105d74:	08105da1 	.word	0x08105da1
 8105d78:	2300      	movs	r3, #0
 8105d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d7e:	e050      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d80:	2304      	movs	r3, #4
 8105d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d86:	e04c      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d88:	2308      	movs	r3, #8
 8105d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d8e:	e048      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d90:	2310      	movs	r3, #16
 8105d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d96:	e044      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105d98:	2320      	movs	r3, #32
 8105d9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105d9e:	e040      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105da0:	2340      	movs	r3, #64	; 0x40
 8105da2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105da6:	e03c      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105da8:	2380      	movs	r3, #128	; 0x80
 8105daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105dae:	e038      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	681b      	ldr	r3, [r3, #0]
 8105db4:	4a5c      	ldr	r2, [pc, #368]	; (8105f28 <UART_SetConfig+0x6a8>)
 8105db6:	4293      	cmp	r3, r2
 8105db8:	d130      	bne.n	8105e1c <UART_SetConfig+0x59c>
 8105dba:	4b58      	ldr	r3, [pc, #352]	; (8105f1c <UART_SetConfig+0x69c>)
 8105dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105dbe:	f003 0307 	and.w	r3, r3, #7
 8105dc2:	2b05      	cmp	r3, #5
 8105dc4:	d826      	bhi.n	8105e14 <UART_SetConfig+0x594>
 8105dc6:	a201      	add	r2, pc, #4	; (adr r2, 8105dcc <UART_SetConfig+0x54c>)
 8105dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105dcc:	08105de5 	.word	0x08105de5
 8105dd0:	08105ded 	.word	0x08105ded
 8105dd4:	08105df5 	.word	0x08105df5
 8105dd8:	08105dfd 	.word	0x08105dfd
 8105ddc:	08105e05 	.word	0x08105e05
 8105de0:	08105e0d 	.word	0x08105e0d
 8105de4:	2302      	movs	r3, #2
 8105de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105dea:	e01a      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105dec:	2304      	movs	r3, #4
 8105dee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105df2:	e016      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105df4:	2308      	movs	r3, #8
 8105df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105dfa:	e012      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105dfc:	2310      	movs	r3, #16
 8105dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105e02:	e00e      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105e04:	2320      	movs	r3, #32
 8105e06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105e0a:	e00a      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105e0c:	2340      	movs	r3, #64	; 0x40
 8105e0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105e12:	e006      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105e14:	2380      	movs	r3, #128	; 0x80
 8105e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105e1a:	e002      	b.n	8105e22 <UART_SetConfig+0x5a2>
 8105e1c:	2380      	movs	r3, #128	; 0x80
 8105e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	681b      	ldr	r3, [r3, #0]
 8105e26:	4a40      	ldr	r2, [pc, #256]	; (8105f28 <UART_SetConfig+0x6a8>)
 8105e28:	4293      	cmp	r3, r2
 8105e2a:	f040 80ef 	bne.w	810600c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105e2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105e32:	2b20      	cmp	r3, #32
 8105e34:	dc46      	bgt.n	8105ec4 <UART_SetConfig+0x644>
 8105e36:	2b02      	cmp	r3, #2
 8105e38:	f2c0 8081 	blt.w	8105f3e <UART_SetConfig+0x6be>
 8105e3c:	3b02      	subs	r3, #2
 8105e3e:	2b1e      	cmp	r3, #30
 8105e40:	d87d      	bhi.n	8105f3e <UART_SetConfig+0x6be>
 8105e42:	a201      	add	r2, pc, #4	; (adr r2, 8105e48 <UART_SetConfig+0x5c8>)
 8105e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e48:	08105ecb 	.word	0x08105ecb
 8105e4c:	08105f3f 	.word	0x08105f3f
 8105e50:	08105ed3 	.word	0x08105ed3
 8105e54:	08105f3f 	.word	0x08105f3f
 8105e58:	08105f3f 	.word	0x08105f3f
 8105e5c:	08105f3f 	.word	0x08105f3f
 8105e60:	08105ee3 	.word	0x08105ee3
 8105e64:	08105f3f 	.word	0x08105f3f
 8105e68:	08105f3f 	.word	0x08105f3f
 8105e6c:	08105f3f 	.word	0x08105f3f
 8105e70:	08105f3f 	.word	0x08105f3f
 8105e74:	08105f3f 	.word	0x08105f3f
 8105e78:	08105f3f 	.word	0x08105f3f
 8105e7c:	08105f3f 	.word	0x08105f3f
 8105e80:	08105ef3 	.word	0x08105ef3
 8105e84:	08105f3f 	.word	0x08105f3f
 8105e88:	08105f3f 	.word	0x08105f3f
 8105e8c:	08105f3f 	.word	0x08105f3f
 8105e90:	08105f3f 	.word	0x08105f3f
 8105e94:	08105f3f 	.word	0x08105f3f
 8105e98:	08105f3f 	.word	0x08105f3f
 8105e9c:	08105f3f 	.word	0x08105f3f
 8105ea0:	08105f3f 	.word	0x08105f3f
 8105ea4:	08105f3f 	.word	0x08105f3f
 8105ea8:	08105f3f 	.word	0x08105f3f
 8105eac:	08105f3f 	.word	0x08105f3f
 8105eb0:	08105f3f 	.word	0x08105f3f
 8105eb4:	08105f3f 	.word	0x08105f3f
 8105eb8:	08105f3f 	.word	0x08105f3f
 8105ebc:	08105f3f 	.word	0x08105f3f
 8105ec0:	08105f31 	.word	0x08105f31
 8105ec4:	2b40      	cmp	r3, #64	; 0x40
 8105ec6:	d036      	beq.n	8105f36 <UART_SetConfig+0x6b6>
 8105ec8:	e039      	b.n	8105f3e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105eca:	f7fd fe47 	bl	8103b5c <HAL_RCCEx_GetD3PCLK1Freq>
 8105ece:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105ed0:	e03b      	b.n	8105f4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105ed2:	f107 0314 	add.w	r3, r7, #20
 8105ed6:	4618      	mov	r0, r3
 8105ed8:	f7fd fe56 	bl	8103b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105edc:	69bb      	ldr	r3, [r7, #24]
 8105ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ee0:	e033      	b.n	8105f4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105ee2:	f107 0308 	add.w	r3, r7, #8
 8105ee6:	4618      	mov	r0, r3
 8105ee8:	f7fd ffa2 	bl	8103e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105eec:	68fb      	ldr	r3, [r7, #12]
 8105eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105ef0:	e02b      	b.n	8105f4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ef2:	4b0a      	ldr	r3, [pc, #40]	; (8105f1c <UART_SetConfig+0x69c>)
 8105ef4:	681b      	ldr	r3, [r3, #0]
 8105ef6:	f003 0320 	and.w	r3, r3, #32
 8105efa:	2b00      	cmp	r3, #0
 8105efc:	d009      	beq.n	8105f12 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105efe:	4b07      	ldr	r3, [pc, #28]	; (8105f1c <UART_SetConfig+0x69c>)
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	08db      	lsrs	r3, r3, #3
 8105f04:	f003 0303 	and.w	r3, r3, #3
 8105f08:	4a08      	ldr	r2, [pc, #32]	; (8105f2c <UART_SetConfig+0x6ac>)
 8105f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8105f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105f10:	e01b      	b.n	8105f4a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8105f12:	4b06      	ldr	r3, [pc, #24]	; (8105f2c <UART_SetConfig+0x6ac>)
 8105f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105f16:	e018      	b.n	8105f4a <UART_SetConfig+0x6ca>
 8105f18:	40011400 	.word	0x40011400
 8105f1c:	58024400 	.word	0x58024400
 8105f20:	40007800 	.word	0x40007800
 8105f24:	40007c00 	.word	0x40007c00
 8105f28:	58000c00 	.word	0x58000c00
 8105f2c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105f30:	4bc4      	ldr	r3, [pc, #784]	; (8106244 <UART_SetConfig+0x9c4>)
 8105f32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105f34:	e009      	b.n	8105f4a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105f3c:	e005      	b.n	8105f4a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8105f3e:	2300      	movs	r3, #0
 8105f40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105f42:	2301      	movs	r3, #1
 8105f44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105f48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f4c:	2b00      	cmp	r3, #0
 8105f4e:	f000 81da 	beq.w	8106306 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105f52:	687b      	ldr	r3, [r7, #4]
 8105f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f56:	4abc      	ldr	r2, [pc, #752]	; (8106248 <UART_SetConfig+0x9c8>)
 8105f58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105f5c:	461a      	mov	r2, r3
 8105f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8105f64:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	685a      	ldr	r2, [r3, #4]
 8105f6a:	4613      	mov	r3, r2
 8105f6c:	005b      	lsls	r3, r3, #1
 8105f6e:	4413      	add	r3, r2
 8105f70:	6a3a      	ldr	r2, [r7, #32]
 8105f72:	429a      	cmp	r2, r3
 8105f74:	d305      	bcc.n	8105f82 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	685b      	ldr	r3, [r3, #4]
 8105f7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105f7c:	6a3a      	ldr	r2, [r7, #32]
 8105f7e:	429a      	cmp	r2, r3
 8105f80:	d903      	bls.n	8105f8a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8105f82:	2301      	movs	r3, #1
 8105f84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105f88:	e1bd      	b.n	8106306 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105f8c:	4618      	mov	r0, r3
 8105f8e:	f04f 0100 	mov.w	r1, #0
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f96:	4aac      	ldr	r2, [pc, #688]	; (8106248 <UART_SetConfig+0x9c8>)
 8105f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105f9c:	b29a      	uxth	r2, r3
 8105f9e:	f04f 0300 	mov.w	r3, #0
 8105fa2:	f7fa fef9 	bl	8100d98 <__aeabi_uldivmod>
 8105fa6:	4602      	mov	r2, r0
 8105fa8:	460b      	mov	r3, r1
 8105faa:	4610      	mov	r0, r2
 8105fac:	4619      	mov	r1, r3
 8105fae:	f04f 0200 	mov.w	r2, #0
 8105fb2:	f04f 0300 	mov.w	r3, #0
 8105fb6:	020b      	lsls	r3, r1, #8
 8105fb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105fbc:	0202      	lsls	r2, r0, #8
 8105fbe:	6879      	ldr	r1, [r7, #4]
 8105fc0:	6849      	ldr	r1, [r1, #4]
 8105fc2:	0849      	lsrs	r1, r1, #1
 8105fc4:	4608      	mov	r0, r1
 8105fc6:	f04f 0100 	mov.w	r1, #0
 8105fca:	1814      	adds	r4, r2, r0
 8105fcc:	eb43 0501 	adc.w	r5, r3, r1
 8105fd0:	687b      	ldr	r3, [r7, #4]
 8105fd2:	685b      	ldr	r3, [r3, #4]
 8105fd4:	461a      	mov	r2, r3
 8105fd6:	f04f 0300 	mov.w	r3, #0
 8105fda:	4620      	mov	r0, r4
 8105fdc:	4629      	mov	r1, r5
 8105fde:	f7fa fedb 	bl	8100d98 <__aeabi_uldivmod>
 8105fe2:	4602      	mov	r2, r0
 8105fe4:	460b      	mov	r3, r1
 8105fe6:	4613      	mov	r3, r2
 8105fe8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105fec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105ff0:	d308      	bcc.n	8106004 <UART_SetConfig+0x784>
 8105ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105ff8:	d204      	bcs.n	8106004 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8105ffa:	687b      	ldr	r3, [r7, #4]
 8105ffc:	681b      	ldr	r3, [r3, #0]
 8105ffe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106000:	60da      	str	r2, [r3, #12]
 8106002:	e180      	b.n	8106306 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8106004:	2301      	movs	r3, #1
 8106006:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810600a:	e17c      	b.n	8106306 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	69db      	ldr	r3, [r3, #28]
 8106010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106014:	f040 80be 	bne.w	8106194 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8106018:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810601c:	2b20      	cmp	r3, #32
 810601e:	dc49      	bgt.n	81060b4 <UART_SetConfig+0x834>
 8106020:	2b00      	cmp	r3, #0
 8106022:	db7c      	blt.n	810611e <UART_SetConfig+0x89e>
 8106024:	2b20      	cmp	r3, #32
 8106026:	d87a      	bhi.n	810611e <UART_SetConfig+0x89e>
 8106028:	a201      	add	r2, pc, #4	; (adr r2, 8106030 <UART_SetConfig+0x7b0>)
 810602a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810602e:	bf00      	nop
 8106030:	081060bb 	.word	0x081060bb
 8106034:	081060c3 	.word	0x081060c3
 8106038:	0810611f 	.word	0x0810611f
 810603c:	0810611f 	.word	0x0810611f
 8106040:	081060cb 	.word	0x081060cb
 8106044:	0810611f 	.word	0x0810611f
 8106048:	0810611f 	.word	0x0810611f
 810604c:	0810611f 	.word	0x0810611f
 8106050:	081060db 	.word	0x081060db
 8106054:	0810611f 	.word	0x0810611f
 8106058:	0810611f 	.word	0x0810611f
 810605c:	0810611f 	.word	0x0810611f
 8106060:	0810611f 	.word	0x0810611f
 8106064:	0810611f 	.word	0x0810611f
 8106068:	0810611f 	.word	0x0810611f
 810606c:	0810611f 	.word	0x0810611f
 8106070:	081060eb 	.word	0x081060eb
 8106074:	0810611f 	.word	0x0810611f
 8106078:	0810611f 	.word	0x0810611f
 810607c:	0810611f 	.word	0x0810611f
 8106080:	0810611f 	.word	0x0810611f
 8106084:	0810611f 	.word	0x0810611f
 8106088:	0810611f 	.word	0x0810611f
 810608c:	0810611f 	.word	0x0810611f
 8106090:	0810611f 	.word	0x0810611f
 8106094:	0810611f 	.word	0x0810611f
 8106098:	0810611f 	.word	0x0810611f
 810609c:	0810611f 	.word	0x0810611f
 81060a0:	0810611f 	.word	0x0810611f
 81060a4:	0810611f 	.word	0x0810611f
 81060a8:	0810611f 	.word	0x0810611f
 81060ac:	0810611f 	.word	0x0810611f
 81060b0:	08106111 	.word	0x08106111
 81060b4:	2b40      	cmp	r3, #64	; 0x40
 81060b6:	d02e      	beq.n	8106116 <UART_SetConfig+0x896>
 81060b8:	e031      	b.n	810611e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81060ba:	f7fc fde3 	bl	8102c84 <HAL_RCC_GetPCLK1Freq>
 81060be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81060c0:	e033      	b.n	810612a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81060c2:	f7fc fdf5 	bl	8102cb0 <HAL_RCC_GetPCLK2Freq>
 81060c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81060c8:	e02f      	b.n	810612a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81060ca:	f107 0314 	add.w	r3, r7, #20
 81060ce:	4618      	mov	r0, r3
 81060d0:	f7fd fd5a 	bl	8103b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81060d4:	69bb      	ldr	r3, [r7, #24]
 81060d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81060d8:	e027      	b.n	810612a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81060da:	f107 0308 	add.w	r3, r7, #8
 81060de:	4618      	mov	r0, r3
 81060e0:	f7fd fea6 	bl	8103e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81060e4:	68fb      	ldr	r3, [r7, #12]
 81060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81060e8:	e01f      	b.n	810612a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81060ea:	4b58      	ldr	r3, [pc, #352]	; (810624c <UART_SetConfig+0x9cc>)
 81060ec:	681b      	ldr	r3, [r3, #0]
 81060ee:	f003 0320 	and.w	r3, r3, #32
 81060f2:	2b00      	cmp	r3, #0
 81060f4:	d009      	beq.n	810610a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81060f6:	4b55      	ldr	r3, [pc, #340]	; (810624c <UART_SetConfig+0x9cc>)
 81060f8:	681b      	ldr	r3, [r3, #0]
 81060fa:	08db      	lsrs	r3, r3, #3
 81060fc:	f003 0303 	and.w	r3, r3, #3
 8106100:	4a53      	ldr	r2, [pc, #332]	; (8106250 <UART_SetConfig+0x9d0>)
 8106102:	fa22 f303 	lsr.w	r3, r2, r3
 8106106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106108:	e00f      	b.n	810612a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 810610a:	4b51      	ldr	r3, [pc, #324]	; (8106250 <UART_SetConfig+0x9d0>)
 810610c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810610e:	e00c      	b.n	810612a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106110:	4b4c      	ldr	r3, [pc, #304]	; (8106244 <UART_SetConfig+0x9c4>)
 8106112:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106114:	e009      	b.n	810612a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810611a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810611c:	e005      	b.n	810612a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 810611e:	2300      	movs	r3, #0
 8106120:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106122:	2301      	movs	r3, #1
 8106124:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106128:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810612c:	2b00      	cmp	r3, #0
 810612e:	f000 80ea 	beq.w	8106306 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106136:	4a44      	ldr	r2, [pc, #272]	; (8106248 <UART_SetConfig+0x9c8>)
 8106138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810613c:	461a      	mov	r2, r3
 810613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106140:	fbb3 f3f2 	udiv	r3, r3, r2
 8106144:	005a      	lsls	r2, r3, #1
 8106146:	687b      	ldr	r3, [r7, #4]
 8106148:	685b      	ldr	r3, [r3, #4]
 810614a:	085b      	lsrs	r3, r3, #1
 810614c:	441a      	add	r2, r3
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	685b      	ldr	r3, [r3, #4]
 8106152:	fbb2 f3f3 	udiv	r3, r2, r3
 8106156:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810615a:	2b0f      	cmp	r3, #15
 810615c:	d916      	bls.n	810618c <UART_SetConfig+0x90c>
 810615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106164:	d212      	bcs.n	810618c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106168:	b29b      	uxth	r3, r3
 810616a:	f023 030f 	bic.w	r3, r3, #15
 810616e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106172:	085b      	lsrs	r3, r3, #1
 8106174:	b29b      	uxth	r3, r3
 8106176:	f003 0307 	and.w	r3, r3, #7
 810617a:	b29a      	uxth	r2, r3
 810617c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810617e:	4313      	orrs	r3, r2
 8106180:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8106182:	687b      	ldr	r3, [r7, #4]
 8106184:	681b      	ldr	r3, [r3, #0]
 8106186:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8106188:	60da      	str	r2, [r3, #12]
 810618a:	e0bc      	b.n	8106306 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 810618c:	2301      	movs	r3, #1
 810618e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106192:	e0b8      	b.n	8106306 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8106194:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106198:	2b20      	cmp	r3, #32
 810619a:	dc4b      	bgt.n	8106234 <UART_SetConfig+0x9b4>
 810619c:	2b00      	cmp	r3, #0
 810619e:	f2c0 8087 	blt.w	81062b0 <UART_SetConfig+0xa30>
 81061a2:	2b20      	cmp	r3, #32
 81061a4:	f200 8084 	bhi.w	81062b0 <UART_SetConfig+0xa30>
 81061a8:	a201      	add	r2, pc, #4	; (adr r2, 81061b0 <UART_SetConfig+0x930>)
 81061aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061ae:	bf00      	nop
 81061b0:	0810623b 	.word	0x0810623b
 81061b4:	08106255 	.word	0x08106255
 81061b8:	081062b1 	.word	0x081062b1
 81061bc:	081062b1 	.word	0x081062b1
 81061c0:	0810625d 	.word	0x0810625d
 81061c4:	081062b1 	.word	0x081062b1
 81061c8:	081062b1 	.word	0x081062b1
 81061cc:	081062b1 	.word	0x081062b1
 81061d0:	0810626d 	.word	0x0810626d
 81061d4:	081062b1 	.word	0x081062b1
 81061d8:	081062b1 	.word	0x081062b1
 81061dc:	081062b1 	.word	0x081062b1
 81061e0:	081062b1 	.word	0x081062b1
 81061e4:	081062b1 	.word	0x081062b1
 81061e8:	081062b1 	.word	0x081062b1
 81061ec:	081062b1 	.word	0x081062b1
 81061f0:	0810627d 	.word	0x0810627d
 81061f4:	081062b1 	.word	0x081062b1
 81061f8:	081062b1 	.word	0x081062b1
 81061fc:	081062b1 	.word	0x081062b1
 8106200:	081062b1 	.word	0x081062b1
 8106204:	081062b1 	.word	0x081062b1
 8106208:	081062b1 	.word	0x081062b1
 810620c:	081062b1 	.word	0x081062b1
 8106210:	081062b1 	.word	0x081062b1
 8106214:	081062b1 	.word	0x081062b1
 8106218:	081062b1 	.word	0x081062b1
 810621c:	081062b1 	.word	0x081062b1
 8106220:	081062b1 	.word	0x081062b1
 8106224:	081062b1 	.word	0x081062b1
 8106228:	081062b1 	.word	0x081062b1
 810622c:	081062b1 	.word	0x081062b1
 8106230:	081062a3 	.word	0x081062a3
 8106234:	2b40      	cmp	r3, #64	; 0x40
 8106236:	d037      	beq.n	81062a8 <UART_SetConfig+0xa28>
 8106238:	e03a      	b.n	81062b0 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810623a:	f7fc fd23 	bl	8102c84 <HAL_RCC_GetPCLK1Freq>
 810623e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106240:	e03c      	b.n	81062bc <UART_SetConfig+0xa3c>
 8106242:	bf00      	nop
 8106244:	003d0900 	.word	0x003d0900
 8106248:	0810b470 	.word	0x0810b470
 810624c:	58024400 	.word	0x58024400
 8106250:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106254:	f7fc fd2c 	bl	8102cb0 <HAL_RCC_GetPCLK2Freq>
 8106258:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810625a:	e02f      	b.n	81062bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810625c:	f107 0314 	add.w	r3, r7, #20
 8106260:	4618      	mov	r0, r3
 8106262:	f7fd fc91 	bl	8103b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106266:	69bb      	ldr	r3, [r7, #24]
 8106268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810626a:	e027      	b.n	81062bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810626c:	f107 0308 	add.w	r3, r7, #8
 8106270:	4618      	mov	r0, r3
 8106272:	f7fd fddd 	bl	8103e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106276:	68fb      	ldr	r3, [r7, #12]
 8106278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810627a:	e01f      	b.n	81062bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810627c:	4b2c      	ldr	r3, [pc, #176]	; (8106330 <UART_SetConfig+0xab0>)
 810627e:	681b      	ldr	r3, [r3, #0]
 8106280:	f003 0320 	and.w	r3, r3, #32
 8106284:	2b00      	cmp	r3, #0
 8106286:	d009      	beq.n	810629c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106288:	4b29      	ldr	r3, [pc, #164]	; (8106330 <UART_SetConfig+0xab0>)
 810628a:	681b      	ldr	r3, [r3, #0]
 810628c:	08db      	lsrs	r3, r3, #3
 810628e:	f003 0303 	and.w	r3, r3, #3
 8106292:	4a28      	ldr	r2, [pc, #160]	; (8106334 <UART_SetConfig+0xab4>)
 8106294:	fa22 f303 	lsr.w	r3, r2, r3
 8106298:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810629a:	e00f      	b.n	81062bc <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 810629c:	4b25      	ldr	r3, [pc, #148]	; (8106334 <UART_SetConfig+0xab4>)
 810629e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81062a0:	e00c      	b.n	81062bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81062a2:	4b25      	ldr	r3, [pc, #148]	; (8106338 <UART_SetConfig+0xab8>)
 81062a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81062a6:	e009      	b.n	81062bc <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81062a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81062ae:	e005      	b.n	81062bc <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 81062b0:	2300      	movs	r3, #0
 81062b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81062b4:	2301      	movs	r3, #1
 81062b6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81062ba:	bf00      	nop
    }

    if (pclk != 0U)
 81062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81062be:	2b00      	cmp	r3, #0
 81062c0:	d021      	beq.n	8106306 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81062c2:	687b      	ldr	r3, [r7, #4]
 81062c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81062c6:	4a1d      	ldr	r2, [pc, #116]	; (810633c <UART_SetConfig+0xabc>)
 81062c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81062cc:	461a      	mov	r2, r3
 81062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81062d0:	fbb3 f2f2 	udiv	r2, r3, r2
 81062d4:	687b      	ldr	r3, [r7, #4]
 81062d6:	685b      	ldr	r3, [r3, #4]
 81062d8:	085b      	lsrs	r3, r3, #1
 81062da:	441a      	add	r2, r3
 81062dc:	687b      	ldr	r3, [r7, #4]
 81062de:	685b      	ldr	r3, [r3, #4]
 81062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 81062e4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81062e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81062e8:	2b0f      	cmp	r3, #15
 81062ea:	d909      	bls.n	8106300 <UART_SetConfig+0xa80>
 81062ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81062ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81062f2:	d205      	bcs.n	8106300 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81062f6:	b29a      	uxth	r2, r3
 81062f8:	687b      	ldr	r3, [r7, #4]
 81062fa:	681b      	ldr	r3, [r3, #0]
 81062fc:	60da      	str	r2, [r3, #12]
 81062fe:	e002      	b.n	8106306 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106300:	2301      	movs	r3, #1
 8106302:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106306:	687b      	ldr	r3, [r7, #4]
 8106308:	2201      	movs	r2, #1
 810630a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810630e:	687b      	ldr	r3, [r7, #4]
 8106310:	2201      	movs	r2, #1
 8106312:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106316:	687b      	ldr	r3, [r7, #4]
 8106318:	2200      	movs	r2, #0
 810631a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 810631c:	687b      	ldr	r3, [r7, #4]
 810631e:	2200      	movs	r2, #0
 8106320:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8106322:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8106326:	4618      	mov	r0, r3
 8106328:	3738      	adds	r7, #56	; 0x38
 810632a:	46bd      	mov	sp, r7
 810632c:	bdb0      	pop	{r4, r5, r7, pc}
 810632e:	bf00      	nop
 8106330:	58024400 	.word	0x58024400
 8106334:	03d09000 	.word	0x03d09000
 8106338:	003d0900 	.word	0x003d0900
 810633c:	0810b470 	.word	0x0810b470

08106340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106340:	b480      	push	{r7}
 8106342:	b083      	sub	sp, #12
 8106344:	af00      	add	r7, sp, #0
 8106346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810634c:	f003 0301 	and.w	r3, r3, #1
 8106350:	2b00      	cmp	r3, #0
 8106352:	d00a      	beq.n	810636a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106354:	687b      	ldr	r3, [r7, #4]
 8106356:	681b      	ldr	r3, [r3, #0]
 8106358:	685b      	ldr	r3, [r3, #4]
 810635a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106362:	687b      	ldr	r3, [r7, #4]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	430a      	orrs	r2, r1
 8106368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810636a:	687b      	ldr	r3, [r7, #4]
 810636c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810636e:	f003 0302 	and.w	r3, r3, #2
 8106372:	2b00      	cmp	r3, #0
 8106374:	d00a      	beq.n	810638c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106376:	687b      	ldr	r3, [r7, #4]
 8106378:	681b      	ldr	r3, [r3, #0]
 810637a:	685b      	ldr	r3, [r3, #4]
 810637c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106384:	687b      	ldr	r3, [r7, #4]
 8106386:	681b      	ldr	r3, [r3, #0]
 8106388:	430a      	orrs	r2, r1
 810638a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106390:	f003 0304 	and.w	r3, r3, #4
 8106394:	2b00      	cmp	r3, #0
 8106396:	d00a      	beq.n	81063ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106398:	687b      	ldr	r3, [r7, #4]
 810639a:	681b      	ldr	r3, [r3, #0]
 810639c:	685b      	ldr	r3, [r3, #4]
 810639e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81063a2:	687b      	ldr	r3, [r7, #4]
 81063a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81063a6:	687b      	ldr	r3, [r7, #4]
 81063a8:	681b      	ldr	r3, [r3, #0]
 81063aa:	430a      	orrs	r2, r1
 81063ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81063ae:	687b      	ldr	r3, [r7, #4]
 81063b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063b2:	f003 0308 	and.w	r3, r3, #8
 81063b6:	2b00      	cmp	r3, #0
 81063b8:	d00a      	beq.n	81063d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81063ba:	687b      	ldr	r3, [r7, #4]
 81063bc:	681b      	ldr	r3, [r3, #0]
 81063be:	685b      	ldr	r3, [r3, #4]
 81063c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81063c4:	687b      	ldr	r3, [r7, #4]
 81063c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81063c8:	687b      	ldr	r3, [r7, #4]
 81063ca:	681b      	ldr	r3, [r3, #0]
 81063cc:	430a      	orrs	r2, r1
 81063ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063d4:	f003 0310 	and.w	r3, r3, #16
 81063d8:	2b00      	cmp	r3, #0
 81063da:	d00a      	beq.n	81063f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	681b      	ldr	r3, [r3, #0]
 81063e0:	689b      	ldr	r3, [r3, #8]
 81063e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81063e6:	687b      	ldr	r3, [r7, #4]
 81063e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81063ea:	687b      	ldr	r3, [r7, #4]
 81063ec:	681b      	ldr	r3, [r3, #0]
 81063ee:	430a      	orrs	r2, r1
 81063f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063f6:	f003 0320 	and.w	r3, r3, #32
 81063fa:	2b00      	cmp	r3, #0
 81063fc:	d00a      	beq.n	8106414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81063fe:	687b      	ldr	r3, [r7, #4]
 8106400:	681b      	ldr	r3, [r3, #0]
 8106402:	689b      	ldr	r3, [r3, #8]
 8106404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810640c:	687b      	ldr	r3, [r7, #4]
 810640e:	681b      	ldr	r3, [r3, #0]
 8106410:	430a      	orrs	r2, r1
 8106412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810641c:	2b00      	cmp	r3, #0
 810641e:	d01a      	beq.n	8106456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	685b      	ldr	r3, [r3, #4]
 8106426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810642a:	687b      	ldr	r3, [r7, #4]
 810642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810642e:	687b      	ldr	r3, [r7, #4]
 8106430:	681b      	ldr	r3, [r3, #0]
 8106432:	430a      	orrs	r2, r1
 8106434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106436:	687b      	ldr	r3, [r7, #4]
 8106438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810643a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810643e:	d10a      	bne.n	8106456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	681b      	ldr	r3, [r3, #0]
 8106444:	685b      	ldr	r3, [r3, #4]
 8106446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810644e:	687b      	ldr	r3, [r7, #4]
 8106450:	681b      	ldr	r3, [r3, #0]
 8106452:	430a      	orrs	r2, r1
 8106454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810645a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810645e:	2b00      	cmp	r3, #0
 8106460:	d00a      	beq.n	8106478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106462:	687b      	ldr	r3, [r7, #4]
 8106464:	681b      	ldr	r3, [r3, #0]
 8106466:	685b      	ldr	r3, [r3, #4]
 8106468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810646c:	687b      	ldr	r3, [r7, #4]
 810646e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	681b      	ldr	r3, [r3, #0]
 8106474:	430a      	orrs	r2, r1
 8106476:	605a      	str	r2, [r3, #4]
  }
}
 8106478:	bf00      	nop
 810647a:	370c      	adds	r7, #12
 810647c:	46bd      	mov	sp, r7
 810647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106482:	4770      	bx	lr

08106484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8106484:	b580      	push	{r7, lr}
 8106486:	b086      	sub	sp, #24
 8106488:	af02      	add	r7, sp, #8
 810648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810648c:	687b      	ldr	r3, [r7, #4]
 810648e:	2200      	movs	r2, #0
 8106490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8106494:	f7fb fe78 	bl	8102188 <HAL_GetTick>
 8106498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810649a:	687b      	ldr	r3, [r7, #4]
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	681b      	ldr	r3, [r3, #0]
 81064a0:	f003 0308 	and.w	r3, r3, #8
 81064a4:	2b08      	cmp	r3, #8
 81064a6:	d10e      	bne.n	81064c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81064a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81064ac:	9300      	str	r3, [sp, #0]
 81064ae:	68fb      	ldr	r3, [r7, #12]
 81064b0:	2200      	movs	r2, #0
 81064b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81064b6:	6878      	ldr	r0, [r7, #4]
 81064b8:	f000 f82f 	bl	810651a <UART_WaitOnFlagUntilTimeout>
 81064bc:	4603      	mov	r3, r0
 81064be:	2b00      	cmp	r3, #0
 81064c0:	d001      	beq.n	81064c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81064c2:	2303      	movs	r3, #3
 81064c4:	e025      	b.n	8106512 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81064c6:	687b      	ldr	r3, [r7, #4]
 81064c8:	681b      	ldr	r3, [r3, #0]
 81064ca:	681b      	ldr	r3, [r3, #0]
 81064cc:	f003 0304 	and.w	r3, r3, #4
 81064d0:	2b04      	cmp	r3, #4
 81064d2:	d10e      	bne.n	81064f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81064d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81064d8:	9300      	str	r3, [sp, #0]
 81064da:	68fb      	ldr	r3, [r7, #12]
 81064dc:	2200      	movs	r2, #0
 81064de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81064e2:	6878      	ldr	r0, [r7, #4]
 81064e4:	f000 f819 	bl	810651a <UART_WaitOnFlagUntilTimeout>
 81064e8:	4603      	mov	r3, r0
 81064ea:	2b00      	cmp	r3, #0
 81064ec:	d001      	beq.n	81064f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81064ee:	2303      	movs	r3, #3
 81064f0:	e00f      	b.n	8106512 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	2220      	movs	r2, #32
 81064f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	2220      	movs	r2, #32
 81064fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	2200      	movs	r2, #0
 8106506:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	2200      	movs	r2, #0
 810650c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106510:	2300      	movs	r3, #0
}
 8106512:	4618      	mov	r0, r3
 8106514:	3710      	adds	r7, #16
 8106516:	46bd      	mov	sp, r7
 8106518:	bd80      	pop	{r7, pc}

0810651a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810651a:	b580      	push	{r7, lr}
 810651c:	b09c      	sub	sp, #112	; 0x70
 810651e:	af00      	add	r7, sp, #0
 8106520:	60f8      	str	r0, [r7, #12]
 8106522:	60b9      	str	r1, [r7, #8]
 8106524:	603b      	str	r3, [r7, #0]
 8106526:	4613      	mov	r3, r2
 8106528:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810652a:	e0a9      	b.n	8106680 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810652c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106532:	f000 80a5 	beq.w	8106680 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106536:	f7fb fe27 	bl	8102188 <HAL_GetTick>
 810653a:	4602      	mov	r2, r0
 810653c:	683b      	ldr	r3, [r7, #0]
 810653e:	1ad3      	subs	r3, r2, r3
 8106540:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8106542:	429a      	cmp	r2, r3
 8106544:	d302      	bcc.n	810654c <UART_WaitOnFlagUntilTimeout+0x32>
 8106546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106548:	2b00      	cmp	r3, #0
 810654a:	d140      	bne.n	81065ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810654c:	68fb      	ldr	r3, [r7, #12]
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106554:	e853 3f00 	ldrex	r3, [r3]
 8106558:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810655a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810655c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106560:	667b      	str	r3, [r7, #100]	; 0x64
 8106562:	68fb      	ldr	r3, [r7, #12]
 8106564:	681b      	ldr	r3, [r3, #0]
 8106566:	461a      	mov	r2, r3
 8106568:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810656a:	65fb      	str	r3, [r7, #92]	; 0x5c
 810656c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810656e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8106570:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8106572:	e841 2300 	strex	r3, r2, [r1]
 8106576:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8106578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810657a:	2b00      	cmp	r3, #0
 810657c:	d1e6      	bne.n	810654c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810657e:	68fb      	ldr	r3, [r7, #12]
 8106580:	681b      	ldr	r3, [r3, #0]
 8106582:	3308      	adds	r3, #8
 8106584:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106588:	e853 3f00 	ldrex	r3, [r3]
 810658c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810658e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106590:	f023 0301 	bic.w	r3, r3, #1
 8106594:	663b      	str	r3, [r7, #96]	; 0x60
 8106596:	68fb      	ldr	r3, [r7, #12]
 8106598:	681b      	ldr	r3, [r3, #0]
 810659a:	3308      	adds	r3, #8
 810659c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810659e:	64ba      	str	r2, [r7, #72]	; 0x48
 81065a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81065a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81065a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81065a6:	e841 2300 	strex	r3, r2, [r1]
 81065aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81065ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81065ae:	2b00      	cmp	r3, #0
 81065b0:	d1e5      	bne.n	810657e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81065b2:	68fb      	ldr	r3, [r7, #12]
 81065b4:	2220      	movs	r2, #32
 81065b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81065ba:	68fb      	ldr	r3, [r7, #12]
 81065bc:	2220      	movs	r2, #32
 81065be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81065c2:	68fb      	ldr	r3, [r7, #12]
 81065c4:	2200      	movs	r2, #0
 81065c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81065ca:	2303      	movs	r3, #3
 81065cc:	e069      	b.n	81066a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81065ce:	68fb      	ldr	r3, [r7, #12]
 81065d0:	681b      	ldr	r3, [r3, #0]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	f003 0304 	and.w	r3, r3, #4
 81065d8:	2b00      	cmp	r3, #0
 81065da:	d051      	beq.n	8106680 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81065dc:	68fb      	ldr	r3, [r7, #12]
 81065de:	681b      	ldr	r3, [r3, #0]
 81065e0:	69db      	ldr	r3, [r3, #28]
 81065e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81065e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81065ea:	d149      	bne.n	8106680 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81065ec:	68fb      	ldr	r3, [r7, #12]
 81065ee:	681b      	ldr	r3, [r3, #0]
 81065f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81065f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81065f6:	68fb      	ldr	r3, [r7, #12]
 81065f8:	681b      	ldr	r3, [r3, #0]
 81065fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81065fe:	e853 3f00 	ldrex	r3, [r3]
 8106602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8106604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106606:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810660a:	66fb      	str	r3, [r7, #108]	; 0x6c
 810660c:	68fb      	ldr	r3, [r7, #12]
 810660e:	681b      	ldr	r3, [r3, #0]
 8106610:	461a      	mov	r2, r3
 8106612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8106614:	637b      	str	r3, [r7, #52]	; 0x34
 8106616:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106618:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810661a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810661c:	e841 2300 	strex	r3, r2, [r1]
 8106620:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8106622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106624:	2b00      	cmp	r3, #0
 8106626:	d1e6      	bne.n	81065f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106628:	68fb      	ldr	r3, [r7, #12]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	3308      	adds	r3, #8
 810662e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106630:	697b      	ldr	r3, [r7, #20]
 8106632:	e853 3f00 	ldrex	r3, [r3]
 8106636:	613b      	str	r3, [r7, #16]
   return(result);
 8106638:	693b      	ldr	r3, [r7, #16]
 810663a:	f023 0301 	bic.w	r3, r3, #1
 810663e:	66bb      	str	r3, [r7, #104]	; 0x68
 8106640:	68fb      	ldr	r3, [r7, #12]
 8106642:	681b      	ldr	r3, [r3, #0]
 8106644:	3308      	adds	r3, #8
 8106646:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8106648:	623a      	str	r2, [r7, #32]
 810664a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810664c:	69f9      	ldr	r1, [r7, #28]
 810664e:	6a3a      	ldr	r2, [r7, #32]
 8106650:	e841 2300 	strex	r3, r2, [r1]
 8106654:	61bb      	str	r3, [r7, #24]
   return(result);
 8106656:	69bb      	ldr	r3, [r7, #24]
 8106658:	2b00      	cmp	r3, #0
 810665a:	d1e5      	bne.n	8106628 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 810665c:	68fb      	ldr	r3, [r7, #12]
 810665e:	2220      	movs	r2, #32
 8106660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8106664:	68fb      	ldr	r3, [r7, #12]
 8106666:	2220      	movs	r2, #32
 8106668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810666c:	68fb      	ldr	r3, [r7, #12]
 810666e:	2220      	movs	r2, #32
 8106670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106674:	68fb      	ldr	r3, [r7, #12]
 8106676:	2200      	movs	r2, #0
 8106678:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 810667c:	2303      	movs	r3, #3
 810667e:	e010      	b.n	81066a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106680:	68fb      	ldr	r3, [r7, #12]
 8106682:	681b      	ldr	r3, [r3, #0]
 8106684:	69da      	ldr	r2, [r3, #28]
 8106686:	68bb      	ldr	r3, [r7, #8]
 8106688:	4013      	ands	r3, r2
 810668a:	68ba      	ldr	r2, [r7, #8]
 810668c:	429a      	cmp	r2, r3
 810668e:	bf0c      	ite	eq
 8106690:	2301      	moveq	r3, #1
 8106692:	2300      	movne	r3, #0
 8106694:	b2db      	uxtb	r3, r3
 8106696:	461a      	mov	r2, r3
 8106698:	79fb      	ldrb	r3, [r7, #7]
 810669a:	429a      	cmp	r2, r3
 810669c:	f43f af46 	beq.w	810652c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81066a0:	2300      	movs	r3, #0
}
 81066a2:	4618      	mov	r0, r3
 81066a4:	3770      	adds	r7, #112	; 0x70
 81066a6:	46bd      	mov	sp, r7
 81066a8:	bd80      	pop	{r7, pc}

081066aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81066aa:	b480      	push	{r7}
 81066ac:	b085      	sub	sp, #20
 81066ae:	af00      	add	r7, sp, #0
 81066b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81066b2:	687b      	ldr	r3, [r7, #4]
 81066b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81066b8:	2b01      	cmp	r3, #1
 81066ba:	d101      	bne.n	81066c0 <HAL_UARTEx_DisableFifoMode+0x16>
 81066bc:	2302      	movs	r3, #2
 81066be:	e027      	b.n	8106710 <HAL_UARTEx_DisableFifoMode+0x66>
 81066c0:	687b      	ldr	r3, [r7, #4]
 81066c2:	2201      	movs	r2, #1
 81066c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81066c8:	687b      	ldr	r3, [r7, #4]
 81066ca:	2224      	movs	r2, #36	; 0x24
 81066cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81066d0:	687b      	ldr	r3, [r7, #4]
 81066d2:	681b      	ldr	r3, [r3, #0]
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81066d8:	687b      	ldr	r3, [r7, #4]
 81066da:	681b      	ldr	r3, [r3, #0]
 81066dc:	681a      	ldr	r2, [r3, #0]
 81066de:	687b      	ldr	r3, [r7, #4]
 81066e0:	681b      	ldr	r3, [r3, #0]
 81066e2:	f022 0201 	bic.w	r2, r2, #1
 81066e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81066e8:	68fb      	ldr	r3, [r7, #12]
 81066ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81066ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	2200      	movs	r2, #0
 81066f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81066f6:	687b      	ldr	r3, [r7, #4]
 81066f8:	681b      	ldr	r3, [r3, #0]
 81066fa:	68fa      	ldr	r2, [r7, #12]
 81066fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	2220      	movs	r2, #32
 8106702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106706:	687b      	ldr	r3, [r7, #4]
 8106708:	2200      	movs	r2, #0
 810670a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810670e:	2300      	movs	r3, #0
}
 8106710:	4618      	mov	r0, r3
 8106712:	3714      	adds	r7, #20
 8106714:	46bd      	mov	sp, r7
 8106716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810671a:	4770      	bx	lr

0810671c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810671c:	b580      	push	{r7, lr}
 810671e:	b084      	sub	sp, #16
 8106720:	af00      	add	r7, sp, #0
 8106722:	6078      	str	r0, [r7, #4]
 8106724:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106726:	687b      	ldr	r3, [r7, #4]
 8106728:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810672c:	2b01      	cmp	r3, #1
 810672e:	d101      	bne.n	8106734 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8106730:	2302      	movs	r3, #2
 8106732:	e02d      	b.n	8106790 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8106734:	687b      	ldr	r3, [r7, #4]
 8106736:	2201      	movs	r2, #1
 8106738:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	2224      	movs	r2, #36	; 0x24
 8106740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106744:	687b      	ldr	r3, [r7, #4]
 8106746:	681b      	ldr	r3, [r3, #0]
 8106748:	681b      	ldr	r3, [r3, #0]
 810674a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810674c:	687b      	ldr	r3, [r7, #4]
 810674e:	681b      	ldr	r3, [r3, #0]
 8106750:	681a      	ldr	r2, [r3, #0]
 8106752:	687b      	ldr	r3, [r7, #4]
 8106754:	681b      	ldr	r3, [r3, #0]
 8106756:	f022 0201 	bic.w	r2, r2, #1
 810675a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810675c:	687b      	ldr	r3, [r7, #4]
 810675e:	681b      	ldr	r3, [r3, #0]
 8106760:	689b      	ldr	r3, [r3, #8]
 8106762:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	681b      	ldr	r3, [r3, #0]
 810676a:	683a      	ldr	r2, [r7, #0]
 810676c:	430a      	orrs	r2, r1
 810676e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106770:	6878      	ldr	r0, [r7, #4]
 8106772:	f000 f84f 	bl	8106814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106776:	687b      	ldr	r3, [r7, #4]
 8106778:	681b      	ldr	r3, [r3, #0]
 810677a:	68fa      	ldr	r2, [r7, #12]
 810677c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810677e:	687b      	ldr	r3, [r7, #4]
 8106780:	2220      	movs	r2, #32
 8106782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106786:	687b      	ldr	r3, [r7, #4]
 8106788:	2200      	movs	r2, #0
 810678a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810678e:	2300      	movs	r3, #0
}
 8106790:	4618      	mov	r0, r3
 8106792:	3710      	adds	r7, #16
 8106794:	46bd      	mov	sp, r7
 8106796:	bd80      	pop	{r7, pc}

08106798 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106798:	b580      	push	{r7, lr}
 810679a:	b084      	sub	sp, #16
 810679c:	af00      	add	r7, sp, #0
 810679e:	6078      	str	r0, [r7, #4]
 81067a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81067a2:	687b      	ldr	r3, [r7, #4]
 81067a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81067a8:	2b01      	cmp	r3, #1
 81067aa:	d101      	bne.n	81067b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81067ac:	2302      	movs	r3, #2
 81067ae:	e02d      	b.n	810680c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81067b0:	687b      	ldr	r3, [r7, #4]
 81067b2:	2201      	movs	r2, #1
 81067b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81067b8:	687b      	ldr	r3, [r7, #4]
 81067ba:	2224      	movs	r2, #36	; 0x24
 81067bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81067c0:	687b      	ldr	r3, [r7, #4]
 81067c2:	681b      	ldr	r3, [r3, #0]
 81067c4:	681b      	ldr	r3, [r3, #0]
 81067c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81067c8:	687b      	ldr	r3, [r7, #4]
 81067ca:	681b      	ldr	r3, [r3, #0]
 81067cc:	681a      	ldr	r2, [r3, #0]
 81067ce:	687b      	ldr	r3, [r7, #4]
 81067d0:	681b      	ldr	r3, [r3, #0]
 81067d2:	f022 0201 	bic.w	r2, r2, #1
 81067d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81067d8:	687b      	ldr	r3, [r7, #4]
 81067da:	681b      	ldr	r3, [r3, #0]
 81067dc:	689b      	ldr	r3, [r3, #8]
 81067de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81067e2:	687b      	ldr	r3, [r7, #4]
 81067e4:	681b      	ldr	r3, [r3, #0]
 81067e6:	683a      	ldr	r2, [r7, #0]
 81067e8:	430a      	orrs	r2, r1
 81067ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81067ec:	6878      	ldr	r0, [r7, #4]
 81067ee:	f000 f811 	bl	8106814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81067f2:	687b      	ldr	r3, [r7, #4]
 81067f4:	681b      	ldr	r3, [r3, #0]
 81067f6:	68fa      	ldr	r2, [r7, #12]
 81067f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81067fa:	687b      	ldr	r3, [r7, #4]
 81067fc:	2220      	movs	r2, #32
 81067fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106802:	687b      	ldr	r3, [r7, #4]
 8106804:	2200      	movs	r2, #0
 8106806:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 810680a:	2300      	movs	r3, #0
}
 810680c:	4618      	mov	r0, r3
 810680e:	3710      	adds	r7, #16
 8106810:	46bd      	mov	sp, r7
 8106812:	bd80      	pop	{r7, pc}

08106814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8106814:	b480      	push	{r7}
 8106816:	b085      	sub	sp, #20
 8106818:	af00      	add	r7, sp, #0
 810681a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810681c:	687b      	ldr	r3, [r7, #4]
 810681e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106820:	2b00      	cmp	r3, #0
 8106822:	d108      	bne.n	8106836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8106824:	687b      	ldr	r3, [r7, #4]
 8106826:	2201      	movs	r2, #1
 8106828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 810682c:	687b      	ldr	r3, [r7, #4]
 810682e:	2201      	movs	r2, #1
 8106830:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106834:	e031      	b.n	810689a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8106836:	2310      	movs	r3, #16
 8106838:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810683a:	2310      	movs	r3, #16
 810683c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	681b      	ldr	r3, [r3, #0]
 8106842:	689b      	ldr	r3, [r3, #8]
 8106844:	0e5b      	lsrs	r3, r3, #25
 8106846:	b2db      	uxtb	r3, r3
 8106848:	f003 0307 	and.w	r3, r3, #7
 810684c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810684e:	687b      	ldr	r3, [r7, #4]
 8106850:	681b      	ldr	r3, [r3, #0]
 8106852:	689b      	ldr	r3, [r3, #8]
 8106854:	0f5b      	lsrs	r3, r3, #29
 8106856:	b2db      	uxtb	r3, r3
 8106858:	f003 0307 	and.w	r3, r3, #7
 810685c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810685e:	7bbb      	ldrb	r3, [r7, #14]
 8106860:	7b3a      	ldrb	r2, [r7, #12]
 8106862:	4911      	ldr	r1, [pc, #68]	; (81068a8 <UARTEx_SetNbDataToProcess+0x94>)
 8106864:	5c8a      	ldrb	r2, [r1, r2]
 8106866:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810686a:	7b3a      	ldrb	r2, [r7, #12]
 810686c:	490f      	ldr	r1, [pc, #60]	; (81068ac <UARTEx_SetNbDataToProcess+0x98>)
 810686e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106870:	fb93 f3f2 	sdiv	r3, r3, r2
 8106874:	b29a      	uxth	r2, r3
 8106876:	687b      	ldr	r3, [r7, #4]
 8106878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810687c:	7bfb      	ldrb	r3, [r7, #15]
 810687e:	7b7a      	ldrb	r2, [r7, #13]
 8106880:	4909      	ldr	r1, [pc, #36]	; (81068a8 <UARTEx_SetNbDataToProcess+0x94>)
 8106882:	5c8a      	ldrb	r2, [r1, r2]
 8106884:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106888:	7b7a      	ldrb	r2, [r7, #13]
 810688a:	4908      	ldr	r1, [pc, #32]	; (81068ac <UARTEx_SetNbDataToProcess+0x98>)
 810688c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810688e:	fb93 f3f2 	sdiv	r3, r3, r2
 8106892:	b29a      	uxth	r2, r3
 8106894:	687b      	ldr	r3, [r7, #4]
 8106896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810689a:	bf00      	nop
 810689c:	3714      	adds	r7, #20
 810689e:	46bd      	mov	sp, r7
 81068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068a4:	4770      	bx	lr
 81068a6:	bf00      	nop
 81068a8:	0810b488 	.word	0x0810b488
 81068ac:	0810b490 	.word	0x0810b490

081068b0 <__errno>:
 81068b0:	4b01      	ldr	r3, [pc, #4]	; (81068b8 <__errno+0x8>)
 81068b2:	6818      	ldr	r0, [r3, #0]
 81068b4:	4770      	bx	lr
 81068b6:	bf00      	nop
 81068b8:	10000010 	.word	0x10000010

081068bc <__sflush_r>:
 81068bc:	898a      	ldrh	r2, [r1, #12]
 81068be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81068c2:	4605      	mov	r5, r0
 81068c4:	0710      	lsls	r0, r2, #28
 81068c6:	460c      	mov	r4, r1
 81068c8:	d458      	bmi.n	810697c <__sflush_r+0xc0>
 81068ca:	684b      	ldr	r3, [r1, #4]
 81068cc:	2b00      	cmp	r3, #0
 81068ce:	dc05      	bgt.n	81068dc <__sflush_r+0x20>
 81068d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81068d2:	2b00      	cmp	r3, #0
 81068d4:	dc02      	bgt.n	81068dc <__sflush_r+0x20>
 81068d6:	2000      	movs	r0, #0
 81068d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81068dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81068de:	2e00      	cmp	r6, #0
 81068e0:	d0f9      	beq.n	81068d6 <__sflush_r+0x1a>
 81068e2:	2300      	movs	r3, #0
 81068e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81068e8:	682f      	ldr	r7, [r5, #0]
 81068ea:	602b      	str	r3, [r5, #0]
 81068ec:	d032      	beq.n	8106954 <__sflush_r+0x98>
 81068ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81068f0:	89a3      	ldrh	r3, [r4, #12]
 81068f2:	075a      	lsls	r2, r3, #29
 81068f4:	d505      	bpl.n	8106902 <__sflush_r+0x46>
 81068f6:	6863      	ldr	r3, [r4, #4]
 81068f8:	1ac0      	subs	r0, r0, r3
 81068fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81068fc:	b10b      	cbz	r3, 8106902 <__sflush_r+0x46>
 81068fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8106900:	1ac0      	subs	r0, r0, r3
 8106902:	2300      	movs	r3, #0
 8106904:	4602      	mov	r2, r0
 8106906:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8106908:	6a21      	ldr	r1, [r4, #32]
 810690a:	4628      	mov	r0, r5
 810690c:	47b0      	blx	r6
 810690e:	1c43      	adds	r3, r0, #1
 8106910:	89a3      	ldrh	r3, [r4, #12]
 8106912:	d106      	bne.n	8106922 <__sflush_r+0x66>
 8106914:	6829      	ldr	r1, [r5, #0]
 8106916:	291d      	cmp	r1, #29
 8106918:	d82c      	bhi.n	8106974 <__sflush_r+0xb8>
 810691a:	4a2a      	ldr	r2, [pc, #168]	; (81069c4 <__sflush_r+0x108>)
 810691c:	40ca      	lsrs	r2, r1
 810691e:	07d6      	lsls	r6, r2, #31
 8106920:	d528      	bpl.n	8106974 <__sflush_r+0xb8>
 8106922:	2200      	movs	r2, #0
 8106924:	6062      	str	r2, [r4, #4]
 8106926:	04d9      	lsls	r1, r3, #19
 8106928:	6922      	ldr	r2, [r4, #16]
 810692a:	6022      	str	r2, [r4, #0]
 810692c:	d504      	bpl.n	8106938 <__sflush_r+0x7c>
 810692e:	1c42      	adds	r2, r0, #1
 8106930:	d101      	bne.n	8106936 <__sflush_r+0x7a>
 8106932:	682b      	ldr	r3, [r5, #0]
 8106934:	b903      	cbnz	r3, 8106938 <__sflush_r+0x7c>
 8106936:	6560      	str	r0, [r4, #84]	; 0x54
 8106938:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810693a:	602f      	str	r7, [r5, #0]
 810693c:	2900      	cmp	r1, #0
 810693e:	d0ca      	beq.n	81068d6 <__sflush_r+0x1a>
 8106940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8106944:	4299      	cmp	r1, r3
 8106946:	d002      	beq.n	810694e <__sflush_r+0x92>
 8106948:	4628      	mov	r0, r5
 810694a:	f000 f99f 	bl	8106c8c <_free_r>
 810694e:	2000      	movs	r0, #0
 8106950:	6360      	str	r0, [r4, #52]	; 0x34
 8106952:	e7c1      	b.n	81068d8 <__sflush_r+0x1c>
 8106954:	6a21      	ldr	r1, [r4, #32]
 8106956:	2301      	movs	r3, #1
 8106958:	4628      	mov	r0, r5
 810695a:	47b0      	blx	r6
 810695c:	1c41      	adds	r1, r0, #1
 810695e:	d1c7      	bne.n	81068f0 <__sflush_r+0x34>
 8106960:	682b      	ldr	r3, [r5, #0]
 8106962:	2b00      	cmp	r3, #0
 8106964:	d0c4      	beq.n	81068f0 <__sflush_r+0x34>
 8106966:	2b1d      	cmp	r3, #29
 8106968:	d001      	beq.n	810696e <__sflush_r+0xb2>
 810696a:	2b16      	cmp	r3, #22
 810696c:	d101      	bne.n	8106972 <__sflush_r+0xb6>
 810696e:	602f      	str	r7, [r5, #0]
 8106970:	e7b1      	b.n	81068d6 <__sflush_r+0x1a>
 8106972:	89a3      	ldrh	r3, [r4, #12]
 8106974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106978:	81a3      	strh	r3, [r4, #12]
 810697a:	e7ad      	b.n	81068d8 <__sflush_r+0x1c>
 810697c:	690f      	ldr	r7, [r1, #16]
 810697e:	2f00      	cmp	r7, #0
 8106980:	d0a9      	beq.n	81068d6 <__sflush_r+0x1a>
 8106982:	0793      	lsls	r3, r2, #30
 8106984:	680e      	ldr	r6, [r1, #0]
 8106986:	bf08      	it	eq
 8106988:	694b      	ldreq	r3, [r1, #20]
 810698a:	600f      	str	r7, [r1, #0]
 810698c:	bf18      	it	ne
 810698e:	2300      	movne	r3, #0
 8106990:	eba6 0807 	sub.w	r8, r6, r7
 8106994:	608b      	str	r3, [r1, #8]
 8106996:	f1b8 0f00 	cmp.w	r8, #0
 810699a:	dd9c      	ble.n	81068d6 <__sflush_r+0x1a>
 810699c:	6a21      	ldr	r1, [r4, #32]
 810699e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81069a0:	4643      	mov	r3, r8
 81069a2:	463a      	mov	r2, r7
 81069a4:	4628      	mov	r0, r5
 81069a6:	47b0      	blx	r6
 81069a8:	2800      	cmp	r0, #0
 81069aa:	dc06      	bgt.n	81069ba <__sflush_r+0xfe>
 81069ac:	89a3      	ldrh	r3, [r4, #12]
 81069ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81069b2:	81a3      	strh	r3, [r4, #12]
 81069b4:	f04f 30ff 	mov.w	r0, #4294967295
 81069b8:	e78e      	b.n	81068d8 <__sflush_r+0x1c>
 81069ba:	4407      	add	r7, r0
 81069bc:	eba8 0800 	sub.w	r8, r8, r0
 81069c0:	e7e9      	b.n	8106996 <__sflush_r+0xda>
 81069c2:	bf00      	nop
 81069c4:	20400001 	.word	0x20400001

081069c8 <_fflush_r>:
 81069c8:	b538      	push	{r3, r4, r5, lr}
 81069ca:	690b      	ldr	r3, [r1, #16]
 81069cc:	4605      	mov	r5, r0
 81069ce:	460c      	mov	r4, r1
 81069d0:	b913      	cbnz	r3, 81069d8 <_fflush_r+0x10>
 81069d2:	2500      	movs	r5, #0
 81069d4:	4628      	mov	r0, r5
 81069d6:	bd38      	pop	{r3, r4, r5, pc}
 81069d8:	b118      	cbz	r0, 81069e2 <_fflush_r+0x1a>
 81069da:	6983      	ldr	r3, [r0, #24]
 81069dc:	b90b      	cbnz	r3, 81069e2 <_fflush_r+0x1a>
 81069de:	f000 f887 	bl	8106af0 <__sinit>
 81069e2:	4b14      	ldr	r3, [pc, #80]	; (8106a34 <_fflush_r+0x6c>)
 81069e4:	429c      	cmp	r4, r3
 81069e6:	d11b      	bne.n	8106a20 <_fflush_r+0x58>
 81069e8:	686c      	ldr	r4, [r5, #4]
 81069ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81069ee:	2b00      	cmp	r3, #0
 81069f0:	d0ef      	beq.n	81069d2 <_fflush_r+0xa>
 81069f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81069f4:	07d0      	lsls	r0, r2, #31
 81069f6:	d404      	bmi.n	8106a02 <_fflush_r+0x3a>
 81069f8:	0599      	lsls	r1, r3, #22
 81069fa:	d402      	bmi.n	8106a02 <_fflush_r+0x3a>
 81069fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81069fe:	f000 f93a 	bl	8106c76 <__retarget_lock_acquire_recursive>
 8106a02:	4628      	mov	r0, r5
 8106a04:	4621      	mov	r1, r4
 8106a06:	f7ff ff59 	bl	81068bc <__sflush_r>
 8106a0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106a0c:	07da      	lsls	r2, r3, #31
 8106a0e:	4605      	mov	r5, r0
 8106a10:	d4e0      	bmi.n	81069d4 <_fflush_r+0xc>
 8106a12:	89a3      	ldrh	r3, [r4, #12]
 8106a14:	059b      	lsls	r3, r3, #22
 8106a16:	d4dd      	bmi.n	81069d4 <_fflush_r+0xc>
 8106a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106a1a:	f000 f92d 	bl	8106c78 <__retarget_lock_release_recursive>
 8106a1e:	e7d9      	b.n	81069d4 <_fflush_r+0xc>
 8106a20:	4b05      	ldr	r3, [pc, #20]	; (8106a38 <_fflush_r+0x70>)
 8106a22:	429c      	cmp	r4, r3
 8106a24:	d101      	bne.n	8106a2a <_fflush_r+0x62>
 8106a26:	68ac      	ldr	r4, [r5, #8]
 8106a28:	e7df      	b.n	81069ea <_fflush_r+0x22>
 8106a2a:	4b04      	ldr	r3, [pc, #16]	; (8106a3c <_fflush_r+0x74>)
 8106a2c:	429c      	cmp	r4, r3
 8106a2e:	bf08      	it	eq
 8106a30:	68ec      	ldreq	r4, [r5, #12]
 8106a32:	e7da      	b.n	81069ea <_fflush_r+0x22>
 8106a34:	0810b4b8 	.word	0x0810b4b8
 8106a38:	0810b4d8 	.word	0x0810b4d8
 8106a3c:	0810b498 	.word	0x0810b498

08106a40 <std>:
 8106a40:	2300      	movs	r3, #0
 8106a42:	b510      	push	{r4, lr}
 8106a44:	4604      	mov	r4, r0
 8106a46:	e9c0 3300 	strd	r3, r3, [r0]
 8106a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8106a4e:	6083      	str	r3, [r0, #8]
 8106a50:	8181      	strh	r1, [r0, #12]
 8106a52:	6643      	str	r3, [r0, #100]	; 0x64
 8106a54:	81c2      	strh	r2, [r0, #14]
 8106a56:	6183      	str	r3, [r0, #24]
 8106a58:	4619      	mov	r1, r3
 8106a5a:	2208      	movs	r2, #8
 8106a5c:	305c      	adds	r0, #92	; 0x5c
 8106a5e:	f000 f90c 	bl	8106c7a <memset>
 8106a62:	4b05      	ldr	r3, [pc, #20]	; (8106a78 <std+0x38>)
 8106a64:	6263      	str	r3, [r4, #36]	; 0x24
 8106a66:	4b05      	ldr	r3, [pc, #20]	; (8106a7c <std+0x3c>)
 8106a68:	62a3      	str	r3, [r4, #40]	; 0x28
 8106a6a:	4b05      	ldr	r3, [pc, #20]	; (8106a80 <std+0x40>)
 8106a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8106a6e:	4b05      	ldr	r3, [pc, #20]	; (8106a84 <std+0x44>)
 8106a70:	6224      	str	r4, [r4, #32]
 8106a72:	6323      	str	r3, [r4, #48]	; 0x30
 8106a74:	bd10      	pop	{r4, pc}
 8106a76:	bf00      	nop
 8106a78:	08107de9 	.word	0x08107de9
 8106a7c:	08107e0b 	.word	0x08107e0b
 8106a80:	08107e43 	.word	0x08107e43
 8106a84:	08107e67 	.word	0x08107e67

08106a88 <_cleanup_r>:
 8106a88:	4901      	ldr	r1, [pc, #4]	; (8106a90 <_cleanup_r+0x8>)
 8106a8a:	f000 b8af 	b.w	8106bec <_fwalk_reent>
 8106a8e:	bf00      	nop
 8106a90:	081069c9 	.word	0x081069c9

08106a94 <__sfmoreglue>:
 8106a94:	b570      	push	{r4, r5, r6, lr}
 8106a96:	1e4a      	subs	r2, r1, #1
 8106a98:	2568      	movs	r5, #104	; 0x68
 8106a9a:	4355      	muls	r5, r2
 8106a9c:	460e      	mov	r6, r1
 8106a9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8106aa2:	f000 f943 	bl	8106d2c <_malloc_r>
 8106aa6:	4604      	mov	r4, r0
 8106aa8:	b140      	cbz	r0, 8106abc <__sfmoreglue+0x28>
 8106aaa:	2100      	movs	r1, #0
 8106aac:	e9c0 1600 	strd	r1, r6, [r0]
 8106ab0:	300c      	adds	r0, #12
 8106ab2:	60a0      	str	r0, [r4, #8]
 8106ab4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8106ab8:	f000 f8df 	bl	8106c7a <memset>
 8106abc:	4620      	mov	r0, r4
 8106abe:	bd70      	pop	{r4, r5, r6, pc}

08106ac0 <__sfp_lock_acquire>:
 8106ac0:	4801      	ldr	r0, [pc, #4]	; (8106ac8 <__sfp_lock_acquire+0x8>)
 8106ac2:	f000 b8d8 	b.w	8106c76 <__retarget_lock_acquire_recursive>
 8106ac6:	bf00      	nop
 8106ac8:	1003ebf4 	.word	0x1003ebf4

08106acc <__sfp_lock_release>:
 8106acc:	4801      	ldr	r0, [pc, #4]	; (8106ad4 <__sfp_lock_release+0x8>)
 8106ace:	f000 b8d3 	b.w	8106c78 <__retarget_lock_release_recursive>
 8106ad2:	bf00      	nop
 8106ad4:	1003ebf4 	.word	0x1003ebf4

08106ad8 <__sinit_lock_acquire>:
 8106ad8:	4801      	ldr	r0, [pc, #4]	; (8106ae0 <__sinit_lock_acquire+0x8>)
 8106ada:	f000 b8cc 	b.w	8106c76 <__retarget_lock_acquire_recursive>
 8106ade:	bf00      	nop
 8106ae0:	1003ebef 	.word	0x1003ebef

08106ae4 <__sinit_lock_release>:
 8106ae4:	4801      	ldr	r0, [pc, #4]	; (8106aec <__sinit_lock_release+0x8>)
 8106ae6:	f000 b8c7 	b.w	8106c78 <__retarget_lock_release_recursive>
 8106aea:	bf00      	nop
 8106aec:	1003ebef 	.word	0x1003ebef

08106af0 <__sinit>:
 8106af0:	b510      	push	{r4, lr}
 8106af2:	4604      	mov	r4, r0
 8106af4:	f7ff fff0 	bl	8106ad8 <__sinit_lock_acquire>
 8106af8:	69a3      	ldr	r3, [r4, #24]
 8106afa:	b11b      	cbz	r3, 8106b04 <__sinit+0x14>
 8106afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106b00:	f7ff bff0 	b.w	8106ae4 <__sinit_lock_release>
 8106b04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8106b08:	6523      	str	r3, [r4, #80]	; 0x50
 8106b0a:	4b13      	ldr	r3, [pc, #76]	; (8106b58 <__sinit+0x68>)
 8106b0c:	4a13      	ldr	r2, [pc, #76]	; (8106b5c <__sinit+0x6c>)
 8106b0e:	681b      	ldr	r3, [r3, #0]
 8106b10:	62a2      	str	r2, [r4, #40]	; 0x28
 8106b12:	42a3      	cmp	r3, r4
 8106b14:	bf04      	itt	eq
 8106b16:	2301      	moveq	r3, #1
 8106b18:	61a3      	streq	r3, [r4, #24]
 8106b1a:	4620      	mov	r0, r4
 8106b1c:	f000 f820 	bl	8106b60 <__sfp>
 8106b20:	6060      	str	r0, [r4, #4]
 8106b22:	4620      	mov	r0, r4
 8106b24:	f000 f81c 	bl	8106b60 <__sfp>
 8106b28:	60a0      	str	r0, [r4, #8]
 8106b2a:	4620      	mov	r0, r4
 8106b2c:	f000 f818 	bl	8106b60 <__sfp>
 8106b30:	2200      	movs	r2, #0
 8106b32:	60e0      	str	r0, [r4, #12]
 8106b34:	2104      	movs	r1, #4
 8106b36:	6860      	ldr	r0, [r4, #4]
 8106b38:	f7ff ff82 	bl	8106a40 <std>
 8106b3c:	68a0      	ldr	r0, [r4, #8]
 8106b3e:	2201      	movs	r2, #1
 8106b40:	2109      	movs	r1, #9
 8106b42:	f7ff ff7d 	bl	8106a40 <std>
 8106b46:	68e0      	ldr	r0, [r4, #12]
 8106b48:	2202      	movs	r2, #2
 8106b4a:	2112      	movs	r1, #18
 8106b4c:	f7ff ff78 	bl	8106a40 <std>
 8106b50:	2301      	movs	r3, #1
 8106b52:	61a3      	str	r3, [r4, #24]
 8106b54:	e7d2      	b.n	8106afc <__sinit+0xc>
 8106b56:	bf00      	nop
 8106b58:	0810b4f8 	.word	0x0810b4f8
 8106b5c:	08106a89 	.word	0x08106a89

08106b60 <__sfp>:
 8106b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106b62:	4607      	mov	r7, r0
 8106b64:	f7ff ffac 	bl	8106ac0 <__sfp_lock_acquire>
 8106b68:	4b1e      	ldr	r3, [pc, #120]	; (8106be4 <__sfp+0x84>)
 8106b6a:	681e      	ldr	r6, [r3, #0]
 8106b6c:	69b3      	ldr	r3, [r6, #24]
 8106b6e:	b913      	cbnz	r3, 8106b76 <__sfp+0x16>
 8106b70:	4630      	mov	r0, r6
 8106b72:	f7ff ffbd 	bl	8106af0 <__sinit>
 8106b76:	3648      	adds	r6, #72	; 0x48
 8106b78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8106b7c:	3b01      	subs	r3, #1
 8106b7e:	d503      	bpl.n	8106b88 <__sfp+0x28>
 8106b80:	6833      	ldr	r3, [r6, #0]
 8106b82:	b30b      	cbz	r3, 8106bc8 <__sfp+0x68>
 8106b84:	6836      	ldr	r6, [r6, #0]
 8106b86:	e7f7      	b.n	8106b78 <__sfp+0x18>
 8106b88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8106b8c:	b9d5      	cbnz	r5, 8106bc4 <__sfp+0x64>
 8106b8e:	4b16      	ldr	r3, [pc, #88]	; (8106be8 <__sfp+0x88>)
 8106b90:	60e3      	str	r3, [r4, #12]
 8106b92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8106b96:	6665      	str	r5, [r4, #100]	; 0x64
 8106b98:	f000 f86c 	bl	8106c74 <__retarget_lock_init_recursive>
 8106b9c:	f7ff ff96 	bl	8106acc <__sfp_lock_release>
 8106ba0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8106ba4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8106ba8:	6025      	str	r5, [r4, #0]
 8106baa:	61a5      	str	r5, [r4, #24]
 8106bac:	2208      	movs	r2, #8
 8106bae:	4629      	mov	r1, r5
 8106bb0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8106bb4:	f000 f861 	bl	8106c7a <memset>
 8106bb8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8106bbc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8106bc0:	4620      	mov	r0, r4
 8106bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106bc4:	3468      	adds	r4, #104	; 0x68
 8106bc6:	e7d9      	b.n	8106b7c <__sfp+0x1c>
 8106bc8:	2104      	movs	r1, #4
 8106bca:	4638      	mov	r0, r7
 8106bcc:	f7ff ff62 	bl	8106a94 <__sfmoreglue>
 8106bd0:	4604      	mov	r4, r0
 8106bd2:	6030      	str	r0, [r6, #0]
 8106bd4:	2800      	cmp	r0, #0
 8106bd6:	d1d5      	bne.n	8106b84 <__sfp+0x24>
 8106bd8:	f7ff ff78 	bl	8106acc <__sfp_lock_release>
 8106bdc:	230c      	movs	r3, #12
 8106bde:	603b      	str	r3, [r7, #0]
 8106be0:	e7ee      	b.n	8106bc0 <__sfp+0x60>
 8106be2:	bf00      	nop
 8106be4:	0810b4f8 	.word	0x0810b4f8
 8106be8:	ffff0001 	.word	0xffff0001

08106bec <_fwalk_reent>:
 8106bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106bf0:	4606      	mov	r6, r0
 8106bf2:	4688      	mov	r8, r1
 8106bf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8106bf8:	2700      	movs	r7, #0
 8106bfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8106bfe:	f1b9 0901 	subs.w	r9, r9, #1
 8106c02:	d505      	bpl.n	8106c10 <_fwalk_reent+0x24>
 8106c04:	6824      	ldr	r4, [r4, #0]
 8106c06:	2c00      	cmp	r4, #0
 8106c08:	d1f7      	bne.n	8106bfa <_fwalk_reent+0xe>
 8106c0a:	4638      	mov	r0, r7
 8106c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106c10:	89ab      	ldrh	r3, [r5, #12]
 8106c12:	2b01      	cmp	r3, #1
 8106c14:	d907      	bls.n	8106c26 <_fwalk_reent+0x3a>
 8106c16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8106c1a:	3301      	adds	r3, #1
 8106c1c:	d003      	beq.n	8106c26 <_fwalk_reent+0x3a>
 8106c1e:	4629      	mov	r1, r5
 8106c20:	4630      	mov	r0, r6
 8106c22:	47c0      	blx	r8
 8106c24:	4307      	orrs	r7, r0
 8106c26:	3568      	adds	r5, #104	; 0x68
 8106c28:	e7e9      	b.n	8106bfe <_fwalk_reent+0x12>
	...

08106c2c <__libc_init_array>:
 8106c2c:	b570      	push	{r4, r5, r6, lr}
 8106c2e:	4d0d      	ldr	r5, [pc, #52]	; (8106c64 <__libc_init_array+0x38>)
 8106c30:	4c0d      	ldr	r4, [pc, #52]	; (8106c68 <__libc_init_array+0x3c>)
 8106c32:	1b64      	subs	r4, r4, r5
 8106c34:	10a4      	asrs	r4, r4, #2
 8106c36:	2600      	movs	r6, #0
 8106c38:	42a6      	cmp	r6, r4
 8106c3a:	d109      	bne.n	8106c50 <__libc_init_array+0x24>
 8106c3c:	4d0b      	ldr	r5, [pc, #44]	; (8106c6c <__libc_init_array+0x40>)
 8106c3e:	4c0c      	ldr	r4, [pc, #48]	; (8106c70 <__libc_init_array+0x44>)
 8106c40:	f004 fbe0 	bl	810b404 <_init>
 8106c44:	1b64      	subs	r4, r4, r5
 8106c46:	10a4      	asrs	r4, r4, #2
 8106c48:	2600      	movs	r6, #0
 8106c4a:	42a6      	cmp	r6, r4
 8106c4c:	d105      	bne.n	8106c5a <__libc_init_array+0x2e>
 8106c4e:	bd70      	pop	{r4, r5, r6, pc}
 8106c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8106c54:	4798      	blx	r3
 8106c56:	3601      	adds	r6, #1
 8106c58:	e7ee      	b.n	8106c38 <__libc_init_array+0xc>
 8106c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8106c5e:	4798      	blx	r3
 8106c60:	3601      	adds	r6, #1
 8106c62:	e7f2      	b.n	8106c4a <__libc_init_array+0x1e>
 8106c64:	0810b954 	.word	0x0810b954
 8106c68:	0810b954 	.word	0x0810b954
 8106c6c:	0810b954 	.word	0x0810b954
 8106c70:	0810b958 	.word	0x0810b958

08106c74 <__retarget_lock_init_recursive>:
 8106c74:	4770      	bx	lr

08106c76 <__retarget_lock_acquire_recursive>:
 8106c76:	4770      	bx	lr

08106c78 <__retarget_lock_release_recursive>:
 8106c78:	4770      	bx	lr

08106c7a <memset>:
 8106c7a:	4402      	add	r2, r0
 8106c7c:	4603      	mov	r3, r0
 8106c7e:	4293      	cmp	r3, r2
 8106c80:	d100      	bne.n	8106c84 <memset+0xa>
 8106c82:	4770      	bx	lr
 8106c84:	f803 1b01 	strb.w	r1, [r3], #1
 8106c88:	e7f9      	b.n	8106c7e <memset+0x4>
	...

08106c8c <_free_r>:
 8106c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8106c8e:	2900      	cmp	r1, #0
 8106c90:	d048      	beq.n	8106d24 <_free_r+0x98>
 8106c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106c96:	9001      	str	r0, [sp, #4]
 8106c98:	2b00      	cmp	r3, #0
 8106c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8106c9e:	bfb8      	it	lt
 8106ca0:	18e4      	addlt	r4, r4, r3
 8106ca2:	f003 fb03 	bl	810a2ac <__malloc_lock>
 8106ca6:	4a20      	ldr	r2, [pc, #128]	; (8106d28 <_free_r+0x9c>)
 8106ca8:	9801      	ldr	r0, [sp, #4]
 8106caa:	6813      	ldr	r3, [r2, #0]
 8106cac:	4615      	mov	r5, r2
 8106cae:	b933      	cbnz	r3, 8106cbe <_free_r+0x32>
 8106cb0:	6063      	str	r3, [r4, #4]
 8106cb2:	6014      	str	r4, [r2, #0]
 8106cb4:	b003      	add	sp, #12
 8106cb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8106cba:	f003 bafd 	b.w	810a2b8 <__malloc_unlock>
 8106cbe:	42a3      	cmp	r3, r4
 8106cc0:	d90b      	bls.n	8106cda <_free_r+0x4e>
 8106cc2:	6821      	ldr	r1, [r4, #0]
 8106cc4:	1862      	adds	r2, r4, r1
 8106cc6:	4293      	cmp	r3, r2
 8106cc8:	bf04      	itt	eq
 8106cca:	681a      	ldreq	r2, [r3, #0]
 8106ccc:	685b      	ldreq	r3, [r3, #4]
 8106cce:	6063      	str	r3, [r4, #4]
 8106cd0:	bf04      	itt	eq
 8106cd2:	1852      	addeq	r2, r2, r1
 8106cd4:	6022      	streq	r2, [r4, #0]
 8106cd6:	602c      	str	r4, [r5, #0]
 8106cd8:	e7ec      	b.n	8106cb4 <_free_r+0x28>
 8106cda:	461a      	mov	r2, r3
 8106cdc:	685b      	ldr	r3, [r3, #4]
 8106cde:	b10b      	cbz	r3, 8106ce4 <_free_r+0x58>
 8106ce0:	42a3      	cmp	r3, r4
 8106ce2:	d9fa      	bls.n	8106cda <_free_r+0x4e>
 8106ce4:	6811      	ldr	r1, [r2, #0]
 8106ce6:	1855      	adds	r5, r2, r1
 8106ce8:	42a5      	cmp	r5, r4
 8106cea:	d10b      	bne.n	8106d04 <_free_r+0x78>
 8106cec:	6824      	ldr	r4, [r4, #0]
 8106cee:	4421      	add	r1, r4
 8106cf0:	1854      	adds	r4, r2, r1
 8106cf2:	42a3      	cmp	r3, r4
 8106cf4:	6011      	str	r1, [r2, #0]
 8106cf6:	d1dd      	bne.n	8106cb4 <_free_r+0x28>
 8106cf8:	681c      	ldr	r4, [r3, #0]
 8106cfa:	685b      	ldr	r3, [r3, #4]
 8106cfc:	6053      	str	r3, [r2, #4]
 8106cfe:	4421      	add	r1, r4
 8106d00:	6011      	str	r1, [r2, #0]
 8106d02:	e7d7      	b.n	8106cb4 <_free_r+0x28>
 8106d04:	d902      	bls.n	8106d0c <_free_r+0x80>
 8106d06:	230c      	movs	r3, #12
 8106d08:	6003      	str	r3, [r0, #0]
 8106d0a:	e7d3      	b.n	8106cb4 <_free_r+0x28>
 8106d0c:	6825      	ldr	r5, [r4, #0]
 8106d0e:	1961      	adds	r1, r4, r5
 8106d10:	428b      	cmp	r3, r1
 8106d12:	bf04      	itt	eq
 8106d14:	6819      	ldreq	r1, [r3, #0]
 8106d16:	685b      	ldreq	r3, [r3, #4]
 8106d18:	6063      	str	r3, [r4, #4]
 8106d1a:	bf04      	itt	eq
 8106d1c:	1949      	addeq	r1, r1, r5
 8106d1e:	6021      	streq	r1, [r4, #0]
 8106d20:	6054      	str	r4, [r2, #4]
 8106d22:	e7c7      	b.n	8106cb4 <_free_r+0x28>
 8106d24:	b003      	add	sp, #12
 8106d26:	bd30      	pop	{r4, r5, pc}
 8106d28:	1000020c 	.word	0x1000020c

08106d2c <_malloc_r>:
 8106d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106d2e:	1ccd      	adds	r5, r1, #3
 8106d30:	f025 0503 	bic.w	r5, r5, #3
 8106d34:	3508      	adds	r5, #8
 8106d36:	2d0c      	cmp	r5, #12
 8106d38:	bf38      	it	cc
 8106d3a:	250c      	movcc	r5, #12
 8106d3c:	2d00      	cmp	r5, #0
 8106d3e:	4606      	mov	r6, r0
 8106d40:	db01      	blt.n	8106d46 <_malloc_r+0x1a>
 8106d42:	42a9      	cmp	r1, r5
 8106d44:	d903      	bls.n	8106d4e <_malloc_r+0x22>
 8106d46:	230c      	movs	r3, #12
 8106d48:	6033      	str	r3, [r6, #0]
 8106d4a:	2000      	movs	r0, #0
 8106d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106d4e:	f003 faad 	bl	810a2ac <__malloc_lock>
 8106d52:	4921      	ldr	r1, [pc, #132]	; (8106dd8 <_malloc_r+0xac>)
 8106d54:	680a      	ldr	r2, [r1, #0]
 8106d56:	4614      	mov	r4, r2
 8106d58:	b99c      	cbnz	r4, 8106d82 <_malloc_r+0x56>
 8106d5a:	4f20      	ldr	r7, [pc, #128]	; (8106ddc <_malloc_r+0xb0>)
 8106d5c:	683b      	ldr	r3, [r7, #0]
 8106d5e:	b923      	cbnz	r3, 8106d6a <_malloc_r+0x3e>
 8106d60:	4621      	mov	r1, r4
 8106d62:	4630      	mov	r0, r6
 8106d64:	f000 ff44 	bl	8107bf0 <_sbrk_r>
 8106d68:	6038      	str	r0, [r7, #0]
 8106d6a:	4629      	mov	r1, r5
 8106d6c:	4630      	mov	r0, r6
 8106d6e:	f000 ff3f 	bl	8107bf0 <_sbrk_r>
 8106d72:	1c43      	adds	r3, r0, #1
 8106d74:	d123      	bne.n	8106dbe <_malloc_r+0x92>
 8106d76:	230c      	movs	r3, #12
 8106d78:	6033      	str	r3, [r6, #0]
 8106d7a:	4630      	mov	r0, r6
 8106d7c:	f003 fa9c 	bl	810a2b8 <__malloc_unlock>
 8106d80:	e7e3      	b.n	8106d4a <_malloc_r+0x1e>
 8106d82:	6823      	ldr	r3, [r4, #0]
 8106d84:	1b5b      	subs	r3, r3, r5
 8106d86:	d417      	bmi.n	8106db8 <_malloc_r+0x8c>
 8106d88:	2b0b      	cmp	r3, #11
 8106d8a:	d903      	bls.n	8106d94 <_malloc_r+0x68>
 8106d8c:	6023      	str	r3, [r4, #0]
 8106d8e:	441c      	add	r4, r3
 8106d90:	6025      	str	r5, [r4, #0]
 8106d92:	e004      	b.n	8106d9e <_malloc_r+0x72>
 8106d94:	6863      	ldr	r3, [r4, #4]
 8106d96:	42a2      	cmp	r2, r4
 8106d98:	bf0c      	ite	eq
 8106d9a:	600b      	streq	r3, [r1, #0]
 8106d9c:	6053      	strne	r3, [r2, #4]
 8106d9e:	4630      	mov	r0, r6
 8106da0:	f003 fa8a 	bl	810a2b8 <__malloc_unlock>
 8106da4:	f104 000b 	add.w	r0, r4, #11
 8106da8:	1d23      	adds	r3, r4, #4
 8106daa:	f020 0007 	bic.w	r0, r0, #7
 8106dae:	1ac2      	subs	r2, r0, r3
 8106db0:	d0cc      	beq.n	8106d4c <_malloc_r+0x20>
 8106db2:	1a1b      	subs	r3, r3, r0
 8106db4:	50a3      	str	r3, [r4, r2]
 8106db6:	e7c9      	b.n	8106d4c <_malloc_r+0x20>
 8106db8:	4622      	mov	r2, r4
 8106dba:	6864      	ldr	r4, [r4, #4]
 8106dbc:	e7cc      	b.n	8106d58 <_malloc_r+0x2c>
 8106dbe:	1cc4      	adds	r4, r0, #3
 8106dc0:	f024 0403 	bic.w	r4, r4, #3
 8106dc4:	42a0      	cmp	r0, r4
 8106dc6:	d0e3      	beq.n	8106d90 <_malloc_r+0x64>
 8106dc8:	1a21      	subs	r1, r4, r0
 8106dca:	4630      	mov	r0, r6
 8106dcc:	f000 ff10 	bl	8107bf0 <_sbrk_r>
 8106dd0:	3001      	adds	r0, #1
 8106dd2:	d1dd      	bne.n	8106d90 <_malloc_r+0x64>
 8106dd4:	e7cf      	b.n	8106d76 <_malloc_r+0x4a>
 8106dd6:	bf00      	nop
 8106dd8:	1000020c 	.word	0x1000020c
 8106ddc:	10000210 	.word	0x10000210

08106de0 <__cvt>:
 8106de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106de4:	ec55 4b10 	vmov	r4, r5, d0
 8106de8:	2d00      	cmp	r5, #0
 8106dea:	460e      	mov	r6, r1
 8106dec:	4619      	mov	r1, r3
 8106dee:	462b      	mov	r3, r5
 8106df0:	bfbb      	ittet	lt
 8106df2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8106df6:	461d      	movlt	r5, r3
 8106df8:	2300      	movge	r3, #0
 8106dfa:	232d      	movlt	r3, #45	; 0x2d
 8106dfc:	700b      	strb	r3, [r1, #0]
 8106dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8106e00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8106e04:	4691      	mov	r9, r2
 8106e06:	f023 0820 	bic.w	r8, r3, #32
 8106e0a:	bfbc      	itt	lt
 8106e0c:	4622      	movlt	r2, r4
 8106e0e:	4614      	movlt	r4, r2
 8106e10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106e14:	d005      	beq.n	8106e22 <__cvt+0x42>
 8106e16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8106e1a:	d100      	bne.n	8106e1e <__cvt+0x3e>
 8106e1c:	3601      	adds	r6, #1
 8106e1e:	2102      	movs	r1, #2
 8106e20:	e000      	b.n	8106e24 <__cvt+0x44>
 8106e22:	2103      	movs	r1, #3
 8106e24:	ab03      	add	r3, sp, #12
 8106e26:	9301      	str	r3, [sp, #4]
 8106e28:	ab02      	add	r3, sp, #8
 8106e2a:	9300      	str	r3, [sp, #0]
 8106e2c:	ec45 4b10 	vmov	d0, r4, r5
 8106e30:	4653      	mov	r3, sl
 8106e32:	4632      	mov	r2, r6
 8106e34:	f002 f83c 	bl	8108eb0 <_dtoa_r>
 8106e38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8106e3c:	4607      	mov	r7, r0
 8106e3e:	d102      	bne.n	8106e46 <__cvt+0x66>
 8106e40:	f019 0f01 	tst.w	r9, #1
 8106e44:	d022      	beq.n	8106e8c <__cvt+0xac>
 8106e46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106e4a:	eb07 0906 	add.w	r9, r7, r6
 8106e4e:	d110      	bne.n	8106e72 <__cvt+0x92>
 8106e50:	783b      	ldrb	r3, [r7, #0]
 8106e52:	2b30      	cmp	r3, #48	; 0x30
 8106e54:	d10a      	bne.n	8106e6c <__cvt+0x8c>
 8106e56:	2200      	movs	r2, #0
 8106e58:	2300      	movs	r3, #0
 8106e5a:	4620      	mov	r0, r4
 8106e5c:	4629      	mov	r1, r5
 8106e5e:	f7f9 febb 	bl	8100bd8 <__aeabi_dcmpeq>
 8106e62:	b918      	cbnz	r0, 8106e6c <__cvt+0x8c>
 8106e64:	f1c6 0601 	rsb	r6, r6, #1
 8106e68:	f8ca 6000 	str.w	r6, [sl]
 8106e6c:	f8da 3000 	ldr.w	r3, [sl]
 8106e70:	4499      	add	r9, r3
 8106e72:	2200      	movs	r2, #0
 8106e74:	2300      	movs	r3, #0
 8106e76:	4620      	mov	r0, r4
 8106e78:	4629      	mov	r1, r5
 8106e7a:	f7f9 fead 	bl	8100bd8 <__aeabi_dcmpeq>
 8106e7e:	b108      	cbz	r0, 8106e84 <__cvt+0xa4>
 8106e80:	f8cd 900c 	str.w	r9, [sp, #12]
 8106e84:	2230      	movs	r2, #48	; 0x30
 8106e86:	9b03      	ldr	r3, [sp, #12]
 8106e88:	454b      	cmp	r3, r9
 8106e8a:	d307      	bcc.n	8106e9c <__cvt+0xbc>
 8106e8c:	9b03      	ldr	r3, [sp, #12]
 8106e8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8106e90:	1bdb      	subs	r3, r3, r7
 8106e92:	4638      	mov	r0, r7
 8106e94:	6013      	str	r3, [r2, #0]
 8106e96:	b004      	add	sp, #16
 8106e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106e9c:	1c59      	adds	r1, r3, #1
 8106e9e:	9103      	str	r1, [sp, #12]
 8106ea0:	701a      	strb	r2, [r3, #0]
 8106ea2:	e7f0      	b.n	8106e86 <__cvt+0xa6>

08106ea4 <__exponent>:
 8106ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8106ea6:	4603      	mov	r3, r0
 8106ea8:	2900      	cmp	r1, #0
 8106eaa:	bfb8      	it	lt
 8106eac:	4249      	neglt	r1, r1
 8106eae:	f803 2b02 	strb.w	r2, [r3], #2
 8106eb2:	bfb4      	ite	lt
 8106eb4:	222d      	movlt	r2, #45	; 0x2d
 8106eb6:	222b      	movge	r2, #43	; 0x2b
 8106eb8:	2909      	cmp	r1, #9
 8106eba:	7042      	strb	r2, [r0, #1]
 8106ebc:	dd2a      	ble.n	8106f14 <__exponent+0x70>
 8106ebe:	f10d 0407 	add.w	r4, sp, #7
 8106ec2:	46a4      	mov	ip, r4
 8106ec4:	270a      	movs	r7, #10
 8106ec6:	46a6      	mov	lr, r4
 8106ec8:	460a      	mov	r2, r1
 8106eca:	fb91 f6f7 	sdiv	r6, r1, r7
 8106ece:	fb07 1516 	mls	r5, r7, r6, r1
 8106ed2:	3530      	adds	r5, #48	; 0x30
 8106ed4:	2a63      	cmp	r2, #99	; 0x63
 8106ed6:	f104 34ff 	add.w	r4, r4, #4294967295
 8106eda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8106ede:	4631      	mov	r1, r6
 8106ee0:	dcf1      	bgt.n	8106ec6 <__exponent+0x22>
 8106ee2:	3130      	adds	r1, #48	; 0x30
 8106ee4:	f1ae 0502 	sub.w	r5, lr, #2
 8106ee8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8106eec:	1c44      	adds	r4, r0, #1
 8106eee:	4629      	mov	r1, r5
 8106ef0:	4561      	cmp	r1, ip
 8106ef2:	d30a      	bcc.n	8106f0a <__exponent+0x66>
 8106ef4:	f10d 0209 	add.w	r2, sp, #9
 8106ef8:	eba2 020e 	sub.w	r2, r2, lr
 8106efc:	4565      	cmp	r5, ip
 8106efe:	bf88      	it	hi
 8106f00:	2200      	movhi	r2, #0
 8106f02:	4413      	add	r3, r2
 8106f04:	1a18      	subs	r0, r3, r0
 8106f06:	b003      	add	sp, #12
 8106f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8106f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106f0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8106f12:	e7ed      	b.n	8106ef0 <__exponent+0x4c>
 8106f14:	2330      	movs	r3, #48	; 0x30
 8106f16:	3130      	adds	r1, #48	; 0x30
 8106f18:	7083      	strb	r3, [r0, #2]
 8106f1a:	70c1      	strb	r1, [r0, #3]
 8106f1c:	1d03      	adds	r3, r0, #4
 8106f1e:	e7f1      	b.n	8106f04 <__exponent+0x60>

08106f20 <_printf_float>:
 8106f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106f24:	ed2d 8b02 	vpush	{d8}
 8106f28:	b08d      	sub	sp, #52	; 0x34
 8106f2a:	460c      	mov	r4, r1
 8106f2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8106f30:	4616      	mov	r6, r2
 8106f32:	461f      	mov	r7, r3
 8106f34:	4605      	mov	r5, r0
 8106f36:	f003 f917 	bl	810a168 <_localeconv_r>
 8106f3a:	f8d0 a000 	ldr.w	sl, [r0]
 8106f3e:	4650      	mov	r0, sl
 8106f40:	f7f9 f9ce 	bl	81002e0 <strlen>
 8106f44:	2300      	movs	r3, #0
 8106f46:	930a      	str	r3, [sp, #40]	; 0x28
 8106f48:	6823      	ldr	r3, [r4, #0]
 8106f4a:	9305      	str	r3, [sp, #20]
 8106f4c:	f8d8 3000 	ldr.w	r3, [r8]
 8106f50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8106f54:	3307      	adds	r3, #7
 8106f56:	f023 0307 	bic.w	r3, r3, #7
 8106f5a:	f103 0208 	add.w	r2, r3, #8
 8106f5e:	f8c8 2000 	str.w	r2, [r8]
 8106f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8106f6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8106f6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8106f72:	9307      	str	r3, [sp, #28]
 8106f74:	f8cd 8018 	str.w	r8, [sp, #24]
 8106f78:	ee08 0a10 	vmov	s16, r0
 8106f7c:	4b9f      	ldr	r3, [pc, #636]	; (81071fc <_printf_float+0x2dc>)
 8106f7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106f82:	f04f 32ff 	mov.w	r2, #4294967295
 8106f86:	f7f9 fe59 	bl	8100c3c <__aeabi_dcmpun>
 8106f8a:	bb88      	cbnz	r0, 8106ff0 <_printf_float+0xd0>
 8106f8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8106f90:	4b9a      	ldr	r3, [pc, #616]	; (81071fc <_printf_float+0x2dc>)
 8106f92:	f04f 32ff 	mov.w	r2, #4294967295
 8106f96:	f7f9 fe33 	bl	8100c00 <__aeabi_dcmple>
 8106f9a:	bb48      	cbnz	r0, 8106ff0 <_printf_float+0xd0>
 8106f9c:	2200      	movs	r2, #0
 8106f9e:	2300      	movs	r3, #0
 8106fa0:	4640      	mov	r0, r8
 8106fa2:	4649      	mov	r1, r9
 8106fa4:	f7f9 fe22 	bl	8100bec <__aeabi_dcmplt>
 8106fa8:	b110      	cbz	r0, 8106fb0 <_printf_float+0x90>
 8106faa:	232d      	movs	r3, #45	; 0x2d
 8106fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106fb0:	4b93      	ldr	r3, [pc, #588]	; (8107200 <_printf_float+0x2e0>)
 8106fb2:	4894      	ldr	r0, [pc, #592]	; (8107204 <_printf_float+0x2e4>)
 8106fb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8106fb8:	bf94      	ite	ls
 8106fba:	4698      	movls	r8, r3
 8106fbc:	4680      	movhi	r8, r0
 8106fbe:	2303      	movs	r3, #3
 8106fc0:	6123      	str	r3, [r4, #16]
 8106fc2:	9b05      	ldr	r3, [sp, #20]
 8106fc4:	f023 0204 	bic.w	r2, r3, #4
 8106fc8:	6022      	str	r2, [r4, #0]
 8106fca:	f04f 0900 	mov.w	r9, #0
 8106fce:	9700      	str	r7, [sp, #0]
 8106fd0:	4633      	mov	r3, r6
 8106fd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8106fd4:	4621      	mov	r1, r4
 8106fd6:	4628      	mov	r0, r5
 8106fd8:	f000 f9d8 	bl	810738c <_printf_common>
 8106fdc:	3001      	adds	r0, #1
 8106fde:	f040 8090 	bne.w	8107102 <_printf_float+0x1e2>
 8106fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8106fe6:	b00d      	add	sp, #52	; 0x34
 8106fe8:	ecbd 8b02 	vpop	{d8}
 8106fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106ff0:	4642      	mov	r2, r8
 8106ff2:	464b      	mov	r3, r9
 8106ff4:	4640      	mov	r0, r8
 8106ff6:	4649      	mov	r1, r9
 8106ff8:	f7f9 fe20 	bl	8100c3c <__aeabi_dcmpun>
 8106ffc:	b140      	cbz	r0, 8107010 <_printf_float+0xf0>
 8106ffe:	464b      	mov	r3, r9
 8107000:	2b00      	cmp	r3, #0
 8107002:	bfbc      	itt	lt
 8107004:	232d      	movlt	r3, #45	; 0x2d
 8107006:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 810700a:	487f      	ldr	r0, [pc, #508]	; (8107208 <_printf_float+0x2e8>)
 810700c:	4b7f      	ldr	r3, [pc, #508]	; (810720c <_printf_float+0x2ec>)
 810700e:	e7d1      	b.n	8106fb4 <_printf_float+0x94>
 8107010:	6863      	ldr	r3, [r4, #4]
 8107012:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107016:	9206      	str	r2, [sp, #24]
 8107018:	1c5a      	adds	r2, r3, #1
 810701a:	d13f      	bne.n	810709c <_printf_float+0x17c>
 810701c:	2306      	movs	r3, #6
 810701e:	6063      	str	r3, [r4, #4]
 8107020:	9b05      	ldr	r3, [sp, #20]
 8107022:	6861      	ldr	r1, [r4, #4]
 8107024:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8107028:	2300      	movs	r3, #0
 810702a:	9303      	str	r3, [sp, #12]
 810702c:	ab0a      	add	r3, sp, #40	; 0x28
 810702e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107032:	ab09      	add	r3, sp, #36	; 0x24
 8107034:	ec49 8b10 	vmov	d0, r8, r9
 8107038:	9300      	str	r3, [sp, #0]
 810703a:	6022      	str	r2, [r4, #0]
 810703c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107040:	4628      	mov	r0, r5
 8107042:	f7ff fecd 	bl	8106de0 <__cvt>
 8107046:	9b06      	ldr	r3, [sp, #24]
 8107048:	9909      	ldr	r1, [sp, #36]	; 0x24
 810704a:	2b47      	cmp	r3, #71	; 0x47
 810704c:	4680      	mov	r8, r0
 810704e:	d108      	bne.n	8107062 <_printf_float+0x142>
 8107050:	1cc8      	adds	r0, r1, #3
 8107052:	db02      	blt.n	810705a <_printf_float+0x13a>
 8107054:	6863      	ldr	r3, [r4, #4]
 8107056:	4299      	cmp	r1, r3
 8107058:	dd41      	ble.n	81070de <_printf_float+0x1be>
 810705a:	f1ab 0b02 	sub.w	fp, fp, #2
 810705e:	fa5f fb8b 	uxtb.w	fp, fp
 8107062:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107066:	d820      	bhi.n	81070aa <_printf_float+0x18a>
 8107068:	3901      	subs	r1, #1
 810706a:	465a      	mov	r2, fp
 810706c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107070:	9109      	str	r1, [sp, #36]	; 0x24
 8107072:	f7ff ff17 	bl	8106ea4 <__exponent>
 8107076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107078:	1813      	adds	r3, r2, r0
 810707a:	2a01      	cmp	r2, #1
 810707c:	4681      	mov	r9, r0
 810707e:	6123      	str	r3, [r4, #16]
 8107080:	dc02      	bgt.n	8107088 <_printf_float+0x168>
 8107082:	6822      	ldr	r2, [r4, #0]
 8107084:	07d2      	lsls	r2, r2, #31
 8107086:	d501      	bpl.n	810708c <_printf_float+0x16c>
 8107088:	3301      	adds	r3, #1
 810708a:	6123      	str	r3, [r4, #16]
 810708c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107090:	2b00      	cmp	r3, #0
 8107092:	d09c      	beq.n	8106fce <_printf_float+0xae>
 8107094:	232d      	movs	r3, #45	; 0x2d
 8107096:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810709a:	e798      	b.n	8106fce <_printf_float+0xae>
 810709c:	9a06      	ldr	r2, [sp, #24]
 810709e:	2a47      	cmp	r2, #71	; 0x47
 81070a0:	d1be      	bne.n	8107020 <_printf_float+0x100>
 81070a2:	2b00      	cmp	r3, #0
 81070a4:	d1bc      	bne.n	8107020 <_printf_float+0x100>
 81070a6:	2301      	movs	r3, #1
 81070a8:	e7b9      	b.n	810701e <_printf_float+0xfe>
 81070aa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 81070ae:	d118      	bne.n	81070e2 <_printf_float+0x1c2>
 81070b0:	2900      	cmp	r1, #0
 81070b2:	6863      	ldr	r3, [r4, #4]
 81070b4:	dd0b      	ble.n	81070ce <_printf_float+0x1ae>
 81070b6:	6121      	str	r1, [r4, #16]
 81070b8:	b913      	cbnz	r3, 81070c0 <_printf_float+0x1a0>
 81070ba:	6822      	ldr	r2, [r4, #0]
 81070bc:	07d0      	lsls	r0, r2, #31
 81070be:	d502      	bpl.n	81070c6 <_printf_float+0x1a6>
 81070c0:	3301      	adds	r3, #1
 81070c2:	440b      	add	r3, r1
 81070c4:	6123      	str	r3, [r4, #16]
 81070c6:	65a1      	str	r1, [r4, #88]	; 0x58
 81070c8:	f04f 0900 	mov.w	r9, #0
 81070cc:	e7de      	b.n	810708c <_printf_float+0x16c>
 81070ce:	b913      	cbnz	r3, 81070d6 <_printf_float+0x1b6>
 81070d0:	6822      	ldr	r2, [r4, #0]
 81070d2:	07d2      	lsls	r2, r2, #31
 81070d4:	d501      	bpl.n	81070da <_printf_float+0x1ba>
 81070d6:	3302      	adds	r3, #2
 81070d8:	e7f4      	b.n	81070c4 <_printf_float+0x1a4>
 81070da:	2301      	movs	r3, #1
 81070dc:	e7f2      	b.n	81070c4 <_printf_float+0x1a4>
 81070de:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81070e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81070e4:	4299      	cmp	r1, r3
 81070e6:	db05      	blt.n	81070f4 <_printf_float+0x1d4>
 81070e8:	6823      	ldr	r3, [r4, #0]
 81070ea:	6121      	str	r1, [r4, #16]
 81070ec:	07d8      	lsls	r0, r3, #31
 81070ee:	d5ea      	bpl.n	81070c6 <_printf_float+0x1a6>
 81070f0:	1c4b      	adds	r3, r1, #1
 81070f2:	e7e7      	b.n	81070c4 <_printf_float+0x1a4>
 81070f4:	2900      	cmp	r1, #0
 81070f6:	bfd4      	ite	le
 81070f8:	f1c1 0202 	rsble	r2, r1, #2
 81070fc:	2201      	movgt	r2, #1
 81070fe:	4413      	add	r3, r2
 8107100:	e7e0      	b.n	81070c4 <_printf_float+0x1a4>
 8107102:	6823      	ldr	r3, [r4, #0]
 8107104:	055a      	lsls	r2, r3, #21
 8107106:	d407      	bmi.n	8107118 <_printf_float+0x1f8>
 8107108:	6923      	ldr	r3, [r4, #16]
 810710a:	4642      	mov	r2, r8
 810710c:	4631      	mov	r1, r6
 810710e:	4628      	mov	r0, r5
 8107110:	47b8      	blx	r7
 8107112:	3001      	adds	r0, #1
 8107114:	d12c      	bne.n	8107170 <_printf_float+0x250>
 8107116:	e764      	b.n	8106fe2 <_printf_float+0xc2>
 8107118:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810711c:	f240 80e0 	bls.w	81072e0 <_printf_float+0x3c0>
 8107120:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107124:	2200      	movs	r2, #0
 8107126:	2300      	movs	r3, #0
 8107128:	f7f9 fd56 	bl	8100bd8 <__aeabi_dcmpeq>
 810712c:	2800      	cmp	r0, #0
 810712e:	d034      	beq.n	810719a <_printf_float+0x27a>
 8107130:	4a37      	ldr	r2, [pc, #220]	; (8107210 <_printf_float+0x2f0>)
 8107132:	2301      	movs	r3, #1
 8107134:	4631      	mov	r1, r6
 8107136:	4628      	mov	r0, r5
 8107138:	47b8      	blx	r7
 810713a:	3001      	adds	r0, #1
 810713c:	f43f af51 	beq.w	8106fe2 <_printf_float+0xc2>
 8107140:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107144:	429a      	cmp	r2, r3
 8107146:	db02      	blt.n	810714e <_printf_float+0x22e>
 8107148:	6823      	ldr	r3, [r4, #0]
 810714a:	07d8      	lsls	r0, r3, #31
 810714c:	d510      	bpl.n	8107170 <_printf_float+0x250>
 810714e:	ee18 3a10 	vmov	r3, s16
 8107152:	4652      	mov	r2, sl
 8107154:	4631      	mov	r1, r6
 8107156:	4628      	mov	r0, r5
 8107158:	47b8      	blx	r7
 810715a:	3001      	adds	r0, #1
 810715c:	f43f af41 	beq.w	8106fe2 <_printf_float+0xc2>
 8107160:	f04f 0800 	mov.w	r8, #0
 8107164:	f104 091a 	add.w	r9, r4, #26
 8107168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810716a:	3b01      	subs	r3, #1
 810716c:	4543      	cmp	r3, r8
 810716e:	dc09      	bgt.n	8107184 <_printf_float+0x264>
 8107170:	6823      	ldr	r3, [r4, #0]
 8107172:	079b      	lsls	r3, r3, #30
 8107174:	f100 8105 	bmi.w	8107382 <_printf_float+0x462>
 8107178:	68e0      	ldr	r0, [r4, #12]
 810717a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810717c:	4298      	cmp	r0, r3
 810717e:	bfb8      	it	lt
 8107180:	4618      	movlt	r0, r3
 8107182:	e730      	b.n	8106fe6 <_printf_float+0xc6>
 8107184:	2301      	movs	r3, #1
 8107186:	464a      	mov	r2, r9
 8107188:	4631      	mov	r1, r6
 810718a:	4628      	mov	r0, r5
 810718c:	47b8      	blx	r7
 810718e:	3001      	adds	r0, #1
 8107190:	f43f af27 	beq.w	8106fe2 <_printf_float+0xc2>
 8107194:	f108 0801 	add.w	r8, r8, #1
 8107198:	e7e6      	b.n	8107168 <_printf_float+0x248>
 810719a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810719c:	2b00      	cmp	r3, #0
 810719e:	dc39      	bgt.n	8107214 <_printf_float+0x2f4>
 81071a0:	4a1b      	ldr	r2, [pc, #108]	; (8107210 <_printf_float+0x2f0>)
 81071a2:	2301      	movs	r3, #1
 81071a4:	4631      	mov	r1, r6
 81071a6:	4628      	mov	r0, r5
 81071a8:	47b8      	blx	r7
 81071aa:	3001      	adds	r0, #1
 81071ac:	f43f af19 	beq.w	8106fe2 <_printf_float+0xc2>
 81071b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81071b4:	4313      	orrs	r3, r2
 81071b6:	d102      	bne.n	81071be <_printf_float+0x29e>
 81071b8:	6823      	ldr	r3, [r4, #0]
 81071ba:	07d9      	lsls	r1, r3, #31
 81071bc:	d5d8      	bpl.n	8107170 <_printf_float+0x250>
 81071be:	ee18 3a10 	vmov	r3, s16
 81071c2:	4652      	mov	r2, sl
 81071c4:	4631      	mov	r1, r6
 81071c6:	4628      	mov	r0, r5
 81071c8:	47b8      	blx	r7
 81071ca:	3001      	adds	r0, #1
 81071cc:	f43f af09 	beq.w	8106fe2 <_printf_float+0xc2>
 81071d0:	f04f 0900 	mov.w	r9, #0
 81071d4:	f104 0a1a 	add.w	sl, r4, #26
 81071d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81071da:	425b      	negs	r3, r3
 81071dc:	454b      	cmp	r3, r9
 81071de:	dc01      	bgt.n	81071e4 <_printf_float+0x2c4>
 81071e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81071e2:	e792      	b.n	810710a <_printf_float+0x1ea>
 81071e4:	2301      	movs	r3, #1
 81071e6:	4652      	mov	r2, sl
 81071e8:	4631      	mov	r1, r6
 81071ea:	4628      	mov	r0, r5
 81071ec:	47b8      	blx	r7
 81071ee:	3001      	adds	r0, #1
 81071f0:	f43f aef7 	beq.w	8106fe2 <_printf_float+0xc2>
 81071f4:	f109 0901 	add.w	r9, r9, #1
 81071f8:	e7ee      	b.n	81071d8 <_printf_float+0x2b8>
 81071fa:	bf00      	nop
 81071fc:	7fefffff 	.word	0x7fefffff
 8107200:	0810b4fc 	.word	0x0810b4fc
 8107204:	0810b500 	.word	0x0810b500
 8107208:	0810b508 	.word	0x0810b508
 810720c:	0810b504 	.word	0x0810b504
 8107210:	0810b50c 	.word	0x0810b50c
 8107214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107216:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107218:	429a      	cmp	r2, r3
 810721a:	bfa8      	it	ge
 810721c:	461a      	movge	r2, r3
 810721e:	2a00      	cmp	r2, #0
 8107220:	4691      	mov	r9, r2
 8107222:	dc37      	bgt.n	8107294 <_printf_float+0x374>
 8107224:	f04f 0b00 	mov.w	fp, #0
 8107228:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810722c:	f104 021a 	add.w	r2, r4, #26
 8107230:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107232:	9305      	str	r3, [sp, #20]
 8107234:	eba3 0309 	sub.w	r3, r3, r9
 8107238:	455b      	cmp	r3, fp
 810723a:	dc33      	bgt.n	81072a4 <_printf_float+0x384>
 810723c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107240:	429a      	cmp	r2, r3
 8107242:	db3b      	blt.n	81072bc <_printf_float+0x39c>
 8107244:	6823      	ldr	r3, [r4, #0]
 8107246:	07da      	lsls	r2, r3, #31
 8107248:	d438      	bmi.n	81072bc <_printf_float+0x39c>
 810724a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810724c:	9b05      	ldr	r3, [sp, #20]
 810724e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107250:	1ad3      	subs	r3, r2, r3
 8107252:	eba2 0901 	sub.w	r9, r2, r1
 8107256:	4599      	cmp	r9, r3
 8107258:	bfa8      	it	ge
 810725a:	4699      	movge	r9, r3
 810725c:	f1b9 0f00 	cmp.w	r9, #0
 8107260:	dc35      	bgt.n	81072ce <_printf_float+0x3ae>
 8107262:	f04f 0800 	mov.w	r8, #0
 8107266:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810726a:	f104 0a1a 	add.w	sl, r4, #26
 810726e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107272:	1a9b      	subs	r3, r3, r2
 8107274:	eba3 0309 	sub.w	r3, r3, r9
 8107278:	4543      	cmp	r3, r8
 810727a:	f77f af79 	ble.w	8107170 <_printf_float+0x250>
 810727e:	2301      	movs	r3, #1
 8107280:	4652      	mov	r2, sl
 8107282:	4631      	mov	r1, r6
 8107284:	4628      	mov	r0, r5
 8107286:	47b8      	blx	r7
 8107288:	3001      	adds	r0, #1
 810728a:	f43f aeaa 	beq.w	8106fe2 <_printf_float+0xc2>
 810728e:	f108 0801 	add.w	r8, r8, #1
 8107292:	e7ec      	b.n	810726e <_printf_float+0x34e>
 8107294:	4613      	mov	r3, r2
 8107296:	4631      	mov	r1, r6
 8107298:	4642      	mov	r2, r8
 810729a:	4628      	mov	r0, r5
 810729c:	47b8      	blx	r7
 810729e:	3001      	adds	r0, #1
 81072a0:	d1c0      	bne.n	8107224 <_printf_float+0x304>
 81072a2:	e69e      	b.n	8106fe2 <_printf_float+0xc2>
 81072a4:	2301      	movs	r3, #1
 81072a6:	4631      	mov	r1, r6
 81072a8:	4628      	mov	r0, r5
 81072aa:	9205      	str	r2, [sp, #20]
 81072ac:	47b8      	blx	r7
 81072ae:	3001      	adds	r0, #1
 81072b0:	f43f ae97 	beq.w	8106fe2 <_printf_float+0xc2>
 81072b4:	9a05      	ldr	r2, [sp, #20]
 81072b6:	f10b 0b01 	add.w	fp, fp, #1
 81072ba:	e7b9      	b.n	8107230 <_printf_float+0x310>
 81072bc:	ee18 3a10 	vmov	r3, s16
 81072c0:	4652      	mov	r2, sl
 81072c2:	4631      	mov	r1, r6
 81072c4:	4628      	mov	r0, r5
 81072c6:	47b8      	blx	r7
 81072c8:	3001      	adds	r0, #1
 81072ca:	d1be      	bne.n	810724a <_printf_float+0x32a>
 81072cc:	e689      	b.n	8106fe2 <_printf_float+0xc2>
 81072ce:	9a05      	ldr	r2, [sp, #20]
 81072d0:	464b      	mov	r3, r9
 81072d2:	4442      	add	r2, r8
 81072d4:	4631      	mov	r1, r6
 81072d6:	4628      	mov	r0, r5
 81072d8:	47b8      	blx	r7
 81072da:	3001      	adds	r0, #1
 81072dc:	d1c1      	bne.n	8107262 <_printf_float+0x342>
 81072de:	e680      	b.n	8106fe2 <_printf_float+0xc2>
 81072e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81072e2:	2a01      	cmp	r2, #1
 81072e4:	dc01      	bgt.n	81072ea <_printf_float+0x3ca>
 81072e6:	07db      	lsls	r3, r3, #31
 81072e8:	d538      	bpl.n	810735c <_printf_float+0x43c>
 81072ea:	2301      	movs	r3, #1
 81072ec:	4642      	mov	r2, r8
 81072ee:	4631      	mov	r1, r6
 81072f0:	4628      	mov	r0, r5
 81072f2:	47b8      	blx	r7
 81072f4:	3001      	adds	r0, #1
 81072f6:	f43f ae74 	beq.w	8106fe2 <_printf_float+0xc2>
 81072fa:	ee18 3a10 	vmov	r3, s16
 81072fe:	4652      	mov	r2, sl
 8107300:	4631      	mov	r1, r6
 8107302:	4628      	mov	r0, r5
 8107304:	47b8      	blx	r7
 8107306:	3001      	adds	r0, #1
 8107308:	f43f ae6b 	beq.w	8106fe2 <_printf_float+0xc2>
 810730c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107310:	2200      	movs	r2, #0
 8107312:	2300      	movs	r3, #0
 8107314:	f7f9 fc60 	bl	8100bd8 <__aeabi_dcmpeq>
 8107318:	b9d8      	cbnz	r0, 8107352 <_printf_float+0x432>
 810731a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810731c:	f108 0201 	add.w	r2, r8, #1
 8107320:	3b01      	subs	r3, #1
 8107322:	4631      	mov	r1, r6
 8107324:	4628      	mov	r0, r5
 8107326:	47b8      	blx	r7
 8107328:	3001      	adds	r0, #1
 810732a:	d10e      	bne.n	810734a <_printf_float+0x42a>
 810732c:	e659      	b.n	8106fe2 <_printf_float+0xc2>
 810732e:	2301      	movs	r3, #1
 8107330:	4652      	mov	r2, sl
 8107332:	4631      	mov	r1, r6
 8107334:	4628      	mov	r0, r5
 8107336:	47b8      	blx	r7
 8107338:	3001      	adds	r0, #1
 810733a:	f43f ae52 	beq.w	8106fe2 <_printf_float+0xc2>
 810733e:	f108 0801 	add.w	r8, r8, #1
 8107342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107344:	3b01      	subs	r3, #1
 8107346:	4543      	cmp	r3, r8
 8107348:	dcf1      	bgt.n	810732e <_printf_float+0x40e>
 810734a:	464b      	mov	r3, r9
 810734c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8107350:	e6dc      	b.n	810710c <_printf_float+0x1ec>
 8107352:	f04f 0800 	mov.w	r8, #0
 8107356:	f104 0a1a 	add.w	sl, r4, #26
 810735a:	e7f2      	b.n	8107342 <_printf_float+0x422>
 810735c:	2301      	movs	r3, #1
 810735e:	4642      	mov	r2, r8
 8107360:	e7df      	b.n	8107322 <_printf_float+0x402>
 8107362:	2301      	movs	r3, #1
 8107364:	464a      	mov	r2, r9
 8107366:	4631      	mov	r1, r6
 8107368:	4628      	mov	r0, r5
 810736a:	47b8      	blx	r7
 810736c:	3001      	adds	r0, #1
 810736e:	f43f ae38 	beq.w	8106fe2 <_printf_float+0xc2>
 8107372:	f108 0801 	add.w	r8, r8, #1
 8107376:	68e3      	ldr	r3, [r4, #12]
 8107378:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810737a:	1a5b      	subs	r3, r3, r1
 810737c:	4543      	cmp	r3, r8
 810737e:	dcf0      	bgt.n	8107362 <_printf_float+0x442>
 8107380:	e6fa      	b.n	8107178 <_printf_float+0x258>
 8107382:	f04f 0800 	mov.w	r8, #0
 8107386:	f104 0919 	add.w	r9, r4, #25
 810738a:	e7f4      	b.n	8107376 <_printf_float+0x456>

0810738c <_printf_common>:
 810738c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107390:	4616      	mov	r6, r2
 8107392:	4699      	mov	r9, r3
 8107394:	688a      	ldr	r2, [r1, #8]
 8107396:	690b      	ldr	r3, [r1, #16]
 8107398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810739c:	4293      	cmp	r3, r2
 810739e:	bfb8      	it	lt
 81073a0:	4613      	movlt	r3, r2
 81073a2:	6033      	str	r3, [r6, #0]
 81073a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81073a8:	4607      	mov	r7, r0
 81073aa:	460c      	mov	r4, r1
 81073ac:	b10a      	cbz	r2, 81073b2 <_printf_common+0x26>
 81073ae:	3301      	adds	r3, #1
 81073b0:	6033      	str	r3, [r6, #0]
 81073b2:	6823      	ldr	r3, [r4, #0]
 81073b4:	0699      	lsls	r1, r3, #26
 81073b6:	bf42      	ittt	mi
 81073b8:	6833      	ldrmi	r3, [r6, #0]
 81073ba:	3302      	addmi	r3, #2
 81073bc:	6033      	strmi	r3, [r6, #0]
 81073be:	6825      	ldr	r5, [r4, #0]
 81073c0:	f015 0506 	ands.w	r5, r5, #6
 81073c4:	d106      	bne.n	81073d4 <_printf_common+0x48>
 81073c6:	f104 0a19 	add.w	sl, r4, #25
 81073ca:	68e3      	ldr	r3, [r4, #12]
 81073cc:	6832      	ldr	r2, [r6, #0]
 81073ce:	1a9b      	subs	r3, r3, r2
 81073d0:	42ab      	cmp	r3, r5
 81073d2:	dc26      	bgt.n	8107422 <_printf_common+0x96>
 81073d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81073d8:	1e13      	subs	r3, r2, #0
 81073da:	6822      	ldr	r2, [r4, #0]
 81073dc:	bf18      	it	ne
 81073de:	2301      	movne	r3, #1
 81073e0:	0692      	lsls	r2, r2, #26
 81073e2:	d42b      	bmi.n	810743c <_printf_common+0xb0>
 81073e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81073e8:	4649      	mov	r1, r9
 81073ea:	4638      	mov	r0, r7
 81073ec:	47c0      	blx	r8
 81073ee:	3001      	adds	r0, #1
 81073f0:	d01e      	beq.n	8107430 <_printf_common+0xa4>
 81073f2:	6823      	ldr	r3, [r4, #0]
 81073f4:	68e5      	ldr	r5, [r4, #12]
 81073f6:	6832      	ldr	r2, [r6, #0]
 81073f8:	f003 0306 	and.w	r3, r3, #6
 81073fc:	2b04      	cmp	r3, #4
 81073fe:	bf08      	it	eq
 8107400:	1aad      	subeq	r5, r5, r2
 8107402:	68a3      	ldr	r3, [r4, #8]
 8107404:	6922      	ldr	r2, [r4, #16]
 8107406:	bf0c      	ite	eq
 8107408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810740c:	2500      	movne	r5, #0
 810740e:	4293      	cmp	r3, r2
 8107410:	bfc4      	itt	gt
 8107412:	1a9b      	subgt	r3, r3, r2
 8107414:	18ed      	addgt	r5, r5, r3
 8107416:	2600      	movs	r6, #0
 8107418:	341a      	adds	r4, #26
 810741a:	42b5      	cmp	r5, r6
 810741c:	d11a      	bne.n	8107454 <_printf_common+0xc8>
 810741e:	2000      	movs	r0, #0
 8107420:	e008      	b.n	8107434 <_printf_common+0xa8>
 8107422:	2301      	movs	r3, #1
 8107424:	4652      	mov	r2, sl
 8107426:	4649      	mov	r1, r9
 8107428:	4638      	mov	r0, r7
 810742a:	47c0      	blx	r8
 810742c:	3001      	adds	r0, #1
 810742e:	d103      	bne.n	8107438 <_printf_common+0xac>
 8107430:	f04f 30ff 	mov.w	r0, #4294967295
 8107434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107438:	3501      	adds	r5, #1
 810743a:	e7c6      	b.n	81073ca <_printf_common+0x3e>
 810743c:	18e1      	adds	r1, r4, r3
 810743e:	1c5a      	adds	r2, r3, #1
 8107440:	2030      	movs	r0, #48	; 0x30
 8107442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8107446:	4422      	add	r2, r4
 8107448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810744c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8107450:	3302      	adds	r3, #2
 8107452:	e7c7      	b.n	81073e4 <_printf_common+0x58>
 8107454:	2301      	movs	r3, #1
 8107456:	4622      	mov	r2, r4
 8107458:	4649      	mov	r1, r9
 810745a:	4638      	mov	r0, r7
 810745c:	47c0      	blx	r8
 810745e:	3001      	adds	r0, #1
 8107460:	d0e6      	beq.n	8107430 <_printf_common+0xa4>
 8107462:	3601      	adds	r6, #1
 8107464:	e7d9      	b.n	810741a <_printf_common+0x8e>
	...

08107468 <_printf_i>:
 8107468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810746c:	460c      	mov	r4, r1
 810746e:	4691      	mov	r9, r2
 8107470:	7e27      	ldrb	r7, [r4, #24]
 8107472:	990c      	ldr	r1, [sp, #48]	; 0x30
 8107474:	2f78      	cmp	r7, #120	; 0x78
 8107476:	4680      	mov	r8, r0
 8107478:	469a      	mov	sl, r3
 810747a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810747e:	d807      	bhi.n	8107490 <_printf_i+0x28>
 8107480:	2f62      	cmp	r7, #98	; 0x62
 8107482:	d80a      	bhi.n	810749a <_printf_i+0x32>
 8107484:	2f00      	cmp	r7, #0
 8107486:	f000 80d8 	beq.w	810763a <_printf_i+0x1d2>
 810748a:	2f58      	cmp	r7, #88	; 0x58
 810748c:	f000 80a3 	beq.w	81075d6 <_printf_i+0x16e>
 8107490:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8107498:	e03a      	b.n	8107510 <_printf_i+0xa8>
 810749a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810749e:	2b15      	cmp	r3, #21
 81074a0:	d8f6      	bhi.n	8107490 <_printf_i+0x28>
 81074a2:	a001      	add	r0, pc, #4	; (adr r0, 81074a8 <_printf_i+0x40>)
 81074a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 81074a8:	08107501 	.word	0x08107501
 81074ac:	08107515 	.word	0x08107515
 81074b0:	08107491 	.word	0x08107491
 81074b4:	08107491 	.word	0x08107491
 81074b8:	08107491 	.word	0x08107491
 81074bc:	08107491 	.word	0x08107491
 81074c0:	08107515 	.word	0x08107515
 81074c4:	08107491 	.word	0x08107491
 81074c8:	08107491 	.word	0x08107491
 81074cc:	08107491 	.word	0x08107491
 81074d0:	08107491 	.word	0x08107491
 81074d4:	08107621 	.word	0x08107621
 81074d8:	08107545 	.word	0x08107545
 81074dc:	08107603 	.word	0x08107603
 81074e0:	08107491 	.word	0x08107491
 81074e4:	08107491 	.word	0x08107491
 81074e8:	08107643 	.word	0x08107643
 81074ec:	08107491 	.word	0x08107491
 81074f0:	08107545 	.word	0x08107545
 81074f4:	08107491 	.word	0x08107491
 81074f8:	08107491 	.word	0x08107491
 81074fc:	0810760b 	.word	0x0810760b
 8107500:	680b      	ldr	r3, [r1, #0]
 8107502:	1d1a      	adds	r2, r3, #4
 8107504:	681b      	ldr	r3, [r3, #0]
 8107506:	600a      	str	r2, [r1, #0]
 8107508:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810750c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8107510:	2301      	movs	r3, #1
 8107512:	e0a3      	b.n	810765c <_printf_i+0x1f4>
 8107514:	6825      	ldr	r5, [r4, #0]
 8107516:	6808      	ldr	r0, [r1, #0]
 8107518:	062e      	lsls	r6, r5, #24
 810751a:	f100 0304 	add.w	r3, r0, #4
 810751e:	d50a      	bpl.n	8107536 <_printf_i+0xce>
 8107520:	6805      	ldr	r5, [r0, #0]
 8107522:	600b      	str	r3, [r1, #0]
 8107524:	2d00      	cmp	r5, #0
 8107526:	da03      	bge.n	8107530 <_printf_i+0xc8>
 8107528:	232d      	movs	r3, #45	; 0x2d
 810752a:	426d      	negs	r5, r5
 810752c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107530:	485e      	ldr	r0, [pc, #376]	; (81076ac <_printf_i+0x244>)
 8107532:	230a      	movs	r3, #10
 8107534:	e019      	b.n	810756a <_printf_i+0x102>
 8107536:	f015 0f40 	tst.w	r5, #64	; 0x40
 810753a:	6805      	ldr	r5, [r0, #0]
 810753c:	600b      	str	r3, [r1, #0]
 810753e:	bf18      	it	ne
 8107540:	b22d      	sxthne	r5, r5
 8107542:	e7ef      	b.n	8107524 <_printf_i+0xbc>
 8107544:	680b      	ldr	r3, [r1, #0]
 8107546:	6825      	ldr	r5, [r4, #0]
 8107548:	1d18      	adds	r0, r3, #4
 810754a:	6008      	str	r0, [r1, #0]
 810754c:	0628      	lsls	r0, r5, #24
 810754e:	d501      	bpl.n	8107554 <_printf_i+0xec>
 8107550:	681d      	ldr	r5, [r3, #0]
 8107552:	e002      	b.n	810755a <_printf_i+0xf2>
 8107554:	0669      	lsls	r1, r5, #25
 8107556:	d5fb      	bpl.n	8107550 <_printf_i+0xe8>
 8107558:	881d      	ldrh	r5, [r3, #0]
 810755a:	4854      	ldr	r0, [pc, #336]	; (81076ac <_printf_i+0x244>)
 810755c:	2f6f      	cmp	r7, #111	; 0x6f
 810755e:	bf0c      	ite	eq
 8107560:	2308      	moveq	r3, #8
 8107562:	230a      	movne	r3, #10
 8107564:	2100      	movs	r1, #0
 8107566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810756a:	6866      	ldr	r6, [r4, #4]
 810756c:	60a6      	str	r6, [r4, #8]
 810756e:	2e00      	cmp	r6, #0
 8107570:	bfa2      	ittt	ge
 8107572:	6821      	ldrge	r1, [r4, #0]
 8107574:	f021 0104 	bicge.w	r1, r1, #4
 8107578:	6021      	strge	r1, [r4, #0]
 810757a:	b90d      	cbnz	r5, 8107580 <_printf_i+0x118>
 810757c:	2e00      	cmp	r6, #0
 810757e:	d04d      	beq.n	810761c <_printf_i+0x1b4>
 8107580:	4616      	mov	r6, r2
 8107582:	fbb5 f1f3 	udiv	r1, r5, r3
 8107586:	fb03 5711 	mls	r7, r3, r1, r5
 810758a:	5dc7      	ldrb	r7, [r0, r7]
 810758c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8107590:	462f      	mov	r7, r5
 8107592:	42bb      	cmp	r3, r7
 8107594:	460d      	mov	r5, r1
 8107596:	d9f4      	bls.n	8107582 <_printf_i+0x11a>
 8107598:	2b08      	cmp	r3, #8
 810759a:	d10b      	bne.n	81075b4 <_printf_i+0x14c>
 810759c:	6823      	ldr	r3, [r4, #0]
 810759e:	07df      	lsls	r7, r3, #31
 81075a0:	d508      	bpl.n	81075b4 <_printf_i+0x14c>
 81075a2:	6923      	ldr	r3, [r4, #16]
 81075a4:	6861      	ldr	r1, [r4, #4]
 81075a6:	4299      	cmp	r1, r3
 81075a8:	bfde      	ittt	le
 81075aa:	2330      	movle	r3, #48	; 0x30
 81075ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 81075b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 81075b4:	1b92      	subs	r2, r2, r6
 81075b6:	6122      	str	r2, [r4, #16]
 81075b8:	f8cd a000 	str.w	sl, [sp]
 81075bc:	464b      	mov	r3, r9
 81075be:	aa03      	add	r2, sp, #12
 81075c0:	4621      	mov	r1, r4
 81075c2:	4640      	mov	r0, r8
 81075c4:	f7ff fee2 	bl	810738c <_printf_common>
 81075c8:	3001      	adds	r0, #1
 81075ca:	d14c      	bne.n	8107666 <_printf_i+0x1fe>
 81075cc:	f04f 30ff 	mov.w	r0, #4294967295
 81075d0:	b004      	add	sp, #16
 81075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81075d6:	4835      	ldr	r0, [pc, #212]	; (81076ac <_printf_i+0x244>)
 81075d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81075dc:	6823      	ldr	r3, [r4, #0]
 81075de:	680e      	ldr	r6, [r1, #0]
 81075e0:	061f      	lsls	r7, r3, #24
 81075e2:	f856 5b04 	ldr.w	r5, [r6], #4
 81075e6:	600e      	str	r6, [r1, #0]
 81075e8:	d514      	bpl.n	8107614 <_printf_i+0x1ac>
 81075ea:	07d9      	lsls	r1, r3, #31
 81075ec:	bf44      	itt	mi
 81075ee:	f043 0320 	orrmi.w	r3, r3, #32
 81075f2:	6023      	strmi	r3, [r4, #0]
 81075f4:	b91d      	cbnz	r5, 81075fe <_printf_i+0x196>
 81075f6:	6823      	ldr	r3, [r4, #0]
 81075f8:	f023 0320 	bic.w	r3, r3, #32
 81075fc:	6023      	str	r3, [r4, #0]
 81075fe:	2310      	movs	r3, #16
 8107600:	e7b0      	b.n	8107564 <_printf_i+0xfc>
 8107602:	6823      	ldr	r3, [r4, #0]
 8107604:	f043 0320 	orr.w	r3, r3, #32
 8107608:	6023      	str	r3, [r4, #0]
 810760a:	2378      	movs	r3, #120	; 0x78
 810760c:	4828      	ldr	r0, [pc, #160]	; (81076b0 <_printf_i+0x248>)
 810760e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8107612:	e7e3      	b.n	81075dc <_printf_i+0x174>
 8107614:	065e      	lsls	r6, r3, #25
 8107616:	bf48      	it	mi
 8107618:	b2ad      	uxthmi	r5, r5
 810761a:	e7e6      	b.n	81075ea <_printf_i+0x182>
 810761c:	4616      	mov	r6, r2
 810761e:	e7bb      	b.n	8107598 <_printf_i+0x130>
 8107620:	680b      	ldr	r3, [r1, #0]
 8107622:	6826      	ldr	r6, [r4, #0]
 8107624:	6960      	ldr	r0, [r4, #20]
 8107626:	1d1d      	adds	r5, r3, #4
 8107628:	600d      	str	r5, [r1, #0]
 810762a:	0635      	lsls	r5, r6, #24
 810762c:	681b      	ldr	r3, [r3, #0]
 810762e:	d501      	bpl.n	8107634 <_printf_i+0x1cc>
 8107630:	6018      	str	r0, [r3, #0]
 8107632:	e002      	b.n	810763a <_printf_i+0x1d2>
 8107634:	0671      	lsls	r1, r6, #25
 8107636:	d5fb      	bpl.n	8107630 <_printf_i+0x1c8>
 8107638:	8018      	strh	r0, [r3, #0]
 810763a:	2300      	movs	r3, #0
 810763c:	6123      	str	r3, [r4, #16]
 810763e:	4616      	mov	r6, r2
 8107640:	e7ba      	b.n	81075b8 <_printf_i+0x150>
 8107642:	680b      	ldr	r3, [r1, #0]
 8107644:	1d1a      	adds	r2, r3, #4
 8107646:	600a      	str	r2, [r1, #0]
 8107648:	681e      	ldr	r6, [r3, #0]
 810764a:	6862      	ldr	r2, [r4, #4]
 810764c:	2100      	movs	r1, #0
 810764e:	4630      	mov	r0, r6
 8107650:	f7f8 fe4e 	bl	81002f0 <memchr>
 8107654:	b108      	cbz	r0, 810765a <_printf_i+0x1f2>
 8107656:	1b80      	subs	r0, r0, r6
 8107658:	6060      	str	r0, [r4, #4]
 810765a:	6863      	ldr	r3, [r4, #4]
 810765c:	6123      	str	r3, [r4, #16]
 810765e:	2300      	movs	r3, #0
 8107660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107664:	e7a8      	b.n	81075b8 <_printf_i+0x150>
 8107666:	6923      	ldr	r3, [r4, #16]
 8107668:	4632      	mov	r2, r6
 810766a:	4649      	mov	r1, r9
 810766c:	4640      	mov	r0, r8
 810766e:	47d0      	blx	sl
 8107670:	3001      	adds	r0, #1
 8107672:	d0ab      	beq.n	81075cc <_printf_i+0x164>
 8107674:	6823      	ldr	r3, [r4, #0]
 8107676:	079b      	lsls	r3, r3, #30
 8107678:	d413      	bmi.n	81076a2 <_printf_i+0x23a>
 810767a:	68e0      	ldr	r0, [r4, #12]
 810767c:	9b03      	ldr	r3, [sp, #12]
 810767e:	4298      	cmp	r0, r3
 8107680:	bfb8      	it	lt
 8107682:	4618      	movlt	r0, r3
 8107684:	e7a4      	b.n	81075d0 <_printf_i+0x168>
 8107686:	2301      	movs	r3, #1
 8107688:	4632      	mov	r2, r6
 810768a:	4649      	mov	r1, r9
 810768c:	4640      	mov	r0, r8
 810768e:	47d0      	blx	sl
 8107690:	3001      	adds	r0, #1
 8107692:	d09b      	beq.n	81075cc <_printf_i+0x164>
 8107694:	3501      	adds	r5, #1
 8107696:	68e3      	ldr	r3, [r4, #12]
 8107698:	9903      	ldr	r1, [sp, #12]
 810769a:	1a5b      	subs	r3, r3, r1
 810769c:	42ab      	cmp	r3, r5
 810769e:	dcf2      	bgt.n	8107686 <_printf_i+0x21e>
 81076a0:	e7eb      	b.n	810767a <_printf_i+0x212>
 81076a2:	2500      	movs	r5, #0
 81076a4:	f104 0619 	add.w	r6, r4, #25
 81076a8:	e7f5      	b.n	8107696 <_printf_i+0x22e>
 81076aa:	bf00      	nop
 81076ac:	0810b50e 	.word	0x0810b50e
 81076b0:	0810b51f 	.word	0x0810b51f

081076b4 <_scanf_float>:
 81076b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81076b8:	b087      	sub	sp, #28
 81076ba:	4617      	mov	r7, r2
 81076bc:	9303      	str	r3, [sp, #12]
 81076be:	688b      	ldr	r3, [r1, #8]
 81076c0:	1e5a      	subs	r2, r3, #1
 81076c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 81076c6:	bf83      	ittte	hi
 81076c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 81076cc:	195b      	addhi	r3, r3, r5
 81076ce:	9302      	strhi	r3, [sp, #8]
 81076d0:	2300      	movls	r3, #0
 81076d2:	bf86      	itte	hi
 81076d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 81076d8:	608b      	strhi	r3, [r1, #8]
 81076da:	9302      	strls	r3, [sp, #8]
 81076dc:	680b      	ldr	r3, [r1, #0]
 81076de:	468b      	mov	fp, r1
 81076e0:	2500      	movs	r5, #0
 81076e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81076e6:	f84b 3b1c 	str.w	r3, [fp], #28
 81076ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81076ee:	4680      	mov	r8, r0
 81076f0:	460c      	mov	r4, r1
 81076f2:	465e      	mov	r6, fp
 81076f4:	46aa      	mov	sl, r5
 81076f6:	46a9      	mov	r9, r5
 81076f8:	9501      	str	r5, [sp, #4]
 81076fa:	68a2      	ldr	r2, [r4, #8]
 81076fc:	b152      	cbz	r2, 8107714 <_scanf_float+0x60>
 81076fe:	683b      	ldr	r3, [r7, #0]
 8107700:	781b      	ldrb	r3, [r3, #0]
 8107702:	2b4e      	cmp	r3, #78	; 0x4e
 8107704:	d864      	bhi.n	81077d0 <_scanf_float+0x11c>
 8107706:	2b40      	cmp	r3, #64	; 0x40
 8107708:	d83c      	bhi.n	8107784 <_scanf_float+0xd0>
 810770a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810770e:	b2c8      	uxtb	r0, r1
 8107710:	280e      	cmp	r0, #14
 8107712:	d93a      	bls.n	810778a <_scanf_float+0xd6>
 8107714:	f1b9 0f00 	cmp.w	r9, #0
 8107718:	d003      	beq.n	8107722 <_scanf_float+0x6e>
 810771a:	6823      	ldr	r3, [r4, #0]
 810771c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107720:	6023      	str	r3, [r4, #0]
 8107722:	f10a 3aff 	add.w	sl, sl, #4294967295
 8107726:	f1ba 0f01 	cmp.w	sl, #1
 810772a:	f200 8113 	bhi.w	8107954 <_scanf_float+0x2a0>
 810772e:	455e      	cmp	r6, fp
 8107730:	f200 8105 	bhi.w	810793e <_scanf_float+0x28a>
 8107734:	2501      	movs	r5, #1
 8107736:	4628      	mov	r0, r5
 8107738:	b007      	add	sp, #28
 810773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810773e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8107742:	2a0d      	cmp	r2, #13
 8107744:	d8e6      	bhi.n	8107714 <_scanf_float+0x60>
 8107746:	a101      	add	r1, pc, #4	; (adr r1, 810774c <_scanf_float+0x98>)
 8107748:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810774c:	0810788b 	.word	0x0810788b
 8107750:	08107715 	.word	0x08107715
 8107754:	08107715 	.word	0x08107715
 8107758:	08107715 	.word	0x08107715
 810775c:	081078eb 	.word	0x081078eb
 8107760:	081078c3 	.word	0x081078c3
 8107764:	08107715 	.word	0x08107715
 8107768:	08107715 	.word	0x08107715
 810776c:	08107899 	.word	0x08107899
 8107770:	08107715 	.word	0x08107715
 8107774:	08107715 	.word	0x08107715
 8107778:	08107715 	.word	0x08107715
 810777c:	08107715 	.word	0x08107715
 8107780:	08107851 	.word	0x08107851
 8107784:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8107788:	e7db      	b.n	8107742 <_scanf_float+0x8e>
 810778a:	290e      	cmp	r1, #14
 810778c:	d8c2      	bhi.n	8107714 <_scanf_float+0x60>
 810778e:	a001      	add	r0, pc, #4	; (adr r0, 8107794 <_scanf_float+0xe0>)
 8107790:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8107794:	08107843 	.word	0x08107843
 8107798:	08107715 	.word	0x08107715
 810779c:	08107843 	.word	0x08107843
 81077a0:	081078d7 	.word	0x081078d7
 81077a4:	08107715 	.word	0x08107715
 81077a8:	081077f1 	.word	0x081077f1
 81077ac:	0810782d 	.word	0x0810782d
 81077b0:	0810782d 	.word	0x0810782d
 81077b4:	0810782d 	.word	0x0810782d
 81077b8:	0810782d 	.word	0x0810782d
 81077bc:	0810782d 	.word	0x0810782d
 81077c0:	0810782d 	.word	0x0810782d
 81077c4:	0810782d 	.word	0x0810782d
 81077c8:	0810782d 	.word	0x0810782d
 81077cc:	0810782d 	.word	0x0810782d
 81077d0:	2b6e      	cmp	r3, #110	; 0x6e
 81077d2:	d809      	bhi.n	81077e8 <_scanf_float+0x134>
 81077d4:	2b60      	cmp	r3, #96	; 0x60
 81077d6:	d8b2      	bhi.n	810773e <_scanf_float+0x8a>
 81077d8:	2b54      	cmp	r3, #84	; 0x54
 81077da:	d077      	beq.n	81078cc <_scanf_float+0x218>
 81077dc:	2b59      	cmp	r3, #89	; 0x59
 81077de:	d199      	bne.n	8107714 <_scanf_float+0x60>
 81077e0:	2d07      	cmp	r5, #7
 81077e2:	d197      	bne.n	8107714 <_scanf_float+0x60>
 81077e4:	2508      	movs	r5, #8
 81077e6:	e029      	b.n	810783c <_scanf_float+0x188>
 81077e8:	2b74      	cmp	r3, #116	; 0x74
 81077ea:	d06f      	beq.n	81078cc <_scanf_float+0x218>
 81077ec:	2b79      	cmp	r3, #121	; 0x79
 81077ee:	e7f6      	b.n	81077de <_scanf_float+0x12a>
 81077f0:	6821      	ldr	r1, [r4, #0]
 81077f2:	05c8      	lsls	r0, r1, #23
 81077f4:	d51a      	bpl.n	810782c <_scanf_float+0x178>
 81077f6:	9b02      	ldr	r3, [sp, #8]
 81077f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 81077fc:	6021      	str	r1, [r4, #0]
 81077fe:	f109 0901 	add.w	r9, r9, #1
 8107802:	b11b      	cbz	r3, 810780c <_scanf_float+0x158>
 8107804:	3b01      	subs	r3, #1
 8107806:	3201      	adds	r2, #1
 8107808:	9302      	str	r3, [sp, #8]
 810780a:	60a2      	str	r2, [r4, #8]
 810780c:	68a3      	ldr	r3, [r4, #8]
 810780e:	3b01      	subs	r3, #1
 8107810:	60a3      	str	r3, [r4, #8]
 8107812:	6923      	ldr	r3, [r4, #16]
 8107814:	3301      	adds	r3, #1
 8107816:	6123      	str	r3, [r4, #16]
 8107818:	687b      	ldr	r3, [r7, #4]
 810781a:	3b01      	subs	r3, #1
 810781c:	2b00      	cmp	r3, #0
 810781e:	607b      	str	r3, [r7, #4]
 8107820:	f340 8084 	ble.w	810792c <_scanf_float+0x278>
 8107824:	683b      	ldr	r3, [r7, #0]
 8107826:	3301      	adds	r3, #1
 8107828:	603b      	str	r3, [r7, #0]
 810782a:	e766      	b.n	81076fa <_scanf_float+0x46>
 810782c:	eb1a 0f05 	cmn.w	sl, r5
 8107830:	f47f af70 	bne.w	8107714 <_scanf_float+0x60>
 8107834:	6822      	ldr	r2, [r4, #0]
 8107836:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810783a:	6022      	str	r2, [r4, #0]
 810783c:	f806 3b01 	strb.w	r3, [r6], #1
 8107840:	e7e4      	b.n	810780c <_scanf_float+0x158>
 8107842:	6822      	ldr	r2, [r4, #0]
 8107844:	0610      	lsls	r0, r2, #24
 8107846:	f57f af65 	bpl.w	8107714 <_scanf_float+0x60>
 810784a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810784e:	e7f4      	b.n	810783a <_scanf_float+0x186>
 8107850:	f1ba 0f00 	cmp.w	sl, #0
 8107854:	d10e      	bne.n	8107874 <_scanf_float+0x1c0>
 8107856:	f1b9 0f00 	cmp.w	r9, #0
 810785a:	d10e      	bne.n	810787a <_scanf_float+0x1c6>
 810785c:	6822      	ldr	r2, [r4, #0]
 810785e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8107862:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8107866:	d108      	bne.n	810787a <_scanf_float+0x1c6>
 8107868:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810786c:	6022      	str	r2, [r4, #0]
 810786e:	f04f 0a01 	mov.w	sl, #1
 8107872:	e7e3      	b.n	810783c <_scanf_float+0x188>
 8107874:	f1ba 0f02 	cmp.w	sl, #2
 8107878:	d055      	beq.n	8107926 <_scanf_float+0x272>
 810787a:	2d01      	cmp	r5, #1
 810787c:	d002      	beq.n	8107884 <_scanf_float+0x1d0>
 810787e:	2d04      	cmp	r5, #4
 8107880:	f47f af48 	bne.w	8107714 <_scanf_float+0x60>
 8107884:	3501      	adds	r5, #1
 8107886:	b2ed      	uxtb	r5, r5
 8107888:	e7d8      	b.n	810783c <_scanf_float+0x188>
 810788a:	f1ba 0f01 	cmp.w	sl, #1
 810788e:	f47f af41 	bne.w	8107714 <_scanf_float+0x60>
 8107892:	f04f 0a02 	mov.w	sl, #2
 8107896:	e7d1      	b.n	810783c <_scanf_float+0x188>
 8107898:	b97d      	cbnz	r5, 81078ba <_scanf_float+0x206>
 810789a:	f1b9 0f00 	cmp.w	r9, #0
 810789e:	f47f af3c 	bne.w	810771a <_scanf_float+0x66>
 81078a2:	6822      	ldr	r2, [r4, #0]
 81078a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81078a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81078ac:	f47f af39 	bne.w	8107722 <_scanf_float+0x6e>
 81078b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81078b4:	6022      	str	r2, [r4, #0]
 81078b6:	2501      	movs	r5, #1
 81078b8:	e7c0      	b.n	810783c <_scanf_float+0x188>
 81078ba:	2d03      	cmp	r5, #3
 81078bc:	d0e2      	beq.n	8107884 <_scanf_float+0x1d0>
 81078be:	2d05      	cmp	r5, #5
 81078c0:	e7de      	b.n	8107880 <_scanf_float+0x1cc>
 81078c2:	2d02      	cmp	r5, #2
 81078c4:	f47f af26 	bne.w	8107714 <_scanf_float+0x60>
 81078c8:	2503      	movs	r5, #3
 81078ca:	e7b7      	b.n	810783c <_scanf_float+0x188>
 81078cc:	2d06      	cmp	r5, #6
 81078ce:	f47f af21 	bne.w	8107714 <_scanf_float+0x60>
 81078d2:	2507      	movs	r5, #7
 81078d4:	e7b2      	b.n	810783c <_scanf_float+0x188>
 81078d6:	6822      	ldr	r2, [r4, #0]
 81078d8:	0591      	lsls	r1, r2, #22
 81078da:	f57f af1b 	bpl.w	8107714 <_scanf_float+0x60>
 81078de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81078e2:	6022      	str	r2, [r4, #0]
 81078e4:	f8cd 9004 	str.w	r9, [sp, #4]
 81078e8:	e7a8      	b.n	810783c <_scanf_float+0x188>
 81078ea:	6822      	ldr	r2, [r4, #0]
 81078ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81078f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81078f4:	d006      	beq.n	8107904 <_scanf_float+0x250>
 81078f6:	0550      	lsls	r0, r2, #21
 81078f8:	f57f af0c 	bpl.w	8107714 <_scanf_float+0x60>
 81078fc:	f1b9 0f00 	cmp.w	r9, #0
 8107900:	f43f af0f 	beq.w	8107722 <_scanf_float+0x6e>
 8107904:	0591      	lsls	r1, r2, #22
 8107906:	bf58      	it	pl
 8107908:	9901      	ldrpl	r1, [sp, #4]
 810790a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810790e:	bf58      	it	pl
 8107910:	eba9 0101 	subpl.w	r1, r9, r1
 8107914:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8107918:	bf58      	it	pl
 810791a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810791e:	6022      	str	r2, [r4, #0]
 8107920:	f04f 0900 	mov.w	r9, #0
 8107924:	e78a      	b.n	810783c <_scanf_float+0x188>
 8107926:	f04f 0a03 	mov.w	sl, #3
 810792a:	e787      	b.n	810783c <_scanf_float+0x188>
 810792c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8107930:	4639      	mov	r1, r7
 8107932:	4640      	mov	r0, r8
 8107934:	4798      	blx	r3
 8107936:	2800      	cmp	r0, #0
 8107938:	f43f aedf 	beq.w	81076fa <_scanf_float+0x46>
 810793c:	e6ea      	b.n	8107714 <_scanf_float+0x60>
 810793e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107942:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107946:	463a      	mov	r2, r7
 8107948:	4640      	mov	r0, r8
 810794a:	4798      	blx	r3
 810794c:	6923      	ldr	r3, [r4, #16]
 810794e:	3b01      	subs	r3, #1
 8107950:	6123      	str	r3, [r4, #16]
 8107952:	e6ec      	b.n	810772e <_scanf_float+0x7a>
 8107954:	1e6b      	subs	r3, r5, #1
 8107956:	2b06      	cmp	r3, #6
 8107958:	d825      	bhi.n	81079a6 <_scanf_float+0x2f2>
 810795a:	2d02      	cmp	r5, #2
 810795c:	d836      	bhi.n	81079cc <_scanf_float+0x318>
 810795e:	455e      	cmp	r6, fp
 8107960:	f67f aee8 	bls.w	8107734 <_scanf_float+0x80>
 8107964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107968:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810796c:	463a      	mov	r2, r7
 810796e:	4640      	mov	r0, r8
 8107970:	4798      	blx	r3
 8107972:	6923      	ldr	r3, [r4, #16]
 8107974:	3b01      	subs	r3, #1
 8107976:	6123      	str	r3, [r4, #16]
 8107978:	e7f1      	b.n	810795e <_scanf_float+0x2aa>
 810797a:	9802      	ldr	r0, [sp, #8]
 810797c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107980:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8107984:	9002      	str	r0, [sp, #8]
 8107986:	463a      	mov	r2, r7
 8107988:	4640      	mov	r0, r8
 810798a:	4798      	blx	r3
 810798c:	6923      	ldr	r3, [r4, #16]
 810798e:	3b01      	subs	r3, #1
 8107990:	6123      	str	r3, [r4, #16]
 8107992:	f10a 3aff 	add.w	sl, sl, #4294967295
 8107996:	fa5f fa8a 	uxtb.w	sl, sl
 810799a:	f1ba 0f02 	cmp.w	sl, #2
 810799e:	d1ec      	bne.n	810797a <_scanf_float+0x2c6>
 81079a0:	3d03      	subs	r5, #3
 81079a2:	b2ed      	uxtb	r5, r5
 81079a4:	1b76      	subs	r6, r6, r5
 81079a6:	6823      	ldr	r3, [r4, #0]
 81079a8:	05da      	lsls	r2, r3, #23
 81079aa:	d52f      	bpl.n	8107a0c <_scanf_float+0x358>
 81079ac:	055b      	lsls	r3, r3, #21
 81079ae:	d510      	bpl.n	81079d2 <_scanf_float+0x31e>
 81079b0:	455e      	cmp	r6, fp
 81079b2:	f67f aebf 	bls.w	8107734 <_scanf_float+0x80>
 81079b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81079ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81079be:	463a      	mov	r2, r7
 81079c0:	4640      	mov	r0, r8
 81079c2:	4798      	blx	r3
 81079c4:	6923      	ldr	r3, [r4, #16]
 81079c6:	3b01      	subs	r3, #1
 81079c8:	6123      	str	r3, [r4, #16]
 81079ca:	e7f1      	b.n	81079b0 <_scanf_float+0x2fc>
 81079cc:	46aa      	mov	sl, r5
 81079ce:	9602      	str	r6, [sp, #8]
 81079d0:	e7df      	b.n	8107992 <_scanf_float+0x2de>
 81079d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81079d6:	6923      	ldr	r3, [r4, #16]
 81079d8:	2965      	cmp	r1, #101	; 0x65
 81079da:	f103 33ff 	add.w	r3, r3, #4294967295
 81079de:	f106 35ff 	add.w	r5, r6, #4294967295
 81079e2:	6123      	str	r3, [r4, #16]
 81079e4:	d00c      	beq.n	8107a00 <_scanf_float+0x34c>
 81079e6:	2945      	cmp	r1, #69	; 0x45
 81079e8:	d00a      	beq.n	8107a00 <_scanf_float+0x34c>
 81079ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81079ee:	463a      	mov	r2, r7
 81079f0:	4640      	mov	r0, r8
 81079f2:	4798      	blx	r3
 81079f4:	6923      	ldr	r3, [r4, #16]
 81079f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81079fa:	3b01      	subs	r3, #1
 81079fc:	1eb5      	subs	r5, r6, #2
 81079fe:	6123      	str	r3, [r4, #16]
 8107a00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107a04:	463a      	mov	r2, r7
 8107a06:	4640      	mov	r0, r8
 8107a08:	4798      	blx	r3
 8107a0a:	462e      	mov	r6, r5
 8107a0c:	6825      	ldr	r5, [r4, #0]
 8107a0e:	f015 0510 	ands.w	r5, r5, #16
 8107a12:	d158      	bne.n	8107ac6 <_scanf_float+0x412>
 8107a14:	7035      	strb	r5, [r6, #0]
 8107a16:	6823      	ldr	r3, [r4, #0]
 8107a18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8107a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8107a20:	d11c      	bne.n	8107a5c <_scanf_float+0x3a8>
 8107a22:	9b01      	ldr	r3, [sp, #4]
 8107a24:	454b      	cmp	r3, r9
 8107a26:	eba3 0209 	sub.w	r2, r3, r9
 8107a2a:	d124      	bne.n	8107a76 <_scanf_float+0x3c2>
 8107a2c:	2200      	movs	r2, #0
 8107a2e:	4659      	mov	r1, fp
 8107a30:	4640      	mov	r0, r8
 8107a32:	f001 f843 	bl	8108abc <_strtod_r>
 8107a36:	9b03      	ldr	r3, [sp, #12]
 8107a38:	6821      	ldr	r1, [r4, #0]
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	f011 0f02 	tst.w	r1, #2
 8107a40:	ec57 6b10 	vmov	r6, r7, d0
 8107a44:	f103 0204 	add.w	r2, r3, #4
 8107a48:	d020      	beq.n	8107a8c <_scanf_float+0x3d8>
 8107a4a:	9903      	ldr	r1, [sp, #12]
 8107a4c:	600a      	str	r2, [r1, #0]
 8107a4e:	681b      	ldr	r3, [r3, #0]
 8107a50:	e9c3 6700 	strd	r6, r7, [r3]
 8107a54:	68e3      	ldr	r3, [r4, #12]
 8107a56:	3301      	adds	r3, #1
 8107a58:	60e3      	str	r3, [r4, #12]
 8107a5a:	e66c      	b.n	8107736 <_scanf_float+0x82>
 8107a5c:	9b04      	ldr	r3, [sp, #16]
 8107a5e:	2b00      	cmp	r3, #0
 8107a60:	d0e4      	beq.n	8107a2c <_scanf_float+0x378>
 8107a62:	9905      	ldr	r1, [sp, #20]
 8107a64:	230a      	movs	r3, #10
 8107a66:	462a      	mov	r2, r5
 8107a68:	3101      	adds	r1, #1
 8107a6a:	4640      	mov	r0, r8
 8107a6c:	f001 f8b0 	bl	8108bd0 <_strtol_r>
 8107a70:	9b04      	ldr	r3, [sp, #16]
 8107a72:	9e05      	ldr	r6, [sp, #20]
 8107a74:	1ac2      	subs	r2, r0, r3
 8107a76:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8107a7a:	429e      	cmp	r6, r3
 8107a7c:	bf28      	it	cs
 8107a7e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8107a82:	4912      	ldr	r1, [pc, #72]	; (8107acc <_scanf_float+0x418>)
 8107a84:	4630      	mov	r0, r6
 8107a86:	f000 f98f 	bl	8107da8 <siprintf>
 8107a8a:	e7cf      	b.n	8107a2c <_scanf_float+0x378>
 8107a8c:	f011 0f04 	tst.w	r1, #4
 8107a90:	9903      	ldr	r1, [sp, #12]
 8107a92:	600a      	str	r2, [r1, #0]
 8107a94:	d1db      	bne.n	8107a4e <_scanf_float+0x39a>
 8107a96:	f8d3 8000 	ldr.w	r8, [r3]
 8107a9a:	ee10 2a10 	vmov	r2, s0
 8107a9e:	ee10 0a10 	vmov	r0, s0
 8107aa2:	463b      	mov	r3, r7
 8107aa4:	4639      	mov	r1, r7
 8107aa6:	f7f9 f8c9 	bl	8100c3c <__aeabi_dcmpun>
 8107aaa:	b128      	cbz	r0, 8107ab8 <_scanf_float+0x404>
 8107aac:	4808      	ldr	r0, [pc, #32]	; (8107ad0 <_scanf_float+0x41c>)
 8107aae:	f000 f975 	bl	8107d9c <nanf>
 8107ab2:	ed88 0a00 	vstr	s0, [r8]
 8107ab6:	e7cd      	b.n	8107a54 <_scanf_float+0x3a0>
 8107ab8:	4630      	mov	r0, r6
 8107aba:	4639      	mov	r1, r7
 8107abc:	f7f9 f91c 	bl	8100cf8 <__aeabi_d2f>
 8107ac0:	f8c8 0000 	str.w	r0, [r8]
 8107ac4:	e7c6      	b.n	8107a54 <_scanf_float+0x3a0>
 8107ac6:	2500      	movs	r5, #0
 8107ac8:	e635      	b.n	8107736 <_scanf_float+0x82>
 8107aca:	bf00      	nop
 8107acc:	0810b530 	.word	0x0810b530
 8107ad0:	0810b948 	.word	0x0810b948

08107ad4 <iprintf>:
 8107ad4:	b40f      	push	{r0, r1, r2, r3}
 8107ad6:	4b0a      	ldr	r3, [pc, #40]	; (8107b00 <iprintf+0x2c>)
 8107ad8:	b513      	push	{r0, r1, r4, lr}
 8107ada:	681c      	ldr	r4, [r3, #0]
 8107adc:	b124      	cbz	r4, 8107ae8 <iprintf+0x14>
 8107ade:	69a3      	ldr	r3, [r4, #24]
 8107ae0:	b913      	cbnz	r3, 8107ae8 <iprintf+0x14>
 8107ae2:	4620      	mov	r0, r4
 8107ae4:	f7ff f804 	bl	8106af0 <__sinit>
 8107ae8:	ab05      	add	r3, sp, #20
 8107aea:	9a04      	ldr	r2, [sp, #16]
 8107aec:	68a1      	ldr	r1, [r4, #8]
 8107aee:	9301      	str	r3, [sp, #4]
 8107af0:	4620      	mov	r0, r4
 8107af2:	f003 fa37 	bl	810af64 <_vfiprintf_r>
 8107af6:	b002      	add	sp, #8
 8107af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107afc:	b004      	add	sp, #16
 8107afe:	4770      	bx	lr
 8107b00:	10000010 	.word	0x10000010

08107b04 <_puts_r>:
 8107b04:	b570      	push	{r4, r5, r6, lr}
 8107b06:	460e      	mov	r6, r1
 8107b08:	4605      	mov	r5, r0
 8107b0a:	b118      	cbz	r0, 8107b14 <_puts_r+0x10>
 8107b0c:	6983      	ldr	r3, [r0, #24]
 8107b0e:	b90b      	cbnz	r3, 8107b14 <_puts_r+0x10>
 8107b10:	f7fe ffee 	bl	8106af0 <__sinit>
 8107b14:	69ab      	ldr	r3, [r5, #24]
 8107b16:	68ac      	ldr	r4, [r5, #8]
 8107b18:	b913      	cbnz	r3, 8107b20 <_puts_r+0x1c>
 8107b1a:	4628      	mov	r0, r5
 8107b1c:	f7fe ffe8 	bl	8106af0 <__sinit>
 8107b20:	4b2c      	ldr	r3, [pc, #176]	; (8107bd4 <_puts_r+0xd0>)
 8107b22:	429c      	cmp	r4, r3
 8107b24:	d120      	bne.n	8107b68 <_puts_r+0x64>
 8107b26:	686c      	ldr	r4, [r5, #4]
 8107b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107b2a:	07db      	lsls	r3, r3, #31
 8107b2c:	d405      	bmi.n	8107b3a <_puts_r+0x36>
 8107b2e:	89a3      	ldrh	r3, [r4, #12]
 8107b30:	0598      	lsls	r0, r3, #22
 8107b32:	d402      	bmi.n	8107b3a <_puts_r+0x36>
 8107b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107b36:	f7ff f89e 	bl	8106c76 <__retarget_lock_acquire_recursive>
 8107b3a:	89a3      	ldrh	r3, [r4, #12]
 8107b3c:	0719      	lsls	r1, r3, #28
 8107b3e:	d51d      	bpl.n	8107b7c <_puts_r+0x78>
 8107b40:	6923      	ldr	r3, [r4, #16]
 8107b42:	b1db      	cbz	r3, 8107b7c <_puts_r+0x78>
 8107b44:	3e01      	subs	r6, #1
 8107b46:	68a3      	ldr	r3, [r4, #8]
 8107b48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8107b4c:	3b01      	subs	r3, #1
 8107b4e:	60a3      	str	r3, [r4, #8]
 8107b50:	bb39      	cbnz	r1, 8107ba2 <_puts_r+0x9e>
 8107b52:	2b00      	cmp	r3, #0
 8107b54:	da38      	bge.n	8107bc8 <_puts_r+0xc4>
 8107b56:	4622      	mov	r2, r4
 8107b58:	210a      	movs	r1, #10
 8107b5a:	4628      	mov	r0, r5
 8107b5c:	f001 f83a 	bl	8108bd4 <__swbuf_r>
 8107b60:	3001      	adds	r0, #1
 8107b62:	d011      	beq.n	8107b88 <_puts_r+0x84>
 8107b64:	250a      	movs	r5, #10
 8107b66:	e011      	b.n	8107b8c <_puts_r+0x88>
 8107b68:	4b1b      	ldr	r3, [pc, #108]	; (8107bd8 <_puts_r+0xd4>)
 8107b6a:	429c      	cmp	r4, r3
 8107b6c:	d101      	bne.n	8107b72 <_puts_r+0x6e>
 8107b6e:	68ac      	ldr	r4, [r5, #8]
 8107b70:	e7da      	b.n	8107b28 <_puts_r+0x24>
 8107b72:	4b1a      	ldr	r3, [pc, #104]	; (8107bdc <_puts_r+0xd8>)
 8107b74:	429c      	cmp	r4, r3
 8107b76:	bf08      	it	eq
 8107b78:	68ec      	ldreq	r4, [r5, #12]
 8107b7a:	e7d5      	b.n	8107b28 <_puts_r+0x24>
 8107b7c:	4621      	mov	r1, r4
 8107b7e:	4628      	mov	r0, r5
 8107b80:	f001 f88c 	bl	8108c9c <__swsetup_r>
 8107b84:	2800      	cmp	r0, #0
 8107b86:	d0dd      	beq.n	8107b44 <_puts_r+0x40>
 8107b88:	f04f 35ff 	mov.w	r5, #4294967295
 8107b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107b8e:	07da      	lsls	r2, r3, #31
 8107b90:	d405      	bmi.n	8107b9e <_puts_r+0x9a>
 8107b92:	89a3      	ldrh	r3, [r4, #12]
 8107b94:	059b      	lsls	r3, r3, #22
 8107b96:	d402      	bmi.n	8107b9e <_puts_r+0x9a>
 8107b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107b9a:	f7ff f86d 	bl	8106c78 <__retarget_lock_release_recursive>
 8107b9e:	4628      	mov	r0, r5
 8107ba0:	bd70      	pop	{r4, r5, r6, pc}
 8107ba2:	2b00      	cmp	r3, #0
 8107ba4:	da04      	bge.n	8107bb0 <_puts_r+0xac>
 8107ba6:	69a2      	ldr	r2, [r4, #24]
 8107ba8:	429a      	cmp	r2, r3
 8107baa:	dc06      	bgt.n	8107bba <_puts_r+0xb6>
 8107bac:	290a      	cmp	r1, #10
 8107bae:	d004      	beq.n	8107bba <_puts_r+0xb6>
 8107bb0:	6823      	ldr	r3, [r4, #0]
 8107bb2:	1c5a      	adds	r2, r3, #1
 8107bb4:	6022      	str	r2, [r4, #0]
 8107bb6:	7019      	strb	r1, [r3, #0]
 8107bb8:	e7c5      	b.n	8107b46 <_puts_r+0x42>
 8107bba:	4622      	mov	r2, r4
 8107bbc:	4628      	mov	r0, r5
 8107bbe:	f001 f809 	bl	8108bd4 <__swbuf_r>
 8107bc2:	3001      	adds	r0, #1
 8107bc4:	d1bf      	bne.n	8107b46 <_puts_r+0x42>
 8107bc6:	e7df      	b.n	8107b88 <_puts_r+0x84>
 8107bc8:	6823      	ldr	r3, [r4, #0]
 8107bca:	250a      	movs	r5, #10
 8107bcc:	1c5a      	adds	r2, r3, #1
 8107bce:	6022      	str	r2, [r4, #0]
 8107bd0:	701d      	strb	r5, [r3, #0]
 8107bd2:	e7db      	b.n	8107b8c <_puts_r+0x88>
 8107bd4:	0810b4b8 	.word	0x0810b4b8
 8107bd8:	0810b4d8 	.word	0x0810b4d8
 8107bdc:	0810b498 	.word	0x0810b498

08107be0 <puts>:
 8107be0:	4b02      	ldr	r3, [pc, #8]	; (8107bec <puts+0xc>)
 8107be2:	4601      	mov	r1, r0
 8107be4:	6818      	ldr	r0, [r3, #0]
 8107be6:	f7ff bf8d 	b.w	8107b04 <_puts_r>
 8107bea:	bf00      	nop
 8107bec:	10000010 	.word	0x10000010

08107bf0 <_sbrk_r>:
 8107bf0:	b538      	push	{r3, r4, r5, lr}
 8107bf2:	4d06      	ldr	r5, [pc, #24]	; (8107c0c <_sbrk_r+0x1c>)
 8107bf4:	2300      	movs	r3, #0
 8107bf6:	4604      	mov	r4, r0
 8107bf8:	4608      	mov	r0, r1
 8107bfa:	602b      	str	r3, [r5, #0]
 8107bfc:	f7fa f9bc 	bl	8101f78 <_sbrk>
 8107c00:	1c43      	adds	r3, r0, #1
 8107c02:	d102      	bne.n	8107c0a <_sbrk_r+0x1a>
 8107c04:	682b      	ldr	r3, [r5, #0]
 8107c06:	b103      	cbz	r3, 8107c0a <_sbrk_r+0x1a>
 8107c08:	6023      	str	r3, [r4, #0]
 8107c0a:	bd38      	pop	{r3, r4, r5, pc}
 8107c0c:	1003ebf8 	.word	0x1003ebf8

08107c10 <setvbuf>:
 8107c10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8107c14:	461d      	mov	r5, r3
 8107c16:	4b5d      	ldr	r3, [pc, #372]	; (8107d8c <setvbuf+0x17c>)
 8107c18:	681f      	ldr	r7, [r3, #0]
 8107c1a:	4604      	mov	r4, r0
 8107c1c:	460e      	mov	r6, r1
 8107c1e:	4690      	mov	r8, r2
 8107c20:	b127      	cbz	r7, 8107c2c <setvbuf+0x1c>
 8107c22:	69bb      	ldr	r3, [r7, #24]
 8107c24:	b913      	cbnz	r3, 8107c2c <setvbuf+0x1c>
 8107c26:	4638      	mov	r0, r7
 8107c28:	f7fe ff62 	bl	8106af0 <__sinit>
 8107c2c:	4b58      	ldr	r3, [pc, #352]	; (8107d90 <setvbuf+0x180>)
 8107c2e:	429c      	cmp	r4, r3
 8107c30:	d167      	bne.n	8107d02 <setvbuf+0xf2>
 8107c32:	687c      	ldr	r4, [r7, #4]
 8107c34:	f1b8 0f02 	cmp.w	r8, #2
 8107c38:	d006      	beq.n	8107c48 <setvbuf+0x38>
 8107c3a:	f1b8 0f01 	cmp.w	r8, #1
 8107c3e:	f200 809f 	bhi.w	8107d80 <setvbuf+0x170>
 8107c42:	2d00      	cmp	r5, #0
 8107c44:	f2c0 809c 	blt.w	8107d80 <setvbuf+0x170>
 8107c48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107c4a:	07db      	lsls	r3, r3, #31
 8107c4c:	d405      	bmi.n	8107c5a <setvbuf+0x4a>
 8107c4e:	89a3      	ldrh	r3, [r4, #12]
 8107c50:	0598      	lsls	r0, r3, #22
 8107c52:	d402      	bmi.n	8107c5a <setvbuf+0x4a>
 8107c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107c56:	f7ff f80e 	bl	8106c76 <__retarget_lock_acquire_recursive>
 8107c5a:	4621      	mov	r1, r4
 8107c5c:	4638      	mov	r0, r7
 8107c5e:	f7fe feb3 	bl	81069c8 <_fflush_r>
 8107c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107c64:	b141      	cbz	r1, 8107c78 <setvbuf+0x68>
 8107c66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107c6a:	4299      	cmp	r1, r3
 8107c6c:	d002      	beq.n	8107c74 <setvbuf+0x64>
 8107c6e:	4638      	mov	r0, r7
 8107c70:	f7ff f80c 	bl	8106c8c <_free_r>
 8107c74:	2300      	movs	r3, #0
 8107c76:	6363      	str	r3, [r4, #52]	; 0x34
 8107c78:	2300      	movs	r3, #0
 8107c7a:	61a3      	str	r3, [r4, #24]
 8107c7c:	6063      	str	r3, [r4, #4]
 8107c7e:	89a3      	ldrh	r3, [r4, #12]
 8107c80:	0619      	lsls	r1, r3, #24
 8107c82:	d503      	bpl.n	8107c8c <setvbuf+0x7c>
 8107c84:	6921      	ldr	r1, [r4, #16]
 8107c86:	4638      	mov	r0, r7
 8107c88:	f7ff f800 	bl	8106c8c <_free_r>
 8107c8c:	89a3      	ldrh	r3, [r4, #12]
 8107c8e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8107c92:	f023 0303 	bic.w	r3, r3, #3
 8107c96:	f1b8 0f02 	cmp.w	r8, #2
 8107c9a:	81a3      	strh	r3, [r4, #12]
 8107c9c:	d06c      	beq.n	8107d78 <setvbuf+0x168>
 8107c9e:	ab01      	add	r3, sp, #4
 8107ca0:	466a      	mov	r2, sp
 8107ca2:	4621      	mov	r1, r4
 8107ca4:	4638      	mov	r0, r7
 8107ca6:	f002 fa75 	bl	810a194 <__swhatbuf_r>
 8107caa:	89a3      	ldrh	r3, [r4, #12]
 8107cac:	4318      	orrs	r0, r3
 8107cae:	81a0      	strh	r0, [r4, #12]
 8107cb0:	2d00      	cmp	r5, #0
 8107cb2:	d130      	bne.n	8107d16 <setvbuf+0x106>
 8107cb4:	9d00      	ldr	r5, [sp, #0]
 8107cb6:	4628      	mov	r0, r5
 8107cb8:	f002 fad0 	bl	810a25c <malloc>
 8107cbc:	4606      	mov	r6, r0
 8107cbe:	2800      	cmp	r0, #0
 8107cc0:	d155      	bne.n	8107d6e <setvbuf+0x15e>
 8107cc2:	f8dd 9000 	ldr.w	r9, [sp]
 8107cc6:	45a9      	cmp	r9, r5
 8107cc8:	d14a      	bne.n	8107d60 <setvbuf+0x150>
 8107cca:	f04f 35ff 	mov.w	r5, #4294967295
 8107cce:	2200      	movs	r2, #0
 8107cd0:	60a2      	str	r2, [r4, #8]
 8107cd2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8107cd6:	6022      	str	r2, [r4, #0]
 8107cd8:	6122      	str	r2, [r4, #16]
 8107cda:	2201      	movs	r2, #1
 8107cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107ce0:	6162      	str	r2, [r4, #20]
 8107ce2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8107ce4:	f043 0302 	orr.w	r3, r3, #2
 8107ce8:	07d2      	lsls	r2, r2, #31
 8107cea:	81a3      	strh	r3, [r4, #12]
 8107cec:	d405      	bmi.n	8107cfa <setvbuf+0xea>
 8107cee:	f413 7f00 	tst.w	r3, #512	; 0x200
 8107cf2:	d102      	bne.n	8107cfa <setvbuf+0xea>
 8107cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107cf6:	f7fe ffbf 	bl	8106c78 <__retarget_lock_release_recursive>
 8107cfa:	4628      	mov	r0, r5
 8107cfc:	b003      	add	sp, #12
 8107cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8107d02:	4b24      	ldr	r3, [pc, #144]	; (8107d94 <setvbuf+0x184>)
 8107d04:	429c      	cmp	r4, r3
 8107d06:	d101      	bne.n	8107d0c <setvbuf+0xfc>
 8107d08:	68bc      	ldr	r4, [r7, #8]
 8107d0a:	e793      	b.n	8107c34 <setvbuf+0x24>
 8107d0c:	4b22      	ldr	r3, [pc, #136]	; (8107d98 <setvbuf+0x188>)
 8107d0e:	429c      	cmp	r4, r3
 8107d10:	bf08      	it	eq
 8107d12:	68fc      	ldreq	r4, [r7, #12]
 8107d14:	e78e      	b.n	8107c34 <setvbuf+0x24>
 8107d16:	2e00      	cmp	r6, #0
 8107d18:	d0cd      	beq.n	8107cb6 <setvbuf+0xa6>
 8107d1a:	69bb      	ldr	r3, [r7, #24]
 8107d1c:	b913      	cbnz	r3, 8107d24 <setvbuf+0x114>
 8107d1e:	4638      	mov	r0, r7
 8107d20:	f7fe fee6 	bl	8106af0 <__sinit>
 8107d24:	f1b8 0f01 	cmp.w	r8, #1
 8107d28:	bf08      	it	eq
 8107d2a:	89a3      	ldrheq	r3, [r4, #12]
 8107d2c:	6026      	str	r6, [r4, #0]
 8107d2e:	bf04      	itt	eq
 8107d30:	f043 0301 	orreq.w	r3, r3, #1
 8107d34:	81a3      	strheq	r3, [r4, #12]
 8107d36:	89a2      	ldrh	r2, [r4, #12]
 8107d38:	f012 0308 	ands.w	r3, r2, #8
 8107d3c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8107d40:	d01c      	beq.n	8107d7c <setvbuf+0x16c>
 8107d42:	07d3      	lsls	r3, r2, #31
 8107d44:	bf41      	itttt	mi
 8107d46:	2300      	movmi	r3, #0
 8107d48:	426d      	negmi	r5, r5
 8107d4a:	60a3      	strmi	r3, [r4, #8]
 8107d4c:	61a5      	strmi	r5, [r4, #24]
 8107d4e:	bf58      	it	pl
 8107d50:	60a5      	strpl	r5, [r4, #8]
 8107d52:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8107d54:	f015 0501 	ands.w	r5, r5, #1
 8107d58:	d115      	bne.n	8107d86 <setvbuf+0x176>
 8107d5a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8107d5e:	e7c8      	b.n	8107cf2 <setvbuf+0xe2>
 8107d60:	4648      	mov	r0, r9
 8107d62:	f002 fa7b 	bl	810a25c <malloc>
 8107d66:	4606      	mov	r6, r0
 8107d68:	2800      	cmp	r0, #0
 8107d6a:	d0ae      	beq.n	8107cca <setvbuf+0xba>
 8107d6c:	464d      	mov	r5, r9
 8107d6e:	89a3      	ldrh	r3, [r4, #12]
 8107d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8107d74:	81a3      	strh	r3, [r4, #12]
 8107d76:	e7d0      	b.n	8107d1a <setvbuf+0x10a>
 8107d78:	2500      	movs	r5, #0
 8107d7a:	e7a8      	b.n	8107cce <setvbuf+0xbe>
 8107d7c:	60a3      	str	r3, [r4, #8]
 8107d7e:	e7e8      	b.n	8107d52 <setvbuf+0x142>
 8107d80:	f04f 35ff 	mov.w	r5, #4294967295
 8107d84:	e7b9      	b.n	8107cfa <setvbuf+0xea>
 8107d86:	2500      	movs	r5, #0
 8107d88:	e7b7      	b.n	8107cfa <setvbuf+0xea>
 8107d8a:	bf00      	nop
 8107d8c:	10000010 	.word	0x10000010
 8107d90:	0810b4b8 	.word	0x0810b4b8
 8107d94:	0810b4d8 	.word	0x0810b4d8
 8107d98:	0810b498 	.word	0x0810b498

08107d9c <nanf>:
 8107d9c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8107da4 <nanf+0x8>
 8107da0:	4770      	bx	lr
 8107da2:	bf00      	nop
 8107da4:	7fc00000 	.word	0x7fc00000

08107da8 <siprintf>:
 8107da8:	b40e      	push	{r1, r2, r3}
 8107daa:	b500      	push	{lr}
 8107dac:	b09c      	sub	sp, #112	; 0x70
 8107dae:	ab1d      	add	r3, sp, #116	; 0x74
 8107db0:	9002      	str	r0, [sp, #8]
 8107db2:	9006      	str	r0, [sp, #24]
 8107db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8107db8:	4809      	ldr	r0, [pc, #36]	; (8107de0 <siprintf+0x38>)
 8107dba:	9107      	str	r1, [sp, #28]
 8107dbc:	9104      	str	r1, [sp, #16]
 8107dbe:	4909      	ldr	r1, [pc, #36]	; (8107de4 <siprintf+0x3c>)
 8107dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8107dc4:	9105      	str	r1, [sp, #20]
 8107dc6:	6800      	ldr	r0, [r0, #0]
 8107dc8:	9301      	str	r3, [sp, #4]
 8107dca:	a902      	add	r1, sp, #8
 8107dcc:	f002 ffa0 	bl	810ad10 <_svfiprintf_r>
 8107dd0:	9b02      	ldr	r3, [sp, #8]
 8107dd2:	2200      	movs	r2, #0
 8107dd4:	701a      	strb	r2, [r3, #0]
 8107dd6:	b01c      	add	sp, #112	; 0x70
 8107dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8107ddc:	b003      	add	sp, #12
 8107dde:	4770      	bx	lr
 8107de0:	10000010 	.word	0x10000010
 8107de4:	ffff0208 	.word	0xffff0208

08107de8 <__sread>:
 8107de8:	b510      	push	{r4, lr}
 8107dea:	460c      	mov	r4, r1
 8107dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107df0:	f003 f9e8 	bl	810b1c4 <_read_r>
 8107df4:	2800      	cmp	r0, #0
 8107df6:	bfab      	itete	ge
 8107df8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8107dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8107dfc:	181b      	addge	r3, r3, r0
 8107dfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8107e02:	bfac      	ite	ge
 8107e04:	6563      	strge	r3, [r4, #84]	; 0x54
 8107e06:	81a3      	strhlt	r3, [r4, #12]
 8107e08:	bd10      	pop	{r4, pc}

08107e0a <__swrite>:
 8107e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107e0e:	461f      	mov	r7, r3
 8107e10:	898b      	ldrh	r3, [r1, #12]
 8107e12:	05db      	lsls	r3, r3, #23
 8107e14:	4605      	mov	r5, r0
 8107e16:	460c      	mov	r4, r1
 8107e18:	4616      	mov	r6, r2
 8107e1a:	d505      	bpl.n	8107e28 <__swrite+0x1e>
 8107e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e20:	2302      	movs	r3, #2
 8107e22:	2200      	movs	r2, #0
 8107e24:	f002 f9a4 	bl	810a170 <_lseek_r>
 8107e28:	89a3      	ldrh	r3, [r4, #12]
 8107e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107e2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107e32:	81a3      	strh	r3, [r4, #12]
 8107e34:	4632      	mov	r2, r6
 8107e36:	463b      	mov	r3, r7
 8107e38:	4628      	mov	r0, r5
 8107e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107e3e:	f000 bf1b 	b.w	8108c78 <_write_r>

08107e42 <__sseek>:
 8107e42:	b510      	push	{r4, lr}
 8107e44:	460c      	mov	r4, r1
 8107e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e4a:	f002 f991 	bl	810a170 <_lseek_r>
 8107e4e:	1c43      	adds	r3, r0, #1
 8107e50:	89a3      	ldrh	r3, [r4, #12]
 8107e52:	bf15      	itete	ne
 8107e54:	6560      	strne	r0, [r4, #84]	; 0x54
 8107e56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8107e5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8107e5e:	81a3      	strheq	r3, [r4, #12]
 8107e60:	bf18      	it	ne
 8107e62:	81a3      	strhne	r3, [r4, #12]
 8107e64:	bd10      	pop	{r4, pc}

08107e66 <__sclose>:
 8107e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107e6a:	f000 bf85 	b.w	8108d78 <_close_r>

08107e6e <sulp>:
 8107e6e:	b570      	push	{r4, r5, r6, lr}
 8107e70:	4604      	mov	r4, r0
 8107e72:	460d      	mov	r5, r1
 8107e74:	ec45 4b10 	vmov	d0, r4, r5
 8107e78:	4616      	mov	r6, r2
 8107e7a:	f002 fd8f 	bl	810a99c <__ulp>
 8107e7e:	ec51 0b10 	vmov	r0, r1, d0
 8107e82:	b17e      	cbz	r6, 8107ea4 <sulp+0x36>
 8107e84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8107e88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8107e8c:	2b00      	cmp	r3, #0
 8107e8e:	dd09      	ble.n	8107ea4 <sulp+0x36>
 8107e90:	051b      	lsls	r3, r3, #20
 8107e92:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8107e96:	2400      	movs	r4, #0
 8107e98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8107e9c:	4622      	mov	r2, r4
 8107e9e:	462b      	mov	r3, r5
 8107ea0:	f7f8 fc32 	bl	8100708 <__aeabi_dmul>
 8107ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08107ea8 <_strtod_l>:
 8107ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107eac:	b0a3      	sub	sp, #140	; 0x8c
 8107eae:	461f      	mov	r7, r3
 8107eb0:	2300      	movs	r3, #0
 8107eb2:	931e      	str	r3, [sp, #120]	; 0x78
 8107eb4:	4ba4      	ldr	r3, [pc, #656]	; (8108148 <_strtod_l+0x2a0>)
 8107eb6:	9219      	str	r2, [sp, #100]	; 0x64
 8107eb8:	681b      	ldr	r3, [r3, #0]
 8107eba:	9307      	str	r3, [sp, #28]
 8107ebc:	4604      	mov	r4, r0
 8107ebe:	4618      	mov	r0, r3
 8107ec0:	4688      	mov	r8, r1
 8107ec2:	f7f8 fa0d 	bl	81002e0 <strlen>
 8107ec6:	f04f 0a00 	mov.w	sl, #0
 8107eca:	4605      	mov	r5, r0
 8107ecc:	f04f 0b00 	mov.w	fp, #0
 8107ed0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8107ed4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8107ed6:	781a      	ldrb	r2, [r3, #0]
 8107ed8:	2a2b      	cmp	r2, #43	; 0x2b
 8107eda:	d04c      	beq.n	8107f76 <_strtod_l+0xce>
 8107edc:	d839      	bhi.n	8107f52 <_strtod_l+0xaa>
 8107ede:	2a0d      	cmp	r2, #13
 8107ee0:	d832      	bhi.n	8107f48 <_strtod_l+0xa0>
 8107ee2:	2a08      	cmp	r2, #8
 8107ee4:	d832      	bhi.n	8107f4c <_strtod_l+0xa4>
 8107ee6:	2a00      	cmp	r2, #0
 8107ee8:	d03c      	beq.n	8107f64 <_strtod_l+0xbc>
 8107eea:	2300      	movs	r3, #0
 8107eec:	930e      	str	r3, [sp, #56]	; 0x38
 8107eee:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8107ef0:	7833      	ldrb	r3, [r6, #0]
 8107ef2:	2b30      	cmp	r3, #48	; 0x30
 8107ef4:	f040 80b4 	bne.w	8108060 <_strtod_l+0x1b8>
 8107ef8:	7873      	ldrb	r3, [r6, #1]
 8107efa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8107efe:	2b58      	cmp	r3, #88	; 0x58
 8107f00:	d16c      	bne.n	8107fdc <_strtod_l+0x134>
 8107f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8107f04:	9301      	str	r3, [sp, #4]
 8107f06:	ab1e      	add	r3, sp, #120	; 0x78
 8107f08:	9702      	str	r7, [sp, #8]
 8107f0a:	9300      	str	r3, [sp, #0]
 8107f0c:	4a8f      	ldr	r2, [pc, #572]	; (810814c <_strtod_l+0x2a4>)
 8107f0e:	ab1f      	add	r3, sp, #124	; 0x7c
 8107f10:	a91d      	add	r1, sp, #116	; 0x74
 8107f12:	4620      	mov	r0, r4
 8107f14:	f001 fe20 	bl	8109b58 <__gethex>
 8107f18:	f010 0707 	ands.w	r7, r0, #7
 8107f1c:	4605      	mov	r5, r0
 8107f1e:	d005      	beq.n	8107f2c <_strtod_l+0x84>
 8107f20:	2f06      	cmp	r7, #6
 8107f22:	d12a      	bne.n	8107f7a <_strtod_l+0xd2>
 8107f24:	3601      	adds	r6, #1
 8107f26:	2300      	movs	r3, #0
 8107f28:	961d      	str	r6, [sp, #116]	; 0x74
 8107f2a:	930e      	str	r3, [sp, #56]	; 0x38
 8107f2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8107f2e:	2b00      	cmp	r3, #0
 8107f30:	f040 8596 	bne.w	8108a60 <_strtod_l+0xbb8>
 8107f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8107f36:	b1db      	cbz	r3, 8107f70 <_strtod_l+0xc8>
 8107f38:	4652      	mov	r2, sl
 8107f3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8107f3e:	ec43 2b10 	vmov	d0, r2, r3
 8107f42:	b023      	add	sp, #140	; 0x8c
 8107f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107f48:	2a20      	cmp	r2, #32
 8107f4a:	d1ce      	bne.n	8107eea <_strtod_l+0x42>
 8107f4c:	3301      	adds	r3, #1
 8107f4e:	931d      	str	r3, [sp, #116]	; 0x74
 8107f50:	e7c0      	b.n	8107ed4 <_strtod_l+0x2c>
 8107f52:	2a2d      	cmp	r2, #45	; 0x2d
 8107f54:	d1c9      	bne.n	8107eea <_strtod_l+0x42>
 8107f56:	2201      	movs	r2, #1
 8107f58:	920e      	str	r2, [sp, #56]	; 0x38
 8107f5a:	1c5a      	adds	r2, r3, #1
 8107f5c:	921d      	str	r2, [sp, #116]	; 0x74
 8107f5e:	785b      	ldrb	r3, [r3, #1]
 8107f60:	2b00      	cmp	r3, #0
 8107f62:	d1c4      	bne.n	8107eee <_strtod_l+0x46>
 8107f64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8107f66:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8107f6a:	2b00      	cmp	r3, #0
 8107f6c:	f040 8576 	bne.w	8108a5c <_strtod_l+0xbb4>
 8107f70:	4652      	mov	r2, sl
 8107f72:	465b      	mov	r3, fp
 8107f74:	e7e3      	b.n	8107f3e <_strtod_l+0x96>
 8107f76:	2200      	movs	r2, #0
 8107f78:	e7ee      	b.n	8107f58 <_strtod_l+0xb0>
 8107f7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8107f7c:	b13a      	cbz	r2, 8107f8e <_strtod_l+0xe6>
 8107f7e:	2135      	movs	r1, #53	; 0x35
 8107f80:	a820      	add	r0, sp, #128	; 0x80
 8107f82:	f002 fe16 	bl	810abb2 <__copybits>
 8107f86:	991e      	ldr	r1, [sp, #120]	; 0x78
 8107f88:	4620      	mov	r0, r4
 8107f8a:	f002 f9db 	bl	810a344 <_Bfree>
 8107f8e:	3f01      	subs	r7, #1
 8107f90:	2f05      	cmp	r7, #5
 8107f92:	d807      	bhi.n	8107fa4 <_strtod_l+0xfc>
 8107f94:	e8df f007 	tbb	[pc, r7]
 8107f98:	1d180b0e 	.word	0x1d180b0e
 8107f9c:	030e      	.short	0x030e
 8107f9e:	f04f 0b00 	mov.w	fp, #0
 8107fa2:	46da      	mov	sl, fp
 8107fa4:	0728      	lsls	r0, r5, #28
 8107fa6:	d5c1      	bpl.n	8107f2c <_strtod_l+0x84>
 8107fa8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8107fac:	e7be      	b.n	8107f2c <_strtod_l+0x84>
 8107fae:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8107fb2:	e7f7      	b.n	8107fa4 <_strtod_l+0xfc>
 8107fb4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8107fb8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8107fba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8107fbe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8107fc2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8107fc6:	e7ed      	b.n	8107fa4 <_strtod_l+0xfc>
 8107fc8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8108150 <_strtod_l+0x2a8>
 8107fcc:	f04f 0a00 	mov.w	sl, #0
 8107fd0:	e7e8      	b.n	8107fa4 <_strtod_l+0xfc>
 8107fd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8107fd6:	f04f 3aff 	mov.w	sl, #4294967295
 8107fda:	e7e3      	b.n	8107fa4 <_strtod_l+0xfc>
 8107fdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8107fde:	1c5a      	adds	r2, r3, #1
 8107fe0:	921d      	str	r2, [sp, #116]	; 0x74
 8107fe2:	785b      	ldrb	r3, [r3, #1]
 8107fe4:	2b30      	cmp	r3, #48	; 0x30
 8107fe6:	d0f9      	beq.n	8107fdc <_strtod_l+0x134>
 8107fe8:	2b00      	cmp	r3, #0
 8107fea:	d09f      	beq.n	8107f2c <_strtod_l+0x84>
 8107fec:	2301      	movs	r3, #1
 8107fee:	f04f 0900 	mov.w	r9, #0
 8107ff2:	9304      	str	r3, [sp, #16]
 8107ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8107ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8107ff8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8107ffc:	464f      	mov	r7, r9
 8107ffe:	220a      	movs	r2, #10
 8108000:	981d      	ldr	r0, [sp, #116]	; 0x74
 8108002:	7806      	ldrb	r6, [r0, #0]
 8108004:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8108008:	b2d9      	uxtb	r1, r3
 810800a:	2909      	cmp	r1, #9
 810800c:	d92a      	bls.n	8108064 <_strtod_l+0x1bc>
 810800e:	9907      	ldr	r1, [sp, #28]
 8108010:	462a      	mov	r2, r5
 8108012:	f003 f8f1 	bl	810b1f8 <strncmp>
 8108016:	b398      	cbz	r0, 8108080 <_strtod_l+0x1d8>
 8108018:	2000      	movs	r0, #0
 810801a:	4633      	mov	r3, r6
 810801c:	463d      	mov	r5, r7
 810801e:	9007      	str	r0, [sp, #28]
 8108020:	4602      	mov	r2, r0
 8108022:	2b65      	cmp	r3, #101	; 0x65
 8108024:	d001      	beq.n	810802a <_strtod_l+0x182>
 8108026:	2b45      	cmp	r3, #69	; 0x45
 8108028:	d118      	bne.n	810805c <_strtod_l+0x1b4>
 810802a:	b91d      	cbnz	r5, 8108034 <_strtod_l+0x18c>
 810802c:	9b04      	ldr	r3, [sp, #16]
 810802e:	4303      	orrs	r3, r0
 8108030:	d098      	beq.n	8107f64 <_strtod_l+0xbc>
 8108032:	2500      	movs	r5, #0
 8108034:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8108038:	f108 0301 	add.w	r3, r8, #1
 810803c:	931d      	str	r3, [sp, #116]	; 0x74
 810803e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8108042:	2b2b      	cmp	r3, #43	; 0x2b
 8108044:	d075      	beq.n	8108132 <_strtod_l+0x28a>
 8108046:	2b2d      	cmp	r3, #45	; 0x2d
 8108048:	d07b      	beq.n	8108142 <_strtod_l+0x29a>
 810804a:	f04f 0c00 	mov.w	ip, #0
 810804e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8108052:	2909      	cmp	r1, #9
 8108054:	f240 8082 	bls.w	810815c <_strtod_l+0x2b4>
 8108058:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810805c:	2600      	movs	r6, #0
 810805e:	e09d      	b.n	810819c <_strtod_l+0x2f4>
 8108060:	2300      	movs	r3, #0
 8108062:	e7c4      	b.n	8107fee <_strtod_l+0x146>
 8108064:	2f08      	cmp	r7, #8
 8108066:	bfd8      	it	le
 8108068:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810806a:	f100 0001 	add.w	r0, r0, #1
 810806e:	bfda      	itte	le
 8108070:	fb02 3301 	mlale	r3, r2, r1, r3
 8108074:	9309      	strle	r3, [sp, #36]	; 0x24
 8108076:	fb02 3909 	mlagt	r9, r2, r9, r3
 810807a:	3701      	adds	r7, #1
 810807c:	901d      	str	r0, [sp, #116]	; 0x74
 810807e:	e7bf      	b.n	8108000 <_strtod_l+0x158>
 8108080:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108082:	195a      	adds	r2, r3, r5
 8108084:	921d      	str	r2, [sp, #116]	; 0x74
 8108086:	5d5b      	ldrb	r3, [r3, r5]
 8108088:	2f00      	cmp	r7, #0
 810808a:	d037      	beq.n	81080fc <_strtod_l+0x254>
 810808c:	9007      	str	r0, [sp, #28]
 810808e:	463d      	mov	r5, r7
 8108090:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8108094:	2a09      	cmp	r2, #9
 8108096:	d912      	bls.n	81080be <_strtod_l+0x216>
 8108098:	2201      	movs	r2, #1
 810809a:	e7c2      	b.n	8108022 <_strtod_l+0x17a>
 810809c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810809e:	1c5a      	adds	r2, r3, #1
 81080a0:	921d      	str	r2, [sp, #116]	; 0x74
 81080a2:	785b      	ldrb	r3, [r3, #1]
 81080a4:	3001      	adds	r0, #1
 81080a6:	2b30      	cmp	r3, #48	; 0x30
 81080a8:	d0f8      	beq.n	810809c <_strtod_l+0x1f4>
 81080aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 81080ae:	2a08      	cmp	r2, #8
 81080b0:	f200 84db 	bhi.w	8108a6a <_strtod_l+0xbc2>
 81080b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 81080b6:	9007      	str	r0, [sp, #28]
 81080b8:	2000      	movs	r0, #0
 81080ba:	920a      	str	r2, [sp, #40]	; 0x28
 81080bc:	4605      	mov	r5, r0
 81080be:	3b30      	subs	r3, #48	; 0x30
 81080c0:	f100 0201 	add.w	r2, r0, #1
 81080c4:	d014      	beq.n	81080f0 <_strtod_l+0x248>
 81080c6:	9907      	ldr	r1, [sp, #28]
 81080c8:	4411      	add	r1, r2
 81080ca:	9107      	str	r1, [sp, #28]
 81080cc:	462a      	mov	r2, r5
 81080ce:	eb00 0e05 	add.w	lr, r0, r5
 81080d2:	210a      	movs	r1, #10
 81080d4:	4572      	cmp	r2, lr
 81080d6:	d113      	bne.n	8108100 <_strtod_l+0x258>
 81080d8:	182a      	adds	r2, r5, r0
 81080da:	2a08      	cmp	r2, #8
 81080dc:	f105 0501 	add.w	r5, r5, #1
 81080e0:	4405      	add	r5, r0
 81080e2:	dc1c      	bgt.n	810811e <_strtod_l+0x276>
 81080e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 81080e6:	220a      	movs	r2, #10
 81080e8:	fb02 3301 	mla	r3, r2, r1, r3
 81080ec:	9309      	str	r3, [sp, #36]	; 0x24
 81080ee:	2200      	movs	r2, #0
 81080f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81080f2:	1c59      	adds	r1, r3, #1
 81080f4:	911d      	str	r1, [sp, #116]	; 0x74
 81080f6:	785b      	ldrb	r3, [r3, #1]
 81080f8:	4610      	mov	r0, r2
 81080fa:	e7c9      	b.n	8108090 <_strtod_l+0x1e8>
 81080fc:	4638      	mov	r0, r7
 81080fe:	e7d2      	b.n	81080a6 <_strtod_l+0x1fe>
 8108100:	2a08      	cmp	r2, #8
 8108102:	dc04      	bgt.n	810810e <_strtod_l+0x266>
 8108104:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8108106:	434e      	muls	r6, r1
 8108108:	9609      	str	r6, [sp, #36]	; 0x24
 810810a:	3201      	adds	r2, #1
 810810c:	e7e2      	b.n	81080d4 <_strtod_l+0x22c>
 810810e:	f102 0c01 	add.w	ip, r2, #1
 8108112:	f1bc 0f10 	cmp.w	ip, #16
 8108116:	bfd8      	it	le
 8108118:	fb01 f909 	mulle.w	r9, r1, r9
 810811c:	e7f5      	b.n	810810a <_strtod_l+0x262>
 810811e:	2d10      	cmp	r5, #16
 8108120:	bfdc      	itt	le
 8108122:	220a      	movle	r2, #10
 8108124:	fb02 3909 	mlale	r9, r2, r9, r3
 8108128:	e7e1      	b.n	81080ee <_strtod_l+0x246>
 810812a:	2300      	movs	r3, #0
 810812c:	9307      	str	r3, [sp, #28]
 810812e:	2201      	movs	r2, #1
 8108130:	e77c      	b.n	810802c <_strtod_l+0x184>
 8108132:	f04f 0c00 	mov.w	ip, #0
 8108136:	f108 0302 	add.w	r3, r8, #2
 810813a:	931d      	str	r3, [sp, #116]	; 0x74
 810813c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8108140:	e785      	b.n	810804e <_strtod_l+0x1a6>
 8108142:	f04f 0c01 	mov.w	ip, #1
 8108146:	e7f6      	b.n	8108136 <_strtod_l+0x28e>
 8108148:	0810b788 	.word	0x0810b788
 810814c:	0810b538 	.word	0x0810b538
 8108150:	7ff00000 	.word	0x7ff00000
 8108154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108156:	1c59      	adds	r1, r3, #1
 8108158:	911d      	str	r1, [sp, #116]	; 0x74
 810815a:	785b      	ldrb	r3, [r3, #1]
 810815c:	2b30      	cmp	r3, #48	; 0x30
 810815e:	d0f9      	beq.n	8108154 <_strtod_l+0x2ac>
 8108160:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8108164:	2908      	cmp	r1, #8
 8108166:	f63f af79 	bhi.w	810805c <_strtod_l+0x1b4>
 810816a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 810816e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108170:	9308      	str	r3, [sp, #32]
 8108172:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108174:	1c59      	adds	r1, r3, #1
 8108176:	911d      	str	r1, [sp, #116]	; 0x74
 8108178:	785b      	ldrb	r3, [r3, #1]
 810817a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 810817e:	2e09      	cmp	r6, #9
 8108180:	d937      	bls.n	81081f2 <_strtod_l+0x34a>
 8108182:	9e08      	ldr	r6, [sp, #32]
 8108184:	1b89      	subs	r1, r1, r6
 8108186:	2908      	cmp	r1, #8
 8108188:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810818c:	dc02      	bgt.n	8108194 <_strtod_l+0x2ec>
 810818e:	4576      	cmp	r6, lr
 8108190:	bfa8      	it	ge
 8108192:	4676      	movge	r6, lr
 8108194:	f1bc 0f00 	cmp.w	ip, #0
 8108198:	d000      	beq.n	810819c <_strtod_l+0x2f4>
 810819a:	4276      	negs	r6, r6
 810819c:	2d00      	cmp	r5, #0
 810819e:	d14f      	bne.n	8108240 <_strtod_l+0x398>
 81081a0:	9904      	ldr	r1, [sp, #16]
 81081a2:	4301      	orrs	r1, r0
 81081a4:	f47f aec2 	bne.w	8107f2c <_strtod_l+0x84>
 81081a8:	2a00      	cmp	r2, #0
 81081aa:	f47f aedb 	bne.w	8107f64 <_strtod_l+0xbc>
 81081ae:	2b69      	cmp	r3, #105	; 0x69
 81081b0:	d027      	beq.n	8108202 <_strtod_l+0x35a>
 81081b2:	dc24      	bgt.n	81081fe <_strtod_l+0x356>
 81081b4:	2b49      	cmp	r3, #73	; 0x49
 81081b6:	d024      	beq.n	8108202 <_strtod_l+0x35a>
 81081b8:	2b4e      	cmp	r3, #78	; 0x4e
 81081ba:	f47f aed3 	bne.w	8107f64 <_strtod_l+0xbc>
 81081be:	499e      	ldr	r1, [pc, #632]	; (8108438 <_strtod_l+0x590>)
 81081c0:	a81d      	add	r0, sp, #116	; 0x74
 81081c2:	f001 ff21 	bl	810a008 <__match>
 81081c6:	2800      	cmp	r0, #0
 81081c8:	f43f aecc 	beq.w	8107f64 <_strtod_l+0xbc>
 81081cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81081ce:	781b      	ldrb	r3, [r3, #0]
 81081d0:	2b28      	cmp	r3, #40	; 0x28
 81081d2:	d12d      	bne.n	8108230 <_strtod_l+0x388>
 81081d4:	4999      	ldr	r1, [pc, #612]	; (810843c <_strtod_l+0x594>)
 81081d6:	aa20      	add	r2, sp, #128	; 0x80
 81081d8:	a81d      	add	r0, sp, #116	; 0x74
 81081da:	f001 ff29 	bl	810a030 <__hexnan>
 81081de:	2805      	cmp	r0, #5
 81081e0:	d126      	bne.n	8108230 <_strtod_l+0x388>
 81081e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81081e4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 81081e8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 81081ec:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 81081f0:	e69c      	b.n	8107f2c <_strtod_l+0x84>
 81081f2:	210a      	movs	r1, #10
 81081f4:	fb01 3e0e 	mla	lr, r1, lr, r3
 81081f8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 81081fc:	e7b9      	b.n	8108172 <_strtod_l+0x2ca>
 81081fe:	2b6e      	cmp	r3, #110	; 0x6e
 8108200:	e7db      	b.n	81081ba <_strtod_l+0x312>
 8108202:	498f      	ldr	r1, [pc, #572]	; (8108440 <_strtod_l+0x598>)
 8108204:	a81d      	add	r0, sp, #116	; 0x74
 8108206:	f001 feff 	bl	810a008 <__match>
 810820a:	2800      	cmp	r0, #0
 810820c:	f43f aeaa 	beq.w	8107f64 <_strtod_l+0xbc>
 8108210:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108212:	498c      	ldr	r1, [pc, #560]	; (8108444 <_strtod_l+0x59c>)
 8108214:	3b01      	subs	r3, #1
 8108216:	a81d      	add	r0, sp, #116	; 0x74
 8108218:	931d      	str	r3, [sp, #116]	; 0x74
 810821a:	f001 fef5 	bl	810a008 <__match>
 810821e:	b910      	cbnz	r0, 8108226 <_strtod_l+0x37e>
 8108220:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108222:	3301      	adds	r3, #1
 8108224:	931d      	str	r3, [sp, #116]	; 0x74
 8108226:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8108454 <_strtod_l+0x5ac>
 810822a:	f04f 0a00 	mov.w	sl, #0
 810822e:	e67d      	b.n	8107f2c <_strtod_l+0x84>
 8108230:	4885      	ldr	r0, [pc, #532]	; (8108448 <_strtod_l+0x5a0>)
 8108232:	f002 ffd9 	bl	810b1e8 <nan>
 8108236:	ed8d 0b04 	vstr	d0, [sp, #16]
 810823a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 810823e:	e675      	b.n	8107f2c <_strtod_l+0x84>
 8108240:	9b07      	ldr	r3, [sp, #28]
 8108242:	9809      	ldr	r0, [sp, #36]	; 0x24
 8108244:	1af3      	subs	r3, r6, r3
 8108246:	2f00      	cmp	r7, #0
 8108248:	bf08      	it	eq
 810824a:	462f      	moveq	r7, r5
 810824c:	2d10      	cmp	r5, #16
 810824e:	9308      	str	r3, [sp, #32]
 8108250:	46a8      	mov	r8, r5
 8108252:	bfa8      	it	ge
 8108254:	f04f 0810 	movge.w	r8, #16
 8108258:	f7f8 f9dc 	bl	8100614 <__aeabi_ui2d>
 810825c:	2d09      	cmp	r5, #9
 810825e:	4682      	mov	sl, r0
 8108260:	468b      	mov	fp, r1
 8108262:	dd13      	ble.n	810828c <_strtod_l+0x3e4>
 8108264:	4b79      	ldr	r3, [pc, #484]	; (810844c <_strtod_l+0x5a4>)
 8108266:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810826a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810826e:	f7f8 fa4b 	bl	8100708 <__aeabi_dmul>
 8108272:	4682      	mov	sl, r0
 8108274:	4648      	mov	r0, r9
 8108276:	468b      	mov	fp, r1
 8108278:	f7f8 f9cc 	bl	8100614 <__aeabi_ui2d>
 810827c:	4602      	mov	r2, r0
 810827e:	460b      	mov	r3, r1
 8108280:	4650      	mov	r0, sl
 8108282:	4659      	mov	r1, fp
 8108284:	f7f8 f88a 	bl	810039c <__adddf3>
 8108288:	4682      	mov	sl, r0
 810828a:	468b      	mov	fp, r1
 810828c:	2d0f      	cmp	r5, #15
 810828e:	dc38      	bgt.n	8108302 <_strtod_l+0x45a>
 8108290:	9b08      	ldr	r3, [sp, #32]
 8108292:	2b00      	cmp	r3, #0
 8108294:	f43f ae4a 	beq.w	8107f2c <_strtod_l+0x84>
 8108298:	dd24      	ble.n	81082e4 <_strtod_l+0x43c>
 810829a:	2b16      	cmp	r3, #22
 810829c:	dc0b      	bgt.n	81082b6 <_strtod_l+0x40e>
 810829e:	4d6b      	ldr	r5, [pc, #428]	; (810844c <_strtod_l+0x5a4>)
 81082a0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 81082a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 81082a8:	4652      	mov	r2, sl
 81082aa:	465b      	mov	r3, fp
 81082ac:	f7f8 fa2c 	bl	8100708 <__aeabi_dmul>
 81082b0:	4682      	mov	sl, r0
 81082b2:	468b      	mov	fp, r1
 81082b4:	e63a      	b.n	8107f2c <_strtod_l+0x84>
 81082b6:	9a08      	ldr	r2, [sp, #32]
 81082b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 81082bc:	4293      	cmp	r3, r2
 81082be:	db20      	blt.n	8108302 <_strtod_l+0x45a>
 81082c0:	4c62      	ldr	r4, [pc, #392]	; (810844c <_strtod_l+0x5a4>)
 81082c2:	f1c5 050f 	rsb	r5, r5, #15
 81082c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 81082ca:	4652      	mov	r2, sl
 81082cc:	465b      	mov	r3, fp
 81082ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 81082d2:	f7f8 fa19 	bl	8100708 <__aeabi_dmul>
 81082d6:	9b08      	ldr	r3, [sp, #32]
 81082d8:	1b5d      	subs	r5, r3, r5
 81082da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81082de:	e9d4 2300 	ldrd	r2, r3, [r4]
 81082e2:	e7e3      	b.n	81082ac <_strtod_l+0x404>
 81082e4:	9b08      	ldr	r3, [sp, #32]
 81082e6:	3316      	adds	r3, #22
 81082e8:	db0b      	blt.n	8108302 <_strtod_l+0x45a>
 81082ea:	9b07      	ldr	r3, [sp, #28]
 81082ec:	4a57      	ldr	r2, [pc, #348]	; (810844c <_strtod_l+0x5a4>)
 81082ee:	1b9e      	subs	r6, r3, r6
 81082f0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 81082f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 81082f8:	4650      	mov	r0, sl
 81082fa:	4659      	mov	r1, fp
 81082fc:	f7f8 fb2e 	bl	810095c <__aeabi_ddiv>
 8108300:	e7d6      	b.n	81082b0 <_strtod_l+0x408>
 8108302:	9b08      	ldr	r3, [sp, #32]
 8108304:	eba5 0808 	sub.w	r8, r5, r8
 8108308:	4498      	add	r8, r3
 810830a:	f1b8 0f00 	cmp.w	r8, #0
 810830e:	dd71      	ble.n	81083f4 <_strtod_l+0x54c>
 8108310:	f018 030f 	ands.w	r3, r8, #15
 8108314:	d00a      	beq.n	810832c <_strtod_l+0x484>
 8108316:	494d      	ldr	r1, [pc, #308]	; (810844c <_strtod_l+0x5a4>)
 8108318:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810831c:	4652      	mov	r2, sl
 810831e:	465b      	mov	r3, fp
 8108320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108324:	f7f8 f9f0 	bl	8100708 <__aeabi_dmul>
 8108328:	4682      	mov	sl, r0
 810832a:	468b      	mov	fp, r1
 810832c:	f038 080f 	bics.w	r8, r8, #15
 8108330:	d04d      	beq.n	81083ce <_strtod_l+0x526>
 8108332:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8108336:	dd22      	ble.n	810837e <_strtod_l+0x4d6>
 8108338:	2500      	movs	r5, #0
 810833a:	462e      	mov	r6, r5
 810833c:	9509      	str	r5, [sp, #36]	; 0x24
 810833e:	9507      	str	r5, [sp, #28]
 8108340:	2322      	movs	r3, #34	; 0x22
 8108342:	f8df b110 	ldr.w	fp, [pc, #272]	; 8108454 <_strtod_l+0x5ac>
 8108346:	6023      	str	r3, [r4, #0]
 8108348:	f04f 0a00 	mov.w	sl, #0
 810834c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810834e:	2b00      	cmp	r3, #0
 8108350:	f43f adec 	beq.w	8107f2c <_strtod_l+0x84>
 8108354:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108356:	4620      	mov	r0, r4
 8108358:	f001 fff4 	bl	810a344 <_Bfree>
 810835c:	9907      	ldr	r1, [sp, #28]
 810835e:	4620      	mov	r0, r4
 8108360:	f001 fff0 	bl	810a344 <_Bfree>
 8108364:	4631      	mov	r1, r6
 8108366:	4620      	mov	r0, r4
 8108368:	f001 ffec 	bl	810a344 <_Bfree>
 810836c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810836e:	4620      	mov	r0, r4
 8108370:	f001 ffe8 	bl	810a344 <_Bfree>
 8108374:	4629      	mov	r1, r5
 8108376:	4620      	mov	r0, r4
 8108378:	f001 ffe4 	bl	810a344 <_Bfree>
 810837c:	e5d6      	b.n	8107f2c <_strtod_l+0x84>
 810837e:	2300      	movs	r3, #0
 8108380:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108384:	4650      	mov	r0, sl
 8108386:	4659      	mov	r1, fp
 8108388:	4699      	mov	r9, r3
 810838a:	f1b8 0f01 	cmp.w	r8, #1
 810838e:	dc21      	bgt.n	81083d4 <_strtod_l+0x52c>
 8108390:	b10b      	cbz	r3, 8108396 <_strtod_l+0x4ee>
 8108392:	4682      	mov	sl, r0
 8108394:	468b      	mov	fp, r1
 8108396:	4b2e      	ldr	r3, [pc, #184]	; (8108450 <_strtod_l+0x5a8>)
 8108398:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 810839c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 81083a0:	4652      	mov	r2, sl
 81083a2:	465b      	mov	r3, fp
 81083a4:	e9d9 0100 	ldrd	r0, r1, [r9]
 81083a8:	f7f8 f9ae 	bl	8100708 <__aeabi_dmul>
 81083ac:	4b29      	ldr	r3, [pc, #164]	; (8108454 <_strtod_l+0x5ac>)
 81083ae:	460a      	mov	r2, r1
 81083b0:	400b      	ands	r3, r1
 81083b2:	4929      	ldr	r1, [pc, #164]	; (8108458 <_strtod_l+0x5b0>)
 81083b4:	428b      	cmp	r3, r1
 81083b6:	4682      	mov	sl, r0
 81083b8:	d8be      	bhi.n	8108338 <_strtod_l+0x490>
 81083ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 81083be:	428b      	cmp	r3, r1
 81083c0:	bf86      	itte	hi
 81083c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 810845c <_strtod_l+0x5b4>
 81083c6:	f04f 3aff 	movhi.w	sl, #4294967295
 81083ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 81083ce:	2300      	movs	r3, #0
 81083d0:	9304      	str	r3, [sp, #16]
 81083d2:	e081      	b.n	81084d8 <_strtod_l+0x630>
 81083d4:	f018 0f01 	tst.w	r8, #1
 81083d8:	d007      	beq.n	81083ea <_strtod_l+0x542>
 81083da:	4b1d      	ldr	r3, [pc, #116]	; (8108450 <_strtod_l+0x5a8>)
 81083dc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 81083e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81083e4:	f7f8 f990 	bl	8100708 <__aeabi_dmul>
 81083e8:	2301      	movs	r3, #1
 81083ea:	f109 0901 	add.w	r9, r9, #1
 81083ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 81083f2:	e7ca      	b.n	810838a <_strtod_l+0x4e2>
 81083f4:	d0eb      	beq.n	81083ce <_strtod_l+0x526>
 81083f6:	f1c8 0800 	rsb	r8, r8, #0
 81083fa:	f018 020f 	ands.w	r2, r8, #15
 81083fe:	d00a      	beq.n	8108416 <_strtod_l+0x56e>
 8108400:	4b12      	ldr	r3, [pc, #72]	; (810844c <_strtod_l+0x5a4>)
 8108402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108406:	4650      	mov	r0, sl
 8108408:	4659      	mov	r1, fp
 810840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810840e:	f7f8 faa5 	bl	810095c <__aeabi_ddiv>
 8108412:	4682      	mov	sl, r0
 8108414:	468b      	mov	fp, r1
 8108416:	ea5f 1828 	movs.w	r8, r8, asr #4
 810841a:	d0d8      	beq.n	81083ce <_strtod_l+0x526>
 810841c:	f1b8 0f1f 	cmp.w	r8, #31
 8108420:	dd1e      	ble.n	8108460 <_strtod_l+0x5b8>
 8108422:	2500      	movs	r5, #0
 8108424:	462e      	mov	r6, r5
 8108426:	9509      	str	r5, [sp, #36]	; 0x24
 8108428:	9507      	str	r5, [sp, #28]
 810842a:	2322      	movs	r3, #34	; 0x22
 810842c:	f04f 0a00 	mov.w	sl, #0
 8108430:	f04f 0b00 	mov.w	fp, #0
 8108434:	6023      	str	r3, [r4, #0]
 8108436:	e789      	b.n	810834c <_strtod_l+0x4a4>
 8108438:	0810b509 	.word	0x0810b509
 810843c:	0810b54c 	.word	0x0810b54c
 8108440:	0810b501 	.word	0x0810b501
 8108444:	0810b68c 	.word	0x0810b68c
 8108448:	0810b948 	.word	0x0810b948
 810844c:	0810b828 	.word	0x0810b828
 8108450:	0810b800 	.word	0x0810b800
 8108454:	7ff00000 	.word	0x7ff00000
 8108458:	7ca00000 	.word	0x7ca00000
 810845c:	7fefffff 	.word	0x7fefffff
 8108460:	f018 0310 	ands.w	r3, r8, #16
 8108464:	bf18      	it	ne
 8108466:	236a      	movne	r3, #106	; 0x6a
 8108468:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8108820 <_strtod_l+0x978>
 810846c:	9304      	str	r3, [sp, #16]
 810846e:	4650      	mov	r0, sl
 8108470:	4659      	mov	r1, fp
 8108472:	2300      	movs	r3, #0
 8108474:	f018 0f01 	tst.w	r8, #1
 8108478:	d004      	beq.n	8108484 <_strtod_l+0x5dc>
 810847a:	e9d9 2300 	ldrd	r2, r3, [r9]
 810847e:	f7f8 f943 	bl	8100708 <__aeabi_dmul>
 8108482:	2301      	movs	r3, #1
 8108484:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108488:	f109 0908 	add.w	r9, r9, #8
 810848c:	d1f2      	bne.n	8108474 <_strtod_l+0x5cc>
 810848e:	b10b      	cbz	r3, 8108494 <_strtod_l+0x5ec>
 8108490:	4682      	mov	sl, r0
 8108492:	468b      	mov	fp, r1
 8108494:	9b04      	ldr	r3, [sp, #16]
 8108496:	b1bb      	cbz	r3, 81084c8 <_strtod_l+0x620>
 8108498:	f3cb 530a 	ubfx	r3, fp, #20, #11
 810849c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81084a0:	2b00      	cmp	r3, #0
 81084a2:	4659      	mov	r1, fp
 81084a4:	dd10      	ble.n	81084c8 <_strtod_l+0x620>
 81084a6:	2b1f      	cmp	r3, #31
 81084a8:	f340 8128 	ble.w	81086fc <_strtod_l+0x854>
 81084ac:	2b34      	cmp	r3, #52	; 0x34
 81084ae:	bfde      	ittt	le
 81084b0:	3b20      	suble	r3, #32
 81084b2:	f04f 32ff 	movle.w	r2, #4294967295
 81084b6:	fa02 f303 	lslle.w	r3, r2, r3
 81084ba:	f04f 0a00 	mov.w	sl, #0
 81084be:	bfcc      	ite	gt
 81084c0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 81084c4:	ea03 0b01 	andle.w	fp, r3, r1
 81084c8:	2200      	movs	r2, #0
 81084ca:	2300      	movs	r3, #0
 81084cc:	4650      	mov	r0, sl
 81084ce:	4659      	mov	r1, fp
 81084d0:	f7f8 fb82 	bl	8100bd8 <__aeabi_dcmpeq>
 81084d4:	2800      	cmp	r0, #0
 81084d6:	d1a4      	bne.n	8108422 <_strtod_l+0x57a>
 81084d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81084da:	9300      	str	r3, [sp, #0]
 81084dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 81084de:	462b      	mov	r3, r5
 81084e0:	463a      	mov	r2, r7
 81084e2:	4620      	mov	r0, r4
 81084e4:	f001 ff9a 	bl	810a41c <__s2b>
 81084e8:	9009      	str	r0, [sp, #36]	; 0x24
 81084ea:	2800      	cmp	r0, #0
 81084ec:	f43f af24 	beq.w	8108338 <_strtod_l+0x490>
 81084f0:	9b07      	ldr	r3, [sp, #28]
 81084f2:	1b9e      	subs	r6, r3, r6
 81084f4:	9b08      	ldr	r3, [sp, #32]
 81084f6:	2b00      	cmp	r3, #0
 81084f8:	bfb4      	ite	lt
 81084fa:	4633      	movlt	r3, r6
 81084fc:	2300      	movge	r3, #0
 81084fe:	9310      	str	r3, [sp, #64]	; 0x40
 8108500:	9b08      	ldr	r3, [sp, #32]
 8108502:	2500      	movs	r5, #0
 8108504:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8108508:	9318      	str	r3, [sp, #96]	; 0x60
 810850a:	462e      	mov	r6, r5
 810850c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810850e:	4620      	mov	r0, r4
 8108510:	6859      	ldr	r1, [r3, #4]
 8108512:	f001 fed7 	bl	810a2c4 <_Balloc>
 8108516:	9007      	str	r0, [sp, #28]
 8108518:	2800      	cmp	r0, #0
 810851a:	f43f af11 	beq.w	8108340 <_strtod_l+0x498>
 810851e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108520:	691a      	ldr	r2, [r3, #16]
 8108522:	3202      	adds	r2, #2
 8108524:	f103 010c 	add.w	r1, r3, #12
 8108528:	0092      	lsls	r2, r2, #2
 810852a:	300c      	adds	r0, #12
 810852c:	f001 feb0 	bl	810a290 <memcpy>
 8108530:	ec4b ab10 	vmov	d0, sl, fp
 8108534:	aa20      	add	r2, sp, #128	; 0x80
 8108536:	a91f      	add	r1, sp, #124	; 0x7c
 8108538:	4620      	mov	r0, r4
 810853a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 810853e:	f002 faa9 	bl	810aa94 <__d2b>
 8108542:	901e      	str	r0, [sp, #120]	; 0x78
 8108544:	2800      	cmp	r0, #0
 8108546:	f43f aefb 	beq.w	8108340 <_strtod_l+0x498>
 810854a:	2101      	movs	r1, #1
 810854c:	4620      	mov	r0, r4
 810854e:	f001 ffff 	bl	810a550 <__i2b>
 8108552:	4606      	mov	r6, r0
 8108554:	2800      	cmp	r0, #0
 8108556:	f43f aef3 	beq.w	8108340 <_strtod_l+0x498>
 810855a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 810855c:	9904      	ldr	r1, [sp, #16]
 810855e:	2b00      	cmp	r3, #0
 8108560:	bfab      	itete	ge
 8108562:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8108564:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8108566:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8108568:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 810856c:	bfac      	ite	ge
 810856e:	eb03 0902 	addge.w	r9, r3, r2
 8108572:	1ad7      	sublt	r7, r2, r3
 8108574:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8108576:	eba3 0801 	sub.w	r8, r3, r1
 810857a:	4490      	add	r8, r2
 810857c:	4ba3      	ldr	r3, [pc, #652]	; (810880c <_strtod_l+0x964>)
 810857e:	f108 38ff 	add.w	r8, r8, #4294967295
 8108582:	4598      	cmp	r8, r3
 8108584:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8108588:	f280 80cc 	bge.w	8108724 <_strtod_l+0x87c>
 810858c:	eba3 0308 	sub.w	r3, r3, r8
 8108590:	2b1f      	cmp	r3, #31
 8108592:	eba2 0203 	sub.w	r2, r2, r3
 8108596:	f04f 0101 	mov.w	r1, #1
 810859a:	f300 80b6 	bgt.w	810870a <_strtod_l+0x862>
 810859e:	fa01 f303 	lsl.w	r3, r1, r3
 81085a2:	9311      	str	r3, [sp, #68]	; 0x44
 81085a4:	2300      	movs	r3, #0
 81085a6:	930c      	str	r3, [sp, #48]	; 0x30
 81085a8:	eb09 0802 	add.w	r8, r9, r2
 81085ac:	9b04      	ldr	r3, [sp, #16]
 81085ae:	45c1      	cmp	r9, r8
 81085b0:	4417      	add	r7, r2
 81085b2:	441f      	add	r7, r3
 81085b4:	464b      	mov	r3, r9
 81085b6:	bfa8      	it	ge
 81085b8:	4643      	movge	r3, r8
 81085ba:	42bb      	cmp	r3, r7
 81085bc:	bfa8      	it	ge
 81085be:	463b      	movge	r3, r7
 81085c0:	2b00      	cmp	r3, #0
 81085c2:	bfc2      	ittt	gt
 81085c4:	eba8 0803 	subgt.w	r8, r8, r3
 81085c8:	1aff      	subgt	r7, r7, r3
 81085ca:	eba9 0903 	subgt.w	r9, r9, r3
 81085ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 81085d0:	2b00      	cmp	r3, #0
 81085d2:	dd17      	ble.n	8108604 <_strtod_l+0x75c>
 81085d4:	4631      	mov	r1, r6
 81085d6:	461a      	mov	r2, r3
 81085d8:	4620      	mov	r0, r4
 81085da:	f002 f875 	bl	810a6c8 <__pow5mult>
 81085de:	4606      	mov	r6, r0
 81085e0:	2800      	cmp	r0, #0
 81085e2:	f43f aead 	beq.w	8108340 <_strtod_l+0x498>
 81085e6:	4601      	mov	r1, r0
 81085e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 81085ea:	4620      	mov	r0, r4
 81085ec:	f001 ffc6 	bl	810a57c <__multiply>
 81085f0:	900f      	str	r0, [sp, #60]	; 0x3c
 81085f2:	2800      	cmp	r0, #0
 81085f4:	f43f aea4 	beq.w	8108340 <_strtod_l+0x498>
 81085f8:	991e      	ldr	r1, [sp, #120]	; 0x78
 81085fa:	4620      	mov	r0, r4
 81085fc:	f001 fea2 	bl	810a344 <_Bfree>
 8108600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108602:	931e      	str	r3, [sp, #120]	; 0x78
 8108604:	f1b8 0f00 	cmp.w	r8, #0
 8108608:	f300 8091 	bgt.w	810872e <_strtod_l+0x886>
 810860c:	9b08      	ldr	r3, [sp, #32]
 810860e:	2b00      	cmp	r3, #0
 8108610:	dd08      	ble.n	8108624 <_strtod_l+0x77c>
 8108612:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108614:	9907      	ldr	r1, [sp, #28]
 8108616:	4620      	mov	r0, r4
 8108618:	f002 f856 	bl	810a6c8 <__pow5mult>
 810861c:	9007      	str	r0, [sp, #28]
 810861e:	2800      	cmp	r0, #0
 8108620:	f43f ae8e 	beq.w	8108340 <_strtod_l+0x498>
 8108624:	2f00      	cmp	r7, #0
 8108626:	dd08      	ble.n	810863a <_strtod_l+0x792>
 8108628:	9907      	ldr	r1, [sp, #28]
 810862a:	463a      	mov	r2, r7
 810862c:	4620      	mov	r0, r4
 810862e:	f002 f8a5 	bl	810a77c <__lshift>
 8108632:	9007      	str	r0, [sp, #28]
 8108634:	2800      	cmp	r0, #0
 8108636:	f43f ae83 	beq.w	8108340 <_strtod_l+0x498>
 810863a:	f1b9 0f00 	cmp.w	r9, #0
 810863e:	dd08      	ble.n	8108652 <_strtod_l+0x7aa>
 8108640:	4631      	mov	r1, r6
 8108642:	464a      	mov	r2, r9
 8108644:	4620      	mov	r0, r4
 8108646:	f002 f899 	bl	810a77c <__lshift>
 810864a:	4606      	mov	r6, r0
 810864c:	2800      	cmp	r0, #0
 810864e:	f43f ae77 	beq.w	8108340 <_strtod_l+0x498>
 8108652:	9a07      	ldr	r2, [sp, #28]
 8108654:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108656:	4620      	mov	r0, r4
 8108658:	f002 f918 	bl	810a88c <__mdiff>
 810865c:	4605      	mov	r5, r0
 810865e:	2800      	cmp	r0, #0
 8108660:	f43f ae6e 	beq.w	8108340 <_strtod_l+0x498>
 8108664:	68c3      	ldr	r3, [r0, #12]
 8108666:	930f      	str	r3, [sp, #60]	; 0x3c
 8108668:	2300      	movs	r3, #0
 810866a:	60c3      	str	r3, [r0, #12]
 810866c:	4631      	mov	r1, r6
 810866e:	f002 f8f1 	bl	810a854 <__mcmp>
 8108672:	2800      	cmp	r0, #0
 8108674:	da65      	bge.n	8108742 <_strtod_l+0x89a>
 8108676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108678:	ea53 030a 	orrs.w	r3, r3, sl
 810867c:	f040 8087 	bne.w	810878e <_strtod_l+0x8e6>
 8108680:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108684:	2b00      	cmp	r3, #0
 8108686:	f040 8082 	bne.w	810878e <_strtod_l+0x8e6>
 810868a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810868e:	0d1b      	lsrs	r3, r3, #20
 8108690:	051b      	lsls	r3, r3, #20
 8108692:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8108696:	d97a      	bls.n	810878e <_strtod_l+0x8e6>
 8108698:	696b      	ldr	r3, [r5, #20]
 810869a:	b913      	cbnz	r3, 81086a2 <_strtod_l+0x7fa>
 810869c:	692b      	ldr	r3, [r5, #16]
 810869e:	2b01      	cmp	r3, #1
 81086a0:	dd75      	ble.n	810878e <_strtod_l+0x8e6>
 81086a2:	4629      	mov	r1, r5
 81086a4:	2201      	movs	r2, #1
 81086a6:	4620      	mov	r0, r4
 81086a8:	f002 f868 	bl	810a77c <__lshift>
 81086ac:	4631      	mov	r1, r6
 81086ae:	4605      	mov	r5, r0
 81086b0:	f002 f8d0 	bl	810a854 <__mcmp>
 81086b4:	2800      	cmp	r0, #0
 81086b6:	dd6a      	ble.n	810878e <_strtod_l+0x8e6>
 81086b8:	9904      	ldr	r1, [sp, #16]
 81086ba:	4a55      	ldr	r2, [pc, #340]	; (8108810 <_strtod_l+0x968>)
 81086bc:	465b      	mov	r3, fp
 81086be:	2900      	cmp	r1, #0
 81086c0:	f000 8085 	beq.w	81087ce <_strtod_l+0x926>
 81086c4:	ea02 010b 	and.w	r1, r2, fp
 81086c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 81086cc:	dc7f      	bgt.n	81087ce <_strtod_l+0x926>
 81086ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 81086d2:	f77f aeaa 	ble.w	810842a <_strtod_l+0x582>
 81086d6:	4a4f      	ldr	r2, [pc, #316]	; (8108814 <_strtod_l+0x96c>)
 81086d8:	2300      	movs	r3, #0
 81086da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 81086de:	4650      	mov	r0, sl
 81086e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 81086e4:	4659      	mov	r1, fp
 81086e6:	f7f8 f80f 	bl	8100708 <__aeabi_dmul>
 81086ea:	460b      	mov	r3, r1
 81086ec:	4303      	orrs	r3, r0
 81086ee:	bf08      	it	eq
 81086f0:	2322      	moveq	r3, #34	; 0x22
 81086f2:	4682      	mov	sl, r0
 81086f4:	468b      	mov	fp, r1
 81086f6:	bf08      	it	eq
 81086f8:	6023      	streq	r3, [r4, #0]
 81086fa:	e62b      	b.n	8108354 <_strtod_l+0x4ac>
 81086fc:	f04f 32ff 	mov.w	r2, #4294967295
 8108700:	fa02 f303 	lsl.w	r3, r2, r3
 8108704:	ea03 0a0a 	and.w	sl, r3, sl
 8108708:	e6de      	b.n	81084c8 <_strtod_l+0x620>
 810870a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 810870e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8108712:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8108716:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 810871a:	fa01 f308 	lsl.w	r3, r1, r8
 810871e:	930c      	str	r3, [sp, #48]	; 0x30
 8108720:	9111      	str	r1, [sp, #68]	; 0x44
 8108722:	e741      	b.n	81085a8 <_strtod_l+0x700>
 8108724:	2300      	movs	r3, #0
 8108726:	930c      	str	r3, [sp, #48]	; 0x30
 8108728:	2301      	movs	r3, #1
 810872a:	9311      	str	r3, [sp, #68]	; 0x44
 810872c:	e73c      	b.n	81085a8 <_strtod_l+0x700>
 810872e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108730:	4642      	mov	r2, r8
 8108732:	4620      	mov	r0, r4
 8108734:	f002 f822 	bl	810a77c <__lshift>
 8108738:	901e      	str	r0, [sp, #120]	; 0x78
 810873a:	2800      	cmp	r0, #0
 810873c:	f47f af66 	bne.w	810860c <_strtod_l+0x764>
 8108740:	e5fe      	b.n	8108340 <_strtod_l+0x498>
 8108742:	465f      	mov	r7, fp
 8108744:	d16e      	bne.n	8108824 <_strtod_l+0x97c>
 8108746:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108748:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810874c:	b342      	cbz	r2, 81087a0 <_strtod_l+0x8f8>
 810874e:	4a32      	ldr	r2, [pc, #200]	; (8108818 <_strtod_l+0x970>)
 8108750:	4293      	cmp	r3, r2
 8108752:	d128      	bne.n	81087a6 <_strtod_l+0x8fe>
 8108754:	9b04      	ldr	r3, [sp, #16]
 8108756:	4650      	mov	r0, sl
 8108758:	b1eb      	cbz	r3, 8108796 <_strtod_l+0x8ee>
 810875a:	4a2d      	ldr	r2, [pc, #180]	; (8108810 <_strtod_l+0x968>)
 810875c:	403a      	ands	r2, r7
 810875e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8108762:	f04f 31ff 	mov.w	r1, #4294967295
 8108766:	d819      	bhi.n	810879c <_strtod_l+0x8f4>
 8108768:	0d12      	lsrs	r2, r2, #20
 810876a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810876e:	fa01 f303 	lsl.w	r3, r1, r3
 8108772:	4298      	cmp	r0, r3
 8108774:	d117      	bne.n	81087a6 <_strtod_l+0x8fe>
 8108776:	4b29      	ldr	r3, [pc, #164]	; (810881c <_strtod_l+0x974>)
 8108778:	429f      	cmp	r7, r3
 810877a:	d102      	bne.n	8108782 <_strtod_l+0x8da>
 810877c:	3001      	adds	r0, #1
 810877e:	f43f addf 	beq.w	8108340 <_strtod_l+0x498>
 8108782:	4b23      	ldr	r3, [pc, #140]	; (8108810 <_strtod_l+0x968>)
 8108784:	403b      	ands	r3, r7
 8108786:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 810878a:	f04f 0a00 	mov.w	sl, #0
 810878e:	9b04      	ldr	r3, [sp, #16]
 8108790:	2b00      	cmp	r3, #0
 8108792:	d1a0      	bne.n	81086d6 <_strtod_l+0x82e>
 8108794:	e5de      	b.n	8108354 <_strtod_l+0x4ac>
 8108796:	f04f 33ff 	mov.w	r3, #4294967295
 810879a:	e7ea      	b.n	8108772 <_strtod_l+0x8ca>
 810879c:	460b      	mov	r3, r1
 810879e:	e7e8      	b.n	8108772 <_strtod_l+0x8ca>
 81087a0:	ea53 030a 	orrs.w	r3, r3, sl
 81087a4:	d088      	beq.n	81086b8 <_strtod_l+0x810>
 81087a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81087a8:	b1db      	cbz	r3, 81087e2 <_strtod_l+0x93a>
 81087aa:	423b      	tst	r3, r7
 81087ac:	d0ef      	beq.n	810878e <_strtod_l+0x8e6>
 81087ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81087b0:	9a04      	ldr	r2, [sp, #16]
 81087b2:	4650      	mov	r0, sl
 81087b4:	4659      	mov	r1, fp
 81087b6:	b1c3      	cbz	r3, 81087ea <_strtod_l+0x942>
 81087b8:	f7ff fb59 	bl	8107e6e <sulp>
 81087bc:	4602      	mov	r2, r0
 81087be:	460b      	mov	r3, r1
 81087c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81087c4:	f7f7 fdea 	bl	810039c <__adddf3>
 81087c8:	4682      	mov	sl, r0
 81087ca:	468b      	mov	fp, r1
 81087cc:	e7df      	b.n	810878e <_strtod_l+0x8e6>
 81087ce:	4013      	ands	r3, r2
 81087d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 81087d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 81087d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 81087dc:	f04f 3aff 	mov.w	sl, #4294967295
 81087e0:	e7d5      	b.n	810878e <_strtod_l+0x8e6>
 81087e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81087e4:	ea13 0f0a 	tst.w	r3, sl
 81087e8:	e7e0      	b.n	81087ac <_strtod_l+0x904>
 81087ea:	f7ff fb40 	bl	8107e6e <sulp>
 81087ee:	4602      	mov	r2, r0
 81087f0:	460b      	mov	r3, r1
 81087f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81087f6:	f7f7 fdcf 	bl	8100398 <__aeabi_dsub>
 81087fa:	2200      	movs	r2, #0
 81087fc:	2300      	movs	r3, #0
 81087fe:	4682      	mov	sl, r0
 8108800:	468b      	mov	fp, r1
 8108802:	f7f8 f9e9 	bl	8100bd8 <__aeabi_dcmpeq>
 8108806:	2800      	cmp	r0, #0
 8108808:	d0c1      	beq.n	810878e <_strtod_l+0x8e6>
 810880a:	e60e      	b.n	810842a <_strtod_l+0x582>
 810880c:	fffffc02 	.word	0xfffffc02
 8108810:	7ff00000 	.word	0x7ff00000
 8108814:	39500000 	.word	0x39500000
 8108818:	000fffff 	.word	0x000fffff
 810881c:	7fefffff 	.word	0x7fefffff
 8108820:	0810b560 	.word	0x0810b560
 8108824:	4631      	mov	r1, r6
 8108826:	4628      	mov	r0, r5
 8108828:	f002 f990 	bl	810ab4c <__ratio>
 810882c:	ec59 8b10 	vmov	r8, r9, d0
 8108830:	ee10 0a10 	vmov	r0, s0
 8108834:	2200      	movs	r2, #0
 8108836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810883a:	4649      	mov	r1, r9
 810883c:	f7f8 f9e0 	bl	8100c00 <__aeabi_dcmple>
 8108840:	2800      	cmp	r0, #0
 8108842:	d07c      	beq.n	810893e <_strtod_l+0xa96>
 8108844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108846:	2b00      	cmp	r3, #0
 8108848:	d04c      	beq.n	81088e4 <_strtod_l+0xa3c>
 810884a:	4b95      	ldr	r3, [pc, #596]	; (8108aa0 <_strtod_l+0xbf8>)
 810884c:	2200      	movs	r2, #0
 810884e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108852:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8108aa0 <_strtod_l+0xbf8>
 8108856:	f04f 0800 	mov.w	r8, #0
 810885a:	4b92      	ldr	r3, [pc, #584]	; (8108aa4 <_strtod_l+0xbfc>)
 810885c:	403b      	ands	r3, r7
 810885e:	9311      	str	r3, [sp, #68]	; 0x44
 8108860:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8108862:	4b91      	ldr	r3, [pc, #580]	; (8108aa8 <_strtod_l+0xc00>)
 8108864:	429a      	cmp	r2, r3
 8108866:	f040 80b2 	bne.w	81089ce <_strtod_l+0xb26>
 810886a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810886e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108872:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8108876:	ec4b ab10 	vmov	d0, sl, fp
 810887a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 810887e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8108882:	f002 f88b 	bl	810a99c <__ulp>
 8108886:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810888a:	ec53 2b10 	vmov	r2, r3, d0
 810888e:	f7f7 ff3b 	bl	8100708 <__aeabi_dmul>
 8108892:	4652      	mov	r2, sl
 8108894:	465b      	mov	r3, fp
 8108896:	f7f7 fd81 	bl	810039c <__adddf3>
 810889a:	460b      	mov	r3, r1
 810889c:	4981      	ldr	r1, [pc, #516]	; (8108aa4 <_strtod_l+0xbfc>)
 810889e:	4a83      	ldr	r2, [pc, #524]	; (8108aac <_strtod_l+0xc04>)
 81088a0:	4019      	ands	r1, r3
 81088a2:	4291      	cmp	r1, r2
 81088a4:	4682      	mov	sl, r0
 81088a6:	d95e      	bls.n	8108966 <_strtod_l+0xabe>
 81088a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81088aa:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 81088ae:	4293      	cmp	r3, r2
 81088b0:	d103      	bne.n	81088ba <_strtod_l+0xa12>
 81088b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81088b4:	3301      	adds	r3, #1
 81088b6:	f43f ad43 	beq.w	8108340 <_strtod_l+0x498>
 81088ba:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8108ab8 <_strtod_l+0xc10>
 81088be:	f04f 3aff 	mov.w	sl, #4294967295
 81088c2:	991e      	ldr	r1, [sp, #120]	; 0x78
 81088c4:	4620      	mov	r0, r4
 81088c6:	f001 fd3d 	bl	810a344 <_Bfree>
 81088ca:	9907      	ldr	r1, [sp, #28]
 81088cc:	4620      	mov	r0, r4
 81088ce:	f001 fd39 	bl	810a344 <_Bfree>
 81088d2:	4631      	mov	r1, r6
 81088d4:	4620      	mov	r0, r4
 81088d6:	f001 fd35 	bl	810a344 <_Bfree>
 81088da:	4629      	mov	r1, r5
 81088dc:	4620      	mov	r0, r4
 81088de:	f001 fd31 	bl	810a344 <_Bfree>
 81088e2:	e613      	b.n	810850c <_strtod_l+0x664>
 81088e4:	f1ba 0f00 	cmp.w	sl, #0
 81088e8:	d11b      	bne.n	8108922 <_strtod_l+0xa7a>
 81088ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81088ee:	b9f3      	cbnz	r3, 810892e <_strtod_l+0xa86>
 81088f0:	4b6b      	ldr	r3, [pc, #428]	; (8108aa0 <_strtod_l+0xbf8>)
 81088f2:	2200      	movs	r2, #0
 81088f4:	4640      	mov	r0, r8
 81088f6:	4649      	mov	r1, r9
 81088f8:	f7f8 f978 	bl	8100bec <__aeabi_dcmplt>
 81088fc:	b9d0      	cbnz	r0, 8108934 <_strtod_l+0xa8c>
 81088fe:	4640      	mov	r0, r8
 8108900:	4649      	mov	r1, r9
 8108902:	4b6b      	ldr	r3, [pc, #428]	; (8108ab0 <_strtod_l+0xc08>)
 8108904:	2200      	movs	r2, #0
 8108906:	f7f7 feff 	bl	8100708 <__aeabi_dmul>
 810890a:	4680      	mov	r8, r0
 810890c:	4689      	mov	r9, r1
 810890e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8108912:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8108916:	931b      	str	r3, [sp, #108]	; 0x6c
 8108918:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 810891c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108920:	e79b      	b.n	810885a <_strtod_l+0x9b2>
 8108922:	f1ba 0f01 	cmp.w	sl, #1
 8108926:	d102      	bne.n	810892e <_strtod_l+0xa86>
 8108928:	2f00      	cmp	r7, #0
 810892a:	f43f ad7e 	beq.w	810842a <_strtod_l+0x582>
 810892e:	4b61      	ldr	r3, [pc, #388]	; (8108ab4 <_strtod_l+0xc0c>)
 8108930:	2200      	movs	r2, #0
 8108932:	e78c      	b.n	810884e <_strtod_l+0x9a6>
 8108934:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8108ab0 <_strtod_l+0xc08>
 8108938:	f04f 0800 	mov.w	r8, #0
 810893c:	e7e7      	b.n	810890e <_strtod_l+0xa66>
 810893e:	4b5c      	ldr	r3, [pc, #368]	; (8108ab0 <_strtod_l+0xc08>)
 8108940:	4640      	mov	r0, r8
 8108942:	4649      	mov	r1, r9
 8108944:	2200      	movs	r2, #0
 8108946:	f7f7 fedf 	bl	8100708 <__aeabi_dmul>
 810894a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810894c:	4680      	mov	r8, r0
 810894e:	4689      	mov	r9, r1
 8108950:	b933      	cbnz	r3, 8108960 <_strtod_l+0xab8>
 8108952:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8108956:	9012      	str	r0, [sp, #72]	; 0x48
 8108958:	9313      	str	r3, [sp, #76]	; 0x4c
 810895a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 810895e:	e7dd      	b.n	810891c <_strtod_l+0xa74>
 8108960:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8108964:	e7f9      	b.n	810895a <_strtod_l+0xab2>
 8108966:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810896a:	9b04      	ldr	r3, [sp, #16]
 810896c:	2b00      	cmp	r3, #0
 810896e:	d1a8      	bne.n	81088c2 <_strtod_l+0xa1a>
 8108970:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108974:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8108976:	0d1b      	lsrs	r3, r3, #20
 8108978:	051b      	lsls	r3, r3, #20
 810897a:	429a      	cmp	r2, r3
 810897c:	d1a1      	bne.n	81088c2 <_strtod_l+0xa1a>
 810897e:	4640      	mov	r0, r8
 8108980:	4649      	mov	r1, r9
 8108982:	f7f8 fa21 	bl	8100dc8 <__aeabi_d2lz>
 8108986:	f7f7 fe91 	bl	81006ac <__aeabi_l2d>
 810898a:	4602      	mov	r2, r0
 810898c:	460b      	mov	r3, r1
 810898e:	4640      	mov	r0, r8
 8108990:	4649      	mov	r1, r9
 8108992:	f7f7 fd01 	bl	8100398 <__aeabi_dsub>
 8108996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108998:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810899c:	ea43 030a 	orr.w	r3, r3, sl
 81089a0:	4313      	orrs	r3, r2
 81089a2:	4680      	mov	r8, r0
 81089a4:	4689      	mov	r9, r1
 81089a6:	d053      	beq.n	8108a50 <_strtod_l+0xba8>
 81089a8:	a335      	add	r3, pc, #212	; (adr r3, 8108a80 <_strtod_l+0xbd8>)
 81089aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81089ae:	f7f8 f91d 	bl	8100bec <__aeabi_dcmplt>
 81089b2:	2800      	cmp	r0, #0
 81089b4:	f47f acce 	bne.w	8108354 <_strtod_l+0x4ac>
 81089b8:	a333      	add	r3, pc, #204	; (adr r3, 8108a88 <_strtod_l+0xbe0>)
 81089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81089be:	4640      	mov	r0, r8
 81089c0:	4649      	mov	r1, r9
 81089c2:	f7f8 f931 	bl	8100c28 <__aeabi_dcmpgt>
 81089c6:	2800      	cmp	r0, #0
 81089c8:	f43f af7b 	beq.w	81088c2 <_strtod_l+0xa1a>
 81089cc:	e4c2      	b.n	8108354 <_strtod_l+0x4ac>
 81089ce:	9b04      	ldr	r3, [sp, #16]
 81089d0:	b333      	cbz	r3, 8108a20 <_strtod_l+0xb78>
 81089d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81089d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 81089d8:	d822      	bhi.n	8108a20 <_strtod_l+0xb78>
 81089da:	a32d      	add	r3, pc, #180	; (adr r3, 8108a90 <_strtod_l+0xbe8>)
 81089dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81089e0:	4640      	mov	r0, r8
 81089e2:	4649      	mov	r1, r9
 81089e4:	f7f8 f90c 	bl	8100c00 <__aeabi_dcmple>
 81089e8:	b1a0      	cbz	r0, 8108a14 <_strtod_l+0xb6c>
 81089ea:	4649      	mov	r1, r9
 81089ec:	4640      	mov	r0, r8
 81089ee:	f7f8 f963 	bl	8100cb8 <__aeabi_d2uiz>
 81089f2:	2801      	cmp	r0, #1
 81089f4:	bf38      	it	cc
 81089f6:	2001      	movcc	r0, #1
 81089f8:	f7f7 fe0c 	bl	8100614 <__aeabi_ui2d>
 81089fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81089fe:	4680      	mov	r8, r0
 8108a00:	4689      	mov	r9, r1
 8108a02:	bb13      	cbnz	r3, 8108a4a <_strtod_l+0xba2>
 8108a04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8108a08:	9014      	str	r0, [sp, #80]	; 0x50
 8108a0a:	9315      	str	r3, [sp, #84]	; 0x54
 8108a0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8108a10:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8108a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8108a16:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8108a18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8108a1c:	1a9b      	subs	r3, r3, r2
 8108a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8108a20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108a24:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8108a28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8108a2c:	f001 ffb6 	bl	810a99c <__ulp>
 8108a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8108a34:	ec53 2b10 	vmov	r2, r3, d0
 8108a38:	f7f7 fe66 	bl	8100708 <__aeabi_dmul>
 8108a3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8108a40:	f7f7 fcac 	bl	810039c <__adddf3>
 8108a44:	4682      	mov	sl, r0
 8108a46:	468b      	mov	fp, r1
 8108a48:	e78f      	b.n	810896a <_strtod_l+0xac2>
 8108a4a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8108a4e:	e7dd      	b.n	8108a0c <_strtod_l+0xb64>
 8108a50:	a311      	add	r3, pc, #68	; (adr r3, 8108a98 <_strtod_l+0xbf0>)
 8108a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108a56:	f7f8 f8c9 	bl	8100bec <__aeabi_dcmplt>
 8108a5a:	e7b4      	b.n	81089c6 <_strtod_l+0xb1e>
 8108a5c:	2300      	movs	r3, #0
 8108a5e:	930e      	str	r3, [sp, #56]	; 0x38
 8108a60:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8108a62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108a64:	6013      	str	r3, [r2, #0]
 8108a66:	f7ff ba65 	b.w	8107f34 <_strtod_l+0x8c>
 8108a6a:	2b65      	cmp	r3, #101	; 0x65
 8108a6c:	f43f ab5d 	beq.w	810812a <_strtod_l+0x282>
 8108a70:	2b45      	cmp	r3, #69	; 0x45
 8108a72:	f43f ab5a 	beq.w	810812a <_strtod_l+0x282>
 8108a76:	2201      	movs	r2, #1
 8108a78:	f7ff bb92 	b.w	81081a0 <_strtod_l+0x2f8>
 8108a7c:	f3af 8000 	nop.w
 8108a80:	94a03595 	.word	0x94a03595
 8108a84:	3fdfffff 	.word	0x3fdfffff
 8108a88:	35afe535 	.word	0x35afe535
 8108a8c:	3fe00000 	.word	0x3fe00000
 8108a90:	ffc00000 	.word	0xffc00000
 8108a94:	41dfffff 	.word	0x41dfffff
 8108a98:	94a03595 	.word	0x94a03595
 8108a9c:	3fcfffff 	.word	0x3fcfffff
 8108aa0:	3ff00000 	.word	0x3ff00000
 8108aa4:	7ff00000 	.word	0x7ff00000
 8108aa8:	7fe00000 	.word	0x7fe00000
 8108aac:	7c9fffff 	.word	0x7c9fffff
 8108ab0:	3fe00000 	.word	0x3fe00000
 8108ab4:	bff00000 	.word	0xbff00000
 8108ab8:	7fefffff 	.word	0x7fefffff

08108abc <_strtod_r>:
 8108abc:	4b01      	ldr	r3, [pc, #4]	; (8108ac4 <_strtod_r+0x8>)
 8108abe:	f7ff b9f3 	b.w	8107ea8 <_strtod_l>
 8108ac2:	bf00      	nop
 8108ac4:	10000078 	.word	0x10000078

08108ac8 <_strtol_l.isra.0>:
 8108ac8:	2b01      	cmp	r3, #1
 8108aca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108ace:	d001      	beq.n	8108ad4 <_strtol_l.isra.0+0xc>
 8108ad0:	2b24      	cmp	r3, #36	; 0x24
 8108ad2:	d906      	bls.n	8108ae2 <_strtol_l.isra.0+0x1a>
 8108ad4:	f7fd feec 	bl	81068b0 <__errno>
 8108ad8:	2316      	movs	r3, #22
 8108ada:	6003      	str	r3, [r0, #0]
 8108adc:	2000      	movs	r0, #0
 8108ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108ae2:	4f3a      	ldr	r7, [pc, #232]	; (8108bcc <_strtol_l.isra.0+0x104>)
 8108ae4:	468e      	mov	lr, r1
 8108ae6:	4676      	mov	r6, lr
 8108ae8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8108aec:	5de5      	ldrb	r5, [r4, r7]
 8108aee:	f015 0508 	ands.w	r5, r5, #8
 8108af2:	d1f8      	bne.n	8108ae6 <_strtol_l.isra.0+0x1e>
 8108af4:	2c2d      	cmp	r4, #45	; 0x2d
 8108af6:	d134      	bne.n	8108b62 <_strtol_l.isra.0+0x9a>
 8108af8:	f89e 4000 	ldrb.w	r4, [lr]
 8108afc:	f04f 0801 	mov.w	r8, #1
 8108b00:	f106 0e02 	add.w	lr, r6, #2
 8108b04:	2b00      	cmp	r3, #0
 8108b06:	d05c      	beq.n	8108bc2 <_strtol_l.isra.0+0xfa>
 8108b08:	2b10      	cmp	r3, #16
 8108b0a:	d10c      	bne.n	8108b26 <_strtol_l.isra.0+0x5e>
 8108b0c:	2c30      	cmp	r4, #48	; 0x30
 8108b0e:	d10a      	bne.n	8108b26 <_strtol_l.isra.0+0x5e>
 8108b10:	f89e 4000 	ldrb.w	r4, [lr]
 8108b14:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8108b18:	2c58      	cmp	r4, #88	; 0x58
 8108b1a:	d14d      	bne.n	8108bb8 <_strtol_l.isra.0+0xf0>
 8108b1c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8108b20:	2310      	movs	r3, #16
 8108b22:	f10e 0e02 	add.w	lr, lr, #2
 8108b26:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8108b2a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8108b2e:	2600      	movs	r6, #0
 8108b30:	fbbc f9f3 	udiv	r9, ip, r3
 8108b34:	4635      	mov	r5, r6
 8108b36:	fb03 ca19 	mls	sl, r3, r9, ip
 8108b3a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8108b3e:	2f09      	cmp	r7, #9
 8108b40:	d818      	bhi.n	8108b74 <_strtol_l.isra.0+0xac>
 8108b42:	463c      	mov	r4, r7
 8108b44:	42a3      	cmp	r3, r4
 8108b46:	dd24      	ble.n	8108b92 <_strtol_l.isra.0+0xca>
 8108b48:	2e00      	cmp	r6, #0
 8108b4a:	db1f      	blt.n	8108b8c <_strtol_l.isra.0+0xc4>
 8108b4c:	45a9      	cmp	r9, r5
 8108b4e:	d31d      	bcc.n	8108b8c <_strtol_l.isra.0+0xc4>
 8108b50:	d101      	bne.n	8108b56 <_strtol_l.isra.0+0x8e>
 8108b52:	45a2      	cmp	sl, r4
 8108b54:	db1a      	blt.n	8108b8c <_strtol_l.isra.0+0xc4>
 8108b56:	fb05 4503 	mla	r5, r5, r3, r4
 8108b5a:	2601      	movs	r6, #1
 8108b5c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8108b60:	e7eb      	b.n	8108b3a <_strtol_l.isra.0+0x72>
 8108b62:	2c2b      	cmp	r4, #43	; 0x2b
 8108b64:	bf08      	it	eq
 8108b66:	f89e 4000 	ldrbeq.w	r4, [lr]
 8108b6a:	46a8      	mov	r8, r5
 8108b6c:	bf08      	it	eq
 8108b6e:	f106 0e02 	addeq.w	lr, r6, #2
 8108b72:	e7c7      	b.n	8108b04 <_strtol_l.isra.0+0x3c>
 8108b74:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8108b78:	2f19      	cmp	r7, #25
 8108b7a:	d801      	bhi.n	8108b80 <_strtol_l.isra.0+0xb8>
 8108b7c:	3c37      	subs	r4, #55	; 0x37
 8108b7e:	e7e1      	b.n	8108b44 <_strtol_l.isra.0+0x7c>
 8108b80:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8108b84:	2f19      	cmp	r7, #25
 8108b86:	d804      	bhi.n	8108b92 <_strtol_l.isra.0+0xca>
 8108b88:	3c57      	subs	r4, #87	; 0x57
 8108b8a:	e7db      	b.n	8108b44 <_strtol_l.isra.0+0x7c>
 8108b8c:	f04f 36ff 	mov.w	r6, #4294967295
 8108b90:	e7e4      	b.n	8108b5c <_strtol_l.isra.0+0x94>
 8108b92:	2e00      	cmp	r6, #0
 8108b94:	da05      	bge.n	8108ba2 <_strtol_l.isra.0+0xda>
 8108b96:	2322      	movs	r3, #34	; 0x22
 8108b98:	6003      	str	r3, [r0, #0]
 8108b9a:	4665      	mov	r5, ip
 8108b9c:	b942      	cbnz	r2, 8108bb0 <_strtol_l.isra.0+0xe8>
 8108b9e:	4628      	mov	r0, r5
 8108ba0:	e79d      	b.n	8108ade <_strtol_l.isra.0+0x16>
 8108ba2:	f1b8 0f00 	cmp.w	r8, #0
 8108ba6:	d000      	beq.n	8108baa <_strtol_l.isra.0+0xe2>
 8108ba8:	426d      	negs	r5, r5
 8108baa:	2a00      	cmp	r2, #0
 8108bac:	d0f7      	beq.n	8108b9e <_strtol_l.isra.0+0xd6>
 8108bae:	b10e      	cbz	r6, 8108bb4 <_strtol_l.isra.0+0xec>
 8108bb0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8108bb4:	6011      	str	r1, [r2, #0]
 8108bb6:	e7f2      	b.n	8108b9e <_strtol_l.isra.0+0xd6>
 8108bb8:	2430      	movs	r4, #48	; 0x30
 8108bba:	2b00      	cmp	r3, #0
 8108bbc:	d1b3      	bne.n	8108b26 <_strtol_l.isra.0+0x5e>
 8108bbe:	2308      	movs	r3, #8
 8108bc0:	e7b1      	b.n	8108b26 <_strtol_l.isra.0+0x5e>
 8108bc2:	2c30      	cmp	r4, #48	; 0x30
 8108bc4:	d0a4      	beq.n	8108b10 <_strtol_l.isra.0+0x48>
 8108bc6:	230a      	movs	r3, #10
 8108bc8:	e7ad      	b.n	8108b26 <_strtol_l.isra.0+0x5e>
 8108bca:	bf00      	nop
 8108bcc:	0810b589 	.word	0x0810b589

08108bd0 <_strtol_r>:
 8108bd0:	f7ff bf7a 	b.w	8108ac8 <_strtol_l.isra.0>

08108bd4 <__swbuf_r>:
 8108bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108bd6:	460e      	mov	r6, r1
 8108bd8:	4614      	mov	r4, r2
 8108bda:	4605      	mov	r5, r0
 8108bdc:	b118      	cbz	r0, 8108be6 <__swbuf_r+0x12>
 8108bde:	6983      	ldr	r3, [r0, #24]
 8108be0:	b90b      	cbnz	r3, 8108be6 <__swbuf_r+0x12>
 8108be2:	f7fd ff85 	bl	8106af0 <__sinit>
 8108be6:	4b21      	ldr	r3, [pc, #132]	; (8108c6c <__swbuf_r+0x98>)
 8108be8:	429c      	cmp	r4, r3
 8108bea:	d12b      	bne.n	8108c44 <__swbuf_r+0x70>
 8108bec:	686c      	ldr	r4, [r5, #4]
 8108bee:	69a3      	ldr	r3, [r4, #24]
 8108bf0:	60a3      	str	r3, [r4, #8]
 8108bf2:	89a3      	ldrh	r3, [r4, #12]
 8108bf4:	071a      	lsls	r2, r3, #28
 8108bf6:	d52f      	bpl.n	8108c58 <__swbuf_r+0x84>
 8108bf8:	6923      	ldr	r3, [r4, #16]
 8108bfa:	b36b      	cbz	r3, 8108c58 <__swbuf_r+0x84>
 8108bfc:	6923      	ldr	r3, [r4, #16]
 8108bfe:	6820      	ldr	r0, [r4, #0]
 8108c00:	1ac0      	subs	r0, r0, r3
 8108c02:	6963      	ldr	r3, [r4, #20]
 8108c04:	b2f6      	uxtb	r6, r6
 8108c06:	4283      	cmp	r3, r0
 8108c08:	4637      	mov	r7, r6
 8108c0a:	dc04      	bgt.n	8108c16 <__swbuf_r+0x42>
 8108c0c:	4621      	mov	r1, r4
 8108c0e:	4628      	mov	r0, r5
 8108c10:	f7fd feda 	bl	81069c8 <_fflush_r>
 8108c14:	bb30      	cbnz	r0, 8108c64 <__swbuf_r+0x90>
 8108c16:	68a3      	ldr	r3, [r4, #8]
 8108c18:	3b01      	subs	r3, #1
 8108c1a:	60a3      	str	r3, [r4, #8]
 8108c1c:	6823      	ldr	r3, [r4, #0]
 8108c1e:	1c5a      	adds	r2, r3, #1
 8108c20:	6022      	str	r2, [r4, #0]
 8108c22:	701e      	strb	r6, [r3, #0]
 8108c24:	6963      	ldr	r3, [r4, #20]
 8108c26:	3001      	adds	r0, #1
 8108c28:	4283      	cmp	r3, r0
 8108c2a:	d004      	beq.n	8108c36 <__swbuf_r+0x62>
 8108c2c:	89a3      	ldrh	r3, [r4, #12]
 8108c2e:	07db      	lsls	r3, r3, #31
 8108c30:	d506      	bpl.n	8108c40 <__swbuf_r+0x6c>
 8108c32:	2e0a      	cmp	r6, #10
 8108c34:	d104      	bne.n	8108c40 <__swbuf_r+0x6c>
 8108c36:	4621      	mov	r1, r4
 8108c38:	4628      	mov	r0, r5
 8108c3a:	f7fd fec5 	bl	81069c8 <_fflush_r>
 8108c3e:	b988      	cbnz	r0, 8108c64 <__swbuf_r+0x90>
 8108c40:	4638      	mov	r0, r7
 8108c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108c44:	4b0a      	ldr	r3, [pc, #40]	; (8108c70 <__swbuf_r+0x9c>)
 8108c46:	429c      	cmp	r4, r3
 8108c48:	d101      	bne.n	8108c4e <__swbuf_r+0x7a>
 8108c4a:	68ac      	ldr	r4, [r5, #8]
 8108c4c:	e7cf      	b.n	8108bee <__swbuf_r+0x1a>
 8108c4e:	4b09      	ldr	r3, [pc, #36]	; (8108c74 <__swbuf_r+0xa0>)
 8108c50:	429c      	cmp	r4, r3
 8108c52:	bf08      	it	eq
 8108c54:	68ec      	ldreq	r4, [r5, #12]
 8108c56:	e7ca      	b.n	8108bee <__swbuf_r+0x1a>
 8108c58:	4621      	mov	r1, r4
 8108c5a:	4628      	mov	r0, r5
 8108c5c:	f000 f81e 	bl	8108c9c <__swsetup_r>
 8108c60:	2800      	cmp	r0, #0
 8108c62:	d0cb      	beq.n	8108bfc <__swbuf_r+0x28>
 8108c64:	f04f 37ff 	mov.w	r7, #4294967295
 8108c68:	e7ea      	b.n	8108c40 <__swbuf_r+0x6c>
 8108c6a:	bf00      	nop
 8108c6c:	0810b4b8 	.word	0x0810b4b8
 8108c70:	0810b4d8 	.word	0x0810b4d8
 8108c74:	0810b498 	.word	0x0810b498

08108c78 <_write_r>:
 8108c78:	b538      	push	{r3, r4, r5, lr}
 8108c7a:	4d07      	ldr	r5, [pc, #28]	; (8108c98 <_write_r+0x20>)
 8108c7c:	4604      	mov	r4, r0
 8108c7e:	4608      	mov	r0, r1
 8108c80:	4611      	mov	r1, r2
 8108c82:	2200      	movs	r2, #0
 8108c84:	602a      	str	r2, [r5, #0]
 8108c86:	461a      	mov	r2, r3
 8108c88:	f7f9 f925 	bl	8101ed6 <_write>
 8108c8c:	1c43      	adds	r3, r0, #1
 8108c8e:	d102      	bne.n	8108c96 <_write_r+0x1e>
 8108c90:	682b      	ldr	r3, [r5, #0]
 8108c92:	b103      	cbz	r3, 8108c96 <_write_r+0x1e>
 8108c94:	6023      	str	r3, [r4, #0]
 8108c96:	bd38      	pop	{r3, r4, r5, pc}
 8108c98:	1003ebf8 	.word	0x1003ebf8

08108c9c <__swsetup_r>:
 8108c9c:	4b32      	ldr	r3, [pc, #200]	; (8108d68 <__swsetup_r+0xcc>)
 8108c9e:	b570      	push	{r4, r5, r6, lr}
 8108ca0:	681d      	ldr	r5, [r3, #0]
 8108ca2:	4606      	mov	r6, r0
 8108ca4:	460c      	mov	r4, r1
 8108ca6:	b125      	cbz	r5, 8108cb2 <__swsetup_r+0x16>
 8108ca8:	69ab      	ldr	r3, [r5, #24]
 8108caa:	b913      	cbnz	r3, 8108cb2 <__swsetup_r+0x16>
 8108cac:	4628      	mov	r0, r5
 8108cae:	f7fd ff1f 	bl	8106af0 <__sinit>
 8108cb2:	4b2e      	ldr	r3, [pc, #184]	; (8108d6c <__swsetup_r+0xd0>)
 8108cb4:	429c      	cmp	r4, r3
 8108cb6:	d10f      	bne.n	8108cd8 <__swsetup_r+0x3c>
 8108cb8:	686c      	ldr	r4, [r5, #4]
 8108cba:	89a3      	ldrh	r3, [r4, #12]
 8108cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8108cc0:	0719      	lsls	r1, r3, #28
 8108cc2:	d42c      	bmi.n	8108d1e <__swsetup_r+0x82>
 8108cc4:	06dd      	lsls	r5, r3, #27
 8108cc6:	d411      	bmi.n	8108cec <__swsetup_r+0x50>
 8108cc8:	2309      	movs	r3, #9
 8108cca:	6033      	str	r3, [r6, #0]
 8108ccc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8108cd0:	81a3      	strh	r3, [r4, #12]
 8108cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8108cd6:	e03e      	b.n	8108d56 <__swsetup_r+0xba>
 8108cd8:	4b25      	ldr	r3, [pc, #148]	; (8108d70 <__swsetup_r+0xd4>)
 8108cda:	429c      	cmp	r4, r3
 8108cdc:	d101      	bne.n	8108ce2 <__swsetup_r+0x46>
 8108cde:	68ac      	ldr	r4, [r5, #8]
 8108ce0:	e7eb      	b.n	8108cba <__swsetup_r+0x1e>
 8108ce2:	4b24      	ldr	r3, [pc, #144]	; (8108d74 <__swsetup_r+0xd8>)
 8108ce4:	429c      	cmp	r4, r3
 8108ce6:	bf08      	it	eq
 8108ce8:	68ec      	ldreq	r4, [r5, #12]
 8108cea:	e7e6      	b.n	8108cba <__swsetup_r+0x1e>
 8108cec:	0758      	lsls	r0, r3, #29
 8108cee:	d512      	bpl.n	8108d16 <__swsetup_r+0x7a>
 8108cf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108cf2:	b141      	cbz	r1, 8108d06 <__swsetup_r+0x6a>
 8108cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8108cf8:	4299      	cmp	r1, r3
 8108cfa:	d002      	beq.n	8108d02 <__swsetup_r+0x66>
 8108cfc:	4630      	mov	r0, r6
 8108cfe:	f7fd ffc5 	bl	8106c8c <_free_r>
 8108d02:	2300      	movs	r3, #0
 8108d04:	6363      	str	r3, [r4, #52]	; 0x34
 8108d06:	89a3      	ldrh	r3, [r4, #12]
 8108d08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8108d0c:	81a3      	strh	r3, [r4, #12]
 8108d0e:	2300      	movs	r3, #0
 8108d10:	6063      	str	r3, [r4, #4]
 8108d12:	6923      	ldr	r3, [r4, #16]
 8108d14:	6023      	str	r3, [r4, #0]
 8108d16:	89a3      	ldrh	r3, [r4, #12]
 8108d18:	f043 0308 	orr.w	r3, r3, #8
 8108d1c:	81a3      	strh	r3, [r4, #12]
 8108d1e:	6923      	ldr	r3, [r4, #16]
 8108d20:	b94b      	cbnz	r3, 8108d36 <__swsetup_r+0x9a>
 8108d22:	89a3      	ldrh	r3, [r4, #12]
 8108d24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8108d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8108d2c:	d003      	beq.n	8108d36 <__swsetup_r+0x9a>
 8108d2e:	4621      	mov	r1, r4
 8108d30:	4630      	mov	r0, r6
 8108d32:	f001 fa53 	bl	810a1dc <__smakebuf_r>
 8108d36:	89a0      	ldrh	r0, [r4, #12]
 8108d38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8108d3c:	f010 0301 	ands.w	r3, r0, #1
 8108d40:	d00a      	beq.n	8108d58 <__swsetup_r+0xbc>
 8108d42:	2300      	movs	r3, #0
 8108d44:	60a3      	str	r3, [r4, #8]
 8108d46:	6963      	ldr	r3, [r4, #20]
 8108d48:	425b      	negs	r3, r3
 8108d4a:	61a3      	str	r3, [r4, #24]
 8108d4c:	6923      	ldr	r3, [r4, #16]
 8108d4e:	b943      	cbnz	r3, 8108d62 <__swsetup_r+0xc6>
 8108d50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8108d54:	d1ba      	bne.n	8108ccc <__swsetup_r+0x30>
 8108d56:	bd70      	pop	{r4, r5, r6, pc}
 8108d58:	0781      	lsls	r1, r0, #30
 8108d5a:	bf58      	it	pl
 8108d5c:	6963      	ldrpl	r3, [r4, #20]
 8108d5e:	60a3      	str	r3, [r4, #8]
 8108d60:	e7f4      	b.n	8108d4c <__swsetup_r+0xb0>
 8108d62:	2000      	movs	r0, #0
 8108d64:	e7f7      	b.n	8108d56 <__swsetup_r+0xba>
 8108d66:	bf00      	nop
 8108d68:	10000010 	.word	0x10000010
 8108d6c:	0810b4b8 	.word	0x0810b4b8
 8108d70:	0810b4d8 	.word	0x0810b4d8
 8108d74:	0810b498 	.word	0x0810b498

08108d78 <_close_r>:
 8108d78:	b538      	push	{r3, r4, r5, lr}
 8108d7a:	4d06      	ldr	r5, [pc, #24]	; (8108d94 <_close_r+0x1c>)
 8108d7c:	2300      	movs	r3, #0
 8108d7e:	4604      	mov	r4, r0
 8108d80:	4608      	mov	r0, r1
 8108d82:	602b      	str	r3, [r5, #0]
 8108d84:	f7f9 f8c3 	bl	8101f0e <_close>
 8108d88:	1c43      	adds	r3, r0, #1
 8108d8a:	d102      	bne.n	8108d92 <_close_r+0x1a>
 8108d8c:	682b      	ldr	r3, [r5, #0]
 8108d8e:	b103      	cbz	r3, 8108d92 <_close_r+0x1a>
 8108d90:	6023      	str	r3, [r4, #0]
 8108d92:	bd38      	pop	{r3, r4, r5, pc}
 8108d94:	1003ebf8 	.word	0x1003ebf8

08108d98 <quorem>:
 8108d98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108d9c:	6903      	ldr	r3, [r0, #16]
 8108d9e:	690c      	ldr	r4, [r1, #16]
 8108da0:	42a3      	cmp	r3, r4
 8108da2:	4607      	mov	r7, r0
 8108da4:	f2c0 8081 	blt.w	8108eaa <quorem+0x112>
 8108da8:	3c01      	subs	r4, #1
 8108daa:	f101 0814 	add.w	r8, r1, #20
 8108dae:	f100 0514 	add.w	r5, r0, #20
 8108db2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108db6:	9301      	str	r3, [sp, #4]
 8108db8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8108dbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108dc0:	3301      	adds	r3, #1
 8108dc2:	429a      	cmp	r2, r3
 8108dc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8108dc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8108dcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8108dd0:	d331      	bcc.n	8108e36 <quorem+0x9e>
 8108dd2:	f04f 0e00 	mov.w	lr, #0
 8108dd6:	4640      	mov	r0, r8
 8108dd8:	46ac      	mov	ip, r5
 8108dda:	46f2      	mov	sl, lr
 8108ddc:	f850 2b04 	ldr.w	r2, [r0], #4
 8108de0:	b293      	uxth	r3, r2
 8108de2:	fb06 e303 	mla	r3, r6, r3, lr
 8108de6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8108dea:	b29b      	uxth	r3, r3
 8108dec:	ebaa 0303 	sub.w	r3, sl, r3
 8108df0:	0c12      	lsrs	r2, r2, #16
 8108df2:	f8dc a000 	ldr.w	sl, [ip]
 8108df6:	fb06 e202 	mla	r2, r6, r2, lr
 8108dfa:	fa13 f38a 	uxtah	r3, r3, sl
 8108dfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8108e02:	fa1f fa82 	uxth.w	sl, r2
 8108e06:	f8dc 2000 	ldr.w	r2, [ip]
 8108e0a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8108e0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8108e12:	b29b      	uxth	r3, r3
 8108e14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8108e18:	4581      	cmp	r9, r0
 8108e1a:	f84c 3b04 	str.w	r3, [ip], #4
 8108e1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8108e22:	d2db      	bcs.n	8108ddc <quorem+0x44>
 8108e24:	f855 300b 	ldr.w	r3, [r5, fp]
 8108e28:	b92b      	cbnz	r3, 8108e36 <quorem+0x9e>
 8108e2a:	9b01      	ldr	r3, [sp, #4]
 8108e2c:	3b04      	subs	r3, #4
 8108e2e:	429d      	cmp	r5, r3
 8108e30:	461a      	mov	r2, r3
 8108e32:	d32e      	bcc.n	8108e92 <quorem+0xfa>
 8108e34:	613c      	str	r4, [r7, #16]
 8108e36:	4638      	mov	r0, r7
 8108e38:	f001 fd0c 	bl	810a854 <__mcmp>
 8108e3c:	2800      	cmp	r0, #0
 8108e3e:	db24      	blt.n	8108e8a <quorem+0xf2>
 8108e40:	3601      	adds	r6, #1
 8108e42:	4628      	mov	r0, r5
 8108e44:	f04f 0c00 	mov.w	ip, #0
 8108e48:	f858 2b04 	ldr.w	r2, [r8], #4
 8108e4c:	f8d0 e000 	ldr.w	lr, [r0]
 8108e50:	b293      	uxth	r3, r2
 8108e52:	ebac 0303 	sub.w	r3, ip, r3
 8108e56:	0c12      	lsrs	r2, r2, #16
 8108e58:	fa13 f38e 	uxtah	r3, r3, lr
 8108e5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8108e60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8108e64:	b29b      	uxth	r3, r3
 8108e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8108e6a:	45c1      	cmp	r9, r8
 8108e6c:	f840 3b04 	str.w	r3, [r0], #4
 8108e70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8108e74:	d2e8      	bcs.n	8108e48 <quorem+0xb0>
 8108e76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8108e7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8108e7e:	b922      	cbnz	r2, 8108e8a <quorem+0xf2>
 8108e80:	3b04      	subs	r3, #4
 8108e82:	429d      	cmp	r5, r3
 8108e84:	461a      	mov	r2, r3
 8108e86:	d30a      	bcc.n	8108e9e <quorem+0x106>
 8108e88:	613c      	str	r4, [r7, #16]
 8108e8a:	4630      	mov	r0, r6
 8108e8c:	b003      	add	sp, #12
 8108e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108e92:	6812      	ldr	r2, [r2, #0]
 8108e94:	3b04      	subs	r3, #4
 8108e96:	2a00      	cmp	r2, #0
 8108e98:	d1cc      	bne.n	8108e34 <quorem+0x9c>
 8108e9a:	3c01      	subs	r4, #1
 8108e9c:	e7c7      	b.n	8108e2e <quorem+0x96>
 8108e9e:	6812      	ldr	r2, [r2, #0]
 8108ea0:	3b04      	subs	r3, #4
 8108ea2:	2a00      	cmp	r2, #0
 8108ea4:	d1f0      	bne.n	8108e88 <quorem+0xf0>
 8108ea6:	3c01      	subs	r4, #1
 8108ea8:	e7eb      	b.n	8108e82 <quorem+0xea>
 8108eaa:	2000      	movs	r0, #0
 8108eac:	e7ee      	b.n	8108e8c <quorem+0xf4>
	...

08108eb0 <_dtoa_r>:
 8108eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108eb4:	ed2d 8b02 	vpush	{d8}
 8108eb8:	ec57 6b10 	vmov	r6, r7, d0
 8108ebc:	b095      	sub	sp, #84	; 0x54
 8108ebe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8108ec0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8108ec4:	9105      	str	r1, [sp, #20]
 8108ec6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8108eca:	4604      	mov	r4, r0
 8108ecc:	9209      	str	r2, [sp, #36]	; 0x24
 8108ece:	930f      	str	r3, [sp, #60]	; 0x3c
 8108ed0:	b975      	cbnz	r5, 8108ef0 <_dtoa_r+0x40>
 8108ed2:	2010      	movs	r0, #16
 8108ed4:	f001 f9c2 	bl	810a25c <malloc>
 8108ed8:	4602      	mov	r2, r0
 8108eda:	6260      	str	r0, [r4, #36]	; 0x24
 8108edc:	b920      	cbnz	r0, 8108ee8 <_dtoa_r+0x38>
 8108ede:	4bb2      	ldr	r3, [pc, #712]	; (81091a8 <_dtoa_r+0x2f8>)
 8108ee0:	21ea      	movs	r1, #234	; 0xea
 8108ee2:	48b2      	ldr	r0, [pc, #712]	; (81091ac <_dtoa_r+0x2fc>)
 8108ee4:	f002 f9a8 	bl	810b238 <__assert_func>
 8108ee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8108eec:	6005      	str	r5, [r0, #0]
 8108eee:	60c5      	str	r5, [r0, #12]
 8108ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108ef2:	6819      	ldr	r1, [r3, #0]
 8108ef4:	b151      	cbz	r1, 8108f0c <_dtoa_r+0x5c>
 8108ef6:	685a      	ldr	r2, [r3, #4]
 8108ef8:	604a      	str	r2, [r1, #4]
 8108efa:	2301      	movs	r3, #1
 8108efc:	4093      	lsls	r3, r2
 8108efe:	608b      	str	r3, [r1, #8]
 8108f00:	4620      	mov	r0, r4
 8108f02:	f001 fa1f 	bl	810a344 <_Bfree>
 8108f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8108f08:	2200      	movs	r2, #0
 8108f0a:	601a      	str	r2, [r3, #0]
 8108f0c:	1e3b      	subs	r3, r7, #0
 8108f0e:	bfb9      	ittee	lt
 8108f10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8108f14:	9303      	strlt	r3, [sp, #12]
 8108f16:	2300      	movge	r3, #0
 8108f18:	f8c8 3000 	strge.w	r3, [r8]
 8108f1c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8108f20:	4ba3      	ldr	r3, [pc, #652]	; (81091b0 <_dtoa_r+0x300>)
 8108f22:	bfbc      	itt	lt
 8108f24:	2201      	movlt	r2, #1
 8108f26:	f8c8 2000 	strlt.w	r2, [r8]
 8108f2a:	ea33 0309 	bics.w	r3, r3, r9
 8108f2e:	d11b      	bne.n	8108f68 <_dtoa_r+0xb8>
 8108f30:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108f32:	f242 730f 	movw	r3, #9999	; 0x270f
 8108f36:	6013      	str	r3, [r2, #0]
 8108f38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8108f3c:	4333      	orrs	r3, r6
 8108f3e:	f000 857a 	beq.w	8109a36 <_dtoa_r+0xb86>
 8108f42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108f44:	b963      	cbnz	r3, 8108f60 <_dtoa_r+0xb0>
 8108f46:	4b9b      	ldr	r3, [pc, #620]	; (81091b4 <_dtoa_r+0x304>)
 8108f48:	e024      	b.n	8108f94 <_dtoa_r+0xe4>
 8108f4a:	4b9b      	ldr	r3, [pc, #620]	; (81091b8 <_dtoa_r+0x308>)
 8108f4c:	9300      	str	r3, [sp, #0]
 8108f4e:	3308      	adds	r3, #8
 8108f50:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8108f52:	6013      	str	r3, [r2, #0]
 8108f54:	9800      	ldr	r0, [sp, #0]
 8108f56:	b015      	add	sp, #84	; 0x54
 8108f58:	ecbd 8b02 	vpop	{d8}
 8108f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108f60:	4b94      	ldr	r3, [pc, #592]	; (81091b4 <_dtoa_r+0x304>)
 8108f62:	9300      	str	r3, [sp, #0]
 8108f64:	3303      	adds	r3, #3
 8108f66:	e7f3      	b.n	8108f50 <_dtoa_r+0xa0>
 8108f68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8108f6c:	2200      	movs	r2, #0
 8108f6e:	ec51 0b17 	vmov	r0, r1, d7
 8108f72:	2300      	movs	r3, #0
 8108f74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8108f78:	f7f7 fe2e 	bl	8100bd8 <__aeabi_dcmpeq>
 8108f7c:	4680      	mov	r8, r0
 8108f7e:	b158      	cbz	r0, 8108f98 <_dtoa_r+0xe8>
 8108f80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108f82:	2301      	movs	r3, #1
 8108f84:	6013      	str	r3, [r2, #0]
 8108f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108f88:	2b00      	cmp	r3, #0
 8108f8a:	f000 8551 	beq.w	8109a30 <_dtoa_r+0xb80>
 8108f8e:	488b      	ldr	r0, [pc, #556]	; (81091bc <_dtoa_r+0x30c>)
 8108f90:	6018      	str	r0, [r3, #0]
 8108f92:	1e43      	subs	r3, r0, #1
 8108f94:	9300      	str	r3, [sp, #0]
 8108f96:	e7dd      	b.n	8108f54 <_dtoa_r+0xa4>
 8108f98:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8108f9c:	aa12      	add	r2, sp, #72	; 0x48
 8108f9e:	a913      	add	r1, sp, #76	; 0x4c
 8108fa0:	4620      	mov	r0, r4
 8108fa2:	f001 fd77 	bl	810aa94 <__d2b>
 8108fa6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8108faa:	4683      	mov	fp, r0
 8108fac:	2d00      	cmp	r5, #0
 8108fae:	d07c      	beq.n	81090aa <_dtoa_r+0x1fa>
 8108fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108fb2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8108fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108fba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8108fbe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8108fc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8108fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8108fca:	4b7d      	ldr	r3, [pc, #500]	; (81091c0 <_dtoa_r+0x310>)
 8108fcc:	2200      	movs	r2, #0
 8108fce:	4630      	mov	r0, r6
 8108fd0:	4639      	mov	r1, r7
 8108fd2:	f7f7 f9e1 	bl	8100398 <__aeabi_dsub>
 8108fd6:	a36e      	add	r3, pc, #440	; (adr r3, 8109190 <_dtoa_r+0x2e0>)
 8108fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fdc:	f7f7 fb94 	bl	8100708 <__aeabi_dmul>
 8108fe0:	a36d      	add	r3, pc, #436	; (adr r3, 8109198 <_dtoa_r+0x2e8>)
 8108fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108fe6:	f7f7 f9d9 	bl	810039c <__adddf3>
 8108fea:	4606      	mov	r6, r0
 8108fec:	4628      	mov	r0, r5
 8108fee:	460f      	mov	r7, r1
 8108ff0:	f7f7 fb20 	bl	8100634 <__aeabi_i2d>
 8108ff4:	a36a      	add	r3, pc, #424	; (adr r3, 81091a0 <_dtoa_r+0x2f0>)
 8108ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108ffa:	f7f7 fb85 	bl	8100708 <__aeabi_dmul>
 8108ffe:	4602      	mov	r2, r0
 8109000:	460b      	mov	r3, r1
 8109002:	4630      	mov	r0, r6
 8109004:	4639      	mov	r1, r7
 8109006:	f7f7 f9c9 	bl	810039c <__adddf3>
 810900a:	4606      	mov	r6, r0
 810900c:	460f      	mov	r7, r1
 810900e:	f7f7 fe2b 	bl	8100c68 <__aeabi_d2iz>
 8109012:	2200      	movs	r2, #0
 8109014:	4682      	mov	sl, r0
 8109016:	2300      	movs	r3, #0
 8109018:	4630      	mov	r0, r6
 810901a:	4639      	mov	r1, r7
 810901c:	f7f7 fde6 	bl	8100bec <__aeabi_dcmplt>
 8109020:	b148      	cbz	r0, 8109036 <_dtoa_r+0x186>
 8109022:	4650      	mov	r0, sl
 8109024:	f7f7 fb06 	bl	8100634 <__aeabi_i2d>
 8109028:	4632      	mov	r2, r6
 810902a:	463b      	mov	r3, r7
 810902c:	f7f7 fdd4 	bl	8100bd8 <__aeabi_dcmpeq>
 8109030:	b908      	cbnz	r0, 8109036 <_dtoa_r+0x186>
 8109032:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109036:	f1ba 0f16 	cmp.w	sl, #22
 810903a:	d854      	bhi.n	81090e6 <_dtoa_r+0x236>
 810903c:	4b61      	ldr	r3, [pc, #388]	; (81091c4 <_dtoa_r+0x314>)
 810903e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8109042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109046:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810904a:	f7f7 fdcf 	bl	8100bec <__aeabi_dcmplt>
 810904e:	2800      	cmp	r0, #0
 8109050:	d04b      	beq.n	81090ea <_dtoa_r+0x23a>
 8109052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109056:	2300      	movs	r3, #0
 8109058:	930e      	str	r3, [sp, #56]	; 0x38
 810905a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810905c:	1b5d      	subs	r5, r3, r5
 810905e:	1e6b      	subs	r3, r5, #1
 8109060:	9304      	str	r3, [sp, #16]
 8109062:	bf43      	ittte	mi
 8109064:	2300      	movmi	r3, #0
 8109066:	f1c5 0801 	rsbmi	r8, r5, #1
 810906a:	9304      	strmi	r3, [sp, #16]
 810906c:	f04f 0800 	movpl.w	r8, #0
 8109070:	f1ba 0f00 	cmp.w	sl, #0
 8109074:	db3b      	blt.n	81090ee <_dtoa_r+0x23e>
 8109076:	9b04      	ldr	r3, [sp, #16]
 8109078:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 810907c:	4453      	add	r3, sl
 810907e:	9304      	str	r3, [sp, #16]
 8109080:	2300      	movs	r3, #0
 8109082:	9306      	str	r3, [sp, #24]
 8109084:	9b05      	ldr	r3, [sp, #20]
 8109086:	2b09      	cmp	r3, #9
 8109088:	d869      	bhi.n	810915e <_dtoa_r+0x2ae>
 810908a:	2b05      	cmp	r3, #5
 810908c:	bfc4      	itt	gt
 810908e:	3b04      	subgt	r3, #4
 8109090:	9305      	strgt	r3, [sp, #20]
 8109092:	9b05      	ldr	r3, [sp, #20]
 8109094:	f1a3 0302 	sub.w	r3, r3, #2
 8109098:	bfcc      	ite	gt
 810909a:	2500      	movgt	r5, #0
 810909c:	2501      	movle	r5, #1
 810909e:	2b03      	cmp	r3, #3
 81090a0:	d869      	bhi.n	8109176 <_dtoa_r+0x2c6>
 81090a2:	e8df f003 	tbb	[pc, r3]
 81090a6:	4e2c      	.short	0x4e2c
 81090a8:	5a4c      	.short	0x5a4c
 81090aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 81090ae:	441d      	add	r5, r3
 81090b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81090b4:	2b20      	cmp	r3, #32
 81090b6:	bfc1      	itttt	gt
 81090b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 81090bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81090c0:	fa09 f303 	lslgt.w	r3, r9, r3
 81090c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 81090c8:	bfda      	itte	le
 81090ca:	f1c3 0320 	rsble	r3, r3, #32
 81090ce:	fa06 f003 	lslle.w	r0, r6, r3
 81090d2:	4318      	orrgt	r0, r3
 81090d4:	f7f7 fa9e 	bl	8100614 <__aeabi_ui2d>
 81090d8:	2301      	movs	r3, #1
 81090da:	4606      	mov	r6, r0
 81090dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81090e0:	3d01      	subs	r5, #1
 81090e2:	9310      	str	r3, [sp, #64]	; 0x40
 81090e4:	e771      	b.n	8108fca <_dtoa_r+0x11a>
 81090e6:	2301      	movs	r3, #1
 81090e8:	e7b6      	b.n	8109058 <_dtoa_r+0x1a8>
 81090ea:	900e      	str	r0, [sp, #56]	; 0x38
 81090ec:	e7b5      	b.n	810905a <_dtoa_r+0x1aa>
 81090ee:	f1ca 0300 	rsb	r3, sl, #0
 81090f2:	9306      	str	r3, [sp, #24]
 81090f4:	2300      	movs	r3, #0
 81090f6:	eba8 080a 	sub.w	r8, r8, sl
 81090fa:	930d      	str	r3, [sp, #52]	; 0x34
 81090fc:	e7c2      	b.n	8109084 <_dtoa_r+0x1d4>
 81090fe:	2300      	movs	r3, #0
 8109100:	9308      	str	r3, [sp, #32]
 8109102:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109104:	2b00      	cmp	r3, #0
 8109106:	dc39      	bgt.n	810917c <_dtoa_r+0x2cc>
 8109108:	f04f 0901 	mov.w	r9, #1
 810910c:	f8cd 9004 	str.w	r9, [sp, #4]
 8109110:	464b      	mov	r3, r9
 8109112:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8109116:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8109118:	2200      	movs	r2, #0
 810911a:	6042      	str	r2, [r0, #4]
 810911c:	2204      	movs	r2, #4
 810911e:	f102 0614 	add.w	r6, r2, #20
 8109122:	429e      	cmp	r6, r3
 8109124:	6841      	ldr	r1, [r0, #4]
 8109126:	d92f      	bls.n	8109188 <_dtoa_r+0x2d8>
 8109128:	4620      	mov	r0, r4
 810912a:	f001 f8cb 	bl	810a2c4 <_Balloc>
 810912e:	9000      	str	r0, [sp, #0]
 8109130:	2800      	cmp	r0, #0
 8109132:	d14b      	bne.n	81091cc <_dtoa_r+0x31c>
 8109134:	4b24      	ldr	r3, [pc, #144]	; (81091c8 <_dtoa_r+0x318>)
 8109136:	4602      	mov	r2, r0
 8109138:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810913c:	e6d1      	b.n	8108ee2 <_dtoa_r+0x32>
 810913e:	2301      	movs	r3, #1
 8109140:	e7de      	b.n	8109100 <_dtoa_r+0x250>
 8109142:	2300      	movs	r3, #0
 8109144:	9308      	str	r3, [sp, #32]
 8109146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109148:	eb0a 0903 	add.w	r9, sl, r3
 810914c:	f109 0301 	add.w	r3, r9, #1
 8109150:	2b01      	cmp	r3, #1
 8109152:	9301      	str	r3, [sp, #4]
 8109154:	bfb8      	it	lt
 8109156:	2301      	movlt	r3, #1
 8109158:	e7dd      	b.n	8109116 <_dtoa_r+0x266>
 810915a:	2301      	movs	r3, #1
 810915c:	e7f2      	b.n	8109144 <_dtoa_r+0x294>
 810915e:	2501      	movs	r5, #1
 8109160:	2300      	movs	r3, #0
 8109162:	9305      	str	r3, [sp, #20]
 8109164:	9508      	str	r5, [sp, #32]
 8109166:	f04f 39ff 	mov.w	r9, #4294967295
 810916a:	2200      	movs	r2, #0
 810916c:	f8cd 9004 	str.w	r9, [sp, #4]
 8109170:	2312      	movs	r3, #18
 8109172:	9209      	str	r2, [sp, #36]	; 0x24
 8109174:	e7cf      	b.n	8109116 <_dtoa_r+0x266>
 8109176:	2301      	movs	r3, #1
 8109178:	9308      	str	r3, [sp, #32]
 810917a:	e7f4      	b.n	8109166 <_dtoa_r+0x2b6>
 810917c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8109180:	f8cd 9004 	str.w	r9, [sp, #4]
 8109184:	464b      	mov	r3, r9
 8109186:	e7c6      	b.n	8109116 <_dtoa_r+0x266>
 8109188:	3101      	adds	r1, #1
 810918a:	6041      	str	r1, [r0, #4]
 810918c:	0052      	lsls	r2, r2, #1
 810918e:	e7c6      	b.n	810911e <_dtoa_r+0x26e>
 8109190:	636f4361 	.word	0x636f4361
 8109194:	3fd287a7 	.word	0x3fd287a7
 8109198:	8b60c8b3 	.word	0x8b60c8b3
 810919c:	3fc68a28 	.word	0x3fc68a28
 81091a0:	509f79fb 	.word	0x509f79fb
 81091a4:	3fd34413 	.word	0x3fd34413
 81091a8:	0810b696 	.word	0x0810b696
 81091ac:	0810b6ad 	.word	0x0810b6ad
 81091b0:	7ff00000 	.word	0x7ff00000
 81091b4:	0810b692 	.word	0x0810b692
 81091b8:	0810b689 	.word	0x0810b689
 81091bc:	0810b50d 	.word	0x0810b50d
 81091c0:	3ff80000 	.word	0x3ff80000
 81091c4:	0810b828 	.word	0x0810b828
 81091c8:	0810b70c 	.word	0x0810b70c
 81091cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81091ce:	9a00      	ldr	r2, [sp, #0]
 81091d0:	601a      	str	r2, [r3, #0]
 81091d2:	9b01      	ldr	r3, [sp, #4]
 81091d4:	2b0e      	cmp	r3, #14
 81091d6:	f200 80ad 	bhi.w	8109334 <_dtoa_r+0x484>
 81091da:	2d00      	cmp	r5, #0
 81091dc:	f000 80aa 	beq.w	8109334 <_dtoa_r+0x484>
 81091e0:	f1ba 0f00 	cmp.w	sl, #0
 81091e4:	dd36      	ble.n	8109254 <_dtoa_r+0x3a4>
 81091e6:	4ac3      	ldr	r2, [pc, #780]	; (81094f4 <_dtoa_r+0x644>)
 81091e8:	f00a 030f 	and.w	r3, sl, #15
 81091ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81091f0:	ed93 7b00 	vldr	d7, [r3]
 81091f4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81091f8:	ea4f 172a 	mov.w	r7, sl, asr #4
 81091fc:	eeb0 8a47 	vmov.f32	s16, s14
 8109200:	eef0 8a67 	vmov.f32	s17, s15
 8109204:	d016      	beq.n	8109234 <_dtoa_r+0x384>
 8109206:	4bbc      	ldr	r3, [pc, #752]	; (81094f8 <_dtoa_r+0x648>)
 8109208:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810920c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8109210:	f7f7 fba4 	bl	810095c <__aeabi_ddiv>
 8109214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109218:	f007 070f 	and.w	r7, r7, #15
 810921c:	2503      	movs	r5, #3
 810921e:	4eb6      	ldr	r6, [pc, #728]	; (81094f8 <_dtoa_r+0x648>)
 8109220:	b957      	cbnz	r7, 8109238 <_dtoa_r+0x388>
 8109222:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8109226:	ec53 2b18 	vmov	r2, r3, d8
 810922a:	f7f7 fb97 	bl	810095c <__aeabi_ddiv>
 810922e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109232:	e029      	b.n	8109288 <_dtoa_r+0x3d8>
 8109234:	2502      	movs	r5, #2
 8109236:	e7f2      	b.n	810921e <_dtoa_r+0x36e>
 8109238:	07f9      	lsls	r1, r7, #31
 810923a:	d508      	bpl.n	810924e <_dtoa_r+0x39e>
 810923c:	ec51 0b18 	vmov	r0, r1, d8
 8109240:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109244:	f7f7 fa60 	bl	8100708 <__aeabi_dmul>
 8109248:	ec41 0b18 	vmov	d8, r0, r1
 810924c:	3501      	adds	r5, #1
 810924e:	107f      	asrs	r7, r7, #1
 8109250:	3608      	adds	r6, #8
 8109252:	e7e5      	b.n	8109220 <_dtoa_r+0x370>
 8109254:	f000 80a6 	beq.w	81093a4 <_dtoa_r+0x4f4>
 8109258:	f1ca 0600 	rsb	r6, sl, #0
 810925c:	4ba5      	ldr	r3, [pc, #660]	; (81094f4 <_dtoa_r+0x644>)
 810925e:	4fa6      	ldr	r7, [pc, #664]	; (81094f8 <_dtoa_r+0x648>)
 8109260:	f006 020f 	and.w	r2, r6, #15
 8109264:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109268:	e9d3 2300 	ldrd	r2, r3, [r3]
 810926c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109270:	f7f7 fa4a 	bl	8100708 <__aeabi_dmul>
 8109274:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109278:	1136      	asrs	r6, r6, #4
 810927a:	2300      	movs	r3, #0
 810927c:	2502      	movs	r5, #2
 810927e:	2e00      	cmp	r6, #0
 8109280:	f040 8085 	bne.w	810938e <_dtoa_r+0x4de>
 8109284:	2b00      	cmp	r3, #0
 8109286:	d1d2      	bne.n	810922e <_dtoa_r+0x37e>
 8109288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810928a:	2b00      	cmp	r3, #0
 810928c:	f000 808c 	beq.w	81093a8 <_dtoa_r+0x4f8>
 8109290:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109294:	4b99      	ldr	r3, [pc, #612]	; (81094fc <_dtoa_r+0x64c>)
 8109296:	2200      	movs	r2, #0
 8109298:	4630      	mov	r0, r6
 810929a:	4639      	mov	r1, r7
 810929c:	f7f7 fca6 	bl	8100bec <__aeabi_dcmplt>
 81092a0:	2800      	cmp	r0, #0
 81092a2:	f000 8081 	beq.w	81093a8 <_dtoa_r+0x4f8>
 81092a6:	9b01      	ldr	r3, [sp, #4]
 81092a8:	2b00      	cmp	r3, #0
 81092aa:	d07d      	beq.n	81093a8 <_dtoa_r+0x4f8>
 81092ac:	f1b9 0f00 	cmp.w	r9, #0
 81092b0:	dd3c      	ble.n	810932c <_dtoa_r+0x47c>
 81092b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 81092b6:	9307      	str	r3, [sp, #28]
 81092b8:	2200      	movs	r2, #0
 81092ba:	4b91      	ldr	r3, [pc, #580]	; (8109500 <_dtoa_r+0x650>)
 81092bc:	4630      	mov	r0, r6
 81092be:	4639      	mov	r1, r7
 81092c0:	f7f7 fa22 	bl	8100708 <__aeabi_dmul>
 81092c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81092c8:	3501      	adds	r5, #1
 81092ca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 81092ce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81092d2:	4628      	mov	r0, r5
 81092d4:	f7f7 f9ae 	bl	8100634 <__aeabi_i2d>
 81092d8:	4632      	mov	r2, r6
 81092da:	463b      	mov	r3, r7
 81092dc:	f7f7 fa14 	bl	8100708 <__aeabi_dmul>
 81092e0:	4b88      	ldr	r3, [pc, #544]	; (8109504 <_dtoa_r+0x654>)
 81092e2:	2200      	movs	r2, #0
 81092e4:	f7f7 f85a 	bl	810039c <__adddf3>
 81092e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 81092ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81092f0:	9303      	str	r3, [sp, #12]
 81092f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81092f4:	2b00      	cmp	r3, #0
 81092f6:	d15c      	bne.n	81093b2 <_dtoa_r+0x502>
 81092f8:	4b83      	ldr	r3, [pc, #524]	; (8109508 <_dtoa_r+0x658>)
 81092fa:	2200      	movs	r2, #0
 81092fc:	4630      	mov	r0, r6
 81092fe:	4639      	mov	r1, r7
 8109300:	f7f7 f84a 	bl	8100398 <__aeabi_dsub>
 8109304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109308:	4606      	mov	r6, r0
 810930a:	460f      	mov	r7, r1
 810930c:	f7f7 fc8c 	bl	8100c28 <__aeabi_dcmpgt>
 8109310:	2800      	cmp	r0, #0
 8109312:	f040 8296 	bne.w	8109842 <_dtoa_r+0x992>
 8109316:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810931a:	4630      	mov	r0, r6
 810931c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109320:	4639      	mov	r1, r7
 8109322:	f7f7 fc63 	bl	8100bec <__aeabi_dcmplt>
 8109326:	2800      	cmp	r0, #0
 8109328:	f040 8288 	bne.w	810983c <_dtoa_r+0x98c>
 810932c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109330:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8109334:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109336:	2b00      	cmp	r3, #0
 8109338:	f2c0 8158 	blt.w	81095ec <_dtoa_r+0x73c>
 810933c:	f1ba 0f0e 	cmp.w	sl, #14
 8109340:	f300 8154 	bgt.w	81095ec <_dtoa_r+0x73c>
 8109344:	4b6b      	ldr	r3, [pc, #428]	; (81094f4 <_dtoa_r+0x644>)
 8109346:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810934a:	e9d3 8900 	ldrd	r8, r9, [r3]
 810934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109350:	2b00      	cmp	r3, #0
 8109352:	f280 80e3 	bge.w	810951c <_dtoa_r+0x66c>
 8109356:	9b01      	ldr	r3, [sp, #4]
 8109358:	2b00      	cmp	r3, #0
 810935a:	f300 80df 	bgt.w	810951c <_dtoa_r+0x66c>
 810935e:	f040 826d 	bne.w	810983c <_dtoa_r+0x98c>
 8109362:	4b69      	ldr	r3, [pc, #420]	; (8109508 <_dtoa_r+0x658>)
 8109364:	2200      	movs	r2, #0
 8109366:	4640      	mov	r0, r8
 8109368:	4649      	mov	r1, r9
 810936a:	f7f7 f9cd 	bl	8100708 <__aeabi_dmul>
 810936e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109372:	f7f7 fc4f 	bl	8100c14 <__aeabi_dcmpge>
 8109376:	9e01      	ldr	r6, [sp, #4]
 8109378:	4637      	mov	r7, r6
 810937a:	2800      	cmp	r0, #0
 810937c:	f040 8243 	bne.w	8109806 <_dtoa_r+0x956>
 8109380:	9d00      	ldr	r5, [sp, #0]
 8109382:	2331      	movs	r3, #49	; 0x31
 8109384:	f805 3b01 	strb.w	r3, [r5], #1
 8109388:	f10a 0a01 	add.w	sl, sl, #1
 810938c:	e23f      	b.n	810980e <_dtoa_r+0x95e>
 810938e:	07f2      	lsls	r2, r6, #31
 8109390:	d505      	bpl.n	810939e <_dtoa_r+0x4ee>
 8109392:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109396:	f7f7 f9b7 	bl	8100708 <__aeabi_dmul>
 810939a:	3501      	adds	r5, #1
 810939c:	2301      	movs	r3, #1
 810939e:	1076      	asrs	r6, r6, #1
 81093a0:	3708      	adds	r7, #8
 81093a2:	e76c      	b.n	810927e <_dtoa_r+0x3ce>
 81093a4:	2502      	movs	r5, #2
 81093a6:	e76f      	b.n	8109288 <_dtoa_r+0x3d8>
 81093a8:	9b01      	ldr	r3, [sp, #4]
 81093aa:	f8cd a01c 	str.w	sl, [sp, #28]
 81093ae:	930c      	str	r3, [sp, #48]	; 0x30
 81093b0:	e78d      	b.n	81092ce <_dtoa_r+0x41e>
 81093b2:	9900      	ldr	r1, [sp, #0]
 81093b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 81093b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 81093b8:	4b4e      	ldr	r3, [pc, #312]	; (81094f4 <_dtoa_r+0x644>)
 81093ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 81093be:	4401      	add	r1, r0
 81093c0:	9102      	str	r1, [sp, #8]
 81093c2:	9908      	ldr	r1, [sp, #32]
 81093c4:	eeb0 8a47 	vmov.f32	s16, s14
 81093c8:	eef0 8a67 	vmov.f32	s17, s15
 81093cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81093d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 81093d4:	2900      	cmp	r1, #0
 81093d6:	d045      	beq.n	8109464 <_dtoa_r+0x5b4>
 81093d8:	494c      	ldr	r1, [pc, #304]	; (810950c <_dtoa_r+0x65c>)
 81093da:	2000      	movs	r0, #0
 81093dc:	f7f7 fabe 	bl	810095c <__aeabi_ddiv>
 81093e0:	ec53 2b18 	vmov	r2, r3, d8
 81093e4:	f7f6 ffd8 	bl	8100398 <__aeabi_dsub>
 81093e8:	9d00      	ldr	r5, [sp, #0]
 81093ea:	ec41 0b18 	vmov	d8, r0, r1
 81093ee:	4639      	mov	r1, r7
 81093f0:	4630      	mov	r0, r6
 81093f2:	f7f7 fc39 	bl	8100c68 <__aeabi_d2iz>
 81093f6:	900c      	str	r0, [sp, #48]	; 0x30
 81093f8:	f7f7 f91c 	bl	8100634 <__aeabi_i2d>
 81093fc:	4602      	mov	r2, r0
 81093fe:	460b      	mov	r3, r1
 8109400:	4630      	mov	r0, r6
 8109402:	4639      	mov	r1, r7
 8109404:	f7f6 ffc8 	bl	8100398 <__aeabi_dsub>
 8109408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810940a:	3330      	adds	r3, #48	; 0x30
 810940c:	f805 3b01 	strb.w	r3, [r5], #1
 8109410:	ec53 2b18 	vmov	r2, r3, d8
 8109414:	4606      	mov	r6, r0
 8109416:	460f      	mov	r7, r1
 8109418:	f7f7 fbe8 	bl	8100bec <__aeabi_dcmplt>
 810941c:	2800      	cmp	r0, #0
 810941e:	d165      	bne.n	81094ec <_dtoa_r+0x63c>
 8109420:	4632      	mov	r2, r6
 8109422:	463b      	mov	r3, r7
 8109424:	4935      	ldr	r1, [pc, #212]	; (81094fc <_dtoa_r+0x64c>)
 8109426:	2000      	movs	r0, #0
 8109428:	f7f6 ffb6 	bl	8100398 <__aeabi_dsub>
 810942c:	ec53 2b18 	vmov	r2, r3, d8
 8109430:	f7f7 fbdc 	bl	8100bec <__aeabi_dcmplt>
 8109434:	2800      	cmp	r0, #0
 8109436:	f040 80b9 	bne.w	81095ac <_dtoa_r+0x6fc>
 810943a:	9b02      	ldr	r3, [sp, #8]
 810943c:	429d      	cmp	r5, r3
 810943e:	f43f af75 	beq.w	810932c <_dtoa_r+0x47c>
 8109442:	4b2f      	ldr	r3, [pc, #188]	; (8109500 <_dtoa_r+0x650>)
 8109444:	ec51 0b18 	vmov	r0, r1, d8
 8109448:	2200      	movs	r2, #0
 810944a:	f7f7 f95d 	bl	8100708 <__aeabi_dmul>
 810944e:	4b2c      	ldr	r3, [pc, #176]	; (8109500 <_dtoa_r+0x650>)
 8109450:	ec41 0b18 	vmov	d8, r0, r1
 8109454:	2200      	movs	r2, #0
 8109456:	4630      	mov	r0, r6
 8109458:	4639      	mov	r1, r7
 810945a:	f7f7 f955 	bl	8100708 <__aeabi_dmul>
 810945e:	4606      	mov	r6, r0
 8109460:	460f      	mov	r7, r1
 8109462:	e7c4      	b.n	81093ee <_dtoa_r+0x53e>
 8109464:	ec51 0b17 	vmov	r0, r1, d7
 8109468:	f7f7 f94e 	bl	8100708 <__aeabi_dmul>
 810946c:	9b02      	ldr	r3, [sp, #8]
 810946e:	9d00      	ldr	r5, [sp, #0]
 8109470:	930c      	str	r3, [sp, #48]	; 0x30
 8109472:	ec41 0b18 	vmov	d8, r0, r1
 8109476:	4639      	mov	r1, r7
 8109478:	4630      	mov	r0, r6
 810947a:	f7f7 fbf5 	bl	8100c68 <__aeabi_d2iz>
 810947e:	9011      	str	r0, [sp, #68]	; 0x44
 8109480:	f7f7 f8d8 	bl	8100634 <__aeabi_i2d>
 8109484:	4602      	mov	r2, r0
 8109486:	460b      	mov	r3, r1
 8109488:	4630      	mov	r0, r6
 810948a:	4639      	mov	r1, r7
 810948c:	f7f6 ff84 	bl	8100398 <__aeabi_dsub>
 8109490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109492:	3330      	adds	r3, #48	; 0x30
 8109494:	f805 3b01 	strb.w	r3, [r5], #1
 8109498:	9b02      	ldr	r3, [sp, #8]
 810949a:	429d      	cmp	r5, r3
 810949c:	4606      	mov	r6, r0
 810949e:	460f      	mov	r7, r1
 81094a0:	f04f 0200 	mov.w	r2, #0
 81094a4:	d134      	bne.n	8109510 <_dtoa_r+0x660>
 81094a6:	4b19      	ldr	r3, [pc, #100]	; (810950c <_dtoa_r+0x65c>)
 81094a8:	ec51 0b18 	vmov	r0, r1, d8
 81094ac:	f7f6 ff76 	bl	810039c <__adddf3>
 81094b0:	4602      	mov	r2, r0
 81094b2:	460b      	mov	r3, r1
 81094b4:	4630      	mov	r0, r6
 81094b6:	4639      	mov	r1, r7
 81094b8:	f7f7 fbb6 	bl	8100c28 <__aeabi_dcmpgt>
 81094bc:	2800      	cmp	r0, #0
 81094be:	d175      	bne.n	81095ac <_dtoa_r+0x6fc>
 81094c0:	ec53 2b18 	vmov	r2, r3, d8
 81094c4:	4911      	ldr	r1, [pc, #68]	; (810950c <_dtoa_r+0x65c>)
 81094c6:	2000      	movs	r0, #0
 81094c8:	f7f6 ff66 	bl	8100398 <__aeabi_dsub>
 81094cc:	4602      	mov	r2, r0
 81094ce:	460b      	mov	r3, r1
 81094d0:	4630      	mov	r0, r6
 81094d2:	4639      	mov	r1, r7
 81094d4:	f7f7 fb8a 	bl	8100bec <__aeabi_dcmplt>
 81094d8:	2800      	cmp	r0, #0
 81094da:	f43f af27 	beq.w	810932c <_dtoa_r+0x47c>
 81094de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81094e0:	1e6b      	subs	r3, r5, #1
 81094e2:	930c      	str	r3, [sp, #48]	; 0x30
 81094e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 81094e8:	2b30      	cmp	r3, #48	; 0x30
 81094ea:	d0f8      	beq.n	81094de <_dtoa_r+0x62e>
 81094ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 81094f0:	e04a      	b.n	8109588 <_dtoa_r+0x6d8>
 81094f2:	bf00      	nop
 81094f4:	0810b828 	.word	0x0810b828
 81094f8:	0810b800 	.word	0x0810b800
 81094fc:	3ff00000 	.word	0x3ff00000
 8109500:	40240000 	.word	0x40240000
 8109504:	401c0000 	.word	0x401c0000
 8109508:	40140000 	.word	0x40140000
 810950c:	3fe00000 	.word	0x3fe00000
 8109510:	4baf      	ldr	r3, [pc, #700]	; (81097d0 <_dtoa_r+0x920>)
 8109512:	f7f7 f8f9 	bl	8100708 <__aeabi_dmul>
 8109516:	4606      	mov	r6, r0
 8109518:	460f      	mov	r7, r1
 810951a:	e7ac      	b.n	8109476 <_dtoa_r+0x5c6>
 810951c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109520:	9d00      	ldr	r5, [sp, #0]
 8109522:	4642      	mov	r2, r8
 8109524:	464b      	mov	r3, r9
 8109526:	4630      	mov	r0, r6
 8109528:	4639      	mov	r1, r7
 810952a:	f7f7 fa17 	bl	810095c <__aeabi_ddiv>
 810952e:	f7f7 fb9b 	bl	8100c68 <__aeabi_d2iz>
 8109532:	9002      	str	r0, [sp, #8]
 8109534:	f7f7 f87e 	bl	8100634 <__aeabi_i2d>
 8109538:	4642      	mov	r2, r8
 810953a:	464b      	mov	r3, r9
 810953c:	f7f7 f8e4 	bl	8100708 <__aeabi_dmul>
 8109540:	4602      	mov	r2, r0
 8109542:	460b      	mov	r3, r1
 8109544:	4630      	mov	r0, r6
 8109546:	4639      	mov	r1, r7
 8109548:	f7f6 ff26 	bl	8100398 <__aeabi_dsub>
 810954c:	9e02      	ldr	r6, [sp, #8]
 810954e:	9f01      	ldr	r7, [sp, #4]
 8109550:	3630      	adds	r6, #48	; 0x30
 8109552:	f805 6b01 	strb.w	r6, [r5], #1
 8109556:	9e00      	ldr	r6, [sp, #0]
 8109558:	1bae      	subs	r6, r5, r6
 810955a:	42b7      	cmp	r7, r6
 810955c:	4602      	mov	r2, r0
 810955e:	460b      	mov	r3, r1
 8109560:	d137      	bne.n	81095d2 <_dtoa_r+0x722>
 8109562:	f7f6 ff1b 	bl	810039c <__adddf3>
 8109566:	4642      	mov	r2, r8
 8109568:	464b      	mov	r3, r9
 810956a:	4606      	mov	r6, r0
 810956c:	460f      	mov	r7, r1
 810956e:	f7f7 fb5b 	bl	8100c28 <__aeabi_dcmpgt>
 8109572:	b9c8      	cbnz	r0, 81095a8 <_dtoa_r+0x6f8>
 8109574:	4642      	mov	r2, r8
 8109576:	464b      	mov	r3, r9
 8109578:	4630      	mov	r0, r6
 810957a:	4639      	mov	r1, r7
 810957c:	f7f7 fb2c 	bl	8100bd8 <__aeabi_dcmpeq>
 8109580:	b110      	cbz	r0, 8109588 <_dtoa_r+0x6d8>
 8109582:	9b02      	ldr	r3, [sp, #8]
 8109584:	07d9      	lsls	r1, r3, #31
 8109586:	d40f      	bmi.n	81095a8 <_dtoa_r+0x6f8>
 8109588:	4620      	mov	r0, r4
 810958a:	4659      	mov	r1, fp
 810958c:	f000 feda 	bl	810a344 <_Bfree>
 8109590:	2300      	movs	r3, #0
 8109592:	702b      	strb	r3, [r5, #0]
 8109594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109596:	f10a 0001 	add.w	r0, sl, #1
 810959a:	6018      	str	r0, [r3, #0]
 810959c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810959e:	2b00      	cmp	r3, #0
 81095a0:	f43f acd8 	beq.w	8108f54 <_dtoa_r+0xa4>
 81095a4:	601d      	str	r5, [r3, #0]
 81095a6:	e4d5      	b.n	8108f54 <_dtoa_r+0xa4>
 81095a8:	f8cd a01c 	str.w	sl, [sp, #28]
 81095ac:	462b      	mov	r3, r5
 81095ae:	461d      	mov	r5, r3
 81095b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81095b4:	2a39      	cmp	r2, #57	; 0x39
 81095b6:	d108      	bne.n	81095ca <_dtoa_r+0x71a>
 81095b8:	9a00      	ldr	r2, [sp, #0]
 81095ba:	429a      	cmp	r2, r3
 81095bc:	d1f7      	bne.n	81095ae <_dtoa_r+0x6fe>
 81095be:	9a07      	ldr	r2, [sp, #28]
 81095c0:	9900      	ldr	r1, [sp, #0]
 81095c2:	3201      	adds	r2, #1
 81095c4:	9207      	str	r2, [sp, #28]
 81095c6:	2230      	movs	r2, #48	; 0x30
 81095c8:	700a      	strb	r2, [r1, #0]
 81095ca:	781a      	ldrb	r2, [r3, #0]
 81095cc:	3201      	adds	r2, #1
 81095ce:	701a      	strb	r2, [r3, #0]
 81095d0:	e78c      	b.n	81094ec <_dtoa_r+0x63c>
 81095d2:	4b7f      	ldr	r3, [pc, #508]	; (81097d0 <_dtoa_r+0x920>)
 81095d4:	2200      	movs	r2, #0
 81095d6:	f7f7 f897 	bl	8100708 <__aeabi_dmul>
 81095da:	2200      	movs	r2, #0
 81095dc:	2300      	movs	r3, #0
 81095de:	4606      	mov	r6, r0
 81095e0:	460f      	mov	r7, r1
 81095e2:	f7f7 faf9 	bl	8100bd8 <__aeabi_dcmpeq>
 81095e6:	2800      	cmp	r0, #0
 81095e8:	d09b      	beq.n	8109522 <_dtoa_r+0x672>
 81095ea:	e7cd      	b.n	8109588 <_dtoa_r+0x6d8>
 81095ec:	9a08      	ldr	r2, [sp, #32]
 81095ee:	2a00      	cmp	r2, #0
 81095f0:	f000 80c4 	beq.w	810977c <_dtoa_r+0x8cc>
 81095f4:	9a05      	ldr	r2, [sp, #20]
 81095f6:	2a01      	cmp	r2, #1
 81095f8:	f300 80a8 	bgt.w	810974c <_dtoa_r+0x89c>
 81095fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 81095fe:	2a00      	cmp	r2, #0
 8109600:	f000 80a0 	beq.w	8109744 <_dtoa_r+0x894>
 8109604:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8109608:	9e06      	ldr	r6, [sp, #24]
 810960a:	4645      	mov	r5, r8
 810960c:	9a04      	ldr	r2, [sp, #16]
 810960e:	2101      	movs	r1, #1
 8109610:	441a      	add	r2, r3
 8109612:	4620      	mov	r0, r4
 8109614:	4498      	add	r8, r3
 8109616:	9204      	str	r2, [sp, #16]
 8109618:	f000 ff9a 	bl	810a550 <__i2b>
 810961c:	4607      	mov	r7, r0
 810961e:	2d00      	cmp	r5, #0
 8109620:	dd0b      	ble.n	810963a <_dtoa_r+0x78a>
 8109622:	9b04      	ldr	r3, [sp, #16]
 8109624:	2b00      	cmp	r3, #0
 8109626:	dd08      	ble.n	810963a <_dtoa_r+0x78a>
 8109628:	42ab      	cmp	r3, r5
 810962a:	9a04      	ldr	r2, [sp, #16]
 810962c:	bfa8      	it	ge
 810962e:	462b      	movge	r3, r5
 8109630:	eba8 0803 	sub.w	r8, r8, r3
 8109634:	1aed      	subs	r5, r5, r3
 8109636:	1ad3      	subs	r3, r2, r3
 8109638:	9304      	str	r3, [sp, #16]
 810963a:	9b06      	ldr	r3, [sp, #24]
 810963c:	b1fb      	cbz	r3, 810967e <_dtoa_r+0x7ce>
 810963e:	9b08      	ldr	r3, [sp, #32]
 8109640:	2b00      	cmp	r3, #0
 8109642:	f000 809f 	beq.w	8109784 <_dtoa_r+0x8d4>
 8109646:	2e00      	cmp	r6, #0
 8109648:	dd11      	ble.n	810966e <_dtoa_r+0x7be>
 810964a:	4639      	mov	r1, r7
 810964c:	4632      	mov	r2, r6
 810964e:	4620      	mov	r0, r4
 8109650:	f001 f83a 	bl	810a6c8 <__pow5mult>
 8109654:	465a      	mov	r2, fp
 8109656:	4601      	mov	r1, r0
 8109658:	4607      	mov	r7, r0
 810965a:	4620      	mov	r0, r4
 810965c:	f000 ff8e 	bl	810a57c <__multiply>
 8109660:	4659      	mov	r1, fp
 8109662:	9007      	str	r0, [sp, #28]
 8109664:	4620      	mov	r0, r4
 8109666:	f000 fe6d 	bl	810a344 <_Bfree>
 810966a:	9b07      	ldr	r3, [sp, #28]
 810966c:	469b      	mov	fp, r3
 810966e:	9b06      	ldr	r3, [sp, #24]
 8109670:	1b9a      	subs	r2, r3, r6
 8109672:	d004      	beq.n	810967e <_dtoa_r+0x7ce>
 8109674:	4659      	mov	r1, fp
 8109676:	4620      	mov	r0, r4
 8109678:	f001 f826 	bl	810a6c8 <__pow5mult>
 810967c:	4683      	mov	fp, r0
 810967e:	2101      	movs	r1, #1
 8109680:	4620      	mov	r0, r4
 8109682:	f000 ff65 	bl	810a550 <__i2b>
 8109686:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109688:	2b00      	cmp	r3, #0
 810968a:	4606      	mov	r6, r0
 810968c:	dd7c      	ble.n	8109788 <_dtoa_r+0x8d8>
 810968e:	461a      	mov	r2, r3
 8109690:	4601      	mov	r1, r0
 8109692:	4620      	mov	r0, r4
 8109694:	f001 f818 	bl	810a6c8 <__pow5mult>
 8109698:	9b05      	ldr	r3, [sp, #20]
 810969a:	2b01      	cmp	r3, #1
 810969c:	4606      	mov	r6, r0
 810969e:	dd76      	ble.n	810978e <_dtoa_r+0x8de>
 81096a0:	2300      	movs	r3, #0
 81096a2:	9306      	str	r3, [sp, #24]
 81096a4:	6933      	ldr	r3, [r6, #16]
 81096a6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 81096aa:	6918      	ldr	r0, [r3, #16]
 81096ac:	f000 ff00 	bl	810a4b0 <__hi0bits>
 81096b0:	f1c0 0020 	rsb	r0, r0, #32
 81096b4:	9b04      	ldr	r3, [sp, #16]
 81096b6:	4418      	add	r0, r3
 81096b8:	f010 001f 	ands.w	r0, r0, #31
 81096bc:	f000 8086 	beq.w	81097cc <_dtoa_r+0x91c>
 81096c0:	f1c0 0320 	rsb	r3, r0, #32
 81096c4:	2b04      	cmp	r3, #4
 81096c6:	dd7f      	ble.n	81097c8 <_dtoa_r+0x918>
 81096c8:	f1c0 001c 	rsb	r0, r0, #28
 81096cc:	9b04      	ldr	r3, [sp, #16]
 81096ce:	4403      	add	r3, r0
 81096d0:	4480      	add	r8, r0
 81096d2:	4405      	add	r5, r0
 81096d4:	9304      	str	r3, [sp, #16]
 81096d6:	f1b8 0f00 	cmp.w	r8, #0
 81096da:	dd05      	ble.n	81096e8 <_dtoa_r+0x838>
 81096dc:	4659      	mov	r1, fp
 81096de:	4642      	mov	r2, r8
 81096e0:	4620      	mov	r0, r4
 81096e2:	f001 f84b 	bl	810a77c <__lshift>
 81096e6:	4683      	mov	fp, r0
 81096e8:	9b04      	ldr	r3, [sp, #16]
 81096ea:	2b00      	cmp	r3, #0
 81096ec:	dd05      	ble.n	81096fa <_dtoa_r+0x84a>
 81096ee:	4631      	mov	r1, r6
 81096f0:	461a      	mov	r2, r3
 81096f2:	4620      	mov	r0, r4
 81096f4:	f001 f842 	bl	810a77c <__lshift>
 81096f8:	4606      	mov	r6, r0
 81096fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81096fc:	2b00      	cmp	r3, #0
 81096fe:	d069      	beq.n	81097d4 <_dtoa_r+0x924>
 8109700:	4631      	mov	r1, r6
 8109702:	4658      	mov	r0, fp
 8109704:	f001 f8a6 	bl	810a854 <__mcmp>
 8109708:	2800      	cmp	r0, #0
 810970a:	da63      	bge.n	81097d4 <_dtoa_r+0x924>
 810970c:	2300      	movs	r3, #0
 810970e:	4659      	mov	r1, fp
 8109710:	220a      	movs	r2, #10
 8109712:	4620      	mov	r0, r4
 8109714:	f000 fe38 	bl	810a388 <__multadd>
 8109718:	9b08      	ldr	r3, [sp, #32]
 810971a:	f10a 3aff 	add.w	sl, sl, #4294967295
 810971e:	4683      	mov	fp, r0
 8109720:	2b00      	cmp	r3, #0
 8109722:	f000 818f 	beq.w	8109a44 <_dtoa_r+0xb94>
 8109726:	4639      	mov	r1, r7
 8109728:	2300      	movs	r3, #0
 810972a:	220a      	movs	r2, #10
 810972c:	4620      	mov	r0, r4
 810972e:	f000 fe2b 	bl	810a388 <__multadd>
 8109732:	f1b9 0f00 	cmp.w	r9, #0
 8109736:	4607      	mov	r7, r0
 8109738:	f300 808e 	bgt.w	8109858 <_dtoa_r+0x9a8>
 810973c:	9b05      	ldr	r3, [sp, #20]
 810973e:	2b02      	cmp	r3, #2
 8109740:	dc50      	bgt.n	81097e4 <_dtoa_r+0x934>
 8109742:	e089      	b.n	8109858 <_dtoa_r+0x9a8>
 8109744:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109746:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810974a:	e75d      	b.n	8109608 <_dtoa_r+0x758>
 810974c:	9b01      	ldr	r3, [sp, #4]
 810974e:	1e5e      	subs	r6, r3, #1
 8109750:	9b06      	ldr	r3, [sp, #24]
 8109752:	42b3      	cmp	r3, r6
 8109754:	bfbf      	itttt	lt
 8109756:	9b06      	ldrlt	r3, [sp, #24]
 8109758:	9606      	strlt	r6, [sp, #24]
 810975a:	1af2      	sublt	r2, r6, r3
 810975c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 810975e:	bfb6      	itet	lt
 8109760:	189b      	addlt	r3, r3, r2
 8109762:	1b9e      	subge	r6, r3, r6
 8109764:	930d      	strlt	r3, [sp, #52]	; 0x34
 8109766:	9b01      	ldr	r3, [sp, #4]
 8109768:	bfb8      	it	lt
 810976a:	2600      	movlt	r6, #0
 810976c:	2b00      	cmp	r3, #0
 810976e:	bfb5      	itete	lt
 8109770:	eba8 0503 	sublt.w	r5, r8, r3
 8109774:	9b01      	ldrge	r3, [sp, #4]
 8109776:	2300      	movlt	r3, #0
 8109778:	4645      	movge	r5, r8
 810977a:	e747      	b.n	810960c <_dtoa_r+0x75c>
 810977c:	9e06      	ldr	r6, [sp, #24]
 810977e:	9f08      	ldr	r7, [sp, #32]
 8109780:	4645      	mov	r5, r8
 8109782:	e74c      	b.n	810961e <_dtoa_r+0x76e>
 8109784:	9a06      	ldr	r2, [sp, #24]
 8109786:	e775      	b.n	8109674 <_dtoa_r+0x7c4>
 8109788:	9b05      	ldr	r3, [sp, #20]
 810978a:	2b01      	cmp	r3, #1
 810978c:	dc18      	bgt.n	81097c0 <_dtoa_r+0x910>
 810978e:	9b02      	ldr	r3, [sp, #8]
 8109790:	b9b3      	cbnz	r3, 81097c0 <_dtoa_r+0x910>
 8109792:	9b03      	ldr	r3, [sp, #12]
 8109794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109798:	b9a3      	cbnz	r3, 81097c4 <_dtoa_r+0x914>
 810979a:	9b03      	ldr	r3, [sp, #12]
 810979c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81097a0:	0d1b      	lsrs	r3, r3, #20
 81097a2:	051b      	lsls	r3, r3, #20
 81097a4:	b12b      	cbz	r3, 81097b2 <_dtoa_r+0x902>
 81097a6:	9b04      	ldr	r3, [sp, #16]
 81097a8:	3301      	adds	r3, #1
 81097aa:	9304      	str	r3, [sp, #16]
 81097ac:	f108 0801 	add.w	r8, r8, #1
 81097b0:	2301      	movs	r3, #1
 81097b2:	9306      	str	r3, [sp, #24]
 81097b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81097b6:	2b00      	cmp	r3, #0
 81097b8:	f47f af74 	bne.w	81096a4 <_dtoa_r+0x7f4>
 81097bc:	2001      	movs	r0, #1
 81097be:	e779      	b.n	81096b4 <_dtoa_r+0x804>
 81097c0:	2300      	movs	r3, #0
 81097c2:	e7f6      	b.n	81097b2 <_dtoa_r+0x902>
 81097c4:	9b02      	ldr	r3, [sp, #8]
 81097c6:	e7f4      	b.n	81097b2 <_dtoa_r+0x902>
 81097c8:	d085      	beq.n	81096d6 <_dtoa_r+0x826>
 81097ca:	4618      	mov	r0, r3
 81097cc:	301c      	adds	r0, #28
 81097ce:	e77d      	b.n	81096cc <_dtoa_r+0x81c>
 81097d0:	40240000 	.word	0x40240000
 81097d4:	9b01      	ldr	r3, [sp, #4]
 81097d6:	2b00      	cmp	r3, #0
 81097d8:	dc38      	bgt.n	810984c <_dtoa_r+0x99c>
 81097da:	9b05      	ldr	r3, [sp, #20]
 81097dc:	2b02      	cmp	r3, #2
 81097de:	dd35      	ble.n	810984c <_dtoa_r+0x99c>
 81097e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 81097e4:	f1b9 0f00 	cmp.w	r9, #0
 81097e8:	d10d      	bne.n	8109806 <_dtoa_r+0x956>
 81097ea:	4631      	mov	r1, r6
 81097ec:	464b      	mov	r3, r9
 81097ee:	2205      	movs	r2, #5
 81097f0:	4620      	mov	r0, r4
 81097f2:	f000 fdc9 	bl	810a388 <__multadd>
 81097f6:	4601      	mov	r1, r0
 81097f8:	4606      	mov	r6, r0
 81097fa:	4658      	mov	r0, fp
 81097fc:	f001 f82a 	bl	810a854 <__mcmp>
 8109800:	2800      	cmp	r0, #0
 8109802:	f73f adbd 	bgt.w	8109380 <_dtoa_r+0x4d0>
 8109806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109808:	9d00      	ldr	r5, [sp, #0]
 810980a:	ea6f 0a03 	mvn.w	sl, r3
 810980e:	f04f 0800 	mov.w	r8, #0
 8109812:	4631      	mov	r1, r6
 8109814:	4620      	mov	r0, r4
 8109816:	f000 fd95 	bl	810a344 <_Bfree>
 810981a:	2f00      	cmp	r7, #0
 810981c:	f43f aeb4 	beq.w	8109588 <_dtoa_r+0x6d8>
 8109820:	f1b8 0f00 	cmp.w	r8, #0
 8109824:	d005      	beq.n	8109832 <_dtoa_r+0x982>
 8109826:	45b8      	cmp	r8, r7
 8109828:	d003      	beq.n	8109832 <_dtoa_r+0x982>
 810982a:	4641      	mov	r1, r8
 810982c:	4620      	mov	r0, r4
 810982e:	f000 fd89 	bl	810a344 <_Bfree>
 8109832:	4639      	mov	r1, r7
 8109834:	4620      	mov	r0, r4
 8109836:	f000 fd85 	bl	810a344 <_Bfree>
 810983a:	e6a5      	b.n	8109588 <_dtoa_r+0x6d8>
 810983c:	2600      	movs	r6, #0
 810983e:	4637      	mov	r7, r6
 8109840:	e7e1      	b.n	8109806 <_dtoa_r+0x956>
 8109842:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8109844:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109848:	4637      	mov	r7, r6
 810984a:	e599      	b.n	8109380 <_dtoa_r+0x4d0>
 810984c:	9b08      	ldr	r3, [sp, #32]
 810984e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109852:	2b00      	cmp	r3, #0
 8109854:	f000 80fd 	beq.w	8109a52 <_dtoa_r+0xba2>
 8109858:	2d00      	cmp	r5, #0
 810985a:	dd05      	ble.n	8109868 <_dtoa_r+0x9b8>
 810985c:	4639      	mov	r1, r7
 810985e:	462a      	mov	r2, r5
 8109860:	4620      	mov	r0, r4
 8109862:	f000 ff8b 	bl	810a77c <__lshift>
 8109866:	4607      	mov	r7, r0
 8109868:	9b06      	ldr	r3, [sp, #24]
 810986a:	2b00      	cmp	r3, #0
 810986c:	d05c      	beq.n	8109928 <_dtoa_r+0xa78>
 810986e:	6879      	ldr	r1, [r7, #4]
 8109870:	4620      	mov	r0, r4
 8109872:	f000 fd27 	bl	810a2c4 <_Balloc>
 8109876:	4605      	mov	r5, r0
 8109878:	b928      	cbnz	r0, 8109886 <_dtoa_r+0x9d6>
 810987a:	4b80      	ldr	r3, [pc, #512]	; (8109a7c <_dtoa_r+0xbcc>)
 810987c:	4602      	mov	r2, r0
 810987e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8109882:	f7ff bb2e 	b.w	8108ee2 <_dtoa_r+0x32>
 8109886:	693a      	ldr	r2, [r7, #16]
 8109888:	3202      	adds	r2, #2
 810988a:	0092      	lsls	r2, r2, #2
 810988c:	f107 010c 	add.w	r1, r7, #12
 8109890:	300c      	adds	r0, #12
 8109892:	f000 fcfd 	bl	810a290 <memcpy>
 8109896:	2201      	movs	r2, #1
 8109898:	4629      	mov	r1, r5
 810989a:	4620      	mov	r0, r4
 810989c:	f000 ff6e 	bl	810a77c <__lshift>
 81098a0:	9b00      	ldr	r3, [sp, #0]
 81098a2:	3301      	adds	r3, #1
 81098a4:	9301      	str	r3, [sp, #4]
 81098a6:	9b00      	ldr	r3, [sp, #0]
 81098a8:	444b      	add	r3, r9
 81098aa:	9307      	str	r3, [sp, #28]
 81098ac:	9b02      	ldr	r3, [sp, #8]
 81098ae:	f003 0301 	and.w	r3, r3, #1
 81098b2:	46b8      	mov	r8, r7
 81098b4:	9306      	str	r3, [sp, #24]
 81098b6:	4607      	mov	r7, r0
 81098b8:	9b01      	ldr	r3, [sp, #4]
 81098ba:	4631      	mov	r1, r6
 81098bc:	3b01      	subs	r3, #1
 81098be:	4658      	mov	r0, fp
 81098c0:	9302      	str	r3, [sp, #8]
 81098c2:	f7ff fa69 	bl	8108d98 <quorem>
 81098c6:	4603      	mov	r3, r0
 81098c8:	3330      	adds	r3, #48	; 0x30
 81098ca:	9004      	str	r0, [sp, #16]
 81098cc:	4641      	mov	r1, r8
 81098ce:	4658      	mov	r0, fp
 81098d0:	9308      	str	r3, [sp, #32]
 81098d2:	f000 ffbf 	bl	810a854 <__mcmp>
 81098d6:	463a      	mov	r2, r7
 81098d8:	4681      	mov	r9, r0
 81098da:	4631      	mov	r1, r6
 81098dc:	4620      	mov	r0, r4
 81098de:	f000 ffd5 	bl	810a88c <__mdiff>
 81098e2:	68c2      	ldr	r2, [r0, #12]
 81098e4:	9b08      	ldr	r3, [sp, #32]
 81098e6:	4605      	mov	r5, r0
 81098e8:	bb02      	cbnz	r2, 810992c <_dtoa_r+0xa7c>
 81098ea:	4601      	mov	r1, r0
 81098ec:	4658      	mov	r0, fp
 81098ee:	f000 ffb1 	bl	810a854 <__mcmp>
 81098f2:	9b08      	ldr	r3, [sp, #32]
 81098f4:	4602      	mov	r2, r0
 81098f6:	4629      	mov	r1, r5
 81098f8:	4620      	mov	r0, r4
 81098fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 81098fe:	f000 fd21 	bl	810a344 <_Bfree>
 8109902:	9b05      	ldr	r3, [sp, #20]
 8109904:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109906:	9d01      	ldr	r5, [sp, #4]
 8109908:	ea43 0102 	orr.w	r1, r3, r2
 810990c:	9b06      	ldr	r3, [sp, #24]
 810990e:	430b      	orrs	r3, r1
 8109910:	9b08      	ldr	r3, [sp, #32]
 8109912:	d10d      	bne.n	8109930 <_dtoa_r+0xa80>
 8109914:	2b39      	cmp	r3, #57	; 0x39
 8109916:	d029      	beq.n	810996c <_dtoa_r+0xabc>
 8109918:	f1b9 0f00 	cmp.w	r9, #0
 810991c:	dd01      	ble.n	8109922 <_dtoa_r+0xa72>
 810991e:	9b04      	ldr	r3, [sp, #16]
 8109920:	3331      	adds	r3, #49	; 0x31
 8109922:	9a02      	ldr	r2, [sp, #8]
 8109924:	7013      	strb	r3, [r2, #0]
 8109926:	e774      	b.n	8109812 <_dtoa_r+0x962>
 8109928:	4638      	mov	r0, r7
 810992a:	e7b9      	b.n	81098a0 <_dtoa_r+0x9f0>
 810992c:	2201      	movs	r2, #1
 810992e:	e7e2      	b.n	81098f6 <_dtoa_r+0xa46>
 8109930:	f1b9 0f00 	cmp.w	r9, #0
 8109934:	db06      	blt.n	8109944 <_dtoa_r+0xa94>
 8109936:	9905      	ldr	r1, [sp, #20]
 8109938:	ea41 0909 	orr.w	r9, r1, r9
 810993c:	9906      	ldr	r1, [sp, #24]
 810993e:	ea59 0101 	orrs.w	r1, r9, r1
 8109942:	d120      	bne.n	8109986 <_dtoa_r+0xad6>
 8109944:	2a00      	cmp	r2, #0
 8109946:	ddec      	ble.n	8109922 <_dtoa_r+0xa72>
 8109948:	4659      	mov	r1, fp
 810994a:	2201      	movs	r2, #1
 810994c:	4620      	mov	r0, r4
 810994e:	9301      	str	r3, [sp, #4]
 8109950:	f000 ff14 	bl	810a77c <__lshift>
 8109954:	4631      	mov	r1, r6
 8109956:	4683      	mov	fp, r0
 8109958:	f000 ff7c 	bl	810a854 <__mcmp>
 810995c:	2800      	cmp	r0, #0
 810995e:	9b01      	ldr	r3, [sp, #4]
 8109960:	dc02      	bgt.n	8109968 <_dtoa_r+0xab8>
 8109962:	d1de      	bne.n	8109922 <_dtoa_r+0xa72>
 8109964:	07da      	lsls	r2, r3, #31
 8109966:	d5dc      	bpl.n	8109922 <_dtoa_r+0xa72>
 8109968:	2b39      	cmp	r3, #57	; 0x39
 810996a:	d1d8      	bne.n	810991e <_dtoa_r+0xa6e>
 810996c:	9a02      	ldr	r2, [sp, #8]
 810996e:	2339      	movs	r3, #57	; 0x39
 8109970:	7013      	strb	r3, [r2, #0]
 8109972:	462b      	mov	r3, r5
 8109974:	461d      	mov	r5, r3
 8109976:	3b01      	subs	r3, #1
 8109978:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810997c:	2a39      	cmp	r2, #57	; 0x39
 810997e:	d050      	beq.n	8109a22 <_dtoa_r+0xb72>
 8109980:	3201      	adds	r2, #1
 8109982:	701a      	strb	r2, [r3, #0]
 8109984:	e745      	b.n	8109812 <_dtoa_r+0x962>
 8109986:	2a00      	cmp	r2, #0
 8109988:	dd03      	ble.n	8109992 <_dtoa_r+0xae2>
 810998a:	2b39      	cmp	r3, #57	; 0x39
 810998c:	d0ee      	beq.n	810996c <_dtoa_r+0xabc>
 810998e:	3301      	adds	r3, #1
 8109990:	e7c7      	b.n	8109922 <_dtoa_r+0xa72>
 8109992:	9a01      	ldr	r2, [sp, #4]
 8109994:	9907      	ldr	r1, [sp, #28]
 8109996:	f802 3c01 	strb.w	r3, [r2, #-1]
 810999a:	428a      	cmp	r2, r1
 810999c:	d02a      	beq.n	81099f4 <_dtoa_r+0xb44>
 810999e:	4659      	mov	r1, fp
 81099a0:	2300      	movs	r3, #0
 81099a2:	220a      	movs	r2, #10
 81099a4:	4620      	mov	r0, r4
 81099a6:	f000 fcef 	bl	810a388 <__multadd>
 81099aa:	45b8      	cmp	r8, r7
 81099ac:	4683      	mov	fp, r0
 81099ae:	f04f 0300 	mov.w	r3, #0
 81099b2:	f04f 020a 	mov.w	r2, #10
 81099b6:	4641      	mov	r1, r8
 81099b8:	4620      	mov	r0, r4
 81099ba:	d107      	bne.n	81099cc <_dtoa_r+0xb1c>
 81099bc:	f000 fce4 	bl	810a388 <__multadd>
 81099c0:	4680      	mov	r8, r0
 81099c2:	4607      	mov	r7, r0
 81099c4:	9b01      	ldr	r3, [sp, #4]
 81099c6:	3301      	adds	r3, #1
 81099c8:	9301      	str	r3, [sp, #4]
 81099ca:	e775      	b.n	81098b8 <_dtoa_r+0xa08>
 81099cc:	f000 fcdc 	bl	810a388 <__multadd>
 81099d0:	4639      	mov	r1, r7
 81099d2:	4680      	mov	r8, r0
 81099d4:	2300      	movs	r3, #0
 81099d6:	220a      	movs	r2, #10
 81099d8:	4620      	mov	r0, r4
 81099da:	f000 fcd5 	bl	810a388 <__multadd>
 81099de:	4607      	mov	r7, r0
 81099e0:	e7f0      	b.n	81099c4 <_dtoa_r+0xb14>
 81099e2:	f1b9 0f00 	cmp.w	r9, #0
 81099e6:	9a00      	ldr	r2, [sp, #0]
 81099e8:	bfcc      	ite	gt
 81099ea:	464d      	movgt	r5, r9
 81099ec:	2501      	movle	r5, #1
 81099ee:	4415      	add	r5, r2
 81099f0:	f04f 0800 	mov.w	r8, #0
 81099f4:	4659      	mov	r1, fp
 81099f6:	2201      	movs	r2, #1
 81099f8:	4620      	mov	r0, r4
 81099fa:	9301      	str	r3, [sp, #4]
 81099fc:	f000 febe 	bl	810a77c <__lshift>
 8109a00:	4631      	mov	r1, r6
 8109a02:	4683      	mov	fp, r0
 8109a04:	f000 ff26 	bl	810a854 <__mcmp>
 8109a08:	2800      	cmp	r0, #0
 8109a0a:	dcb2      	bgt.n	8109972 <_dtoa_r+0xac2>
 8109a0c:	d102      	bne.n	8109a14 <_dtoa_r+0xb64>
 8109a0e:	9b01      	ldr	r3, [sp, #4]
 8109a10:	07db      	lsls	r3, r3, #31
 8109a12:	d4ae      	bmi.n	8109972 <_dtoa_r+0xac2>
 8109a14:	462b      	mov	r3, r5
 8109a16:	461d      	mov	r5, r3
 8109a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109a1c:	2a30      	cmp	r2, #48	; 0x30
 8109a1e:	d0fa      	beq.n	8109a16 <_dtoa_r+0xb66>
 8109a20:	e6f7      	b.n	8109812 <_dtoa_r+0x962>
 8109a22:	9a00      	ldr	r2, [sp, #0]
 8109a24:	429a      	cmp	r2, r3
 8109a26:	d1a5      	bne.n	8109974 <_dtoa_r+0xac4>
 8109a28:	f10a 0a01 	add.w	sl, sl, #1
 8109a2c:	2331      	movs	r3, #49	; 0x31
 8109a2e:	e779      	b.n	8109924 <_dtoa_r+0xa74>
 8109a30:	4b13      	ldr	r3, [pc, #76]	; (8109a80 <_dtoa_r+0xbd0>)
 8109a32:	f7ff baaf 	b.w	8108f94 <_dtoa_r+0xe4>
 8109a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109a38:	2b00      	cmp	r3, #0
 8109a3a:	f47f aa86 	bne.w	8108f4a <_dtoa_r+0x9a>
 8109a3e:	4b11      	ldr	r3, [pc, #68]	; (8109a84 <_dtoa_r+0xbd4>)
 8109a40:	f7ff baa8 	b.w	8108f94 <_dtoa_r+0xe4>
 8109a44:	f1b9 0f00 	cmp.w	r9, #0
 8109a48:	dc03      	bgt.n	8109a52 <_dtoa_r+0xba2>
 8109a4a:	9b05      	ldr	r3, [sp, #20]
 8109a4c:	2b02      	cmp	r3, #2
 8109a4e:	f73f aec9 	bgt.w	81097e4 <_dtoa_r+0x934>
 8109a52:	9d00      	ldr	r5, [sp, #0]
 8109a54:	4631      	mov	r1, r6
 8109a56:	4658      	mov	r0, fp
 8109a58:	f7ff f99e 	bl	8108d98 <quorem>
 8109a5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8109a60:	f805 3b01 	strb.w	r3, [r5], #1
 8109a64:	9a00      	ldr	r2, [sp, #0]
 8109a66:	1aaa      	subs	r2, r5, r2
 8109a68:	4591      	cmp	r9, r2
 8109a6a:	ddba      	ble.n	81099e2 <_dtoa_r+0xb32>
 8109a6c:	4659      	mov	r1, fp
 8109a6e:	2300      	movs	r3, #0
 8109a70:	220a      	movs	r2, #10
 8109a72:	4620      	mov	r0, r4
 8109a74:	f000 fc88 	bl	810a388 <__multadd>
 8109a78:	4683      	mov	fp, r0
 8109a7a:	e7eb      	b.n	8109a54 <_dtoa_r+0xba4>
 8109a7c:	0810b70c 	.word	0x0810b70c
 8109a80:	0810b50c 	.word	0x0810b50c
 8109a84:	0810b689 	.word	0x0810b689

08109a88 <rshift>:
 8109a88:	6903      	ldr	r3, [r0, #16]
 8109a8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8109a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8109a92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8109a96:	f100 0414 	add.w	r4, r0, #20
 8109a9a:	dd45      	ble.n	8109b28 <rshift+0xa0>
 8109a9c:	f011 011f 	ands.w	r1, r1, #31
 8109aa0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8109aa4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8109aa8:	d10c      	bne.n	8109ac4 <rshift+0x3c>
 8109aaa:	f100 0710 	add.w	r7, r0, #16
 8109aae:	4629      	mov	r1, r5
 8109ab0:	42b1      	cmp	r1, r6
 8109ab2:	d334      	bcc.n	8109b1e <rshift+0x96>
 8109ab4:	1a9b      	subs	r3, r3, r2
 8109ab6:	009b      	lsls	r3, r3, #2
 8109ab8:	1eea      	subs	r2, r5, #3
 8109aba:	4296      	cmp	r6, r2
 8109abc:	bf38      	it	cc
 8109abe:	2300      	movcc	r3, #0
 8109ac0:	4423      	add	r3, r4
 8109ac2:	e015      	b.n	8109af0 <rshift+0x68>
 8109ac4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8109ac8:	f1c1 0820 	rsb	r8, r1, #32
 8109acc:	40cf      	lsrs	r7, r1
 8109ace:	f105 0e04 	add.w	lr, r5, #4
 8109ad2:	46a1      	mov	r9, r4
 8109ad4:	4576      	cmp	r6, lr
 8109ad6:	46f4      	mov	ip, lr
 8109ad8:	d815      	bhi.n	8109b06 <rshift+0x7e>
 8109ada:	1a9b      	subs	r3, r3, r2
 8109adc:	009a      	lsls	r2, r3, #2
 8109ade:	3a04      	subs	r2, #4
 8109ae0:	3501      	adds	r5, #1
 8109ae2:	42ae      	cmp	r6, r5
 8109ae4:	bf38      	it	cc
 8109ae6:	2200      	movcc	r2, #0
 8109ae8:	18a3      	adds	r3, r4, r2
 8109aea:	50a7      	str	r7, [r4, r2]
 8109aec:	b107      	cbz	r7, 8109af0 <rshift+0x68>
 8109aee:	3304      	adds	r3, #4
 8109af0:	1b1a      	subs	r2, r3, r4
 8109af2:	42a3      	cmp	r3, r4
 8109af4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8109af8:	bf08      	it	eq
 8109afa:	2300      	moveq	r3, #0
 8109afc:	6102      	str	r2, [r0, #16]
 8109afe:	bf08      	it	eq
 8109b00:	6143      	streq	r3, [r0, #20]
 8109b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8109b06:	f8dc c000 	ldr.w	ip, [ip]
 8109b0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8109b0e:	ea4c 0707 	orr.w	r7, ip, r7
 8109b12:	f849 7b04 	str.w	r7, [r9], #4
 8109b16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8109b1a:	40cf      	lsrs	r7, r1
 8109b1c:	e7da      	b.n	8109ad4 <rshift+0x4c>
 8109b1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8109b22:	f847 cf04 	str.w	ip, [r7, #4]!
 8109b26:	e7c3      	b.n	8109ab0 <rshift+0x28>
 8109b28:	4623      	mov	r3, r4
 8109b2a:	e7e1      	b.n	8109af0 <rshift+0x68>

08109b2c <__hexdig_fun>:
 8109b2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8109b30:	2b09      	cmp	r3, #9
 8109b32:	d802      	bhi.n	8109b3a <__hexdig_fun+0xe>
 8109b34:	3820      	subs	r0, #32
 8109b36:	b2c0      	uxtb	r0, r0
 8109b38:	4770      	bx	lr
 8109b3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8109b3e:	2b05      	cmp	r3, #5
 8109b40:	d801      	bhi.n	8109b46 <__hexdig_fun+0x1a>
 8109b42:	3847      	subs	r0, #71	; 0x47
 8109b44:	e7f7      	b.n	8109b36 <__hexdig_fun+0xa>
 8109b46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8109b4a:	2b05      	cmp	r3, #5
 8109b4c:	d801      	bhi.n	8109b52 <__hexdig_fun+0x26>
 8109b4e:	3827      	subs	r0, #39	; 0x27
 8109b50:	e7f1      	b.n	8109b36 <__hexdig_fun+0xa>
 8109b52:	2000      	movs	r0, #0
 8109b54:	4770      	bx	lr
	...

08109b58 <__gethex>:
 8109b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b5c:	ed2d 8b02 	vpush	{d8}
 8109b60:	b089      	sub	sp, #36	; 0x24
 8109b62:	ee08 0a10 	vmov	s16, r0
 8109b66:	9304      	str	r3, [sp, #16]
 8109b68:	4bbc      	ldr	r3, [pc, #752]	; (8109e5c <__gethex+0x304>)
 8109b6a:	681b      	ldr	r3, [r3, #0]
 8109b6c:	9301      	str	r3, [sp, #4]
 8109b6e:	4618      	mov	r0, r3
 8109b70:	468b      	mov	fp, r1
 8109b72:	4690      	mov	r8, r2
 8109b74:	f7f6 fbb4 	bl	81002e0 <strlen>
 8109b78:	9b01      	ldr	r3, [sp, #4]
 8109b7a:	f8db 2000 	ldr.w	r2, [fp]
 8109b7e:	4403      	add	r3, r0
 8109b80:	4682      	mov	sl, r0
 8109b82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8109b86:	9305      	str	r3, [sp, #20]
 8109b88:	1c93      	adds	r3, r2, #2
 8109b8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8109b8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8109b92:	32fe      	adds	r2, #254	; 0xfe
 8109b94:	18d1      	adds	r1, r2, r3
 8109b96:	461f      	mov	r7, r3
 8109b98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8109b9c:	9100      	str	r1, [sp, #0]
 8109b9e:	2830      	cmp	r0, #48	; 0x30
 8109ba0:	d0f8      	beq.n	8109b94 <__gethex+0x3c>
 8109ba2:	f7ff ffc3 	bl	8109b2c <__hexdig_fun>
 8109ba6:	4604      	mov	r4, r0
 8109ba8:	2800      	cmp	r0, #0
 8109baa:	d13a      	bne.n	8109c22 <__gethex+0xca>
 8109bac:	9901      	ldr	r1, [sp, #4]
 8109bae:	4652      	mov	r2, sl
 8109bb0:	4638      	mov	r0, r7
 8109bb2:	f001 fb21 	bl	810b1f8 <strncmp>
 8109bb6:	4605      	mov	r5, r0
 8109bb8:	2800      	cmp	r0, #0
 8109bba:	d168      	bne.n	8109c8e <__gethex+0x136>
 8109bbc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8109bc0:	eb07 060a 	add.w	r6, r7, sl
 8109bc4:	f7ff ffb2 	bl	8109b2c <__hexdig_fun>
 8109bc8:	2800      	cmp	r0, #0
 8109bca:	d062      	beq.n	8109c92 <__gethex+0x13a>
 8109bcc:	4633      	mov	r3, r6
 8109bce:	7818      	ldrb	r0, [r3, #0]
 8109bd0:	2830      	cmp	r0, #48	; 0x30
 8109bd2:	461f      	mov	r7, r3
 8109bd4:	f103 0301 	add.w	r3, r3, #1
 8109bd8:	d0f9      	beq.n	8109bce <__gethex+0x76>
 8109bda:	f7ff ffa7 	bl	8109b2c <__hexdig_fun>
 8109bde:	2301      	movs	r3, #1
 8109be0:	fab0 f480 	clz	r4, r0
 8109be4:	0964      	lsrs	r4, r4, #5
 8109be6:	4635      	mov	r5, r6
 8109be8:	9300      	str	r3, [sp, #0]
 8109bea:	463a      	mov	r2, r7
 8109bec:	4616      	mov	r6, r2
 8109bee:	3201      	adds	r2, #1
 8109bf0:	7830      	ldrb	r0, [r6, #0]
 8109bf2:	f7ff ff9b 	bl	8109b2c <__hexdig_fun>
 8109bf6:	2800      	cmp	r0, #0
 8109bf8:	d1f8      	bne.n	8109bec <__gethex+0x94>
 8109bfa:	9901      	ldr	r1, [sp, #4]
 8109bfc:	4652      	mov	r2, sl
 8109bfe:	4630      	mov	r0, r6
 8109c00:	f001 fafa 	bl	810b1f8 <strncmp>
 8109c04:	b980      	cbnz	r0, 8109c28 <__gethex+0xd0>
 8109c06:	b94d      	cbnz	r5, 8109c1c <__gethex+0xc4>
 8109c08:	eb06 050a 	add.w	r5, r6, sl
 8109c0c:	462a      	mov	r2, r5
 8109c0e:	4616      	mov	r6, r2
 8109c10:	3201      	adds	r2, #1
 8109c12:	7830      	ldrb	r0, [r6, #0]
 8109c14:	f7ff ff8a 	bl	8109b2c <__hexdig_fun>
 8109c18:	2800      	cmp	r0, #0
 8109c1a:	d1f8      	bne.n	8109c0e <__gethex+0xb6>
 8109c1c:	1bad      	subs	r5, r5, r6
 8109c1e:	00ad      	lsls	r5, r5, #2
 8109c20:	e004      	b.n	8109c2c <__gethex+0xd4>
 8109c22:	2400      	movs	r4, #0
 8109c24:	4625      	mov	r5, r4
 8109c26:	e7e0      	b.n	8109bea <__gethex+0x92>
 8109c28:	2d00      	cmp	r5, #0
 8109c2a:	d1f7      	bne.n	8109c1c <__gethex+0xc4>
 8109c2c:	7833      	ldrb	r3, [r6, #0]
 8109c2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8109c32:	2b50      	cmp	r3, #80	; 0x50
 8109c34:	d13b      	bne.n	8109cae <__gethex+0x156>
 8109c36:	7873      	ldrb	r3, [r6, #1]
 8109c38:	2b2b      	cmp	r3, #43	; 0x2b
 8109c3a:	d02c      	beq.n	8109c96 <__gethex+0x13e>
 8109c3c:	2b2d      	cmp	r3, #45	; 0x2d
 8109c3e:	d02e      	beq.n	8109c9e <__gethex+0x146>
 8109c40:	1c71      	adds	r1, r6, #1
 8109c42:	f04f 0900 	mov.w	r9, #0
 8109c46:	7808      	ldrb	r0, [r1, #0]
 8109c48:	f7ff ff70 	bl	8109b2c <__hexdig_fun>
 8109c4c:	1e43      	subs	r3, r0, #1
 8109c4e:	b2db      	uxtb	r3, r3
 8109c50:	2b18      	cmp	r3, #24
 8109c52:	d82c      	bhi.n	8109cae <__gethex+0x156>
 8109c54:	f1a0 0210 	sub.w	r2, r0, #16
 8109c58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8109c5c:	f7ff ff66 	bl	8109b2c <__hexdig_fun>
 8109c60:	1e43      	subs	r3, r0, #1
 8109c62:	b2db      	uxtb	r3, r3
 8109c64:	2b18      	cmp	r3, #24
 8109c66:	d91d      	bls.n	8109ca4 <__gethex+0x14c>
 8109c68:	f1b9 0f00 	cmp.w	r9, #0
 8109c6c:	d000      	beq.n	8109c70 <__gethex+0x118>
 8109c6e:	4252      	negs	r2, r2
 8109c70:	4415      	add	r5, r2
 8109c72:	f8cb 1000 	str.w	r1, [fp]
 8109c76:	b1e4      	cbz	r4, 8109cb2 <__gethex+0x15a>
 8109c78:	9b00      	ldr	r3, [sp, #0]
 8109c7a:	2b00      	cmp	r3, #0
 8109c7c:	bf14      	ite	ne
 8109c7e:	2700      	movne	r7, #0
 8109c80:	2706      	moveq	r7, #6
 8109c82:	4638      	mov	r0, r7
 8109c84:	b009      	add	sp, #36	; 0x24
 8109c86:	ecbd 8b02 	vpop	{d8}
 8109c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109c8e:	463e      	mov	r6, r7
 8109c90:	4625      	mov	r5, r4
 8109c92:	2401      	movs	r4, #1
 8109c94:	e7ca      	b.n	8109c2c <__gethex+0xd4>
 8109c96:	f04f 0900 	mov.w	r9, #0
 8109c9a:	1cb1      	adds	r1, r6, #2
 8109c9c:	e7d3      	b.n	8109c46 <__gethex+0xee>
 8109c9e:	f04f 0901 	mov.w	r9, #1
 8109ca2:	e7fa      	b.n	8109c9a <__gethex+0x142>
 8109ca4:	230a      	movs	r3, #10
 8109ca6:	fb03 0202 	mla	r2, r3, r2, r0
 8109caa:	3a10      	subs	r2, #16
 8109cac:	e7d4      	b.n	8109c58 <__gethex+0x100>
 8109cae:	4631      	mov	r1, r6
 8109cb0:	e7df      	b.n	8109c72 <__gethex+0x11a>
 8109cb2:	1bf3      	subs	r3, r6, r7
 8109cb4:	3b01      	subs	r3, #1
 8109cb6:	4621      	mov	r1, r4
 8109cb8:	2b07      	cmp	r3, #7
 8109cba:	dc0b      	bgt.n	8109cd4 <__gethex+0x17c>
 8109cbc:	ee18 0a10 	vmov	r0, s16
 8109cc0:	f000 fb00 	bl	810a2c4 <_Balloc>
 8109cc4:	4604      	mov	r4, r0
 8109cc6:	b940      	cbnz	r0, 8109cda <__gethex+0x182>
 8109cc8:	4b65      	ldr	r3, [pc, #404]	; (8109e60 <__gethex+0x308>)
 8109cca:	4602      	mov	r2, r0
 8109ccc:	21de      	movs	r1, #222	; 0xde
 8109cce:	4865      	ldr	r0, [pc, #404]	; (8109e64 <__gethex+0x30c>)
 8109cd0:	f001 fab2 	bl	810b238 <__assert_func>
 8109cd4:	3101      	adds	r1, #1
 8109cd6:	105b      	asrs	r3, r3, #1
 8109cd8:	e7ee      	b.n	8109cb8 <__gethex+0x160>
 8109cda:	f100 0914 	add.w	r9, r0, #20
 8109cde:	f04f 0b00 	mov.w	fp, #0
 8109ce2:	f1ca 0301 	rsb	r3, sl, #1
 8109ce6:	f8cd 9008 	str.w	r9, [sp, #8]
 8109cea:	f8cd b000 	str.w	fp, [sp]
 8109cee:	9306      	str	r3, [sp, #24]
 8109cf0:	42b7      	cmp	r7, r6
 8109cf2:	d340      	bcc.n	8109d76 <__gethex+0x21e>
 8109cf4:	9802      	ldr	r0, [sp, #8]
 8109cf6:	9b00      	ldr	r3, [sp, #0]
 8109cf8:	f840 3b04 	str.w	r3, [r0], #4
 8109cfc:	eba0 0009 	sub.w	r0, r0, r9
 8109d00:	1080      	asrs	r0, r0, #2
 8109d02:	0146      	lsls	r6, r0, #5
 8109d04:	6120      	str	r0, [r4, #16]
 8109d06:	4618      	mov	r0, r3
 8109d08:	f000 fbd2 	bl	810a4b0 <__hi0bits>
 8109d0c:	1a30      	subs	r0, r6, r0
 8109d0e:	f8d8 6000 	ldr.w	r6, [r8]
 8109d12:	42b0      	cmp	r0, r6
 8109d14:	dd63      	ble.n	8109dde <__gethex+0x286>
 8109d16:	1b87      	subs	r7, r0, r6
 8109d18:	4639      	mov	r1, r7
 8109d1a:	4620      	mov	r0, r4
 8109d1c:	f000 ff6c 	bl	810abf8 <__any_on>
 8109d20:	4682      	mov	sl, r0
 8109d22:	b1a8      	cbz	r0, 8109d50 <__gethex+0x1f8>
 8109d24:	1e7b      	subs	r3, r7, #1
 8109d26:	1159      	asrs	r1, r3, #5
 8109d28:	f003 021f 	and.w	r2, r3, #31
 8109d2c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8109d30:	f04f 0a01 	mov.w	sl, #1
 8109d34:	fa0a f202 	lsl.w	r2, sl, r2
 8109d38:	420a      	tst	r2, r1
 8109d3a:	d009      	beq.n	8109d50 <__gethex+0x1f8>
 8109d3c:	4553      	cmp	r3, sl
 8109d3e:	dd05      	ble.n	8109d4c <__gethex+0x1f4>
 8109d40:	1eb9      	subs	r1, r7, #2
 8109d42:	4620      	mov	r0, r4
 8109d44:	f000 ff58 	bl	810abf8 <__any_on>
 8109d48:	2800      	cmp	r0, #0
 8109d4a:	d145      	bne.n	8109dd8 <__gethex+0x280>
 8109d4c:	f04f 0a02 	mov.w	sl, #2
 8109d50:	4639      	mov	r1, r7
 8109d52:	4620      	mov	r0, r4
 8109d54:	f7ff fe98 	bl	8109a88 <rshift>
 8109d58:	443d      	add	r5, r7
 8109d5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8109d5e:	42ab      	cmp	r3, r5
 8109d60:	da4c      	bge.n	8109dfc <__gethex+0x2a4>
 8109d62:	ee18 0a10 	vmov	r0, s16
 8109d66:	4621      	mov	r1, r4
 8109d68:	f000 faec 	bl	810a344 <_Bfree>
 8109d6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8109d6e:	2300      	movs	r3, #0
 8109d70:	6013      	str	r3, [r2, #0]
 8109d72:	27a3      	movs	r7, #163	; 0xa3
 8109d74:	e785      	b.n	8109c82 <__gethex+0x12a>
 8109d76:	1e73      	subs	r3, r6, #1
 8109d78:	9a05      	ldr	r2, [sp, #20]
 8109d7a:	9303      	str	r3, [sp, #12]
 8109d7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8109d80:	4293      	cmp	r3, r2
 8109d82:	d019      	beq.n	8109db8 <__gethex+0x260>
 8109d84:	f1bb 0f20 	cmp.w	fp, #32
 8109d88:	d107      	bne.n	8109d9a <__gethex+0x242>
 8109d8a:	9b02      	ldr	r3, [sp, #8]
 8109d8c:	9a00      	ldr	r2, [sp, #0]
 8109d8e:	f843 2b04 	str.w	r2, [r3], #4
 8109d92:	9302      	str	r3, [sp, #8]
 8109d94:	2300      	movs	r3, #0
 8109d96:	9300      	str	r3, [sp, #0]
 8109d98:	469b      	mov	fp, r3
 8109d9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8109d9e:	f7ff fec5 	bl	8109b2c <__hexdig_fun>
 8109da2:	9b00      	ldr	r3, [sp, #0]
 8109da4:	f000 000f 	and.w	r0, r0, #15
 8109da8:	fa00 f00b 	lsl.w	r0, r0, fp
 8109dac:	4303      	orrs	r3, r0
 8109dae:	9300      	str	r3, [sp, #0]
 8109db0:	f10b 0b04 	add.w	fp, fp, #4
 8109db4:	9b03      	ldr	r3, [sp, #12]
 8109db6:	e00d      	b.n	8109dd4 <__gethex+0x27c>
 8109db8:	9b03      	ldr	r3, [sp, #12]
 8109dba:	9a06      	ldr	r2, [sp, #24]
 8109dbc:	4413      	add	r3, r2
 8109dbe:	42bb      	cmp	r3, r7
 8109dc0:	d3e0      	bcc.n	8109d84 <__gethex+0x22c>
 8109dc2:	4618      	mov	r0, r3
 8109dc4:	9901      	ldr	r1, [sp, #4]
 8109dc6:	9307      	str	r3, [sp, #28]
 8109dc8:	4652      	mov	r2, sl
 8109dca:	f001 fa15 	bl	810b1f8 <strncmp>
 8109dce:	9b07      	ldr	r3, [sp, #28]
 8109dd0:	2800      	cmp	r0, #0
 8109dd2:	d1d7      	bne.n	8109d84 <__gethex+0x22c>
 8109dd4:	461e      	mov	r6, r3
 8109dd6:	e78b      	b.n	8109cf0 <__gethex+0x198>
 8109dd8:	f04f 0a03 	mov.w	sl, #3
 8109ddc:	e7b8      	b.n	8109d50 <__gethex+0x1f8>
 8109dde:	da0a      	bge.n	8109df6 <__gethex+0x29e>
 8109de0:	1a37      	subs	r7, r6, r0
 8109de2:	4621      	mov	r1, r4
 8109de4:	ee18 0a10 	vmov	r0, s16
 8109de8:	463a      	mov	r2, r7
 8109dea:	f000 fcc7 	bl	810a77c <__lshift>
 8109dee:	1bed      	subs	r5, r5, r7
 8109df0:	4604      	mov	r4, r0
 8109df2:	f100 0914 	add.w	r9, r0, #20
 8109df6:	f04f 0a00 	mov.w	sl, #0
 8109dfa:	e7ae      	b.n	8109d5a <__gethex+0x202>
 8109dfc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8109e00:	42a8      	cmp	r0, r5
 8109e02:	dd72      	ble.n	8109eea <__gethex+0x392>
 8109e04:	1b45      	subs	r5, r0, r5
 8109e06:	42ae      	cmp	r6, r5
 8109e08:	dc36      	bgt.n	8109e78 <__gethex+0x320>
 8109e0a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8109e0e:	2b02      	cmp	r3, #2
 8109e10:	d02a      	beq.n	8109e68 <__gethex+0x310>
 8109e12:	2b03      	cmp	r3, #3
 8109e14:	d02c      	beq.n	8109e70 <__gethex+0x318>
 8109e16:	2b01      	cmp	r3, #1
 8109e18:	d115      	bne.n	8109e46 <__gethex+0x2ee>
 8109e1a:	42ae      	cmp	r6, r5
 8109e1c:	d113      	bne.n	8109e46 <__gethex+0x2ee>
 8109e1e:	2e01      	cmp	r6, #1
 8109e20:	d10b      	bne.n	8109e3a <__gethex+0x2e2>
 8109e22:	9a04      	ldr	r2, [sp, #16]
 8109e24:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8109e28:	6013      	str	r3, [r2, #0]
 8109e2a:	2301      	movs	r3, #1
 8109e2c:	6123      	str	r3, [r4, #16]
 8109e2e:	f8c9 3000 	str.w	r3, [r9]
 8109e32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109e34:	2762      	movs	r7, #98	; 0x62
 8109e36:	601c      	str	r4, [r3, #0]
 8109e38:	e723      	b.n	8109c82 <__gethex+0x12a>
 8109e3a:	1e71      	subs	r1, r6, #1
 8109e3c:	4620      	mov	r0, r4
 8109e3e:	f000 fedb 	bl	810abf8 <__any_on>
 8109e42:	2800      	cmp	r0, #0
 8109e44:	d1ed      	bne.n	8109e22 <__gethex+0x2ca>
 8109e46:	ee18 0a10 	vmov	r0, s16
 8109e4a:	4621      	mov	r1, r4
 8109e4c:	f000 fa7a 	bl	810a344 <_Bfree>
 8109e50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8109e52:	2300      	movs	r3, #0
 8109e54:	6013      	str	r3, [r2, #0]
 8109e56:	2750      	movs	r7, #80	; 0x50
 8109e58:	e713      	b.n	8109c82 <__gethex+0x12a>
 8109e5a:	bf00      	nop
 8109e5c:	0810b788 	.word	0x0810b788
 8109e60:	0810b70c 	.word	0x0810b70c
 8109e64:	0810b71d 	.word	0x0810b71d
 8109e68:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109e6a:	2b00      	cmp	r3, #0
 8109e6c:	d1eb      	bne.n	8109e46 <__gethex+0x2ee>
 8109e6e:	e7d8      	b.n	8109e22 <__gethex+0x2ca>
 8109e70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109e72:	2b00      	cmp	r3, #0
 8109e74:	d1d5      	bne.n	8109e22 <__gethex+0x2ca>
 8109e76:	e7e6      	b.n	8109e46 <__gethex+0x2ee>
 8109e78:	1e6f      	subs	r7, r5, #1
 8109e7a:	f1ba 0f00 	cmp.w	sl, #0
 8109e7e:	d131      	bne.n	8109ee4 <__gethex+0x38c>
 8109e80:	b127      	cbz	r7, 8109e8c <__gethex+0x334>
 8109e82:	4639      	mov	r1, r7
 8109e84:	4620      	mov	r0, r4
 8109e86:	f000 feb7 	bl	810abf8 <__any_on>
 8109e8a:	4682      	mov	sl, r0
 8109e8c:	117b      	asrs	r3, r7, #5
 8109e8e:	2101      	movs	r1, #1
 8109e90:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8109e94:	f007 071f 	and.w	r7, r7, #31
 8109e98:	fa01 f707 	lsl.w	r7, r1, r7
 8109e9c:	421f      	tst	r7, r3
 8109e9e:	4629      	mov	r1, r5
 8109ea0:	4620      	mov	r0, r4
 8109ea2:	bf18      	it	ne
 8109ea4:	f04a 0a02 	orrne.w	sl, sl, #2
 8109ea8:	1b76      	subs	r6, r6, r5
 8109eaa:	f7ff fded 	bl	8109a88 <rshift>
 8109eae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8109eb2:	2702      	movs	r7, #2
 8109eb4:	f1ba 0f00 	cmp.w	sl, #0
 8109eb8:	d048      	beq.n	8109f4c <__gethex+0x3f4>
 8109eba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8109ebe:	2b02      	cmp	r3, #2
 8109ec0:	d015      	beq.n	8109eee <__gethex+0x396>
 8109ec2:	2b03      	cmp	r3, #3
 8109ec4:	d017      	beq.n	8109ef6 <__gethex+0x39e>
 8109ec6:	2b01      	cmp	r3, #1
 8109ec8:	d109      	bne.n	8109ede <__gethex+0x386>
 8109eca:	f01a 0f02 	tst.w	sl, #2
 8109ece:	d006      	beq.n	8109ede <__gethex+0x386>
 8109ed0:	f8d9 0000 	ldr.w	r0, [r9]
 8109ed4:	ea4a 0a00 	orr.w	sl, sl, r0
 8109ed8:	f01a 0f01 	tst.w	sl, #1
 8109edc:	d10e      	bne.n	8109efc <__gethex+0x3a4>
 8109ede:	f047 0710 	orr.w	r7, r7, #16
 8109ee2:	e033      	b.n	8109f4c <__gethex+0x3f4>
 8109ee4:	f04f 0a01 	mov.w	sl, #1
 8109ee8:	e7d0      	b.n	8109e8c <__gethex+0x334>
 8109eea:	2701      	movs	r7, #1
 8109eec:	e7e2      	b.n	8109eb4 <__gethex+0x35c>
 8109eee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109ef0:	f1c3 0301 	rsb	r3, r3, #1
 8109ef4:	9315      	str	r3, [sp, #84]	; 0x54
 8109ef6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109ef8:	2b00      	cmp	r3, #0
 8109efa:	d0f0      	beq.n	8109ede <__gethex+0x386>
 8109efc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8109f00:	f104 0314 	add.w	r3, r4, #20
 8109f04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8109f08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8109f0c:	f04f 0c00 	mov.w	ip, #0
 8109f10:	4618      	mov	r0, r3
 8109f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8109f16:	f1b2 3fff 	cmp.w	r2, #4294967295
 8109f1a:	d01c      	beq.n	8109f56 <__gethex+0x3fe>
 8109f1c:	3201      	adds	r2, #1
 8109f1e:	6002      	str	r2, [r0, #0]
 8109f20:	2f02      	cmp	r7, #2
 8109f22:	f104 0314 	add.w	r3, r4, #20
 8109f26:	d13f      	bne.n	8109fa8 <__gethex+0x450>
 8109f28:	f8d8 2000 	ldr.w	r2, [r8]
 8109f2c:	3a01      	subs	r2, #1
 8109f2e:	42b2      	cmp	r2, r6
 8109f30:	d10a      	bne.n	8109f48 <__gethex+0x3f0>
 8109f32:	1171      	asrs	r1, r6, #5
 8109f34:	2201      	movs	r2, #1
 8109f36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8109f3a:	f006 061f 	and.w	r6, r6, #31
 8109f3e:	fa02 f606 	lsl.w	r6, r2, r6
 8109f42:	421e      	tst	r6, r3
 8109f44:	bf18      	it	ne
 8109f46:	4617      	movne	r7, r2
 8109f48:	f047 0720 	orr.w	r7, r7, #32
 8109f4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8109f4e:	601c      	str	r4, [r3, #0]
 8109f50:	9b04      	ldr	r3, [sp, #16]
 8109f52:	601d      	str	r5, [r3, #0]
 8109f54:	e695      	b.n	8109c82 <__gethex+0x12a>
 8109f56:	4299      	cmp	r1, r3
 8109f58:	f843 cc04 	str.w	ip, [r3, #-4]
 8109f5c:	d8d8      	bhi.n	8109f10 <__gethex+0x3b8>
 8109f5e:	68a3      	ldr	r3, [r4, #8]
 8109f60:	459b      	cmp	fp, r3
 8109f62:	db19      	blt.n	8109f98 <__gethex+0x440>
 8109f64:	6861      	ldr	r1, [r4, #4]
 8109f66:	ee18 0a10 	vmov	r0, s16
 8109f6a:	3101      	adds	r1, #1
 8109f6c:	f000 f9aa 	bl	810a2c4 <_Balloc>
 8109f70:	4681      	mov	r9, r0
 8109f72:	b918      	cbnz	r0, 8109f7c <__gethex+0x424>
 8109f74:	4b1a      	ldr	r3, [pc, #104]	; (8109fe0 <__gethex+0x488>)
 8109f76:	4602      	mov	r2, r0
 8109f78:	2184      	movs	r1, #132	; 0x84
 8109f7a:	e6a8      	b.n	8109cce <__gethex+0x176>
 8109f7c:	6922      	ldr	r2, [r4, #16]
 8109f7e:	3202      	adds	r2, #2
 8109f80:	f104 010c 	add.w	r1, r4, #12
 8109f84:	0092      	lsls	r2, r2, #2
 8109f86:	300c      	adds	r0, #12
 8109f88:	f000 f982 	bl	810a290 <memcpy>
 8109f8c:	4621      	mov	r1, r4
 8109f8e:	ee18 0a10 	vmov	r0, s16
 8109f92:	f000 f9d7 	bl	810a344 <_Bfree>
 8109f96:	464c      	mov	r4, r9
 8109f98:	6923      	ldr	r3, [r4, #16]
 8109f9a:	1c5a      	adds	r2, r3, #1
 8109f9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8109fa0:	6122      	str	r2, [r4, #16]
 8109fa2:	2201      	movs	r2, #1
 8109fa4:	615a      	str	r2, [r3, #20]
 8109fa6:	e7bb      	b.n	8109f20 <__gethex+0x3c8>
 8109fa8:	6922      	ldr	r2, [r4, #16]
 8109faa:	455a      	cmp	r2, fp
 8109fac:	dd0b      	ble.n	8109fc6 <__gethex+0x46e>
 8109fae:	2101      	movs	r1, #1
 8109fb0:	4620      	mov	r0, r4
 8109fb2:	f7ff fd69 	bl	8109a88 <rshift>
 8109fb6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8109fba:	3501      	adds	r5, #1
 8109fbc:	42ab      	cmp	r3, r5
 8109fbe:	f6ff aed0 	blt.w	8109d62 <__gethex+0x20a>
 8109fc2:	2701      	movs	r7, #1
 8109fc4:	e7c0      	b.n	8109f48 <__gethex+0x3f0>
 8109fc6:	f016 061f 	ands.w	r6, r6, #31
 8109fca:	d0fa      	beq.n	8109fc2 <__gethex+0x46a>
 8109fcc:	449a      	add	sl, r3
 8109fce:	f1c6 0620 	rsb	r6, r6, #32
 8109fd2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8109fd6:	f000 fa6b 	bl	810a4b0 <__hi0bits>
 8109fda:	42b0      	cmp	r0, r6
 8109fdc:	dbe7      	blt.n	8109fae <__gethex+0x456>
 8109fde:	e7f0      	b.n	8109fc2 <__gethex+0x46a>
 8109fe0:	0810b70c 	.word	0x0810b70c

08109fe4 <L_shift>:
 8109fe4:	f1c2 0208 	rsb	r2, r2, #8
 8109fe8:	0092      	lsls	r2, r2, #2
 8109fea:	b570      	push	{r4, r5, r6, lr}
 8109fec:	f1c2 0620 	rsb	r6, r2, #32
 8109ff0:	6843      	ldr	r3, [r0, #4]
 8109ff2:	6804      	ldr	r4, [r0, #0]
 8109ff4:	fa03 f506 	lsl.w	r5, r3, r6
 8109ff8:	432c      	orrs	r4, r5
 8109ffa:	40d3      	lsrs	r3, r2
 8109ffc:	6004      	str	r4, [r0, #0]
 8109ffe:	f840 3f04 	str.w	r3, [r0, #4]!
 810a002:	4288      	cmp	r0, r1
 810a004:	d3f4      	bcc.n	8109ff0 <L_shift+0xc>
 810a006:	bd70      	pop	{r4, r5, r6, pc}

0810a008 <__match>:
 810a008:	b530      	push	{r4, r5, lr}
 810a00a:	6803      	ldr	r3, [r0, #0]
 810a00c:	3301      	adds	r3, #1
 810a00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a012:	b914      	cbnz	r4, 810a01a <__match+0x12>
 810a014:	6003      	str	r3, [r0, #0]
 810a016:	2001      	movs	r0, #1
 810a018:	bd30      	pop	{r4, r5, pc}
 810a01a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a01e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810a022:	2d19      	cmp	r5, #25
 810a024:	bf98      	it	ls
 810a026:	3220      	addls	r2, #32
 810a028:	42a2      	cmp	r2, r4
 810a02a:	d0f0      	beq.n	810a00e <__match+0x6>
 810a02c:	2000      	movs	r0, #0
 810a02e:	e7f3      	b.n	810a018 <__match+0x10>

0810a030 <__hexnan>:
 810a030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a034:	680b      	ldr	r3, [r1, #0]
 810a036:	6801      	ldr	r1, [r0, #0]
 810a038:	115e      	asrs	r6, r3, #5
 810a03a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810a03e:	f013 031f 	ands.w	r3, r3, #31
 810a042:	b087      	sub	sp, #28
 810a044:	bf18      	it	ne
 810a046:	3604      	addne	r6, #4
 810a048:	2500      	movs	r5, #0
 810a04a:	1f37      	subs	r7, r6, #4
 810a04c:	4682      	mov	sl, r0
 810a04e:	4690      	mov	r8, r2
 810a050:	9301      	str	r3, [sp, #4]
 810a052:	f846 5c04 	str.w	r5, [r6, #-4]
 810a056:	46b9      	mov	r9, r7
 810a058:	463c      	mov	r4, r7
 810a05a:	9502      	str	r5, [sp, #8]
 810a05c:	46ab      	mov	fp, r5
 810a05e:	784a      	ldrb	r2, [r1, #1]
 810a060:	1c4b      	adds	r3, r1, #1
 810a062:	9303      	str	r3, [sp, #12]
 810a064:	b342      	cbz	r2, 810a0b8 <__hexnan+0x88>
 810a066:	4610      	mov	r0, r2
 810a068:	9105      	str	r1, [sp, #20]
 810a06a:	9204      	str	r2, [sp, #16]
 810a06c:	f7ff fd5e 	bl	8109b2c <__hexdig_fun>
 810a070:	2800      	cmp	r0, #0
 810a072:	d14f      	bne.n	810a114 <__hexnan+0xe4>
 810a074:	9a04      	ldr	r2, [sp, #16]
 810a076:	9905      	ldr	r1, [sp, #20]
 810a078:	2a20      	cmp	r2, #32
 810a07a:	d818      	bhi.n	810a0ae <__hexnan+0x7e>
 810a07c:	9b02      	ldr	r3, [sp, #8]
 810a07e:	459b      	cmp	fp, r3
 810a080:	dd13      	ble.n	810a0aa <__hexnan+0x7a>
 810a082:	454c      	cmp	r4, r9
 810a084:	d206      	bcs.n	810a094 <__hexnan+0x64>
 810a086:	2d07      	cmp	r5, #7
 810a088:	dc04      	bgt.n	810a094 <__hexnan+0x64>
 810a08a:	462a      	mov	r2, r5
 810a08c:	4649      	mov	r1, r9
 810a08e:	4620      	mov	r0, r4
 810a090:	f7ff ffa8 	bl	8109fe4 <L_shift>
 810a094:	4544      	cmp	r4, r8
 810a096:	d950      	bls.n	810a13a <__hexnan+0x10a>
 810a098:	2300      	movs	r3, #0
 810a09a:	f1a4 0904 	sub.w	r9, r4, #4
 810a09e:	f844 3c04 	str.w	r3, [r4, #-4]
 810a0a2:	f8cd b008 	str.w	fp, [sp, #8]
 810a0a6:	464c      	mov	r4, r9
 810a0a8:	461d      	mov	r5, r3
 810a0aa:	9903      	ldr	r1, [sp, #12]
 810a0ac:	e7d7      	b.n	810a05e <__hexnan+0x2e>
 810a0ae:	2a29      	cmp	r2, #41	; 0x29
 810a0b0:	d156      	bne.n	810a160 <__hexnan+0x130>
 810a0b2:	3102      	adds	r1, #2
 810a0b4:	f8ca 1000 	str.w	r1, [sl]
 810a0b8:	f1bb 0f00 	cmp.w	fp, #0
 810a0bc:	d050      	beq.n	810a160 <__hexnan+0x130>
 810a0be:	454c      	cmp	r4, r9
 810a0c0:	d206      	bcs.n	810a0d0 <__hexnan+0xa0>
 810a0c2:	2d07      	cmp	r5, #7
 810a0c4:	dc04      	bgt.n	810a0d0 <__hexnan+0xa0>
 810a0c6:	462a      	mov	r2, r5
 810a0c8:	4649      	mov	r1, r9
 810a0ca:	4620      	mov	r0, r4
 810a0cc:	f7ff ff8a 	bl	8109fe4 <L_shift>
 810a0d0:	4544      	cmp	r4, r8
 810a0d2:	d934      	bls.n	810a13e <__hexnan+0x10e>
 810a0d4:	f1a8 0204 	sub.w	r2, r8, #4
 810a0d8:	4623      	mov	r3, r4
 810a0da:	f853 1b04 	ldr.w	r1, [r3], #4
 810a0de:	f842 1f04 	str.w	r1, [r2, #4]!
 810a0e2:	429f      	cmp	r7, r3
 810a0e4:	d2f9      	bcs.n	810a0da <__hexnan+0xaa>
 810a0e6:	1b3b      	subs	r3, r7, r4
 810a0e8:	f023 0303 	bic.w	r3, r3, #3
 810a0ec:	3304      	adds	r3, #4
 810a0ee:	3401      	adds	r4, #1
 810a0f0:	3e03      	subs	r6, #3
 810a0f2:	42b4      	cmp	r4, r6
 810a0f4:	bf88      	it	hi
 810a0f6:	2304      	movhi	r3, #4
 810a0f8:	4443      	add	r3, r8
 810a0fa:	2200      	movs	r2, #0
 810a0fc:	f843 2b04 	str.w	r2, [r3], #4
 810a100:	429f      	cmp	r7, r3
 810a102:	d2fb      	bcs.n	810a0fc <__hexnan+0xcc>
 810a104:	683b      	ldr	r3, [r7, #0]
 810a106:	b91b      	cbnz	r3, 810a110 <__hexnan+0xe0>
 810a108:	4547      	cmp	r7, r8
 810a10a:	d127      	bne.n	810a15c <__hexnan+0x12c>
 810a10c:	2301      	movs	r3, #1
 810a10e:	603b      	str	r3, [r7, #0]
 810a110:	2005      	movs	r0, #5
 810a112:	e026      	b.n	810a162 <__hexnan+0x132>
 810a114:	3501      	adds	r5, #1
 810a116:	2d08      	cmp	r5, #8
 810a118:	f10b 0b01 	add.w	fp, fp, #1
 810a11c:	dd06      	ble.n	810a12c <__hexnan+0xfc>
 810a11e:	4544      	cmp	r4, r8
 810a120:	d9c3      	bls.n	810a0aa <__hexnan+0x7a>
 810a122:	2300      	movs	r3, #0
 810a124:	f844 3c04 	str.w	r3, [r4, #-4]
 810a128:	2501      	movs	r5, #1
 810a12a:	3c04      	subs	r4, #4
 810a12c:	6822      	ldr	r2, [r4, #0]
 810a12e:	f000 000f 	and.w	r0, r0, #15
 810a132:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810a136:	6022      	str	r2, [r4, #0]
 810a138:	e7b7      	b.n	810a0aa <__hexnan+0x7a>
 810a13a:	2508      	movs	r5, #8
 810a13c:	e7b5      	b.n	810a0aa <__hexnan+0x7a>
 810a13e:	9b01      	ldr	r3, [sp, #4]
 810a140:	2b00      	cmp	r3, #0
 810a142:	d0df      	beq.n	810a104 <__hexnan+0xd4>
 810a144:	f04f 32ff 	mov.w	r2, #4294967295
 810a148:	f1c3 0320 	rsb	r3, r3, #32
 810a14c:	fa22 f303 	lsr.w	r3, r2, r3
 810a150:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810a154:	401a      	ands	r2, r3
 810a156:	f846 2c04 	str.w	r2, [r6, #-4]
 810a15a:	e7d3      	b.n	810a104 <__hexnan+0xd4>
 810a15c:	3f04      	subs	r7, #4
 810a15e:	e7d1      	b.n	810a104 <__hexnan+0xd4>
 810a160:	2004      	movs	r0, #4
 810a162:	b007      	add	sp, #28
 810a164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810a168 <_localeconv_r>:
 810a168:	4800      	ldr	r0, [pc, #0]	; (810a16c <_localeconv_r+0x4>)
 810a16a:	4770      	bx	lr
 810a16c:	10000168 	.word	0x10000168

0810a170 <_lseek_r>:
 810a170:	b538      	push	{r3, r4, r5, lr}
 810a172:	4d07      	ldr	r5, [pc, #28]	; (810a190 <_lseek_r+0x20>)
 810a174:	4604      	mov	r4, r0
 810a176:	4608      	mov	r0, r1
 810a178:	4611      	mov	r1, r2
 810a17a:	2200      	movs	r2, #0
 810a17c:	602a      	str	r2, [r5, #0]
 810a17e:	461a      	mov	r2, r3
 810a180:	f7f7 feec 	bl	8101f5c <_lseek>
 810a184:	1c43      	adds	r3, r0, #1
 810a186:	d102      	bne.n	810a18e <_lseek_r+0x1e>
 810a188:	682b      	ldr	r3, [r5, #0]
 810a18a:	b103      	cbz	r3, 810a18e <_lseek_r+0x1e>
 810a18c:	6023      	str	r3, [r4, #0]
 810a18e:	bd38      	pop	{r3, r4, r5, pc}
 810a190:	1003ebf8 	.word	0x1003ebf8

0810a194 <__swhatbuf_r>:
 810a194:	b570      	push	{r4, r5, r6, lr}
 810a196:	460e      	mov	r6, r1
 810a198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a19c:	2900      	cmp	r1, #0
 810a19e:	b096      	sub	sp, #88	; 0x58
 810a1a0:	4614      	mov	r4, r2
 810a1a2:	461d      	mov	r5, r3
 810a1a4:	da07      	bge.n	810a1b6 <__swhatbuf_r+0x22>
 810a1a6:	2300      	movs	r3, #0
 810a1a8:	602b      	str	r3, [r5, #0]
 810a1aa:	89b3      	ldrh	r3, [r6, #12]
 810a1ac:	061a      	lsls	r2, r3, #24
 810a1ae:	d410      	bmi.n	810a1d2 <__swhatbuf_r+0x3e>
 810a1b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a1b4:	e00e      	b.n	810a1d4 <__swhatbuf_r+0x40>
 810a1b6:	466a      	mov	r2, sp
 810a1b8:	f001 f86e 	bl	810b298 <_fstat_r>
 810a1bc:	2800      	cmp	r0, #0
 810a1be:	dbf2      	blt.n	810a1a6 <__swhatbuf_r+0x12>
 810a1c0:	9a01      	ldr	r2, [sp, #4]
 810a1c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810a1c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810a1ca:	425a      	negs	r2, r3
 810a1cc:	415a      	adcs	r2, r3
 810a1ce:	602a      	str	r2, [r5, #0]
 810a1d0:	e7ee      	b.n	810a1b0 <__swhatbuf_r+0x1c>
 810a1d2:	2340      	movs	r3, #64	; 0x40
 810a1d4:	2000      	movs	r0, #0
 810a1d6:	6023      	str	r3, [r4, #0]
 810a1d8:	b016      	add	sp, #88	; 0x58
 810a1da:	bd70      	pop	{r4, r5, r6, pc}

0810a1dc <__smakebuf_r>:
 810a1dc:	898b      	ldrh	r3, [r1, #12]
 810a1de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810a1e0:	079d      	lsls	r5, r3, #30
 810a1e2:	4606      	mov	r6, r0
 810a1e4:	460c      	mov	r4, r1
 810a1e6:	d507      	bpl.n	810a1f8 <__smakebuf_r+0x1c>
 810a1e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810a1ec:	6023      	str	r3, [r4, #0]
 810a1ee:	6123      	str	r3, [r4, #16]
 810a1f0:	2301      	movs	r3, #1
 810a1f2:	6163      	str	r3, [r4, #20]
 810a1f4:	b002      	add	sp, #8
 810a1f6:	bd70      	pop	{r4, r5, r6, pc}
 810a1f8:	ab01      	add	r3, sp, #4
 810a1fa:	466a      	mov	r2, sp
 810a1fc:	f7ff ffca 	bl	810a194 <__swhatbuf_r>
 810a200:	9900      	ldr	r1, [sp, #0]
 810a202:	4605      	mov	r5, r0
 810a204:	4630      	mov	r0, r6
 810a206:	f7fc fd91 	bl	8106d2c <_malloc_r>
 810a20a:	b948      	cbnz	r0, 810a220 <__smakebuf_r+0x44>
 810a20c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a210:	059a      	lsls	r2, r3, #22
 810a212:	d4ef      	bmi.n	810a1f4 <__smakebuf_r+0x18>
 810a214:	f023 0303 	bic.w	r3, r3, #3
 810a218:	f043 0302 	orr.w	r3, r3, #2
 810a21c:	81a3      	strh	r3, [r4, #12]
 810a21e:	e7e3      	b.n	810a1e8 <__smakebuf_r+0xc>
 810a220:	4b0d      	ldr	r3, [pc, #52]	; (810a258 <__smakebuf_r+0x7c>)
 810a222:	62b3      	str	r3, [r6, #40]	; 0x28
 810a224:	89a3      	ldrh	r3, [r4, #12]
 810a226:	6020      	str	r0, [r4, #0]
 810a228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a22c:	81a3      	strh	r3, [r4, #12]
 810a22e:	9b00      	ldr	r3, [sp, #0]
 810a230:	6163      	str	r3, [r4, #20]
 810a232:	9b01      	ldr	r3, [sp, #4]
 810a234:	6120      	str	r0, [r4, #16]
 810a236:	b15b      	cbz	r3, 810a250 <__smakebuf_r+0x74>
 810a238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a23c:	4630      	mov	r0, r6
 810a23e:	f001 f83d 	bl	810b2bc <_isatty_r>
 810a242:	b128      	cbz	r0, 810a250 <__smakebuf_r+0x74>
 810a244:	89a3      	ldrh	r3, [r4, #12]
 810a246:	f023 0303 	bic.w	r3, r3, #3
 810a24a:	f043 0301 	orr.w	r3, r3, #1
 810a24e:	81a3      	strh	r3, [r4, #12]
 810a250:	89a0      	ldrh	r0, [r4, #12]
 810a252:	4305      	orrs	r5, r0
 810a254:	81a5      	strh	r5, [r4, #12]
 810a256:	e7cd      	b.n	810a1f4 <__smakebuf_r+0x18>
 810a258:	08106a89 	.word	0x08106a89

0810a25c <malloc>:
 810a25c:	4b02      	ldr	r3, [pc, #8]	; (810a268 <malloc+0xc>)
 810a25e:	4601      	mov	r1, r0
 810a260:	6818      	ldr	r0, [r3, #0]
 810a262:	f7fc bd63 	b.w	8106d2c <_malloc_r>
 810a266:	bf00      	nop
 810a268:	10000010 	.word	0x10000010

0810a26c <__ascii_mbtowc>:
 810a26c:	b082      	sub	sp, #8
 810a26e:	b901      	cbnz	r1, 810a272 <__ascii_mbtowc+0x6>
 810a270:	a901      	add	r1, sp, #4
 810a272:	b142      	cbz	r2, 810a286 <__ascii_mbtowc+0x1a>
 810a274:	b14b      	cbz	r3, 810a28a <__ascii_mbtowc+0x1e>
 810a276:	7813      	ldrb	r3, [r2, #0]
 810a278:	600b      	str	r3, [r1, #0]
 810a27a:	7812      	ldrb	r2, [r2, #0]
 810a27c:	1e10      	subs	r0, r2, #0
 810a27e:	bf18      	it	ne
 810a280:	2001      	movne	r0, #1
 810a282:	b002      	add	sp, #8
 810a284:	4770      	bx	lr
 810a286:	4610      	mov	r0, r2
 810a288:	e7fb      	b.n	810a282 <__ascii_mbtowc+0x16>
 810a28a:	f06f 0001 	mvn.w	r0, #1
 810a28e:	e7f8      	b.n	810a282 <__ascii_mbtowc+0x16>

0810a290 <memcpy>:
 810a290:	440a      	add	r2, r1
 810a292:	4291      	cmp	r1, r2
 810a294:	f100 33ff 	add.w	r3, r0, #4294967295
 810a298:	d100      	bne.n	810a29c <memcpy+0xc>
 810a29a:	4770      	bx	lr
 810a29c:	b510      	push	{r4, lr}
 810a29e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a2a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a2a6:	4291      	cmp	r1, r2
 810a2a8:	d1f9      	bne.n	810a29e <memcpy+0xe>
 810a2aa:	bd10      	pop	{r4, pc}

0810a2ac <__malloc_lock>:
 810a2ac:	4801      	ldr	r0, [pc, #4]	; (810a2b4 <__malloc_lock+0x8>)
 810a2ae:	f7fc bce2 	b.w	8106c76 <__retarget_lock_acquire_recursive>
 810a2b2:	bf00      	nop
 810a2b4:	1003ebf0 	.word	0x1003ebf0

0810a2b8 <__malloc_unlock>:
 810a2b8:	4801      	ldr	r0, [pc, #4]	; (810a2c0 <__malloc_unlock+0x8>)
 810a2ba:	f7fc bcdd 	b.w	8106c78 <__retarget_lock_release_recursive>
 810a2be:	bf00      	nop
 810a2c0:	1003ebf0 	.word	0x1003ebf0

0810a2c4 <_Balloc>:
 810a2c4:	b570      	push	{r4, r5, r6, lr}
 810a2c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810a2c8:	4604      	mov	r4, r0
 810a2ca:	460d      	mov	r5, r1
 810a2cc:	b976      	cbnz	r6, 810a2ec <_Balloc+0x28>
 810a2ce:	2010      	movs	r0, #16
 810a2d0:	f7ff ffc4 	bl	810a25c <malloc>
 810a2d4:	4602      	mov	r2, r0
 810a2d6:	6260      	str	r0, [r4, #36]	; 0x24
 810a2d8:	b920      	cbnz	r0, 810a2e4 <_Balloc+0x20>
 810a2da:	4b18      	ldr	r3, [pc, #96]	; (810a33c <_Balloc+0x78>)
 810a2dc:	4818      	ldr	r0, [pc, #96]	; (810a340 <_Balloc+0x7c>)
 810a2de:	2166      	movs	r1, #102	; 0x66
 810a2e0:	f000 ffaa 	bl	810b238 <__assert_func>
 810a2e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810a2e8:	6006      	str	r6, [r0, #0]
 810a2ea:	60c6      	str	r6, [r0, #12]
 810a2ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810a2ee:	68f3      	ldr	r3, [r6, #12]
 810a2f0:	b183      	cbz	r3, 810a314 <_Balloc+0x50>
 810a2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a2f4:	68db      	ldr	r3, [r3, #12]
 810a2f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810a2fa:	b9b8      	cbnz	r0, 810a32c <_Balloc+0x68>
 810a2fc:	2101      	movs	r1, #1
 810a2fe:	fa01 f605 	lsl.w	r6, r1, r5
 810a302:	1d72      	adds	r2, r6, #5
 810a304:	0092      	lsls	r2, r2, #2
 810a306:	4620      	mov	r0, r4
 810a308:	f000 fc97 	bl	810ac3a <_calloc_r>
 810a30c:	b160      	cbz	r0, 810a328 <_Balloc+0x64>
 810a30e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810a312:	e00e      	b.n	810a332 <_Balloc+0x6e>
 810a314:	2221      	movs	r2, #33	; 0x21
 810a316:	2104      	movs	r1, #4
 810a318:	4620      	mov	r0, r4
 810a31a:	f000 fc8e 	bl	810ac3a <_calloc_r>
 810a31e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810a320:	60f0      	str	r0, [r6, #12]
 810a322:	68db      	ldr	r3, [r3, #12]
 810a324:	2b00      	cmp	r3, #0
 810a326:	d1e4      	bne.n	810a2f2 <_Balloc+0x2e>
 810a328:	2000      	movs	r0, #0
 810a32a:	bd70      	pop	{r4, r5, r6, pc}
 810a32c:	6802      	ldr	r2, [r0, #0]
 810a32e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810a332:	2300      	movs	r3, #0
 810a334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810a338:	e7f7      	b.n	810a32a <_Balloc+0x66>
 810a33a:	bf00      	nop
 810a33c:	0810b696 	.word	0x0810b696
 810a340:	0810b79c 	.word	0x0810b79c

0810a344 <_Bfree>:
 810a344:	b570      	push	{r4, r5, r6, lr}
 810a346:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810a348:	4605      	mov	r5, r0
 810a34a:	460c      	mov	r4, r1
 810a34c:	b976      	cbnz	r6, 810a36c <_Bfree+0x28>
 810a34e:	2010      	movs	r0, #16
 810a350:	f7ff ff84 	bl	810a25c <malloc>
 810a354:	4602      	mov	r2, r0
 810a356:	6268      	str	r0, [r5, #36]	; 0x24
 810a358:	b920      	cbnz	r0, 810a364 <_Bfree+0x20>
 810a35a:	4b09      	ldr	r3, [pc, #36]	; (810a380 <_Bfree+0x3c>)
 810a35c:	4809      	ldr	r0, [pc, #36]	; (810a384 <_Bfree+0x40>)
 810a35e:	218a      	movs	r1, #138	; 0x8a
 810a360:	f000 ff6a 	bl	810b238 <__assert_func>
 810a364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810a368:	6006      	str	r6, [r0, #0]
 810a36a:	60c6      	str	r6, [r0, #12]
 810a36c:	b13c      	cbz	r4, 810a37e <_Bfree+0x3a>
 810a36e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810a370:	6862      	ldr	r2, [r4, #4]
 810a372:	68db      	ldr	r3, [r3, #12]
 810a374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810a378:	6021      	str	r1, [r4, #0]
 810a37a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810a37e:	bd70      	pop	{r4, r5, r6, pc}
 810a380:	0810b696 	.word	0x0810b696
 810a384:	0810b79c 	.word	0x0810b79c

0810a388 <__multadd>:
 810a388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a38c:	690e      	ldr	r6, [r1, #16]
 810a38e:	4607      	mov	r7, r0
 810a390:	4698      	mov	r8, r3
 810a392:	460c      	mov	r4, r1
 810a394:	f101 0014 	add.w	r0, r1, #20
 810a398:	2300      	movs	r3, #0
 810a39a:	6805      	ldr	r5, [r0, #0]
 810a39c:	b2a9      	uxth	r1, r5
 810a39e:	fb02 8101 	mla	r1, r2, r1, r8
 810a3a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810a3a6:	0c2d      	lsrs	r5, r5, #16
 810a3a8:	fb02 c505 	mla	r5, r2, r5, ip
 810a3ac:	b289      	uxth	r1, r1
 810a3ae:	3301      	adds	r3, #1
 810a3b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810a3b4:	429e      	cmp	r6, r3
 810a3b6:	f840 1b04 	str.w	r1, [r0], #4
 810a3ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810a3be:	dcec      	bgt.n	810a39a <__multadd+0x12>
 810a3c0:	f1b8 0f00 	cmp.w	r8, #0
 810a3c4:	d022      	beq.n	810a40c <__multadd+0x84>
 810a3c6:	68a3      	ldr	r3, [r4, #8]
 810a3c8:	42b3      	cmp	r3, r6
 810a3ca:	dc19      	bgt.n	810a400 <__multadd+0x78>
 810a3cc:	6861      	ldr	r1, [r4, #4]
 810a3ce:	4638      	mov	r0, r7
 810a3d0:	3101      	adds	r1, #1
 810a3d2:	f7ff ff77 	bl	810a2c4 <_Balloc>
 810a3d6:	4605      	mov	r5, r0
 810a3d8:	b928      	cbnz	r0, 810a3e6 <__multadd+0x5e>
 810a3da:	4602      	mov	r2, r0
 810a3dc:	4b0d      	ldr	r3, [pc, #52]	; (810a414 <__multadd+0x8c>)
 810a3de:	480e      	ldr	r0, [pc, #56]	; (810a418 <__multadd+0x90>)
 810a3e0:	21b5      	movs	r1, #181	; 0xb5
 810a3e2:	f000 ff29 	bl	810b238 <__assert_func>
 810a3e6:	6922      	ldr	r2, [r4, #16]
 810a3e8:	3202      	adds	r2, #2
 810a3ea:	f104 010c 	add.w	r1, r4, #12
 810a3ee:	0092      	lsls	r2, r2, #2
 810a3f0:	300c      	adds	r0, #12
 810a3f2:	f7ff ff4d 	bl	810a290 <memcpy>
 810a3f6:	4621      	mov	r1, r4
 810a3f8:	4638      	mov	r0, r7
 810a3fa:	f7ff ffa3 	bl	810a344 <_Bfree>
 810a3fe:	462c      	mov	r4, r5
 810a400:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810a404:	3601      	adds	r6, #1
 810a406:	f8c3 8014 	str.w	r8, [r3, #20]
 810a40a:	6126      	str	r6, [r4, #16]
 810a40c:	4620      	mov	r0, r4
 810a40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a412:	bf00      	nop
 810a414:	0810b70c 	.word	0x0810b70c
 810a418:	0810b79c 	.word	0x0810b79c

0810a41c <__s2b>:
 810a41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a420:	460c      	mov	r4, r1
 810a422:	4615      	mov	r5, r2
 810a424:	461f      	mov	r7, r3
 810a426:	2209      	movs	r2, #9
 810a428:	3308      	adds	r3, #8
 810a42a:	4606      	mov	r6, r0
 810a42c:	fb93 f3f2 	sdiv	r3, r3, r2
 810a430:	2100      	movs	r1, #0
 810a432:	2201      	movs	r2, #1
 810a434:	429a      	cmp	r2, r3
 810a436:	db09      	blt.n	810a44c <__s2b+0x30>
 810a438:	4630      	mov	r0, r6
 810a43a:	f7ff ff43 	bl	810a2c4 <_Balloc>
 810a43e:	b940      	cbnz	r0, 810a452 <__s2b+0x36>
 810a440:	4602      	mov	r2, r0
 810a442:	4b19      	ldr	r3, [pc, #100]	; (810a4a8 <__s2b+0x8c>)
 810a444:	4819      	ldr	r0, [pc, #100]	; (810a4ac <__s2b+0x90>)
 810a446:	21ce      	movs	r1, #206	; 0xce
 810a448:	f000 fef6 	bl	810b238 <__assert_func>
 810a44c:	0052      	lsls	r2, r2, #1
 810a44e:	3101      	adds	r1, #1
 810a450:	e7f0      	b.n	810a434 <__s2b+0x18>
 810a452:	9b08      	ldr	r3, [sp, #32]
 810a454:	6143      	str	r3, [r0, #20]
 810a456:	2d09      	cmp	r5, #9
 810a458:	f04f 0301 	mov.w	r3, #1
 810a45c:	6103      	str	r3, [r0, #16]
 810a45e:	dd16      	ble.n	810a48e <__s2b+0x72>
 810a460:	f104 0909 	add.w	r9, r4, #9
 810a464:	46c8      	mov	r8, r9
 810a466:	442c      	add	r4, r5
 810a468:	f818 3b01 	ldrb.w	r3, [r8], #1
 810a46c:	4601      	mov	r1, r0
 810a46e:	3b30      	subs	r3, #48	; 0x30
 810a470:	220a      	movs	r2, #10
 810a472:	4630      	mov	r0, r6
 810a474:	f7ff ff88 	bl	810a388 <__multadd>
 810a478:	45a0      	cmp	r8, r4
 810a47a:	d1f5      	bne.n	810a468 <__s2b+0x4c>
 810a47c:	f1a5 0408 	sub.w	r4, r5, #8
 810a480:	444c      	add	r4, r9
 810a482:	1b2d      	subs	r5, r5, r4
 810a484:	1963      	adds	r3, r4, r5
 810a486:	42bb      	cmp	r3, r7
 810a488:	db04      	blt.n	810a494 <__s2b+0x78>
 810a48a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a48e:	340a      	adds	r4, #10
 810a490:	2509      	movs	r5, #9
 810a492:	e7f6      	b.n	810a482 <__s2b+0x66>
 810a494:	f814 3b01 	ldrb.w	r3, [r4], #1
 810a498:	4601      	mov	r1, r0
 810a49a:	3b30      	subs	r3, #48	; 0x30
 810a49c:	220a      	movs	r2, #10
 810a49e:	4630      	mov	r0, r6
 810a4a0:	f7ff ff72 	bl	810a388 <__multadd>
 810a4a4:	e7ee      	b.n	810a484 <__s2b+0x68>
 810a4a6:	bf00      	nop
 810a4a8:	0810b70c 	.word	0x0810b70c
 810a4ac:	0810b79c 	.word	0x0810b79c

0810a4b0 <__hi0bits>:
 810a4b0:	0c03      	lsrs	r3, r0, #16
 810a4b2:	041b      	lsls	r3, r3, #16
 810a4b4:	b9d3      	cbnz	r3, 810a4ec <__hi0bits+0x3c>
 810a4b6:	0400      	lsls	r0, r0, #16
 810a4b8:	2310      	movs	r3, #16
 810a4ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810a4be:	bf04      	itt	eq
 810a4c0:	0200      	lsleq	r0, r0, #8
 810a4c2:	3308      	addeq	r3, #8
 810a4c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810a4c8:	bf04      	itt	eq
 810a4ca:	0100      	lsleq	r0, r0, #4
 810a4cc:	3304      	addeq	r3, #4
 810a4ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810a4d2:	bf04      	itt	eq
 810a4d4:	0080      	lsleq	r0, r0, #2
 810a4d6:	3302      	addeq	r3, #2
 810a4d8:	2800      	cmp	r0, #0
 810a4da:	db05      	blt.n	810a4e8 <__hi0bits+0x38>
 810a4dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810a4e0:	f103 0301 	add.w	r3, r3, #1
 810a4e4:	bf08      	it	eq
 810a4e6:	2320      	moveq	r3, #32
 810a4e8:	4618      	mov	r0, r3
 810a4ea:	4770      	bx	lr
 810a4ec:	2300      	movs	r3, #0
 810a4ee:	e7e4      	b.n	810a4ba <__hi0bits+0xa>

0810a4f0 <__lo0bits>:
 810a4f0:	6803      	ldr	r3, [r0, #0]
 810a4f2:	f013 0207 	ands.w	r2, r3, #7
 810a4f6:	4601      	mov	r1, r0
 810a4f8:	d00b      	beq.n	810a512 <__lo0bits+0x22>
 810a4fa:	07da      	lsls	r2, r3, #31
 810a4fc:	d424      	bmi.n	810a548 <__lo0bits+0x58>
 810a4fe:	0798      	lsls	r0, r3, #30
 810a500:	bf49      	itett	mi
 810a502:	085b      	lsrmi	r3, r3, #1
 810a504:	089b      	lsrpl	r3, r3, #2
 810a506:	2001      	movmi	r0, #1
 810a508:	600b      	strmi	r3, [r1, #0]
 810a50a:	bf5c      	itt	pl
 810a50c:	600b      	strpl	r3, [r1, #0]
 810a50e:	2002      	movpl	r0, #2
 810a510:	4770      	bx	lr
 810a512:	b298      	uxth	r0, r3
 810a514:	b9b0      	cbnz	r0, 810a544 <__lo0bits+0x54>
 810a516:	0c1b      	lsrs	r3, r3, #16
 810a518:	2010      	movs	r0, #16
 810a51a:	f013 0fff 	tst.w	r3, #255	; 0xff
 810a51e:	bf04      	itt	eq
 810a520:	0a1b      	lsreq	r3, r3, #8
 810a522:	3008      	addeq	r0, #8
 810a524:	071a      	lsls	r2, r3, #28
 810a526:	bf04      	itt	eq
 810a528:	091b      	lsreq	r3, r3, #4
 810a52a:	3004      	addeq	r0, #4
 810a52c:	079a      	lsls	r2, r3, #30
 810a52e:	bf04      	itt	eq
 810a530:	089b      	lsreq	r3, r3, #2
 810a532:	3002      	addeq	r0, #2
 810a534:	07da      	lsls	r2, r3, #31
 810a536:	d403      	bmi.n	810a540 <__lo0bits+0x50>
 810a538:	085b      	lsrs	r3, r3, #1
 810a53a:	f100 0001 	add.w	r0, r0, #1
 810a53e:	d005      	beq.n	810a54c <__lo0bits+0x5c>
 810a540:	600b      	str	r3, [r1, #0]
 810a542:	4770      	bx	lr
 810a544:	4610      	mov	r0, r2
 810a546:	e7e8      	b.n	810a51a <__lo0bits+0x2a>
 810a548:	2000      	movs	r0, #0
 810a54a:	4770      	bx	lr
 810a54c:	2020      	movs	r0, #32
 810a54e:	4770      	bx	lr

0810a550 <__i2b>:
 810a550:	b510      	push	{r4, lr}
 810a552:	460c      	mov	r4, r1
 810a554:	2101      	movs	r1, #1
 810a556:	f7ff feb5 	bl	810a2c4 <_Balloc>
 810a55a:	4602      	mov	r2, r0
 810a55c:	b928      	cbnz	r0, 810a56a <__i2b+0x1a>
 810a55e:	4b05      	ldr	r3, [pc, #20]	; (810a574 <__i2b+0x24>)
 810a560:	4805      	ldr	r0, [pc, #20]	; (810a578 <__i2b+0x28>)
 810a562:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810a566:	f000 fe67 	bl	810b238 <__assert_func>
 810a56a:	2301      	movs	r3, #1
 810a56c:	6144      	str	r4, [r0, #20]
 810a56e:	6103      	str	r3, [r0, #16]
 810a570:	bd10      	pop	{r4, pc}
 810a572:	bf00      	nop
 810a574:	0810b70c 	.word	0x0810b70c
 810a578:	0810b79c 	.word	0x0810b79c

0810a57c <__multiply>:
 810a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a580:	4614      	mov	r4, r2
 810a582:	690a      	ldr	r2, [r1, #16]
 810a584:	6923      	ldr	r3, [r4, #16]
 810a586:	429a      	cmp	r2, r3
 810a588:	bfb8      	it	lt
 810a58a:	460b      	movlt	r3, r1
 810a58c:	460d      	mov	r5, r1
 810a58e:	bfbc      	itt	lt
 810a590:	4625      	movlt	r5, r4
 810a592:	461c      	movlt	r4, r3
 810a594:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810a598:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810a59c:	68ab      	ldr	r3, [r5, #8]
 810a59e:	6869      	ldr	r1, [r5, #4]
 810a5a0:	eb0a 0709 	add.w	r7, sl, r9
 810a5a4:	42bb      	cmp	r3, r7
 810a5a6:	b085      	sub	sp, #20
 810a5a8:	bfb8      	it	lt
 810a5aa:	3101      	addlt	r1, #1
 810a5ac:	f7ff fe8a 	bl	810a2c4 <_Balloc>
 810a5b0:	b930      	cbnz	r0, 810a5c0 <__multiply+0x44>
 810a5b2:	4602      	mov	r2, r0
 810a5b4:	4b42      	ldr	r3, [pc, #264]	; (810a6c0 <__multiply+0x144>)
 810a5b6:	4843      	ldr	r0, [pc, #268]	; (810a6c4 <__multiply+0x148>)
 810a5b8:	f240 115d 	movw	r1, #349	; 0x15d
 810a5bc:	f000 fe3c 	bl	810b238 <__assert_func>
 810a5c0:	f100 0614 	add.w	r6, r0, #20
 810a5c4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810a5c8:	4633      	mov	r3, r6
 810a5ca:	2200      	movs	r2, #0
 810a5cc:	4543      	cmp	r3, r8
 810a5ce:	d31e      	bcc.n	810a60e <__multiply+0x92>
 810a5d0:	f105 0c14 	add.w	ip, r5, #20
 810a5d4:	f104 0314 	add.w	r3, r4, #20
 810a5d8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810a5dc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810a5e0:	9202      	str	r2, [sp, #8]
 810a5e2:	ebac 0205 	sub.w	r2, ip, r5
 810a5e6:	3a15      	subs	r2, #21
 810a5e8:	f022 0203 	bic.w	r2, r2, #3
 810a5ec:	3204      	adds	r2, #4
 810a5ee:	f105 0115 	add.w	r1, r5, #21
 810a5f2:	458c      	cmp	ip, r1
 810a5f4:	bf38      	it	cc
 810a5f6:	2204      	movcc	r2, #4
 810a5f8:	9201      	str	r2, [sp, #4]
 810a5fa:	9a02      	ldr	r2, [sp, #8]
 810a5fc:	9303      	str	r3, [sp, #12]
 810a5fe:	429a      	cmp	r2, r3
 810a600:	d808      	bhi.n	810a614 <__multiply+0x98>
 810a602:	2f00      	cmp	r7, #0
 810a604:	dc55      	bgt.n	810a6b2 <__multiply+0x136>
 810a606:	6107      	str	r7, [r0, #16]
 810a608:	b005      	add	sp, #20
 810a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a60e:	f843 2b04 	str.w	r2, [r3], #4
 810a612:	e7db      	b.n	810a5cc <__multiply+0x50>
 810a614:	f8b3 a000 	ldrh.w	sl, [r3]
 810a618:	f1ba 0f00 	cmp.w	sl, #0
 810a61c:	d020      	beq.n	810a660 <__multiply+0xe4>
 810a61e:	f105 0e14 	add.w	lr, r5, #20
 810a622:	46b1      	mov	r9, r6
 810a624:	2200      	movs	r2, #0
 810a626:	f85e 4b04 	ldr.w	r4, [lr], #4
 810a62a:	f8d9 b000 	ldr.w	fp, [r9]
 810a62e:	b2a1      	uxth	r1, r4
 810a630:	fa1f fb8b 	uxth.w	fp, fp
 810a634:	fb0a b101 	mla	r1, sl, r1, fp
 810a638:	4411      	add	r1, r2
 810a63a:	f8d9 2000 	ldr.w	r2, [r9]
 810a63e:	0c24      	lsrs	r4, r4, #16
 810a640:	0c12      	lsrs	r2, r2, #16
 810a642:	fb0a 2404 	mla	r4, sl, r4, r2
 810a646:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810a64a:	b289      	uxth	r1, r1
 810a64c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810a650:	45f4      	cmp	ip, lr
 810a652:	f849 1b04 	str.w	r1, [r9], #4
 810a656:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810a65a:	d8e4      	bhi.n	810a626 <__multiply+0xaa>
 810a65c:	9901      	ldr	r1, [sp, #4]
 810a65e:	5072      	str	r2, [r6, r1]
 810a660:	9a03      	ldr	r2, [sp, #12]
 810a662:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810a666:	3304      	adds	r3, #4
 810a668:	f1b9 0f00 	cmp.w	r9, #0
 810a66c:	d01f      	beq.n	810a6ae <__multiply+0x132>
 810a66e:	6834      	ldr	r4, [r6, #0]
 810a670:	f105 0114 	add.w	r1, r5, #20
 810a674:	46b6      	mov	lr, r6
 810a676:	f04f 0a00 	mov.w	sl, #0
 810a67a:	880a      	ldrh	r2, [r1, #0]
 810a67c:	f8be b002 	ldrh.w	fp, [lr, #2]
 810a680:	fb09 b202 	mla	r2, r9, r2, fp
 810a684:	4492      	add	sl, r2
 810a686:	b2a4      	uxth	r4, r4
 810a688:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810a68c:	f84e 4b04 	str.w	r4, [lr], #4
 810a690:	f851 4b04 	ldr.w	r4, [r1], #4
 810a694:	f8be 2000 	ldrh.w	r2, [lr]
 810a698:	0c24      	lsrs	r4, r4, #16
 810a69a:	fb09 2404 	mla	r4, r9, r4, r2
 810a69e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810a6a2:	458c      	cmp	ip, r1
 810a6a4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810a6a8:	d8e7      	bhi.n	810a67a <__multiply+0xfe>
 810a6aa:	9a01      	ldr	r2, [sp, #4]
 810a6ac:	50b4      	str	r4, [r6, r2]
 810a6ae:	3604      	adds	r6, #4
 810a6b0:	e7a3      	b.n	810a5fa <__multiply+0x7e>
 810a6b2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810a6b6:	2b00      	cmp	r3, #0
 810a6b8:	d1a5      	bne.n	810a606 <__multiply+0x8a>
 810a6ba:	3f01      	subs	r7, #1
 810a6bc:	e7a1      	b.n	810a602 <__multiply+0x86>
 810a6be:	bf00      	nop
 810a6c0:	0810b70c 	.word	0x0810b70c
 810a6c4:	0810b79c 	.word	0x0810b79c

0810a6c8 <__pow5mult>:
 810a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810a6cc:	4615      	mov	r5, r2
 810a6ce:	f012 0203 	ands.w	r2, r2, #3
 810a6d2:	4606      	mov	r6, r0
 810a6d4:	460f      	mov	r7, r1
 810a6d6:	d007      	beq.n	810a6e8 <__pow5mult+0x20>
 810a6d8:	4c25      	ldr	r4, [pc, #148]	; (810a770 <__pow5mult+0xa8>)
 810a6da:	3a01      	subs	r2, #1
 810a6dc:	2300      	movs	r3, #0
 810a6de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810a6e2:	f7ff fe51 	bl	810a388 <__multadd>
 810a6e6:	4607      	mov	r7, r0
 810a6e8:	10ad      	asrs	r5, r5, #2
 810a6ea:	d03d      	beq.n	810a768 <__pow5mult+0xa0>
 810a6ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810a6ee:	b97c      	cbnz	r4, 810a710 <__pow5mult+0x48>
 810a6f0:	2010      	movs	r0, #16
 810a6f2:	f7ff fdb3 	bl	810a25c <malloc>
 810a6f6:	4602      	mov	r2, r0
 810a6f8:	6270      	str	r0, [r6, #36]	; 0x24
 810a6fa:	b928      	cbnz	r0, 810a708 <__pow5mult+0x40>
 810a6fc:	4b1d      	ldr	r3, [pc, #116]	; (810a774 <__pow5mult+0xac>)
 810a6fe:	481e      	ldr	r0, [pc, #120]	; (810a778 <__pow5mult+0xb0>)
 810a700:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810a704:	f000 fd98 	bl	810b238 <__assert_func>
 810a708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810a70c:	6004      	str	r4, [r0, #0]
 810a70e:	60c4      	str	r4, [r0, #12]
 810a710:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810a714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810a718:	b94c      	cbnz	r4, 810a72e <__pow5mult+0x66>
 810a71a:	f240 2171 	movw	r1, #625	; 0x271
 810a71e:	4630      	mov	r0, r6
 810a720:	f7ff ff16 	bl	810a550 <__i2b>
 810a724:	2300      	movs	r3, #0
 810a726:	f8c8 0008 	str.w	r0, [r8, #8]
 810a72a:	4604      	mov	r4, r0
 810a72c:	6003      	str	r3, [r0, #0]
 810a72e:	f04f 0900 	mov.w	r9, #0
 810a732:	07eb      	lsls	r3, r5, #31
 810a734:	d50a      	bpl.n	810a74c <__pow5mult+0x84>
 810a736:	4639      	mov	r1, r7
 810a738:	4622      	mov	r2, r4
 810a73a:	4630      	mov	r0, r6
 810a73c:	f7ff ff1e 	bl	810a57c <__multiply>
 810a740:	4639      	mov	r1, r7
 810a742:	4680      	mov	r8, r0
 810a744:	4630      	mov	r0, r6
 810a746:	f7ff fdfd 	bl	810a344 <_Bfree>
 810a74a:	4647      	mov	r7, r8
 810a74c:	106d      	asrs	r5, r5, #1
 810a74e:	d00b      	beq.n	810a768 <__pow5mult+0xa0>
 810a750:	6820      	ldr	r0, [r4, #0]
 810a752:	b938      	cbnz	r0, 810a764 <__pow5mult+0x9c>
 810a754:	4622      	mov	r2, r4
 810a756:	4621      	mov	r1, r4
 810a758:	4630      	mov	r0, r6
 810a75a:	f7ff ff0f 	bl	810a57c <__multiply>
 810a75e:	6020      	str	r0, [r4, #0]
 810a760:	f8c0 9000 	str.w	r9, [r0]
 810a764:	4604      	mov	r4, r0
 810a766:	e7e4      	b.n	810a732 <__pow5mult+0x6a>
 810a768:	4638      	mov	r0, r7
 810a76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810a76e:	bf00      	nop
 810a770:	0810b8f0 	.word	0x0810b8f0
 810a774:	0810b696 	.word	0x0810b696
 810a778:	0810b79c 	.word	0x0810b79c

0810a77c <__lshift>:
 810a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a780:	460c      	mov	r4, r1
 810a782:	6849      	ldr	r1, [r1, #4]
 810a784:	6923      	ldr	r3, [r4, #16]
 810a786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810a78a:	68a3      	ldr	r3, [r4, #8]
 810a78c:	4607      	mov	r7, r0
 810a78e:	4691      	mov	r9, r2
 810a790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810a794:	f108 0601 	add.w	r6, r8, #1
 810a798:	42b3      	cmp	r3, r6
 810a79a:	db0b      	blt.n	810a7b4 <__lshift+0x38>
 810a79c:	4638      	mov	r0, r7
 810a79e:	f7ff fd91 	bl	810a2c4 <_Balloc>
 810a7a2:	4605      	mov	r5, r0
 810a7a4:	b948      	cbnz	r0, 810a7ba <__lshift+0x3e>
 810a7a6:	4602      	mov	r2, r0
 810a7a8:	4b28      	ldr	r3, [pc, #160]	; (810a84c <__lshift+0xd0>)
 810a7aa:	4829      	ldr	r0, [pc, #164]	; (810a850 <__lshift+0xd4>)
 810a7ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 810a7b0:	f000 fd42 	bl	810b238 <__assert_func>
 810a7b4:	3101      	adds	r1, #1
 810a7b6:	005b      	lsls	r3, r3, #1
 810a7b8:	e7ee      	b.n	810a798 <__lshift+0x1c>
 810a7ba:	2300      	movs	r3, #0
 810a7bc:	f100 0114 	add.w	r1, r0, #20
 810a7c0:	f100 0210 	add.w	r2, r0, #16
 810a7c4:	4618      	mov	r0, r3
 810a7c6:	4553      	cmp	r3, sl
 810a7c8:	db33      	blt.n	810a832 <__lshift+0xb6>
 810a7ca:	6920      	ldr	r0, [r4, #16]
 810a7cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810a7d0:	f104 0314 	add.w	r3, r4, #20
 810a7d4:	f019 091f 	ands.w	r9, r9, #31
 810a7d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810a7dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810a7e0:	d02b      	beq.n	810a83a <__lshift+0xbe>
 810a7e2:	f1c9 0e20 	rsb	lr, r9, #32
 810a7e6:	468a      	mov	sl, r1
 810a7e8:	2200      	movs	r2, #0
 810a7ea:	6818      	ldr	r0, [r3, #0]
 810a7ec:	fa00 f009 	lsl.w	r0, r0, r9
 810a7f0:	4302      	orrs	r2, r0
 810a7f2:	f84a 2b04 	str.w	r2, [sl], #4
 810a7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 810a7fa:	459c      	cmp	ip, r3
 810a7fc:	fa22 f20e 	lsr.w	r2, r2, lr
 810a800:	d8f3      	bhi.n	810a7ea <__lshift+0x6e>
 810a802:	ebac 0304 	sub.w	r3, ip, r4
 810a806:	3b15      	subs	r3, #21
 810a808:	f023 0303 	bic.w	r3, r3, #3
 810a80c:	3304      	adds	r3, #4
 810a80e:	f104 0015 	add.w	r0, r4, #21
 810a812:	4584      	cmp	ip, r0
 810a814:	bf38      	it	cc
 810a816:	2304      	movcc	r3, #4
 810a818:	50ca      	str	r2, [r1, r3]
 810a81a:	b10a      	cbz	r2, 810a820 <__lshift+0xa4>
 810a81c:	f108 0602 	add.w	r6, r8, #2
 810a820:	3e01      	subs	r6, #1
 810a822:	4638      	mov	r0, r7
 810a824:	612e      	str	r6, [r5, #16]
 810a826:	4621      	mov	r1, r4
 810a828:	f7ff fd8c 	bl	810a344 <_Bfree>
 810a82c:	4628      	mov	r0, r5
 810a82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a832:	f842 0f04 	str.w	r0, [r2, #4]!
 810a836:	3301      	adds	r3, #1
 810a838:	e7c5      	b.n	810a7c6 <__lshift+0x4a>
 810a83a:	3904      	subs	r1, #4
 810a83c:	f853 2b04 	ldr.w	r2, [r3], #4
 810a840:	f841 2f04 	str.w	r2, [r1, #4]!
 810a844:	459c      	cmp	ip, r3
 810a846:	d8f9      	bhi.n	810a83c <__lshift+0xc0>
 810a848:	e7ea      	b.n	810a820 <__lshift+0xa4>
 810a84a:	bf00      	nop
 810a84c:	0810b70c 	.word	0x0810b70c
 810a850:	0810b79c 	.word	0x0810b79c

0810a854 <__mcmp>:
 810a854:	b530      	push	{r4, r5, lr}
 810a856:	6902      	ldr	r2, [r0, #16]
 810a858:	690c      	ldr	r4, [r1, #16]
 810a85a:	1b12      	subs	r2, r2, r4
 810a85c:	d10e      	bne.n	810a87c <__mcmp+0x28>
 810a85e:	f100 0314 	add.w	r3, r0, #20
 810a862:	3114      	adds	r1, #20
 810a864:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810a868:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810a86c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810a870:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810a874:	42a5      	cmp	r5, r4
 810a876:	d003      	beq.n	810a880 <__mcmp+0x2c>
 810a878:	d305      	bcc.n	810a886 <__mcmp+0x32>
 810a87a:	2201      	movs	r2, #1
 810a87c:	4610      	mov	r0, r2
 810a87e:	bd30      	pop	{r4, r5, pc}
 810a880:	4283      	cmp	r3, r0
 810a882:	d3f3      	bcc.n	810a86c <__mcmp+0x18>
 810a884:	e7fa      	b.n	810a87c <__mcmp+0x28>
 810a886:	f04f 32ff 	mov.w	r2, #4294967295
 810a88a:	e7f7      	b.n	810a87c <__mcmp+0x28>

0810a88c <__mdiff>:
 810a88c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a890:	460c      	mov	r4, r1
 810a892:	4606      	mov	r6, r0
 810a894:	4611      	mov	r1, r2
 810a896:	4620      	mov	r0, r4
 810a898:	4617      	mov	r7, r2
 810a89a:	f7ff ffdb 	bl	810a854 <__mcmp>
 810a89e:	1e05      	subs	r5, r0, #0
 810a8a0:	d110      	bne.n	810a8c4 <__mdiff+0x38>
 810a8a2:	4629      	mov	r1, r5
 810a8a4:	4630      	mov	r0, r6
 810a8a6:	f7ff fd0d 	bl	810a2c4 <_Balloc>
 810a8aa:	b930      	cbnz	r0, 810a8ba <__mdiff+0x2e>
 810a8ac:	4b39      	ldr	r3, [pc, #228]	; (810a994 <__mdiff+0x108>)
 810a8ae:	4602      	mov	r2, r0
 810a8b0:	f240 2132 	movw	r1, #562	; 0x232
 810a8b4:	4838      	ldr	r0, [pc, #224]	; (810a998 <__mdiff+0x10c>)
 810a8b6:	f000 fcbf 	bl	810b238 <__assert_func>
 810a8ba:	2301      	movs	r3, #1
 810a8bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810a8c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a8c4:	bfa4      	itt	ge
 810a8c6:	463b      	movge	r3, r7
 810a8c8:	4627      	movge	r7, r4
 810a8ca:	4630      	mov	r0, r6
 810a8cc:	6879      	ldr	r1, [r7, #4]
 810a8ce:	bfa6      	itte	ge
 810a8d0:	461c      	movge	r4, r3
 810a8d2:	2500      	movge	r5, #0
 810a8d4:	2501      	movlt	r5, #1
 810a8d6:	f7ff fcf5 	bl	810a2c4 <_Balloc>
 810a8da:	b920      	cbnz	r0, 810a8e6 <__mdiff+0x5a>
 810a8dc:	4b2d      	ldr	r3, [pc, #180]	; (810a994 <__mdiff+0x108>)
 810a8de:	4602      	mov	r2, r0
 810a8e0:	f44f 7110 	mov.w	r1, #576	; 0x240
 810a8e4:	e7e6      	b.n	810a8b4 <__mdiff+0x28>
 810a8e6:	693e      	ldr	r6, [r7, #16]
 810a8e8:	60c5      	str	r5, [r0, #12]
 810a8ea:	6925      	ldr	r5, [r4, #16]
 810a8ec:	f107 0114 	add.w	r1, r7, #20
 810a8f0:	f104 0914 	add.w	r9, r4, #20
 810a8f4:	f100 0e14 	add.w	lr, r0, #20
 810a8f8:	f107 0210 	add.w	r2, r7, #16
 810a8fc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810a900:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810a904:	46f2      	mov	sl, lr
 810a906:	2700      	movs	r7, #0
 810a908:	f859 3b04 	ldr.w	r3, [r9], #4
 810a90c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810a910:	fa1f f883 	uxth.w	r8, r3
 810a914:	fa17 f78b 	uxtah	r7, r7, fp
 810a918:	0c1b      	lsrs	r3, r3, #16
 810a91a:	eba7 0808 	sub.w	r8, r7, r8
 810a91e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810a922:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810a926:	fa1f f888 	uxth.w	r8, r8
 810a92a:	141f      	asrs	r7, r3, #16
 810a92c:	454d      	cmp	r5, r9
 810a92e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810a932:	f84a 3b04 	str.w	r3, [sl], #4
 810a936:	d8e7      	bhi.n	810a908 <__mdiff+0x7c>
 810a938:	1b2b      	subs	r3, r5, r4
 810a93a:	3b15      	subs	r3, #21
 810a93c:	f023 0303 	bic.w	r3, r3, #3
 810a940:	3304      	adds	r3, #4
 810a942:	3415      	adds	r4, #21
 810a944:	42a5      	cmp	r5, r4
 810a946:	bf38      	it	cc
 810a948:	2304      	movcc	r3, #4
 810a94a:	4419      	add	r1, r3
 810a94c:	4473      	add	r3, lr
 810a94e:	469e      	mov	lr, r3
 810a950:	460d      	mov	r5, r1
 810a952:	4565      	cmp	r5, ip
 810a954:	d30e      	bcc.n	810a974 <__mdiff+0xe8>
 810a956:	f10c 0203 	add.w	r2, ip, #3
 810a95a:	1a52      	subs	r2, r2, r1
 810a95c:	f022 0203 	bic.w	r2, r2, #3
 810a960:	3903      	subs	r1, #3
 810a962:	458c      	cmp	ip, r1
 810a964:	bf38      	it	cc
 810a966:	2200      	movcc	r2, #0
 810a968:	441a      	add	r2, r3
 810a96a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810a96e:	b17b      	cbz	r3, 810a990 <__mdiff+0x104>
 810a970:	6106      	str	r6, [r0, #16]
 810a972:	e7a5      	b.n	810a8c0 <__mdiff+0x34>
 810a974:	f855 8b04 	ldr.w	r8, [r5], #4
 810a978:	fa17 f488 	uxtah	r4, r7, r8
 810a97c:	1422      	asrs	r2, r4, #16
 810a97e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810a982:	b2a4      	uxth	r4, r4
 810a984:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810a988:	f84e 4b04 	str.w	r4, [lr], #4
 810a98c:	1417      	asrs	r7, r2, #16
 810a98e:	e7e0      	b.n	810a952 <__mdiff+0xc6>
 810a990:	3e01      	subs	r6, #1
 810a992:	e7ea      	b.n	810a96a <__mdiff+0xde>
 810a994:	0810b70c 	.word	0x0810b70c
 810a998:	0810b79c 	.word	0x0810b79c

0810a99c <__ulp>:
 810a99c:	b082      	sub	sp, #8
 810a99e:	ed8d 0b00 	vstr	d0, [sp]
 810a9a2:	9b01      	ldr	r3, [sp, #4]
 810a9a4:	4912      	ldr	r1, [pc, #72]	; (810a9f0 <__ulp+0x54>)
 810a9a6:	4019      	ands	r1, r3
 810a9a8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810a9ac:	2900      	cmp	r1, #0
 810a9ae:	dd05      	ble.n	810a9bc <__ulp+0x20>
 810a9b0:	2200      	movs	r2, #0
 810a9b2:	460b      	mov	r3, r1
 810a9b4:	ec43 2b10 	vmov	d0, r2, r3
 810a9b8:	b002      	add	sp, #8
 810a9ba:	4770      	bx	lr
 810a9bc:	4249      	negs	r1, r1
 810a9be:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810a9c2:	ea4f 5021 	mov.w	r0, r1, asr #20
 810a9c6:	f04f 0200 	mov.w	r2, #0
 810a9ca:	f04f 0300 	mov.w	r3, #0
 810a9ce:	da04      	bge.n	810a9da <__ulp+0x3e>
 810a9d0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810a9d4:	fa41 f300 	asr.w	r3, r1, r0
 810a9d8:	e7ec      	b.n	810a9b4 <__ulp+0x18>
 810a9da:	f1a0 0114 	sub.w	r1, r0, #20
 810a9de:	291e      	cmp	r1, #30
 810a9e0:	bfda      	itte	le
 810a9e2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810a9e6:	fa20 f101 	lsrle.w	r1, r0, r1
 810a9ea:	2101      	movgt	r1, #1
 810a9ec:	460a      	mov	r2, r1
 810a9ee:	e7e1      	b.n	810a9b4 <__ulp+0x18>
 810a9f0:	7ff00000 	.word	0x7ff00000

0810a9f4 <__b2d>:
 810a9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a9f6:	6905      	ldr	r5, [r0, #16]
 810a9f8:	f100 0714 	add.w	r7, r0, #20
 810a9fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810aa00:	1f2e      	subs	r6, r5, #4
 810aa02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810aa06:	4620      	mov	r0, r4
 810aa08:	f7ff fd52 	bl	810a4b0 <__hi0bits>
 810aa0c:	f1c0 0320 	rsb	r3, r0, #32
 810aa10:	280a      	cmp	r0, #10
 810aa12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810aa90 <__b2d+0x9c>
 810aa16:	600b      	str	r3, [r1, #0]
 810aa18:	dc14      	bgt.n	810aa44 <__b2d+0x50>
 810aa1a:	f1c0 0e0b 	rsb	lr, r0, #11
 810aa1e:	fa24 f10e 	lsr.w	r1, r4, lr
 810aa22:	42b7      	cmp	r7, r6
 810aa24:	ea41 030c 	orr.w	r3, r1, ip
 810aa28:	bf34      	ite	cc
 810aa2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810aa2e:	2100      	movcs	r1, #0
 810aa30:	3015      	adds	r0, #21
 810aa32:	fa04 f000 	lsl.w	r0, r4, r0
 810aa36:	fa21 f10e 	lsr.w	r1, r1, lr
 810aa3a:	ea40 0201 	orr.w	r2, r0, r1
 810aa3e:	ec43 2b10 	vmov	d0, r2, r3
 810aa42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810aa44:	42b7      	cmp	r7, r6
 810aa46:	bf3a      	itte	cc
 810aa48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810aa4c:	f1a5 0608 	subcc.w	r6, r5, #8
 810aa50:	2100      	movcs	r1, #0
 810aa52:	380b      	subs	r0, #11
 810aa54:	d017      	beq.n	810aa86 <__b2d+0x92>
 810aa56:	f1c0 0c20 	rsb	ip, r0, #32
 810aa5a:	fa04 f500 	lsl.w	r5, r4, r0
 810aa5e:	42be      	cmp	r6, r7
 810aa60:	fa21 f40c 	lsr.w	r4, r1, ip
 810aa64:	ea45 0504 	orr.w	r5, r5, r4
 810aa68:	bf8c      	ite	hi
 810aa6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810aa6e:	2400      	movls	r4, #0
 810aa70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810aa74:	fa01 f000 	lsl.w	r0, r1, r0
 810aa78:	fa24 f40c 	lsr.w	r4, r4, ip
 810aa7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810aa80:	ea40 0204 	orr.w	r2, r0, r4
 810aa84:	e7db      	b.n	810aa3e <__b2d+0x4a>
 810aa86:	ea44 030c 	orr.w	r3, r4, ip
 810aa8a:	460a      	mov	r2, r1
 810aa8c:	e7d7      	b.n	810aa3e <__b2d+0x4a>
 810aa8e:	bf00      	nop
 810aa90:	3ff00000 	.word	0x3ff00000

0810aa94 <__d2b>:
 810aa94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810aa98:	4689      	mov	r9, r1
 810aa9a:	2101      	movs	r1, #1
 810aa9c:	ec57 6b10 	vmov	r6, r7, d0
 810aaa0:	4690      	mov	r8, r2
 810aaa2:	f7ff fc0f 	bl	810a2c4 <_Balloc>
 810aaa6:	4604      	mov	r4, r0
 810aaa8:	b930      	cbnz	r0, 810aab8 <__d2b+0x24>
 810aaaa:	4602      	mov	r2, r0
 810aaac:	4b25      	ldr	r3, [pc, #148]	; (810ab44 <__d2b+0xb0>)
 810aaae:	4826      	ldr	r0, [pc, #152]	; (810ab48 <__d2b+0xb4>)
 810aab0:	f240 310a 	movw	r1, #778	; 0x30a
 810aab4:	f000 fbc0 	bl	810b238 <__assert_func>
 810aab8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810aabc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810aac0:	bb35      	cbnz	r5, 810ab10 <__d2b+0x7c>
 810aac2:	2e00      	cmp	r6, #0
 810aac4:	9301      	str	r3, [sp, #4]
 810aac6:	d028      	beq.n	810ab1a <__d2b+0x86>
 810aac8:	4668      	mov	r0, sp
 810aaca:	9600      	str	r6, [sp, #0]
 810aacc:	f7ff fd10 	bl	810a4f0 <__lo0bits>
 810aad0:	9900      	ldr	r1, [sp, #0]
 810aad2:	b300      	cbz	r0, 810ab16 <__d2b+0x82>
 810aad4:	9a01      	ldr	r2, [sp, #4]
 810aad6:	f1c0 0320 	rsb	r3, r0, #32
 810aada:	fa02 f303 	lsl.w	r3, r2, r3
 810aade:	430b      	orrs	r3, r1
 810aae0:	40c2      	lsrs	r2, r0
 810aae2:	6163      	str	r3, [r4, #20]
 810aae4:	9201      	str	r2, [sp, #4]
 810aae6:	9b01      	ldr	r3, [sp, #4]
 810aae8:	61a3      	str	r3, [r4, #24]
 810aaea:	2b00      	cmp	r3, #0
 810aaec:	bf14      	ite	ne
 810aaee:	2202      	movne	r2, #2
 810aaf0:	2201      	moveq	r2, #1
 810aaf2:	6122      	str	r2, [r4, #16]
 810aaf4:	b1d5      	cbz	r5, 810ab2c <__d2b+0x98>
 810aaf6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810aafa:	4405      	add	r5, r0
 810aafc:	f8c9 5000 	str.w	r5, [r9]
 810ab00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810ab04:	f8c8 0000 	str.w	r0, [r8]
 810ab08:	4620      	mov	r0, r4
 810ab0a:	b003      	add	sp, #12
 810ab0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810ab10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810ab14:	e7d5      	b.n	810aac2 <__d2b+0x2e>
 810ab16:	6161      	str	r1, [r4, #20]
 810ab18:	e7e5      	b.n	810aae6 <__d2b+0x52>
 810ab1a:	a801      	add	r0, sp, #4
 810ab1c:	f7ff fce8 	bl	810a4f0 <__lo0bits>
 810ab20:	9b01      	ldr	r3, [sp, #4]
 810ab22:	6163      	str	r3, [r4, #20]
 810ab24:	2201      	movs	r2, #1
 810ab26:	6122      	str	r2, [r4, #16]
 810ab28:	3020      	adds	r0, #32
 810ab2a:	e7e3      	b.n	810aaf4 <__d2b+0x60>
 810ab2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810ab30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810ab34:	f8c9 0000 	str.w	r0, [r9]
 810ab38:	6918      	ldr	r0, [r3, #16]
 810ab3a:	f7ff fcb9 	bl	810a4b0 <__hi0bits>
 810ab3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810ab42:	e7df      	b.n	810ab04 <__d2b+0x70>
 810ab44:	0810b70c 	.word	0x0810b70c
 810ab48:	0810b79c 	.word	0x0810b79c

0810ab4c <__ratio>:
 810ab4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ab50:	4688      	mov	r8, r1
 810ab52:	4669      	mov	r1, sp
 810ab54:	4681      	mov	r9, r0
 810ab56:	f7ff ff4d 	bl	810a9f4 <__b2d>
 810ab5a:	a901      	add	r1, sp, #4
 810ab5c:	4640      	mov	r0, r8
 810ab5e:	ec55 4b10 	vmov	r4, r5, d0
 810ab62:	f7ff ff47 	bl	810a9f4 <__b2d>
 810ab66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810ab6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810ab6e:	eba3 0c02 	sub.w	ip, r3, r2
 810ab72:	e9dd 3200 	ldrd	r3, r2, [sp]
 810ab76:	1a9b      	subs	r3, r3, r2
 810ab78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810ab7c:	ec51 0b10 	vmov	r0, r1, d0
 810ab80:	2b00      	cmp	r3, #0
 810ab82:	bfd6      	itet	le
 810ab84:	460a      	movle	r2, r1
 810ab86:	462a      	movgt	r2, r5
 810ab88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810ab8c:	468b      	mov	fp, r1
 810ab8e:	462f      	mov	r7, r5
 810ab90:	bfd4      	ite	le
 810ab92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810ab96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810ab9a:	4620      	mov	r0, r4
 810ab9c:	ee10 2a10 	vmov	r2, s0
 810aba0:	465b      	mov	r3, fp
 810aba2:	4639      	mov	r1, r7
 810aba4:	f7f5 feda 	bl	810095c <__aeabi_ddiv>
 810aba8:	ec41 0b10 	vmov	d0, r0, r1
 810abac:	b003      	add	sp, #12
 810abae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810abb2 <__copybits>:
 810abb2:	3901      	subs	r1, #1
 810abb4:	b570      	push	{r4, r5, r6, lr}
 810abb6:	1149      	asrs	r1, r1, #5
 810abb8:	6914      	ldr	r4, [r2, #16]
 810abba:	3101      	adds	r1, #1
 810abbc:	f102 0314 	add.w	r3, r2, #20
 810abc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810abc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810abc8:	1f05      	subs	r5, r0, #4
 810abca:	42a3      	cmp	r3, r4
 810abcc:	d30c      	bcc.n	810abe8 <__copybits+0x36>
 810abce:	1aa3      	subs	r3, r4, r2
 810abd0:	3b11      	subs	r3, #17
 810abd2:	f023 0303 	bic.w	r3, r3, #3
 810abd6:	3211      	adds	r2, #17
 810abd8:	42a2      	cmp	r2, r4
 810abda:	bf88      	it	hi
 810abdc:	2300      	movhi	r3, #0
 810abde:	4418      	add	r0, r3
 810abe0:	2300      	movs	r3, #0
 810abe2:	4288      	cmp	r0, r1
 810abe4:	d305      	bcc.n	810abf2 <__copybits+0x40>
 810abe6:	bd70      	pop	{r4, r5, r6, pc}
 810abe8:	f853 6b04 	ldr.w	r6, [r3], #4
 810abec:	f845 6f04 	str.w	r6, [r5, #4]!
 810abf0:	e7eb      	b.n	810abca <__copybits+0x18>
 810abf2:	f840 3b04 	str.w	r3, [r0], #4
 810abf6:	e7f4      	b.n	810abe2 <__copybits+0x30>

0810abf8 <__any_on>:
 810abf8:	f100 0214 	add.w	r2, r0, #20
 810abfc:	6900      	ldr	r0, [r0, #16]
 810abfe:	114b      	asrs	r3, r1, #5
 810ac00:	4298      	cmp	r0, r3
 810ac02:	b510      	push	{r4, lr}
 810ac04:	db11      	blt.n	810ac2a <__any_on+0x32>
 810ac06:	dd0a      	ble.n	810ac1e <__any_on+0x26>
 810ac08:	f011 011f 	ands.w	r1, r1, #31
 810ac0c:	d007      	beq.n	810ac1e <__any_on+0x26>
 810ac0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810ac12:	fa24 f001 	lsr.w	r0, r4, r1
 810ac16:	fa00 f101 	lsl.w	r1, r0, r1
 810ac1a:	428c      	cmp	r4, r1
 810ac1c:	d10b      	bne.n	810ac36 <__any_on+0x3e>
 810ac1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810ac22:	4293      	cmp	r3, r2
 810ac24:	d803      	bhi.n	810ac2e <__any_on+0x36>
 810ac26:	2000      	movs	r0, #0
 810ac28:	bd10      	pop	{r4, pc}
 810ac2a:	4603      	mov	r3, r0
 810ac2c:	e7f7      	b.n	810ac1e <__any_on+0x26>
 810ac2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810ac32:	2900      	cmp	r1, #0
 810ac34:	d0f5      	beq.n	810ac22 <__any_on+0x2a>
 810ac36:	2001      	movs	r0, #1
 810ac38:	e7f6      	b.n	810ac28 <__any_on+0x30>

0810ac3a <_calloc_r>:
 810ac3a:	b513      	push	{r0, r1, r4, lr}
 810ac3c:	434a      	muls	r2, r1
 810ac3e:	4611      	mov	r1, r2
 810ac40:	9201      	str	r2, [sp, #4]
 810ac42:	f7fc f873 	bl	8106d2c <_malloc_r>
 810ac46:	4604      	mov	r4, r0
 810ac48:	b118      	cbz	r0, 810ac52 <_calloc_r+0x18>
 810ac4a:	9a01      	ldr	r2, [sp, #4]
 810ac4c:	2100      	movs	r1, #0
 810ac4e:	f7fc f814 	bl	8106c7a <memset>
 810ac52:	4620      	mov	r0, r4
 810ac54:	b002      	add	sp, #8
 810ac56:	bd10      	pop	{r4, pc}

0810ac58 <__ssputs_r>:
 810ac58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810ac5c:	688e      	ldr	r6, [r1, #8]
 810ac5e:	429e      	cmp	r6, r3
 810ac60:	4682      	mov	sl, r0
 810ac62:	460c      	mov	r4, r1
 810ac64:	4690      	mov	r8, r2
 810ac66:	461f      	mov	r7, r3
 810ac68:	d838      	bhi.n	810acdc <__ssputs_r+0x84>
 810ac6a:	898a      	ldrh	r2, [r1, #12]
 810ac6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810ac70:	d032      	beq.n	810acd8 <__ssputs_r+0x80>
 810ac72:	6825      	ldr	r5, [r4, #0]
 810ac74:	6909      	ldr	r1, [r1, #16]
 810ac76:	eba5 0901 	sub.w	r9, r5, r1
 810ac7a:	6965      	ldr	r5, [r4, #20]
 810ac7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810ac80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810ac84:	3301      	adds	r3, #1
 810ac86:	444b      	add	r3, r9
 810ac88:	106d      	asrs	r5, r5, #1
 810ac8a:	429d      	cmp	r5, r3
 810ac8c:	bf38      	it	cc
 810ac8e:	461d      	movcc	r5, r3
 810ac90:	0553      	lsls	r3, r2, #21
 810ac92:	d531      	bpl.n	810acf8 <__ssputs_r+0xa0>
 810ac94:	4629      	mov	r1, r5
 810ac96:	f7fc f849 	bl	8106d2c <_malloc_r>
 810ac9a:	4606      	mov	r6, r0
 810ac9c:	b950      	cbnz	r0, 810acb4 <__ssputs_r+0x5c>
 810ac9e:	230c      	movs	r3, #12
 810aca0:	f8ca 3000 	str.w	r3, [sl]
 810aca4:	89a3      	ldrh	r3, [r4, #12]
 810aca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810acaa:	81a3      	strh	r3, [r4, #12]
 810acac:	f04f 30ff 	mov.w	r0, #4294967295
 810acb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810acb4:	6921      	ldr	r1, [r4, #16]
 810acb6:	464a      	mov	r2, r9
 810acb8:	f7ff faea 	bl	810a290 <memcpy>
 810acbc:	89a3      	ldrh	r3, [r4, #12]
 810acbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810acc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810acc6:	81a3      	strh	r3, [r4, #12]
 810acc8:	6126      	str	r6, [r4, #16]
 810acca:	6165      	str	r5, [r4, #20]
 810accc:	444e      	add	r6, r9
 810acce:	eba5 0509 	sub.w	r5, r5, r9
 810acd2:	6026      	str	r6, [r4, #0]
 810acd4:	60a5      	str	r5, [r4, #8]
 810acd6:	463e      	mov	r6, r7
 810acd8:	42be      	cmp	r6, r7
 810acda:	d900      	bls.n	810acde <__ssputs_r+0x86>
 810acdc:	463e      	mov	r6, r7
 810acde:	4632      	mov	r2, r6
 810ace0:	6820      	ldr	r0, [r4, #0]
 810ace2:	4641      	mov	r1, r8
 810ace4:	f000 fafa 	bl	810b2dc <memmove>
 810ace8:	68a3      	ldr	r3, [r4, #8]
 810acea:	6822      	ldr	r2, [r4, #0]
 810acec:	1b9b      	subs	r3, r3, r6
 810acee:	4432      	add	r2, r6
 810acf0:	60a3      	str	r3, [r4, #8]
 810acf2:	6022      	str	r2, [r4, #0]
 810acf4:	2000      	movs	r0, #0
 810acf6:	e7db      	b.n	810acb0 <__ssputs_r+0x58>
 810acf8:	462a      	mov	r2, r5
 810acfa:	f000 fb09 	bl	810b310 <_realloc_r>
 810acfe:	4606      	mov	r6, r0
 810ad00:	2800      	cmp	r0, #0
 810ad02:	d1e1      	bne.n	810acc8 <__ssputs_r+0x70>
 810ad04:	6921      	ldr	r1, [r4, #16]
 810ad06:	4650      	mov	r0, sl
 810ad08:	f7fb ffc0 	bl	8106c8c <_free_r>
 810ad0c:	e7c7      	b.n	810ac9e <__ssputs_r+0x46>
	...

0810ad10 <_svfiprintf_r>:
 810ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad14:	4698      	mov	r8, r3
 810ad16:	898b      	ldrh	r3, [r1, #12]
 810ad18:	061b      	lsls	r3, r3, #24
 810ad1a:	b09d      	sub	sp, #116	; 0x74
 810ad1c:	4607      	mov	r7, r0
 810ad1e:	460d      	mov	r5, r1
 810ad20:	4614      	mov	r4, r2
 810ad22:	d50e      	bpl.n	810ad42 <_svfiprintf_r+0x32>
 810ad24:	690b      	ldr	r3, [r1, #16]
 810ad26:	b963      	cbnz	r3, 810ad42 <_svfiprintf_r+0x32>
 810ad28:	2140      	movs	r1, #64	; 0x40
 810ad2a:	f7fb ffff 	bl	8106d2c <_malloc_r>
 810ad2e:	6028      	str	r0, [r5, #0]
 810ad30:	6128      	str	r0, [r5, #16]
 810ad32:	b920      	cbnz	r0, 810ad3e <_svfiprintf_r+0x2e>
 810ad34:	230c      	movs	r3, #12
 810ad36:	603b      	str	r3, [r7, #0]
 810ad38:	f04f 30ff 	mov.w	r0, #4294967295
 810ad3c:	e0d1      	b.n	810aee2 <_svfiprintf_r+0x1d2>
 810ad3e:	2340      	movs	r3, #64	; 0x40
 810ad40:	616b      	str	r3, [r5, #20]
 810ad42:	2300      	movs	r3, #0
 810ad44:	9309      	str	r3, [sp, #36]	; 0x24
 810ad46:	2320      	movs	r3, #32
 810ad48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810ad4c:	f8cd 800c 	str.w	r8, [sp, #12]
 810ad50:	2330      	movs	r3, #48	; 0x30
 810ad52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810aefc <_svfiprintf_r+0x1ec>
 810ad56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810ad5a:	f04f 0901 	mov.w	r9, #1
 810ad5e:	4623      	mov	r3, r4
 810ad60:	469a      	mov	sl, r3
 810ad62:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ad66:	b10a      	cbz	r2, 810ad6c <_svfiprintf_r+0x5c>
 810ad68:	2a25      	cmp	r2, #37	; 0x25
 810ad6a:	d1f9      	bne.n	810ad60 <_svfiprintf_r+0x50>
 810ad6c:	ebba 0b04 	subs.w	fp, sl, r4
 810ad70:	d00b      	beq.n	810ad8a <_svfiprintf_r+0x7a>
 810ad72:	465b      	mov	r3, fp
 810ad74:	4622      	mov	r2, r4
 810ad76:	4629      	mov	r1, r5
 810ad78:	4638      	mov	r0, r7
 810ad7a:	f7ff ff6d 	bl	810ac58 <__ssputs_r>
 810ad7e:	3001      	adds	r0, #1
 810ad80:	f000 80aa 	beq.w	810aed8 <_svfiprintf_r+0x1c8>
 810ad84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810ad86:	445a      	add	r2, fp
 810ad88:	9209      	str	r2, [sp, #36]	; 0x24
 810ad8a:	f89a 3000 	ldrb.w	r3, [sl]
 810ad8e:	2b00      	cmp	r3, #0
 810ad90:	f000 80a2 	beq.w	810aed8 <_svfiprintf_r+0x1c8>
 810ad94:	2300      	movs	r3, #0
 810ad96:	f04f 32ff 	mov.w	r2, #4294967295
 810ad9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ad9e:	f10a 0a01 	add.w	sl, sl, #1
 810ada2:	9304      	str	r3, [sp, #16]
 810ada4:	9307      	str	r3, [sp, #28]
 810ada6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810adaa:	931a      	str	r3, [sp, #104]	; 0x68
 810adac:	4654      	mov	r4, sl
 810adae:	2205      	movs	r2, #5
 810adb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810adb4:	4851      	ldr	r0, [pc, #324]	; (810aefc <_svfiprintf_r+0x1ec>)
 810adb6:	f7f5 fa9b 	bl	81002f0 <memchr>
 810adba:	9a04      	ldr	r2, [sp, #16]
 810adbc:	b9d8      	cbnz	r0, 810adf6 <_svfiprintf_r+0xe6>
 810adbe:	06d0      	lsls	r0, r2, #27
 810adc0:	bf44      	itt	mi
 810adc2:	2320      	movmi	r3, #32
 810adc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810adc8:	0711      	lsls	r1, r2, #28
 810adca:	bf44      	itt	mi
 810adcc:	232b      	movmi	r3, #43	; 0x2b
 810adce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810add2:	f89a 3000 	ldrb.w	r3, [sl]
 810add6:	2b2a      	cmp	r3, #42	; 0x2a
 810add8:	d015      	beq.n	810ae06 <_svfiprintf_r+0xf6>
 810adda:	9a07      	ldr	r2, [sp, #28]
 810addc:	4654      	mov	r4, sl
 810adde:	2000      	movs	r0, #0
 810ade0:	f04f 0c0a 	mov.w	ip, #10
 810ade4:	4621      	mov	r1, r4
 810ade6:	f811 3b01 	ldrb.w	r3, [r1], #1
 810adea:	3b30      	subs	r3, #48	; 0x30
 810adec:	2b09      	cmp	r3, #9
 810adee:	d94e      	bls.n	810ae8e <_svfiprintf_r+0x17e>
 810adf0:	b1b0      	cbz	r0, 810ae20 <_svfiprintf_r+0x110>
 810adf2:	9207      	str	r2, [sp, #28]
 810adf4:	e014      	b.n	810ae20 <_svfiprintf_r+0x110>
 810adf6:	eba0 0308 	sub.w	r3, r0, r8
 810adfa:	fa09 f303 	lsl.w	r3, r9, r3
 810adfe:	4313      	orrs	r3, r2
 810ae00:	9304      	str	r3, [sp, #16]
 810ae02:	46a2      	mov	sl, r4
 810ae04:	e7d2      	b.n	810adac <_svfiprintf_r+0x9c>
 810ae06:	9b03      	ldr	r3, [sp, #12]
 810ae08:	1d19      	adds	r1, r3, #4
 810ae0a:	681b      	ldr	r3, [r3, #0]
 810ae0c:	9103      	str	r1, [sp, #12]
 810ae0e:	2b00      	cmp	r3, #0
 810ae10:	bfbb      	ittet	lt
 810ae12:	425b      	neglt	r3, r3
 810ae14:	f042 0202 	orrlt.w	r2, r2, #2
 810ae18:	9307      	strge	r3, [sp, #28]
 810ae1a:	9307      	strlt	r3, [sp, #28]
 810ae1c:	bfb8      	it	lt
 810ae1e:	9204      	strlt	r2, [sp, #16]
 810ae20:	7823      	ldrb	r3, [r4, #0]
 810ae22:	2b2e      	cmp	r3, #46	; 0x2e
 810ae24:	d10c      	bne.n	810ae40 <_svfiprintf_r+0x130>
 810ae26:	7863      	ldrb	r3, [r4, #1]
 810ae28:	2b2a      	cmp	r3, #42	; 0x2a
 810ae2a:	d135      	bne.n	810ae98 <_svfiprintf_r+0x188>
 810ae2c:	9b03      	ldr	r3, [sp, #12]
 810ae2e:	1d1a      	adds	r2, r3, #4
 810ae30:	681b      	ldr	r3, [r3, #0]
 810ae32:	9203      	str	r2, [sp, #12]
 810ae34:	2b00      	cmp	r3, #0
 810ae36:	bfb8      	it	lt
 810ae38:	f04f 33ff 	movlt.w	r3, #4294967295
 810ae3c:	3402      	adds	r4, #2
 810ae3e:	9305      	str	r3, [sp, #20]
 810ae40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810af0c <_svfiprintf_r+0x1fc>
 810ae44:	7821      	ldrb	r1, [r4, #0]
 810ae46:	2203      	movs	r2, #3
 810ae48:	4650      	mov	r0, sl
 810ae4a:	f7f5 fa51 	bl	81002f0 <memchr>
 810ae4e:	b140      	cbz	r0, 810ae62 <_svfiprintf_r+0x152>
 810ae50:	2340      	movs	r3, #64	; 0x40
 810ae52:	eba0 000a 	sub.w	r0, r0, sl
 810ae56:	fa03 f000 	lsl.w	r0, r3, r0
 810ae5a:	9b04      	ldr	r3, [sp, #16]
 810ae5c:	4303      	orrs	r3, r0
 810ae5e:	3401      	adds	r4, #1
 810ae60:	9304      	str	r3, [sp, #16]
 810ae62:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ae66:	4826      	ldr	r0, [pc, #152]	; (810af00 <_svfiprintf_r+0x1f0>)
 810ae68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810ae6c:	2206      	movs	r2, #6
 810ae6e:	f7f5 fa3f 	bl	81002f0 <memchr>
 810ae72:	2800      	cmp	r0, #0
 810ae74:	d038      	beq.n	810aee8 <_svfiprintf_r+0x1d8>
 810ae76:	4b23      	ldr	r3, [pc, #140]	; (810af04 <_svfiprintf_r+0x1f4>)
 810ae78:	bb1b      	cbnz	r3, 810aec2 <_svfiprintf_r+0x1b2>
 810ae7a:	9b03      	ldr	r3, [sp, #12]
 810ae7c:	3307      	adds	r3, #7
 810ae7e:	f023 0307 	bic.w	r3, r3, #7
 810ae82:	3308      	adds	r3, #8
 810ae84:	9303      	str	r3, [sp, #12]
 810ae86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ae88:	4433      	add	r3, r6
 810ae8a:	9309      	str	r3, [sp, #36]	; 0x24
 810ae8c:	e767      	b.n	810ad5e <_svfiprintf_r+0x4e>
 810ae8e:	fb0c 3202 	mla	r2, ip, r2, r3
 810ae92:	460c      	mov	r4, r1
 810ae94:	2001      	movs	r0, #1
 810ae96:	e7a5      	b.n	810ade4 <_svfiprintf_r+0xd4>
 810ae98:	2300      	movs	r3, #0
 810ae9a:	3401      	adds	r4, #1
 810ae9c:	9305      	str	r3, [sp, #20]
 810ae9e:	4619      	mov	r1, r3
 810aea0:	f04f 0c0a 	mov.w	ip, #10
 810aea4:	4620      	mov	r0, r4
 810aea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 810aeaa:	3a30      	subs	r2, #48	; 0x30
 810aeac:	2a09      	cmp	r2, #9
 810aeae:	d903      	bls.n	810aeb8 <_svfiprintf_r+0x1a8>
 810aeb0:	2b00      	cmp	r3, #0
 810aeb2:	d0c5      	beq.n	810ae40 <_svfiprintf_r+0x130>
 810aeb4:	9105      	str	r1, [sp, #20]
 810aeb6:	e7c3      	b.n	810ae40 <_svfiprintf_r+0x130>
 810aeb8:	fb0c 2101 	mla	r1, ip, r1, r2
 810aebc:	4604      	mov	r4, r0
 810aebe:	2301      	movs	r3, #1
 810aec0:	e7f0      	b.n	810aea4 <_svfiprintf_r+0x194>
 810aec2:	ab03      	add	r3, sp, #12
 810aec4:	9300      	str	r3, [sp, #0]
 810aec6:	462a      	mov	r2, r5
 810aec8:	4b0f      	ldr	r3, [pc, #60]	; (810af08 <_svfiprintf_r+0x1f8>)
 810aeca:	a904      	add	r1, sp, #16
 810aecc:	4638      	mov	r0, r7
 810aece:	f7fc f827 	bl	8106f20 <_printf_float>
 810aed2:	1c42      	adds	r2, r0, #1
 810aed4:	4606      	mov	r6, r0
 810aed6:	d1d6      	bne.n	810ae86 <_svfiprintf_r+0x176>
 810aed8:	89ab      	ldrh	r3, [r5, #12]
 810aeda:	065b      	lsls	r3, r3, #25
 810aedc:	f53f af2c 	bmi.w	810ad38 <_svfiprintf_r+0x28>
 810aee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 810aee2:	b01d      	add	sp, #116	; 0x74
 810aee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aee8:	ab03      	add	r3, sp, #12
 810aeea:	9300      	str	r3, [sp, #0]
 810aeec:	462a      	mov	r2, r5
 810aeee:	4b06      	ldr	r3, [pc, #24]	; (810af08 <_svfiprintf_r+0x1f8>)
 810aef0:	a904      	add	r1, sp, #16
 810aef2:	4638      	mov	r0, r7
 810aef4:	f7fc fab8 	bl	8107468 <_printf_i>
 810aef8:	e7eb      	b.n	810aed2 <_svfiprintf_r+0x1c2>
 810aefa:	bf00      	nop
 810aefc:	0810b8fc 	.word	0x0810b8fc
 810af00:	0810b906 	.word	0x0810b906
 810af04:	08106f21 	.word	0x08106f21
 810af08:	0810ac59 	.word	0x0810ac59
 810af0c:	0810b902 	.word	0x0810b902

0810af10 <__sfputc_r>:
 810af10:	6893      	ldr	r3, [r2, #8]
 810af12:	3b01      	subs	r3, #1
 810af14:	2b00      	cmp	r3, #0
 810af16:	b410      	push	{r4}
 810af18:	6093      	str	r3, [r2, #8]
 810af1a:	da08      	bge.n	810af2e <__sfputc_r+0x1e>
 810af1c:	6994      	ldr	r4, [r2, #24]
 810af1e:	42a3      	cmp	r3, r4
 810af20:	db01      	blt.n	810af26 <__sfputc_r+0x16>
 810af22:	290a      	cmp	r1, #10
 810af24:	d103      	bne.n	810af2e <__sfputc_r+0x1e>
 810af26:	f85d 4b04 	ldr.w	r4, [sp], #4
 810af2a:	f7fd be53 	b.w	8108bd4 <__swbuf_r>
 810af2e:	6813      	ldr	r3, [r2, #0]
 810af30:	1c58      	adds	r0, r3, #1
 810af32:	6010      	str	r0, [r2, #0]
 810af34:	7019      	strb	r1, [r3, #0]
 810af36:	4608      	mov	r0, r1
 810af38:	f85d 4b04 	ldr.w	r4, [sp], #4
 810af3c:	4770      	bx	lr

0810af3e <__sfputs_r>:
 810af3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810af40:	4606      	mov	r6, r0
 810af42:	460f      	mov	r7, r1
 810af44:	4614      	mov	r4, r2
 810af46:	18d5      	adds	r5, r2, r3
 810af48:	42ac      	cmp	r4, r5
 810af4a:	d101      	bne.n	810af50 <__sfputs_r+0x12>
 810af4c:	2000      	movs	r0, #0
 810af4e:	e007      	b.n	810af60 <__sfputs_r+0x22>
 810af50:	f814 1b01 	ldrb.w	r1, [r4], #1
 810af54:	463a      	mov	r2, r7
 810af56:	4630      	mov	r0, r6
 810af58:	f7ff ffda 	bl	810af10 <__sfputc_r>
 810af5c:	1c43      	adds	r3, r0, #1
 810af5e:	d1f3      	bne.n	810af48 <__sfputs_r+0xa>
 810af60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810af64 <_vfiprintf_r>:
 810af64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810af68:	460d      	mov	r5, r1
 810af6a:	b09d      	sub	sp, #116	; 0x74
 810af6c:	4614      	mov	r4, r2
 810af6e:	4698      	mov	r8, r3
 810af70:	4606      	mov	r6, r0
 810af72:	b118      	cbz	r0, 810af7c <_vfiprintf_r+0x18>
 810af74:	6983      	ldr	r3, [r0, #24]
 810af76:	b90b      	cbnz	r3, 810af7c <_vfiprintf_r+0x18>
 810af78:	f7fb fdba 	bl	8106af0 <__sinit>
 810af7c:	4b89      	ldr	r3, [pc, #548]	; (810b1a4 <_vfiprintf_r+0x240>)
 810af7e:	429d      	cmp	r5, r3
 810af80:	d11b      	bne.n	810afba <_vfiprintf_r+0x56>
 810af82:	6875      	ldr	r5, [r6, #4]
 810af84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810af86:	07d9      	lsls	r1, r3, #31
 810af88:	d405      	bmi.n	810af96 <_vfiprintf_r+0x32>
 810af8a:	89ab      	ldrh	r3, [r5, #12]
 810af8c:	059a      	lsls	r2, r3, #22
 810af8e:	d402      	bmi.n	810af96 <_vfiprintf_r+0x32>
 810af90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810af92:	f7fb fe70 	bl	8106c76 <__retarget_lock_acquire_recursive>
 810af96:	89ab      	ldrh	r3, [r5, #12]
 810af98:	071b      	lsls	r3, r3, #28
 810af9a:	d501      	bpl.n	810afa0 <_vfiprintf_r+0x3c>
 810af9c:	692b      	ldr	r3, [r5, #16]
 810af9e:	b9eb      	cbnz	r3, 810afdc <_vfiprintf_r+0x78>
 810afa0:	4629      	mov	r1, r5
 810afa2:	4630      	mov	r0, r6
 810afa4:	f7fd fe7a 	bl	8108c9c <__swsetup_r>
 810afa8:	b1c0      	cbz	r0, 810afdc <_vfiprintf_r+0x78>
 810afaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810afac:	07dc      	lsls	r4, r3, #31
 810afae:	d50e      	bpl.n	810afce <_vfiprintf_r+0x6a>
 810afb0:	f04f 30ff 	mov.w	r0, #4294967295
 810afb4:	b01d      	add	sp, #116	; 0x74
 810afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810afba:	4b7b      	ldr	r3, [pc, #492]	; (810b1a8 <_vfiprintf_r+0x244>)
 810afbc:	429d      	cmp	r5, r3
 810afbe:	d101      	bne.n	810afc4 <_vfiprintf_r+0x60>
 810afc0:	68b5      	ldr	r5, [r6, #8]
 810afc2:	e7df      	b.n	810af84 <_vfiprintf_r+0x20>
 810afc4:	4b79      	ldr	r3, [pc, #484]	; (810b1ac <_vfiprintf_r+0x248>)
 810afc6:	429d      	cmp	r5, r3
 810afc8:	bf08      	it	eq
 810afca:	68f5      	ldreq	r5, [r6, #12]
 810afcc:	e7da      	b.n	810af84 <_vfiprintf_r+0x20>
 810afce:	89ab      	ldrh	r3, [r5, #12]
 810afd0:	0598      	lsls	r0, r3, #22
 810afd2:	d4ed      	bmi.n	810afb0 <_vfiprintf_r+0x4c>
 810afd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810afd6:	f7fb fe4f 	bl	8106c78 <__retarget_lock_release_recursive>
 810afda:	e7e9      	b.n	810afb0 <_vfiprintf_r+0x4c>
 810afdc:	2300      	movs	r3, #0
 810afde:	9309      	str	r3, [sp, #36]	; 0x24
 810afe0:	2320      	movs	r3, #32
 810afe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810afe6:	f8cd 800c 	str.w	r8, [sp, #12]
 810afea:	2330      	movs	r3, #48	; 0x30
 810afec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810b1b0 <_vfiprintf_r+0x24c>
 810aff0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810aff4:	f04f 0901 	mov.w	r9, #1
 810aff8:	4623      	mov	r3, r4
 810affa:	469a      	mov	sl, r3
 810affc:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b000:	b10a      	cbz	r2, 810b006 <_vfiprintf_r+0xa2>
 810b002:	2a25      	cmp	r2, #37	; 0x25
 810b004:	d1f9      	bne.n	810affa <_vfiprintf_r+0x96>
 810b006:	ebba 0b04 	subs.w	fp, sl, r4
 810b00a:	d00b      	beq.n	810b024 <_vfiprintf_r+0xc0>
 810b00c:	465b      	mov	r3, fp
 810b00e:	4622      	mov	r2, r4
 810b010:	4629      	mov	r1, r5
 810b012:	4630      	mov	r0, r6
 810b014:	f7ff ff93 	bl	810af3e <__sfputs_r>
 810b018:	3001      	adds	r0, #1
 810b01a:	f000 80aa 	beq.w	810b172 <_vfiprintf_r+0x20e>
 810b01e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b020:	445a      	add	r2, fp
 810b022:	9209      	str	r2, [sp, #36]	; 0x24
 810b024:	f89a 3000 	ldrb.w	r3, [sl]
 810b028:	2b00      	cmp	r3, #0
 810b02a:	f000 80a2 	beq.w	810b172 <_vfiprintf_r+0x20e>
 810b02e:	2300      	movs	r3, #0
 810b030:	f04f 32ff 	mov.w	r2, #4294967295
 810b034:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b038:	f10a 0a01 	add.w	sl, sl, #1
 810b03c:	9304      	str	r3, [sp, #16]
 810b03e:	9307      	str	r3, [sp, #28]
 810b040:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810b044:	931a      	str	r3, [sp, #104]	; 0x68
 810b046:	4654      	mov	r4, sl
 810b048:	2205      	movs	r2, #5
 810b04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b04e:	4858      	ldr	r0, [pc, #352]	; (810b1b0 <_vfiprintf_r+0x24c>)
 810b050:	f7f5 f94e 	bl	81002f0 <memchr>
 810b054:	9a04      	ldr	r2, [sp, #16]
 810b056:	b9d8      	cbnz	r0, 810b090 <_vfiprintf_r+0x12c>
 810b058:	06d1      	lsls	r1, r2, #27
 810b05a:	bf44      	itt	mi
 810b05c:	2320      	movmi	r3, #32
 810b05e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b062:	0713      	lsls	r3, r2, #28
 810b064:	bf44      	itt	mi
 810b066:	232b      	movmi	r3, #43	; 0x2b
 810b068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b06c:	f89a 3000 	ldrb.w	r3, [sl]
 810b070:	2b2a      	cmp	r3, #42	; 0x2a
 810b072:	d015      	beq.n	810b0a0 <_vfiprintf_r+0x13c>
 810b074:	9a07      	ldr	r2, [sp, #28]
 810b076:	4654      	mov	r4, sl
 810b078:	2000      	movs	r0, #0
 810b07a:	f04f 0c0a 	mov.w	ip, #10
 810b07e:	4621      	mov	r1, r4
 810b080:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b084:	3b30      	subs	r3, #48	; 0x30
 810b086:	2b09      	cmp	r3, #9
 810b088:	d94e      	bls.n	810b128 <_vfiprintf_r+0x1c4>
 810b08a:	b1b0      	cbz	r0, 810b0ba <_vfiprintf_r+0x156>
 810b08c:	9207      	str	r2, [sp, #28]
 810b08e:	e014      	b.n	810b0ba <_vfiprintf_r+0x156>
 810b090:	eba0 0308 	sub.w	r3, r0, r8
 810b094:	fa09 f303 	lsl.w	r3, r9, r3
 810b098:	4313      	orrs	r3, r2
 810b09a:	9304      	str	r3, [sp, #16]
 810b09c:	46a2      	mov	sl, r4
 810b09e:	e7d2      	b.n	810b046 <_vfiprintf_r+0xe2>
 810b0a0:	9b03      	ldr	r3, [sp, #12]
 810b0a2:	1d19      	adds	r1, r3, #4
 810b0a4:	681b      	ldr	r3, [r3, #0]
 810b0a6:	9103      	str	r1, [sp, #12]
 810b0a8:	2b00      	cmp	r3, #0
 810b0aa:	bfbb      	ittet	lt
 810b0ac:	425b      	neglt	r3, r3
 810b0ae:	f042 0202 	orrlt.w	r2, r2, #2
 810b0b2:	9307      	strge	r3, [sp, #28]
 810b0b4:	9307      	strlt	r3, [sp, #28]
 810b0b6:	bfb8      	it	lt
 810b0b8:	9204      	strlt	r2, [sp, #16]
 810b0ba:	7823      	ldrb	r3, [r4, #0]
 810b0bc:	2b2e      	cmp	r3, #46	; 0x2e
 810b0be:	d10c      	bne.n	810b0da <_vfiprintf_r+0x176>
 810b0c0:	7863      	ldrb	r3, [r4, #1]
 810b0c2:	2b2a      	cmp	r3, #42	; 0x2a
 810b0c4:	d135      	bne.n	810b132 <_vfiprintf_r+0x1ce>
 810b0c6:	9b03      	ldr	r3, [sp, #12]
 810b0c8:	1d1a      	adds	r2, r3, #4
 810b0ca:	681b      	ldr	r3, [r3, #0]
 810b0cc:	9203      	str	r2, [sp, #12]
 810b0ce:	2b00      	cmp	r3, #0
 810b0d0:	bfb8      	it	lt
 810b0d2:	f04f 33ff 	movlt.w	r3, #4294967295
 810b0d6:	3402      	adds	r4, #2
 810b0d8:	9305      	str	r3, [sp, #20]
 810b0da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810b1c0 <_vfiprintf_r+0x25c>
 810b0de:	7821      	ldrb	r1, [r4, #0]
 810b0e0:	2203      	movs	r2, #3
 810b0e2:	4650      	mov	r0, sl
 810b0e4:	f7f5 f904 	bl	81002f0 <memchr>
 810b0e8:	b140      	cbz	r0, 810b0fc <_vfiprintf_r+0x198>
 810b0ea:	2340      	movs	r3, #64	; 0x40
 810b0ec:	eba0 000a 	sub.w	r0, r0, sl
 810b0f0:	fa03 f000 	lsl.w	r0, r3, r0
 810b0f4:	9b04      	ldr	r3, [sp, #16]
 810b0f6:	4303      	orrs	r3, r0
 810b0f8:	3401      	adds	r4, #1
 810b0fa:	9304      	str	r3, [sp, #16]
 810b0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b100:	482c      	ldr	r0, [pc, #176]	; (810b1b4 <_vfiprintf_r+0x250>)
 810b102:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b106:	2206      	movs	r2, #6
 810b108:	f7f5 f8f2 	bl	81002f0 <memchr>
 810b10c:	2800      	cmp	r0, #0
 810b10e:	d03f      	beq.n	810b190 <_vfiprintf_r+0x22c>
 810b110:	4b29      	ldr	r3, [pc, #164]	; (810b1b8 <_vfiprintf_r+0x254>)
 810b112:	bb1b      	cbnz	r3, 810b15c <_vfiprintf_r+0x1f8>
 810b114:	9b03      	ldr	r3, [sp, #12]
 810b116:	3307      	adds	r3, #7
 810b118:	f023 0307 	bic.w	r3, r3, #7
 810b11c:	3308      	adds	r3, #8
 810b11e:	9303      	str	r3, [sp, #12]
 810b120:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b122:	443b      	add	r3, r7
 810b124:	9309      	str	r3, [sp, #36]	; 0x24
 810b126:	e767      	b.n	810aff8 <_vfiprintf_r+0x94>
 810b128:	fb0c 3202 	mla	r2, ip, r2, r3
 810b12c:	460c      	mov	r4, r1
 810b12e:	2001      	movs	r0, #1
 810b130:	e7a5      	b.n	810b07e <_vfiprintf_r+0x11a>
 810b132:	2300      	movs	r3, #0
 810b134:	3401      	adds	r4, #1
 810b136:	9305      	str	r3, [sp, #20]
 810b138:	4619      	mov	r1, r3
 810b13a:	f04f 0c0a 	mov.w	ip, #10
 810b13e:	4620      	mov	r0, r4
 810b140:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b144:	3a30      	subs	r2, #48	; 0x30
 810b146:	2a09      	cmp	r2, #9
 810b148:	d903      	bls.n	810b152 <_vfiprintf_r+0x1ee>
 810b14a:	2b00      	cmp	r3, #0
 810b14c:	d0c5      	beq.n	810b0da <_vfiprintf_r+0x176>
 810b14e:	9105      	str	r1, [sp, #20]
 810b150:	e7c3      	b.n	810b0da <_vfiprintf_r+0x176>
 810b152:	fb0c 2101 	mla	r1, ip, r1, r2
 810b156:	4604      	mov	r4, r0
 810b158:	2301      	movs	r3, #1
 810b15a:	e7f0      	b.n	810b13e <_vfiprintf_r+0x1da>
 810b15c:	ab03      	add	r3, sp, #12
 810b15e:	9300      	str	r3, [sp, #0]
 810b160:	462a      	mov	r2, r5
 810b162:	4b16      	ldr	r3, [pc, #88]	; (810b1bc <_vfiprintf_r+0x258>)
 810b164:	a904      	add	r1, sp, #16
 810b166:	4630      	mov	r0, r6
 810b168:	f7fb feda 	bl	8106f20 <_printf_float>
 810b16c:	4607      	mov	r7, r0
 810b16e:	1c78      	adds	r0, r7, #1
 810b170:	d1d6      	bne.n	810b120 <_vfiprintf_r+0x1bc>
 810b172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810b174:	07d9      	lsls	r1, r3, #31
 810b176:	d405      	bmi.n	810b184 <_vfiprintf_r+0x220>
 810b178:	89ab      	ldrh	r3, [r5, #12]
 810b17a:	059a      	lsls	r2, r3, #22
 810b17c:	d402      	bmi.n	810b184 <_vfiprintf_r+0x220>
 810b17e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810b180:	f7fb fd7a 	bl	8106c78 <__retarget_lock_release_recursive>
 810b184:	89ab      	ldrh	r3, [r5, #12]
 810b186:	065b      	lsls	r3, r3, #25
 810b188:	f53f af12 	bmi.w	810afb0 <_vfiprintf_r+0x4c>
 810b18c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b18e:	e711      	b.n	810afb4 <_vfiprintf_r+0x50>
 810b190:	ab03      	add	r3, sp, #12
 810b192:	9300      	str	r3, [sp, #0]
 810b194:	462a      	mov	r2, r5
 810b196:	4b09      	ldr	r3, [pc, #36]	; (810b1bc <_vfiprintf_r+0x258>)
 810b198:	a904      	add	r1, sp, #16
 810b19a:	4630      	mov	r0, r6
 810b19c:	f7fc f964 	bl	8107468 <_printf_i>
 810b1a0:	e7e4      	b.n	810b16c <_vfiprintf_r+0x208>
 810b1a2:	bf00      	nop
 810b1a4:	0810b4b8 	.word	0x0810b4b8
 810b1a8:	0810b4d8 	.word	0x0810b4d8
 810b1ac:	0810b498 	.word	0x0810b498
 810b1b0:	0810b8fc 	.word	0x0810b8fc
 810b1b4:	0810b906 	.word	0x0810b906
 810b1b8:	08106f21 	.word	0x08106f21
 810b1bc:	0810af3f 	.word	0x0810af3f
 810b1c0:	0810b902 	.word	0x0810b902

0810b1c4 <_read_r>:
 810b1c4:	b538      	push	{r3, r4, r5, lr}
 810b1c6:	4d07      	ldr	r5, [pc, #28]	; (810b1e4 <_read_r+0x20>)
 810b1c8:	4604      	mov	r4, r0
 810b1ca:	4608      	mov	r0, r1
 810b1cc:	4611      	mov	r1, r2
 810b1ce:	2200      	movs	r2, #0
 810b1d0:	602a      	str	r2, [r5, #0]
 810b1d2:	461a      	mov	r2, r3
 810b1d4:	f7f6 fe62 	bl	8101e9c <_read>
 810b1d8:	1c43      	adds	r3, r0, #1
 810b1da:	d102      	bne.n	810b1e2 <_read_r+0x1e>
 810b1dc:	682b      	ldr	r3, [r5, #0]
 810b1de:	b103      	cbz	r3, 810b1e2 <_read_r+0x1e>
 810b1e0:	6023      	str	r3, [r4, #0]
 810b1e2:	bd38      	pop	{r3, r4, r5, pc}
 810b1e4:	1003ebf8 	.word	0x1003ebf8

0810b1e8 <nan>:
 810b1e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810b1f0 <nan+0x8>
 810b1ec:	4770      	bx	lr
 810b1ee:	bf00      	nop
 810b1f0:	00000000 	.word	0x00000000
 810b1f4:	7ff80000 	.word	0x7ff80000

0810b1f8 <strncmp>:
 810b1f8:	b510      	push	{r4, lr}
 810b1fa:	b16a      	cbz	r2, 810b218 <strncmp+0x20>
 810b1fc:	3901      	subs	r1, #1
 810b1fe:	1884      	adds	r4, r0, r2
 810b200:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b204:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810b208:	4293      	cmp	r3, r2
 810b20a:	d103      	bne.n	810b214 <strncmp+0x1c>
 810b20c:	42a0      	cmp	r0, r4
 810b20e:	d001      	beq.n	810b214 <strncmp+0x1c>
 810b210:	2b00      	cmp	r3, #0
 810b212:	d1f5      	bne.n	810b200 <strncmp+0x8>
 810b214:	1a98      	subs	r0, r3, r2
 810b216:	bd10      	pop	{r4, pc}
 810b218:	4610      	mov	r0, r2
 810b21a:	e7fc      	b.n	810b216 <strncmp+0x1e>

0810b21c <__ascii_wctomb>:
 810b21c:	b149      	cbz	r1, 810b232 <__ascii_wctomb+0x16>
 810b21e:	2aff      	cmp	r2, #255	; 0xff
 810b220:	bf85      	ittet	hi
 810b222:	238a      	movhi	r3, #138	; 0x8a
 810b224:	6003      	strhi	r3, [r0, #0]
 810b226:	700a      	strbls	r2, [r1, #0]
 810b228:	f04f 30ff 	movhi.w	r0, #4294967295
 810b22c:	bf98      	it	ls
 810b22e:	2001      	movls	r0, #1
 810b230:	4770      	bx	lr
 810b232:	4608      	mov	r0, r1
 810b234:	4770      	bx	lr
	...

0810b238 <__assert_func>:
 810b238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b23a:	4614      	mov	r4, r2
 810b23c:	461a      	mov	r2, r3
 810b23e:	4b09      	ldr	r3, [pc, #36]	; (810b264 <__assert_func+0x2c>)
 810b240:	681b      	ldr	r3, [r3, #0]
 810b242:	4605      	mov	r5, r0
 810b244:	68d8      	ldr	r0, [r3, #12]
 810b246:	b14c      	cbz	r4, 810b25c <__assert_func+0x24>
 810b248:	4b07      	ldr	r3, [pc, #28]	; (810b268 <__assert_func+0x30>)
 810b24a:	9100      	str	r1, [sp, #0]
 810b24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810b250:	4906      	ldr	r1, [pc, #24]	; (810b26c <__assert_func+0x34>)
 810b252:	462b      	mov	r3, r5
 810b254:	f000 f80e 	bl	810b274 <fiprintf>
 810b258:	f000 f880 	bl	810b35c <abort>
 810b25c:	4b04      	ldr	r3, [pc, #16]	; (810b270 <__assert_func+0x38>)
 810b25e:	461c      	mov	r4, r3
 810b260:	e7f3      	b.n	810b24a <__assert_func+0x12>
 810b262:	bf00      	nop
 810b264:	10000010 	.word	0x10000010
 810b268:	0810b90d 	.word	0x0810b90d
 810b26c:	0810b91a 	.word	0x0810b91a
 810b270:	0810b948 	.word	0x0810b948

0810b274 <fiprintf>:
 810b274:	b40e      	push	{r1, r2, r3}
 810b276:	b503      	push	{r0, r1, lr}
 810b278:	4601      	mov	r1, r0
 810b27a:	ab03      	add	r3, sp, #12
 810b27c:	4805      	ldr	r0, [pc, #20]	; (810b294 <fiprintf+0x20>)
 810b27e:	f853 2b04 	ldr.w	r2, [r3], #4
 810b282:	6800      	ldr	r0, [r0, #0]
 810b284:	9301      	str	r3, [sp, #4]
 810b286:	f7ff fe6d 	bl	810af64 <_vfiprintf_r>
 810b28a:	b002      	add	sp, #8
 810b28c:	f85d eb04 	ldr.w	lr, [sp], #4
 810b290:	b003      	add	sp, #12
 810b292:	4770      	bx	lr
 810b294:	10000010 	.word	0x10000010

0810b298 <_fstat_r>:
 810b298:	b538      	push	{r3, r4, r5, lr}
 810b29a:	4d07      	ldr	r5, [pc, #28]	; (810b2b8 <_fstat_r+0x20>)
 810b29c:	2300      	movs	r3, #0
 810b29e:	4604      	mov	r4, r0
 810b2a0:	4608      	mov	r0, r1
 810b2a2:	4611      	mov	r1, r2
 810b2a4:	602b      	str	r3, [r5, #0]
 810b2a6:	f7f6 fe3e 	bl	8101f26 <_fstat>
 810b2aa:	1c43      	adds	r3, r0, #1
 810b2ac:	d102      	bne.n	810b2b4 <_fstat_r+0x1c>
 810b2ae:	682b      	ldr	r3, [r5, #0]
 810b2b0:	b103      	cbz	r3, 810b2b4 <_fstat_r+0x1c>
 810b2b2:	6023      	str	r3, [r4, #0]
 810b2b4:	bd38      	pop	{r3, r4, r5, pc}
 810b2b6:	bf00      	nop
 810b2b8:	1003ebf8 	.word	0x1003ebf8

0810b2bc <_isatty_r>:
 810b2bc:	b538      	push	{r3, r4, r5, lr}
 810b2be:	4d06      	ldr	r5, [pc, #24]	; (810b2d8 <_isatty_r+0x1c>)
 810b2c0:	2300      	movs	r3, #0
 810b2c2:	4604      	mov	r4, r0
 810b2c4:	4608      	mov	r0, r1
 810b2c6:	602b      	str	r3, [r5, #0]
 810b2c8:	f7f6 fe3d 	bl	8101f46 <_isatty>
 810b2cc:	1c43      	adds	r3, r0, #1
 810b2ce:	d102      	bne.n	810b2d6 <_isatty_r+0x1a>
 810b2d0:	682b      	ldr	r3, [r5, #0]
 810b2d2:	b103      	cbz	r3, 810b2d6 <_isatty_r+0x1a>
 810b2d4:	6023      	str	r3, [r4, #0]
 810b2d6:	bd38      	pop	{r3, r4, r5, pc}
 810b2d8:	1003ebf8 	.word	0x1003ebf8

0810b2dc <memmove>:
 810b2dc:	4288      	cmp	r0, r1
 810b2de:	b510      	push	{r4, lr}
 810b2e0:	eb01 0402 	add.w	r4, r1, r2
 810b2e4:	d902      	bls.n	810b2ec <memmove+0x10>
 810b2e6:	4284      	cmp	r4, r0
 810b2e8:	4623      	mov	r3, r4
 810b2ea:	d807      	bhi.n	810b2fc <memmove+0x20>
 810b2ec:	1e43      	subs	r3, r0, #1
 810b2ee:	42a1      	cmp	r1, r4
 810b2f0:	d008      	beq.n	810b304 <memmove+0x28>
 810b2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810b2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810b2fa:	e7f8      	b.n	810b2ee <memmove+0x12>
 810b2fc:	4402      	add	r2, r0
 810b2fe:	4601      	mov	r1, r0
 810b300:	428a      	cmp	r2, r1
 810b302:	d100      	bne.n	810b306 <memmove+0x2a>
 810b304:	bd10      	pop	{r4, pc}
 810b306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810b30a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810b30e:	e7f7      	b.n	810b300 <memmove+0x24>

0810b310 <_realloc_r>:
 810b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b312:	4607      	mov	r7, r0
 810b314:	4614      	mov	r4, r2
 810b316:	460e      	mov	r6, r1
 810b318:	b921      	cbnz	r1, 810b324 <_realloc_r+0x14>
 810b31a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810b31e:	4611      	mov	r1, r2
 810b320:	f7fb bd04 	b.w	8106d2c <_malloc_r>
 810b324:	b922      	cbnz	r2, 810b330 <_realloc_r+0x20>
 810b326:	f7fb fcb1 	bl	8106c8c <_free_r>
 810b32a:	4625      	mov	r5, r4
 810b32c:	4628      	mov	r0, r5
 810b32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b330:	f000 f81b 	bl	810b36a <_malloc_usable_size_r>
 810b334:	42a0      	cmp	r0, r4
 810b336:	d20f      	bcs.n	810b358 <_realloc_r+0x48>
 810b338:	4621      	mov	r1, r4
 810b33a:	4638      	mov	r0, r7
 810b33c:	f7fb fcf6 	bl	8106d2c <_malloc_r>
 810b340:	4605      	mov	r5, r0
 810b342:	2800      	cmp	r0, #0
 810b344:	d0f2      	beq.n	810b32c <_realloc_r+0x1c>
 810b346:	4631      	mov	r1, r6
 810b348:	4622      	mov	r2, r4
 810b34a:	f7fe ffa1 	bl	810a290 <memcpy>
 810b34e:	4631      	mov	r1, r6
 810b350:	4638      	mov	r0, r7
 810b352:	f7fb fc9b 	bl	8106c8c <_free_r>
 810b356:	e7e9      	b.n	810b32c <_realloc_r+0x1c>
 810b358:	4635      	mov	r5, r6
 810b35a:	e7e7      	b.n	810b32c <_realloc_r+0x1c>

0810b35c <abort>:
 810b35c:	b508      	push	{r3, lr}
 810b35e:	2006      	movs	r0, #6
 810b360:	f000 f834 	bl	810b3cc <raise>
 810b364:	2001      	movs	r0, #1
 810b366:	f7f6 fd8f 	bl	8101e88 <_exit>

0810b36a <_malloc_usable_size_r>:
 810b36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810b36e:	1f18      	subs	r0, r3, #4
 810b370:	2b00      	cmp	r3, #0
 810b372:	bfbc      	itt	lt
 810b374:	580b      	ldrlt	r3, [r1, r0]
 810b376:	18c0      	addlt	r0, r0, r3
 810b378:	4770      	bx	lr

0810b37a <_raise_r>:
 810b37a:	291f      	cmp	r1, #31
 810b37c:	b538      	push	{r3, r4, r5, lr}
 810b37e:	4604      	mov	r4, r0
 810b380:	460d      	mov	r5, r1
 810b382:	d904      	bls.n	810b38e <_raise_r+0x14>
 810b384:	2316      	movs	r3, #22
 810b386:	6003      	str	r3, [r0, #0]
 810b388:	f04f 30ff 	mov.w	r0, #4294967295
 810b38c:	bd38      	pop	{r3, r4, r5, pc}
 810b38e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810b390:	b112      	cbz	r2, 810b398 <_raise_r+0x1e>
 810b392:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810b396:	b94b      	cbnz	r3, 810b3ac <_raise_r+0x32>
 810b398:	4620      	mov	r0, r4
 810b39a:	f000 f831 	bl	810b400 <_getpid_r>
 810b39e:	462a      	mov	r2, r5
 810b3a0:	4601      	mov	r1, r0
 810b3a2:	4620      	mov	r0, r4
 810b3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810b3a8:	f000 b818 	b.w	810b3dc <_kill_r>
 810b3ac:	2b01      	cmp	r3, #1
 810b3ae:	d00a      	beq.n	810b3c6 <_raise_r+0x4c>
 810b3b0:	1c59      	adds	r1, r3, #1
 810b3b2:	d103      	bne.n	810b3bc <_raise_r+0x42>
 810b3b4:	2316      	movs	r3, #22
 810b3b6:	6003      	str	r3, [r0, #0]
 810b3b8:	2001      	movs	r0, #1
 810b3ba:	e7e7      	b.n	810b38c <_raise_r+0x12>
 810b3bc:	2400      	movs	r4, #0
 810b3be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810b3c2:	4628      	mov	r0, r5
 810b3c4:	4798      	blx	r3
 810b3c6:	2000      	movs	r0, #0
 810b3c8:	e7e0      	b.n	810b38c <_raise_r+0x12>
	...

0810b3cc <raise>:
 810b3cc:	4b02      	ldr	r3, [pc, #8]	; (810b3d8 <raise+0xc>)
 810b3ce:	4601      	mov	r1, r0
 810b3d0:	6818      	ldr	r0, [r3, #0]
 810b3d2:	f7ff bfd2 	b.w	810b37a <_raise_r>
 810b3d6:	bf00      	nop
 810b3d8:	10000010 	.word	0x10000010

0810b3dc <_kill_r>:
 810b3dc:	b538      	push	{r3, r4, r5, lr}
 810b3de:	4d07      	ldr	r5, [pc, #28]	; (810b3fc <_kill_r+0x20>)
 810b3e0:	2300      	movs	r3, #0
 810b3e2:	4604      	mov	r4, r0
 810b3e4:	4608      	mov	r0, r1
 810b3e6:	4611      	mov	r1, r2
 810b3e8:	602b      	str	r3, [r5, #0]
 810b3ea:	f7f6 fd3d 	bl	8101e68 <_kill>
 810b3ee:	1c43      	adds	r3, r0, #1
 810b3f0:	d102      	bne.n	810b3f8 <_kill_r+0x1c>
 810b3f2:	682b      	ldr	r3, [r5, #0]
 810b3f4:	b103      	cbz	r3, 810b3f8 <_kill_r+0x1c>
 810b3f6:	6023      	str	r3, [r4, #0]
 810b3f8:	bd38      	pop	{r3, r4, r5, pc}
 810b3fa:	bf00      	nop
 810b3fc:	1003ebf8 	.word	0x1003ebf8

0810b400 <_getpid_r>:
 810b400:	f7f6 bd2a 	b.w	8101e58 <_getpid>

0810b404 <_init>:
 810b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b406:	bf00      	nop
 810b408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b40a:	bc08      	pop	{r3}
 810b40c:	469e      	mov	lr, r3
 810b40e:	4770      	bx	lr

0810b410 <_fini>:
 810b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b412:	bf00      	nop
 810b414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810b416:	bc08      	pop	{r3}
 810b418:	469e      	mov	lr, r3
 810b41a:	4770      	bx	lr
