
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc44  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  0810dee8  0810dee8  0001dee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ed48  0810ed48  0001ed48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810ed50  0810ed50  0001ed50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810ed54  0810ed54  0001ed54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000238  10000000  0810ed58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002d0  10000238  0810ef90  00020238  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000508  0810ef90  00020508  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002105a  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003520  00000000  00000000  000412c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e70  00000000  00000000  000447e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d78  00000000  00000000  00045658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c412  00000000  00000000  000463d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013c0a  00000000  00000000  000827e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001860e7  00000000  00000000  000963ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021c4d3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005654  00000000  00000000  0021c528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000238 	.word	0x10000238
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810decc 	.word	0x0810decc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000023c 	.word	0x1000023c
 81002dc:	0810decc 	.word	0x0810decc

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a4 	b.w	81010f8 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468c      	mov	ip, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	f040 8083 	bne.w	8100f4a <__udivmoddi4+0x116>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4617      	mov	r7, r2
 8100e48:	d947      	bls.n	8100eda <__udivmoddi4+0xa6>
 8100e4a:	fab2 f282 	clz	r2, r2
 8100e4e:	b142      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	f1c2 0020 	rsb	r0, r2, #32
 8100e54:	fa24 f000 	lsr.w	r0, r4, r0
 8100e58:	4091      	lsls	r1, r2
 8100e5a:	4097      	lsls	r7, r2
 8100e5c:	ea40 0c01 	orr.w	ip, r0, r1
 8100e60:	4094      	lsls	r4, r2
 8100e62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100e66:	0c23      	lsrs	r3, r4, #16
 8100e68:	fbbc f6f8 	udiv	r6, ip, r8
 8100e6c:	fa1f fe87 	uxth.w	lr, r7
 8100e70:	fb08 c116 	mls	r1, r8, r6, ip
 8100e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e78:	fb06 f10e 	mul.w	r1, r6, lr
 8100e7c:	4299      	cmp	r1, r3
 8100e7e:	d909      	bls.n	8100e94 <__udivmoddi4+0x60>
 8100e80:	18fb      	adds	r3, r7, r3
 8100e82:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e86:	f080 8119 	bcs.w	81010bc <__udivmoddi4+0x288>
 8100e8a:	4299      	cmp	r1, r3
 8100e8c:	f240 8116 	bls.w	81010bc <__udivmoddi4+0x288>
 8100e90:	3e02      	subs	r6, #2
 8100e92:	443b      	add	r3, r7
 8100e94:	1a5b      	subs	r3, r3, r1
 8100e96:	b2a4      	uxth	r4, r4
 8100e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8100e9c:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea4:	fb00 fe0e 	mul.w	lr, r0, lr
 8100ea8:	45a6      	cmp	lr, r4
 8100eaa:	d909      	bls.n	8100ec0 <__udivmoddi4+0x8c>
 8100eac:	193c      	adds	r4, r7, r4
 8100eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb2:	f080 8105 	bcs.w	81010c0 <__udivmoddi4+0x28c>
 8100eb6:	45a6      	cmp	lr, r4
 8100eb8:	f240 8102 	bls.w	81010c0 <__udivmoddi4+0x28c>
 8100ebc:	3802      	subs	r0, #2
 8100ebe:	443c      	add	r4, r7
 8100ec0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100ec4:	eba4 040e 	sub.w	r4, r4, lr
 8100ec8:	2600      	movs	r6, #0
 8100eca:	b11d      	cbz	r5, 8100ed4 <__udivmoddi4+0xa0>
 8100ecc:	40d4      	lsrs	r4, r2
 8100ece:	2300      	movs	r3, #0
 8100ed0:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed4:	4631      	mov	r1, r6
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	b902      	cbnz	r2, 8100ede <__udivmoddi4+0xaa>
 8100edc:	deff      	udf	#255	; 0xff
 8100ede:	fab2 f282 	clz	r2, r2
 8100ee2:	2a00      	cmp	r2, #0
 8100ee4:	d150      	bne.n	8100f88 <__udivmoddi4+0x154>
 8100ee6:	1bcb      	subs	r3, r1, r7
 8100ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100eec:	fa1f f887 	uxth.w	r8, r7
 8100ef0:	2601      	movs	r6, #1
 8100ef2:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ef6:	0c21      	lsrs	r1, r4, #16
 8100ef8:	fb0e 331c 	mls	r3, lr, ip, r3
 8100efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f00:	fb08 f30c 	mul.w	r3, r8, ip
 8100f04:	428b      	cmp	r3, r1
 8100f06:	d907      	bls.n	8100f18 <__udivmoddi4+0xe4>
 8100f08:	1879      	adds	r1, r7, r1
 8100f0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100f0e:	d202      	bcs.n	8100f16 <__udivmoddi4+0xe2>
 8100f10:	428b      	cmp	r3, r1
 8100f12:	f200 80e9 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f16:	4684      	mov	ip, r0
 8100f18:	1ac9      	subs	r1, r1, r3
 8100f1a:	b2a3      	uxth	r3, r4
 8100f1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f20:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100f28:	fb08 f800 	mul.w	r8, r8, r0
 8100f2c:	45a0      	cmp	r8, r4
 8100f2e:	d907      	bls.n	8100f40 <__udivmoddi4+0x10c>
 8100f30:	193c      	adds	r4, r7, r4
 8100f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8100f36:	d202      	bcs.n	8100f3e <__udivmoddi4+0x10a>
 8100f38:	45a0      	cmp	r8, r4
 8100f3a:	f200 80d9 	bhi.w	81010f0 <__udivmoddi4+0x2bc>
 8100f3e:	4618      	mov	r0, r3
 8100f40:	eba4 0408 	sub.w	r4, r4, r8
 8100f44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f48:	e7bf      	b.n	8100eca <__udivmoddi4+0x96>
 8100f4a:	428b      	cmp	r3, r1
 8100f4c:	d909      	bls.n	8100f62 <__udivmoddi4+0x12e>
 8100f4e:	2d00      	cmp	r5, #0
 8100f50:	f000 80b1 	beq.w	81010b6 <__udivmoddi4+0x282>
 8100f54:	2600      	movs	r6, #0
 8100f56:	e9c5 0100 	strd	r0, r1, [r5]
 8100f5a:	4630      	mov	r0, r6
 8100f5c:	4631      	mov	r1, r6
 8100f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f62:	fab3 f683 	clz	r6, r3
 8100f66:	2e00      	cmp	r6, #0
 8100f68:	d14a      	bne.n	8101000 <__udivmoddi4+0x1cc>
 8100f6a:	428b      	cmp	r3, r1
 8100f6c:	d302      	bcc.n	8100f74 <__udivmoddi4+0x140>
 8100f6e:	4282      	cmp	r2, r0
 8100f70:	f200 80b8 	bhi.w	81010e4 <__udivmoddi4+0x2b0>
 8100f74:	1a84      	subs	r4, r0, r2
 8100f76:	eb61 0103 	sbc.w	r1, r1, r3
 8100f7a:	2001      	movs	r0, #1
 8100f7c:	468c      	mov	ip, r1
 8100f7e:	2d00      	cmp	r5, #0
 8100f80:	d0a8      	beq.n	8100ed4 <__udivmoddi4+0xa0>
 8100f82:	e9c5 4c00 	strd	r4, ip, [r5]
 8100f86:	e7a5      	b.n	8100ed4 <__udivmoddi4+0xa0>
 8100f88:	f1c2 0320 	rsb	r3, r2, #32
 8100f8c:	fa20 f603 	lsr.w	r6, r0, r3
 8100f90:	4097      	lsls	r7, r2
 8100f92:	fa01 f002 	lsl.w	r0, r1, r2
 8100f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f9a:	40d9      	lsrs	r1, r3
 8100f9c:	4330      	orrs	r0, r6
 8100f9e:	0c03      	lsrs	r3, r0, #16
 8100fa0:	fbb1 f6fe 	udiv	r6, r1, lr
 8100fa4:	fa1f f887 	uxth.w	r8, r7
 8100fa8:	fb0e 1116 	mls	r1, lr, r6, r1
 8100fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100fb0:	fb06 f108 	mul.w	r1, r6, r8
 8100fb4:	4299      	cmp	r1, r3
 8100fb6:	fa04 f402 	lsl.w	r4, r4, r2
 8100fba:	d909      	bls.n	8100fd0 <__udivmoddi4+0x19c>
 8100fbc:	18fb      	adds	r3, r7, r3
 8100fbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8100fc2:	f080 808d 	bcs.w	81010e0 <__udivmoddi4+0x2ac>
 8100fc6:	4299      	cmp	r1, r3
 8100fc8:	f240 808a 	bls.w	81010e0 <__udivmoddi4+0x2ac>
 8100fcc:	3e02      	subs	r6, #2
 8100fce:	443b      	add	r3, r7
 8100fd0:	1a5b      	subs	r3, r3, r1
 8100fd2:	b281      	uxth	r1, r0
 8100fd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8100fd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8100fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fe0:	fb00 f308 	mul.w	r3, r0, r8
 8100fe4:	428b      	cmp	r3, r1
 8100fe6:	d907      	bls.n	8100ff8 <__udivmoddi4+0x1c4>
 8100fe8:	1879      	adds	r1, r7, r1
 8100fea:	f100 3cff 	add.w	ip, r0, #4294967295
 8100fee:	d273      	bcs.n	81010d8 <__udivmoddi4+0x2a4>
 8100ff0:	428b      	cmp	r3, r1
 8100ff2:	d971      	bls.n	81010d8 <__udivmoddi4+0x2a4>
 8100ff4:	3802      	subs	r0, #2
 8100ff6:	4439      	add	r1, r7
 8100ff8:	1acb      	subs	r3, r1, r3
 8100ffa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100ffe:	e778      	b.n	8100ef2 <__udivmoddi4+0xbe>
 8101000:	f1c6 0c20 	rsb	ip, r6, #32
 8101004:	fa03 f406 	lsl.w	r4, r3, r6
 8101008:	fa22 f30c 	lsr.w	r3, r2, ip
 810100c:	431c      	orrs	r4, r3
 810100e:	fa20 f70c 	lsr.w	r7, r0, ip
 8101012:	fa01 f306 	lsl.w	r3, r1, r6
 8101016:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 810101a:	fa21 f10c 	lsr.w	r1, r1, ip
 810101e:	431f      	orrs	r7, r3
 8101020:	0c3b      	lsrs	r3, r7, #16
 8101022:	fbb1 f9fe 	udiv	r9, r1, lr
 8101026:	fa1f f884 	uxth.w	r8, r4
 810102a:	fb0e 1119 	mls	r1, lr, r9, r1
 810102e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8101032:	fb09 fa08 	mul.w	sl, r9, r8
 8101036:	458a      	cmp	sl, r1
 8101038:	fa02 f206 	lsl.w	r2, r2, r6
 810103c:	fa00 f306 	lsl.w	r3, r0, r6
 8101040:	d908      	bls.n	8101054 <__udivmoddi4+0x220>
 8101042:	1861      	adds	r1, r4, r1
 8101044:	f109 30ff 	add.w	r0, r9, #4294967295
 8101048:	d248      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 810104a:	458a      	cmp	sl, r1
 810104c:	d946      	bls.n	81010dc <__udivmoddi4+0x2a8>
 810104e:	f1a9 0902 	sub.w	r9, r9, #2
 8101052:	4421      	add	r1, r4
 8101054:	eba1 010a 	sub.w	r1, r1, sl
 8101058:	b2bf      	uxth	r7, r7
 810105a:	fbb1 f0fe 	udiv	r0, r1, lr
 810105e:	fb0e 1110 	mls	r1, lr, r0, r1
 8101062:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8101066:	fb00 f808 	mul.w	r8, r0, r8
 810106a:	45b8      	cmp	r8, r7
 810106c:	d907      	bls.n	810107e <__udivmoddi4+0x24a>
 810106e:	19e7      	adds	r7, r4, r7
 8101070:	f100 31ff 	add.w	r1, r0, #4294967295
 8101074:	d22e      	bcs.n	81010d4 <__udivmoddi4+0x2a0>
 8101076:	45b8      	cmp	r8, r7
 8101078:	d92c      	bls.n	81010d4 <__udivmoddi4+0x2a0>
 810107a:	3802      	subs	r0, #2
 810107c:	4427      	add	r7, r4
 810107e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101082:	eba7 0708 	sub.w	r7, r7, r8
 8101086:	fba0 8902 	umull	r8, r9, r0, r2
 810108a:	454f      	cmp	r7, r9
 810108c:	46c6      	mov	lr, r8
 810108e:	4649      	mov	r1, r9
 8101090:	d31a      	bcc.n	81010c8 <__udivmoddi4+0x294>
 8101092:	d017      	beq.n	81010c4 <__udivmoddi4+0x290>
 8101094:	b15d      	cbz	r5, 81010ae <__udivmoddi4+0x27a>
 8101096:	ebb3 020e 	subs.w	r2, r3, lr
 810109a:	eb67 0701 	sbc.w	r7, r7, r1
 810109e:	fa07 fc0c 	lsl.w	ip, r7, ip
 81010a2:	40f2      	lsrs	r2, r6
 81010a4:	ea4c 0202 	orr.w	r2, ip, r2
 81010a8:	40f7      	lsrs	r7, r6
 81010aa:	e9c5 2700 	strd	r2, r7, [r5]
 81010ae:	2600      	movs	r6, #0
 81010b0:	4631      	mov	r1, r6
 81010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81010b6:	462e      	mov	r6, r5
 81010b8:	4628      	mov	r0, r5
 81010ba:	e70b      	b.n	8100ed4 <__udivmoddi4+0xa0>
 81010bc:	4606      	mov	r6, r0
 81010be:	e6e9      	b.n	8100e94 <__udivmoddi4+0x60>
 81010c0:	4618      	mov	r0, r3
 81010c2:	e6fd      	b.n	8100ec0 <__udivmoddi4+0x8c>
 81010c4:	4543      	cmp	r3, r8
 81010c6:	d2e5      	bcs.n	8101094 <__udivmoddi4+0x260>
 81010c8:	ebb8 0e02 	subs.w	lr, r8, r2
 81010cc:	eb69 0104 	sbc.w	r1, r9, r4
 81010d0:	3801      	subs	r0, #1
 81010d2:	e7df      	b.n	8101094 <__udivmoddi4+0x260>
 81010d4:	4608      	mov	r0, r1
 81010d6:	e7d2      	b.n	810107e <__udivmoddi4+0x24a>
 81010d8:	4660      	mov	r0, ip
 81010da:	e78d      	b.n	8100ff8 <__udivmoddi4+0x1c4>
 81010dc:	4681      	mov	r9, r0
 81010de:	e7b9      	b.n	8101054 <__udivmoddi4+0x220>
 81010e0:	4666      	mov	r6, ip
 81010e2:	e775      	b.n	8100fd0 <__udivmoddi4+0x19c>
 81010e4:	4630      	mov	r0, r6
 81010e6:	e74a      	b.n	8100f7e <__udivmoddi4+0x14a>
 81010e8:	f1ac 0c02 	sub.w	ip, ip, #2
 81010ec:	4439      	add	r1, r7
 81010ee:	e713      	b.n	8100f18 <__udivmoddi4+0xe4>
 81010f0:	3802      	subs	r0, #2
 81010f2:	443c      	add	r4, r7
 81010f4:	e724      	b.n	8100f40 <__udivmoddi4+0x10c>
 81010f6:	bf00      	nop

081010f8 <__aeabi_idiv0>:
 81010f8:	4770      	bx	lr
 81010fa:	bf00      	nop

081010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010fc:	b480      	push	{r7}
 81010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101100:	4b0b      	ldr	r3, [pc, #44]	; (8101130 <SystemInit+0x34>)
 8101102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101106:	4a0a      	ldr	r2, [pc, #40]	; (8101130 <SystemInit+0x34>)
 8101108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101110:	4b07      	ldr	r3, [pc, #28]	; (8101130 <SystemInit+0x34>)
 8101112:	691b      	ldr	r3, [r3, #16]
 8101114:	4a06      	ldr	r2, [pc, #24]	; (8101130 <SystemInit+0x34>)
 8101116:	f043 0310 	orr.w	r3, r3, #16
 810111a:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810111c:	4b04      	ldr	r3, [pc, #16]	; (8101130 <SystemInit+0x34>)
 810111e:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8101122:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101124:	bf00      	nop
 8101126:	46bd      	mov	sp, r7
 8101128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810112c:	4770      	bx	lr
 810112e:	bf00      	nop
 8101130:	e000ed00 	.word	0xe000ed00

08101134 <ADE9000_Setup>:
#include "main.h"

int8_t flag_read = 0;
int32_t n_int = 0;

void ADE9000_Setup(){
 8101134:	b580      	push	{r7, lr}
 8101136:	b082      	sub	sp, #8
 8101138:	af00      	add	r7, sp, #0
	uint32_t value_reg_32;
	uint16_t value_reg_16;

	// ADDR_PGA_GAIN
	value_reg_16 = 0x0000; //gain all channel 1
 810113a:	2300      	movs	r3, #0
 810113c:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_PGA_GAIN,value_reg_16);
 810113e:	88fb      	ldrh	r3, [r7, #6]
 8101140:	4619      	mov	r1, r3
 8101142:	f240 40b9 	movw	r0, #1209	; 0x4b9
 8101146:	f000 f8e9 	bl	810131c <ADE9000_SPI_Write_16>

	//CONFIG2
	value_reg_16 = 	0x0C00;			//Default High pass corner frequency of 1.25Hz
 810114a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810114e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG2,value_reg_16);
 8101150:	88fb      	ldrh	r3, [r7, #6]
 8101152:	4619      	mov	r1, r3
 8101154:	f240 40af 	movw	r0, #1199	; 0x4af
 8101158:	f000 f8e0 	bl	810131c <ADE9000_SPI_Write_16>

	//CONFIG1
	//EXT_REF off
	value_reg_16 = 0x000000;
 810115c:	2300      	movs	r3, #0
 810115e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG1,value_reg_16);
 8101160:	88fb      	ldrh	r3, [r7, #6]
 8101162:	4619      	mov	r1, r3
 8101164:	f240 4081 	movw	r0, #1153	; 0x481
 8101168:	f000 f8d8 	bl	810131c <ADE9000_SPI_Write_16>

	//ACCMODE
	value_reg_16= 0x0000;			//3P4W Wye configuration
 810116c:	2300      	movs	r3, #0
 810116e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_ACCMODE,value_reg_16);
 8101170:	88fb      	ldrh	r3, [r7, #6]
 8101172:	4619      	mov	r1, r3
 8101174:	f240 4092 	movw	r0, #1170	; 0x492
 8101178:	f000 f8d0 	bl	810131c <ADE9000_SPI_Write_16>
	//value_reg_16 = 0x1020;//IN, sinc4, stop full, fixed rate, stop, tutti canali(0000)
	//value_reg_16 = 0x0029; //no IN, sinc4, stop full, fixed rate, stop, solo VA (1001)
	//value_reg_16 = 0x0021; //no IN, sinc4, stop full, fixed rate, stop, solo Ia e VA (0001)
	//value_reg_16 = 0x0221; //no IN, LPF, stop full, fixed rate, stop, solo Ia e VA (0001)

	value_reg_16 = 0x0000;
 810117c:	2300      	movs	r3, #0
 810117e:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_IN_EN<<12);
	value_reg_16 = value_reg_16 | (WF_SRC<<8);
	value_reg_16 = value_reg_16 | (WF_MODE<<6);
 8101180:	88fb      	ldrh	r3, [r7, #6]
 8101182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101186:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_CAP_SEL<<5);
 8101188:	88fb      	ldrh	r3, [r7, #6]
 810118a:	f043 0320 	orr.w	r3, r3, #32
 810118e:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | BURST_CHAN;
 8101190:	88fb      	ldrh	r3, [r7, #6]
 8101192:	f043 0301 	orr.w	r3, r3, #1
 8101196:	80fb      	strh	r3, [r7, #6]

	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101198:	88fb      	ldrh	r3, [r7, #6]
 810119a:	4619      	mov	r1, r3
 810119c:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81011a0:	f000 f8bc 	bl	810131c <ADE9000_SPI_Write_16>
	// 1 bit per pagina: pag15-pag0
	//fa PageFULL in STATUS0

	//value_reg_16 = 0x8000; //page 15
	//value_reg_16 = 0xFFFF; //all page
	value_reg_16 = 0x8080; //page 15, page 7 (metà)
 81011a4:	f248 0380 	movw	r3, #32896	; 0x8080
 81011a8:	80fb      	strh	r3, [r7, #6]
	//value_reg_16 = 0x0000; //no int
	ADE9000_SPI_Write_16(ADDR_WFB_PG_IRQEN,value_reg_16);
 81011aa:	88fb      	ldrh	r3, [r7, #6]
 81011ac:	4619      	mov	r1, r3
 81011ae:	f240 40a1 	movw	r0, #1185	; 0x4a1
 81011b2:	f000 f8b3 	bl	810131c <ADE9000_SPI_Write_16>

	//ADDR_MASK0
	//IRQ0 per full page (bit 17)
	//quando una delle pagine settate è piena
	value_reg_32 = 0x00020000;
 81011b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81011ba:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK0,value_reg_32);
 81011bc:	6839      	ldr	r1, [r7, #0]
 81011be:	f240 4005 	movw	r0, #1029	; 0x405
 81011c2:	f000 f8df 	bl	8101384 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK0);
 81011c6:	f240 4005 	movw	r0, #1029	; 0x405
 81011ca:	f000 f86b 	bl	81012a4 <ADE9000_SPI_Read_32>
 81011ce:	6038      	str	r0, [r7, #0]

	//ADDR_MASK1
	//disable all int
	value_reg_32 = 0x00000000;
 81011d0:	2300      	movs	r3, #0
 81011d2:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK1,value_reg_32);
 81011d4:	6839      	ldr	r1, [r7, #0]
 81011d6:	f240 4006 	movw	r0, #1030	; 0x406
 81011da:	f000 f8d3 	bl	8101384 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK1);
 81011de:	f240 4006 	movw	r0, #1030	; 0x406
 81011e2:	f000 f85f 	bl	81012a4 <ADE9000_SPI_Read_32>
 81011e6:	6038      	str	r0, [r7, #0]

	//ADDR_RUN
	//Start ADE9000 measurement
	value_reg_16 = 0x0001;
 81011e8:	2301      	movs	r3, #1
 81011ea:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16);
 81011ec:	88fb      	ldrh	r3, [r7, #6]
 81011ee:	4619      	mov	r1, r3
 81011f0:	f44f 6090 	mov.w	r0, #1152	; 0x480
 81011f4:	f000 f892 	bl	810131c <ADE9000_SPI_Write_16>
}
 81011f8:	bf00      	nop
 81011fa:	3708      	adds	r7, #8
 81011fc:	46bd      	mov	sp, r7
 81011fe:	bd80      	pop	{r7, pc}

08101200 <ADE9000_Power>:

//power-on sequence
void ADE9000_Power(void){
 8101200:	b580      	push	{r7, lr}
 8101202:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8101204:	2200      	movs	r2, #0
 8101206:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810120a:	480c      	ldr	r0, [pc, #48]	; (810123c <ADE9000_Power+0x3c>)
 810120c:	f002 f8cc 	bl	81033a8 <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8101210:	2200      	movs	r2, #0
 8101212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101216:	4809      	ldr	r0, [pc, #36]	; (810123c <ADE9000_Power+0x3c>)
 8101218:	f002 f8c6 	bl	81033a8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 810121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101220:	f001 fdca 	bl	8102db8 <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 8101224:	2201      	movs	r2, #1
 8101226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 810122a:	4804      	ldr	r0, [pc, #16]	; (810123c <ADE9000_Power+0x3c>)
 810122c:	f002 f8bc 	bl	81033a8 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8101230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101234:	f001 fdc0 	bl	8102db8 <HAL_Delay>
    } while ((value_reg_32 & 0x00010000)==0);
    //Clear IRQ1
    value_reg_32 = value_reg_32 & 0x00010000;
    ADE9000_SPI_Write_32(ADDR_STATUS1,value_reg_32);
    */
}
 8101238:	bf00      	nop
 810123a:	bd80      	pop	{r7, pc}
 810123c:	58021000 	.word	0x58021000

08101240 <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 8101240:	b580      	push	{r7, lr}
 8101242:	b084      	sub	sp, #16
 8101244:	af00      	add	r7, sp, #0
 8101246:	4603      	mov	r3, r0
 8101248:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810124a:	88fb      	ldrh	r3, [r7, #6]
 810124c:	011b      	lsls	r3, r3, #4
 810124e:	b29b      	uxth	r3, r3
 8101250:	3308      	adds	r3, #8
 8101252:	b29b      	uxth	r3, r3
 8101254:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101256:	2200      	movs	r2, #0
 8101258:	f44f 7100 	mov.w	r1, #512	; 0x200
 810125c:	480f      	ldr	r0, [pc, #60]	; (810129c <ADE9000_SPI_Read_16+0x5c>)
 810125e:	f002 f8a3 	bl	81033a8 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101262:	f107 0108 	add.w	r1, r7, #8
 8101266:	2364      	movs	r3, #100	; 0x64
 8101268:	2201      	movs	r2, #1
 810126a:	480d      	ldr	r0, [pc, #52]	; (81012a0 <ADE9000_SPI_Read_16+0x60>)
 810126c:	f003 ffaa 	bl	81051c4 <HAL_SPI_Transmit>
 8101270:	4603      	mov	r3, r0
 8101272:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 8101274:	f107 010c 	add.w	r1, r7, #12
 8101278:	2364      	movs	r3, #100	; 0x64
 810127a:	2201      	movs	r2, #1
 810127c:	4808      	ldr	r0, [pc, #32]	; (81012a0 <ADE9000_SPI_Read_16+0x60>)
 810127e:	f004 f98f 	bl	81055a0 <HAL_SPI_Receive>
 8101282:	4603      	mov	r3, r0
 8101284:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101286:	2201      	movs	r2, #1
 8101288:	f44f 7100 	mov.w	r1, #512	; 0x200
 810128c:	4803      	ldr	r0, [pc, #12]	; (810129c <ADE9000_SPI_Read_16+0x5c>)
 810128e:	f002 f88b 	bl	81033a8 <HAL_GPIO_WritePin>

	return data.data_16;
 8101292:	89bb      	ldrh	r3, [r7, #12]
}
 8101294:	4618      	mov	r0, r3
 8101296:	3710      	adds	r7, #16
 8101298:	46bd      	mov	sp, r7
 810129a:	bd80      	pop	{r7, pc}
 810129c:	58021800 	.word	0x58021800
 81012a0:	100003b0 	.word	0x100003b0

081012a4 <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 81012a4:	b580      	push	{r7, lr}
 81012a6:	b086      	sub	sp, #24
 81012a8:	af00      	add	r7, sp, #0
 81012aa:	4603      	mov	r3, r0
 81012ac:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81012ae:	88fb      	ldrh	r3, [r7, #6]
 81012b0:	011b      	lsls	r3, r3, #4
 81012b2:	b29b      	uxth	r3, r3
 81012b4:	3308      	adds	r3, #8
 81012b6:	b29b      	uxth	r3, r3
 81012b8:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81012ba:	2200      	movs	r2, #0
 81012bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 81012c0:	4814      	ldr	r0, [pc, #80]	; (8101314 <ADE9000_SPI_Read_32+0x70>)
 81012c2:	f002 f871 	bl	81033a8 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81012c6:	f107 010c 	add.w	r1, r7, #12
 81012ca:	2364      	movs	r3, #100	; 0x64
 81012cc:	2201      	movs	r2, #1
 81012ce:	4812      	ldr	r0, [pc, #72]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012d0:	f003 ff78 	bl	81051c4 <HAL_SPI_Transmit>
 81012d4:	4603      	mov	r3, r0
 81012d6:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81012d8:	f107 0110 	add.w	r1, r7, #16
 81012dc:	3102      	adds	r1, #2
 81012de:	2364      	movs	r3, #100	; 0x64
 81012e0:	2201      	movs	r2, #1
 81012e2:	480d      	ldr	r0, [pc, #52]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012e4:	f004 f95c 	bl	81055a0 <HAL_SPI_Receive>
 81012e8:	4603      	mov	r3, r0
 81012ea:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81012ec:	f107 0110 	add.w	r1, r7, #16
 81012f0:	2364      	movs	r3, #100	; 0x64
 81012f2:	2201      	movs	r2, #1
 81012f4:	4808      	ldr	r0, [pc, #32]	; (8101318 <ADE9000_SPI_Read_32+0x74>)
 81012f6:	f004 f953 	bl	81055a0 <HAL_SPI_Receive>
 81012fa:	4603      	mov	r3, r0
 81012fc:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81012fe:	2201      	movs	r2, #1
 8101300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101304:	4803      	ldr	r0, [pc, #12]	; (8101314 <ADE9000_SPI_Read_32+0x70>)
 8101306:	f002 f84f 	bl	81033a8 <HAL_GPIO_WritePin>

	return data.data_32;
 810130a:	693b      	ldr	r3, [r7, #16]
}
 810130c:	4618      	mov	r0, r3
 810130e:	3718      	adds	r7, #24
 8101310:	46bd      	mov	sp, r7
 8101312:	bd80      	pop	{r7, pc}
 8101314:	58021800 	.word	0x58021800
 8101318:	100003b0 	.word	0x100003b0

0810131c <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 810131c:	b580      	push	{r7, lr}
 810131e:	b084      	sub	sp, #16
 8101320:	af00      	add	r7, sp, #0
 8101322:	4603      	mov	r3, r0
 8101324:	460a      	mov	r2, r1
 8101326:	80fb      	strh	r3, [r7, #6]
 8101328:	4613      	mov	r3, r2
 810132a:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 810132c:	88fb      	ldrh	r3, [r7, #6]
 810132e:	011b      	lsls	r3, r3, #4
 8101330:	b29b      	uxth	r3, r3
 8101332:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101334:	2200      	movs	r2, #0
 8101336:	f44f 7100 	mov.w	r1, #512	; 0x200
 810133a:	4810      	ldr	r0, [pc, #64]	; (810137c <ADE9000_SPI_Write_16+0x60>)
 810133c:	f002 f834 	bl	81033a8 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101340:	f107 010c 	add.w	r1, r7, #12
 8101344:	2364      	movs	r3, #100	; 0x64
 8101346:	2201      	movs	r2, #1
 8101348:	480d      	ldr	r0, [pc, #52]	; (8101380 <ADE9000_SPI_Write_16+0x64>)
 810134a:	f003 ff3b 	bl	81051c4 <HAL_SPI_Transmit>
 810134e:	4603      	mov	r3, r0
 8101350:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 8101352:	88bb      	ldrh	r3, [r7, #4]
 8101354:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 8101356:	f107 0108 	add.w	r1, r7, #8
 810135a:	2364      	movs	r3, #100	; 0x64
 810135c:	2201      	movs	r2, #1
 810135e:	4808      	ldr	r0, [pc, #32]	; (8101380 <ADE9000_SPI_Write_16+0x64>)
 8101360:	f003 ff30 	bl	81051c4 <HAL_SPI_Transmit>
 8101364:	4603      	mov	r3, r0
 8101366:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101368:	2201      	movs	r2, #1
 810136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810136e:	4803      	ldr	r0, [pc, #12]	; (810137c <ADE9000_SPI_Write_16+0x60>)
 8101370:	f002 f81a 	bl	81033a8 <HAL_GPIO_WritePin>

}
 8101374:	bf00      	nop
 8101376:	3710      	adds	r7, #16
 8101378:	46bd      	mov	sp, r7
 810137a:	bd80      	pop	{r7, pc}
 810137c:	58021800 	.word	0x58021800
 8101380:	100003b0 	.word	0x100003b0

08101384 <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 8101384:	b580      	push	{r7, lr}
 8101386:	b084      	sub	sp, #16
 8101388:	af00      	add	r7, sp, #0
 810138a:	4603      	mov	r3, r0
 810138c:	6039      	str	r1, [r7, #0]
 810138e:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8101390:	88fb      	ldrh	r3, [r7, #6]
 8101392:	011b      	lsls	r3, r3, #4
 8101394:	b29b      	uxth	r3, r3
 8101396:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101398:	2200      	movs	r2, #0
 810139a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810139e:	4815      	ldr	r0, [pc, #84]	; (81013f4 <ADE9000_SPI_Write_32+0x70>)
 81013a0:	f002 f802 	bl	81033a8 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81013a4:	f107 010c 	add.w	r1, r7, #12
 81013a8:	2364      	movs	r3, #100	; 0x64
 81013aa:	2201      	movs	r2, #1
 81013ac:	4812      	ldr	r0, [pc, #72]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013ae:	f003 ff09 	bl	81051c4 <HAL_SPI_Transmit>
 81013b2:	4603      	mov	r3, r0
 81013b4:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 81013b6:	683b      	ldr	r3, [r7, #0]
 81013b8:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 81013ba:	f107 0108 	add.w	r1, r7, #8
 81013be:	3102      	adds	r1, #2
 81013c0:	2364      	movs	r3, #100	; 0x64
 81013c2:	2201      	movs	r2, #1
 81013c4:	480c      	ldr	r0, [pc, #48]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013c6:	f003 fefd 	bl	81051c4 <HAL_SPI_Transmit>
 81013ca:	4603      	mov	r3, r0
 81013cc:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81013ce:	f107 0108 	add.w	r1, r7, #8
 81013d2:	2364      	movs	r3, #100	; 0x64
 81013d4:	2201      	movs	r2, #1
 81013d6:	4808      	ldr	r0, [pc, #32]	; (81013f8 <ADE9000_SPI_Write_32+0x74>)
 81013d8:	f003 fef4 	bl	81051c4 <HAL_SPI_Transmit>
 81013dc:	4603      	mov	r3, r0
 81013de:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81013e0:	2201      	movs	r2, #1
 81013e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 81013e6:	4803      	ldr	r0, [pc, #12]	; (81013f4 <ADE9000_SPI_Write_32+0x70>)
 81013e8:	f001 ffde 	bl	81033a8 <HAL_GPIO_WritePin>

}
 81013ec:	bf00      	nop
 81013ee:	3710      	adds	r7, #16
 81013f0:	46bd      	mov	sp, r7
 81013f2:	bd80      	pop	{r7, pc}
 81013f4:	58021800 	.word	0x58021800
 81013f8:	100003b0 	.word	0x100003b0

081013fc <Start_Waveform_Buffer>:


void Start_Waveform_Buffer() {
 81013fc:	b580      	push	{r7, lr}
 81013fe:	b082      	sub	sp, #8
 8101400:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 8101402:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101406:	f7ff ff1b 	bl	8101240 <ADE9000_SPI_Read_16>
 810140a:	4603      	mov	r3, r0
 810140c:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16|0x0010);
 810140e:	88fb      	ldrh	r3, [r7, #6]
 8101410:	f043 0310 	orr.w	r3, r3, #16
 8101414:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101416:	88fb      	ldrh	r3, [r7, #6]
 8101418:	4619      	mov	r1, r3
 810141a:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810141e:	f7ff ff7d 	bl	810131c <ADE9000_SPI_Write_16>
}
 8101422:	bf00      	nop
 8101424:	3708      	adds	r7, #8
 8101426:	46bd      	mov	sp, r7
 8101428:	bd80      	pop	{r7, pc}

0810142a <Stop_Waveform_Buffer>:

void Stop_Waveform_Buffer(){
 810142a:	b580      	push	{r7, lr}
 810142c:	b082      	sub	sp, #8
 810142e:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 8101430:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101434:	f7ff ff04 	bl	8101240 <ADE9000_SPI_Read_16>
 8101438:	4603      	mov	r3, r0
 810143a:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16 & 0xFFEF);
 810143c:	88fb      	ldrh	r3, [r7, #6]
 810143e:	f023 0310 	bic.w	r3, r3, #16
 8101442:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101444:	88fb      	ldrh	r3, [r7, #6]
 8101446:	4619      	mov	r1, r3
 8101448:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810144c:	f7ff ff66 	bl	810131c <ADE9000_SPI_Write_16>
}
 8101450:	bf00      	nop
 8101452:	3708      	adds	r7, #8
 8101454:	46bd      	mov	sp, r7
 8101456:	bd80      	pop	{r7, pc}

08101458 <ADE9000_SPI_Burst_Read_two_ch>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_SPI_Burst_Read_two_ch(uint16_t Address, uint16_t n, int32_t* i, int32_t* v){
 8101458:	b580      	push	{r7, lr}
 810145a:	b088      	sub	sp, #32
 810145c:	af00      	add	r7, sp, #0
 810145e:	60ba      	str	r2, [r7, #8]
 8101460:	607b      	str	r3, [r7, #4]
 8101462:	4603      	mov	r3, r0
 8101464:	81fb      	strh	r3, [r7, #14]
 8101466:	460b      	mov	r3, r1
 8101468:	81bb      	strh	r3, [r7, #12]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810146a:	89fb      	ldrh	r3, [r7, #14]
 810146c:	011b      	lsls	r3, r3, #4
 810146e:	b29b      	uxth	r3, r3
 8101470:	3308      	adds	r3, #8
 8101472:	b29b      	uxth	r3, r3
 8101474:	82bb      	strh	r3, [r7, #20]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101476:	2200      	movs	r2, #0
 8101478:	f44f 7100 	mov.w	r1, #512	; 0x200
 810147c:	4829      	ldr	r0, [pc, #164]	; (8101524 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 810147e:	f001 ff93 	bl	81033a8 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101482:	f107 0114 	add.w	r1, r7, #20
 8101486:	2364      	movs	r3, #100	; 0x64
 8101488:	2201      	movs	r2, #1
 810148a:	4827      	ldr	r0, [pc, #156]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 810148c:	f003 fe9a 	bl	81051c4 <HAL_SPI_Transmit>
 8101490:	4603      	mov	r3, r0
 8101492:	777b      	strb	r3, [r7, #29]

	for(uint16_t j=0; j<n; j++){
 8101494:	2300      	movs	r3, #0
 8101496:	83fb      	strh	r3, [r7, #30]
 8101498:	e036      	b.n	8101508 <ADE9000_SPI_Burst_Read_two_ch+0xb0>
		//Receive data

		//NB: CONTROLLARE ORDINE (REGISTRI è I,V)
		ret = HAL_SPI_Receive(&hspi1,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 810149a:	f107 0118 	add.w	r1, r7, #24
 810149e:	3102      	adds	r1, #2
 81014a0:	2364      	movs	r3, #100	; 0x64
 81014a2:	2201      	movs	r2, #1
 81014a4:	4820      	ldr	r0, [pc, #128]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014a6:	f004 f87b 	bl	81055a0 <HAL_SPI_Receive>
 81014aa:	4603      	mov	r3, r0
 81014ac:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi1,app.data_8,SIZE_16,TIMEOUT_SPI);
 81014ae:	f107 0118 	add.w	r1, r7, #24
 81014b2:	2364      	movs	r3, #100	; 0x64
 81014b4:	2201      	movs	r2, #1
 81014b6:	481c      	ldr	r0, [pc, #112]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014b8:	f004 f872 	bl	81055a0 <HAL_SPI_Receive>
 81014bc:	4603      	mov	r3, r0
 81014be:	777b      	strb	r3, [r7, #29]
		*(i + j)= app.data_32;
 81014c0:	69b9      	ldr	r1, [r7, #24]
 81014c2:	8bfb      	ldrh	r3, [r7, #30]
 81014c4:	009b      	lsls	r3, r3, #2
 81014c6:	68ba      	ldr	r2, [r7, #8]
 81014c8:	4413      	add	r3, r2
 81014ca:	460a      	mov	r2, r1
 81014cc:	601a      	str	r2, [r3, #0]

		ret = HAL_SPI_Receive(&hspi1,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81014ce:	f107 0118 	add.w	r1, r7, #24
 81014d2:	3102      	adds	r1, #2
 81014d4:	2364      	movs	r3, #100	; 0x64
 81014d6:	2201      	movs	r2, #1
 81014d8:	4813      	ldr	r0, [pc, #76]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014da:	f004 f861 	bl	81055a0 <HAL_SPI_Receive>
 81014de:	4603      	mov	r3, r0
 81014e0:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi1,app.data_8,SIZE_16,TIMEOUT_SPI);
 81014e2:	f107 0118 	add.w	r1, r7, #24
 81014e6:	2364      	movs	r3, #100	; 0x64
 81014e8:	2201      	movs	r2, #1
 81014ea:	480f      	ldr	r0, [pc, #60]	; (8101528 <ADE9000_SPI_Burst_Read_two_ch+0xd0>)
 81014ec:	f004 f858 	bl	81055a0 <HAL_SPI_Receive>
 81014f0:	4603      	mov	r3, r0
 81014f2:	777b      	strb	r3, [r7, #29]
		*(v + j)= app.data_32;
 81014f4:	69b9      	ldr	r1, [r7, #24]
 81014f6:	8bfb      	ldrh	r3, [r7, #30]
 81014f8:	009b      	lsls	r3, r3, #2
 81014fa:	687a      	ldr	r2, [r7, #4]
 81014fc:	4413      	add	r3, r2
 81014fe:	460a      	mov	r2, r1
 8101500:	601a      	str	r2, [r3, #0]
	for(uint16_t j=0; j<n; j++){
 8101502:	8bfb      	ldrh	r3, [r7, #30]
 8101504:	3301      	adds	r3, #1
 8101506:	83fb      	strh	r3, [r7, #30]
 8101508:	8bfa      	ldrh	r2, [r7, #30]
 810150a:	89bb      	ldrh	r3, [r7, #12]
 810150c:	429a      	cmp	r2, r3
 810150e:	d3c4      	bcc.n	810149a <ADE9000_SPI_Burst_Read_two_ch+0x42>
	}

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101510:	2201      	movs	r2, #1
 8101512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101516:	4803      	ldr	r0, [pc, #12]	; (8101524 <ADE9000_SPI_Burst_Read_two_ch+0xcc>)
 8101518:	f001 ff46 	bl	81033a8 <HAL_GPIO_WritePin>
}
 810151c:	bf00      	nop
 810151e:	3720      	adds	r7, #32
 8101520:	46bd      	mov	sp, r7
 8101522:	bd80      	pop	{r7, pc}
 8101524:	58021800 	.word	0x58021800
 8101528:	100003b0 	.word	0x100003b0

0810152c <ADE9000_Conv_ADC>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_Conv_ADC(int32_t* data, uint32_t n){
 810152c:	b580      	push	{r7, lr}
 810152e:	b086      	sub	sp, #24
 8101530:	af00      	add	r7, sp, #0
 8101532:	6078      	str	r0, [r7, #4]
 8101534:	6039      	str	r1, [r7, #0]
	//printf("conv\r\n");
	int32_t app, err = 0;
 8101536:	2300      	movs	r3, #0
 8101538:	613b      	str	r3, [r7, #16]
	for(uint32_t i=0; i<n; i++){
 810153a:	2300      	movs	r3, #0
 810153c:	60fb      	str	r3, [r7, #12]
 810153e:	e02e      	b.n	810159e <ADE9000_Conv_ADC+0x72>
		app = *(data + i);
 8101540:	68fb      	ldr	r3, [r7, #12]
 8101542:	009b      	lsls	r3, r3, #2
 8101544:	687a      	ldr	r2, [r7, #4]
 8101546:	4413      	add	r3, r2
 8101548:	681b      	ldr	r3, [r3, #0]
 810154a:	617b      	str	r3, [r7, #20]
		if((app & 0x0000000F)!=0) {
 810154c:	697b      	ldr	r3, [r7, #20]
 810154e:	f003 030f 	and.w	r3, r3, #15
 8101552:	2b00      	cmp	r3, #0
 8101554:	d002      	beq.n	810155c <ADE9000_Conv_ADC+0x30>
			//printf("Error code\r\n");
			err +=1;
 8101556:	693b      	ldr	r3, [r7, #16]
 8101558:	3301      	adds	r3, #1
 810155a:	613b      	str	r3, [r7, #16]
		}
		if ((app &0xF0000000)==0xF0000000){
 810155c:	697b      	ldr	r3, [r7, #20]
 810155e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8101562:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8101566:	d105      	bne.n	8101574 <ADE9000_Conv_ADC+0x48>
			app = ((app>>4)|0xF0000000);
 8101568:	697b      	ldr	r3, [r7, #20]
 810156a:	111b      	asrs	r3, r3, #4
 810156c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8101570:	617b      	str	r3, [r7, #20]
 8101572:	e00b      	b.n	810158c <ADE9000_Conv_ADC+0x60>
		}else if((app &0xF0000000)==0x00000000) {
 8101574:	697b      	ldr	r3, [r7, #20]
 8101576:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 810157a:	2b00      	cmp	r3, #0
 810157c:	d103      	bne.n	8101586 <ADE9000_Conv_ADC+0x5a>
			app = ((app>>4)|0x00000000);
 810157e:	697b      	ldr	r3, [r7, #20]
 8101580:	111b      	asrs	r3, r3, #4
 8101582:	617b      	str	r3, [r7, #20]
 8101584:	e002      	b.n	810158c <ADE9000_Conv_ADC+0x60>
		}
		else {
			//printf("Error code\r\n");
			err +=1;
 8101586:	693b      	ldr	r3, [r7, #16]
 8101588:	3301      	adds	r3, #1
 810158a:	613b      	str	r3, [r7, #16]
		}
		*(data+i) = app;
 810158c:	68fb      	ldr	r3, [r7, #12]
 810158e:	009b      	lsls	r3, r3, #2
 8101590:	687a      	ldr	r2, [r7, #4]
 8101592:	4413      	add	r3, r2
 8101594:	697a      	ldr	r2, [r7, #20]
 8101596:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<n; i++){
 8101598:	68fb      	ldr	r3, [r7, #12]
 810159a:	3301      	adds	r3, #1
 810159c:	60fb      	str	r3, [r7, #12]
 810159e:	68fa      	ldr	r2, [r7, #12]
 81015a0:	683b      	ldr	r3, [r7, #0]
 81015a2:	429a      	cmp	r2, r3
 81015a4:	d3cc      	bcc.n	8101540 <ADE9000_Conv_ADC+0x14>

	}
	printf("errori: %d\r\n",err);
 81015a6:	6939      	ldr	r1, [r7, #16]
 81015a8:	4803      	ldr	r0, [pc, #12]	; (81015b8 <ADE9000_Conv_ADC+0x8c>)
 81015aa:	f007 f8cd 	bl	8108748 <iprintf>

}
 81015ae:	bf00      	nop
 81015b0:	3718      	adds	r7, #24
 81015b2:	46bd      	mov	sp, r7
 81015b4:	bd80      	pop	{r7, pc}
 81015b6:	bf00      	nop
 81015b8:	0810df8c 	.word	0x0810df8c

081015bc <ADE9000_Calibration>:
uint32_t calibrationDataToEEPROM[CALIBRATION_CONSTANTS_ARRAY_SIZE];


enum CAL_STATE CUR_STATE = CAL_START;   //current state is start

void ADE9000_Calibration(){
 81015bc:	b580      	push	{r7, lr}
 81015be:	af00      	add	r7, sp, #0
	  calibrationEnergyRegisterSetup();
 81015c0:	f000 fcf8 	bl	8101fb4 <calibrationEnergyRegisterSetup>
	  getPGA_gain();
 81015c4:	f000 fd28 	bl	8102018 <getPGA_gain>
	// ade9000.writeByteToEeprom(ADDR_EEPROM_WRITTEN_BYTE,~(EEPROM_WRITTEN)); //clear calibration done status
	  HAL_Delay(1000);
 81015c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 81015cc:	f001 fbf4 	bl	8102db8 <HAL_Delay>
	  ADE9000_calibrate();
 81015d0:	f000 f802 	bl	81015d8 <ADE9000_calibrate>
}
 81015d4:	bf00      	nop
 81015d6:	bd80      	pop	{r7, pc}

081015d8 <ADE9000_calibrate>:


void ADE9000_calibrate()
{
 81015d8:	b590      	push	{r4, r7, lr}
 81015da:	b085      	sub	sp, #20
 81015dc:	af02      	add	r7, sp, #8
  float calPf ;
  char serialReadData;
  static int8_t calChannel = 0; //the channel being calibrated
  static int8_t channelCalLength = 1; //the length

  switch(CUR_STATE)
 81015de:	4bb3      	ldr	r3, [pc, #716]	; (81018ac <ADE9000_calibrate+0x2d4>)
 81015e0:	781b      	ldrb	r3, [r3, #0]
 81015e2:	2b07      	cmp	r3, #7
 81015e4:	f200 81da 	bhi.w	810199c <ADE9000_calibrate+0x3c4>
 81015e8:	a201      	add	r2, pc, #4	; (adr r2, 81015f0 <ADE9000_calibrate+0x18>)
 81015ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81015ee:	bf00      	nop
 81015f0:	08101611 	.word	0x08101611
 81015f4:	0810172d 	.word	0x0810172d
 81015f8:	081017b9 	.word	0x081017b9
 81015fc:	08101875 	.word	0x08101875
 8101600:	08101979 	.word	0x08101979
 8101604:	08101981 	.word	0x08101981
 8101608:	0810198f 	.word	0x0810198f
 810160c:	0810199d 	.word	0x0810199d
  {
      case CAL_START:       //Start
      printf("Starting calibration process. Select one of the following {Start (Y/y) OR Abort(Q/q) OR Restart (R/r)}:\r\n");
 8101610:	48a7      	ldr	r0, [pc, #668]	; (81018b0 <ADE9000_calibrate+0x2d8>)
 8101612:	f007 f91f 	bl	8108854 <puts>
      scanf("%c",&serialReadData);
 8101616:	1cfb      	adds	r3, r7, #3
 8101618:	4619      	mov	r1, r3
 810161a:	48a6      	ldr	r0, [pc, #664]	; (81018b4 <ADE9000_calibrate+0x2dc>)
 810161c:	f007 f932 	bl	8108884 <iscanf>
      if(serialReadData == 'Y' || serialReadData == 'y')
 8101620:	78fb      	ldrb	r3, [r7, #3]
 8101622:	2b59      	cmp	r3, #89	; 0x59
 8101624:	d002      	beq.n	810162c <ADE9000_calibrate+0x54>
 8101626:	78fb      	ldrb	r3, [r7, #3]
 8101628:	2b79      	cmp	r3, #121	; 0x79
 810162a:	d15e      	bne.n	81016ea <ADE9000_calibrate+0x112>
        {
           printf("Enter the Phase being calibrated:{Phase A(A/a) OR Phase B(B/b) OR Phase C(C/c) OR Neutral(N/n) OR All Phases(D/d)}:\r\n");
 810162c:	48a2      	ldr	r0, [pc, #648]	; (81018b8 <ADE9000_calibrate+0x2e0>)
 810162e:	f007 f911 	bl	8108854 <puts>
           scanf("%c",&serialReadData);
 8101632:	1cfb      	adds	r3, r7, #3
 8101634:	4619      	mov	r1, r3
 8101636:	489f      	ldr	r0, [pc, #636]	; (81018b4 <ADE9000_calibrate+0x2dc>)
 8101638:	f007 f924 	bl	8108884 <iscanf>
           if(serialReadData == 'A' || serialReadData == 'a')
 810163c:	78fb      	ldrb	r3, [r7, #3]
 810163e:	2b41      	cmp	r3, #65	; 0x41
 8101640:	d002      	beq.n	8101648 <ADE9000_calibrate+0x70>
 8101642:	78fb      	ldrb	r3, [r7, #3]
 8101644:	2b61      	cmp	r3, #97	; 0x61
 8101646:	d109      	bne.n	810165c <ADE9000_calibrate+0x84>
              {
                printf("Calibrating Phase A:\r\n");
 8101648:	489c      	ldr	r0, [pc, #624]	; (81018bc <ADE9000_calibrate+0x2e4>)
 810164a:	f007 f903 	bl	8108854 <puts>
                calChannel=0;
 810164e:	4b9c      	ldr	r3, [pc, #624]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 8101650:	2200      	movs	r2, #0
 8101652:	701a      	strb	r2, [r3, #0]
                channelCalLength=1;
 8101654:	4b9b      	ldr	r3, [pc, #620]	; (81018c4 <ADE9000_calibrate+0x2ec>)
 8101656:	2201      	movs	r2, #1
 8101658:	701a      	strb	r2, [r3, #0]
 810165a:	e03b      	b.n	81016d4 <ADE9000_calibrate+0xfc>
              }
           else if(serialReadData == 'B' || serialReadData == 'b')
 810165c:	78fb      	ldrb	r3, [r7, #3]
 810165e:	2b42      	cmp	r3, #66	; 0x42
 8101660:	d002      	beq.n	8101668 <ADE9000_calibrate+0x90>
 8101662:	78fb      	ldrb	r3, [r7, #3]
 8101664:	2b62      	cmp	r3, #98	; 0x62
 8101666:	d109      	bne.n	810167c <ADE9000_calibrate+0xa4>
              {
                printf("Calibrating Phase B:\r\n");
 8101668:	4897      	ldr	r0, [pc, #604]	; (81018c8 <ADE9000_calibrate+0x2f0>)
 810166a:	f007 f8f3 	bl	8108854 <puts>
                calChannel=1;
 810166e:	4b94      	ldr	r3, [pc, #592]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 8101670:	2201      	movs	r2, #1
 8101672:	701a      	strb	r2, [r3, #0]
                channelCalLength=1;
 8101674:	4b93      	ldr	r3, [pc, #588]	; (81018c4 <ADE9000_calibrate+0x2ec>)
 8101676:	2201      	movs	r2, #1
 8101678:	701a      	strb	r2, [r3, #0]
 810167a:	e02b      	b.n	81016d4 <ADE9000_calibrate+0xfc>
              }
           else if(serialReadData == 'C' || serialReadData == 'c')
 810167c:	78fb      	ldrb	r3, [r7, #3]
 810167e:	2b43      	cmp	r3, #67	; 0x43
 8101680:	d002      	beq.n	8101688 <ADE9000_calibrate+0xb0>
 8101682:	78fb      	ldrb	r3, [r7, #3]
 8101684:	2b63      	cmp	r3, #99	; 0x63
 8101686:	d109      	bne.n	810169c <ADE9000_calibrate+0xc4>
              {
                printf("Calibrating Phase C:\r\n");
 8101688:	4890      	ldr	r0, [pc, #576]	; (81018cc <ADE9000_calibrate+0x2f4>)
 810168a:	f007 f8e3 	bl	8108854 <puts>
                calChannel=2;
 810168e:	4b8c      	ldr	r3, [pc, #560]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 8101690:	2202      	movs	r2, #2
 8101692:	701a      	strb	r2, [r3, #0]
                channelCalLength=1;
 8101694:	4b8b      	ldr	r3, [pc, #556]	; (81018c4 <ADE9000_calibrate+0x2ec>)
 8101696:	2201      	movs	r2, #1
 8101698:	701a      	strb	r2, [r3, #0]
 810169a:	e01b      	b.n	81016d4 <ADE9000_calibrate+0xfc>
              }
           else if(serialReadData == 'N' || serialReadData == 'n')
 810169c:	78fb      	ldrb	r3, [r7, #3]
 810169e:	2b4e      	cmp	r3, #78	; 0x4e
 81016a0:	d018      	beq.n	81016d4 <ADE9000_calibrate+0xfc>
 81016a2:	78fb      	ldrb	r3, [r7, #3]
 81016a4:	2b6e      	cmp	r3, #110	; 0x6e
 81016a6:	d015      	beq.n	81016d4 <ADE9000_calibrate+0xfc>
              {
               // calChannel=0;
              //  channelCalLength=1;
              }
           else if(serialReadData == 'D' || serialReadData == 'd')
 81016a8:	78fb      	ldrb	r3, [r7, #3]
 81016aa:	2b44      	cmp	r3, #68	; 0x44
 81016ac:	d002      	beq.n	81016b4 <ADE9000_calibrate+0xdc>
 81016ae:	78fb      	ldrb	r3, [r7, #3]
 81016b0:	2b64      	cmp	r3, #100	; 0x64
 81016b2:	d109      	bne.n	81016c8 <ADE9000_calibrate+0xf0>
              {
                printf("Calibrating all phases:\r\n");
 81016b4:	4886      	ldr	r0, [pc, #536]	; (81018d0 <ADE9000_calibrate+0x2f8>)
 81016b6:	f007 f8cd 	bl	8108854 <puts>
                calChannel=0; //Start from channel A
 81016ba:	4b81      	ldr	r3, [pc, #516]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 81016bc:	2200      	movs	r2, #0
 81016be:	701a      	strb	r2, [r3, #0]
                channelCalLength=3;
 81016c0:	4b80      	ldr	r3, [pc, #512]	; (81018c4 <ADE9000_calibrate+0x2ec>)
 81016c2:	2203      	movs	r2, #3
 81016c4:	701a      	strb	r2, [r3, #0]
 81016c6:	e005      	b.n	81016d4 <ADE9000_calibrate+0xfc>
              }
           else
              {
                printf("Wrong input\r\n");
 81016c8:	4882      	ldr	r0, [pc, #520]	; (81018d4 <ADE9000_calibrate+0x2fc>)
 81016ca:	f007 f8c3 	bl	8108854 <puts>
                serialReadData=' ';
 81016ce:	2320      	movs	r3, #32
 81016d0:	70fb      	strb	r3, [r7, #3]
                break;
 81016d2:	e164      	b.n	810199e <ADE9000_calibrate+0x3c6>
              }

           CUR_STATE=CAL_VI_CALIBRATE;
 81016d4:	4b75      	ldr	r3, [pc, #468]	; (81018ac <ADE9000_calibrate+0x2d4>)
 81016d6:	2201      	movs	r2, #1
 81016d8:	701a      	strb	r2, [r3, #0]
           printf("Starting calibration with %d Vrms and %d Arms\r\n",NOMINAL_INPUT_VOLTAGE,NOMINAL_INPUT_CURRENT);
 81016da:	2205      	movs	r2, #5
 81016dc:	216e      	movs	r1, #110	; 0x6e
 81016de:	487e      	ldr	r0, [pc, #504]	; (81018d8 <ADE9000_calibrate+0x300>)
 81016e0:	f007 f832 	bl	8108748 <iprintf>
           serialReadData=' ';
 81016e4:	2320      	movs	r3, #32
 81016e6:	70fb      	strb	r3, [r7, #3]
           break;
 81016e8:	e159      	b.n	810199e <ADE9000_calibrate+0x3c6>
        }
      else
        {
           if(serialReadData == 'Q' || serialReadData == 'q')
 81016ea:	78fb      	ldrb	r3, [r7, #3]
 81016ec:	2b51      	cmp	r3, #81	; 0x51
 81016ee:	d002      	beq.n	81016f6 <ADE9000_calibrate+0x11e>
 81016f0:	78fb      	ldrb	r3, [r7, #3]
 81016f2:	2b71      	cmp	r3, #113	; 0x71
 81016f4:	d108      	bne.n	8101708 <ADE9000_calibrate+0x130>
              {
                CUR_STATE=CAL_STOP;
 81016f6:	4b6d      	ldr	r3, [pc, #436]	; (81018ac <ADE9000_calibrate+0x2d4>)
 81016f8:	2205      	movs	r2, #5
 81016fa:	701a      	strb	r2, [r3, #0]
                printf("Aborting calibration\r\n");
 81016fc:	4877      	ldr	r0, [pc, #476]	; (81018dc <ADE9000_calibrate+0x304>)
 81016fe:	f007 f8a9 	bl	8108854 <puts>
               serialReadData=' ';
 8101702:	2320      	movs	r3, #32
 8101704:	70fb      	strb	r3, [r7, #3]
               break;
 8101706:	e14a      	b.n	810199e <ADE9000_calibrate+0x3c6>
              }
            else if(serialReadData == 'R' || serialReadData == 'r')
 8101708:	78fb      	ldrb	r3, [r7, #3]
 810170a:	2b52      	cmp	r3, #82	; 0x52
 810170c:	d002      	beq.n	8101714 <ADE9000_calibrate+0x13c>
 810170e:	78fb      	ldrb	r3, [r7, #3]
 8101710:	2b72      	cmp	r3, #114	; 0x72
 8101712:	d105      	bne.n	8101720 <ADE9000_calibrate+0x148>
              {
                 CUR_STATE=CAL_RESTART;
 8101714:	4b65      	ldr	r3, [pc, #404]	; (81018ac <ADE9000_calibrate+0x2d4>)
 8101716:	2206      	movs	r2, #6
 8101718:	701a      	strb	r2, [r3, #0]
                  serialReadData=' ';
 810171a:	2320      	movs	r3, #32
 810171c:	70fb      	strb	r3, [r7, #3]
                  break;
 810171e:	e13e      	b.n	810199e <ADE9000_calibrate+0x3c6>
              }
           else
             {
                printf("Wrong input\r\n");
 8101720:	486c      	ldr	r0, [pc, #432]	; (81018d4 <ADE9000_calibrate+0x2fc>)
 8101722:	f007 f897 	bl	8108854 <puts>
                serialReadData=' ';
 8101726:	2320      	movs	r3, #32
 8101728:	70fb      	strb	r3, [r7, #3]
                break;
 810172a:	e138      	b.n	810199e <ADE9000_calibrate+0x3c6>
        }

      break;

      case CAL_VI_CALIBRATE:   //Calibrate
      ADE9000_iGain_calibrate(&xIgain_registers[calChannel],&xIgain_register_address[calChannel], &xIrms_registers[calChannel], &xIrms_registers_address[calChannel], channelCalLength);       //Calculate xIGAIN
 810172c:	4b64      	ldr	r3, [pc, #400]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 810172e:	f993 3000 	ldrsb.w	r3, [r3]
 8101732:	009b      	lsls	r3, r3, #2
 8101734:	4a6a      	ldr	r2, [pc, #424]	; (81018e0 <ADE9000_calibrate+0x308>)
 8101736:	1898      	adds	r0, r3, r2
 8101738:	4b61      	ldr	r3, [pc, #388]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 810173a:	f993 3000 	ldrsb.w	r3, [r3]
 810173e:	009b      	lsls	r3, r3, #2
 8101740:	4a68      	ldr	r2, [pc, #416]	; (81018e4 <ADE9000_calibrate+0x30c>)
 8101742:	1899      	adds	r1, r3, r2
 8101744:	4b5e      	ldr	r3, [pc, #376]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 8101746:	f993 3000 	ldrsb.w	r3, [r3]
 810174a:	009b      	lsls	r3, r3, #2
 810174c:	4a66      	ldr	r2, [pc, #408]	; (81018e8 <ADE9000_calibrate+0x310>)
 810174e:	441a      	add	r2, r3
 8101750:	4b5b      	ldr	r3, [pc, #364]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 8101752:	f993 3000 	ldrsb.w	r3, [r3]
 8101756:	009b      	lsls	r3, r3, #2
 8101758:	4c64      	ldr	r4, [pc, #400]	; (81018ec <ADE9000_calibrate+0x314>)
 810175a:	4423      	add	r3, r4
 810175c:	4c59      	ldr	r4, [pc, #356]	; (81018c4 <ADE9000_calibrate+0x2ec>)
 810175e:	f994 4000 	ldrsb.w	r4, [r4]
 8101762:	9400      	str	r4, [sp, #0]
 8101764:	f000 f934 	bl	81019d0 <ADE9000_iGain_calibrate>
      ADE9000_vGain_calibrate(&xVgain_registers[calChannel], &xVgain_register_address[calChannel], &xVrms_registers[calChannel], &xVrms_registers_address[calChannel], channelCalLength);       //Calculate xVGAIN
 8101768:	4b55      	ldr	r3, [pc, #340]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 810176a:	f993 3000 	ldrsb.w	r3, [r3]
 810176e:	009b      	lsls	r3, r3, #2
 8101770:	4a5f      	ldr	r2, [pc, #380]	; (81018f0 <ADE9000_calibrate+0x318>)
 8101772:	1898      	adds	r0, r3, r2
 8101774:	4b52      	ldr	r3, [pc, #328]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 8101776:	f993 3000 	ldrsb.w	r3, [r3]
 810177a:	009b      	lsls	r3, r3, #2
 810177c:	4a5d      	ldr	r2, [pc, #372]	; (81018f4 <ADE9000_calibrate+0x31c>)
 810177e:	1899      	adds	r1, r3, r2
 8101780:	4b4f      	ldr	r3, [pc, #316]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 8101782:	f993 3000 	ldrsb.w	r3, [r3]
 8101786:	009b      	lsls	r3, r3, #2
 8101788:	4a5b      	ldr	r2, [pc, #364]	; (81018f8 <ADE9000_calibrate+0x320>)
 810178a:	441a      	add	r2, r3
 810178c:	4b4c      	ldr	r3, [pc, #304]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 810178e:	f993 3000 	ldrsb.w	r3, [r3]
 8101792:	009b      	lsls	r3, r3, #2
 8101794:	4c59      	ldr	r4, [pc, #356]	; (81018fc <ADE9000_calibrate+0x324>)
 8101796:	4423      	add	r3, r4
 8101798:	4c4a      	ldr	r4, [pc, #296]	; (81018c4 <ADE9000_calibrate+0x2ec>)
 810179a:	f994 4000 	ldrsb.w	r4, [r4]
 810179e:	9400      	str	r4, [sp, #0]
 81017a0:	f000 f9b4 	bl	8101b0c <ADE9000_vGain_calibrate>
      printf("Current gain calibration completed\r\n");
 81017a4:	4856      	ldr	r0, [pc, #344]	; (8101900 <ADE9000_calibrate+0x328>)
 81017a6:	f007 f855 	bl	8108854 <puts>
      printf("Voltage gain calibration completed\r\n");
 81017aa:	4856      	ldr	r0, [pc, #344]	; (8101904 <ADE9000_calibrate+0x32c>)
 81017ac:	f007 f852 	bl	8108854 <puts>
      CUR_STATE=CAL_PHASE_CALIBRATE;
 81017b0:	4b3e      	ldr	r3, [pc, #248]	; (81018ac <ADE9000_calibrate+0x2d4>)
 81017b2:	2202      	movs	r2, #2
 81017b4:	701a      	strb	r2, [r3, #0]
      break;
 81017b6:	e0f2      	b.n	810199e <ADE9000_calibrate+0x3c6>

      case CAL_PHASE_CALIBRATE:
      printf("Perform Phase calibration: Yes(Y/y) OR No (N/n): \r\n");
 81017b8:	4853      	ldr	r0, [pc, #332]	; (8101908 <ADE9000_calibrate+0x330>)
 81017ba:	f007 f84b 	bl	8108854 <puts>
      scanf("%c",&serialReadData);
 81017be:	1cfb      	adds	r3, r7, #3
 81017c0:	4619      	mov	r1, r3
 81017c2:	483c      	ldr	r0, [pc, #240]	; (81018b4 <ADE9000_calibrate+0x2dc>)
 81017c4:	f007 f85e 	bl	8108884 <iscanf>
      if(serialReadData == 'Y' || serialReadData == 'y')
 81017c8:	78fb      	ldrb	r3, [r7, #3]
 81017ca:	2b59      	cmp	r3, #89	; 0x59
 81017cc:	d002      	beq.n	81017d4 <ADE9000_calibrate+0x1fc>
 81017ce:	78fb      	ldrb	r3, [r7, #3]
 81017d0:	2b79      	cmp	r3, #121	; 0x79
 81017d2:	d13d      	bne.n	8101850 <ADE9000_calibrate+0x278>
        {
            printf("Ensure Power factor is 0.5 lagging such that Active and Reactive energies are positive: Continue: Yes(Y/y) OR Restart (R/r): \r\n");
 81017d4:	484d      	ldr	r0, [pc, #308]	; (810190c <ADE9000_calibrate+0x334>)
 81017d6:	f007 f83d 	bl	8108854 <puts>
            scanf("%c",&serialReadData);
 81017da:	1cfb      	adds	r3, r7, #3
 81017dc:	4619      	mov	r1, r3
 81017de:	4835      	ldr	r0, [pc, #212]	; (81018b4 <ADE9000_calibrate+0x2dc>)
 81017e0:	f007 f850 	bl	8108884 <iscanf>
            if(serialReadData == 'Y' || serialReadData == 'y')
 81017e4:	78fb      	ldrb	r3, [r7, #3]
 81017e6:	2b59      	cmp	r3, #89	; 0x59
 81017e8:	d002      	beq.n	81017f0 <ADE9000_calibrate+0x218>
 81017ea:	78fb      	ldrb	r3, [r7, #3]
 81017ec:	2b79      	cmp	r3, #121	; 0x79
 81017ee:	d121      	bne.n	8101834 <ADE9000_calibrate+0x25c>
              {
            	ADE9000_phase_calibrate(&xPhcal_registers[calChannel],&xPhcal_register_address[calChannel], &accumulatedActiveEnergy_registers[calChannel], &accumulatedReactiveEnergy_registers[calChannel], channelCalLength);     //Calculate xPHCAL
 81017f0:	4b33      	ldr	r3, [pc, #204]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 81017f2:	f993 3000 	ldrsb.w	r3, [r3]
 81017f6:	009b      	lsls	r3, r3, #2
 81017f8:	4a45      	ldr	r2, [pc, #276]	; (8101910 <ADE9000_calibrate+0x338>)
 81017fa:	1898      	adds	r0, r3, r2
 81017fc:	4b30      	ldr	r3, [pc, #192]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 81017fe:	f993 3000 	ldrsb.w	r3, [r3]
 8101802:	009b      	lsls	r3, r3, #2
 8101804:	4a43      	ldr	r2, [pc, #268]	; (8101914 <ADE9000_calibrate+0x33c>)
 8101806:	1899      	adds	r1, r3, r2
 8101808:	4b2d      	ldr	r3, [pc, #180]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 810180a:	f993 3000 	ldrsb.w	r3, [r3]
 810180e:	009b      	lsls	r3, r3, #2
 8101810:	4a41      	ldr	r2, [pc, #260]	; (8101918 <ADE9000_calibrate+0x340>)
 8101812:	441a      	add	r2, r3
 8101814:	4b2a      	ldr	r3, [pc, #168]	; (81018c0 <ADE9000_calibrate+0x2e8>)
 8101816:	f993 3000 	ldrsb.w	r3, [r3]
 810181a:	009b      	lsls	r3, r3, #2
 810181c:	4c3f      	ldr	r4, [pc, #252]	; (810191c <ADE9000_calibrate+0x344>)
 810181e:	4423      	add	r3, r4
 8101820:	4c28      	ldr	r4, [pc, #160]	; (81018c4 <ADE9000_calibrate+0x2ec>)
 8101822:	f994 4000 	ldrsb.w	r4, [r4]
 8101826:	9400      	str	r4, [sp, #0]
 8101828:	f000 f9de 	bl	8101be8 <ADE9000_phase_calibrate>
               printf("Phase calibration completed\r\n");
 810182c:	483c      	ldr	r0, [pc, #240]	; (8101920 <ADE9000_calibrate+0x348>)
 810182e:	f007 f811 	bl	8108854 <puts>
            if(serialReadData == 'Y' || serialReadData == 'y')
 8101832:	e01b      	b.n	810186c <ADE9000_calibrate+0x294>
              }
            else
              {
                if(serialReadData == 'R' || serialReadData == 'r')
 8101834:	78fb      	ldrb	r3, [r7, #3]
 8101836:	2b52      	cmp	r3, #82	; 0x52
 8101838:	d002      	beq.n	8101840 <ADE9000_calibrate+0x268>
 810183a:	78fb      	ldrb	r3, [r7, #3]
 810183c:	2b72      	cmp	r3, #114	; 0x72
 810183e:	d103      	bne.n	8101848 <ADE9000_calibrate+0x270>
                  {
                    CUR_STATE=CAL_RESTART;
 8101840:	4b1a      	ldr	r3, [pc, #104]	; (81018ac <ADE9000_calibrate+0x2d4>)
 8101842:	2206      	movs	r2, #6
 8101844:	701a      	strb	r2, [r3, #0]
                    break;
 8101846:	e0aa      	b.n	810199e <ADE9000_calibrate+0x3c6>
                  }
                  else
                  {
                    printf("Wrong Input\r\n");
 8101848:	4836      	ldr	r0, [pc, #216]	; (8101924 <ADE9000_calibrate+0x34c>)
 810184a:	f007 f803 	bl	8108854 <puts>
                    break;
 810184e:	e0a6      	b.n	810199e <ADE9000_calibrate+0x3c6>
                  }
              }
          }
      else
        {
          if(serialReadData == 'N' || serialReadData == 'n')
 8101850:	78fb      	ldrb	r3, [r7, #3]
 8101852:	2b4e      	cmp	r3, #78	; 0x4e
 8101854:	d002      	beq.n	810185c <ADE9000_calibrate+0x284>
 8101856:	78fb      	ldrb	r3, [r7, #3]
 8101858:	2b6e      	cmp	r3, #110	; 0x6e
 810185a:	d103      	bne.n	8101864 <ADE9000_calibrate+0x28c>
            {
                printf("Skipping phase calibration \r\n");
 810185c:	4832      	ldr	r0, [pc, #200]	; (8101928 <ADE9000_calibrate+0x350>)
 810185e:	f006 fff9 	bl	8108854 <puts>
 8101862:	e003      	b.n	810186c <ADE9000_calibrate+0x294>
            }
          else
            {
              printf("Wrong input\r\n");
 8101864:	481b      	ldr	r0, [pc, #108]	; (81018d4 <ADE9000_calibrate+0x2fc>)
 8101866:	f006 fff5 	bl	8108854 <puts>
              break;
 810186a:	e098      	b.n	810199e <ADE9000_calibrate+0x3c6>
             }
        }
      CUR_STATE = CAL_PGAIN_CALIBRATE;
 810186c:	4b0f      	ldr	r3, [pc, #60]	; (81018ac <ADE9000_calibrate+0x2d4>)
 810186e:	2203      	movs	r2, #3
 8101870:	701a      	strb	r2, [r3, #0]
      break;
 8101872:	e094      	b.n	810199e <ADE9000_calibrate+0x3c6>

      case CAL_PGAIN_CALIBRATE:
      printf("Starting Power Gain calibration\r\n");
 8101874:	482d      	ldr	r0, [pc, #180]	; (810192c <ADE9000_calibrate+0x354>)
 8101876:	f006 ffed 	bl	8108854 <puts>
      printf("Enter the Power Factor of inputs for xPGAIN calculation: 1(1) OR CalibratingAnglePF(0): \r\n");
 810187a:	482d      	ldr	r0, [pc, #180]	; (8101930 <ADE9000_calibrate+0x358>)
 810187c:	f006 ffea 	bl	8108854 <puts>
      scanf("%c",&serialReadData);
 8101880:	1cfb      	adds	r3, r7, #3
 8101882:	4619      	mov	r1, r3
 8101884:	480b      	ldr	r0, [pc, #44]	; (81018b4 <ADE9000_calibrate+0x2dc>)
 8101886:	f006 fffd 	bl	8108884 <iscanf>
      if(serialReadData == '1')
 810188a:	78fb      	ldrb	r3, [r7, #3]
 810188c:	2b31      	cmp	r3, #49	; 0x31
 810188e:	d103      	bne.n	8101898 <ADE9000_calibrate+0x2c0>
        {
           calPf=1;
 8101890:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8101894:	607b      	str	r3, [r7, #4]
 8101896:	e04f      	b.n	8101938 <ADE9000_calibrate+0x360>
        }
      else
        {
          if(serialReadData == '0')
 8101898:	78fb      	ldrb	r3, [r7, #3]
 810189a:	2b30      	cmp	r3, #48	; 0x30
 810189c:	d102      	bne.n	81018a4 <ADE9000_calibrate+0x2cc>
            {
              calPf=CAL_ANGLE_RADIANS(CALIBRATION_ANGLE_DEGREES);
 810189e:	4b25      	ldr	r3, [pc, #148]	; (8101934 <ADE9000_calibrate+0x35c>)
 81018a0:	607b      	str	r3, [r7, #4]
 81018a2:	e049      	b.n	8101938 <ADE9000_calibrate+0x360>
            }
          else
          {
             printf("Wrong input\r\n");
 81018a4:	480b      	ldr	r0, [pc, #44]	; (81018d4 <ADE9000_calibrate+0x2fc>)
 81018a6:	f006 ffd5 	bl	8108854 <puts>
             break;
 81018aa:	e078      	b.n	810199e <ADE9000_calibrate+0x3c6>
 81018ac:	1000025e 	.word	0x1000025e
 81018b0:	0810df9c 	.word	0x0810df9c
 81018b4:	0810e008 	.word	0x0810e008
 81018b8:	0810e00c 	.word	0x0810e00c
 81018bc:	0810e084 	.word	0x0810e084
 81018c0:	1000025f 	.word	0x1000025f
 81018c4:	10000058 	.word	0x10000058
 81018c8:	0810e09c 	.word	0x0810e09c
 81018cc:	0810e0b4 	.word	0x0810e0b4
 81018d0:	0810e0cc 	.word	0x0810e0cc
 81018d4:	0810e0e8 	.word	0x0810e0e8
 81018d8:	0810e0f8 	.word	0x0810e0f8
 81018dc:	0810e128 	.word	0x0810e128
 81018e0:	1000026c 	.word	0x1000026c
 81018e4:	10000008 	.word	0x10000008
 81018e8:	10000294 	.word	0x10000294
 81018ec:	10000018 	.word	0x10000018
 81018f0:	1000027c 	.word	0x1000027c
 81018f4:	10000028 	.word	0x10000028
 81018f8:	100002b0 	.word	0x100002b0
 81018fc:	10000034 	.word	0x10000034
 8101900:	0810e140 	.word	0x0810e140
 8101904:	0810e164 	.word	0x0810e164
 8101908:	0810e188 	.word	0x0810e188
 810190c:	0810e1bc 	.word	0x0810e1bc
 8101910:	10000314 	.word	0x10000314
 8101914:	10000040 	.word	0x10000040
 8101918:	10000308 	.word	0x10000308
 810191c:	10000288 	.word	0x10000288
 8101920:	0810e23c 	.word	0x0810e23c
 8101924:	0810e25c 	.word	0x0810e25c
 8101928:	0810e26c 	.word	0x0810e26c
 810192c:	0810e28c 	.word	0x0810e28c
 8101930:	0810e2b0 	.word	0x0810e2b0
 8101934:	3f860a8a 	.word	0x3f860a8a
          }

        }
      ADE9000_pGain_calibrate(&xPgain_registers[calChannel],&xPgain_register_address[calChannel],&accumulatedActiveEnergy_registers[calChannel],channelCalLength, calPf);
 8101938:	4b1b      	ldr	r3, [pc, #108]	; (81019a8 <ADE9000_calibrate+0x3d0>)
 810193a:	f993 3000 	ldrsb.w	r3, [r3]
 810193e:	009b      	lsls	r3, r3, #2
 8101940:	4a1a      	ldr	r2, [pc, #104]	; (81019ac <ADE9000_calibrate+0x3d4>)
 8101942:	1898      	adds	r0, r3, r2
 8101944:	4b18      	ldr	r3, [pc, #96]	; (81019a8 <ADE9000_calibrate+0x3d0>)
 8101946:	f993 3000 	ldrsb.w	r3, [r3]
 810194a:	009b      	lsls	r3, r3, #2
 810194c:	4a18      	ldr	r2, [pc, #96]	; (81019b0 <ADE9000_calibrate+0x3d8>)
 810194e:	1899      	adds	r1, r3, r2
 8101950:	4b15      	ldr	r3, [pc, #84]	; (81019a8 <ADE9000_calibrate+0x3d0>)
 8101952:	f993 3000 	ldrsb.w	r3, [r3]
 8101956:	009b      	lsls	r3, r3, #2
 8101958:	4a16      	ldr	r2, [pc, #88]	; (81019b4 <ADE9000_calibrate+0x3dc>)
 810195a:	441a      	add	r2, r3
 810195c:	4b16      	ldr	r3, [pc, #88]	; (81019b8 <ADE9000_calibrate+0x3e0>)
 810195e:	f993 3000 	ldrsb.w	r3, [r3]
 8101962:	ed97 0a01 	vldr	s0, [r7, #4]
 8101966:	f000 fa81 	bl	8101e6c <ADE9000_pGain_calibrate>
      printf("Power gain calibration completed \r\n");
 810196a:	4814      	ldr	r0, [pc, #80]	; (81019bc <ADE9000_calibrate+0x3e4>)
 810196c:	f006 ff72 	bl	8108854 <puts>
      //printf("Calibration completed. Storing calibration constants to EEPROM \r\n");
      CUR_STATE = CAL_STORE;
 8101970:	4b13      	ldr	r3, [pc, #76]	; (81019c0 <ADE9000_calibrate+0x3e8>)
 8101972:	2204      	movs	r2, #4
 8101974:	701a      	strb	r2, [r3, #0]
      break;
 8101976:	e012      	b.n	810199e <ADE9000_calibrate+0x3c6>

      case CAL_STORE:     //Store Constants to EEPROM
      //storeCalConstToEEPROM();
      //Serial.println("Calibration constants successfully stored in EEPROM. Exit Application");
      CUR_STATE = CAL_COMPLETE;
 8101978:	4b11      	ldr	r3, [pc, #68]	; (81019c0 <ADE9000_calibrate+0x3e8>)
 810197a:	2207      	movs	r2, #7
 810197c:	701a      	strb	r2, [r3, #0]
      break;
 810197e:	e00e      	b.n	810199e <ADE9000_calibrate+0x3c6>

      case CAL_STOP:    //Stop calibration
      printf("Calibration stopped. Restart Arduino to recalibrate\r\n");
 8101980:	4810      	ldr	r0, [pc, #64]	; (81019c4 <ADE9000_calibrate+0x3ec>)
 8101982:	f006 ff67 	bl	8108854 <puts>
      CUR_STATE = CAL_COMPLETE;
 8101986:	4b0e      	ldr	r3, [pc, #56]	; (81019c0 <ADE9000_calibrate+0x3e8>)
 8101988:	2207      	movs	r2, #7
 810198a:	701a      	strb	r2, [r3, #0]
      break;
 810198c:	e007      	b.n	810199e <ADE9000_calibrate+0x3c6>

      case CAL_RESTART:    //restart
      printf("Restarting calibration\r\n");
 810198e:	480e      	ldr	r0, [pc, #56]	; (81019c8 <ADE9000_calibrate+0x3f0>)
 8101990:	f006 ff60 	bl	8108854 <puts>
      CUR_STATE = CAL_START;
 8101994:	4b0a      	ldr	r3, [pc, #40]	; (81019c0 <ADE9000_calibrate+0x3e8>)
 8101996:	2200      	movs	r2, #0
 8101998:	701a      	strb	r2, [r3, #0]
      break;
 810199a:	e000      	b.n	810199e <ADE9000_calibrate+0x3c6>

      case CAL_COMPLETE:
      break;

      default:
      break;
 810199c:	bf00      	nop

  }

}
 810199e:	bf00      	nop
 81019a0:	370c      	adds	r7, #12
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd90      	pop	{r4, r7, pc}
 81019a6:	bf00      	nop
 81019a8:	1000025f 	.word	0x1000025f
 81019ac:	100002bc 	.word	0x100002bc
 81019b0:	1000004c 	.word	0x1000004c
 81019b4:	10000308 	.word	0x10000308
 81019b8:	10000058 	.word	0x10000058
 81019bc:	0810e30c 	.word	0x0810e30c
 81019c0:	1000025e 	.word	0x1000025e
 81019c4:	0810e330 	.word	0x0810e330
 81019c8:	0810e368 	.word	0x0810e368
 81019cc:	00000000 	.word	0x00000000

081019d0 <ADE9000_iGain_calibrate>:


void ADE9000_iGain_calibrate(int32_t *igainReg, int32_t *igainRegAddress, int32_t *iRmsReg, int32_t *iRmsRegAddress, int arraySize)
{
 81019d0:	b580      	push	{r7, lr}
 81019d2:	b088      	sub	sp, #32
 81019d4:	af00      	add	r7, sp, #0
 81019d6:	60f8      	str	r0, [r7, #12]
 81019d8:	60b9      	str	r1, [r7, #8]
 81019da:	607a      	str	r2, [r7, #4]
 81019dc:	603b      	str	r3, [r7, #0]
  float temp;
  int32_t actualCodes;
  int32_t expectedCodes;
  int i;

  temp=ADE9000_RMS_FULL_SCALE_CODES*CURRENT_TRANSFER_FUNCTION*calCurrentPGA_gain*NOMINAL_INPUT_CURRENT *sqrt(2);
 81019de:	4b44      	ldr	r3, [pc, #272]	; (8101af0 <ADE9000_iGain_calibrate+0x120>)
 81019e0:	f993 3000 	ldrsb.w	r3, [r3]
 81019e4:	4618      	mov	r0, r3
 81019e6:	f7fe fe25 	bl	8100634 <__aeabi_i2d>
 81019ea:	a33d      	add	r3, pc, #244	; (adr r3, 8101ae0 <ADE9000_iGain_calibrate+0x110>)
 81019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019f0:	f7fe fe8a 	bl	8100708 <__aeabi_dmul>
 81019f4:	4602      	mov	r2, r0
 81019f6:	460b      	mov	r3, r1
 81019f8:	4610      	mov	r0, r2
 81019fa:	4619      	mov	r1, r3
 81019fc:	f04f 0200 	mov.w	r2, #0
 8101a00:	4b3c      	ldr	r3, [pc, #240]	; (8101af4 <ADE9000_iGain_calibrate+0x124>)
 8101a02:	f7fe fe81 	bl	8100708 <__aeabi_dmul>
 8101a06:	4602      	mov	r2, r0
 8101a08:	460b      	mov	r3, r1
 8101a0a:	4610      	mov	r0, r2
 8101a0c:	4619      	mov	r1, r3
 8101a0e:	a336      	add	r3, pc, #216	; (adr r3, 8101ae8 <ADE9000_iGain_calibrate+0x118>)
 8101a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a14:	f7fe fe78 	bl	8100708 <__aeabi_dmul>
 8101a18:	4602      	mov	r2, r0
 8101a1a:	460b      	mov	r3, r1
 8101a1c:	4610      	mov	r0, r2
 8101a1e:	4619      	mov	r1, r3
 8101a20:	f7ff f96a 	bl	8100cf8 <__aeabi_d2f>
 8101a24:	4603      	mov	r3, r0
 8101a26:	61bb      	str	r3, [r7, #24]
  expectedCodes= (int32_t) temp;  //Round off
 8101a28:	edd7 7a06 	vldr	s15, [r7, #24]
 8101a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101a30:	ee17 3a90 	vmov	r3, s15
 8101a34:	617b      	str	r3, [r7, #20]
  printf("Expected IRMS Code: %x\r\n",expectedCodes);
 8101a36:	6979      	ldr	r1, [r7, #20]
 8101a38:	482f      	ldr	r0, [pc, #188]	; (8101af8 <ADE9000_iGain_calibrate+0x128>)
 8101a3a:	f006 fe85 	bl	8108748 <iprintf>
  for (i=0; i < arraySize ;i++)
 8101a3e:	2300      	movs	r3, #0
 8101a40:	61fb      	str	r3, [r7, #28]
 8101a42:	e041      	b.n	8101ac8 <ADE9000_iGain_calibrate+0xf8>
    {
      actualCodes = ADE9000_SPI_Read_32(iRmsRegAddress[i]);
 8101a44:	69fb      	ldr	r3, [r7, #28]
 8101a46:	009b      	lsls	r3, r3, #2
 8101a48:	683a      	ldr	r2, [r7, #0]
 8101a4a:	4413      	add	r3, r2
 8101a4c:	681b      	ldr	r3, [r3, #0]
 8101a4e:	b29b      	uxth	r3, r3
 8101a50:	4618      	mov	r0, r3
 8101a52:	f7ff fc27 	bl	81012a4 <ADE9000_SPI_Read_32>
 8101a56:	4603      	mov	r3, r0
 8101a58:	613b      	str	r3, [r7, #16]
      temp= (((float)expectedCodes/(float)actualCodes)-1)* 134217728;  //calculate the gain.
 8101a5a:	697b      	ldr	r3, [r7, #20]
 8101a5c:	ee07 3a90 	vmov	s15, r3
 8101a60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101a64:	693b      	ldr	r3, [r7, #16]
 8101a66:	ee07 3a90 	vmov	s15, r3
 8101a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8101a7a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8101afc <ADE9000_iGain_calibrate+0x12c>
 8101a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101a82:	edc7 7a06 	vstr	s15, [r7, #24]
      igainReg[i] = (int32_t) temp; //Round off
 8101a86:	69fb      	ldr	r3, [r7, #28]
 8101a88:	009b      	lsls	r3, r3, #2
 8101a8a:	68fa      	ldr	r2, [r7, #12]
 8101a8c:	4413      	add	r3, r2
 8101a8e:	edd7 7a06 	vldr	s15, [r7, #24]
 8101a92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101a96:	ee17 2a90 	vmov	r2, s15
 8101a9a:	601a      	str	r2, [r3, #0]
      printf("Channel %d\r\n",i+1);
 8101a9c:	69fb      	ldr	r3, [r7, #28]
 8101a9e:	3301      	adds	r3, #1
 8101aa0:	4619      	mov	r1, r3
 8101aa2:	4817      	ldr	r0, [pc, #92]	; (8101b00 <ADE9000_iGain_calibrate+0x130>)
 8101aa4:	f006 fe50 	bl	8108748 <iprintf>
      printf("Actual IRMS Code: %x ",actualCodes);
 8101aa8:	6939      	ldr	r1, [r7, #16]
 8101aaa:	4816      	ldr	r0, [pc, #88]	; (8101b04 <ADE9000_iGain_calibrate+0x134>)
 8101aac:	f006 fe4c 	bl	8108748 <iprintf>
      printf("Current Gain Register: %x \r\n",igainReg[i]);
 8101ab0:	69fb      	ldr	r3, [r7, #28]
 8101ab2:	009b      	lsls	r3, r3, #2
 8101ab4:	68fa      	ldr	r2, [r7, #12]
 8101ab6:	4413      	add	r3, r2
 8101ab8:	681b      	ldr	r3, [r3, #0]
 8101aba:	4619      	mov	r1, r3
 8101abc:	4812      	ldr	r0, [pc, #72]	; (8101b08 <ADE9000_iGain_calibrate+0x138>)
 8101abe:	f006 fe43 	bl	8108748 <iprintf>
  for (i=0; i < arraySize ;i++)
 8101ac2:	69fb      	ldr	r3, [r7, #28]
 8101ac4:	3301      	adds	r3, #1
 8101ac6:	61fb      	str	r3, [r7, #28]
 8101ac8:	69fa      	ldr	r2, [r7, #28]
 8101aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101acc:	429a      	cmp	r2, r3
 8101ace:	dbb9      	blt.n	8101a44 <ADE9000_iGain_calibrate+0x74>

    }
}
 8101ad0:	bf00      	nop
 8101ad2:	bf00      	nop
 8101ad4:	3720      	adds	r7, #32
 8101ad6:	46bd      	mov	sp, r7
 8101ad8:	bd80      	pop	{r7, pc}
 8101ada:	bf00      	nop
 8101adc:	f3af 8000 	nop.w
 8101ae0:	e703afb8 	.word	0xe703afb8
 8101ae4:	4115df98 	.word	0x4115df98
 8101ae8:	667f3bcd 	.word	0x667f3bcd
 8101aec:	3ff6a09e 	.word	0x3ff6a09e
 8101af0:	1000025c 	.word	0x1000025c
 8101af4:	40140000 	.word	0x40140000
 8101af8:	0810e380 	.word	0x0810e380
 8101afc:	4d000000 	.word	0x4d000000
 8101b00:	0810e39c 	.word	0x0810e39c
 8101b04:	0810e3ac 	.word	0x0810e3ac
 8101b08:	0810e3c4 	.word	0x0810e3c4

08101b0c <ADE9000_vGain_calibrate>:

void ADE9000_vGain_calibrate(int32_t *vgainReg, int32_t *vgainRegAddress, int32_t *vRmsReg, int32_t *vRmsRegAddress, int arraySize)
{
 8101b0c:	b580      	push	{r7, lr}
 8101b0e:	b088      	sub	sp, #32
 8101b10:	af00      	add	r7, sp, #0
 8101b12:	60f8      	str	r0, [r7, #12]
 8101b14:	60b9      	str	r1, [r7, #8]
 8101b16:	607a      	str	r2, [r7, #4]
 8101b18:	603b      	str	r3, [r7, #0]
  float temp;
  int32_t actualCodes;
  int32_t expectedCodes;
  int i;

  temp=ADE9000_RMS_FULL_SCALE_CODES*VOLTAGE_TRANSFER_FUNCTION*calVoltagePGA_gain*NOMINAL_INPUT_VOLTAGE*sqrt(2);
 8101b1a:	f04f 0300 	mov.w	r3, #0
 8101b1e:	61bb      	str	r3, [r7, #24]
  expectedCodes= (int32_t) temp;  //Round off
 8101b20:	edd7 7a06 	vldr	s15, [r7, #24]
 8101b24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101b28:	ee17 3a90 	vmov	r3, s15
 8101b2c:	617b      	str	r3, [r7, #20]
  printf("Expected VRMS Code: %x \r\n",expectedCodes);
 8101b2e:	6979      	ldr	r1, [r7, #20]
 8101b30:	4828      	ldr	r0, [pc, #160]	; (8101bd4 <ADE9000_vGain_calibrate+0xc8>)
 8101b32:	f006 fe09 	bl	8108748 <iprintf>
  for (i=0; i < arraySize ;i++)
 8101b36:	2300      	movs	r3, #0
 8101b38:	61fb      	str	r3, [r7, #28]
 8101b3a:	e041      	b.n	8101bc0 <ADE9000_vGain_calibrate+0xb4>
    {
      actualCodes = ADE9000_SPI_Read_32(vRmsRegAddress[i]);
 8101b3c:	69fb      	ldr	r3, [r7, #28]
 8101b3e:	009b      	lsls	r3, r3, #2
 8101b40:	683a      	ldr	r2, [r7, #0]
 8101b42:	4413      	add	r3, r2
 8101b44:	681b      	ldr	r3, [r3, #0]
 8101b46:	b29b      	uxth	r3, r3
 8101b48:	4618      	mov	r0, r3
 8101b4a:	f7ff fbab 	bl	81012a4 <ADE9000_SPI_Read_32>
 8101b4e:	4603      	mov	r3, r0
 8101b50:	613b      	str	r3, [r7, #16]
      temp= (((float)expectedCodes/(float)actualCodes)-1)* 134217728;  //calculate the gain.
 8101b52:	697b      	ldr	r3, [r7, #20]
 8101b54:	ee07 3a90 	vmov	s15, r3
 8101b58:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101b5c:	693b      	ldr	r3, [r7, #16]
 8101b5e:	ee07 3a90 	vmov	s15, r3
 8101b62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8101b72:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8101bd8 <ADE9000_vGain_calibrate+0xcc>
 8101b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101b7a:	edc7 7a06 	vstr	s15, [r7, #24]
      vgainReg[i] = (int32_t) temp; //Round off
 8101b7e:	69fb      	ldr	r3, [r7, #28]
 8101b80:	009b      	lsls	r3, r3, #2
 8101b82:	68fa      	ldr	r2, [r7, #12]
 8101b84:	4413      	add	r3, r2
 8101b86:	edd7 7a06 	vldr	s15, [r7, #24]
 8101b8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101b8e:	ee17 2a90 	vmov	r2, s15
 8101b92:	601a      	str	r2, [r3, #0]
      printf("Channel %d \r\n",i+1);
 8101b94:	69fb      	ldr	r3, [r7, #28]
 8101b96:	3301      	adds	r3, #1
 8101b98:	4619      	mov	r1, r3
 8101b9a:	4810      	ldr	r0, [pc, #64]	; (8101bdc <ADE9000_vGain_calibrate+0xd0>)
 8101b9c:	f006 fdd4 	bl	8108748 <iprintf>
      printf("Actual VRMS Code: %x \r\n",actualCodes);
 8101ba0:	6939      	ldr	r1, [r7, #16]
 8101ba2:	480f      	ldr	r0, [pc, #60]	; (8101be0 <ADE9000_vGain_calibrate+0xd4>)
 8101ba4:	f006 fdd0 	bl	8108748 <iprintf>
      printf("Voltage Gain Register: %x \r\n",vgainReg[i]);
 8101ba8:	69fb      	ldr	r3, [r7, #28]
 8101baa:	009b      	lsls	r3, r3, #2
 8101bac:	68fa      	ldr	r2, [r7, #12]
 8101bae:	4413      	add	r3, r2
 8101bb0:	681b      	ldr	r3, [r3, #0]
 8101bb2:	4619      	mov	r1, r3
 8101bb4:	480b      	ldr	r0, [pc, #44]	; (8101be4 <ADE9000_vGain_calibrate+0xd8>)
 8101bb6:	f006 fdc7 	bl	8108748 <iprintf>
  for (i=0; i < arraySize ;i++)
 8101bba:	69fb      	ldr	r3, [r7, #28]
 8101bbc:	3301      	adds	r3, #1
 8101bbe:	61fb      	str	r3, [r7, #28]
 8101bc0:	69fa      	ldr	r2, [r7, #28]
 8101bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101bc4:	429a      	cmp	r2, r3
 8101bc6:	dbb9      	blt.n	8101b3c <ADE9000_vGain_calibrate+0x30>
    }
}
 8101bc8:	bf00      	nop
 8101bca:	bf00      	nop
 8101bcc:	3720      	adds	r7, #32
 8101bce:	46bd      	mov	sp, r7
 8101bd0:	bd80      	pop	{r7, pc}
 8101bd2:	bf00      	nop
 8101bd4:	0810e3e4 	.word	0x0810e3e4
 8101bd8:	4d000000 	.word	0x4d000000
 8101bdc:	0810e400 	.word	0x0810e400
 8101be0:	0810e410 	.word	0x0810e410
 8101be4:	0810e428 	.word	0x0810e428

08101be8 <ADE9000_phase_calibrate>:

void ADE9000_phase_calibrate(int32_t *phcalReg,int32_t *phcalRegAddress,int32_t *accActiveEgyReg,int32_t *accReactiveEgyReg, int arraySize)
{
 8101be8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8101bec:	b08e      	sub	sp, #56	; 0x38
 8101bee:	af00      	add	r7, sp, #0
 8101bf0:	60f8      	str	r0, [r7, #12]
 8101bf2:	60b9      	str	r1, [r7, #8]
 8101bf4:	607a      	str	r2, [r7, #4]
 8101bf6:	603b      	str	r3, [r7, #0]
  printf("Computing phase calibration registers...\r\n");
 8101bf8:	4893      	ldr	r0, [pc, #588]	; (8101e48 <ADE9000_phase_calibrate+0x260>)
 8101bfa:	f006 fe2b 	bl	8108854 <puts>
  HAL_Delay((ACCUMULATION_TIME+1)*1000); //delay to ensure the energy registers are accumulated for defined interval
 8101bfe:	f241 7070 	movw	r0, #6000	; 0x1770
 8101c02:	f001 f8d9 	bl	8102db8 <HAL_Delay>
  float omega;
  double temp;
  int32_t actualActiveEnergyCode;
  int32_t actualReactiveEnergyCode;
  int i;
  omega = (float)2 *(float)3.14159*(float) INPUT_FREQUENCY /(float)ADE90xx_FDSP;
 8101c06:	4b91      	ldr	r3, [pc, #580]	; (8101e4c <ADE9000_phase_calibrate+0x264>)
 8101c08:	633b      	str	r3, [r7, #48]	; 0x30


  for (i=0; i < arraySize ;i++)
 8101c0a:	2300      	movs	r3, #0
 8101c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8101c0e:	e101      	b.n	8101e14 <ADE9000_phase_calibrate+0x22c>
    {
        actualActiveEnergyCode = accActiveEgyReg[i];
 8101c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c12:	009b      	lsls	r3, r3, #2
 8101c14:	687a      	ldr	r2, [r7, #4]
 8101c16:	4413      	add	r3, r2
 8101c18:	681b      	ldr	r3, [r3, #0]
 8101c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        actualReactiveEnergyCode = accReactiveEgyReg[i];
 8101c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c1e:	009b      	lsls	r3, r3, #2
 8101c20:	683a      	ldr	r2, [r7, #0]
 8101c22:	4413      	add	r3, r2
 8101c24:	681b      	ldr	r3, [r3, #0]
 8101c26:	62bb      	str	r3, [r7, #40]	; 0x28
        errorAngle = (double)-1 * atan( ((double)actualActiveEnergyCode*(double)sin(CAL_ANGLE_RADIANS(CALIBRATION_ANGLE_DEGREES))-(double)actualReactiveEnergyCode*(double)cos(CAL_ANGLE_RADIANS(CALIBRATION_ANGLE_DEGREES)))/((double)actualActiveEnergyCode*(double)cos(CAL_ANGLE_RADIANS(CALIBRATION_ANGLE_DEGREES))+(double)actualReactiveEnergyCode*(double)sin(CAL_ANGLE_RADIANS(CALIBRATION_ANGLE_DEGREES))));
 8101c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101c2a:	f7fe fd03 	bl	8100634 <__aeabi_i2d>
 8101c2e:	a380      	add	r3, pc, #512	; (adr r3, 8101e30 <ADE9000_phase_calibrate+0x248>)
 8101c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c34:	f7fe fd68 	bl	8100708 <__aeabi_dmul>
 8101c38:	4602      	mov	r2, r0
 8101c3a:	460b      	mov	r3, r1
 8101c3c:	4614      	mov	r4, r2
 8101c3e:	461d      	mov	r5, r3
 8101c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8101c42:	f7fe fcf7 	bl	8100634 <__aeabi_i2d>
 8101c46:	a37c      	add	r3, pc, #496	; (adr r3, 8101e38 <ADE9000_phase_calibrate+0x250>)
 8101c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c4c:	f7fe fd5c 	bl	8100708 <__aeabi_dmul>
 8101c50:	4602      	mov	r2, r0
 8101c52:	460b      	mov	r3, r1
 8101c54:	4620      	mov	r0, r4
 8101c56:	4629      	mov	r1, r5
 8101c58:	f7fe fb9e 	bl	8100398 <__aeabi_dsub>
 8101c5c:	4602      	mov	r2, r0
 8101c5e:	460b      	mov	r3, r1
 8101c60:	4614      	mov	r4, r2
 8101c62:	461d      	mov	r5, r3
 8101c64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101c66:	f7fe fce5 	bl	8100634 <__aeabi_i2d>
 8101c6a:	a373      	add	r3, pc, #460	; (adr r3, 8101e38 <ADE9000_phase_calibrate+0x250>)
 8101c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c70:	f7fe fd4a 	bl	8100708 <__aeabi_dmul>
 8101c74:	4602      	mov	r2, r0
 8101c76:	460b      	mov	r3, r1
 8101c78:	4690      	mov	r8, r2
 8101c7a:	4699      	mov	r9, r3
 8101c7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8101c7e:	f7fe fcd9 	bl	8100634 <__aeabi_i2d>
 8101c82:	a36b      	add	r3, pc, #428	; (adr r3, 8101e30 <ADE9000_phase_calibrate+0x248>)
 8101c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c88:	f7fe fd3e 	bl	8100708 <__aeabi_dmul>
 8101c8c:	4602      	mov	r2, r0
 8101c8e:	460b      	mov	r3, r1
 8101c90:	4640      	mov	r0, r8
 8101c92:	4649      	mov	r1, r9
 8101c94:	f7fe fb82 	bl	810039c <__adddf3>
 8101c98:	4602      	mov	r2, r0
 8101c9a:	460b      	mov	r3, r1
 8101c9c:	4620      	mov	r0, r4
 8101c9e:	4629      	mov	r1, r5
 8101ca0:	f7fe fe5c 	bl	810095c <__aeabi_ddiv>
 8101ca4:	4602      	mov	r2, r0
 8101ca6:	460b      	mov	r3, r1
 8101ca8:	ec43 2b17 	vmov	d7, r2, r3
 8101cac:	eeb0 0a47 	vmov.f32	s0, s14
 8101cb0:	eef0 0a67 	vmov.f32	s1, s15
 8101cb4:	f00a ff30 	bl	810cb18 <atan>
 8101cb8:	ec53 2b10 	vmov	r2, r3, d0
 8101cbc:	4610      	mov	r0, r2
 8101cbe:	4619      	mov	r1, r3
 8101cc0:	f7ff f81a 	bl	8100cf8 <__aeabi_d2f>
 8101cc4:	4603      	mov	r3, r0
 8101cc6:	ee07 3a90 	vmov	s15, r3
 8101cca:	eef1 7a67 	vneg.f32	s15, s15
 8101cce:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        temp = (((double)sin((double)errorAngle-(double)omega)+(double)sin((double)omega))/((double)sin(2*(double)omega-(double)errorAngle)))*134217728;
 8101cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8101cd4:	f7fe fcc0 	bl	8100658 <__aeabi_f2d>
 8101cd8:	4604      	mov	r4, r0
 8101cda:	460d      	mov	r5, r1
 8101cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8101cde:	f7fe fcbb 	bl	8100658 <__aeabi_f2d>
 8101ce2:	4602      	mov	r2, r0
 8101ce4:	460b      	mov	r3, r1
 8101ce6:	4620      	mov	r0, r4
 8101ce8:	4629      	mov	r1, r5
 8101cea:	f7fe fb55 	bl	8100398 <__aeabi_dsub>
 8101cee:	4602      	mov	r2, r0
 8101cf0:	460b      	mov	r3, r1
 8101cf2:	ec43 2b17 	vmov	d7, r2, r3
 8101cf6:	eeb0 0a47 	vmov.f32	s0, s14
 8101cfa:	eef0 0a67 	vmov.f32	s1, s15
 8101cfe:	f00b f8b7 	bl	810ce70 <sin>
 8101d02:	ec55 4b10 	vmov	r4, r5, d0
 8101d06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8101d08:	f7fe fca6 	bl	8100658 <__aeabi_f2d>
 8101d0c:	4602      	mov	r2, r0
 8101d0e:	460b      	mov	r3, r1
 8101d10:	ec43 2b10 	vmov	d0, r2, r3
 8101d14:	f00b f8ac 	bl	810ce70 <sin>
 8101d18:	ec53 2b10 	vmov	r2, r3, d0
 8101d1c:	4620      	mov	r0, r4
 8101d1e:	4629      	mov	r1, r5
 8101d20:	f7fe fb3c 	bl	810039c <__adddf3>
 8101d24:	4602      	mov	r2, r0
 8101d26:	460b      	mov	r3, r1
 8101d28:	4614      	mov	r4, r2
 8101d2a:	461d      	mov	r5, r3
 8101d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8101d2e:	f7fe fc93 	bl	8100658 <__aeabi_f2d>
 8101d32:	4602      	mov	r2, r0
 8101d34:	460b      	mov	r3, r1
 8101d36:	f7fe fb31 	bl	810039c <__adddf3>
 8101d3a:	4602      	mov	r2, r0
 8101d3c:	460b      	mov	r3, r1
 8101d3e:	4690      	mov	r8, r2
 8101d40:	4699      	mov	r9, r3
 8101d42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8101d44:	f7fe fc88 	bl	8100658 <__aeabi_f2d>
 8101d48:	4602      	mov	r2, r0
 8101d4a:	460b      	mov	r3, r1
 8101d4c:	4640      	mov	r0, r8
 8101d4e:	4649      	mov	r1, r9
 8101d50:	f7fe fb22 	bl	8100398 <__aeabi_dsub>
 8101d54:	4602      	mov	r2, r0
 8101d56:	460b      	mov	r3, r1
 8101d58:	ec43 2b17 	vmov	d7, r2, r3
 8101d5c:	eeb0 0a47 	vmov.f32	s0, s14
 8101d60:	eef0 0a67 	vmov.f32	s1, s15
 8101d64:	f00b f884 	bl	810ce70 <sin>
 8101d68:	ec53 2b10 	vmov	r2, r3, d0
 8101d6c:	4620      	mov	r0, r4
 8101d6e:	4629      	mov	r1, r5
 8101d70:	f7fe fdf4 	bl	810095c <__aeabi_ddiv>
 8101d74:	4602      	mov	r2, r0
 8101d76:	460b      	mov	r3, r1
 8101d78:	4610      	mov	r0, r2
 8101d7a:	4619      	mov	r1, r3
 8101d7c:	f04f 0200 	mov.w	r2, #0
 8101d80:	4b33      	ldr	r3, [pc, #204]	; (8101e50 <ADE9000_phase_calibrate+0x268>)
 8101d82:	f7fe fcc1 	bl	8100708 <__aeabi_dmul>
 8101d86:	4602      	mov	r2, r0
 8101d88:	460b      	mov	r3, r1
 8101d8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
        phcalReg[i]= (int32_t)temp;
 8101d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d90:	009b      	lsls	r3, r3, #2
 8101d92:	68fa      	ldr	r2, [r7, #12]
 8101d94:	18d4      	adds	r4, r2, r3
 8101d96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8101d9a:	f7fe ff65 	bl	8100c68 <__aeabi_d2iz>
 8101d9e:	4603      	mov	r3, r0
 8101da0:	6023      	str	r3, [r4, #0]
        errorAngleDeg = (float)errorAngle*180/3.14159;
 8101da2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8101da6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8101e54 <ADE9000_phase_calibrate+0x26c>
 8101daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101dae:	ee17 0a90 	vmov	r0, s15
 8101db2:	f7fe fc51 	bl	8100658 <__aeabi_f2d>
 8101db6:	a322      	add	r3, pc, #136	; (adr r3, 8101e40 <ADE9000_phase_calibrate+0x258>)
 8101db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101dbc:	f7fe fdce 	bl	810095c <__aeabi_ddiv>
 8101dc0:	4602      	mov	r2, r0
 8101dc2:	460b      	mov	r3, r1
 8101dc4:	4610      	mov	r0, r2
 8101dc6:	4619      	mov	r1, r3
 8101dc8:	f7fe ff96 	bl	8100cf8 <__aeabi_d2f>
 8101dcc:	4603      	mov	r3, r0
 8101dce:	617b      	str	r3, [r7, #20]
        printf("Channel %d \r\n",i+1);
 8101dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101dd2:	3301      	adds	r3, #1
 8101dd4:	4619      	mov	r1, r3
 8101dd6:	4820      	ldr	r0, [pc, #128]	; (8101e58 <ADE9000_phase_calibrate+0x270>)
 8101dd8:	f006 fcb6 	bl	8108748 <iprintf>
        printf("Actual Active Energy Register: %x \r\n",actualActiveEnergyCode);
 8101ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8101dde:	481f      	ldr	r0, [pc, #124]	; (8101e5c <ADE9000_phase_calibrate+0x274>)
 8101de0:	f006 fcb2 	bl	8108748 <iprintf>
        printf("Actual Reactive Energy Register: %x \r\n",actualReactiveEnergyCode);
 8101de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8101de6:	481e      	ldr	r0, [pc, #120]	; (8101e60 <ADE9000_phase_calibrate+0x278>)
 8101de8:	f006 fcae 	bl	8108748 <iprintf>
        printf("Phase Correction (degrees): %f \r\n",errorAngleDeg);
 8101dec:	6978      	ldr	r0, [r7, #20]
 8101dee:	f7fe fc33 	bl	8100658 <__aeabi_f2d>
 8101df2:	4602      	mov	r2, r0
 8101df4:	460b      	mov	r3, r1
 8101df6:	481b      	ldr	r0, [pc, #108]	; (8101e64 <ADE9000_phase_calibrate+0x27c>)
 8101df8:	f006 fca6 	bl	8108748 <iprintf>
        printf("Phase Register: %x \r\n ",phcalReg[i]);
 8101dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101dfe:	009b      	lsls	r3, r3, #2
 8101e00:	68fa      	ldr	r2, [r7, #12]
 8101e02:	4413      	add	r3, r2
 8101e04:	681b      	ldr	r3, [r3, #0]
 8101e06:	4619      	mov	r1, r3
 8101e08:	4817      	ldr	r0, [pc, #92]	; (8101e68 <ADE9000_phase_calibrate+0x280>)
 8101e0a:	f006 fc9d 	bl	8108748 <iprintf>
  for (i=0; i < arraySize ;i++)
 8101e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101e10:	3301      	adds	r3, #1
 8101e12:	637b      	str	r3, [r7, #52]	; 0x34
 8101e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101e18:	429a      	cmp	r2, r3
 8101e1a:	f6ff aef9 	blt.w	8101c10 <ADE9000_phase_calibrate+0x28>
    }



}
 8101e1e:	bf00      	nop
 8101e20:	bf00      	nop
 8101e22:	3738      	adds	r7, #56	; 0x38
 8101e24:	46bd      	mov	sp, r7
 8101e26:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8101e2a:	bf00      	nop
 8101e2c:	f3af 8000 	nop.w
 8101e30:	fae7d1a2 	.word	0xfae7d1a2
 8101e34:	3febb679 	.word	0x3febb679
 8101e38:	9b41b380 	.word	0x9b41b380
 8101e3c:	3fe00001 	.word	0x3fe00001
 8101e40:	f01b866e 	.word	0xf01b866e
 8101e44:	400921f9 	.word	0x400921f9
 8101e48:	0810e448 	.word	0x0810e448
 8101e4c:	3d4104f1 	.word	0x3d4104f1
 8101e50:	41a00000 	.word	0x41a00000
 8101e54:	43340000 	.word	0x43340000
 8101e58:	0810e400 	.word	0x0810e400
 8101e5c:	0810e474 	.word	0x0810e474
 8101e60:	0810e49c 	.word	0x0810e49c
 8101e64:	0810e4c4 	.word	0x0810e4c4
 8101e68:	0810e4e8 	.word	0x0810e4e8

08101e6c <ADE9000_pGain_calibrate>:

void ADE9000_pGain_calibrate(int32_t *pgainReg, int32_t *pgainRegAddress, int32_t *accActiveEgyReg, int arraySize, float pGaincalPF)
{
 8101e6c:	b580      	push	{r7, lr}
 8101e6e:	b08a      	sub	sp, #40	; 0x28
 8101e70:	af00      	add	r7, sp, #0
 8101e72:	6178      	str	r0, [r7, #20]
 8101e74:	6139      	str	r1, [r7, #16]
 8101e76:	60fa      	str	r2, [r7, #12]
 8101e78:	60bb      	str	r3, [r7, #8]
 8101e7a:	ed87 0a01 	vstr	s0, [r7, #4]
  printf("Computing power gain calibration registers...\r\n");
 8101e7e:	4841      	ldr	r0, [pc, #260]	; (8101f84 <ADE9000_pGain_calibrate+0x118>)
 8101e80:	f006 fce8 	bl	8108854 <puts>
  HAL_Delay((ACCUMULATION_TIME+1)*1000); //delay to ensure the energy registers are accumulated for defined interval
 8101e84:	f241 7070 	movw	r0, #6000	; 0x1770
 8101e88:	f000 ff96 	bl	8102db8 <HAL_Delay>
  int32_t expectedActiveEnergyCode;
  int32_t actualActiveEnergyCode;
  int i;
  float temp;
  temp = ((float)ADE90xx_FDSP * (float)NOMINAL_INPUT_VOLTAGE * (float)NOMINAL_INPUT_CURRENT * (float)CALIBRATION_ACC_TIME * (float)CURRENT_TRANSFER_FUNCTION *(float)calCurrentPGA_gain* (float)VOLTAGE_TRANSFER_FUNCTION *(float)calVoltagePGA_gain* (float)ADE9000_WATT_FULL_SCALE_CODES * 2 * (float)(pGaincalPF))/(float)(8192);
 8101e8c:	4b3e      	ldr	r3, [pc, #248]	; (8101f88 <ADE9000_pGain_calibrate+0x11c>)
 8101e8e:	f993 3000 	ldrsb.w	r3, [r3]
 8101e92:	ee07 3a90 	vmov	s15, r3
 8101e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101e9a:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8101f8c <ADE9000_pGain_calibrate+0x120>
 8101e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101ea2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8101f90 <ADE9000_pGain_calibrate+0x124>
 8101ea6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8101eaa:	4b3a      	ldr	r3, [pc, #232]	; (8101f94 <ADE9000_pGain_calibrate+0x128>)
 8101eac:	f993 3000 	ldrsb.w	r3, [r3]
 8101eb0:	ee07 3a90 	vmov	s15, r3
 8101eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ebc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8101f98 <ADE9000_pGain_calibrate+0x12c>
 8101ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101ec4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8101ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8101ecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101ed0:	eddf 6a32 	vldr	s13, [pc, #200]	; 8101f9c <ADE9000_pGain_calibrate+0x130>
 8101ed4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101ed8:	edc7 7a08 	vstr	s15, [r7, #32]
  expectedActiveEnergyCode = (int32_t)temp;
 8101edc:	edd7 7a08 	vldr	s15, [r7, #32]
 8101ee0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101ee4:	ee17 3a90 	vmov	r3, s15
 8101ee8:	61fb      	str	r3, [r7, #28]
  printf("Expected Active Energy Code: %x \r\n ",expectedActiveEnergyCode);
 8101eea:	69f9      	ldr	r1, [r7, #28]
 8101eec:	482c      	ldr	r0, [pc, #176]	; (8101fa0 <ADE9000_pGain_calibrate+0x134>)
 8101eee:	f006 fc2b 	bl	8108748 <iprintf>

  for (i=0; i < arraySize ;i++)
 8101ef2:	2300      	movs	r3, #0
 8101ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8101ef6:	e03c      	b.n	8101f72 <ADE9000_pGain_calibrate+0x106>
    {
      actualActiveEnergyCode = accActiveEgyReg[i];
 8101ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101efa:	009b      	lsls	r3, r3, #2
 8101efc:	68fa      	ldr	r2, [r7, #12]
 8101efe:	4413      	add	r3, r2
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	61bb      	str	r3, [r7, #24]

      temp= (((float)expectedActiveEnergyCode/(float)actualActiveEnergyCode)-1)* 134217728;  //calculate the gain.
 8101f04:	69fb      	ldr	r3, [r7, #28]
 8101f06:	ee07 3a90 	vmov	s15, r3
 8101f0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101f0e:	69bb      	ldr	r3, [r7, #24]
 8101f10:	ee07 3a90 	vmov	s15, r3
 8101f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101f1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8101f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8101f24:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8101fa4 <ADE9000_pGain_calibrate+0x138>
 8101f28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101f2c:	edc7 7a08 	vstr	s15, [r7, #32]
      pgainReg[i] = (int32_t) temp; //Round off
 8101f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f32:	009b      	lsls	r3, r3, #2
 8101f34:	697a      	ldr	r2, [r7, #20]
 8101f36:	4413      	add	r3, r2
 8101f38:	edd7 7a08 	vldr	s15, [r7, #32]
 8101f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101f40:	ee17 2a90 	vmov	r2, s15
 8101f44:	601a      	str	r2, [r3, #0]
      printf("Channel %d \r\n",i+1);
 8101f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f48:	3301      	adds	r3, #1
 8101f4a:	4619      	mov	r1, r3
 8101f4c:	4816      	ldr	r0, [pc, #88]	; (8101fa8 <ADE9000_pGain_calibrate+0x13c>)
 8101f4e:	f006 fbfb 	bl	8108748 <iprintf>
      printf("Actual Active Energy Code: %x \r\n",actualActiveEnergyCode);
 8101f52:	69b9      	ldr	r1, [r7, #24]
 8101f54:	4815      	ldr	r0, [pc, #84]	; (8101fac <ADE9000_pGain_calibrate+0x140>)
 8101f56:	f006 fbf7 	bl	8108748 <iprintf>
      printf("Power Gain Register: %x\r\n ",pgainReg[i]);
 8101f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f5c:	009b      	lsls	r3, r3, #2
 8101f5e:	697a      	ldr	r2, [r7, #20]
 8101f60:	4413      	add	r3, r2
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	4619      	mov	r1, r3
 8101f66:	4812      	ldr	r0, [pc, #72]	; (8101fb0 <ADE9000_pGain_calibrate+0x144>)
 8101f68:	f006 fbee 	bl	8108748 <iprintf>
  for (i=0; i < arraySize ;i++)
 8101f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f6e:	3301      	adds	r3, #1
 8101f70:	627b      	str	r3, [r7, #36]	; 0x24
 8101f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101f74:	68bb      	ldr	r3, [r7, #8]
 8101f76:	429a      	cmp	r2, r3
 8101f78:	dbbe      	blt.n	8101ef8 <ADE9000_pGain_calibrate+0x8c>
    }
}
 8101f7a:	bf00      	nop
 8101f7c:	bf00      	nop
 8101f7e:	3728      	adds	r7, #40	; 0x28
 8101f80:	46bd      	mov	sp, r7
 8101f82:	bd80      	pop	{r7, pc}
 8101f84:	0810e500 	.word	0x0810e500
 8101f88:	1000025c 	.word	0x1000025c
 8101f8c:	46e9c000 	.word	0x46e9c000
 8101f90:	00000000 	.word	0x00000000
 8101f94:	1000025d 	.word	0x1000025d
 8101f98:	4b9de219 	.word	0x4b9de219
 8101f9c:	46000000 	.word	0x46000000
 8101fa0:	0810e530 	.word	0x0810e530
 8101fa4:	4d000000 	.word	0x4d000000
 8101fa8:	0810e400 	.word	0x0810e400
 8101fac:	0810e554 	.word	0x0810e554
 8101fb0:	0810e578 	.word	0x0810e578

08101fb4 <calibrationEnergyRegisterSetup>:

void calibrationEnergyRegisterSetup()
{
 8101fb4:	b580      	push	{r7, lr}
 8101fb6:	b082      	sub	sp, #8
 8101fb8:	af00      	add	r7, sp, #0
  uint16_t epcfgRegister;
  ADE9000_SPI_Write_32(ADDR_MASK0,EGY_INTERRUPT_MASK0);   //Enable EGYRDY interrupt
 8101fba:	2101      	movs	r1, #1
 8101fbc:	f240 4005 	movw	r0, #1029	; 0x405
 8101fc0:	f7ff f9e0 	bl	8101384 <ADE9000_SPI_Write_32>
  ADE9000_SPI_Write_16(ADDR_EGY_TIME,EGYACCTIME);   //accumulate EGY_TIME+1 samples (8000 = 1sec)
 8101fc4:	f641 713f 	movw	r1, #7999	; 0x1f3f
 8101fc8:	f240 40b2 	movw	r0, #1202	; 0x4b2
 8101fcc:	f7ff f9a6 	bl	810131c <ADE9000_SPI_Write_16>
  epcfgRegister =  ADE9000_SPI_Read_16(ADDR_EP_CFG);   //Read EP_CFG register
 8101fd0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8101fd4:	f7ff f934 	bl	8101240 <ADE9000_SPI_Read_16>
 8101fd8:	4603      	mov	r3, r0
 8101fda:	80fb      	strh	r3, [r7, #6]
  epcfgRegister |= CALIBRATION_EGY_CFG;                //Write the settings and enable accumulation
 8101fdc:	88fb      	ldrh	r3, [r7, #6]
 8101fde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8101fe2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8101fe6:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8101fea:	f043 0311 	orr.w	r3, r3, #17
 8101fee:	80fb      	strh	r3, [r7, #6]
  ADE9000_SPI_Write_16(ADDR_EP_CFG,epcfgRegister);
 8101ff0:	88fb      	ldrh	r3, [r7, #6]
 8101ff2:	4619      	mov	r1, r3
 8101ff4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8101ff8:	f7ff f990 	bl	810131c <ADE9000_SPI_Write_16>
  HAL_Delay(2000);
 8101ffc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8102000:	f000 feda 	bl	8102db8 <HAL_Delay>
  ADE9000_SPI_Write_32(ADDR_STATUS0,0xFFFFFFFF);
 8102004:	f04f 31ff 	mov.w	r1, #4294967295
 8102008:	f240 4002 	movw	r0, #1026	; 0x402
 810200c:	f7ff f9ba 	bl	8101384 <ADE9000_SPI_Write_32>
  //attachInterrupt(digitalPinToInterrupt(IRQ0_INTERRUPT_PIN),updateEnergyRegisterFromInterrupt,INT_MODE);
}
 8102010:	bf00      	nop
 8102012:	3708      	adds	r7, #8
 8102014:	46bd      	mov	sp, r7
 8102016:	bd80      	pop	{r7, pc}

08102018 <getPGA_gain>:


void getPGA_gain()
{
 8102018:	b580      	push	{r7, lr}
 810201a:	b082      	sub	sp, #8
 810201c:	af00      	add	r7, sp, #0
  int16_t pgaGainRegister;
  int16_t temp;
  pgaGainRegister = ADE9000_SPI_Read_16(ADDR_PGA_GAIN);  //Ensure PGA_GAIN is set correctly in SetupADE9000 function.
 810201e:	f240 40b9 	movw	r0, #1209	; 0x4b9
 8102022:	f7ff f90d 	bl	8101240 <ADE9000_SPI_Read_16>
 8102026:	4603      	mov	r3, r0
 8102028:	80fb      	strh	r3, [r7, #6]
  printf("PGA Gain Register is: %x \r\n",pgaGainRegister);
 810202a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810202e:	4619      	mov	r1, r3
 8102030:	481b      	ldr	r0, [pc, #108]	; (81020a0 <getPGA_gain+0x88>)
 8102032:	f006 fb89 	bl	8108748 <iprintf>
  temp =    pgaGainRegister & (0x0003);  //extract gain of current channel
 8102036:	88fb      	ldrh	r3, [r7, #6]
 8102038:	f003 0303 	and.w	r3, r3, #3
 810203c:	80bb      	strh	r3, [r7, #4]
  if (temp == 0)  // 00-->Gain 1: 01-->Gain 2: 10/11-->Gain 4
 810203e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8102042:	2b00      	cmp	r3, #0
 8102044:	d103      	bne.n	810204e <getPGA_gain+0x36>
      {
        calCurrentPGA_gain =1;
 8102046:	4b17      	ldr	r3, [pc, #92]	; (81020a4 <getPGA_gain+0x8c>)
 8102048:	2201      	movs	r2, #1
 810204a:	701a      	strb	r2, [r3, #0]
 810204c:	e00a      	b.n	8102064 <getPGA_gain+0x4c>
      }
  else
      {
        if(temp==1)
 810204e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8102052:	2b01      	cmp	r3, #1
 8102054:	d103      	bne.n	810205e <getPGA_gain+0x46>
        {
         calCurrentPGA_gain =2;
 8102056:	4b13      	ldr	r3, [pc, #76]	; (81020a4 <getPGA_gain+0x8c>)
 8102058:	2202      	movs	r2, #2
 810205a:	701a      	strb	r2, [r3, #0]
 810205c:	e002      	b.n	8102064 <getPGA_gain+0x4c>
        }
        else
        {
         calCurrentPGA_gain =4;
 810205e:	4b11      	ldr	r3, [pc, #68]	; (81020a4 <getPGA_gain+0x8c>)
 8102060:	2204      	movs	r2, #4
 8102062:	701a      	strb	r2, [r3, #0]
        }
      }
  temp =    (pgaGainRegister>>8) & (0x0003); //extract gain of voltage channel
 8102064:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102068:	121b      	asrs	r3, r3, #8
 810206a:	b21b      	sxth	r3, r3
 810206c:	f003 0303 	and.w	r3, r3, #3
 8102070:	80bb      	strh	r3, [r7, #4]
  if (temp == 0)
 8102072:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8102076:	2b00      	cmp	r3, #0
 8102078:	d103      	bne.n	8102082 <getPGA_gain+0x6a>
      {
        calVoltagePGA_gain =1;
 810207a:	4b0b      	ldr	r3, [pc, #44]	; (81020a8 <getPGA_gain+0x90>)
 810207c:	2201      	movs	r2, #1
 810207e:	701a      	strb	r2, [r3, #0]
        else
        {
         calVoltagePGA_gain =4;
        }
      }
}
 8102080:	e00a      	b.n	8102098 <getPGA_gain+0x80>
        if(temp==1)
 8102082:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8102086:	2b01      	cmp	r3, #1
 8102088:	d103      	bne.n	8102092 <getPGA_gain+0x7a>
         calVoltagePGA_gain =2;
 810208a:	4b07      	ldr	r3, [pc, #28]	; (81020a8 <getPGA_gain+0x90>)
 810208c:	2202      	movs	r2, #2
 810208e:	701a      	strb	r2, [r3, #0]
}
 8102090:	e002      	b.n	8102098 <getPGA_gain+0x80>
         calVoltagePGA_gain =4;
 8102092:	4b05      	ldr	r3, [pc, #20]	; (81020a8 <getPGA_gain+0x90>)
 8102094:	2204      	movs	r2, #4
 8102096:	701a      	strb	r2, [r3, #0]
}
 8102098:	bf00      	nop
 810209a:	3708      	adds	r7, #8
 810209c:	46bd      	mov	sp, r7
 810209e:	bd80      	pop	{r7, pc}
 81020a0:	0810e594 	.word	0x0810e594
 81020a4:	1000025c 	.word	0x1000025c
 81020a8:	1000025d 	.word	0x1000025d

081020ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81020ac:	b580      	push	{r7, lr}
 81020ae:	f5ad 3d7a 	sub.w	sp, sp, #256000	; 0x3e800
 81020b2:	b08e      	sub	sp, #56	; 0x38
 81020b4:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81020b6:	4bba      	ldr	r3, [pc, #744]	; (81023a0 <main+0x2f4>)
 81020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020bc:	4ab8      	ldr	r2, [pc, #736]	; (81023a0 <main+0x2f4>)
 81020be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81020c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81020c6:	4bb6      	ldr	r3, [pc, #728]	; (81023a0 <main+0x2f4>)
 81020c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81020cc:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 81020d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 81020d4:	3b38      	subs	r3, #56	; 0x38
 81020d6:	601a      	str	r2, [r3, #0]
 81020d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 81020dc:	3b38      	subs	r3, #56	; 0x38
 81020de:	681b      	ldr	r3, [r3, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81020e0:	2001      	movs	r0, #1
 81020e2:	f001 f995 	bl	8103410 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81020e6:	f001 fa1f 	bl	8103528 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81020ea:	2201      	movs	r2, #1
 81020ec:	2102      	movs	r1, #2
 81020ee:	2000      	movs	r0, #0
 81020f0:	f001 f9a0 	bl	8103434 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81020f4:	4bab      	ldr	r3, [pc, #684]	; (81023a4 <main+0x2f8>)
 81020f6:	681b      	ldr	r3, [r3, #0]
 81020f8:	091b      	lsrs	r3, r3, #4
 81020fa:	f003 030f 	and.w	r3, r3, #15
 81020fe:	2b07      	cmp	r3, #7
 8102100:	d108      	bne.n	8102114 <main+0x68>
 8102102:	4ba9      	ldr	r3, [pc, #676]	; (81023a8 <main+0x2fc>)
 8102104:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8102108:	4aa7      	ldr	r2, [pc, #668]	; (81023a8 <main+0x2fc>)
 810210a:	f043 0301 	orr.w	r3, r3, #1
 810210e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8102112:	e007      	b.n	8102124 <main+0x78>
 8102114:	4ba4      	ldr	r3, [pc, #656]	; (81023a8 <main+0x2fc>)
 8102116:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810211a:	4aa3      	ldr	r2, [pc, #652]	; (81023a8 <main+0x2fc>)
 810211c:	f043 0301 	orr.w	r3, r3, #1
 8102120:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102124:	f000 fd94 	bl	8102c50 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8102128:	f000 fa74 	bl	8102614 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 810212c:	f000 fa26 	bl	810257c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8102130:	f000 f9ce 	bl	81024d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ADE9000_Power();
 8102134:	f7ff f864 	bl	8101200 <ADE9000_Power>

  //test_read_write_reg();
  setvbuf( stdin, NULL, _IONBF, 0 );
 8102138:	4b9c      	ldr	r3, [pc, #624]	; (81023ac <main+0x300>)
 810213a:	681b      	ldr	r3, [r3, #0]
 810213c:	6858      	ldr	r0, [r3, #4]
 810213e:	2300      	movs	r3, #0
 8102140:	2202      	movs	r2, #2
 8102142:	2100      	movs	r1, #0
 8102144:	f006 fbb6 	bl	81088b4 <setvbuf>
  int a,c;
  printf("\r\ninsert stringa\r\n");
 8102148:	4899      	ldr	r0, [pc, #612]	; (81023b0 <main+0x304>)
 810214a:	f006 fb83 	bl	8108854 <puts>
  scanf("%d",&a);
 810214e:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102152:	f103 031c 	add.w	r3, r3, #28
 8102156:	4619      	mov	r1, r3
 8102158:	4896      	ldr	r0, [pc, #600]	; (81023b4 <main+0x308>)
 810215a:	f006 fb93 	bl	8108884 <iscanf>
  char str[20];
  //fgets(str, 20, stdin);
  //printf(str);

  printf("letto %d\r\n",a);
 810215e:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102162:	f103 031c 	add.w	r3, r3, #28
 8102166:	681b      	ldr	r3, [r3, #0]
 8102168:	4619      	mov	r1, r3
 810216a:	4893      	ldr	r0, [pc, #588]	; (81023b8 <main+0x30c>)
 810216c:	f006 faec 	bl	8108748 <iprintf>
  fflush(stdin);
 8102170:	4b8e      	ldr	r3, [pc, #568]	; (81023ac <main+0x300>)
 8102172:	681b      	ldr	r3, [r3, #0]
 8102174:	685b      	ldr	r3, [r3, #4]
 8102176:	4618      	mov	r0, r3
 8102178:	f005 fa6e 	bl	8107658 <fflush>
  //while ( (c = getchar()) != '\r') { }
  printf("insert char\r\n");
 810217c:	488f      	ldr	r0, [pc, #572]	; (81023bc <main+0x310>)
 810217e:	f006 fb69 	bl	8108854 <puts>
  char d;
  scanf("%c",&d);
 8102182:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102186:	f103 0307 	add.w	r3, r3, #7
 810218a:	4619      	mov	r1, r3
 810218c:	488c      	ldr	r0, [pc, #560]	; (81023c0 <main+0x314>)
 810218e:	f006 fb79 	bl	8108884 <iscanf>
  printf("letto %c\r\n",d);
 8102192:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102196:	f103 0307 	add.w	r3, r3, #7
 810219a:	781b      	ldrb	r3, [r3, #0]
 810219c:	4619      	mov	r1, r3
 810219e:	4889      	ldr	r0, [pc, #548]	; (81023c4 <main+0x318>)
 81021a0:	f006 fad2 	bl	8108748 <iprintf>
  fflush(stdin);
 81021a4:	4b81      	ldr	r3, [pc, #516]	; (81023ac <main+0x300>)
 81021a6:	681b      	ldr	r3, [r3, #0]
 81021a8:	685b      	ldr	r3, [r3, #4]
 81021aa:	4618      	mov	r0, r3
 81021ac:	f005 fa54 	bl	8107658 <fflush>
  //while ( (c = getchar()) != '\r') { }




  ADE9000_Setup();
 81021b0:	f7fe ffc0 	bl	8101134 <ADE9000_Setup>

  printf("%d,%d,%d\r\n",N_BUFFER, N_SAMPLE,BURST_READ_N);
 81021b4:	2380      	movs	r3, #128	; 0x80
 81021b6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 81021ba:	217d      	movs	r1, #125	; 0x7d
 81021bc:	4882      	ldr	r0, [pc, #520]	; (81023c8 <main+0x31c>)
 81021be:	f006 fac3 	bl	8108748 <iprintf>

  ADE9000_Calibration();
 81021c2:	f7ff f9fb 	bl	81015bc <ADE9000_Calibration>

  int32_t va[N_SAMPLE], ia[N_SAMPLE];
  uint16_t index = 0;
 81021c6:	2300      	movs	r3, #0
 81021c8:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81021cc:	f102 0236 	add.w	r2, r2, #54	; 0x36
 81021d0:	8013      	strh	r3, [r2, #0]
  uint32_t start;
  uint32_t value_reg_32 = 0x00020000;
 81021d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81021d6:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81021da:	f102 0228 	add.w	r2, r2, #40	; 0x28
 81021de:	6013      	str	r3, [r2, #0]
  uint16_t value_reg_16;

  Start_Waveform_Buffer();
 81021e0:	f7ff f90c 	bl	81013fc <Start_Waveform_Buffer>

	HAL_Delay(24);
	Stop_Waveform_Buffer();
*/

  while(index < N_SAMPLE){
 81021e4:	e0c3      	b.n	810236e <main+0x2c2>
 		  while(flag_read == 0){}
 81021e6:	bf00      	nop
 81021e8:	4b78      	ldr	r3, [pc, #480]	; (81023cc <main+0x320>)
 81021ea:	f993 3000 	ldrsb.w	r3, [r3]
 81021ee:	2b00      	cmp	r3, #0
 81021f0:	d0fa      	beq.n	81021e8 <main+0x13c>
 		 //uint32_t tickstart = HAL_GetTick();

		  //printf("nint: %d\t", n_int);
 		  flag_read = 0;
 81021f2:	4b76      	ldr	r3, [pc, #472]	; (81023cc <main+0x320>)
 81021f4:	2200      	movs	r2, #0
 81021f6:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 81021f8:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81021fc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8102200:	6819      	ldr	r1, [r3, #0]
 8102202:	f240 4002 	movw	r0, #1026	; 0x402
 8102206:	f7ff f8bd 	bl	8101384 <ADE9000_SPI_Write_32>

		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 810220a:	f240 40a3 	movw	r0, #1187	; 0x4a3
 810220e:	f7ff f817 	bl	8101240 <ADE9000_SPI_Read_16>
 8102212:	4603      	mov	r3, r0
 8102214:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8102218:	f102 0226 	add.w	r2, r2, #38	; 0x26
 810221c:	8013      	strh	r3, [r2, #0]
		  value_reg_16 = (value_reg_16>>12)&0x0F;
 810221e:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102222:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8102226:	881b      	ldrh	r3, [r3, #0]
 8102228:	0b1b      	lsrs	r3, r3, #12
 810222a:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 810222e:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8102232:	8013      	strh	r3, [r2, #0]
		  printf("pg: %i\r\n",value_reg_16);
 8102234:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102238:	f103 0326 	add.w	r3, r3, #38	; 0x26
 810223c:	881b      	ldrh	r3, [r3, #0]
 810223e:	4619      	mov	r1, r3
 8102240:	4863      	ldr	r0, [pc, #396]	; (81023d0 <main+0x324>)
 8102242:	f006 fa81 	bl	8108748 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR;
 8102246:	f44f 6300 	mov.w	r3, #2048	; 0x800
 810224a:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 810224e:	f102 0220 	add.w	r2, r2, #32
 8102252:	6013      	str	r3, [r2, #0]



 		 //ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,ia + index);
 		 ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 8102254:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102258:	f103 0320 	add.w	r3, r3, #32
 810225c:	681b      	ldr	r3, [r3, #0]
 810225e:	b298      	uxth	r0, r3
 8102260:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102264:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8102268:	881b      	ldrh	r3, [r3, #0]
 810226a:	009a      	lsls	r2, r3, #2
 810226c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8102270:	3b34      	subs	r3, #52	; 0x34
 8102272:	1899      	adds	r1, r3, r2
 8102274:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102278:	f103 0336 	add.w	r3, r3, #54	; 0x36
 810227c:	881b      	ldrh	r3, [r3, #0]
 810227e:	009a      	lsls	r2, r3, #2
 8102280:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8102284:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8102288:	3b34      	subs	r3, #52	; 0x34
 810228a:	4413      	add	r3, r2
 810228c:	460a      	mov	r2, r1
 810228e:	2180      	movs	r1, #128	; 0x80
 8102290:	f7ff f8e2 	bl	8101458 <ADE9000_SPI_Burst_Read_two_ch>

 		  //printf("1 index %d\r\n",index);
 		  index += BURST_READ_N;
 8102294:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102298:	f103 0336 	add.w	r3, r3, #54	; 0x36
 810229c:	881b      	ldrh	r3, [r3, #0]
 810229e:	3380      	adds	r3, #128	; 0x80
 81022a0:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81022a4:	f102 0236 	add.w	r2, r2, #54	; 0x36
 81022a8:	8013      	strh	r3, [r2, #0]
 		/*
 		 uint32_t tickend = HAL_GetTick();
 		 uint32_t ntick = tickend-tickstart;
 		 printf("TIME: %d MS\r\n",ntick);
 		*/
 		  while(flag_read == 0){}
 81022aa:	bf00      	nop
 81022ac:	4b47      	ldr	r3, [pc, #284]	; (81023cc <main+0x320>)
 81022ae:	f993 3000 	ldrsb.w	r3, [r3]
 81022b2:	2b00      	cmp	r3, #0
 81022b4:	d0fa      	beq.n	81022ac <main+0x200>

  		 //tickstart = HAL_GetTick();
 		  //printf("nint: %d\t", n_int);
 		  flag_read = 0;
 81022b6:	4b45      	ldr	r3, [pc, #276]	; (81023cc <main+0x320>)
 81022b8:	2200      	movs	r2, #0
 81022ba:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 81022bc:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81022c0:	f103 0328 	add.w	r3, r3, #40	; 0x28
 81022c4:	6819      	ldr	r1, [r3, #0]
 81022c6:	f240 4002 	movw	r0, #1026	; 0x402
 81022ca:	f7ff f85b 	bl	8101384 <ADE9000_SPI_Write_32>
 		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 81022ce:	f240 40a3 	movw	r0, #1187	; 0x4a3
 81022d2:	f7fe ffb5 	bl	8101240 <ADE9000_SPI_Read_16>
 81022d6:	4603      	mov	r3, r0
 81022d8:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81022dc:	f102 0226 	add.w	r2, r2, #38	; 0x26
 81022e0:	8013      	strh	r3, [r2, #0]
 		  value_reg_16 = (value_reg_16>>12)&0x0F;
 81022e2:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81022e6:	f103 0326 	add.w	r3, r3, #38	; 0x26
 81022ea:	881b      	ldrh	r3, [r3, #0]
 81022ec:	0b1b      	lsrs	r3, r3, #12
 81022ee:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81022f2:	f102 0226 	add.w	r2, r2, #38	; 0x26
 81022f6:	8013      	strh	r3, [r2, #0]
 		  printf("pg: %i\r\n",value_reg_16);
 81022f8:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81022fc:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8102300:	881b      	ldrh	r3, [r3, #0]
 8102302:	4619      	mov	r1, r3
 8102304:	4832      	ldr	r0, [pc, #200]	; (81023d0 <main+0x324>)
 8102306:	f006 fa1f 	bl	8108748 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR + BURST_READ_N*8;
 810230a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810230e:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8102312:	f102 0220 	add.w	r2, r2, #32
 8102316:	6013      	str	r3, [r2, #0]


 		 //ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,ia + index);
 		 ADE9000_SPI_Burst_Read_two_ch(start, BURST_READ_N,ia + index,va +index);
 8102318:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 810231c:	f103 0320 	add.w	r3, r3, #32
 8102320:	681b      	ldr	r3, [r3, #0]
 8102322:	b298      	uxth	r0, r3
 8102324:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102328:	f103 0336 	add.w	r3, r3, #54	; 0x36
 810232c:	881b      	ldrh	r3, [r3, #0]
 810232e:	009a      	lsls	r2, r3, #2
 8102330:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8102334:	3b34      	subs	r3, #52	; 0x34
 8102336:	1899      	adds	r1, r3, r2
 8102338:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 810233c:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8102340:	881b      	ldrh	r3, [r3, #0]
 8102342:	009a      	lsls	r2, r3, #2
 8102344:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8102348:	f103 0338 	add.w	r3, r3, #56	; 0x38
 810234c:	3b34      	subs	r3, #52	; 0x34
 810234e:	4413      	add	r3, r2
 8102350:	460a      	mov	r2, r1
 8102352:	2180      	movs	r1, #128	; 0x80
 8102354:	f7ff f880 	bl	8101458 <ADE9000_SPI_Burst_Read_two_ch>

 		 //printf("2 index %d\r\n",index);
 		 index += BURST_READ_N;
 8102358:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 810235c:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8102360:	881b      	ldrh	r3, [r3, #0]
 8102362:	3380      	adds	r3, #128	; 0x80
 8102364:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8102368:	f102 0236 	add.w	r2, r2, #54	; 0x36
 810236c:	8013      	strh	r3, [r2, #0]
  while(index < N_SAMPLE){
 810236e:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102372:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8102376:	881b      	ldrh	r3, [r3, #0]
 8102378:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 810237c:	f4ff af33 	bcc.w	81021e6 <main+0x13a>
   		 ntick = tickend-tickstart;
   		 printf("TIME: %d MS\r\n",ntick);
*/

 }
  Stop_Waveform_Buffer();
 8102380:	f7ff f853 	bl	810142a <Stop_Waveform_Buffer>
  //ADE9000_Conv_ADC(va,N_SAMPLE);
  //ADE9000_Conv_ADC(ia,N_SAMPLE);

  HAL_Delay(5000);
 8102384:	f241 3088 	movw	r0, #5000	; 0x1388
 8102388:	f000 fd16 	bl	8102db8 <HAL_Delay>
  printf("VA,IA\r\n");
 810238c:	4811      	ldr	r0, [pc, #68]	; (81023d4 <main+0x328>)
 810238e:	f006 fa61 	bl	8108854 <puts>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8102392:	2300      	movs	r3, #0
 8102394:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8102398:	f102 0230 	add.w	r2, r2, #48	; 0x30
 810239c:	6013      	str	r3, [r2, #0]
 810239e:	e040      	b.n	8102422 <main+0x376>
 81023a0:	58024400 	.word	0x58024400
 81023a4:	e000ed00 	.word	0xe000ed00
 81023a8:	58026400 	.word	0x58026400
 81023ac:	10000064 	.word	0x10000064
 81023b0:	0810e5b0 	.word	0x0810e5b0
 81023b4:	0810e5c4 	.word	0x0810e5c4
 81023b8:	0810e5c8 	.word	0x0810e5c8
 81023bc:	0810e5d4 	.word	0x0810e5d4
 81023c0:	0810e5e4 	.word	0x0810e5e4
 81023c4:	0810e5e8 	.word	0x0810e5e8
 81023c8:	0810e5f4 	.word	0x0810e5f4
 81023cc:	10000254 	.word	0x10000254
 81023d0:	0810e600 	.word	0x0810e600
 81023d4:	0810e60c 	.word	0x0810e60c
	  printf("%d,%d\r\n",va[i],ia[i]);
 81023d8:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 81023dc:	f103 0338 	add.w	r3, r3, #56	; 0x38
 81023e0:	3b34      	subs	r3, #52	; 0x34
 81023e2:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81023e6:	f102 0230 	add.w	r2, r2, #48	; 0x30
 81023ea:	6812      	ldr	r2, [r2, #0]
 81023ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81023f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 81023f4:	3b34      	subs	r3, #52	; 0x34
 81023f6:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81023fa:	f102 0230 	add.w	r2, r2, #48	; 0x30
 81023fe:	6812      	ldr	r2, [r2, #0]
 8102400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102404:	461a      	mov	r2, r3
 8102406:	4830      	ldr	r0, [pc, #192]	; (81024c8 <main+0x41c>)
 8102408:	f006 f99e 	bl	8108748 <iprintf>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 810240c:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102410:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8102414:	681b      	ldr	r3, [r3, #0]
 8102416:	3301      	adds	r3, #1
 8102418:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 810241c:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8102420:	6013      	str	r3, [r2, #0]
 8102422:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 8102426:	f103 0330 	add.w	r3, r3, #48	; 0x30
 810242a:	681b      	ldr	r3, [r3, #0]
 810242c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8102430:	d3d2      	bcc.n	81023d8 <main+0x32c>
  }

  ADE9000_Conv_ADC(va,N_SAMPLE);
 8102432:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8102436:	f103 0338 	add.w	r3, r3, #56	; 0x38
 810243a:	3b34      	subs	r3, #52	; 0x34
 810243c:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8102440:	4618      	mov	r0, r3
 8102442:	f7ff f873 	bl	810152c <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(ia,N_SAMPLE);
 8102446:	f107 0338 	add.w	r3, r7, #56	; 0x38
 810244a:	3b34      	subs	r3, #52	; 0x34
 810244c:	f44f 41fa 	mov.w	r1, #32000	; 0x7d00
 8102450:	4618      	mov	r0, r3
 8102452:	f7ff f86b 	bl	810152c <ADE9000_Conv_ADC>
  printf("VA,IA\r\n");
 8102456:	481d      	ldr	r0, [pc, #116]	; (81024cc <main+0x420>)
 8102458:	f006 f9fc 	bl	8108854 <puts>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 810245c:	2300      	movs	r3, #0
 810245e:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8102462:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8102466:	6013      	str	r3, [r2, #0]
 8102468:	e024      	b.n	81024b4 <main+0x408>
	  printf("%d,%d\r\n",va[i],ia[i]);
 810246a:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 810246e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8102472:	3b34      	subs	r3, #52	; 0x34
 8102474:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 8102478:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 810247c:	6812      	ldr	r2, [r2, #0]
 810247e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8102482:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8102486:	3b34      	subs	r3, #52	; 0x34
 8102488:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 810248c:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8102490:	6812      	ldr	r2, [r2, #0]
 8102492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102496:	461a      	mov	r2, r3
 8102498:	480b      	ldr	r0, [pc, #44]	; (81024c8 <main+0x41c>)
 810249a:	f006 f955 	bl	8108748 <iprintf>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 810249e:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81024a2:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 81024a6:	681b      	ldr	r3, [r3, #0]
 81024a8:	3301      	adds	r3, #1
 81024aa:	f507 327a 	add.w	r2, r7, #256000	; 0x3e800
 81024ae:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 81024b2:	6013      	str	r3, [r2, #0]
 81024b4:	f507 337a 	add.w	r3, r7, #256000	; 0x3e800
 81024b8:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 81024c2:	d3d2      	bcc.n	810246a <main+0x3be>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 81024c4:	e7fe      	b.n	81024c4 <main+0x418>
 81024c6:	bf00      	nop
 81024c8:	0810e614 	.word	0x0810e614
 81024cc:	0810e60c 	.word	0x0810e60c

081024d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 81024d0:	b580      	push	{r7, lr}
 81024d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 81024d4:	4b27      	ldr	r3, [pc, #156]	; (8102574 <MX_SPI1_Init+0xa4>)
 81024d6:	4a28      	ldr	r2, [pc, #160]	; (8102578 <MX_SPI1_Init+0xa8>)
 81024d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81024da:	4b26      	ldr	r3, [pc, #152]	; (8102574 <MX_SPI1_Init+0xa4>)
 81024dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81024e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81024e2:	4b24      	ldr	r3, [pc, #144]	; (8102574 <MX_SPI1_Init+0xa4>)
 81024e4:	2200      	movs	r2, #0
 81024e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 81024e8:	4b22      	ldr	r3, [pc, #136]	; (8102574 <MX_SPI1_Init+0xa4>)
 81024ea:	220f      	movs	r2, #15
 81024ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81024ee:	4b21      	ldr	r3, [pc, #132]	; (8102574 <MX_SPI1_Init+0xa4>)
 81024f0:	2200      	movs	r2, #0
 81024f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81024f4:	4b1f      	ldr	r3, [pc, #124]	; (8102574 <MX_SPI1_Init+0xa4>)
 81024f6:	2200      	movs	r2, #0
 81024f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81024fa:	4b1e      	ldr	r3, [pc, #120]	; (8102574 <MX_SPI1_Init+0xa4>)
 81024fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8102500:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8102502:	4b1c      	ldr	r3, [pc, #112]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102504:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8102508:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 810250a:	4b1a      	ldr	r3, [pc, #104]	; (8102574 <MX_SPI1_Init+0xa4>)
 810250c:	2200      	movs	r2, #0
 810250e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8102510:	4b18      	ldr	r3, [pc, #96]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102512:	2200      	movs	r2, #0
 8102514:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8102516:	4b17      	ldr	r3, [pc, #92]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102518:	2200      	movs	r2, #0
 810251a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 810251c:	4b15      	ldr	r3, [pc, #84]	; (8102574 <MX_SPI1_Init+0xa4>)
 810251e:	2200      	movs	r2, #0
 8102520:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8102522:	4b14      	ldr	r3, [pc, #80]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102524:	2200      	movs	r2, #0
 8102526:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8102528:	4b12      	ldr	r3, [pc, #72]	; (8102574 <MX_SPI1_Init+0xa4>)
 810252a:	2200      	movs	r2, #0
 810252c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 810252e:	4b11      	ldr	r3, [pc, #68]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102530:	2200      	movs	r2, #0
 8102532:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102534:	4b0f      	ldr	r3, [pc, #60]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102536:	2200      	movs	r2, #0
 8102538:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810253a:	4b0e      	ldr	r3, [pc, #56]	; (8102574 <MX_SPI1_Init+0xa4>)
 810253c:	2200      	movs	r2, #0
 810253e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102540:	4b0c      	ldr	r3, [pc, #48]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102542:	2200      	movs	r2, #0
 8102544:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102546:	4b0b      	ldr	r3, [pc, #44]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102548:	2200      	movs	r2, #0
 810254a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810254c:	4b09      	ldr	r3, [pc, #36]	; (8102574 <MX_SPI1_Init+0xa4>)
 810254e:	2200      	movs	r2, #0
 8102550:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102552:	4b08      	ldr	r3, [pc, #32]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102554:	2200      	movs	r2, #0
 8102556:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102558:	4b06      	ldr	r3, [pc, #24]	; (8102574 <MX_SPI1_Init+0xa4>)
 810255a:	2200      	movs	r2, #0
 810255c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 810255e:	4805      	ldr	r0, [pc, #20]	; (8102574 <MX_SPI1_Init+0xa4>)
 8102560:	f002 fd2a 	bl	8104fb8 <HAL_SPI_Init>
 8102564:	4603      	mov	r3, r0
 8102566:	2b00      	cmp	r3, #0
 8102568:	d001      	beq.n	810256e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 810256a:	f000 f94b 	bl	8102804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 810256e:	bf00      	nop
 8102570:	bd80      	pop	{r7, pc}
 8102572:	bf00      	nop
 8102574:	100003b0 	.word	0x100003b0
 8102578:	40013000 	.word	0x40013000

0810257c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 810257c:	b580      	push	{r7, lr}
 810257e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102580:	4b22      	ldr	r3, [pc, #136]	; (810260c <MX_USART3_UART_Init+0x90>)
 8102582:	4a23      	ldr	r2, [pc, #140]	; (8102610 <MX_USART3_UART_Init+0x94>)
 8102584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102586:	4b21      	ldr	r3, [pc, #132]	; (810260c <MX_USART3_UART_Init+0x90>)
 8102588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 810258c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810258e:	4b1f      	ldr	r3, [pc, #124]	; (810260c <MX_USART3_UART_Init+0x90>)
 8102590:	2200      	movs	r2, #0
 8102592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102594:	4b1d      	ldr	r3, [pc, #116]	; (810260c <MX_USART3_UART_Init+0x90>)
 8102596:	2200      	movs	r2, #0
 8102598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810259a:	4b1c      	ldr	r3, [pc, #112]	; (810260c <MX_USART3_UART_Init+0x90>)
 810259c:	2200      	movs	r2, #0
 810259e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 81025a0:	4b1a      	ldr	r3, [pc, #104]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025a2:	220c      	movs	r2, #12
 81025a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81025a6:	4b19      	ldr	r3, [pc, #100]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025a8:	2200      	movs	r2, #0
 81025aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 81025ac:	4b17      	ldr	r3, [pc, #92]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025ae:	2200      	movs	r2, #0
 81025b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81025b2:	4b16      	ldr	r3, [pc, #88]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025b4:	2200      	movs	r2, #0
 81025b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81025b8:	4b14      	ldr	r3, [pc, #80]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025ba:	2200      	movs	r2, #0
 81025bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81025be:	4b13      	ldr	r3, [pc, #76]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025c0:	2200      	movs	r2, #0
 81025c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 81025c4:	4811      	ldr	r0, [pc, #68]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025c6:	f003 fdad 	bl	8106124 <HAL_UART_Init>
 81025ca:	4603      	mov	r3, r0
 81025cc:	2b00      	cmp	r3, #0
 81025ce:	d001      	beq.n	81025d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81025d0:	f000 f918 	bl	8102804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025d4:	2100      	movs	r1, #0
 81025d6:	480d      	ldr	r0, [pc, #52]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025d8:	f004 feac 	bl	8107334 <HAL_UARTEx_SetTxFifoThreshold>
 81025dc:	4603      	mov	r3, r0
 81025de:	2b00      	cmp	r3, #0
 81025e0:	d001      	beq.n	81025e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81025e2:	f000 f90f 	bl	8102804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81025e6:	2100      	movs	r1, #0
 81025e8:	4808      	ldr	r0, [pc, #32]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025ea:	f004 fee1 	bl	81073b0 <HAL_UARTEx_SetRxFifoThreshold>
 81025ee:	4603      	mov	r3, r0
 81025f0:	2b00      	cmp	r3, #0
 81025f2:	d001      	beq.n	81025f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81025f4:	f000 f906 	bl	8102804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81025f8:	4804      	ldr	r0, [pc, #16]	; (810260c <MX_USART3_UART_Init+0x90>)
 81025fa:	f004 fe62 	bl	81072c2 <HAL_UARTEx_DisableFifoMode>
 81025fe:	4603      	mov	r3, r0
 8102600:	2b00      	cmp	r3, #0
 8102602:	d001      	beq.n	8102608 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102604:	f000 f8fe 	bl	8102804 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8102608:	bf00      	nop
 810260a:	bd80      	pop	{r7, pc}
 810260c:	10000320 	.word	0x10000320
 8102610:	40004800 	.word	0x40004800

08102614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102614:	b580      	push	{r7, lr}
 8102616:	b08a      	sub	sp, #40	; 0x28
 8102618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810261a:	f107 0314 	add.w	r3, r7, #20
 810261e:	2200      	movs	r2, #0
 8102620:	601a      	str	r2, [r3, #0]
 8102622:	605a      	str	r2, [r3, #4]
 8102624:	609a      	str	r2, [r3, #8]
 8102626:	60da      	str	r2, [r3, #12]
 8102628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810262a:	4b4e      	ldr	r3, [pc, #312]	; (8102764 <MX_GPIO_Init+0x150>)
 810262c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102630:	4a4c      	ldr	r2, [pc, #304]	; (8102764 <MX_GPIO_Init+0x150>)
 8102632:	f043 0301 	orr.w	r3, r3, #1
 8102636:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810263a:	4b4a      	ldr	r3, [pc, #296]	; (8102764 <MX_GPIO_Init+0x150>)
 810263c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102640:	f003 0301 	and.w	r3, r3, #1
 8102644:	613b      	str	r3, [r7, #16]
 8102646:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102648:	4b46      	ldr	r3, [pc, #280]	; (8102764 <MX_GPIO_Init+0x150>)
 810264a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810264e:	4a45      	ldr	r2, [pc, #276]	; (8102764 <MX_GPIO_Init+0x150>)
 8102650:	f043 0310 	orr.w	r3, r3, #16
 8102654:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102658:	4b42      	ldr	r3, [pc, #264]	; (8102764 <MX_GPIO_Init+0x150>)
 810265a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810265e:	f003 0310 	and.w	r3, r3, #16
 8102662:	60fb      	str	r3, [r7, #12]
 8102664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102666:	4b3f      	ldr	r3, [pc, #252]	; (8102764 <MX_GPIO_Init+0x150>)
 8102668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810266c:	4a3d      	ldr	r2, [pc, #244]	; (8102764 <MX_GPIO_Init+0x150>)
 810266e:	f043 0308 	orr.w	r3, r3, #8
 8102672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102676:	4b3b      	ldr	r3, [pc, #236]	; (8102764 <MX_GPIO_Init+0x150>)
 8102678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810267c:	f003 0308 	and.w	r3, r3, #8
 8102680:	60bb      	str	r3, [r7, #8]
 8102682:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8102684:	4b37      	ldr	r3, [pc, #220]	; (8102764 <MX_GPIO_Init+0x150>)
 8102686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810268a:	4a36      	ldr	r2, [pc, #216]	; (8102764 <MX_GPIO_Init+0x150>)
 810268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102694:	4b33      	ldr	r3, [pc, #204]	; (8102764 <MX_GPIO_Init+0x150>)
 8102696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810269a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810269e:	607b      	str	r3, [r7, #4]
 81026a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81026a2:	4b30      	ldr	r3, [pc, #192]	; (8102764 <MX_GPIO_Init+0x150>)
 81026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026a8:	4a2e      	ldr	r2, [pc, #184]	; (8102764 <MX_GPIO_Init+0x150>)
 81026aa:	f043 0302 	orr.w	r3, r3, #2
 81026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81026b2:	4b2c      	ldr	r3, [pc, #176]	; (8102764 <MX_GPIO_Init+0x150>)
 81026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026b8:	f003 0302 	and.w	r3, r3, #2
 81026bc:	603b      	str	r3, [r7, #0]
 81026be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADE9000_Reset_Pin|ADE9000_PM1_Pin, GPIO_PIN_RESET);
 81026c0:	2200      	movs	r2, #0
 81026c2:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 81026c6:	4828      	ldr	r0, [pc, #160]	; (8102768 <MX_GPIO_Init+0x154>)
 81026c8:	f000 fe6e 	bl	81033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADE9000_CS_GPIO_Port, ADE9000_CS_Pin, GPIO_PIN_SET);
 81026cc:	2201      	movs	r2, #1
 81026ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 81026d2:	4826      	ldr	r0, [pc, #152]	; (810276c <MX_GPIO_Init+0x158>)
 81026d4:	f000 fe68 	bl	81033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADE9000_Reset_Pin ADE9000_PM1_Pin */
  GPIO_InitStruct.Pin = ADE9000_Reset_Pin|ADE9000_PM1_Pin;
 81026d8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 81026dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81026de:	2301      	movs	r3, #1
 81026e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81026e2:	2300      	movs	r3, #0
 81026e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81026e6:	2300      	movs	r3, #0
 81026e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81026ea:	f107 0314 	add.w	r3, r7, #20
 81026ee:	4619      	mov	r1, r3
 81026f0:	481d      	ldr	r0, [pc, #116]	; (8102768 <MX_GPIO_Init+0x154>)
 81026f2:	f000 fca9 	bl	8103048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ1_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ1_Pin;
 81026f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81026fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 81026fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8102700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102702:	2300      	movs	r3, #0
 8102704:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8102706:	f107 0314 	add.w	r3, r7, #20
 810270a:	4619      	mov	r1, r3
 810270c:	4816      	ldr	r0, [pc, #88]	; (8102768 <MX_GPIO_Init+0x154>)
 810270e:	f000 fc9b 	bl	8103048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_CS_Pin */
  GPIO_InitStruct.Pin = ADE9000_CS_Pin;
 8102712:	f44f 7300 	mov.w	r3, #512	; 0x200
 8102716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102718:	2301      	movs	r3, #1
 810271a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810271c:	2300      	movs	r3, #0
 810271e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102720:	2300      	movs	r3, #0
 8102722:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADE9000_CS_GPIO_Port, &GPIO_InitStruct);
 8102724:	f107 0314 	add.w	r3, r7, #20
 8102728:	4619      	mov	r1, r3
 810272a:	4810      	ldr	r0, [pc, #64]	; (810276c <MX_GPIO_Init+0x158>)
 810272c:	f000 fc8c 	bl	8103048 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ0_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ0_Pin;
 8102730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8102736:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 810273a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810273c:	2300      	movs	r3, #0
 810273e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ0_GPIO_Port, &GPIO_InitStruct);
 8102740:	f107 0314 	add.w	r3, r7, #20
 8102744:	4619      	mov	r1, r3
 8102746:	4809      	ldr	r0, [pc, #36]	; (810276c <MX_GPIO_Init+0x158>)
 8102748:	f000 fc7e 	bl	8103048 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 810274c:	2200      	movs	r2, #0
 810274e:	2100      	movs	r1, #0
 8102750:	2028      	movs	r0, #40	; 0x28
 8102752:	f000 fc30 	bl	8102fb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8102756:	2028      	movs	r0, #40	; 0x28
 8102758:	f000 fc47 	bl	8102fea <HAL_NVIC_EnableIRQ>

}
 810275c:	bf00      	nop
 810275e:	3728      	adds	r7, #40	; 0x28
 8102760:	46bd      	mov	sp, r7
 8102762:	bd80      	pop	{r7, pc}
 8102764:	58024400 	.word	0x58024400
 8102768:	58021000 	.word	0x58021000
 810276c:	58021800 	.word	0x58021800

08102770 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8102770:	b580      	push	{r7, lr}
 8102772:	b082      	sub	sp, #8
 8102774:	af00      	add	r7, sp, #0
 8102776:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8102778:	1d39      	adds	r1, r7, #4
 810277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810277e:	2201      	movs	r2, #1
 8102780:	4803      	ldr	r0, [pc, #12]	; (8102790 <__io_putchar+0x20>)
 8102782:	f003 fd1f 	bl	81061c4 <HAL_UART_Transmit>
	return ch;
 8102786:	687b      	ldr	r3, [r7, #4]
}
 8102788:	4618      	mov	r0, r3
 810278a:	3708      	adds	r7, #8
 810278c:	46bd      	mov	sp, r7
 810278e:	bd80      	pop	{r7, pc}
 8102790:	10000320 	.word	0x10000320

08102794 <__io_getchar>:

int __io_getchar(void)
{
 8102794:	b580      	push	{r7, lr}
 8102796:	b082      	sub	sp, #8
 8102798:	af00      	add	r7, sp, #0

	uint8_t ch;
	// Clear the Overrun flag just before receiving the first character
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 810279a:	4b0b      	ldr	r3, [pc, #44]	; (81027c8 <__io_getchar+0x34>)
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	2208      	movs	r2, #8
 81027a0:	621a      	str	r2, [r3, #32]

	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 81027a2:	1df9      	adds	r1, r7, #7
 81027a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81027a8:	2201      	movs	r2, #1
 81027aa:	4807      	ldr	r0, [pc, #28]	; (81027c8 <__io_getchar+0x34>)
 81027ac:	f003 fda0 	bl	81062f0 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 81027b0:	1df9      	adds	r1, r7, #7
 81027b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81027b6:	2201      	movs	r2, #1
 81027b8:	4803      	ldr	r0, [pc, #12]	; (81027c8 <__io_getchar+0x34>)
 81027ba:	f003 fd03 	bl	81061c4 <HAL_UART_Transmit>

	return ch;
 81027be:	79fb      	ldrb	r3, [r7, #7]
				break;
		}
		HAL_UART_Transmit(&huart3, (uint8_t *)data, len, 10);
		return ch;
		*/
}
 81027c0:	4618      	mov	r0, r3
 81027c2:	3708      	adds	r7, #8
 81027c4:	46bd      	mov	sp, r7
 81027c6:	bd80      	pop	{r7, pc}
 81027c8:	10000320 	.word	0x10000320

081027cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 81027cc:	b480      	push	{r7}
 81027ce:	b083      	sub	sp, #12
 81027d0:	af00      	add	r7, sp, #0
 81027d2:	4603      	mov	r3, r0
 81027d4:	80fb      	strh	r3, [r7, #6]
	// If the interrupt source is pin IRQ0
	if (GPIO_Pin == ADE9000_IRQ0_Pin)
 81027d6:	88fb      	ldrh	r3, [r7, #6]
 81027d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81027dc:	d107      	bne.n	81027ee <HAL_GPIO_EXTI_Callback+0x22>
	{
		//printf("IRQ0s\r\n");
		flag_read = 1;
 81027de:	4b07      	ldr	r3, [pc, #28]	; (81027fc <HAL_GPIO_EXTI_Callback+0x30>)
 81027e0:	2201      	movs	r2, #1
 81027e2:	701a      	strb	r2, [r3, #0]
		n_int ++;
 81027e4:	4b06      	ldr	r3, [pc, #24]	; (8102800 <HAL_GPIO_EXTI_Callback+0x34>)
 81027e6:	681b      	ldr	r3, [r3, #0]
 81027e8:	3301      	adds	r3, #1
 81027ea:	4a05      	ldr	r2, [pc, #20]	; (8102800 <HAL_GPIO_EXTI_Callback+0x34>)
 81027ec:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == ADE9000_IRQ1_Pin)
		{
			//printf("IRQ1\r\n");
		}
}
 81027ee:	bf00      	nop
 81027f0:	370c      	adds	r7, #12
 81027f2:	46bd      	mov	sp, r7
 81027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027f8:	4770      	bx	lr
 81027fa:	bf00      	nop
 81027fc:	10000254 	.word	0x10000254
 8102800:	10000258 	.word	0x10000258

08102804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102804:	b480      	push	{r7}
 8102806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8102808:	b672      	cpsid	i
}
 810280a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810280c:	e7fe      	b.n	810280c <Error_Handler+0x8>
	...

08102810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102810:	b480      	push	{r7}
 8102812:	b083      	sub	sp, #12
 8102814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102816:	4b0a      	ldr	r3, [pc, #40]	; (8102840 <HAL_MspInit+0x30>)
 8102818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810281c:	4a08      	ldr	r2, [pc, #32]	; (8102840 <HAL_MspInit+0x30>)
 810281e:	f043 0302 	orr.w	r3, r3, #2
 8102822:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102826:	4b06      	ldr	r3, [pc, #24]	; (8102840 <HAL_MspInit+0x30>)
 8102828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810282c:	f003 0302 	and.w	r3, r3, #2
 8102830:	607b      	str	r3, [r7, #4]
 8102832:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102834:	bf00      	nop
 8102836:	370c      	adds	r7, #12
 8102838:	46bd      	mov	sp, r7
 810283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810283e:	4770      	bx	lr
 8102840:	58024400 	.word	0x58024400

08102844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8102844:	b580      	push	{r7, lr}
 8102846:	b08a      	sub	sp, #40	; 0x28
 8102848:	af00      	add	r7, sp, #0
 810284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810284c:	f107 0314 	add.w	r3, r7, #20
 8102850:	2200      	movs	r2, #0
 8102852:	601a      	str	r2, [r3, #0]
 8102854:	605a      	str	r2, [r3, #4]
 8102856:	609a      	str	r2, [r3, #8]
 8102858:	60da      	str	r2, [r3, #12]
 810285a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 810285c:	687b      	ldr	r3, [r7, #4]
 810285e:	681b      	ldr	r3, [r3, #0]
 8102860:	4a31      	ldr	r2, [pc, #196]	; (8102928 <HAL_SPI_MspInit+0xe4>)
 8102862:	4293      	cmp	r3, r2
 8102864:	d15c      	bne.n	8102920 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102866:	4b31      	ldr	r3, [pc, #196]	; (810292c <HAL_SPI_MspInit+0xe8>)
 8102868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810286c:	4a2f      	ldr	r2, [pc, #188]	; (810292c <HAL_SPI_MspInit+0xe8>)
 810286e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102872:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102876:	4b2d      	ldr	r3, [pc, #180]	; (810292c <HAL_SPI_MspInit+0xe8>)
 8102878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102880:	613b      	str	r3, [r7, #16]
 8102882:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102884:	4b29      	ldr	r3, [pc, #164]	; (810292c <HAL_SPI_MspInit+0xe8>)
 8102886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810288a:	4a28      	ldr	r2, [pc, #160]	; (810292c <HAL_SPI_MspInit+0xe8>)
 810288c:	f043 0301 	orr.w	r3, r3, #1
 8102890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102894:	4b25      	ldr	r3, [pc, #148]	; (810292c <HAL_SPI_MspInit+0xe8>)
 8102896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810289a:	f003 0301 	and.w	r3, r3, #1
 810289e:	60fb      	str	r3, [r7, #12]
 81028a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81028a2:	4b22      	ldr	r3, [pc, #136]	; (810292c <HAL_SPI_MspInit+0xe8>)
 81028a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028a8:	4a20      	ldr	r2, [pc, #128]	; (810292c <HAL_SPI_MspInit+0xe8>)
 81028aa:	f043 0302 	orr.w	r3, r3, #2
 81028ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81028b2:	4b1e      	ldr	r3, [pc, #120]	; (810292c <HAL_SPI_MspInit+0xe8>)
 81028b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81028b8:	f003 0302 	and.w	r3, r3, #2
 81028bc:	60bb      	str	r3, [r7, #8]
 81028be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 81028c0:	2320      	movs	r3, #32
 81028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81028c4:	2302      	movs	r3, #2
 81028c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 81028c8:	2302      	movs	r3, #2
 81028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81028cc:	2303      	movs	r3, #3
 81028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81028d0:	2305      	movs	r3, #5
 81028d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81028d4:	f107 0314 	add.w	r3, r7, #20
 81028d8:	4619      	mov	r1, r3
 81028da:	4815      	ldr	r0, [pc, #84]	; (8102930 <HAL_SPI_MspInit+0xec>)
 81028dc:	f000 fbb4 	bl	8103048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81028e0:	2340      	movs	r3, #64	; 0x40
 81028e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81028e4:	2302      	movs	r3, #2
 81028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81028e8:	2300      	movs	r3, #0
 81028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81028ec:	2303      	movs	r3, #3
 81028ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81028f0:	2305      	movs	r3, #5
 81028f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81028f4:	f107 0314 	add.w	r3, r7, #20
 81028f8:	4619      	mov	r1, r3
 81028fa:	480d      	ldr	r0, [pc, #52]	; (8102930 <HAL_SPI_MspInit+0xec>)
 81028fc:	f000 fba4 	bl	8103048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8102900:	2320      	movs	r3, #32
 8102902:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102904:	2302      	movs	r3, #2
 8102906:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102908:	2300      	movs	r3, #0
 810290a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810290c:	2303      	movs	r3, #3
 810290e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8102910:	2305      	movs	r3, #5
 8102912:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102914:	f107 0314 	add.w	r3, r7, #20
 8102918:	4619      	mov	r1, r3
 810291a:	4806      	ldr	r0, [pc, #24]	; (8102934 <HAL_SPI_MspInit+0xf0>)
 810291c:	f000 fb94 	bl	8103048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8102920:	bf00      	nop
 8102922:	3728      	adds	r7, #40	; 0x28
 8102924:	46bd      	mov	sp, r7
 8102926:	bd80      	pop	{r7, pc}
 8102928:	40013000 	.word	0x40013000
 810292c:	58024400 	.word	0x58024400
 8102930:	58020000 	.word	0x58020000
 8102934:	58020400 	.word	0x58020400

08102938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102938:	b580      	push	{r7, lr}
 810293a:	b0b8      	sub	sp, #224	; 0xe0
 810293c:	af00      	add	r7, sp, #0
 810293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102940:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102944:	2200      	movs	r2, #0
 8102946:	601a      	str	r2, [r3, #0]
 8102948:	605a      	str	r2, [r3, #4]
 810294a:	609a      	str	r2, [r3, #8]
 810294c:	60da      	str	r2, [r3, #12]
 810294e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102950:	f107 0310 	add.w	r3, r7, #16
 8102954:	22bc      	movs	r2, #188	; 0xbc
 8102956:	2100      	movs	r1, #0
 8102958:	4618      	mov	r0, r3
 810295a:	f004 ffc8 	bl	81078ee <memset>
  if(huart->Instance==USART3)
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	681b      	ldr	r3, [r3, #0]
 8102962:	4a25      	ldr	r2, [pc, #148]	; (81029f8 <HAL_UART_MspInit+0xc0>)
 8102964:	4293      	cmp	r3, r2
 8102966:	d142      	bne.n	81029ee <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102968:	2302      	movs	r3, #2
 810296a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810296c:	2300      	movs	r3, #0
 810296e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102972:	f107 0310 	add.w	r3, r7, #16
 8102976:	4618      	mov	r0, r3
 8102978:	f000 ffbc 	bl	81038f4 <HAL_RCCEx_PeriphCLKConfig>
 810297c:	4603      	mov	r3, r0
 810297e:	2b00      	cmp	r3, #0
 8102980:	d001      	beq.n	8102986 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8102982:	f7ff ff3f 	bl	8102804 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102986:	4b1d      	ldr	r3, [pc, #116]	; (81029fc <HAL_UART_MspInit+0xc4>)
 8102988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810298c:	4a1b      	ldr	r2, [pc, #108]	; (81029fc <HAL_UART_MspInit+0xc4>)
 810298e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102992:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102996:	4b19      	ldr	r3, [pc, #100]	; (81029fc <HAL_UART_MspInit+0xc4>)
 8102998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810299c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81029a0:	60fb      	str	r3, [r7, #12]
 81029a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 81029a4:	4b15      	ldr	r3, [pc, #84]	; (81029fc <HAL_UART_MspInit+0xc4>)
 81029a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029aa:	4a14      	ldr	r2, [pc, #80]	; (81029fc <HAL_UART_MspInit+0xc4>)
 81029ac:	f043 0308 	orr.w	r3, r3, #8
 81029b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81029b4:	4b11      	ldr	r3, [pc, #68]	; (81029fc <HAL_UART_MspInit+0xc4>)
 81029b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029ba:	f003 0308 	and.w	r3, r3, #8
 81029be:	60bb      	str	r3, [r7, #8]
 81029c0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 81029c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 81029c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81029ca:	2302      	movs	r3, #2
 81029cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029d0:	2300      	movs	r3, #0
 81029d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81029d6:	2300      	movs	r3, #0
 81029d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81029dc:	2307      	movs	r3, #7
 81029de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81029e2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81029e6:	4619      	mov	r1, r3
 81029e8:	4805      	ldr	r0, [pc, #20]	; (8102a00 <HAL_UART_MspInit+0xc8>)
 81029ea:	f000 fb2d 	bl	8103048 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81029ee:	bf00      	nop
 81029f0:	37e0      	adds	r7, #224	; 0xe0
 81029f2:	46bd      	mov	sp, r7
 81029f4:	bd80      	pop	{r7, pc}
 81029f6:	bf00      	nop
 81029f8:	40004800 	.word	0x40004800
 81029fc:	58024400 	.word	0x58024400
 8102a00:	58020c00 	.word	0x58020c00

08102a04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102a04:	b480      	push	{r7}
 8102a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102a08:	e7fe      	b.n	8102a08 <NMI_Handler+0x4>

08102a0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102a0a:	b480      	push	{r7}
 8102a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102a0e:	e7fe      	b.n	8102a0e <HardFault_Handler+0x4>

08102a10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102a10:	b480      	push	{r7}
 8102a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102a14:	e7fe      	b.n	8102a14 <MemManage_Handler+0x4>

08102a16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102a16:	b480      	push	{r7}
 8102a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102a1a:	e7fe      	b.n	8102a1a <BusFault_Handler+0x4>

08102a1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102a1c:	b480      	push	{r7}
 8102a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102a20:	e7fe      	b.n	8102a20 <UsageFault_Handler+0x4>

08102a22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102a22:	b480      	push	{r7}
 8102a24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102a26:	bf00      	nop
 8102a28:	46bd      	mov	sp, r7
 8102a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a2e:	4770      	bx	lr

08102a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102a30:	b480      	push	{r7}
 8102a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102a34:	bf00      	nop
 8102a36:	46bd      	mov	sp, r7
 8102a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a3c:	4770      	bx	lr

08102a3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102a3e:	b480      	push	{r7}
 8102a40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102a42:	bf00      	nop
 8102a44:	46bd      	mov	sp, r7
 8102a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a4a:	4770      	bx	lr

08102a4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102a4c:	b580      	push	{r7, lr}
 8102a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102a50:	f000 f992 	bl	8102d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102a54:	bf00      	nop
 8102a56:	bd80      	pop	{r7, pc}

08102a58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8102a58:	b580      	push	{r7, lr}
 8102a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADE9000_IRQ1_Pin);
 8102a5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8102a60:	f000 fcbb 	bl	81033da <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADE9000_PM1_Pin);
 8102a64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8102a68:	f000 fcb7 	bl	81033da <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8102a6c:	bf00      	nop
 8102a6e:	bd80      	pop	{r7, pc}

08102a70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102a70:	b480      	push	{r7}
 8102a72:	af00      	add	r7, sp, #0
	return 1;
 8102a74:	2301      	movs	r3, #1
}
 8102a76:	4618      	mov	r0, r3
 8102a78:	46bd      	mov	sp, r7
 8102a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a7e:	4770      	bx	lr

08102a80 <_kill>:

int _kill(int pid, int sig)
{
 8102a80:	b580      	push	{r7, lr}
 8102a82:	b082      	sub	sp, #8
 8102a84:	af00      	add	r7, sp, #0
 8102a86:	6078      	str	r0, [r7, #4]
 8102a88:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8102a8a:	f004 fd1d 	bl	81074c8 <__errno>
 8102a8e:	4603      	mov	r3, r0
 8102a90:	2216      	movs	r2, #22
 8102a92:	601a      	str	r2, [r3, #0]
	return -1;
 8102a94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102a98:	4618      	mov	r0, r3
 8102a9a:	3708      	adds	r7, #8
 8102a9c:	46bd      	mov	sp, r7
 8102a9e:	bd80      	pop	{r7, pc}

08102aa0 <_exit>:

void _exit (int status)
{
 8102aa0:	b580      	push	{r7, lr}
 8102aa2:	b082      	sub	sp, #8
 8102aa4:	af00      	add	r7, sp, #0
 8102aa6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8102aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8102aac:	6878      	ldr	r0, [r7, #4]
 8102aae:	f7ff ffe7 	bl	8102a80 <_kill>
	while (1) {}		/* Make sure we hang here */
 8102ab2:	e7fe      	b.n	8102ab2 <_exit+0x12>

08102ab4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102ab4:	b580      	push	{r7, lr}
 8102ab6:	b086      	sub	sp, #24
 8102ab8:	af00      	add	r7, sp, #0
 8102aba:	60f8      	str	r0, [r7, #12]
 8102abc:	60b9      	str	r1, [r7, #8]
 8102abe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102ac0:	2300      	movs	r3, #0
 8102ac2:	617b      	str	r3, [r7, #20]
 8102ac4:	e00a      	b.n	8102adc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8102ac6:	f7ff fe65 	bl	8102794 <__io_getchar>
 8102aca:	4601      	mov	r1, r0
 8102acc:	68bb      	ldr	r3, [r7, #8]
 8102ace:	1c5a      	adds	r2, r3, #1
 8102ad0:	60ba      	str	r2, [r7, #8]
 8102ad2:	b2ca      	uxtb	r2, r1
 8102ad4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102ad6:	697b      	ldr	r3, [r7, #20]
 8102ad8:	3301      	adds	r3, #1
 8102ada:	617b      	str	r3, [r7, #20]
 8102adc:	697a      	ldr	r2, [r7, #20]
 8102ade:	687b      	ldr	r3, [r7, #4]
 8102ae0:	429a      	cmp	r2, r3
 8102ae2:	dbf0      	blt.n	8102ac6 <_read+0x12>
	}

return len;
 8102ae4:	687b      	ldr	r3, [r7, #4]
}
 8102ae6:	4618      	mov	r0, r3
 8102ae8:	3718      	adds	r7, #24
 8102aea:	46bd      	mov	sp, r7
 8102aec:	bd80      	pop	{r7, pc}

08102aee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102aee:	b580      	push	{r7, lr}
 8102af0:	b086      	sub	sp, #24
 8102af2:	af00      	add	r7, sp, #0
 8102af4:	60f8      	str	r0, [r7, #12]
 8102af6:	60b9      	str	r1, [r7, #8]
 8102af8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102afa:	2300      	movs	r3, #0
 8102afc:	617b      	str	r3, [r7, #20]
 8102afe:	e009      	b.n	8102b14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8102b00:	68bb      	ldr	r3, [r7, #8]
 8102b02:	1c5a      	adds	r2, r3, #1
 8102b04:	60ba      	str	r2, [r7, #8]
 8102b06:	781b      	ldrb	r3, [r3, #0]
 8102b08:	4618      	mov	r0, r3
 8102b0a:	f7ff fe31 	bl	8102770 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102b0e:	697b      	ldr	r3, [r7, #20]
 8102b10:	3301      	adds	r3, #1
 8102b12:	617b      	str	r3, [r7, #20]
 8102b14:	697a      	ldr	r2, [r7, #20]
 8102b16:	687b      	ldr	r3, [r7, #4]
 8102b18:	429a      	cmp	r2, r3
 8102b1a:	dbf1      	blt.n	8102b00 <_write+0x12>
	}
	return len;
 8102b1c:	687b      	ldr	r3, [r7, #4]
}
 8102b1e:	4618      	mov	r0, r3
 8102b20:	3718      	adds	r7, #24
 8102b22:	46bd      	mov	sp, r7
 8102b24:	bd80      	pop	{r7, pc}

08102b26 <_close>:

int _close(int file)
{
 8102b26:	b480      	push	{r7}
 8102b28:	b083      	sub	sp, #12
 8102b2a:	af00      	add	r7, sp, #0
 8102b2c:	6078      	str	r0, [r7, #4]
	return -1;
 8102b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102b32:	4618      	mov	r0, r3
 8102b34:	370c      	adds	r7, #12
 8102b36:	46bd      	mov	sp, r7
 8102b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b3c:	4770      	bx	lr

08102b3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102b3e:	b480      	push	{r7}
 8102b40:	b083      	sub	sp, #12
 8102b42:	af00      	add	r7, sp, #0
 8102b44:	6078      	str	r0, [r7, #4]
 8102b46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8102b48:	683b      	ldr	r3, [r7, #0]
 8102b4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8102b4e:	605a      	str	r2, [r3, #4]
	return 0;
 8102b50:	2300      	movs	r3, #0
}
 8102b52:	4618      	mov	r0, r3
 8102b54:	370c      	adds	r7, #12
 8102b56:	46bd      	mov	sp, r7
 8102b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b5c:	4770      	bx	lr

08102b5e <_isatty>:

int _isatty(int file)
{
 8102b5e:	b480      	push	{r7}
 8102b60:	b083      	sub	sp, #12
 8102b62:	af00      	add	r7, sp, #0
 8102b64:	6078      	str	r0, [r7, #4]
	return 1;
 8102b66:	2301      	movs	r3, #1
}
 8102b68:	4618      	mov	r0, r3
 8102b6a:	370c      	adds	r7, #12
 8102b6c:	46bd      	mov	sp, r7
 8102b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b72:	4770      	bx	lr

08102b74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102b74:	b480      	push	{r7}
 8102b76:	b085      	sub	sp, #20
 8102b78:	af00      	add	r7, sp, #0
 8102b7a:	60f8      	str	r0, [r7, #12]
 8102b7c:	60b9      	str	r1, [r7, #8]
 8102b7e:	607a      	str	r2, [r7, #4]
	return 0;
 8102b80:	2300      	movs	r3, #0
}
 8102b82:	4618      	mov	r0, r3
 8102b84:	3714      	adds	r7, #20
 8102b86:	46bd      	mov	sp, r7
 8102b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b8c:	4770      	bx	lr
	...

08102b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102b90:	b580      	push	{r7, lr}
 8102b92:	b086      	sub	sp, #24
 8102b94:	af00      	add	r7, sp, #0
 8102b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102b98:	4a14      	ldr	r2, [pc, #80]	; (8102bec <_sbrk+0x5c>)
 8102b9a:	4b15      	ldr	r3, [pc, #84]	; (8102bf0 <_sbrk+0x60>)
 8102b9c:	1ad3      	subs	r3, r2, r3
 8102b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102ba0:	697b      	ldr	r3, [r7, #20]
 8102ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102ba4:	4b13      	ldr	r3, [pc, #76]	; (8102bf4 <_sbrk+0x64>)
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	2b00      	cmp	r3, #0
 8102baa:	d102      	bne.n	8102bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102bac:	4b11      	ldr	r3, [pc, #68]	; (8102bf4 <_sbrk+0x64>)
 8102bae:	4a12      	ldr	r2, [pc, #72]	; (8102bf8 <_sbrk+0x68>)
 8102bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102bb2:	4b10      	ldr	r3, [pc, #64]	; (8102bf4 <_sbrk+0x64>)
 8102bb4:	681a      	ldr	r2, [r3, #0]
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	4413      	add	r3, r2
 8102bba:	693a      	ldr	r2, [r7, #16]
 8102bbc:	429a      	cmp	r2, r3
 8102bbe:	d207      	bcs.n	8102bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102bc0:	f004 fc82 	bl	81074c8 <__errno>
 8102bc4:	4603      	mov	r3, r0
 8102bc6:	220c      	movs	r2, #12
 8102bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102bca:	f04f 33ff 	mov.w	r3, #4294967295
 8102bce:	e009      	b.n	8102be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102bd0:	4b08      	ldr	r3, [pc, #32]	; (8102bf4 <_sbrk+0x64>)
 8102bd2:	681b      	ldr	r3, [r3, #0]
 8102bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102bd6:	4b07      	ldr	r3, [pc, #28]	; (8102bf4 <_sbrk+0x64>)
 8102bd8:	681a      	ldr	r2, [r3, #0]
 8102bda:	687b      	ldr	r3, [r7, #4]
 8102bdc:	4413      	add	r3, r2
 8102bde:	4a05      	ldr	r2, [pc, #20]	; (8102bf4 <_sbrk+0x64>)
 8102be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102be2:	68fb      	ldr	r3, [r7, #12]
}
 8102be4:	4618      	mov	r0, r3
 8102be6:	3718      	adds	r7, #24
 8102be8:	46bd      	mov	sp, r7
 8102bea:	bd80      	pop	{r7, pc}
 8102bec:	10048000 	.word	0x10048000
 8102bf0:	00000400 	.word	0x00000400
 8102bf4:	10000260 	.word	0x10000260
 8102bf8:	10000508 	.word	0x10000508

08102bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102c34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102c00:	f7fe fa7c 	bl	81010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102c04:	480c      	ldr	r0, [pc, #48]	; (8102c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102c06:	490d      	ldr	r1, [pc, #52]	; (8102c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102c08:	4a0d      	ldr	r2, [pc, #52]	; (8102c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102c0c:	e002      	b.n	8102c14 <LoopCopyDataInit>

08102c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102c12:	3304      	adds	r3, #4

08102c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102c18:	d3f9      	bcc.n	8102c0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102c1a:	4a0a      	ldr	r2, [pc, #40]	; (8102c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102c1c:	4c0a      	ldr	r4, [pc, #40]	; (8102c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102c20:	e001      	b.n	8102c26 <LoopFillZerobss>

08102c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102c24:	3204      	adds	r2, #4

08102c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102c28:	d3fb      	bcc.n	8102c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102c2a:	f004 fe39 	bl	81078a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102c2e:	f7ff fa3d 	bl	81020ac <main>
  bx  lr
 8102c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102c34:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102c38:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102c3c:	10000238 	.word	0x10000238
  ldr r2, =_sidata
 8102c40:	0810ed58 	.word	0x0810ed58
  ldr r2, =_sbss
 8102c44:	10000238 	.word	0x10000238
  ldr r4, =_ebss
 8102c48:	10000508 	.word	0x10000508

08102c4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102c4c:	e7fe      	b.n	8102c4c <ADC3_IRQHandler>
	...

08102c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102c50:	b580      	push	{r7, lr}
 8102c52:	b082      	sub	sp, #8
 8102c54:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102c56:	4b28      	ldr	r3, [pc, #160]	; (8102cf8 <HAL_Init+0xa8>)
 8102c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102c5c:	4a26      	ldr	r2, [pc, #152]	; (8102cf8 <HAL_Init+0xa8>)
 8102c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102c66:	4b24      	ldr	r3, [pc, #144]	; (8102cf8 <HAL_Init+0xa8>)
 8102c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102c70:	603b      	str	r3, [r7, #0]
 8102c72:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102c74:	4b21      	ldr	r3, [pc, #132]	; (8102cfc <HAL_Init+0xac>)
 8102c76:	681b      	ldr	r3, [r3, #0]
 8102c78:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102c7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102c80:	4a1e      	ldr	r2, [pc, #120]	; (8102cfc <HAL_Init+0xac>)
 8102c82:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102c86:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102c88:	4b1c      	ldr	r3, [pc, #112]	; (8102cfc <HAL_Init+0xac>)
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	4a1b      	ldr	r2, [pc, #108]	; (8102cfc <HAL_Init+0xac>)
 8102c8e:	f043 0301 	orr.w	r3, r3, #1
 8102c92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102c94:	2003      	movs	r0, #3
 8102c96:	f000 f983 	bl	8102fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102c9a:	f000 fc53 	bl	8103544 <HAL_RCC_GetSysClockFreq>
 8102c9e:	4602      	mov	r2, r0
 8102ca0:	4b15      	ldr	r3, [pc, #84]	; (8102cf8 <HAL_Init+0xa8>)
 8102ca2:	699b      	ldr	r3, [r3, #24]
 8102ca4:	0a1b      	lsrs	r3, r3, #8
 8102ca6:	f003 030f 	and.w	r3, r3, #15
 8102caa:	4915      	ldr	r1, [pc, #84]	; (8102d00 <HAL_Init+0xb0>)
 8102cac:	5ccb      	ldrb	r3, [r1, r3]
 8102cae:	f003 031f 	and.w	r3, r3, #31
 8102cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8102cb6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102cb8:	4b0f      	ldr	r3, [pc, #60]	; (8102cf8 <HAL_Init+0xa8>)
 8102cba:	699b      	ldr	r3, [r3, #24]
 8102cbc:	f003 030f 	and.w	r3, r3, #15
 8102cc0:	4a0f      	ldr	r2, [pc, #60]	; (8102d00 <HAL_Init+0xb0>)
 8102cc2:	5cd3      	ldrb	r3, [r2, r3]
 8102cc4:	f003 031f 	and.w	r3, r3, #31
 8102cc8:	687a      	ldr	r2, [r7, #4]
 8102cca:	fa22 f303 	lsr.w	r3, r2, r3
 8102cce:	4a0d      	ldr	r2, [pc, #52]	; (8102d04 <HAL_Init+0xb4>)
 8102cd0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102cd2:	4b0c      	ldr	r3, [pc, #48]	; (8102d04 <HAL_Init+0xb4>)
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	4a0c      	ldr	r2, [pc, #48]	; (8102d08 <HAL_Init+0xb8>)
 8102cd8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102cda:	2000      	movs	r0, #0
 8102cdc:	f000 f816 	bl	8102d0c <HAL_InitTick>
 8102ce0:	4603      	mov	r3, r0
 8102ce2:	2b00      	cmp	r3, #0
 8102ce4:	d001      	beq.n	8102cea <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102ce6:	2301      	movs	r3, #1
 8102ce8:	e002      	b.n	8102cf0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102cea:	f7ff fd91 	bl	8102810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102cee:	2300      	movs	r3, #0
}
 8102cf0:	4618      	mov	r0, r3
 8102cf2:	3708      	adds	r7, #8
 8102cf4:	46bd      	mov	sp, r7
 8102cf6:	bd80      	pop	{r7, pc}
 8102cf8:	58024400 	.word	0x58024400
 8102cfc:	40024400 	.word	0x40024400
 8102d00:	0810e628 	.word	0x0810e628
 8102d04:	10000004 	.word	0x10000004
 8102d08:	10000000 	.word	0x10000000

08102d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102d0c:	b580      	push	{r7, lr}
 8102d0e:	b082      	sub	sp, #8
 8102d10:	af00      	add	r7, sp, #0
 8102d12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102d14:	4b15      	ldr	r3, [pc, #84]	; (8102d6c <HAL_InitTick+0x60>)
 8102d16:	781b      	ldrb	r3, [r3, #0]
 8102d18:	2b00      	cmp	r3, #0
 8102d1a:	d101      	bne.n	8102d20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102d1c:	2301      	movs	r3, #1
 8102d1e:	e021      	b.n	8102d64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102d20:	4b13      	ldr	r3, [pc, #76]	; (8102d70 <HAL_InitTick+0x64>)
 8102d22:	681a      	ldr	r2, [r3, #0]
 8102d24:	4b11      	ldr	r3, [pc, #68]	; (8102d6c <HAL_InitTick+0x60>)
 8102d26:	781b      	ldrb	r3, [r3, #0]
 8102d28:	4619      	mov	r1, r3
 8102d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8102d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8102d36:	4618      	mov	r0, r3
 8102d38:	f000 f965 	bl	8103006 <HAL_SYSTICK_Config>
 8102d3c:	4603      	mov	r3, r0
 8102d3e:	2b00      	cmp	r3, #0
 8102d40:	d001      	beq.n	8102d46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102d42:	2301      	movs	r3, #1
 8102d44:	e00e      	b.n	8102d64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	2b0f      	cmp	r3, #15
 8102d4a:	d80a      	bhi.n	8102d62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102d4c:	2200      	movs	r2, #0
 8102d4e:	6879      	ldr	r1, [r7, #4]
 8102d50:	f04f 30ff 	mov.w	r0, #4294967295
 8102d54:	f000 f92f 	bl	8102fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102d58:	4a06      	ldr	r2, [pc, #24]	; (8102d74 <HAL_InitTick+0x68>)
 8102d5a:	687b      	ldr	r3, [r7, #4]
 8102d5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102d5e:	2300      	movs	r3, #0
 8102d60:	e000      	b.n	8102d64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102d62:	2301      	movs	r3, #1
}
 8102d64:	4618      	mov	r0, r3
 8102d66:	3708      	adds	r7, #8
 8102d68:	46bd      	mov	sp, r7
 8102d6a:	bd80      	pop	{r7, pc}
 8102d6c:	10000060 	.word	0x10000060
 8102d70:	10000000 	.word	0x10000000
 8102d74:	1000005c 	.word	0x1000005c

08102d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102d78:	b480      	push	{r7}
 8102d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102d7c:	4b06      	ldr	r3, [pc, #24]	; (8102d98 <HAL_IncTick+0x20>)
 8102d7e:	781b      	ldrb	r3, [r3, #0]
 8102d80:	461a      	mov	r2, r3
 8102d82:	4b06      	ldr	r3, [pc, #24]	; (8102d9c <HAL_IncTick+0x24>)
 8102d84:	681b      	ldr	r3, [r3, #0]
 8102d86:	4413      	add	r3, r2
 8102d88:	4a04      	ldr	r2, [pc, #16]	; (8102d9c <HAL_IncTick+0x24>)
 8102d8a:	6013      	str	r3, [r2, #0]
}
 8102d8c:	bf00      	nop
 8102d8e:	46bd      	mov	sp, r7
 8102d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d94:	4770      	bx	lr
 8102d96:	bf00      	nop
 8102d98:	10000060 	.word	0x10000060
 8102d9c:	100004f4 	.word	0x100004f4

08102da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102da0:	b480      	push	{r7}
 8102da2:	af00      	add	r7, sp, #0
  return uwTick;
 8102da4:	4b03      	ldr	r3, [pc, #12]	; (8102db4 <HAL_GetTick+0x14>)
 8102da6:	681b      	ldr	r3, [r3, #0]
}
 8102da8:	4618      	mov	r0, r3
 8102daa:	46bd      	mov	sp, r7
 8102dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102db0:	4770      	bx	lr
 8102db2:	bf00      	nop
 8102db4:	100004f4 	.word	0x100004f4

08102db8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102db8:	b580      	push	{r7, lr}
 8102dba:	b084      	sub	sp, #16
 8102dbc:	af00      	add	r7, sp, #0
 8102dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102dc0:	f7ff ffee 	bl	8102da0 <HAL_GetTick>
 8102dc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102dc6:	687b      	ldr	r3, [r7, #4]
 8102dc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102dca:	68fb      	ldr	r3, [r7, #12]
 8102dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102dd0:	d005      	beq.n	8102dde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102dd2:	4b0a      	ldr	r3, [pc, #40]	; (8102dfc <HAL_Delay+0x44>)
 8102dd4:	781b      	ldrb	r3, [r3, #0]
 8102dd6:	461a      	mov	r2, r3
 8102dd8:	68fb      	ldr	r3, [r7, #12]
 8102dda:	4413      	add	r3, r2
 8102ddc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102dde:	bf00      	nop
 8102de0:	f7ff ffde 	bl	8102da0 <HAL_GetTick>
 8102de4:	4602      	mov	r2, r0
 8102de6:	68bb      	ldr	r3, [r7, #8]
 8102de8:	1ad3      	subs	r3, r2, r3
 8102dea:	68fa      	ldr	r2, [r7, #12]
 8102dec:	429a      	cmp	r2, r3
 8102dee:	d8f7      	bhi.n	8102de0 <HAL_Delay+0x28>
  {
  }
}
 8102df0:	bf00      	nop
 8102df2:	bf00      	nop
 8102df4:	3710      	adds	r7, #16
 8102df6:	46bd      	mov	sp, r7
 8102df8:	bd80      	pop	{r7, pc}
 8102dfa:	bf00      	nop
 8102dfc:	10000060 	.word	0x10000060

08102e00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102e00:	b480      	push	{r7}
 8102e02:	b085      	sub	sp, #20
 8102e04:	af00      	add	r7, sp, #0
 8102e06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102e08:	687b      	ldr	r3, [r7, #4]
 8102e0a:	f003 0307 	and.w	r3, r3, #7
 8102e0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102e10:	4b0c      	ldr	r3, [pc, #48]	; (8102e44 <__NVIC_SetPriorityGrouping+0x44>)
 8102e12:	68db      	ldr	r3, [r3, #12]
 8102e14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102e16:	68ba      	ldr	r2, [r7, #8]
 8102e18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102e1c:	4013      	ands	r3, r2
 8102e1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102e20:	68fb      	ldr	r3, [r7, #12]
 8102e22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102e24:	68bb      	ldr	r3, [r7, #8]
 8102e26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102e28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102e32:	4a04      	ldr	r2, [pc, #16]	; (8102e44 <__NVIC_SetPriorityGrouping+0x44>)
 8102e34:	68bb      	ldr	r3, [r7, #8]
 8102e36:	60d3      	str	r3, [r2, #12]
}
 8102e38:	bf00      	nop
 8102e3a:	3714      	adds	r7, #20
 8102e3c:	46bd      	mov	sp, r7
 8102e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e42:	4770      	bx	lr
 8102e44:	e000ed00 	.word	0xe000ed00

08102e48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102e48:	b480      	push	{r7}
 8102e4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102e4c:	4b04      	ldr	r3, [pc, #16]	; (8102e60 <__NVIC_GetPriorityGrouping+0x18>)
 8102e4e:	68db      	ldr	r3, [r3, #12]
 8102e50:	0a1b      	lsrs	r3, r3, #8
 8102e52:	f003 0307 	and.w	r3, r3, #7
}
 8102e56:	4618      	mov	r0, r3
 8102e58:	46bd      	mov	sp, r7
 8102e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e5e:	4770      	bx	lr
 8102e60:	e000ed00 	.word	0xe000ed00

08102e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102e64:	b480      	push	{r7}
 8102e66:	b083      	sub	sp, #12
 8102e68:	af00      	add	r7, sp, #0
 8102e6a:	4603      	mov	r3, r0
 8102e6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102e72:	2b00      	cmp	r3, #0
 8102e74:	db0b      	blt.n	8102e8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102e76:	88fb      	ldrh	r3, [r7, #6]
 8102e78:	f003 021f 	and.w	r2, r3, #31
 8102e7c:	4907      	ldr	r1, [pc, #28]	; (8102e9c <__NVIC_EnableIRQ+0x38>)
 8102e7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102e82:	095b      	lsrs	r3, r3, #5
 8102e84:	2001      	movs	r0, #1
 8102e86:	fa00 f202 	lsl.w	r2, r0, r2
 8102e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102e8e:	bf00      	nop
 8102e90:	370c      	adds	r7, #12
 8102e92:	46bd      	mov	sp, r7
 8102e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e98:	4770      	bx	lr
 8102e9a:	bf00      	nop
 8102e9c:	e000e100 	.word	0xe000e100

08102ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102ea0:	b480      	push	{r7}
 8102ea2:	b083      	sub	sp, #12
 8102ea4:	af00      	add	r7, sp, #0
 8102ea6:	4603      	mov	r3, r0
 8102ea8:	6039      	str	r1, [r7, #0]
 8102eaa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102eac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102eb0:	2b00      	cmp	r3, #0
 8102eb2:	db0a      	blt.n	8102eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102eb4:	683b      	ldr	r3, [r7, #0]
 8102eb6:	b2da      	uxtb	r2, r3
 8102eb8:	490c      	ldr	r1, [pc, #48]	; (8102eec <__NVIC_SetPriority+0x4c>)
 8102eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ebe:	0112      	lsls	r2, r2, #4
 8102ec0:	b2d2      	uxtb	r2, r2
 8102ec2:	440b      	add	r3, r1
 8102ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102ec8:	e00a      	b.n	8102ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102eca:	683b      	ldr	r3, [r7, #0]
 8102ecc:	b2da      	uxtb	r2, r3
 8102ece:	4908      	ldr	r1, [pc, #32]	; (8102ef0 <__NVIC_SetPriority+0x50>)
 8102ed0:	88fb      	ldrh	r3, [r7, #6]
 8102ed2:	f003 030f 	and.w	r3, r3, #15
 8102ed6:	3b04      	subs	r3, #4
 8102ed8:	0112      	lsls	r2, r2, #4
 8102eda:	b2d2      	uxtb	r2, r2
 8102edc:	440b      	add	r3, r1
 8102ede:	761a      	strb	r2, [r3, #24]
}
 8102ee0:	bf00      	nop
 8102ee2:	370c      	adds	r7, #12
 8102ee4:	46bd      	mov	sp, r7
 8102ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eea:	4770      	bx	lr
 8102eec:	e000e100 	.word	0xe000e100
 8102ef0:	e000ed00 	.word	0xe000ed00

08102ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102ef4:	b480      	push	{r7}
 8102ef6:	b089      	sub	sp, #36	; 0x24
 8102ef8:	af00      	add	r7, sp, #0
 8102efa:	60f8      	str	r0, [r7, #12]
 8102efc:	60b9      	str	r1, [r7, #8]
 8102efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102f00:	68fb      	ldr	r3, [r7, #12]
 8102f02:	f003 0307 	and.w	r3, r3, #7
 8102f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102f08:	69fb      	ldr	r3, [r7, #28]
 8102f0a:	f1c3 0307 	rsb	r3, r3, #7
 8102f0e:	2b04      	cmp	r3, #4
 8102f10:	bf28      	it	cs
 8102f12:	2304      	movcs	r3, #4
 8102f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102f16:	69fb      	ldr	r3, [r7, #28]
 8102f18:	3304      	adds	r3, #4
 8102f1a:	2b06      	cmp	r3, #6
 8102f1c:	d902      	bls.n	8102f24 <NVIC_EncodePriority+0x30>
 8102f1e:	69fb      	ldr	r3, [r7, #28]
 8102f20:	3b03      	subs	r3, #3
 8102f22:	e000      	b.n	8102f26 <NVIC_EncodePriority+0x32>
 8102f24:	2300      	movs	r3, #0
 8102f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102f28:	f04f 32ff 	mov.w	r2, #4294967295
 8102f2c:	69bb      	ldr	r3, [r7, #24]
 8102f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8102f32:	43da      	mvns	r2, r3
 8102f34:	68bb      	ldr	r3, [r7, #8]
 8102f36:	401a      	ands	r2, r3
 8102f38:	697b      	ldr	r3, [r7, #20]
 8102f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8102f40:	697b      	ldr	r3, [r7, #20]
 8102f42:	fa01 f303 	lsl.w	r3, r1, r3
 8102f46:	43d9      	mvns	r1, r3
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102f4c:	4313      	orrs	r3, r2
         );
}
 8102f4e:	4618      	mov	r0, r3
 8102f50:	3724      	adds	r7, #36	; 0x24
 8102f52:	46bd      	mov	sp, r7
 8102f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f58:	4770      	bx	lr
	...

08102f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102f5c:	b580      	push	{r7, lr}
 8102f5e:	b082      	sub	sp, #8
 8102f60:	af00      	add	r7, sp, #0
 8102f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	3b01      	subs	r3, #1
 8102f68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102f6c:	d301      	bcc.n	8102f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102f6e:	2301      	movs	r3, #1
 8102f70:	e00f      	b.n	8102f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102f72:	4a0a      	ldr	r2, [pc, #40]	; (8102f9c <SysTick_Config+0x40>)
 8102f74:	687b      	ldr	r3, [r7, #4]
 8102f76:	3b01      	subs	r3, #1
 8102f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102f7a:	210f      	movs	r1, #15
 8102f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8102f80:	f7ff ff8e 	bl	8102ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102f84:	4b05      	ldr	r3, [pc, #20]	; (8102f9c <SysTick_Config+0x40>)
 8102f86:	2200      	movs	r2, #0
 8102f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102f8a:	4b04      	ldr	r3, [pc, #16]	; (8102f9c <SysTick_Config+0x40>)
 8102f8c:	2207      	movs	r2, #7
 8102f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102f90:	2300      	movs	r3, #0
}
 8102f92:	4618      	mov	r0, r3
 8102f94:	3708      	adds	r7, #8
 8102f96:	46bd      	mov	sp, r7
 8102f98:	bd80      	pop	{r7, pc}
 8102f9a:	bf00      	nop
 8102f9c:	e000e010 	.word	0xe000e010

08102fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102fa0:	b580      	push	{r7, lr}
 8102fa2:	b082      	sub	sp, #8
 8102fa4:	af00      	add	r7, sp, #0
 8102fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102fa8:	6878      	ldr	r0, [r7, #4]
 8102faa:	f7ff ff29 	bl	8102e00 <__NVIC_SetPriorityGrouping>
}
 8102fae:	bf00      	nop
 8102fb0:	3708      	adds	r7, #8
 8102fb2:	46bd      	mov	sp, r7
 8102fb4:	bd80      	pop	{r7, pc}

08102fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102fb6:	b580      	push	{r7, lr}
 8102fb8:	b086      	sub	sp, #24
 8102fba:	af00      	add	r7, sp, #0
 8102fbc:	4603      	mov	r3, r0
 8102fbe:	60b9      	str	r1, [r7, #8]
 8102fc0:	607a      	str	r2, [r7, #4]
 8102fc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102fc4:	f7ff ff40 	bl	8102e48 <__NVIC_GetPriorityGrouping>
 8102fc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102fca:	687a      	ldr	r2, [r7, #4]
 8102fcc:	68b9      	ldr	r1, [r7, #8]
 8102fce:	6978      	ldr	r0, [r7, #20]
 8102fd0:	f7ff ff90 	bl	8102ef4 <NVIC_EncodePriority>
 8102fd4:	4602      	mov	r2, r0
 8102fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102fda:	4611      	mov	r1, r2
 8102fdc:	4618      	mov	r0, r3
 8102fde:	f7ff ff5f 	bl	8102ea0 <__NVIC_SetPriority>
}
 8102fe2:	bf00      	nop
 8102fe4:	3718      	adds	r7, #24
 8102fe6:	46bd      	mov	sp, r7
 8102fe8:	bd80      	pop	{r7, pc}

08102fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102fea:	b580      	push	{r7, lr}
 8102fec:	b082      	sub	sp, #8
 8102fee:	af00      	add	r7, sp, #0
 8102ff0:	4603      	mov	r3, r0
 8102ff2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ff8:	4618      	mov	r0, r3
 8102ffa:	f7ff ff33 	bl	8102e64 <__NVIC_EnableIRQ>
}
 8102ffe:	bf00      	nop
 8103000:	3708      	adds	r7, #8
 8103002:	46bd      	mov	sp, r7
 8103004:	bd80      	pop	{r7, pc}

08103006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103006:	b580      	push	{r7, lr}
 8103008:	b082      	sub	sp, #8
 810300a:	af00      	add	r7, sp, #0
 810300c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810300e:	6878      	ldr	r0, [r7, #4]
 8103010:	f7ff ffa4 	bl	8102f5c <SysTick_Config>
 8103014:	4603      	mov	r3, r0
}
 8103016:	4618      	mov	r0, r3
 8103018:	3708      	adds	r7, #8
 810301a:	46bd      	mov	sp, r7
 810301c:	bd80      	pop	{r7, pc}
	...

08103020 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8103020:	b480      	push	{r7}
 8103022:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103024:	4b07      	ldr	r3, [pc, #28]	; (8103044 <HAL_GetCurrentCPUID+0x24>)
 8103026:	681b      	ldr	r3, [r3, #0]
 8103028:	091b      	lsrs	r3, r3, #4
 810302a:	f003 030f 	and.w	r3, r3, #15
 810302e:	2b07      	cmp	r3, #7
 8103030:	d101      	bne.n	8103036 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8103032:	2303      	movs	r3, #3
 8103034:	e000      	b.n	8103038 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103036:	2301      	movs	r3, #1
  }
}
 8103038:	4618      	mov	r0, r3
 810303a:	46bd      	mov	sp, r7
 810303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103040:	4770      	bx	lr
 8103042:	bf00      	nop
 8103044:	e000ed00 	.word	0xe000ed00

08103048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103048:	b480      	push	{r7}
 810304a:	b089      	sub	sp, #36	; 0x24
 810304c:	af00      	add	r7, sp, #0
 810304e:	6078      	str	r0, [r7, #4]
 8103050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8103052:	2300      	movs	r3, #0
 8103054:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103056:	4b89      	ldr	r3, [pc, #548]	; (810327c <HAL_GPIO_Init+0x234>)
 8103058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810305a:	e194      	b.n	8103386 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810305c:	683b      	ldr	r3, [r7, #0]
 810305e:	681a      	ldr	r2, [r3, #0]
 8103060:	2101      	movs	r1, #1
 8103062:	69fb      	ldr	r3, [r7, #28]
 8103064:	fa01 f303 	lsl.w	r3, r1, r3
 8103068:	4013      	ands	r3, r2
 810306a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810306c:	693b      	ldr	r3, [r7, #16]
 810306e:	2b00      	cmp	r3, #0
 8103070:	f000 8186 	beq.w	8103380 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103074:	683b      	ldr	r3, [r7, #0]
 8103076:	685b      	ldr	r3, [r3, #4]
 8103078:	f003 0303 	and.w	r3, r3, #3
 810307c:	2b01      	cmp	r3, #1
 810307e:	d005      	beq.n	810308c <HAL_GPIO_Init+0x44>
 8103080:	683b      	ldr	r3, [r7, #0]
 8103082:	685b      	ldr	r3, [r3, #4]
 8103084:	f003 0303 	and.w	r3, r3, #3
 8103088:	2b02      	cmp	r3, #2
 810308a:	d130      	bne.n	81030ee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	689b      	ldr	r3, [r3, #8]
 8103090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103092:	69fb      	ldr	r3, [r7, #28]
 8103094:	005b      	lsls	r3, r3, #1
 8103096:	2203      	movs	r2, #3
 8103098:	fa02 f303 	lsl.w	r3, r2, r3
 810309c:	43db      	mvns	r3, r3
 810309e:	69ba      	ldr	r2, [r7, #24]
 81030a0:	4013      	ands	r3, r2
 81030a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81030a4:	683b      	ldr	r3, [r7, #0]
 81030a6:	68da      	ldr	r2, [r3, #12]
 81030a8:	69fb      	ldr	r3, [r7, #28]
 81030aa:	005b      	lsls	r3, r3, #1
 81030ac:	fa02 f303 	lsl.w	r3, r2, r3
 81030b0:	69ba      	ldr	r2, [r7, #24]
 81030b2:	4313      	orrs	r3, r2
 81030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	69ba      	ldr	r2, [r7, #24]
 81030ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	685b      	ldr	r3, [r3, #4]
 81030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81030c2:	2201      	movs	r2, #1
 81030c4:	69fb      	ldr	r3, [r7, #28]
 81030c6:	fa02 f303 	lsl.w	r3, r2, r3
 81030ca:	43db      	mvns	r3, r3
 81030cc:	69ba      	ldr	r2, [r7, #24]
 81030ce:	4013      	ands	r3, r2
 81030d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81030d2:	683b      	ldr	r3, [r7, #0]
 81030d4:	685b      	ldr	r3, [r3, #4]
 81030d6:	091b      	lsrs	r3, r3, #4
 81030d8:	f003 0201 	and.w	r2, r3, #1
 81030dc:	69fb      	ldr	r3, [r7, #28]
 81030de:	fa02 f303 	lsl.w	r3, r2, r3
 81030e2:	69ba      	ldr	r2, [r7, #24]
 81030e4:	4313      	orrs	r3, r2
 81030e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	69ba      	ldr	r2, [r7, #24]
 81030ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81030ee:	683b      	ldr	r3, [r7, #0]
 81030f0:	685b      	ldr	r3, [r3, #4]
 81030f2:	f003 0303 	and.w	r3, r3, #3
 81030f6:	2b03      	cmp	r3, #3
 81030f8:	d017      	beq.n	810312a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81030fa:	687b      	ldr	r3, [r7, #4]
 81030fc:	68db      	ldr	r3, [r3, #12]
 81030fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103100:	69fb      	ldr	r3, [r7, #28]
 8103102:	005b      	lsls	r3, r3, #1
 8103104:	2203      	movs	r2, #3
 8103106:	fa02 f303 	lsl.w	r3, r2, r3
 810310a:	43db      	mvns	r3, r3
 810310c:	69ba      	ldr	r2, [r7, #24]
 810310e:	4013      	ands	r3, r2
 8103110:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8103112:	683b      	ldr	r3, [r7, #0]
 8103114:	689a      	ldr	r2, [r3, #8]
 8103116:	69fb      	ldr	r3, [r7, #28]
 8103118:	005b      	lsls	r3, r3, #1
 810311a:	fa02 f303 	lsl.w	r3, r2, r3
 810311e:	69ba      	ldr	r2, [r7, #24]
 8103120:	4313      	orrs	r3, r2
 8103122:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	69ba      	ldr	r2, [r7, #24]
 8103128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810312a:	683b      	ldr	r3, [r7, #0]
 810312c:	685b      	ldr	r3, [r3, #4]
 810312e:	f003 0303 	and.w	r3, r3, #3
 8103132:	2b02      	cmp	r3, #2
 8103134:	d123      	bne.n	810317e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103136:	69fb      	ldr	r3, [r7, #28]
 8103138:	08da      	lsrs	r2, r3, #3
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	3208      	adds	r2, #8
 810313e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8103142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103144:	69fb      	ldr	r3, [r7, #28]
 8103146:	f003 0307 	and.w	r3, r3, #7
 810314a:	009b      	lsls	r3, r3, #2
 810314c:	220f      	movs	r2, #15
 810314e:	fa02 f303 	lsl.w	r3, r2, r3
 8103152:	43db      	mvns	r3, r3
 8103154:	69ba      	ldr	r2, [r7, #24]
 8103156:	4013      	ands	r3, r2
 8103158:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810315a:	683b      	ldr	r3, [r7, #0]
 810315c:	691a      	ldr	r2, [r3, #16]
 810315e:	69fb      	ldr	r3, [r7, #28]
 8103160:	f003 0307 	and.w	r3, r3, #7
 8103164:	009b      	lsls	r3, r3, #2
 8103166:	fa02 f303 	lsl.w	r3, r2, r3
 810316a:	69ba      	ldr	r2, [r7, #24]
 810316c:	4313      	orrs	r3, r2
 810316e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103170:	69fb      	ldr	r3, [r7, #28]
 8103172:	08da      	lsrs	r2, r3, #3
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	3208      	adds	r2, #8
 8103178:	69b9      	ldr	r1, [r7, #24]
 810317a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810317e:	687b      	ldr	r3, [r7, #4]
 8103180:	681b      	ldr	r3, [r3, #0]
 8103182:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103184:	69fb      	ldr	r3, [r7, #28]
 8103186:	005b      	lsls	r3, r3, #1
 8103188:	2203      	movs	r2, #3
 810318a:	fa02 f303 	lsl.w	r3, r2, r3
 810318e:	43db      	mvns	r3, r3
 8103190:	69ba      	ldr	r2, [r7, #24]
 8103192:	4013      	ands	r3, r2
 8103194:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103196:	683b      	ldr	r3, [r7, #0]
 8103198:	685b      	ldr	r3, [r3, #4]
 810319a:	f003 0203 	and.w	r2, r3, #3
 810319e:	69fb      	ldr	r3, [r7, #28]
 81031a0:	005b      	lsls	r3, r3, #1
 81031a2:	fa02 f303 	lsl.w	r3, r2, r3
 81031a6:	69ba      	ldr	r2, [r7, #24]
 81031a8:	4313      	orrs	r3, r2
 81031aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	69ba      	ldr	r2, [r7, #24]
 81031b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81031b2:	683b      	ldr	r3, [r7, #0]
 81031b4:	685b      	ldr	r3, [r3, #4]
 81031b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81031ba:	2b00      	cmp	r3, #0
 81031bc:	f000 80e0 	beq.w	8103380 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81031c0:	4b2f      	ldr	r3, [pc, #188]	; (8103280 <HAL_GPIO_Init+0x238>)
 81031c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81031c6:	4a2e      	ldr	r2, [pc, #184]	; (8103280 <HAL_GPIO_Init+0x238>)
 81031c8:	f043 0302 	orr.w	r3, r3, #2
 81031cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81031d0:	4b2b      	ldr	r3, [pc, #172]	; (8103280 <HAL_GPIO_Init+0x238>)
 81031d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81031d6:	f003 0302 	and.w	r3, r3, #2
 81031da:	60fb      	str	r3, [r7, #12]
 81031dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81031de:	4a29      	ldr	r2, [pc, #164]	; (8103284 <HAL_GPIO_Init+0x23c>)
 81031e0:	69fb      	ldr	r3, [r7, #28]
 81031e2:	089b      	lsrs	r3, r3, #2
 81031e4:	3302      	adds	r3, #2
 81031e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81031ec:	69fb      	ldr	r3, [r7, #28]
 81031ee:	f003 0303 	and.w	r3, r3, #3
 81031f2:	009b      	lsls	r3, r3, #2
 81031f4:	220f      	movs	r2, #15
 81031f6:	fa02 f303 	lsl.w	r3, r2, r3
 81031fa:	43db      	mvns	r3, r3
 81031fc:	69ba      	ldr	r2, [r7, #24]
 81031fe:	4013      	ands	r3, r2
 8103200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103202:	687b      	ldr	r3, [r7, #4]
 8103204:	4a20      	ldr	r2, [pc, #128]	; (8103288 <HAL_GPIO_Init+0x240>)
 8103206:	4293      	cmp	r3, r2
 8103208:	d052      	beq.n	81032b0 <HAL_GPIO_Init+0x268>
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	4a1f      	ldr	r2, [pc, #124]	; (810328c <HAL_GPIO_Init+0x244>)
 810320e:	4293      	cmp	r3, r2
 8103210:	d031      	beq.n	8103276 <HAL_GPIO_Init+0x22e>
 8103212:	687b      	ldr	r3, [r7, #4]
 8103214:	4a1e      	ldr	r2, [pc, #120]	; (8103290 <HAL_GPIO_Init+0x248>)
 8103216:	4293      	cmp	r3, r2
 8103218:	d02b      	beq.n	8103272 <HAL_GPIO_Init+0x22a>
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	4a1d      	ldr	r2, [pc, #116]	; (8103294 <HAL_GPIO_Init+0x24c>)
 810321e:	4293      	cmp	r3, r2
 8103220:	d025      	beq.n	810326e <HAL_GPIO_Init+0x226>
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	4a1c      	ldr	r2, [pc, #112]	; (8103298 <HAL_GPIO_Init+0x250>)
 8103226:	4293      	cmp	r3, r2
 8103228:	d01f      	beq.n	810326a <HAL_GPIO_Init+0x222>
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	4a1b      	ldr	r2, [pc, #108]	; (810329c <HAL_GPIO_Init+0x254>)
 810322e:	4293      	cmp	r3, r2
 8103230:	d019      	beq.n	8103266 <HAL_GPIO_Init+0x21e>
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	4a1a      	ldr	r2, [pc, #104]	; (81032a0 <HAL_GPIO_Init+0x258>)
 8103236:	4293      	cmp	r3, r2
 8103238:	d013      	beq.n	8103262 <HAL_GPIO_Init+0x21a>
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	4a19      	ldr	r2, [pc, #100]	; (81032a4 <HAL_GPIO_Init+0x25c>)
 810323e:	4293      	cmp	r3, r2
 8103240:	d00d      	beq.n	810325e <HAL_GPIO_Init+0x216>
 8103242:	687b      	ldr	r3, [r7, #4]
 8103244:	4a18      	ldr	r2, [pc, #96]	; (81032a8 <HAL_GPIO_Init+0x260>)
 8103246:	4293      	cmp	r3, r2
 8103248:	d007      	beq.n	810325a <HAL_GPIO_Init+0x212>
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	4a17      	ldr	r2, [pc, #92]	; (81032ac <HAL_GPIO_Init+0x264>)
 810324e:	4293      	cmp	r3, r2
 8103250:	d101      	bne.n	8103256 <HAL_GPIO_Init+0x20e>
 8103252:	2309      	movs	r3, #9
 8103254:	e02d      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 8103256:	230a      	movs	r3, #10
 8103258:	e02b      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 810325a:	2308      	movs	r3, #8
 810325c:	e029      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 810325e:	2307      	movs	r3, #7
 8103260:	e027      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 8103262:	2306      	movs	r3, #6
 8103264:	e025      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 8103266:	2305      	movs	r3, #5
 8103268:	e023      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 810326a:	2304      	movs	r3, #4
 810326c:	e021      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 810326e:	2303      	movs	r3, #3
 8103270:	e01f      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 8103272:	2302      	movs	r3, #2
 8103274:	e01d      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 8103276:	2301      	movs	r3, #1
 8103278:	e01b      	b.n	81032b2 <HAL_GPIO_Init+0x26a>
 810327a:	bf00      	nop
 810327c:	580000c0 	.word	0x580000c0
 8103280:	58024400 	.word	0x58024400
 8103284:	58000400 	.word	0x58000400
 8103288:	58020000 	.word	0x58020000
 810328c:	58020400 	.word	0x58020400
 8103290:	58020800 	.word	0x58020800
 8103294:	58020c00 	.word	0x58020c00
 8103298:	58021000 	.word	0x58021000
 810329c:	58021400 	.word	0x58021400
 81032a0:	58021800 	.word	0x58021800
 81032a4:	58021c00 	.word	0x58021c00
 81032a8:	58022000 	.word	0x58022000
 81032ac:	58022400 	.word	0x58022400
 81032b0:	2300      	movs	r3, #0
 81032b2:	69fa      	ldr	r2, [r7, #28]
 81032b4:	f002 0203 	and.w	r2, r2, #3
 81032b8:	0092      	lsls	r2, r2, #2
 81032ba:	4093      	lsls	r3, r2
 81032bc:	69ba      	ldr	r2, [r7, #24]
 81032be:	4313      	orrs	r3, r2
 81032c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81032c2:	4938      	ldr	r1, [pc, #224]	; (81033a4 <HAL_GPIO_Init+0x35c>)
 81032c4:	69fb      	ldr	r3, [r7, #28]
 81032c6:	089b      	lsrs	r3, r3, #2
 81032c8:	3302      	adds	r3, #2
 81032ca:	69ba      	ldr	r2, [r7, #24]
 81032cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81032d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81032d8:	693b      	ldr	r3, [r7, #16]
 81032da:	43db      	mvns	r3, r3
 81032dc:	69ba      	ldr	r2, [r7, #24]
 81032de:	4013      	ands	r3, r2
 81032e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81032e2:	683b      	ldr	r3, [r7, #0]
 81032e4:	685b      	ldr	r3, [r3, #4]
 81032e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81032ea:	2b00      	cmp	r3, #0
 81032ec:	d003      	beq.n	81032f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81032ee:	69ba      	ldr	r2, [r7, #24]
 81032f0:	693b      	ldr	r3, [r7, #16]
 81032f2:	4313      	orrs	r3, r2
 81032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81032f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81032fa:	69bb      	ldr	r3, [r7, #24]
 81032fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81032fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103302:	685b      	ldr	r3, [r3, #4]
 8103304:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103306:	693b      	ldr	r3, [r7, #16]
 8103308:	43db      	mvns	r3, r3
 810330a:	69ba      	ldr	r2, [r7, #24]
 810330c:	4013      	ands	r3, r2
 810330e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103310:	683b      	ldr	r3, [r7, #0]
 8103312:	685b      	ldr	r3, [r3, #4]
 8103314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103318:	2b00      	cmp	r3, #0
 810331a:	d003      	beq.n	8103324 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810331c:	69ba      	ldr	r2, [r7, #24]
 810331e:	693b      	ldr	r3, [r7, #16]
 8103320:	4313      	orrs	r3, r2
 8103322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103324:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103328:	69bb      	ldr	r3, [r7, #24]
 810332a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810332c:	697b      	ldr	r3, [r7, #20]
 810332e:	685b      	ldr	r3, [r3, #4]
 8103330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103332:	693b      	ldr	r3, [r7, #16]
 8103334:	43db      	mvns	r3, r3
 8103336:	69ba      	ldr	r2, [r7, #24]
 8103338:	4013      	ands	r3, r2
 810333a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810333c:	683b      	ldr	r3, [r7, #0]
 810333e:	685b      	ldr	r3, [r3, #4]
 8103340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103344:	2b00      	cmp	r3, #0
 8103346:	d003      	beq.n	8103350 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103348:	69ba      	ldr	r2, [r7, #24]
 810334a:	693b      	ldr	r3, [r7, #16]
 810334c:	4313      	orrs	r3, r2
 810334e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103350:	697b      	ldr	r3, [r7, #20]
 8103352:	69ba      	ldr	r2, [r7, #24]
 8103354:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103356:	697b      	ldr	r3, [r7, #20]
 8103358:	681b      	ldr	r3, [r3, #0]
 810335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810335c:	693b      	ldr	r3, [r7, #16]
 810335e:	43db      	mvns	r3, r3
 8103360:	69ba      	ldr	r2, [r7, #24]
 8103362:	4013      	ands	r3, r2
 8103364:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103366:	683b      	ldr	r3, [r7, #0]
 8103368:	685b      	ldr	r3, [r3, #4]
 810336a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810336e:	2b00      	cmp	r3, #0
 8103370:	d003      	beq.n	810337a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103372:	69ba      	ldr	r2, [r7, #24]
 8103374:	693b      	ldr	r3, [r7, #16]
 8103376:	4313      	orrs	r3, r2
 8103378:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810337a:	697b      	ldr	r3, [r7, #20]
 810337c:	69ba      	ldr	r2, [r7, #24]
 810337e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103380:	69fb      	ldr	r3, [r7, #28]
 8103382:	3301      	adds	r3, #1
 8103384:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103386:	683b      	ldr	r3, [r7, #0]
 8103388:	681a      	ldr	r2, [r3, #0]
 810338a:	69fb      	ldr	r3, [r7, #28]
 810338c:	fa22 f303 	lsr.w	r3, r2, r3
 8103390:	2b00      	cmp	r3, #0
 8103392:	f47f ae63 	bne.w	810305c <HAL_GPIO_Init+0x14>
  }
}
 8103396:	bf00      	nop
 8103398:	bf00      	nop
 810339a:	3724      	adds	r7, #36	; 0x24
 810339c:	46bd      	mov	sp, r7
 810339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033a2:	4770      	bx	lr
 81033a4:	58000400 	.word	0x58000400

081033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81033a8:	b480      	push	{r7}
 81033aa:	b083      	sub	sp, #12
 81033ac:	af00      	add	r7, sp, #0
 81033ae:	6078      	str	r0, [r7, #4]
 81033b0:	460b      	mov	r3, r1
 81033b2:	807b      	strh	r3, [r7, #2]
 81033b4:	4613      	mov	r3, r2
 81033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 81033b8:	787b      	ldrb	r3, [r7, #1]
 81033ba:	2b00      	cmp	r3, #0
 81033bc:	d003      	beq.n	81033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 81033be:	887a      	ldrh	r2, [r7, #2]
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 81033c4:	e003      	b.n	81033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81033c6:	887b      	ldrh	r3, [r7, #2]
 81033c8:	041a      	lsls	r2, r3, #16
 81033ca:	687b      	ldr	r3, [r7, #4]
 81033cc:	619a      	str	r2, [r3, #24]
}
 81033ce:	bf00      	nop
 81033d0:	370c      	adds	r7, #12
 81033d2:	46bd      	mov	sp, r7
 81033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033d8:	4770      	bx	lr

081033da <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81033da:	b580      	push	{r7, lr}
 81033dc:	b082      	sub	sp, #8
 81033de:	af00      	add	r7, sp, #0
 81033e0:	4603      	mov	r3, r0
 81033e2:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81033e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81033e8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81033ec:	88fb      	ldrh	r3, [r7, #6]
 81033ee:	4013      	ands	r3, r2
 81033f0:	2b00      	cmp	r3, #0
 81033f2:	d008      	beq.n	8103406 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81033f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81033f8:	88fb      	ldrh	r3, [r7, #6]
 81033fa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81033fe:	88fb      	ldrh	r3, [r7, #6]
 8103400:	4618      	mov	r0, r3
 8103402:	f7ff f9e3 	bl	81027cc <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8103406:	bf00      	nop
 8103408:	3708      	adds	r7, #8
 810340a:	46bd      	mov	sp, r7
 810340c:	bd80      	pop	{r7, pc}
	...

08103410 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103410:	b480      	push	{r7}
 8103412:	b083      	sub	sp, #12
 8103414:	af00      	add	r7, sp, #0
 8103416:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103418:	4b05      	ldr	r3, [pc, #20]	; (8103430 <HAL_HSEM_ActivateNotification+0x20>)
 810341a:	681a      	ldr	r2, [r3, #0]
 810341c:	4904      	ldr	r1, [pc, #16]	; (8103430 <HAL_HSEM_ActivateNotification+0x20>)
 810341e:	687b      	ldr	r3, [r7, #4]
 8103420:	4313      	orrs	r3, r2
 8103422:	600b      	str	r3, [r1, #0]
#endif
}
 8103424:	bf00      	nop
 8103426:	370c      	adds	r7, #12
 8103428:	46bd      	mov	sp, r7
 810342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810342e:	4770      	bx	lr
 8103430:	58026510 	.word	0x58026510

08103434 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103434:	b580      	push	{r7, lr}
 8103436:	b084      	sub	sp, #16
 8103438:	af00      	add	r7, sp, #0
 810343a:	60f8      	str	r0, [r7, #12]
 810343c:	460b      	mov	r3, r1
 810343e:	607a      	str	r2, [r7, #4]
 8103440:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103442:	4b37      	ldr	r3, [pc, #220]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	f023 0201 	bic.w	r2, r3, #1
 810344a:	4935      	ldr	r1, [pc, #212]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 810344c:	68fb      	ldr	r3, [r7, #12]
 810344e:	4313      	orrs	r3, r2
 8103450:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	2b00      	cmp	r3, #0
 8103456:	d123      	bne.n	81034a0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103458:	f7ff fde2 	bl	8103020 <HAL_GetCurrentCPUID>
 810345c:	4603      	mov	r3, r0
 810345e:	2b03      	cmp	r3, #3
 8103460:	d158      	bne.n	8103514 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103462:	4b2f      	ldr	r3, [pc, #188]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103464:	691b      	ldr	r3, [r3, #16]
 8103466:	4a2e      	ldr	r2, [pc, #184]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103468:	f023 0301 	bic.w	r3, r3, #1
 810346c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810346e:	4b2d      	ldr	r3, [pc, #180]	; (8103524 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103470:	691b      	ldr	r3, [r3, #16]
 8103472:	4a2c      	ldr	r2, [pc, #176]	; (8103524 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103474:	f043 0304 	orr.w	r3, r3, #4
 8103478:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810347a:	f3bf 8f4f 	dsb	sy
}
 810347e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103480:	f3bf 8f6f 	isb	sy
}
 8103484:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103486:	7afb      	ldrb	r3, [r7, #11]
 8103488:	2b01      	cmp	r3, #1
 810348a:	d101      	bne.n	8103490 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810348c:	bf30      	wfi
 810348e:	e000      	b.n	8103492 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103490:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103492:	4b24      	ldr	r3, [pc, #144]	; (8103524 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103494:	691b      	ldr	r3, [r3, #16]
 8103496:	4a23      	ldr	r2, [pc, #140]	; (8103524 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103498:	f023 0304 	bic.w	r3, r3, #4
 810349c:	6113      	str	r3, [r2, #16]
 810349e:	e03c      	b.n	810351a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	2b01      	cmp	r3, #1
 81034a4:	d123      	bne.n	81034ee <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81034a6:	f7ff fdbb 	bl	8103020 <HAL_GetCurrentCPUID>
 81034aa:	4603      	mov	r3, r0
 81034ac:	2b01      	cmp	r3, #1
 81034ae:	d133      	bne.n	8103518 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81034b0:	4b1b      	ldr	r3, [pc, #108]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034b2:	695b      	ldr	r3, [r3, #20]
 81034b4:	4a1a      	ldr	r2, [pc, #104]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034b6:	f023 0302 	bic.w	r3, r3, #2
 81034ba:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81034bc:	4b19      	ldr	r3, [pc, #100]	; (8103524 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034be:	691b      	ldr	r3, [r3, #16]
 81034c0:	4a18      	ldr	r2, [pc, #96]	; (8103524 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034c2:	f043 0304 	orr.w	r3, r3, #4
 81034c6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81034c8:	f3bf 8f4f 	dsb	sy
}
 81034cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81034ce:	f3bf 8f6f 	isb	sy
}
 81034d2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81034d4:	7afb      	ldrb	r3, [r7, #11]
 81034d6:	2b01      	cmp	r3, #1
 81034d8:	d101      	bne.n	81034de <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81034da:	bf30      	wfi
 81034dc:	e000      	b.n	81034e0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81034de:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81034e0:	4b10      	ldr	r3, [pc, #64]	; (8103524 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034e2:	691b      	ldr	r3, [r3, #16]
 81034e4:	4a0f      	ldr	r2, [pc, #60]	; (8103524 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034e6:	f023 0304 	bic.w	r3, r3, #4
 81034ea:	6113      	str	r3, [r2, #16]
 81034ec:	e015      	b.n	810351a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81034ee:	f7ff fd97 	bl	8103020 <HAL_GetCurrentCPUID>
 81034f2:	4603      	mov	r3, r0
 81034f4:	2b03      	cmp	r3, #3
 81034f6:	d106      	bne.n	8103506 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81034f8:	4b09      	ldr	r3, [pc, #36]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034fa:	691b      	ldr	r3, [r3, #16]
 81034fc:	4a08      	ldr	r2, [pc, #32]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034fe:	f023 0304 	bic.w	r3, r3, #4
 8103502:	6113      	str	r3, [r2, #16]
 8103504:	e009      	b.n	810351a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103506:	4b06      	ldr	r3, [pc, #24]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103508:	695b      	ldr	r3, [r3, #20]
 810350a:	4a05      	ldr	r2, [pc, #20]	; (8103520 <HAL_PWREx_EnterSTOPMode+0xec>)
 810350c:	f023 0304 	bic.w	r3, r3, #4
 8103510:	6153      	str	r3, [r2, #20]
 8103512:	e002      	b.n	810351a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103514:	bf00      	nop
 8103516:	e000      	b.n	810351a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103518:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810351a:	3710      	adds	r7, #16
 810351c:	46bd      	mov	sp, r7
 810351e:	bd80      	pop	{r7, pc}
 8103520:	58024800 	.word	0x58024800
 8103524:	e000ed00 	.word	0xe000ed00

08103528 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103528:	b580      	push	{r7, lr}
 810352a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810352c:	f7ff fd78 	bl	8103020 <HAL_GetCurrentCPUID>
 8103530:	4603      	mov	r3, r0
 8103532:	2b03      	cmp	r3, #3
 8103534:	d101      	bne.n	810353a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103536:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103538:	e001      	b.n	810353e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810353a:	bf40      	sev
    __WFE ();
 810353c:	bf20      	wfe
}
 810353e:	bf00      	nop
 8103540:	bd80      	pop	{r7, pc}
	...

08103544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103544:	b480      	push	{r7}
 8103546:	b089      	sub	sp, #36	; 0x24
 8103548:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810354a:	4bb3      	ldr	r3, [pc, #716]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810354c:	691b      	ldr	r3, [r3, #16]
 810354e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103552:	2b18      	cmp	r3, #24
 8103554:	f200 8155 	bhi.w	8103802 <HAL_RCC_GetSysClockFreq+0x2be>
 8103558:	a201      	add	r2, pc, #4	; (adr r2, 8103560 <HAL_RCC_GetSysClockFreq+0x1c>)
 810355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810355e:	bf00      	nop
 8103560:	081035c5 	.word	0x081035c5
 8103564:	08103803 	.word	0x08103803
 8103568:	08103803 	.word	0x08103803
 810356c:	08103803 	.word	0x08103803
 8103570:	08103803 	.word	0x08103803
 8103574:	08103803 	.word	0x08103803
 8103578:	08103803 	.word	0x08103803
 810357c:	08103803 	.word	0x08103803
 8103580:	081035eb 	.word	0x081035eb
 8103584:	08103803 	.word	0x08103803
 8103588:	08103803 	.word	0x08103803
 810358c:	08103803 	.word	0x08103803
 8103590:	08103803 	.word	0x08103803
 8103594:	08103803 	.word	0x08103803
 8103598:	08103803 	.word	0x08103803
 810359c:	08103803 	.word	0x08103803
 81035a0:	081035f1 	.word	0x081035f1
 81035a4:	08103803 	.word	0x08103803
 81035a8:	08103803 	.word	0x08103803
 81035ac:	08103803 	.word	0x08103803
 81035b0:	08103803 	.word	0x08103803
 81035b4:	08103803 	.word	0x08103803
 81035b8:	08103803 	.word	0x08103803
 81035bc:	08103803 	.word	0x08103803
 81035c0:	081035f7 	.word	0x081035f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81035c4:	4b94      	ldr	r3, [pc, #592]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	f003 0320 	and.w	r3, r3, #32
 81035cc:	2b00      	cmp	r3, #0
 81035ce:	d009      	beq.n	81035e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81035d0:	4b91      	ldr	r3, [pc, #580]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035d2:	681b      	ldr	r3, [r3, #0]
 81035d4:	08db      	lsrs	r3, r3, #3
 81035d6:	f003 0303 	and.w	r3, r3, #3
 81035da:	4a90      	ldr	r2, [pc, #576]	; (810381c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81035dc:	fa22 f303 	lsr.w	r3, r2, r3
 81035e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81035e2:	e111      	b.n	8103808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81035e4:	4b8d      	ldr	r3, [pc, #564]	; (810381c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81035e6:	61bb      	str	r3, [r7, #24]
    break;
 81035e8:	e10e      	b.n	8103808 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81035ea:	4b8d      	ldr	r3, [pc, #564]	; (8103820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81035ec:	61bb      	str	r3, [r7, #24]
    break;
 81035ee:	e10b      	b.n	8103808 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81035f0:	4b8c      	ldr	r3, [pc, #560]	; (8103824 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81035f2:	61bb      	str	r3, [r7, #24]
    break;
 81035f4:	e108      	b.n	8103808 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81035f6:	4b88      	ldr	r3, [pc, #544]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035fa:	f003 0303 	and.w	r3, r3, #3
 81035fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103600:	4b85      	ldr	r3, [pc, #532]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103604:	091b      	lsrs	r3, r3, #4
 8103606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810360a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810360c:	4b82      	ldr	r3, [pc, #520]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103610:	f003 0301 	and.w	r3, r3, #1
 8103614:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103616:	4b80      	ldr	r3, [pc, #512]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810361a:	08db      	lsrs	r3, r3, #3
 810361c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103620:	68fa      	ldr	r2, [r7, #12]
 8103622:	fb02 f303 	mul.w	r3, r2, r3
 8103626:	ee07 3a90 	vmov	s15, r3
 810362a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810362e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103632:	693b      	ldr	r3, [r7, #16]
 8103634:	2b00      	cmp	r3, #0
 8103636:	f000 80e1 	beq.w	81037fc <HAL_RCC_GetSysClockFreq+0x2b8>
 810363a:	697b      	ldr	r3, [r7, #20]
 810363c:	2b02      	cmp	r3, #2
 810363e:	f000 8083 	beq.w	8103748 <HAL_RCC_GetSysClockFreq+0x204>
 8103642:	697b      	ldr	r3, [r7, #20]
 8103644:	2b02      	cmp	r3, #2
 8103646:	f200 80a1 	bhi.w	810378c <HAL_RCC_GetSysClockFreq+0x248>
 810364a:	697b      	ldr	r3, [r7, #20]
 810364c:	2b00      	cmp	r3, #0
 810364e:	d003      	beq.n	8103658 <HAL_RCC_GetSysClockFreq+0x114>
 8103650:	697b      	ldr	r3, [r7, #20]
 8103652:	2b01      	cmp	r3, #1
 8103654:	d056      	beq.n	8103704 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103656:	e099      	b.n	810378c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103658:	4b6f      	ldr	r3, [pc, #444]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810365a:	681b      	ldr	r3, [r3, #0]
 810365c:	f003 0320 	and.w	r3, r3, #32
 8103660:	2b00      	cmp	r3, #0
 8103662:	d02d      	beq.n	81036c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103664:	4b6c      	ldr	r3, [pc, #432]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103666:	681b      	ldr	r3, [r3, #0]
 8103668:	08db      	lsrs	r3, r3, #3
 810366a:	f003 0303 	and.w	r3, r3, #3
 810366e:	4a6b      	ldr	r2, [pc, #428]	; (810381c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103670:	fa22 f303 	lsr.w	r3, r2, r3
 8103674:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	ee07 3a90 	vmov	s15, r3
 810367c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103680:	693b      	ldr	r3, [r7, #16]
 8103682:	ee07 3a90 	vmov	s15, r3
 8103686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810368a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810368e:	4b62      	ldr	r3, [pc, #392]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103696:	ee07 3a90 	vmov	s15, r3
 810369a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810369e:	ed97 6a02 	vldr	s12, [r7, #8]
 81036a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103828 <HAL_RCC_GetSysClockFreq+0x2e4>
 81036a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81036b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 81036be:	e087      	b.n	81037d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81036c0:	693b      	ldr	r3, [r7, #16]
 81036c2:	ee07 3a90 	vmov	s15, r3
 81036c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 810382c <HAL_RCC_GetSysClockFreq+0x2e8>
 81036ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036d2:	4b51      	ldr	r3, [pc, #324]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81036d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036da:	ee07 3a90 	vmov	s15, r3
 81036de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036e2:	ed97 6a02 	vldr	s12, [r7, #8]
 81036e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103828 <HAL_RCC_GetSysClockFreq+0x2e4>
 81036ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81036f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103702:	e065      	b.n	81037d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103704:	693b      	ldr	r3, [r7, #16]
 8103706:	ee07 3a90 	vmov	s15, r3
 810370a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810370e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103830 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103716:	4b40      	ldr	r3, [pc, #256]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810371a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810371e:	ee07 3a90 	vmov	s15, r3
 8103722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103726:	ed97 6a02 	vldr	s12, [r7, #8]
 810372a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103828 <HAL_RCC_GetSysClockFreq+0x2e4>
 810372e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810373a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810373e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103746:	e043      	b.n	81037d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103748:	693b      	ldr	r3, [r7, #16]
 810374a:	ee07 3a90 	vmov	s15, r3
 810374e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103752:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103834 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810375a:	4b2f      	ldr	r3, [pc, #188]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810375e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103762:	ee07 3a90 	vmov	s15, r3
 8103766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810376a:	ed97 6a02 	vldr	s12, [r7, #8]
 810376e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103828 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810377a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810377e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810378a:	e021      	b.n	81037d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810378c:	693b      	ldr	r3, [r7, #16]
 810378e:	ee07 3a90 	vmov	s15, r3
 8103792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103796:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103830 <HAL_RCC_GetSysClockFreq+0x2ec>
 810379a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810379e:	4b1e      	ldr	r3, [pc, #120]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037a6:	ee07 3a90 	vmov	s15, r3
 81037aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81037b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103828 <HAL_RCC_GetSysClockFreq+0x2e4>
 81037b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81037ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81037d0:	4b11      	ldr	r3, [pc, #68]	; (8103818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037d4:	0a5b      	lsrs	r3, r3, #9
 81037d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81037da:	3301      	adds	r3, #1
 81037dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81037de:	683b      	ldr	r3, [r7, #0]
 81037e0:	ee07 3a90 	vmov	s15, r3
 81037e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81037e8:	edd7 6a07 	vldr	s13, [r7, #28]
 81037ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81037f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81037f4:	ee17 3a90 	vmov	r3, s15
 81037f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81037fa:	e005      	b.n	8103808 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81037fc:	2300      	movs	r3, #0
 81037fe:	61bb      	str	r3, [r7, #24]
    break;
 8103800:	e002      	b.n	8103808 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103802:	4b07      	ldr	r3, [pc, #28]	; (8103820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103804:	61bb      	str	r3, [r7, #24]
    break;
 8103806:	bf00      	nop
  }

  return sysclockfreq;
 8103808:	69bb      	ldr	r3, [r7, #24]
}
 810380a:	4618      	mov	r0, r3
 810380c:	3724      	adds	r7, #36	; 0x24
 810380e:	46bd      	mov	sp, r7
 8103810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103814:	4770      	bx	lr
 8103816:	bf00      	nop
 8103818:	58024400 	.word	0x58024400
 810381c:	03d09000 	.word	0x03d09000
 8103820:	003d0900 	.word	0x003d0900
 8103824:	007a1200 	.word	0x007a1200
 8103828:	46000000 	.word	0x46000000
 810382c:	4c742400 	.word	0x4c742400
 8103830:	4a742400 	.word	0x4a742400
 8103834:	4af42400 	.word	0x4af42400

08103838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103838:	b580      	push	{r7, lr}
 810383a:	b082      	sub	sp, #8
 810383c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810383e:	f7ff fe81 	bl	8103544 <HAL_RCC_GetSysClockFreq>
 8103842:	4602      	mov	r2, r0
 8103844:	4b11      	ldr	r3, [pc, #68]	; (810388c <HAL_RCC_GetHCLKFreq+0x54>)
 8103846:	699b      	ldr	r3, [r3, #24]
 8103848:	0a1b      	lsrs	r3, r3, #8
 810384a:	f003 030f 	and.w	r3, r3, #15
 810384e:	4910      	ldr	r1, [pc, #64]	; (8103890 <HAL_RCC_GetHCLKFreq+0x58>)
 8103850:	5ccb      	ldrb	r3, [r1, r3]
 8103852:	f003 031f 	and.w	r3, r3, #31
 8103856:	fa22 f303 	lsr.w	r3, r2, r3
 810385a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810385c:	4b0b      	ldr	r3, [pc, #44]	; (810388c <HAL_RCC_GetHCLKFreq+0x54>)
 810385e:	699b      	ldr	r3, [r3, #24]
 8103860:	f003 030f 	and.w	r3, r3, #15
 8103864:	4a0a      	ldr	r2, [pc, #40]	; (8103890 <HAL_RCC_GetHCLKFreq+0x58>)
 8103866:	5cd3      	ldrb	r3, [r2, r3]
 8103868:	f003 031f 	and.w	r3, r3, #31
 810386c:	687a      	ldr	r2, [r7, #4]
 810386e:	fa22 f303 	lsr.w	r3, r2, r3
 8103872:	4a08      	ldr	r2, [pc, #32]	; (8103894 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103874:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103876:	4b07      	ldr	r3, [pc, #28]	; (8103894 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103878:	681b      	ldr	r3, [r3, #0]
 810387a:	4a07      	ldr	r2, [pc, #28]	; (8103898 <HAL_RCC_GetHCLKFreq+0x60>)
 810387c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810387e:	4b05      	ldr	r3, [pc, #20]	; (8103894 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103880:	681b      	ldr	r3, [r3, #0]
}
 8103882:	4618      	mov	r0, r3
 8103884:	3708      	adds	r7, #8
 8103886:	46bd      	mov	sp, r7
 8103888:	bd80      	pop	{r7, pc}
 810388a:	bf00      	nop
 810388c:	58024400 	.word	0x58024400
 8103890:	0810e628 	.word	0x0810e628
 8103894:	10000004 	.word	0x10000004
 8103898:	10000000 	.word	0x10000000

0810389c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810389c:	b580      	push	{r7, lr}
 810389e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81038a0:	f7ff ffca 	bl	8103838 <HAL_RCC_GetHCLKFreq>
 81038a4:	4602      	mov	r2, r0
 81038a6:	4b06      	ldr	r3, [pc, #24]	; (81038c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 81038a8:	69db      	ldr	r3, [r3, #28]
 81038aa:	091b      	lsrs	r3, r3, #4
 81038ac:	f003 0307 	and.w	r3, r3, #7
 81038b0:	4904      	ldr	r1, [pc, #16]	; (81038c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 81038b2:	5ccb      	ldrb	r3, [r1, r3]
 81038b4:	f003 031f 	and.w	r3, r3, #31
 81038b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81038bc:	4618      	mov	r0, r3
 81038be:	bd80      	pop	{r7, pc}
 81038c0:	58024400 	.word	0x58024400
 81038c4:	0810e628 	.word	0x0810e628

081038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81038c8:	b580      	push	{r7, lr}
 81038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81038cc:	f7ff ffb4 	bl	8103838 <HAL_RCC_GetHCLKFreq>
 81038d0:	4602      	mov	r2, r0
 81038d2:	4b06      	ldr	r3, [pc, #24]	; (81038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 81038d4:	69db      	ldr	r3, [r3, #28]
 81038d6:	0a1b      	lsrs	r3, r3, #8
 81038d8:	f003 0307 	and.w	r3, r3, #7
 81038dc:	4904      	ldr	r1, [pc, #16]	; (81038f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81038de:	5ccb      	ldrb	r3, [r1, r3]
 81038e0:	f003 031f 	and.w	r3, r3, #31
 81038e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81038e8:	4618      	mov	r0, r3
 81038ea:	bd80      	pop	{r7, pc}
 81038ec:	58024400 	.word	0x58024400
 81038f0:	0810e628 	.word	0x0810e628

081038f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81038f4:	b580      	push	{r7, lr}
 81038f6:	b086      	sub	sp, #24
 81038f8:	af00      	add	r7, sp, #0
 81038fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81038fc:	2300      	movs	r3, #0
 81038fe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103900:	2300      	movs	r3, #0
 8103902:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103904:	687b      	ldr	r3, [r7, #4]
 8103906:	681b      	ldr	r3, [r3, #0]
 8103908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810390c:	2b00      	cmp	r3, #0
 810390e:	d03f      	beq.n	8103990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103914:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103918:	d02a      	beq.n	8103970 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 810391a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810391e:	d824      	bhi.n	810396a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103924:	d018      	beq.n	8103958 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810392a:	d81e      	bhi.n	810396a <HAL_RCCEx_PeriphCLKConfig+0x76>
 810392c:	2b00      	cmp	r3, #0
 810392e:	d003      	beq.n	8103938 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103930:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103934:	d007      	beq.n	8103946 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103936:	e018      	b.n	810396a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103938:	4bab      	ldr	r3, [pc, #684]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810393c:	4aaa      	ldr	r2, [pc, #680]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810393e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103944:	e015      	b.n	8103972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	3304      	adds	r3, #4
 810394a:	2102      	movs	r1, #2
 810394c:	4618      	mov	r0, r3
 810394e:	f001 f9cf 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103952:	4603      	mov	r3, r0
 8103954:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103956:	e00c      	b.n	8103972 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	3324      	adds	r3, #36	; 0x24
 810395c:	2102      	movs	r1, #2
 810395e:	4618      	mov	r0, r3
 8103960:	f001 fa78 	bl	8104e54 <RCCEx_PLL3_Config>
 8103964:	4603      	mov	r3, r0
 8103966:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103968:	e003      	b.n	8103972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810396a:	2301      	movs	r3, #1
 810396c:	75fb      	strb	r3, [r7, #23]
      break;
 810396e:	e000      	b.n	8103972 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103972:	7dfb      	ldrb	r3, [r7, #23]
 8103974:	2b00      	cmp	r3, #0
 8103976:	d109      	bne.n	810398c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103978:	4b9b      	ldr	r3, [pc, #620]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810397a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810397c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103984:	4998      	ldr	r1, [pc, #608]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103986:	4313      	orrs	r3, r2
 8103988:	650b      	str	r3, [r1, #80]	; 0x50
 810398a:	e001      	b.n	8103990 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810398c:	7dfb      	ldrb	r3, [r7, #23]
 810398e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103990:	687b      	ldr	r3, [r7, #4]
 8103992:	681b      	ldr	r3, [r3, #0]
 8103994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103998:	2b00      	cmp	r3, #0
 810399a:	d03d      	beq.n	8103a18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 810399c:	687b      	ldr	r3, [r7, #4]
 810399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81039a0:	2b04      	cmp	r3, #4
 81039a2:	d826      	bhi.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81039a4:	a201      	add	r2, pc, #4	; (adr r2, 81039ac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81039a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81039aa:	bf00      	nop
 81039ac:	081039c1 	.word	0x081039c1
 81039b0:	081039cf 	.word	0x081039cf
 81039b4:	081039e1 	.word	0x081039e1
 81039b8:	081039f9 	.word	0x081039f9
 81039bc:	081039f9 	.word	0x081039f9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039c0:	4b89      	ldr	r3, [pc, #548]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039c4:	4a88      	ldr	r2, [pc, #544]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81039c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81039cc:	e015      	b.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81039ce:	687b      	ldr	r3, [r7, #4]
 81039d0:	3304      	adds	r3, #4
 81039d2:	2100      	movs	r1, #0
 81039d4:	4618      	mov	r0, r3
 81039d6:	f001 f98b 	bl	8104cf0 <RCCEx_PLL2_Config>
 81039da:	4603      	mov	r3, r0
 81039dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81039de:	e00c      	b.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	3324      	adds	r3, #36	; 0x24
 81039e4:	2100      	movs	r1, #0
 81039e6:	4618      	mov	r0, r3
 81039e8:	f001 fa34 	bl	8104e54 <RCCEx_PLL3_Config>
 81039ec:	4603      	mov	r3, r0
 81039ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81039f0:	e003      	b.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81039f2:	2301      	movs	r3, #1
 81039f4:	75fb      	strb	r3, [r7, #23]
      break;
 81039f6:	e000      	b.n	81039fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81039f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039fa:	7dfb      	ldrb	r3, [r7, #23]
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	d109      	bne.n	8103a14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103a00:	4b79      	ldr	r3, [pc, #484]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a04:	f023 0207 	bic.w	r2, r3, #7
 8103a08:	687b      	ldr	r3, [r7, #4]
 8103a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a0c:	4976      	ldr	r1, [pc, #472]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a0e:	4313      	orrs	r3, r2
 8103a10:	650b      	str	r3, [r1, #80]	; 0x50
 8103a12:	e001      	b.n	8103a18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a14:	7dfb      	ldrb	r3, [r7, #23]
 8103a16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103a20:	2b00      	cmp	r3, #0
 8103a22:	d042      	beq.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a2c:	d02b      	beq.n	8103a86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a32:	d825      	bhi.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103a34:	2bc0      	cmp	r3, #192	; 0xc0
 8103a36:	d028      	beq.n	8103a8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103a38:	2bc0      	cmp	r3, #192	; 0xc0
 8103a3a:	d821      	bhi.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103a3c:	2b80      	cmp	r3, #128	; 0x80
 8103a3e:	d016      	beq.n	8103a6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103a40:	2b80      	cmp	r3, #128	; 0x80
 8103a42:	d81d      	bhi.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103a44:	2b00      	cmp	r3, #0
 8103a46:	d002      	beq.n	8103a4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103a48:	2b40      	cmp	r3, #64	; 0x40
 8103a4a:	d007      	beq.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103a4c:	e018      	b.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a4e:	4b66      	ldr	r3, [pc, #408]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a52:	4a65      	ldr	r2, [pc, #404]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103a5a:	e017      	b.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	3304      	adds	r3, #4
 8103a60:	2100      	movs	r1, #0
 8103a62:	4618      	mov	r0, r3
 8103a64:	f001 f944 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103a68:	4603      	mov	r3, r0
 8103a6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103a6c:	e00e      	b.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103a6e:	687b      	ldr	r3, [r7, #4]
 8103a70:	3324      	adds	r3, #36	; 0x24
 8103a72:	2100      	movs	r1, #0
 8103a74:	4618      	mov	r0, r3
 8103a76:	f001 f9ed 	bl	8104e54 <RCCEx_PLL3_Config>
 8103a7a:	4603      	mov	r3, r0
 8103a7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103a7e:	e005      	b.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a80:	2301      	movs	r3, #1
 8103a82:	75fb      	strb	r3, [r7, #23]
      break;
 8103a84:	e002      	b.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103a86:	bf00      	nop
 8103a88:	e000      	b.n	8103a8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a8c:	7dfb      	ldrb	r3, [r7, #23]
 8103a8e:	2b00      	cmp	r3, #0
 8103a90:	d109      	bne.n	8103aa6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103a92:	4b55      	ldr	r3, [pc, #340]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103a9e:	4952      	ldr	r1, [pc, #328]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103aa0:	4313      	orrs	r3, r2
 8103aa2:	650b      	str	r3, [r1, #80]	; 0x50
 8103aa4:	e001      	b.n	8103aaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103aa6:	7dfb      	ldrb	r3, [r7, #23]
 8103aa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103aaa:	687b      	ldr	r3, [r7, #4]
 8103aac:	681b      	ldr	r3, [r3, #0]
 8103aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103ab2:	2b00      	cmp	r3, #0
 8103ab4:	d049      	beq.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103abc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103ac0:	d030      	beq.n	8103b24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103ac2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103ac6:	d82a      	bhi.n	8103b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103ac8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103acc:	d02c      	beq.n	8103b28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103ace:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103ad2:	d824      	bhi.n	8103b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103ad8:	d018      	beq.n	8103b0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103ade:	d81e      	bhi.n	8103b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103ae0:	2b00      	cmp	r3, #0
 8103ae2:	d003      	beq.n	8103aec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103ae4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103ae8:	d007      	beq.n	8103afa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103aea:	e018      	b.n	8103b1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103aec:	4b3e      	ldr	r3, [pc, #248]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103af0:	4a3d      	ldr	r2, [pc, #244]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103af6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103af8:	e017      	b.n	8103b2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103afa:	687b      	ldr	r3, [r7, #4]
 8103afc:	3304      	adds	r3, #4
 8103afe:	2100      	movs	r1, #0
 8103b00:	4618      	mov	r0, r3
 8103b02:	f001 f8f5 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103b06:	4603      	mov	r3, r0
 8103b08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103b0a:	e00e      	b.n	8103b2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b0c:	687b      	ldr	r3, [r7, #4]
 8103b0e:	3324      	adds	r3, #36	; 0x24
 8103b10:	2100      	movs	r1, #0
 8103b12:	4618      	mov	r0, r3
 8103b14:	f001 f99e 	bl	8104e54 <RCCEx_PLL3_Config>
 8103b18:	4603      	mov	r3, r0
 8103b1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b1c:	e005      	b.n	8103b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103b1e:	2301      	movs	r3, #1
 8103b20:	75fb      	strb	r3, [r7, #23]
      break;
 8103b22:	e002      	b.n	8103b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103b24:	bf00      	nop
 8103b26:	e000      	b.n	8103b2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103b28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b2a:	7dfb      	ldrb	r3, [r7, #23]
 8103b2c:	2b00      	cmp	r3, #0
 8103b2e:	d10a      	bne.n	8103b46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103b30:	4b2d      	ldr	r3, [pc, #180]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103b3e:	492a      	ldr	r1, [pc, #168]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103b40:	4313      	orrs	r3, r2
 8103b42:	658b      	str	r3, [r1, #88]	; 0x58
 8103b44:	e001      	b.n	8103b4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b46:	7dfb      	ldrb	r3, [r7, #23]
 8103b48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103b4a:	687b      	ldr	r3, [r7, #4]
 8103b4c:	681b      	ldr	r3, [r3, #0]
 8103b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103b52:	2b00      	cmp	r3, #0
 8103b54:	d04c      	beq.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103b5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103b60:	d030      	beq.n	8103bc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103b66:	d82a      	bhi.n	8103bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103b68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103b6c:	d02c      	beq.n	8103bc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8103b6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103b72:	d824      	bhi.n	8103bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103b74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103b78:	d018      	beq.n	8103bac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103b7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103b7e:	d81e      	bhi.n	8103bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103b80:	2b00      	cmp	r3, #0
 8103b82:	d003      	beq.n	8103b8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103b88:	d007      	beq.n	8103b9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103b8a:	e018      	b.n	8103bbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b8c:	4b16      	ldr	r3, [pc, #88]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b90:	4a15      	ldr	r2, [pc, #84]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103b98:	e017      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b9a:	687b      	ldr	r3, [r7, #4]
 8103b9c:	3304      	adds	r3, #4
 8103b9e:	2100      	movs	r1, #0
 8103ba0:	4618      	mov	r0, r3
 8103ba2:	f001 f8a5 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103ba6:	4603      	mov	r3, r0
 8103ba8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103baa:	e00e      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	3324      	adds	r3, #36	; 0x24
 8103bb0:	2100      	movs	r1, #0
 8103bb2:	4618      	mov	r0, r3
 8103bb4:	f001 f94e 	bl	8104e54 <RCCEx_PLL3_Config>
 8103bb8:	4603      	mov	r3, r0
 8103bba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103bbc:	e005      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103bbe:	2301      	movs	r3, #1
 8103bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8103bc2:	e002      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103bc4:	bf00      	nop
 8103bc6:	e000      	b.n	8103bca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bca:	7dfb      	ldrb	r3, [r7, #23]
 8103bcc:	2b00      	cmp	r3, #0
 8103bce:	d10d      	bne.n	8103bec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103bd0:	4b05      	ldr	r3, [pc, #20]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103bd4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103bde:	4902      	ldr	r1, [pc, #8]	; (8103be8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103be0:	4313      	orrs	r3, r2
 8103be2:	658b      	str	r3, [r1, #88]	; 0x58
 8103be4:	e004      	b.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8103be6:	bf00      	nop
 8103be8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bec:	7dfb      	ldrb	r3, [r7, #23]
 8103bee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	681b      	ldr	r3, [r3, #0]
 8103bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	d032      	beq.n	8103c62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103bfc:	687b      	ldr	r3, [r7, #4]
 8103bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c00:	2b30      	cmp	r3, #48	; 0x30
 8103c02:	d01c      	beq.n	8103c3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103c04:	2b30      	cmp	r3, #48	; 0x30
 8103c06:	d817      	bhi.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103c08:	2b20      	cmp	r3, #32
 8103c0a:	d00c      	beq.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8103c0c:	2b20      	cmp	r3, #32
 8103c0e:	d813      	bhi.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103c10:	2b00      	cmp	r3, #0
 8103c12:	d016      	beq.n	8103c42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8103c14:	2b10      	cmp	r3, #16
 8103c16:	d10f      	bne.n	8103c38 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c18:	4baf      	ldr	r3, [pc, #700]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c1c:	4aae      	ldr	r2, [pc, #696]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103c24:	e00e      	b.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	3304      	adds	r3, #4
 8103c2a:	2102      	movs	r1, #2
 8103c2c:	4618      	mov	r0, r3
 8103c2e:	f001 f85f 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103c32:	4603      	mov	r3, r0
 8103c34:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103c36:	e005      	b.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103c38:	2301      	movs	r3, #1
 8103c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8103c3c:	e002      	b.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103c3e:	bf00      	nop
 8103c40:	e000      	b.n	8103c44 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c44:	7dfb      	ldrb	r3, [r7, #23]
 8103c46:	2b00      	cmp	r3, #0
 8103c48:	d109      	bne.n	8103c5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103c4a:	4ba3      	ldr	r3, [pc, #652]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103c4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103c56:	49a0      	ldr	r1, [pc, #640]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103c58:	4313      	orrs	r3, r2
 8103c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103c5c:	e001      	b.n	8103c62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c5e:	7dfb      	ldrb	r3, [r7, #23]
 8103c60:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103c6a:	2b00      	cmp	r3, #0
 8103c6c:	d047      	beq.n	8103cfe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c76:	d030      	beq.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8103c78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103c7c:	d82a      	bhi.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103c7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103c82:	d02c      	beq.n	8103cde <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8103c84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103c88:	d824      	bhi.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103c8e:	d018      	beq.n	8103cc2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103c90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103c94:	d81e      	bhi.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103c96:	2b00      	cmp	r3, #0
 8103c98:	d003      	beq.n	8103ca2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8103c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103c9e:	d007      	beq.n	8103cb0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103ca0:	e018      	b.n	8103cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ca2:	4b8d      	ldr	r3, [pc, #564]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ca6:	4a8c      	ldr	r2, [pc, #560]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103cae:	e017      	b.n	8103ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103cb0:	687b      	ldr	r3, [r7, #4]
 8103cb2:	3304      	adds	r3, #4
 8103cb4:	2100      	movs	r1, #0
 8103cb6:	4618      	mov	r0, r3
 8103cb8:	f001 f81a 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103cbc:	4603      	mov	r3, r0
 8103cbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103cc0:	e00e      	b.n	8103ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	3324      	adds	r3, #36	; 0x24
 8103cc6:	2100      	movs	r1, #0
 8103cc8:	4618      	mov	r0, r3
 8103cca:	f001 f8c3 	bl	8104e54 <RCCEx_PLL3_Config>
 8103cce:	4603      	mov	r3, r0
 8103cd0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103cd2:	e005      	b.n	8103ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103cd4:	2301      	movs	r3, #1
 8103cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8103cd8:	e002      	b.n	8103ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103cda:	bf00      	nop
 8103cdc:	e000      	b.n	8103ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103cde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ce0:	7dfb      	ldrb	r3, [r7, #23]
 8103ce2:	2b00      	cmp	r3, #0
 8103ce4:	d109      	bne.n	8103cfa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103ce6:	4b7c      	ldr	r3, [pc, #496]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cf2:	4979      	ldr	r1, [pc, #484]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103cf4:	4313      	orrs	r3, r2
 8103cf6:	650b      	str	r3, [r1, #80]	; 0x50
 8103cf8:	e001      	b.n	8103cfe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cfa:	7dfb      	ldrb	r3, [r7, #23]
 8103cfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103cfe:	687b      	ldr	r3, [r7, #4]
 8103d00:	681b      	ldr	r3, [r3, #0]
 8103d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103d06:	2b00      	cmp	r3, #0
 8103d08:	d049      	beq.n	8103d9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103d12:	d02e      	beq.n	8103d72 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8103d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103d18:	d828      	bhi.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d1e:	d02a      	beq.n	8103d76 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8103d20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103d24:	d822      	bhi.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d2a:	d026      	beq.n	8103d7a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8103d2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103d30:	d81c      	bhi.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d36:	d010      	beq.n	8103d5a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103d3c:	d816      	bhi.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103d3e:	2b00      	cmp	r3, #0
 8103d40:	d01d      	beq.n	8103d7e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8103d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d46:	d111      	bne.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103d48:	687b      	ldr	r3, [r7, #4]
 8103d4a:	3304      	adds	r3, #4
 8103d4c:	2101      	movs	r1, #1
 8103d4e:	4618      	mov	r0, r3
 8103d50:	f000 ffce 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103d54:	4603      	mov	r3, r0
 8103d56:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103d58:	e012      	b.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	3324      	adds	r3, #36	; 0x24
 8103d5e:	2101      	movs	r1, #1
 8103d60:	4618      	mov	r0, r3
 8103d62:	f001 f877 	bl	8104e54 <RCCEx_PLL3_Config>
 8103d66:	4603      	mov	r3, r0
 8103d68:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103d6a:	e009      	b.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d6c:	2301      	movs	r3, #1
 8103d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8103d70:	e006      	b.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103d72:	bf00      	nop
 8103d74:	e004      	b.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103d76:	bf00      	nop
 8103d78:	e002      	b.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103d7a:	bf00      	nop
 8103d7c:	e000      	b.n	8103d80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103d7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d80:	7dfb      	ldrb	r3, [r7, #23]
 8103d82:	2b00      	cmp	r3, #0
 8103d84:	d109      	bne.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103d86:	4b54      	ldr	r3, [pc, #336]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d8a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103d92:	4951      	ldr	r1, [pc, #324]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103d94:	4313      	orrs	r3, r2
 8103d96:	650b      	str	r3, [r1, #80]	; 0x50
 8103d98:	e001      	b.n	8103d9e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d9a:	7dfb      	ldrb	r3, [r7, #23]
 8103d9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103da6:	2b00      	cmp	r3, #0
 8103da8:	d04b      	beq.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103daa:	687b      	ldr	r3, [r7, #4]
 8103dac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103db4:	d02e      	beq.n	8103e14 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8103db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103dba:	d828      	bhi.n	8103e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103dc0:	d02a      	beq.n	8103e18 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8103dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103dc6:	d822      	bhi.n	8103e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103dc8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103dcc:	d026      	beq.n	8103e1c <HAL_RCCEx_PeriphCLKConfig+0x528>
 8103dce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103dd2:	d81c      	bhi.n	8103e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103dd8:	d010      	beq.n	8103dfc <HAL_RCCEx_PeriphCLKConfig+0x508>
 8103dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103dde:	d816      	bhi.n	8103e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103de0:	2b00      	cmp	r3, #0
 8103de2:	d01d      	beq.n	8103e20 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8103de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103de8:	d111      	bne.n	8103e0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	3304      	adds	r3, #4
 8103dee:	2101      	movs	r1, #1
 8103df0:	4618      	mov	r0, r3
 8103df2:	f000 ff7d 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103df6:	4603      	mov	r3, r0
 8103df8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103dfa:	e012      	b.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103dfc:	687b      	ldr	r3, [r7, #4]
 8103dfe:	3324      	adds	r3, #36	; 0x24
 8103e00:	2101      	movs	r1, #1
 8103e02:	4618      	mov	r0, r3
 8103e04:	f001 f826 	bl	8104e54 <RCCEx_PLL3_Config>
 8103e08:	4603      	mov	r3, r0
 8103e0a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103e0c:	e009      	b.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103e0e:	2301      	movs	r3, #1
 8103e10:	75fb      	strb	r3, [r7, #23]
      break;
 8103e12:	e006      	b.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103e14:	bf00      	nop
 8103e16:	e004      	b.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103e18:	bf00      	nop
 8103e1a:	e002      	b.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103e1c:	bf00      	nop
 8103e1e:	e000      	b.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e22:	7dfb      	ldrb	r3, [r7, #23]
 8103e24:	2b00      	cmp	r3, #0
 8103e26:	d10a      	bne.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103e28:	4b2b      	ldr	r3, [pc, #172]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e2c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103e36:	4928      	ldr	r1, [pc, #160]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103e38:	4313      	orrs	r3, r2
 8103e3a:	658b      	str	r3, [r1, #88]	; 0x58
 8103e3c:	e001      	b.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e3e:	7dfb      	ldrb	r3, [r7, #23]
 8103e40:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	681b      	ldr	r3, [r3, #0]
 8103e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103e4a:	2b00      	cmp	r3, #0
 8103e4c:	d02f      	beq.n	8103eae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e56:	d00e      	beq.n	8103e76 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103e58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103e5c:	d814      	bhi.n	8103e88 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8103e5e:	2b00      	cmp	r3, #0
 8103e60:	d015      	beq.n	8103e8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103e66:	d10f      	bne.n	8103e88 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e68:	4b1b      	ldr	r3, [pc, #108]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e6c:	4a1a      	ldr	r2, [pc, #104]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103e74:	e00c      	b.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	3304      	adds	r3, #4
 8103e7a:	2101      	movs	r1, #1
 8103e7c:	4618      	mov	r0, r3
 8103e7e:	f000 ff37 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103e82:	4603      	mov	r3, r0
 8103e84:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103e86:	e003      	b.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e88:	2301      	movs	r3, #1
 8103e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8103e8c:	e000      	b.n	8103e90 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8103e8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e90:	7dfb      	ldrb	r3, [r7, #23]
 8103e92:	2b00      	cmp	r3, #0
 8103e94:	d109      	bne.n	8103eaa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103e96:	4b10      	ldr	r3, [pc, #64]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103ea2:	490d      	ldr	r1, [pc, #52]	; (8103ed8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103ea4:	4313      	orrs	r3, r2
 8103ea6:	650b      	str	r3, [r1, #80]	; 0x50
 8103ea8:	e001      	b.n	8103eae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103eaa:	7dfb      	ldrb	r3, [r7, #23]
 8103eac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103eae:	687b      	ldr	r3, [r7, #4]
 8103eb0:	681b      	ldr	r3, [r3, #0]
 8103eb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103eb6:	2b00      	cmp	r3, #0
 8103eb8:	d033      	beq.n	8103f22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103eba:	687b      	ldr	r3, [r7, #4]
 8103ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103ebe:	2b03      	cmp	r3, #3
 8103ec0:	d81c      	bhi.n	8103efc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103ec2:	a201      	add	r2, pc, #4	; (adr r2, 8103ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8103ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103ec8:	08103f03 	.word	0x08103f03
 8103ecc:	08103edd 	.word	0x08103edd
 8103ed0:	08103eeb 	.word	0x08103eeb
 8103ed4:	08103f03 	.word	0x08103f03
 8103ed8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103edc:	4bb9      	ldr	r3, [pc, #740]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ee0:	4ab8      	ldr	r2, [pc, #736]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103ee8:	e00c      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103eea:	687b      	ldr	r3, [r7, #4]
 8103eec:	3304      	adds	r3, #4
 8103eee:	2102      	movs	r1, #2
 8103ef0:	4618      	mov	r0, r3
 8103ef2:	f000 fefd 	bl	8104cf0 <RCCEx_PLL2_Config>
 8103ef6:	4603      	mov	r3, r0
 8103ef8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103efa:	e003      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103efc:	2301      	movs	r3, #1
 8103efe:	75fb      	strb	r3, [r7, #23]
      break;
 8103f00:	e000      	b.n	8103f04 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f04:	7dfb      	ldrb	r3, [r7, #23]
 8103f06:	2b00      	cmp	r3, #0
 8103f08:	d109      	bne.n	8103f1e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103f0a:	4bae      	ldr	r3, [pc, #696]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103f0e:	f023 0203 	bic.w	r2, r3, #3
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f16:	49ab      	ldr	r1, [pc, #684]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103f18:	4313      	orrs	r3, r2
 8103f1a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103f1c:	e001      	b.n	8103f22 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f1e:	7dfb      	ldrb	r3, [r7, #23]
 8103f20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103f22:	687b      	ldr	r3, [r7, #4]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103f2a:	2b00      	cmp	r3, #0
 8103f2c:	f000 8088 	beq.w	8104040 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103f30:	4ba5      	ldr	r3, [pc, #660]	; (81041c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103f32:	681b      	ldr	r3, [r3, #0]
 8103f34:	4aa4      	ldr	r2, [pc, #656]	; (81041c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103f36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103f3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103f3c:	f7fe ff30 	bl	8102da0 <HAL_GetTick>
 8103f40:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f42:	e009      	b.n	8103f58 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103f44:	f7fe ff2c 	bl	8102da0 <HAL_GetTick>
 8103f48:	4602      	mov	r2, r0
 8103f4a:	693b      	ldr	r3, [r7, #16]
 8103f4c:	1ad3      	subs	r3, r2, r3
 8103f4e:	2b64      	cmp	r3, #100	; 0x64
 8103f50:	d902      	bls.n	8103f58 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103f52:	2303      	movs	r3, #3
 8103f54:	75fb      	strb	r3, [r7, #23]
        break;
 8103f56:	e005      	b.n	8103f64 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f58:	4b9b      	ldr	r3, [pc, #620]	; (81041c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103f5a:	681b      	ldr	r3, [r3, #0]
 8103f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103f60:	2b00      	cmp	r3, #0
 8103f62:	d0ef      	beq.n	8103f44 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103f64:	7dfb      	ldrb	r3, [r7, #23]
 8103f66:	2b00      	cmp	r3, #0
 8103f68:	d168      	bne.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103f6a:	4b96      	ldr	r3, [pc, #600]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103f6c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103f6e:	687b      	ldr	r3, [r7, #4]
 8103f70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103f74:	4053      	eors	r3, r2
 8103f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103f7a:	2b00      	cmp	r3, #0
 8103f7c:	d013      	beq.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103f7e:	4b91      	ldr	r3, [pc, #580]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103f86:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103f88:	4b8e      	ldr	r3, [pc, #568]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f8c:	4a8d      	ldr	r2, [pc, #564]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103f92:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103f94:	4b8b      	ldr	r3, [pc, #556]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f98:	4a8a      	ldr	r2, [pc, #552]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103f9e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103fa0:	4a88      	ldr	r2, [pc, #544]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103fa2:	68fb      	ldr	r3, [r7, #12]
 8103fa4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103fa6:	687b      	ldr	r3, [r7, #4]
 8103fa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103fb0:	d115      	bne.n	8103fde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103fb2:	f7fe fef5 	bl	8102da0 <HAL_GetTick>
 8103fb6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103fb8:	e00b      	b.n	8103fd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103fba:	f7fe fef1 	bl	8102da0 <HAL_GetTick>
 8103fbe:	4602      	mov	r2, r0
 8103fc0:	693b      	ldr	r3, [r7, #16]
 8103fc2:	1ad3      	subs	r3, r2, r3
 8103fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8103fc8:	4293      	cmp	r3, r2
 8103fca:	d902      	bls.n	8103fd2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103fcc:	2303      	movs	r3, #3
 8103fce:	75fb      	strb	r3, [r7, #23]
            break;
 8103fd0:	e005      	b.n	8103fde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103fd2:	4b7c      	ldr	r3, [pc, #496]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103fd6:	f003 0302 	and.w	r3, r3, #2
 8103fda:	2b00      	cmp	r3, #0
 8103fdc:	d0ed      	beq.n	8103fba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103fde:	7dfb      	ldrb	r3, [r7, #23]
 8103fe0:	2b00      	cmp	r3, #0
 8103fe2:	d128      	bne.n	8104036 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103ff2:	d10f      	bne.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103ff4:	4b73      	ldr	r3, [pc, #460]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103ff6:	691b      	ldr	r3, [r3, #16]
 8103ff8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104002:	091b      	lsrs	r3, r3, #4
 8104004:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8104008:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 810400c:	496d      	ldr	r1, [pc, #436]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810400e:	4313      	orrs	r3, r2
 8104010:	610b      	str	r3, [r1, #16]
 8104012:	e005      	b.n	8104020 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8104014:	4b6b      	ldr	r3, [pc, #428]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104016:	691b      	ldr	r3, [r3, #16]
 8104018:	4a6a      	ldr	r2, [pc, #424]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810401a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810401e:	6113      	str	r3, [r2, #16]
 8104020:	4b68      	ldr	r3, [pc, #416]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8104024:	687b      	ldr	r3, [r7, #4]
 8104026:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810402a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810402e:	4965      	ldr	r1, [pc, #404]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104030:	4313      	orrs	r3, r2
 8104032:	670b      	str	r3, [r1, #112]	; 0x70
 8104034:	e004      	b.n	8104040 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104036:	7dfb      	ldrb	r3, [r7, #23]
 8104038:	75bb      	strb	r3, [r7, #22]
 810403a:	e001      	b.n	8104040 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810403c:	7dfb      	ldrb	r3, [r7, #23]
 810403e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	681b      	ldr	r3, [r3, #0]
 8104044:	f003 0301 	and.w	r3, r3, #1
 8104048:	2b00      	cmp	r3, #0
 810404a:	d07e      	beq.n	810414a <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810404c:	687b      	ldr	r3, [r7, #4]
 810404e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104050:	2b28      	cmp	r3, #40	; 0x28
 8104052:	d867      	bhi.n	8104124 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104054:	a201      	add	r2, pc, #4	; (adr r2, 810405c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810405a:	bf00      	nop
 810405c:	0810412b 	.word	0x0810412b
 8104060:	08104125 	.word	0x08104125
 8104064:	08104125 	.word	0x08104125
 8104068:	08104125 	.word	0x08104125
 810406c:	08104125 	.word	0x08104125
 8104070:	08104125 	.word	0x08104125
 8104074:	08104125 	.word	0x08104125
 8104078:	08104125 	.word	0x08104125
 810407c:	08104101 	.word	0x08104101
 8104080:	08104125 	.word	0x08104125
 8104084:	08104125 	.word	0x08104125
 8104088:	08104125 	.word	0x08104125
 810408c:	08104125 	.word	0x08104125
 8104090:	08104125 	.word	0x08104125
 8104094:	08104125 	.word	0x08104125
 8104098:	08104125 	.word	0x08104125
 810409c:	08104113 	.word	0x08104113
 81040a0:	08104125 	.word	0x08104125
 81040a4:	08104125 	.word	0x08104125
 81040a8:	08104125 	.word	0x08104125
 81040ac:	08104125 	.word	0x08104125
 81040b0:	08104125 	.word	0x08104125
 81040b4:	08104125 	.word	0x08104125
 81040b8:	08104125 	.word	0x08104125
 81040bc:	0810412b 	.word	0x0810412b
 81040c0:	08104125 	.word	0x08104125
 81040c4:	08104125 	.word	0x08104125
 81040c8:	08104125 	.word	0x08104125
 81040cc:	08104125 	.word	0x08104125
 81040d0:	08104125 	.word	0x08104125
 81040d4:	08104125 	.word	0x08104125
 81040d8:	08104125 	.word	0x08104125
 81040dc:	0810412b 	.word	0x0810412b
 81040e0:	08104125 	.word	0x08104125
 81040e4:	08104125 	.word	0x08104125
 81040e8:	08104125 	.word	0x08104125
 81040ec:	08104125 	.word	0x08104125
 81040f0:	08104125 	.word	0x08104125
 81040f4:	08104125 	.word	0x08104125
 81040f8:	08104125 	.word	0x08104125
 81040fc:	0810412b 	.word	0x0810412b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	3304      	adds	r3, #4
 8104104:	2101      	movs	r1, #1
 8104106:	4618      	mov	r0, r3
 8104108:	f000 fdf2 	bl	8104cf0 <RCCEx_PLL2_Config>
 810410c:	4603      	mov	r3, r0
 810410e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104110:	e00c      	b.n	810412c <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	3324      	adds	r3, #36	; 0x24
 8104116:	2101      	movs	r1, #1
 8104118:	4618      	mov	r0, r3
 810411a:	f000 fe9b 	bl	8104e54 <RCCEx_PLL3_Config>
 810411e:	4603      	mov	r3, r0
 8104120:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8104122:	e003      	b.n	810412c <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104124:	2301      	movs	r3, #1
 8104126:	75fb      	strb	r3, [r7, #23]
      break;
 8104128:	e000      	b.n	810412c <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 810412a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810412c:	7dfb      	ldrb	r3, [r7, #23]
 810412e:	2b00      	cmp	r3, #0
 8104130:	d109      	bne.n	8104146 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104132:	4b24      	ldr	r3, [pc, #144]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104136:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810413e:	4921      	ldr	r1, [pc, #132]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104140:	4313      	orrs	r3, r2
 8104142:	654b      	str	r3, [r1, #84]	; 0x54
 8104144:	e001      	b.n	810414a <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104146:	7dfb      	ldrb	r3, [r7, #23]
 8104148:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810414a:	687b      	ldr	r3, [r7, #4]
 810414c:	681b      	ldr	r3, [r3, #0]
 810414e:	f003 0302 	and.w	r3, r3, #2
 8104152:	2b00      	cmp	r3, #0
 8104154:	d03c      	beq.n	81041d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104156:	687b      	ldr	r3, [r7, #4]
 8104158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810415a:	2b05      	cmp	r3, #5
 810415c:	d820      	bhi.n	81041a0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810415e:	a201      	add	r2, pc, #4	; (adr r2, 8104164 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8104160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104164:	081041a7 	.word	0x081041a7
 8104168:	0810417d 	.word	0x0810417d
 810416c:	0810418f 	.word	0x0810418f
 8104170:	081041a7 	.word	0x081041a7
 8104174:	081041a7 	.word	0x081041a7
 8104178:	081041a7 	.word	0x081041a7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	3304      	adds	r3, #4
 8104180:	2101      	movs	r1, #1
 8104182:	4618      	mov	r0, r3
 8104184:	f000 fdb4 	bl	8104cf0 <RCCEx_PLL2_Config>
 8104188:	4603      	mov	r3, r0
 810418a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810418c:	e00c      	b.n	81041a8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810418e:	687b      	ldr	r3, [r7, #4]
 8104190:	3324      	adds	r3, #36	; 0x24
 8104192:	2101      	movs	r1, #1
 8104194:	4618      	mov	r0, r3
 8104196:	f000 fe5d 	bl	8104e54 <RCCEx_PLL3_Config>
 810419a:	4603      	mov	r3, r0
 810419c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810419e:	e003      	b.n	81041a8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81041a0:	2301      	movs	r3, #1
 81041a2:	75fb      	strb	r3, [r7, #23]
      break;
 81041a4:	e000      	b.n	81041a8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81041a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041a8:	7dfb      	ldrb	r3, [r7, #23]
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	d10e      	bne.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81041ae:	4b05      	ldr	r3, [pc, #20]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81041b2:	f023 0207 	bic.w	r2, r3, #7
 81041b6:	687b      	ldr	r3, [r7, #4]
 81041b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81041ba:	4902      	ldr	r1, [pc, #8]	; (81041c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81041bc:	4313      	orrs	r3, r2
 81041be:	654b      	str	r3, [r1, #84]	; 0x54
 81041c0:	e006      	b.n	81041d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 81041c2:	bf00      	nop
 81041c4:	58024400 	.word	0x58024400
 81041c8:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 81041cc:	7dfb      	ldrb	r3, [r7, #23]
 81041ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81041d0:	687b      	ldr	r3, [r7, #4]
 81041d2:	681b      	ldr	r3, [r3, #0]
 81041d4:	f003 0304 	and.w	r3, r3, #4
 81041d8:	2b00      	cmp	r3, #0
 81041da:	d039      	beq.n	8104250 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81041e2:	2b05      	cmp	r3, #5
 81041e4:	d820      	bhi.n	8104228 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81041e6:	a201      	add	r2, pc, #4	; (adr r2, 81041ec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81041e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041ec:	0810422f 	.word	0x0810422f
 81041f0:	08104205 	.word	0x08104205
 81041f4:	08104217 	.word	0x08104217
 81041f8:	0810422f 	.word	0x0810422f
 81041fc:	0810422f 	.word	0x0810422f
 8104200:	0810422f 	.word	0x0810422f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	3304      	adds	r3, #4
 8104208:	2101      	movs	r1, #1
 810420a:	4618      	mov	r0, r3
 810420c:	f000 fd70 	bl	8104cf0 <RCCEx_PLL2_Config>
 8104210:	4603      	mov	r3, r0
 8104212:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104214:	e00c      	b.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	3324      	adds	r3, #36	; 0x24
 810421a:	2101      	movs	r1, #1
 810421c:	4618      	mov	r0, r3
 810421e:	f000 fe19 	bl	8104e54 <RCCEx_PLL3_Config>
 8104222:	4603      	mov	r3, r0
 8104224:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8104226:	e003      	b.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104228:	2301      	movs	r3, #1
 810422a:	75fb      	strb	r3, [r7, #23]
      break;
 810422c:	e000      	b.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 810422e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104230:	7dfb      	ldrb	r3, [r7, #23]
 8104232:	2b00      	cmp	r3, #0
 8104234:	d10a      	bne.n	810424c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104236:	4bb7      	ldr	r3, [pc, #732]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810423a:	f023 0207 	bic.w	r2, r3, #7
 810423e:	687b      	ldr	r3, [r7, #4]
 8104240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104244:	49b3      	ldr	r1, [pc, #716]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104246:	4313      	orrs	r3, r2
 8104248:	658b      	str	r3, [r1, #88]	; 0x58
 810424a:	e001      	b.n	8104250 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810424c:	7dfb      	ldrb	r3, [r7, #23]
 810424e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104250:	687b      	ldr	r3, [r7, #4]
 8104252:	681b      	ldr	r3, [r3, #0]
 8104254:	f003 0320 	and.w	r3, r3, #32
 8104258:	2b00      	cmp	r3, #0
 810425a:	d04b      	beq.n	81042f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810425c:	687b      	ldr	r3, [r7, #4]
 810425e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104266:	d02e      	beq.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8104268:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810426c:	d828      	bhi.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810426e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104272:	d02a      	beq.n	81042ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104278:	d822      	bhi.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810427a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810427e:	d026      	beq.n	81042ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104280:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104284:	d81c      	bhi.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104286:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810428a:	d010      	beq.n	81042ae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810428c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104290:	d816      	bhi.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104292:	2b00      	cmp	r3, #0
 8104294:	d01d      	beq.n	81042d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104296:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810429a:	d111      	bne.n	81042c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	3304      	adds	r3, #4
 81042a0:	2100      	movs	r1, #0
 81042a2:	4618      	mov	r0, r3
 81042a4:	f000 fd24 	bl	8104cf0 <RCCEx_PLL2_Config>
 81042a8:	4603      	mov	r3, r0
 81042aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81042ac:	e012      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81042ae:	687b      	ldr	r3, [r7, #4]
 81042b0:	3324      	adds	r3, #36	; 0x24
 81042b2:	2102      	movs	r1, #2
 81042b4:	4618      	mov	r0, r3
 81042b6:	f000 fdcd 	bl	8104e54 <RCCEx_PLL3_Config>
 81042ba:	4603      	mov	r3, r0
 81042bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 81042be:	e009      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81042c0:	2301      	movs	r3, #1
 81042c2:	75fb      	strb	r3, [r7, #23]
      break;
 81042c4:	e006      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81042c6:	bf00      	nop
 81042c8:	e004      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81042ca:	bf00      	nop
 81042cc:	e002      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81042ce:	bf00      	nop
 81042d0:	e000      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81042d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042d4:	7dfb      	ldrb	r3, [r7, #23]
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d10a      	bne.n	81042f0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81042da:	4b8e      	ldr	r3, [pc, #568]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81042dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81042de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81042e8:	498a      	ldr	r1, [pc, #552]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81042ea:	4313      	orrs	r3, r2
 81042ec:	654b      	str	r3, [r1, #84]	; 0x54
 81042ee:	e001      	b.n	81042f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042f0:	7dfb      	ldrb	r3, [r7, #23]
 81042f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	681b      	ldr	r3, [r3, #0]
 81042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81042fc:	2b00      	cmp	r3, #0
 81042fe:	d04b      	beq.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104306:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 810430a:	d02e      	beq.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 810430c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8104310:	d828      	bhi.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104312:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104316:	d02a      	beq.n	810436e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8104318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810431c:	d822      	bhi.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810431e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104322:	d026      	beq.n	8104372 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8104324:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8104328:	d81c      	bhi.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 810432a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810432e:	d010      	beq.n	8104352 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8104330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104334:	d816      	bhi.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104336:	2b00      	cmp	r3, #0
 8104338:	d01d      	beq.n	8104376 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810433a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810433e:	d111      	bne.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104340:	687b      	ldr	r3, [r7, #4]
 8104342:	3304      	adds	r3, #4
 8104344:	2100      	movs	r1, #0
 8104346:	4618      	mov	r0, r3
 8104348:	f000 fcd2 	bl	8104cf0 <RCCEx_PLL2_Config>
 810434c:	4603      	mov	r3, r0
 810434e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104350:	e012      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	3324      	adds	r3, #36	; 0x24
 8104356:	2102      	movs	r1, #2
 8104358:	4618      	mov	r0, r3
 810435a:	f000 fd7b 	bl	8104e54 <RCCEx_PLL3_Config>
 810435e:	4603      	mov	r3, r0
 8104360:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104362:	e009      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104364:	2301      	movs	r3, #1
 8104366:	75fb      	strb	r3, [r7, #23]
      break;
 8104368:	e006      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810436a:	bf00      	nop
 810436c:	e004      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810436e:	bf00      	nop
 8104370:	e002      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104372:	bf00      	nop
 8104374:	e000      	b.n	8104378 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104378:	7dfb      	ldrb	r3, [r7, #23]
 810437a:	2b00      	cmp	r3, #0
 810437c:	d10a      	bne.n	8104394 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810437e:	4b65      	ldr	r3, [pc, #404]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104382:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104386:	687b      	ldr	r3, [r7, #4]
 8104388:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810438c:	4961      	ldr	r1, [pc, #388]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810438e:	4313      	orrs	r3, r2
 8104390:	658b      	str	r3, [r1, #88]	; 0x58
 8104392:	e001      	b.n	8104398 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104394:	7dfb      	ldrb	r3, [r7, #23]
 8104396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104398:	687b      	ldr	r3, [r7, #4]
 810439a:	681b      	ldr	r3, [r3, #0]
 810439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81043a0:	2b00      	cmp	r3, #0
 81043a2:	d04b      	beq.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81043aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81043ae:	d02e      	beq.n	810440e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 81043b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 81043b4:	d828      	bhi.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81043b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81043ba:	d02a      	beq.n	8104412 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 81043bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81043c0:	d822      	bhi.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81043c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81043c6:	d026      	beq.n	8104416 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 81043c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81043cc:	d81c      	bhi.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81043ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81043d2:	d010      	beq.n	81043f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81043d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81043d8:	d816      	bhi.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81043da:	2b00      	cmp	r3, #0
 81043dc:	d01d      	beq.n	810441a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81043e2:	d111      	bne.n	8104408 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	3304      	adds	r3, #4
 81043e8:	2100      	movs	r1, #0
 81043ea:	4618      	mov	r0, r3
 81043ec:	f000 fc80 	bl	8104cf0 <RCCEx_PLL2_Config>
 81043f0:	4603      	mov	r3, r0
 81043f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81043f4:	e012      	b.n	810441c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81043f6:	687b      	ldr	r3, [r7, #4]
 81043f8:	3324      	adds	r3, #36	; 0x24
 81043fa:	2102      	movs	r1, #2
 81043fc:	4618      	mov	r0, r3
 81043fe:	f000 fd29 	bl	8104e54 <RCCEx_PLL3_Config>
 8104402:	4603      	mov	r3, r0
 8104404:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8104406:	e009      	b.n	810441c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104408:	2301      	movs	r3, #1
 810440a:	75fb      	strb	r3, [r7, #23]
      break;
 810440c:	e006      	b.n	810441c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810440e:	bf00      	nop
 8104410:	e004      	b.n	810441c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104412:	bf00      	nop
 8104414:	e002      	b.n	810441c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8104416:	bf00      	nop
 8104418:	e000      	b.n	810441c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 810441a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810441c:	7dfb      	ldrb	r3, [r7, #23]
 810441e:	2b00      	cmp	r3, #0
 8104420:	d10a      	bne.n	8104438 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104422:	4b3c      	ldr	r3, [pc, #240]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 810442a:	687b      	ldr	r3, [r7, #4]
 810442c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104430:	4938      	ldr	r1, [pc, #224]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104432:	4313      	orrs	r3, r2
 8104434:	658b      	str	r3, [r1, #88]	; 0x58
 8104436:	e001      	b.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104438:	7dfb      	ldrb	r3, [r7, #23]
 810443a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	681b      	ldr	r3, [r3, #0]
 8104440:	f003 0308 	and.w	r3, r3, #8
 8104444:	2b00      	cmp	r3, #0
 8104446:	d01a      	beq.n	810447e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104448:	687b      	ldr	r3, [r7, #4]
 810444a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810444e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104452:	d10a      	bne.n	810446a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	3324      	adds	r3, #36	; 0x24
 8104458:	2102      	movs	r1, #2
 810445a:	4618      	mov	r0, r3
 810445c:	f000 fcfa 	bl	8104e54 <RCCEx_PLL3_Config>
 8104460:	4603      	mov	r3, r0
 8104462:	2b00      	cmp	r3, #0
 8104464:	d001      	beq.n	810446a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8104466:	2301      	movs	r3, #1
 8104468:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810446a:	4b2a      	ldr	r3, [pc, #168]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810446c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810446e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104478:	4926      	ldr	r1, [pc, #152]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810447a:	4313      	orrs	r3, r2
 810447c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	f003 0310 	and.w	r3, r3, #16
 8104486:	2b00      	cmp	r3, #0
 8104488:	d01a      	beq.n	81044c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104494:	d10a      	bne.n	81044ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104496:	687b      	ldr	r3, [r7, #4]
 8104498:	3324      	adds	r3, #36	; 0x24
 810449a:	2102      	movs	r1, #2
 810449c:	4618      	mov	r0, r3
 810449e:	f000 fcd9 	bl	8104e54 <RCCEx_PLL3_Config>
 81044a2:	4603      	mov	r3, r0
 81044a4:	2b00      	cmp	r3, #0
 81044a6:	d001      	beq.n	81044ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 81044a8:	2301      	movs	r3, #1
 81044aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81044ac:	4b19      	ldr	r3, [pc, #100]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 81044b4:	687b      	ldr	r3, [r7, #4]
 81044b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81044ba:	4916      	ldr	r1, [pc, #88]	; (8104514 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81044bc:	4313      	orrs	r3, r2
 81044be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81044c0:	687b      	ldr	r3, [r7, #4]
 81044c2:	681b      	ldr	r3, [r3, #0]
 81044c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81044c8:	2b00      	cmp	r3, #0
 81044ca:	d036      	beq.n	810453a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 81044cc:	687b      	ldr	r3, [r7, #4]
 81044ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81044d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81044d6:	d01f      	beq.n	8104518 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 81044d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81044dc:	d817      	bhi.n	810450e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81044de:	2b00      	cmp	r3, #0
 81044e0:	d003      	beq.n	81044ea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81044e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81044e6:	d009      	beq.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81044e8:	e011      	b.n	810450e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81044ea:	687b      	ldr	r3, [r7, #4]
 81044ec:	3304      	adds	r3, #4
 81044ee:	2100      	movs	r1, #0
 81044f0:	4618      	mov	r0, r3
 81044f2:	f000 fbfd 	bl	8104cf0 <RCCEx_PLL2_Config>
 81044f6:	4603      	mov	r3, r0
 81044f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81044fa:	e00e      	b.n	810451a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81044fc:	687b      	ldr	r3, [r7, #4]
 81044fe:	3324      	adds	r3, #36	; 0x24
 8104500:	2102      	movs	r1, #2
 8104502:	4618      	mov	r0, r3
 8104504:	f000 fca6 	bl	8104e54 <RCCEx_PLL3_Config>
 8104508:	4603      	mov	r3, r0
 810450a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 810450c:	e005      	b.n	810451a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810450e:	2301      	movs	r3, #1
 8104510:	75fb      	strb	r3, [r7, #23]
      break;
 8104512:	e002      	b.n	810451a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8104514:	58024400 	.word	0x58024400
      break;
 8104518:	bf00      	nop
    }

    if(ret == HAL_OK)
 810451a:	7dfb      	ldrb	r3, [r7, #23]
 810451c:	2b00      	cmp	r3, #0
 810451e:	d10a      	bne.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104520:	4b93      	ldr	r3, [pc, #588]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104524:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810452e:	4990      	ldr	r1, [pc, #576]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104530:	4313      	orrs	r3, r2
 8104532:	658b      	str	r3, [r1, #88]	; 0x58
 8104534:	e001      	b.n	810453a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104536:	7dfb      	ldrb	r3, [r7, #23]
 8104538:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810453a:	687b      	ldr	r3, [r7, #4]
 810453c:	681b      	ldr	r3, [r3, #0]
 810453e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104542:	2b00      	cmp	r3, #0
 8104544:	d033      	beq.n	81045ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104546:	687b      	ldr	r3, [r7, #4]
 8104548:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810454c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104550:	d01c      	beq.n	810458c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8104552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104556:	d816      	bhi.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8104558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810455c:	d003      	beq.n	8104566 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810455e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104562:	d007      	beq.n	8104574 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8104564:	e00f      	b.n	8104586 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104566:	4b82      	ldr	r3, [pc, #520]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810456a:	4a81      	ldr	r2, [pc, #516]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810456c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104570:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104572:	e00c      	b.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	3324      	adds	r3, #36	; 0x24
 8104578:	2101      	movs	r1, #1
 810457a:	4618      	mov	r0, r3
 810457c:	f000 fc6a 	bl	8104e54 <RCCEx_PLL3_Config>
 8104580:	4603      	mov	r3, r0
 8104582:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104584:	e003      	b.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104586:	2301      	movs	r3, #1
 8104588:	75fb      	strb	r3, [r7, #23]
      break;
 810458a:	e000      	b.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810458c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810458e:	7dfb      	ldrb	r3, [r7, #23]
 8104590:	2b00      	cmp	r3, #0
 8104592:	d10a      	bne.n	81045aa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104594:	4b76      	ldr	r3, [pc, #472]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104598:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81045a2:	4973      	ldr	r1, [pc, #460]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81045a4:	4313      	orrs	r3, r2
 81045a6:	654b      	str	r3, [r1, #84]	; 0x54
 81045a8:	e001      	b.n	81045ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81045aa:	7dfb      	ldrb	r3, [r7, #23]
 81045ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	681b      	ldr	r3, [r3, #0]
 81045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81045b6:	2b00      	cmp	r3, #0
 81045b8:	d029      	beq.n	810460e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81045be:	2b00      	cmp	r3, #0
 81045c0:	d003      	beq.n	81045ca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 81045c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81045c6:	d007      	beq.n	81045d8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 81045c8:	e00f      	b.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81045ca:	4b69      	ldr	r3, [pc, #420]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81045ce:	4a68      	ldr	r2, [pc, #416]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81045d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81045d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81045d6:	e00b      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	3304      	adds	r3, #4
 81045dc:	2102      	movs	r1, #2
 81045de:	4618      	mov	r0, r3
 81045e0:	f000 fb86 	bl	8104cf0 <RCCEx_PLL2_Config>
 81045e4:	4603      	mov	r3, r0
 81045e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81045e8:	e002      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81045ea:	2301      	movs	r3, #1
 81045ec:	75fb      	strb	r3, [r7, #23]
      break;
 81045ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045f0:	7dfb      	ldrb	r3, [r7, #23]
 81045f2:	2b00      	cmp	r3, #0
 81045f4:	d109      	bne.n	810460a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81045f6:	4b5e      	ldr	r3, [pc, #376]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81045fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104602:	495b      	ldr	r1, [pc, #364]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104604:	4313      	orrs	r3, r2
 8104606:	64cb      	str	r3, [r1, #76]	; 0x4c
 8104608:	e001      	b.n	810460e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810460a:	7dfb      	ldrb	r3, [r7, #23]
 810460c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	681b      	ldr	r3, [r3, #0]
 8104612:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104616:	2b00      	cmp	r3, #0
 8104618:	d00a      	beq.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 810461a:	687b      	ldr	r3, [r7, #4]
 810461c:	3324      	adds	r3, #36	; 0x24
 810461e:	2102      	movs	r1, #2
 8104620:	4618      	mov	r0, r3
 8104622:	f000 fc17 	bl	8104e54 <RCCEx_PLL3_Config>
 8104626:	4603      	mov	r3, r0
 8104628:	2b00      	cmp	r3, #0
 810462a:	d001      	beq.n	8104630 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 810462c:	2301      	movs	r3, #1
 810462e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104638:	2b00      	cmp	r3, #0
 810463a:	d030      	beq.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104644:	d017      	beq.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8104646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810464a:	d811      	bhi.n	8104670 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810464c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104650:	d013      	beq.n	810467a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104656:	d80b      	bhi.n	8104670 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104658:	2b00      	cmp	r3, #0
 810465a:	d010      	beq.n	810467e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810465c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104660:	d106      	bne.n	8104670 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104662:	4b43      	ldr	r3, [pc, #268]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104666:	4a42      	ldr	r2, [pc, #264]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810466c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810466e:	e007      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104670:	2301      	movs	r3, #1
 8104672:	75fb      	strb	r3, [r7, #23]
      break;
 8104674:	e004      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104676:	bf00      	nop
 8104678:	e002      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810467a:	bf00      	nop
 810467c:	e000      	b.n	8104680 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810467e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104680:	7dfb      	ldrb	r3, [r7, #23]
 8104682:	2b00      	cmp	r3, #0
 8104684:	d109      	bne.n	810469a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104686:	4b3a      	ldr	r3, [pc, #232]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810468a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104692:	4937      	ldr	r1, [pc, #220]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104694:	4313      	orrs	r3, r2
 8104696:	654b      	str	r3, [r1, #84]	; 0x54
 8104698:	e001      	b.n	810469e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810469a:	7dfb      	ldrb	r3, [r7, #23]
 810469c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810469e:	687b      	ldr	r3, [r7, #4]
 81046a0:	681b      	ldr	r3, [r3, #0]
 81046a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81046a6:	2b00      	cmp	r3, #0
 81046a8:	d008      	beq.n	81046bc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81046aa:	4b31      	ldr	r3, [pc, #196]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81046ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81046ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81046b6:	492e      	ldr	r1, [pc, #184]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81046b8:	4313      	orrs	r3, r2
 81046ba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81046bc:	687b      	ldr	r3, [r7, #4]
 81046be:	681b      	ldr	r3, [r3, #0]
 81046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81046c4:	2b00      	cmp	r3, #0
 81046c6:	d009      	beq.n	81046dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81046c8:	4b29      	ldr	r3, [pc, #164]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81046ca:	691b      	ldr	r3, [r3, #16]
 81046cc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81046d6:	4926      	ldr	r1, [pc, #152]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81046d8:	4313      	orrs	r3, r2
 81046da:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	681b      	ldr	r3, [r3, #0]
 81046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81046e4:	2b00      	cmp	r3, #0
 81046e6:	d008      	beq.n	81046fa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81046e8:	4b21      	ldr	r3, [pc, #132]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81046ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81046ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81046f4:	491e      	ldr	r1, [pc, #120]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81046f6:	4313      	orrs	r3, r2
 81046f8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	681b      	ldr	r3, [r3, #0]
 81046fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104702:	2b00      	cmp	r3, #0
 8104704:	d00d      	beq.n	8104722 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104706:	4b1a      	ldr	r3, [pc, #104]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104708:	691b      	ldr	r3, [r3, #16]
 810470a:	4a19      	ldr	r2, [pc, #100]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810470c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104710:	6113      	str	r3, [r2, #16]
 8104712:	4b17      	ldr	r3, [pc, #92]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104714:	691a      	ldr	r2, [r3, #16]
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 810471c:	4914      	ldr	r1, [pc, #80]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810471e:	4313      	orrs	r3, r2
 8104720:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	681b      	ldr	r3, [r3, #0]
 8104726:	2b00      	cmp	r3, #0
 8104728:	da08      	bge.n	810473c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810472a:	4b11      	ldr	r3, [pc, #68]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810472c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810472e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104736:	490e      	ldr	r1, [pc, #56]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104738:	4313      	orrs	r3, r2
 810473a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810473c:	687b      	ldr	r3, [r7, #4]
 810473e:	681b      	ldr	r3, [r3, #0]
 8104740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104744:	2b00      	cmp	r3, #0
 8104746:	d009      	beq.n	810475c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104748:	4b09      	ldr	r3, [pc, #36]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810474c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104750:	687b      	ldr	r3, [r7, #4]
 8104752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104756:	4906      	ldr	r1, [pc, #24]	; (8104770 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104758:	4313      	orrs	r3, r2
 810475a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810475c:	7dbb      	ldrb	r3, [r7, #22]
 810475e:	2b00      	cmp	r3, #0
 8104760:	d101      	bne.n	8104766 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8104762:	2300      	movs	r3, #0
 8104764:	e000      	b.n	8104768 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8104766:	2301      	movs	r3, #1
}
 8104768:	4618      	mov	r0, r3
 810476a:	3718      	adds	r7, #24
 810476c:	46bd      	mov	sp, r7
 810476e:	bd80      	pop	{r7, pc}
 8104770:	58024400 	.word	0x58024400

08104774 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104774:	b580      	push	{r7, lr}
 8104776:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104778:	f7ff f85e 	bl	8103838 <HAL_RCC_GetHCLKFreq>
 810477c:	4602      	mov	r2, r0
 810477e:	4b06      	ldr	r3, [pc, #24]	; (8104798 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104780:	6a1b      	ldr	r3, [r3, #32]
 8104782:	091b      	lsrs	r3, r3, #4
 8104784:	f003 0307 	and.w	r3, r3, #7
 8104788:	4904      	ldr	r1, [pc, #16]	; (810479c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810478a:	5ccb      	ldrb	r3, [r1, r3]
 810478c:	f003 031f 	and.w	r3, r3, #31
 8104790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104794:	4618      	mov	r0, r3
 8104796:	bd80      	pop	{r7, pc}
 8104798:	58024400 	.word	0x58024400
 810479c:	0810e628 	.word	0x0810e628

081047a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 81047a0:	b480      	push	{r7}
 81047a2:	b089      	sub	sp, #36	; 0x24
 81047a4:	af00      	add	r7, sp, #0
 81047a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81047a8:	4ba1      	ldr	r3, [pc, #644]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047ac:	f003 0303 	and.w	r3, r3, #3
 81047b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 81047b2:	4b9f      	ldr	r3, [pc, #636]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047b6:	0b1b      	lsrs	r3, r3, #12
 81047b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81047bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81047be:	4b9c      	ldr	r3, [pc, #624]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81047c2:	091b      	lsrs	r3, r3, #4
 81047c4:	f003 0301 	and.w	r3, r3, #1
 81047c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 81047ca:	4b99      	ldr	r3, [pc, #612]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81047ce:	08db      	lsrs	r3, r3, #3
 81047d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81047d4:	693a      	ldr	r2, [r7, #16]
 81047d6:	fb02 f303 	mul.w	r3, r2, r3
 81047da:	ee07 3a90 	vmov	s15, r3
 81047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81047e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81047e6:	697b      	ldr	r3, [r7, #20]
 81047e8:	2b00      	cmp	r3, #0
 81047ea:	f000 8111 	beq.w	8104a10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81047ee:	69bb      	ldr	r3, [r7, #24]
 81047f0:	2b02      	cmp	r3, #2
 81047f2:	f000 8083 	beq.w	81048fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81047f6:	69bb      	ldr	r3, [r7, #24]
 81047f8:	2b02      	cmp	r3, #2
 81047fa:	f200 80a1 	bhi.w	8104940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81047fe:	69bb      	ldr	r3, [r7, #24]
 8104800:	2b00      	cmp	r3, #0
 8104802:	d003      	beq.n	810480c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104804:	69bb      	ldr	r3, [r7, #24]
 8104806:	2b01      	cmp	r3, #1
 8104808:	d056      	beq.n	81048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810480a:	e099      	b.n	8104940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810480c:	4b88      	ldr	r3, [pc, #544]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	f003 0320 	and.w	r3, r3, #32
 8104814:	2b00      	cmp	r3, #0
 8104816:	d02d      	beq.n	8104874 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104818:	4b85      	ldr	r3, [pc, #532]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810481a:	681b      	ldr	r3, [r3, #0]
 810481c:	08db      	lsrs	r3, r3, #3
 810481e:	f003 0303 	and.w	r3, r3, #3
 8104822:	4a84      	ldr	r2, [pc, #528]	; (8104a34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104824:	fa22 f303 	lsr.w	r3, r2, r3
 8104828:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810482a:	68bb      	ldr	r3, [r7, #8]
 810482c:	ee07 3a90 	vmov	s15, r3
 8104830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104834:	697b      	ldr	r3, [r7, #20]
 8104836:	ee07 3a90 	vmov	s15, r3
 810483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810483e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104842:	4b7b      	ldr	r3, [pc, #492]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810484a:	ee07 3a90 	vmov	s15, r3
 810484e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104852:	ed97 6a03 	vldr	s12, [r7, #12]
 8104856:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810485a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810485e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810486a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810486e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104872:	e087      	b.n	8104984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104874:	697b      	ldr	r3, [r7, #20]
 8104876:	ee07 3a90 	vmov	s15, r3
 810487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810487e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104a3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104886:	4b6a      	ldr	r3, [pc, #424]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810488a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810488e:	ee07 3a90 	vmov	s15, r3
 8104892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104896:	ed97 6a03 	vldr	s12, [r7, #12]
 810489a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810489e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81048a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81048a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81048aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81048b6:	e065      	b.n	8104984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81048b8:	697b      	ldr	r3, [r7, #20]
 81048ba:	ee07 3a90 	vmov	s15, r3
 81048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81048c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81048ca:	4b59      	ldr	r3, [pc, #356]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81048ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81048d2:	ee07 3a90 	vmov	s15, r3
 81048d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81048da:	ed97 6a03 	vldr	s12, [r7, #12]
 81048de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81048e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81048e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81048ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81048ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81048f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81048f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81048fa:	e043      	b.n	8104984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81048fc:	697b      	ldr	r3, [r7, #20]
 81048fe:	ee07 3a90 	vmov	s15, r3
 8104902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104906:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810490a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810490e:	4b48      	ldr	r3, [pc, #288]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104916:	ee07 3a90 	vmov	s15, r3
 810491a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810491e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104922:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810492a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810492e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104936:	ee67 7a27 	vmul.f32	s15, s14, s15
 810493a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810493e:	e021      	b.n	8104984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104940:	697b      	ldr	r3, [r7, #20]
 8104942:	ee07 3a90 	vmov	s15, r3
 8104946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810494a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810494e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104952:	4b37      	ldr	r3, [pc, #220]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810495a:	ee07 3a90 	vmov	s15, r3
 810495e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104962:	ed97 6a03 	vldr	s12, [r7, #12]
 8104966:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810496a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810496e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810497e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104982:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104984:	4b2a      	ldr	r3, [pc, #168]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104988:	0a5b      	lsrs	r3, r3, #9
 810498a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810498e:	ee07 3a90 	vmov	s15, r3
 8104992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810499a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810499e:	edd7 6a07 	vldr	s13, [r7, #28]
 81049a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81049a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81049aa:	ee17 2a90 	vmov	r2, s15
 81049ae:	687b      	ldr	r3, [r7, #4]
 81049b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81049b2:	4b1f      	ldr	r3, [pc, #124]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049b6:	0c1b      	lsrs	r3, r3, #16
 81049b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81049bc:	ee07 3a90 	vmov	s15, r3
 81049c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81049c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81049cc:	edd7 6a07 	vldr	s13, [r7, #28]
 81049d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81049d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81049d8:	ee17 2a90 	vmov	r2, s15
 81049dc:	687b      	ldr	r3, [r7, #4]
 81049de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81049e0:	4b13      	ldr	r3, [pc, #76]	; (8104a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049e4:	0e1b      	lsrs	r3, r3, #24
 81049e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81049ea:	ee07 3a90 	vmov	s15, r3
 81049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81049f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81049fa:	edd7 6a07 	vldr	s13, [r7, #28]
 81049fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104a06:	ee17 2a90 	vmov	r2, s15
 8104a0a:	687b      	ldr	r3, [r7, #4]
 8104a0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104a0e:	e008      	b.n	8104a22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104a10:	687b      	ldr	r3, [r7, #4]
 8104a12:	2200      	movs	r2, #0
 8104a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104a16:	687b      	ldr	r3, [r7, #4]
 8104a18:	2200      	movs	r2, #0
 8104a1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	2200      	movs	r2, #0
 8104a20:	609a      	str	r2, [r3, #8]
}
 8104a22:	bf00      	nop
 8104a24:	3724      	adds	r7, #36	; 0x24
 8104a26:	46bd      	mov	sp, r7
 8104a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104a2c:	4770      	bx	lr
 8104a2e:	bf00      	nop
 8104a30:	58024400 	.word	0x58024400
 8104a34:	03d09000 	.word	0x03d09000
 8104a38:	46000000 	.word	0x46000000
 8104a3c:	4c742400 	.word	0x4c742400
 8104a40:	4a742400 	.word	0x4a742400
 8104a44:	4af42400 	.word	0x4af42400

08104a48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104a48:	b480      	push	{r7}
 8104a4a:	b089      	sub	sp, #36	; 0x24
 8104a4c:	af00      	add	r7, sp, #0
 8104a4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104a50:	4ba1      	ldr	r3, [pc, #644]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104a54:	f003 0303 	and.w	r3, r3, #3
 8104a58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104a5a:	4b9f      	ldr	r3, [pc, #636]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104a5e:	0d1b      	lsrs	r3, r3, #20
 8104a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104a64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104a66:	4b9c      	ldr	r3, [pc, #624]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a6a:	0a1b      	lsrs	r3, r3, #8
 8104a6c:	f003 0301 	and.w	r3, r3, #1
 8104a70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8104a72:	4b99      	ldr	r3, [pc, #612]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104a76:	08db      	lsrs	r3, r3, #3
 8104a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104a7c:	693a      	ldr	r2, [r7, #16]
 8104a7e:	fb02 f303 	mul.w	r3, r2, r3
 8104a82:	ee07 3a90 	vmov	s15, r3
 8104a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104a8e:	697b      	ldr	r3, [r7, #20]
 8104a90:	2b00      	cmp	r3, #0
 8104a92:	f000 8111 	beq.w	8104cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104a96:	69bb      	ldr	r3, [r7, #24]
 8104a98:	2b02      	cmp	r3, #2
 8104a9a:	f000 8083 	beq.w	8104ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104a9e:	69bb      	ldr	r3, [r7, #24]
 8104aa0:	2b02      	cmp	r3, #2
 8104aa2:	f200 80a1 	bhi.w	8104be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104aa6:	69bb      	ldr	r3, [r7, #24]
 8104aa8:	2b00      	cmp	r3, #0
 8104aaa:	d003      	beq.n	8104ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104aac:	69bb      	ldr	r3, [r7, #24]
 8104aae:	2b01      	cmp	r3, #1
 8104ab0:	d056      	beq.n	8104b60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104ab2:	e099      	b.n	8104be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ab4:	4b88      	ldr	r3, [pc, #544]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	f003 0320 	and.w	r3, r3, #32
 8104abc:	2b00      	cmp	r3, #0
 8104abe:	d02d      	beq.n	8104b1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104ac0:	4b85      	ldr	r3, [pc, #532]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	08db      	lsrs	r3, r3, #3
 8104ac6:	f003 0303 	and.w	r3, r3, #3
 8104aca:	4a84      	ldr	r2, [pc, #528]	; (8104cdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104acc:	fa22 f303 	lsr.w	r3, r2, r3
 8104ad0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104ad2:	68bb      	ldr	r3, [r7, #8]
 8104ad4:	ee07 3a90 	vmov	s15, r3
 8104ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104adc:	697b      	ldr	r3, [r7, #20]
 8104ade:	ee07 3a90 	vmov	s15, r3
 8104ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104aea:	4b7b      	ldr	r3, [pc, #492]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104af2:	ee07 3a90 	vmov	s15, r3
 8104af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8104afe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104b1a:	e087      	b.n	8104c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104b1c:	697b      	ldr	r3, [r7, #20]
 8104b1e:	ee07 3a90 	vmov	s15, r3
 8104b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b2e:	4b6a      	ldr	r3, [pc, #424]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b36:	ee07 3a90 	vmov	s15, r3
 8104b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b42:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104b5e:	e065      	b.n	8104c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104b60:	697b      	ldr	r3, [r7, #20]
 8104b62:	ee07 3a90 	vmov	s15, r3
 8104b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b72:	4b59      	ldr	r3, [pc, #356]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b7a:	ee07 3a90 	vmov	s15, r3
 8104b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8104b86:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104ba2:	e043      	b.n	8104c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104ba4:	697b      	ldr	r3, [r7, #20]
 8104ba6:	ee07 3a90 	vmov	s15, r3
 8104baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bb6:	4b48      	ldr	r3, [pc, #288]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bbe:	ee07 3a90 	vmov	s15, r3
 8104bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104bca:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104be2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104be6:	e021      	b.n	8104c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104be8:	697b      	ldr	r3, [r7, #20]
 8104bea:	ee07 3a90 	vmov	s15, r3
 8104bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bfa:	4b37      	ldr	r3, [pc, #220]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c02:	ee07 3a90 	vmov	s15, r3
 8104c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104c2c:	4b2a      	ldr	r3, [pc, #168]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c30:	0a5b      	lsrs	r3, r3, #9
 8104c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104c36:	ee07 3a90 	vmov	s15, r3
 8104c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c52:	ee17 2a90 	vmov	r2, s15
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104c5a:	4b1f      	ldr	r3, [pc, #124]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c5e:	0c1b      	lsrs	r3, r3, #16
 8104c60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104c64:	ee07 3a90 	vmov	s15, r3
 8104c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8104c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104c80:	ee17 2a90 	vmov	r2, s15
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104c88:	4b13      	ldr	r3, [pc, #76]	; (8104cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c8c:	0e1b      	lsrs	r3, r3, #24
 8104c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104c92:	ee07 3a90 	vmov	s15, r3
 8104c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8104ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104cae:	ee17 2a90 	vmov	r2, s15
 8104cb2:	687b      	ldr	r3, [r7, #4]
 8104cb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104cb6:	e008      	b.n	8104cca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104cb8:	687b      	ldr	r3, [r7, #4]
 8104cba:	2200      	movs	r2, #0
 8104cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	2200      	movs	r2, #0
 8104cc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	2200      	movs	r2, #0
 8104cc8:	609a      	str	r2, [r3, #8]
}
 8104cca:	bf00      	nop
 8104ccc:	3724      	adds	r7, #36	; 0x24
 8104cce:	46bd      	mov	sp, r7
 8104cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cd4:	4770      	bx	lr
 8104cd6:	bf00      	nop
 8104cd8:	58024400 	.word	0x58024400
 8104cdc:	03d09000 	.word	0x03d09000
 8104ce0:	46000000 	.word	0x46000000
 8104ce4:	4c742400 	.word	0x4c742400
 8104ce8:	4a742400 	.word	0x4a742400
 8104cec:	4af42400 	.word	0x4af42400

08104cf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104cf0:	b580      	push	{r7, lr}
 8104cf2:	b084      	sub	sp, #16
 8104cf4:	af00      	add	r7, sp, #0
 8104cf6:	6078      	str	r0, [r7, #4]
 8104cf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104cfa:	2300      	movs	r3, #0
 8104cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104cfe:	4b54      	ldr	r3, [pc, #336]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d02:	f003 0303 	and.w	r3, r3, #3
 8104d06:	2b03      	cmp	r3, #3
 8104d08:	d101      	bne.n	8104d0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104d0a:	2301      	movs	r3, #1
 8104d0c:	e09b      	b.n	8104e46 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104d0e:	4b50      	ldr	r3, [pc, #320]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d10:	681b      	ldr	r3, [r3, #0]
 8104d12:	4a4f      	ldr	r2, [pc, #316]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104d1a:	f7fe f841 	bl	8102da0 <HAL_GetTick>
 8104d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104d20:	e008      	b.n	8104d34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104d22:	f7fe f83d 	bl	8102da0 <HAL_GetTick>
 8104d26:	4602      	mov	r2, r0
 8104d28:	68bb      	ldr	r3, [r7, #8]
 8104d2a:	1ad3      	subs	r3, r2, r3
 8104d2c:	2b02      	cmp	r3, #2
 8104d2e:	d901      	bls.n	8104d34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104d30:	2303      	movs	r3, #3
 8104d32:	e088      	b.n	8104e46 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104d34:	4b46      	ldr	r3, [pc, #280]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d36:	681b      	ldr	r3, [r3, #0]
 8104d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104d3c:	2b00      	cmp	r3, #0
 8104d3e:	d1f0      	bne.n	8104d22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104d40:	4b43      	ldr	r3, [pc, #268]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104d44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104d48:	687b      	ldr	r3, [r7, #4]
 8104d4a:	681b      	ldr	r3, [r3, #0]
 8104d4c:	031b      	lsls	r3, r3, #12
 8104d4e:	4940      	ldr	r1, [pc, #256]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d50:	4313      	orrs	r3, r2
 8104d52:	628b      	str	r3, [r1, #40]	; 0x28
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	685b      	ldr	r3, [r3, #4]
 8104d58:	3b01      	subs	r3, #1
 8104d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	689b      	ldr	r3, [r3, #8]
 8104d62:	3b01      	subs	r3, #1
 8104d64:	025b      	lsls	r3, r3, #9
 8104d66:	b29b      	uxth	r3, r3
 8104d68:	431a      	orrs	r2, r3
 8104d6a:	687b      	ldr	r3, [r7, #4]
 8104d6c:	68db      	ldr	r3, [r3, #12]
 8104d6e:	3b01      	subs	r3, #1
 8104d70:	041b      	lsls	r3, r3, #16
 8104d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104d76:	431a      	orrs	r2, r3
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	691b      	ldr	r3, [r3, #16]
 8104d7c:	3b01      	subs	r3, #1
 8104d7e:	061b      	lsls	r3, r3, #24
 8104d80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104d84:	4932      	ldr	r1, [pc, #200]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d86:	4313      	orrs	r3, r2
 8104d88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104d8a:	4b31      	ldr	r3, [pc, #196]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104d92:	687b      	ldr	r3, [r7, #4]
 8104d94:	695b      	ldr	r3, [r3, #20]
 8104d96:	492e      	ldr	r1, [pc, #184]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d98:	4313      	orrs	r3, r2
 8104d9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104d9c:	4b2c      	ldr	r3, [pc, #176]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104da0:	f023 0220 	bic.w	r2, r3, #32
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	699b      	ldr	r3, [r3, #24]
 8104da8:	4929      	ldr	r1, [pc, #164]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104daa:	4313      	orrs	r3, r2
 8104dac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104dae:	4b28      	ldr	r3, [pc, #160]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104db2:	4a27      	ldr	r2, [pc, #156]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104db4:	f023 0310 	bic.w	r3, r3, #16
 8104db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104dba:	4b25      	ldr	r3, [pc, #148]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104dc2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104dc6:	687a      	ldr	r2, [r7, #4]
 8104dc8:	69d2      	ldr	r2, [r2, #28]
 8104dca:	00d2      	lsls	r2, r2, #3
 8104dcc:	4920      	ldr	r1, [pc, #128]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104dce:	4313      	orrs	r3, r2
 8104dd0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104dd2:	4b1f      	ldr	r3, [pc, #124]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dd6:	4a1e      	ldr	r2, [pc, #120]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104dd8:	f043 0310 	orr.w	r3, r3, #16
 8104ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104dde:	683b      	ldr	r3, [r7, #0]
 8104de0:	2b00      	cmp	r3, #0
 8104de2:	d106      	bne.n	8104df2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104de4:	4b1a      	ldr	r3, [pc, #104]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104de8:	4a19      	ldr	r2, [pc, #100]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104dea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104dee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104df0:	e00f      	b.n	8104e12 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104df2:	683b      	ldr	r3, [r7, #0]
 8104df4:	2b01      	cmp	r3, #1
 8104df6:	d106      	bne.n	8104e06 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104df8:	4b15      	ldr	r3, [pc, #84]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104dfc:	4a14      	ldr	r2, [pc, #80]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104dfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104e02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104e04:	e005      	b.n	8104e12 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104e06:	4b12      	ldr	r3, [pc, #72]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e0a:	4a11      	ldr	r2, [pc, #68]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104e10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104e12:	4b0f      	ldr	r3, [pc, #60]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104e14:	681b      	ldr	r3, [r3, #0]
 8104e16:	4a0e      	ldr	r2, [pc, #56]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104e18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104e1e:	f7fd ffbf 	bl	8102da0 <HAL_GetTick>
 8104e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104e24:	e008      	b.n	8104e38 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104e26:	f7fd ffbb 	bl	8102da0 <HAL_GetTick>
 8104e2a:	4602      	mov	r2, r0
 8104e2c:	68bb      	ldr	r3, [r7, #8]
 8104e2e:	1ad3      	subs	r3, r2, r3
 8104e30:	2b02      	cmp	r3, #2
 8104e32:	d901      	bls.n	8104e38 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104e34:	2303      	movs	r3, #3
 8104e36:	e006      	b.n	8104e46 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104e38:	4b05      	ldr	r3, [pc, #20]	; (8104e50 <RCCEx_PLL2_Config+0x160>)
 8104e3a:	681b      	ldr	r3, [r3, #0]
 8104e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e40:	2b00      	cmp	r3, #0
 8104e42:	d0f0      	beq.n	8104e26 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8104e46:	4618      	mov	r0, r3
 8104e48:	3710      	adds	r7, #16
 8104e4a:	46bd      	mov	sp, r7
 8104e4c:	bd80      	pop	{r7, pc}
 8104e4e:	bf00      	nop
 8104e50:	58024400 	.word	0x58024400

08104e54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104e54:	b580      	push	{r7, lr}
 8104e56:	b084      	sub	sp, #16
 8104e58:	af00      	add	r7, sp, #0
 8104e5a:	6078      	str	r0, [r7, #4]
 8104e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104e5e:	2300      	movs	r3, #0
 8104e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104e62:	4b54      	ldr	r3, [pc, #336]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e66:	f003 0303 	and.w	r3, r3, #3
 8104e6a:	2b03      	cmp	r3, #3
 8104e6c:	d101      	bne.n	8104e72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104e6e:	2301      	movs	r3, #1
 8104e70:	e09b      	b.n	8104faa <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104e72:	4b50      	ldr	r3, [pc, #320]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	4a4f      	ldr	r2, [pc, #316]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104e7e:	f7fd ff8f 	bl	8102da0 <HAL_GetTick>
 8104e82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104e84:	e008      	b.n	8104e98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104e86:	f7fd ff8b 	bl	8102da0 <HAL_GetTick>
 8104e8a:	4602      	mov	r2, r0
 8104e8c:	68bb      	ldr	r3, [r7, #8]
 8104e8e:	1ad3      	subs	r3, r2, r3
 8104e90:	2b02      	cmp	r3, #2
 8104e92:	d901      	bls.n	8104e98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104e94:	2303      	movs	r3, #3
 8104e96:	e088      	b.n	8104faa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104e98:	4b46      	ldr	r3, [pc, #280]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104ea0:	2b00      	cmp	r3, #0
 8104ea2:	d1f0      	bne.n	8104e86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104ea4:	4b43      	ldr	r3, [pc, #268]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ea8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104eac:	687b      	ldr	r3, [r7, #4]
 8104eae:	681b      	ldr	r3, [r3, #0]
 8104eb0:	051b      	lsls	r3, r3, #20
 8104eb2:	4940      	ldr	r1, [pc, #256]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104eb4:	4313      	orrs	r3, r2
 8104eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8104eb8:	687b      	ldr	r3, [r7, #4]
 8104eba:	685b      	ldr	r3, [r3, #4]
 8104ebc:	3b01      	subs	r3, #1
 8104ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104ec2:	687b      	ldr	r3, [r7, #4]
 8104ec4:	689b      	ldr	r3, [r3, #8]
 8104ec6:	3b01      	subs	r3, #1
 8104ec8:	025b      	lsls	r3, r3, #9
 8104eca:	b29b      	uxth	r3, r3
 8104ecc:	431a      	orrs	r2, r3
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	68db      	ldr	r3, [r3, #12]
 8104ed2:	3b01      	subs	r3, #1
 8104ed4:	041b      	lsls	r3, r3, #16
 8104ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104eda:	431a      	orrs	r2, r3
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	691b      	ldr	r3, [r3, #16]
 8104ee0:	3b01      	subs	r3, #1
 8104ee2:	061b      	lsls	r3, r3, #24
 8104ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104ee8:	4932      	ldr	r1, [pc, #200]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104eea:	4313      	orrs	r3, r2
 8104eec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104eee:	4b31      	ldr	r3, [pc, #196]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ef2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	695b      	ldr	r3, [r3, #20]
 8104efa:	492e      	ldr	r1, [pc, #184]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104efc:	4313      	orrs	r3, r2
 8104efe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104f00:	4b2c      	ldr	r3, [pc, #176]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104f08:	687b      	ldr	r3, [r7, #4]
 8104f0a:	699b      	ldr	r3, [r3, #24]
 8104f0c:	4929      	ldr	r1, [pc, #164]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f0e:	4313      	orrs	r3, r2
 8104f10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104f12:	4b28      	ldr	r3, [pc, #160]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f16:	4a27      	ldr	r2, [pc, #156]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104f1e:	4b25      	ldr	r3, [pc, #148]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104f22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104f26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104f2a:	687a      	ldr	r2, [r7, #4]
 8104f2c:	69d2      	ldr	r2, [r2, #28]
 8104f2e:	00d2      	lsls	r2, r2, #3
 8104f30:	4920      	ldr	r1, [pc, #128]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f32:	4313      	orrs	r3, r2
 8104f34:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104f36:	4b1f      	ldr	r3, [pc, #124]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f3a:	4a1e      	ldr	r2, [pc, #120]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104f42:	683b      	ldr	r3, [r7, #0]
 8104f44:	2b00      	cmp	r3, #0
 8104f46:	d106      	bne.n	8104f56 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104f48:	4b1a      	ldr	r3, [pc, #104]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f4c:	4a19      	ldr	r2, [pc, #100]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104f54:	e00f      	b.n	8104f76 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104f56:	683b      	ldr	r3, [r7, #0]
 8104f58:	2b01      	cmp	r3, #1
 8104f5a:	d106      	bne.n	8104f6a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104f5c:	4b15      	ldr	r3, [pc, #84]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f60:	4a14      	ldr	r2, [pc, #80]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104f66:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104f68:	e005      	b.n	8104f76 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104f6a:	4b12      	ldr	r3, [pc, #72]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f6e:	4a11      	ldr	r2, [pc, #68]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104f74:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104f76:	4b0f      	ldr	r3, [pc, #60]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f78:	681b      	ldr	r3, [r3, #0]
 8104f7a:	4a0e      	ldr	r2, [pc, #56]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104f80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f82:	f7fd ff0d 	bl	8102da0 <HAL_GetTick>
 8104f86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104f88:	e008      	b.n	8104f9c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104f8a:	f7fd ff09 	bl	8102da0 <HAL_GetTick>
 8104f8e:	4602      	mov	r2, r0
 8104f90:	68bb      	ldr	r3, [r7, #8]
 8104f92:	1ad3      	subs	r3, r2, r3
 8104f94:	2b02      	cmp	r3, #2
 8104f96:	d901      	bls.n	8104f9c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104f98:	2303      	movs	r3, #3
 8104f9a:	e006      	b.n	8104faa <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104f9c:	4b05      	ldr	r3, [pc, #20]	; (8104fb4 <RCCEx_PLL3_Config+0x160>)
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	d0f0      	beq.n	8104f8a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8104faa:	4618      	mov	r0, r3
 8104fac:	3710      	adds	r7, #16
 8104fae:	46bd      	mov	sp, r7
 8104fb0:	bd80      	pop	{r7, pc}
 8104fb2:	bf00      	nop
 8104fb4:	58024400 	.word	0x58024400

08104fb8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104fb8:	b580      	push	{r7, lr}
 8104fba:	b084      	sub	sp, #16
 8104fbc:	af00      	add	r7, sp, #0
 8104fbe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	2b00      	cmp	r3, #0
 8104fc4:	d101      	bne.n	8104fca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8104fc6:	2301      	movs	r3, #1
 8104fc8:	e0f1      	b.n	81051ae <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104fca:	687b      	ldr	r3, [r7, #4]
 8104fcc:	2200      	movs	r2, #0
 8104fce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	681b      	ldr	r3, [r3, #0]
 8104fd4:	4a78      	ldr	r2, [pc, #480]	; (81051b8 <HAL_SPI_Init+0x200>)
 8104fd6:	4293      	cmp	r3, r2
 8104fd8:	d00f      	beq.n	8104ffa <HAL_SPI_Init+0x42>
 8104fda:	687b      	ldr	r3, [r7, #4]
 8104fdc:	681b      	ldr	r3, [r3, #0]
 8104fde:	4a77      	ldr	r2, [pc, #476]	; (81051bc <HAL_SPI_Init+0x204>)
 8104fe0:	4293      	cmp	r3, r2
 8104fe2:	d00a      	beq.n	8104ffa <HAL_SPI_Init+0x42>
 8104fe4:	687b      	ldr	r3, [r7, #4]
 8104fe6:	681b      	ldr	r3, [r3, #0]
 8104fe8:	4a75      	ldr	r2, [pc, #468]	; (81051c0 <HAL_SPI_Init+0x208>)
 8104fea:	4293      	cmp	r3, r2
 8104fec:	d005      	beq.n	8104ffa <HAL_SPI_Init+0x42>
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	68db      	ldr	r3, [r3, #12]
 8104ff2:	2b0f      	cmp	r3, #15
 8104ff4:	d901      	bls.n	8104ffa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8104ff6:	2301      	movs	r3, #1
 8104ff8:	e0d9      	b.n	81051ae <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8104ffa:	6878      	ldr	r0, [r7, #4]
 8104ffc:	f001 f877 	bl	81060ee <SPI_GetPacketSize>
 8105000:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8105002:	687b      	ldr	r3, [r7, #4]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	4a6c      	ldr	r2, [pc, #432]	; (81051b8 <HAL_SPI_Init+0x200>)
 8105008:	4293      	cmp	r3, r2
 810500a:	d00c      	beq.n	8105026 <HAL_SPI_Init+0x6e>
 810500c:	687b      	ldr	r3, [r7, #4]
 810500e:	681b      	ldr	r3, [r3, #0]
 8105010:	4a6a      	ldr	r2, [pc, #424]	; (81051bc <HAL_SPI_Init+0x204>)
 8105012:	4293      	cmp	r3, r2
 8105014:	d007      	beq.n	8105026 <HAL_SPI_Init+0x6e>
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	681b      	ldr	r3, [r3, #0]
 810501a:	4a69      	ldr	r2, [pc, #420]	; (81051c0 <HAL_SPI_Init+0x208>)
 810501c:	4293      	cmp	r3, r2
 810501e:	d002      	beq.n	8105026 <HAL_SPI_Init+0x6e>
 8105020:	68fb      	ldr	r3, [r7, #12]
 8105022:	2b08      	cmp	r3, #8
 8105024:	d811      	bhi.n	810504a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8105026:	687b      	ldr	r3, [r7, #4]
 8105028:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810502a:	4a63      	ldr	r2, [pc, #396]	; (81051b8 <HAL_SPI_Init+0x200>)
 810502c:	4293      	cmp	r3, r2
 810502e:	d009      	beq.n	8105044 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8105030:	687b      	ldr	r3, [r7, #4]
 8105032:	681b      	ldr	r3, [r3, #0]
 8105034:	4a61      	ldr	r2, [pc, #388]	; (81051bc <HAL_SPI_Init+0x204>)
 8105036:	4293      	cmp	r3, r2
 8105038:	d004      	beq.n	8105044 <HAL_SPI_Init+0x8c>
 810503a:	687b      	ldr	r3, [r7, #4]
 810503c:	681b      	ldr	r3, [r3, #0]
 810503e:	4a60      	ldr	r2, [pc, #384]	; (81051c0 <HAL_SPI_Init+0x208>)
 8105040:	4293      	cmp	r3, r2
 8105042:	d104      	bne.n	810504e <HAL_SPI_Init+0x96>
 8105044:	68fb      	ldr	r3, [r7, #12]
 8105046:	2b10      	cmp	r3, #16
 8105048:	d901      	bls.n	810504e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810504a:	2301      	movs	r3, #1
 810504c:	e0af      	b.n	81051ae <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105054:	b2db      	uxtb	r3, r3
 8105056:	2b00      	cmp	r3, #0
 8105058:	d106      	bne.n	8105068 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810505a:	687b      	ldr	r3, [r7, #4]
 810505c:	2200      	movs	r2, #0
 810505e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8105062:	6878      	ldr	r0, [r7, #4]
 8105064:	f7fd fbee 	bl	8102844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8105068:	687b      	ldr	r3, [r7, #4]
 810506a:	2202      	movs	r2, #2
 810506c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105070:	687b      	ldr	r3, [r7, #4]
 8105072:	681b      	ldr	r3, [r3, #0]
 8105074:	681a      	ldr	r2, [r3, #0]
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	681b      	ldr	r3, [r3, #0]
 810507a:	f022 0201 	bic.w	r2, r2, #1
 810507e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8105080:	687b      	ldr	r3, [r7, #4]
 8105082:	681b      	ldr	r3, [r3, #0]
 8105084:	689b      	ldr	r3, [r3, #8]
 8105086:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 810508a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	699b      	ldr	r3, [r3, #24]
 8105090:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105094:	d119      	bne.n	81050ca <HAL_SPI_Init+0x112>
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	685b      	ldr	r3, [r3, #4]
 810509a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810509e:	d103      	bne.n	81050a8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81050a0:	687b      	ldr	r3, [r7, #4]
 81050a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81050a4:	2b00      	cmp	r3, #0
 81050a6:	d008      	beq.n	81050ba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81050ac:	2b00      	cmp	r3, #0
 81050ae:	d10c      	bne.n	81050ca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81050b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81050b8:	d107      	bne.n	81050ca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	681b      	ldr	r3, [r3, #0]
 81050be:	681a      	ldr	r2, [r3, #0]
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	681b      	ldr	r3, [r3, #0]
 81050c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 81050c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	69da      	ldr	r2, [r3, #28]
 81050ce:	687b      	ldr	r3, [r7, #4]
 81050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81050d2:	431a      	orrs	r2, r3
 81050d4:	68bb      	ldr	r3, [r7, #8]
 81050d6:	431a      	orrs	r2, r3
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81050dc:	ea42 0103 	orr.w	r1, r2, r3
 81050e0:	687b      	ldr	r3, [r7, #4]
 81050e2:	68da      	ldr	r2, [r3, #12]
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	430a      	orrs	r2, r1
 81050ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81050ec:	687b      	ldr	r3, [r7, #4]
 81050ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050f4:	431a      	orrs	r2, r3
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81050fa:	431a      	orrs	r2, r3
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	699b      	ldr	r3, [r3, #24]
 8105100:	431a      	orrs	r2, r3
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	691b      	ldr	r3, [r3, #16]
 8105106:	431a      	orrs	r2, r3
 8105108:	687b      	ldr	r3, [r7, #4]
 810510a:	695b      	ldr	r3, [r3, #20]
 810510c:	431a      	orrs	r2, r3
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	6a1b      	ldr	r3, [r3, #32]
 8105112:	431a      	orrs	r2, r3
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	685b      	ldr	r3, [r3, #4]
 8105118:	431a      	orrs	r2, r3
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810511e:	431a      	orrs	r2, r3
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	689b      	ldr	r3, [r3, #8]
 8105124:	431a      	orrs	r2, r3
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810512a:	ea42 0103 	orr.w	r1, r2, r3
 810512e:	687b      	ldr	r3, [r7, #4]
 8105130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	681b      	ldr	r3, [r3, #0]
 8105136:	430a      	orrs	r2, r1
 8105138:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810513a:	687b      	ldr	r3, [r7, #4]
 810513c:	685b      	ldr	r3, [r3, #4]
 810513e:	2b00      	cmp	r3, #0
 8105140:	d113      	bne.n	810516a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	681b      	ldr	r3, [r3, #0]
 8105146:	689b      	ldr	r3, [r3, #8]
 8105148:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105154:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	689b      	ldr	r3, [r3, #8]
 810515c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8105160:	687b      	ldr	r3, [r7, #4]
 8105162:	681b      	ldr	r3, [r3, #0]
 8105164:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8105168:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	f022 0201 	bic.w	r2, r2, #1
 8105178:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	685b      	ldr	r3, [r3, #4]
 810517e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8105182:	2b00      	cmp	r3, #0
 8105184:	d00a      	beq.n	810519c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	68db      	ldr	r3, [r3, #12]
 810518c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	681b      	ldr	r3, [r3, #0]
 8105198:	430a      	orrs	r2, r1
 810519a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810519c:	687b      	ldr	r3, [r7, #4]
 810519e:	2200      	movs	r2, #0
 81051a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	2201      	movs	r2, #1
 81051a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 81051ac:	2300      	movs	r3, #0
}
 81051ae:	4618      	mov	r0, r3
 81051b0:	3710      	adds	r7, #16
 81051b2:	46bd      	mov	sp, r7
 81051b4:	bd80      	pop	{r7, pc}
 81051b6:	bf00      	nop
 81051b8:	40013000 	.word	0x40013000
 81051bc:	40003800 	.word	0x40003800
 81051c0:	40003c00 	.word	0x40003c00

081051c4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81051c4:	b580      	push	{r7, lr}
 81051c6:	b08a      	sub	sp, #40	; 0x28
 81051c8:	af02      	add	r7, sp, #8
 81051ca:	60f8      	str	r0, [r7, #12]
 81051cc:	60b9      	str	r1, [r7, #8]
 81051ce:	603b      	str	r3, [r7, #0]
 81051d0:	4613      	mov	r3, r2
 81051d2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81051d4:	68fb      	ldr	r3, [r7, #12]
 81051d6:	681b      	ldr	r3, [r3, #0]
 81051d8:	3320      	adds	r3, #32
 81051da:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 81051dc:	2300      	movs	r3, #0
 81051de:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 81051e0:	68fb      	ldr	r3, [r7, #12]
 81051e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81051e6:	2b01      	cmp	r3, #1
 81051e8:	d101      	bne.n	81051ee <HAL_SPI_Transmit+0x2a>
 81051ea:	2302      	movs	r3, #2
 81051ec:	e1d4      	b.n	8105598 <HAL_SPI_Transmit+0x3d4>
 81051ee:	68fb      	ldr	r3, [r7, #12]
 81051f0:	2201      	movs	r2, #1
 81051f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81051f6:	f7fd fdd3 	bl	8102da0 <HAL_GetTick>
 81051fa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81051fc:	68fb      	ldr	r3, [r7, #12]
 81051fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105202:	b2db      	uxtb	r3, r3
 8105204:	2b01      	cmp	r3, #1
 8105206:	d007      	beq.n	8105218 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8105208:	2302      	movs	r3, #2
 810520a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 810520c:	68fb      	ldr	r3, [r7, #12]
 810520e:	2200      	movs	r2, #0
 8105210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105214:	7efb      	ldrb	r3, [r7, #27]
 8105216:	e1bf      	b.n	8105598 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8105218:	68bb      	ldr	r3, [r7, #8]
 810521a:	2b00      	cmp	r3, #0
 810521c:	d002      	beq.n	8105224 <HAL_SPI_Transmit+0x60>
 810521e:	88fb      	ldrh	r3, [r7, #6]
 8105220:	2b00      	cmp	r3, #0
 8105222:	d107      	bne.n	8105234 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8105224:	2301      	movs	r3, #1
 8105226:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8105228:	68fb      	ldr	r3, [r7, #12]
 810522a:	2200      	movs	r2, #0
 810522c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105230:	7efb      	ldrb	r3, [r7, #27]
 8105232:	e1b1      	b.n	8105598 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8105234:	68fb      	ldr	r3, [r7, #12]
 8105236:	2203      	movs	r2, #3
 8105238:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810523c:	68fb      	ldr	r3, [r7, #12]
 810523e:	2200      	movs	r2, #0
 8105240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8105244:	68fb      	ldr	r3, [r7, #12]
 8105246:	68ba      	ldr	r2, [r7, #8]
 8105248:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 810524a:	68fb      	ldr	r3, [r7, #12]
 810524c:	88fa      	ldrh	r2, [r7, #6]
 810524e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8105252:	68fb      	ldr	r3, [r7, #12]
 8105254:	88fa      	ldrh	r2, [r7, #6]
 8105256:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 810525a:	68fb      	ldr	r3, [r7, #12]
 810525c:	2200      	movs	r2, #0
 810525e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8105260:	68fb      	ldr	r3, [r7, #12]
 8105262:	2200      	movs	r2, #0
 8105264:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8105268:	68fb      	ldr	r3, [r7, #12]
 810526a:	2200      	movs	r2, #0
 810526c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8105270:	68fb      	ldr	r3, [r7, #12]
 8105272:	2200      	movs	r2, #0
 8105274:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8105276:	68fb      	ldr	r3, [r7, #12]
 8105278:	2200      	movs	r2, #0
 810527a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810527c:	68fb      	ldr	r3, [r7, #12]
 810527e:	689b      	ldr	r3, [r3, #8]
 8105280:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8105284:	d107      	bne.n	8105296 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8105286:	68fb      	ldr	r3, [r7, #12]
 8105288:	681b      	ldr	r3, [r3, #0]
 810528a:	681a      	ldr	r2, [r3, #0]
 810528c:	68fb      	ldr	r3, [r7, #12]
 810528e:	681b      	ldr	r3, [r3, #0]
 8105290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105294:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105296:	68fb      	ldr	r3, [r7, #12]
 8105298:	681b      	ldr	r3, [r3, #0]
 810529a:	685b      	ldr	r3, [r3, #4]
 810529c:	0c1b      	lsrs	r3, r3, #16
 810529e:	041b      	lsls	r3, r3, #16
 81052a0:	88f9      	ldrh	r1, [r7, #6]
 81052a2:	68fa      	ldr	r2, [r7, #12]
 81052a4:	6812      	ldr	r2, [r2, #0]
 81052a6:	430b      	orrs	r3, r1
 81052a8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 81052aa:	68fb      	ldr	r3, [r7, #12]
 81052ac:	681b      	ldr	r3, [r3, #0]
 81052ae:	681a      	ldr	r2, [r3, #0]
 81052b0:	68fb      	ldr	r3, [r7, #12]
 81052b2:	681b      	ldr	r3, [r3, #0]
 81052b4:	f042 0201 	orr.w	r2, r2, #1
 81052b8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81052ba:	68fb      	ldr	r3, [r7, #12]
 81052bc:	685b      	ldr	r3, [r3, #4]
 81052be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81052c2:	d107      	bne.n	81052d4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81052c4:	68fb      	ldr	r3, [r7, #12]
 81052c6:	681b      	ldr	r3, [r3, #0]
 81052c8:	681a      	ldr	r2, [r3, #0]
 81052ca:	68fb      	ldr	r3, [r7, #12]
 81052cc:	681b      	ldr	r3, [r3, #0]
 81052ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81052d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81052d4:	68fb      	ldr	r3, [r7, #12]
 81052d6:	68db      	ldr	r3, [r3, #12]
 81052d8:	2b0f      	cmp	r3, #15
 81052da:	d947      	bls.n	810536c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81052dc:	e03f      	b.n	810535e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81052de:	68fb      	ldr	r3, [r7, #12]
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	695b      	ldr	r3, [r3, #20]
 81052e4:	f003 0302 	and.w	r3, r3, #2
 81052e8:	2b02      	cmp	r3, #2
 81052ea:	d114      	bne.n	8105316 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81052ec:	68fb      	ldr	r3, [r7, #12]
 81052ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81052f0:	68fb      	ldr	r3, [r7, #12]
 81052f2:	681b      	ldr	r3, [r3, #0]
 81052f4:	6812      	ldr	r2, [r2, #0]
 81052f6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81052f8:	68fb      	ldr	r3, [r7, #12]
 81052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81052fc:	1d1a      	adds	r2, r3, #4
 81052fe:	68fb      	ldr	r3, [r7, #12]
 8105300:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8105302:	68fb      	ldr	r3, [r7, #12]
 8105304:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105308:	b29b      	uxth	r3, r3
 810530a:	3b01      	subs	r3, #1
 810530c:	b29a      	uxth	r2, r3
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8105314:	e023      	b.n	810535e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105316:	f7fd fd43 	bl	8102da0 <HAL_GetTick>
 810531a:	4602      	mov	r2, r0
 810531c:	697b      	ldr	r3, [r7, #20]
 810531e:	1ad3      	subs	r3, r2, r3
 8105320:	683a      	ldr	r2, [r7, #0]
 8105322:	429a      	cmp	r2, r3
 8105324:	d803      	bhi.n	810532e <HAL_SPI_Transmit+0x16a>
 8105326:	683b      	ldr	r3, [r7, #0]
 8105328:	f1b3 3fff 	cmp.w	r3, #4294967295
 810532c:	d102      	bne.n	8105334 <HAL_SPI_Transmit+0x170>
 810532e:	683b      	ldr	r3, [r7, #0]
 8105330:	2b00      	cmp	r3, #0
 8105332:	d114      	bne.n	810535e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8105334:	68f8      	ldr	r0, [r7, #12]
 8105336:	f000 fe0c 	bl	8105f52 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810533a:	68fb      	ldr	r3, [r7, #12]
 810533c:	2200      	movs	r2, #0
 810533e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105342:	68fb      	ldr	r3, [r7, #12]
 8105344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105348:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810534c:	68fb      	ldr	r3, [r7, #12]
 810534e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105352:	68fb      	ldr	r3, [r7, #12]
 8105354:	2201      	movs	r2, #1
 8105356:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810535a:	2303      	movs	r3, #3
 810535c:	e11c      	b.n	8105598 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810535e:	68fb      	ldr	r3, [r7, #12]
 8105360:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105364:	b29b      	uxth	r3, r3
 8105366:	2b00      	cmp	r3, #0
 8105368:	d1b9      	bne.n	81052de <HAL_SPI_Transmit+0x11a>
 810536a:	e0ef      	b.n	810554c <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810536c:	68fb      	ldr	r3, [r7, #12]
 810536e:	68db      	ldr	r3, [r3, #12]
 8105370:	2b07      	cmp	r3, #7
 8105372:	f240 80e4 	bls.w	810553e <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8105376:	e05d      	b.n	8105434 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8105378:	68fb      	ldr	r3, [r7, #12]
 810537a:	681b      	ldr	r3, [r3, #0]
 810537c:	695b      	ldr	r3, [r3, #20]
 810537e:	f003 0302 	and.w	r3, r3, #2
 8105382:	2b02      	cmp	r3, #2
 8105384:	d132      	bne.n	81053ec <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105386:	68fb      	ldr	r3, [r7, #12]
 8105388:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810538c:	b29b      	uxth	r3, r3
 810538e:	2b01      	cmp	r3, #1
 8105390:	d918      	bls.n	81053c4 <HAL_SPI_Transmit+0x200>
 8105392:	68fb      	ldr	r3, [r7, #12]
 8105394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105396:	2b00      	cmp	r3, #0
 8105398:	d014      	beq.n	81053c4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 810539a:	68fb      	ldr	r3, [r7, #12]
 810539c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810539e:	68fb      	ldr	r3, [r7, #12]
 81053a0:	681b      	ldr	r3, [r3, #0]
 81053a2:	6812      	ldr	r2, [r2, #0]
 81053a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81053a6:	68fb      	ldr	r3, [r7, #12]
 81053a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81053aa:	1d1a      	adds	r2, r3, #4
 81053ac:	68fb      	ldr	r3, [r7, #12]
 81053ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81053b0:	68fb      	ldr	r3, [r7, #12]
 81053b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81053b6:	b29b      	uxth	r3, r3
 81053b8:	3b02      	subs	r3, #2
 81053ba:	b29a      	uxth	r2, r3
 81053bc:	68fb      	ldr	r3, [r7, #12]
 81053be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81053c2:	e037      	b.n	8105434 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81053c4:	68fb      	ldr	r3, [r7, #12]
 81053c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81053c8:	881a      	ldrh	r2, [r3, #0]
 81053ca:	69fb      	ldr	r3, [r7, #28]
 81053cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81053ce:	68fb      	ldr	r3, [r7, #12]
 81053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81053d2:	1c9a      	adds	r2, r3, #2
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81053d8:	68fb      	ldr	r3, [r7, #12]
 81053da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81053de:	b29b      	uxth	r3, r3
 81053e0:	3b01      	subs	r3, #1
 81053e2:	b29a      	uxth	r2, r3
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81053ea:	e023      	b.n	8105434 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81053ec:	f7fd fcd8 	bl	8102da0 <HAL_GetTick>
 81053f0:	4602      	mov	r2, r0
 81053f2:	697b      	ldr	r3, [r7, #20]
 81053f4:	1ad3      	subs	r3, r2, r3
 81053f6:	683a      	ldr	r2, [r7, #0]
 81053f8:	429a      	cmp	r2, r3
 81053fa:	d803      	bhi.n	8105404 <HAL_SPI_Transmit+0x240>
 81053fc:	683b      	ldr	r3, [r7, #0]
 81053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105402:	d102      	bne.n	810540a <HAL_SPI_Transmit+0x246>
 8105404:	683b      	ldr	r3, [r7, #0]
 8105406:	2b00      	cmp	r3, #0
 8105408:	d114      	bne.n	8105434 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810540a:	68f8      	ldr	r0, [r7, #12]
 810540c:	f000 fda1 	bl	8105f52 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8105410:	68fb      	ldr	r3, [r7, #12]
 8105412:	2200      	movs	r2, #0
 8105414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105418:	68fb      	ldr	r3, [r7, #12]
 810541a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810541e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105422:	68fb      	ldr	r3, [r7, #12]
 8105424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105428:	68fb      	ldr	r3, [r7, #12]
 810542a:	2201      	movs	r2, #1
 810542c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105430:	2303      	movs	r3, #3
 8105432:	e0b1      	b.n	8105598 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8105434:	68fb      	ldr	r3, [r7, #12]
 8105436:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810543a:	b29b      	uxth	r3, r3
 810543c:	2b00      	cmp	r3, #0
 810543e:	d19b      	bne.n	8105378 <HAL_SPI_Transmit+0x1b4>
 8105440:	e084      	b.n	810554c <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8105442:	68fb      	ldr	r3, [r7, #12]
 8105444:	681b      	ldr	r3, [r3, #0]
 8105446:	695b      	ldr	r3, [r3, #20]
 8105448:	f003 0302 	and.w	r3, r3, #2
 810544c:	2b02      	cmp	r3, #2
 810544e:	d152      	bne.n	81054f6 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8105450:	68fb      	ldr	r3, [r7, #12]
 8105452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105456:	b29b      	uxth	r3, r3
 8105458:	2b03      	cmp	r3, #3
 810545a:	d918      	bls.n	810548e <HAL_SPI_Transmit+0x2ca>
 810545c:	68fb      	ldr	r3, [r7, #12]
 810545e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105460:	2b40      	cmp	r3, #64	; 0x40
 8105462:	d914      	bls.n	810548e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105468:	68fb      	ldr	r3, [r7, #12]
 810546a:	681b      	ldr	r3, [r3, #0]
 810546c:	6812      	ldr	r2, [r2, #0]
 810546e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105470:	68fb      	ldr	r3, [r7, #12]
 8105472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105474:	1d1a      	adds	r2, r3, #4
 8105476:	68fb      	ldr	r3, [r7, #12]
 8105478:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810547a:	68fb      	ldr	r3, [r7, #12]
 810547c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105480:	b29b      	uxth	r3, r3
 8105482:	3b04      	subs	r3, #4
 8105484:	b29a      	uxth	r2, r3
 8105486:	68fb      	ldr	r3, [r7, #12]
 8105488:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810548c:	e057      	b.n	810553e <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810548e:	68fb      	ldr	r3, [r7, #12]
 8105490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105494:	b29b      	uxth	r3, r3
 8105496:	2b01      	cmp	r3, #1
 8105498:	d917      	bls.n	81054ca <HAL_SPI_Transmit+0x306>
 810549a:	68fb      	ldr	r3, [r7, #12]
 810549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810549e:	2b00      	cmp	r3, #0
 81054a0:	d013      	beq.n	81054ca <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81054a2:	68fb      	ldr	r3, [r7, #12]
 81054a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054a6:	881a      	ldrh	r2, [r3, #0]
 81054a8:	69fb      	ldr	r3, [r7, #28]
 81054aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81054ac:	68fb      	ldr	r3, [r7, #12]
 81054ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054b0:	1c9a      	adds	r2, r3, #2
 81054b2:	68fb      	ldr	r3, [r7, #12]
 81054b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81054b6:	68fb      	ldr	r3, [r7, #12]
 81054b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81054bc:	b29b      	uxth	r3, r3
 81054be:	3b02      	subs	r3, #2
 81054c0:	b29a      	uxth	r2, r3
 81054c2:	68fb      	ldr	r3, [r7, #12]
 81054c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81054c8:	e039      	b.n	810553e <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 81054ca:	68fb      	ldr	r3, [r7, #12]
 81054cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81054ce:	68fb      	ldr	r3, [r7, #12]
 81054d0:	681b      	ldr	r3, [r3, #0]
 81054d2:	3320      	adds	r3, #32
 81054d4:	7812      	ldrb	r2, [r2, #0]
 81054d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 81054d8:	68fb      	ldr	r3, [r7, #12]
 81054da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81054dc:	1c5a      	adds	r2, r3, #1
 81054de:	68fb      	ldr	r3, [r7, #12]
 81054e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81054e2:	68fb      	ldr	r3, [r7, #12]
 81054e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81054e8:	b29b      	uxth	r3, r3
 81054ea:	3b01      	subs	r3, #1
 81054ec:	b29a      	uxth	r2, r3
 81054ee:	68fb      	ldr	r3, [r7, #12]
 81054f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81054f4:	e023      	b.n	810553e <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81054f6:	f7fd fc53 	bl	8102da0 <HAL_GetTick>
 81054fa:	4602      	mov	r2, r0
 81054fc:	697b      	ldr	r3, [r7, #20]
 81054fe:	1ad3      	subs	r3, r2, r3
 8105500:	683a      	ldr	r2, [r7, #0]
 8105502:	429a      	cmp	r2, r3
 8105504:	d803      	bhi.n	810550e <HAL_SPI_Transmit+0x34a>
 8105506:	683b      	ldr	r3, [r7, #0]
 8105508:	f1b3 3fff 	cmp.w	r3, #4294967295
 810550c:	d102      	bne.n	8105514 <HAL_SPI_Transmit+0x350>
 810550e:	683b      	ldr	r3, [r7, #0]
 8105510:	2b00      	cmp	r3, #0
 8105512:	d114      	bne.n	810553e <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8105514:	68f8      	ldr	r0, [r7, #12]
 8105516:	f000 fd1c 	bl	8105f52 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810551a:	68fb      	ldr	r3, [r7, #12]
 810551c:	2200      	movs	r2, #0
 810551e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105522:	68fb      	ldr	r3, [r7, #12]
 8105524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105528:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810552c:	68fb      	ldr	r3, [r7, #12]
 810552e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105532:	68fb      	ldr	r3, [r7, #12]
 8105534:	2201      	movs	r2, #1
 8105536:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810553a:	2303      	movs	r3, #3
 810553c:	e02c      	b.n	8105598 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810553e:	68fb      	ldr	r3, [r7, #12]
 8105540:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105544:	b29b      	uxth	r3, r3
 8105546:	2b00      	cmp	r3, #0
 8105548:	f47f af7b 	bne.w	8105442 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810554c:	683b      	ldr	r3, [r7, #0]
 810554e:	9300      	str	r3, [sp, #0]
 8105550:	697b      	ldr	r3, [r7, #20]
 8105552:	2200      	movs	r2, #0
 8105554:	2108      	movs	r1, #8
 8105556:	68f8      	ldr	r0, [r7, #12]
 8105558:	f000 fd9b 	bl	8106092 <SPI_WaitOnFlagUntilTimeout>
 810555c:	4603      	mov	r3, r0
 810555e:	2b00      	cmp	r3, #0
 8105560:	d007      	beq.n	8105572 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8105562:	68fb      	ldr	r3, [r7, #12]
 8105564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105568:	f043 0220 	orr.w	r2, r3, #32
 810556c:	68fb      	ldr	r3, [r7, #12]
 810556e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105572:	68f8      	ldr	r0, [r7, #12]
 8105574:	f000 fced 	bl	8105f52 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105578:	68fb      	ldr	r3, [r7, #12]
 810557a:	2200      	movs	r2, #0
 810557c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105580:	68fb      	ldr	r3, [r7, #12]
 8105582:	2201      	movs	r2, #1
 8105584:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105588:	68fb      	ldr	r3, [r7, #12]
 810558a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810558e:	2b00      	cmp	r3, #0
 8105590:	d001      	beq.n	8105596 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8105592:	2301      	movs	r3, #1
 8105594:	e000      	b.n	8105598 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8105596:	7efb      	ldrb	r3, [r7, #27]
}
 8105598:	4618      	mov	r0, r3
 810559a:	3720      	adds	r7, #32
 810559c:	46bd      	mov	sp, r7
 810559e:	bd80      	pop	{r7, pc}

081055a0 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81055a0:	b580      	push	{r7, lr}
 81055a2:	b08a      	sub	sp, #40	; 0x28
 81055a4:	af02      	add	r7, sp, #8
 81055a6:	60f8      	str	r0, [r7, #12]
 81055a8:	60b9      	str	r1, [r7, #8]
 81055aa:	603b      	str	r3, [r7, #0]
 81055ac:	4613      	mov	r3, r2
 81055ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 81055b0:	2300      	movs	r3, #0
 81055b2:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81055b4:	68fb      	ldr	r3, [r7, #12]
 81055b6:	681b      	ldr	r3, [r3, #0]
 81055b8:	3330      	adds	r3, #48	; 0x30
 81055ba:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 81055bc:	68fb      	ldr	r3, [r7, #12]
 81055be:	685b      	ldr	r3, [r3, #4]
 81055c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81055c4:	d112      	bne.n	81055ec <HAL_SPI_Receive+0x4c>
 81055c6:	68fb      	ldr	r3, [r7, #12]
 81055c8:	689b      	ldr	r3, [r3, #8]
 81055ca:	2b00      	cmp	r3, #0
 81055cc:	d10e      	bne.n	81055ec <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 81055ce:	68fb      	ldr	r3, [r7, #12]
 81055d0:	2204      	movs	r2, #4
 81055d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 81055d6:	88fa      	ldrh	r2, [r7, #6]
 81055d8:	683b      	ldr	r3, [r7, #0]
 81055da:	9300      	str	r3, [sp, #0]
 81055dc:	4613      	mov	r3, r2
 81055de:	68ba      	ldr	r2, [r7, #8]
 81055e0:	68b9      	ldr	r1, [r7, #8]
 81055e2:	68f8      	ldr	r0, [r7, #12]
 81055e4:	f000 f9cc 	bl	8105980 <HAL_SPI_TransmitReceive>
 81055e8:	4603      	mov	r3, r0
 81055ea:	e1c5      	b.n	8105978 <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 81055ec:	68fb      	ldr	r3, [r7, #12]
 81055ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81055f2:	2b01      	cmp	r3, #1
 81055f4:	d101      	bne.n	81055fa <HAL_SPI_Receive+0x5a>
 81055f6:	2302      	movs	r3, #2
 81055f8:	e1be      	b.n	8105978 <HAL_SPI_Receive+0x3d8>
 81055fa:	68fb      	ldr	r3, [r7, #12]
 81055fc:	2201      	movs	r2, #1
 81055fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8105602:	f7fd fbcd 	bl	8102da0 <HAL_GetTick>
 8105606:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810560e:	b2db      	uxtb	r3, r3
 8105610:	2b01      	cmp	r3, #1
 8105612:	d007      	beq.n	8105624 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8105614:	2302      	movs	r3, #2
 8105616:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8105618:	68fb      	ldr	r3, [r7, #12]
 810561a:	2200      	movs	r2, #0
 810561c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105620:	7ffb      	ldrb	r3, [r7, #31]
 8105622:	e1a9      	b.n	8105978 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 8105624:	68bb      	ldr	r3, [r7, #8]
 8105626:	2b00      	cmp	r3, #0
 8105628:	d002      	beq.n	8105630 <HAL_SPI_Receive+0x90>
 810562a:	88fb      	ldrh	r3, [r7, #6]
 810562c:	2b00      	cmp	r3, #0
 810562e:	d107      	bne.n	8105640 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8105630:	2301      	movs	r3, #1
 8105632:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8105634:	68fb      	ldr	r3, [r7, #12]
 8105636:	2200      	movs	r2, #0
 8105638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810563c:	7ffb      	ldrb	r3, [r7, #31]
 810563e:	e19b      	b.n	8105978 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8105640:	68fb      	ldr	r3, [r7, #12]
 8105642:	2204      	movs	r2, #4
 8105644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105648:	68fb      	ldr	r3, [r7, #12]
 810564a:	2200      	movs	r2, #0
 810564c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8105650:	68fb      	ldr	r3, [r7, #12]
 8105652:	68ba      	ldr	r2, [r7, #8]
 8105654:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8105656:	68fb      	ldr	r3, [r7, #12]
 8105658:	88fa      	ldrh	r2, [r7, #6]
 810565a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810565e:	68fb      	ldr	r3, [r7, #12]
 8105660:	88fa      	ldrh	r2, [r7, #6]
 8105662:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8105666:	68fb      	ldr	r3, [r7, #12]
 8105668:	2200      	movs	r2, #0
 810566a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 810566c:	68fb      	ldr	r3, [r7, #12]
 810566e:	2200      	movs	r2, #0
 8105670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8105674:	68fb      	ldr	r3, [r7, #12]
 8105676:	2200      	movs	r2, #0
 8105678:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 810567c:	68fb      	ldr	r3, [r7, #12]
 810567e:	2200      	movs	r2, #0
 8105680:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8105682:	68fb      	ldr	r3, [r7, #12]
 8105684:	2200      	movs	r2, #0
 8105686:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8105688:	68fb      	ldr	r3, [r7, #12]
 810568a:	689b      	ldr	r3, [r3, #8]
 810568c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8105690:	d107      	bne.n	81056a2 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8105692:	68fb      	ldr	r3, [r7, #12]
 8105694:	681b      	ldr	r3, [r3, #0]
 8105696:	681a      	ldr	r2, [r3, #0]
 8105698:	68fb      	ldr	r3, [r7, #12]
 810569a:	681b      	ldr	r3, [r3, #0]
 810569c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 81056a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81056a2:	68fb      	ldr	r3, [r7, #12]
 81056a4:	681b      	ldr	r3, [r3, #0]
 81056a6:	685b      	ldr	r3, [r3, #4]
 81056a8:	0c1b      	lsrs	r3, r3, #16
 81056aa:	041b      	lsls	r3, r3, #16
 81056ac:	88f9      	ldrh	r1, [r7, #6]
 81056ae:	68fa      	ldr	r2, [r7, #12]
 81056b0:	6812      	ldr	r2, [r2, #0]
 81056b2:	430b      	orrs	r3, r1
 81056b4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 81056b6:	68fb      	ldr	r3, [r7, #12]
 81056b8:	681b      	ldr	r3, [r3, #0]
 81056ba:	681a      	ldr	r2, [r3, #0]
 81056bc:	68fb      	ldr	r3, [r7, #12]
 81056be:	681b      	ldr	r3, [r3, #0]
 81056c0:	f042 0201 	orr.w	r2, r2, #1
 81056c4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81056c6:	68fb      	ldr	r3, [r7, #12]
 81056c8:	685b      	ldr	r3, [r3, #4]
 81056ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81056ce:	d107      	bne.n	81056e0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81056d0:	68fb      	ldr	r3, [r7, #12]
 81056d2:	681b      	ldr	r3, [r3, #0]
 81056d4:	681a      	ldr	r2, [r3, #0]
 81056d6:	68fb      	ldr	r3, [r7, #12]
 81056d8:	681b      	ldr	r3, [r3, #0]
 81056da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81056de:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81056e0:	68fb      	ldr	r3, [r7, #12]
 81056e2:	68db      	ldr	r3, [r3, #12]
 81056e4:	2b0f      	cmp	r3, #15
 81056e6:	d948      	bls.n	810577a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 81056e8:	e040      	b.n	810576c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 81056ea:	68fb      	ldr	r3, [r7, #12]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	695a      	ldr	r2, [r3, #20]
 81056f0:	f248 0308 	movw	r3, #32776	; 0x8008
 81056f4:	4013      	ands	r3, r2
 81056f6:	2b00      	cmp	r3, #0
 81056f8:	d014      	beq.n	8105724 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81056fa:	68fb      	ldr	r3, [r7, #12]
 81056fc:	681a      	ldr	r2, [r3, #0]
 81056fe:	68fb      	ldr	r3, [r7, #12]
 8105700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105702:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105704:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8105706:	68fb      	ldr	r3, [r7, #12]
 8105708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810570a:	1d1a      	adds	r2, r3, #4
 810570c:	68fb      	ldr	r3, [r7, #12]
 810570e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8105710:	68fb      	ldr	r3, [r7, #12]
 8105712:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105716:	b29b      	uxth	r3, r3
 8105718:	3b01      	subs	r3, #1
 810571a:	b29a      	uxth	r2, r3
 810571c:	68fb      	ldr	r3, [r7, #12]
 810571e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8105722:	e023      	b.n	810576c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105724:	f7fd fb3c 	bl	8102da0 <HAL_GetTick>
 8105728:	4602      	mov	r2, r0
 810572a:	697b      	ldr	r3, [r7, #20]
 810572c:	1ad3      	subs	r3, r2, r3
 810572e:	683a      	ldr	r2, [r7, #0]
 8105730:	429a      	cmp	r2, r3
 8105732:	d803      	bhi.n	810573c <HAL_SPI_Receive+0x19c>
 8105734:	683b      	ldr	r3, [r7, #0]
 8105736:	f1b3 3fff 	cmp.w	r3, #4294967295
 810573a:	d102      	bne.n	8105742 <HAL_SPI_Receive+0x1a2>
 810573c:	683b      	ldr	r3, [r7, #0]
 810573e:	2b00      	cmp	r3, #0
 8105740:	d114      	bne.n	810576c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8105742:	68f8      	ldr	r0, [r7, #12]
 8105744:	f000 fc05 	bl	8105f52 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8105748:	68fb      	ldr	r3, [r7, #12]
 810574a:	2200      	movs	r2, #0
 810574c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105750:	68fb      	ldr	r3, [r7, #12]
 8105752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105756:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810575a:	68fb      	ldr	r3, [r7, #12]
 810575c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105760:	68fb      	ldr	r3, [r7, #12]
 8105762:	2201      	movs	r2, #1
 8105764:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105768:	2303      	movs	r3, #3
 810576a:	e105      	b.n	8105978 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810576c:	68fb      	ldr	r3, [r7, #12]
 810576e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105772:	b29b      	uxth	r3, r3
 8105774:	2b00      	cmp	r3, #0
 8105776:	d1b8      	bne.n	81056ea <HAL_SPI_Receive+0x14a>
 8105778:	e0eb      	b.n	8105952 <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810577a:	68fb      	ldr	r3, [r7, #12]
 810577c:	68db      	ldr	r3, [r3, #12]
 810577e:	2b07      	cmp	r3, #7
 8105780:	f240 80e0 	bls.w	8105944 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8105784:	e05b      	b.n	810583e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8105786:	68fb      	ldr	r3, [r7, #12]
 8105788:	681b      	ldr	r3, [r3, #0]
 810578a:	695b      	ldr	r3, [r3, #20]
 810578c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105790:	2b00      	cmp	r3, #0
 8105792:	d030      	beq.n	81057f6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	681b      	ldr	r3, [r3, #0]
 8105798:	695b      	ldr	r3, [r3, #20]
 810579a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810579e:	2b00      	cmp	r3, #0
 81057a0:	d014      	beq.n	81057cc <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81057a2:	68fb      	ldr	r3, [r7, #12]
 81057a4:	681a      	ldr	r2, [r3, #0]
 81057a6:	68fb      	ldr	r3, [r7, #12]
 81057a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81057aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81057ac:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81057ae:	68fb      	ldr	r3, [r7, #12]
 81057b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81057b2:	1d1a      	adds	r2, r3, #4
 81057b4:	68fb      	ldr	r3, [r7, #12]
 81057b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81057b8:	68fb      	ldr	r3, [r7, #12]
 81057ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81057be:	b29b      	uxth	r3, r3
 81057c0:	3b02      	subs	r3, #2
 81057c2:	b29a      	uxth	r2, r3
 81057c4:	68fb      	ldr	r3, [r7, #12]
 81057c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81057ca:	e038      	b.n	810583e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81057cc:	68fb      	ldr	r3, [r7, #12]
 81057ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81057d0:	69ba      	ldr	r2, [r7, #24]
 81057d2:	8812      	ldrh	r2, [r2, #0]
 81057d4:	b292      	uxth	r2, r2
 81057d6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81057d8:	68fb      	ldr	r3, [r7, #12]
 81057da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81057dc:	1c9a      	adds	r2, r3, #2
 81057de:	68fb      	ldr	r3, [r7, #12]
 81057e0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81057e2:	68fb      	ldr	r3, [r7, #12]
 81057e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81057e8:	b29b      	uxth	r3, r3
 81057ea:	3b01      	subs	r3, #1
 81057ec:	b29a      	uxth	r2, r3
 81057ee:	68fb      	ldr	r3, [r7, #12]
 81057f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81057f4:	e023      	b.n	810583e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81057f6:	f7fd fad3 	bl	8102da0 <HAL_GetTick>
 81057fa:	4602      	mov	r2, r0
 81057fc:	697b      	ldr	r3, [r7, #20]
 81057fe:	1ad3      	subs	r3, r2, r3
 8105800:	683a      	ldr	r2, [r7, #0]
 8105802:	429a      	cmp	r2, r3
 8105804:	d803      	bhi.n	810580e <HAL_SPI_Receive+0x26e>
 8105806:	683b      	ldr	r3, [r7, #0]
 8105808:	f1b3 3fff 	cmp.w	r3, #4294967295
 810580c:	d102      	bne.n	8105814 <HAL_SPI_Receive+0x274>
 810580e:	683b      	ldr	r3, [r7, #0]
 8105810:	2b00      	cmp	r3, #0
 8105812:	d114      	bne.n	810583e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8105814:	68f8      	ldr	r0, [r7, #12]
 8105816:	f000 fb9c 	bl	8105f52 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810581a:	68fb      	ldr	r3, [r7, #12]
 810581c:	2200      	movs	r2, #0
 810581e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105822:	68fb      	ldr	r3, [r7, #12]
 8105824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105828:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810582c:	68fb      	ldr	r3, [r7, #12]
 810582e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105832:	68fb      	ldr	r3, [r7, #12]
 8105834:	2201      	movs	r2, #1
 8105836:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810583a:	2303      	movs	r3, #3
 810583c:	e09c      	b.n	8105978 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810583e:	68fb      	ldr	r3, [r7, #12]
 8105840:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105844:	b29b      	uxth	r3, r3
 8105846:	2b00      	cmp	r3, #0
 8105848:	d19d      	bne.n	8105786 <HAL_SPI_Receive+0x1e6>
 810584a:	e082      	b.n	8105952 <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810584c:	68fb      	ldr	r3, [r7, #12]
 810584e:	681b      	ldr	r3, [r3, #0]
 8105850:	695b      	ldr	r3, [r3, #20]
 8105852:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105856:	2b00      	cmp	r3, #0
 8105858:	d050      	beq.n	81058fc <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810585a:	68fb      	ldr	r3, [r7, #12]
 810585c:	681b      	ldr	r3, [r3, #0]
 810585e:	695b      	ldr	r3, [r3, #20]
 8105860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105864:	2b00      	cmp	r3, #0
 8105866:	d014      	beq.n	8105892 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105868:	68fb      	ldr	r3, [r7, #12]
 810586a:	681a      	ldr	r2, [r3, #0]
 810586c:	68fb      	ldr	r3, [r7, #12]
 810586e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105870:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105872:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105874:	68fb      	ldr	r3, [r7, #12]
 8105876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105878:	1d1a      	adds	r2, r3, #4
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810587e:	68fb      	ldr	r3, [r7, #12]
 8105880:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105884:	b29b      	uxth	r3, r3
 8105886:	3b04      	subs	r3, #4
 8105888:	b29a      	uxth	r2, r3
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8105890:	e058      	b.n	8105944 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8105892:	68fb      	ldr	r3, [r7, #12]
 8105894:	681b      	ldr	r3, [r3, #0]
 8105896:	695b      	ldr	r3, [r3, #20]
 8105898:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810589c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81058a0:	d914      	bls.n	81058cc <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81058a2:	68fb      	ldr	r3, [r7, #12]
 81058a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058a6:	69ba      	ldr	r2, [r7, #24]
 81058a8:	8812      	ldrh	r2, [r2, #0]
 81058aa:	b292      	uxth	r2, r2
 81058ac:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81058ae:	68fb      	ldr	r3, [r7, #12]
 81058b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058b2:	1c9a      	adds	r2, r3, #2
 81058b4:	68fb      	ldr	r3, [r7, #12]
 81058b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81058b8:	68fb      	ldr	r3, [r7, #12]
 81058ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81058be:	b29b      	uxth	r3, r3
 81058c0:	3b02      	subs	r3, #2
 81058c2:	b29a      	uxth	r2, r3
 81058c4:	68fb      	ldr	r3, [r7, #12]
 81058c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81058ca:	e03b      	b.n	8105944 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81058cc:	68fb      	ldr	r3, [r7, #12]
 81058ce:	681b      	ldr	r3, [r3, #0]
 81058d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81058d4:	68fb      	ldr	r3, [r7, #12]
 81058d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058d8:	7812      	ldrb	r2, [r2, #0]
 81058da:	b2d2      	uxtb	r2, r2
 81058dc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81058de:	68fb      	ldr	r3, [r7, #12]
 81058e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058e2:	1c5a      	adds	r2, r3, #1
 81058e4:	68fb      	ldr	r3, [r7, #12]
 81058e6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81058e8:	68fb      	ldr	r3, [r7, #12]
 81058ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81058ee:	b29b      	uxth	r3, r3
 81058f0:	3b01      	subs	r3, #1
 81058f2:	b29a      	uxth	r2, r3
 81058f4:	68fb      	ldr	r3, [r7, #12]
 81058f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81058fa:	e023      	b.n	8105944 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81058fc:	f7fd fa50 	bl	8102da0 <HAL_GetTick>
 8105900:	4602      	mov	r2, r0
 8105902:	697b      	ldr	r3, [r7, #20]
 8105904:	1ad3      	subs	r3, r2, r3
 8105906:	683a      	ldr	r2, [r7, #0]
 8105908:	429a      	cmp	r2, r3
 810590a:	d803      	bhi.n	8105914 <HAL_SPI_Receive+0x374>
 810590c:	683b      	ldr	r3, [r7, #0]
 810590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105912:	d102      	bne.n	810591a <HAL_SPI_Receive+0x37a>
 8105914:	683b      	ldr	r3, [r7, #0]
 8105916:	2b00      	cmp	r3, #0
 8105918:	d114      	bne.n	8105944 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810591a:	68f8      	ldr	r0, [r7, #12]
 810591c:	f000 fb19 	bl	8105f52 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8105920:	68fb      	ldr	r3, [r7, #12]
 8105922:	2200      	movs	r2, #0
 8105924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105928:	68fb      	ldr	r3, [r7, #12]
 810592a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810592e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105932:	68fb      	ldr	r3, [r7, #12]
 8105934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105938:	68fb      	ldr	r3, [r7, #12]
 810593a:	2201      	movs	r2, #1
 810593c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105940:	2303      	movs	r3, #3
 8105942:	e019      	b.n	8105978 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8105944:	68fb      	ldr	r3, [r7, #12]
 8105946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810594a:	b29b      	uxth	r3, r3
 810594c:	2b00      	cmp	r3, #0
 810594e:	f47f af7d 	bne.w	810584c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105952:	68f8      	ldr	r0, [r7, #12]
 8105954:	f000 fafd 	bl	8105f52 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105958:	68fb      	ldr	r3, [r7, #12]
 810595a:	2200      	movs	r2, #0
 810595c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105960:	68fb      	ldr	r3, [r7, #12]
 8105962:	2201      	movs	r2, #1
 8105964:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105968:	68fb      	ldr	r3, [r7, #12]
 810596a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810596e:	2b00      	cmp	r3, #0
 8105970:	d001      	beq.n	8105976 <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 8105972:	2301      	movs	r3, #1
 8105974:	e000      	b.n	8105978 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 8105976:	7ffb      	ldrb	r3, [r7, #31]
}
 8105978:	4618      	mov	r0, r3
 810597a:	3720      	adds	r7, #32
 810597c:	46bd      	mov	sp, r7
 810597e:	bd80      	pop	{r7, pc}

08105980 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8105980:	b580      	push	{r7, lr}
 8105982:	b08e      	sub	sp, #56	; 0x38
 8105984:	af02      	add	r7, sp, #8
 8105986:	60f8      	str	r0, [r7, #12]
 8105988:	60b9      	str	r1, [r7, #8]
 810598a:	607a      	str	r2, [r7, #4]
 810598c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810598e:	2300      	movs	r3, #0
 8105990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8105994:	68fb      	ldr	r3, [r7, #12]
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	3320      	adds	r3, #32
 810599a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810599c:	68fb      	ldr	r3, [r7, #12]
 810599e:	681b      	ldr	r3, [r3, #0]
 81059a0:	3330      	adds	r3, #48	; 0x30
 81059a2:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 81059a4:	68fb      	ldr	r3, [r7, #12]
 81059a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81059aa:	2b01      	cmp	r3, #1
 81059ac:	d101      	bne.n	81059b2 <HAL_SPI_TransmitReceive+0x32>
 81059ae:	2302      	movs	r3, #2
 81059b0:	e2cb      	b.n	8105f4a <HAL_SPI_TransmitReceive+0x5ca>
 81059b2:	68fb      	ldr	r3, [r7, #12]
 81059b4:	2201      	movs	r2, #1
 81059b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81059ba:	f7fd f9f1 	bl	8102da0 <HAL_GetTick>
 81059be:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 81059c0:	887b      	ldrh	r3, [r7, #2]
 81059c2:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 81059c4:	887b      	ldrh	r3, [r7, #2]
 81059c6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 81059c8:	68fb      	ldr	r3, [r7, #12]
 81059ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81059ce:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 81059d0:	68fb      	ldr	r3, [r7, #12]
 81059d2:	685b      	ldr	r3, [r3, #4]
 81059d4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81059d6:	7efb      	ldrb	r3, [r7, #27]
 81059d8:	2b01      	cmp	r3, #1
 81059da:	d014      	beq.n	8105a06 <HAL_SPI_TransmitReceive+0x86>
 81059dc:	697b      	ldr	r3, [r7, #20]
 81059de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81059e2:	d106      	bne.n	81059f2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81059e4:	68fb      	ldr	r3, [r7, #12]
 81059e6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 81059e8:	2b00      	cmp	r3, #0
 81059ea:	d102      	bne.n	81059f2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81059ec:	7efb      	ldrb	r3, [r7, #27]
 81059ee:	2b04      	cmp	r3, #4
 81059f0:	d009      	beq.n	8105a06 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 81059f2:	2302      	movs	r3, #2
 81059f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81059f8:	68fb      	ldr	r3, [r7, #12]
 81059fa:	2200      	movs	r2, #0
 81059fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105a00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8105a04:	e2a1      	b.n	8105f4a <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8105a06:	68bb      	ldr	r3, [r7, #8]
 8105a08:	2b00      	cmp	r3, #0
 8105a0a:	d005      	beq.n	8105a18 <HAL_SPI_TransmitReceive+0x98>
 8105a0c:	687b      	ldr	r3, [r7, #4]
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d002      	beq.n	8105a18 <HAL_SPI_TransmitReceive+0x98>
 8105a12:	887b      	ldrh	r3, [r7, #2]
 8105a14:	2b00      	cmp	r3, #0
 8105a16:	d109      	bne.n	8105a2c <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8105a18:	2301      	movs	r3, #1
 8105a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8105a1e:	68fb      	ldr	r3, [r7, #12]
 8105a20:	2200      	movs	r2, #0
 8105a22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105a26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8105a2a:	e28e      	b.n	8105f4a <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105a2c:	68fb      	ldr	r3, [r7, #12]
 8105a2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105a32:	b2db      	uxtb	r3, r3
 8105a34:	2b04      	cmp	r3, #4
 8105a36:	d003      	beq.n	8105a40 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8105a38:	68fb      	ldr	r3, [r7, #12]
 8105a3a:	2205      	movs	r2, #5
 8105a3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105a40:	68fb      	ldr	r3, [r7, #12]
 8105a42:	2200      	movs	r2, #0
 8105a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8105a48:	68fb      	ldr	r3, [r7, #12]
 8105a4a:	687a      	ldr	r2, [r7, #4]
 8105a4c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8105a4e:	68fb      	ldr	r3, [r7, #12]
 8105a50:	887a      	ldrh	r2, [r7, #2]
 8105a52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8105a56:	68fb      	ldr	r3, [r7, #12]
 8105a58:	887a      	ldrh	r2, [r7, #2]
 8105a5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8105a5e:	68fb      	ldr	r3, [r7, #12]
 8105a60:	68ba      	ldr	r2, [r7, #8]
 8105a62:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8105a64:	68fb      	ldr	r3, [r7, #12]
 8105a66:	887a      	ldrh	r2, [r7, #2]
 8105a68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8105a6c:	68fb      	ldr	r3, [r7, #12]
 8105a6e:	887a      	ldrh	r2, [r7, #2]
 8105a70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8105a74:	68fb      	ldr	r3, [r7, #12]
 8105a76:	2200      	movs	r2, #0
 8105a78:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8105a7a:	68fb      	ldr	r3, [r7, #12]
 8105a7c:	2200      	movs	r2, #0
 8105a7e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105a80:	68fb      	ldr	r3, [r7, #12]
 8105a82:	681b      	ldr	r3, [r3, #0]
 8105a84:	685b      	ldr	r3, [r3, #4]
 8105a86:	0c1b      	lsrs	r3, r3, #16
 8105a88:	041b      	lsls	r3, r3, #16
 8105a8a:	8879      	ldrh	r1, [r7, #2]
 8105a8c:	68fa      	ldr	r2, [r7, #12]
 8105a8e:	6812      	ldr	r2, [r2, #0]
 8105a90:	430b      	orrs	r3, r1
 8105a92:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8105a94:	68fb      	ldr	r3, [r7, #12]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	681a      	ldr	r2, [r3, #0]
 8105a9a:	68fb      	ldr	r3, [r7, #12]
 8105a9c:	681b      	ldr	r3, [r3, #0]
 8105a9e:	f042 0201 	orr.w	r2, r2, #1
 8105aa2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8105aa4:	68fb      	ldr	r3, [r7, #12]
 8105aa6:	685b      	ldr	r3, [r3, #4]
 8105aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105aac:	d107      	bne.n	8105abe <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8105aae:	68fb      	ldr	r3, [r7, #12]
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	681a      	ldr	r2, [r3, #0]
 8105ab4:	68fb      	ldr	r3, [r7, #12]
 8105ab6:	681b      	ldr	r3, [r3, #0]
 8105ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105abc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8105abe:	68fb      	ldr	r3, [r7, #12]
 8105ac0:	68db      	ldr	r3, [r3, #12]
 8105ac2:	2b0f      	cmp	r3, #15
 8105ac4:	d970      	bls.n	8105ba8 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105ac6:	e068      	b.n	8105b9a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8105ac8:	68fb      	ldr	r3, [r7, #12]
 8105aca:	681b      	ldr	r3, [r3, #0]
 8105acc:	695b      	ldr	r3, [r3, #20]
 8105ace:	f003 0302 	and.w	r3, r3, #2
 8105ad2:	2b02      	cmp	r3, #2
 8105ad4:	d11a      	bne.n	8105b0c <HAL_SPI_TransmitReceive+0x18c>
 8105ad6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105ad8:	2b00      	cmp	r3, #0
 8105ada:	d017      	beq.n	8105b0c <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105adc:	68fb      	ldr	r3, [r7, #12]
 8105ade:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105ae0:	68fb      	ldr	r3, [r7, #12]
 8105ae2:	681b      	ldr	r3, [r3, #0]
 8105ae4:	6812      	ldr	r2, [r2, #0]
 8105ae6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8105ae8:	68fb      	ldr	r3, [r7, #12]
 8105aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105aec:	1d1a      	adds	r2, r3, #4
 8105aee:	68fb      	ldr	r3, [r7, #12]
 8105af0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8105af2:	68fb      	ldr	r3, [r7, #12]
 8105af4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105af8:	b29b      	uxth	r3, r3
 8105afa:	3b01      	subs	r3, #1
 8105afc:	b29a      	uxth	r2, r3
 8105afe:	68fb      	ldr	r3, [r7, #12]
 8105b00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105b04:	68fb      	ldr	r3, [r7, #12]
 8105b06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105b0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8105b0c:	68fb      	ldr	r3, [r7, #12]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	695a      	ldr	r2, [r3, #20]
 8105b12:	f248 0308 	movw	r3, #32776	; 0x8008
 8105b16:	4013      	ands	r3, r2
 8105b18:	2b00      	cmp	r3, #0
 8105b1a:	d01a      	beq.n	8105b52 <HAL_SPI_TransmitReceive+0x1d2>
 8105b1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105b1e:	2b00      	cmp	r3, #0
 8105b20:	d017      	beq.n	8105b52 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105b22:	68fb      	ldr	r3, [r7, #12]
 8105b24:	681a      	ldr	r2, [r3, #0]
 8105b26:	68fb      	ldr	r3, [r7, #12]
 8105b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105b2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105b2c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8105b2e:	68fb      	ldr	r3, [r7, #12]
 8105b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105b32:	1d1a      	adds	r2, r3, #4
 8105b34:	68fb      	ldr	r3, [r7, #12]
 8105b36:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8105b38:	68fb      	ldr	r3, [r7, #12]
 8105b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105b3e:	b29b      	uxth	r3, r3
 8105b40:	3b01      	subs	r3, #1
 8105b42:	b29a      	uxth	r2, r3
 8105b44:	68fb      	ldr	r3, [r7, #12]
 8105b46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8105b4a:	68fb      	ldr	r3, [r7, #12]
 8105b4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105b50:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105b52:	f7fd f925 	bl	8102da0 <HAL_GetTick>
 8105b56:	4602      	mov	r2, r0
 8105b58:	69fb      	ldr	r3, [r7, #28]
 8105b5a:	1ad3      	subs	r3, r2, r3
 8105b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105b5e:	429a      	cmp	r2, r3
 8105b60:	d803      	bhi.n	8105b6a <HAL_SPI_TransmitReceive+0x1ea>
 8105b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b68:	d102      	bne.n	8105b70 <HAL_SPI_TransmitReceive+0x1f0>
 8105b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105b6c:	2b00      	cmp	r3, #0
 8105b6e:	d114      	bne.n	8105b9a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105b70:	68f8      	ldr	r0, [r7, #12]
 8105b72:	f000 f9ee 	bl	8105f52 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105b76:	68fb      	ldr	r3, [r7, #12]
 8105b78:	2200      	movs	r2, #0
 8105b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105b7e:	68fb      	ldr	r3, [r7, #12]
 8105b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105b88:	68fb      	ldr	r3, [r7, #12]
 8105b8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105b8e:	68fb      	ldr	r3, [r7, #12]
 8105b90:	2201      	movs	r2, #1
 8105b92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105b96:	2303      	movs	r3, #3
 8105b98:	e1d7      	b.n	8105f4a <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105b9c:	2b00      	cmp	r3, #0
 8105b9e:	d193      	bne.n	8105ac8 <HAL_SPI_TransmitReceive+0x148>
 8105ba0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105ba2:	2b00      	cmp	r3, #0
 8105ba4:	d190      	bne.n	8105ac8 <HAL_SPI_TransmitReceive+0x148>
 8105ba6:	e1a9      	b.n	8105efc <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105ba8:	68fb      	ldr	r3, [r7, #12]
 8105baa:	68db      	ldr	r3, [r3, #12]
 8105bac:	2b07      	cmp	r3, #7
 8105bae:	f240 819d 	bls.w	8105eec <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105bb2:	e0a6      	b.n	8105d02 <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8105bb4:	68fb      	ldr	r3, [r7, #12]
 8105bb6:	681b      	ldr	r3, [r3, #0]
 8105bb8:	695b      	ldr	r3, [r3, #20]
 8105bba:	f003 0302 	and.w	r3, r3, #2
 8105bbe:	2b02      	cmp	r3, #2
 8105bc0:	d139      	bne.n	8105c36 <HAL_SPI_TransmitReceive+0x2b6>
 8105bc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105bc4:	2b00      	cmp	r3, #0
 8105bc6:	d036      	beq.n	8105c36 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105bc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105bca:	2b01      	cmp	r3, #1
 8105bcc:	d91c      	bls.n	8105c08 <HAL_SPI_TransmitReceive+0x288>
 8105bce:	68fb      	ldr	r3, [r7, #12]
 8105bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105bd2:	2b00      	cmp	r3, #0
 8105bd4:	d018      	beq.n	8105c08 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105bd6:	68fb      	ldr	r3, [r7, #12]
 8105bd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105bda:	68fb      	ldr	r3, [r7, #12]
 8105bdc:	681b      	ldr	r3, [r3, #0]
 8105bde:	6812      	ldr	r2, [r2, #0]
 8105be0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105be2:	68fb      	ldr	r3, [r7, #12]
 8105be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105be6:	1d1a      	adds	r2, r3, #4
 8105be8:	68fb      	ldr	r3, [r7, #12]
 8105bea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8105bec:	68fb      	ldr	r3, [r7, #12]
 8105bee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105bf2:	b29b      	uxth	r3, r3
 8105bf4:	3b02      	subs	r3, #2
 8105bf6:	b29a      	uxth	r2, r3
 8105bf8:	68fb      	ldr	r3, [r7, #12]
 8105bfa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105bfe:	68fb      	ldr	r3, [r7, #12]
 8105c00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105c04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105c06:	e016      	b.n	8105c36 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105c08:	68fb      	ldr	r3, [r7, #12]
 8105c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c0c:	881a      	ldrh	r2, [r3, #0]
 8105c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105c10:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8105c12:	68fb      	ldr	r3, [r7, #12]
 8105c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105c16:	1c9a      	adds	r2, r3, #2
 8105c18:	68fb      	ldr	r3, [r7, #12]
 8105c1a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8105c1c:	68fb      	ldr	r3, [r7, #12]
 8105c1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105c22:	b29b      	uxth	r3, r3
 8105c24:	3b01      	subs	r3, #1
 8105c26:	b29a      	uxth	r2, r3
 8105c28:	68fb      	ldr	r3, [r7, #12]
 8105c2a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105c2e:	68fb      	ldr	r3, [r7, #12]
 8105c30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105c34:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8105c36:	68fb      	ldr	r3, [r7, #12]
 8105c38:	681b      	ldr	r3, [r3, #0]
 8105c3a:	695b      	ldr	r3, [r3, #20]
 8105c3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105c40:	2b00      	cmp	r3, #0
 8105c42:	d03a      	beq.n	8105cba <HAL_SPI_TransmitReceive+0x33a>
 8105c44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105c46:	2b00      	cmp	r3, #0
 8105c48:	d037      	beq.n	8105cba <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105c4a:	68fb      	ldr	r3, [r7, #12]
 8105c4c:	681b      	ldr	r3, [r3, #0]
 8105c4e:	695b      	ldr	r3, [r3, #20]
 8105c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105c54:	2b00      	cmp	r3, #0
 8105c56:	d018      	beq.n	8105c8a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105c58:	68fb      	ldr	r3, [r7, #12]
 8105c5a:	681a      	ldr	r2, [r3, #0]
 8105c5c:	68fb      	ldr	r3, [r7, #12]
 8105c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105c60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105c62:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105c64:	68fb      	ldr	r3, [r7, #12]
 8105c66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105c68:	1d1a      	adds	r2, r3, #4
 8105c6a:	68fb      	ldr	r3, [r7, #12]
 8105c6c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105c6e:	68fb      	ldr	r3, [r7, #12]
 8105c70:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105c74:	b29b      	uxth	r3, r3
 8105c76:	3b02      	subs	r3, #2
 8105c78:	b29a      	uxth	r2, r3
 8105c7a:	68fb      	ldr	r3, [r7, #12]
 8105c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105c80:	68fb      	ldr	r3, [r7, #12]
 8105c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105c86:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105c88:	e017      	b.n	8105cba <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105c8a:	68fb      	ldr	r3, [r7, #12]
 8105c8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105c8e:	6a3a      	ldr	r2, [r7, #32]
 8105c90:	8812      	ldrh	r2, [r2, #0]
 8105c92:	b292      	uxth	r2, r2
 8105c94:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105c96:	68fb      	ldr	r3, [r7, #12]
 8105c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105c9a:	1c9a      	adds	r2, r3, #2
 8105c9c:	68fb      	ldr	r3, [r7, #12]
 8105c9e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8105ca0:	68fb      	ldr	r3, [r7, #12]
 8105ca2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105ca6:	b29b      	uxth	r3, r3
 8105ca8:	3b01      	subs	r3, #1
 8105caa:	b29a      	uxth	r2, r3
 8105cac:	68fb      	ldr	r3, [r7, #12]
 8105cae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105cb2:	68fb      	ldr	r3, [r7, #12]
 8105cb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105cb8:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105cba:	f7fd f871 	bl	8102da0 <HAL_GetTick>
 8105cbe:	4602      	mov	r2, r0
 8105cc0:	69fb      	ldr	r3, [r7, #28]
 8105cc2:	1ad3      	subs	r3, r2, r3
 8105cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105cc6:	429a      	cmp	r2, r3
 8105cc8:	d803      	bhi.n	8105cd2 <HAL_SPI_TransmitReceive+0x352>
 8105cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105cd0:	d102      	bne.n	8105cd8 <HAL_SPI_TransmitReceive+0x358>
 8105cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105cd4:	2b00      	cmp	r3, #0
 8105cd6:	d114      	bne.n	8105d02 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105cd8:	68f8      	ldr	r0, [r7, #12]
 8105cda:	f000 f93a 	bl	8105f52 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105cde:	68fb      	ldr	r3, [r7, #12]
 8105ce0:	2200      	movs	r2, #0
 8105ce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105ce6:	68fb      	ldr	r3, [r7, #12]
 8105ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105cec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105cf0:	68fb      	ldr	r3, [r7, #12]
 8105cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105cf6:	68fb      	ldr	r3, [r7, #12]
 8105cf8:	2201      	movs	r2, #1
 8105cfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105cfe:	2303      	movs	r3, #3
 8105d00:	e123      	b.n	8105f4a <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105d02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105d04:	2b00      	cmp	r3, #0
 8105d06:	f47f af55 	bne.w	8105bb4 <HAL_SPI_TransmitReceive+0x234>
 8105d0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105d0c:	2b00      	cmp	r3, #0
 8105d0e:	f47f af51 	bne.w	8105bb4 <HAL_SPI_TransmitReceive+0x234>
 8105d12:	e0f3      	b.n	8105efc <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8105d14:	68fb      	ldr	r3, [r7, #12]
 8105d16:	681b      	ldr	r3, [r3, #0]
 8105d18:	695b      	ldr	r3, [r3, #20]
 8105d1a:	f003 0302 	and.w	r3, r3, #2
 8105d1e:	2b02      	cmp	r3, #2
 8105d20:	d15a      	bne.n	8105dd8 <HAL_SPI_TransmitReceive+0x458>
 8105d22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105d24:	2b00      	cmp	r3, #0
 8105d26:	d057      	beq.n	8105dd8 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8105d28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105d2a:	2b03      	cmp	r3, #3
 8105d2c:	d91c      	bls.n	8105d68 <HAL_SPI_TransmitReceive+0x3e8>
 8105d2e:	68fb      	ldr	r3, [r7, #12]
 8105d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105d32:	2b40      	cmp	r3, #64	; 0x40
 8105d34:	d918      	bls.n	8105d68 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105d36:	68fb      	ldr	r3, [r7, #12]
 8105d38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105d3a:	68fb      	ldr	r3, [r7, #12]
 8105d3c:	681b      	ldr	r3, [r3, #0]
 8105d3e:	6812      	ldr	r2, [r2, #0]
 8105d40:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105d42:	68fb      	ldr	r3, [r7, #12]
 8105d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d46:	1d1a      	adds	r2, r3, #4
 8105d48:	68fb      	ldr	r3, [r7, #12]
 8105d4a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8105d4c:	68fb      	ldr	r3, [r7, #12]
 8105d4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105d52:	b29b      	uxth	r3, r3
 8105d54:	3b04      	subs	r3, #4
 8105d56:	b29a      	uxth	r2, r3
 8105d58:	68fb      	ldr	r3, [r7, #12]
 8105d5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105d5e:	68fb      	ldr	r3, [r7, #12]
 8105d60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105d64:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105d66:	e037      	b.n	8105dd8 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105d68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105d6a:	2b01      	cmp	r3, #1
 8105d6c:	d91b      	bls.n	8105da6 <HAL_SPI_TransmitReceive+0x426>
 8105d6e:	68fb      	ldr	r3, [r7, #12]
 8105d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105d72:	2b00      	cmp	r3, #0
 8105d74:	d017      	beq.n	8105da6 <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105d76:	68fb      	ldr	r3, [r7, #12]
 8105d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d7a:	881a      	ldrh	r2, [r3, #0]
 8105d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105d7e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8105d80:	68fb      	ldr	r3, [r7, #12]
 8105d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105d84:	1c9a      	adds	r2, r3, #2
 8105d86:	68fb      	ldr	r3, [r7, #12]
 8105d88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8105d8a:	68fb      	ldr	r3, [r7, #12]
 8105d8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105d90:	b29b      	uxth	r3, r3
 8105d92:	3b02      	subs	r3, #2
 8105d94:	b29a      	uxth	r2, r3
 8105d96:	68fb      	ldr	r3, [r7, #12]
 8105d98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105d9c:	68fb      	ldr	r3, [r7, #12]
 8105d9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105da2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105da4:	e018      	b.n	8105dd8 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8105da6:	68fb      	ldr	r3, [r7, #12]
 8105da8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105daa:	68fb      	ldr	r3, [r7, #12]
 8105dac:	681b      	ldr	r3, [r3, #0]
 8105dae:	3320      	adds	r3, #32
 8105db0:	7812      	ldrb	r2, [r2, #0]
 8105db2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8105db4:	68fb      	ldr	r3, [r7, #12]
 8105db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105db8:	1c5a      	adds	r2, r3, #1
 8105dba:	68fb      	ldr	r3, [r7, #12]
 8105dbc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8105dbe:	68fb      	ldr	r3, [r7, #12]
 8105dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105dc4:	b29b      	uxth	r3, r3
 8105dc6:	3b01      	subs	r3, #1
 8105dc8:	b29a      	uxth	r2, r3
 8105dca:	68fb      	ldr	r3, [r7, #12]
 8105dcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105dd0:	68fb      	ldr	r3, [r7, #12]
 8105dd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105dd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8105dd8:	68fb      	ldr	r3, [r7, #12]
 8105dda:	681b      	ldr	r3, [r3, #0]
 8105ddc:	695b      	ldr	r3, [r3, #20]
 8105dde:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105de2:	2b00      	cmp	r3, #0
 8105de4:	d05e      	beq.n	8105ea4 <HAL_SPI_TransmitReceive+0x524>
 8105de6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105de8:	2b00      	cmp	r3, #0
 8105dea:	d05b      	beq.n	8105ea4 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105dec:	68fb      	ldr	r3, [r7, #12]
 8105dee:	681b      	ldr	r3, [r3, #0]
 8105df0:	695b      	ldr	r3, [r3, #20]
 8105df2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105df6:	2b00      	cmp	r3, #0
 8105df8:	d018      	beq.n	8105e2c <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105dfa:	68fb      	ldr	r3, [r7, #12]
 8105dfc:	681a      	ldr	r2, [r3, #0]
 8105dfe:	68fb      	ldr	r3, [r7, #12]
 8105e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105e02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105e04:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105e06:	68fb      	ldr	r3, [r7, #12]
 8105e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105e0a:	1d1a      	adds	r2, r3, #4
 8105e0c:	68fb      	ldr	r3, [r7, #12]
 8105e0e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8105e10:	68fb      	ldr	r3, [r7, #12]
 8105e12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105e16:	b29b      	uxth	r3, r3
 8105e18:	3b04      	subs	r3, #4
 8105e1a:	b29a      	uxth	r2, r3
 8105e1c:	68fb      	ldr	r3, [r7, #12]
 8105e1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105e22:	68fb      	ldr	r3, [r7, #12]
 8105e24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105e28:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105e2a:	e03b      	b.n	8105ea4 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8105e2c:	68fb      	ldr	r3, [r7, #12]
 8105e2e:	681b      	ldr	r3, [r3, #0]
 8105e30:	695b      	ldr	r3, [r3, #20]
 8105e32:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8105e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105e3a:	d918      	bls.n	8105e6e <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105e3c:	68fb      	ldr	r3, [r7, #12]
 8105e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105e40:	6a3a      	ldr	r2, [r7, #32]
 8105e42:	8812      	ldrh	r2, [r2, #0]
 8105e44:	b292      	uxth	r2, r2
 8105e46:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105e48:	68fb      	ldr	r3, [r7, #12]
 8105e4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105e4c:	1c9a      	adds	r2, r3, #2
 8105e4e:	68fb      	ldr	r3, [r7, #12]
 8105e50:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105e52:	68fb      	ldr	r3, [r7, #12]
 8105e54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105e58:	b29b      	uxth	r3, r3
 8105e5a:	3b02      	subs	r3, #2
 8105e5c:	b29a      	uxth	r2, r3
 8105e5e:	68fb      	ldr	r3, [r7, #12]
 8105e60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105e64:	68fb      	ldr	r3, [r7, #12]
 8105e66:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105e6a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105e6c:	e01a      	b.n	8105ea4 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105e6e:	68fb      	ldr	r3, [r7, #12]
 8105e70:	681b      	ldr	r3, [r3, #0]
 8105e72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8105e76:	68fb      	ldr	r3, [r7, #12]
 8105e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105e7a:	7812      	ldrb	r2, [r2, #0]
 8105e7c:	b2d2      	uxtb	r2, r2
 8105e7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105e80:	68fb      	ldr	r3, [r7, #12]
 8105e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105e84:	1c5a      	adds	r2, r3, #1
 8105e86:	68fb      	ldr	r3, [r7, #12]
 8105e88:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8105e8a:	68fb      	ldr	r3, [r7, #12]
 8105e8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105e90:	b29b      	uxth	r3, r3
 8105e92:	3b01      	subs	r3, #1
 8105e94:	b29a      	uxth	r2, r3
 8105e96:	68fb      	ldr	r3, [r7, #12]
 8105e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105e9c:	68fb      	ldr	r3, [r7, #12]
 8105e9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105ea2:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105ea4:	f7fc ff7c 	bl	8102da0 <HAL_GetTick>
 8105ea8:	4602      	mov	r2, r0
 8105eaa:	69fb      	ldr	r3, [r7, #28]
 8105eac:	1ad3      	subs	r3, r2, r3
 8105eae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105eb0:	429a      	cmp	r2, r3
 8105eb2:	d803      	bhi.n	8105ebc <HAL_SPI_TransmitReceive+0x53c>
 8105eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105eba:	d102      	bne.n	8105ec2 <HAL_SPI_TransmitReceive+0x542>
 8105ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105ebe:	2b00      	cmp	r3, #0
 8105ec0:	d114      	bne.n	8105eec <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105ec2:	68f8      	ldr	r0, [r7, #12]
 8105ec4:	f000 f845 	bl	8105f52 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105ec8:	68fb      	ldr	r3, [r7, #12]
 8105eca:	2200      	movs	r2, #0
 8105ecc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105ed0:	68fb      	ldr	r3, [r7, #12]
 8105ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105ed6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105eda:	68fb      	ldr	r3, [r7, #12]
 8105edc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105ee0:	68fb      	ldr	r3, [r7, #12]
 8105ee2:	2201      	movs	r2, #1
 8105ee4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105ee8:	2303      	movs	r3, #3
 8105eea:	e02e      	b.n	8105f4a <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105eec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105eee:	2b00      	cmp	r3, #0
 8105ef0:	f47f af10 	bne.w	8105d14 <HAL_SPI_TransmitReceive+0x394>
 8105ef4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105ef6:	2b00      	cmp	r3, #0
 8105ef8:	f47f af0c 	bne.w	8105d14 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8105efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105efe:	9300      	str	r3, [sp, #0]
 8105f00:	69fb      	ldr	r3, [r7, #28]
 8105f02:	2200      	movs	r2, #0
 8105f04:	2108      	movs	r1, #8
 8105f06:	68f8      	ldr	r0, [r7, #12]
 8105f08:	f000 f8c3 	bl	8106092 <SPI_WaitOnFlagUntilTimeout>
 8105f0c:	4603      	mov	r3, r0
 8105f0e:	2b00      	cmp	r3, #0
 8105f10:	d007      	beq.n	8105f22 <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8105f12:	68fb      	ldr	r3, [r7, #12]
 8105f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105f18:	f043 0220 	orr.w	r2, r3, #32
 8105f1c:	68fb      	ldr	r3, [r7, #12]
 8105f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105f22:	68f8      	ldr	r0, [r7, #12]
 8105f24:	f000 f815 	bl	8105f52 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105f28:	68fb      	ldr	r3, [r7, #12]
 8105f2a:	2200      	movs	r2, #0
 8105f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105f30:	68fb      	ldr	r3, [r7, #12]
 8105f32:	2201      	movs	r2, #1
 8105f34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105f38:	68fb      	ldr	r3, [r7, #12]
 8105f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105f3e:	2b00      	cmp	r3, #0
 8105f40:	d001      	beq.n	8105f46 <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 8105f42:	2301      	movs	r3, #1
 8105f44:	e001      	b.n	8105f4a <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 8105f46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8105f4a:	4618      	mov	r0, r3
 8105f4c:	3730      	adds	r7, #48	; 0x30
 8105f4e:	46bd      	mov	sp, r7
 8105f50:	bd80      	pop	{r7, pc}

08105f52 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8105f52:	b480      	push	{r7}
 8105f54:	b085      	sub	sp, #20
 8105f56:	af00      	add	r7, sp, #0
 8105f58:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8105f5a:	687b      	ldr	r3, [r7, #4]
 8105f5c:	681b      	ldr	r3, [r3, #0]
 8105f5e:	695b      	ldr	r3, [r3, #20]
 8105f60:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8105f62:	687b      	ldr	r3, [r7, #4]
 8105f64:	681b      	ldr	r3, [r3, #0]
 8105f66:	699a      	ldr	r2, [r3, #24]
 8105f68:	687b      	ldr	r3, [r7, #4]
 8105f6a:	681b      	ldr	r3, [r3, #0]
 8105f6c:	f042 0208 	orr.w	r2, r2, #8
 8105f70:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105f72:	687b      	ldr	r3, [r7, #4]
 8105f74:	681b      	ldr	r3, [r3, #0]
 8105f76:	699a      	ldr	r2, [r3, #24]
 8105f78:	687b      	ldr	r3, [r7, #4]
 8105f7a:	681b      	ldr	r3, [r3, #0]
 8105f7c:	f042 0210 	orr.w	r2, r2, #16
 8105f80:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	681b      	ldr	r3, [r3, #0]
 8105f86:	681a      	ldr	r2, [r3, #0]
 8105f88:	687b      	ldr	r3, [r7, #4]
 8105f8a:	681b      	ldr	r3, [r3, #0]
 8105f8c:	f022 0201 	bic.w	r2, r2, #1
 8105f90:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	681b      	ldr	r3, [r3, #0]
 8105f96:	691b      	ldr	r3, [r3, #16]
 8105f98:	687a      	ldr	r2, [r7, #4]
 8105f9a:	6812      	ldr	r2, [r2, #0]
 8105f9c:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8105fa0:	f023 0303 	bic.w	r3, r3, #3
 8105fa4:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105fa6:	687b      	ldr	r3, [r7, #4]
 8105fa8:	681b      	ldr	r3, [r3, #0]
 8105faa:	689a      	ldr	r2, [r3, #8]
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	681b      	ldr	r3, [r3, #0]
 8105fb0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8105fb4:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105fb6:	687b      	ldr	r3, [r7, #4]
 8105fb8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105fbc:	b2db      	uxtb	r3, r3
 8105fbe:	2b04      	cmp	r3, #4
 8105fc0:	d014      	beq.n	8105fec <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8105fc2:	68fb      	ldr	r3, [r7, #12]
 8105fc4:	f003 0320 	and.w	r3, r3, #32
 8105fc8:	2b00      	cmp	r3, #0
 8105fca:	d00f      	beq.n	8105fec <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105fd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8105fd6:	687b      	ldr	r3, [r7, #4]
 8105fd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8105fdc:	687b      	ldr	r3, [r7, #4]
 8105fde:	681b      	ldr	r3, [r3, #0]
 8105fe0:	699a      	ldr	r2, [r3, #24]
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	681b      	ldr	r3, [r3, #0]
 8105fe6:	f042 0220 	orr.w	r2, r2, #32
 8105fea:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8105fec:	687b      	ldr	r3, [r7, #4]
 8105fee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105ff2:	b2db      	uxtb	r3, r3
 8105ff4:	2b03      	cmp	r3, #3
 8105ff6:	d014      	beq.n	8106022 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8105ff8:	68fb      	ldr	r3, [r7, #12]
 8105ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105ffe:	2b00      	cmp	r3, #0
 8106000:	d00f      	beq.n	8106022 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8106002:	687b      	ldr	r3, [r7, #4]
 8106004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106008:	f043 0204 	orr.w	r2, r3, #4
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8106012:	687b      	ldr	r3, [r7, #4]
 8106014:	681b      	ldr	r3, [r3, #0]
 8106016:	699a      	ldr	r2, [r3, #24]
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8106020:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8106022:	68fb      	ldr	r3, [r7, #12]
 8106024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8106028:	2b00      	cmp	r3, #0
 810602a:	d00f      	beq.n	810604c <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106032:	f043 0201 	orr.w	r2, r3, #1
 8106036:	687b      	ldr	r3, [r7, #4]
 8106038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	681b      	ldr	r3, [r3, #0]
 8106040:	699a      	ldr	r2, [r3, #24]
 8106042:	687b      	ldr	r3, [r7, #4]
 8106044:	681b      	ldr	r3, [r3, #0]
 8106046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810604a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 810604c:	68fb      	ldr	r3, [r7, #12]
 810604e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8106052:	2b00      	cmp	r3, #0
 8106054:	d00f      	beq.n	8106076 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106056:	687b      	ldr	r3, [r7, #4]
 8106058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810605c:	f043 0208 	orr.w	r2, r3, #8
 8106060:	687b      	ldr	r3, [r7, #4]
 8106062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	699a      	ldr	r2, [r3, #24]
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106074:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8106076:	687b      	ldr	r3, [r7, #4]
 8106078:	2200      	movs	r2, #0
 810607a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	2200      	movs	r2, #0
 8106082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8106086:	bf00      	nop
 8106088:	3714      	adds	r7, #20
 810608a:	46bd      	mov	sp, r7
 810608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106090:	4770      	bx	lr

08106092 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8106092:	b580      	push	{r7, lr}
 8106094:	b084      	sub	sp, #16
 8106096:	af00      	add	r7, sp, #0
 8106098:	60f8      	str	r0, [r7, #12]
 810609a:	60b9      	str	r1, [r7, #8]
 810609c:	603b      	str	r3, [r7, #0]
 810609e:	4613      	mov	r3, r2
 81060a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81060a2:	e010      	b.n	81060c6 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81060a4:	f7fc fe7c 	bl	8102da0 <HAL_GetTick>
 81060a8:	4602      	mov	r2, r0
 81060aa:	683b      	ldr	r3, [r7, #0]
 81060ac:	1ad3      	subs	r3, r2, r3
 81060ae:	69ba      	ldr	r2, [r7, #24]
 81060b0:	429a      	cmp	r2, r3
 81060b2:	d803      	bhi.n	81060bc <SPI_WaitOnFlagUntilTimeout+0x2a>
 81060b4:	69bb      	ldr	r3, [r7, #24]
 81060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 81060ba:	d102      	bne.n	81060c2 <SPI_WaitOnFlagUntilTimeout+0x30>
 81060bc:	69bb      	ldr	r3, [r7, #24]
 81060be:	2b00      	cmp	r3, #0
 81060c0:	d101      	bne.n	81060c6 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81060c2:	2303      	movs	r3, #3
 81060c4:	e00f      	b.n	81060e6 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81060c6:	68fb      	ldr	r3, [r7, #12]
 81060c8:	681b      	ldr	r3, [r3, #0]
 81060ca:	695a      	ldr	r2, [r3, #20]
 81060cc:	68bb      	ldr	r3, [r7, #8]
 81060ce:	4013      	ands	r3, r2
 81060d0:	68ba      	ldr	r2, [r7, #8]
 81060d2:	429a      	cmp	r2, r3
 81060d4:	bf0c      	ite	eq
 81060d6:	2301      	moveq	r3, #1
 81060d8:	2300      	movne	r3, #0
 81060da:	b2db      	uxtb	r3, r3
 81060dc:	461a      	mov	r2, r3
 81060de:	79fb      	ldrb	r3, [r7, #7]
 81060e0:	429a      	cmp	r2, r3
 81060e2:	d0df      	beq.n	81060a4 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81060e4:	2300      	movs	r3, #0
}
 81060e6:	4618      	mov	r0, r3
 81060e8:	3710      	adds	r7, #16
 81060ea:	46bd      	mov	sp, r7
 81060ec:	bd80      	pop	{r7, pc}

081060ee <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81060ee:	b480      	push	{r7}
 81060f0:	b085      	sub	sp, #20
 81060f2:	af00      	add	r7, sp, #0
 81060f4:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81060f6:	687b      	ldr	r3, [r7, #4]
 81060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81060fa:	095b      	lsrs	r3, r3, #5
 81060fc:	3301      	adds	r3, #1
 81060fe:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	68db      	ldr	r3, [r3, #12]
 8106104:	3301      	adds	r3, #1
 8106106:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8106108:	68bb      	ldr	r3, [r7, #8]
 810610a:	3307      	adds	r3, #7
 810610c:	08db      	lsrs	r3, r3, #3
 810610e:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8106110:	68bb      	ldr	r3, [r7, #8]
 8106112:	68fa      	ldr	r2, [r7, #12]
 8106114:	fb02 f303 	mul.w	r3, r2, r3
}
 8106118:	4618      	mov	r0, r3
 810611a:	3714      	adds	r7, #20
 810611c:	46bd      	mov	sp, r7
 810611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106122:	4770      	bx	lr

08106124 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8106124:	b580      	push	{r7, lr}
 8106126:	b082      	sub	sp, #8
 8106128:	af00      	add	r7, sp, #0
 810612a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	2b00      	cmp	r3, #0
 8106130:	d101      	bne.n	8106136 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8106132:	2301      	movs	r3, #1
 8106134:	e042      	b.n	81061bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810613c:	2b00      	cmp	r3, #0
 810613e:	d106      	bne.n	810614e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	2200      	movs	r2, #0
 8106144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106148:	6878      	ldr	r0, [r7, #4]
 810614a:	f7fc fbf5 	bl	8102938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810614e:	687b      	ldr	r3, [r7, #4]
 8106150:	2224      	movs	r2, #36	; 0x24
 8106152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8106156:	687b      	ldr	r3, [r7, #4]
 8106158:	681b      	ldr	r3, [r3, #0]
 810615a:	681a      	ldr	r2, [r3, #0]
 810615c:	687b      	ldr	r3, [r7, #4]
 810615e:	681b      	ldr	r3, [r3, #0]
 8106160:	f022 0201 	bic.w	r2, r2, #1
 8106164:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8106166:	6878      	ldr	r0, [r7, #4]
 8106168:	f000 f996 	bl	8106498 <UART_SetConfig>
 810616c:	4603      	mov	r3, r0
 810616e:	2b01      	cmp	r3, #1
 8106170:	d101      	bne.n	8106176 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8106172:	2301      	movs	r3, #1
 8106174:	e022      	b.n	81061bc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810617a:	2b00      	cmp	r3, #0
 810617c:	d002      	beq.n	8106184 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810617e:	6878      	ldr	r0, [r7, #4]
 8106180:	f000 feea 	bl	8106f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8106184:	687b      	ldr	r3, [r7, #4]
 8106186:	681b      	ldr	r3, [r3, #0]
 8106188:	685a      	ldr	r2, [r3, #4]
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8106192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106194:	687b      	ldr	r3, [r7, #4]
 8106196:	681b      	ldr	r3, [r3, #0]
 8106198:	689a      	ldr	r2, [r3, #8]
 810619a:	687b      	ldr	r3, [r7, #4]
 810619c:	681b      	ldr	r3, [r3, #0]
 810619e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81061a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81061a4:	687b      	ldr	r3, [r7, #4]
 81061a6:	681b      	ldr	r3, [r3, #0]
 81061a8:	681a      	ldr	r2, [r3, #0]
 81061aa:	687b      	ldr	r3, [r7, #4]
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	f042 0201 	orr.w	r2, r2, #1
 81061b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81061b4:	6878      	ldr	r0, [r7, #4]
 81061b6:	f000 ff71 	bl	810709c <UART_CheckIdleState>
 81061ba:	4603      	mov	r3, r0
}
 81061bc:	4618      	mov	r0, r3
 81061be:	3708      	adds	r7, #8
 81061c0:	46bd      	mov	sp, r7
 81061c2:	bd80      	pop	{r7, pc}

081061c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81061c4:	b580      	push	{r7, lr}
 81061c6:	b08a      	sub	sp, #40	; 0x28
 81061c8:	af02      	add	r7, sp, #8
 81061ca:	60f8      	str	r0, [r7, #12]
 81061cc:	60b9      	str	r1, [r7, #8]
 81061ce:	603b      	str	r3, [r7, #0]
 81061d0:	4613      	mov	r3, r2
 81061d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81061d4:	68fb      	ldr	r3, [r7, #12]
 81061d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81061da:	2b20      	cmp	r3, #32
 81061dc:	f040 8083 	bne.w	81062e6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81061e0:	68bb      	ldr	r3, [r7, #8]
 81061e2:	2b00      	cmp	r3, #0
 81061e4:	d002      	beq.n	81061ec <HAL_UART_Transmit+0x28>
 81061e6:	88fb      	ldrh	r3, [r7, #6]
 81061e8:	2b00      	cmp	r3, #0
 81061ea:	d101      	bne.n	81061f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81061ec:	2301      	movs	r3, #1
 81061ee:	e07b      	b.n	81062e8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81061f0:	68fb      	ldr	r3, [r7, #12]
 81061f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81061f6:	2b01      	cmp	r3, #1
 81061f8:	d101      	bne.n	81061fe <HAL_UART_Transmit+0x3a>
 81061fa:	2302      	movs	r3, #2
 81061fc:	e074      	b.n	81062e8 <HAL_UART_Transmit+0x124>
 81061fe:	68fb      	ldr	r3, [r7, #12]
 8106200:	2201      	movs	r2, #1
 8106202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106206:	68fb      	ldr	r3, [r7, #12]
 8106208:	2200      	movs	r2, #0
 810620a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810620e:	68fb      	ldr	r3, [r7, #12]
 8106210:	2221      	movs	r2, #33	; 0x21
 8106212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106216:	f7fc fdc3 	bl	8102da0 <HAL_GetTick>
 810621a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810621c:	68fb      	ldr	r3, [r7, #12]
 810621e:	88fa      	ldrh	r2, [r7, #6]
 8106220:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8106224:	68fb      	ldr	r3, [r7, #12]
 8106226:	88fa      	ldrh	r2, [r7, #6]
 8106228:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810622c:	68fb      	ldr	r3, [r7, #12]
 810622e:	689b      	ldr	r3, [r3, #8]
 8106230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106234:	d108      	bne.n	8106248 <HAL_UART_Transmit+0x84>
 8106236:	68fb      	ldr	r3, [r7, #12]
 8106238:	691b      	ldr	r3, [r3, #16]
 810623a:	2b00      	cmp	r3, #0
 810623c:	d104      	bne.n	8106248 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810623e:	2300      	movs	r3, #0
 8106240:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8106242:	68bb      	ldr	r3, [r7, #8]
 8106244:	61bb      	str	r3, [r7, #24]
 8106246:	e003      	b.n	8106250 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8106248:	68bb      	ldr	r3, [r7, #8]
 810624a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810624c:	2300      	movs	r3, #0
 810624e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8106250:	68fb      	ldr	r3, [r7, #12]
 8106252:	2200      	movs	r2, #0
 8106254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8106258:	e02c      	b.n	81062b4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810625a:	683b      	ldr	r3, [r7, #0]
 810625c:	9300      	str	r3, [sp, #0]
 810625e:	697b      	ldr	r3, [r7, #20]
 8106260:	2200      	movs	r2, #0
 8106262:	2180      	movs	r1, #128	; 0x80
 8106264:	68f8      	ldr	r0, [r7, #12]
 8106266:	f000 ff64 	bl	8107132 <UART_WaitOnFlagUntilTimeout>
 810626a:	4603      	mov	r3, r0
 810626c:	2b00      	cmp	r3, #0
 810626e:	d001      	beq.n	8106274 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8106270:	2303      	movs	r3, #3
 8106272:	e039      	b.n	81062e8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8106274:	69fb      	ldr	r3, [r7, #28]
 8106276:	2b00      	cmp	r3, #0
 8106278:	d10b      	bne.n	8106292 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 810627a:	69bb      	ldr	r3, [r7, #24]
 810627c:	881b      	ldrh	r3, [r3, #0]
 810627e:	461a      	mov	r2, r3
 8106280:	68fb      	ldr	r3, [r7, #12]
 8106282:	681b      	ldr	r3, [r3, #0]
 8106284:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106288:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 810628a:	69bb      	ldr	r3, [r7, #24]
 810628c:	3302      	adds	r3, #2
 810628e:	61bb      	str	r3, [r7, #24]
 8106290:	e007      	b.n	81062a2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8106292:	69fb      	ldr	r3, [r7, #28]
 8106294:	781a      	ldrb	r2, [r3, #0]
 8106296:	68fb      	ldr	r3, [r7, #12]
 8106298:	681b      	ldr	r3, [r3, #0]
 810629a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 810629c:	69fb      	ldr	r3, [r7, #28]
 810629e:	3301      	adds	r3, #1
 81062a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81062a2:	68fb      	ldr	r3, [r7, #12]
 81062a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81062a8:	b29b      	uxth	r3, r3
 81062aa:	3b01      	subs	r3, #1
 81062ac:	b29a      	uxth	r2, r3
 81062ae:	68fb      	ldr	r3, [r7, #12]
 81062b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81062b4:	68fb      	ldr	r3, [r7, #12]
 81062b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81062ba:	b29b      	uxth	r3, r3
 81062bc:	2b00      	cmp	r3, #0
 81062be:	d1cc      	bne.n	810625a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81062c0:	683b      	ldr	r3, [r7, #0]
 81062c2:	9300      	str	r3, [sp, #0]
 81062c4:	697b      	ldr	r3, [r7, #20]
 81062c6:	2200      	movs	r2, #0
 81062c8:	2140      	movs	r1, #64	; 0x40
 81062ca:	68f8      	ldr	r0, [r7, #12]
 81062cc:	f000 ff31 	bl	8107132 <UART_WaitOnFlagUntilTimeout>
 81062d0:	4603      	mov	r3, r0
 81062d2:	2b00      	cmp	r3, #0
 81062d4:	d001      	beq.n	81062da <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81062d6:	2303      	movs	r3, #3
 81062d8:	e006      	b.n	81062e8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81062da:	68fb      	ldr	r3, [r7, #12]
 81062dc:	2220      	movs	r2, #32
 81062de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 81062e2:	2300      	movs	r3, #0
 81062e4:	e000      	b.n	81062e8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81062e6:	2302      	movs	r3, #2
  }
}
 81062e8:	4618      	mov	r0, r3
 81062ea:	3720      	adds	r7, #32
 81062ec:	46bd      	mov	sp, r7
 81062ee:	bd80      	pop	{r7, pc}

081062f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81062f0:	b580      	push	{r7, lr}
 81062f2:	b08a      	sub	sp, #40	; 0x28
 81062f4:	af02      	add	r7, sp, #8
 81062f6:	60f8      	str	r0, [r7, #12]
 81062f8:	60b9      	str	r1, [r7, #8]
 81062fa:	603b      	str	r3, [r7, #0]
 81062fc:	4613      	mov	r3, r2
 81062fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8106300:	68fb      	ldr	r3, [r7, #12]
 8106302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8106306:	2b20      	cmp	r3, #32
 8106308:	f040 80c0 	bne.w	810648c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 810630c:	68bb      	ldr	r3, [r7, #8]
 810630e:	2b00      	cmp	r3, #0
 8106310:	d002      	beq.n	8106318 <HAL_UART_Receive+0x28>
 8106312:	88fb      	ldrh	r3, [r7, #6]
 8106314:	2b00      	cmp	r3, #0
 8106316:	d101      	bne.n	810631c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8106318:	2301      	movs	r3, #1
 810631a:	e0b8      	b.n	810648e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 810631c:	68fb      	ldr	r3, [r7, #12]
 810631e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106322:	2b01      	cmp	r3, #1
 8106324:	d101      	bne.n	810632a <HAL_UART_Receive+0x3a>
 8106326:	2302      	movs	r3, #2
 8106328:	e0b1      	b.n	810648e <HAL_UART_Receive+0x19e>
 810632a:	68fb      	ldr	r3, [r7, #12]
 810632c:	2201      	movs	r2, #1
 810632e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106332:	68fb      	ldr	r3, [r7, #12]
 8106334:	2200      	movs	r2, #0
 8106336:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810633a:	68fb      	ldr	r3, [r7, #12]
 810633c:	2222      	movs	r2, #34	; 0x22
 810633e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106342:	68fb      	ldr	r3, [r7, #12]
 8106344:	2200      	movs	r2, #0
 8106346:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106348:	f7fc fd2a 	bl	8102da0 <HAL_GetTick>
 810634c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810634e:	68fb      	ldr	r3, [r7, #12]
 8106350:	88fa      	ldrh	r2, [r7, #6]
 8106352:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8106356:	68fb      	ldr	r3, [r7, #12]
 8106358:	88fa      	ldrh	r2, [r7, #6]
 810635a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810635e:	68fb      	ldr	r3, [r7, #12]
 8106360:	689b      	ldr	r3, [r3, #8]
 8106362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106366:	d10e      	bne.n	8106386 <HAL_UART_Receive+0x96>
 8106368:	68fb      	ldr	r3, [r7, #12]
 810636a:	691b      	ldr	r3, [r3, #16]
 810636c:	2b00      	cmp	r3, #0
 810636e:	d105      	bne.n	810637c <HAL_UART_Receive+0x8c>
 8106370:	68fb      	ldr	r3, [r7, #12]
 8106372:	f240 12ff 	movw	r2, #511	; 0x1ff
 8106376:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810637a:	e02d      	b.n	81063d8 <HAL_UART_Receive+0xe8>
 810637c:	68fb      	ldr	r3, [r7, #12]
 810637e:	22ff      	movs	r2, #255	; 0xff
 8106380:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106384:	e028      	b.n	81063d8 <HAL_UART_Receive+0xe8>
 8106386:	68fb      	ldr	r3, [r7, #12]
 8106388:	689b      	ldr	r3, [r3, #8]
 810638a:	2b00      	cmp	r3, #0
 810638c:	d10d      	bne.n	81063aa <HAL_UART_Receive+0xba>
 810638e:	68fb      	ldr	r3, [r7, #12]
 8106390:	691b      	ldr	r3, [r3, #16]
 8106392:	2b00      	cmp	r3, #0
 8106394:	d104      	bne.n	81063a0 <HAL_UART_Receive+0xb0>
 8106396:	68fb      	ldr	r3, [r7, #12]
 8106398:	22ff      	movs	r2, #255	; 0xff
 810639a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810639e:	e01b      	b.n	81063d8 <HAL_UART_Receive+0xe8>
 81063a0:	68fb      	ldr	r3, [r7, #12]
 81063a2:	227f      	movs	r2, #127	; 0x7f
 81063a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81063a8:	e016      	b.n	81063d8 <HAL_UART_Receive+0xe8>
 81063aa:	68fb      	ldr	r3, [r7, #12]
 81063ac:	689b      	ldr	r3, [r3, #8]
 81063ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81063b2:	d10d      	bne.n	81063d0 <HAL_UART_Receive+0xe0>
 81063b4:	68fb      	ldr	r3, [r7, #12]
 81063b6:	691b      	ldr	r3, [r3, #16]
 81063b8:	2b00      	cmp	r3, #0
 81063ba:	d104      	bne.n	81063c6 <HAL_UART_Receive+0xd6>
 81063bc:	68fb      	ldr	r3, [r7, #12]
 81063be:	227f      	movs	r2, #127	; 0x7f
 81063c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81063c4:	e008      	b.n	81063d8 <HAL_UART_Receive+0xe8>
 81063c6:	68fb      	ldr	r3, [r7, #12]
 81063c8:	223f      	movs	r2, #63	; 0x3f
 81063ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 81063ce:	e003      	b.n	81063d8 <HAL_UART_Receive+0xe8>
 81063d0:	68fb      	ldr	r3, [r7, #12]
 81063d2:	2200      	movs	r2, #0
 81063d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 81063d8:	68fb      	ldr	r3, [r7, #12]
 81063da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81063de:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81063e0:	68fb      	ldr	r3, [r7, #12]
 81063e2:	689b      	ldr	r3, [r3, #8]
 81063e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81063e8:	d108      	bne.n	81063fc <HAL_UART_Receive+0x10c>
 81063ea:	68fb      	ldr	r3, [r7, #12]
 81063ec:	691b      	ldr	r3, [r3, #16]
 81063ee:	2b00      	cmp	r3, #0
 81063f0:	d104      	bne.n	81063fc <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 81063f2:	2300      	movs	r3, #0
 81063f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 81063f6:	68bb      	ldr	r3, [r7, #8]
 81063f8:	61bb      	str	r3, [r7, #24]
 81063fa:	e003      	b.n	8106404 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 81063fc:	68bb      	ldr	r3, [r7, #8]
 81063fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106400:	2300      	movs	r3, #0
 8106402:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8106404:	68fb      	ldr	r3, [r7, #12]
 8106406:	2200      	movs	r2, #0
 8106408:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810640c:	e032      	b.n	8106474 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 810640e:	683b      	ldr	r3, [r7, #0]
 8106410:	9300      	str	r3, [sp, #0]
 8106412:	697b      	ldr	r3, [r7, #20]
 8106414:	2200      	movs	r2, #0
 8106416:	2120      	movs	r1, #32
 8106418:	68f8      	ldr	r0, [r7, #12]
 810641a:	f000 fe8a 	bl	8107132 <UART_WaitOnFlagUntilTimeout>
 810641e:	4603      	mov	r3, r0
 8106420:	2b00      	cmp	r3, #0
 8106422:	d001      	beq.n	8106428 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8106424:	2303      	movs	r3, #3
 8106426:	e032      	b.n	810648e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8106428:	69fb      	ldr	r3, [r7, #28]
 810642a:	2b00      	cmp	r3, #0
 810642c:	d10c      	bne.n	8106448 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810642e:	68fb      	ldr	r3, [r7, #12]
 8106430:	681b      	ldr	r3, [r3, #0]
 8106432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106434:	b29a      	uxth	r2, r3
 8106436:	8a7b      	ldrh	r3, [r7, #18]
 8106438:	4013      	ands	r3, r2
 810643a:	b29a      	uxth	r2, r3
 810643c:	69bb      	ldr	r3, [r7, #24]
 810643e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8106440:	69bb      	ldr	r3, [r7, #24]
 8106442:	3302      	adds	r3, #2
 8106444:	61bb      	str	r3, [r7, #24]
 8106446:	e00c      	b.n	8106462 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8106448:	68fb      	ldr	r3, [r7, #12]
 810644a:	681b      	ldr	r3, [r3, #0]
 810644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810644e:	b2da      	uxtb	r2, r3
 8106450:	8a7b      	ldrh	r3, [r7, #18]
 8106452:	b2db      	uxtb	r3, r3
 8106454:	4013      	ands	r3, r2
 8106456:	b2da      	uxtb	r2, r3
 8106458:	69fb      	ldr	r3, [r7, #28]
 810645a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 810645c:	69fb      	ldr	r3, [r7, #28]
 810645e:	3301      	adds	r3, #1
 8106460:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8106462:	68fb      	ldr	r3, [r7, #12]
 8106464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106468:	b29b      	uxth	r3, r3
 810646a:	3b01      	subs	r3, #1
 810646c:	b29a      	uxth	r2, r3
 810646e:	68fb      	ldr	r3, [r7, #12]
 8106470:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8106474:	68fb      	ldr	r3, [r7, #12]
 8106476:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 810647a:	b29b      	uxth	r3, r3
 810647c:	2b00      	cmp	r3, #0
 810647e:	d1c6      	bne.n	810640e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8106480:	68fb      	ldr	r3, [r7, #12]
 8106482:	2220      	movs	r2, #32
 8106484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8106488:	2300      	movs	r3, #0
 810648a:	e000      	b.n	810648e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 810648c:	2302      	movs	r3, #2
  }
}
 810648e:	4618      	mov	r0, r3
 8106490:	3720      	adds	r7, #32
 8106492:	46bd      	mov	sp, r7
 8106494:	bd80      	pop	{r7, pc}
	...

08106498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106498:	b5b0      	push	{r4, r5, r7, lr}
 810649a:	b08e      	sub	sp, #56	; 0x38
 810649c:	af00      	add	r7, sp, #0
 810649e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81064a0:	2300      	movs	r3, #0
 81064a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	689a      	ldr	r2, [r3, #8]
 81064aa:	687b      	ldr	r3, [r7, #4]
 81064ac:	691b      	ldr	r3, [r3, #16]
 81064ae:	431a      	orrs	r2, r3
 81064b0:	687b      	ldr	r3, [r7, #4]
 81064b2:	695b      	ldr	r3, [r3, #20]
 81064b4:	431a      	orrs	r2, r3
 81064b6:	687b      	ldr	r3, [r7, #4]
 81064b8:	69db      	ldr	r3, [r3, #28]
 81064ba:	4313      	orrs	r3, r2
 81064bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	681a      	ldr	r2, [r3, #0]
 81064c4:	4bc0      	ldr	r3, [pc, #768]	; (81067c8 <UART_SetConfig+0x330>)
 81064c6:	4013      	ands	r3, r2
 81064c8:	687a      	ldr	r2, [r7, #4]
 81064ca:	6812      	ldr	r2, [r2, #0]
 81064cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81064ce:	430b      	orrs	r3, r1
 81064d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81064d2:	687b      	ldr	r3, [r7, #4]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	685b      	ldr	r3, [r3, #4]
 81064d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81064dc:	687b      	ldr	r3, [r7, #4]
 81064de:	68da      	ldr	r2, [r3, #12]
 81064e0:	687b      	ldr	r3, [r7, #4]
 81064e2:	681b      	ldr	r3, [r3, #0]
 81064e4:	430a      	orrs	r2, r1
 81064e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	699b      	ldr	r3, [r3, #24]
 81064ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81064ee:	687b      	ldr	r3, [r7, #4]
 81064f0:	681b      	ldr	r3, [r3, #0]
 81064f2:	4ab6      	ldr	r2, [pc, #728]	; (81067cc <UART_SetConfig+0x334>)
 81064f4:	4293      	cmp	r3, r2
 81064f6:	d004      	beq.n	8106502 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81064f8:	687b      	ldr	r3, [r7, #4]
 81064fa:	6a1b      	ldr	r3, [r3, #32]
 81064fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81064fe:	4313      	orrs	r3, r2
 8106500:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	689b      	ldr	r3, [r3, #8]
 8106508:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 810650c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8106510:	687a      	ldr	r2, [r7, #4]
 8106512:	6812      	ldr	r2, [r2, #0]
 8106514:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8106516:	430b      	orrs	r3, r1
 8106518:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106520:	f023 010f 	bic.w	r1, r3, #15
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	681b      	ldr	r3, [r3, #0]
 810652c:	430a      	orrs	r2, r1
 810652e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106530:	687b      	ldr	r3, [r7, #4]
 8106532:	681b      	ldr	r3, [r3, #0]
 8106534:	4aa6      	ldr	r2, [pc, #664]	; (81067d0 <UART_SetConfig+0x338>)
 8106536:	4293      	cmp	r3, r2
 8106538:	d176      	bne.n	8106628 <UART_SetConfig+0x190>
 810653a:	4ba6      	ldr	r3, [pc, #664]	; (81067d4 <UART_SetConfig+0x33c>)
 810653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810653e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106542:	2b28      	cmp	r3, #40	; 0x28
 8106544:	d86c      	bhi.n	8106620 <UART_SetConfig+0x188>
 8106546:	a201      	add	r2, pc, #4	; (adr r2, 810654c <UART_SetConfig+0xb4>)
 8106548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810654c:	081065f1 	.word	0x081065f1
 8106550:	08106621 	.word	0x08106621
 8106554:	08106621 	.word	0x08106621
 8106558:	08106621 	.word	0x08106621
 810655c:	08106621 	.word	0x08106621
 8106560:	08106621 	.word	0x08106621
 8106564:	08106621 	.word	0x08106621
 8106568:	08106621 	.word	0x08106621
 810656c:	081065f9 	.word	0x081065f9
 8106570:	08106621 	.word	0x08106621
 8106574:	08106621 	.word	0x08106621
 8106578:	08106621 	.word	0x08106621
 810657c:	08106621 	.word	0x08106621
 8106580:	08106621 	.word	0x08106621
 8106584:	08106621 	.word	0x08106621
 8106588:	08106621 	.word	0x08106621
 810658c:	08106601 	.word	0x08106601
 8106590:	08106621 	.word	0x08106621
 8106594:	08106621 	.word	0x08106621
 8106598:	08106621 	.word	0x08106621
 810659c:	08106621 	.word	0x08106621
 81065a0:	08106621 	.word	0x08106621
 81065a4:	08106621 	.word	0x08106621
 81065a8:	08106621 	.word	0x08106621
 81065ac:	08106609 	.word	0x08106609
 81065b0:	08106621 	.word	0x08106621
 81065b4:	08106621 	.word	0x08106621
 81065b8:	08106621 	.word	0x08106621
 81065bc:	08106621 	.word	0x08106621
 81065c0:	08106621 	.word	0x08106621
 81065c4:	08106621 	.word	0x08106621
 81065c8:	08106621 	.word	0x08106621
 81065cc:	08106611 	.word	0x08106611
 81065d0:	08106621 	.word	0x08106621
 81065d4:	08106621 	.word	0x08106621
 81065d8:	08106621 	.word	0x08106621
 81065dc:	08106621 	.word	0x08106621
 81065e0:	08106621 	.word	0x08106621
 81065e4:	08106621 	.word	0x08106621
 81065e8:	08106621 	.word	0x08106621
 81065ec:	08106619 	.word	0x08106619
 81065f0:	2301      	movs	r3, #1
 81065f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81065f6:	e220      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81065f8:	2304      	movs	r3, #4
 81065fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81065fe:	e21c      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106600:	2308      	movs	r3, #8
 8106602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106606:	e218      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106608:	2310      	movs	r3, #16
 810660a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810660e:	e214      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106610:	2320      	movs	r3, #32
 8106612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106616:	e210      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106618:	2340      	movs	r3, #64	; 0x40
 810661a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810661e:	e20c      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106620:	2380      	movs	r3, #128	; 0x80
 8106622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106626:	e208      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	4a6a      	ldr	r2, [pc, #424]	; (81067d8 <UART_SetConfig+0x340>)
 810662e:	4293      	cmp	r3, r2
 8106630:	d130      	bne.n	8106694 <UART_SetConfig+0x1fc>
 8106632:	4b68      	ldr	r3, [pc, #416]	; (81067d4 <UART_SetConfig+0x33c>)
 8106634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106636:	f003 0307 	and.w	r3, r3, #7
 810663a:	2b05      	cmp	r3, #5
 810663c:	d826      	bhi.n	810668c <UART_SetConfig+0x1f4>
 810663e:	a201      	add	r2, pc, #4	; (adr r2, 8106644 <UART_SetConfig+0x1ac>)
 8106640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106644:	0810665d 	.word	0x0810665d
 8106648:	08106665 	.word	0x08106665
 810664c:	0810666d 	.word	0x0810666d
 8106650:	08106675 	.word	0x08106675
 8106654:	0810667d 	.word	0x0810667d
 8106658:	08106685 	.word	0x08106685
 810665c:	2300      	movs	r3, #0
 810665e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106662:	e1ea      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106664:	2304      	movs	r3, #4
 8106666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810666a:	e1e6      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810666c:	2308      	movs	r3, #8
 810666e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106672:	e1e2      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106674:	2310      	movs	r3, #16
 8106676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810667a:	e1de      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810667c:	2320      	movs	r3, #32
 810667e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106682:	e1da      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106684:	2340      	movs	r3, #64	; 0x40
 8106686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810668a:	e1d6      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810668c:	2380      	movs	r3, #128	; 0x80
 810668e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106692:	e1d2      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106694:	687b      	ldr	r3, [r7, #4]
 8106696:	681b      	ldr	r3, [r3, #0]
 8106698:	4a50      	ldr	r2, [pc, #320]	; (81067dc <UART_SetConfig+0x344>)
 810669a:	4293      	cmp	r3, r2
 810669c:	d130      	bne.n	8106700 <UART_SetConfig+0x268>
 810669e:	4b4d      	ldr	r3, [pc, #308]	; (81067d4 <UART_SetConfig+0x33c>)
 81066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81066a2:	f003 0307 	and.w	r3, r3, #7
 81066a6:	2b05      	cmp	r3, #5
 81066a8:	d826      	bhi.n	81066f8 <UART_SetConfig+0x260>
 81066aa:	a201      	add	r2, pc, #4	; (adr r2, 81066b0 <UART_SetConfig+0x218>)
 81066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066b0:	081066c9 	.word	0x081066c9
 81066b4:	081066d1 	.word	0x081066d1
 81066b8:	081066d9 	.word	0x081066d9
 81066bc:	081066e1 	.word	0x081066e1
 81066c0:	081066e9 	.word	0x081066e9
 81066c4:	081066f1 	.word	0x081066f1
 81066c8:	2300      	movs	r3, #0
 81066ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066ce:	e1b4      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81066d0:	2304      	movs	r3, #4
 81066d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066d6:	e1b0      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81066d8:	2308      	movs	r3, #8
 81066da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066de:	e1ac      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81066e0:	2310      	movs	r3, #16
 81066e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066e6:	e1a8      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81066e8:	2320      	movs	r3, #32
 81066ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066ee:	e1a4      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81066f0:	2340      	movs	r3, #64	; 0x40
 81066f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066f6:	e1a0      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81066f8:	2380      	movs	r3, #128	; 0x80
 81066fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066fe:	e19c      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106700:	687b      	ldr	r3, [r7, #4]
 8106702:	681b      	ldr	r3, [r3, #0]
 8106704:	4a36      	ldr	r2, [pc, #216]	; (81067e0 <UART_SetConfig+0x348>)
 8106706:	4293      	cmp	r3, r2
 8106708:	d130      	bne.n	810676c <UART_SetConfig+0x2d4>
 810670a:	4b32      	ldr	r3, [pc, #200]	; (81067d4 <UART_SetConfig+0x33c>)
 810670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810670e:	f003 0307 	and.w	r3, r3, #7
 8106712:	2b05      	cmp	r3, #5
 8106714:	d826      	bhi.n	8106764 <UART_SetConfig+0x2cc>
 8106716:	a201      	add	r2, pc, #4	; (adr r2, 810671c <UART_SetConfig+0x284>)
 8106718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810671c:	08106735 	.word	0x08106735
 8106720:	0810673d 	.word	0x0810673d
 8106724:	08106745 	.word	0x08106745
 8106728:	0810674d 	.word	0x0810674d
 810672c:	08106755 	.word	0x08106755
 8106730:	0810675d 	.word	0x0810675d
 8106734:	2300      	movs	r3, #0
 8106736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810673a:	e17e      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810673c:	2304      	movs	r3, #4
 810673e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106742:	e17a      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106744:	2308      	movs	r3, #8
 8106746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810674a:	e176      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810674c:	2310      	movs	r3, #16
 810674e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106752:	e172      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106754:	2320      	movs	r3, #32
 8106756:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810675a:	e16e      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810675c:	2340      	movs	r3, #64	; 0x40
 810675e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106762:	e16a      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106764:	2380      	movs	r3, #128	; 0x80
 8106766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810676a:	e166      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810676c:	687b      	ldr	r3, [r7, #4]
 810676e:	681b      	ldr	r3, [r3, #0]
 8106770:	4a1c      	ldr	r2, [pc, #112]	; (81067e4 <UART_SetConfig+0x34c>)
 8106772:	4293      	cmp	r3, r2
 8106774:	d140      	bne.n	81067f8 <UART_SetConfig+0x360>
 8106776:	4b17      	ldr	r3, [pc, #92]	; (81067d4 <UART_SetConfig+0x33c>)
 8106778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810677a:	f003 0307 	and.w	r3, r3, #7
 810677e:	2b05      	cmp	r3, #5
 8106780:	d836      	bhi.n	81067f0 <UART_SetConfig+0x358>
 8106782:	a201      	add	r2, pc, #4	; (adr r2, 8106788 <UART_SetConfig+0x2f0>)
 8106784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106788:	081067a1 	.word	0x081067a1
 810678c:	081067a9 	.word	0x081067a9
 8106790:	081067b1 	.word	0x081067b1
 8106794:	081067b9 	.word	0x081067b9
 8106798:	081067c1 	.word	0x081067c1
 810679c:	081067e9 	.word	0x081067e9
 81067a0:	2300      	movs	r3, #0
 81067a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067a6:	e148      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81067a8:	2304      	movs	r3, #4
 81067aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067ae:	e144      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81067b0:	2308      	movs	r3, #8
 81067b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067b6:	e140      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81067b8:	2310      	movs	r3, #16
 81067ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067be:	e13c      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81067c0:	2320      	movs	r3, #32
 81067c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067c6:	e138      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81067c8:	cfff69f3 	.word	0xcfff69f3
 81067cc:	58000c00 	.word	0x58000c00
 81067d0:	40011000 	.word	0x40011000
 81067d4:	58024400 	.word	0x58024400
 81067d8:	40004400 	.word	0x40004400
 81067dc:	40004800 	.word	0x40004800
 81067e0:	40004c00 	.word	0x40004c00
 81067e4:	40005000 	.word	0x40005000
 81067e8:	2340      	movs	r3, #64	; 0x40
 81067ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067ee:	e124      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81067f0:	2380      	movs	r3, #128	; 0x80
 81067f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067f6:	e120      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81067f8:	687b      	ldr	r3, [r7, #4]
 81067fa:	681b      	ldr	r3, [r3, #0]
 81067fc:	4acc      	ldr	r2, [pc, #816]	; (8106b30 <UART_SetConfig+0x698>)
 81067fe:	4293      	cmp	r3, r2
 8106800:	d176      	bne.n	81068f0 <UART_SetConfig+0x458>
 8106802:	4bcc      	ldr	r3, [pc, #816]	; (8106b34 <UART_SetConfig+0x69c>)
 8106804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810680a:	2b28      	cmp	r3, #40	; 0x28
 810680c:	d86c      	bhi.n	81068e8 <UART_SetConfig+0x450>
 810680e:	a201      	add	r2, pc, #4	; (adr r2, 8106814 <UART_SetConfig+0x37c>)
 8106810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106814:	081068b9 	.word	0x081068b9
 8106818:	081068e9 	.word	0x081068e9
 810681c:	081068e9 	.word	0x081068e9
 8106820:	081068e9 	.word	0x081068e9
 8106824:	081068e9 	.word	0x081068e9
 8106828:	081068e9 	.word	0x081068e9
 810682c:	081068e9 	.word	0x081068e9
 8106830:	081068e9 	.word	0x081068e9
 8106834:	081068c1 	.word	0x081068c1
 8106838:	081068e9 	.word	0x081068e9
 810683c:	081068e9 	.word	0x081068e9
 8106840:	081068e9 	.word	0x081068e9
 8106844:	081068e9 	.word	0x081068e9
 8106848:	081068e9 	.word	0x081068e9
 810684c:	081068e9 	.word	0x081068e9
 8106850:	081068e9 	.word	0x081068e9
 8106854:	081068c9 	.word	0x081068c9
 8106858:	081068e9 	.word	0x081068e9
 810685c:	081068e9 	.word	0x081068e9
 8106860:	081068e9 	.word	0x081068e9
 8106864:	081068e9 	.word	0x081068e9
 8106868:	081068e9 	.word	0x081068e9
 810686c:	081068e9 	.word	0x081068e9
 8106870:	081068e9 	.word	0x081068e9
 8106874:	081068d1 	.word	0x081068d1
 8106878:	081068e9 	.word	0x081068e9
 810687c:	081068e9 	.word	0x081068e9
 8106880:	081068e9 	.word	0x081068e9
 8106884:	081068e9 	.word	0x081068e9
 8106888:	081068e9 	.word	0x081068e9
 810688c:	081068e9 	.word	0x081068e9
 8106890:	081068e9 	.word	0x081068e9
 8106894:	081068d9 	.word	0x081068d9
 8106898:	081068e9 	.word	0x081068e9
 810689c:	081068e9 	.word	0x081068e9
 81068a0:	081068e9 	.word	0x081068e9
 81068a4:	081068e9 	.word	0x081068e9
 81068a8:	081068e9 	.word	0x081068e9
 81068ac:	081068e9 	.word	0x081068e9
 81068b0:	081068e9 	.word	0x081068e9
 81068b4:	081068e1 	.word	0x081068e1
 81068b8:	2301      	movs	r3, #1
 81068ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068be:	e0bc      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81068c0:	2304      	movs	r3, #4
 81068c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068c6:	e0b8      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81068c8:	2308      	movs	r3, #8
 81068ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068ce:	e0b4      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81068d0:	2310      	movs	r3, #16
 81068d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068d6:	e0b0      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81068d8:	2320      	movs	r3, #32
 81068da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068de:	e0ac      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81068e0:	2340      	movs	r3, #64	; 0x40
 81068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068e6:	e0a8      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81068e8:	2380      	movs	r3, #128	; 0x80
 81068ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068ee:	e0a4      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81068f0:	687b      	ldr	r3, [r7, #4]
 81068f2:	681b      	ldr	r3, [r3, #0]
 81068f4:	4a90      	ldr	r2, [pc, #576]	; (8106b38 <UART_SetConfig+0x6a0>)
 81068f6:	4293      	cmp	r3, r2
 81068f8:	d130      	bne.n	810695c <UART_SetConfig+0x4c4>
 81068fa:	4b8e      	ldr	r3, [pc, #568]	; (8106b34 <UART_SetConfig+0x69c>)
 81068fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068fe:	f003 0307 	and.w	r3, r3, #7
 8106902:	2b05      	cmp	r3, #5
 8106904:	d826      	bhi.n	8106954 <UART_SetConfig+0x4bc>
 8106906:	a201      	add	r2, pc, #4	; (adr r2, 810690c <UART_SetConfig+0x474>)
 8106908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810690c:	08106925 	.word	0x08106925
 8106910:	0810692d 	.word	0x0810692d
 8106914:	08106935 	.word	0x08106935
 8106918:	0810693d 	.word	0x0810693d
 810691c:	08106945 	.word	0x08106945
 8106920:	0810694d 	.word	0x0810694d
 8106924:	2300      	movs	r3, #0
 8106926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810692a:	e086      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810692c:	2304      	movs	r3, #4
 810692e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106932:	e082      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106934:	2308      	movs	r3, #8
 8106936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810693a:	e07e      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810693c:	2310      	movs	r3, #16
 810693e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106942:	e07a      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106944:	2320      	movs	r3, #32
 8106946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810694a:	e076      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810694c:	2340      	movs	r3, #64	; 0x40
 810694e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106952:	e072      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106954:	2380      	movs	r3, #128	; 0x80
 8106956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810695a:	e06e      	b.n	8106a3a <UART_SetConfig+0x5a2>
 810695c:	687b      	ldr	r3, [r7, #4]
 810695e:	681b      	ldr	r3, [r3, #0]
 8106960:	4a76      	ldr	r2, [pc, #472]	; (8106b3c <UART_SetConfig+0x6a4>)
 8106962:	4293      	cmp	r3, r2
 8106964:	d130      	bne.n	81069c8 <UART_SetConfig+0x530>
 8106966:	4b73      	ldr	r3, [pc, #460]	; (8106b34 <UART_SetConfig+0x69c>)
 8106968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810696a:	f003 0307 	and.w	r3, r3, #7
 810696e:	2b05      	cmp	r3, #5
 8106970:	d826      	bhi.n	81069c0 <UART_SetConfig+0x528>
 8106972:	a201      	add	r2, pc, #4	; (adr r2, 8106978 <UART_SetConfig+0x4e0>)
 8106974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106978:	08106991 	.word	0x08106991
 810697c:	08106999 	.word	0x08106999
 8106980:	081069a1 	.word	0x081069a1
 8106984:	081069a9 	.word	0x081069a9
 8106988:	081069b1 	.word	0x081069b1
 810698c:	081069b9 	.word	0x081069b9
 8106990:	2300      	movs	r3, #0
 8106992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106996:	e050      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106998:	2304      	movs	r3, #4
 810699a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810699e:	e04c      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81069a0:	2308      	movs	r3, #8
 81069a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069a6:	e048      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81069a8:	2310      	movs	r3, #16
 81069aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069ae:	e044      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81069b0:	2320      	movs	r3, #32
 81069b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069b6:	e040      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81069b8:	2340      	movs	r3, #64	; 0x40
 81069ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069be:	e03c      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81069c0:	2380      	movs	r3, #128	; 0x80
 81069c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069c6:	e038      	b.n	8106a3a <UART_SetConfig+0x5a2>
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	681b      	ldr	r3, [r3, #0]
 81069cc:	4a5c      	ldr	r2, [pc, #368]	; (8106b40 <UART_SetConfig+0x6a8>)
 81069ce:	4293      	cmp	r3, r2
 81069d0:	d130      	bne.n	8106a34 <UART_SetConfig+0x59c>
 81069d2:	4b58      	ldr	r3, [pc, #352]	; (8106b34 <UART_SetConfig+0x69c>)
 81069d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81069d6:	f003 0307 	and.w	r3, r3, #7
 81069da:	2b05      	cmp	r3, #5
 81069dc:	d826      	bhi.n	8106a2c <UART_SetConfig+0x594>
 81069de:	a201      	add	r2, pc, #4	; (adr r2, 81069e4 <UART_SetConfig+0x54c>)
 81069e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81069e4:	081069fd 	.word	0x081069fd
 81069e8:	08106a05 	.word	0x08106a05
 81069ec:	08106a0d 	.word	0x08106a0d
 81069f0:	08106a15 	.word	0x08106a15
 81069f4:	08106a1d 	.word	0x08106a1d
 81069f8:	08106a25 	.word	0x08106a25
 81069fc:	2302      	movs	r3, #2
 81069fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a02:	e01a      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106a04:	2304      	movs	r3, #4
 8106a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a0a:	e016      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106a0c:	2308      	movs	r3, #8
 8106a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a12:	e012      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106a14:	2310      	movs	r3, #16
 8106a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a1a:	e00e      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106a1c:	2320      	movs	r3, #32
 8106a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a22:	e00a      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106a24:	2340      	movs	r3, #64	; 0x40
 8106a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a2a:	e006      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106a2c:	2380      	movs	r3, #128	; 0x80
 8106a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a32:	e002      	b.n	8106a3a <UART_SetConfig+0x5a2>
 8106a34:	2380      	movs	r3, #128	; 0x80
 8106a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	4a40      	ldr	r2, [pc, #256]	; (8106b40 <UART_SetConfig+0x6a8>)
 8106a40:	4293      	cmp	r3, r2
 8106a42:	f040 80ef 	bne.w	8106c24 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8106a46:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106a4a:	2b20      	cmp	r3, #32
 8106a4c:	dc46      	bgt.n	8106adc <UART_SetConfig+0x644>
 8106a4e:	2b02      	cmp	r3, #2
 8106a50:	f2c0 8081 	blt.w	8106b56 <UART_SetConfig+0x6be>
 8106a54:	3b02      	subs	r3, #2
 8106a56:	2b1e      	cmp	r3, #30
 8106a58:	d87d      	bhi.n	8106b56 <UART_SetConfig+0x6be>
 8106a5a:	a201      	add	r2, pc, #4	; (adr r2, 8106a60 <UART_SetConfig+0x5c8>)
 8106a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a60:	08106ae3 	.word	0x08106ae3
 8106a64:	08106b57 	.word	0x08106b57
 8106a68:	08106aeb 	.word	0x08106aeb
 8106a6c:	08106b57 	.word	0x08106b57
 8106a70:	08106b57 	.word	0x08106b57
 8106a74:	08106b57 	.word	0x08106b57
 8106a78:	08106afb 	.word	0x08106afb
 8106a7c:	08106b57 	.word	0x08106b57
 8106a80:	08106b57 	.word	0x08106b57
 8106a84:	08106b57 	.word	0x08106b57
 8106a88:	08106b57 	.word	0x08106b57
 8106a8c:	08106b57 	.word	0x08106b57
 8106a90:	08106b57 	.word	0x08106b57
 8106a94:	08106b57 	.word	0x08106b57
 8106a98:	08106b0b 	.word	0x08106b0b
 8106a9c:	08106b57 	.word	0x08106b57
 8106aa0:	08106b57 	.word	0x08106b57
 8106aa4:	08106b57 	.word	0x08106b57
 8106aa8:	08106b57 	.word	0x08106b57
 8106aac:	08106b57 	.word	0x08106b57
 8106ab0:	08106b57 	.word	0x08106b57
 8106ab4:	08106b57 	.word	0x08106b57
 8106ab8:	08106b57 	.word	0x08106b57
 8106abc:	08106b57 	.word	0x08106b57
 8106ac0:	08106b57 	.word	0x08106b57
 8106ac4:	08106b57 	.word	0x08106b57
 8106ac8:	08106b57 	.word	0x08106b57
 8106acc:	08106b57 	.word	0x08106b57
 8106ad0:	08106b57 	.word	0x08106b57
 8106ad4:	08106b57 	.word	0x08106b57
 8106ad8:	08106b49 	.word	0x08106b49
 8106adc:	2b40      	cmp	r3, #64	; 0x40
 8106ade:	d036      	beq.n	8106b4e <UART_SetConfig+0x6b6>
 8106ae0:	e039      	b.n	8106b56 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8106ae2:	f7fd fe47 	bl	8104774 <HAL_RCCEx_GetD3PCLK1Freq>
 8106ae6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106ae8:	e03b      	b.n	8106b62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106aea:	f107 0314 	add.w	r3, r7, #20
 8106aee:	4618      	mov	r0, r3
 8106af0:	f7fd fe56 	bl	81047a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106af4:	69bb      	ldr	r3, [r7, #24]
 8106af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106af8:	e033      	b.n	8106b62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106afa:	f107 0308 	add.w	r3, r7, #8
 8106afe:	4618      	mov	r0, r3
 8106b00:	f7fd ffa2 	bl	8104a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106b04:	68fb      	ldr	r3, [r7, #12]
 8106b06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106b08:	e02b      	b.n	8106b62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106b0a:	4b0a      	ldr	r3, [pc, #40]	; (8106b34 <UART_SetConfig+0x69c>)
 8106b0c:	681b      	ldr	r3, [r3, #0]
 8106b0e:	f003 0320 	and.w	r3, r3, #32
 8106b12:	2b00      	cmp	r3, #0
 8106b14:	d009      	beq.n	8106b2a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106b16:	4b07      	ldr	r3, [pc, #28]	; (8106b34 <UART_SetConfig+0x69c>)
 8106b18:	681b      	ldr	r3, [r3, #0]
 8106b1a:	08db      	lsrs	r3, r3, #3
 8106b1c:	f003 0303 	and.w	r3, r3, #3
 8106b20:	4a08      	ldr	r2, [pc, #32]	; (8106b44 <UART_SetConfig+0x6ac>)
 8106b22:	fa22 f303 	lsr.w	r3, r2, r3
 8106b26:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106b28:	e01b      	b.n	8106b62 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8106b2a:	4b06      	ldr	r3, [pc, #24]	; (8106b44 <UART_SetConfig+0x6ac>)
 8106b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106b2e:	e018      	b.n	8106b62 <UART_SetConfig+0x6ca>
 8106b30:	40011400 	.word	0x40011400
 8106b34:	58024400 	.word	0x58024400
 8106b38:	40007800 	.word	0x40007800
 8106b3c:	40007c00 	.word	0x40007c00
 8106b40:	58000c00 	.word	0x58000c00
 8106b44:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106b48:	4bc4      	ldr	r3, [pc, #784]	; (8106e5c <UART_SetConfig+0x9c4>)
 8106b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106b4c:	e009      	b.n	8106b62 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106b52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106b54:	e005      	b.n	8106b62 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8106b56:	2300      	movs	r3, #0
 8106b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106b5a:	2301      	movs	r3, #1
 8106b5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106b60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8106b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106b64:	2b00      	cmp	r3, #0
 8106b66:	f000 81da 	beq.w	8106f1e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106b6a:	687b      	ldr	r3, [r7, #4]
 8106b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106b6e:	4abc      	ldr	r2, [pc, #752]	; (8106e60 <UART_SetConfig+0x9c8>)
 8106b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106b74:	461a      	mov	r2, r3
 8106b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8106b7c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106b7e:	687b      	ldr	r3, [r7, #4]
 8106b80:	685a      	ldr	r2, [r3, #4]
 8106b82:	4613      	mov	r3, r2
 8106b84:	005b      	lsls	r3, r3, #1
 8106b86:	4413      	add	r3, r2
 8106b88:	6a3a      	ldr	r2, [r7, #32]
 8106b8a:	429a      	cmp	r2, r3
 8106b8c:	d305      	bcc.n	8106b9a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8106b8e:	687b      	ldr	r3, [r7, #4]
 8106b90:	685b      	ldr	r3, [r3, #4]
 8106b92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106b94:	6a3a      	ldr	r2, [r7, #32]
 8106b96:	429a      	cmp	r2, r3
 8106b98:	d903      	bls.n	8106ba2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8106b9a:	2301      	movs	r3, #1
 8106b9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106ba0:	e1bd      	b.n	8106f1e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106ba4:	4618      	mov	r0, r3
 8106ba6:	f04f 0100 	mov.w	r1, #0
 8106baa:	687b      	ldr	r3, [r7, #4]
 8106bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106bae:	4aac      	ldr	r2, [pc, #688]	; (8106e60 <UART_SetConfig+0x9c8>)
 8106bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106bb4:	b29a      	uxth	r2, r3
 8106bb6:	f04f 0300 	mov.w	r3, #0
 8106bba:	f7fa f8ed 	bl	8100d98 <__aeabi_uldivmod>
 8106bbe:	4602      	mov	r2, r0
 8106bc0:	460b      	mov	r3, r1
 8106bc2:	4610      	mov	r0, r2
 8106bc4:	4619      	mov	r1, r3
 8106bc6:	f04f 0200 	mov.w	r2, #0
 8106bca:	f04f 0300 	mov.w	r3, #0
 8106bce:	020b      	lsls	r3, r1, #8
 8106bd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8106bd4:	0202      	lsls	r2, r0, #8
 8106bd6:	6879      	ldr	r1, [r7, #4]
 8106bd8:	6849      	ldr	r1, [r1, #4]
 8106bda:	0849      	lsrs	r1, r1, #1
 8106bdc:	4608      	mov	r0, r1
 8106bde:	f04f 0100 	mov.w	r1, #0
 8106be2:	1814      	adds	r4, r2, r0
 8106be4:	eb43 0501 	adc.w	r5, r3, r1
 8106be8:	687b      	ldr	r3, [r7, #4]
 8106bea:	685b      	ldr	r3, [r3, #4]
 8106bec:	461a      	mov	r2, r3
 8106bee:	f04f 0300 	mov.w	r3, #0
 8106bf2:	4620      	mov	r0, r4
 8106bf4:	4629      	mov	r1, r5
 8106bf6:	f7fa f8cf 	bl	8100d98 <__aeabi_uldivmod>
 8106bfa:	4602      	mov	r2, r0
 8106bfc:	460b      	mov	r3, r1
 8106bfe:	4613      	mov	r3, r2
 8106c00:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106c08:	d308      	bcc.n	8106c1c <UART_SetConfig+0x784>
 8106c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106c10:	d204      	bcs.n	8106c1c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8106c12:	687b      	ldr	r3, [r7, #4]
 8106c14:	681b      	ldr	r3, [r3, #0]
 8106c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106c18:	60da      	str	r2, [r3, #12]
 8106c1a:	e180      	b.n	8106f1e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8106c1c:	2301      	movs	r3, #1
 8106c1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106c22:	e17c      	b.n	8106f1e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106c24:	687b      	ldr	r3, [r7, #4]
 8106c26:	69db      	ldr	r3, [r3, #28]
 8106c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106c2c:	f040 80be 	bne.w	8106dac <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8106c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106c34:	2b20      	cmp	r3, #32
 8106c36:	dc49      	bgt.n	8106ccc <UART_SetConfig+0x834>
 8106c38:	2b00      	cmp	r3, #0
 8106c3a:	db7c      	blt.n	8106d36 <UART_SetConfig+0x89e>
 8106c3c:	2b20      	cmp	r3, #32
 8106c3e:	d87a      	bhi.n	8106d36 <UART_SetConfig+0x89e>
 8106c40:	a201      	add	r2, pc, #4	; (adr r2, 8106c48 <UART_SetConfig+0x7b0>)
 8106c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106c46:	bf00      	nop
 8106c48:	08106cd3 	.word	0x08106cd3
 8106c4c:	08106cdb 	.word	0x08106cdb
 8106c50:	08106d37 	.word	0x08106d37
 8106c54:	08106d37 	.word	0x08106d37
 8106c58:	08106ce3 	.word	0x08106ce3
 8106c5c:	08106d37 	.word	0x08106d37
 8106c60:	08106d37 	.word	0x08106d37
 8106c64:	08106d37 	.word	0x08106d37
 8106c68:	08106cf3 	.word	0x08106cf3
 8106c6c:	08106d37 	.word	0x08106d37
 8106c70:	08106d37 	.word	0x08106d37
 8106c74:	08106d37 	.word	0x08106d37
 8106c78:	08106d37 	.word	0x08106d37
 8106c7c:	08106d37 	.word	0x08106d37
 8106c80:	08106d37 	.word	0x08106d37
 8106c84:	08106d37 	.word	0x08106d37
 8106c88:	08106d03 	.word	0x08106d03
 8106c8c:	08106d37 	.word	0x08106d37
 8106c90:	08106d37 	.word	0x08106d37
 8106c94:	08106d37 	.word	0x08106d37
 8106c98:	08106d37 	.word	0x08106d37
 8106c9c:	08106d37 	.word	0x08106d37
 8106ca0:	08106d37 	.word	0x08106d37
 8106ca4:	08106d37 	.word	0x08106d37
 8106ca8:	08106d37 	.word	0x08106d37
 8106cac:	08106d37 	.word	0x08106d37
 8106cb0:	08106d37 	.word	0x08106d37
 8106cb4:	08106d37 	.word	0x08106d37
 8106cb8:	08106d37 	.word	0x08106d37
 8106cbc:	08106d37 	.word	0x08106d37
 8106cc0:	08106d37 	.word	0x08106d37
 8106cc4:	08106d37 	.word	0x08106d37
 8106cc8:	08106d29 	.word	0x08106d29
 8106ccc:	2b40      	cmp	r3, #64	; 0x40
 8106cce:	d02e      	beq.n	8106d2e <UART_SetConfig+0x896>
 8106cd0:	e031      	b.n	8106d36 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106cd2:	f7fc fde3 	bl	810389c <HAL_RCC_GetPCLK1Freq>
 8106cd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106cd8:	e033      	b.n	8106d42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106cda:	f7fc fdf5 	bl	81038c8 <HAL_RCC_GetPCLK2Freq>
 8106cde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106ce0:	e02f      	b.n	8106d42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ce2:	f107 0314 	add.w	r3, r7, #20
 8106ce6:	4618      	mov	r0, r3
 8106ce8:	f7fd fd5a 	bl	81047a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106cec:	69bb      	ldr	r3, [r7, #24]
 8106cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106cf0:	e027      	b.n	8106d42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106cf2:	f107 0308 	add.w	r3, r7, #8
 8106cf6:	4618      	mov	r0, r3
 8106cf8:	f7fd fea6 	bl	8104a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106cfc:	68fb      	ldr	r3, [r7, #12]
 8106cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106d00:	e01f      	b.n	8106d42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106d02:	4b58      	ldr	r3, [pc, #352]	; (8106e64 <UART_SetConfig+0x9cc>)
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	f003 0320 	and.w	r3, r3, #32
 8106d0a:	2b00      	cmp	r3, #0
 8106d0c:	d009      	beq.n	8106d22 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106d0e:	4b55      	ldr	r3, [pc, #340]	; (8106e64 <UART_SetConfig+0x9cc>)
 8106d10:	681b      	ldr	r3, [r3, #0]
 8106d12:	08db      	lsrs	r3, r3, #3
 8106d14:	f003 0303 	and.w	r3, r3, #3
 8106d18:	4a53      	ldr	r2, [pc, #332]	; (8106e68 <UART_SetConfig+0x9d0>)
 8106d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8106d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106d20:	e00f      	b.n	8106d42 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8106d22:	4b51      	ldr	r3, [pc, #324]	; (8106e68 <UART_SetConfig+0x9d0>)
 8106d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106d26:	e00c      	b.n	8106d42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106d28:	4b4c      	ldr	r3, [pc, #304]	; (8106e5c <UART_SetConfig+0x9c4>)
 8106d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106d2c:	e009      	b.n	8106d42 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106d34:	e005      	b.n	8106d42 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8106d36:	2300      	movs	r3, #0
 8106d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106d3a:	2301      	movs	r3, #1
 8106d3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8106d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106d44:	2b00      	cmp	r3, #0
 8106d46:	f000 80ea 	beq.w	8106f1e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106d4a:	687b      	ldr	r3, [r7, #4]
 8106d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106d4e:	4a44      	ldr	r2, [pc, #272]	; (8106e60 <UART_SetConfig+0x9c8>)
 8106d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106d54:	461a      	mov	r2, r3
 8106d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8106d5c:	005a      	lsls	r2, r3, #1
 8106d5e:	687b      	ldr	r3, [r7, #4]
 8106d60:	685b      	ldr	r3, [r3, #4]
 8106d62:	085b      	lsrs	r3, r3, #1
 8106d64:	441a      	add	r2, r3
 8106d66:	687b      	ldr	r3, [r7, #4]
 8106d68:	685b      	ldr	r3, [r3, #4]
 8106d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8106d6e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d72:	2b0f      	cmp	r3, #15
 8106d74:	d916      	bls.n	8106da4 <UART_SetConfig+0x90c>
 8106d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106d7c:	d212      	bcs.n	8106da4 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d80:	b29b      	uxth	r3, r3
 8106d82:	f023 030f 	bic.w	r3, r3, #15
 8106d86:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106d8a:	085b      	lsrs	r3, r3, #1
 8106d8c:	b29b      	uxth	r3, r3
 8106d8e:	f003 0307 	and.w	r3, r3, #7
 8106d92:	b29a      	uxth	r2, r3
 8106d94:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8106d96:	4313      	orrs	r3, r2
 8106d98:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	681b      	ldr	r3, [r3, #0]
 8106d9e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8106da0:	60da      	str	r2, [r3, #12]
 8106da2:	e0bc      	b.n	8106f1e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106da4:	2301      	movs	r3, #1
 8106da6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106daa:	e0b8      	b.n	8106f1e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8106dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106db0:	2b20      	cmp	r3, #32
 8106db2:	dc4b      	bgt.n	8106e4c <UART_SetConfig+0x9b4>
 8106db4:	2b00      	cmp	r3, #0
 8106db6:	f2c0 8087 	blt.w	8106ec8 <UART_SetConfig+0xa30>
 8106dba:	2b20      	cmp	r3, #32
 8106dbc:	f200 8084 	bhi.w	8106ec8 <UART_SetConfig+0xa30>
 8106dc0:	a201      	add	r2, pc, #4	; (adr r2, 8106dc8 <UART_SetConfig+0x930>)
 8106dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106dc6:	bf00      	nop
 8106dc8:	08106e53 	.word	0x08106e53
 8106dcc:	08106e6d 	.word	0x08106e6d
 8106dd0:	08106ec9 	.word	0x08106ec9
 8106dd4:	08106ec9 	.word	0x08106ec9
 8106dd8:	08106e75 	.word	0x08106e75
 8106ddc:	08106ec9 	.word	0x08106ec9
 8106de0:	08106ec9 	.word	0x08106ec9
 8106de4:	08106ec9 	.word	0x08106ec9
 8106de8:	08106e85 	.word	0x08106e85
 8106dec:	08106ec9 	.word	0x08106ec9
 8106df0:	08106ec9 	.word	0x08106ec9
 8106df4:	08106ec9 	.word	0x08106ec9
 8106df8:	08106ec9 	.word	0x08106ec9
 8106dfc:	08106ec9 	.word	0x08106ec9
 8106e00:	08106ec9 	.word	0x08106ec9
 8106e04:	08106ec9 	.word	0x08106ec9
 8106e08:	08106e95 	.word	0x08106e95
 8106e0c:	08106ec9 	.word	0x08106ec9
 8106e10:	08106ec9 	.word	0x08106ec9
 8106e14:	08106ec9 	.word	0x08106ec9
 8106e18:	08106ec9 	.word	0x08106ec9
 8106e1c:	08106ec9 	.word	0x08106ec9
 8106e20:	08106ec9 	.word	0x08106ec9
 8106e24:	08106ec9 	.word	0x08106ec9
 8106e28:	08106ec9 	.word	0x08106ec9
 8106e2c:	08106ec9 	.word	0x08106ec9
 8106e30:	08106ec9 	.word	0x08106ec9
 8106e34:	08106ec9 	.word	0x08106ec9
 8106e38:	08106ec9 	.word	0x08106ec9
 8106e3c:	08106ec9 	.word	0x08106ec9
 8106e40:	08106ec9 	.word	0x08106ec9
 8106e44:	08106ec9 	.word	0x08106ec9
 8106e48:	08106ebb 	.word	0x08106ebb
 8106e4c:	2b40      	cmp	r3, #64	; 0x40
 8106e4e:	d037      	beq.n	8106ec0 <UART_SetConfig+0xa28>
 8106e50:	e03a      	b.n	8106ec8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106e52:	f7fc fd23 	bl	810389c <HAL_RCC_GetPCLK1Freq>
 8106e56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106e58:	e03c      	b.n	8106ed4 <UART_SetConfig+0xa3c>
 8106e5a:	bf00      	nop
 8106e5c:	003d0900 	.word	0x003d0900
 8106e60:	0810e638 	.word	0x0810e638
 8106e64:	58024400 	.word	0x58024400
 8106e68:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106e6c:	f7fc fd2c 	bl	81038c8 <HAL_RCC_GetPCLK2Freq>
 8106e70:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106e72:	e02f      	b.n	8106ed4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106e74:	f107 0314 	add.w	r3, r7, #20
 8106e78:	4618      	mov	r0, r3
 8106e7a:	f7fd fc91 	bl	81047a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106e7e:	69bb      	ldr	r3, [r7, #24]
 8106e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106e82:	e027      	b.n	8106ed4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106e84:	f107 0308 	add.w	r3, r7, #8
 8106e88:	4618      	mov	r0, r3
 8106e8a:	f7fd fddd 	bl	8104a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106e8e:	68fb      	ldr	r3, [r7, #12]
 8106e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106e92:	e01f      	b.n	8106ed4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106e94:	4b2c      	ldr	r3, [pc, #176]	; (8106f48 <UART_SetConfig+0xab0>)
 8106e96:	681b      	ldr	r3, [r3, #0]
 8106e98:	f003 0320 	and.w	r3, r3, #32
 8106e9c:	2b00      	cmp	r3, #0
 8106e9e:	d009      	beq.n	8106eb4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106ea0:	4b29      	ldr	r3, [pc, #164]	; (8106f48 <UART_SetConfig+0xab0>)
 8106ea2:	681b      	ldr	r3, [r3, #0]
 8106ea4:	08db      	lsrs	r3, r3, #3
 8106ea6:	f003 0303 	and.w	r3, r3, #3
 8106eaa:	4a28      	ldr	r2, [pc, #160]	; (8106f4c <UART_SetConfig+0xab4>)
 8106eac:	fa22 f303 	lsr.w	r3, r2, r3
 8106eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106eb2:	e00f      	b.n	8106ed4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8106eb4:	4b25      	ldr	r3, [pc, #148]	; (8106f4c <UART_SetConfig+0xab4>)
 8106eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106eb8:	e00c      	b.n	8106ed4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106eba:	4b25      	ldr	r3, [pc, #148]	; (8106f50 <UART_SetConfig+0xab8>)
 8106ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106ebe:	e009      	b.n	8106ed4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106ec0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106ec6:	e005      	b.n	8106ed4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8106ec8:	2300      	movs	r3, #0
 8106eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106ecc:	2301      	movs	r3, #1
 8106ece:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106ed2:	bf00      	nop
    }

    if (pclk != 0U)
 8106ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106ed6:	2b00      	cmp	r3, #0
 8106ed8:	d021      	beq.n	8106f1e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106eda:	687b      	ldr	r3, [r7, #4]
 8106edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106ede:	4a1d      	ldr	r2, [pc, #116]	; (8106f54 <UART_SetConfig+0xabc>)
 8106ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106ee4:	461a      	mov	r2, r3
 8106ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106ee8:	fbb3 f2f2 	udiv	r2, r3, r2
 8106eec:	687b      	ldr	r3, [r7, #4]
 8106eee:	685b      	ldr	r3, [r3, #4]
 8106ef0:	085b      	lsrs	r3, r3, #1
 8106ef2:	441a      	add	r2, r3
 8106ef4:	687b      	ldr	r3, [r7, #4]
 8106ef6:	685b      	ldr	r3, [r3, #4]
 8106ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8106efc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f00:	2b0f      	cmp	r3, #15
 8106f02:	d909      	bls.n	8106f18 <UART_SetConfig+0xa80>
 8106f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106f0a:	d205      	bcs.n	8106f18 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106f0e:	b29a      	uxth	r2, r3
 8106f10:	687b      	ldr	r3, [r7, #4]
 8106f12:	681b      	ldr	r3, [r3, #0]
 8106f14:	60da      	str	r2, [r3, #12]
 8106f16:	e002      	b.n	8106f1e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106f18:	2301      	movs	r3, #1
 8106f1a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106f1e:	687b      	ldr	r3, [r7, #4]
 8106f20:	2201      	movs	r2, #1
 8106f22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	2201      	movs	r2, #1
 8106f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106f2e:	687b      	ldr	r3, [r7, #4]
 8106f30:	2200      	movs	r2, #0
 8106f32:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	2200      	movs	r2, #0
 8106f38:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8106f3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8106f3e:	4618      	mov	r0, r3
 8106f40:	3738      	adds	r7, #56	; 0x38
 8106f42:	46bd      	mov	sp, r7
 8106f44:	bdb0      	pop	{r4, r5, r7, pc}
 8106f46:	bf00      	nop
 8106f48:	58024400 	.word	0x58024400
 8106f4c:	03d09000 	.word	0x03d09000
 8106f50:	003d0900 	.word	0x003d0900
 8106f54:	0810e638 	.word	0x0810e638

08106f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106f58:	b480      	push	{r7}
 8106f5a:	b083      	sub	sp, #12
 8106f5c:	af00      	add	r7, sp, #0
 8106f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106f60:	687b      	ldr	r3, [r7, #4]
 8106f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f64:	f003 0301 	and.w	r3, r3, #1
 8106f68:	2b00      	cmp	r3, #0
 8106f6a:	d00a      	beq.n	8106f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106f6c:	687b      	ldr	r3, [r7, #4]
 8106f6e:	681b      	ldr	r3, [r3, #0]
 8106f70:	685b      	ldr	r3, [r3, #4]
 8106f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8106f76:	687b      	ldr	r3, [r7, #4]
 8106f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106f7a:	687b      	ldr	r3, [r7, #4]
 8106f7c:	681b      	ldr	r3, [r3, #0]
 8106f7e:	430a      	orrs	r2, r1
 8106f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106f82:	687b      	ldr	r3, [r7, #4]
 8106f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106f86:	f003 0302 	and.w	r3, r3, #2
 8106f8a:	2b00      	cmp	r3, #0
 8106f8c:	d00a      	beq.n	8106fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	681b      	ldr	r3, [r3, #0]
 8106f92:	685b      	ldr	r3, [r3, #4]
 8106f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106f98:	687b      	ldr	r3, [r7, #4]
 8106f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	681b      	ldr	r3, [r3, #0]
 8106fa0:	430a      	orrs	r2, r1
 8106fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106fa4:	687b      	ldr	r3, [r7, #4]
 8106fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fa8:	f003 0304 	and.w	r3, r3, #4
 8106fac:	2b00      	cmp	r3, #0
 8106fae:	d00a      	beq.n	8106fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106fb0:	687b      	ldr	r3, [r7, #4]
 8106fb2:	681b      	ldr	r3, [r3, #0]
 8106fb4:	685b      	ldr	r3, [r3, #4]
 8106fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8106fba:	687b      	ldr	r3, [r7, #4]
 8106fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	681b      	ldr	r3, [r3, #0]
 8106fc2:	430a      	orrs	r2, r1
 8106fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106fc6:	687b      	ldr	r3, [r7, #4]
 8106fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fca:	f003 0308 	and.w	r3, r3, #8
 8106fce:	2b00      	cmp	r3, #0
 8106fd0:	d00a      	beq.n	8106fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106fd2:	687b      	ldr	r3, [r7, #4]
 8106fd4:	681b      	ldr	r3, [r3, #0]
 8106fd6:	685b      	ldr	r3, [r3, #4]
 8106fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	681b      	ldr	r3, [r3, #0]
 8106fe4:	430a      	orrs	r2, r1
 8106fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106fe8:	687b      	ldr	r3, [r7, #4]
 8106fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106fec:	f003 0310 	and.w	r3, r3, #16
 8106ff0:	2b00      	cmp	r3, #0
 8106ff2:	d00a      	beq.n	810700a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	681b      	ldr	r3, [r3, #0]
 8106ff8:	689b      	ldr	r3, [r3, #8]
 8106ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8107002:	687b      	ldr	r3, [r7, #4]
 8107004:	681b      	ldr	r3, [r3, #0]
 8107006:	430a      	orrs	r2, r1
 8107008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810700a:	687b      	ldr	r3, [r7, #4]
 810700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810700e:	f003 0320 	and.w	r3, r3, #32
 8107012:	2b00      	cmp	r3, #0
 8107014:	d00a      	beq.n	810702c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8107016:	687b      	ldr	r3, [r7, #4]
 8107018:	681b      	ldr	r3, [r3, #0]
 810701a:	689b      	ldr	r3, [r3, #8]
 810701c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8107020:	687b      	ldr	r3, [r7, #4]
 8107022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8107024:	687b      	ldr	r3, [r7, #4]
 8107026:	681b      	ldr	r3, [r3, #0]
 8107028:	430a      	orrs	r2, r1
 810702a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107034:	2b00      	cmp	r3, #0
 8107036:	d01a      	beq.n	810706e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	681b      	ldr	r3, [r3, #0]
 810703c:	685b      	ldr	r3, [r3, #4]
 810703e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8107042:	687b      	ldr	r3, [r7, #4]
 8107044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107046:	687b      	ldr	r3, [r7, #4]
 8107048:	681b      	ldr	r3, [r3, #0]
 810704a:	430a      	orrs	r2, r1
 810704c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8107052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107056:	d10a      	bne.n	810706e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107058:	687b      	ldr	r3, [r7, #4]
 810705a:	681b      	ldr	r3, [r3, #0]
 810705c:	685b      	ldr	r3, [r3, #4]
 810705e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8107062:	687b      	ldr	r3, [r7, #4]
 8107064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107066:	687b      	ldr	r3, [r7, #4]
 8107068:	681b      	ldr	r3, [r3, #0]
 810706a:	430a      	orrs	r2, r1
 810706c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810706e:	687b      	ldr	r3, [r7, #4]
 8107070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107076:	2b00      	cmp	r3, #0
 8107078:	d00a      	beq.n	8107090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810707a:	687b      	ldr	r3, [r7, #4]
 810707c:	681b      	ldr	r3, [r3, #0]
 810707e:	685b      	ldr	r3, [r3, #4]
 8107080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107084:	687b      	ldr	r3, [r7, #4]
 8107086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107088:	687b      	ldr	r3, [r7, #4]
 810708a:	681b      	ldr	r3, [r3, #0]
 810708c:	430a      	orrs	r2, r1
 810708e:	605a      	str	r2, [r3, #4]
  }
}
 8107090:	bf00      	nop
 8107092:	370c      	adds	r7, #12
 8107094:	46bd      	mov	sp, r7
 8107096:	f85d 7b04 	ldr.w	r7, [sp], #4
 810709a:	4770      	bx	lr

0810709c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810709c:	b580      	push	{r7, lr}
 810709e:	b086      	sub	sp, #24
 81070a0:	af02      	add	r7, sp, #8
 81070a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81070a4:	687b      	ldr	r3, [r7, #4]
 81070a6:	2200      	movs	r2, #0
 81070a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81070ac:	f7fb fe78 	bl	8102da0 <HAL_GetTick>
 81070b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81070b2:	687b      	ldr	r3, [r7, #4]
 81070b4:	681b      	ldr	r3, [r3, #0]
 81070b6:	681b      	ldr	r3, [r3, #0]
 81070b8:	f003 0308 	and.w	r3, r3, #8
 81070bc:	2b08      	cmp	r3, #8
 81070be:	d10e      	bne.n	81070de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81070c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81070c4:	9300      	str	r3, [sp, #0]
 81070c6:	68fb      	ldr	r3, [r7, #12]
 81070c8:	2200      	movs	r2, #0
 81070ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81070ce:	6878      	ldr	r0, [r7, #4]
 81070d0:	f000 f82f 	bl	8107132 <UART_WaitOnFlagUntilTimeout>
 81070d4:	4603      	mov	r3, r0
 81070d6:	2b00      	cmp	r3, #0
 81070d8:	d001      	beq.n	81070de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81070da:	2303      	movs	r3, #3
 81070dc:	e025      	b.n	810712a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81070de:	687b      	ldr	r3, [r7, #4]
 81070e0:	681b      	ldr	r3, [r3, #0]
 81070e2:	681b      	ldr	r3, [r3, #0]
 81070e4:	f003 0304 	and.w	r3, r3, #4
 81070e8:	2b04      	cmp	r3, #4
 81070ea:	d10e      	bne.n	810710a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81070ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81070f0:	9300      	str	r3, [sp, #0]
 81070f2:	68fb      	ldr	r3, [r7, #12]
 81070f4:	2200      	movs	r2, #0
 81070f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81070fa:	6878      	ldr	r0, [r7, #4]
 81070fc:	f000 f819 	bl	8107132 <UART_WaitOnFlagUntilTimeout>
 8107100:	4603      	mov	r3, r0
 8107102:	2b00      	cmp	r3, #0
 8107104:	d001      	beq.n	810710a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8107106:	2303      	movs	r3, #3
 8107108:	e00f      	b.n	810712a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810710a:	687b      	ldr	r3, [r7, #4]
 810710c:	2220      	movs	r2, #32
 810710e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	2220      	movs	r2, #32
 8107116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810711a:	687b      	ldr	r3, [r7, #4]
 810711c:	2200      	movs	r2, #0
 810711e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	2200      	movs	r2, #0
 8107124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107128:	2300      	movs	r3, #0
}
 810712a:	4618      	mov	r0, r3
 810712c:	3710      	adds	r7, #16
 810712e:	46bd      	mov	sp, r7
 8107130:	bd80      	pop	{r7, pc}

08107132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8107132:	b580      	push	{r7, lr}
 8107134:	b09c      	sub	sp, #112	; 0x70
 8107136:	af00      	add	r7, sp, #0
 8107138:	60f8      	str	r0, [r7, #12]
 810713a:	60b9      	str	r1, [r7, #8]
 810713c:	603b      	str	r3, [r7, #0]
 810713e:	4613      	mov	r3, r2
 8107140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107142:	e0a9      	b.n	8107298 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107146:	f1b3 3fff 	cmp.w	r3, #4294967295
 810714a:	f000 80a5 	beq.w	8107298 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810714e:	f7fb fe27 	bl	8102da0 <HAL_GetTick>
 8107152:	4602      	mov	r2, r0
 8107154:	683b      	ldr	r3, [r7, #0]
 8107156:	1ad3      	subs	r3, r2, r3
 8107158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810715a:	429a      	cmp	r2, r3
 810715c:	d302      	bcc.n	8107164 <UART_WaitOnFlagUntilTimeout+0x32>
 810715e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107160:	2b00      	cmp	r3, #0
 8107162:	d140      	bne.n	81071e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107164:	68fb      	ldr	r3, [r7, #12]
 8107166:	681b      	ldr	r3, [r3, #0]
 8107168:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810716a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810716c:	e853 3f00 	ldrex	r3, [r3]
 8107170:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8107172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107178:	667b      	str	r3, [r7, #100]	; 0x64
 810717a:	68fb      	ldr	r3, [r7, #12]
 810717c:	681b      	ldr	r3, [r3, #0]
 810717e:	461a      	mov	r2, r3
 8107180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8107182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107184:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810718a:	e841 2300 	strex	r3, r2, [r1]
 810718e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8107190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8107192:	2b00      	cmp	r3, #0
 8107194:	d1e6      	bne.n	8107164 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107196:	68fb      	ldr	r3, [r7, #12]
 8107198:	681b      	ldr	r3, [r3, #0]
 810719a:	3308      	adds	r3, #8
 810719c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810719e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81071a0:	e853 3f00 	ldrex	r3, [r3]
 81071a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81071a8:	f023 0301 	bic.w	r3, r3, #1
 81071ac:	663b      	str	r3, [r7, #96]	; 0x60
 81071ae:	68fb      	ldr	r3, [r7, #12]
 81071b0:	681b      	ldr	r3, [r3, #0]
 81071b2:	3308      	adds	r3, #8
 81071b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81071b6:	64ba      	str	r2, [r7, #72]	; 0x48
 81071b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81071ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81071bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81071be:	e841 2300 	strex	r3, r2, [r1]
 81071c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81071c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81071c6:	2b00      	cmp	r3, #0
 81071c8:	d1e5      	bne.n	8107196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81071ca:	68fb      	ldr	r3, [r7, #12]
 81071cc:	2220      	movs	r2, #32
 81071ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81071d2:	68fb      	ldr	r3, [r7, #12]
 81071d4:	2220      	movs	r2, #32
 81071d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81071da:	68fb      	ldr	r3, [r7, #12]
 81071dc:	2200      	movs	r2, #0
 81071de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81071e2:	2303      	movs	r3, #3
 81071e4:	e069      	b.n	81072ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81071e6:	68fb      	ldr	r3, [r7, #12]
 81071e8:	681b      	ldr	r3, [r3, #0]
 81071ea:	681b      	ldr	r3, [r3, #0]
 81071ec:	f003 0304 	and.w	r3, r3, #4
 81071f0:	2b00      	cmp	r3, #0
 81071f2:	d051      	beq.n	8107298 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81071f4:	68fb      	ldr	r3, [r7, #12]
 81071f6:	681b      	ldr	r3, [r3, #0]
 81071f8:	69db      	ldr	r3, [r3, #28]
 81071fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81071fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8107202:	d149      	bne.n	8107298 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8107204:	68fb      	ldr	r3, [r7, #12]
 8107206:	681b      	ldr	r3, [r3, #0]
 8107208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810720c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810720e:	68fb      	ldr	r3, [r7, #12]
 8107210:	681b      	ldr	r3, [r3, #0]
 8107212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8107216:	e853 3f00 	ldrex	r3, [r3]
 810721a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810721e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8107224:	68fb      	ldr	r3, [r7, #12]
 8107226:	681b      	ldr	r3, [r3, #0]
 8107228:	461a      	mov	r2, r3
 810722a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810722c:	637b      	str	r3, [r7, #52]	; 0x34
 810722e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8107232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107234:	e841 2300 	strex	r3, r2, [r1]
 8107238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810723c:	2b00      	cmp	r3, #0
 810723e:	d1e6      	bne.n	810720e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107240:	68fb      	ldr	r3, [r7, #12]
 8107242:	681b      	ldr	r3, [r3, #0]
 8107244:	3308      	adds	r3, #8
 8107246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107248:	697b      	ldr	r3, [r7, #20]
 810724a:	e853 3f00 	ldrex	r3, [r3]
 810724e:	613b      	str	r3, [r7, #16]
   return(result);
 8107250:	693b      	ldr	r3, [r7, #16]
 8107252:	f023 0301 	bic.w	r3, r3, #1
 8107256:	66bb      	str	r3, [r7, #104]	; 0x68
 8107258:	68fb      	ldr	r3, [r7, #12]
 810725a:	681b      	ldr	r3, [r3, #0]
 810725c:	3308      	adds	r3, #8
 810725e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8107260:	623a      	str	r2, [r7, #32]
 8107262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107264:	69f9      	ldr	r1, [r7, #28]
 8107266:	6a3a      	ldr	r2, [r7, #32]
 8107268:	e841 2300 	strex	r3, r2, [r1]
 810726c:	61bb      	str	r3, [r7, #24]
   return(result);
 810726e:	69bb      	ldr	r3, [r7, #24]
 8107270:	2b00      	cmp	r3, #0
 8107272:	d1e5      	bne.n	8107240 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107274:	68fb      	ldr	r3, [r7, #12]
 8107276:	2220      	movs	r2, #32
 8107278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810727c:	68fb      	ldr	r3, [r7, #12]
 810727e:	2220      	movs	r2, #32
 8107280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107284:	68fb      	ldr	r3, [r7, #12]
 8107286:	2220      	movs	r2, #32
 8107288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810728c:	68fb      	ldr	r3, [r7, #12]
 810728e:	2200      	movs	r2, #0
 8107290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8107294:	2303      	movs	r3, #3
 8107296:	e010      	b.n	81072ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107298:	68fb      	ldr	r3, [r7, #12]
 810729a:	681b      	ldr	r3, [r3, #0]
 810729c:	69da      	ldr	r2, [r3, #28]
 810729e:	68bb      	ldr	r3, [r7, #8]
 81072a0:	4013      	ands	r3, r2
 81072a2:	68ba      	ldr	r2, [r7, #8]
 81072a4:	429a      	cmp	r2, r3
 81072a6:	bf0c      	ite	eq
 81072a8:	2301      	moveq	r3, #1
 81072aa:	2300      	movne	r3, #0
 81072ac:	b2db      	uxtb	r3, r3
 81072ae:	461a      	mov	r2, r3
 81072b0:	79fb      	ldrb	r3, [r7, #7]
 81072b2:	429a      	cmp	r2, r3
 81072b4:	f43f af46 	beq.w	8107144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81072b8:	2300      	movs	r3, #0
}
 81072ba:	4618      	mov	r0, r3
 81072bc:	3770      	adds	r7, #112	; 0x70
 81072be:	46bd      	mov	sp, r7
 81072c0:	bd80      	pop	{r7, pc}

081072c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81072c2:	b480      	push	{r7}
 81072c4:	b085      	sub	sp, #20
 81072c6:	af00      	add	r7, sp, #0
 81072c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81072ca:	687b      	ldr	r3, [r7, #4]
 81072cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81072d0:	2b01      	cmp	r3, #1
 81072d2:	d101      	bne.n	81072d8 <HAL_UARTEx_DisableFifoMode+0x16>
 81072d4:	2302      	movs	r3, #2
 81072d6:	e027      	b.n	8107328 <HAL_UARTEx_DisableFifoMode+0x66>
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	2201      	movs	r2, #1
 81072dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81072e0:	687b      	ldr	r3, [r7, #4]
 81072e2:	2224      	movs	r2, #36	; 0x24
 81072e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81072e8:	687b      	ldr	r3, [r7, #4]
 81072ea:	681b      	ldr	r3, [r3, #0]
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	681b      	ldr	r3, [r3, #0]
 81072f4:	681a      	ldr	r2, [r3, #0]
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	681b      	ldr	r3, [r3, #0]
 81072fa:	f022 0201 	bic.w	r2, r2, #1
 81072fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8107300:	68fb      	ldr	r3, [r7, #12]
 8107302:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8107306:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8107308:	687b      	ldr	r3, [r7, #4]
 810730a:	2200      	movs	r2, #0
 810730c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810730e:	687b      	ldr	r3, [r7, #4]
 8107310:	681b      	ldr	r3, [r3, #0]
 8107312:	68fa      	ldr	r2, [r7, #12]
 8107314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107316:	687b      	ldr	r3, [r7, #4]
 8107318:	2220      	movs	r2, #32
 810731a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810731e:	687b      	ldr	r3, [r7, #4]
 8107320:	2200      	movs	r2, #0
 8107322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107326:	2300      	movs	r3, #0
}
 8107328:	4618      	mov	r0, r3
 810732a:	3714      	adds	r7, #20
 810732c:	46bd      	mov	sp, r7
 810732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107332:	4770      	bx	lr

08107334 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107334:	b580      	push	{r7, lr}
 8107336:	b084      	sub	sp, #16
 8107338:	af00      	add	r7, sp, #0
 810733a:	6078      	str	r0, [r7, #4]
 810733c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810733e:	687b      	ldr	r3, [r7, #4]
 8107340:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107344:	2b01      	cmp	r3, #1
 8107346:	d101      	bne.n	810734c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107348:	2302      	movs	r3, #2
 810734a:	e02d      	b.n	81073a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810734c:	687b      	ldr	r3, [r7, #4]
 810734e:	2201      	movs	r2, #1
 8107350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	2224      	movs	r2, #36	; 0x24
 8107358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810735c:	687b      	ldr	r3, [r7, #4]
 810735e:	681b      	ldr	r3, [r3, #0]
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107364:	687b      	ldr	r3, [r7, #4]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	681a      	ldr	r2, [r3, #0]
 810736a:	687b      	ldr	r3, [r7, #4]
 810736c:	681b      	ldr	r3, [r3, #0]
 810736e:	f022 0201 	bic.w	r2, r2, #1
 8107372:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107374:	687b      	ldr	r3, [r7, #4]
 8107376:	681b      	ldr	r3, [r3, #0]
 8107378:	689b      	ldr	r3, [r3, #8]
 810737a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810737e:	687b      	ldr	r3, [r7, #4]
 8107380:	681b      	ldr	r3, [r3, #0]
 8107382:	683a      	ldr	r2, [r7, #0]
 8107384:	430a      	orrs	r2, r1
 8107386:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107388:	6878      	ldr	r0, [r7, #4]
 810738a:	f000 f84f 	bl	810742c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810738e:	687b      	ldr	r3, [r7, #4]
 8107390:	681b      	ldr	r3, [r3, #0]
 8107392:	68fa      	ldr	r2, [r7, #12]
 8107394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107396:	687b      	ldr	r3, [r7, #4]
 8107398:	2220      	movs	r2, #32
 810739a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810739e:	687b      	ldr	r3, [r7, #4]
 81073a0:	2200      	movs	r2, #0
 81073a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81073a6:	2300      	movs	r3, #0
}
 81073a8:	4618      	mov	r0, r3
 81073aa:	3710      	adds	r7, #16
 81073ac:	46bd      	mov	sp, r7
 81073ae:	bd80      	pop	{r7, pc}

081073b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81073b0:	b580      	push	{r7, lr}
 81073b2:	b084      	sub	sp, #16
 81073b4:	af00      	add	r7, sp, #0
 81073b6:	6078      	str	r0, [r7, #4]
 81073b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81073ba:	687b      	ldr	r3, [r7, #4]
 81073bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81073c0:	2b01      	cmp	r3, #1
 81073c2:	d101      	bne.n	81073c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81073c4:	2302      	movs	r3, #2
 81073c6:	e02d      	b.n	8107424 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81073c8:	687b      	ldr	r3, [r7, #4]
 81073ca:	2201      	movs	r2, #1
 81073cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81073d0:	687b      	ldr	r3, [r7, #4]
 81073d2:	2224      	movs	r2, #36	; 0x24
 81073d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81073d8:	687b      	ldr	r3, [r7, #4]
 81073da:	681b      	ldr	r3, [r3, #0]
 81073dc:	681b      	ldr	r3, [r3, #0]
 81073de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81073e0:	687b      	ldr	r3, [r7, #4]
 81073e2:	681b      	ldr	r3, [r3, #0]
 81073e4:	681a      	ldr	r2, [r3, #0]
 81073e6:	687b      	ldr	r3, [r7, #4]
 81073e8:	681b      	ldr	r3, [r3, #0]
 81073ea:	f022 0201 	bic.w	r2, r2, #1
 81073ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81073f0:	687b      	ldr	r3, [r7, #4]
 81073f2:	681b      	ldr	r3, [r3, #0]
 81073f4:	689b      	ldr	r3, [r3, #8]
 81073f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81073fa:	687b      	ldr	r3, [r7, #4]
 81073fc:	681b      	ldr	r3, [r3, #0]
 81073fe:	683a      	ldr	r2, [r7, #0]
 8107400:	430a      	orrs	r2, r1
 8107402:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107404:	6878      	ldr	r0, [r7, #4]
 8107406:	f000 f811 	bl	810742c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810740a:	687b      	ldr	r3, [r7, #4]
 810740c:	681b      	ldr	r3, [r3, #0]
 810740e:	68fa      	ldr	r2, [r7, #12]
 8107410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107412:	687b      	ldr	r3, [r7, #4]
 8107414:	2220      	movs	r2, #32
 8107416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810741a:	687b      	ldr	r3, [r7, #4]
 810741c:	2200      	movs	r2, #0
 810741e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107422:	2300      	movs	r3, #0
}
 8107424:	4618      	mov	r0, r3
 8107426:	3710      	adds	r7, #16
 8107428:	46bd      	mov	sp, r7
 810742a:	bd80      	pop	{r7, pc}

0810742c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810742c:	b480      	push	{r7}
 810742e:	b085      	sub	sp, #20
 8107430:	af00      	add	r7, sp, #0
 8107432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107434:	687b      	ldr	r3, [r7, #4]
 8107436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107438:	2b00      	cmp	r3, #0
 810743a:	d108      	bne.n	810744e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810743c:	687b      	ldr	r3, [r7, #4]
 810743e:	2201      	movs	r2, #1
 8107440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8107444:	687b      	ldr	r3, [r7, #4]
 8107446:	2201      	movs	r2, #1
 8107448:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810744c:	e031      	b.n	81074b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810744e:	2310      	movs	r3, #16
 8107450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8107452:	2310      	movs	r3, #16
 8107454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107456:	687b      	ldr	r3, [r7, #4]
 8107458:	681b      	ldr	r3, [r3, #0]
 810745a:	689b      	ldr	r3, [r3, #8]
 810745c:	0e5b      	lsrs	r3, r3, #25
 810745e:	b2db      	uxtb	r3, r3
 8107460:	f003 0307 	and.w	r3, r3, #7
 8107464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107466:	687b      	ldr	r3, [r7, #4]
 8107468:	681b      	ldr	r3, [r3, #0]
 810746a:	689b      	ldr	r3, [r3, #8]
 810746c:	0f5b      	lsrs	r3, r3, #29
 810746e:	b2db      	uxtb	r3, r3
 8107470:	f003 0307 	and.w	r3, r3, #7
 8107474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107476:	7bbb      	ldrb	r3, [r7, #14]
 8107478:	7b3a      	ldrb	r2, [r7, #12]
 810747a:	4911      	ldr	r1, [pc, #68]	; (81074c0 <UARTEx_SetNbDataToProcess+0x94>)
 810747c:	5c8a      	ldrb	r2, [r1, r2]
 810747e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8107482:	7b3a      	ldrb	r2, [r7, #12]
 8107484:	490f      	ldr	r1, [pc, #60]	; (81074c4 <UARTEx_SetNbDataToProcess+0x98>)
 8107486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107488:	fb93 f3f2 	sdiv	r3, r3, r2
 810748c:	b29a      	uxth	r2, r3
 810748e:	687b      	ldr	r3, [r7, #4]
 8107490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107494:	7bfb      	ldrb	r3, [r7, #15]
 8107496:	7b7a      	ldrb	r2, [r7, #13]
 8107498:	4909      	ldr	r1, [pc, #36]	; (81074c0 <UARTEx_SetNbDataToProcess+0x94>)
 810749a:	5c8a      	ldrb	r2, [r1, r2]
 810749c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81074a0:	7b7a      	ldrb	r2, [r7, #13]
 81074a2:	4908      	ldr	r1, [pc, #32]	; (81074c4 <UARTEx_SetNbDataToProcess+0x98>)
 81074a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81074a6:	fb93 f3f2 	sdiv	r3, r3, r2
 81074aa:	b29a      	uxth	r2, r3
 81074ac:	687b      	ldr	r3, [r7, #4]
 81074ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81074b2:	bf00      	nop
 81074b4:	3714      	adds	r7, #20
 81074b6:	46bd      	mov	sp, r7
 81074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074bc:	4770      	bx	lr
 81074be:	bf00      	nop
 81074c0:	0810e650 	.word	0x0810e650
 81074c4:	0810e658 	.word	0x0810e658

081074c8 <__errno>:
 81074c8:	4b01      	ldr	r3, [pc, #4]	; (81074d0 <__errno+0x8>)
 81074ca:	6818      	ldr	r0, [r3, #0]
 81074cc:	4770      	bx	lr
 81074ce:	bf00      	nop
 81074d0:	10000064 	.word	0x10000064

081074d4 <__sflush_r>:
 81074d4:	898a      	ldrh	r2, [r1, #12]
 81074d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81074da:	4605      	mov	r5, r0
 81074dc:	0710      	lsls	r0, r2, #28
 81074de:	460c      	mov	r4, r1
 81074e0:	d458      	bmi.n	8107594 <__sflush_r+0xc0>
 81074e2:	684b      	ldr	r3, [r1, #4]
 81074e4:	2b00      	cmp	r3, #0
 81074e6:	dc05      	bgt.n	81074f4 <__sflush_r+0x20>
 81074e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81074ea:	2b00      	cmp	r3, #0
 81074ec:	dc02      	bgt.n	81074f4 <__sflush_r+0x20>
 81074ee:	2000      	movs	r0, #0
 81074f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81074f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81074f6:	2e00      	cmp	r6, #0
 81074f8:	d0f9      	beq.n	81074ee <__sflush_r+0x1a>
 81074fa:	2300      	movs	r3, #0
 81074fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8107500:	682f      	ldr	r7, [r5, #0]
 8107502:	602b      	str	r3, [r5, #0]
 8107504:	d032      	beq.n	810756c <__sflush_r+0x98>
 8107506:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8107508:	89a3      	ldrh	r3, [r4, #12]
 810750a:	075a      	lsls	r2, r3, #29
 810750c:	d505      	bpl.n	810751a <__sflush_r+0x46>
 810750e:	6863      	ldr	r3, [r4, #4]
 8107510:	1ac0      	subs	r0, r0, r3
 8107512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8107514:	b10b      	cbz	r3, 810751a <__sflush_r+0x46>
 8107516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8107518:	1ac0      	subs	r0, r0, r3
 810751a:	2300      	movs	r3, #0
 810751c:	4602      	mov	r2, r0
 810751e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8107520:	6a21      	ldr	r1, [r4, #32]
 8107522:	4628      	mov	r0, r5
 8107524:	47b0      	blx	r6
 8107526:	1c43      	adds	r3, r0, #1
 8107528:	89a3      	ldrh	r3, [r4, #12]
 810752a:	d106      	bne.n	810753a <__sflush_r+0x66>
 810752c:	6829      	ldr	r1, [r5, #0]
 810752e:	291d      	cmp	r1, #29
 8107530:	d82c      	bhi.n	810758c <__sflush_r+0xb8>
 8107532:	4a2a      	ldr	r2, [pc, #168]	; (81075dc <__sflush_r+0x108>)
 8107534:	40ca      	lsrs	r2, r1
 8107536:	07d6      	lsls	r6, r2, #31
 8107538:	d528      	bpl.n	810758c <__sflush_r+0xb8>
 810753a:	2200      	movs	r2, #0
 810753c:	6062      	str	r2, [r4, #4]
 810753e:	04d9      	lsls	r1, r3, #19
 8107540:	6922      	ldr	r2, [r4, #16]
 8107542:	6022      	str	r2, [r4, #0]
 8107544:	d504      	bpl.n	8107550 <__sflush_r+0x7c>
 8107546:	1c42      	adds	r2, r0, #1
 8107548:	d101      	bne.n	810754e <__sflush_r+0x7a>
 810754a:	682b      	ldr	r3, [r5, #0]
 810754c:	b903      	cbnz	r3, 8107550 <__sflush_r+0x7c>
 810754e:	6560      	str	r0, [r4, #84]	; 0x54
 8107550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107552:	602f      	str	r7, [r5, #0]
 8107554:	2900      	cmp	r1, #0
 8107556:	d0ca      	beq.n	81074ee <__sflush_r+0x1a>
 8107558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810755c:	4299      	cmp	r1, r3
 810755e:	d002      	beq.n	8107566 <__sflush_r+0x92>
 8107560:	4628      	mov	r0, r5
 8107562:	f000 f9cd 	bl	8107900 <_free_r>
 8107566:	2000      	movs	r0, #0
 8107568:	6360      	str	r0, [r4, #52]	; 0x34
 810756a:	e7c1      	b.n	81074f0 <__sflush_r+0x1c>
 810756c:	6a21      	ldr	r1, [r4, #32]
 810756e:	2301      	movs	r3, #1
 8107570:	4628      	mov	r0, r5
 8107572:	47b0      	blx	r6
 8107574:	1c41      	adds	r1, r0, #1
 8107576:	d1c7      	bne.n	8107508 <__sflush_r+0x34>
 8107578:	682b      	ldr	r3, [r5, #0]
 810757a:	2b00      	cmp	r3, #0
 810757c:	d0c4      	beq.n	8107508 <__sflush_r+0x34>
 810757e:	2b1d      	cmp	r3, #29
 8107580:	d001      	beq.n	8107586 <__sflush_r+0xb2>
 8107582:	2b16      	cmp	r3, #22
 8107584:	d101      	bne.n	810758a <__sflush_r+0xb6>
 8107586:	602f      	str	r7, [r5, #0]
 8107588:	e7b1      	b.n	81074ee <__sflush_r+0x1a>
 810758a:	89a3      	ldrh	r3, [r4, #12]
 810758c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8107590:	81a3      	strh	r3, [r4, #12]
 8107592:	e7ad      	b.n	81074f0 <__sflush_r+0x1c>
 8107594:	690f      	ldr	r7, [r1, #16]
 8107596:	2f00      	cmp	r7, #0
 8107598:	d0a9      	beq.n	81074ee <__sflush_r+0x1a>
 810759a:	0793      	lsls	r3, r2, #30
 810759c:	680e      	ldr	r6, [r1, #0]
 810759e:	bf08      	it	eq
 81075a0:	694b      	ldreq	r3, [r1, #20]
 81075a2:	600f      	str	r7, [r1, #0]
 81075a4:	bf18      	it	ne
 81075a6:	2300      	movne	r3, #0
 81075a8:	eba6 0807 	sub.w	r8, r6, r7
 81075ac:	608b      	str	r3, [r1, #8]
 81075ae:	f1b8 0f00 	cmp.w	r8, #0
 81075b2:	dd9c      	ble.n	81074ee <__sflush_r+0x1a>
 81075b4:	6a21      	ldr	r1, [r4, #32]
 81075b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 81075b8:	4643      	mov	r3, r8
 81075ba:	463a      	mov	r2, r7
 81075bc:	4628      	mov	r0, r5
 81075be:	47b0      	blx	r6
 81075c0:	2800      	cmp	r0, #0
 81075c2:	dc06      	bgt.n	81075d2 <__sflush_r+0xfe>
 81075c4:	89a3      	ldrh	r3, [r4, #12]
 81075c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81075ca:	81a3      	strh	r3, [r4, #12]
 81075cc:	f04f 30ff 	mov.w	r0, #4294967295
 81075d0:	e78e      	b.n	81074f0 <__sflush_r+0x1c>
 81075d2:	4407      	add	r7, r0
 81075d4:	eba8 0800 	sub.w	r8, r8, r0
 81075d8:	e7e9      	b.n	81075ae <__sflush_r+0xda>
 81075da:	bf00      	nop
 81075dc:	20400001 	.word	0x20400001

081075e0 <_fflush_r>:
 81075e0:	b538      	push	{r3, r4, r5, lr}
 81075e2:	690b      	ldr	r3, [r1, #16]
 81075e4:	4605      	mov	r5, r0
 81075e6:	460c      	mov	r4, r1
 81075e8:	b913      	cbnz	r3, 81075f0 <_fflush_r+0x10>
 81075ea:	2500      	movs	r5, #0
 81075ec:	4628      	mov	r0, r5
 81075ee:	bd38      	pop	{r3, r4, r5, pc}
 81075f0:	b118      	cbz	r0, 81075fa <_fflush_r+0x1a>
 81075f2:	6983      	ldr	r3, [r0, #24]
 81075f4:	b90b      	cbnz	r3, 81075fa <_fflush_r+0x1a>
 81075f6:	f000 f899 	bl	810772c <__sinit>
 81075fa:	4b14      	ldr	r3, [pc, #80]	; (810764c <_fflush_r+0x6c>)
 81075fc:	429c      	cmp	r4, r3
 81075fe:	d11b      	bne.n	8107638 <_fflush_r+0x58>
 8107600:	686c      	ldr	r4, [r5, #4]
 8107602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107606:	2b00      	cmp	r3, #0
 8107608:	d0ef      	beq.n	81075ea <_fflush_r+0xa>
 810760a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810760c:	07d0      	lsls	r0, r2, #31
 810760e:	d404      	bmi.n	810761a <_fflush_r+0x3a>
 8107610:	0599      	lsls	r1, r3, #22
 8107612:	d402      	bmi.n	810761a <_fflush_r+0x3a>
 8107614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107616:	f000 f968 	bl	81078ea <__retarget_lock_acquire_recursive>
 810761a:	4628      	mov	r0, r5
 810761c:	4621      	mov	r1, r4
 810761e:	f7ff ff59 	bl	81074d4 <__sflush_r>
 8107622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107624:	07da      	lsls	r2, r3, #31
 8107626:	4605      	mov	r5, r0
 8107628:	d4e0      	bmi.n	81075ec <_fflush_r+0xc>
 810762a:	89a3      	ldrh	r3, [r4, #12]
 810762c:	059b      	lsls	r3, r3, #22
 810762e:	d4dd      	bmi.n	81075ec <_fflush_r+0xc>
 8107630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8107632:	f000 f95b 	bl	81078ec <__retarget_lock_release_recursive>
 8107636:	e7d9      	b.n	81075ec <_fflush_r+0xc>
 8107638:	4b05      	ldr	r3, [pc, #20]	; (8107650 <_fflush_r+0x70>)
 810763a:	429c      	cmp	r4, r3
 810763c:	d101      	bne.n	8107642 <_fflush_r+0x62>
 810763e:	68ac      	ldr	r4, [r5, #8]
 8107640:	e7df      	b.n	8107602 <_fflush_r+0x22>
 8107642:	4b04      	ldr	r3, [pc, #16]	; (8107654 <_fflush_r+0x74>)
 8107644:	429c      	cmp	r4, r3
 8107646:	bf08      	it	eq
 8107648:	68ec      	ldreq	r4, [r5, #12]
 810764a:	e7da      	b.n	8107602 <_fflush_r+0x22>
 810764c:	0810e680 	.word	0x0810e680
 8107650:	0810e6a0 	.word	0x0810e6a0
 8107654:	0810e660 	.word	0x0810e660

08107658 <fflush>:
 8107658:	4601      	mov	r1, r0
 810765a:	b920      	cbnz	r0, 8107666 <fflush+0xe>
 810765c:	4b04      	ldr	r3, [pc, #16]	; (8107670 <fflush+0x18>)
 810765e:	4905      	ldr	r1, [pc, #20]	; (8107674 <fflush+0x1c>)
 8107660:	6818      	ldr	r0, [r3, #0]
 8107662:	f000 b8fe 	b.w	8107862 <_fwalk_reent>
 8107666:	4b04      	ldr	r3, [pc, #16]	; (8107678 <fflush+0x20>)
 8107668:	6818      	ldr	r0, [r3, #0]
 810766a:	f7ff bfb9 	b.w	81075e0 <_fflush_r>
 810766e:	bf00      	nop
 8107670:	0810e6c0 	.word	0x0810e6c0
 8107674:	081075e1 	.word	0x081075e1
 8107678:	10000064 	.word	0x10000064

0810767c <std>:
 810767c:	2300      	movs	r3, #0
 810767e:	b510      	push	{r4, lr}
 8107680:	4604      	mov	r4, r0
 8107682:	e9c0 3300 	strd	r3, r3, [r0]
 8107686:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810768a:	6083      	str	r3, [r0, #8]
 810768c:	8181      	strh	r1, [r0, #12]
 810768e:	6643      	str	r3, [r0, #100]	; 0x64
 8107690:	81c2      	strh	r2, [r0, #14]
 8107692:	6183      	str	r3, [r0, #24]
 8107694:	4619      	mov	r1, r3
 8107696:	2208      	movs	r2, #8
 8107698:	305c      	adds	r0, #92	; 0x5c
 810769a:	f000 f928 	bl	81078ee <memset>
 810769e:	4b05      	ldr	r3, [pc, #20]	; (81076b4 <std+0x38>)
 81076a0:	6263      	str	r3, [r4, #36]	; 0x24
 81076a2:	4b05      	ldr	r3, [pc, #20]	; (81076b8 <std+0x3c>)
 81076a4:	62a3      	str	r3, [r4, #40]	; 0x28
 81076a6:	4b05      	ldr	r3, [pc, #20]	; (81076bc <std+0x40>)
 81076a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 81076aa:	4b05      	ldr	r3, [pc, #20]	; (81076c0 <std+0x44>)
 81076ac:	6224      	str	r4, [r4, #32]
 81076ae:	6323      	str	r3, [r4, #48]	; 0x30
 81076b0:	bd10      	pop	{r4, pc}
 81076b2:	bf00      	nop
 81076b4:	08108a8d 	.word	0x08108a8d
 81076b8:	08108aaf 	.word	0x08108aaf
 81076bc:	08108ae7 	.word	0x08108ae7
 81076c0:	08108b0b 	.word	0x08108b0b

081076c4 <_cleanup_r>:
 81076c4:	4901      	ldr	r1, [pc, #4]	; (81076cc <_cleanup_r+0x8>)
 81076c6:	f000 b8cc 	b.w	8107862 <_fwalk_reent>
 81076ca:	bf00      	nop
 81076cc:	081075e1 	.word	0x081075e1

081076d0 <__sfmoreglue>:
 81076d0:	b570      	push	{r4, r5, r6, lr}
 81076d2:	1e4a      	subs	r2, r1, #1
 81076d4:	2568      	movs	r5, #104	; 0x68
 81076d6:	4355      	muls	r5, r2
 81076d8:	460e      	mov	r6, r1
 81076da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 81076de:	f000 f95f 	bl	81079a0 <_malloc_r>
 81076e2:	4604      	mov	r4, r0
 81076e4:	b140      	cbz	r0, 81076f8 <__sfmoreglue+0x28>
 81076e6:	2100      	movs	r1, #0
 81076e8:	e9c0 1600 	strd	r1, r6, [r0]
 81076ec:	300c      	adds	r0, #12
 81076ee:	60a0      	str	r0, [r4, #8]
 81076f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81076f4:	f000 f8fb 	bl	81078ee <memset>
 81076f8:	4620      	mov	r0, r4
 81076fa:	bd70      	pop	{r4, r5, r6, pc}

081076fc <__sfp_lock_acquire>:
 81076fc:	4801      	ldr	r0, [pc, #4]	; (8107704 <__sfp_lock_acquire+0x8>)
 81076fe:	f000 b8f4 	b.w	81078ea <__retarget_lock_acquire_recursive>
 8107702:	bf00      	nop
 8107704:	10000500 	.word	0x10000500

08107708 <__sfp_lock_release>:
 8107708:	4801      	ldr	r0, [pc, #4]	; (8107710 <__sfp_lock_release+0x8>)
 810770a:	f000 b8ef 	b.w	81078ec <__retarget_lock_release_recursive>
 810770e:	bf00      	nop
 8107710:	10000500 	.word	0x10000500

08107714 <__sinit_lock_acquire>:
 8107714:	4801      	ldr	r0, [pc, #4]	; (810771c <__sinit_lock_acquire+0x8>)
 8107716:	f000 b8e8 	b.w	81078ea <__retarget_lock_acquire_recursive>
 810771a:	bf00      	nop
 810771c:	100004fb 	.word	0x100004fb

08107720 <__sinit_lock_release>:
 8107720:	4801      	ldr	r0, [pc, #4]	; (8107728 <__sinit_lock_release+0x8>)
 8107722:	f000 b8e3 	b.w	81078ec <__retarget_lock_release_recursive>
 8107726:	bf00      	nop
 8107728:	100004fb 	.word	0x100004fb

0810772c <__sinit>:
 810772c:	b510      	push	{r4, lr}
 810772e:	4604      	mov	r4, r0
 8107730:	f7ff fff0 	bl	8107714 <__sinit_lock_acquire>
 8107734:	69a3      	ldr	r3, [r4, #24]
 8107736:	b11b      	cbz	r3, 8107740 <__sinit+0x14>
 8107738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810773c:	f7ff bff0 	b.w	8107720 <__sinit_lock_release>
 8107740:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8107744:	6523      	str	r3, [r4, #80]	; 0x50
 8107746:	4b13      	ldr	r3, [pc, #76]	; (8107794 <__sinit+0x68>)
 8107748:	4a13      	ldr	r2, [pc, #76]	; (8107798 <__sinit+0x6c>)
 810774a:	681b      	ldr	r3, [r3, #0]
 810774c:	62a2      	str	r2, [r4, #40]	; 0x28
 810774e:	42a3      	cmp	r3, r4
 8107750:	bf04      	itt	eq
 8107752:	2301      	moveq	r3, #1
 8107754:	61a3      	streq	r3, [r4, #24]
 8107756:	4620      	mov	r0, r4
 8107758:	f000 f820 	bl	810779c <__sfp>
 810775c:	6060      	str	r0, [r4, #4]
 810775e:	4620      	mov	r0, r4
 8107760:	f000 f81c 	bl	810779c <__sfp>
 8107764:	60a0      	str	r0, [r4, #8]
 8107766:	4620      	mov	r0, r4
 8107768:	f000 f818 	bl	810779c <__sfp>
 810776c:	2200      	movs	r2, #0
 810776e:	60e0      	str	r0, [r4, #12]
 8107770:	2104      	movs	r1, #4
 8107772:	6860      	ldr	r0, [r4, #4]
 8107774:	f7ff ff82 	bl	810767c <std>
 8107778:	68a0      	ldr	r0, [r4, #8]
 810777a:	2201      	movs	r2, #1
 810777c:	2109      	movs	r1, #9
 810777e:	f7ff ff7d 	bl	810767c <std>
 8107782:	68e0      	ldr	r0, [r4, #12]
 8107784:	2202      	movs	r2, #2
 8107786:	2112      	movs	r1, #18
 8107788:	f7ff ff78 	bl	810767c <std>
 810778c:	2301      	movs	r3, #1
 810778e:	61a3      	str	r3, [r4, #24]
 8107790:	e7d2      	b.n	8107738 <__sinit+0xc>
 8107792:	bf00      	nop
 8107794:	0810e6c0 	.word	0x0810e6c0
 8107798:	081076c5 	.word	0x081076c5

0810779c <__sfp>:
 810779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810779e:	4607      	mov	r7, r0
 81077a0:	f7ff ffac 	bl	81076fc <__sfp_lock_acquire>
 81077a4:	4b1e      	ldr	r3, [pc, #120]	; (8107820 <__sfp+0x84>)
 81077a6:	681e      	ldr	r6, [r3, #0]
 81077a8:	69b3      	ldr	r3, [r6, #24]
 81077aa:	b913      	cbnz	r3, 81077b2 <__sfp+0x16>
 81077ac:	4630      	mov	r0, r6
 81077ae:	f7ff ffbd 	bl	810772c <__sinit>
 81077b2:	3648      	adds	r6, #72	; 0x48
 81077b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 81077b8:	3b01      	subs	r3, #1
 81077ba:	d503      	bpl.n	81077c4 <__sfp+0x28>
 81077bc:	6833      	ldr	r3, [r6, #0]
 81077be:	b30b      	cbz	r3, 8107804 <__sfp+0x68>
 81077c0:	6836      	ldr	r6, [r6, #0]
 81077c2:	e7f7      	b.n	81077b4 <__sfp+0x18>
 81077c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 81077c8:	b9d5      	cbnz	r5, 8107800 <__sfp+0x64>
 81077ca:	4b16      	ldr	r3, [pc, #88]	; (8107824 <__sfp+0x88>)
 81077cc:	60e3      	str	r3, [r4, #12]
 81077ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 81077d2:	6665      	str	r5, [r4, #100]	; 0x64
 81077d4:	f000 f888 	bl	81078e8 <__retarget_lock_init_recursive>
 81077d8:	f7ff ff96 	bl	8107708 <__sfp_lock_release>
 81077dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 81077e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 81077e4:	6025      	str	r5, [r4, #0]
 81077e6:	61a5      	str	r5, [r4, #24]
 81077e8:	2208      	movs	r2, #8
 81077ea:	4629      	mov	r1, r5
 81077ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 81077f0:	f000 f87d 	bl	81078ee <memset>
 81077f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 81077f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 81077fc:	4620      	mov	r0, r4
 81077fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107800:	3468      	adds	r4, #104	; 0x68
 8107802:	e7d9      	b.n	81077b8 <__sfp+0x1c>
 8107804:	2104      	movs	r1, #4
 8107806:	4638      	mov	r0, r7
 8107808:	f7ff ff62 	bl	81076d0 <__sfmoreglue>
 810780c:	4604      	mov	r4, r0
 810780e:	6030      	str	r0, [r6, #0]
 8107810:	2800      	cmp	r0, #0
 8107812:	d1d5      	bne.n	81077c0 <__sfp+0x24>
 8107814:	f7ff ff78 	bl	8107708 <__sfp_lock_release>
 8107818:	230c      	movs	r3, #12
 810781a:	603b      	str	r3, [r7, #0]
 810781c:	e7ee      	b.n	81077fc <__sfp+0x60>
 810781e:	bf00      	nop
 8107820:	0810e6c0 	.word	0x0810e6c0
 8107824:	ffff0001 	.word	0xffff0001

08107828 <_fwalk>:
 8107828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810782c:	460f      	mov	r7, r1
 810782e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8107832:	2600      	movs	r6, #0
 8107834:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8107838:	f1b8 0801 	subs.w	r8, r8, #1
 810783c:	d505      	bpl.n	810784a <_fwalk+0x22>
 810783e:	6824      	ldr	r4, [r4, #0]
 8107840:	2c00      	cmp	r4, #0
 8107842:	d1f7      	bne.n	8107834 <_fwalk+0xc>
 8107844:	4630      	mov	r0, r6
 8107846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810784a:	89ab      	ldrh	r3, [r5, #12]
 810784c:	2b01      	cmp	r3, #1
 810784e:	d906      	bls.n	810785e <_fwalk+0x36>
 8107850:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8107854:	3301      	adds	r3, #1
 8107856:	d002      	beq.n	810785e <_fwalk+0x36>
 8107858:	4628      	mov	r0, r5
 810785a:	47b8      	blx	r7
 810785c:	4306      	orrs	r6, r0
 810785e:	3568      	adds	r5, #104	; 0x68
 8107860:	e7ea      	b.n	8107838 <_fwalk+0x10>

08107862 <_fwalk_reent>:
 8107862:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107866:	4606      	mov	r6, r0
 8107868:	4688      	mov	r8, r1
 810786a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 810786e:	2700      	movs	r7, #0
 8107870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8107874:	f1b9 0901 	subs.w	r9, r9, #1
 8107878:	d505      	bpl.n	8107886 <_fwalk_reent+0x24>
 810787a:	6824      	ldr	r4, [r4, #0]
 810787c:	2c00      	cmp	r4, #0
 810787e:	d1f7      	bne.n	8107870 <_fwalk_reent+0xe>
 8107880:	4638      	mov	r0, r7
 8107882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107886:	89ab      	ldrh	r3, [r5, #12]
 8107888:	2b01      	cmp	r3, #1
 810788a:	d907      	bls.n	810789c <_fwalk_reent+0x3a>
 810788c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8107890:	3301      	adds	r3, #1
 8107892:	d003      	beq.n	810789c <_fwalk_reent+0x3a>
 8107894:	4629      	mov	r1, r5
 8107896:	4630      	mov	r0, r6
 8107898:	47c0      	blx	r8
 810789a:	4307      	orrs	r7, r0
 810789c:	3568      	adds	r5, #104	; 0x68
 810789e:	e7e9      	b.n	8107874 <_fwalk_reent+0x12>

081078a0 <__libc_init_array>:
 81078a0:	b570      	push	{r4, r5, r6, lr}
 81078a2:	4d0d      	ldr	r5, [pc, #52]	; (81078d8 <__libc_init_array+0x38>)
 81078a4:	4c0d      	ldr	r4, [pc, #52]	; (81078dc <__libc_init_array+0x3c>)
 81078a6:	1b64      	subs	r4, r4, r5
 81078a8:	10a4      	asrs	r4, r4, #2
 81078aa:	2600      	movs	r6, #0
 81078ac:	42a6      	cmp	r6, r4
 81078ae:	d109      	bne.n	81078c4 <__libc_init_array+0x24>
 81078b0:	4d0b      	ldr	r5, [pc, #44]	; (81078e0 <__libc_init_array+0x40>)
 81078b2:	4c0c      	ldr	r4, [pc, #48]	; (81078e4 <__libc_init_array+0x44>)
 81078b4:	f006 fb0a 	bl	810decc <_init>
 81078b8:	1b64      	subs	r4, r4, r5
 81078ba:	10a4      	asrs	r4, r4, #2
 81078bc:	2600      	movs	r6, #0
 81078be:	42a6      	cmp	r6, r4
 81078c0:	d105      	bne.n	81078ce <__libc_init_array+0x2e>
 81078c2:	bd70      	pop	{r4, r5, r6, pc}
 81078c4:	f855 3b04 	ldr.w	r3, [r5], #4
 81078c8:	4798      	blx	r3
 81078ca:	3601      	adds	r6, #1
 81078cc:	e7ee      	b.n	81078ac <__libc_init_array+0xc>
 81078ce:	f855 3b04 	ldr.w	r3, [r5], #4
 81078d2:	4798      	blx	r3
 81078d4:	3601      	adds	r6, #1
 81078d6:	e7f2      	b.n	81078be <__libc_init_array+0x1e>
 81078d8:	0810ed50 	.word	0x0810ed50
 81078dc:	0810ed50 	.word	0x0810ed50
 81078e0:	0810ed50 	.word	0x0810ed50
 81078e4:	0810ed54 	.word	0x0810ed54

081078e8 <__retarget_lock_init_recursive>:
 81078e8:	4770      	bx	lr

081078ea <__retarget_lock_acquire_recursive>:
 81078ea:	4770      	bx	lr

081078ec <__retarget_lock_release_recursive>:
 81078ec:	4770      	bx	lr

081078ee <memset>:
 81078ee:	4402      	add	r2, r0
 81078f0:	4603      	mov	r3, r0
 81078f2:	4293      	cmp	r3, r2
 81078f4:	d100      	bne.n	81078f8 <memset+0xa>
 81078f6:	4770      	bx	lr
 81078f8:	f803 1b01 	strb.w	r1, [r3], #1
 81078fc:	e7f9      	b.n	81078f2 <memset+0x4>
	...

08107900 <_free_r>:
 8107900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8107902:	2900      	cmp	r1, #0
 8107904:	d048      	beq.n	8107998 <_free_r+0x98>
 8107906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810790a:	9001      	str	r0, [sp, #4]
 810790c:	2b00      	cmp	r3, #0
 810790e:	f1a1 0404 	sub.w	r4, r1, #4
 8107912:	bfb8      	it	lt
 8107914:	18e4      	addlt	r4, r4, r3
 8107916:	f003 fb1d 	bl	810af54 <__malloc_lock>
 810791a:	4a20      	ldr	r2, [pc, #128]	; (810799c <_free_r+0x9c>)
 810791c:	9801      	ldr	r0, [sp, #4]
 810791e:	6813      	ldr	r3, [r2, #0]
 8107920:	4615      	mov	r5, r2
 8107922:	b933      	cbnz	r3, 8107932 <_free_r+0x32>
 8107924:	6063      	str	r3, [r4, #4]
 8107926:	6014      	str	r4, [r2, #0]
 8107928:	b003      	add	sp, #12
 810792a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810792e:	f003 bb17 	b.w	810af60 <__malloc_unlock>
 8107932:	42a3      	cmp	r3, r4
 8107934:	d90b      	bls.n	810794e <_free_r+0x4e>
 8107936:	6821      	ldr	r1, [r4, #0]
 8107938:	1862      	adds	r2, r4, r1
 810793a:	4293      	cmp	r3, r2
 810793c:	bf04      	itt	eq
 810793e:	681a      	ldreq	r2, [r3, #0]
 8107940:	685b      	ldreq	r3, [r3, #4]
 8107942:	6063      	str	r3, [r4, #4]
 8107944:	bf04      	itt	eq
 8107946:	1852      	addeq	r2, r2, r1
 8107948:	6022      	streq	r2, [r4, #0]
 810794a:	602c      	str	r4, [r5, #0]
 810794c:	e7ec      	b.n	8107928 <_free_r+0x28>
 810794e:	461a      	mov	r2, r3
 8107950:	685b      	ldr	r3, [r3, #4]
 8107952:	b10b      	cbz	r3, 8107958 <_free_r+0x58>
 8107954:	42a3      	cmp	r3, r4
 8107956:	d9fa      	bls.n	810794e <_free_r+0x4e>
 8107958:	6811      	ldr	r1, [r2, #0]
 810795a:	1855      	adds	r5, r2, r1
 810795c:	42a5      	cmp	r5, r4
 810795e:	d10b      	bne.n	8107978 <_free_r+0x78>
 8107960:	6824      	ldr	r4, [r4, #0]
 8107962:	4421      	add	r1, r4
 8107964:	1854      	adds	r4, r2, r1
 8107966:	42a3      	cmp	r3, r4
 8107968:	6011      	str	r1, [r2, #0]
 810796a:	d1dd      	bne.n	8107928 <_free_r+0x28>
 810796c:	681c      	ldr	r4, [r3, #0]
 810796e:	685b      	ldr	r3, [r3, #4]
 8107970:	6053      	str	r3, [r2, #4]
 8107972:	4421      	add	r1, r4
 8107974:	6011      	str	r1, [r2, #0]
 8107976:	e7d7      	b.n	8107928 <_free_r+0x28>
 8107978:	d902      	bls.n	8107980 <_free_r+0x80>
 810797a:	230c      	movs	r3, #12
 810797c:	6003      	str	r3, [r0, #0]
 810797e:	e7d3      	b.n	8107928 <_free_r+0x28>
 8107980:	6825      	ldr	r5, [r4, #0]
 8107982:	1961      	adds	r1, r4, r5
 8107984:	428b      	cmp	r3, r1
 8107986:	bf04      	itt	eq
 8107988:	6819      	ldreq	r1, [r3, #0]
 810798a:	685b      	ldreq	r3, [r3, #4]
 810798c:	6063      	str	r3, [r4, #4]
 810798e:	bf04      	itt	eq
 8107990:	1949      	addeq	r1, r1, r5
 8107992:	6021      	streq	r1, [r4, #0]
 8107994:	6054      	str	r4, [r2, #4]
 8107996:	e7c7      	b.n	8107928 <_free_r+0x28>
 8107998:	b003      	add	sp, #12
 810799a:	bd30      	pop	{r4, r5, pc}
 810799c:	10000264 	.word	0x10000264

081079a0 <_malloc_r>:
 81079a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81079a2:	1ccd      	adds	r5, r1, #3
 81079a4:	f025 0503 	bic.w	r5, r5, #3
 81079a8:	3508      	adds	r5, #8
 81079aa:	2d0c      	cmp	r5, #12
 81079ac:	bf38      	it	cc
 81079ae:	250c      	movcc	r5, #12
 81079b0:	2d00      	cmp	r5, #0
 81079b2:	4606      	mov	r6, r0
 81079b4:	db01      	blt.n	81079ba <_malloc_r+0x1a>
 81079b6:	42a9      	cmp	r1, r5
 81079b8:	d903      	bls.n	81079c2 <_malloc_r+0x22>
 81079ba:	230c      	movs	r3, #12
 81079bc:	6033      	str	r3, [r6, #0]
 81079be:	2000      	movs	r0, #0
 81079c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81079c2:	f003 fac7 	bl	810af54 <__malloc_lock>
 81079c6:	4921      	ldr	r1, [pc, #132]	; (8107a4c <_malloc_r+0xac>)
 81079c8:	680a      	ldr	r2, [r1, #0]
 81079ca:	4614      	mov	r4, r2
 81079cc:	b99c      	cbnz	r4, 81079f6 <_malloc_r+0x56>
 81079ce:	4f20      	ldr	r7, [pc, #128]	; (8107a50 <_malloc_r+0xb0>)
 81079d0:	683b      	ldr	r3, [r7, #0]
 81079d2:	b923      	cbnz	r3, 81079de <_malloc_r+0x3e>
 81079d4:	4621      	mov	r1, r4
 81079d6:	4630      	mov	r0, r6
 81079d8:	f000 ff44 	bl	8108864 <_sbrk_r>
 81079dc:	6038      	str	r0, [r7, #0]
 81079de:	4629      	mov	r1, r5
 81079e0:	4630      	mov	r0, r6
 81079e2:	f000 ff3f 	bl	8108864 <_sbrk_r>
 81079e6:	1c43      	adds	r3, r0, #1
 81079e8:	d123      	bne.n	8107a32 <_malloc_r+0x92>
 81079ea:	230c      	movs	r3, #12
 81079ec:	6033      	str	r3, [r6, #0]
 81079ee:	4630      	mov	r0, r6
 81079f0:	f003 fab6 	bl	810af60 <__malloc_unlock>
 81079f4:	e7e3      	b.n	81079be <_malloc_r+0x1e>
 81079f6:	6823      	ldr	r3, [r4, #0]
 81079f8:	1b5b      	subs	r3, r3, r5
 81079fa:	d417      	bmi.n	8107a2c <_malloc_r+0x8c>
 81079fc:	2b0b      	cmp	r3, #11
 81079fe:	d903      	bls.n	8107a08 <_malloc_r+0x68>
 8107a00:	6023      	str	r3, [r4, #0]
 8107a02:	441c      	add	r4, r3
 8107a04:	6025      	str	r5, [r4, #0]
 8107a06:	e004      	b.n	8107a12 <_malloc_r+0x72>
 8107a08:	6863      	ldr	r3, [r4, #4]
 8107a0a:	42a2      	cmp	r2, r4
 8107a0c:	bf0c      	ite	eq
 8107a0e:	600b      	streq	r3, [r1, #0]
 8107a10:	6053      	strne	r3, [r2, #4]
 8107a12:	4630      	mov	r0, r6
 8107a14:	f003 faa4 	bl	810af60 <__malloc_unlock>
 8107a18:	f104 000b 	add.w	r0, r4, #11
 8107a1c:	1d23      	adds	r3, r4, #4
 8107a1e:	f020 0007 	bic.w	r0, r0, #7
 8107a22:	1ac2      	subs	r2, r0, r3
 8107a24:	d0cc      	beq.n	81079c0 <_malloc_r+0x20>
 8107a26:	1a1b      	subs	r3, r3, r0
 8107a28:	50a3      	str	r3, [r4, r2]
 8107a2a:	e7c9      	b.n	81079c0 <_malloc_r+0x20>
 8107a2c:	4622      	mov	r2, r4
 8107a2e:	6864      	ldr	r4, [r4, #4]
 8107a30:	e7cc      	b.n	81079cc <_malloc_r+0x2c>
 8107a32:	1cc4      	adds	r4, r0, #3
 8107a34:	f024 0403 	bic.w	r4, r4, #3
 8107a38:	42a0      	cmp	r0, r4
 8107a3a:	d0e3      	beq.n	8107a04 <_malloc_r+0x64>
 8107a3c:	1a21      	subs	r1, r4, r0
 8107a3e:	4630      	mov	r0, r6
 8107a40:	f000 ff10 	bl	8108864 <_sbrk_r>
 8107a44:	3001      	adds	r0, #1
 8107a46:	d1dd      	bne.n	8107a04 <_malloc_r+0x64>
 8107a48:	e7cf      	b.n	81079ea <_malloc_r+0x4a>
 8107a4a:	bf00      	nop
 8107a4c:	10000264 	.word	0x10000264
 8107a50:	10000268 	.word	0x10000268

08107a54 <__cvt>:
 8107a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107a58:	ec55 4b10 	vmov	r4, r5, d0
 8107a5c:	2d00      	cmp	r5, #0
 8107a5e:	460e      	mov	r6, r1
 8107a60:	4619      	mov	r1, r3
 8107a62:	462b      	mov	r3, r5
 8107a64:	bfbb      	ittet	lt
 8107a66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8107a6a:	461d      	movlt	r5, r3
 8107a6c:	2300      	movge	r3, #0
 8107a6e:	232d      	movlt	r3, #45	; 0x2d
 8107a70:	700b      	strb	r3, [r1, #0]
 8107a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107a74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8107a78:	4691      	mov	r9, r2
 8107a7a:	f023 0820 	bic.w	r8, r3, #32
 8107a7e:	bfbc      	itt	lt
 8107a80:	4622      	movlt	r2, r4
 8107a82:	4614      	movlt	r4, r2
 8107a84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107a88:	d005      	beq.n	8107a96 <__cvt+0x42>
 8107a8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8107a8e:	d100      	bne.n	8107a92 <__cvt+0x3e>
 8107a90:	3601      	adds	r6, #1
 8107a92:	2102      	movs	r1, #2
 8107a94:	e000      	b.n	8107a98 <__cvt+0x44>
 8107a96:	2103      	movs	r1, #3
 8107a98:	ab03      	add	r3, sp, #12
 8107a9a:	9301      	str	r3, [sp, #4]
 8107a9c:	ab02      	add	r3, sp, #8
 8107a9e:	9300      	str	r3, [sp, #0]
 8107aa0:	ec45 4b10 	vmov	d0, r4, r5
 8107aa4:	4653      	mov	r3, sl
 8107aa6:	4632      	mov	r2, r6
 8107aa8:	f002 f856 	bl	8109b58 <_dtoa_r>
 8107aac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8107ab0:	4607      	mov	r7, r0
 8107ab2:	d102      	bne.n	8107aba <__cvt+0x66>
 8107ab4:	f019 0f01 	tst.w	r9, #1
 8107ab8:	d022      	beq.n	8107b00 <__cvt+0xac>
 8107aba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107abe:	eb07 0906 	add.w	r9, r7, r6
 8107ac2:	d110      	bne.n	8107ae6 <__cvt+0x92>
 8107ac4:	783b      	ldrb	r3, [r7, #0]
 8107ac6:	2b30      	cmp	r3, #48	; 0x30
 8107ac8:	d10a      	bne.n	8107ae0 <__cvt+0x8c>
 8107aca:	2200      	movs	r2, #0
 8107acc:	2300      	movs	r3, #0
 8107ace:	4620      	mov	r0, r4
 8107ad0:	4629      	mov	r1, r5
 8107ad2:	f7f9 f881 	bl	8100bd8 <__aeabi_dcmpeq>
 8107ad6:	b918      	cbnz	r0, 8107ae0 <__cvt+0x8c>
 8107ad8:	f1c6 0601 	rsb	r6, r6, #1
 8107adc:	f8ca 6000 	str.w	r6, [sl]
 8107ae0:	f8da 3000 	ldr.w	r3, [sl]
 8107ae4:	4499      	add	r9, r3
 8107ae6:	2200      	movs	r2, #0
 8107ae8:	2300      	movs	r3, #0
 8107aea:	4620      	mov	r0, r4
 8107aec:	4629      	mov	r1, r5
 8107aee:	f7f9 f873 	bl	8100bd8 <__aeabi_dcmpeq>
 8107af2:	b108      	cbz	r0, 8107af8 <__cvt+0xa4>
 8107af4:	f8cd 900c 	str.w	r9, [sp, #12]
 8107af8:	2230      	movs	r2, #48	; 0x30
 8107afa:	9b03      	ldr	r3, [sp, #12]
 8107afc:	454b      	cmp	r3, r9
 8107afe:	d307      	bcc.n	8107b10 <__cvt+0xbc>
 8107b00:	9b03      	ldr	r3, [sp, #12]
 8107b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107b04:	1bdb      	subs	r3, r3, r7
 8107b06:	4638      	mov	r0, r7
 8107b08:	6013      	str	r3, [r2, #0]
 8107b0a:	b004      	add	sp, #16
 8107b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107b10:	1c59      	adds	r1, r3, #1
 8107b12:	9103      	str	r1, [sp, #12]
 8107b14:	701a      	strb	r2, [r3, #0]
 8107b16:	e7f0      	b.n	8107afa <__cvt+0xa6>

08107b18 <__exponent>:
 8107b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107b1a:	4603      	mov	r3, r0
 8107b1c:	2900      	cmp	r1, #0
 8107b1e:	bfb8      	it	lt
 8107b20:	4249      	neglt	r1, r1
 8107b22:	f803 2b02 	strb.w	r2, [r3], #2
 8107b26:	bfb4      	ite	lt
 8107b28:	222d      	movlt	r2, #45	; 0x2d
 8107b2a:	222b      	movge	r2, #43	; 0x2b
 8107b2c:	2909      	cmp	r1, #9
 8107b2e:	7042      	strb	r2, [r0, #1]
 8107b30:	dd2a      	ble.n	8107b88 <__exponent+0x70>
 8107b32:	f10d 0407 	add.w	r4, sp, #7
 8107b36:	46a4      	mov	ip, r4
 8107b38:	270a      	movs	r7, #10
 8107b3a:	46a6      	mov	lr, r4
 8107b3c:	460a      	mov	r2, r1
 8107b3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8107b42:	fb07 1516 	mls	r5, r7, r6, r1
 8107b46:	3530      	adds	r5, #48	; 0x30
 8107b48:	2a63      	cmp	r2, #99	; 0x63
 8107b4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8107b4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8107b52:	4631      	mov	r1, r6
 8107b54:	dcf1      	bgt.n	8107b3a <__exponent+0x22>
 8107b56:	3130      	adds	r1, #48	; 0x30
 8107b58:	f1ae 0502 	sub.w	r5, lr, #2
 8107b5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8107b60:	1c44      	adds	r4, r0, #1
 8107b62:	4629      	mov	r1, r5
 8107b64:	4561      	cmp	r1, ip
 8107b66:	d30a      	bcc.n	8107b7e <__exponent+0x66>
 8107b68:	f10d 0209 	add.w	r2, sp, #9
 8107b6c:	eba2 020e 	sub.w	r2, r2, lr
 8107b70:	4565      	cmp	r5, ip
 8107b72:	bf88      	it	hi
 8107b74:	2200      	movhi	r2, #0
 8107b76:	4413      	add	r3, r2
 8107b78:	1a18      	subs	r0, r3, r0
 8107b7a:	b003      	add	sp, #12
 8107b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8107b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107b82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107b86:	e7ed      	b.n	8107b64 <__exponent+0x4c>
 8107b88:	2330      	movs	r3, #48	; 0x30
 8107b8a:	3130      	adds	r1, #48	; 0x30
 8107b8c:	7083      	strb	r3, [r0, #2]
 8107b8e:	70c1      	strb	r1, [r0, #3]
 8107b90:	1d03      	adds	r3, r0, #4
 8107b92:	e7f1      	b.n	8107b78 <__exponent+0x60>

08107b94 <_printf_float>:
 8107b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107b98:	ed2d 8b02 	vpush	{d8}
 8107b9c:	b08d      	sub	sp, #52	; 0x34
 8107b9e:	460c      	mov	r4, r1
 8107ba0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8107ba4:	4616      	mov	r6, r2
 8107ba6:	461f      	mov	r7, r3
 8107ba8:	4605      	mov	r5, r0
 8107baa:	f003 f931 	bl	810ae10 <_localeconv_r>
 8107bae:	f8d0 a000 	ldr.w	sl, [r0]
 8107bb2:	4650      	mov	r0, sl
 8107bb4:	f7f8 fb94 	bl	81002e0 <strlen>
 8107bb8:	2300      	movs	r3, #0
 8107bba:	930a      	str	r3, [sp, #40]	; 0x28
 8107bbc:	6823      	ldr	r3, [r4, #0]
 8107bbe:	9305      	str	r3, [sp, #20]
 8107bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8107bc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8107bc8:	3307      	adds	r3, #7
 8107bca:	f023 0307 	bic.w	r3, r3, #7
 8107bce:	f103 0208 	add.w	r2, r3, #8
 8107bd2:	f8c8 2000 	str.w	r2, [r8]
 8107bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107bda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8107bde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8107be2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8107be6:	9307      	str	r3, [sp, #28]
 8107be8:	f8cd 8018 	str.w	r8, [sp, #24]
 8107bec:	ee08 0a10 	vmov	s16, r0
 8107bf0:	4b9f      	ldr	r3, [pc, #636]	; (8107e70 <_printf_float+0x2dc>)
 8107bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8107bfa:	f7f9 f81f 	bl	8100c3c <__aeabi_dcmpun>
 8107bfe:	bb88      	cbnz	r0, 8107c64 <_printf_float+0xd0>
 8107c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107c04:	4b9a      	ldr	r3, [pc, #616]	; (8107e70 <_printf_float+0x2dc>)
 8107c06:	f04f 32ff 	mov.w	r2, #4294967295
 8107c0a:	f7f8 fff9 	bl	8100c00 <__aeabi_dcmple>
 8107c0e:	bb48      	cbnz	r0, 8107c64 <_printf_float+0xd0>
 8107c10:	2200      	movs	r2, #0
 8107c12:	2300      	movs	r3, #0
 8107c14:	4640      	mov	r0, r8
 8107c16:	4649      	mov	r1, r9
 8107c18:	f7f8 ffe8 	bl	8100bec <__aeabi_dcmplt>
 8107c1c:	b110      	cbz	r0, 8107c24 <_printf_float+0x90>
 8107c1e:	232d      	movs	r3, #45	; 0x2d
 8107c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107c24:	4b93      	ldr	r3, [pc, #588]	; (8107e74 <_printf_float+0x2e0>)
 8107c26:	4894      	ldr	r0, [pc, #592]	; (8107e78 <_printf_float+0x2e4>)
 8107c28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8107c2c:	bf94      	ite	ls
 8107c2e:	4698      	movls	r8, r3
 8107c30:	4680      	movhi	r8, r0
 8107c32:	2303      	movs	r3, #3
 8107c34:	6123      	str	r3, [r4, #16]
 8107c36:	9b05      	ldr	r3, [sp, #20]
 8107c38:	f023 0204 	bic.w	r2, r3, #4
 8107c3c:	6022      	str	r2, [r4, #0]
 8107c3e:	f04f 0900 	mov.w	r9, #0
 8107c42:	9700      	str	r7, [sp, #0]
 8107c44:	4633      	mov	r3, r6
 8107c46:	aa0b      	add	r2, sp, #44	; 0x2c
 8107c48:	4621      	mov	r1, r4
 8107c4a:	4628      	mov	r0, r5
 8107c4c:	f000 f9d8 	bl	8108000 <_printf_common>
 8107c50:	3001      	adds	r0, #1
 8107c52:	f040 8090 	bne.w	8107d76 <_printf_float+0x1e2>
 8107c56:	f04f 30ff 	mov.w	r0, #4294967295
 8107c5a:	b00d      	add	sp, #52	; 0x34
 8107c5c:	ecbd 8b02 	vpop	{d8}
 8107c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107c64:	4642      	mov	r2, r8
 8107c66:	464b      	mov	r3, r9
 8107c68:	4640      	mov	r0, r8
 8107c6a:	4649      	mov	r1, r9
 8107c6c:	f7f8 ffe6 	bl	8100c3c <__aeabi_dcmpun>
 8107c70:	b140      	cbz	r0, 8107c84 <_printf_float+0xf0>
 8107c72:	464b      	mov	r3, r9
 8107c74:	2b00      	cmp	r3, #0
 8107c76:	bfbc      	itt	lt
 8107c78:	232d      	movlt	r3, #45	; 0x2d
 8107c7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8107c7e:	487f      	ldr	r0, [pc, #508]	; (8107e7c <_printf_float+0x2e8>)
 8107c80:	4b7f      	ldr	r3, [pc, #508]	; (8107e80 <_printf_float+0x2ec>)
 8107c82:	e7d1      	b.n	8107c28 <_printf_float+0x94>
 8107c84:	6863      	ldr	r3, [r4, #4]
 8107c86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107c8a:	9206      	str	r2, [sp, #24]
 8107c8c:	1c5a      	adds	r2, r3, #1
 8107c8e:	d13f      	bne.n	8107d10 <_printf_float+0x17c>
 8107c90:	2306      	movs	r3, #6
 8107c92:	6063      	str	r3, [r4, #4]
 8107c94:	9b05      	ldr	r3, [sp, #20]
 8107c96:	6861      	ldr	r1, [r4, #4]
 8107c98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8107c9c:	2300      	movs	r3, #0
 8107c9e:	9303      	str	r3, [sp, #12]
 8107ca0:	ab0a      	add	r3, sp, #40	; 0x28
 8107ca2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107ca6:	ab09      	add	r3, sp, #36	; 0x24
 8107ca8:	ec49 8b10 	vmov	d0, r8, r9
 8107cac:	9300      	str	r3, [sp, #0]
 8107cae:	6022      	str	r2, [r4, #0]
 8107cb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107cb4:	4628      	mov	r0, r5
 8107cb6:	f7ff fecd 	bl	8107a54 <__cvt>
 8107cba:	9b06      	ldr	r3, [sp, #24]
 8107cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107cbe:	2b47      	cmp	r3, #71	; 0x47
 8107cc0:	4680      	mov	r8, r0
 8107cc2:	d108      	bne.n	8107cd6 <_printf_float+0x142>
 8107cc4:	1cc8      	adds	r0, r1, #3
 8107cc6:	db02      	blt.n	8107cce <_printf_float+0x13a>
 8107cc8:	6863      	ldr	r3, [r4, #4]
 8107cca:	4299      	cmp	r1, r3
 8107ccc:	dd41      	ble.n	8107d52 <_printf_float+0x1be>
 8107cce:	f1ab 0b02 	sub.w	fp, fp, #2
 8107cd2:	fa5f fb8b 	uxtb.w	fp, fp
 8107cd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107cda:	d820      	bhi.n	8107d1e <_printf_float+0x18a>
 8107cdc:	3901      	subs	r1, #1
 8107cde:	465a      	mov	r2, fp
 8107ce0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8107ce6:	f7ff ff17 	bl	8107b18 <__exponent>
 8107cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107cec:	1813      	adds	r3, r2, r0
 8107cee:	2a01      	cmp	r2, #1
 8107cf0:	4681      	mov	r9, r0
 8107cf2:	6123      	str	r3, [r4, #16]
 8107cf4:	dc02      	bgt.n	8107cfc <_printf_float+0x168>
 8107cf6:	6822      	ldr	r2, [r4, #0]
 8107cf8:	07d2      	lsls	r2, r2, #31
 8107cfa:	d501      	bpl.n	8107d00 <_printf_float+0x16c>
 8107cfc:	3301      	adds	r3, #1
 8107cfe:	6123      	str	r3, [r4, #16]
 8107d00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107d04:	2b00      	cmp	r3, #0
 8107d06:	d09c      	beq.n	8107c42 <_printf_float+0xae>
 8107d08:	232d      	movs	r3, #45	; 0x2d
 8107d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107d0e:	e798      	b.n	8107c42 <_printf_float+0xae>
 8107d10:	9a06      	ldr	r2, [sp, #24]
 8107d12:	2a47      	cmp	r2, #71	; 0x47
 8107d14:	d1be      	bne.n	8107c94 <_printf_float+0x100>
 8107d16:	2b00      	cmp	r3, #0
 8107d18:	d1bc      	bne.n	8107c94 <_printf_float+0x100>
 8107d1a:	2301      	movs	r3, #1
 8107d1c:	e7b9      	b.n	8107c92 <_printf_float+0xfe>
 8107d1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107d22:	d118      	bne.n	8107d56 <_printf_float+0x1c2>
 8107d24:	2900      	cmp	r1, #0
 8107d26:	6863      	ldr	r3, [r4, #4]
 8107d28:	dd0b      	ble.n	8107d42 <_printf_float+0x1ae>
 8107d2a:	6121      	str	r1, [r4, #16]
 8107d2c:	b913      	cbnz	r3, 8107d34 <_printf_float+0x1a0>
 8107d2e:	6822      	ldr	r2, [r4, #0]
 8107d30:	07d0      	lsls	r0, r2, #31
 8107d32:	d502      	bpl.n	8107d3a <_printf_float+0x1a6>
 8107d34:	3301      	adds	r3, #1
 8107d36:	440b      	add	r3, r1
 8107d38:	6123      	str	r3, [r4, #16]
 8107d3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8107d3c:	f04f 0900 	mov.w	r9, #0
 8107d40:	e7de      	b.n	8107d00 <_printf_float+0x16c>
 8107d42:	b913      	cbnz	r3, 8107d4a <_printf_float+0x1b6>
 8107d44:	6822      	ldr	r2, [r4, #0]
 8107d46:	07d2      	lsls	r2, r2, #31
 8107d48:	d501      	bpl.n	8107d4e <_printf_float+0x1ba>
 8107d4a:	3302      	adds	r3, #2
 8107d4c:	e7f4      	b.n	8107d38 <_printf_float+0x1a4>
 8107d4e:	2301      	movs	r3, #1
 8107d50:	e7f2      	b.n	8107d38 <_printf_float+0x1a4>
 8107d52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8107d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107d58:	4299      	cmp	r1, r3
 8107d5a:	db05      	blt.n	8107d68 <_printf_float+0x1d4>
 8107d5c:	6823      	ldr	r3, [r4, #0]
 8107d5e:	6121      	str	r1, [r4, #16]
 8107d60:	07d8      	lsls	r0, r3, #31
 8107d62:	d5ea      	bpl.n	8107d3a <_printf_float+0x1a6>
 8107d64:	1c4b      	adds	r3, r1, #1
 8107d66:	e7e7      	b.n	8107d38 <_printf_float+0x1a4>
 8107d68:	2900      	cmp	r1, #0
 8107d6a:	bfd4      	ite	le
 8107d6c:	f1c1 0202 	rsble	r2, r1, #2
 8107d70:	2201      	movgt	r2, #1
 8107d72:	4413      	add	r3, r2
 8107d74:	e7e0      	b.n	8107d38 <_printf_float+0x1a4>
 8107d76:	6823      	ldr	r3, [r4, #0]
 8107d78:	055a      	lsls	r2, r3, #21
 8107d7a:	d407      	bmi.n	8107d8c <_printf_float+0x1f8>
 8107d7c:	6923      	ldr	r3, [r4, #16]
 8107d7e:	4642      	mov	r2, r8
 8107d80:	4631      	mov	r1, r6
 8107d82:	4628      	mov	r0, r5
 8107d84:	47b8      	blx	r7
 8107d86:	3001      	adds	r0, #1
 8107d88:	d12c      	bne.n	8107de4 <_printf_float+0x250>
 8107d8a:	e764      	b.n	8107c56 <_printf_float+0xc2>
 8107d8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107d90:	f240 80e0 	bls.w	8107f54 <_printf_float+0x3c0>
 8107d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107d98:	2200      	movs	r2, #0
 8107d9a:	2300      	movs	r3, #0
 8107d9c:	f7f8 ff1c 	bl	8100bd8 <__aeabi_dcmpeq>
 8107da0:	2800      	cmp	r0, #0
 8107da2:	d034      	beq.n	8107e0e <_printf_float+0x27a>
 8107da4:	4a37      	ldr	r2, [pc, #220]	; (8107e84 <_printf_float+0x2f0>)
 8107da6:	2301      	movs	r3, #1
 8107da8:	4631      	mov	r1, r6
 8107daa:	4628      	mov	r0, r5
 8107dac:	47b8      	blx	r7
 8107dae:	3001      	adds	r0, #1
 8107db0:	f43f af51 	beq.w	8107c56 <_printf_float+0xc2>
 8107db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107db8:	429a      	cmp	r2, r3
 8107dba:	db02      	blt.n	8107dc2 <_printf_float+0x22e>
 8107dbc:	6823      	ldr	r3, [r4, #0]
 8107dbe:	07d8      	lsls	r0, r3, #31
 8107dc0:	d510      	bpl.n	8107de4 <_printf_float+0x250>
 8107dc2:	ee18 3a10 	vmov	r3, s16
 8107dc6:	4652      	mov	r2, sl
 8107dc8:	4631      	mov	r1, r6
 8107dca:	4628      	mov	r0, r5
 8107dcc:	47b8      	blx	r7
 8107dce:	3001      	adds	r0, #1
 8107dd0:	f43f af41 	beq.w	8107c56 <_printf_float+0xc2>
 8107dd4:	f04f 0800 	mov.w	r8, #0
 8107dd8:	f104 091a 	add.w	r9, r4, #26
 8107ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107dde:	3b01      	subs	r3, #1
 8107de0:	4543      	cmp	r3, r8
 8107de2:	dc09      	bgt.n	8107df8 <_printf_float+0x264>
 8107de4:	6823      	ldr	r3, [r4, #0]
 8107de6:	079b      	lsls	r3, r3, #30
 8107de8:	f100 8105 	bmi.w	8107ff6 <_printf_float+0x462>
 8107dec:	68e0      	ldr	r0, [r4, #12]
 8107dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107df0:	4298      	cmp	r0, r3
 8107df2:	bfb8      	it	lt
 8107df4:	4618      	movlt	r0, r3
 8107df6:	e730      	b.n	8107c5a <_printf_float+0xc6>
 8107df8:	2301      	movs	r3, #1
 8107dfa:	464a      	mov	r2, r9
 8107dfc:	4631      	mov	r1, r6
 8107dfe:	4628      	mov	r0, r5
 8107e00:	47b8      	blx	r7
 8107e02:	3001      	adds	r0, #1
 8107e04:	f43f af27 	beq.w	8107c56 <_printf_float+0xc2>
 8107e08:	f108 0801 	add.w	r8, r8, #1
 8107e0c:	e7e6      	b.n	8107ddc <_printf_float+0x248>
 8107e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107e10:	2b00      	cmp	r3, #0
 8107e12:	dc39      	bgt.n	8107e88 <_printf_float+0x2f4>
 8107e14:	4a1b      	ldr	r2, [pc, #108]	; (8107e84 <_printf_float+0x2f0>)
 8107e16:	2301      	movs	r3, #1
 8107e18:	4631      	mov	r1, r6
 8107e1a:	4628      	mov	r0, r5
 8107e1c:	47b8      	blx	r7
 8107e1e:	3001      	adds	r0, #1
 8107e20:	f43f af19 	beq.w	8107c56 <_printf_float+0xc2>
 8107e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107e28:	4313      	orrs	r3, r2
 8107e2a:	d102      	bne.n	8107e32 <_printf_float+0x29e>
 8107e2c:	6823      	ldr	r3, [r4, #0]
 8107e2e:	07d9      	lsls	r1, r3, #31
 8107e30:	d5d8      	bpl.n	8107de4 <_printf_float+0x250>
 8107e32:	ee18 3a10 	vmov	r3, s16
 8107e36:	4652      	mov	r2, sl
 8107e38:	4631      	mov	r1, r6
 8107e3a:	4628      	mov	r0, r5
 8107e3c:	47b8      	blx	r7
 8107e3e:	3001      	adds	r0, #1
 8107e40:	f43f af09 	beq.w	8107c56 <_printf_float+0xc2>
 8107e44:	f04f 0900 	mov.w	r9, #0
 8107e48:	f104 0a1a 	add.w	sl, r4, #26
 8107e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107e4e:	425b      	negs	r3, r3
 8107e50:	454b      	cmp	r3, r9
 8107e52:	dc01      	bgt.n	8107e58 <_printf_float+0x2c4>
 8107e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107e56:	e792      	b.n	8107d7e <_printf_float+0x1ea>
 8107e58:	2301      	movs	r3, #1
 8107e5a:	4652      	mov	r2, sl
 8107e5c:	4631      	mov	r1, r6
 8107e5e:	4628      	mov	r0, r5
 8107e60:	47b8      	blx	r7
 8107e62:	3001      	adds	r0, #1
 8107e64:	f43f aef7 	beq.w	8107c56 <_printf_float+0xc2>
 8107e68:	f109 0901 	add.w	r9, r9, #1
 8107e6c:	e7ee      	b.n	8107e4c <_printf_float+0x2b8>
 8107e6e:	bf00      	nop
 8107e70:	7fefffff 	.word	0x7fefffff
 8107e74:	0810e6c4 	.word	0x0810e6c4
 8107e78:	0810e6c8 	.word	0x0810e6c8
 8107e7c:	0810e6d0 	.word	0x0810e6d0
 8107e80:	0810e6cc 	.word	0x0810e6cc
 8107e84:	0810ead9 	.word	0x0810ead9
 8107e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107e8c:	429a      	cmp	r2, r3
 8107e8e:	bfa8      	it	ge
 8107e90:	461a      	movge	r2, r3
 8107e92:	2a00      	cmp	r2, #0
 8107e94:	4691      	mov	r9, r2
 8107e96:	dc37      	bgt.n	8107f08 <_printf_float+0x374>
 8107e98:	f04f 0b00 	mov.w	fp, #0
 8107e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107ea0:	f104 021a 	add.w	r2, r4, #26
 8107ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107ea6:	9305      	str	r3, [sp, #20]
 8107ea8:	eba3 0309 	sub.w	r3, r3, r9
 8107eac:	455b      	cmp	r3, fp
 8107eae:	dc33      	bgt.n	8107f18 <_printf_float+0x384>
 8107eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107eb4:	429a      	cmp	r2, r3
 8107eb6:	db3b      	blt.n	8107f30 <_printf_float+0x39c>
 8107eb8:	6823      	ldr	r3, [r4, #0]
 8107eba:	07da      	lsls	r2, r3, #31
 8107ebc:	d438      	bmi.n	8107f30 <_printf_float+0x39c>
 8107ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107ec0:	9b05      	ldr	r3, [sp, #20]
 8107ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107ec4:	1ad3      	subs	r3, r2, r3
 8107ec6:	eba2 0901 	sub.w	r9, r2, r1
 8107eca:	4599      	cmp	r9, r3
 8107ecc:	bfa8      	it	ge
 8107ece:	4699      	movge	r9, r3
 8107ed0:	f1b9 0f00 	cmp.w	r9, #0
 8107ed4:	dc35      	bgt.n	8107f42 <_printf_float+0x3ae>
 8107ed6:	f04f 0800 	mov.w	r8, #0
 8107eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107ede:	f104 0a1a 	add.w	sl, r4, #26
 8107ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107ee6:	1a9b      	subs	r3, r3, r2
 8107ee8:	eba3 0309 	sub.w	r3, r3, r9
 8107eec:	4543      	cmp	r3, r8
 8107eee:	f77f af79 	ble.w	8107de4 <_printf_float+0x250>
 8107ef2:	2301      	movs	r3, #1
 8107ef4:	4652      	mov	r2, sl
 8107ef6:	4631      	mov	r1, r6
 8107ef8:	4628      	mov	r0, r5
 8107efa:	47b8      	blx	r7
 8107efc:	3001      	adds	r0, #1
 8107efe:	f43f aeaa 	beq.w	8107c56 <_printf_float+0xc2>
 8107f02:	f108 0801 	add.w	r8, r8, #1
 8107f06:	e7ec      	b.n	8107ee2 <_printf_float+0x34e>
 8107f08:	4613      	mov	r3, r2
 8107f0a:	4631      	mov	r1, r6
 8107f0c:	4642      	mov	r2, r8
 8107f0e:	4628      	mov	r0, r5
 8107f10:	47b8      	blx	r7
 8107f12:	3001      	adds	r0, #1
 8107f14:	d1c0      	bne.n	8107e98 <_printf_float+0x304>
 8107f16:	e69e      	b.n	8107c56 <_printf_float+0xc2>
 8107f18:	2301      	movs	r3, #1
 8107f1a:	4631      	mov	r1, r6
 8107f1c:	4628      	mov	r0, r5
 8107f1e:	9205      	str	r2, [sp, #20]
 8107f20:	47b8      	blx	r7
 8107f22:	3001      	adds	r0, #1
 8107f24:	f43f ae97 	beq.w	8107c56 <_printf_float+0xc2>
 8107f28:	9a05      	ldr	r2, [sp, #20]
 8107f2a:	f10b 0b01 	add.w	fp, fp, #1
 8107f2e:	e7b9      	b.n	8107ea4 <_printf_float+0x310>
 8107f30:	ee18 3a10 	vmov	r3, s16
 8107f34:	4652      	mov	r2, sl
 8107f36:	4631      	mov	r1, r6
 8107f38:	4628      	mov	r0, r5
 8107f3a:	47b8      	blx	r7
 8107f3c:	3001      	adds	r0, #1
 8107f3e:	d1be      	bne.n	8107ebe <_printf_float+0x32a>
 8107f40:	e689      	b.n	8107c56 <_printf_float+0xc2>
 8107f42:	9a05      	ldr	r2, [sp, #20]
 8107f44:	464b      	mov	r3, r9
 8107f46:	4442      	add	r2, r8
 8107f48:	4631      	mov	r1, r6
 8107f4a:	4628      	mov	r0, r5
 8107f4c:	47b8      	blx	r7
 8107f4e:	3001      	adds	r0, #1
 8107f50:	d1c1      	bne.n	8107ed6 <_printf_float+0x342>
 8107f52:	e680      	b.n	8107c56 <_printf_float+0xc2>
 8107f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107f56:	2a01      	cmp	r2, #1
 8107f58:	dc01      	bgt.n	8107f5e <_printf_float+0x3ca>
 8107f5a:	07db      	lsls	r3, r3, #31
 8107f5c:	d538      	bpl.n	8107fd0 <_printf_float+0x43c>
 8107f5e:	2301      	movs	r3, #1
 8107f60:	4642      	mov	r2, r8
 8107f62:	4631      	mov	r1, r6
 8107f64:	4628      	mov	r0, r5
 8107f66:	47b8      	blx	r7
 8107f68:	3001      	adds	r0, #1
 8107f6a:	f43f ae74 	beq.w	8107c56 <_printf_float+0xc2>
 8107f6e:	ee18 3a10 	vmov	r3, s16
 8107f72:	4652      	mov	r2, sl
 8107f74:	4631      	mov	r1, r6
 8107f76:	4628      	mov	r0, r5
 8107f78:	47b8      	blx	r7
 8107f7a:	3001      	adds	r0, #1
 8107f7c:	f43f ae6b 	beq.w	8107c56 <_printf_float+0xc2>
 8107f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107f84:	2200      	movs	r2, #0
 8107f86:	2300      	movs	r3, #0
 8107f88:	f7f8 fe26 	bl	8100bd8 <__aeabi_dcmpeq>
 8107f8c:	b9d8      	cbnz	r0, 8107fc6 <_printf_float+0x432>
 8107f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107f90:	f108 0201 	add.w	r2, r8, #1
 8107f94:	3b01      	subs	r3, #1
 8107f96:	4631      	mov	r1, r6
 8107f98:	4628      	mov	r0, r5
 8107f9a:	47b8      	blx	r7
 8107f9c:	3001      	adds	r0, #1
 8107f9e:	d10e      	bne.n	8107fbe <_printf_float+0x42a>
 8107fa0:	e659      	b.n	8107c56 <_printf_float+0xc2>
 8107fa2:	2301      	movs	r3, #1
 8107fa4:	4652      	mov	r2, sl
 8107fa6:	4631      	mov	r1, r6
 8107fa8:	4628      	mov	r0, r5
 8107faa:	47b8      	blx	r7
 8107fac:	3001      	adds	r0, #1
 8107fae:	f43f ae52 	beq.w	8107c56 <_printf_float+0xc2>
 8107fb2:	f108 0801 	add.w	r8, r8, #1
 8107fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107fb8:	3b01      	subs	r3, #1
 8107fba:	4543      	cmp	r3, r8
 8107fbc:	dcf1      	bgt.n	8107fa2 <_printf_float+0x40e>
 8107fbe:	464b      	mov	r3, r9
 8107fc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8107fc4:	e6dc      	b.n	8107d80 <_printf_float+0x1ec>
 8107fc6:	f04f 0800 	mov.w	r8, #0
 8107fca:	f104 0a1a 	add.w	sl, r4, #26
 8107fce:	e7f2      	b.n	8107fb6 <_printf_float+0x422>
 8107fd0:	2301      	movs	r3, #1
 8107fd2:	4642      	mov	r2, r8
 8107fd4:	e7df      	b.n	8107f96 <_printf_float+0x402>
 8107fd6:	2301      	movs	r3, #1
 8107fd8:	464a      	mov	r2, r9
 8107fda:	4631      	mov	r1, r6
 8107fdc:	4628      	mov	r0, r5
 8107fde:	47b8      	blx	r7
 8107fe0:	3001      	adds	r0, #1
 8107fe2:	f43f ae38 	beq.w	8107c56 <_printf_float+0xc2>
 8107fe6:	f108 0801 	add.w	r8, r8, #1
 8107fea:	68e3      	ldr	r3, [r4, #12]
 8107fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8107fee:	1a5b      	subs	r3, r3, r1
 8107ff0:	4543      	cmp	r3, r8
 8107ff2:	dcf0      	bgt.n	8107fd6 <_printf_float+0x442>
 8107ff4:	e6fa      	b.n	8107dec <_printf_float+0x258>
 8107ff6:	f04f 0800 	mov.w	r8, #0
 8107ffa:	f104 0919 	add.w	r9, r4, #25
 8107ffe:	e7f4      	b.n	8107fea <_printf_float+0x456>

08108000 <_printf_common>:
 8108000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108004:	4616      	mov	r6, r2
 8108006:	4699      	mov	r9, r3
 8108008:	688a      	ldr	r2, [r1, #8]
 810800a:	690b      	ldr	r3, [r1, #16]
 810800c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8108010:	4293      	cmp	r3, r2
 8108012:	bfb8      	it	lt
 8108014:	4613      	movlt	r3, r2
 8108016:	6033      	str	r3, [r6, #0]
 8108018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810801c:	4607      	mov	r7, r0
 810801e:	460c      	mov	r4, r1
 8108020:	b10a      	cbz	r2, 8108026 <_printf_common+0x26>
 8108022:	3301      	adds	r3, #1
 8108024:	6033      	str	r3, [r6, #0]
 8108026:	6823      	ldr	r3, [r4, #0]
 8108028:	0699      	lsls	r1, r3, #26
 810802a:	bf42      	ittt	mi
 810802c:	6833      	ldrmi	r3, [r6, #0]
 810802e:	3302      	addmi	r3, #2
 8108030:	6033      	strmi	r3, [r6, #0]
 8108032:	6825      	ldr	r5, [r4, #0]
 8108034:	f015 0506 	ands.w	r5, r5, #6
 8108038:	d106      	bne.n	8108048 <_printf_common+0x48>
 810803a:	f104 0a19 	add.w	sl, r4, #25
 810803e:	68e3      	ldr	r3, [r4, #12]
 8108040:	6832      	ldr	r2, [r6, #0]
 8108042:	1a9b      	subs	r3, r3, r2
 8108044:	42ab      	cmp	r3, r5
 8108046:	dc26      	bgt.n	8108096 <_printf_common+0x96>
 8108048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810804c:	1e13      	subs	r3, r2, #0
 810804e:	6822      	ldr	r2, [r4, #0]
 8108050:	bf18      	it	ne
 8108052:	2301      	movne	r3, #1
 8108054:	0692      	lsls	r2, r2, #26
 8108056:	d42b      	bmi.n	81080b0 <_printf_common+0xb0>
 8108058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810805c:	4649      	mov	r1, r9
 810805e:	4638      	mov	r0, r7
 8108060:	47c0      	blx	r8
 8108062:	3001      	adds	r0, #1
 8108064:	d01e      	beq.n	81080a4 <_printf_common+0xa4>
 8108066:	6823      	ldr	r3, [r4, #0]
 8108068:	68e5      	ldr	r5, [r4, #12]
 810806a:	6832      	ldr	r2, [r6, #0]
 810806c:	f003 0306 	and.w	r3, r3, #6
 8108070:	2b04      	cmp	r3, #4
 8108072:	bf08      	it	eq
 8108074:	1aad      	subeq	r5, r5, r2
 8108076:	68a3      	ldr	r3, [r4, #8]
 8108078:	6922      	ldr	r2, [r4, #16]
 810807a:	bf0c      	ite	eq
 810807c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108080:	2500      	movne	r5, #0
 8108082:	4293      	cmp	r3, r2
 8108084:	bfc4      	itt	gt
 8108086:	1a9b      	subgt	r3, r3, r2
 8108088:	18ed      	addgt	r5, r5, r3
 810808a:	2600      	movs	r6, #0
 810808c:	341a      	adds	r4, #26
 810808e:	42b5      	cmp	r5, r6
 8108090:	d11a      	bne.n	81080c8 <_printf_common+0xc8>
 8108092:	2000      	movs	r0, #0
 8108094:	e008      	b.n	81080a8 <_printf_common+0xa8>
 8108096:	2301      	movs	r3, #1
 8108098:	4652      	mov	r2, sl
 810809a:	4649      	mov	r1, r9
 810809c:	4638      	mov	r0, r7
 810809e:	47c0      	blx	r8
 81080a0:	3001      	adds	r0, #1
 81080a2:	d103      	bne.n	81080ac <_printf_common+0xac>
 81080a4:	f04f 30ff 	mov.w	r0, #4294967295
 81080a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81080ac:	3501      	adds	r5, #1
 81080ae:	e7c6      	b.n	810803e <_printf_common+0x3e>
 81080b0:	18e1      	adds	r1, r4, r3
 81080b2:	1c5a      	adds	r2, r3, #1
 81080b4:	2030      	movs	r0, #48	; 0x30
 81080b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81080ba:	4422      	add	r2, r4
 81080bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81080c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81080c4:	3302      	adds	r3, #2
 81080c6:	e7c7      	b.n	8108058 <_printf_common+0x58>
 81080c8:	2301      	movs	r3, #1
 81080ca:	4622      	mov	r2, r4
 81080cc:	4649      	mov	r1, r9
 81080ce:	4638      	mov	r0, r7
 81080d0:	47c0      	blx	r8
 81080d2:	3001      	adds	r0, #1
 81080d4:	d0e6      	beq.n	81080a4 <_printf_common+0xa4>
 81080d6:	3601      	adds	r6, #1
 81080d8:	e7d9      	b.n	810808e <_printf_common+0x8e>
	...

081080dc <_printf_i>:
 81080dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81080e0:	460c      	mov	r4, r1
 81080e2:	4691      	mov	r9, r2
 81080e4:	7e27      	ldrb	r7, [r4, #24]
 81080e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 81080e8:	2f78      	cmp	r7, #120	; 0x78
 81080ea:	4680      	mov	r8, r0
 81080ec:	469a      	mov	sl, r3
 81080ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81080f2:	d807      	bhi.n	8108104 <_printf_i+0x28>
 81080f4:	2f62      	cmp	r7, #98	; 0x62
 81080f6:	d80a      	bhi.n	810810e <_printf_i+0x32>
 81080f8:	2f00      	cmp	r7, #0
 81080fa:	f000 80d8 	beq.w	81082ae <_printf_i+0x1d2>
 81080fe:	2f58      	cmp	r7, #88	; 0x58
 8108100:	f000 80a3 	beq.w	810824a <_printf_i+0x16e>
 8108104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8108108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810810c:	e03a      	b.n	8108184 <_printf_i+0xa8>
 810810e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8108112:	2b15      	cmp	r3, #21
 8108114:	d8f6      	bhi.n	8108104 <_printf_i+0x28>
 8108116:	a001      	add	r0, pc, #4	; (adr r0, 810811c <_printf_i+0x40>)
 8108118:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 810811c:	08108175 	.word	0x08108175
 8108120:	08108189 	.word	0x08108189
 8108124:	08108105 	.word	0x08108105
 8108128:	08108105 	.word	0x08108105
 810812c:	08108105 	.word	0x08108105
 8108130:	08108105 	.word	0x08108105
 8108134:	08108189 	.word	0x08108189
 8108138:	08108105 	.word	0x08108105
 810813c:	08108105 	.word	0x08108105
 8108140:	08108105 	.word	0x08108105
 8108144:	08108105 	.word	0x08108105
 8108148:	08108295 	.word	0x08108295
 810814c:	081081b9 	.word	0x081081b9
 8108150:	08108277 	.word	0x08108277
 8108154:	08108105 	.word	0x08108105
 8108158:	08108105 	.word	0x08108105
 810815c:	081082b7 	.word	0x081082b7
 8108160:	08108105 	.word	0x08108105
 8108164:	081081b9 	.word	0x081081b9
 8108168:	08108105 	.word	0x08108105
 810816c:	08108105 	.word	0x08108105
 8108170:	0810827f 	.word	0x0810827f
 8108174:	680b      	ldr	r3, [r1, #0]
 8108176:	1d1a      	adds	r2, r3, #4
 8108178:	681b      	ldr	r3, [r3, #0]
 810817a:	600a      	str	r2, [r1, #0]
 810817c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8108180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8108184:	2301      	movs	r3, #1
 8108186:	e0a3      	b.n	81082d0 <_printf_i+0x1f4>
 8108188:	6825      	ldr	r5, [r4, #0]
 810818a:	6808      	ldr	r0, [r1, #0]
 810818c:	062e      	lsls	r6, r5, #24
 810818e:	f100 0304 	add.w	r3, r0, #4
 8108192:	d50a      	bpl.n	81081aa <_printf_i+0xce>
 8108194:	6805      	ldr	r5, [r0, #0]
 8108196:	600b      	str	r3, [r1, #0]
 8108198:	2d00      	cmp	r5, #0
 810819a:	da03      	bge.n	81081a4 <_printf_i+0xc8>
 810819c:	232d      	movs	r3, #45	; 0x2d
 810819e:	426d      	negs	r5, r5
 81081a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81081a4:	485e      	ldr	r0, [pc, #376]	; (8108320 <_printf_i+0x244>)
 81081a6:	230a      	movs	r3, #10
 81081a8:	e019      	b.n	81081de <_printf_i+0x102>
 81081aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 81081ae:	6805      	ldr	r5, [r0, #0]
 81081b0:	600b      	str	r3, [r1, #0]
 81081b2:	bf18      	it	ne
 81081b4:	b22d      	sxthne	r5, r5
 81081b6:	e7ef      	b.n	8108198 <_printf_i+0xbc>
 81081b8:	680b      	ldr	r3, [r1, #0]
 81081ba:	6825      	ldr	r5, [r4, #0]
 81081bc:	1d18      	adds	r0, r3, #4
 81081be:	6008      	str	r0, [r1, #0]
 81081c0:	0628      	lsls	r0, r5, #24
 81081c2:	d501      	bpl.n	81081c8 <_printf_i+0xec>
 81081c4:	681d      	ldr	r5, [r3, #0]
 81081c6:	e002      	b.n	81081ce <_printf_i+0xf2>
 81081c8:	0669      	lsls	r1, r5, #25
 81081ca:	d5fb      	bpl.n	81081c4 <_printf_i+0xe8>
 81081cc:	881d      	ldrh	r5, [r3, #0]
 81081ce:	4854      	ldr	r0, [pc, #336]	; (8108320 <_printf_i+0x244>)
 81081d0:	2f6f      	cmp	r7, #111	; 0x6f
 81081d2:	bf0c      	ite	eq
 81081d4:	2308      	moveq	r3, #8
 81081d6:	230a      	movne	r3, #10
 81081d8:	2100      	movs	r1, #0
 81081da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81081de:	6866      	ldr	r6, [r4, #4]
 81081e0:	60a6      	str	r6, [r4, #8]
 81081e2:	2e00      	cmp	r6, #0
 81081e4:	bfa2      	ittt	ge
 81081e6:	6821      	ldrge	r1, [r4, #0]
 81081e8:	f021 0104 	bicge.w	r1, r1, #4
 81081ec:	6021      	strge	r1, [r4, #0]
 81081ee:	b90d      	cbnz	r5, 81081f4 <_printf_i+0x118>
 81081f0:	2e00      	cmp	r6, #0
 81081f2:	d04d      	beq.n	8108290 <_printf_i+0x1b4>
 81081f4:	4616      	mov	r6, r2
 81081f6:	fbb5 f1f3 	udiv	r1, r5, r3
 81081fa:	fb03 5711 	mls	r7, r3, r1, r5
 81081fe:	5dc7      	ldrb	r7, [r0, r7]
 8108200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8108204:	462f      	mov	r7, r5
 8108206:	42bb      	cmp	r3, r7
 8108208:	460d      	mov	r5, r1
 810820a:	d9f4      	bls.n	81081f6 <_printf_i+0x11a>
 810820c:	2b08      	cmp	r3, #8
 810820e:	d10b      	bne.n	8108228 <_printf_i+0x14c>
 8108210:	6823      	ldr	r3, [r4, #0]
 8108212:	07df      	lsls	r7, r3, #31
 8108214:	d508      	bpl.n	8108228 <_printf_i+0x14c>
 8108216:	6923      	ldr	r3, [r4, #16]
 8108218:	6861      	ldr	r1, [r4, #4]
 810821a:	4299      	cmp	r1, r3
 810821c:	bfde      	ittt	le
 810821e:	2330      	movle	r3, #48	; 0x30
 8108220:	f806 3c01 	strble.w	r3, [r6, #-1]
 8108224:	f106 36ff 	addle.w	r6, r6, #4294967295
 8108228:	1b92      	subs	r2, r2, r6
 810822a:	6122      	str	r2, [r4, #16]
 810822c:	f8cd a000 	str.w	sl, [sp]
 8108230:	464b      	mov	r3, r9
 8108232:	aa03      	add	r2, sp, #12
 8108234:	4621      	mov	r1, r4
 8108236:	4640      	mov	r0, r8
 8108238:	f7ff fee2 	bl	8108000 <_printf_common>
 810823c:	3001      	adds	r0, #1
 810823e:	d14c      	bne.n	81082da <_printf_i+0x1fe>
 8108240:	f04f 30ff 	mov.w	r0, #4294967295
 8108244:	b004      	add	sp, #16
 8108246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810824a:	4835      	ldr	r0, [pc, #212]	; (8108320 <_printf_i+0x244>)
 810824c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8108250:	6823      	ldr	r3, [r4, #0]
 8108252:	680e      	ldr	r6, [r1, #0]
 8108254:	061f      	lsls	r7, r3, #24
 8108256:	f856 5b04 	ldr.w	r5, [r6], #4
 810825a:	600e      	str	r6, [r1, #0]
 810825c:	d514      	bpl.n	8108288 <_printf_i+0x1ac>
 810825e:	07d9      	lsls	r1, r3, #31
 8108260:	bf44      	itt	mi
 8108262:	f043 0320 	orrmi.w	r3, r3, #32
 8108266:	6023      	strmi	r3, [r4, #0]
 8108268:	b91d      	cbnz	r5, 8108272 <_printf_i+0x196>
 810826a:	6823      	ldr	r3, [r4, #0]
 810826c:	f023 0320 	bic.w	r3, r3, #32
 8108270:	6023      	str	r3, [r4, #0]
 8108272:	2310      	movs	r3, #16
 8108274:	e7b0      	b.n	81081d8 <_printf_i+0xfc>
 8108276:	6823      	ldr	r3, [r4, #0]
 8108278:	f043 0320 	orr.w	r3, r3, #32
 810827c:	6023      	str	r3, [r4, #0]
 810827e:	2378      	movs	r3, #120	; 0x78
 8108280:	4828      	ldr	r0, [pc, #160]	; (8108324 <_printf_i+0x248>)
 8108282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8108286:	e7e3      	b.n	8108250 <_printf_i+0x174>
 8108288:	065e      	lsls	r6, r3, #25
 810828a:	bf48      	it	mi
 810828c:	b2ad      	uxthmi	r5, r5
 810828e:	e7e6      	b.n	810825e <_printf_i+0x182>
 8108290:	4616      	mov	r6, r2
 8108292:	e7bb      	b.n	810820c <_printf_i+0x130>
 8108294:	680b      	ldr	r3, [r1, #0]
 8108296:	6826      	ldr	r6, [r4, #0]
 8108298:	6960      	ldr	r0, [r4, #20]
 810829a:	1d1d      	adds	r5, r3, #4
 810829c:	600d      	str	r5, [r1, #0]
 810829e:	0635      	lsls	r5, r6, #24
 81082a0:	681b      	ldr	r3, [r3, #0]
 81082a2:	d501      	bpl.n	81082a8 <_printf_i+0x1cc>
 81082a4:	6018      	str	r0, [r3, #0]
 81082a6:	e002      	b.n	81082ae <_printf_i+0x1d2>
 81082a8:	0671      	lsls	r1, r6, #25
 81082aa:	d5fb      	bpl.n	81082a4 <_printf_i+0x1c8>
 81082ac:	8018      	strh	r0, [r3, #0]
 81082ae:	2300      	movs	r3, #0
 81082b0:	6123      	str	r3, [r4, #16]
 81082b2:	4616      	mov	r6, r2
 81082b4:	e7ba      	b.n	810822c <_printf_i+0x150>
 81082b6:	680b      	ldr	r3, [r1, #0]
 81082b8:	1d1a      	adds	r2, r3, #4
 81082ba:	600a      	str	r2, [r1, #0]
 81082bc:	681e      	ldr	r6, [r3, #0]
 81082be:	6862      	ldr	r2, [r4, #4]
 81082c0:	2100      	movs	r1, #0
 81082c2:	4630      	mov	r0, r6
 81082c4:	f7f8 f814 	bl	81002f0 <memchr>
 81082c8:	b108      	cbz	r0, 81082ce <_printf_i+0x1f2>
 81082ca:	1b80      	subs	r0, r0, r6
 81082cc:	6060      	str	r0, [r4, #4]
 81082ce:	6863      	ldr	r3, [r4, #4]
 81082d0:	6123      	str	r3, [r4, #16]
 81082d2:	2300      	movs	r3, #0
 81082d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81082d8:	e7a8      	b.n	810822c <_printf_i+0x150>
 81082da:	6923      	ldr	r3, [r4, #16]
 81082dc:	4632      	mov	r2, r6
 81082de:	4649      	mov	r1, r9
 81082e0:	4640      	mov	r0, r8
 81082e2:	47d0      	blx	sl
 81082e4:	3001      	adds	r0, #1
 81082e6:	d0ab      	beq.n	8108240 <_printf_i+0x164>
 81082e8:	6823      	ldr	r3, [r4, #0]
 81082ea:	079b      	lsls	r3, r3, #30
 81082ec:	d413      	bmi.n	8108316 <_printf_i+0x23a>
 81082ee:	68e0      	ldr	r0, [r4, #12]
 81082f0:	9b03      	ldr	r3, [sp, #12]
 81082f2:	4298      	cmp	r0, r3
 81082f4:	bfb8      	it	lt
 81082f6:	4618      	movlt	r0, r3
 81082f8:	e7a4      	b.n	8108244 <_printf_i+0x168>
 81082fa:	2301      	movs	r3, #1
 81082fc:	4632      	mov	r2, r6
 81082fe:	4649      	mov	r1, r9
 8108300:	4640      	mov	r0, r8
 8108302:	47d0      	blx	sl
 8108304:	3001      	adds	r0, #1
 8108306:	d09b      	beq.n	8108240 <_printf_i+0x164>
 8108308:	3501      	adds	r5, #1
 810830a:	68e3      	ldr	r3, [r4, #12]
 810830c:	9903      	ldr	r1, [sp, #12]
 810830e:	1a5b      	subs	r3, r3, r1
 8108310:	42ab      	cmp	r3, r5
 8108312:	dcf2      	bgt.n	81082fa <_printf_i+0x21e>
 8108314:	e7eb      	b.n	81082ee <_printf_i+0x212>
 8108316:	2500      	movs	r5, #0
 8108318:	f104 0619 	add.w	r6, r4, #25
 810831c:	e7f5      	b.n	810830a <_printf_i+0x22e>
 810831e:	bf00      	nop
 8108320:	0810e6d4 	.word	0x0810e6d4
 8108324:	0810e6e5 	.word	0x0810e6e5

08108328 <_scanf_float>:
 8108328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810832c:	b087      	sub	sp, #28
 810832e:	4617      	mov	r7, r2
 8108330:	9303      	str	r3, [sp, #12]
 8108332:	688b      	ldr	r3, [r1, #8]
 8108334:	1e5a      	subs	r2, r3, #1
 8108336:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810833a:	bf83      	ittte	hi
 810833c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8108340:	195b      	addhi	r3, r3, r5
 8108342:	9302      	strhi	r3, [sp, #8]
 8108344:	2300      	movls	r3, #0
 8108346:	bf86      	itte	hi
 8108348:	f240 135d 	movwhi	r3, #349	; 0x15d
 810834c:	608b      	strhi	r3, [r1, #8]
 810834e:	9302      	strls	r3, [sp, #8]
 8108350:	680b      	ldr	r3, [r1, #0]
 8108352:	468b      	mov	fp, r1
 8108354:	2500      	movs	r5, #0
 8108356:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810835a:	f84b 3b1c 	str.w	r3, [fp], #28
 810835e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8108362:	4680      	mov	r8, r0
 8108364:	460c      	mov	r4, r1
 8108366:	465e      	mov	r6, fp
 8108368:	46aa      	mov	sl, r5
 810836a:	46a9      	mov	r9, r5
 810836c:	9501      	str	r5, [sp, #4]
 810836e:	68a2      	ldr	r2, [r4, #8]
 8108370:	b152      	cbz	r2, 8108388 <_scanf_float+0x60>
 8108372:	683b      	ldr	r3, [r7, #0]
 8108374:	781b      	ldrb	r3, [r3, #0]
 8108376:	2b4e      	cmp	r3, #78	; 0x4e
 8108378:	d864      	bhi.n	8108444 <_scanf_float+0x11c>
 810837a:	2b40      	cmp	r3, #64	; 0x40
 810837c:	d83c      	bhi.n	81083f8 <_scanf_float+0xd0>
 810837e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8108382:	b2c8      	uxtb	r0, r1
 8108384:	280e      	cmp	r0, #14
 8108386:	d93a      	bls.n	81083fe <_scanf_float+0xd6>
 8108388:	f1b9 0f00 	cmp.w	r9, #0
 810838c:	d003      	beq.n	8108396 <_scanf_float+0x6e>
 810838e:	6823      	ldr	r3, [r4, #0]
 8108390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108394:	6023      	str	r3, [r4, #0]
 8108396:	f10a 3aff 	add.w	sl, sl, #4294967295
 810839a:	f1ba 0f01 	cmp.w	sl, #1
 810839e:	f200 8113 	bhi.w	81085c8 <_scanf_float+0x2a0>
 81083a2:	455e      	cmp	r6, fp
 81083a4:	f200 8105 	bhi.w	81085b2 <_scanf_float+0x28a>
 81083a8:	2501      	movs	r5, #1
 81083aa:	4628      	mov	r0, r5
 81083ac:	b007      	add	sp, #28
 81083ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81083b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 81083b6:	2a0d      	cmp	r2, #13
 81083b8:	d8e6      	bhi.n	8108388 <_scanf_float+0x60>
 81083ba:	a101      	add	r1, pc, #4	; (adr r1, 81083c0 <_scanf_float+0x98>)
 81083bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 81083c0:	081084ff 	.word	0x081084ff
 81083c4:	08108389 	.word	0x08108389
 81083c8:	08108389 	.word	0x08108389
 81083cc:	08108389 	.word	0x08108389
 81083d0:	0810855f 	.word	0x0810855f
 81083d4:	08108537 	.word	0x08108537
 81083d8:	08108389 	.word	0x08108389
 81083dc:	08108389 	.word	0x08108389
 81083e0:	0810850d 	.word	0x0810850d
 81083e4:	08108389 	.word	0x08108389
 81083e8:	08108389 	.word	0x08108389
 81083ec:	08108389 	.word	0x08108389
 81083f0:	08108389 	.word	0x08108389
 81083f4:	081084c5 	.word	0x081084c5
 81083f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 81083fc:	e7db      	b.n	81083b6 <_scanf_float+0x8e>
 81083fe:	290e      	cmp	r1, #14
 8108400:	d8c2      	bhi.n	8108388 <_scanf_float+0x60>
 8108402:	a001      	add	r0, pc, #4	; (adr r0, 8108408 <_scanf_float+0xe0>)
 8108404:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8108408:	081084b7 	.word	0x081084b7
 810840c:	08108389 	.word	0x08108389
 8108410:	081084b7 	.word	0x081084b7
 8108414:	0810854b 	.word	0x0810854b
 8108418:	08108389 	.word	0x08108389
 810841c:	08108465 	.word	0x08108465
 8108420:	081084a1 	.word	0x081084a1
 8108424:	081084a1 	.word	0x081084a1
 8108428:	081084a1 	.word	0x081084a1
 810842c:	081084a1 	.word	0x081084a1
 8108430:	081084a1 	.word	0x081084a1
 8108434:	081084a1 	.word	0x081084a1
 8108438:	081084a1 	.word	0x081084a1
 810843c:	081084a1 	.word	0x081084a1
 8108440:	081084a1 	.word	0x081084a1
 8108444:	2b6e      	cmp	r3, #110	; 0x6e
 8108446:	d809      	bhi.n	810845c <_scanf_float+0x134>
 8108448:	2b60      	cmp	r3, #96	; 0x60
 810844a:	d8b2      	bhi.n	81083b2 <_scanf_float+0x8a>
 810844c:	2b54      	cmp	r3, #84	; 0x54
 810844e:	d077      	beq.n	8108540 <_scanf_float+0x218>
 8108450:	2b59      	cmp	r3, #89	; 0x59
 8108452:	d199      	bne.n	8108388 <_scanf_float+0x60>
 8108454:	2d07      	cmp	r5, #7
 8108456:	d197      	bne.n	8108388 <_scanf_float+0x60>
 8108458:	2508      	movs	r5, #8
 810845a:	e029      	b.n	81084b0 <_scanf_float+0x188>
 810845c:	2b74      	cmp	r3, #116	; 0x74
 810845e:	d06f      	beq.n	8108540 <_scanf_float+0x218>
 8108460:	2b79      	cmp	r3, #121	; 0x79
 8108462:	e7f6      	b.n	8108452 <_scanf_float+0x12a>
 8108464:	6821      	ldr	r1, [r4, #0]
 8108466:	05c8      	lsls	r0, r1, #23
 8108468:	d51a      	bpl.n	81084a0 <_scanf_float+0x178>
 810846a:	9b02      	ldr	r3, [sp, #8]
 810846c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8108470:	6021      	str	r1, [r4, #0]
 8108472:	f109 0901 	add.w	r9, r9, #1
 8108476:	b11b      	cbz	r3, 8108480 <_scanf_float+0x158>
 8108478:	3b01      	subs	r3, #1
 810847a:	3201      	adds	r2, #1
 810847c:	9302      	str	r3, [sp, #8]
 810847e:	60a2      	str	r2, [r4, #8]
 8108480:	68a3      	ldr	r3, [r4, #8]
 8108482:	3b01      	subs	r3, #1
 8108484:	60a3      	str	r3, [r4, #8]
 8108486:	6923      	ldr	r3, [r4, #16]
 8108488:	3301      	adds	r3, #1
 810848a:	6123      	str	r3, [r4, #16]
 810848c:	687b      	ldr	r3, [r7, #4]
 810848e:	3b01      	subs	r3, #1
 8108490:	2b00      	cmp	r3, #0
 8108492:	607b      	str	r3, [r7, #4]
 8108494:	f340 8084 	ble.w	81085a0 <_scanf_float+0x278>
 8108498:	683b      	ldr	r3, [r7, #0]
 810849a:	3301      	adds	r3, #1
 810849c:	603b      	str	r3, [r7, #0]
 810849e:	e766      	b.n	810836e <_scanf_float+0x46>
 81084a0:	eb1a 0f05 	cmn.w	sl, r5
 81084a4:	f47f af70 	bne.w	8108388 <_scanf_float+0x60>
 81084a8:	6822      	ldr	r2, [r4, #0]
 81084aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 81084ae:	6022      	str	r2, [r4, #0]
 81084b0:	f806 3b01 	strb.w	r3, [r6], #1
 81084b4:	e7e4      	b.n	8108480 <_scanf_float+0x158>
 81084b6:	6822      	ldr	r2, [r4, #0]
 81084b8:	0610      	lsls	r0, r2, #24
 81084ba:	f57f af65 	bpl.w	8108388 <_scanf_float+0x60>
 81084be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81084c2:	e7f4      	b.n	81084ae <_scanf_float+0x186>
 81084c4:	f1ba 0f00 	cmp.w	sl, #0
 81084c8:	d10e      	bne.n	81084e8 <_scanf_float+0x1c0>
 81084ca:	f1b9 0f00 	cmp.w	r9, #0
 81084ce:	d10e      	bne.n	81084ee <_scanf_float+0x1c6>
 81084d0:	6822      	ldr	r2, [r4, #0]
 81084d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81084d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81084da:	d108      	bne.n	81084ee <_scanf_float+0x1c6>
 81084dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81084e0:	6022      	str	r2, [r4, #0]
 81084e2:	f04f 0a01 	mov.w	sl, #1
 81084e6:	e7e3      	b.n	81084b0 <_scanf_float+0x188>
 81084e8:	f1ba 0f02 	cmp.w	sl, #2
 81084ec:	d055      	beq.n	810859a <_scanf_float+0x272>
 81084ee:	2d01      	cmp	r5, #1
 81084f0:	d002      	beq.n	81084f8 <_scanf_float+0x1d0>
 81084f2:	2d04      	cmp	r5, #4
 81084f4:	f47f af48 	bne.w	8108388 <_scanf_float+0x60>
 81084f8:	3501      	adds	r5, #1
 81084fa:	b2ed      	uxtb	r5, r5
 81084fc:	e7d8      	b.n	81084b0 <_scanf_float+0x188>
 81084fe:	f1ba 0f01 	cmp.w	sl, #1
 8108502:	f47f af41 	bne.w	8108388 <_scanf_float+0x60>
 8108506:	f04f 0a02 	mov.w	sl, #2
 810850a:	e7d1      	b.n	81084b0 <_scanf_float+0x188>
 810850c:	b97d      	cbnz	r5, 810852e <_scanf_float+0x206>
 810850e:	f1b9 0f00 	cmp.w	r9, #0
 8108512:	f47f af3c 	bne.w	810838e <_scanf_float+0x66>
 8108516:	6822      	ldr	r2, [r4, #0]
 8108518:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810851c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108520:	f47f af39 	bne.w	8108396 <_scanf_float+0x6e>
 8108524:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108528:	6022      	str	r2, [r4, #0]
 810852a:	2501      	movs	r5, #1
 810852c:	e7c0      	b.n	81084b0 <_scanf_float+0x188>
 810852e:	2d03      	cmp	r5, #3
 8108530:	d0e2      	beq.n	81084f8 <_scanf_float+0x1d0>
 8108532:	2d05      	cmp	r5, #5
 8108534:	e7de      	b.n	81084f4 <_scanf_float+0x1cc>
 8108536:	2d02      	cmp	r5, #2
 8108538:	f47f af26 	bne.w	8108388 <_scanf_float+0x60>
 810853c:	2503      	movs	r5, #3
 810853e:	e7b7      	b.n	81084b0 <_scanf_float+0x188>
 8108540:	2d06      	cmp	r5, #6
 8108542:	f47f af21 	bne.w	8108388 <_scanf_float+0x60>
 8108546:	2507      	movs	r5, #7
 8108548:	e7b2      	b.n	81084b0 <_scanf_float+0x188>
 810854a:	6822      	ldr	r2, [r4, #0]
 810854c:	0591      	lsls	r1, r2, #22
 810854e:	f57f af1b 	bpl.w	8108388 <_scanf_float+0x60>
 8108552:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8108556:	6022      	str	r2, [r4, #0]
 8108558:	f8cd 9004 	str.w	r9, [sp, #4]
 810855c:	e7a8      	b.n	81084b0 <_scanf_float+0x188>
 810855e:	6822      	ldr	r2, [r4, #0]
 8108560:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8108564:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8108568:	d006      	beq.n	8108578 <_scanf_float+0x250>
 810856a:	0550      	lsls	r0, r2, #21
 810856c:	f57f af0c 	bpl.w	8108388 <_scanf_float+0x60>
 8108570:	f1b9 0f00 	cmp.w	r9, #0
 8108574:	f43f af0f 	beq.w	8108396 <_scanf_float+0x6e>
 8108578:	0591      	lsls	r1, r2, #22
 810857a:	bf58      	it	pl
 810857c:	9901      	ldrpl	r1, [sp, #4]
 810857e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108582:	bf58      	it	pl
 8108584:	eba9 0101 	subpl.w	r1, r9, r1
 8108588:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810858c:	bf58      	it	pl
 810858e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8108592:	6022      	str	r2, [r4, #0]
 8108594:	f04f 0900 	mov.w	r9, #0
 8108598:	e78a      	b.n	81084b0 <_scanf_float+0x188>
 810859a:	f04f 0a03 	mov.w	sl, #3
 810859e:	e787      	b.n	81084b0 <_scanf_float+0x188>
 81085a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 81085a4:	4639      	mov	r1, r7
 81085a6:	4640      	mov	r0, r8
 81085a8:	4798      	blx	r3
 81085aa:	2800      	cmp	r0, #0
 81085ac:	f43f aedf 	beq.w	810836e <_scanf_float+0x46>
 81085b0:	e6ea      	b.n	8108388 <_scanf_float+0x60>
 81085b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81085b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81085ba:	463a      	mov	r2, r7
 81085bc:	4640      	mov	r0, r8
 81085be:	4798      	blx	r3
 81085c0:	6923      	ldr	r3, [r4, #16]
 81085c2:	3b01      	subs	r3, #1
 81085c4:	6123      	str	r3, [r4, #16]
 81085c6:	e6ec      	b.n	81083a2 <_scanf_float+0x7a>
 81085c8:	1e6b      	subs	r3, r5, #1
 81085ca:	2b06      	cmp	r3, #6
 81085cc:	d825      	bhi.n	810861a <_scanf_float+0x2f2>
 81085ce:	2d02      	cmp	r5, #2
 81085d0:	d836      	bhi.n	8108640 <_scanf_float+0x318>
 81085d2:	455e      	cmp	r6, fp
 81085d4:	f67f aee8 	bls.w	81083a8 <_scanf_float+0x80>
 81085d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81085dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81085e0:	463a      	mov	r2, r7
 81085e2:	4640      	mov	r0, r8
 81085e4:	4798      	blx	r3
 81085e6:	6923      	ldr	r3, [r4, #16]
 81085e8:	3b01      	subs	r3, #1
 81085ea:	6123      	str	r3, [r4, #16]
 81085ec:	e7f1      	b.n	81085d2 <_scanf_float+0x2aa>
 81085ee:	9802      	ldr	r0, [sp, #8]
 81085f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81085f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 81085f8:	9002      	str	r0, [sp, #8]
 81085fa:	463a      	mov	r2, r7
 81085fc:	4640      	mov	r0, r8
 81085fe:	4798      	blx	r3
 8108600:	6923      	ldr	r3, [r4, #16]
 8108602:	3b01      	subs	r3, #1
 8108604:	6123      	str	r3, [r4, #16]
 8108606:	f10a 3aff 	add.w	sl, sl, #4294967295
 810860a:	fa5f fa8a 	uxtb.w	sl, sl
 810860e:	f1ba 0f02 	cmp.w	sl, #2
 8108612:	d1ec      	bne.n	81085ee <_scanf_float+0x2c6>
 8108614:	3d03      	subs	r5, #3
 8108616:	b2ed      	uxtb	r5, r5
 8108618:	1b76      	subs	r6, r6, r5
 810861a:	6823      	ldr	r3, [r4, #0]
 810861c:	05da      	lsls	r2, r3, #23
 810861e:	d52f      	bpl.n	8108680 <_scanf_float+0x358>
 8108620:	055b      	lsls	r3, r3, #21
 8108622:	d510      	bpl.n	8108646 <_scanf_float+0x31e>
 8108624:	455e      	cmp	r6, fp
 8108626:	f67f aebf 	bls.w	81083a8 <_scanf_float+0x80>
 810862a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810862e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108632:	463a      	mov	r2, r7
 8108634:	4640      	mov	r0, r8
 8108636:	4798      	blx	r3
 8108638:	6923      	ldr	r3, [r4, #16]
 810863a:	3b01      	subs	r3, #1
 810863c:	6123      	str	r3, [r4, #16]
 810863e:	e7f1      	b.n	8108624 <_scanf_float+0x2fc>
 8108640:	46aa      	mov	sl, r5
 8108642:	9602      	str	r6, [sp, #8]
 8108644:	e7df      	b.n	8108606 <_scanf_float+0x2de>
 8108646:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810864a:	6923      	ldr	r3, [r4, #16]
 810864c:	2965      	cmp	r1, #101	; 0x65
 810864e:	f103 33ff 	add.w	r3, r3, #4294967295
 8108652:	f106 35ff 	add.w	r5, r6, #4294967295
 8108656:	6123      	str	r3, [r4, #16]
 8108658:	d00c      	beq.n	8108674 <_scanf_float+0x34c>
 810865a:	2945      	cmp	r1, #69	; 0x45
 810865c:	d00a      	beq.n	8108674 <_scanf_float+0x34c>
 810865e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108662:	463a      	mov	r2, r7
 8108664:	4640      	mov	r0, r8
 8108666:	4798      	blx	r3
 8108668:	6923      	ldr	r3, [r4, #16]
 810866a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810866e:	3b01      	subs	r3, #1
 8108670:	1eb5      	subs	r5, r6, #2
 8108672:	6123      	str	r3, [r4, #16]
 8108674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108678:	463a      	mov	r2, r7
 810867a:	4640      	mov	r0, r8
 810867c:	4798      	blx	r3
 810867e:	462e      	mov	r6, r5
 8108680:	6825      	ldr	r5, [r4, #0]
 8108682:	f015 0510 	ands.w	r5, r5, #16
 8108686:	d158      	bne.n	810873a <_scanf_float+0x412>
 8108688:	7035      	strb	r5, [r6, #0]
 810868a:	6823      	ldr	r3, [r4, #0]
 810868c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8108690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108694:	d11c      	bne.n	81086d0 <_scanf_float+0x3a8>
 8108696:	9b01      	ldr	r3, [sp, #4]
 8108698:	454b      	cmp	r3, r9
 810869a:	eba3 0209 	sub.w	r2, r3, r9
 810869e:	d124      	bne.n	81086ea <_scanf_float+0x3c2>
 81086a0:	2200      	movs	r2, #0
 81086a2:	4659      	mov	r1, fp
 81086a4:	4640      	mov	r0, r8
 81086a6:	f001 f85d 	bl	8109764 <_strtod_r>
 81086aa:	9b03      	ldr	r3, [sp, #12]
 81086ac:	6821      	ldr	r1, [r4, #0]
 81086ae:	681b      	ldr	r3, [r3, #0]
 81086b0:	f011 0f02 	tst.w	r1, #2
 81086b4:	ec57 6b10 	vmov	r6, r7, d0
 81086b8:	f103 0204 	add.w	r2, r3, #4
 81086bc:	d020      	beq.n	8108700 <_scanf_float+0x3d8>
 81086be:	9903      	ldr	r1, [sp, #12]
 81086c0:	600a      	str	r2, [r1, #0]
 81086c2:	681b      	ldr	r3, [r3, #0]
 81086c4:	e9c3 6700 	strd	r6, r7, [r3]
 81086c8:	68e3      	ldr	r3, [r4, #12]
 81086ca:	3301      	adds	r3, #1
 81086cc:	60e3      	str	r3, [r4, #12]
 81086ce:	e66c      	b.n	81083aa <_scanf_float+0x82>
 81086d0:	9b04      	ldr	r3, [sp, #16]
 81086d2:	2b00      	cmp	r3, #0
 81086d4:	d0e4      	beq.n	81086a0 <_scanf_float+0x378>
 81086d6:	9905      	ldr	r1, [sp, #20]
 81086d8:	230a      	movs	r3, #10
 81086da:	462a      	mov	r2, r5
 81086dc:	3101      	adds	r1, #1
 81086de:	4640      	mov	r0, r8
 81086e0:	f001 f8ca 	bl	8109878 <_strtol_r>
 81086e4:	9b04      	ldr	r3, [sp, #16]
 81086e6:	9e05      	ldr	r6, [sp, #20]
 81086e8:	1ac2      	subs	r2, r0, r3
 81086ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 81086ee:	429e      	cmp	r6, r3
 81086f0:	bf28      	it	cs
 81086f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 81086f6:	4912      	ldr	r1, [pc, #72]	; (8108740 <_scanf_float+0x418>)
 81086f8:	4630      	mov	r0, r6
 81086fa:	f000 f9a7 	bl	8108a4c <siprintf>
 81086fe:	e7cf      	b.n	81086a0 <_scanf_float+0x378>
 8108700:	f011 0f04 	tst.w	r1, #4
 8108704:	9903      	ldr	r1, [sp, #12]
 8108706:	600a      	str	r2, [r1, #0]
 8108708:	d1db      	bne.n	81086c2 <_scanf_float+0x39a>
 810870a:	f8d3 8000 	ldr.w	r8, [r3]
 810870e:	ee10 2a10 	vmov	r2, s0
 8108712:	ee10 0a10 	vmov	r0, s0
 8108716:	463b      	mov	r3, r7
 8108718:	4639      	mov	r1, r7
 810871a:	f7f8 fa8f 	bl	8100c3c <__aeabi_dcmpun>
 810871e:	b128      	cbz	r0, 810872c <_scanf_float+0x404>
 8108720:	4808      	ldr	r0, [pc, #32]	; (8108744 <_scanf_float+0x41c>)
 8108722:	f000 f98d 	bl	8108a40 <nanf>
 8108726:	ed88 0a00 	vstr	s0, [r8]
 810872a:	e7cd      	b.n	81086c8 <_scanf_float+0x3a0>
 810872c:	4630      	mov	r0, r6
 810872e:	4639      	mov	r1, r7
 8108730:	f7f8 fae2 	bl	8100cf8 <__aeabi_d2f>
 8108734:	f8c8 0000 	str.w	r0, [r8]
 8108738:	e7c6      	b.n	81086c8 <_scanf_float+0x3a0>
 810873a:	2500      	movs	r5, #0
 810873c:	e635      	b.n	81083aa <_scanf_float+0x82>
 810873e:	bf00      	nop
 8108740:	0810e6f6 	.word	0x0810e6f6
 8108744:	0810eb2b 	.word	0x0810eb2b

08108748 <iprintf>:
 8108748:	b40f      	push	{r0, r1, r2, r3}
 810874a:	4b0a      	ldr	r3, [pc, #40]	; (8108774 <iprintf+0x2c>)
 810874c:	b513      	push	{r0, r1, r4, lr}
 810874e:	681c      	ldr	r4, [r3, #0]
 8108750:	b124      	cbz	r4, 810875c <iprintf+0x14>
 8108752:	69a3      	ldr	r3, [r4, #24]
 8108754:	b913      	cbnz	r3, 810875c <iprintf+0x14>
 8108756:	4620      	mov	r0, r4
 8108758:	f7fe ffe8 	bl	810772c <__sinit>
 810875c:	ab05      	add	r3, sp, #20
 810875e:	9a04      	ldr	r2, [sp, #16]
 8108760:	68a1      	ldr	r1, [r4, #8]
 8108762:	9301      	str	r3, [sp, #4]
 8108764:	4620      	mov	r0, r4
 8108766:	f003 fa51 	bl	810bc0c <_vfiprintf_r>
 810876a:	b002      	add	sp, #8
 810876c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108770:	b004      	add	sp, #16
 8108772:	4770      	bx	lr
 8108774:	10000064 	.word	0x10000064

08108778 <_puts_r>:
 8108778:	b570      	push	{r4, r5, r6, lr}
 810877a:	460e      	mov	r6, r1
 810877c:	4605      	mov	r5, r0
 810877e:	b118      	cbz	r0, 8108788 <_puts_r+0x10>
 8108780:	6983      	ldr	r3, [r0, #24]
 8108782:	b90b      	cbnz	r3, 8108788 <_puts_r+0x10>
 8108784:	f7fe ffd2 	bl	810772c <__sinit>
 8108788:	69ab      	ldr	r3, [r5, #24]
 810878a:	68ac      	ldr	r4, [r5, #8]
 810878c:	b913      	cbnz	r3, 8108794 <_puts_r+0x1c>
 810878e:	4628      	mov	r0, r5
 8108790:	f7fe ffcc 	bl	810772c <__sinit>
 8108794:	4b2c      	ldr	r3, [pc, #176]	; (8108848 <_puts_r+0xd0>)
 8108796:	429c      	cmp	r4, r3
 8108798:	d120      	bne.n	81087dc <_puts_r+0x64>
 810879a:	686c      	ldr	r4, [r5, #4]
 810879c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810879e:	07db      	lsls	r3, r3, #31
 81087a0:	d405      	bmi.n	81087ae <_puts_r+0x36>
 81087a2:	89a3      	ldrh	r3, [r4, #12]
 81087a4:	0598      	lsls	r0, r3, #22
 81087a6:	d402      	bmi.n	81087ae <_puts_r+0x36>
 81087a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81087aa:	f7ff f89e 	bl	81078ea <__retarget_lock_acquire_recursive>
 81087ae:	89a3      	ldrh	r3, [r4, #12]
 81087b0:	0719      	lsls	r1, r3, #28
 81087b2:	d51d      	bpl.n	81087f0 <_puts_r+0x78>
 81087b4:	6923      	ldr	r3, [r4, #16]
 81087b6:	b1db      	cbz	r3, 81087f0 <_puts_r+0x78>
 81087b8:	3e01      	subs	r6, #1
 81087ba:	68a3      	ldr	r3, [r4, #8]
 81087bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 81087c0:	3b01      	subs	r3, #1
 81087c2:	60a3      	str	r3, [r4, #8]
 81087c4:	bb39      	cbnz	r1, 8108816 <_puts_r+0x9e>
 81087c6:	2b00      	cmp	r3, #0
 81087c8:	da38      	bge.n	810883c <_puts_r+0xc4>
 81087ca:	4622      	mov	r2, r4
 81087cc:	210a      	movs	r1, #10
 81087ce:	4628      	mov	r0, r5
 81087d0:	f001 f854 	bl	810987c <__swbuf_r>
 81087d4:	3001      	adds	r0, #1
 81087d6:	d011      	beq.n	81087fc <_puts_r+0x84>
 81087d8:	250a      	movs	r5, #10
 81087da:	e011      	b.n	8108800 <_puts_r+0x88>
 81087dc:	4b1b      	ldr	r3, [pc, #108]	; (810884c <_puts_r+0xd4>)
 81087de:	429c      	cmp	r4, r3
 81087e0:	d101      	bne.n	81087e6 <_puts_r+0x6e>
 81087e2:	68ac      	ldr	r4, [r5, #8]
 81087e4:	e7da      	b.n	810879c <_puts_r+0x24>
 81087e6:	4b1a      	ldr	r3, [pc, #104]	; (8108850 <_puts_r+0xd8>)
 81087e8:	429c      	cmp	r4, r3
 81087ea:	bf08      	it	eq
 81087ec:	68ec      	ldreq	r4, [r5, #12]
 81087ee:	e7d5      	b.n	810879c <_puts_r+0x24>
 81087f0:	4621      	mov	r1, r4
 81087f2:	4628      	mov	r0, r5
 81087f4:	f001 f8a6 	bl	8109944 <__swsetup_r>
 81087f8:	2800      	cmp	r0, #0
 81087fa:	d0dd      	beq.n	81087b8 <_puts_r+0x40>
 81087fc:	f04f 35ff 	mov.w	r5, #4294967295
 8108800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8108802:	07da      	lsls	r2, r3, #31
 8108804:	d405      	bmi.n	8108812 <_puts_r+0x9a>
 8108806:	89a3      	ldrh	r3, [r4, #12]
 8108808:	059b      	lsls	r3, r3, #22
 810880a:	d402      	bmi.n	8108812 <_puts_r+0x9a>
 810880c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810880e:	f7ff f86d 	bl	81078ec <__retarget_lock_release_recursive>
 8108812:	4628      	mov	r0, r5
 8108814:	bd70      	pop	{r4, r5, r6, pc}
 8108816:	2b00      	cmp	r3, #0
 8108818:	da04      	bge.n	8108824 <_puts_r+0xac>
 810881a:	69a2      	ldr	r2, [r4, #24]
 810881c:	429a      	cmp	r2, r3
 810881e:	dc06      	bgt.n	810882e <_puts_r+0xb6>
 8108820:	290a      	cmp	r1, #10
 8108822:	d004      	beq.n	810882e <_puts_r+0xb6>
 8108824:	6823      	ldr	r3, [r4, #0]
 8108826:	1c5a      	adds	r2, r3, #1
 8108828:	6022      	str	r2, [r4, #0]
 810882a:	7019      	strb	r1, [r3, #0]
 810882c:	e7c5      	b.n	81087ba <_puts_r+0x42>
 810882e:	4622      	mov	r2, r4
 8108830:	4628      	mov	r0, r5
 8108832:	f001 f823 	bl	810987c <__swbuf_r>
 8108836:	3001      	adds	r0, #1
 8108838:	d1bf      	bne.n	81087ba <_puts_r+0x42>
 810883a:	e7df      	b.n	81087fc <_puts_r+0x84>
 810883c:	6823      	ldr	r3, [r4, #0]
 810883e:	250a      	movs	r5, #10
 8108840:	1c5a      	adds	r2, r3, #1
 8108842:	6022      	str	r2, [r4, #0]
 8108844:	701d      	strb	r5, [r3, #0]
 8108846:	e7db      	b.n	8108800 <_puts_r+0x88>
 8108848:	0810e680 	.word	0x0810e680
 810884c:	0810e6a0 	.word	0x0810e6a0
 8108850:	0810e660 	.word	0x0810e660

08108854 <puts>:
 8108854:	4b02      	ldr	r3, [pc, #8]	; (8108860 <puts+0xc>)
 8108856:	4601      	mov	r1, r0
 8108858:	6818      	ldr	r0, [r3, #0]
 810885a:	f7ff bf8d 	b.w	8108778 <_puts_r>
 810885e:	bf00      	nop
 8108860:	10000064 	.word	0x10000064

08108864 <_sbrk_r>:
 8108864:	b538      	push	{r3, r4, r5, lr}
 8108866:	4d06      	ldr	r5, [pc, #24]	; (8108880 <_sbrk_r+0x1c>)
 8108868:	2300      	movs	r3, #0
 810886a:	4604      	mov	r4, r0
 810886c:	4608      	mov	r0, r1
 810886e:	602b      	str	r3, [r5, #0]
 8108870:	f7fa f98e 	bl	8102b90 <_sbrk>
 8108874:	1c43      	adds	r3, r0, #1
 8108876:	d102      	bne.n	810887e <_sbrk_r+0x1a>
 8108878:	682b      	ldr	r3, [r5, #0]
 810887a:	b103      	cbz	r3, 810887e <_sbrk_r+0x1a>
 810887c:	6023      	str	r3, [r4, #0]
 810887e:	bd38      	pop	{r3, r4, r5, pc}
 8108880:	10000504 	.word	0x10000504

08108884 <iscanf>:
 8108884:	b40f      	push	{r0, r1, r2, r3}
 8108886:	4b0a      	ldr	r3, [pc, #40]	; (81088b0 <iscanf+0x2c>)
 8108888:	b513      	push	{r0, r1, r4, lr}
 810888a:	681c      	ldr	r4, [r3, #0]
 810888c:	b124      	cbz	r4, 8108898 <iscanf+0x14>
 810888e:	69a3      	ldr	r3, [r4, #24]
 8108890:	b913      	cbnz	r3, 8108898 <iscanf+0x14>
 8108892:	4620      	mov	r0, r4
 8108894:	f7fe ff4a 	bl	810772c <__sinit>
 8108898:	ab05      	add	r3, sp, #20
 810889a:	9a04      	ldr	r2, [sp, #16]
 810889c:	6861      	ldr	r1, [r4, #4]
 810889e:	9301      	str	r3, [sp, #4]
 81088a0:	4620      	mov	r0, r4
 81088a2:	f003 fc87 	bl	810c1b4 <_vfiscanf_r>
 81088a6:	b002      	add	sp, #8
 81088a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81088ac:	b004      	add	sp, #16
 81088ae:	4770      	bx	lr
 81088b0:	10000064 	.word	0x10000064

081088b4 <setvbuf>:
 81088b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81088b8:	461d      	mov	r5, r3
 81088ba:	4b5d      	ldr	r3, [pc, #372]	; (8108a30 <setvbuf+0x17c>)
 81088bc:	681f      	ldr	r7, [r3, #0]
 81088be:	4604      	mov	r4, r0
 81088c0:	460e      	mov	r6, r1
 81088c2:	4690      	mov	r8, r2
 81088c4:	b127      	cbz	r7, 81088d0 <setvbuf+0x1c>
 81088c6:	69bb      	ldr	r3, [r7, #24]
 81088c8:	b913      	cbnz	r3, 81088d0 <setvbuf+0x1c>
 81088ca:	4638      	mov	r0, r7
 81088cc:	f7fe ff2e 	bl	810772c <__sinit>
 81088d0:	4b58      	ldr	r3, [pc, #352]	; (8108a34 <setvbuf+0x180>)
 81088d2:	429c      	cmp	r4, r3
 81088d4:	d167      	bne.n	81089a6 <setvbuf+0xf2>
 81088d6:	687c      	ldr	r4, [r7, #4]
 81088d8:	f1b8 0f02 	cmp.w	r8, #2
 81088dc:	d006      	beq.n	81088ec <setvbuf+0x38>
 81088de:	f1b8 0f01 	cmp.w	r8, #1
 81088e2:	f200 809f 	bhi.w	8108a24 <setvbuf+0x170>
 81088e6:	2d00      	cmp	r5, #0
 81088e8:	f2c0 809c 	blt.w	8108a24 <setvbuf+0x170>
 81088ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81088ee:	07db      	lsls	r3, r3, #31
 81088f0:	d405      	bmi.n	81088fe <setvbuf+0x4a>
 81088f2:	89a3      	ldrh	r3, [r4, #12]
 81088f4:	0598      	lsls	r0, r3, #22
 81088f6:	d402      	bmi.n	81088fe <setvbuf+0x4a>
 81088f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81088fa:	f7fe fff6 	bl	81078ea <__retarget_lock_acquire_recursive>
 81088fe:	4621      	mov	r1, r4
 8108900:	4638      	mov	r0, r7
 8108902:	f7fe fe6d 	bl	81075e0 <_fflush_r>
 8108906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108908:	b141      	cbz	r1, 810891c <setvbuf+0x68>
 810890a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810890e:	4299      	cmp	r1, r3
 8108910:	d002      	beq.n	8108918 <setvbuf+0x64>
 8108912:	4638      	mov	r0, r7
 8108914:	f7fe fff4 	bl	8107900 <_free_r>
 8108918:	2300      	movs	r3, #0
 810891a:	6363      	str	r3, [r4, #52]	; 0x34
 810891c:	2300      	movs	r3, #0
 810891e:	61a3      	str	r3, [r4, #24]
 8108920:	6063      	str	r3, [r4, #4]
 8108922:	89a3      	ldrh	r3, [r4, #12]
 8108924:	0619      	lsls	r1, r3, #24
 8108926:	d503      	bpl.n	8108930 <setvbuf+0x7c>
 8108928:	6921      	ldr	r1, [r4, #16]
 810892a:	4638      	mov	r0, r7
 810892c:	f7fe ffe8 	bl	8107900 <_free_r>
 8108930:	89a3      	ldrh	r3, [r4, #12]
 8108932:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8108936:	f023 0303 	bic.w	r3, r3, #3
 810893a:	f1b8 0f02 	cmp.w	r8, #2
 810893e:	81a3      	strh	r3, [r4, #12]
 8108940:	d06c      	beq.n	8108a1c <setvbuf+0x168>
 8108942:	ab01      	add	r3, sp, #4
 8108944:	466a      	mov	r2, sp
 8108946:	4621      	mov	r1, r4
 8108948:	4638      	mov	r0, r7
 810894a:	f002 fa77 	bl	810ae3c <__swhatbuf_r>
 810894e:	89a3      	ldrh	r3, [r4, #12]
 8108950:	4318      	orrs	r0, r3
 8108952:	81a0      	strh	r0, [r4, #12]
 8108954:	2d00      	cmp	r5, #0
 8108956:	d130      	bne.n	81089ba <setvbuf+0x106>
 8108958:	9d00      	ldr	r5, [sp, #0]
 810895a:	4628      	mov	r0, r5
 810895c:	f002 fad2 	bl	810af04 <malloc>
 8108960:	4606      	mov	r6, r0
 8108962:	2800      	cmp	r0, #0
 8108964:	d155      	bne.n	8108a12 <setvbuf+0x15e>
 8108966:	f8dd 9000 	ldr.w	r9, [sp]
 810896a:	45a9      	cmp	r9, r5
 810896c:	d14a      	bne.n	8108a04 <setvbuf+0x150>
 810896e:	f04f 35ff 	mov.w	r5, #4294967295
 8108972:	2200      	movs	r2, #0
 8108974:	60a2      	str	r2, [r4, #8]
 8108976:	f104 0247 	add.w	r2, r4, #71	; 0x47
 810897a:	6022      	str	r2, [r4, #0]
 810897c:	6122      	str	r2, [r4, #16]
 810897e:	2201      	movs	r2, #1
 8108980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108984:	6162      	str	r2, [r4, #20]
 8108986:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8108988:	f043 0302 	orr.w	r3, r3, #2
 810898c:	07d2      	lsls	r2, r2, #31
 810898e:	81a3      	strh	r3, [r4, #12]
 8108990:	d405      	bmi.n	810899e <setvbuf+0xea>
 8108992:	f413 7f00 	tst.w	r3, #512	; 0x200
 8108996:	d102      	bne.n	810899e <setvbuf+0xea>
 8108998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810899a:	f7fe ffa7 	bl	81078ec <__retarget_lock_release_recursive>
 810899e:	4628      	mov	r0, r5
 81089a0:	b003      	add	sp, #12
 81089a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81089a6:	4b24      	ldr	r3, [pc, #144]	; (8108a38 <setvbuf+0x184>)
 81089a8:	429c      	cmp	r4, r3
 81089aa:	d101      	bne.n	81089b0 <setvbuf+0xfc>
 81089ac:	68bc      	ldr	r4, [r7, #8]
 81089ae:	e793      	b.n	81088d8 <setvbuf+0x24>
 81089b0:	4b22      	ldr	r3, [pc, #136]	; (8108a3c <setvbuf+0x188>)
 81089b2:	429c      	cmp	r4, r3
 81089b4:	bf08      	it	eq
 81089b6:	68fc      	ldreq	r4, [r7, #12]
 81089b8:	e78e      	b.n	81088d8 <setvbuf+0x24>
 81089ba:	2e00      	cmp	r6, #0
 81089bc:	d0cd      	beq.n	810895a <setvbuf+0xa6>
 81089be:	69bb      	ldr	r3, [r7, #24]
 81089c0:	b913      	cbnz	r3, 81089c8 <setvbuf+0x114>
 81089c2:	4638      	mov	r0, r7
 81089c4:	f7fe feb2 	bl	810772c <__sinit>
 81089c8:	f1b8 0f01 	cmp.w	r8, #1
 81089cc:	bf08      	it	eq
 81089ce:	89a3      	ldrheq	r3, [r4, #12]
 81089d0:	6026      	str	r6, [r4, #0]
 81089d2:	bf04      	itt	eq
 81089d4:	f043 0301 	orreq.w	r3, r3, #1
 81089d8:	81a3      	strheq	r3, [r4, #12]
 81089da:	89a2      	ldrh	r2, [r4, #12]
 81089dc:	f012 0308 	ands.w	r3, r2, #8
 81089e0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 81089e4:	d01c      	beq.n	8108a20 <setvbuf+0x16c>
 81089e6:	07d3      	lsls	r3, r2, #31
 81089e8:	bf41      	itttt	mi
 81089ea:	2300      	movmi	r3, #0
 81089ec:	426d      	negmi	r5, r5
 81089ee:	60a3      	strmi	r3, [r4, #8]
 81089f0:	61a5      	strmi	r5, [r4, #24]
 81089f2:	bf58      	it	pl
 81089f4:	60a5      	strpl	r5, [r4, #8]
 81089f6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 81089f8:	f015 0501 	ands.w	r5, r5, #1
 81089fc:	d115      	bne.n	8108a2a <setvbuf+0x176>
 81089fe:	f412 7f00 	tst.w	r2, #512	; 0x200
 8108a02:	e7c8      	b.n	8108996 <setvbuf+0xe2>
 8108a04:	4648      	mov	r0, r9
 8108a06:	f002 fa7d 	bl	810af04 <malloc>
 8108a0a:	4606      	mov	r6, r0
 8108a0c:	2800      	cmp	r0, #0
 8108a0e:	d0ae      	beq.n	810896e <setvbuf+0xba>
 8108a10:	464d      	mov	r5, r9
 8108a12:	89a3      	ldrh	r3, [r4, #12]
 8108a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8108a18:	81a3      	strh	r3, [r4, #12]
 8108a1a:	e7d0      	b.n	81089be <setvbuf+0x10a>
 8108a1c:	2500      	movs	r5, #0
 8108a1e:	e7a8      	b.n	8108972 <setvbuf+0xbe>
 8108a20:	60a3      	str	r3, [r4, #8]
 8108a22:	e7e8      	b.n	81089f6 <setvbuf+0x142>
 8108a24:	f04f 35ff 	mov.w	r5, #4294967295
 8108a28:	e7b9      	b.n	810899e <setvbuf+0xea>
 8108a2a:	2500      	movs	r5, #0
 8108a2c:	e7b7      	b.n	810899e <setvbuf+0xea>
 8108a2e:	bf00      	nop
 8108a30:	10000064 	.word	0x10000064
 8108a34:	0810e680 	.word	0x0810e680
 8108a38:	0810e6a0 	.word	0x0810e6a0
 8108a3c:	0810e660 	.word	0x0810e660

08108a40 <nanf>:
 8108a40:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8108a48 <nanf+0x8>
 8108a44:	4770      	bx	lr
 8108a46:	bf00      	nop
 8108a48:	7fc00000 	.word	0x7fc00000

08108a4c <siprintf>:
 8108a4c:	b40e      	push	{r1, r2, r3}
 8108a4e:	b500      	push	{lr}
 8108a50:	b09c      	sub	sp, #112	; 0x70
 8108a52:	ab1d      	add	r3, sp, #116	; 0x74
 8108a54:	9002      	str	r0, [sp, #8]
 8108a56:	9006      	str	r0, [sp, #24]
 8108a58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108a5c:	4809      	ldr	r0, [pc, #36]	; (8108a84 <siprintf+0x38>)
 8108a5e:	9107      	str	r1, [sp, #28]
 8108a60:	9104      	str	r1, [sp, #16]
 8108a62:	4909      	ldr	r1, [pc, #36]	; (8108a88 <siprintf+0x3c>)
 8108a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8108a68:	9105      	str	r1, [sp, #20]
 8108a6a:	6800      	ldr	r0, [r0, #0]
 8108a6c:	9301      	str	r3, [sp, #4]
 8108a6e:	a902      	add	r1, sp, #8
 8108a70:	f002 ffa2 	bl	810b9b8 <_svfiprintf_r>
 8108a74:	9b02      	ldr	r3, [sp, #8]
 8108a76:	2200      	movs	r2, #0
 8108a78:	701a      	strb	r2, [r3, #0]
 8108a7a:	b01c      	add	sp, #112	; 0x70
 8108a7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8108a80:	b003      	add	sp, #12
 8108a82:	4770      	bx	lr
 8108a84:	10000064 	.word	0x10000064
 8108a88:	ffff0208 	.word	0xffff0208

08108a8c <__sread>:
 8108a8c:	b510      	push	{r4, lr}
 8108a8e:	460c      	mov	r4, r1
 8108a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108a94:	f003 fd02 	bl	810c49c <_read_r>
 8108a98:	2800      	cmp	r0, #0
 8108a9a:	bfab      	itete	ge
 8108a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8108a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8108aa0:	181b      	addge	r3, r3, r0
 8108aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8108aa6:	bfac      	ite	ge
 8108aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8108aaa:	81a3      	strhlt	r3, [r4, #12]
 8108aac:	bd10      	pop	{r4, pc}

08108aae <__swrite>:
 8108aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108ab2:	461f      	mov	r7, r3
 8108ab4:	898b      	ldrh	r3, [r1, #12]
 8108ab6:	05db      	lsls	r3, r3, #23
 8108ab8:	4605      	mov	r5, r0
 8108aba:	460c      	mov	r4, r1
 8108abc:	4616      	mov	r6, r2
 8108abe:	d505      	bpl.n	8108acc <__swrite+0x1e>
 8108ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108ac4:	2302      	movs	r3, #2
 8108ac6:	2200      	movs	r2, #0
 8108ac8:	f002 f9a6 	bl	810ae18 <_lseek_r>
 8108acc:	89a3      	ldrh	r3, [r4, #12]
 8108ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8108ad6:	81a3      	strh	r3, [r4, #12]
 8108ad8:	4632      	mov	r2, r6
 8108ada:	463b      	mov	r3, r7
 8108adc:	4628      	mov	r0, r5
 8108ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108ae2:	f000 bf1d 	b.w	8109920 <_write_r>

08108ae6 <__sseek>:
 8108ae6:	b510      	push	{r4, lr}
 8108ae8:	460c      	mov	r4, r1
 8108aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108aee:	f002 f993 	bl	810ae18 <_lseek_r>
 8108af2:	1c43      	adds	r3, r0, #1
 8108af4:	89a3      	ldrh	r3, [r4, #12]
 8108af6:	bf15      	itete	ne
 8108af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8108afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8108afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8108b02:	81a3      	strheq	r3, [r4, #12]
 8108b04:	bf18      	it	ne
 8108b06:	81a3      	strhne	r3, [r4, #12]
 8108b08:	bd10      	pop	{r4, pc}

08108b0a <__sclose>:
 8108b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108b0e:	f000 bf87 	b.w	8109a20 <_close_r>

08108b12 <sulp>:
 8108b12:	b570      	push	{r4, r5, r6, lr}
 8108b14:	4604      	mov	r4, r0
 8108b16:	460d      	mov	r5, r1
 8108b18:	ec45 4b10 	vmov	d0, r4, r5
 8108b1c:	4616      	mov	r6, r2
 8108b1e:	f002 fd91 	bl	810b644 <__ulp>
 8108b22:	ec51 0b10 	vmov	r0, r1, d0
 8108b26:	b17e      	cbz	r6, 8108b48 <sulp+0x36>
 8108b28:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8108b2c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108b30:	2b00      	cmp	r3, #0
 8108b32:	dd09      	ble.n	8108b48 <sulp+0x36>
 8108b34:	051b      	lsls	r3, r3, #20
 8108b36:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8108b3a:	2400      	movs	r4, #0
 8108b3c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8108b40:	4622      	mov	r2, r4
 8108b42:	462b      	mov	r3, r5
 8108b44:	f7f7 fde0 	bl	8100708 <__aeabi_dmul>
 8108b48:	bd70      	pop	{r4, r5, r6, pc}
 8108b4a:	0000      	movs	r0, r0
 8108b4c:	0000      	movs	r0, r0
	...

08108b50 <_strtod_l>:
 8108b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108b54:	b0a3      	sub	sp, #140	; 0x8c
 8108b56:	461f      	mov	r7, r3
 8108b58:	2300      	movs	r3, #0
 8108b5a:	931e      	str	r3, [sp, #120]	; 0x78
 8108b5c:	4ba4      	ldr	r3, [pc, #656]	; (8108df0 <_strtod_l+0x2a0>)
 8108b5e:	9219      	str	r2, [sp, #100]	; 0x64
 8108b60:	681b      	ldr	r3, [r3, #0]
 8108b62:	9307      	str	r3, [sp, #28]
 8108b64:	4604      	mov	r4, r0
 8108b66:	4618      	mov	r0, r3
 8108b68:	4688      	mov	r8, r1
 8108b6a:	f7f7 fbb9 	bl	81002e0 <strlen>
 8108b6e:	f04f 0a00 	mov.w	sl, #0
 8108b72:	4605      	mov	r5, r0
 8108b74:	f04f 0b00 	mov.w	fp, #0
 8108b78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108b7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108b7e:	781a      	ldrb	r2, [r3, #0]
 8108b80:	2a2b      	cmp	r2, #43	; 0x2b
 8108b82:	d04c      	beq.n	8108c1e <_strtod_l+0xce>
 8108b84:	d839      	bhi.n	8108bfa <_strtod_l+0xaa>
 8108b86:	2a0d      	cmp	r2, #13
 8108b88:	d832      	bhi.n	8108bf0 <_strtod_l+0xa0>
 8108b8a:	2a08      	cmp	r2, #8
 8108b8c:	d832      	bhi.n	8108bf4 <_strtod_l+0xa4>
 8108b8e:	2a00      	cmp	r2, #0
 8108b90:	d03c      	beq.n	8108c0c <_strtod_l+0xbc>
 8108b92:	2300      	movs	r3, #0
 8108b94:	930e      	str	r3, [sp, #56]	; 0x38
 8108b96:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8108b98:	7833      	ldrb	r3, [r6, #0]
 8108b9a:	2b30      	cmp	r3, #48	; 0x30
 8108b9c:	f040 80b4 	bne.w	8108d08 <_strtod_l+0x1b8>
 8108ba0:	7873      	ldrb	r3, [r6, #1]
 8108ba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8108ba6:	2b58      	cmp	r3, #88	; 0x58
 8108ba8:	d16c      	bne.n	8108c84 <_strtod_l+0x134>
 8108baa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108bac:	9301      	str	r3, [sp, #4]
 8108bae:	ab1e      	add	r3, sp, #120	; 0x78
 8108bb0:	9702      	str	r7, [sp, #8]
 8108bb2:	9300      	str	r3, [sp, #0]
 8108bb4:	4a8f      	ldr	r2, [pc, #572]	; (8108df4 <_strtod_l+0x2a4>)
 8108bb6:	ab1f      	add	r3, sp, #124	; 0x7c
 8108bb8:	a91d      	add	r1, sp, #116	; 0x74
 8108bba:	4620      	mov	r0, r4
 8108bbc:	f001 fe20 	bl	810a800 <__gethex>
 8108bc0:	f010 0707 	ands.w	r7, r0, #7
 8108bc4:	4605      	mov	r5, r0
 8108bc6:	d005      	beq.n	8108bd4 <_strtod_l+0x84>
 8108bc8:	2f06      	cmp	r7, #6
 8108bca:	d12a      	bne.n	8108c22 <_strtod_l+0xd2>
 8108bcc:	3601      	adds	r6, #1
 8108bce:	2300      	movs	r3, #0
 8108bd0:	961d      	str	r6, [sp, #116]	; 0x74
 8108bd2:	930e      	str	r3, [sp, #56]	; 0x38
 8108bd4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8108bd6:	2b00      	cmp	r3, #0
 8108bd8:	f040 8596 	bne.w	8109708 <_strtod_l+0xbb8>
 8108bdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108bde:	b1db      	cbz	r3, 8108c18 <_strtod_l+0xc8>
 8108be0:	4652      	mov	r2, sl
 8108be2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8108be6:	ec43 2b10 	vmov	d0, r2, r3
 8108bea:	b023      	add	sp, #140	; 0x8c
 8108bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108bf0:	2a20      	cmp	r2, #32
 8108bf2:	d1ce      	bne.n	8108b92 <_strtod_l+0x42>
 8108bf4:	3301      	adds	r3, #1
 8108bf6:	931d      	str	r3, [sp, #116]	; 0x74
 8108bf8:	e7c0      	b.n	8108b7c <_strtod_l+0x2c>
 8108bfa:	2a2d      	cmp	r2, #45	; 0x2d
 8108bfc:	d1c9      	bne.n	8108b92 <_strtod_l+0x42>
 8108bfe:	2201      	movs	r2, #1
 8108c00:	920e      	str	r2, [sp, #56]	; 0x38
 8108c02:	1c5a      	adds	r2, r3, #1
 8108c04:	921d      	str	r2, [sp, #116]	; 0x74
 8108c06:	785b      	ldrb	r3, [r3, #1]
 8108c08:	2b00      	cmp	r3, #0
 8108c0a:	d1c4      	bne.n	8108b96 <_strtod_l+0x46>
 8108c0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8108c0e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108c12:	2b00      	cmp	r3, #0
 8108c14:	f040 8576 	bne.w	8109704 <_strtod_l+0xbb4>
 8108c18:	4652      	mov	r2, sl
 8108c1a:	465b      	mov	r3, fp
 8108c1c:	e7e3      	b.n	8108be6 <_strtod_l+0x96>
 8108c1e:	2200      	movs	r2, #0
 8108c20:	e7ee      	b.n	8108c00 <_strtod_l+0xb0>
 8108c22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8108c24:	b13a      	cbz	r2, 8108c36 <_strtod_l+0xe6>
 8108c26:	2135      	movs	r1, #53	; 0x35
 8108c28:	a820      	add	r0, sp, #128	; 0x80
 8108c2a:	f002 fe16 	bl	810b85a <__copybits>
 8108c2e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108c30:	4620      	mov	r0, r4
 8108c32:	f002 f9db 	bl	810afec <_Bfree>
 8108c36:	3f01      	subs	r7, #1
 8108c38:	2f05      	cmp	r7, #5
 8108c3a:	d807      	bhi.n	8108c4c <_strtod_l+0xfc>
 8108c3c:	e8df f007 	tbb	[pc, r7]
 8108c40:	1d180b0e 	.word	0x1d180b0e
 8108c44:	030e      	.short	0x030e
 8108c46:	f04f 0b00 	mov.w	fp, #0
 8108c4a:	46da      	mov	sl, fp
 8108c4c:	0728      	lsls	r0, r5, #28
 8108c4e:	d5c1      	bpl.n	8108bd4 <_strtod_l+0x84>
 8108c50:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8108c54:	e7be      	b.n	8108bd4 <_strtod_l+0x84>
 8108c56:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8108c5a:	e7f7      	b.n	8108c4c <_strtod_l+0xfc>
 8108c5c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8108c60:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8108c62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8108c66:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8108c6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8108c6e:	e7ed      	b.n	8108c4c <_strtod_l+0xfc>
 8108c70:	f8df b184 	ldr.w	fp, [pc, #388]	; 8108df8 <_strtod_l+0x2a8>
 8108c74:	f04f 0a00 	mov.w	sl, #0
 8108c78:	e7e8      	b.n	8108c4c <_strtod_l+0xfc>
 8108c7a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8108c7e:	f04f 3aff 	mov.w	sl, #4294967295
 8108c82:	e7e3      	b.n	8108c4c <_strtod_l+0xfc>
 8108c84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108c86:	1c5a      	adds	r2, r3, #1
 8108c88:	921d      	str	r2, [sp, #116]	; 0x74
 8108c8a:	785b      	ldrb	r3, [r3, #1]
 8108c8c:	2b30      	cmp	r3, #48	; 0x30
 8108c8e:	d0f9      	beq.n	8108c84 <_strtod_l+0x134>
 8108c90:	2b00      	cmp	r3, #0
 8108c92:	d09f      	beq.n	8108bd4 <_strtod_l+0x84>
 8108c94:	2301      	movs	r3, #1
 8108c96:	f04f 0900 	mov.w	r9, #0
 8108c9a:	9304      	str	r3, [sp, #16]
 8108c9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108c9e:	930a      	str	r3, [sp, #40]	; 0x28
 8108ca0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8108ca4:	464f      	mov	r7, r9
 8108ca6:	220a      	movs	r2, #10
 8108ca8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8108caa:	7806      	ldrb	r6, [r0, #0]
 8108cac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8108cb0:	b2d9      	uxtb	r1, r3
 8108cb2:	2909      	cmp	r1, #9
 8108cb4:	d92a      	bls.n	8108d0c <_strtod_l+0x1bc>
 8108cb6:	9907      	ldr	r1, [sp, #28]
 8108cb8:	462a      	mov	r2, r5
 8108cba:	f003 fcd7 	bl	810c66c <strncmp>
 8108cbe:	b398      	cbz	r0, 8108d28 <_strtod_l+0x1d8>
 8108cc0:	2000      	movs	r0, #0
 8108cc2:	4633      	mov	r3, r6
 8108cc4:	463d      	mov	r5, r7
 8108cc6:	9007      	str	r0, [sp, #28]
 8108cc8:	4602      	mov	r2, r0
 8108cca:	2b65      	cmp	r3, #101	; 0x65
 8108ccc:	d001      	beq.n	8108cd2 <_strtod_l+0x182>
 8108cce:	2b45      	cmp	r3, #69	; 0x45
 8108cd0:	d118      	bne.n	8108d04 <_strtod_l+0x1b4>
 8108cd2:	b91d      	cbnz	r5, 8108cdc <_strtod_l+0x18c>
 8108cd4:	9b04      	ldr	r3, [sp, #16]
 8108cd6:	4303      	orrs	r3, r0
 8108cd8:	d098      	beq.n	8108c0c <_strtod_l+0xbc>
 8108cda:	2500      	movs	r5, #0
 8108cdc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8108ce0:	f108 0301 	add.w	r3, r8, #1
 8108ce4:	931d      	str	r3, [sp, #116]	; 0x74
 8108ce6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8108cea:	2b2b      	cmp	r3, #43	; 0x2b
 8108cec:	d075      	beq.n	8108dda <_strtod_l+0x28a>
 8108cee:	2b2d      	cmp	r3, #45	; 0x2d
 8108cf0:	d07b      	beq.n	8108dea <_strtod_l+0x29a>
 8108cf2:	f04f 0c00 	mov.w	ip, #0
 8108cf6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8108cfa:	2909      	cmp	r1, #9
 8108cfc:	f240 8082 	bls.w	8108e04 <_strtod_l+0x2b4>
 8108d00:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108d04:	2600      	movs	r6, #0
 8108d06:	e09d      	b.n	8108e44 <_strtod_l+0x2f4>
 8108d08:	2300      	movs	r3, #0
 8108d0a:	e7c4      	b.n	8108c96 <_strtod_l+0x146>
 8108d0c:	2f08      	cmp	r7, #8
 8108d0e:	bfd8      	it	le
 8108d10:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8108d12:	f100 0001 	add.w	r0, r0, #1
 8108d16:	bfda      	itte	le
 8108d18:	fb02 3301 	mlale	r3, r2, r1, r3
 8108d1c:	9309      	strle	r3, [sp, #36]	; 0x24
 8108d1e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8108d22:	3701      	adds	r7, #1
 8108d24:	901d      	str	r0, [sp, #116]	; 0x74
 8108d26:	e7bf      	b.n	8108ca8 <_strtod_l+0x158>
 8108d28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108d2a:	195a      	adds	r2, r3, r5
 8108d2c:	921d      	str	r2, [sp, #116]	; 0x74
 8108d2e:	5d5b      	ldrb	r3, [r3, r5]
 8108d30:	2f00      	cmp	r7, #0
 8108d32:	d037      	beq.n	8108da4 <_strtod_l+0x254>
 8108d34:	9007      	str	r0, [sp, #28]
 8108d36:	463d      	mov	r5, r7
 8108d38:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8108d3c:	2a09      	cmp	r2, #9
 8108d3e:	d912      	bls.n	8108d66 <_strtod_l+0x216>
 8108d40:	2201      	movs	r2, #1
 8108d42:	e7c2      	b.n	8108cca <_strtod_l+0x17a>
 8108d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108d46:	1c5a      	adds	r2, r3, #1
 8108d48:	921d      	str	r2, [sp, #116]	; 0x74
 8108d4a:	785b      	ldrb	r3, [r3, #1]
 8108d4c:	3001      	adds	r0, #1
 8108d4e:	2b30      	cmp	r3, #48	; 0x30
 8108d50:	d0f8      	beq.n	8108d44 <_strtod_l+0x1f4>
 8108d52:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8108d56:	2a08      	cmp	r2, #8
 8108d58:	f200 84db 	bhi.w	8109712 <_strtod_l+0xbc2>
 8108d5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8108d5e:	9007      	str	r0, [sp, #28]
 8108d60:	2000      	movs	r0, #0
 8108d62:	920a      	str	r2, [sp, #40]	; 0x28
 8108d64:	4605      	mov	r5, r0
 8108d66:	3b30      	subs	r3, #48	; 0x30
 8108d68:	f100 0201 	add.w	r2, r0, #1
 8108d6c:	d014      	beq.n	8108d98 <_strtod_l+0x248>
 8108d6e:	9907      	ldr	r1, [sp, #28]
 8108d70:	4411      	add	r1, r2
 8108d72:	9107      	str	r1, [sp, #28]
 8108d74:	462a      	mov	r2, r5
 8108d76:	eb00 0e05 	add.w	lr, r0, r5
 8108d7a:	210a      	movs	r1, #10
 8108d7c:	4572      	cmp	r2, lr
 8108d7e:	d113      	bne.n	8108da8 <_strtod_l+0x258>
 8108d80:	182a      	adds	r2, r5, r0
 8108d82:	2a08      	cmp	r2, #8
 8108d84:	f105 0501 	add.w	r5, r5, #1
 8108d88:	4405      	add	r5, r0
 8108d8a:	dc1c      	bgt.n	8108dc6 <_strtod_l+0x276>
 8108d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108d8e:	220a      	movs	r2, #10
 8108d90:	fb02 3301 	mla	r3, r2, r1, r3
 8108d94:	9309      	str	r3, [sp, #36]	; 0x24
 8108d96:	2200      	movs	r2, #0
 8108d98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108d9a:	1c59      	adds	r1, r3, #1
 8108d9c:	911d      	str	r1, [sp, #116]	; 0x74
 8108d9e:	785b      	ldrb	r3, [r3, #1]
 8108da0:	4610      	mov	r0, r2
 8108da2:	e7c9      	b.n	8108d38 <_strtod_l+0x1e8>
 8108da4:	4638      	mov	r0, r7
 8108da6:	e7d2      	b.n	8108d4e <_strtod_l+0x1fe>
 8108da8:	2a08      	cmp	r2, #8
 8108daa:	dc04      	bgt.n	8108db6 <_strtod_l+0x266>
 8108dac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8108dae:	434e      	muls	r6, r1
 8108db0:	9609      	str	r6, [sp, #36]	; 0x24
 8108db2:	3201      	adds	r2, #1
 8108db4:	e7e2      	b.n	8108d7c <_strtod_l+0x22c>
 8108db6:	f102 0c01 	add.w	ip, r2, #1
 8108dba:	f1bc 0f10 	cmp.w	ip, #16
 8108dbe:	bfd8      	it	le
 8108dc0:	fb01 f909 	mulle.w	r9, r1, r9
 8108dc4:	e7f5      	b.n	8108db2 <_strtod_l+0x262>
 8108dc6:	2d10      	cmp	r5, #16
 8108dc8:	bfdc      	itt	le
 8108dca:	220a      	movle	r2, #10
 8108dcc:	fb02 3909 	mlale	r9, r2, r9, r3
 8108dd0:	e7e1      	b.n	8108d96 <_strtod_l+0x246>
 8108dd2:	2300      	movs	r3, #0
 8108dd4:	9307      	str	r3, [sp, #28]
 8108dd6:	2201      	movs	r2, #1
 8108dd8:	e77c      	b.n	8108cd4 <_strtod_l+0x184>
 8108dda:	f04f 0c00 	mov.w	ip, #0
 8108dde:	f108 0302 	add.w	r3, r8, #2
 8108de2:	931d      	str	r3, [sp, #116]	; 0x74
 8108de4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8108de8:	e785      	b.n	8108cf6 <_strtod_l+0x1a6>
 8108dea:	f04f 0c01 	mov.w	ip, #1
 8108dee:	e7f6      	b.n	8108dde <_strtod_l+0x28e>
 8108df0:	0810e950 	.word	0x0810e950
 8108df4:	0810e6fc 	.word	0x0810e6fc
 8108df8:	7ff00000 	.word	0x7ff00000
 8108dfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108dfe:	1c59      	adds	r1, r3, #1
 8108e00:	911d      	str	r1, [sp, #116]	; 0x74
 8108e02:	785b      	ldrb	r3, [r3, #1]
 8108e04:	2b30      	cmp	r3, #48	; 0x30
 8108e06:	d0f9      	beq.n	8108dfc <_strtod_l+0x2ac>
 8108e08:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8108e0c:	2908      	cmp	r1, #8
 8108e0e:	f63f af79 	bhi.w	8108d04 <_strtod_l+0x1b4>
 8108e12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8108e16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108e18:	9308      	str	r3, [sp, #32]
 8108e1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108e1c:	1c59      	adds	r1, r3, #1
 8108e1e:	911d      	str	r1, [sp, #116]	; 0x74
 8108e20:	785b      	ldrb	r3, [r3, #1]
 8108e22:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8108e26:	2e09      	cmp	r6, #9
 8108e28:	d937      	bls.n	8108e9a <_strtod_l+0x34a>
 8108e2a:	9e08      	ldr	r6, [sp, #32]
 8108e2c:	1b89      	subs	r1, r1, r6
 8108e2e:	2908      	cmp	r1, #8
 8108e30:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8108e34:	dc02      	bgt.n	8108e3c <_strtod_l+0x2ec>
 8108e36:	4576      	cmp	r6, lr
 8108e38:	bfa8      	it	ge
 8108e3a:	4676      	movge	r6, lr
 8108e3c:	f1bc 0f00 	cmp.w	ip, #0
 8108e40:	d000      	beq.n	8108e44 <_strtod_l+0x2f4>
 8108e42:	4276      	negs	r6, r6
 8108e44:	2d00      	cmp	r5, #0
 8108e46:	d14f      	bne.n	8108ee8 <_strtod_l+0x398>
 8108e48:	9904      	ldr	r1, [sp, #16]
 8108e4a:	4301      	orrs	r1, r0
 8108e4c:	f47f aec2 	bne.w	8108bd4 <_strtod_l+0x84>
 8108e50:	2a00      	cmp	r2, #0
 8108e52:	f47f aedb 	bne.w	8108c0c <_strtod_l+0xbc>
 8108e56:	2b69      	cmp	r3, #105	; 0x69
 8108e58:	d027      	beq.n	8108eaa <_strtod_l+0x35a>
 8108e5a:	dc24      	bgt.n	8108ea6 <_strtod_l+0x356>
 8108e5c:	2b49      	cmp	r3, #73	; 0x49
 8108e5e:	d024      	beq.n	8108eaa <_strtod_l+0x35a>
 8108e60:	2b4e      	cmp	r3, #78	; 0x4e
 8108e62:	f47f aed3 	bne.w	8108c0c <_strtod_l+0xbc>
 8108e66:	499e      	ldr	r1, [pc, #632]	; (81090e0 <_strtod_l+0x590>)
 8108e68:	a81d      	add	r0, sp, #116	; 0x74
 8108e6a:	f001 ff21 	bl	810acb0 <__match>
 8108e6e:	2800      	cmp	r0, #0
 8108e70:	f43f aecc 	beq.w	8108c0c <_strtod_l+0xbc>
 8108e74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108e76:	781b      	ldrb	r3, [r3, #0]
 8108e78:	2b28      	cmp	r3, #40	; 0x28
 8108e7a:	d12d      	bne.n	8108ed8 <_strtod_l+0x388>
 8108e7c:	4999      	ldr	r1, [pc, #612]	; (81090e4 <_strtod_l+0x594>)
 8108e7e:	aa20      	add	r2, sp, #128	; 0x80
 8108e80:	a81d      	add	r0, sp, #116	; 0x74
 8108e82:	f001 ff29 	bl	810acd8 <__hexnan>
 8108e86:	2805      	cmp	r0, #5
 8108e88:	d126      	bne.n	8108ed8 <_strtod_l+0x388>
 8108e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108e8c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8108e90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8108e94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8108e98:	e69c      	b.n	8108bd4 <_strtod_l+0x84>
 8108e9a:	210a      	movs	r1, #10
 8108e9c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8108ea0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8108ea4:	e7b9      	b.n	8108e1a <_strtod_l+0x2ca>
 8108ea6:	2b6e      	cmp	r3, #110	; 0x6e
 8108ea8:	e7db      	b.n	8108e62 <_strtod_l+0x312>
 8108eaa:	498f      	ldr	r1, [pc, #572]	; (81090e8 <_strtod_l+0x598>)
 8108eac:	a81d      	add	r0, sp, #116	; 0x74
 8108eae:	f001 feff 	bl	810acb0 <__match>
 8108eb2:	2800      	cmp	r0, #0
 8108eb4:	f43f aeaa 	beq.w	8108c0c <_strtod_l+0xbc>
 8108eb8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108eba:	498c      	ldr	r1, [pc, #560]	; (81090ec <_strtod_l+0x59c>)
 8108ebc:	3b01      	subs	r3, #1
 8108ebe:	a81d      	add	r0, sp, #116	; 0x74
 8108ec0:	931d      	str	r3, [sp, #116]	; 0x74
 8108ec2:	f001 fef5 	bl	810acb0 <__match>
 8108ec6:	b910      	cbnz	r0, 8108ece <_strtod_l+0x37e>
 8108ec8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108eca:	3301      	adds	r3, #1
 8108ecc:	931d      	str	r3, [sp, #116]	; 0x74
 8108ece:	f8df b22c 	ldr.w	fp, [pc, #556]	; 81090fc <_strtod_l+0x5ac>
 8108ed2:	f04f 0a00 	mov.w	sl, #0
 8108ed6:	e67d      	b.n	8108bd4 <_strtod_l+0x84>
 8108ed8:	4885      	ldr	r0, [pc, #532]	; (81090f0 <_strtod_l+0x5a0>)
 8108eda:	f003 fb85 	bl	810c5e8 <nan>
 8108ede:	ed8d 0b04 	vstr	d0, [sp, #16]
 8108ee2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8108ee6:	e675      	b.n	8108bd4 <_strtod_l+0x84>
 8108ee8:	9b07      	ldr	r3, [sp, #28]
 8108eea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8108eec:	1af3      	subs	r3, r6, r3
 8108eee:	2f00      	cmp	r7, #0
 8108ef0:	bf08      	it	eq
 8108ef2:	462f      	moveq	r7, r5
 8108ef4:	2d10      	cmp	r5, #16
 8108ef6:	9308      	str	r3, [sp, #32]
 8108ef8:	46a8      	mov	r8, r5
 8108efa:	bfa8      	it	ge
 8108efc:	f04f 0810 	movge.w	r8, #16
 8108f00:	f7f7 fb88 	bl	8100614 <__aeabi_ui2d>
 8108f04:	2d09      	cmp	r5, #9
 8108f06:	4682      	mov	sl, r0
 8108f08:	468b      	mov	fp, r1
 8108f0a:	dd13      	ble.n	8108f34 <_strtod_l+0x3e4>
 8108f0c:	4b79      	ldr	r3, [pc, #484]	; (81090f4 <_strtod_l+0x5a4>)
 8108f0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8108f12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8108f16:	f7f7 fbf7 	bl	8100708 <__aeabi_dmul>
 8108f1a:	4682      	mov	sl, r0
 8108f1c:	4648      	mov	r0, r9
 8108f1e:	468b      	mov	fp, r1
 8108f20:	f7f7 fb78 	bl	8100614 <__aeabi_ui2d>
 8108f24:	4602      	mov	r2, r0
 8108f26:	460b      	mov	r3, r1
 8108f28:	4650      	mov	r0, sl
 8108f2a:	4659      	mov	r1, fp
 8108f2c:	f7f7 fa36 	bl	810039c <__adddf3>
 8108f30:	4682      	mov	sl, r0
 8108f32:	468b      	mov	fp, r1
 8108f34:	2d0f      	cmp	r5, #15
 8108f36:	dc38      	bgt.n	8108faa <_strtod_l+0x45a>
 8108f38:	9b08      	ldr	r3, [sp, #32]
 8108f3a:	2b00      	cmp	r3, #0
 8108f3c:	f43f ae4a 	beq.w	8108bd4 <_strtod_l+0x84>
 8108f40:	dd24      	ble.n	8108f8c <_strtod_l+0x43c>
 8108f42:	2b16      	cmp	r3, #22
 8108f44:	dc0b      	bgt.n	8108f5e <_strtod_l+0x40e>
 8108f46:	4d6b      	ldr	r5, [pc, #428]	; (81090f4 <_strtod_l+0x5a4>)
 8108f48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8108f4c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8108f50:	4652      	mov	r2, sl
 8108f52:	465b      	mov	r3, fp
 8108f54:	f7f7 fbd8 	bl	8100708 <__aeabi_dmul>
 8108f58:	4682      	mov	sl, r0
 8108f5a:	468b      	mov	fp, r1
 8108f5c:	e63a      	b.n	8108bd4 <_strtod_l+0x84>
 8108f5e:	9a08      	ldr	r2, [sp, #32]
 8108f60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8108f64:	4293      	cmp	r3, r2
 8108f66:	db20      	blt.n	8108faa <_strtod_l+0x45a>
 8108f68:	4c62      	ldr	r4, [pc, #392]	; (81090f4 <_strtod_l+0x5a4>)
 8108f6a:	f1c5 050f 	rsb	r5, r5, #15
 8108f6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8108f72:	4652      	mov	r2, sl
 8108f74:	465b      	mov	r3, fp
 8108f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108f7a:	f7f7 fbc5 	bl	8100708 <__aeabi_dmul>
 8108f7e:	9b08      	ldr	r3, [sp, #32]
 8108f80:	1b5d      	subs	r5, r3, r5
 8108f82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8108f86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8108f8a:	e7e3      	b.n	8108f54 <_strtod_l+0x404>
 8108f8c:	9b08      	ldr	r3, [sp, #32]
 8108f8e:	3316      	adds	r3, #22
 8108f90:	db0b      	blt.n	8108faa <_strtod_l+0x45a>
 8108f92:	9b07      	ldr	r3, [sp, #28]
 8108f94:	4a57      	ldr	r2, [pc, #348]	; (81090f4 <_strtod_l+0x5a4>)
 8108f96:	1b9e      	subs	r6, r3, r6
 8108f98:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8108f9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108fa0:	4650      	mov	r0, sl
 8108fa2:	4659      	mov	r1, fp
 8108fa4:	f7f7 fcda 	bl	810095c <__aeabi_ddiv>
 8108fa8:	e7d6      	b.n	8108f58 <_strtod_l+0x408>
 8108faa:	9b08      	ldr	r3, [sp, #32]
 8108fac:	eba5 0808 	sub.w	r8, r5, r8
 8108fb0:	4498      	add	r8, r3
 8108fb2:	f1b8 0f00 	cmp.w	r8, #0
 8108fb6:	dd71      	ble.n	810909c <_strtod_l+0x54c>
 8108fb8:	f018 030f 	ands.w	r3, r8, #15
 8108fbc:	d00a      	beq.n	8108fd4 <_strtod_l+0x484>
 8108fbe:	494d      	ldr	r1, [pc, #308]	; (81090f4 <_strtod_l+0x5a4>)
 8108fc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8108fc4:	4652      	mov	r2, sl
 8108fc6:	465b      	mov	r3, fp
 8108fc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108fcc:	f7f7 fb9c 	bl	8100708 <__aeabi_dmul>
 8108fd0:	4682      	mov	sl, r0
 8108fd2:	468b      	mov	fp, r1
 8108fd4:	f038 080f 	bics.w	r8, r8, #15
 8108fd8:	d04d      	beq.n	8109076 <_strtod_l+0x526>
 8108fda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8108fde:	dd22      	ble.n	8109026 <_strtod_l+0x4d6>
 8108fe0:	2500      	movs	r5, #0
 8108fe2:	462e      	mov	r6, r5
 8108fe4:	9509      	str	r5, [sp, #36]	; 0x24
 8108fe6:	9507      	str	r5, [sp, #28]
 8108fe8:	2322      	movs	r3, #34	; 0x22
 8108fea:	f8df b110 	ldr.w	fp, [pc, #272]	; 81090fc <_strtod_l+0x5ac>
 8108fee:	6023      	str	r3, [r4, #0]
 8108ff0:	f04f 0a00 	mov.w	sl, #0
 8108ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108ff6:	2b00      	cmp	r3, #0
 8108ff8:	f43f adec 	beq.w	8108bd4 <_strtod_l+0x84>
 8108ffc:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108ffe:	4620      	mov	r0, r4
 8109000:	f001 fff4 	bl	810afec <_Bfree>
 8109004:	9907      	ldr	r1, [sp, #28]
 8109006:	4620      	mov	r0, r4
 8109008:	f001 fff0 	bl	810afec <_Bfree>
 810900c:	4631      	mov	r1, r6
 810900e:	4620      	mov	r0, r4
 8109010:	f001 ffec 	bl	810afec <_Bfree>
 8109014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109016:	4620      	mov	r0, r4
 8109018:	f001 ffe8 	bl	810afec <_Bfree>
 810901c:	4629      	mov	r1, r5
 810901e:	4620      	mov	r0, r4
 8109020:	f001 ffe4 	bl	810afec <_Bfree>
 8109024:	e5d6      	b.n	8108bd4 <_strtod_l+0x84>
 8109026:	2300      	movs	r3, #0
 8109028:	ea4f 1828 	mov.w	r8, r8, asr #4
 810902c:	4650      	mov	r0, sl
 810902e:	4659      	mov	r1, fp
 8109030:	4699      	mov	r9, r3
 8109032:	f1b8 0f01 	cmp.w	r8, #1
 8109036:	dc21      	bgt.n	810907c <_strtod_l+0x52c>
 8109038:	b10b      	cbz	r3, 810903e <_strtod_l+0x4ee>
 810903a:	4682      	mov	sl, r0
 810903c:	468b      	mov	fp, r1
 810903e:	4b2e      	ldr	r3, [pc, #184]	; (81090f8 <_strtod_l+0x5a8>)
 8109040:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8109044:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8109048:	4652      	mov	r2, sl
 810904a:	465b      	mov	r3, fp
 810904c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8109050:	f7f7 fb5a 	bl	8100708 <__aeabi_dmul>
 8109054:	4b29      	ldr	r3, [pc, #164]	; (81090fc <_strtod_l+0x5ac>)
 8109056:	460a      	mov	r2, r1
 8109058:	400b      	ands	r3, r1
 810905a:	4929      	ldr	r1, [pc, #164]	; (8109100 <_strtod_l+0x5b0>)
 810905c:	428b      	cmp	r3, r1
 810905e:	4682      	mov	sl, r0
 8109060:	d8be      	bhi.n	8108fe0 <_strtod_l+0x490>
 8109062:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8109066:	428b      	cmp	r3, r1
 8109068:	bf86      	itte	hi
 810906a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8109104 <_strtod_l+0x5b4>
 810906e:	f04f 3aff 	movhi.w	sl, #4294967295
 8109072:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8109076:	2300      	movs	r3, #0
 8109078:	9304      	str	r3, [sp, #16]
 810907a:	e081      	b.n	8109180 <_strtod_l+0x630>
 810907c:	f018 0f01 	tst.w	r8, #1
 8109080:	d007      	beq.n	8109092 <_strtod_l+0x542>
 8109082:	4b1d      	ldr	r3, [pc, #116]	; (81090f8 <_strtod_l+0x5a8>)
 8109084:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8109088:	e9d3 2300 	ldrd	r2, r3, [r3]
 810908c:	f7f7 fb3c 	bl	8100708 <__aeabi_dmul>
 8109090:	2301      	movs	r3, #1
 8109092:	f109 0901 	add.w	r9, r9, #1
 8109096:	ea4f 0868 	mov.w	r8, r8, asr #1
 810909a:	e7ca      	b.n	8109032 <_strtod_l+0x4e2>
 810909c:	d0eb      	beq.n	8109076 <_strtod_l+0x526>
 810909e:	f1c8 0800 	rsb	r8, r8, #0
 81090a2:	f018 020f 	ands.w	r2, r8, #15
 81090a6:	d00a      	beq.n	81090be <_strtod_l+0x56e>
 81090a8:	4b12      	ldr	r3, [pc, #72]	; (81090f4 <_strtod_l+0x5a4>)
 81090aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81090ae:	4650      	mov	r0, sl
 81090b0:	4659      	mov	r1, fp
 81090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81090b6:	f7f7 fc51 	bl	810095c <__aeabi_ddiv>
 81090ba:	4682      	mov	sl, r0
 81090bc:	468b      	mov	fp, r1
 81090be:	ea5f 1828 	movs.w	r8, r8, asr #4
 81090c2:	d0d8      	beq.n	8109076 <_strtod_l+0x526>
 81090c4:	f1b8 0f1f 	cmp.w	r8, #31
 81090c8:	dd1e      	ble.n	8109108 <_strtod_l+0x5b8>
 81090ca:	2500      	movs	r5, #0
 81090cc:	462e      	mov	r6, r5
 81090ce:	9509      	str	r5, [sp, #36]	; 0x24
 81090d0:	9507      	str	r5, [sp, #28]
 81090d2:	2322      	movs	r3, #34	; 0x22
 81090d4:	f04f 0a00 	mov.w	sl, #0
 81090d8:	f04f 0b00 	mov.w	fp, #0
 81090dc:	6023      	str	r3, [r4, #0]
 81090de:	e789      	b.n	8108ff4 <_strtod_l+0x4a4>
 81090e0:	0810e6d1 	.word	0x0810e6d1
 81090e4:	0810e710 	.word	0x0810e710
 81090e8:	0810e6c9 	.word	0x0810e6c9
 81090ec:	0810e854 	.word	0x0810e854
 81090f0:	0810eb2b 	.word	0x0810eb2b
 81090f4:	0810e9f0 	.word	0x0810e9f0
 81090f8:	0810e9c8 	.word	0x0810e9c8
 81090fc:	7ff00000 	.word	0x7ff00000
 8109100:	7ca00000 	.word	0x7ca00000
 8109104:	7fefffff 	.word	0x7fefffff
 8109108:	f018 0310 	ands.w	r3, r8, #16
 810910c:	bf18      	it	ne
 810910e:	236a      	movne	r3, #106	; 0x6a
 8109110:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 81094c8 <_strtod_l+0x978>
 8109114:	9304      	str	r3, [sp, #16]
 8109116:	4650      	mov	r0, sl
 8109118:	4659      	mov	r1, fp
 810911a:	2300      	movs	r3, #0
 810911c:	f018 0f01 	tst.w	r8, #1
 8109120:	d004      	beq.n	810912c <_strtod_l+0x5dc>
 8109122:	e9d9 2300 	ldrd	r2, r3, [r9]
 8109126:	f7f7 faef 	bl	8100708 <__aeabi_dmul>
 810912a:	2301      	movs	r3, #1
 810912c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8109130:	f109 0908 	add.w	r9, r9, #8
 8109134:	d1f2      	bne.n	810911c <_strtod_l+0x5cc>
 8109136:	b10b      	cbz	r3, 810913c <_strtod_l+0x5ec>
 8109138:	4682      	mov	sl, r0
 810913a:	468b      	mov	fp, r1
 810913c:	9b04      	ldr	r3, [sp, #16]
 810913e:	b1bb      	cbz	r3, 8109170 <_strtod_l+0x620>
 8109140:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8109144:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8109148:	2b00      	cmp	r3, #0
 810914a:	4659      	mov	r1, fp
 810914c:	dd10      	ble.n	8109170 <_strtod_l+0x620>
 810914e:	2b1f      	cmp	r3, #31
 8109150:	f340 8128 	ble.w	81093a4 <_strtod_l+0x854>
 8109154:	2b34      	cmp	r3, #52	; 0x34
 8109156:	bfde      	ittt	le
 8109158:	3b20      	suble	r3, #32
 810915a:	f04f 32ff 	movle.w	r2, #4294967295
 810915e:	fa02 f303 	lslle.w	r3, r2, r3
 8109162:	f04f 0a00 	mov.w	sl, #0
 8109166:	bfcc      	ite	gt
 8109168:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 810916c:	ea03 0b01 	andle.w	fp, r3, r1
 8109170:	2200      	movs	r2, #0
 8109172:	2300      	movs	r3, #0
 8109174:	4650      	mov	r0, sl
 8109176:	4659      	mov	r1, fp
 8109178:	f7f7 fd2e 	bl	8100bd8 <__aeabi_dcmpeq>
 810917c:	2800      	cmp	r0, #0
 810917e:	d1a4      	bne.n	81090ca <_strtod_l+0x57a>
 8109180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109182:	9300      	str	r3, [sp, #0]
 8109184:	990a      	ldr	r1, [sp, #40]	; 0x28
 8109186:	462b      	mov	r3, r5
 8109188:	463a      	mov	r2, r7
 810918a:	4620      	mov	r0, r4
 810918c:	f001 ff9a 	bl	810b0c4 <__s2b>
 8109190:	9009      	str	r0, [sp, #36]	; 0x24
 8109192:	2800      	cmp	r0, #0
 8109194:	f43f af24 	beq.w	8108fe0 <_strtod_l+0x490>
 8109198:	9b07      	ldr	r3, [sp, #28]
 810919a:	1b9e      	subs	r6, r3, r6
 810919c:	9b08      	ldr	r3, [sp, #32]
 810919e:	2b00      	cmp	r3, #0
 81091a0:	bfb4      	ite	lt
 81091a2:	4633      	movlt	r3, r6
 81091a4:	2300      	movge	r3, #0
 81091a6:	9310      	str	r3, [sp, #64]	; 0x40
 81091a8:	9b08      	ldr	r3, [sp, #32]
 81091aa:	2500      	movs	r5, #0
 81091ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 81091b0:	9318      	str	r3, [sp, #96]	; 0x60
 81091b2:	462e      	mov	r6, r5
 81091b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81091b6:	4620      	mov	r0, r4
 81091b8:	6859      	ldr	r1, [r3, #4]
 81091ba:	f001 fed7 	bl	810af6c <_Balloc>
 81091be:	9007      	str	r0, [sp, #28]
 81091c0:	2800      	cmp	r0, #0
 81091c2:	f43f af11 	beq.w	8108fe8 <_strtod_l+0x498>
 81091c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81091c8:	691a      	ldr	r2, [r3, #16]
 81091ca:	3202      	adds	r2, #2
 81091cc:	f103 010c 	add.w	r1, r3, #12
 81091d0:	0092      	lsls	r2, r2, #2
 81091d2:	300c      	adds	r0, #12
 81091d4:	f001 feb0 	bl	810af38 <memcpy>
 81091d8:	ec4b ab10 	vmov	d0, sl, fp
 81091dc:	aa20      	add	r2, sp, #128	; 0x80
 81091de:	a91f      	add	r1, sp, #124	; 0x7c
 81091e0:	4620      	mov	r0, r4
 81091e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 81091e6:	f002 faa9 	bl	810b73c <__d2b>
 81091ea:	901e      	str	r0, [sp, #120]	; 0x78
 81091ec:	2800      	cmp	r0, #0
 81091ee:	f43f aefb 	beq.w	8108fe8 <_strtod_l+0x498>
 81091f2:	2101      	movs	r1, #1
 81091f4:	4620      	mov	r0, r4
 81091f6:	f001 ffff 	bl	810b1f8 <__i2b>
 81091fa:	4606      	mov	r6, r0
 81091fc:	2800      	cmp	r0, #0
 81091fe:	f43f aef3 	beq.w	8108fe8 <_strtod_l+0x498>
 8109202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8109204:	9904      	ldr	r1, [sp, #16]
 8109206:	2b00      	cmp	r3, #0
 8109208:	bfab      	itete	ge
 810920a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 810920c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 810920e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8109210:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8109214:	bfac      	ite	ge
 8109216:	eb03 0902 	addge.w	r9, r3, r2
 810921a:	1ad7      	sublt	r7, r2, r3
 810921c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810921e:	eba3 0801 	sub.w	r8, r3, r1
 8109222:	4490      	add	r8, r2
 8109224:	4ba3      	ldr	r3, [pc, #652]	; (81094b4 <_strtod_l+0x964>)
 8109226:	f108 38ff 	add.w	r8, r8, #4294967295
 810922a:	4598      	cmp	r8, r3
 810922c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8109230:	f280 80cc 	bge.w	81093cc <_strtod_l+0x87c>
 8109234:	eba3 0308 	sub.w	r3, r3, r8
 8109238:	2b1f      	cmp	r3, #31
 810923a:	eba2 0203 	sub.w	r2, r2, r3
 810923e:	f04f 0101 	mov.w	r1, #1
 8109242:	f300 80b6 	bgt.w	81093b2 <_strtod_l+0x862>
 8109246:	fa01 f303 	lsl.w	r3, r1, r3
 810924a:	9311      	str	r3, [sp, #68]	; 0x44
 810924c:	2300      	movs	r3, #0
 810924e:	930c      	str	r3, [sp, #48]	; 0x30
 8109250:	eb09 0802 	add.w	r8, r9, r2
 8109254:	9b04      	ldr	r3, [sp, #16]
 8109256:	45c1      	cmp	r9, r8
 8109258:	4417      	add	r7, r2
 810925a:	441f      	add	r7, r3
 810925c:	464b      	mov	r3, r9
 810925e:	bfa8      	it	ge
 8109260:	4643      	movge	r3, r8
 8109262:	42bb      	cmp	r3, r7
 8109264:	bfa8      	it	ge
 8109266:	463b      	movge	r3, r7
 8109268:	2b00      	cmp	r3, #0
 810926a:	bfc2      	ittt	gt
 810926c:	eba8 0803 	subgt.w	r8, r8, r3
 8109270:	1aff      	subgt	r7, r7, r3
 8109272:	eba9 0903 	subgt.w	r9, r9, r3
 8109276:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8109278:	2b00      	cmp	r3, #0
 810927a:	dd17      	ble.n	81092ac <_strtod_l+0x75c>
 810927c:	4631      	mov	r1, r6
 810927e:	461a      	mov	r2, r3
 8109280:	4620      	mov	r0, r4
 8109282:	f002 f875 	bl	810b370 <__pow5mult>
 8109286:	4606      	mov	r6, r0
 8109288:	2800      	cmp	r0, #0
 810928a:	f43f aead 	beq.w	8108fe8 <_strtod_l+0x498>
 810928e:	4601      	mov	r1, r0
 8109290:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8109292:	4620      	mov	r0, r4
 8109294:	f001 ffc6 	bl	810b224 <__multiply>
 8109298:	900f      	str	r0, [sp, #60]	; 0x3c
 810929a:	2800      	cmp	r0, #0
 810929c:	f43f aea4 	beq.w	8108fe8 <_strtod_l+0x498>
 81092a0:	991e      	ldr	r1, [sp, #120]	; 0x78
 81092a2:	4620      	mov	r0, r4
 81092a4:	f001 fea2 	bl	810afec <_Bfree>
 81092a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81092aa:	931e      	str	r3, [sp, #120]	; 0x78
 81092ac:	f1b8 0f00 	cmp.w	r8, #0
 81092b0:	f300 8091 	bgt.w	81093d6 <_strtod_l+0x886>
 81092b4:	9b08      	ldr	r3, [sp, #32]
 81092b6:	2b00      	cmp	r3, #0
 81092b8:	dd08      	ble.n	81092cc <_strtod_l+0x77c>
 81092ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 81092bc:	9907      	ldr	r1, [sp, #28]
 81092be:	4620      	mov	r0, r4
 81092c0:	f002 f856 	bl	810b370 <__pow5mult>
 81092c4:	9007      	str	r0, [sp, #28]
 81092c6:	2800      	cmp	r0, #0
 81092c8:	f43f ae8e 	beq.w	8108fe8 <_strtod_l+0x498>
 81092cc:	2f00      	cmp	r7, #0
 81092ce:	dd08      	ble.n	81092e2 <_strtod_l+0x792>
 81092d0:	9907      	ldr	r1, [sp, #28]
 81092d2:	463a      	mov	r2, r7
 81092d4:	4620      	mov	r0, r4
 81092d6:	f002 f8a5 	bl	810b424 <__lshift>
 81092da:	9007      	str	r0, [sp, #28]
 81092dc:	2800      	cmp	r0, #0
 81092de:	f43f ae83 	beq.w	8108fe8 <_strtod_l+0x498>
 81092e2:	f1b9 0f00 	cmp.w	r9, #0
 81092e6:	dd08      	ble.n	81092fa <_strtod_l+0x7aa>
 81092e8:	4631      	mov	r1, r6
 81092ea:	464a      	mov	r2, r9
 81092ec:	4620      	mov	r0, r4
 81092ee:	f002 f899 	bl	810b424 <__lshift>
 81092f2:	4606      	mov	r6, r0
 81092f4:	2800      	cmp	r0, #0
 81092f6:	f43f ae77 	beq.w	8108fe8 <_strtod_l+0x498>
 81092fa:	9a07      	ldr	r2, [sp, #28]
 81092fc:	991e      	ldr	r1, [sp, #120]	; 0x78
 81092fe:	4620      	mov	r0, r4
 8109300:	f002 f918 	bl	810b534 <__mdiff>
 8109304:	4605      	mov	r5, r0
 8109306:	2800      	cmp	r0, #0
 8109308:	f43f ae6e 	beq.w	8108fe8 <_strtod_l+0x498>
 810930c:	68c3      	ldr	r3, [r0, #12]
 810930e:	930f      	str	r3, [sp, #60]	; 0x3c
 8109310:	2300      	movs	r3, #0
 8109312:	60c3      	str	r3, [r0, #12]
 8109314:	4631      	mov	r1, r6
 8109316:	f002 f8f1 	bl	810b4fc <__mcmp>
 810931a:	2800      	cmp	r0, #0
 810931c:	da65      	bge.n	81093ea <_strtod_l+0x89a>
 810931e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109320:	ea53 030a 	orrs.w	r3, r3, sl
 8109324:	f040 8087 	bne.w	8109436 <_strtod_l+0x8e6>
 8109328:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810932c:	2b00      	cmp	r3, #0
 810932e:	f040 8082 	bne.w	8109436 <_strtod_l+0x8e6>
 8109332:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109336:	0d1b      	lsrs	r3, r3, #20
 8109338:	051b      	lsls	r3, r3, #20
 810933a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810933e:	d97a      	bls.n	8109436 <_strtod_l+0x8e6>
 8109340:	696b      	ldr	r3, [r5, #20]
 8109342:	b913      	cbnz	r3, 810934a <_strtod_l+0x7fa>
 8109344:	692b      	ldr	r3, [r5, #16]
 8109346:	2b01      	cmp	r3, #1
 8109348:	dd75      	ble.n	8109436 <_strtod_l+0x8e6>
 810934a:	4629      	mov	r1, r5
 810934c:	2201      	movs	r2, #1
 810934e:	4620      	mov	r0, r4
 8109350:	f002 f868 	bl	810b424 <__lshift>
 8109354:	4631      	mov	r1, r6
 8109356:	4605      	mov	r5, r0
 8109358:	f002 f8d0 	bl	810b4fc <__mcmp>
 810935c:	2800      	cmp	r0, #0
 810935e:	dd6a      	ble.n	8109436 <_strtod_l+0x8e6>
 8109360:	9904      	ldr	r1, [sp, #16]
 8109362:	4a55      	ldr	r2, [pc, #340]	; (81094b8 <_strtod_l+0x968>)
 8109364:	465b      	mov	r3, fp
 8109366:	2900      	cmp	r1, #0
 8109368:	f000 8085 	beq.w	8109476 <_strtod_l+0x926>
 810936c:	ea02 010b 	and.w	r1, r2, fp
 8109370:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8109374:	dc7f      	bgt.n	8109476 <_strtod_l+0x926>
 8109376:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810937a:	f77f aeaa 	ble.w	81090d2 <_strtod_l+0x582>
 810937e:	4a4f      	ldr	r2, [pc, #316]	; (81094bc <_strtod_l+0x96c>)
 8109380:	2300      	movs	r3, #0
 8109382:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8109386:	4650      	mov	r0, sl
 8109388:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 810938c:	4659      	mov	r1, fp
 810938e:	f7f7 f9bb 	bl	8100708 <__aeabi_dmul>
 8109392:	460b      	mov	r3, r1
 8109394:	4303      	orrs	r3, r0
 8109396:	bf08      	it	eq
 8109398:	2322      	moveq	r3, #34	; 0x22
 810939a:	4682      	mov	sl, r0
 810939c:	468b      	mov	fp, r1
 810939e:	bf08      	it	eq
 81093a0:	6023      	streq	r3, [r4, #0]
 81093a2:	e62b      	b.n	8108ffc <_strtod_l+0x4ac>
 81093a4:	f04f 32ff 	mov.w	r2, #4294967295
 81093a8:	fa02 f303 	lsl.w	r3, r2, r3
 81093ac:	ea03 0a0a 	and.w	sl, r3, sl
 81093b0:	e6de      	b.n	8109170 <_strtod_l+0x620>
 81093b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 81093b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 81093ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 81093be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 81093c2:	fa01 f308 	lsl.w	r3, r1, r8
 81093c6:	930c      	str	r3, [sp, #48]	; 0x30
 81093c8:	9111      	str	r1, [sp, #68]	; 0x44
 81093ca:	e741      	b.n	8109250 <_strtod_l+0x700>
 81093cc:	2300      	movs	r3, #0
 81093ce:	930c      	str	r3, [sp, #48]	; 0x30
 81093d0:	2301      	movs	r3, #1
 81093d2:	9311      	str	r3, [sp, #68]	; 0x44
 81093d4:	e73c      	b.n	8109250 <_strtod_l+0x700>
 81093d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 81093d8:	4642      	mov	r2, r8
 81093da:	4620      	mov	r0, r4
 81093dc:	f002 f822 	bl	810b424 <__lshift>
 81093e0:	901e      	str	r0, [sp, #120]	; 0x78
 81093e2:	2800      	cmp	r0, #0
 81093e4:	f47f af66 	bne.w	81092b4 <_strtod_l+0x764>
 81093e8:	e5fe      	b.n	8108fe8 <_strtod_l+0x498>
 81093ea:	465f      	mov	r7, fp
 81093ec:	d16e      	bne.n	81094cc <_strtod_l+0x97c>
 81093ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81093f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81093f4:	b342      	cbz	r2, 8109448 <_strtod_l+0x8f8>
 81093f6:	4a32      	ldr	r2, [pc, #200]	; (81094c0 <_strtod_l+0x970>)
 81093f8:	4293      	cmp	r3, r2
 81093fa:	d128      	bne.n	810944e <_strtod_l+0x8fe>
 81093fc:	9b04      	ldr	r3, [sp, #16]
 81093fe:	4650      	mov	r0, sl
 8109400:	b1eb      	cbz	r3, 810943e <_strtod_l+0x8ee>
 8109402:	4a2d      	ldr	r2, [pc, #180]	; (81094b8 <_strtod_l+0x968>)
 8109404:	403a      	ands	r2, r7
 8109406:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 810940a:	f04f 31ff 	mov.w	r1, #4294967295
 810940e:	d819      	bhi.n	8109444 <_strtod_l+0x8f4>
 8109410:	0d12      	lsrs	r2, r2, #20
 8109412:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8109416:	fa01 f303 	lsl.w	r3, r1, r3
 810941a:	4298      	cmp	r0, r3
 810941c:	d117      	bne.n	810944e <_strtod_l+0x8fe>
 810941e:	4b29      	ldr	r3, [pc, #164]	; (81094c4 <_strtod_l+0x974>)
 8109420:	429f      	cmp	r7, r3
 8109422:	d102      	bne.n	810942a <_strtod_l+0x8da>
 8109424:	3001      	adds	r0, #1
 8109426:	f43f addf 	beq.w	8108fe8 <_strtod_l+0x498>
 810942a:	4b23      	ldr	r3, [pc, #140]	; (81094b8 <_strtod_l+0x968>)
 810942c:	403b      	ands	r3, r7
 810942e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8109432:	f04f 0a00 	mov.w	sl, #0
 8109436:	9b04      	ldr	r3, [sp, #16]
 8109438:	2b00      	cmp	r3, #0
 810943a:	d1a0      	bne.n	810937e <_strtod_l+0x82e>
 810943c:	e5de      	b.n	8108ffc <_strtod_l+0x4ac>
 810943e:	f04f 33ff 	mov.w	r3, #4294967295
 8109442:	e7ea      	b.n	810941a <_strtod_l+0x8ca>
 8109444:	460b      	mov	r3, r1
 8109446:	e7e8      	b.n	810941a <_strtod_l+0x8ca>
 8109448:	ea53 030a 	orrs.w	r3, r3, sl
 810944c:	d088      	beq.n	8109360 <_strtod_l+0x810>
 810944e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109450:	b1db      	cbz	r3, 810948a <_strtod_l+0x93a>
 8109452:	423b      	tst	r3, r7
 8109454:	d0ef      	beq.n	8109436 <_strtod_l+0x8e6>
 8109456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109458:	9a04      	ldr	r2, [sp, #16]
 810945a:	4650      	mov	r0, sl
 810945c:	4659      	mov	r1, fp
 810945e:	b1c3      	cbz	r3, 8109492 <_strtod_l+0x942>
 8109460:	f7ff fb57 	bl	8108b12 <sulp>
 8109464:	4602      	mov	r2, r0
 8109466:	460b      	mov	r3, r1
 8109468:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810946c:	f7f6 ff96 	bl	810039c <__adddf3>
 8109470:	4682      	mov	sl, r0
 8109472:	468b      	mov	fp, r1
 8109474:	e7df      	b.n	8109436 <_strtod_l+0x8e6>
 8109476:	4013      	ands	r3, r2
 8109478:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810947c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8109480:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8109484:	f04f 3aff 	mov.w	sl, #4294967295
 8109488:	e7d5      	b.n	8109436 <_strtod_l+0x8e6>
 810948a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810948c:	ea13 0f0a 	tst.w	r3, sl
 8109490:	e7e0      	b.n	8109454 <_strtod_l+0x904>
 8109492:	f7ff fb3e 	bl	8108b12 <sulp>
 8109496:	4602      	mov	r2, r0
 8109498:	460b      	mov	r3, r1
 810949a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810949e:	f7f6 ff7b 	bl	8100398 <__aeabi_dsub>
 81094a2:	2200      	movs	r2, #0
 81094a4:	2300      	movs	r3, #0
 81094a6:	4682      	mov	sl, r0
 81094a8:	468b      	mov	fp, r1
 81094aa:	f7f7 fb95 	bl	8100bd8 <__aeabi_dcmpeq>
 81094ae:	2800      	cmp	r0, #0
 81094b0:	d0c1      	beq.n	8109436 <_strtod_l+0x8e6>
 81094b2:	e60e      	b.n	81090d2 <_strtod_l+0x582>
 81094b4:	fffffc02 	.word	0xfffffc02
 81094b8:	7ff00000 	.word	0x7ff00000
 81094bc:	39500000 	.word	0x39500000
 81094c0:	000fffff 	.word	0x000fffff
 81094c4:	7fefffff 	.word	0x7fefffff
 81094c8:	0810e728 	.word	0x0810e728
 81094cc:	4631      	mov	r1, r6
 81094ce:	4628      	mov	r0, r5
 81094d0:	f002 f990 	bl	810b7f4 <__ratio>
 81094d4:	ec59 8b10 	vmov	r8, r9, d0
 81094d8:	ee10 0a10 	vmov	r0, s0
 81094dc:	2200      	movs	r2, #0
 81094de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81094e2:	4649      	mov	r1, r9
 81094e4:	f7f7 fb8c 	bl	8100c00 <__aeabi_dcmple>
 81094e8:	2800      	cmp	r0, #0
 81094ea:	d07c      	beq.n	81095e6 <_strtod_l+0xa96>
 81094ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81094ee:	2b00      	cmp	r3, #0
 81094f0:	d04c      	beq.n	810958c <_strtod_l+0xa3c>
 81094f2:	4b95      	ldr	r3, [pc, #596]	; (8109748 <_strtod_l+0xbf8>)
 81094f4:	2200      	movs	r2, #0
 81094f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81094fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8109748 <_strtod_l+0xbf8>
 81094fe:	f04f 0800 	mov.w	r8, #0
 8109502:	4b92      	ldr	r3, [pc, #584]	; (810974c <_strtod_l+0xbfc>)
 8109504:	403b      	ands	r3, r7
 8109506:	9311      	str	r3, [sp, #68]	; 0x44
 8109508:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810950a:	4b91      	ldr	r3, [pc, #580]	; (8109750 <_strtod_l+0xc00>)
 810950c:	429a      	cmp	r2, r3
 810950e:	f040 80b2 	bne.w	8109676 <_strtod_l+0xb26>
 8109512:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810951a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810951e:	ec4b ab10 	vmov	d0, sl, fp
 8109522:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8109526:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810952a:	f002 f88b 	bl	810b644 <__ulp>
 810952e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109532:	ec53 2b10 	vmov	r2, r3, d0
 8109536:	f7f7 f8e7 	bl	8100708 <__aeabi_dmul>
 810953a:	4652      	mov	r2, sl
 810953c:	465b      	mov	r3, fp
 810953e:	f7f6 ff2d 	bl	810039c <__adddf3>
 8109542:	460b      	mov	r3, r1
 8109544:	4981      	ldr	r1, [pc, #516]	; (810974c <_strtod_l+0xbfc>)
 8109546:	4a83      	ldr	r2, [pc, #524]	; (8109754 <_strtod_l+0xc04>)
 8109548:	4019      	ands	r1, r3
 810954a:	4291      	cmp	r1, r2
 810954c:	4682      	mov	sl, r0
 810954e:	d95e      	bls.n	810960e <_strtod_l+0xabe>
 8109550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109552:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8109556:	4293      	cmp	r3, r2
 8109558:	d103      	bne.n	8109562 <_strtod_l+0xa12>
 810955a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810955c:	3301      	adds	r3, #1
 810955e:	f43f ad43 	beq.w	8108fe8 <_strtod_l+0x498>
 8109562:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8109760 <_strtod_l+0xc10>
 8109566:	f04f 3aff 	mov.w	sl, #4294967295
 810956a:	991e      	ldr	r1, [sp, #120]	; 0x78
 810956c:	4620      	mov	r0, r4
 810956e:	f001 fd3d 	bl	810afec <_Bfree>
 8109572:	9907      	ldr	r1, [sp, #28]
 8109574:	4620      	mov	r0, r4
 8109576:	f001 fd39 	bl	810afec <_Bfree>
 810957a:	4631      	mov	r1, r6
 810957c:	4620      	mov	r0, r4
 810957e:	f001 fd35 	bl	810afec <_Bfree>
 8109582:	4629      	mov	r1, r5
 8109584:	4620      	mov	r0, r4
 8109586:	f001 fd31 	bl	810afec <_Bfree>
 810958a:	e613      	b.n	81091b4 <_strtod_l+0x664>
 810958c:	f1ba 0f00 	cmp.w	sl, #0
 8109590:	d11b      	bne.n	81095ca <_strtod_l+0xa7a>
 8109592:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109596:	b9f3      	cbnz	r3, 81095d6 <_strtod_l+0xa86>
 8109598:	4b6b      	ldr	r3, [pc, #428]	; (8109748 <_strtod_l+0xbf8>)
 810959a:	2200      	movs	r2, #0
 810959c:	4640      	mov	r0, r8
 810959e:	4649      	mov	r1, r9
 81095a0:	f7f7 fb24 	bl	8100bec <__aeabi_dcmplt>
 81095a4:	b9d0      	cbnz	r0, 81095dc <_strtod_l+0xa8c>
 81095a6:	4640      	mov	r0, r8
 81095a8:	4649      	mov	r1, r9
 81095aa:	4b6b      	ldr	r3, [pc, #428]	; (8109758 <_strtod_l+0xc08>)
 81095ac:	2200      	movs	r2, #0
 81095ae:	f7f7 f8ab 	bl	8100708 <__aeabi_dmul>
 81095b2:	4680      	mov	r8, r0
 81095b4:	4689      	mov	r9, r1
 81095b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 81095ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 81095be:	931b      	str	r3, [sp, #108]	; 0x6c
 81095c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 81095c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81095c8:	e79b      	b.n	8109502 <_strtod_l+0x9b2>
 81095ca:	f1ba 0f01 	cmp.w	sl, #1
 81095ce:	d102      	bne.n	81095d6 <_strtod_l+0xa86>
 81095d0:	2f00      	cmp	r7, #0
 81095d2:	f43f ad7e 	beq.w	81090d2 <_strtod_l+0x582>
 81095d6:	4b61      	ldr	r3, [pc, #388]	; (810975c <_strtod_l+0xc0c>)
 81095d8:	2200      	movs	r2, #0
 81095da:	e78c      	b.n	81094f6 <_strtod_l+0x9a6>
 81095dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8109758 <_strtod_l+0xc08>
 81095e0:	f04f 0800 	mov.w	r8, #0
 81095e4:	e7e7      	b.n	81095b6 <_strtod_l+0xa66>
 81095e6:	4b5c      	ldr	r3, [pc, #368]	; (8109758 <_strtod_l+0xc08>)
 81095e8:	4640      	mov	r0, r8
 81095ea:	4649      	mov	r1, r9
 81095ec:	2200      	movs	r2, #0
 81095ee:	f7f7 f88b 	bl	8100708 <__aeabi_dmul>
 81095f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81095f4:	4680      	mov	r8, r0
 81095f6:	4689      	mov	r9, r1
 81095f8:	b933      	cbnz	r3, 8109608 <_strtod_l+0xab8>
 81095fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81095fe:	9012      	str	r0, [sp, #72]	; 0x48
 8109600:	9313      	str	r3, [sp, #76]	; 0x4c
 8109602:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8109606:	e7dd      	b.n	81095c4 <_strtod_l+0xa74>
 8109608:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 810960c:	e7f9      	b.n	8109602 <_strtod_l+0xab2>
 810960e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8109612:	9b04      	ldr	r3, [sp, #16]
 8109614:	2b00      	cmp	r3, #0
 8109616:	d1a8      	bne.n	810956a <_strtod_l+0xa1a>
 8109618:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810961c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810961e:	0d1b      	lsrs	r3, r3, #20
 8109620:	051b      	lsls	r3, r3, #20
 8109622:	429a      	cmp	r2, r3
 8109624:	d1a1      	bne.n	810956a <_strtod_l+0xa1a>
 8109626:	4640      	mov	r0, r8
 8109628:	4649      	mov	r1, r9
 810962a:	f7f7 fbcd 	bl	8100dc8 <__aeabi_d2lz>
 810962e:	f7f7 f83d 	bl	81006ac <__aeabi_l2d>
 8109632:	4602      	mov	r2, r0
 8109634:	460b      	mov	r3, r1
 8109636:	4640      	mov	r0, r8
 8109638:	4649      	mov	r1, r9
 810963a:	f7f6 fead 	bl	8100398 <__aeabi_dsub>
 810963e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109640:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109644:	ea43 030a 	orr.w	r3, r3, sl
 8109648:	4313      	orrs	r3, r2
 810964a:	4680      	mov	r8, r0
 810964c:	4689      	mov	r9, r1
 810964e:	d053      	beq.n	81096f8 <_strtod_l+0xba8>
 8109650:	a335      	add	r3, pc, #212	; (adr r3, 8109728 <_strtod_l+0xbd8>)
 8109652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109656:	f7f7 fac9 	bl	8100bec <__aeabi_dcmplt>
 810965a:	2800      	cmp	r0, #0
 810965c:	f47f acce 	bne.w	8108ffc <_strtod_l+0x4ac>
 8109660:	a333      	add	r3, pc, #204	; (adr r3, 8109730 <_strtod_l+0xbe0>)
 8109662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109666:	4640      	mov	r0, r8
 8109668:	4649      	mov	r1, r9
 810966a:	f7f7 fadd 	bl	8100c28 <__aeabi_dcmpgt>
 810966e:	2800      	cmp	r0, #0
 8109670:	f43f af7b 	beq.w	810956a <_strtod_l+0xa1a>
 8109674:	e4c2      	b.n	8108ffc <_strtod_l+0x4ac>
 8109676:	9b04      	ldr	r3, [sp, #16]
 8109678:	b333      	cbz	r3, 81096c8 <_strtod_l+0xb78>
 810967a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810967c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109680:	d822      	bhi.n	81096c8 <_strtod_l+0xb78>
 8109682:	a32d      	add	r3, pc, #180	; (adr r3, 8109738 <_strtod_l+0xbe8>)
 8109684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109688:	4640      	mov	r0, r8
 810968a:	4649      	mov	r1, r9
 810968c:	f7f7 fab8 	bl	8100c00 <__aeabi_dcmple>
 8109690:	b1a0      	cbz	r0, 81096bc <_strtod_l+0xb6c>
 8109692:	4649      	mov	r1, r9
 8109694:	4640      	mov	r0, r8
 8109696:	f7f7 fb0f 	bl	8100cb8 <__aeabi_d2uiz>
 810969a:	2801      	cmp	r0, #1
 810969c:	bf38      	it	cc
 810969e:	2001      	movcc	r0, #1
 81096a0:	f7f6 ffb8 	bl	8100614 <__aeabi_ui2d>
 81096a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81096a6:	4680      	mov	r8, r0
 81096a8:	4689      	mov	r9, r1
 81096aa:	bb13      	cbnz	r3, 81096f2 <_strtod_l+0xba2>
 81096ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81096b0:	9014      	str	r0, [sp, #80]	; 0x50
 81096b2:	9315      	str	r3, [sp, #84]	; 0x54
 81096b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 81096b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 81096bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81096be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 81096c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81096c4:	1a9b      	subs	r3, r3, r2
 81096c6:	930d      	str	r3, [sp, #52]	; 0x34
 81096c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81096cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 81096d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 81096d4:	f001 ffb6 	bl	810b644 <__ulp>
 81096d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 81096dc:	ec53 2b10 	vmov	r2, r3, d0
 81096e0:	f7f7 f812 	bl	8100708 <__aeabi_dmul>
 81096e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 81096e8:	f7f6 fe58 	bl	810039c <__adddf3>
 81096ec:	4682      	mov	sl, r0
 81096ee:	468b      	mov	fp, r1
 81096f0:	e78f      	b.n	8109612 <_strtod_l+0xac2>
 81096f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 81096f6:	e7dd      	b.n	81096b4 <_strtod_l+0xb64>
 81096f8:	a311      	add	r3, pc, #68	; (adr r3, 8109740 <_strtod_l+0xbf0>)
 81096fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81096fe:	f7f7 fa75 	bl	8100bec <__aeabi_dcmplt>
 8109702:	e7b4      	b.n	810966e <_strtod_l+0xb1e>
 8109704:	2300      	movs	r3, #0
 8109706:	930e      	str	r3, [sp, #56]	; 0x38
 8109708:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810970a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810970c:	6013      	str	r3, [r2, #0]
 810970e:	f7ff ba65 	b.w	8108bdc <_strtod_l+0x8c>
 8109712:	2b65      	cmp	r3, #101	; 0x65
 8109714:	f43f ab5d 	beq.w	8108dd2 <_strtod_l+0x282>
 8109718:	2b45      	cmp	r3, #69	; 0x45
 810971a:	f43f ab5a 	beq.w	8108dd2 <_strtod_l+0x282>
 810971e:	2201      	movs	r2, #1
 8109720:	f7ff bb92 	b.w	8108e48 <_strtod_l+0x2f8>
 8109724:	f3af 8000 	nop.w
 8109728:	94a03595 	.word	0x94a03595
 810972c:	3fdfffff 	.word	0x3fdfffff
 8109730:	35afe535 	.word	0x35afe535
 8109734:	3fe00000 	.word	0x3fe00000
 8109738:	ffc00000 	.word	0xffc00000
 810973c:	41dfffff 	.word	0x41dfffff
 8109740:	94a03595 	.word	0x94a03595
 8109744:	3fcfffff 	.word	0x3fcfffff
 8109748:	3ff00000 	.word	0x3ff00000
 810974c:	7ff00000 	.word	0x7ff00000
 8109750:	7fe00000 	.word	0x7fe00000
 8109754:	7c9fffff 	.word	0x7c9fffff
 8109758:	3fe00000 	.word	0x3fe00000
 810975c:	bff00000 	.word	0xbff00000
 8109760:	7fefffff 	.word	0x7fefffff

08109764 <_strtod_r>:
 8109764:	4b01      	ldr	r3, [pc, #4]	; (810976c <_strtod_r+0x8>)
 8109766:	f7ff b9f3 	b.w	8108b50 <_strtod_l>
 810976a:	bf00      	nop
 810976c:	100000cc 	.word	0x100000cc

08109770 <_strtol_l.isra.0>:
 8109770:	2b01      	cmp	r3, #1
 8109772:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109776:	d001      	beq.n	810977c <_strtol_l.isra.0+0xc>
 8109778:	2b24      	cmp	r3, #36	; 0x24
 810977a:	d906      	bls.n	810978a <_strtol_l.isra.0+0x1a>
 810977c:	f7fd fea4 	bl	81074c8 <__errno>
 8109780:	2316      	movs	r3, #22
 8109782:	6003      	str	r3, [r0, #0]
 8109784:	2000      	movs	r0, #0
 8109786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810978a:	4f3a      	ldr	r7, [pc, #232]	; (8109874 <_strtol_l.isra.0+0x104>)
 810978c:	468e      	mov	lr, r1
 810978e:	4676      	mov	r6, lr
 8109790:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8109794:	5de5      	ldrb	r5, [r4, r7]
 8109796:	f015 0508 	ands.w	r5, r5, #8
 810979a:	d1f8      	bne.n	810978e <_strtol_l.isra.0+0x1e>
 810979c:	2c2d      	cmp	r4, #45	; 0x2d
 810979e:	d134      	bne.n	810980a <_strtol_l.isra.0+0x9a>
 81097a0:	f89e 4000 	ldrb.w	r4, [lr]
 81097a4:	f04f 0801 	mov.w	r8, #1
 81097a8:	f106 0e02 	add.w	lr, r6, #2
 81097ac:	2b00      	cmp	r3, #0
 81097ae:	d05c      	beq.n	810986a <_strtol_l.isra.0+0xfa>
 81097b0:	2b10      	cmp	r3, #16
 81097b2:	d10c      	bne.n	81097ce <_strtol_l.isra.0+0x5e>
 81097b4:	2c30      	cmp	r4, #48	; 0x30
 81097b6:	d10a      	bne.n	81097ce <_strtol_l.isra.0+0x5e>
 81097b8:	f89e 4000 	ldrb.w	r4, [lr]
 81097bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 81097c0:	2c58      	cmp	r4, #88	; 0x58
 81097c2:	d14d      	bne.n	8109860 <_strtol_l.isra.0+0xf0>
 81097c4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 81097c8:	2310      	movs	r3, #16
 81097ca:	f10e 0e02 	add.w	lr, lr, #2
 81097ce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 81097d2:	f10c 3cff 	add.w	ip, ip, #4294967295
 81097d6:	2600      	movs	r6, #0
 81097d8:	fbbc f9f3 	udiv	r9, ip, r3
 81097dc:	4635      	mov	r5, r6
 81097de:	fb03 ca19 	mls	sl, r3, r9, ip
 81097e2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 81097e6:	2f09      	cmp	r7, #9
 81097e8:	d818      	bhi.n	810981c <_strtol_l.isra.0+0xac>
 81097ea:	463c      	mov	r4, r7
 81097ec:	42a3      	cmp	r3, r4
 81097ee:	dd24      	ble.n	810983a <_strtol_l.isra.0+0xca>
 81097f0:	2e00      	cmp	r6, #0
 81097f2:	db1f      	blt.n	8109834 <_strtol_l.isra.0+0xc4>
 81097f4:	45a9      	cmp	r9, r5
 81097f6:	d31d      	bcc.n	8109834 <_strtol_l.isra.0+0xc4>
 81097f8:	d101      	bne.n	81097fe <_strtol_l.isra.0+0x8e>
 81097fa:	45a2      	cmp	sl, r4
 81097fc:	db1a      	blt.n	8109834 <_strtol_l.isra.0+0xc4>
 81097fe:	fb05 4503 	mla	r5, r5, r3, r4
 8109802:	2601      	movs	r6, #1
 8109804:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8109808:	e7eb      	b.n	81097e2 <_strtol_l.isra.0+0x72>
 810980a:	2c2b      	cmp	r4, #43	; 0x2b
 810980c:	bf08      	it	eq
 810980e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8109812:	46a8      	mov	r8, r5
 8109814:	bf08      	it	eq
 8109816:	f106 0e02 	addeq.w	lr, r6, #2
 810981a:	e7c7      	b.n	81097ac <_strtol_l.isra.0+0x3c>
 810981c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8109820:	2f19      	cmp	r7, #25
 8109822:	d801      	bhi.n	8109828 <_strtol_l.isra.0+0xb8>
 8109824:	3c37      	subs	r4, #55	; 0x37
 8109826:	e7e1      	b.n	81097ec <_strtol_l.isra.0+0x7c>
 8109828:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 810982c:	2f19      	cmp	r7, #25
 810982e:	d804      	bhi.n	810983a <_strtol_l.isra.0+0xca>
 8109830:	3c57      	subs	r4, #87	; 0x57
 8109832:	e7db      	b.n	81097ec <_strtol_l.isra.0+0x7c>
 8109834:	f04f 36ff 	mov.w	r6, #4294967295
 8109838:	e7e4      	b.n	8109804 <_strtol_l.isra.0+0x94>
 810983a:	2e00      	cmp	r6, #0
 810983c:	da05      	bge.n	810984a <_strtol_l.isra.0+0xda>
 810983e:	2322      	movs	r3, #34	; 0x22
 8109840:	6003      	str	r3, [r0, #0]
 8109842:	4665      	mov	r5, ip
 8109844:	b942      	cbnz	r2, 8109858 <_strtol_l.isra.0+0xe8>
 8109846:	4628      	mov	r0, r5
 8109848:	e79d      	b.n	8109786 <_strtol_l.isra.0+0x16>
 810984a:	f1b8 0f00 	cmp.w	r8, #0
 810984e:	d000      	beq.n	8109852 <_strtol_l.isra.0+0xe2>
 8109850:	426d      	negs	r5, r5
 8109852:	2a00      	cmp	r2, #0
 8109854:	d0f7      	beq.n	8109846 <_strtol_l.isra.0+0xd6>
 8109856:	b10e      	cbz	r6, 810985c <_strtol_l.isra.0+0xec>
 8109858:	f10e 31ff 	add.w	r1, lr, #4294967295
 810985c:	6011      	str	r1, [r2, #0]
 810985e:	e7f2      	b.n	8109846 <_strtol_l.isra.0+0xd6>
 8109860:	2430      	movs	r4, #48	; 0x30
 8109862:	2b00      	cmp	r3, #0
 8109864:	d1b3      	bne.n	81097ce <_strtol_l.isra.0+0x5e>
 8109866:	2308      	movs	r3, #8
 8109868:	e7b1      	b.n	81097ce <_strtol_l.isra.0+0x5e>
 810986a:	2c30      	cmp	r4, #48	; 0x30
 810986c:	d0a4      	beq.n	81097b8 <_strtol_l.isra.0+0x48>
 810986e:	230a      	movs	r3, #10
 8109870:	e7ad      	b.n	81097ce <_strtol_l.isra.0+0x5e>
 8109872:	bf00      	nop
 8109874:	0810e751 	.word	0x0810e751

08109878 <_strtol_r>:
 8109878:	f7ff bf7a 	b.w	8109770 <_strtol_l.isra.0>

0810987c <__swbuf_r>:
 810987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810987e:	460e      	mov	r6, r1
 8109880:	4614      	mov	r4, r2
 8109882:	4605      	mov	r5, r0
 8109884:	b118      	cbz	r0, 810988e <__swbuf_r+0x12>
 8109886:	6983      	ldr	r3, [r0, #24]
 8109888:	b90b      	cbnz	r3, 810988e <__swbuf_r+0x12>
 810988a:	f7fd ff4f 	bl	810772c <__sinit>
 810988e:	4b21      	ldr	r3, [pc, #132]	; (8109914 <__swbuf_r+0x98>)
 8109890:	429c      	cmp	r4, r3
 8109892:	d12b      	bne.n	81098ec <__swbuf_r+0x70>
 8109894:	686c      	ldr	r4, [r5, #4]
 8109896:	69a3      	ldr	r3, [r4, #24]
 8109898:	60a3      	str	r3, [r4, #8]
 810989a:	89a3      	ldrh	r3, [r4, #12]
 810989c:	071a      	lsls	r2, r3, #28
 810989e:	d52f      	bpl.n	8109900 <__swbuf_r+0x84>
 81098a0:	6923      	ldr	r3, [r4, #16]
 81098a2:	b36b      	cbz	r3, 8109900 <__swbuf_r+0x84>
 81098a4:	6923      	ldr	r3, [r4, #16]
 81098a6:	6820      	ldr	r0, [r4, #0]
 81098a8:	1ac0      	subs	r0, r0, r3
 81098aa:	6963      	ldr	r3, [r4, #20]
 81098ac:	b2f6      	uxtb	r6, r6
 81098ae:	4283      	cmp	r3, r0
 81098b0:	4637      	mov	r7, r6
 81098b2:	dc04      	bgt.n	81098be <__swbuf_r+0x42>
 81098b4:	4621      	mov	r1, r4
 81098b6:	4628      	mov	r0, r5
 81098b8:	f7fd fe92 	bl	81075e0 <_fflush_r>
 81098bc:	bb30      	cbnz	r0, 810990c <__swbuf_r+0x90>
 81098be:	68a3      	ldr	r3, [r4, #8]
 81098c0:	3b01      	subs	r3, #1
 81098c2:	60a3      	str	r3, [r4, #8]
 81098c4:	6823      	ldr	r3, [r4, #0]
 81098c6:	1c5a      	adds	r2, r3, #1
 81098c8:	6022      	str	r2, [r4, #0]
 81098ca:	701e      	strb	r6, [r3, #0]
 81098cc:	6963      	ldr	r3, [r4, #20]
 81098ce:	3001      	adds	r0, #1
 81098d0:	4283      	cmp	r3, r0
 81098d2:	d004      	beq.n	81098de <__swbuf_r+0x62>
 81098d4:	89a3      	ldrh	r3, [r4, #12]
 81098d6:	07db      	lsls	r3, r3, #31
 81098d8:	d506      	bpl.n	81098e8 <__swbuf_r+0x6c>
 81098da:	2e0a      	cmp	r6, #10
 81098dc:	d104      	bne.n	81098e8 <__swbuf_r+0x6c>
 81098de:	4621      	mov	r1, r4
 81098e0:	4628      	mov	r0, r5
 81098e2:	f7fd fe7d 	bl	81075e0 <_fflush_r>
 81098e6:	b988      	cbnz	r0, 810990c <__swbuf_r+0x90>
 81098e8:	4638      	mov	r0, r7
 81098ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81098ec:	4b0a      	ldr	r3, [pc, #40]	; (8109918 <__swbuf_r+0x9c>)
 81098ee:	429c      	cmp	r4, r3
 81098f0:	d101      	bne.n	81098f6 <__swbuf_r+0x7a>
 81098f2:	68ac      	ldr	r4, [r5, #8]
 81098f4:	e7cf      	b.n	8109896 <__swbuf_r+0x1a>
 81098f6:	4b09      	ldr	r3, [pc, #36]	; (810991c <__swbuf_r+0xa0>)
 81098f8:	429c      	cmp	r4, r3
 81098fa:	bf08      	it	eq
 81098fc:	68ec      	ldreq	r4, [r5, #12]
 81098fe:	e7ca      	b.n	8109896 <__swbuf_r+0x1a>
 8109900:	4621      	mov	r1, r4
 8109902:	4628      	mov	r0, r5
 8109904:	f000 f81e 	bl	8109944 <__swsetup_r>
 8109908:	2800      	cmp	r0, #0
 810990a:	d0cb      	beq.n	81098a4 <__swbuf_r+0x28>
 810990c:	f04f 37ff 	mov.w	r7, #4294967295
 8109910:	e7ea      	b.n	81098e8 <__swbuf_r+0x6c>
 8109912:	bf00      	nop
 8109914:	0810e680 	.word	0x0810e680
 8109918:	0810e6a0 	.word	0x0810e6a0
 810991c:	0810e660 	.word	0x0810e660

08109920 <_write_r>:
 8109920:	b538      	push	{r3, r4, r5, lr}
 8109922:	4d07      	ldr	r5, [pc, #28]	; (8109940 <_write_r+0x20>)
 8109924:	4604      	mov	r4, r0
 8109926:	4608      	mov	r0, r1
 8109928:	4611      	mov	r1, r2
 810992a:	2200      	movs	r2, #0
 810992c:	602a      	str	r2, [r5, #0]
 810992e:	461a      	mov	r2, r3
 8109930:	f7f9 f8dd 	bl	8102aee <_write>
 8109934:	1c43      	adds	r3, r0, #1
 8109936:	d102      	bne.n	810993e <_write_r+0x1e>
 8109938:	682b      	ldr	r3, [r5, #0]
 810993a:	b103      	cbz	r3, 810993e <_write_r+0x1e>
 810993c:	6023      	str	r3, [r4, #0]
 810993e:	bd38      	pop	{r3, r4, r5, pc}
 8109940:	10000504 	.word	0x10000504

08109944 <__swsetup_r>:
 8109944:	4b32      	ldr	r3, [pc, #200]	; (8109a10 <__swsetup_r+0xcc>)
 8109946:	b570      	push	{r4, r5, r6, lr}
 8109948:	681d      	ldr	r5, [r3, #0]
 810994a:	4606      	mov	r6, r0
 810994c:	460c      	mov	r4, r1
 810994e:	b125      	cbz	r5, 810995a <__swsetup_r+0x16>
 8109950:	69ab      	ldr	r3, [r5, #24]
 8109952:	b913      	cbnz	r3, 810995a <__swsetup_r+0x16>
 8109954:	4628      	mov	r0, r5
 8109956:	f7fd fee9 	bl	810772c <__sinit>
 810995a:	4b2e      	ldr	r3, [pc, #184]	; (8109a14 <__swsetup_r+0xd0>)
 810995c:	429c      	cmp	r4, r3
 810995e:	d10f      	bne.n	8109980 <__swsetup_r+0x3c>
 8109960:	686c      	ldr	r4, [r5, #4]
 8109962:	89a3      	ldrh	r3, [r4, #12]
 8109964:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109968:	0719      	lsls	r1, r3, #28
 810996a:	d42c      	bmi.n	81099c6 <__swsetup_r+0x82>
 810996c:	06dd      	lsls	r5, r3, #27
 810996e:	d411      	bmi.n	8109994 <__swsetup_r+0x50>
 8109970:	2309      	movs	r3, #9
 8109972:	6033      	str	r3, [r6, #0]
 8109974:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8109978:	81a3      	strh	r3, [r4, #12]
 810997a:	f04f 30ff 	mov.w	r0, #4294967295
 810997e:	e03e      	b.n	81099fe <__swsetup_r+0xba>
 8109980:	4b25      	ldr	r3, [pc, #148]	; (8109a18 <__swsetup_r+0xd4>)
 8109982:	429c      	cmp	r4, r3
 8109984:	d101      	bne.n	810998a <__swsetup_r+0x46>
 8109986:	68ac      	ldr	r4, [r5, #8]
 8109988:	e7eb      	b.n	8109962 <__swsetup_r+0x1e>
 810998a:	4b24      	ldr	r3, [pc, #144]	; (8109a1c <__swsetup_r+0xd8>)
 810998c:	429c      	cmp	r4, r3
 810998e:	bf08      	it	eq
 8109990:	68ec      	ldreq	r4, [r5, #12]
 8109992:	e7e6      	b.n	8109962 <__swsetup_r+0x1e>
 8109994:	0758      	lsls	r0, r3, #29
 8109996:	d512      	bpl.n	81099be <__swsetup_r+0x7a>
 8109998:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810999a:	b141      	cbz	r1, 81099ae <__swsetup_r+0x6a>
 810999c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81099a0:	4299      	cmp	r1, r3
 81099a2:	d002      	beq.n	81099aa <__swsetup_r+0x66>
 81099a4:	4630      	mov	r0, r6
 81099a6:	f7fd ffab 	bl	8107900 <_free_r>
 81099aa:	2300      	movs	r3, #0
 81099ac:	6363      	str	r3, [r4, #52]	; 0x34
 81099ae:	89a3      	ldrh	r3, [r4, #12]
 81099b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81099b4:	81a3      	strh	r3, [r4, #12]
 81099b6:	2300      	movs	r3, #0
 81099b8:	6063      	str	r3, [r4, #4]
 81099ba:	6923      	ldr	r3, [r4, #16]
 81099bc:	6023      	str	r3, [r4, #0]
 81099be:	89a3      	ldrh	r3, [r4, #12]
 81099c0:	f043 0308 	orr.w	r3, r3, #8
 81099c4:	81a3      	strh	r3, [r4, #12]
 81099c6:	6923      	ldr	r3, [r4, #16]
 81099c8:	b94b      	cbnz	r3, 81099de <__swsetup_r+0x9a>
 81099ca:	89a3      	ldrh	r3, [r4, #12]
 81099cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 81099d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81099d4:	d003      	beq.n	81099de <__swsetup_r+0x9a>
 81099d6:	4621      	mov	r1, r4
 81099d8:	4630      	mov	r0, r6
 81099da:	f001 fa53 	bl	810ae84 <__smakebuf_r>
 81099de:	89a0      	ldrh	r0, [r4, #12]
 81099e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81099e4:	f010 0301 	ands.w	r3, r0, #1
 81099e8:	d00a      	beq.n	8109a00 <__swsetup_r+0xbc>
 81099ea:	2300      	movs	r3, #0
 81099ec:	60a3      	str	r3, [r4, #8]
 81099ee:	6963      	ldr	r3, [r4, #20]
 81099f0:	425b      	negs	r3, r3
 81099f2:	61a3      	str	r3, [r4, #24]
 81099f4:	6923      	ldr	r3, [r4, #16]
 81099f6:	b943      	cbnz	r3, 8109a0a <__swsetup_r+0xc6>
 81099f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 81099fc:	d1ba      	bne.n	8109974 <__swsetup_r+0x30>
 81099fe:	bd70      	pop	{r4, r5, r6, pc}
 8109a00:	0781      	lsls	r1, r0, #30
 8109a02:	bf58      	it	pl
 8109a04:	6963      	ldrpl	r3, [r4, #20]
 8109a06:	60a3      	str	r3, [r4, #8]
 8109a08:	e7f4      	b.n	81099f4 <__swsetup_r+0xb0>
 8109a0a:	2000      	movs	r0, #0
 8109a0c:	e7f7      	b.n	81099fe <__swsetup_r+0xba>
 8109a0e:	bf00      	nop
 8109a10:	10000064 	.word	0x10000064
 8109a14:	0810e680 	.word	0x0810e680
 8109a18:	0810e6a0 	.word	0x0810e6a0
 8109a1c:	0810e660 	.word	0x0810e660

08109a20 <_close_r>:
 8109a20:	b538      	push	{r3, r4, r5, lr}
 8109a22:	4d06      	ldr	r5, [pc, #24]	; (8109a3c <_close_r+0x1c>)
 8109a24:	2300      	movs	r3, #0
 8109a26:	4604      	mov	r4, r0
 8109a28:	4608      	mov	r0, r1
 8109a2a:	602b      	str	r3, [r5, #0]
 8109a2c:	f7f9 f87b 	bl	8102b26 <_close>
 8109a30:	1c43      	adds	r3, r0, #1
 8109a32:	d102      	bne.n	8109a3a <_close_r+0x1a>
 8109a34:	682b      	ldr	r3, [r5, #0]
 8109a36:	b103      	cbz	r3, 8109a3a <_close_r+0x1a>
 8109a38:	6023      	str	r3, [r4, #0]
 8109a3a:	bd38      	pop	{r3, r4, r5, pc}
 8109a3c:	10000504 	.word	0x10000504

08109a40 <quorem>:
 8109a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109a44:	6903      	ldr	r3, [r0, #16]
 8109a46:	690c      	ldr	r4, [r1, #16]
 8109a48:	42a3      	cmp	r3, r4
 8109a4a:	4607      	mov	r7, r0
 8109a4c:	f2c0 8081 	blt.w	8109b52 <quorem+0x112>
 8109a50:	3c01      	subs	r4, #1
 8109a52:	f101 0814 	add.w	r8, r1, #20
 8109a56:	f100 0514 	add.w	r5, r0, #20
 8109a5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109a5e:	9301      	str	r3, [sp, #4]
 8109a60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8109a64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109a68:	3301      	adds	r3, #1
 8109a6a:	429a      	cmp	r2, r3
 8109a6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8109a70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8109a74:	fbb2 f6f3 	udiv	r6, r2, r3
 8109a78:	d331      	bcc.n	8109ade <quorem+0x9e>
 8109a7a:	f04f 0e00 	mov.w	lr, #0
 8109a7e:	4640      	mov	r0, r8
 8109a80:	46ac      	mov	ip, r5
 8109a82:	46f2      	mov	sl, lr
 8109a84:	f850 2b04 	ldr.w	r2, [r0], #4
 8109a88:	b293      	uxth	r3, r2
 8109a8a:	fb06 e303 	mla	r3, r6, r3, lr
 8109a8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8109a92:	b29b      	uxth	r3, r3
 8109a94:	ebaa 0303 	sub.w	r3, sl, r3
 8109a98:	0c12      	lsrs	r2, r2, #16
 8109a9a:	f8dc a000 	ldr.w	sl, [ip]
 8109a9e:	fb06 e202 	mla	r2, r6, r2, lr
 8109aa2:	fa13 f38a 	uxtah	r3, r3, sl
 8109aa6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8109aaa:	fa1f fa82 	uxth.w	sl, r2
 8109aae:	f8dc 2000 	ldr.w	r2, [ip]
 8109ab2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8109ab6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109aba:	b29b      	uxth	r3, r3
 8109abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109ac0:	4581      	cmp	r9, r0
 8109ac2:	f84c 3b04 	str.w	r3, [ip], #4
 8109ac6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8109aca:	d2db      	bcs.n	8109a84 <quorem+0x44>
 8109acc:	f855 300b 	ldr.w	r3, [r5, fp]
 8109ad0:	b92b      	cbnz	r3, 8109ade <quorem+0x9e>
 8109ad2:	9b01      	ldr	r3, [sp, #4]
 8109ad4:	3b04      	subs	r3, #4
 8109ad6:	429d      	cmp	r5, r3
 8109ad8:	461a      	mov	r2, r3
 8109ada:	d32e      	bcc.n	8109b3a <quorem+0xfa>
 8109adc:	613c      	str	r4, [r7, #16]
 8109ade:	4638      	mov	r0, r7
 8109ae0:	f001 fd0c 	bl	810b4fc <__mcmp>
 8109ae4:	2800      	cmp	r0, #0
 8109ae6:	db24      	blt.n	8109b32 <quorem+0xf2>
 8109ae8:	3601      	adds	r6, #1
 8109aea:	4628      	mov	r0, r5
 8109aec:	f04f 0c00 	mov.w	ip, #0
 8109af0:	f858 2b04 	ldr.w	r2, [r8], #4
 8109af4:	f8d0 e000 	ldr.w	lr, [r0]
 8109af8:	b293      	uxth	r3, r2
 8109afa:	ebac 0303 	sub.w	r3, ip, r3
 8109afe:	0c12      	lsrs	r2, r2, #16
 8109b00:	fa13 f38e 	uxtah	r3, r3, lr
 8109b04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8109b08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109b0c:	b29b      	uxth	r3, r3
 8109b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109b12:	45c1      	cmp	r9, r8
 8109b14:	f840 3b04 	str.w	r3, [r0], #4
 8109b18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8109b1c:	d2e8      	bcs.n	8109af0 <quorem+0xb0>
 8109b1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109b22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109b26:	b922      	cbnz	r2, 8109b32 <quorem+0xf2>
 8109b28:	3b04      	subs	r3, #4
 8109b2a:	429d      	cmp	r5, r3
 8109b2c:	461a      	mov	r2, r3
 8109b2e:	d30a      	bcc.n	8109b46 <quorem+0x106>
 8109b30:	613c      	str	r4, [r7, #16]
 8109b32:	4630      	mov	r0, r6
 8109b34:	b003      	add	sp, #12
 8109b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109b3a:	6812      	ldr	r2, [r2, #0]
 8109b3c:	3b04      	subs	r3, #4
 8109b3e:	2a00      	cmp	r2, #0
 8109b40:	d1cc      	bne.n	8109adc <quorem+0x9c>
 8109b42:	3c01      	subs	r4, #1
 8109b44:	e7c7      	b.n	8109ad6 <quorem+0x96>
 8109b46:	6812      	ldr	r2, [r2, #0]
 8109b48:	3b04      	subs	r3, #4
 8109b4a:	2a00      	cmp	r2, #0
 8109b4c:	d1f0      	bne.n	8109b30 <quorem+0xf0>
 8109b4e:	3c01      	subs	r4, #1
 8109b50:	e7eb      	b.n	8109b2a <quorem+0xea>
 8109b52:	2000      	movs	r0, #0
 8109b54:	e7ee      	b.n	8109b34 <quorem+0xf4>
	...

08109b58 <_dtoa_r>:
 8109b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109b5c:	ed2d 8b02 	vpush	{d8}
 8109b60:	ec57 6b10 	vmov	r6, r7, d0
 8109b64:	b095      	sub	sp, #84	; 0x54
 8109b66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109b68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8109b6c:	9105      	str	r1, [sp, #20]
 8109b6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8109b72:	4604      	mov	r4, r0
 8109b74:	9209      	str	r2, [sp, #36]	; 0x24
 8109b76:	930f      	str	r3, [sp, #60]	; 0x3c
 8109b78:	b975      	cbnz	r5, 8109b98 <_dtoa_r+0x40>
 8109b7a:	2010      	movs	r0, #16
 8109b7c:	f001 f9c2 	bl	810af04 <malloc>
 8109b80:	4602      	mov	r2, r0
 8109b82:	6260      	str	r0, [r4, #36]	; 0x24
 8109b84:	b920      	cbnz	r0, 8109b90 <_dtoa_r+0x38>
 8109b86:	4bb2      	ldr	r3, [pc, #712]	; (8109e50 <_dtoa_r+0x2f8>)
 8109b88:	21ea      	movs	r1, #234	; 0xea
 8109b8a:	48b2      	ldr	r0, [pc, #712]	; (8109e54 <_dtoa_r+0x2fc>)
 8109b8c:	f002 fede 	bl	810c94c <__assert_func>
 8109b90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8109b94:	6005      	str	r5, [r0, #0]
 8109b96:	60c5      	str	r5, [r0, #12]
 8109b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109b9a:	6819      	ldr	r1, [r3, #0]
 8109b9c:	b151      	cbz	r1, 8109bb4 <_dtoa_r+0x5c>
 8109b9e:	685a      	ldr	r2, [r3, #4]
 8109ba0:	604a      	str	r2, [r1, #4]
 8109ba2:	2301      	movs	r3, #1
 8109ba4:	4093      	lsls	r3, r2
 8109ba6:	608b      	str	r3, [r1, #8]
 8109ba8:	4620      	mov	r0, r4
 8109baa:	f001 fa1f 	bl	810afec <_Bfree>
 8109bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109bb0:	2200      	movs	r2, #0
 8109bb2:	601a      	str	r2, [r3, #0]
 8109bb4:	1e3b      	subs	r3, r7, #0
 8109bb6:	bfb9      	ittee	lt
 8109bb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8109bbc:	9303      	strlt	r3, [sp, #12]
 8109bbe:	2300      	movge	r3, #0
 8109bc0:	f8c8 3000 	strge.w	r3, [r8]
 8109bc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8109bc8:	4ba3      	ldr	r3, [pc, #652]	; (8109e58 <_dtoa_r+0x300>)
 8109bca:	bfbc      	itt	lt
 8109bcc:	2201      	movlt	r2, #1
 8109bce:	f8c8 2000 	strlt.w	r2, [r8]
 8109bd2:	ea33 0309 	bics.w	r3, r3, r9
 8109bd6:	d11b      	bne.n	8109c10 <_dtoa_r+0xb8>
 8109bd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109bda:	f242 730f 	movw	r3, #9999	; 0x270f
 8109bde:	6013      	str	r3, [r2, #0]
 8109be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109be4:	4333      	orrs	r3, r6
 8109be6:	f000 857a 	beq.w	810a6de <_dtoa_r+0xb86>
 8109bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109bec:	b963      	cbnz	r3, 8109c08 <_dtoa_r+0xb0>
 8109bee:	4b9b      	ldr	r3, [pc, #620]	; (8109e5c <_dtoa_r+0x304>)
 8109bf0:	e024      	b.n	8109c3c <_dtoa_r+0xe4>
 8109bf2:	4b9b      	ldr	r3, [pc, #620]	; (8109e60 <_dtoa_r+0x308>)
 8109bf4:	9300      	str	r3, [sp, #0]
 8109bf6:	3308      	adds	r3, #8
 8109bf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8109bfa:	6013      	str	r3, [r2, #0]
 8109bfc:	9800      	ldr	r0, [sp, #0]
 8109bfe:	b015      	add	sp, #84	; 0x54
 8109c00:	ecbd 8b02 	vpop	{d8}
 8109c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109c08:	4b94      	ldr	r3, [pc, #592]	; (8109e5c <_dtoa_r+0x304>)
 8109c0a:	9300      	str	r3, [sp, #0]
 8109c0c:	3303      	adds	r3, #3
 8109c0e:	e7f3      	b.n	8109bf8 <_dtoa_r+0xa0>
 8109c10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109c14:	2200      	movs	r2, #0
 8109c16:	ec51 0b17 	vmov	r0, r1, d7
 8109c1a:	2300      	movs	r3, #0
 8109c1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8109c20:	f7f6 ffda 	bl	8100bd8 <__aeabi_dcmpeq>
 8109c24:	4680      	mov	r8, r0
 8109c26:	b158      	cbz	r0, 8109c40 <_dtoa_r+0xe8>
 8109c28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109c2a:	2301      	movs	r3, #1
 8109c2c:	6013      	str	r3, [r2, #0]
 8109c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109c30:	2b00      	cmp	r3, #0
 8109c32:	f000 8551 	beq.w	810a6d8 <_dtoa_r+0xb80>
 8109c36:	488b      	ldr	r0, [pc, #556]	; (8109e64 <_dtoa_r+0x30c>)
 8109c38:	6018      	str	r0, [r3, #0]
 8109c3a:	1e43      	subs	r3, r0, #1
 8109c3c:	9300      	str	r3, [sp, #0]
 8109c3e:	e7dd      	b.n	8109bfc <_dtoa_r+0xa4>
 8109c40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8109c44:	aa12      	add	r2, sp, #72	; 0x48
 8109c46:	a913      	add	r1, sp, #76	; 0x4c
 8109c48:	4620      	mov	r0, r4
 8109c4a:	f001 fd77 	bl	810b73c <__d2b>
 8109c4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8109c52:	4683      	mov	fp, r0
 8109c54:	2d00      	cmp	r5, #0
 8109c56:	d07c      	beq.n	8109d52 <_dtoa_r+0x1fa>
 8109c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109c5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8109c5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109c62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8109c66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8109c6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8109c6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8109c72:	4b7d      	ldr	r3, [pc, #500]	; (8109e68 <_dtoa_r+0x310>)
 8109c74:	2200      	movs	r2, #0
 8109c76:	4630      	mov	r0, r6
 8109c78:	4639      	mov	r1, r7
 8109c7a:	f7f6 fb8d 	bl	8100398 <__aeabi_dsub>
 8109c7e:	a36e      	add	r3, pc, #440	; (adr r3, 8109e38 <_dtoa_r+0x2e0>)
 8109c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c84:	f7f6 fd40 	bl	8100708 <__aeabi_dmul>
 8109c88:	a36d      	add	r3, pc, #436	; (adr r3, 8109e40 <_dtoa_r+0x2e8>)
 8109c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c8e:	f7f6 fb85 	bl	810039c <__adddf3>
 8109c92:	4606      	mov	r6, r0
 8109c94:	4628      	mov	r0, r5
 8109c96:	460f      	mov	r7, r1
 8109c98:	f7f6 fccc 	bl	8100634 <__aeabi_i2d>
 8109c9c:	a36a      	add	r3, pc, #424	; (adr r3, 8109e48 <_dtoa_r+0x2f0>)
 8109c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ca2:	f7f6 fd31 	bl	8100708 <__aeabi_dmul>
 8109ca6:	4602      	mov	r2, r0
 8109ca8:	460b      	mov	r3, r1
 8109caa:	4630      	mov	r0, r6
 8109cac:	4639      	mov	r1, r7
 8109cae:	f7f6 fb75 	bl	810039c <__adddf3>
 8109cb2:	4606      	mov	r6, r0
 8109cb4:	460f      	mov	r7, r1
 8109cb6:	f7f6 ffd7 	bl	8100c68 <__aeabi_d2iz>
 8109cba:	2200      	movs	r2, #0
 8109cbc:	4682      	mov	sl, r0
 8109cbe:	2300      	movs	r3, #0
 8109cc0:	4630      	mov	r0, r6
 8109cc2:	4639      	mov	r1, r7
 8109cc4:	f7f6 ff92 	bl	8100bec <__aeabi_dcmplt>
 8109cc8:	b148      	cbz	r0, 8109cde <_dtoa_r+0x186>
 8109cca:	4650      	mov	r0, sl
 8109ccc:	f7f6 fcb2 	bl	8100634 <__aeabi_i2d>
 8109cd0:	4632      	mov	r2, r6
 8109cd2:	463b      	mov	r3, r7
 8109cd4:	f7f6 ff80 	bl	8100bd8 <__aeabi_dcmpeq>
 8109cd8:	b908      	cbnz	r0, 8109cde <_dtoa_r+0x186>
 8109cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109cde:	f1ba 0f16 	cmp.w	sl, #22
 8109ce2:	d854      	bhi.n	8109d8e <_dtoa_r+0x236>
 8109ce4:	4b61      	ldr	r3, [pc, #388]	; (8109e6c <_dtoa_r+0x314>)
 8109ce6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8109cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109cee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109cf2:	f7f6 ff7b 	bl	8100bec <__aeabi_dcmplt>
 8109cf6:	2800      	cmp	r0, #0
 8109cf8:	d04b      	beq.n	8109d92 <_dtoa_r+0x23a>
 8109cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109cfe:	2300      	movs	r3, #0
 8109d00:	930e      	str	r3, [sp, #56]	; 0x38
 8109d02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109d04:	1b5d      	subs	r5, r3, r5
 8109d06:	1e6b      	subs	r3, r5, #1
 8109d08:	9304      	str	r3, [sp, #16]
 8109d0a:	bf43      	ittte	mi
 8109d0c:	2300      	movmi	r3, #0
 8109d0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8109d12:	9304      	strmi	r3, [sp, #16]
 8109d14:	f04f 0800 	movpl.w	r8, #0
 8109d18:	f1ba 0f00 	cmp.w	sl, #0
 8109d1c:	db3b      	blt.n	8109d96 <_dtoa_r+0x23e>
 8109d1e:	9b04      	ldr	r3, [sp, #16]
 8109d20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8109d24:	4453      	add	r3, sl
 8109d26:	9304      	str	r3, [sp, #16]
 8109d28:	2300      	movs	r3, #0
 8109d2a:	9306      	str	r3, [sp, #24]
 8109d2c:	9b05      	ldr	r3, [sp, #20]
 8109d2e:	2b09      	cmp	r3, #9
 8109d30:	d869      	bhi.n	8109e06 <_dtoa_r+0x2ae>
 8109d32:	2b05      	cmp	r3, #5
 8109d34:	bfc4      	itt	gt
 8109d36:	3b04      	subgt	r3, #4
 8109d38:	9305      	strgt	r3, [sp, #20]
 8109d3a:	9b05      	ldr	r3, [sp, #20]
 8109d3c:	f1a3 0302 	sub.w	r3, r3, #2
 8109d40:	bfcc      	ite	gt
 8109d42:	2500      	movgt	r5, #0
 8109d44:	2501      	movle	r5, #1
 8109d46:	2b03      	cmp	r3, #3
 8109d48:	d869      	bhi.n	8109e1e <_dtoa_r+0x2c6>
 8109d4a:	e8df f003 	tbb	[pc, r3]
 8109d4e:	4e2c      	.short	0x4e2c
 8109d50:	5a4c      	.short	0x5a4c
 8109d52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8109d56:	441d      	add	r5, r3
 8109d58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8109d5c:	2b20      	cmp	r3, #32
 8109d5e:	bfc1      	itttt	gt
 8109d60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8109d64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8109d68:	fa09 f303 	lslgt.w	r3, r9, r3
 8109d6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8109d70:	bfda      	itte	le
 8109d72:	f1c3 0320 	rsble	r3, r3, #32
 8109d76:	fa06 f003 	lslle.w	r0, r6, r3
 8109d7a:	4318      	orrgt	r0, r3
 8109d7c:	f7f6 fc4a 	bl	8100614 <__aeabi_ui2d>
 8109d80:	2301      	movs	r3, #1
 8109d82:	4606      	mov	r6, r0
 8109d84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8109d88:	3d01      	subs	r5, #1
 8109d8a:	9310      	str	r3, [sp, #64]	; 0x40
 8109d8c:	e771      	b.n	8109c72 <_dtoa_r+0x11a>
 8109d8e:	2301      	movs	r3, #1
 8109d90:	e7b6      	b.n	8109d00 <_dtoa_r+0x1a8>
 8109d92:	900e      	str	r0, [sp, #56]	; 0x38
 8109d94:	e7b5      	b.n	8109d02 <_dtoa_r+0x1aa>
 8109d96:	f1ca 0300 	rsb	r3, sl, #0
 8109d9a:	9306      	str	r3, [sp, #24]
 8109d9c:	2300      	movs	r3, #0
 8109d9e:	eba8 080a 	sub.w	r8, r8, sl
 8109da2:	930d      	str	r3, [sp, #52]	; 0x34
 8109da4:	e7c2      	b.n	8109d2c <_dtoa_r+0x1d4>
 8109da6:	2300      	movs	r3, #0
 8109da8:	9308      	str	r3, [sp, #32]
 8109daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109dac:	2b00      	cmp	r3, #0
 8109dae:	dc39      	bgt.n	8109e24 <_dtoa_r+0x2cc>
 8109db0:	f04f 0901 	mov.w	r9, #1
 8109db4:	f8cd 9004 	str.w	r9, [sp, #4]
 8109db8:	464b      	mov	r3, r9
 8109dba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8109dbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8109dc0:	2200      	movs	r2, #0
 8109dc2:	6042      	str	r2, [r0, #4]
 8109dc4:	2204      	movs	r2, #4
 8109dc6:	f102 0614 	add.w	r6, r2, #20
 8109dca:	429e      	cmp	r6, r3
 8109dcc:	6841      	ldr	r1, [r0, #4]
 8109dce:	d92f      	bls.n	8109e30 <_dtoa_r+0x2d8>
 8109dd0:	4620      	mov	r0, r4
 8109dd2:	f001 f8cb 	bl	810af6c <_Balloc>
 8109dd6:	9000      	str	r0, [sp, #0]
 8109dd8:	2800      	cmp	r0, #0
 8109dda:	d14b      	bne.n	8109e74 <_dtoa_r+0x31c>
 8109ddc:	4b24      	ldr	r3, [pc, #144]	; (8109e70 <_dtoa_r+0x318>)
 8109dde:	4602      	mov	r2, r0
 8109de0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8109de4:	e6d1      	b.n	8109b8a <_dtoa_r+0x32>
 8109de6:	2301      	movs	r3, #1
 8109de8:	e7de      	b.n	8109da8 <_dtoa_r+0x250>
 8109dea:	2300      	movs	r3, #0
 8109dec:	9308      	str	r3, [sp, #32]
 8109dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109df0:	eb0a 0903 	add.w	r9, sl, r3
 8109df4:	f109 0301 	add.w	r3, r9, #1
 8109df8:	2b01      	cmp	r3, #1
 8109dfa:	9301      	str	r3, [sp, #4]
 8109dfc:	bfb8      	it	lt
 8109dfe:	2301      	movlt	r3, #1
 8109e00:	e7dd      	b.n	8109dbe <_dtoa_r+0x266>
 8109e02:	2301      	movs	r3, #1
 8109e04:	e7f2      	b.n	8109dec <_dtoa_r+0x294>
 8109e06:	2501      	movs	r5, #1
 8109e08:	2300      	movs	r3, #0
 8109e0a:	9305      	str	r3, [sp, #20]
 8109e0c:	9508      	str	r5, [sp, #32]
 8109e0e:	f04f 39ff 	mov.w	r9, #4294967295
 8109e12:	2200      	movs	r2, #0
 8109e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8109e18:	2312      	movs	r3, #18
 8109e1a:	9209      	str	r2, [sp, #36]	; 0x24
 8109e1c:	e7cf      	b.n	8109dbe <_dtoa_r+0x266>
 8109e1e:	2301      	movs	r3, #1
 8109e20:	9308      	str	r3, [sp, #32]
 8109e22:	e7f4      	b.n	8109e0e <_dtoa_r+0x2b6>
 8109e24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8109e28:	f8cd 9004 	str.w	r9, [sp, #4]
 8109e2c:	464b      	mov	r3, r9
 8109e2e:	e7c6      	b.n	8109dbe <_dtoa_r+0x266>
 8109e30:	3101      	adds	r1, #1
 8109e32:	6041      	str	r1, [r0, #4]
 8109e34:	0052      	lsls	r2, r2, #1
 8109e36:	e7c6      	b.n	8109dc6 <_dtoa_r+0x26e>
 8109e38:	636f4361 	.word	0x636f4361
 8109e3c:	3fd287a7 	.word	0x3fd287a7
 8109e40:	8b60c8b3 	.word	0x8b60c8b3
 8109e44:	3fc68a28 	.word	0x3fc68a28
 8109e48:	509f79fb 	.word	0x509f79fb
 8109e4c:	3fd34413 	.word	0x3fd34413
 8109e50:	0810e85e 	.word	0x0810e85e
 8109e54:	0810e875 	.word	0x0810e875
 8109e58:	7ff00000 	.word	0x7ff00000
 8109e5c:	0810e85a 	.word	0x0810e85a
 8109e60:	0810e851 	.word	0x0810e851
 8109e64:	0810eada 	.word	0x0810eada
 8109e68:	3ff80000 	.word	0x3ff80000
 8109e6c:	0810e9f0 	.word	0x0810e9f0
 8109e70:	0810e8d4 	.word	0x0810e8d4
 8109e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109e76:	9a00      	ldr	r2, [sp, #0]
 8109e78:	601a      	str	r2, [r3, #0]
 8109e7a:	9b01      	ldr	r3, [sp, #4]
 8109e7c:	2b0e      	cmp	r3, #14
 8109e7e:	f200 80ad 	bhi.w	8109fdc <_dtoa_r+0x484>
 8109e82:	2d00      	cmp	r5, #0
 8109e84:	f000 80aa 	beq.w	8109fdc <_dtoa_r+0x484>
 8109e88:	f1ba 0f00 	cmp.w	sl, #0
 8109e8c:	dd36      	ble.n	8109efc <_dtoa_r+0x3a4>
 8109e8e:	4ac3      	ldr	r2, [pc, #780]	; (810a19c <_dtoa_r+0x644>)
 8109e90:	f00a 030f 	and.w	r3, sl, #15
 8109e94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109e98:	ed93 7b00 	vldr	d7, [r3]
 8109e9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8109ea0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8109ea4:	eeb0 8a47 	vmov.f32	s16, s14
 8109ea8:	eef0 8a67 	vmov.f32	s17, s15
 8109eac:	d016      	beq.n	8109edc <_dtoa_r+0x384>
 8109eae:	4bbc      	ldr	r3, [pc, #752]	; (810a1a0 <_dtoa_r+0x648>)
 8109eb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109eb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8109eb8:	f7f6 fd50 	bl	810095c <__aeabi_ddiv>
 8109ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109ec0:	f007 070f 	and.w	r7, r7, #15
 8109ec4:	2503      	movs	r5, #3
 8109ec6:	4eb6      	ldr	r6, [pc, #728]	; (810a1a0 <_dtoa_r+0x648>)
 8109ec8:	b957      	cbnz	r7, 8109ee0 <_dtoa_r+0x388>
 8109eca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8109ece:	ec53 2b18 	vmov	r2, r3, d8
 8109ed2:	f7f6 fd43 	bl	810095c <__aeabi_ddiv>
 8109ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109eda:	e029      	b.n	8109f30 <_dtoa_r+0x3d8>
 8109edc:	2502      	movs	r5, #2
 8109ede:	e7f2      	b.n	8109ec6 <_dtoa_r+0x36e>
 8109ee0:	07f9      	lsls	r1, r7, #31
 8109ee2:	d508      	bpl.n	8109ef6 <_dtoa_r+0x39e>
 8109ee4:	ec51 0b18 	vmov	r0, r1, d8
 8109ee8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109eec:	f7f6 fc0c 	bl	8100708 <__aeabi_dmul>
 8109ef0:	ec41 0b18 	vmov	d8, r0, r1
 8109ef4:	3501      	adds	r5, #1
 8109ef6:	107f      	asrs	r7, r7, #1
 8109ef8:	3608      	adds	r6, #8
 8109efa:	e7e5      	b.n	8109ec8 <_dtoa_r+0x370>
 8109efc:	f000 80a6 	beq.w	810a04c <_dtoa_r+0x4f4>
 8109f00:	f1ca 0600 	rsb	r6, sl, #0
 8109f04:	4ba5      	ldr	r3, [pc, #660]	; (810a19c <_dtoa_r+0x644>)
 8109f06:	4fa6      	ldr	r7, [pc, #664]	; (810a1a0 <_dtoa_r+0x648>)
 8109f08:	f006 020f 	and.w	r2, r6, #15
 8109f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109f18:	f7f6 fbf6 	bl	8100708 <__aeabi_dmul>
 8109f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109f20:	1136      	asrs	r6, r6, #4
 8109f22:	2300      	movs	r3, #0
 8109f24:	2502      	movs	r5, #2
 8109f26:	2e00      	cmp	r6, #0
 8109f28:	f040 8085 	bne.w	810a036 <_dtoa_r+0x4de>
 8109f2c:	2b00      	cmp	r3, #0
 8109f2e:	d1d2      	bne.n	8109ed6 <_dtoa_r+0x37e>
 8109f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109f32:	2b00      	cmp	r3, #0
 8109f34:	f000 808c 	beq.w	810a050 <_dtoa_r+0x4f8>
 8109f38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109f3c:	4b99      	ldr	r3, [pc, #612]	; (810a1a4 <_dtoa_r+0x64c>)
 8109f3e:	2200      	movs	r2, #0
 8109f40:	4630      	mov	r0, r6
 8109f42:	4639      	mov	r1, r7
 8109f44:	f7f6 fe52 	bl	8100bec <__aeabi_dcmplt>
 8109f48:	2800      	cmp	r0, #0
 8109f4a:	f000 8081 	beq.w	810a050 <_dtoa_r+0x4f8>
 8109f4e:	9b01      	ldr	r3, [sp, #4]
 8109f50:	2b00      	cmp	r3, #0
 8109f52:	d07d      	beq.n	810a050 <_dtoa_r+0x4f8>
 8109f54:	f1b9 0f00 	cmp.w	r9, #0
 8109f58:	dd3c      	ble.n	8109fd4 <_dtoa_r+0x47c>
 8109f5a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8109f5e:	9307      	str	r3, [sp, #28]
 8109f60:	2200      	movs	r2, #0
 8109f62:	4b91      	ldr	r3, [pc, #580]	; (810a1a8 <_dtoa_r+0x650>)
 8109f64:	4630      	mov	r0, r6
 8109f66:	4639      	mov	r1, r7
 8109f68:	f7f6 fbce 	bl	8100708 <__aeabi_dmul>
 8109f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109f70:	3501      	adds	r5, #1
 8109f72:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8109f76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109f7a:	4628      	mov	r0, r5
 8109f7c:	f7f6 fb5a 	bl	8100634 <__aeabi_i2d>
 8109f80:	4632      	mov	r2, r6
 8109f82:	463b      	mov	r3, r7
 8109f84:	f7f6 fbc0 	bl	8100708 <__aeabi_dmul>
 8109f88:	4b88      	ldr	r3, [pc, #544]	; (810a1ac <_dtoa_r+0x654>)
 8109f8a:	2200      	movs	r2, #0
 8109f8c:	f7f6 fa06 	bl	810039c <__adddf3>
 8109f90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8109f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109f98:	9303      	str	r3, [sp, #12]
 8109f9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109f9c:	2b00      	cmp	r3, #0
 8109f9e:	d15c      	bne.n	810a05a <_dtoa_r+0x502>
 8109fa0:	4b83      	ldr	r3, [pc, #524]	; (810a1b0 <_dtoa_r+0x658>)
 8109fa2:	2200      	movs	r2, #0
 8109fa4:	4630      	mov	r0, r6
 8109fa6:	4639      	mov	r1, r7
 8109fa8:	f7f6 f9f6 	bl	8100398 <__aeabi_dsub>
 8109fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109fb0:	4606      	mov	r6, r0
 8109fb2:	460f      	mov	r7, r1
 8109fb4:	f7f6 fe38 	bl	8100c28 <__aeabi_dcmpgt>
 8109fb8:	2800      	cmp	r0, #0
 8109fba:	f040 8296 	bne.w	810a4ea <_dtoa_r+0x992>
 8109fbe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8109fc2:	4630      	mov	r0, r6
 8109fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109fc8:	4639      	mov	r1, r7
 8109fca:	f7f6 fe0f 	bl	8100bec <__aeabi_dcmplt>
 8109fce:	2800      	cmp	r0, #0
 8109fd0:	f040 8288 	bne.w	810a4e4 <_dtoa_r+0x98c>
 8109fd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109fd8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8109fdc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109fde:	2b00      	cmp	r3, #0
 8109fe0:	f2c0 8158 	blt.w	810a294 <_dtoa_r+0x73c>
 8109fe4:	f1ba 0f0e 	cmp.w	sl, #14
 8109fe8:	f300 8154 	bgt.w	810a294 <_dtoa_r+0x73c>
 8109fec:	4b6b      	ldr	r3, [pc, #428]	; (810a19c <_dtoa_r+0x644>)
 8109fee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8109ff2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109ff8:	2b00      	cmp	r3, #0
 8109ffa:	f280 80e3 	bge.w	810a1c4 <_dtoa_r+0x66c>
 8109ffe:	9b01      	ldr	r3, [sp, #4]
 810a000:	2b00      	cmp	r3, #0
 810a002:	f300 80df 	bgt.w	810a1c4 <_dtoa_r+0x66c>
 810a006:	f040 826d 	bne.w	810a4e4 <_dtoa_r+0x98c>
 810a00a:	4b69      	ldr	r3, [pc, #420]	; (810a1b0 <_dtoa_r+0x658>)
 810a00c:	2200      	movs	r2, #0
 810a00e:	4640      	mov	r0, r8
 810a010:	4649      	mov	r1, r9
 810a012:	f7f6 fb79 	bl	8100708 <__aeabi_dmul>
 810a016:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810a01a:	f7f6 fdfb 	bl	8100c14 <__aeabi_dcmpge>
 810a01e:	9e01      	ldr	r6, [sp, #4]
 810a020:	4637      	mov	r7, r6
 810a022:	2800      	cmp	r0, #0
 810a024:	f040 8243 	bne.w	810a4ae <_dtoa_r+0x956>
 810a028:	9d00      	ldr	r5, [sp, #0]
 810a02a:	2331      	movs	r3, #49	; 0x31
 810a02c:	f805 3b01 	strb.w	r3, [r5], #1
 810a030:	f10a 0a01 	add.w	sl, sl, #1
 810a034:	e23f      	b.n	810a4b6 <_dtoa_r+0x95e>
 810a036:	07f2      	lsls	r2, r6, #31
 810a038:	d505      	bpl.n	810a046 <_dtoa_r+0x4ee>
 810a03a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a03e:	f7f6 fb63 	bl	8100708 <__aeabi_dmul>
 810a042:	3501      	adds	r5, #1
 810a044:	2301      	movs	r3, #1
 810a046:	1076      	asrs	r6, r6, #1
 810a048:	3708      	adds	r7, #8
 810a04a:	e76c      	b.n	8109f26 <_dtoa_r+0x3ce>
 810a04c:	2502      	movs	r5, #2
 810a04e:	e76f      	b.n	8109f30 <_dtoa_r+0x3d8>
 810a050:	9b01      	ldr	r3, [sp, #4]
 810a052:	f8cd a01c 	str.w	sl, [sp, #28]
 810a056:	930c      	str	r3, [sp, #48]	; 0x30
 810a058:	e78d      	b.n	8109f76 <_dtoa_r+0x41e>
 810a05a:	9900      	ldr	r1, [sp, #0]
 810a05c:	980c      	ldr	r0, [sp, #48]	; 0x30
 810a05e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810a060:	4b4e      	ldr	r3, [pc, #312]	; (810a19c <_dtoa_r+0x644>)
 810a062:	ed9d 7b02 	vldr	d7, [sp, #8]
 810a066:	4401      	add	r1, r0
 810a068:	9102      	str	r1, [sp, #8]
 810a06a:	9908      	ldr	r1, [sp, #32]
 810a06c:	eeb0 8a47 	vmov.f32	s16, s14
 810a070:	eef0 8a67 	vmov.f32	s17, s15
 810a074:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a078:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810a07c:	2900      	cmp	r1, #0
 810a07e:	d045      	beq.n	810a10c <_dtoa_r+0x5b4>
 810a080:	494c      	ldr	r1, [pc, #304]	; (810a1b4 <_dtoa_r+0x65c>)
 810a082:	2000      	movs	r0, #0
 810a084:	f7f6 fc6a 	bl	810095c <__aeabi_ddiv>
 810a088:	ec53 2b18 	vmov	r2, r3, d8
 810a08c:	f7f6 f984 	bl	8100398 <__aeabi_dsub>
 810a090:	9d00      	ldr	r5, [sp, #0]
 810a092:	ec41 0b18 	vmov	d8, r0, r1
 810a096:	4639      	mov	r1, r7
 810a098:	4630      	mov	r0, r6
 810a09a:	f7f6 fde5 	bl	8100c68 <__aeabi_d2iz>
 810a09e:	900c      	str	r0, [sp, #48]	; 0x30
 810a0a0:	f7f6 fac8 	bl	8100634 <__aeabi_i2d>
 810a0a4:	4602      	mov	r2, r0
 810a0a6:	460b      	mov	r3, r1
 810a0a8:	4630      	mov	r0, r6
 810a0aa:	4639      	mov	r1, r7
 810a0ac:	f7f6 f974 	bl	8100398 <__aeabi_dsub>
 810a0b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a0b2:	3330      	adds	r3, #48	; 0x30
 810a0b4:	f805 3b01 	strb.w	r3, [r5], #1
 810a0b8:	ec53 2b18 	vmov	r2, r3, d8
 810a0bc:	4606      	mov	r6, r0
 810a0be:	460f      	mov	r7, r1
 810a0c0:	f7f6 fd94 	bl	8100bec <__aeabi_dcmplt>
 810a0c4:	2800      	cmp	r0, #0
 810a0c6:	d165      	bne.n	810a194 <_dtoa_r+0x63c>
 810a0c8:	4632      	mov	r2, r6
 810a0ca:	463b      	mov	r3, r7
 810a0cc:	4935      	ldr	r1, [pc, #212]	; (810a1a4 <_dtoa_r+0x64c>)
 810a0ce:	2000      	movs	r0, #0
 810a0d0:	f7f6 f962 	bl	8100398 <__aeabi_dsub>
 810a0d4:	ec53 2b18 	vmov	r2, r3, d8
 810a0d8:	f7f6 fd88 	bl	8100bec <__aeabi_dcmplt>
 810a0dc:	2800      	cmp	r0, #0
 810a0de:	f040 80b9 	bne.w	810a254 <_dtoa_r+0x6fc>
 810a0e2:	9b02      	ldr	r3, [sp, #8]
 810a0e4:	429d      	cmp	r5, r3
 810a0e6:	f43f af75 	beq.w	8109fd4 <_dtoa_r+0x47c>
 810a0ea:	4b2f      	ldr	r3, [pc, #188]	; (810a1a8 <_dtoa_r+0x650>)
 810a0ec:	ec51 0b18 	vmov	r0, r1, d8
 810a0f0:	2200      	movs	r2, #0
 810a0f2:	f7f6 fb09 	bl	8100708 <__aeabi_dmul>
 810a0f6:	4b2c      	ldr	r3, [pc, #176]	; (810a1a8 <_dtoa_r+0x650>)
 810a0f8:	ec41 0b18 	vmov	d8, r0, r1
 810a0fc:	2200      	movs	r2, #0
 810a0fe:	4630      	mov	r0, r6
 810a100:	4639      	mov	r1, r7
 810a102:	f7f6 fb01 	bl	8100708 <__aeabi_dmul>
 810a106:	4606      	mov	r6, r0
 810a108:	460f      	mov	r7, r1
 810a10a:	e7c4      	b.n	810a096 <_dtoa_r+0x53e>
 810a10c:	ec51 0b17 	vmov	r0, r1, d7
 810a110:	f7f6 fafa 	bl	8100708 <__aeabi_dmul>
 810a114:	9b02      	ldr	r3, [sp, #8]
 810a116:	9d00      	ldr	r5, [sp, #0]
 810a118:	930c      	str	r3, [sp, #48]	; 0x30
 810a11a:	ec41 0b18 	vmov	d8, r0, r1
 810a11e:	4639      	mov	r1, r7
 810a120:	4630      	mov	r0, r6
 810a122:	f7f6 fda1 	bl	8100c68 <__aeabi_d2iz>
 810a126:	9011      	str	r0, [sp, #68]	; 0x44
 810a128:	f7f6 fa84 	bl	8100634 <__aeabi_i2d>
 810a12c:	4602      	mov	r2, r0
 810a12e:	460b      	mov	r3, r1
 810a130:	4630      	mov	r0, r6
 810a132:	4639      	mov	r1, r7
 810a134:	f7f6 f930 	bl	8100398 <__aeabi_dsub>
 810a138:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a13a:	3330      	adds	r3, #48	; 0x30
 810a13c:	f805 3b01 	strb.w	r3, [r5], #1
 810a140:	9b02      	ldr	r3, [sp, #8]
 810a142:	429d      	cmp	r5, r3
 810a144:	4606      	mov	r6, r0
 810a146:	460f      	mov	r7, r1
 810a148:	f04f 0200 	mov.w	r2, #0
 810a14c:	d134      	bne.n	810a1b8 <_dtoa_r+0x660>
 810a14e:	4b19      	ldr	r3, [pc, #100]	; (810a1b4 <_dtoa_r+0x65c>)
 810a150:	ec51 0b18 	vmov	r0, r1, d8
 810a154:	f7f6 f922 	bl	810039c <__adddf3>
 810a158:	4602      	mov	r2, r0
 810a15a:	460b      	mov	r3, r1
 810a15c:	4630      	mov	r0, r6
 810a15e:	4639      	mov	r1, r7
 810a160:	f7f6 fd62 	bl	8100c28 <__aeabi_dcmpgt>
 810a164:	2800      	cmp	r0, #0
 810a166:	d175      	bne.n	810a254 <_dtoa_r+0x6fc>
 810a168:	ec53 2b18 	vmov	r2, r3, d8
 810a16c:	4911      	ldr	r1, [pc, #68]	; (810a1b4 <_dtoa_r+0x65c>)
 810a16e:	2000      	movs	r0, #0
 810a170:	f7f6 f912 	bl	8100398 <__aeabi_dsub>
 810a174:	4602      	mov	r2, r0
 810a176:	460b      	mov	r3, r1
 810a178:	4630      	mov	r0, r6
 810a17a:	4639      	mov	r1, r7
 810a17c:	f7f6 fd36 	bl	8100bec <__aeabi_dcmplt>
 810a180:	2800      	cmp	r0, #0
 810a182:	f43f af27 	beq.w	8109fd4 <_dtoa_r+0x47c>
 810a186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a188:	1e6b      	subs	r3, r5, #1
 810a18a:	930c      	str	r3, [sp, #48]	; 0x30
 810a18c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810a190:	2b30      	cmp	r3, #48	; 0x30
 810a192:	d0f8      	beq.n	810a186 <_dtoa_r+0x62e>
 810a194:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810a198:	e04a      	b.n	810a230 <_dtoa_r+0x6d8>
 810a19a:	bf00      	nop
 810a19c:	0810e9f0 	.word	0x0810e9f0
 810a1a0:	0810e9c8 	.word	0x0810e9c8
 810a1a4:	3ff00000 	.word	0x3ff00000
 810a1a8:	40240000 	.word	0x40240000
 810a1ac:	401c0000 	.word	0x401c0000
 810a1b0:	40140000 	.word	0x40140000
 810a1b4:	3fe00000 	.word	0x3fe00000
 810a1b8:	4baf      	ldr	r3, [pc, #700]	; (810a478 <_dtoa_r+0x920>)
 810a1ba:	f7f6 faa5 	bl	8100708 <__aeabi_dmul>
 810a1be:	4606      	mov	r6, r0
 810a1c0:	460f      	mov	r7, r1
 810a1c2:	e7ac      	b.n	810a11e <_dtoa_r+0x5c6>
 810a1c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810a1c8:	9d00      	ldr	r5, [sp, #0]
 810a1ca:	4642      	mov	r2, r8
 810a1cc:	464b      	mov	r3, r9
 810a1ce:	4630      	mov	r0, r6
 810a1d0:	4639      	mov	r1, r7
 810a1d2:	f7f6 fbc3 	bl	810095c <__aeabi_ddiv>
 810a1d6:	f7f6 fd47 	bl	8100c68 <__aeabi_d2iz>
 810a1da:	9002      	str	r0, [sp, #8]
 810a1dc:	f7f6 fa2a 	bl	8100634 <__aeabi_i2d>
 810a1e0:	4642      	mov	r2, r8
 810a1e2:	464b      	mov	r3, r9
 810a1e4:	f7f6 fa90 	bl	8100708 <__aeabi_dmul>
 810a1e8:	4602      	mov	r2, r0
 810a1ea:	460b      	mov	r3, r1
 810a1ec:	4630      	mov	r0, r6
 810a1ee:	4639      	mov	r1, r7
 810a1f0:	f7f6 f8d2 	bl	8100398 <__aeabi_dsub>
 810a1f4:	9e02      	ldr	r6, [sp, #8]
 810a1f6:	9f01      	ldr	r7, [sp, #4]
 810a1f8:	3630      	adds	r6, #48	; 0x30
 810a1fa:	f805 6b01 	strb.w	r6, [r5], #1
 810a1fe:	9e00      	ldr	r6, [sp, #0]
 810a200:	1bae      	subs	r6, r5, r6
 810a202:	42b7      	cmp	r7, r6
 810a204:	4602      	mov	r2, r0
 810a206:	460b      	mov	r3, r1
 810a208:	d137      	bne.n	810a27a <_dtoa_r+0x722>
 810a20a:	f7f6 f8c7 	bl	810039c <__adddf3>
 810a20e:	4642      	mov	r2, r8
 810a210:	464b      	mov	r3, r9
 810a212:	4606      	mov	r6, r0
 810a214:	460f      	mov	r7, r1
 810a216:	f7f6 fd07 	bl	8100c28 <__aeabi_dcmpgt>
 810a21a:	b9c8      	cbnz	r0, 810a250 <_dtoa_r+0x6f8>
 810a21c:	4642      	mov	r2, r8
 810a21e:	464b      	mov	r3, r9
 810a220:	4630      	mov	r0, r6
 810a222:	4639      	mov	r1, r7
 810a224:	f7f6 fcd8 	bl	8100bd8 <__aeabi_dcmpeq>
 810a228:	b110      	cbz	r0, 810a230 <_dtoa_r+0x6d8>
 810a22a:	9b02      	ldr	r3, [sp, #8]
 810a22c:	07d9      	lsls	r1, r3, #31
 810a22e:	d40f      	bmi.n	810a250 <_dtoa_r+0x6f8>
 810a230:	4620      	mov	r0, r4
 810a232:	4659      	mov	r1, fp
 810a234:	f000 feda 	bl	810afec <_Bfree>
 810a238:	2300      	movs	r3, #0
 810a23a:	702b      	strb	r3, [r5, #0]
 810a23c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810a23e:	f10a 0001 	add.w	r0, sl, #1
 810a242:	6018      	str	r0, [r3, #0]
 810a244:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a246:	2b00      	cmp	r3, #0
 810a248:	f43f acd8 	beq.w	8109bfc <_dtoa_r+0xa4>
 810a24c:	601d      	str	r5, [r3, #0]
 810a24e:	e4d5      	b.n	8109bfc <_dtoa_r+0xa4>
 810a250:	f8cd a01c 	str.w	sl, [sp, #28]
 810a254:	462b      	mov	r3, r5
 810a256:	461d      	mov	r5, r3
 810a258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a25c:	2a39      	cmp	r2, #57	; 0x39
 810a25e:	d108      	bne.n	810a272 <_dtoa_r+0x71a>
 810a260:	9a00      	ldr	r2, [sp, #0]
 810a262:	429a      	cmp	r2, r3
 810a264:	d1f7      	bne.n	810a256 <_dtoa_r+0x6fe>
 810a266:	9a07      	ldr	r2, [sp, #28]
 810a268:	9900      	ldr	r1, [sp, #0]
 810a26a:	3201      	adds	r2, #1
 810a26c:	9207      	str	r2, [sp, #28]
 810a26e:	2230      	movs	r2, #48	; 0x30
 810a270:	700a      	strb	r2, [r1, #0]
 810a272:	781a      	ldrb	r2, [r3, #0]
 810a274:	3201      	adds	r2, #1
 810a276:	701a      	strb	r2, [r3, #0]
 810a278:	e78c      	b.n	810a194 <_dtoa_r+0x63c>
 810a27a:	4b7f      	ldr	r3, [pc, #508]	; (810a478 <_dtoa_r+0x920>)
 810a27c:	2200      	movs	r2, #0
 810a27e:	f7f6 fa43 	bl	8100708 <__aeabi_dmul>
 810a282:	2200      	movs	r2, #0
 810a284:	2300      	movs	r3, #0
 810a286:	4606      	mov	r6, r0
 810a288:	460f      	mov	r7, r1
 810a28a:	f7f6 fca5 	bl	8100bd8 <__aeabi_dcmpeq>
 810a28e:	2800      	cmp	r0, #0
 810a290:	d09b      	beq.n	810a1ca <_dtoa_r+0x672>
 810a292:	e7cd      	b.n	810a230 <_dtoa_r+0x6d8>
 810a294:	9a08      	ldr	r2, [sp, #32]
 810a296:	2a00      	cmp	r2, #0
 810a298:	f000 80c4 	beq.w	810a424 <_dtoa_r+0x8cc>
 810a29c:	9a05      	ldr	r2, [sp, #20]
 810a29e:	2a01      	cmp	r2, #1
 810a2a0:	f300 80a8 	bgt.w	810a3f4 <_dtoa_r+0x89c>
 810a2a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 810a2a6:	2a00      	cmp	r2, #0
 810a2a8:	f000 80a0 	beq.w	810a3ec <_dtoa_r+0x894>
 810a2ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810a2b0:	9e06      	ldr	r6, [sp, #24]
 810a2b2:	4645      	mov	r5, r8
 810a2b4:	9a04      	ldr	r2, [sp, #16]
 810a2b6:	2101      	movs	r1, #1
 810a2b8:	441a      	add	r2, r3
 810a2ba:	4620      	mov	r0, r4
 810a2bc:	4498      	add	r8, r3
 810a2be:	9204      	str	r2, [sp, #16]
 810a2c0:	f000 ff9a 	bl	810b1f8 <__i2b>
 810a2c4:	4607      	mov	r7, r0
 810a2c6:	2d00      	cmp	r5, #0
 810a2c8:	dd0b      	ble.n	810a2e2 <_dtoa_r+0x78a>
 810a2ca:	9b04      	ldr	r3, [sp, #16]
 810a2cc:	2b00      	cmp	r3, #0
 810a2ce:	dd08      	ble.n	810a2e2 <_dtoa_r+0x78a>
 810a2d0:	42ab      	cmp	r3, r5
 810a2d2:	9a04      	ldr	r2, [sp, #16]
 810a2d4:	bfa8      	it	ge
 810a2d6:	462b      	movge	r3, r5
 810a2d8:	eba8 0803 	sub.w	r8, r8, r3
 810a2dc:	1aed      	subs	r5, r5, r3
 810a2de:	1ad3      	subs	r3, r2, r3
 810a2e0:	9304      	str	r3, [sp, #16]
 810a2e2:	9b06      	ldr	r3, [sp, #24]
 810a2e4:	b1fb      	cbz	r3, 810a326 <_dtoa_r+0x7ce>
 810a2e6:	9b08      	ldr	r3, [sp, #32]
 810a2e8:	2b00      	cmp	r3, #0
 810a2ea:	f000 809f 	beq.w	810a42c <_dtoa_r+0x8d4>
 810a2ee:	2e00      	cmp	r6, #0
 810a2f0:	dd11      	ble.n	810a316 <_dtoa_r+0x7be>
 810a2f2:	4639      	mov	r1, r7
 810a2f4:	4632      	mov	r2, r6
 810a2f6:	4620      	mov	r0, r4
 810a2f8:	f001 f83a 	bl	810b370 <__pow5mult>
 810a2fc:	465a      	mov	r2, fp
 810a2fe:	4601      	mov	r1, r0
 810a300:	4607      	mov	r7, r0
 810a302:	4620      	mov	r0, r4
 810a304:	f000 ff8e 	bl	810b224 <__multiply>
 810a308:	4659      	mov	r1, fp
 810a30a:	9007      	str	r0, [sp, #28]
 810a30c:	4620      	mov	r0, r4
 810a30e:	f000 fe6d 	bl	810afec <_Bfree>
 810a312:	9b07      	ldr	r3, [sp, #28]
 810a314:	469b      	mov	fp, r3
 810a316:	9b06      	ldr	r3, [sp, #24]
 810a318:	1b9a      	subs	r2, r3, r6
 810a31a:	d004      	beq.n	810a326 <_dtoa_r+0x7ce>
 810a31c:	4659      	mov	r1, fp
 810a31e:	4620      	mov	r0, r4
 810a320:	f001 f826 	bl	810b370 <__pow5mult>
 810a324:	4683      	mov	fp, r0
 810a326:	2101      	movs	r1, #1
 810a328:	4620      	mov	r0, r4
 810a32a:	f000 ff65 	bl	810b1f8 <__i2b>
 810a32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a330:	2b00      	cmp	r3, #0
 810a332:	4606      	mov	r6, r0
 810a334:	dd7c      	ble.n	810a430 <_dtoa_r+0x8d8>
 810a336:	461a      	mov	r2, r3
 810a338:	4601      	mov	r1, r0
 810a33a:	4620      	mov	r0, r4
 810a33c:	f001 f818 	bl	810b370 <__pow5mult>
 810a340:	9b05      	ldr	r3, [sp, #20]
 810a342:	2b01      	cmp	r3, #1
 810a344:	4606      	mov	r6, r0
 810a346:	dd76      	ble.n	810a436 <_dtoa_r+0x8de>
 810a348:	2300      	movs	r3, #0
 810a34a:	9306      	str	r3, [sp, #24]
 810a34c:	6933      	ldr	r3, [r6, #16]
 810a34e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810a352:	6918      	ldr	r0, [r3, #16]
 810a354:	f000 ff00 	bl	810b158 <__hi0bits>
 810a358:	f1c0 0020 	rsb	r0, r0, #32
 810a35c:	9b04      	ldr	r3, [sp, #16]
 810a35e:	4418      	add	r0, r3
 810a360:	f010 001f 	ands.w	r0, r0, #31
 810a364:	f000 8086 	beq.w	810a474 <_dtoa_r+0x91c>
 810a368:	f1c0 0320 	rsb	r3, r0, #32
 810a36c:	2b04      	cmp	r3, #4
 810a36e:	dd7f      	ble.n	810a470 <_dtoa_r+0x918>
 810a370:	f1c0 001c 	rsb	r0, r0, #28
 810a374:	9b04      	ldr	r3, [sp, #16]
 810a376:	4403      	add	r3, r0
 810a378:	4480      	add	r8, r0
 810a37a:	4405      	add	r5, r0
 810a37c:	9304      	str	r3, [sp, #16]
 810a37e:	f1b8 0f00 	cmp.w	r8, #0
 810a382:	dd05      	ble.n	810a390 <_dtoa_r+0x838>
 810a384:	4659      	mov	r1, fp
 810a386:	4642      	mov	r2, r8
 810a388:	4620      	mov	r0, r4
 810a38a:	f001 f84b 	bl	810b424 <__lshift>
 810a38e:	4683      	mov	fp, r0
 810a390:	9b04      	ldr	r3, [sp, #16]
 810a392:	2b00      	cmp	r3, #0
 810a394:	dd05      	ble.n	810a3a2 <_dtoa_r+0x84a>
 810a396:	4631      	mov	r1, r6
 810a398:	461a      	mov	r2, r3
 810a39a:	4620      	mov	r0, r4
 810a39c:	f001 f842 	bl	810b424 <__lshift>
 810a3a0:	4606      	mov	r6, r0
 810a3a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810a3a4:	2b00      	cmp	r3, #0
 810a3a6:	d069      	beq.n	810a47c <_dtoa_r+0x924>
 810a3a8:	4631      	mov	r1, r6
 810a3aa:	4658      	mov	r0, fp
 810a3ac:	f001 f8a6 	bl	810b4fc <__mcmp>
 810a3b0:	2800      	cmp	r0, #0
 810a3b2:	da63      	bge.n	810a47c <_dtoa_r+0x924>
 810a3b4:	2300      	movs	r3, #0
 810a3b6:	4659      	mov	r1, fp
 810a3b8:	220a      	movs	r2, #10
 810a3ba:	4620      	mov	r0, r4
 810a3bc:	f000 fe38 	bl	810b030 <__multadd>
 810a3c0:	9b08      	ldr	r3, [sp, #32]
 810a3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a3c6:	4683      	mov	fp, r0
 810a3c8:	2b00      	cmp	r3, #0
 810a3ca:	f000 818f 	beq.w	810a6ec <_dtoa_r+0xb94>
 810a3ce:	4639      	mov	r1, r7
 810a3d0:	2300      	movs	r3, #0
 810a3d2:	220a      	movs	r2, #10
 810a3d4:	4620      	mov	r0, r4
 810a3d6:	f000 fe2b 	bl	810b030 <__multadd>
 810a3da:	f1b9 0f00 	cmp.w	r9, #0
 810a3de:	4607      	mov	r7, r0
 810a3e0:	f300 808e 	bgt.w	810a500 <_dtoa_r+0x9a8>
 810a3e4:	9b05      	ldr	r3, [sp, #20]
 810a3e6:	2b02      	cmp	r3, #2
 810a3e8:	dc50      	bgt.n	810a48c <_dtoa_r+0x934>
 810a3ea:	e089      	b.n	810a500 <_dtoa_r+0x9a8>
 810a3ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810a3ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810a3f2:	e75d      	b.n	810a2b0 <_dtoa_r+0x758>
 810a3f4:	9b01      	ldr	r3, [sp, #4]
 810a3f6:	1e5e      	subs	r6, r3, #1
 810a3f8:	9b06      	ldr	r3, [sp, #24]
 810a3fa:	42b3      	cmp	r3, r6
 810a3fc:	bfbf      	itttt	lt
 810a3fe:	9b06      	ldrlt	r3, [sp, #24]
 810a400:	9606      	strlt	r6, [sp, #24]
 810a402:	1af2      	sublt	r2, r6, r3
 810a404:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 810a406:	bfb6      	itet	lt
 810a408:	189b      	addlt	r3, r3, r2
 810a40a:	1b9e      	subge	r6, r3, r6
 810a40c:	930d      	strlt	r3, [sp, #52]	; 0x34
 810a40e:	9b01      	ldr	r3, [sp, #4]
 810a410:	bfb8      	it	lt
 810a412:	2600      	movlt	r6, #0
 810a414:	2b00      	cmp	r3, #0
 810a416:	bfb5      	itete	lt
 810a418:	eba8 0503 	sublt.w	r5, r8, r3
 810a41c:	9b01      	ldrge	r3, [sp, #4]
 810a41e:	2300      	movlt	r3, #0
 810a420:	4645      	movge	r5, r8
 810a422:	e747      	b.n	810a2b4 <_dtoa_r+0x75c>
 810a424:	9e06      	ldr	r6, [sp, #24]
 810a426:	9f08      	ldr	r7, [sp, #32]
 810a428:	4645      	mov	r5, r8
 810a42a:	e74c      	b.n	810a2c6 <_dtoa_r+0x76e>
 810a42c:	9a06      	ldr	r2, [sp, #24]
 810a42e:	e775      	b.n	810a31c <_dtoa_r+0x7c4>
 810a430:	9b05      	ldr	r3, [sp, #20]
 810a432:	2b01      	cmp	r3, #1
 810a434:	dc18      	bgt.n	810a468 <_dtoa_r+0x910>
 810a436:	9b02      	ldr	r3, [sp, #8]
 810a438:	b9b3      	cbnz	r3, 810a468 <_dtoa_r+0x910>
 810a43a:	9b03      	ldr	r3, [sp, #12]
 810a43c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a440:	b9a3      	cbnz	r3, 810a46c <_dtoa_r+0x914>
 810a442:	9b03      	ldr	r3, [sp, #12]
 810a444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810a448:	0d1b      	lsrs	r3, r3, #20
 810a44a:	051b      	lsls	r3, r3, #20
 810a44c:	b12b      	cbz	r3, 810a45a <_dtoa_r+0x902>
 810a44e:	9b04      	ldr	r3, [sp, #16]
 810a450:	3301      	adds	r3, #1
 810a452:	9304      	str	r3, [sp, #16]
 810a454:	f108 0801 	add.w	r8, r8, #1
 810a458:	2301      	movs	r3, #1
 810a45a:	9306      	str	r3, [sp, #24]
 810a45c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a45e:	2b00      	cmp	r3, #0
 810a460:	f47f af74 	bne.w	810a34c <_dtoa_r+0x7f4>
 810a464:	2001      	movs	r0, #1
 810a466:	e779      	b.n	810a35c <_dtoa_r+0x804>
 810a468:	2300      	movs	r3, #0
 810a46a:	e7f6      	b.n	810a45a <_dtoa_r+0x902>
 810a46c:	9b02      	ldr	r3, [sp, #8]
 810a46e:	e7f4      	b.n	810a45a <_dtoa_r+0x902>
 810a470:	d085      	beq.n	810a37e <_dtoa_r+0x826>
 810a472:	4618      	mov	r0, r3
 810a474:	301c      	adds	r0, #28
 810a476:	e77d      	b.n	810a374 <_dtoa_r+0x81c>
 810a478:	40240000 	.word	0x40240000
 810a47c:	9b01      	ldr	r3, [sp, #4]
 810a47e:	2b00      	cmp	r3, #0
 810a480:	dc38      	bgt.n	810a4f4 <_dtoa_r+0x99c>
 810a482:	9b05      	ldr	r3, [sp, #20]
 810a484:	2b02      	cmp	r3, #2
 810a486:	dd35      	ble.n	810a4f4 <_dtoa_r+0x99c>
 810a488:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810a48c:	f1b9 0f00 	cmp.w	r9, #0
 810a490:	d10d      	bne.n	810a4ae <_dtoa_r+0x956>
 810a492:	4631      	mov	r1, r6
 810a494:	464b      	mov	r3, r9
 810a496:	2205      	movs	r2, #5
 810a498:	4620      	mov	r0, r4
 810a49a:	f000 fdc9 	bl	810b030 <__multadd>
 810a49e:	4601      	mov	r1, r0
 810a4a0:	4606      	mov	r6, r0
 810a4a2:	4658      	mov	r0, fp
 810a4a4:	f001 f82a 	bl	810b4fc <__mcmp>
 810a4a8:	2800      	cmp	r0, #0
 810a4aa:	f73f adbd 	bgt.w	810a028 <_dtoa_r+0x4d0>
 810a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a4b0:	9d00      	ldr	r5, [sp, #0]
 810a4b2:	ea6f 0a03 	mvn.w	sl, r3
 810a4b6:	f04f 0800 	mov.w	r8, #0
 810a4ba:	4631      	mov	r1, r6
 810a4bc:	4620      	mov	r0, r4
 810a4be:	f000 fd95 	bl	810afec <_Bfree>
 810a4c2:	2f00      	cmp	r7, #0
 810a4c4:	f43f aeb4 	beq.w	810a230 <_dtoa_r+0x6d8>
 810a4c8:	f1b8 0f00 	cmp.w	r8, #0
 810a4cc:	d005      	beq.n	810a4da <_dtoa_r+0x982>
 810a4ce:	45b8      	cmp	r8, r7
 810a4d0:	d003      	beq.n	810a4da <_dtoa_r+0x982>
 810a4d2:	4641      	mov	r1, r8
 810a4d4:	4620      	mov	r0, r4
 810a4d6:	f000 fd89 	bl	810afec <_Bfree>
 810a4da:	4639      	mov	r1, r7
 810a4dc:	4620      	mov	r0, r4
 810a4de:	f000 fd85 	bl	810afec <_Bfree>
 810a4e2:	e6a5      	b.n	810a230 <_dtoa_r+0x6d8>
 810a4e4:	2600      	movs	r6, #0
 810a4e6:	4637      	mov	r7, r6
 810a4e8:	e7e1      	b.n	810a4ae <_dtoa_r+0x956>
 810a4ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 810a4ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810a4f0:	4637      	mov	r7, r6
 810a4f2:	e599      	b.n	810a028 <_dtoa_r+0x4d0>
 810a4f4:	9b08      	ldr	r3, [sp, #32]
 810a4f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810a4fa:	2b00      	cmp	r3, #0
 810a4fc:	f000 80fd 	beq.w	810a6fa <_dtoa_r+0xba2>
 810a500:	2d00      	cmp	r5, #0
 810a502:	dd05      	ble.n	810a510 <_dtoa_r+0x9b8>
 810a504:	4639      	mov	r1, r7
 810a506:	462a      	mov	r2, r5
 810a508:	4620      	mov	r0, r4
 810a50a:	f000 ff8b 	bl	810b424 <__lshift>
 810a50e:	4607      	mov	r7, r0
 810a510:	9b06      	ldr	r3, [sp, #24]
 810a512:	2b00      	cmp	r3, #0
 810a514:	d05c      	beq.n	810a5d0 <_dtoa_r+0xa78>
 810a516:	6879      	ldr	r1, [r7, #4]
 810a518:	4620      	mov	r0, r4
 810a51a:	f000 fd27 	bl	810af6c <_Balloc>
 810a51e:	4605      	mov	r5, r0
 810a520:	b928      	cbnz	r0, 810a52e <_dtoa_r+0x9d6>
 810a522:	4b80      	ldr	r3, [pc, #512]	; (810a724 <_dtoa_r+0xbcc>)
 810a524:	4602      	mov	r2, r0
 810a526:	f240 21ea 	movw	r1, #746	; 0x2ea
 810a52a:	f7ff bb2e 	b.w	8109b8a <_dtoa_r+0x32>
 810a52e:	693a      	ldr	r2, [r7, #16]
 810a530:	3202      	adds	r2, #2
 810a532:	0092      	lsls	r2, r2, #2
 810a534:	f107 010c 	add.w	r1, r7, #12
 810a538:	300c      	adds	r0, #12
 810a53a:	f000 fcfd 	bl	810af38 <memcpy>
 810a53e:	2201      	movs	r2, #1
 810a540:	4629      	mov	r1, r5
 810a542:	4620      	mov	r0, r4
 810a544:	f000 ff6e 	bl	810b424 <__lshift>
 810a548:	9b00      	ldr	r3, [sp, #0]
 810a54a:	3301      	adds	r3, #1
 810a54c:	9301      	str	r3, [sp, #4]
 810a54e:	9b00      	ldr	r3, [sp, #0]
 810a550:	444b      	add	r3, r9
 810a552:	9307      	str	r3, [sp, #28]
 810a554:	9b02      	ldr	r3, [sp, #8]
 810a556:	f003 0301 	and.w	r3, r3, #1
 810a55a:	46b8      	mov	r8, r7
 810a55c:	9306      	str	r3, [sp, #24]
 810a55e:	4607      	mov	r7, r0
 810a560:	9b01      	ldr	r3, [sp, #4]
 810a562:	4631      	mov	r1, r6
 810a564:	3b01      	subs	r3, #1
 810a566:	4658      	mov	r0, fp
 810a568:	9302      	str	r3, [sp, #8]
 810a56a:	f7ff fa69 	bl	8109a40 <quorem>
 810a56e:	4603      	mov	r3, r0
 810a570:	3330      	adds	r3, #48	; 0x30
 810a572:	9004      	str	r0, [sp, #16]
 810a574:	4641      	mov	r1, r8
 810a576:	4658      	mov	r0, fp
 810a578:	9308      	str	r3, [sp, #32]
 810a57a:	f000 ffbf 	bl	810b4fc <__mcmp>
 810a57e:	463a      	mov	r2, r7
 810a580:	4681      	mov	r9, r0
 810a582:	4631      	mov	r1, r6
 810a584:	4620      	mov	r0, r4
 810a586:	f000 ffd5 	bl	810b534 <__mdiff>
 810a58a:	68c2      	ldr	r2, [r0, #12]
 810a58c:	9b08      	ldr	r3, [sp, #32]
 810a58e:	4605      	mov	r5, r0
 810a590:	bb02      	cbnz	r2, 810a5d4 <_dtoa_r+0xa7c>
 810a592:	4601      	mov	r1, r0
 810a594:	4658      	mov	r0, fp
 810a596:	f000 ffb1 	bl	810b4fc <__mcmp>
 810a59a:	9b08      	ldr	r3, [sp, #32]
 810a59c:	4602      	mov	r2, r0
 810a59e:	4629      	mov	r1, r5
 810a5a0:	4620      	mov	r0, r4
 810a5a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 810a5a6:	f000 fd21 	bl	810afec <_Bfree>
 810a5aa:	9b05      	ldr	r3, [sp, #20]
 810a5ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a5ae:	9d01      	ldr	r5, [sp, #4]
 810a5b0:	ea43 0102 	orr.w	r1, r3, r2
 810a5b4:	9b06      	ldr	r3, [sp, #24]
 810a5b6:	430b      	orrs	r3, r1
 810a5b8:	9b08      	ldr	r3, [sp, #32]
 810a5ba:	d10d      	bne.n	810a5d8 <_dtoa_r+0xa80>
 810a5bc:	2b39      	cmp	r3, #57	; 0x39
 810a5be:	d029      	beq.n	810a614 <_dtoa_r+0xabc>
 810a5c0:	f1b9 0f00 	cmp.w	r9, #0
 810a5c4:	dd01      	ble.n	810a5ca <_dtoa_r+0xa72>
 810a5c6:	9b04      	ldr	r3, [sp, #16]
 810a5c8:	3331      	adds	r3, #49	; 0x31
 810a5ca:	9a02      	ldr	r2, [sp, #8]
 810a5cc:	7013      	strb	r3, [r2, #0]
 810a5ce:	e774      	b.n	810a4ba <_dtoa_r+0x962>
 810a5d0:	4638      	mov	r0, r7
 810a5d2:	e7b9      	b.n	810a548 <_dtoa_r+0x9f0>
 810a5d4:	2201      	movs	r2, #1
 810a5d6:	e7e2      	b.n	810a59e <_dtoa_r+0xa46>
 810a5d8:	f1b9 0f00 	cmp.w	r9, #0
 810a5dc:	db06      	blt.n	810a5ec <_dtoa_r+0xa94>
 810a5de:	9905      	ldr	r1, [sp, #20]
 810a5e0:	ea41 0909 	orr.w	r9, r1, r9
 810a5e4:	9906      	ldr	r1, [sp, #24]
 810a5e6:	ea59 0101 	orrs.w	r1, r9, r1
 810a5ea:	d120      	bne.n	810a62e <_dtoa_r+0xad6>
 810a5ec:	2a00      	cmp	r2, #0
 810a5ee:	ddec      	ble.n	810a5ca <_dtoa_r+0xa72>
 810a5f0:	4659      	mov	r1, fp
 810a5f2:	2201      	movs	r2, #1
 810a5f4:	4620      	mov	r0, r4
 810a5f6:	9301      	str	r3, [sp, #4]
 810a5f8:	f000 ff14 	bl	810b424 <__lshift>
 810a5fc:	4631      	mov	r1, r6
 810a5fe:	4683      	mov	fp, r0
 810a600:	f000 ff7c 	bl	810b4fc <__mcmp>
 810a604:	2800      	cmp	r0, #0
 810a606:	9b01      	ldr	r3, [sp, #4]
 810a608:	dc02      	bgt.n	810a610 <_dtoa_r+0xab8>
 810a60a:	d1de      	bne.n	810a5ca <_dtoa_r+0xa72>
 810a60c:	07da      	lsls	r2, r3, #31
 810a60e:	d5dc      	bpl.n	810a5ca <_dtoa_r+0xa72>
 810a610:	2b39      	cmp	r3, #57	; 0x39
 810a612:	d1d8      	bne.n	810a5c6 <_dtoa_r+0xa6e>
 810a614:	9a02      	ldr	r2, [sp, #8]
 810a616:	2339      	movs	r3, #57	; 0x39
 810a618:	7013      	strb	r3, [r2, #0]
 810a61a:	462b      	mov	r3, r5
 810a61c:	461d      	mov	r5, r3
 810a61e:	3b01      	subs	r3, #1
 810a620:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810a624:	2a39      	cmp	r2, #57	; 0x39
 810a626:	d050      	beq.n	810a6ca <_dtoa_r+0xb72>
 810a628:	3201      	adds	r2, #1
 810a62a:	701a      	strb	r2, [r3, #0]
 810a62c:	e745      	b.n	810a4ba <_dtoa_r+0x962>
 810a62e:	2a00      	cmp	r2, #0
 810a630:	dd03      	ble.n	810a63a <_dtoa_r+0xae2>
 810a632:	2b39      	cmp	r3, #57	; 0x39
 810a634:	d0ee      	beq.n	810a614 <_dtoa_r+0xabc>
 810a636:	3301      	adds	r3, #1
 810a638:	e7c7      	b.n	810a5ca <_dtoa_r+0xa72>
 810a63a:	9a01      	ldr	r2, [sp, #4]
 810a63c:	9907      	ldr	r1, [sp, #28]
 810a63e:	f802 3c01 	strb.w	r3, [r2, #-1]
 810a642:	428a      	cmp	r2, r1
 810a644:	d02a      	beq.n	810a69c <_dtoa_r+0xb44>
 810a646:	4659      	mov	r1, fp
 810a648:	2300      	movs	r3, #0
 810a64a:	220a      	movs	r2, #10
 810a64c:	4620      	mov	r0, r4
 810a64e:	f000 fcef 	bl	810b030 <__multadd>
 810a652:	45b8      	cmp	r8, r7
 810a654:	4683      	mov	fp, r0
 810a656:	f04f 0300 	mov.w	r3, #0
 810a65a:	f04f 020a 	mov.w	r2, #10
 810a65e:	4641      	mov	r1, r8
 810a660:	4620      	mov	r0, r4
 810a662:	d107      	bne.n	810a674 <_dtoa_r+0xb1c>
 810a664:	f000 fce4 	bl	810b030 <__multadd>
 810a668:	4680      	mov	r8, r0
 810a66a:	4607      	mov	r7, r0
 810a66c:	9b01      	ldr	r3, [sp, #4]
 810a66e:	3301      	adds	r3, #1
 810a670:	9301      	str	r3, [sp, #4]
 810a672:	e775      	b.n	810a560 <_dtoa_r+0xa08>
 810a674:	f000 fcdc 	bl	810b030 <__multadd>
 810a678:	4639      	mov	r1, r7
 810a67a:	4680      	mov	r8, r0
 810a67c:	2300      	movs	r3, #0
 810a67e:	220a      	movs	r2, #10
 810a680:	4620      	mov	r0, r4
 810a682:	f000 fcd5 	bl	810b030 <__multadd>
 810a686:	4607      	mov	r7, r0
 810a688:	e7f0      	b.n	810a66c <_dtoa_r+0xb14>
 810a68a:	f1b9 0f00 	cmp.w	r9, #0
 810a68e:	9a00      	ldr	r2, [sp, #0]
 810a690:	bfcc      	ite	gt
 810a692:	464d      	movgt	r5, r9
 810a694:	2501      	movle	r5, #1
 810a696:	4415      	add	r5, r2
 810a698:	f04f 0800 	mov.w	r8, #0
 810a69c:	4659      	mov	r1, fp
 810a69e:	2201      	movs	r2, #1
 810a6a0:	4620      	mov	r0, r4
 810a6a2:	9301      	str	r3, [sp, #4]
 810a6a4:	f000 febe 	bl	810b424 <__lshift>
 810a6a8:	4631      	mov	r1, r6
 810a6aa:	4683      	mov	fp, r0
 810a6ac:	f000 ff26 	bl	810b4fc <__mcmp>
 810a6b0:	2800      	cmp	r0, #0
 810a6b2:	dcb2      	bgt.n	810a61a <_dtoa_r+0xac2>
 810a6b4:	d102      	bne.n	810a6bc <_dtoa_r+0xb64>
 810a6b6:	9b01      	ldr	r3, [sp, #4]
 810a6b8:	07db      	lsls	r3, r3, #31
 810a6ba:	d4ae      	bmi.n	810a61a <_dtoa_r+0xac2>
 810a6bc:	462b      	mov	r3, r5
 810a6be:	461d      	mov	r5, r3
 810a6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a6c4:	2a30      	cmp	r2, #48	; 0x30
 810a6c6:	d0fa      	beq.n	810a6be <_dtoa_r+0xb66>
 810a6c8:	e6f7      	b.n	810a4ba <_dtoa_r+0x962>
 810a6ca:	9a00      	ldr	r2, [sp, #0]
 810a6cc:	429a      	cmp	r2, r3
 810a6ce:	d1a5      	bne.n	810a61c <_dtoa_r+0xac4>
 810a6d0:	f10a 0a01 	add.w	sl, sl, #1
 810a6d4:	2331      	movs	r3, #49	; 0x31
 810a6d6:	e779      	b.n	810a5cc <_dtoa_r+0xa74>
 810a6d8:	4b13      	ldr	r3, [pc, #76]	; (810a728 <_dtoa_r+0xbd0>)
 810a6da:	f7ff baaf 	b.w	8109c3c <_dtoa_r+0xe4>
 810a6de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a6e0:	2b00      	cmp	r3, #0
 810a6e2:	f47f aa86 	bne.w	8109bf2 <_dtoa_r+0x9a>
 810a6e6:	4b11      	ldr	r3, [pc, #68]	; (810a72c <_dtoa_r+0xbd4>)
 810a6e8:	f7ff baa8 	b.w	8109c3c <_dtoa_r+0xe4>
 810a6ec:	f1b9 0f00 	cmp.w	r9, #0
 810a6f0:	dc03      	bgt.n	810a6fa <_dtoa_r+0xba2>
 810a6f2:	9b05      	ldr	r3, [sp, #20]
 810a6f4:	2b02      	cmp	r3, #2
 810a6f6:	f73f aec9 	bgt.w	810a48c <_dtoa_r+0x934>
 810a6fa:	9d00      	ldr	r5, [sp, #0]
 810a6fc:	4631      	mov	r1, r6
 810a6fe:	4658      	mov	r0, fp
 810a700:	f7ff f99e 	bl	8109a40 <quorem>
 810a704:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810a708:	f805 3b01 	strb.w	r3, [r5], #1
 810a70c:	9a00      	ldr	r2, [sp, #0]
 810a70e:	1aaa      	subs	r2, r5, r2
 810a710:	4591      	cmp	r9, r2
 810a712:	ddba      	ble.n	810a68a <_dtoa_r+0xb32>
 810a714:	4659      	mov	r1, fp
 810a716:	2300      	movs	r3, #0
 810a718:	220a      	movs	r2, #10
 810a71a:	4620      	mov	r0, r4
 810a71c:	f000 fc88 	bl	810b030 <__multadd>
 810a720:	4683      	mov	fp, r0
 810a722:	e7eb      	b.n	810a6fc <_dtoa_r+0xba4>
 810a724:	0810e8d4 	.word	0x0810e8d4
 810a728:	0810ead9 	.word	0x0810ead9
 810a72c:	0810e851 	.word	0x0810e851

0810a730 <rshift>:
 810a730:	6903      	ldr	r3, [r0, #16]
 810a732:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a736:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a73a:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a73e:	f100 0414 	add.w	r4, r0, #20
 810a742:	dd45      	ble.n	810a7d0 <rshift+0xa0>
 810a744:	f011 011f 	ands.w	r1, r1, #31
 810a748:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a74c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a750:	d10c      	bne.n	810a76c <rshift+0x3c>
 810a752:	f100 0710 	add.w	r7, r0, #16
 810a756:	4629      	mov	r1, r5
 810a758:	42b1      	cmp	r1, r6
 810a75a:	d334      	bcc.n	810a7c6 <rshift+0x96>
 810a75c:	1a9b      	subs	r3, r3, r2
 810a75e:	009b      	lsls	r3, r3, #2
 810a760:	1eea      	subs	r2, r5, #3
 810a762:	4296      	cmp	r6, r2
 810a764:	bf38      	it	cc
 810a766:	2300      	movcc	r3, #0
 810a768:	4423      	add	r3, r4
 810a76a:	e015      	b.n	810a798 <rshift+0x68>
 810a76c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a770:	f1c1 0820 	rsb	r8, r1, #32
 810a774:	40cf      	lsrs	r7, r1
 810a776:	f105 0e04 	add.w	lr, r5, #4
 810a77a:	46a1      	mov	r9, r4
 810a77c:	4576      	cmp	r6, lr
 810a77e:	46f4      	mov	ip, lr
 810a780:	d815      	bhi.n	810a7ae <rshift+0x7e>
 810a782:	1a9b      	subs	r3, r3, r2
 810a784:	009a      	lsls	r2, r3, #2
 810a786:	3a04      	subs	r2, #4
 810a788:	3501      	adds	r5, #1
 810a78a:	42ae      	cmp	r6, r5
 810a78c:	bf38      	it	cc
 810a78e:	2200      	movcc	r2, #0
 810a790:	18a3      	adds	r3, r4, r2
 810a792:	50a7      	str	r7, [r4, r2]
 810a794:	b107      	cbz	r7, 810a798 <rshift+0x68>
 810a796:	3304      	adds	r3, #4
 810a798:	1b1a      	subs	r2, r3, r4
 810a79a:	42a3      	cmp	r3, r4
 810a79c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a7a0:	bf08      	it	eq
 810a7a2:	2300      	moveq	r3, #0
 810a7a4:	6102      	str	r2, [r0, #16]
 810a7a6:	bf08      	it	eq
 810a7a8:	6143      	streq	r3, [r0, #20]
 810a7aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a7ae:	f8dc c000 	ldr.w	ip, [ip]
 810a7b2:	fa0c fc08 	lsl.w	ip, ip, r8
 810a7b6:	ea4c 0707 	orr.w	r7, ip, r7
 810a7ba:	f849 7b04 	str.w	r7, [r9], #4
 810a7be:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a7c2:	40cf      	lsrs	r7, r1
 810a7c4:	e7da      	b.n	810a77c <rshift+0x4c>
 810a7c6:	f851 cb04 	ldr.w	ip, [r1], #4
 810a7ca:	f847 cf04 	str.w	ip, [r7, #4]!
 810a7ce:	e7c3      	b.n	810a758 <rshift+0x28>
 810a7d0:	4623      	mov	r3, r4
 810a7d2:	e7e1      	b.n	810a798 <rshift+0x68>

0810a7d4 <__hexdig_fun>:
 810a7d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a7d8:	2b09      	cmp	r3, #9
 810a7da:	d802      	bhi.n	810a7e2 <__hexdig_fun+0xe>
 810a7dc:	3820      	subs	r0, #32
 810a7de:	b2c0      	uxtb	r0, r0
 810a7e0:	4770      	bx	lr
 810a7e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a7e6:	2b05      	cmp	r3, #5
 810a7e8:	d801      	bhi.n	810a7ee <__hexdig_fun+0x1a>
 810a7ea:	3847      	subs	r0, #71	; 0x47
 810a7ec:	e7f7      	b.n	810a7de <__hexdig_fun+0xa>
 810a7ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a7f2:	2b05      	cmp	r3, #5
 810a7f4:	d801      	bhi.n	810a7fa <__hexdig_fun+0x26>
 810a7f6:	3827      	subs	r0, #39	; 0x27
 810a7f8:	e7f1      	b.n	810a7de <__hexdig_fun+0xa>
 810a7fa:	2000      	movs	r0, #0
 810a7fc:	4770      	bx	lr
	...

0810a800 <__gethex>:
 810a800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a804:	ed2d 8b02 	vpush	{d8}
 810a808:	b089      	sub	sp, #36	; 0x24
 810a80a:	ee08 0a10 	vmov	s16, r0
 810a80e:	9304      	str	r3, [sp, #16]
 810a810:	4bbc      	ldr	r3, [pc, #752]	; (810ab04 <__gethex+0x304>)
 810a812:	681b      	ldr	r3, [r3, #0]
 810a814:	9301      	str	r3, [sp, #4]
 810a816:	4618      	mov	r0, r3
 810a818:	468b      	mov	fp, r1
 810a81a:	4690      	mov	r8, r2
 810a81c:	f7f5 fd60 	bl	81002e0 <strlen>
 810a820:	9b01      	ldr	r3, [sp, #4]
 810a822:	f8db 2000 	ldr.w	r2, [fp]
 810a826:	4403      	add	r3, r0
 810a828:	4682      	mov	sl, r0
 810a82a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810a82e:	9305      	str	r3, [sp, #20]
 810a830:	1c93      	adds	r3, r2, #2
 810a832:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a836:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a83a:	32fe      	adds	r2, #254	; 0xfe
 810a83c:	18d1      	adds	r1, r2, r3
 810a83e:	461f      	mov	r7, r3
 810a840:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a844:	9100      	str	r1, [sp, #0]
 810a846:	2830      	cmp	r0, #48	; 0x30
 810a848:	d0f8      	beq.n	810a83c <__gethex+0x3c>
 810a84a:	f7ff ffc3 	bl	810a7d4 <__hexdig_fun>
 810a84e:	4604      	mov	r4, r0
 810a850:	2800      	cmp	r0, #0
 810a852:	d13a      	bne.n	810a8ca <__gethex+0xca>
 810a854:	9901      	ldr	r1, [sp, #4]
 810a856:	4652      	mov	r2, sl
 810a858:	4638      	mov	r0, r7
 810a85a:	f001 ff07 	bl	810c66c <strncmp>
 810a85e:	4605      	mov	r5, r0
 810a860:	2800      	cmp	r0, #0
 810a862:	d168      	bne.n	810a936 <__gethex+0x136>
 810a864:	f817 000a 	ldrb.w	r0, [r7, sl]
 810a868:	eb07 060a 	add.w	r6, r7, sl
 810a86c:	f7ff ffb2 	bl	810a7d4 <__hexdig_fun>
 810a870:	2800      	cmp	r0, #0
 810a872:	d062      	beq.n	810a93a <__gethex+0x13a>
 810a874:	4633      	mov	r3, r6
 810a876:	7818      	ldrb	r0, [r3, #0]
 810a878:	2830      	cmp	r0, #48	; 0x30
 810a87a:	461f      	mov	r7, r3
 810a87c:	f103 0301 	add.w	r3, r3, #1
 810a880:	d0f9      	beq.n	810a876 <__gethex+0x76>
 810a882:	f7ff ffa7 	bl	810a7d4 <__hexdig_fun>
 810a886:	2301      	movs	r3, #1
 810a888:	fab0 f480 	clz	r4, r0
 810a88c:	0964      	lsrs	r4, r4, #5
 810a88e:	4635      	mov	r5, r6
 810a890:	9300      	str	r3, [sp, #0]
 810a892:	463a      	mov	r2, r7
 810a894:	4616      	mov	r6, r2
 810a896:	3201      	adds	r2, #1
 810a898:	7830      	ldrb	r0, [r6, #0]
 810a89a:	f7ff ff9b 	bl	810a7d4 <__hexdig_fun>
 810a89e:	2800      	cmp	r0, #0
 810a8a0:	d1f8      	bne.n	810a894 <__gethex+0x94>
 810a8a2:	9901      	ldr	r1, [sp, #4]
 810a8a4:	4652      	mov	r2, sl
 810a8a6:	4630      	mov	r0, r6
 810a8a8:	f001 fee0 	bl	810c66c <strncmp>
 810a8ac:	b980      	cbnz	r0, 810a8d0 <__gethex+0xd0>
 810a8ae:	b94d      	cbnz	r5, 810a8c4 <__gethex+0xc4>
 810a8b0:	eb06 050a 	add.w	r5, r6, sl
 810a8b4:	462a      	mov	r2, r5
 810a8b6:	4616      	mov	r6, r2
 810a8b8:	3201      	adds	r2, #1
 810a8ba:	7830      	ldrb	r0, [r6, #0]
 810a8bc:	f7ff ff8a 	bl	810a7d4 <__hexdig_fun>
 810a8c0:	2800      	cmp	r0, #0
 810a8c2:	d1f8      	bne.n	810a8b6 <__gethex+0xb6>
 810a8c4:	1bad      	subs	r5, r5, r6
 810a8c6:	00ad      	lsls	r5, r5, #2
 810a8c8:	e004      	b.n	810a8d4 <__gethex+0xd4>
 810a8ca:	2400      	movs	r4, #0
 810a8cc:	4625      	mov	r5, r4
 810a8ce:	e7e0      	b.n	810a892 <__gethex+0x92>
 810a8d0:	2d00      	cmp	r5, #0
 810a8d2:	d1f7      	bne.n	810a8c4 <__gethex+0xc4>
 810a8d4:	7833      	ldrb	r3, [r6, #0]
 810a8d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a8da:	2b50      	cmp	r3, #80	; 0x50
 810a8dc:	d13b      	bne.n	810a956 <__gethex+0x156>
 810a8de:	7873      	ldrb	r3, [r6, #1]
 810a8e0:	2b2b      	cmp	r3, #43	; 0x2b
 810a8e2:	d02c      	beq.n	810a93e <__gethex+0x13e>
 810a8e4:	2b2d      	cmp	r3, #45	; 0x2d
 810a8e6:	d02e      	beq.n	810a946 <__gethex+0x146>
 810a8e8:	1c71      	adds	r1, r6, #1
 810a8ea:	f04f 0900 	mov.w	r9, #0
 810a8ee:	7808      	ldrb	r0, [r1, #0]
 810a8f0:	f7ff ff70 	bl	810a7d4 <__hexdig_fun>
 810a8f4:	1e43      	subs	r3, r0, #1
 810a8f6:	b2db      	uxtb	r3, r3
 810a8f8:	2b18      	cmp	r3, #24
 810a8fa:	d82c      	bhi.n	810a956 <__gethex+0x156>
 810a8fc:	f1a0 0210 	sub.w	r2, r0, #16
 810a900:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810a904:	f7ff ff66 	bl	810a7d4 <__hexdig_fun>
 810a908:	1e43      	subs	r3, r0, #1
 810a90a:	b2db      	uxtb	r3, r3
 810a90c:	2b18      	cmp	r3, #24
 810a90e:	d91d      	bls.n	810a94c <__gethex+0x14c>
 810a910:	f1b9 0f00 	cmp.w	r9, #0
 810a914:	d000      	beq.n	810a918 <__gethex+0x118>
 810a916:	4252      	negs	r2, r2
 810a918:	4415      	add	r5, r2
 810a91a:	f8cb 1000 	str.w	r1, [fp]
 810a91e:	b1e4      	cbz	r4, 810a95a <__gethex+0x15a>
 810a920:	9b00      	ldr	r3, [sp, #0]
 810a922:	2b00      	cmp	r3, #0
 810a924:	bf14      	ite	ne
 810a926:	2700      	movne	r7, #0
 810a928:	2706      	moveq	r7, #6
 810a92a:	4638      	mov	r0, r7
 810a92c:	b009      	add	sp, #36	; 0x24
 810a92e:	ecbd 8b02 	vpop	{d8}
 810a932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a936:	463e      	mov	r6, r7
 810a938:	4625      	mov	r5, r4
 810a93a:	2401      	movs	r4, #1
 810a93c:	e7ca      	b.n	810a8d4 <__gethex+0xd4>
 810a93e:	f04f 0900 	mov.w	r9, #0
 810a942:	1cb1      	adds	r1, r6, #2
 810a944:	e7d3      	b.n	810a8ee <__gethex+0xee>
 810a946:	f04f 0901 	mov.w	r9, #1
 810a94a:	e7fa      	b.n	810a942 <__gethex+0x142>
 810a94c:	230a      	movs	r3, #10
 810a94e:	fb03 0202 	mla	r2, r3, r2, r0
 810a952:	3a10      	subs	r2, #16
 810a954:	e7d4      	b.n	810a900 <__gethex+0x100>
 810a956:	4631      	mov	r1, r6
 810a958:	e7df      	b.n	810a91a <__gethex+0x11a>
 810a95a:	1bf3      	subs	r3, r6, r7
 810a95c:	3b01      	subs	r3, #1
 810a95e:	4621      	mov	r1, r4
 810a960:	2b07      	cmp	r3, #7
 810a962:	dc0b      	bgt.n	810a97c <__gethex+0x17c>
 810a964:	ee18 0a10 	vmov	r0, s16
 810a968:	f000 fb00 	bl	810af6c <_Balloc>
 810a96c:	4604      	mov	r4, r0
 810a96e:	b940      	cbnz	r0, 810a982 <__gethex+0x182>
 810a970:	4b65      	ldr	r3, [pc, #404]	; (810ab08 <__gethex+0x308>)
 810a972:	4602      	mov	r2, r0
 810a974:	21de      	movs	r1, #222	; 0xde
 810a976:	4865      	ldr	r0, [pc, #404]	; (810ab0c <__gethex+0x30c>)
 810a978:	f001 ffe8 	bl	810c94c <__assert_func>
 810a97c:	3101      	adds	r1, #1
 810a97e:	105b      	asrs	r3, r3, #1
 810a980:	e7ee      	b.n	810a960 <__gethex+0x160>
 810a982:	f100 0914 	add.w	r9, r0, #20
 810a986:	f04f 0b00 	mov.w	fp, #0
 810a98a:	f1ca 0301 	rsb	r3, sl, #1
 810a98e:	f8cd 9008 	str.w	r9, [sp, #8]
 810a992:	f8cd b000 	str.w	fp, [sp]
 810a996:	9306      	str	r3, [sp, #24]
 810a998:	42b7      	cmp	r7, r6
 810a99a:	d340      	bcc.n	810aa1e <__gethex+0x21e>
 810a99c:	9802      	ldr	r0, [sp, #8]
 810a99e:	9b00      	ldr	r3, [sp, #0]
 810a9a0:	f840 3b04 	str.w	r3, [r0], #4
 810a9a4:	eba0 0009 	sub.w	r0, r0, r9
 810a9a8:	1080      	asrs	r0, r0, #2
 810a9aa:	0146      	lsls	r6, r0, #5
 810a9ac:	6120      	str	r0, [r4, #16]
 810a9ae:	4618      	mov	r0, r3
 810a9b0:	f000 fbd2 	bl	810b158 <__hi0bits>
 810a9b4:	1a30      	subs	r0, r6, r0
 810a9b6:	f8d8 6000 	ldr.w	r6, [r8]
 810a9ba:	42b0      	cmp	r0, r6
 810a9bc:	dd63      	ble.n	810aa86 <__gethex+0x286>
 810a9be:	1b87      	subs	r7, r0, r6
 810a9c0:	4639      	mov	r1, r7
 810a9c2:	4620      	mov	r0, r4
 810a9c4:	f000 ff6c 	bl	810b8a0 <__any_on>
 810a9c8:	4682      	mov	sl, r0
 810a9ca:	b1a8      	cbz	r0, 810a9f8 <__gethex+0x1f8>
 810a9cc:	1e7b      	subs	r3, r7, #1
 810a9ce:	1159      	asrs	r1, r3, #5
 810a9d0:	f003 021f 	and.w	r2, r3, #31
 810a9d4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810a9d8:	f04f 0a01 	mov.w	sl, #1
 810a9dc:	fa0a f202 	lsl.w	r2, sl, r2
 810a9e0:	420a      	tst	r2, r1
 810a9e2:	d009      	beq.n	810a9f8 <__gethex+0x1f8>
 810a9e4:	4553      	cmp	r3, sl
 810a9e6:	dd05      	ble.n	810a9f4 <__gethex+0x1f4>
 810a9e8:	1eb9      	subs	r1, r7, #2
 810a9ea:	4620      	mov	r0, r4
 810a9ec:	f000 ff58 	bl	810b8a0 <__any_on>
 810a9f0:	2800      	cmp	r0, #0
 810a9f2:	d145      	bne.n	810aa80 <__gethex+0x280>
 810a9f4:	f04f 0a02 	mov.w	sl, #2
 810a9f8:	4639      	mov	r1, r7
 810a9fa:	4620      	mov	r0, r4
 810a9fc:	f7ff fe98 	bl	810a730 <rshift>
 810aa00:	443d      	add	r5, r7
 810aa02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810aa06:	42ab      	cmp	r3, r5
 810aa08:	da4c      	bge.n	810aaa4 <__gethex+0x2a4>
 810aa0a:	ee18 0a10 	vmov	r0, s16
 810aa0e:	4621      	mov	r1, r4
 810aa10:	f000 faec 	bl	810afec <_Bfree>
 810aa14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810aa16:	2300      	movs	r3, #0
 810aa18:	6013      	str	r3, [r2, #0]
 810aa1a:	27a3      	movs	r7, #163	; 0xa3
 810aa1c:	e785      	b.n	810a92a <__gethex+0x12a>
 810aa1e:	1e73      	subs	r3, r6, #1
 810aa20:	9a05      	ldr	r2, [sp, #20]
 810aa22:	9303      	str	r3, [sp, #12]
 810aa24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810aa28:	4293      	cmp	r3, r2
 810aa2a:	d019      	beq.n	810aa60 <__gethex+0x260>
 810aa2c:	f1bb 0f20 	cmp.w	fp, #32
 810aa30:	d107      	bne.n	810aa42 <__gethex+0x242>
 810aa32:	9b02      	ldr	r3, [sp, #8]
 810aa34:	9a00      	ldr	r2, [sp, #0]
 810aa36:	f843 2b04 	str.w	r2, [r3], #4
 810aa3a:	9302      	str	r3, [sp, #8]
 810aa3c:	2300      	movs	r3, #0
 810aa3e:	9300      	str	r3, [sp, #0]
 810aa40:	469b      	mov	fp, r3
 810aa42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810aa46:	f7ff fec5 	bl	810a7d4 <__hexdig_fun>
 810aa4a:	9b00      	ldr	r3, [sp, #0]
 810aa4c:	f000 000f 	and.w	r0, r0, #15
 810aa50:	fa00 f00b 	lsl.w	r0, r0, fp
 810aa54:	4303      	orrs	r3, r0
 810aa56:	9300      	str	r3, [sp, #0]
 810aa58:	f10b 0b04 	add.w	fp, fp, #4
 810aa5c:	9b03      	ldr	r3, [sp, #12]
 810aa5e:	e00d      	b.n	810aa7c <__gethex+0x27c>
 810aa60:	9b03      	ldr	r3, [sp, #12]
 810aa62:	9a06      	ldr	r2, [sp, #24]
 810aa64:	4413      	add	r3, r2
 810aa66:	42bb      	cmp	r3, r7
 810aa68:	d3e0      	bcc.n	810aa2c <__gethex+0x22c>
 810aa6a:	4618      	mov	r0, r3
 810aa6c:	9901      	ldr	r1, [sp, #4]
 810aa6e:	9307      	str	r3, [sp, #28]
 810aa70:	4652      	mov	r2, sl
 810aa72:	f001 fdfb 	bl	810c66c <strncmp>
 810aa76:	9b07      	ldr	r3, [sp, #28]
 810aa78:	2800      	cmp	r0, #0
 810aa7a:	d1d7      	bne.n	810aa2c <__gethex+0x22c>
 810aa7c:	461e      	mov	r6, r3
 810aa7e:	e78b      	b.n	810a998 <__gethex+0x198>
 810aa80:	f04f 0a03 	mov.w	sl, #3
 810aa84:	e7b8      	b.n	810a9f8 <__gethex+0x1f8>
 810aa86:	da0a      	bge.n	810aa9e <__gethex+0x29e>
 810aa88:	1a37      	subs	r7, r6, r0
 810aa8a:	4621      	mov	r1, r4
 810aa8c:	ee18 0a10 	vmov	r0, s16
 810aa90:	463a      	mov	r2, r7
 810aa92:	f000 fcc7 	bl	810b424 <__lshift>
 810aa96:	1bed      	subs	r5, r5, r7
 810aa98:	4604      	mov	r4, r0
 810aa9a:	f100 0914 	add.w	r9, r0, #20
 810aa9e:	f04f 0a00 	mov.w	sl, #0
 810aaa2:	e7ae      	b.n	810aa02 <__gethex+0x202>
 810aaa4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810aaa8:	42a8      	cmp	r0, r5
 810aaaa:	dd72      	ble.n	810ab92 <__gethex+0x392>
 810aaac:	1b45      	subs	r5, r0, r5
 810aaae:	42ae      	cmp	r6, r5
 810aab0:	dc36      	bgt.n	810ab20 <__gethex+0x320>
 810aab2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810aab6:	2b02      	cmp	r3, #2
 810aab8:	d02a      	beq.n	810ab10 <__gethex+0x310>
 810aaba:	2b03      	cmp	r3, #3
 810aabc:	d02c      	beq.n	810ab18 <__gethex+0x318>
 810aabe:	2b01      	cmp	r3, #1
 810aac0:	d115      	bne.n	810aaee <__gethex+0x2ee>
 810aac2:	42ae      	cmp	r6, r5
 810aac4:	d113      	bne.n	810aaee <__gethex+0x2ee>
 810aac6:	2e01      	cmp	r6, #1
 810aac8:	d10b      	bne.n	810aae2 <__gethex+0x2e2>
 810aaca:	9a04      	ldr	r2, [sp, #16]
 810aacc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810aad0:	6013      	str	r3, [r2, #0]
 810aad2:	2301      	movs	r3, #1
 810aad4:	6123      	str	r3, [r4, #16]
 810aad6:	f8c9 3000 	str.w	r3, [r9]
 810aada:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810aadc:	2762      	movs	r7, #98	; 0x62
 810aade:	601c      	str	r4, [r3, #0]
 810aae0:	e723      	b.n	810a92a <__gethex+0x12a>
 810aae2:	1e71      	subs	r1, r6, #1
 810aae4:	4620      	mov	r0, r4
 810aae6:	f000 fedb 	bl	810b8a0 <__any_on>
 810aaea:	2800      	cmp	r0, #0
 810aaec:	d1ed      	bne.n	810aaca <__gethex+0x2ca>
 810aaee:	ee18 0a10 	vmov	r0, s16
 810aaf2:	4621      	mov	r1, r4
 810aaf4:	f000 fa7a 	bl	810afec <_Bfree>
 810aaf8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810aafa:	2300      	movs	r3, #0
 810aafc:	6013      	str	r3, [r2, #0]
 810aafe:	2750      	movs	r7, #80	; 0x50
 810ab00:	e713      	b.n	810a92a <__gethex+0x12a>
 810ab02:	bf00      	nop
 810ab04:	0810e950 	.word	0x0810e950
 810ab08:	0810e8d4 	.word	0x0810e8d4
 810ab0c:	0810e8e5 	.word	0x0810e8e5
 810ab10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ab12:	2b00      	cmp	r3, #0
 810ab14:	d1eb      	bne.n	810aaee <__gethex+0x2ee>
 810ab16:	e7d8      	b.n	810aaca <__gethex+0x2ca>
 810ab18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ab1a:	2b00      	cmp	r3, #0
 810ab1c:	d1d5      	bne.n	810aaca <__gethex+0x2ca>
 810ab1e:	e7e6      	b.n	810aaee <__gethex+0x2ee>
 810ab20:	1e6f      	subs	r7, r5, #1
 810ab22:	f1ba 0f00 	cmp.w	sl, #0
 810ab26:	d131      	bne.n	810ab8c <__gethex+0x38c>
 810ab28:	b127      	cbz	r7, 810ab34 <__gethex+0x334>
 810ab2a:	4639      	mov	r1, r7
 810ab2c:	4620      	mov	r0, r4
 810ab2e:	f000 feb7 	bl	810b8a0 <__any_on>
 810ab32:	4682      	mov	sl, r0
 810ab34:	117b      	asrs	r3, r7, #5
 810ab36:	2101      	movs	r1, #1
 810ab38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810ab3c:	f007 071f 	and.w	r7, r7, #31
 810ab40:	fa01 f707 	lsl.w	r7, r1, r7
 810ab44:	421f      	tst	r7, r3
 810ab46:	4629      	mov	r1, r5
 810ab48:	4620      	mov	r0, r4
 810ab4a:	bf18      	it	ne
 810ab4c:	f04a 0a02 	orrne.w	sl, sl, #2
 810ab50:	1b76      	subs	r6, r6, r5
 810ab52:	f7ff fded 	bl	810a730 <rshift>
 810ab56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810ab5a:	2702      	movs	r7, #2
 810ab5c:	f1ba 0f00 	cmp.w	sl, #0
 810ab60:	d048      	beq.n	810abf4 <__gethex+0x3f4>
 810ab62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810ab66:	2b02      	cmp	r3, #2
 810ab68:	d015      	beq.n	810ab96 <__gethex+0x396>
 810ab6a:	2b03      	cmp	r3, #3
 810ab6c:	d017      	beq.n	810ab9e <__gethex+0x39e>
 810ab6e:	2b01      	cmp	r3, #1
 810ab70:	d109      	bne.n	810ab86 <__gethex+0x386>
 810ab72:	f01a 0f02 	tst.w	sl, #2
 810ab76:	d006      	beq.n	810ab86 <__gethex+0x386>
 810ab78:	f8d9 0000 	ldr.w	r0, [r9]
 810ab7c:	ea4a 0a00 	orr.w	sl, sl, r0
 810ab80:	f01a 0f01 	tst.w	sl, #1
 810ab84:	d10e      	bne.n	810aba4 <__gethex+0x3a4>
 810ab86:	f047 0710 	orr.w	r7, r7, #16
 810ab8a:	e033      	b.n	810abf4 <__gethex+0x3f4>
 810ab8c:	f04f 0a01 	mov.w	sl, #1
 810ab90:	e7d0      	b.n	810ab34 <__gethex+0x334>
 810ab92:	2701      	movs	r7, #1
 810ab94:	e7e2      	b.n	810ab5c <__gethex+0x35c>
 810ab96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ab98:	f1c3 0301 	rsb	r3, r3, #1
 810ab9c:	9315      	str	r3, [sp, #84]	; 0x54
 810ab9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810aba0:	2b00      	cmp	r3, #0
 810aba2:	d0f0      	beq.n	810ab86 <__gethex+0x386>
 810aba4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810aba8:	f104 0314 	add.w	r3, r4, #20
 810abac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810abb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810abb4:	f04f 0c00 	mov.w	ip, #0
 810abb8:	4618      	mov	r0, r3
 810abba:	f853 2b04 	ldr.w	r2, [r3], #4
 810abbe:	f1b2 3fff 	cmp.w	r2, #4294967295
 810abc2:	d01c      	beq.n	810abfe <__gethex+0x3fe>
 810abc4:	3201      	adds	r2, #1
 810abc6:	6002      	str	r2, [r0, #0]
 810abc8:	2f02      	cmp	r7, #2
 810abca:	f104 0314 	add.w	r3, r4, #20
 810abce:	d13f      	bne.n	810ac50 <__gethex+0x450>
 810abd0:	f8d8 2000 	ldr.w	r2, [r8]
 810abd4:	3a01      	subs	r2, #1
 810abd6:	42b2      	cmp	r2, r6
 810abd8:	d10a      	bne.n	810abf0 <__gethex+0x3f0>
 810abda:	1171      	asrs	r1, r6, #5
 810abdc:	2201      	movs	r2, #1
 810abde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810abe2:	f006 061f 	and.w	r6, r6, #31
 810abe6:	fa02 f606 	lsl.w	r6, r2, r6
 810abea:	421e      	tst	r6, r3
 810abec:	bf18      	it	ne
 810abee:	4617      	movne	r7, r2
 810abf0:	f047 0720 	orr.w	r7, r7, #32
 810abf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810abf6:	601c      	str	r4, [r3, #0]
 810abf8:	9b04      	ldr	r3, [sp, #16]
 810abfa:	601d      	str	r5, [r3, #0]
 810abfc:	e695      	b.n	810a92a <__gethex+0x12a>
 810abfe:	4299      	cmp	r1, r3
 810ac00:	f843 cc04 	str.w	ip, [r3, #-4]
 810ac04:	d8d8      	bhi.n	810abb8 <__gethex+0x3b8>
 810ac06:	68a3      	ldr	r3, [r4, #8]
 810ac08:	459b      	cmp	fp, r3
 810ac0a:	db19      	blt.n	810ac40 <__gethex+0x440>
 810ac0c:	6861      	ldr	r1, [r4, #4]
 810ac0e:	ee18 0a10 	vmov	r0, s16
 810ac12:	3101      	adds	r1, #1
 810ac14:	f000 f9aa 	bl	810af6c <_Balloc>
 810ac18:	4681      	mov	r9, r0
 810ac1a:	b918      	cbnz	r0, 810ac24 <__gethex+0x424>
 810ac1c:	4b1a      	ldr	r3, [pc, #104]	; (810ac88 <__gethex+0x488>)
 810ac1e:	4602      	mov	r2, r0
 810ac20:	2184      	movs	r1, #132	; 0x84
 810ac22:	e6a8      	b.n	810a976 <__gethex+0x176>
 810ac24:	6922      	ldr	r2, [r4, #16]
 810ac26:	3202      	adds	r2, #2
 810ac28:	f104 010c 	add.w	r1, r4, #12
 810ac2c:	0092      	lsls	r2, r2, #2
 810ac2e:	300c      	adds	r0, #12
 810ac30:	f000 f982 	bl	810af38 <memcpy>
 810ac34:	4621      	mov	r1, r4
 810ac36:	ee18 0a10 	vmov	r0, s16
 810ac3a:	f000 f9d7 	bl	810afec <_Bfree>
 810ac3e:	464c      	mov	r4, r9
 810ac40:	6923      	ldr	r3, [r4, #16]
 810ac42:	1c5a      	adds	r2, r3, #1
 810ac44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810ac48:	6122      	str	r2, [r4, #16]
 810ac4a:	2201      	movs	r2, #1
 810ac4c:	615a      	str	r2, [r3, #20]
 810ac4e:	e7bb      	b.n	810abc8 <__gethex+0x3c8>
 810ac50:	6922      	ldr	r2, [r4, #16]
 810ac52:	455a      	cmp	r2, fp
 810ac54:	dd0b      	ble.n	810ac6e <__gethex+0x46e>
 810ac56:	2101      	movs	r1, #1
 810ac58:	4620      	mov	r0, r4
 810ac5a:	f7ff fd69 	bl	810a730 <rshift>
 810ac5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810ac62:	3501      	adds	r5, #1
 810ac64:	42ab      	cmp	r3, r5
 810ac66:	f6ff aed0 	blt.w	810aa0a <__gethex+0x20a>
 810ac6a:	2701      	movs	r7, #1
 810ac6c:	e7c0      	b.n	810abf0 <__gethex+0x3f0>
 810ac6e:	f016 061f 	ands.w	r6, r6, #31
 810ac72:	d0fa      	beq.n	810ac6a <__gethex+0x46a>
 810ac74:	449a      	add	sl, r3
 810ac76:	f1c6 0620 	rsb	r6, r6, #32
 810ac7a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810ac7e:	f000 fa6b 	bl	810b158 <__hi0bits>
 810ac82:	42b0      	cmp	r0, r6
 810ac84:	dbe7      	blt.n	810ac56 <__gethex+0x456>
 810ac86:	e7f0      	b.n	810ac6a <__gethex+0x46a>
 810ac88:	0810e8d4 	.word	0x0810e8d4

0810ac8c <L_shift>:
 810ac8c:	f1c2 0208 	rsb	r2, r2, #8
 810ac90:	0092      	lsls	r2, r2, #2
 810ac92:	b570      	push	{r4, r5, r6, lr}
 810ac94:	f1c2 0620 	rsb	r6, r2, #32
 810ac98:	6843      	ldr	r3, [r0, #4]
 810ac9a:	6804      	ldr	r4, [r0, #0]
 810ac9c:	fa03 f506 	lsl.w	r5, r3, r6
 810aca0:	432c      	orrs	r4, r5
 810aca2:	40d3      	lsrs	r3, r2
 810aca4:	6004      	str	r4, [r0, #0]
 810aca6:	f840 3f04 	str.w	r3, [r0, #4]!
 810acaa:	4288      	cmp	r0, r1
 810acac:	d3f4      	bcc.n	810ac98 <L_shift+0xc>
 810acae:	bd70      	pop	{r4, r5, r6, pc}

0810acb0 <__match>:
 810acb0:	b530      	push	{r4, r5, lr}
 810acb2:	6803      	ldr	r3, [r0, #0]
 810acb4:	3301      	adds	r3, #1
 810acb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 810acba:	b914      	cbnz	r4, 810acc2 <__match+0x12>
 810acbc:	6003      	str	r3, [r0, #0]
 810acbe:	2001      	movs	r0, #1
 810acc0:	bd30      	pop	{r4, r5, pc}
 810acc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810acc6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810acca:	2d19      	cmp	r5, #25
 810accc:	bf98      	it	ls
 810acce:	3220      	addls	r2, #32
 810acd0:	42a2      	cmp	r2, r4
 810acd2:	d0f0      	beq.n	810acb6 <__match+0x6>
 810acd4:	2000      	movs	r0, #0
 810acd6:	e7f3      	b.n	810acc0 <__match+0x10>

0810acd8 <__hexnan>:
 810acd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810acdc:	680b      	ldr	r3, [r1, #0]
 810acde:	6801      	ldr	r1, [r0, #0]
 810ace0:	115e      	asrs	r6, r3, #5
 810ace2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810ace6:	f013 031f 	ands.w	r3, r3, #31
 810acea:	b087      	sub	sp, #28
 810acec:	bf18      	it	ne
 810acee:	3604      	addne	r6, #4
 810acf0:	2500      	movs	r5, #0
 810acf2:	1f37      	subs	r7, r6, #4
 810acf4:	4682      	mov	sl, r0
 810acf6:	4690      	mov	r8, r2
 810acf8:	9301      	str	r3, [sp, #4]
 810acfa:	f846 5c04 	str.w	r5, [r6, #-4]
 810acfe:	46b9      	mov	r9, r7
 810ad00:	463c      	mov	r4, r7
 810ad02:	9502      	str	r5, [sp, #8]
 810ad04:	46ab      	mov	fp, r5
 810ad06:	784a      	ldrb	r2, [r1, #1]
 810ad08:	1c4b      	adds	r3, r1, #1
 810ad0a:	9303      	str	r3, [sp, #12]
 810ad0c:	b342      	cbz	r2, 810ad60 <__hexnan+0x88>
 810ad0e:	4610      	mov	r0, r2
 810ad10:	9105      	str	r1, [sp, #20]
 810ad12:	9204      	str	r2, [sp, #16]
 810ad14:	f7ff fd5e 	bl	810a7d4 <__hexdig_fun>
 810ad18:	2800      	cmp	r0, #0
 810ad1a:	d14f      	bne.n	810adbc <__hexnan+0xe4>
 810ad1c:	9a04      	ldr	r2, [sp, #16]
 810ad1e:	9905      	ldr	r1, [sp, #20]
 810ad20:	2a20      	cmp	r2, #32
 810ad22:	d818      	bhi.n	810ad56 <__hexnan+0x7e>
 810ad24:	9b02      	ldr	r3, [sp, #8]
 810ad26:	459b      	cmp	fp, r3
 810ad28:	dd13      	ble.n	810ad52 <__hexnan+0x7a>
 810ad2a:	454c      	cmp	r4, r9
 810ad2c:	d206      	bcs.n	810ad3c <__hexnan+0x64>
 810ad2e:	2d07      	cmp	r5, #7
 810ad30:	dc04      	bgt.n	810ad3c <__hexnan+0x64>
 810ad32:	462a      	mov	r2, r5
 810ad34:	4649      	mov	r1, r9
 810ad36:	4620      	mov	r0, r4
 810ad38:	f7ff ffa8 	bl	810ac8c <L_shift>
 810ad3c:	4544      	cmp	r4, r8
 810ad3e:	d950      	bls.n	810ade2 <__hexnan+0x10a>
 810ad40:	2300      	movs	r3, #0
 810ad42:	f1a4 0904 	sub.w	r9, r4, #4
 810ad46:	f844 3c04 	str.w	r3, [r4, #-4]
 810ad4a:	f8cd b008 	str.w	fp, [sp, #8]
 810ad4e:	464c      	mov	r4, r9
 810ad50:	461d      	mov	r5, r3
 810ad52:	9903      	ldr	r1, [sp, #12]
 810ad54:	e7d7      	b.n	810ad06 <__hexnan+0x2e>
 810ad56:	2a29      	cmp	r2, #41	; 0x29
 810ad58:	d156      	bne.n	810ae08 <__hexnan+0x130>
 810ad5a:	3102      	adds	r1, #2
 810ad5c:	f8ca 1000 	str.w	r1, [sl]
 810ad60:	f1bb 0f00 	cmp.w	fp, #0
 810ad64:	d050      	beq.n	810ae08 <__hexnan+0x130>
 810ad66:	454c      	cmp	r4, r9
 810ad68:	d206      	bcs.n	810ad78 <__hexnan+0xa0>
 810ad6a:	2d07      	cmp	r5, #7
 810ad6c:	dc04      	bgt.n	810ad78 <__hexnan+0xa0>
 810ad6e:	462a      	mov	r2, r5
 810ad70:	4649      	mov	r1, r9
 810ad72:	4620      	mov	r0, r4
 810ad74:	f7ff ff8a 	bl	810ac8c <L_shift>
 810ad78:	4544      	cmp	r4, r8
 810ad7a:	d934      	bls.n	810ade6 <__hexnan+0x10e>
 810ad7c:	f1a8 0204 	sub.w	r2, r8, #4
 810ad80:	4623      	mov	r3, r4
 810ad82:	f853 1b04 	ldr.w	r1, [r3], #4
 810ad86:	f842 1f04 	str.w	r1, [r2, #4]!
 810ad8a:	429f      	cmp	r7, r3
 810ad8c:	d2f9      	bcs.n	810ad82 <__hexnan+0xaa>
 810ad8e:	1b3b      	subs	r3, r7, r4
 810ad90:	f023 0303 	bic.w	r3, r3, #3
 810ad94:	3304      	adds	r3, #4
 810ad96:	3401      	adds	r4, #1
 810ad98:	3e03      	subs	r6, #3
 810ad9a:	42b4      	cmp	r4, r6
 810ad9c:	bf88      	it	hi
 810ad9e:	2304      	movhi	r3, #4
 810ada0:	4443      	add	r3, r8
 810ada2:	2200      	movs	r2, #0
 810ada4:	f843 2b04 	str.w	r2, [r3], #4
 810ada8:	429f      	cmp	r7, r3
 810adaa:	d2fb      	bcs.n	810ada4 <__hexnan+0xcc>
 810adac:	683b      	ldr	r3, [r7, #0]
 810adae:	b91b      	cbnz	r3, 810adb8 <__hexnan+0xe0>
 810adb0:	4547      	cmp	r7, r8
 810adb2:	d127      	bne.n	810ae04 <__hexnan+0x12c>
 810adb4:	2301      	movs	r3, #1
 810adb6:	603b      	str	r3, [r7, #0]
 810adb8:	2005      	movs	r0, #5
 810adba:	e026      	b.n	810ae0a <__hexnan+0x132>
 810adbc:	3501      	adds	r5, #1
 810adbe:	2d08      	cmp	r5, #8
 810adc0:	f10b 0b01 	add.w	fp, fp, #1
 810adc4:	dd06      	ble.n	810add4 <__hexnan+0xfc>
 810adc6:	4544      	cmp	r4, r8
 810adc8:	d9c3      	bls.n	810ad52 <__hexnan+0x7a>
 810adca:	2300      	movs	r3, #0
 810adcc:	f844 3c04 	str.w	r3, [r4, #-4]
 810add0:	2501      	movs	r5, #1
 810add2:	3c04      	subs	r4, #4
 810add4:	6822      	ldr	r2, [r4, #0]
 810add6:	f000 000f 	and.w	r0, r0, #15
 810adda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810adde:	6022      	str	r2, [r4, #0]
 810ade0:	e7b7      	b.n	810ad52 <__hexnan+0x7a>
 810ade2:	2508      	movs	r5, #8
 810ade4:	e7b5      	b.n	810ad52 <__hexnan+0x7a>
 810ade6:	9b01      	ldr	r3, [sp, #4]
 810ade8:	2b00      	cmp	r3, #0
 810adea:	d0df      	beq.n	810adac <__hexnan+0xd4>
 810adec:	f04f 32ff 	mov.w	r2, #4294967295
 810adf0:	f1c3 0320 	rsb	r3, r3, #32
 810adf4:	fa22 f303 	lsr.w	r3, r2, r3
 810adf8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810adfc:	401a      	ands	r2, r3
 810adfe:	f846 2c04 	str.w	r2, [r6, #-4]
 810ae02:	e7d3      	b.n	810adac <__hexnan+0xd4>
 810ae04:	3f04      	subs	r7, #4
 810ae06:	e7d1      	b.n	810adac <__hexnan+0xd4>
 810ae08:	2004      	movs	r0, #4
 810ae0a:	b007      	add	sp, #28
 810ae0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ae10 <_localeconv_r>:
 810ae10:	4800      	ldr	r0, [pc, #0]	; (810ae14 <_localeconv_r+0x4>)
 810ae12:	4770      	bx	lr
 810ae14:	100001bc 	.word	0x100001bc

0810ae18 <_lseek_r>:
 810ae18:	b538      	push	{r3, r4, r5, lr}
 810ae1a:	4d07      	ldr	r5, [pc, #28]	; (810ae38 <_lseek_r+0x20>)
 810ae1c:	4604      	mov	r4, r0
 810ae1e:	4608      	mov	r0, r1
 810ae20:	4611      	mov	r1, r2
 810ae22:	2200      	movs	r2, #0
 810ae24:	602a      	str	r2, [r5, #0]
 810ae26:	461a      	mov	r2, r3
 810ae28:	f7f7 fea4 	bl	8102b74 <_lseek>
 810ae2c:	1c43      	adds	r3, r0, #1
 810ae2e:	d102      	bne.n	810ae36 <_lseek_r+0x1e>
 810ae30:	682b      	ldr	r3, [r5, #0]
 810ae32:	b103      	cbz	r3, 810ae36 <_lseek_r+0x1e>
 810ae34:	6023      	str	r3, [r4, #0]
 810ae36:	bd38      	pop	{r3, r4, r5, pc}
 810ae38:	10000504 	.word	0x10000504

0810ae3c <__swhatbuf_r>:
 810ae3c:	b570      	push	{r4, r5, r6, lr}
 810ae3e:	460e      	mov	r6, r1
 810ae40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ae44:	2900      	cmp	r1, #0
 810ae46:	b096      	sub	sp, #88	; 0x58
 810ae48:	4614      	mov	r4, r2
 810ae4a:	461d      	mov	r5, r3
 810ae4c:	da07      	bge.n	810ae5e <__swhatbuf_r+0x22>
 810ae4e:	2300      	movs	r3, #0
 810ae50:	602b      	str	r3, [r5, #0]
 810ae52:	89b3      	ldrh	r3, [r6, #12]
 810ae54:	061a      	lsls	r2, r3, #24
 810ae56:	d410      	bmi.n	810ae7a <__swhatbuf_r+0x3e>
 810ae58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810ae5c:	e00e      	b.n	810ae7c <__swhatbuf_r+0x40>
 810ae5e:	466a      	mov	r2, sp
 810ae60:	f001 fda4 	bl	810c9ac <_fstat_r>
 810ae64:	2800      	cmp	r0, #0
 810ae66:	dbf2      	blt.n	810ae4e <__swhatbuf_r+0x12>
 810ae68:	9a01      	ldr	r2, [sp, #4]
 810ae6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810ae6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810ae72:	425a      	negs	r2, r3
 810ae74:	415a      	adcs	r2, r3
 810ae76:	602a      	str	r2, [r5, #0]
 810ae78:	e7ee      	b.n	810ae58 <__swhatbuf_r+0x1c>
 810ae7a:	2340      	movs	r3, #64	; 0x40
 810ae7c:	2000      	movs	r0, #0
 810ae7e:	6023      	str	r3, [r4, #0]
 810ae80:	b016      	add	sp, #88	; 0x58
 810ae82:	bd70      	pop	{r4, r5, r6, pc}

0810ae84 <__smakebuf_r>:
 810ae84:	898b      	ldrh	r3, [r1, #12]
 810ae86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810ae88:	079d      	lsls	r5, r3, #30
 810ae8a:	4606      	mov	r6, r0
 810ae8c:	460c      	mov	r4, r1
 810ae8e:	d507      	bpl.n	810aea0 <__smakebuf_r+0x1c>
 810ae90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810ae94:	6023      	str	r3, [r4, #0]
 810ae96:	6123      	str	r3, [r4, #16]
 810ae98:	2301      	movs	r3, #1
 810ae9a:	6163      	str	r3, [r4, #20]
 810ae9c:	b002      	add	sp, #8
 810ae9e:	bd70      	pop	{r4, r5, r6, pc}
 810aea0:	ab01      	add	r3, sp, #4
 810aea2:	466a      	mov	r2, sp
 810aea4:	f7ff ffca 	bl	810ae3c <__swhatbuf_r>
 810aea8:	9900      	ldr	r1, [sp, #0]
 810aeaa:	4605      	mov	r5, r0
 810aeac:	4630      	mov	r0, r6
 810aeae:	f7fc fd77 	bl	81079a0 <_malloc_r>
 810aeb2:	b948      	cbnz	r0, 810aec8 <__smakebuf_r+0x44>
 810aeb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810aeb8:	059a      	lsls	r2, r3, #22
 810aeba:	d4ef      	bmi.n	810ae9c <__smakebuf_r+0x18>
 810aebc:	f023 0303 	bic.w	r3, r3, #3
 810aec0:	f043 0302 	orr.w	r3, r3, #2
 810aec4:	81a3      	strh	r3, [r4, #12]
 810aec6:	e7e3      	b.n	810ae90 <__smakebuf_r+0xc>
 810aec8:	4b0d      	ldr	r3, [pc, #52]	; (810af00 <__smakebuf_r+0x7c>)
 810aeca:	62b3      	str	r3, [r6, #40]	; 0x28
 810aecc:	89a3      	ldrh	r3, [r4, #12]
 810aece:	6020      	str	r0, [r4, #0]
 810aed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810aed4:	81a3      	strh	r3, [r4, #12]
 810aed6:	9b00      	ldr	r3, [sp, #0]
 810aed8:	6163      	str	r3, [r4, #20]
 810aeda:	9b01      	ldr	r3, [sp, #4]
 810aedc:	6120      	str	r0, [r4, #16]
 810aede:	b15b      	cbz	r3, 810aef8 <__smakebuf_r+0x74>
 810aee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810aee4:	4630      	mov	r0, r6
 810aee6:	f001 fd73 	bl	810c9d0 <_isatty_r>
 810aeea:	b128      	cbz	r0, 810aef8 <__smakebuf_r+0x74>
 810aeec:	89a3      	ldrh	r3, [r4, #12]
 810aeee:	f023 0303 	bic.w	r3, r3, #3
 810aef2:	f043 0301 	orr.w	r3, r3, #1
 810aef6:	81a3      	strh	r3, [r4, #12]
 810aef8:	89a0      	ldrh	r0, [r4, #12]
 810aefa:	4305      	orrs	r5, r0
 810aefc:	81a5      	strh	r5, [r4, #12]
 810aefe:	e7cd      	b.n	810ae9c <__smakebuf_r+0x18>
 810af00:	081076c5 	.word	0x081076c5

0810af04 <malloc>:
 810af04:	4b02      	ldr	r3, [pc, #8]	; (810af10 <malloc+0xc>)
 810af06:	4601      	mov	r1, r0
 810af08:	6818      	ldr	r0, [r3, #0]
 810af0a:	f7fc bd49 	b.w	81079a0 <_malloc_r>
 810af0e:	bf00      	nop
 810af10:	10000064 	.word	0x10000064

0810af14 <__ascii_mbtowc>:
 810af14:	b082      	sub	sp, #8
 810af16:	b901      	cbnz	r1, 810af1a <__ascii_mbtowc+0x6>
 810af18:	a901      	add	r1, sp, #4
 810af1a:	b142      	cbz	r2, 810af2e <__ascii_mbtowc+0x1a>
 810af1c:	b14b      	cbz	r3, 810af32 <__ascii_mbtowc+0x1e>
 810af1e:	7813      	ldrb	r3, [r2, #0]
 810af20:	600b      	str	r3, [r1, #0]
 810af22:	7812      	ldrb	r2, [r2, #0]
 810af24:	1e10      	subs	r0, r2, #0
 810af26:	bf18      	it	ne
 810af28:	2001      	movne	r0, #1
 810af2a:	b002      	add	sp, #8
 810af2c:	4770      	bx	lr
 810af2e:	4610      	mov	r0, r2
 810af30:	e7fb      	b.n	810af2a <__ascii_mbtowc+0x16>
 810af32:	f06f 0001 	mvn.w	r0, #1
 810af36:	e7f8      	b.n	810af2a <__ascii_mbtowc+0x16>

0810af38 <memcpy>:
 810af38:	440a      	add	r2, r1
 810af3a:	4291      	cmp	r1, r2
 810af3c:	f100 33ff 	add.w	r3, r0, #4294967295
 810af40:	d100      	bne.n	810af44 <memcpy+0xc>
 810af42:	4770      	bx	lr
 810af44:	b510      	push	{r4, lr}
 810af46:	f811 4b01 	ldrb.w	r4, [r1], #1
 810af4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810af4e:	4291      	cmp	r1, r2
 810af50:	d1f9      	bne.n	810af46 <memcpy+0xe>
 810af52:	bd10      	pop	{r4, pc}

0810af54 <__malloc_lock>:
 810af54:	4801      	ldr	r0, [pc, #4]	; (810af5c <__malloc_lock+0x8>)
 810af56:	f7fc bcc8 	b.w	81078ea <__retarget_lock_acquire_recursive>
 810af5a:	bf00      	nop
 810af5c:	100004fc 	.word	0x100004fc

0810af60 <__malloc_unlock>:
 810af60:	4801      	ldr	r0, [pc, #4]	; (810af68 <__malloc_unlock+0x8>)
 810af62:	f7fc bcc3 	b.w	81078ec <__retarget_lock_release_recursive>
 810af66:	bf00      	nop
 810af68:	100004fc 	.word	0x100004fc

0810af6c <_Balloc>:
 810af6c:	b570      	push	{r4, r5, r6, lr}
 810af6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810af70:	4604      	mov	r4, r0
 810af72:	460d      	mov	r5, r1
 810af74:	b976      	cbnz	r6, 810af94 <_Balloc+0x28>
 810af76:	2010      	movs	r0, #16
 810af78:	f7ff ffc4 	bl	810af04 <malloc>
 810af7c:	4602      	mov	r2, r0
 810af7e:	6260      	str	r0, [r4, #36]	; 0x24
 810af80:	b920      	cbnz	r0, 810af8c <_Balloc+0x20>
 810af82:	4b18      	ldr	r3, [pc, #96]	; (810afe4 <_Balloc+0x78>)
 810af84:	4818      	ldr	r0, [pc, #96]	; (810afe8 <_Balloc+0x7c>)
 810af86:	2166      	movs	r1, #102	; 0x66
 810af88:	f001 fce0 	bl	810c94c <__assert_func>
 810af8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810af90:	6006      	str	r6, [r0, #0]
 810af92:	60c6      	str	r6, [r0, #12]
 810af94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810af96:	68f3      	ldr	r3, [r6, #12]
 810af98:	b183      	cbz	r3, 810afbc <_Balloc+0x50>
 810af9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810af9c:	68db      	ldr	r3, [r3, #12]
 810af9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810afa2:	b9b8      	cbnz	r0, 810afd4 <_Balloc+0x68>
 810afa4:	2101      	movs	r1, #1
 810afa6:	fa01 f605 	lsl.w	r6, r1, r5
 810afaa:	1d72      	adds	r2, r6, #5
 810afac:	0092      	lsls	r2, r2, #2
 810afae:	4620      	mov	r0, r4
 810afb0:	f000 fc97 	bl	810b8e2 <_calloc_r>
 810afb4:	b160      	cbz	r0, 810afd0 <_Balloc+0x64>
 810afb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810afba:	e00e      	b.n	810afda <_Balloc+0x6e>
 810afbc:	2221      	movs	r2, #33	; 0x21
 810afbe:	2104      	movs	r1, #4
 810afc0:	4620      	mov	r0, r4
 810afc2:	f000 fc8e 	bl	810b8e2 <_calloc_r>
 810afc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810afc8:	60f0      	str	r0, [r6, #12]
 810afca:	68db      	ldr	r3, [r3, #12]
 810afcc:	2b00      	cmp	r3, #0
 810afce:	d1e4      	bne.n	810af9a <_Balloc+0x2e>
 810afd0:	2000      	movs	r0, #0
 810afd2:	bd70      	pop	{r4, r5, r6, pc}
 810afd4:	6802      	ldr	r2, [r0, #0]
 810afd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810afda:	2300      	movs	r3, #0
 810afdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810afe0:	e7f7      	b.n	810afd2 <_Balloc+0x66>
 810afe2:	bf00      	nop
 810afe4:	0810e85e 	.word	0x0810e85e
 810afe8:	0810e964 	.word	0x0810e964

0810afec <_Bfree>:
 810afec:	b570      	push	{r4, r5, r6, lr}
 810afee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810aff0:	4605      	mov	r5, r0
 810aff2:	460c      	mov	r4, r1
 810aff4:	b976      	cbnz	r6, 810b014 <_Bfree+0x28>
 810aff6:	2010      	movs	r0, #16
 810aff8:	f7ff ff84 	bl	810af04 <malloc>
 810affc:	4602      	mov	r2, r0
 810affe:	6268      	str	r0, [r5, #36]	; 0x24
 810b000:	b920      	cbnz	r0, 810b00c <_Bfree+0x20>
 810b002:	4b09      	ldr	r3, [pc, #36]	; (810b028 <_Bfree+0x3c>)
 810b004:	4809      	ldr	r0, [pc, #36]	; (810b02c <_Bfree+0x40>)
 810b006:	218a      	movs	r1, #138	; 0x8a
 810b008:	f001 fca0 	bl	810c94c <__assert_func>
 810b00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b010:	6006      	str	r6, [r0, #0]
 810b012:	60c6      	str	r6, [r0, #12]
 810b014:	b13c      	cbz	r4, 810b026 <_Bfree+0x3a>
 810b016:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810b018:	6862      	ldr	r2, [r4, #4]
 810b01a:	68db      	ldr	r3, [r3, #12]
 810b01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810b020:	6021      	str	r1, [r4, #0]
 810b022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810b026:	bd70      	pop	{r4, r5, r6, pc}
 810b028:	0810e85e 	.word	0x0810e85e
 810b02c:	0810e964 	.word	0x0810e964

0810b030 <__multadd>:
 810b030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b034:	690e      	ldr	r6, [r1, #16]
 810b036:	4607      	mov	r7, r0
 810b038:	4698      	mov	r8, r3
 810b03a:	460c      	mov	r4, r1
 810b03c:	f101 0014 	add.w	r0, r1, #20
 810b040:	2300      	movs	r3, #0
 810b042:	6805      	ldr	r5, [r0, #0]
 810b044:	b2a9      	uxth	r1, r5
 810b046:	fb02 8101 	mla	r1, r2, r1, r8
 810b04a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810b04e:	0c2d      	lsrs	r5, r5, #16
 810b050:	fb02 c505 	mla	r5, r2, r5, ip
 810b054:	b289      	uxth	r1, r1
 810b056:	3301      	adds	r3, #1
 810b058:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810b05c:	429e      	cmp	r6, r3
 810b05e:	f840 1b04 	str.w	r1, [r0], #4
 810b062:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810b066:	dcec      	bgt.n	810b042 <__multadd+0x12>
 810b068:	f1b8 0f00 	cmp.w	r8, #0
 810b06c:	d022      	beq.n	810b0b4 <__multadd+0x84>
 810b06e:	68a3      	ldr	r3, [r4, #8]
 810b070:	42b3      	cmp	r3, r6
 810b072:	dc19      	bgt.n	810b0a8 <__multadd+0x78>
 810b074:	6861      	ldr	r1, [r4, #4]
 810b076:	4638      	mov	r0, r7
 810b078:	3101      	adds	r1, #1
 810b07a:	f7ff ff77 	bl	810af6c <_Balloc>
 810b07e:	4605      	mov	r5, r0
 810b080:	b928      	cbnz	r0, 810b08e <__multadd+0x5e>
 810b082:	4602      	mov	r2, r0
 810b084:	4b0d      	ldr	r3, [pc, #52]	; (810b0bc <__multadd+0x8c>)
 810b086:	480e      	ldr	r0, [pc, #56]	; (810b0c0 <__multadd+0x90>)
 810b088:	21b5      	movs	r1, #181	; 0xb5
 810b08a:	f001 fc5f 	bl	810c94c <__assert_func>
 810b08e:	6922      	ldr	r2, [r4, #16]
 810b090:	3202      	adds	r2, #2
 810b092:	f104 010c 	add.w	r1, r4, #12
 810b096:	0092      	lsls	r2, r2, #2
 810b098:	300c      	adds	r0, #12
 810b09a:	f7ff ff4d 	bl	810af38 <memcpy>
 810b09e:	4621      	mov	r1, r4
 810b0a0:	4638      	mov	r0, r7
 810b0a2:	f7ff ffa3 	bl	810afec <_Bfree>
 810b0a6:	462c      	mov	r4, r5
 810b0a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810b0ac:	3601      	adds	r6, #1
 810b0ae:	f8c3 8014 	str.w	r8, [r3, #20]
 810b0b2:	6126      	str	r6, [r4, #16]
 810b0b4:	4620      	mov	r0, r4
 810b0b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b0ba:	bf00      	nop
 810b0bc:	0810e8d4 	.word	0x0810e8d4
 810b0c0:	0810e964 	.word	0x0810e964

0810b0c4 <__s2b>:
 810b0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b0c8:	460c      	mov	r4, r1
 810b0ca:	4615      	mov	r5, r2
 810b0cc:	461f      	mov	r7, r3
 810b0ce:	2209      	movs	r2, #9
 810b0d0:	3308      	adds	r3, #8
 810b0d2:	4606      	mov	r6, r0
 810b0d4:	fb93 f3f2 	sdiv	r3, r3, r2
 810b0d8:	2100      	movs	r1, #0
 810b0da:	2201      	movs	r2, #1
 810b0dc:	429a      	cmp	r2, r3
 810b0de:	db09      	blt.n	810b0f4 <__s2b+0x30>
 810b0e0:	4630      	mov	r0, r6
 810b0e2:	f7ff ff43 	bl	810af6c <_Balloc>
 810b0e6:	b940      	cbnz	r0, 810b0fa <__s2b+0x36>
 810b0e8:	4602      	mov	r2, r0
 810b0ea:	4b19      	ldr	r3, [pc, #100]	; (810b150 <__s2b+0x8c>)
 810b0ec:	4819      	ldr	r0, [pc, #100]	; (810b154 <__s2b+0x90>)
 810b0ee:	21ce      	movs	r1, #206	; 0xce
 810b0f0:	f001 fc2c 	bl	810c94c <__assert_func>
 810b0f4:	0052      	lsls	r2, r2, #1
 810b0f6:	3101      	adds	r1, #1
 810b0f8:	e7f0      	b.n	810b0dc <__s2b+0x18>
 810b0fa:	9b08      	ldr	r3, [sp, #32]
 810b0fc:	6143      	str	r3, [r0, #20]
 810b0fe:	2d09      	cmp	r5, #9
 810b100:	f04f 0301 	mov.w	r3, #1
 810b104:	6103      	str	r3, [r0, #16]
 810b106:	dd16      	ble.n	810b136 <__s2b+0x72>
 810b108:	f104 0909 	add.w	r9, r4, #9
 810b10c:	46c8      	mov	r8, r9
 810b10e:	442c      	add	r4, r5
 810b110:	f818 3b01 	ldrb.w	r3, [r8], #1
 810b114:	4601      	mov	r1, r0
 810b116:	3b30      	subs	r3, #48	; 0x30
 810b118:	220a      	movs	r2, #10
 810b11a:	4630      	mov	r0, r6
 810b11c:	f7ff ff88 	bl	810b030 <__multadd>
 810b120:	45a0      	cmp	r8, r4
 810b122:	d1f5      	bne.n	810b110 <__s2b+0x4c>
 810b124:	f1a5 0408 	sub.w	r4, r5, #8
 810b128:	444c      	add	r4, r9
 810b12a:	1b2d      	subs	r5, r5, r4
 810b12c:	1963      	adds	r3, r4, r5
 810b12e:	42bb      	cmp	r3, r7
 810b130:	db04      	blt.n	810b13c <__s2b+0x78>
 810b132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b136:	340a      	adds	r4, #10
 810b138:	2509      	movs	r5, #9
 810b13a:	e7f6      	b.n	810b12a <__s2b+0x66>
 810b13c:	f814 3b01 	ldrb.w	r3, [r4], #1
 810b140:	4601      	mov	r1, r0
 810b142:	3b30      	subs	r3, #48	; 0x30
 810b144:	220a      	movs	r2, #10
 810b146:	4630      	mov	r0, r6
 810b148:	f7ff ff72 	bl	810b030 <__multadd>
 810b14c:	e7ee      	b.n	810b12c <__s2b+0x68>
 810b14e:	bf00      	nop
 810b150:	0810e8d4 	.word	0x0810e8d4
 810b154:	0810e964 	.word	0x0810e964

0810b158 <__hi0bits>:
 810b158:	0c03      	lsrs	r3, r0, #16
 810b15a:	041b      	lsls	r3, r3, #16
 810b15c:	b9d3      	cbnz	r3, 810b194 <__hi0bits+0x3c>
 810b15e:	0400      	lsls	r0, r0, #16
 810b160:	2310      	movs	r3, #16
 810b162:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810b166:	bf04      	itt	eq
 810b168:	0200      	lsleq	r0, r0, #8
 810b16a:	3308      	addeq	r3, #8
 810b16c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810b170:	bf04      	itt	eq
 810b172:	0100      	lsleq	r0, r0, #4
 810b174:	3304      	addeq	r3, #4
 810b176:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810b17a:	bf04      	itt	eq
 810b17c:	0080      	lsleq	r0, r0, #2
 810b17e:	3302      	addeq	r3, #2
 810b180:	2800      	cmp	r0, #0
 810b182:	db05      	blt.n	810b190 <__hi0bits+0x38>
 810b184:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810b188:	f103 0301 	add.w	r3, r3, #1
 810b18c:	bf08      	it	eq
 810b18e:	2320      	moveq	r3, #32
 810b190:	4618      	mov	r0, r3
 810b192:	4770      	bx	lr
 810b194:	2300      	movs	r3, #0
 810b196:	e7e4      	b.n	810b162 <__hi0bits+0xa>

0810b198 <__lo0bits>:
 810b198:	6803      	ldr	r3, [r0, #0]
 810b19a:	f013 0207 	ands.w	r2, r3, #7
 810b19e:	4601      	mov	r1, r0
 810b1a0:	d00b      	beq.n	810b1ba <__lo0bits+0x22>
 810b1a2:	07da      	lsls	r2, r3, #31
 810b1a4:	d424      	bmi.n	810b1f0 <__lo0bits+0x58>
 810b1a6:	0798      	lsls	r0, r3, #30
 810b1a8:	bf49      	itett	mi
 810b1aa:	085b      	lsrmi	r3, r3, #1
 810b1ac:	089b      	lsrpl	r3, r3, #2
 810b1ae:	2001      	movmi	r0, #1
 810b1b0:	600b      	strmi	r3, [r1, #0]
 810b1b2:	bf5c      	itt	pl
 810b1b4:	600b      	strpl	r3, [r1, #0]
 810b1b6:	2002      	movpl	r0, #2
 810b1b8:	4770      	bx	lr
 810b1ba:	b298      	uxth	r0, r3
 810b1bc:	b9b0      	cbnz	r0, 810b1ec <__lo0bits+0x54>
 810b1be:	0c1b      	lsrs	r3, r3, #16
 810b1c0:	2010      	movs	r0, #16
 810b1c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 810b1c6:	bf04      	itt	eq
 810b1c8:	0a1b      	lsreq	r3, r3, #8
 810b1ca:	3008      	addeq	r0, #8
 810b1cc:	071a      	lsls	r2, r3, #28
 810b1ce:	bf04      	itt	eq
 810b1d0:	091b      	lsreq	r3, r3, #4
 810b1d2:	3004      	addeq	r0, #4
 810b1d4:	079a      	lsls	r2, r3, #30
 810b1d6:	bf04      	itt	eq
 810b1d8:	089b      	lsreq	r3, r3, #2
 810b1da:	3002      	addeq	r0, #2
 810b1dc:	07da      	lsls	r2, r3, #31
 810b1de:	d403      	bmi.n	810b1e8 <__lo0bits+0x50>
 810b1e0:	085b      	lsrs	r3, r3, #1
 810b1e2:	f100 0001 	add.w	r0, r0, #1
 810b1e6:	d005      	beq.n	810b1f4 <__lo0bits+0x5c>
 810b1e8:	600b      	str	r3, [r1, #0]
 810b1ea:	4770      	bx	lr
 810b1ec:	4610      	mov	r0, r2
 810b1ee:	e7e8      	b.n	810b1c2 <__lo0bits+0x2a>
 810b1f0:	2000      	movs	r0, #0
 810b1f2:	4770      	bx	lr
 810b1f4:	2020      	movs	r0, #32
 810b1f6:	4770      	bx	lr

0810b1f8 <__i2b>:
 810b1f8:	b510      	push	{r4, lr}
 810b1fa:	460c      	mov	r4, r1
 810b1fc:	2101      	movs	r1, #1
 810b1fe:	f7ff feb5 	bl	810af6c <_Balloc>
 810b202:	4602      	mov	r2, r0
 810b204:	b928      	cbnz	r0, 810b212 <__i2b+0x1a>
 810b206:	4b05      	ldr	r3, [pc, #20]	; (810b21c <__i2b+0x24>)
 810b208:	4805      	ldr	r0, [pc, #20]	; (810b220 <__i2b+0x28>)
 810b20a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810b20e:	f001 fb9d 	bl	810c94c <__assert_func>
 810b212:	2301      	movs	r3, #1
 810b214:	6144      	str	r4, [r0, #20]
 810b216:	6103      	str	r3, [r0, #16]
 810b218:	bd10      	pop	{r4, pc}
 810b21a:	bf00      	nop
 810b21c:	0810e8d4 	.word	0x0810e8d4
 810b220:	0810e964 	.word	0x0810e964

0810b224 <__multiply>:
 810b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b228:	4614      	mov	r4, r2
 810b22a:	690a      	ldr	r2, [r1, #16]
 810b22c:	6923      	ldr	r3, [r4, #16]
 810b22e:	429a      	cmp	r2, r3
 810b230:	bfb8      	it	lt
 810b232:	460b      	movlt	r3, r1
 810b234:	460d      	mov	r5, r1
 810b236:	bfbc      	itt	lt
 810b238:	4625      	movlt	r5, r4
 810b23a:	461c      	movlt	r4, r3
 810b23c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810b240:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810b244:	68ab      	ldr	r3, [r5, #8]
 810b246:	6869      	ldr	r1, [r5, #4]
 810b248:	eb0a 0709 	add.w	r7, sl, r9
 810b24c:	42bb      	cmp	r3, r7
 810b24e:	b085      	sub	sp, #20
 810b250:	bfb8      	it	lt
 810b252:	3101      	addlt	r1, #1
 810b254:	f7ff fe8a 	bl	810af6c <_Balloc>
 810b258:	b930      	cbnz	r0, 810b268 <__multiply+0x44>
 810b25a:	4602      	mov	r2, r0
 810b25c:	4b42      	ldr	r3, [pc, #264]	; (810b368 <__multiply+0x144>)
 810b25e:	4843      	ldr	r0, [pc, #268]	; (810b36c <__multiply+0x148>)
 810b260:	f240 115d 	movw	r1, #349	; 0x15d
 810b264:	f001 fb72 	bl	810c94c <__assert_func>
 810b268:	f100 0614 	add.w	r6, r0, #20
 810b26c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810b270:	4633      	mov	r3, r6
 810b272:	2200      	movs	r2, #0
 810b274:	4543      	cmp	r3, r8
 810b276:	d31e      	bcc.n	810b2b6 <__multiply+0x92>
 810b278:	f105 0c14 	add.w	ip, r5, #20
 810b27c:	f104 0314 	add.w	r3, r4, #20
 810b280:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810b284:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810b288:	9202      	str	r2, [sp, #8]
 810b28a:	ebac 0205 	sub.w	r2, ip, r5
 810b28e:	3a15      	subs	r2, #21
 810b290:	f022 0203 	bic.w	r2, r2, #3
 810b294:	3204      	adds	r2, #4
 810b296:	f105 0115 	add.w	r1, r5, #21
 810b29a:	458c      	cmp	ip, r1
 810b29c:	bf38      	it	cc
 810b29e:	2204      	movcc	r2, #4
 810b2a0:	9201      	str	r2, [sp, #4]
 810b2a2:	9a02      	ldr	r2, [sp, #8]
 810b2a4:	9303      	str	r3, [sp, #12]
 810b2a6:	429a      	cmp	r2, r3
 810b2a8:	d808      	bhi.n	810b2bc <__multiply+0x98>
 810b2aa:	2f00      	cmp	r7, #0
 810b2ac:	dc55      	bgt.n	810b35a <__multiply+0x136>
 810b2ae:	6107      	str	r7, [r0, #16]
 810b2b0:	b005      	add	sp, #20
 810b2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b2b6:	f843 2b04 	str.w	r2, [r3], #4
 810b2ba:	e7db      	b.n	810b274 <__multiply+0x50>
 810b2bc:	f8b3 a000 	ldrh.w	sl, [r3]
 810b2c0:	f1ba 0f00 	cmp.w	sl, #0
 810b2c4:	d020      	beq.n	810b308 <__multiply+0xe4>
 810b2c6:	f105 0e14 	add.w	lr, r5, #20
 810b2ca:	46b1      	mov	r9, r6
 810b2cc:	2200      	movs	r2, #0
 810b2ce:	f85e 4b04 	ldr.w	r4, [lr], #4
 810b2d2:	f8d9 b000 	ldr.w	fp, [r9]
 810b2d6:	b2a1      	uxth	r1, r4
 810b2d8:	fa1f fb8b 	uxth.w	fp, fp
 810b2dc:	fb0a b101 	mla	r1, sl, r1, fp
 810b2e0:	4411      	add	r1, r2
 810b2e2:	f8d9 2000 	ldr.w	r2, [r9]
 810b2e6:	0c24      	lsrs	r4, r4, #16
 810b2e8:	0c12      	lsrs	r2, r2, #16
 810b2ea:	fb0a 2404 	mla	r4, sl, r4, r2
 810b2ee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810b2f2:	b289      	uxth	r1, r1
 810b2f4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810b2f8:	45f4      	cmp	ip, lr
 810b2fa:	f849 1b04 	str.w	r1, [r9], #4
 810b2fe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810b302:	d8e4      	bhi.n	810b2ce <__multiply+0xaa>
 810b304:	9901      	ldr	r1, [sp, #4]
 810b306:	5072      	str	r2, [r6, r1]
 810b308:	9a03      	ldr	r2, [sp, #12]
 810b30a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810b30e:	3304      	adds	r3, #4
 810b310:	f1b9 0f00 	cmp.w	r9, #0
 810b314:	d01f      	beq.n	810b356 <__multiply+0x132>
 810b316:	6834      	ldr	r4, [r6, #0]
 810b318:	f105 0114 	add.w	r1, r5, #20
 810b31c:	46b6      	mov	lr, r6
 810b31e:	f04f 0a00 	mov.w	sl, #0
 810b322:	880a      	ldrh	r2, [r1, #0]
 810b324:	f8be b002 	ldrh.w	fp, [lr, #2]
 810b328:	fb09 b202 	mla	r2, r9, r2, fp
 810b32c:	4492      	add	sl, r2
 810b32e:	b2a4      	uxth	r4, r4
 810b330:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810b334:	f84e 4b04 	str.w	r4, [lr], #4
 810b338:	f851 4b04 	ldr.w	r4, [r1], #4
 810b33c:	f8be 2000 	ldrh.w	r2, [lr]
 810b340:	0c24      	lsrs	r4, r4, #16
 810b342:	fb09 2404 	mla	r4, r9, r4, r2
 810b346:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810b34a:	458c      	cmp	ip, r1
 810b34c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810b350:	d8e7      	bhi.n	810b322 <__multiply+0xfe>
 810b352:	9a01      	ldr	r2, [sp, #4]
 810b354:	50b4      	str	r4, [r6, r2]
 810b356:	3604      	adds	r6, #4
 810b358:	e7a3      	b.n	810b2a2 <__multiply+0x7e>
 810b35a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810b35e:	2b00      	cmp	r3, #0
 810b360:	d1a5      	bne.n	810b2ae <__multiply+0x8a>
 810b362:	3f01      	subs	r7, #1
 810b364:	e7a1      	b.n	810b2aa <__multiply+0x86>
 810b366:	bf00      	nop
 810b368:	0810e8d4 	.word	0x0810e8d4
 810b36c:	0810e964 	.word	0x0810e964

0810b370 <__pow5mult>:
 810b370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b374:	4615      	mov	r5, r2
 810b376:	f012 0203 	ands.w	r2, r2, #3
 810b37a:	4606      	mov	r6, r0
 810b37c:	460f      	mov	r7, r1
 810b37e:	d007      	beq.n	810b390 <__pow5mult+0x20>
 810b380:	4c25      	ldr	r4, [pc, #148]	; (810b418 <__pow5mult+0xa8>)
 810b382:	3a01      	subs	r2, #1
 810b384:	2300      	movs	r3, #0
 810b386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810b38a:	f7ff fe51 	bl	810b030 <__multadd>
 810b38e:	4607      	mov	r7, r0
 810b390:	10ad      	asrs	r5, r5, #2
 810b392:	d03d      	beq.n	810b410 <__pow5mult+0xa0>
 810b394:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810b396:	b97c      	cbnz	r4, 810b3b8 <__pow5mult+0x48>
 810b398:	2010      	movs	r0, #16
 810b39a:	f7ff fdb3 	bl	810af04 <malloc>
 810b39e:	4602      	mov	r2, r0
 810b3a0:	6270      	str	r0, [r6, #36]	; 0x24
 810b3a2:	b928      	cbnz	r0, 810b3b0 <__pow5mult+0x40>
 810b3a4:	4b1d      	ldr	r3, [pc, #116]	; (810b41c <__pow5mult+0xac>)
 810b3a6:	481e      	ldr	r0, [pc, #120]	; (810b420 <__pow5mult+0xb0>)
 810b3a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810b3ac:	f001 face 	bl	810c94c <__assert_func>
 810b3b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b3b4:	6004      	str	r4, [r0, #0]
 810b3b6:	60c4      	str	r4, [r0, #12]
 810b3b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810b3bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810b3c0:	b94c      	cbnz	r4, 810b3d6 <__pow5mult+0x66>
 810b3c2:	f240 2171 	movw	r1, #625	; 0x271
 810b3c6:	4630      	mov	r0, r6
 810b3c8:	f7ff ff16 	bl	810b1f8 <__i2b>
 810b3cc:	2300      	movs	r3, #0
 810b3ce:	f8c8 0008 	str.w	r0, [r8, #8]
 810b3d2:	4604      	mov	r4, r0
 810b3d4:	6003      	str	r3, [r0, #0]
 810b3d6:	f04f 0900 	mov.w	r9, #0
 810b3da:	07eb      	lsls	r3, r5, #31
 810b3dc:	d50a      	bpl.n	810b3f4 <__pow5mult+0x84>
 810b3de:	4639      	mov	r1, r7
 810b3e0:	4622      	mov	r2, r4
 810b3e2:	4630      	mov	r0, r6
 810b3e4:	f7ff ff1e 	bl	810b224 <__multiply>
 810b3e8:	4639      	mov	r1, r7
 810b3ea:	4680      	mov	r8, r0
 810b3ec:	4630      	mov	r0, r6
 810b3ee:	f7ff fdfd 	bl	810afec <_Bfree>
 810b3f2:	4647      	mov	r7, r8
 810b3f4:	106d      	asrs	r5, r5, #1
 810b3f6:	d00b      	beq.n	810b410 <__pow5mult+0xa0>
 810b3f8:	6820      	ldr	r0, [r4, #0]
 810b3fa:	b938      	cbnz	r0, 810b40c <__pow5mult+0x9c>
 810b3fc:	4622      	mov	r2, r4
 810b3fe:	4621      	mov	r1, r4
 810b400:	4630      	mov	r0, r6
 810b402:	f7ff ff0f 	bl	810b224 <__multiply>
 810b406:	6020      	str	r0, [r4, #0]
 810b408:	f8c0 9000 	str.w	r9, [r0]
 810b40c:	4604      	mov	r4, r0
 810b40e:	e7e4      	b.n	810b3da <__pow5mult+0x6a>
 810b410:	4638      	mov	r0, r7
 810b412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b416:	bf00      	nop
 810b418:	0810eab8 	.word	0x0810eab8
 810b41c:	0810e85e 	.word	0x0810e85e
 810b420:	0810e964 	.word	0x0810e964

0810b424 <__lshift>:
 810b424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b428:	460c      	mov	r4, r1
 810b42a:	6849      	ldr	r1, [r1, #4]
 810b42c:	6923      	ldr	r3, [r4, #16]
 810b42e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810b432:	68a3      	ldr	r3, [r4, #8]
 810b434:	4607      	mov	r7, r0
 810b436:	4691      	mov	r9, r2
 810b438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810b43c:	f108 0601 	add.w	r6, r8, #1
 810b440:	42b3      	cmp	r3, r6
 810b442:	db0b      	blt.n	810b45c <__lshift+0x38>
 810b444:	4638      	mov	r0, r7
 810b446:	f7ff fd91 	bl	810af6c <_Balloc>
 810b44a:	4605      	mov	r5, r0
 810b44c:	b948      	cbnz	r0, 810b462 <__lshift+0x3e>
 810b44e:	4602      	mov	r2, r0
 810b450:	4b28      	ldr	r3, [pc, #160]	; (810b4f4 <__lshift+0xd0>)
 810b452:	4829      	ldr	r0, [pc, #164]	; (810b4f8 <__lshift+0xd4>)
 810b454:	f240 11d9 	movw	r1, #473	; 0x1d9
 810b458:	f001 fa78 	bl	810c94c <__assert_func>
 810b45c:	3101      	adds	r1, #1
 810b45e:	005b      	lsls	r3, r3, #1
 810b460:	e7ee      	b.n	810b440 <__lshift+0x1c>
 810b462:	2300      	movs	r3, #0
 810b464:	f100 0114 	add.w	r1, r0, #20
 810b468:	f100 0210 	add.w	r2, r0, #16
 810b46c:	4618      	mov	r0, r3
 810b46e:	4553      	cmp	r3, sl
 810b470:	db33      	blt.n	810b4da <__lshift+0xb6>
 810b472:	6920      	ldr	r0, [r4, #16]
 810b474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b478:	f104 0314 	add.w	r3, r4, #20
 810b47c:	f019 091f 	ands.w	r9, r9, #31
 810b480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810b484:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810b488:	d02b      	beq.n	810b4e2 <__lshift+0xbe>
 810b48a:	f1c9 0e20 	rsb	lr, r9, #32
 810b48e:	468a      	mov	sl, r1
 810b490:	2200      	movs	r2, #0
 810b492:	6818      	ldr	r0, [r3, #0]
 810b494:	fa00 f009 	lsl.w	r0, r0, r9
 810b498:	4302      	orrs	r2, r0
 810b49a:	f84a 2b04 	str.w	r2, [sl], #4
 810b49e:	f853 2b04 	ldr.w	r2, [r3], #4
 810b4a2:	459c      	cmp	ip, r3
 810b4a4:	fa22 f20e 	lsr.w	r2, r2, lr
 810b4a8:	d8f3      	bhi.n	810b492 <__lshift+0x6e>
 810b4aa:	ebac 0304 	sub.w	r3, ip, r4
 810b4ae:	3b15      	subs	r3, #21
 810b4b0:	f023 0303 	bic.w	r3, r3, #3
 810b4b4:	3304      	adds	r3, #4
 810b4b6:	f104 0015 	add.w	r0, r4, #21
 810b4ba:	4584      	cmp	ip, r0
 810b4bc:	bf38      	it	cc
 810b4be:	2304      	movcc	r3, #4
 810b4c0:	50ca      	str	r2, [r1, r3]
 810b4c2:	b10a      	cbz	r2, 810b4c8 <__lshift+0xa4>
 810b4c4:	f108 0602 	add.w	r6, r8, #2
 810b4c8:	3e01      	subs	r6, #1
 810b4ca:	4638      	mov	r0, r7
 810b4cc:	612e      	str	r6, [r5, #16]
 810b4ce:	4621      	mov	r1, r4
 810b4d0:	f7ff fd8c 	bl	810afec <_Bfree>
 810b4d4:	4628      	mov	r0, r5
 810b4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b4da:	f842 0f04 	str.w	r0, [r2, #4]!
 810b4de:	3301      	adds	r3, #1
 810b4e0:	e7c5      	b.n	810b46e <__lshift+0x4a>
 810b4e2:	3904      	subs	r1, #4
 810b4e4:	f853 2b04 	ldr.w	r2, [r3], #4
 810b4e8:	f841 2f04 	str.w	r2, [r1, #4]!
 810b4ec:	459c      	cmp	ip, r3
 810b4ee:	d8f9      	bhi.n	810b4e4 <__lshift+0xc0>
 810b4f0:	e7ea      	b.n	810b4c8 <__lshift+0xa4>
 810b4f2:	bf00      	nop
 810b4f4:	0810e8d4 	.word	0x0810e8d4
 810b4f8:	0810e964 	.word	0x0810e964

0810b4fc <__mcmp>:
 810b4fc:	b530      	push	{r4, r5, lr}
 810b4fe:	6902      	ldr	r2, [r0, #16]
 810b500:	690c      	ldr	r4, [r1, #16]
 810b502:	1b12      	subs	r2, r2, r4
 810b504:	d10e      	bne.n	810b524 <__mcmp+0x28>
 810b506:	f100 0314 	add.w	r3, r0, #20
 810b50a:	3114      	adds	r1, #20
 810b50c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b510:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b514:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b518:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b51c:	42a5      	cmp	r5, r4
 810b51e:	d003      	beq.n	810b528 <__mcmp+0x2c>
 810b520:	d305      	bcc.n	810b52e <__mcmp+0x32>
 810b522:	2201      	movs	r2, #1
 810b524:	4610      	mov	r0, r2
 810b526:	bd30      	pop	{r4, r5, pc}
 810b528:	4283      	cmp	r3, r0
 810b52a:	d3f3      	bcc.n	810b514 <__mcmp+0x18>
 810b52c:	e7fa      	b.n	810b524 <__mcmp+0x28>
 810b52e:	f04f 32ff 	mov.w	r2, #4294967295
 810b532:	e7f7      	b.n	810b524 <__mcmp+0x28>

0810b534 <__mdiff>:
 810b534:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b538:	460c      	mov	r4, r1
 810b53a:	4606      	mov	r6, r0
 810b53c:	4611      	mov	r1, r2
 810b53e:	4620      	mov	r0, r4
 810b540:	4617      	mov	r7, r2
 810b542:	f7ff ffdb 	bl	810b4fc <__mcmp>
 810b546:	1e05      	subs	r5, r0, #0
 810b548:	d110      	bne.n	810b56c <__mdiff+0x38>
 810b54a:	4629      	mov	r1, r5
 810b54c:	4630      	mov	r0, r6
 810b54e:	f7ff fd0d 	bl	810af6c <_Balloc>
 810b552:	b930      	cbnz	r0, 810b562 <__mdiff+0x2e>
 810b554:	4b39      	ldr	r3, [pc, #228]	; (810b63c <__mdiff+0x108>)
 810b556:	4602      	mov	r2, r0
 810b558:	f240 2132 	movw	r1, #562	; 0x232
 810b55c:	4838      	ldr	r0, [pc, #224]	; (810b640 <__mdiff+0x10c>)
 810b55e:	f001 f9f5 	bl	810c94c <__assert_func>
 810b562:	2301      	movs	r3, #1
 810b564:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b568:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b56c:	bfa4      	itt	ge
 810b56e:	463b      	movge	r3, r7
 810b570:	4627      	movge	r7, r4
 810b572:	4630      	mov	r0, r6
 810b574:	6879      	ldr	r1, [r7, #4]
 810b576:	bfa6      	itte	ge
 810b578:	461c      	movge	r4, r3
 810b57a:	2500      	movge	r5, #0
 810b57c:	2501      	movlt	r5, #1
 810b57e:	f7ff fcf5 	bl	810af6c <_Balloc>
 810b582:	b920      	cbnz	r0, 810b58e <__mdiff+0x5a>
 810b584:	4b2d      	ldr	r3, [pc, #180]	; (810b63c <__mdiff+0x108>)
 810b586:	4602      	mov	r2, r0
 810b588:	f44f 7110 	mov.w	r1, #576	; 0x240
 810b58c:	e7e6      	b.n	810b55c <__mdiff+0x28>
 810b58e:	693e      	ldr	r6, [r7, #16]
 810b590:	60c5      	str	r5, [r0, #12]
 810b592:	6925      	ldr	r5, [r4, #16]
 810b594:	f107 0114 	add.w	r1, r7, #20
 810b598:	f104 0914 	add.w	r9, r4, #20
 810b59c:	f100 0e14 	add.w	lr, r0, #20
 810b5a0:	f107 0210 	add.w	r2, r7, #16
 810b5a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810b5a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810b5ac:	46f2      	mov	sl, lr
 810b5ae:	2700      	movs	r7, #0
 810b5b0:	f859 3b04 	ldr.w	r3, [r9], #4
 810b5b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b5b8:	fa1f f883 	uxth.w	r8, r3
 810b5bc:	fa17 f78b 	uxtah	r7, r7, fp
 810b5c0:	0c1b      	lsrs	r3, r3, #16
 810b5c2:	eba7 0808 	sub.w	r8, r7, r8
 810b5c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b5ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b5ce:	fa1f f888 	uxth.w	r8, r8
 810b5d2:	141f      	asrs	r7, r3, #16
 810b5d4:	454d      	cmp	r5, r9
 810b5d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b5da:	f84a 3b04 	str.w	r3, [sl], #4
 810b5de:	d8e7      	bhi.n	810b5b0 <__mdiff+0x7c>
 810b5e0:	1b2b      	subs	r3, r5, r4
 810b5e2:	3b15      	subs	r3, #21
 810b5e4:	f023 0303 	bic.w	r3, r3, #3
 810b5e8:	3304      	adds	r3, #4
 810b5ea:	3415      	adds	r4, #21
 810b5ec:	42a5      	cmp	r5, r4
 810b5ee:	bf38      	it	cc
 810b5f0:	2304      	movcc	r3, #4
 810b5f2:	4419      	add	r1, r3
 810b5f4:	4473      	add	r3, lr
 810b5f6:	469e      	mov	lr, r3
 810b5f8:	460d      	mov	r5, r1
 810b5fa:	4565      	cmp	r5, ip
 810b5fc:	d30e      	bcc.n	810b61c <__mdiff+0xe8>
 810b5fe:	f10c 0203 	add.w	r2, ip, #3
 810b602:	1a52      	subs	r2, r2, r1
 810b604:	f022 0203 	bic.w	r2, r2, #3
 810b608:	3903      	subs	r1, #3
 810b60a:	458c      	cmp	ip, r1
 810b60c:	bf38      	it	cc
 810b60e:	2200      	movcc	r2, #0
 810b610:	441a      	add	r2, r3
 810b612:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810b616:	b17b      	cbz	r3, 810b638 <__mdiff+0x104>
 810b618:	6106      	str	r6, [r0, #16]
 810b61a:	e7a5      	b.n	810b568 <__mdiff+0x34>
 810b61c:	f855 8b04 	ldr.w	r8, [r5], #4
 810b620:	fa17 f488 	uxtah	r4, r7, r8
 810b624:	1422      	asrs	r2, r4, #16
 810b626:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810b62a:	b2a4      	uxth	r4, r4
 810b62c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810b630:	f84e 4b04 	str.w	r4, [lr], #4
 810b634:	1417      	asrs	r7, r2, #16
 810b636:	e7e0      	b.n	810b5fa <__mdiff+0xc6>
 810b638:	3e01      	subs	r6, #1
 810b63a:	e7ea      	b.n	810b612 <__mdiff+0xde>
 810b63c:	0810e8d4 	.word	0x0810e8d4
 810b640:	0810e964 	.word	0x0810e964

0810b644 <__ulp>:
 810b644:	b082      	sub	sp, #8
 810b646:	ed8d 0b00 	vstr	d0, [sp]
 810b64a:	9b01      	ldr	r3, [sp, #4]
 810b64c:	4912      	ldr	r1, [pc, #72]	; (810b698 <__ulp+0x54>)
 810b64e:	4019      	ands	r1, r3
 810b650:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810b654:	2900      	cmp	r1, #0
 810b656:	dd05      	ble.n	810b664 <__ulp+0x20>
 810b658:	2200      	movs	r2, #0
 810b65a:	460b      	mov	r3, r1
 810b65c:	ec43 2b10 	vmov	d0, r2, r3
 810b660:	b002      	add	sp, #8
 810b662:	4770      	bx	lr
 810b664:	4249      	negs	r1, r1
 810b666:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810b66a:	ea4f 5021 	mov.w	r0, r1, asr #20
 810b66e:	f04f 0200 	mov.w	r2, #0
 810b672:	f04f 0300 	mov.w	r3, #0
 810b676:	da04      	bge.n	810b682 <__ulp+0x3e>
 810b678:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810b67c:	fa41 f300 	asr.w	r3, r1, r0
 810b680:	e7ec      	b.n	810b65c <__ulp+0x18>
 810b682:	f1a0 0114 	sub.w	r1, r0, #20
 810b686:	291e      	cmp	r1, #30
 810b688:	bfda      	itte	le
 810b68a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810b68e:	fa20 f101 	lsrle.w	r1, r0, r1
 810b692:	2101      	movgt	r1, #1
 810b694:	460a      	mov	r2, r1
 810b696:	e7e1      	b.n	810b65c <__ulp+0x18>
 810b698:	7ff00000 	.word	0x7ff00000

0810b69c <__b2d>:
 810b69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b69e:	6905      	ldr	r5, [r0, #16]
 810b6a0:	f100 0714 	add.w	r7, r0, #20
 810b6a4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810b6a8:	1f2e      	subs	r6, r5, #4
 810b6aa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810b6ae:	4620      	mov	r0, r4
 810b6b0:	f7ff fd52 	bl	810b158 <__hi0bits>
 810b6b4:	f1c0 0320 	rsb	r3, r0, #32
 810b6b8:	280a      	cmp	r0, #10
 810b6ba:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810b738 <__b2d+0x9c>
 810b6be:	600b      	str	r3, [r1, #0]
 810b6c0:	dc14      	bgt.n	810b6ec <__b2d+0x50>
 810b6c2:	f1c0 0e0b 	rsb	lr, r0, #11
 810b6c6:	fa24 f10e 	lsr.w	r1, r4, lr
 810b6ca:	42b7      	cmp	r7, r6
 810b6cc:	ea41 030c 	orr.w	r3, r1, ip
 810b6d0:	bf34      	ite	cc
 810b6d2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b6d6:	2100      	movcs	r1, #0
 810b6d8:	3015      	adds	r0, #21
 810b6da:	fa04 f000 	lsl.w	r0, r4, r0
 810b6de:	fa21 f10e 	lsr.w	r1, r1, lr
 810b6e2:	ea40 0201 	orr.w	r2, r0, r1
 810b6e6:	ec43 2b10 	vmov	d0, r2, r3
 810b6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b6ec:	42b7      	cmp	r7, r6
 810b6ee:	bf3a      	itte	cc
 810b6f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b6f4:	f1a5 0608 	subcc.w	r6, r5, #8
 810b6f8:	2100      	movcs	r1, #0
 810b6fa:	380b      	subs	r0, #11
 810b6fc:	d017      	beq.n	810b72e <__b2d+0x92>
 810b6fe:	f1c0 0c20 	rsb	ip, r0, #32
 810b702:	fa04 f500 	lsl.w	r5, r4, r0
 810b706:	42be      	cmp	r6, r7
 810b708:	fa21 f40c 	lsr.w	r4, r1, ip
 810b70c:	ea45 0504 	orr.w	r5, r5, r4
 810b710:	bf8c      	ite	hi
 810b712:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810b716:	2400      	movls	r4, #0
 810b718:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810b71c:	fa01 f000 	lsl.w	r0, r1, r0
 810b720:	fa24 f40c 	lsr.w	r4, r4, ip
 810b724:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b728:	ea40 0204 	orr.w	r2, r0, r4
 810b72c:	e7db      	b.n	810b6e6 <__b2d+0x4a>
 810b72e:	ea44 030c 	orr.w	r3, r4, ip
 810b732:	460a      	mov	r2, r1
 810b734:	e7d7      	b.n	810b6e6 <__b2d+0x4a>
 810b736:	bf00      	nop
 810b738:	3ff00000 	.word	0x3ff00000

0810b73c <__d2b>:
 810b73c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b740:	4689      	mov	r9, r1
 810b742:	2101      	movs	r1, #1
 810b744:	ec57 6b10 	vmov	r6, r7, d0
 810b748:	4690      	mov	r8, r2
 810b74a:	f7ff fc0f 	bl	810af6c <_Balloc>
 810b74e:	4604      	mov	r4, r0
 810b750:	b930      	cbnz	r0, 810b760 <__d2b+0x24>
 810b752:	4602      	mov	r2, r0
 810b754:	4b25      	ldr	r3, [pc, #148]	; (810b7ec <__d2b+0xb0>)
 810b756:	4826      	ldr	r0, [pc, #152]	; (810b7f0 <__d2b+0xb4>)
 810b758:	f240 310a 	movw	r1, #778	; 0x30a
 810b75c:	f001 f8f6 	bl	810c94c <__assert_func>
 810b760:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810b764:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b768:	bb35      	cbnz	r5, 810b7b8 <__d2b+0x7c>
 810b76a:	2e00      	cmp	r6, #0
 810b76c:	9301      	str	r3, [sp, #4]
 810b76e:	d028      	beq.n	810b7c2 <__d2b+0x86>
 810b770:	4668      	mov	r0, sp
 810b772:	9600      	str	r6, [sp, #0]
 810b774:	f7ff fd10 	bl	810b198 <__lo0bits>
 810b778:	9900      	ldr	r1, [sp, #0]
 810b77a:	b300      	cbz	r0, 810b7be <__d2b+0x82>
 810b77c:	9a01      	ldr	r2, [sp, #4]
 810b77e:	f1c0 0320 	rsb	r3, r0, #32
 810b782:	fa02 f303 	lsl.w	r3, r2, r3
 810b786:	430b      	orrs	r3, r1
 810b788:	40c2      	lsrs	r2, r0
 810b78a:	6163      	str	r3, [r4, #20]
 810b78c:	9201      	str	r2, [sp, #4]
 810b78e:	9b01      	ldr	r3, [sp, #4]
 810b790:	61a3      	str	r3, [r4, #24]
 810b792:	2b00      	cmp	r3, #0
 810b794:	bf14      	ite	ne
 810b796:	2202      	movne	r2, #2
 810b798:	2201      	moveq	r2, #1
 810b79a:	6122      	str	r2, [r4, #16]
 810b79c:	b1d5      	cbz	r5, 810b7d4 <__d2b+0x98>
 810b79e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b7a2:	4405      	add	r5, r0
 810b7a4:	f8c9 5000 	str.w	r5, [r9]
 810b7a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b7ac:	f8c8 0000 	str.w	r0, [r8]
 810b7b0:	4620      	mov	r0, r4
 810b7b2:	b003      	add	sp, #12
 810b7b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b7b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b7bc:	e7d5      	b.n	810b76a <__d2b+0x2e>
 810b7be:	6161      	str	r1, [r4, #20]
 810b7c0:	e7e5      	b.n	810b78e <__d2b+0x52>
 810b7c2:	a801      	add	r0, sp, #4
 810b7c4:	f7ff fce8 	bl	810b198 <__lo0bits>
 810b7c8:	9b01      	ldr	r3, [sp, #4]
 810b7ca:	6163      	str	r3, [r4, #20]
 810b7cc:	2201      	movs	r2, #1
 810b7ce:	6122      	str	r2, [r4, #16]
 810b7d0:	3020      	adds	r0, #32
 810b7d2:	e7e3      	b.n	810b79c <__d2b+0x60>
 810b7d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b7d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b7dc:	f8c9 0000 	str.w	r0, [r9]
 810b7e0:	6918      	ldr	r0, [r3, #16]
 810b7e2:	f7ff fcb9 	bl	810b158 <__hi0bits>
 810b7e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b7ea:	e7df      	b.n	810b7ac <__d2b+0x70>
 810b7ec:	0810e8d4 	.word	0x0810e8d4
 810b7f0:	0810e964 	.word	0x0810e964

0810b7f4 <__ratio>:
 810b7f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b7f8:	4688      	mov	r8, r1
 810b7fa:	4669      	mov	r1, sp
 810b7fc:	4681      	mov	r9, r0
 810b7fe:	f7ff ff4d 	bl	810b69c <__b2d>
 810b802:	a901      	add	r1, sp, #4
 810b804:	4640      	mov	r0, r8
 810b806:	ec55 4b10 	vmov	r4, r5, d0
 810b80a:	f7ff ff47 	bl	810b69c <__b2d>
 810b80e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b812:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b816:	eba3 0c02 	sub.w	ip, r3, r2
 810b81a:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b81e:	1a9b      	subs	r3, r3, r2
 810b820:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b824:	ec51 0b10 	vmov	r0, r1, d0
 810b828:	2b00      	cmp	r3, #0
 810b82a:	bfd6      	itet	le
 810b82c:	460a      	movle	r2, r1
 810b82e:	462a      	movgt	r2, r5
 810b830:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b834:	468b      	mov	fp, r1
 810b836:	462f      	mov	r7, r5
 810b838:	bfd4      	ite	le
 810b83a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b83e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b842:	4620      	mov	r0, r4
 810b844:	ee10 2a10 	vmov	r2, s0
 810b848:	465b      	mov	r3, fp
 810b84a:	4639      	mov	r1, r7
 810b84c:	f7f5 f886 	bl	810095c <__aeabi_ddiv>
 810b850:	ec41 0b10 	vmov	d0, r0, r1
 810b854:	b003      	add	sp, #12
 810b856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b85a <__copybits>:
 810b85a:	3901      	subs	r1, #1
 810b85c:	b570      	push	{r4, r5, r6, lr}
 810b85e:	1149      	asrs	r1, r1, #5
 810b860:	6914      	ldr	r4, [r2, #16]
 810b862:	3101      	adds	r1, #1
 810b864:	f102 0314 	add.w	r3, r2, #20
 810b868:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b86c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b870:	1f05      	subs	r5, r0, #4
 810b872:	42a3      	cmp	r3, r4
 810b874:	d30c      	bcc.n	810b890 <__copybits+0x36>
 810b876:	1aa3      	subs	r3, r4, r2
 810b878:	3b11      	subs	r3, #17
 810b87a:	f023 0303 	bic.w	r3, r3, #3
 810b87e:	3211      	adds	r2, #17
 810b880:	42a2      	cmp	r2, r4
 810b882:	bf88      	it	hi
 810b884:	2300      	movhi	r3, #0
 810b886:	4418      	add	r0, r3
 810b888:	2300      	movs	r3, #0
 810b88a:	4288      	cmp	r0, r1
 810b88c:	d305      	bcc.n	810b89a <__copybits+0x40>
 810b88e:	bd70      	pop	{r4, r5, r6, pc}
 810b890:	f853 6b04 	ldr.w	r6, [r3], #4
 810b894:	f845 6f04 	str.w	r6, [r5, #4]!
 810b898:	e7eb      	b.n	810b872 <__copybits+0x18>
 810b89a:	f840 3b04 	str.w	r3, [r0], #4
 810b89e:	e7f4      	b.n	810b88a <__copybits+0x30>

0810b8a0 <__any_on>:
 810b8a0:	f100 0214 	add.w	r2, r0, #20
 810b8a4:	6900      	ldr	r0, [r0, #16]
 810b8a6:	114b      	asrs	r3, r1, #5
 810b8a8:	4298      	cmp	r0, r3
 810b8aa:	b510      	push	{r4, lr}
 810b8ac:	db11      	blt.n	810b8d2 <__any_on+0x32>
 810b8ae:	dd0a      	ble.n	810b8c6 <__any_on+0x26>
 810b8b0:	f011 011f 	ands.w	r1, r1, #31
 810b8b4:	d007      	beq.n	810b8c6 <__any_on+0x26>
 810b8b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810b8ba:	fa24 f001 	lsr.w	r0, r4, r1
 810b8be:	fa00 f101 	lsl.w	r1, r0, r1
 810b8c2:	428c      	cmp	r4, r1
 810b8c4:	d10b      	bne.n	810b8de <__any_on+0x3e>
 810b8c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b8ca:	4293      	cmp	r3, r2
 810b8cc:	d803      	bhi.n	810b8d6 <__any_on+0x36>
 810b8ce:	2000      	movs	r0, #0
 810b8d0:	bd10      	pop	{r4, pc}
 810b8d2:	4603      	mov	r3, r0
 810b8d4:	e7f7      	b.n	810b8c6 <__any_on+0x26>
 810b8d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b8da:	2900      	cmp	r1, #0
 810b8dc:	d0f5      	beq.n	810b8ca <__any_on+0x2a>
 810b8de:	2001      	movs	r0, #1
 810b8e0:	e7f6      	b.n	810b8d0 <__any_on+0x30>

0810b8e2 <_calloc_r>:
 810b8e2:	b513      	push	{r0, r1, r4, lr}
 810b8e4:	434a      	muls	r2, r1
 810b8e6:	4611      	mov	r1, r2
 810b8e8:	9201      	str	r2, [sp, #4]
 810b8ea:	f7fc f859 	bl	81079a0 <_malloc_r>
 810b8ee:	4604      	mov	r4, r0
 810b8f0:	b118      	cbz	r0, 810b8fa <_calloc_r+0x18>
 810b8f2:	9a01      	ldr	r2, [sp, #4]
 810b8f4:	2100      	movs	r1, #0
 810b8f6:	f7fb fffa 	bl	81078ee <memset>
 810b8fa:	4620      	mov	r0, r4
 810b8fc:	b002      	add	sp, #8
 810b8fe:	bd10      	pop	{r4, pc}

0810b900 <__ssputs_r>:
 810b900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b904:	688e      	ldr	r6, [r1, #8]
 810b906:	429e      	cmp	r6, r3
 810b908:	4682      	mov	sl, r0
 810b90a:	460c      	mov	r4, r1
 810b90c:	4690      	mov	r8, r2
 810b90e:	461f      	mov	r7, r3
 810b910:	d838      	bhi.n	810b984 <__ssputs_r+0x84>
 810b912:	898a      	ldrh	r2, [r1, #12]
 810b914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810b918:	d032      	beq.n	810b980 <__ssputs_r+0x80>
 810b91a:	6825      	ldr	r5, [r4, #0]
 810b91c:	6909      	ldr	r1, [r1, #16]
 810b91e:	eba5 0901 	sub.w	r9, r5, r1
 810b922:	6965      	ldr	r5, [r4, #20]
 810b924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b92c:	3301      	adds	r3, #1
 810b92e:	444b      	add	r3, r9
 810b930:	106d      	asrs	r5, r5, #1
 810b932:	429d      	cmp	r5, r3
 810b934:	bf38      	it	cc
 810b936:	461d      	movcc	r5, r3
 810b938:	0553      	lsls	r3, r2, #21
 810b93a:	d531      	bpl.n	810b9a0 <__ssputs_r+0xa0>
 810b93c:	4629      	mov	r1, r5
 810b93e:	f7fc f82f 	bl	81079a0 <_malloc_r>
 810b942:	4606      	mov	r6, r0
 810b944:	b950      	cbnz	r0, 810b95c <__ssputs_r+0x5c>
 810b946:	230c      	movs	r3, #12
 810b948:	f8ca 3000 	str.w	r3, [sl]
 810b94c:	89a3      	ldrh	r3, [r4, #12]
 810b94e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b952:	81a3      	strh	r3, [r4, #12]
 810b954:	f04f 30ff 	mov.w	r0, #4294967295
 810b958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b95c:	6921      	ldr	r1, [r4, #16]
 810b95e:	464a      	mov	r2, r9
 810b960:	f7ff faea 	bl	810af38 <memcpy>
 810b964:	89a3      	ldrh	r3, [r4, #12]
 810b966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810b96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b96e:	81a3      	strh	r3, [r4, #12]
 810b970:	6126      	str	r6, [r4, #16]
 810b972:	6165      	str	r5, [r4, #20]
 810b974:	444e      	add	r6, r9
 810b976:	eba5 0509 	sub.w	r5, r5, r9
 810b97a:	6026      	str	r6, [r4, #0]
 810b97c:	60a5      	str	r5, [r4, #8]
 810b97e:	463e      	mov	r6, r7
 810b980:	42be      	cmp	r6, r7
 810b982:	d900      	bls.n	810b986 <__ssputs_r+0x86>
 810b984:	463e      	mov	r6, r7
 810b986:	4632      	mov	r2, r6
 810b988:	6820      	ldr	r0, [r4, #0]
 810b98a:	4641      	mov	r1, r8
 810b98c:	f001 f830 	bl	810c9f0 <memmove>
 810b990:	68a3      	ldr	r3, [r4, #8]
 810b992:	6822      	ldr	r2, [r4, #0]
 810b994:	1b9b      	subs	r3, r3, r6
 810b996:	4432      	add	r2, r6
 810b998:	60a3      	str	r3, [r4, #8]
 810b99a:	6022      	str	r2, [r4, #0]
 810b99c:	2000      	movs	r0, #0
 810b99e:	e7db      	b.n	810b958 <__ssputs_r+0x58>
 810b9a0:	462a      	mov	r2, r5
 810b9a2:	f001 f83f 	bl	810ca24 <_realloc_r>
 810b9a6:	4606      	mov	r6, r0
 810b9a8:	2800      	cmp	r0, #0
 810b9aa:	d1e1      	bne.n	810b970 <__ssputs_r+0x70>
 810b9ac:	6921      	ldr	r1, [r4, #16]
 810b9ae:	4650      	mov	r0, sl
 810b9b0:	f7fb ffa6 	bl	8107900 <_free_r>
 810b9b4:	e7c7      	b.n	810b946 <__ssputs_r+0x46>
	...

0810b9b8 <_svfiprintf_r>:
 810b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b9bc:	4698      	mov	r8, r3
 810b9be:	898b      	ldrh	r3, [r1, #12]
 810b9c0:	061b      	lsls	r3, r3, #24
 810b9c2:	b09d      	sub	sp, #116	; 0x74
 810b9c4:	4607      	mov	r7, r0
 810b9c6:	460d      	mov	r5, r1
 810b9c8:	4614      	mov	r4, r2
 810b9ca:	d50e      	bpl.n	810b9ea <_svfiprintf_r+0x32>
 810b9cc:	690b      	ldr	r3, [r1, #16]
 810b9ce:	b963      	cbnz	r3, 810b9ea <_svfiprintf_r+0x32>
 810b9d0:	2140      	movs	r1, #64	; 0x40
 810b9d2:	f7fb ffe5 	bl	81079a0 <_malloc_r>
 810b9d6:	6028      	str	r0, [r5, #0]
 810b9d8:	6128      	str	r0, [r5, #16]
 810b9da:	b920      	cbnz	r0, 810b9e6 <_svfiprintf_r+0x2e>
 810b9dc:	230c      	movs	r3, #12
 810b9de:	603b      	str	r3, [r7, #0]
 810b9e0:	f04f 30ff 	mov.w	r0, #4294967295
 810b9e4:	e0d1      	b.n	810bb8a <_svfiprintf_r+0x1d2>
 810b9e6:	2340      	movs	r3, #64	; 0x40
 810b9e8:	616b      	str	r3, [r5, #20]
 810b9ea:	2300      	movs	r3, #0
 810b9ec:	9309      	str	r3, [sp, #36]	; 0x24
 810b9ee:	2320      	movs	r3, #32
 810b9f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b9f4:	f8cd 800c 	str.w	r8, [sp, #12]
 810b9f8:	2330      	movs	r3, #48	; 0x30
 810b9fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810bba4 <_svfiprintf_r+0x1ec>
 810b9fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810ba02:	f04f 0901 	mov.w	r9, #1
 810ba06:	4623      	mov	r3, r4
 810ba08:	469a      	mov	sl, r3
 810ba0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ba0e:	b10a      	cbz	r2, 810ba14 <_svfiprintf_r+0x5c>
 810ba10:	2a25      	cmp	r2, #37	; 0x25
 810ba12:	d1f9      	bne.n	810ba08 <_svfiprintf_r+0x50>
 810ba14:	ebba 0b04 	subs.w	fp, sl, r4
 810ba18:	d00b      	beq.n	810ba32 <_svfiprintf_r+0x7a>
 810ba1a:	465b      	mov	r3, fp
 810ba1c:	4622      	mov	r2, r4
 810ba1e:	4629      	mov	r1, r5
 810ba20:	4638      	mov	r0, r7
 810ba22:	f7ff ff6d 	bl	810b900 <__ssputs_r>
 810ba26:	3001      	adds	r0, #1
 810ba28:	f000 80aa 	beq.w	810bb80 <_svfiprintf_r+0x1c8>
 810ba2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810ba2e:	445a      	add	r2, fp
 810ba30:	9209      	str	r2, [sp, #36]	; 0x24
 810ba32:	f89a 3000 	ldrb.w	r3, [sl]
 810ba36:	2b00      	cmp	r3, #0
 810ba38:	f000 80a2 	beq.w	810bb80 <_svfiprintf_r+0x1c8>
 810ba3c:	2300      	movs	r3, #0
 810ba3e:	f04f 32ff 	mov.w	r2, #4294967295
 810ba42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ba46:	f10a 0a01 	add.w	sl, sl, #1
 810ba4a:	9304      	str	r3, [sp, #16]
 810ba4c:	9307      	str	r3, [sp, #28]
 810ba4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810ba52:	931a      	str	r3, [sp, #104]	; 0x68
 810ba54:	4654      	mov	r4, sl
 810ba56:	2205      	movs	r2, #5
 810ba58:	f814 1b01 	ldrb.w	r1, [r4], #1
 810ba5c:	4851      	ldr	r0, [pc, #324]	; (810bba4 <_svfiprintf_r+0x1ec>)
 810ba5e:	f7f4 fc47 	bl	81002f0 <memchr>
 810ba62:	9a04      	ldr	r2, [sp, #16]
 810ba64:	b9d8      	cbnz	r0, 810ba9e <_svfiprintf_r+0xe6>
 810ba66:	06d0      	lsls	r0, r2, #27
 810ba68:	bf44      	itt	mi
 810ba6a:	2320      	movmi	r3, #32
 810ba6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ba70:	0711      	lsls	r1, r2, #28
 810ba72:	bf44      	itt	mi
 810ba74:	232b      	movmi	r3, #43	; 0x2b
 810ba76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810ba7a:	f89a 3000 	ldrb.w	r3, [sl]
 810ba7e:	2b2a      	cmp	r3, #42	; 0x2a
 810ba80:	d015      	beq.n	810baae <_svfiprintf_r+0xf6>
 810ba82:	9a07      	ldr	r2, [sp, #28]
 810ba84:	4654      	mov	r4, sl
 810ba86:	2000      	movs	r0, #0
 810ba88:	f04f 0c0a 	mov.w	ip, #10
 810ba8c:	4621      	mov	r1, r4
 810ba8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810ba92:	3b30      	subs	r3, #48	; 0x30
 810ba94:	2b09      	cmp	r3, #9
 810ba96:	d94e      	bls.n	810bb36 <_svfiprintf_r+0x17e>
 810ba98:	b1b0      	cbz	r0, 810bac8 <_svfiprintf_r+0x110>
 810ba9a:	9207      	str	r2, [sp, #28]
 810ba9c:	e014      	b.n	810bac8 <_svfiprintf_r+0x110>
 810ba9e:	eba0 0308 	sub.w	r3, r0, r8
 810baa2:	fa09 f303 	lsl.w	r3, r9, r3
 810baa6:	4313      	orrs	r3, r2
 810baa8:	9304      	str	r3, [sp, #16]
 810baaa:	46a2      	mov	sl, r4
 810baac:	e7d2      	b.n	810ba54 <_svfiprintf_r+0x9c>
 810baae:	9b03      	ldr	r3, [sp, #12]
 810bab0:	1d19      	adds	r1, r3, #4
 810bab2:	681b      	ldr	r3, [r3, #0]
 810bab4:	9103      	str	r1, [sp, #12]
 810bab6:	2b00      	cmp	r3, #0
 810bab8:	bfbb      	ittet	lt
 810baba:	425b      	neglt	r3, r3
 810babc:	f042 0202 	orrlt.w	r2, r2, #2
 810bac0:	9307      	strge	r3, [sp, #28]
 810bac2:	9307      	strlt	r3, [sp, #28]
 810bac4:	bfb8      	it	lt
 810bac6:	9204      	strlt	r2, [sp, #16]
 810bac8:	7823      	ldrb	r3, [r4, #0]
 810baca:	2b2e      	cmp	r3, #46	; 0x2e
 810bacc:	d10c      	bne.n	810bae8 <_svfiprintf_r+0x130>
 810bace:	7863      	ldrb	r3, [r4, #1]
 810bad0:	2b2a      	cmp	r3, #42	; 0x2a
 810bad2:	d135      	bne.n	810bb40 <_svfiprintf_r+0x188>
 810bad4:	9b03      	ldr	r3, [sp, #12]
 810bad6:	1d1a      	adds	r2, r3, #4
 810bad8:	681b      	ldr	r3, [r3, #0]
 810bada:	9203      	str	r2, [sp, #12]
 810badc:	2b00      	cmp	r3, #0
 810bade:	bfb8      	it	lt
 810bae0:	f04f 33ff 	movlt.w	r3, #4294967295
 810bae4:	3402      	adds	r4, #2
 810bae6:	9305      	str	r3, [sp, #20]
 810bae8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810bbb4 <_svfiprintf_r+0x1fc>
 810baec:	7821      	ldrb	r1, [r4, #0]
 810baee:	2203      	movs	r2, #3
 810baf0:	4650      	mov	r0, sl
 810baf2:	f7f4 fbfd 	bl	81002f0 <memchr>
 810baf6:	b140      	cbz	r0, 810bb0a <_svfiprintf_r+0x152>
 810baf8:	2340      	movs	r3, #64	; 0x40
 810bafa:	eba0 000a 	sub.w	r0, r0, sl
 810bafe:	fa03 f000 	lsl.w	r0, r3, r0
 810bb02:	9b04      	ldr	r3, [sp, #16]
 810bb04:	4303      	orrs	r3, r0
 810bb06:	3401      	adds	r4, #1
 810bb08:	9304      	str	r3, [sp, #16]
 810bb0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bb0e:	4826      	ldr	r0, [pc, #152]	; (810bba8 <_svfiprintf_r+0x1f0>)
 810bb10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810bb14:	2206      	movs	r2, #6
 810bb16:	f7f4 fbeb 	bl	81002f0 <memchr>
 810bb1a:	2800      	cmp	r0, #0
 810bb1c:	d038      	beq.n	810bb90 <_svfiprintf_r+0x1d8>
 810bb1e:	4b23      	ldr	r3, [pc, #140]	; (810bbac <_svfiprintf_r+0x1f4>)
 810bb20:	bb1b      	cbnz	r3, 810bb6a <_svfiprintf_r+0x1b2>
 810bb22:	9b03      	ldr	r3, [sp, #12]
 810bb24:	3307      	adds	r3, #7
 810bb26:	f023 0307 	bic.w	r3, r3, #7
 810bb2a:	3308      	adds	r3, #8
 810bb2c:	9303      	str	r3, [sp, #12]
 810bb2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bb30:	4433      	add	r3, r6
 810bb32:	9309      	str	r3, [sp, #36]	; 0x24
 810bb34:	e767      	b.n	810ba06 <_svfiprintf_r+0x4e>
 810bb36:	fb0c 3202 	mla	r2, ip, r2, r3
 810bb3a:	460c      	mov	r4, r1
 810bb3c:	2001      	movs	r0, #1
 810bb3e:	e7a5      	b.n	810ba8c <_svfiprintf_r+0xd4>
 810bb40:	2300      	movs	r3, #0
 810bb42:	3401      	adds	r4, #1
 810bb44:	9305      	str	r3, [sp, #20]
 810bb46:	4619      	mov	r1, r3
 810bb48:	f04f 0c0a 	mov.w	ip, #10
 810bb4c:	4620      	mov	r0, r4
 810bb4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810bb52:	3a30      	subs	r2, #48	; 0x30
 810bb54:	2a09      	cmp	r2, #9
 810bb56:	d903      	bls.n	810bb60 <_svfiprintf_r+0x1a8>
 810bb58:	2b00      	cmp	r3, #0
 810bb5a:	d0c5      	beq.n	810bae8 <_svfiprintf_r+0x130>
 810bb5c:	9105      	str	r1, [sp, #20]
 810bb5e:	e7c3      	b.n	810bae8 <_svfiprintf_r+0x130>
 810bb60:	fb0c 2101 	mla	r1, ip, r1, r2
 810bb64:	4604      	mov	r4, r0
 810bb66:	2301      	movs	r3, #1
 810bb68:	e7f0      	b.n	810bb4c <_svfiprintf_r+0x194>
 810bb6a:	ab03      	add	r3, sp, #12
 810bb6c:	9300      	str	r3, [sp, #0]
 810bb6e:	462a      	mov	r2, r5
 810bb70:	4b0f      	ldr	r3, [pc, #60]	; (810bbb0 <_svfiprintf_r+0x1f8>)
 810bb72:	a904      	add	r1, sp, #16
 810bb74:	4638      	mov	r0, r7
 810bb76:	f7fc f80d 	bl	8107b94 <_printf_float>
 810bb7a:	1c42      	adds	r2, r0, #1
 810bb7c:	4606      	mov	r6, r0
 810bb7e:	d1d6      	bne.n	810bb2e <_svfiprintf_r+0x176>
 810bb80:	89ab      	ldrh	r3, [r5, #12]
 810bb82:	065b      	lsls	r3, r3, #25
 810bb84:	f53f af2c 	bmi.w	810b9e0 <_svfiprintf_r+0x28>
 810bb88:	9809      	ldr	r0, [sp, #36]	; 0x24
 810bb8a:	b01d      	add	sp, #116	; 0x74
 810bb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bb90:	ab03      	add	r3, sp, #12
 810bb92:	9300      	str	r3, [sp, #0]
 810bb94:	462a      	mov	r2, r5
 810bb96:	4b06      	ldr	r3, [pc, #24]	; (810bbb0 <_svfiprintf_r+0x1f8>)
 810bb98:	a904      	add	r1, sp, #16
 810bb9a:	4638      	mov	r0, r7
 810bb9c:	f7fc fa9e 	bl	81080dc <_printf_i>
 810bba0:	e7eb      	b.n	810bb7a <_svfiprintf_r+0x1c2>
 810bba2:	bf00      	nop
 810bba4:	0810eac4 	.word	0x0810eac4
 810bba8:	0810eace 	.word	0x0810eace
 810bbac:	08107b95 	.word	0x08107b95
 810bbb0:	0810b901 	.word	0x0810b901
 810bbb4:	0810eaca 	.word	0x0810eaca

0810bbb8 <__sfputc_r>:
 810bbb8:	6893      	ldr	r3, [r2, #8]
 810bbba:	3b01      	subs	r3, #1
 810bbbc:	2b00      	cmp	r3, #0
 810bbbe:	b410      	push	{r4}
 810bbc0:	6093      	str	r3, [r2, #8]
 810bbc2:	da08      	bge.n	810bbd6 <__sfputc_r+0x1e>
 810bbc4:	6994      	ldr	r4, [r2, #24]
 810bbc6:	42a3      	cmp	r3, r4
 810bbc8:	db01      	blt.n	810bbce <__sfputc_r+0x16>
 810bbca:	290a      	cmp	r1, #10
 810bbcc:	d103      	bne.n	810bbd6 <__sfputc_r+0x1e>
 810bbce:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bbd2:	f7fd be53 	b.w	810987c <__swbuf_r>
 810bbd6:	6813      	ldr	r3, [r2, #0]
 810bbd8:	1c58      	adds	r0, r3, #1
 810bbda:	6010      	str	r0, [r2, #0]
 810bbdc:	7019      	strb	r1, [r3, #0]
 810bbde:	4608      	mov	r0, r1
 810bbe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bbe4:	4770      	bx	lr

0810bbe6 <__sfputs_r>:
 810bbe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bbe8:	4606      	mov	r6, r0
 810bbea:	460f      	mov	r7, r1
 810bbec:	4614      	mov	r4, r2
 810bbee:	18d5      	adds	r5, r2, r3
 810bbf0:	42ac      	cmp	r4, r5
 810bbf2:	d101      	bne.n	810bbf8 <__sfputs_r+0x12>
 810bbf4:	2000      	movs	r0, #0
 810bbf6:	e007      	b.n	810bc08 <__sfputs_r+0x22>
 810bbf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bbfc:	463a      	mov	r2, r7
 810bbfe:	4630      	mov	r0, r6
 810bc00:	f7ff ffda 	bl	810bbb8 <__sfputc_r>
 810bc04:	1c43      	adds	r3, r0, #1
 810bc06:	d1f3      	bne.n	810bbf0 <__sfputs_r+0xa>
 810bc08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810bc0c <_vfiprintf_r>:
 810bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bc10:	460d      	mov	r5, r1
 810bc12:	b09d      	sub	sp, #116	; 0x74
 810bc14:	4614      	mov	r4, r2
 810bc16:	4698      	mov	r8, r3
 810bc18:	4606      	mov	r6, r0
 810bc1a:	b118      	cbz	r0, 810bc24 <_vfiprintf_r+0x18>
 810bc1c:	6983      	ldr	r3, [r0, #24]
 810bc1e:	b90b      	cbnz	r3, 810bc24 <_vfiprintf_r+0x18>
 810bc20:	f7fb fd84 	bl	810772c <__sinit>
 810bc24:	4b89      	ldr	r3, [pc, #548]	; (810be4c <_vfiprintf_r+0x240>)
 810bc26:	429d      	cmp	r5, r3
 810bc28:	d11b      	bne.n	810bc62 <_vfiprintf_r+0x56>
 810bc2a:	6875      	ldr	r5, [r6, #4]
 810bc2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bc2e:	07d9      	lsls	r1, r3, #31
 810bc30:	d405      	bmi.n	810bc3e <_vfiprintf_r+0x32>
 810bc32:	89ab      	ldrh	r3, [r5, #12]
 810bc34:	059a      	lsls	r2, r3, #22
 810bc36:	d402      	bmi.n	810bc3e <_vfiprintf_r+0x32>
 810bc38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bc3a:	f7fb fe56 	bl	81078ea <__retarget_lock_acquire_recursive>
 810bc3e:	89ab      	ldrh	r3, [r5, #12]
 810bc40:	071b      	lsls	r3, r3, #28
 810bc42:	d501      	bpl.n	810bc48 <_vfiprintf_r+0x3c>
 810bc44:	692b      	ldr	r3, [r5, #16]
 810bc46:	b9eb      	cbnz	r3, 810bc84 <_vfiprintf_r+0x78>
 810bc48:	4629      	mov	r1, r5
 810bc4a:	4630      	mov	r0, r6
 810bc4c:	f7fd fe7a 	bl	8109944 <__swsetup_r>
 810bc50:	b1c0      	cbz	r0, 810bc84 <_vfiprintf_r+0x78>
 810bc52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bc54:	07dc      	lsls	r4, r3, #31
 810bc56:	d50e      	bpl.n	810bc76 <_vfiprintf_r+0x6a>
 810bc58:	f04f 30ff 	mov.w	r0, #4294967295
 810bc5c:	b01d      	add	sp, #116	; 0x74
 810bc5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bc62:	4b7b      	ldr	r3, [pc, #492]	; (810be50 <_vfiprintf_r+0x244>)
 810bc64:	429d      	cmp	r5, r3
 810bc66:	d101      	bne.n	810bc6c <_vfiprintf_r+0x60>
 810bc68:	68b5      	ldr	r5, [r6, #8]
 810bc6a:	e7df      	b.n	810bc2c <_vfiprintf_r+0x20>
 810bc6c:	4b79      	ldr	r3, [pc, #484]	; (810be54 <_vfiprintf_r+0x248>)
 810bc6e:	429d      	cmp	r5, r3
 810bc70:	bf08      	it	eq
 810bc72:	68f5      	ldreq	r5, [r6, #12]
 810bc74:	e7da      	b.n	810bc2c <_vfiprintf_r+0x20>
 810bc76:	89ab      	ldrh	r3, [r5, #12]
 810bc78:	0598      	lsls	r0, r3, #22
 810bc7a:	d4ed      	bmi.n	810bc58 <_vfiprintf_r+0x4c>
 810bc7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bc7e:	f7fb fe35 	bl	81078ec <__retarget_lock_release_recursive>
 810bc82:	e7e9      	b.n	810bc58 <_vfiprintf_r+0x4c>
 810bc84:	2300      	movs	r3, #0
 810bc86:	9309      	str	r3, [sp, #36]	; 0x24
 810bc88:	2320      	movs	r3, #32
 810bc8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810bc8e:	f8cd 800c 	str.w	r8, [sp, #12]
 810bc92:	2330      	movs	r3, #48	; 0x30
 810bc94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810be58 <_vfiprintf_r+0x24c>
 810bc98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810bc9c:	f04f 0901 	mov.w	r9, #1
 810bca0:	4623      	mov	r3, r4
 810bca2:	469a      	mov	sl, r3
 810bca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bca8:	b10a      	cbz	r2, 810bcae <_vfiprintf_r+0xa2>
 810bcaa:	2a25      	cmp	r2, #37	; 0x25
 810bcac:	d1f9      	bne.n	810bca2 <_vfiprintf_r+0x96>
 810bcae:	ebba 0b04 	subs.w	fp, sl, r4
 810bcb2:	d00b      	beq.n	810bccc <_vfiprintf_r+0xc0>
 810bcb4:	465b      	mov	r3, fp
 810bcb6:	4622      	mov	r2, r4
 810bcb8:	4629      	mov	r1, r5
 810bcba:	4630      	mov	r0, r6
 810bcbc:	f7ff ff93 	bl	810bbe6 <__sfputs_r>
 810bcc0:	3001      	adds	r0, #1
 810bcc2:	f000 80aa 	beq.w	810be1a <_vfiprintf_r+0x20e>
 810bcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810bcc8:	445a      	add	r2, fp
 810bcca:	9209      	str	r2, [sp, #36]	; 0x24
 810bccc:	f89a 3000 	ldrb.w	r3, [sl]
 810bcd0:	2b00      	cmp	r3, #0
 810bcd2:	f000 80a2 	beq.w	810be1a <_vfiprintf_r+0x20e>
 810bcd6:	2300      	movs	r3, #0
 810bcd8:	f04f 32ff 	mov.w	r2, #4294967295
 810bcdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810bce0:	f10a 0a01 	add.w	sl, sl, #1
 810bce4:	9304      	str	r3, [sp, #16]
 810bce6:	9307      	str	r3, [sp, #28]
 810bce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810bcec:	931a      	str	r3, [sp, #104]	; 0x68
 810bcee:	4654      	mov	r4, sl
 810bcf0:	2205      	movs	r2, #5
 810bcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bcf6:	4858      	ldr	r0, [pc, #352]	; (810be58 <_vfiprintf_r+0x24c>)
 810bcf8:	f7f4 fafa 	bl	81002f0 <memchr>
 810bcfc:	9a04      	ldr	r2, [sp, #16]
 810bcfe:	b9d8      	cbnz	r0, 810bd38 <_vfiprintf_r+0x12c>
 810bd00:	06d1      	lsls	r1, r2, #27
 810bd02:	bf44      	itt	mi
 810bd04:	2320      	movmi	r3, #32
 810bd06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bd0a:	0713      	lsls	r3, r2, #28
 810bd0c:	bf44      	itt	mi
 810bd0e:	232b      	movmi	r3, #43	; 0x2b
 810bd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bd14:	f89a 3000 	ldrb.w	r3, [sl]
 810bd18:	2b2a      	cmp	r3, #42	; 0x2a
 810bd1a:	d015      	beq.n	810bd48 <_vfiprintf_r+0x13c>
 810bd1c:	9a07      	ldr	r2, [sp, #28]
 810bd1e:	4654      	mov	r4, sl
 810bd20:	2000      	movs	r0, #0
 810bd22:	f04f 0c0a 	mov.w	ip, #10
 810bd26:	4621      	mov	r1, r4
 810bd28:	f811 3b01 	ldrb.w	r3, [r1], #1
 810bd2c:	3b30      	subs	r3, #48	; 0x30
 810bd2e:	2b09      	cmp	r3, #9
 810bd30:	d94e      	bls.n	810bdd0 <_vfiprintf_r+0x1c4>
 810bd32:	b1b0      	cbz	r0, 810bd62 <_vfiprintf_r+0x156>
 810bd34:	9207      	str	r2, [sp, #28]
 810bd36:	e014      	b.n	810bd62 <_vfiprintf_r+0x156>
 810bd38:	eba0 0308 	sub.w	r3, r0, r8
 810bd3c:	fa09 f303 	lsl.w	r3, r9, r3
 810bd40:	4313      	orrs	r3, r2
 810bd42:	9304      	str	r3, [sp, #16]
 810bd44:	46a2      	mov	sl, r4
 810bd46:	e7d2      	b.n	810bcee <_vfiprintf_r+0xe2>
 810bd48:	9b03      	ldr	r3, [sp, #12]
 810bd4a:	1d19      	adds	r1, r3, #4
 810bd4c:	681b      	ldr	r3, [r3, #0]
 810bd4e:	9103      	str	r1, [sp, #12]
 810bd50:	2b00      	cmp	r3, #0
 810bd52:	bfbb      	ittet	lt
 810bd54:	425b      	neglt	r3, r3
 810bd56:	f042 0202 	orrlt.w	r2, r2, #2
 810bd5a:	9307      	strge	r3, [sp, #28]
 810bd5c:	9307      	strlt	r3, [sp, #28]
 810bd5e:	bfb8      	it	lt
 810bd60:	9204      	strlt	r2, [sp, #16]
 810bd62:	7823      	ldrb	r3, [r4, #0]
 810bd64:	2b2e      	cmp	r3, #46	; 0x2e
 810bd66:	d10c      	bne.n	810bd82 <_vfiprintf_r+0x176>
 810bd68:	7863      	ldrb	r3, [r4, #1]
 810bd6a:	2b2a      	cmp	r3, #42	; 0x2a
 810bd6c:	d135      	bne.n	810bdda <_vfiprintf_r+0x1ce>
 810bd6e:	9b03      	ldr	r3, [sp, #12]
 810bd70:	1d1a      	adds	r2, r3, #4
 810bd72:	681b      	ldr	r3, [r3, #0]
 810bd74:	9203      	str	r2, [sp, #12]
 810bd76:	2b00      	cmp	r3, #0
 810bd78:	bfb8      	it	lt
 810bd7a:	f04f 33ff 	movlt.w	r3, #4294967295
 810bd7e:	3402      	adds	r4, #2
 810bd80:	9305      	str	r3, [sp, #20]
 810bd82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810be68 <_vfiprintf_r+0x25c>
 810bd86:	7821      	ldrb	r1, [r4, #0]
 810bd88:	2203      	movs	r2, #3
 810bd8a:	4650      	mov	r0, sl
 810bd8c:	f7f4 fab0 	bl	81002f0 <memchr>
 810bd90:	b140      	cbz	r0, 810bda4 <_vfiprintf_r+0x198>
 810bd92:	2340      	movs	r3, #64	; 0x40
 810bd94:	eba0 000a 	sub.w	r0, r0, sl
 810bd98:	fa03 f000 	lsl.w	r0, r3, r0
 810bd9c:	9b04      	ldr	r3, [sp, #16]
 810bd9e:	4303      	orrs	r3, r0
 810bda0:	3401      	adds	r4, #1
 810bda2:	9304      	str	r3, [sp, #16]
 810bda4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bda8:	482c      	ldr	r0, [pc, #176]	; (810be5c <_vfiprintf_r+0x250>)
 810bdaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810bdae:	2206      	movs	r2, #6
 810bdb0:	f7f4 fa9e 	bl	81002f0 <memchr>
 810bdb4:	2800      	cmp	r0, #0
 810bdb6:	d03f      	beq.n	810be38 <_vfiprintf_r+0x22c>
 810bdb8:	4b29      	ldr	r3, [pc, #164]	; (810be60 <_vfiprintf_r+0x254>)
 810bdba:	bb1b      	cbnz	r3, 810be04 <_vfiprintf_r+0x1f8>
 810bdbc:	9b03      	ldr	r3, [sp, #12]
 810bdbe:	3307      	adds	r3, #7
 810bdc0:	f023 0307 	bic.w	r3, r3, #7
 810bdc4:	3308      	adds	r3, #8
 810bdc6:	9303      	str	r3, [sp, #12]
 810bdc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bdca:	443b      	add	r3, r7
 810bdcc:	9309      	str	r3, [sp, #36]	; 0x24
 810bdce:	e767      	b.n	810bca0 <_vfiprintf_r+0x94>
 810bdd0:	fb0c 3202 	mla	r2, ip, r2, r3
 810bdd4:	460c      	mov	r4, r1
 810bdd6:	2001      	movs	r0, #1
 810bdd8:	e7a5      	b.n	810bd26 <_vfiprintf_r+0x11a>
 810bdda:	2300      	movs	r3, #0
 810bddc:	3401      	adds	r4, #1
 810bdde:	9305      	str	r3, [sp, #20]
 810bde0:	4619      	mov	r1, r3
 810bde2:	f04f 0c0a 	mov.w	ip, #10
 810bde6:	4620      	mov	r0, r4
 810bde8:	f810 2b01 	ldrb.w	r2, [r0], #1
 810bdec:	3a30      	subs	r2, #48	; 0x30
 810bdee:	2a09      	cmp	r2, #9
 810bdf0:	d903      	bls.n	810bdfa <_vfiprintf_r+0x1ee>
 810bdf2:	2b00      	cmp	r3, #0
 810bdf4:	d0c5      	beq.n	810bd82 <_vfiprintf_r+0x176>
 810bdf6:	9105      	str	r1, [sp, #20]
 810bdf8:	e7c3      	b.n	810bd82 <_vfiprintf_r+0x176>
 810bdfa:	fb0c 2101 	mla	r1, ip, r1, r2
 810bdfe:	4604      	mov	r4, r0
 810be00:	2301      	movs	r3, #1
 810be02:	e7f0      	b.n	810bde6 <_vfiprintf_r+0x1da>
 810be04:	ab03      	add	r3, sp, #12
 810be06:	9300      	str	r3, [sp, #0]
 810be08:	462a      	mov	r2, r5
 810be0a:	4b16      	ldr	r3, [pc, #88]	; (810be64 <_vfiprintf_r+0x258>)
 810be0c:	a904      	add	r1, sp, #16
 810be0e:	4630      	mov	r0, r6
 810be10:	f7fb fec0 	bl	8107b94 <_printf_float>
 810be14:	4607      	mov	r7, r0
 810be16:	1c78      	adds	r0, r7, #1
 810be18:	d1d6      	bne.n	810bdc8 <_vfiprintf_r+0x1bc>
 810be1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810be1c:	07d9      	lsls	r1, r3, #31
 810be1e:	d405      	bmi.n	810be2c <_vfiprintf_r+0x220>
 810be20:	89ab      	ldrh	r3, [r5, #12]
 810be22:	059a      	lsls	r2, r3, #22
 810be24:	d402      	bmi.n	810be2c <_vfiprintf_r+0x220>
 810be26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810be28:	f7fb fd60 	bl	81078ec <__retarget_lock_release_recursive>
 810be2c:	89ab      	ldrh	r3, [r5, #12]
 810be2e:	065b      	lsls	r3, r3, #25
 810be30:	f53f af12 	bmi.w	810bc58 <_vfiprintf_r+0x4c>
 810be34:	9809      	ldr	r0, [sp, #36]	; 0x24
 810be36:	e711      	b.n	810bc5c <_vfiprintf_r+0x50>
 810be38:	ab03      	add	r3, sp, #12
 810be3a:	9300      	str	r3, [sp, #0]
 810be3c:	462a      	mov	r2, r5
 810be3e:	4b09      	ldr	r3, [pc, #36]	; (810be64 <_vfiprintf_r+0x258>)
 810be40:	a904      	add	r1, sp, #16
 810be42:	4630      	mov	r0, r6
 810be44:	f7fc f94a 	bl	81080dc <_printf_i>
 810be48:	e7e4      	b.n	810be14 <_vfiprintf_r+0x208>
 810be4a:	bf00      	nop
 810be4c:	0810e680 	.word	0x0810e680
 810be50:	0810e6a0 	.word	0x0810e6a0
 810be54:	0810e660 	.word	0x0810e660
 810be58:	0810eac4 	.word	0x0810eac4
 810be5c:	0810eace 	.word	0x0810eace
 810be60:	08107b95 	.word	0x08107b95
 810be64:	0810bbe7 	.word	0x0810bbe7
 810be68:	0810eaca 	.word	0x0810eaca

0810be6c <__svfiscanf_r>:
 810be6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810be70:	461d      	mov	r5, r3
 810be72:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 810be74:	07df      	lsls	r7, r3, #31
 810be76:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 810be7a:	4606      	mov	r6, r0
 810be7c:	460c      	mov	r4, r1
 810be7e:	4692      	mov	sl, r2
 810be80:	d405      	bmi.n	810be8e <__svfiscanf_r+0x22>
 810be82:	898b      	ldrh	r3, [r1, #12]
 810be84:	0598      	lsls	r0, r3, #22
 810be86:	d402      	bmi.n	810be8e <__svfiscanf_r+0x22>
 810be88:	6d88      	ldr	r0, [r1, #88]	; 0x58
 810be8a:	f7fb fd2e 	bl	81078ea <__retarget_lock_acquire_recursive>
 810be8e:	2300      	movs	r3, #0
 810be90:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 810be94:	4bae      	ldr	r3, [pc, #696]	; (810c150 <__svfiscanf_r+0x2e4>)
 810be96:	93a0      	str	r3, [sp, #640]	; 0x280
 810be98:	f10d 0804 	add.w	r8, sp, #4
 810be9c:	4bad      	ldr	r3, [pc, #692]	; (810c154 <__svfiscanf_r+0x2e8>)
 810be9e:	4fae      	ldr	r7, [pc, #696]	; (810c158 <__svfiscanf_r+0x2ec>)
 810bea0:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 810c15c <__svfiscanf_r+0x2f0>
 810bea4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 810bea8:	93a1      	str	r3, [sp, #644]	; 0x284
 810beaa:	9500      	str	r5, [sp, #0]
 810beac:	f89a b000 	ldrb.w	fp, [sl]
 810beb0:	f1bb 0f00 	cmp.w	fp, #0
 810beb4:	f000 8170 	beq.w	810c198 <__svfiscanf_r+0x32c>
 810beb8:	f81b 3007 	ldrb.w	r3, [fp, r7]
 810bebc:	f013 0308 	ands.w	r3, r3, #8
 810bec0:	f10a 0501 	add.w	r5, sl, #1
 810bec4:	d019      	beq.n	810befa <__svfiscanf_r+0x8e>
 810bec6:	6863      	ldr	r3, [r4, #4]
 810bec8:	2b00      	cmp	r3, #0
 810beca:	dd0f      	ble.n	810beec <__svfiscanf_r+0x80>
 810becc:	6823      	ldr	r3, [r4, #0]
 810bece:	781a      	ldrb	r2, [r3, #0]
 810bed0:	5cba      	ldrb	r2, [r7, r2]
 810bed2:	0711      	lsls	r1, r2, #28
 810bed4:	d401      	bmi.n	810beda <__svfiscanf_r+0x6e>
 810bed6:	46aa      	mov	sl, r5
 810bed8:	e7e8      	b.n	810beac <__svfiscanf_r+0x40>
 810beda:	9a45      	ldr	r2, [sp, #276]	; 0x114
 810bedc:	3201      	adds	r2, #1
 810bede:	9245      	str	r2, [sp, #276]	; 0x114
 810bee0:	6862      	ldr	r2, [r4, #4]
 810bee2:	3301      	adds	r3, #1
 810bee4:	3a01      	subs	r2, #1
 810bee6:	6062      	str	r2, [r4, #4]
 810bee8:	6023      	str	r3, [r4, #0]
 810beea:	e7ec      	b.n	810bec6 <__svfiscanf_r+0x5a>
 810beec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 810beee:	4621      	mov	r1, r4
 810bef0:	4630      	mov	r0, r6
 810bef2:	4798      	blx	r3
 810bef4:	2800      	cmp	r0, #0
 810bef6:	d0e9      	beq.n	810becc <__svfiscanf_r+0x60>
 810bef8:	e7ed      	b.n	810bed6 <__svfiscanf_r+0x6a>
 810befa:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 810befe:	f040 8086 	bne.w	810c00e <__svfiscanf_r+0x1a2>
 810bf02:	9341      	str	r3, [sp, #260]	; 0x104
 810bf04:	9343      	str	r3, [sp, #268]	; 0x10c
 810bf06:	f89a 3001 	ldrb.w	r3, [sl, #1]
 810bf0a:	2b2a      	cmp	r3, #42	; 0x2a
 810bf0c:	bf02      	ittt	eq
 810bf0e:	2310      	moveq	r3, #16
 810bf10:	9341      	streq	r3, [sp, #260]	; 0x104
 810bf12:	f10a 0502 	addeq.w	r5, sl, #2
 810bf16:	220a      	movs	r2, #10
 810bf18:	46aa      	mov	sl, r5
 810bf1a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 810bf1e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 810bf22:	2b09      	cmp	r3, #9
 810bf24:	d91e      	bls.n	810bf64 <__svfiscanf_r+0xf8>
 810bf26:	488d      	ldr	r0, [pc, #564]	; (810c15c <__svfiscanf_r+0x2f0>)
 810bf28:	2203      	movs	r2, #3
 810bf2a:	f7f4 f9e1 	bl	81002f0 <memchr>
 810bf2e:	b140      	cbz	r0, 810bf42 <__svfiscanf_r+0xd6>
 810bf30:	2301      	movs	r3, #1
 810bf32:	eba0 0009 	sub.w	r0, r0, r9
 810bf36:	fa03 f000 	lsl.w	r0, r3, r0
 810bf3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 810bf3c:	4318      	orrs	r0, r3
 810bf3e:	9041      	str	r0, [sp, #260]	; 0x104
 810bf40:	4655      	mov	r5, sl
 810bf42:	f815 3b01 	ldrb.w	r3, [r5], #1
 810bf46:	2b78      	cmp	r3, #120	; 0x78
 810bf48:	d807      	bhi.n	810bf5a <__svfiscanf_r+0xee>
 810bf4a:	2b57      	cmp	r3, #87	; 0x57
 810bf4c:	d811      	bhi.n	810bf72 <__svfiscanf_r+0x106>
 810bf4e:	2b25      	cmp	r3, #37	; 0x25
 810bf50:	d05d      	beq.n	810c00e <__svfiscanf_r+0x1a2>
 810bf52:	d857      	bhi.n	810c004 <__svfiscanf_r+0x198>
 810bf54:	2b00      	cmp	r3, #0
 810bf56:	f000 80d6 	beq.w	810c106 <__svfiscanf_r+0x29a>
 810bf5a:	2303      	movs	r3, #3
 810bf5c:	9347      	str	r3, [sp, #284]	; 0x11c
 810bf5e:	230a      	movs	r3, #10
 810bf60:	9342      	str	r3, [sp, #264]	; 0x108
 810bf62:	e08b      	b.n	810c07c <__svfiscanf_r+0x210>
 810bf64:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 810bf66:	fb02 1303 	mla	r3, r2, r3, r1
 810bf6a:	3b30      	subs	r3, #48	; 0x30
 810bf6c:	9343      	str	r3, [sp, #268]	; 0x10c
 810bf6e:	4655      	mov	r5, sl
 810bf70:	e7d2      	b.n	810bf18 <__svfiscanf_r+0xac>
 810bf72:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 810bf76:	2a20      	cmp	r2, #32
 810bf78:	d8ef      	bhi.n	810bf5a <__svfiscanf_r+0xee>
 810bf7a:	a101      	add	r1, pc, #4	; (adr r1, 810bf80 <__svfiscanf_r+0x114>)
 810bf7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810bf80:	0810c067 	.word	0x0810c067
 810bf84:	0810bf5b 	.word	0x0810bf5b
 810bf88:	0810bf5b 	.word	0x0810bf5b
 810bf8c:	0810c0c5 	.word	0x0810c0c5
 810bf90:	0810bf5b 	.word	0x0810bf5b
 810bf94:	0810bf5b 	.word	0x0810bf5b
 810bf98:	0810bf5b 	.word	0x0810bf5b
 810bf9c:	0810bf5b 	.word	0x0810bf5b
 810bfa0:	0810bf5b 	.word	0x0810bf5b
 810bfa4:	0810bf5b 	.word	0x0810bf5b
 810bfa8:	0810bf5b 	.word	0x0810bf5b
 810bfac:	0810c0db 	.word	0x0810c0db
 810bfb0:	0810c0b1 	.word	0x0810c0b1
 810bfb4:	0810c00b 	.word	0x0810c00b
 810bfb8:	0810c00b 	.word	0x0810c00b
 810bfbc:	0810c00b 	.word	0x0810c00b
 810bfc0:	0810bf5b 	.word	0x0810bf5b
 810bfc4:	0810c0b5 	.word	0x0810c0b5
 810bfc8:	0810bf5b 	.word	0x0810bf5b
 810bfcc:	0810bf5b 	.word	0x0810bf5b
 810bfd0:	0810bf5b 	.word	0x0810bf5b
 810bfd4:	0810bf5b 	.word	0x0810bf5b
 810bfd8:	0810c0eb 	.word	0x0810c0eb
 810bfdc:	0810c0bd 	.word	0x0810c0bd
 810bfe0:	0810c05f 	.word	0x0810c05f
 810bfe4:	0810bf5b 	.word	0x0810bf5b
 810bfe8:	0810bf5b 	.word	0x0810bf5b
 810bfec:	0810c0e7 	.word	0x0810c0e7
 810bff0:	0810bf5b 	.word	0x0810bf5b
 810bff4:	0810c0b1 	.word	0x0810c0b1
 810bff8:	0810bf5b 	.word	0x0810bf5b
 810bffc:	0810bf5b 	.word	0x0810bf5b
 810c000:	0810c067 	.word	0x0810c067
 810c004:	3b45      	subs	r3, #69	; 0x45
 810c006:	2b02      	cmp	r3, #2
 810c008:	d8a7      	bhi.n	810bf5a <__svfiscanf_r+0xee>
 810c00a:	2305      	movs	r3, #5
 810c00c:	e035      	b.n	810c07a <__svfiscanf_r+0x20e>
 810c00e:	6863      	ldr	r3, [r4, #4]
 810c010:	2b00      	cmp	r3, #0
 810c012:	dd0d      	ble.n	810c030 <__svfiscanf_r+0x1c4>
 810c014:	6823      	ldr	r3, [r4, #0]
 810c016:	781a      	ldrb	r2, [r3, #0]
 810c018:	455a      	cmp	r2, fp
 810c01a:	f040 80bd 	bne.w	810c198 <__svfiscanf_r+0x32c>
 810c01e:	3301      	adds	r3, #1
 810c020:	6862      	ldr	r2, [r4, #4]
 810c022:	6023      	str	r3, [r4, #0]
 810c024:	9b45      	ldr	r3, [sp, #276]	; 0x114
 810c026:	3a01      	subs	r2, #1
 810c028:	3301      	adds	r3, #1
 810c02a:	6062      	str	r2, [r4, #4]
 810c02c:	9345      	str	r3, [sp, #276]	; 0x114
 810c02e:	e752      	b.n	810bed6 <__svfiscanf_r+0x6a>
 810c030:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 810c032:	4621      	mov	r1, r4
 810c034:	4630      	mov	r0, r6
 810c036:	4798      	blx	r3
 810c038:	2800      	cmp	r0, #0
 810c03a:	d0eb      	beq.n	810c014 <__svfiscanf_r+0x1a8>
 810c03c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c03e:	07da      	lsls	r2, r3, #31
 810c040:	f140 80a2 	bpl.w	810c188 <__svfiscanf_r+0x31c>
 810c044:	9844      	ldr	r0, [sp, #272]	; 0x110
 810c046:	2800      	cmp	r0, #0
 810c048:	d066      	beq.n	810c118 <__svfiscanf_r+0x2ac>
 810c04a:	89a3      	ldrh	r3, [r4, #12]
 810c04c:	f013 0f40 	tst.w	r3, #64	; 0x40
 810c050:	bf18      	it	ne
 810c052:	f04f 30ff 	movne.w	r0, #4294967295
 810c056:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 810c05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c05e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 810c060:	f042 0220 	orr.w	r2, r2, #32
 810c064:	9241      	str	r2, [sp, #260]	; 0x104
 810c066:	9a41      	ldr	r2, [sp, #260]	; 0x104
 810c068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810c06c:	9241      	str	r2, [sp, #260]	; 0x104
 810c06e:	2210      	movs	r2, #16
 810c070:	2b6f      	cmp	r3, #111	; 0x6f
 810c072:	9242      	str	r2, [sp, #264]	; 0x108
 810c074:	bf34      	ite	cc
 810c076:	2303      	movcc	r3, #3
 810c078:	2304      	movcs	r3, #4
 810c07a:	9347      	str	r3, [sp, #284]	; 0x11c
 810c07c:	6863      	ldr	r3, [r4, #4]
 810c07e:	2b00      	cmp	r3, #0
 810c080:	dd4d      	ble.n	810c11e <__svfiscanf_r+0x2b2>
 810c082:	9b41      	ldr	r3, [sp, #260]	; 0x104
 810c084:	065b      	lsls	r3, r3, #25
 810c086:	d404      	bmi.n	810c092 <__svfiscanf_r+0x226>
 810c088:	6823      	ldr	r3, [r4, #0]
 810c08a:	781a      	ldrb	r2, [r3, #0]
 810c08c:	5cba      	ldrb	r2, [r7, r2]
 810c08e:	0710      	lsls	r0, r2, #28
 810c090:	d44c      	bmi.n	810c12c <__svfiscanf_r+0x2c0>
 810c092:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 810c094:	2b02      	cmp	r3, #2
 810c096:	dc63      	bgt.n	810c160 <__svfiscanf_r+0x2f4>
 810c098:	466b      	mov	r3, sp
 810c09a:	4622      	mov	r2, r4
 810c09c:	a941      	add	r1, sp, #260	; 0x104
 810c09e:	4630      	mov	r0, r6
 810c0a0:	f000 f8b0 	bl	810c204 <_scanf_chars>
 810c0a4:	2801      	cmp	r0, #1
 810c0a6:	d077      	beq.n	810c198 <__svfiscanf_r+0x32c>
 810c0a8:	2802      	cmp	r0, #2
 810c0aa:	f47f af14 	bne.w	810bed6 <__svfiscanf_r+0x6a>
 810c0ae:	e7c5      	b.n	810c03c <__svfiscanf_r+0x1d0>
 810c0b0:	220a      	movs	r2, #10
 810c0b2:	e7dd      	b.n	810c070 <__svfiscanf_r+0x204>
 810c0b4:	2300      	movs	r3, #0
 810c0b6:	9342      	str	r3, [sp, #264]	; 0x108
 810c0b8:	2303      	movs	r3, #3
 810c0ba:	e7de      	b.n	810c07a <__svfiscanf_r+0x20e>
 810c0bc:	2308      	movs	r3, #8
 810c0be:	9342      	str	r3, [sp, #264]	; 0x108
 810c0c0:	2304      	movs	r3, #4
 810c0c2:	e7da      	b.n	810c07a <__svfiscanf_r+0x20e>
 810c0c4:	4629      	mov	r1, r5
 810c0c6:	4640      	mov	r0, r8
 810c0c8:	f000 fa96 	bl	810c5f8 <__sccl>
 810c0cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 810c0ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c0d2:	9341      	str	r3, [sp, #260]	; 0x104
 810c0d4:	4605      	mov	r5, r0
 810c0d6:	2301      	movs	r3, #1
 810c0d8:	e7cf      	b.n	810c07a <__svfiscanf_r+0x20e>
 810c0da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 810c0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810c0e0:	9341      	str	r3, [sp, #260]	; 0x104
 810c0e2:	2300      	movs	r3, #0
 810c0e4:	e7c9      	b.n	810c07a <__svfiscanf_r+0x20e>
 810c0e6:	2302      	movs	r3, #2
 810c0e8:	e7c7      	b.n	810c07a <__svfiscanf_r+0x20e>
 810c0ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 810c0ec:	06c3      	lsls	r3, r0, #27
 810c0ee:	f53f aef2 	bmi.w	810bed6 <__svfiscanf_r+0x6a>
 810c0f2:	9b00      	ldr	r3, [sp, #0]
 810c0f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 810c0f6:	1d19      	adds	r1, r3, #4
 810c0f8:	9100      	str	r1, [sp, #0]
 810c0fa:	681b      	ldr	r3, [r3, #0]
 810c0fc:	07c0      	lsls	r0, r0, #31
 810c0fe:	bf4c      	ite	mi
 810c100:	801a      	strhmi	r2, [r3, #0]
 810c102:	601a      	strpl	r2, [r3, #0]
 810c104:	e6e7      	b.n	810bed6 <__svfiscanf_r+0x6a>
 810c106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c108:	07d8      	lsls	r0, r3, #31
 810c10a:	d405      	bmi.n	810c118 <__svfiscanf_r+0x2ac>
 810c10c:	89a3      	ldrh	r3, [r4, #12]
 810c10e:	0599      	lsls	r1, r3, #22
 810c110:	d402      	bmi.n	810c118 <__svfiscanf_r+0x2ac>
 810c112:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c114:	f7fb fbea 	bl	81078ec <__retarget_lock_release_recursive>
 810c118:	f04f 30ff 	mov.w	r0, #4294967295
 810c11c:	e79b      	b.n	810c056 <__svfiscanf_r+0x1ea>
 810c11e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 810c120:	4621      	mov	r1, r4
 810c122:	4630      	mov	r0, r6
 810c124:	4798      	blx	r3
 810c126:	2800      	cmp	r0, #0
 810c128:	d0ab      	beq.n	810c082 <__svfiscanf_r+0x216>
 810c12a:	e787      	b.n	810c03c <__svfiscanf_r+0x1d0>
 810c12c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 810c12e:	3201      	adds	r2, #1
 810c130:	9245      	str	r2, [sp, #276]	; 0x114
 810c132:	6862      	ldr	r2, [r4, #4]
 810c134:	3a01      	subs	r2, #1
 810c136:	2a00      	cmp	r2, #0
 810c138:	6062      	str	r2, [r4, #4]
 810c13a:	dd02      	ble.n	810c142 <__svfiscanf_r+0x2d6>
 810c13c:	3301      	adds	r3, #1
 810c13e:	6023      	str	r3, [r4, #0]
 810c140:	e7a2      	b.n	810c088 <__svfiscanf_r+0x21c>
 810c142:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 810c144:	4621      	mov	r1, r4
 810c146:	4630      	mov	r0, r6
 810c148:	4798      	blx	r3
 810c14a:	2800      	cmp	r0, #0
 810c14c:	d09c      	beq.n	810c088 <__svfiscanf_r+0x21c>
 810c14e:	e775      	b.n	810c03c <__svfiscanf_r+0x1d0>
 810c150:	0810c801 	.word	0x0810c801
 810c154:	0810c4d5 	.word	0x0810c4d5
 810c158:	0810e751 	.word	0x0810e751
 810c15c:	0810eaca 	.word	0x0810eaca
 810c160:	2b04      	cmp	r3, #4
 810c162:	dc06      	bgt.n	810c172 <__svfiscanf_r+0x306>
 810c164:	466b      	mov	r3, sp
 810c166:	4622      	mov	r2, r4
 810c168:	a941      	add	r1, sp, #260	; 0x104
 810c16a:	4630      	mov	r0, r6
 810c16c:	f000 f8a2 	bl	810c2b4 <_scanf_i>
 810c170:	e798      	b.n	810c0a4 <__svfiscanf_r+0x238>
 810c172:	4b0f      	ldr	r3, [pc, #60]	; (810c1b0 <__svfiscanf_r+0x344>)
 810c174:	2b00      	cmp	r3, #0
 810c176:	f43f aeae 	beq.w	810bed6 <__svfiscanf_r+0x6a>
 810c17a:	466b      	mov	r3, sp
 810c17c:	4622      	mov	r2, r4
 810c17e:	a941      	add	r1, sp, #260	; 0x104
 810c180:	4630      	mov	r0, r6
 810c182:	f7fc f8d1 	bl	8108328 <_scanf_float>
 810c186:	e78d      	b.n	810c0a4 <__svfiscanf_r+0x238>
 810c188:	89a3      	ldrh	r3, [r4, #12]
 810c18a:	0599      	lsls	r1, r3, #22
 810c18c:	f53f af5a 	bmi.w	810c044 <__svfiscanf_r+0x1d8>
 810c190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c192:	f7fb fbab 	bl	81078ec <__retarget_lock_release_recursive>
 810c196:	e755      	b.n	810c044 <__svfiscanf_r+0x1d8>
 810c198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c19a:	07da      	lsls	r2, r3, #31
 810c19c:	d405      	bmi.n	810c1aa <__svfiscanf_r+0x33e>
 810c19e:	89a3      	ldrh	r3, [r4, #12]
 810c1a0:	059b      	lsls	r3, r3, #22
 810c1a2:	d402      	bmi.n	810c1aa <__svfiscanf_r+0x33e>
 810c1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c1a6:	f7fb fba1 	bl	81078ec <__retarget_lock_release_recursive>
 810c1aa:	9844      	ldr	r0, [sp, #272]	; 0x110
 810c1ac:	e753      	b.n	810c056 <__svfiscanf_r+0x1ea>
 810c1ae:	bf00      	nop
 810c1b0:	08108329 	.word	0x08108329

0810c1b4 <_vfiscanf_r>:
 810c1b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810c1b6:	460c      	mov	r4, r1
 810c1b8:	4605      	mov	r5, r0
 810c1ba:	b138      	cbz	r0, 810c1cc <_vfiscanf_r+0x18>
 810c1bc:	6981      	ldr	r1, [r0, #24]
 810c1be:	b929      	cbnz	r1, 810c1cc <_vfiscanf_r+0x18>
 810c1c0:	e9cd 2300 	strd	r2, r3, [sp]
 810c1c4:	f7fb fab2 	bl	810772c <__sinit>
 810c1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 810c1cc:	490a      	ldr	r1, [pc, #40]	; (810c1f8 <_vfiscanf_r+0x44>)
 810c1ce:	428c      	cmp	r4, r1
 810c1d0:	d107      	bne.n	810c1e2 <_vfiscanf_r+0x2e>
 810c1d2:	686c      	ldr	r4, [r5, #4]
 810c1d4:	4621      	mov	r1, r4
 810c1d6:	4628      	mov	r0, r5
 810c1d8:	b003      	add	sp, #12
 810c1da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810c1de:	f7ff be45 	b.w	810be6c <__svfiscanf_r>
 810c1e2:	4906      	ldr	r1, [pc, #24]	; (810c1fc <_vfiscanf_r+0x48>)
 810c1e4:	428c      	cmp	r4, r1
 810c1e6:	d101      	bne.n	810c1ec <_vfiscanf_r+0x38>
 810c1e8:	68ac      	ldr	r4, [r5, #8]
 810c1ea:	e7f3      	b.n	810c1d4 <_vfiscanf_r+0x20>
 810c1ec:	4904      	ldr	r1, [pc, #16]	; (810c200 <_vfiscanf_r+0x4c>)
 810c1ee:	428c      	cmp	r4, r1
 810c1f0:	bf08      	it	eq
 810c1f2:	68ec      	ldreq	r4, [r5, #12]
 810c1f4:	e7ee      	b.n	810c1d4 <_vfiscanf_r+0x20>
 810c1f6:	bf00      	nop
 810c1f8:	0810e680 	.word	0x0810e680
 810c1fc:	0810e6a0 	.word	0x0810e6a0
 810c200:	0810e660 	.word	0x0810e660

0810c204 <_scanf_chars>:
 810c204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c208:	4615      	mov	r5, r2
 810c20a:	688a      	ldr	r2, [r1, #8]
 810c20c:	4680      	mov	r8, r0
 810c20e:	460c      	mov	r4, r1
 810c210:	b932      	cbnz	r2, 810c220 <_scanf_chars+0x1c>
 810c212:	698a      	ldr	r2, [r1, #24]
 810c214:	2a00      	cmp	r2, #0
 810c216:	bf0c      	ite	eq
 810c218:	2201      	moveq	r2, #1
 810c21a:	f04f 32ff 	movne.w	r2, #4294967295
 810c21e:	608a      	str	r2, [r1, #8]
 810c220:	6822      	ldr	r2, [r4, #0]
 810c222:	f8df 908c 	ldr.w	r9, [pc, #140]	; 810c2b0 <_scanf_chars+0xac>
 810c226:	06d1      	lsls	r1, r2, #27
 810c228:	bf5f      	itttt	pl
 810c22a:	681a      	ldrpl	r2, [r3, #0]
 810c22c:	1d11      	addpl	r1, r2, #4
 810c22e:	6019      	strpl	r1, [r3, #0]
 810c230:	6816      	ldrpl	r6, [r2, #0]
 810c232:	2700      	movs	r7, #0
 810c234:	69a0      	ldr	r0, [r4, #24]
 810c236:	b188      	cbz	r0, 810c25c <_scanf_chars+0x58>
 810c238:	2801      	cmp	r0, #1
 810c23a:	d107      	bne.n	810c24c <_scanf_chars+0x48>
 810c23c:	682b      	ldr	r3, [r5, #0]
 810c23e:	781a      	ldrb	r2, [r3, #0]
 810c240:	6963      	ldr	r3, [r4, #20]
 810c242:	5c9b      	ldrb	r3, [r3, r2]
 810c244:	b953      	cbnz	r3, 810c25c <_scanf_chars+0x58>
 810c246:	bb27      	cbnz	r7, 810c292 <_scanf_chars+0x8e>
 810c248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c24c:	2802      	cmp	r0, #2
 810c24e:	d120      	bne.n	810c292 <_scanf_chars+0x8e>
 810c250:	682b      	ldr	r3, [r5, #0]
 810c252:	781b      	ldrb	r3, [r3, #0]
 810c254:	f813 3009 	ldrb.w	r3, [r3, r9]
 810c258:	071b      	lsls	r3, r3, #28
 810c25a:	d41a      	bmi.n	810c292 <_scanf_chars+0x8e>
 810c25c:	6823      	ldr	r3, [r4, #0]
 810c25e:	06da      	lsls	r2, r3, #27
 810c260:	bf5e      	ittt	pl
 810c262:	682b      	ldrpl	r3, [r5, #0]
 810c264:	781b      	ldrbpl	r3, [r3, #0]
 810c266:	f806 3b01 	strbpl.w	r3, [r6], #1
 810c26a:	682a      	ldr	r2, [r5, #0]
 810c26c:	686b      	ldr	r3, [r5, #4]
 810c26e:	3201      	adds	r2, #1
 810c270:	602a      	str	r2, [r5, #0]
 810c272:	68a2      	ldr	r2, [r4, #8]
 810c274:	3b01      	subs	r3, #1
 810c276:	3a01      	subs	r2, #1
 810c278:	606b      	str	r3, [r5, #4]
 810c27a:	3701      	adds	r7, #1
 810c27c:	60a2      	str	r2, [r4, #8]
 810c27e:	b142      	cbz	r2, 810c292 <_scanf_chars+0x8e>
 810c280:	2b00      	cmp	r3, #0
 810c282:	dcd7      	bgt.n	810c234 <_scanf_chars+0x30>
 810c284:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810c288:	4629      	mov	r1, r5
 810c28a:	4640      	mov	r0, r8
 810c28c:	4798      	blx	r3
 810c28e:	2800      	cmp	r0, #0
 810c290:	d0d0      	beq.n	810c234 <_scanf_chars+0x30>
 810c292:	6823      	ldr	r3, [r4, #0]
 810c294:	f013 0310 	ands.w	r3, r3, #16
 810c298:	d105      	bne.n	810c2a6 <_scanf_chars+0xa2>
 810c29a:	68e2      	ldr	r2, [r4, #12]
 810c29c:	3201      	adds	r2, #1
 810c29e:	60e2      	str	r2, [r4, #12]
 810c2a0:	69a2      	ldr	r2, [r4, #24]
 810c2a2:	b102      	cbz	r2, 810c2a6 <_scanf_chars+0xa2>
 810c2a4:	7033      	strb	r3, [r6, #0]
 810c2a6:	6923      	ldr	r3, [r4, #16]
 810c2a8:	441f      	add	r7, r3
 810c2aa:	6127      	str	r7, [r4, #16]
 810c2ac:	2000      	movs	r0, #0
 810c2ae:	e7cb      	b.n	810c248 <_scanf_chars+0x44>
 810c2b0:	0810e751 	.word	0x0810e751

0810c2b4 <_scanf_i>:
 810c2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c2b8:	4698      	mov	r8, r3
 810c2ba:	4b74      	ldr	r3, [pc, #464]	; (810c48c <_scanf_i+0x1d8>)
 810c2bc:	460c      	mov	r4, r1
 810c2be:	4682      	mov	sl, r0
 810c2c0:	4616      	mov	r6, r2
 810c2c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 810c2c6:	b087      	sub	sp, #28
 810c2c8:	ab03      	add	r3, sp, #12
 810c2ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 810c2ce:	4b70      	ldr	r3, [pc, #448]	; (810c490 <_scanf_i+0x1dc>)
 810c2d0:	69a1      	ldr	r1, [r4, #24]
 810c2d2:	4a70      	ldr	r2, [pc, #448]	; (810c494 <_scanf_i+0x1e0>)
 810c2d4:	2903      	cmp	r1, #3
 810c2d6:	bf18      	it	ne
 810c2d8:	461a      	movne	r2, r3
 810c2da:	68a3      	ldr	r3, [r4, #8]
 810c2dc:	9201      	str	r2, [sp, #4]
 810c2de:	1e5a      	subs	r2, r3, #1
 810c2e0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810c2e4:	bf88      	it	hi
 810c2e6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810c2ea:	4627      	mov	r7, r4
 810c2ec:	bf82      	ittt	hi
 810c2ee:	eb03 0905 	addhi.w	r9, r3, r5
 810c2f2:	f240 135d 	movwhi	r3, #349	; 0x15d
 810c2f6:	60a3      	strhi	r3, [r4, #8]
 810c2f8:	f857 3b1c 	ldr.w	r3, [r7], #28
 810c2fc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 810c300:	bf98      	it	ls
 810c302:	f04f 0900 	movls.w	r9, #0
 810c306:	6023      	str	r3, [r4, #0]
 810c308:	463d      	mov	r5, r7
 810c30a:	f04f 0b00 	mov.w	fp, #0
 810c30e:	6831      	ldr	r1, [r6, #0]
 810c310:	ab03      	add	r3, sp, #12
 810c312:	7809      	ldrb	r1, [r1, #0]
 810c314:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 810c318:	2202      	movs	r2, #2
 810c31a:	f7f3 ffe9 	bl	81002f0 <memchr>
 810c31e:	b328      	cbz	r0, 810c36c <_scanf_i+0xb8>
 810c320:	f1bb 0f01 	cmp.w	fp, #1
 810c324:	d159      	bne.n	810c3da <_scanf_i+0x126>
 810c326:	6862      	ldr	r2, [r4, #4]
 810c328:	b92a      	cbnz	r2, 810c336 <_scanf_i+0x82>
 810c32a:	6822      	ldr	r2, [r4, #0]
 810c32c:	2308      	movs	r3, #8
 810c32e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810c332:	6063      	str	r3, [r4, #4]
 810c334:	6022      	str	r2, [r4, #0]
 810c336:	6822      	ldr	r2, [r4, #0]
 810c338:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 810c33c:	6022      	str	r2, [r4, #0]
 810c33e:	68a2      	ldr	r2, [r4, #8]
 810c340:	1e51      	subs	r1, r2, #1
 810c342:	60a1      	str	r1, [r4, #8]
 810c344:	b192      	cbz	r2, 810c36c <_scanf_i+0xb8>
 810c346:	6832      	ldr	r2, [r6, #0]
 810c348:	1c51      	adds	r1, r2, #1
 810c34a:	6031      	str	r1, [r6, #0]
 810c34c:	7812      	ldrb	r2, [r2, #0]
 810c34e:	f805 2b01 	strb.w	r2, [r5], #1
 810c352:	6872      	ldr	r2, [r6, #4]
 810c354:	3a01      	subs	r2, #1
 810c356:	2a00      	cmp	r2, #0
 810c358:	6072      	str	r2, [r6, #4]
 810c35a:	dc07      	bgt.n	810c36c <_scanf_i+0xb8>
 810c35c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 810c360:	4631      	mov	r1, r6
 810c362:	4650      	mov	r0, sl
 810c364:	4790      	blx	r2
 810c366:	2800      	cmp	r0, #0
 810c368:	f040 8085 	bne.w	810c476 <_scanf_i+0x1c2>
 810c36c:	f10b 0b01 	add.w	fp, fp, #1
 810c370:	f1bb 0f03 	cmp.w	fp, #3
 810c374:	d1cb      	bne.n	810c30e <_scanf_i+0x5a>
 810c376:	6863      	ldr	r3, [r4, #4]
 810c378:	b90b      	cbnz	r3, 810c37e <_scanf_i+0xca>
 810c37a:	230a      	movs	r3, #10
 810c37c:	6063      	str	r3, [r4, #4]
 810c37e:	6863      	ldr	r3, [r4, #4]
 810c380:	4945      	ldr	r1, [pc, #276]	; (810c498 <_scanf_i+0x1e4>)
 810c382:	6960      	ldr	r0, [r4, #20]
 810c384:	1ac9      	subs	r1, r1, r3
 810c386:	f000 f937 	bl	810c5f8 <__sccl>
 810c38a:	f04f 0b00 	mov.w	fp, #0
 810c38e:	68a3      	ldr	r3, [r4, #8]
 810c390:	6822      	ldr	r2, [r4, #0]
 810c392:	2b00      	cmp	r3, #0
 810c394:	d03d      	beq.n	810c412 <_scanf_i+0x15e>
 810c396:	6831      	ldr	r1, [r6, #0]
 810c398:	6960      	ldr	r0, [r4, #20]
 810c39a:	f891 c000 	ldrb.w	ip, [r1]
 810c39e:	f810 000c 	ldrb.w	r0, [r0, ip]
 810c3a2:	2800      	cmp	r0, #0
 810c3a4:	d035      	beq.n	810c412 <_scanf_i+0x15e>
 810c3a6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 810c3aa:	d124      	bne.n	810c3f6 <_scanf_i+0x142>
 810c3ac:	0510      	lsls	r0, r2, #20
 810c3ae:	d522      	bpl.n	810c3f6 <_scanf_i+0x142>
 810c3b0:	f10b 0b01 	add.w	fp, fp, #1
 810c3b4:	f1b9 0f00 	cmp.w	r9, #0
 810c3b8:	d003      	beq.n	810c3c2 <_scanf_i+0x10e>
 810c3ba:	3301      	adds	r3, #1
 810c3bc:	f109 39ff 	add.w	r9, r9, #4294967295
 810c3c0:	60a3      	str	r3, [r4, #8]
 810c3c2:	6873      	ldr	r3, [r6, #4]
 810c3c4:	3b01      	subs	r3, #1
 810c3c6:	2b00      	cmp	r3, #0
 810c3c8:	6073      	str	r3, [r6, #4]
 810c3ca:	dd1b      	ble.n	810c404 <_scanf_i+0x150>
 810c3cc:	6833      	ldr	r3, [r6, #0]
 810c3ce:	3301      	adds	r3, #1
 810c3d0:	6033      	str	r3, [r6, #0]
 810c3d2:	68a3      	ldr	r3, [r4, #8]
 810c3d4:	3b01      	subs	r3, #1
 810c3d6:	60a3      	str	r3, [r4, #8]
 810c3d8:	e7d9      	b.n	810c38e <_scanf_i+0xda>
 810c3da:	f1bb 0f02 	cmp.w	fp, #2
 810c3de:	d1ae      	bne.n	810c33e <_scanf_i+0x8a>
 810c3e0:	6822      	ldr	r2, [r4, #0]
 810c3e2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 810c3e6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 810c3ea:	d1bf      	bne.n	810c36c <_scanf_i+0xb8>
 810c3ec:	2310      	movs	r3, #16
 810c3ee:	6063      	str	r3, [r4, #4]
 810c3f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810c3f4:	e7a2      	b.n	810c33c <_scanf_i+0x88>
 810c3f6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 810c3fa:	6022      	str	r2, [r4, #0]
 810c3fc:	780b      	ldrb	r3, [r1, #0]
 810c3fe:	f805 3b01 	strb.w	r3, [r5], #1
 810c402:	e7de      	b.n	810c3c2 <_scanf_i+0x10e>
 810c404:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810c408:	4631      	mov	r1, r6
 810c40a:	4650      	mov	r0, sl
 810c40c:	4798      	blx	r3
 810c40e:	2800      	cmp	r0, #0
 810c410:	d0df      	beq.n	810c3d2 <_scanf_i+0x11e>
 810c412:	6823      	ldr	r3, [r4, #0]
 810c414:	05d9      	lsls	r1, r3, #23
 810c416:	d50d      	bpl.n	810c434 <_scanf_i+0x180>
 810c418:	42bd      	cmp	r5, r7
 810c41a:	d909      	bls.n	810c430 <_scanf_i+0x17c>
 810c41c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 810c420:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810c424:	4632      	mov	r2, r6
 810c426:	4650      	mov	r0, sl
 810c428:	4798      	blx	r3
 810c42a:	f105 39ff 	add.w	r9, r5, #4294967295
 810c42e:	464d      	mov	r5, r9
 810c430:	42bd      	cmp	r5, r7
 810c432:	d028      	beq.n	810c486 <_scanf_i+0x1d2>
 810c434:	6822      	ldr	r2, [r4, #0]
 810c436:	f012 0210 	ands.w	r2, r2, #16
 810c43a:	d113      	bne.n	810c464 <_scanf_i+0x1b0>
 810c43c:	702a      	strb	r2, [r5, #0]
 810c43e:	6863      	ldr	r3, [r4, #4]
 810c440:	9e01      	ldr	r6, [sp, #4]
 810c442:	4639      	mov	r1, r7
 810c444:	4650      	mov	r0, sl
 810c446:	47b0      	blx	r6
 810c448:	f8d8 3000 	ldr.w	r3, [r8]
 810c44c:	6821      	ldr	r1, [r4, #0]
 810c44e:	1d1a      	adds	r2, r3, #4
 810c450:	f8c8 2000 	str.w	r2, [r8]
 810c454:	f011 0f20 	tst.w	r1, #32
 810c458:	681b      	ldr	r3, [r3, #0]
 810c45a:	d00f      	beq.n	810c47c <_scanf_i+0x1c8>
 810c45c:	6018      	str	r0, [r3, #0]
 810c45e:	68e3      	ldr	r3, [r4, #12]
 810c460:	3301      	adds	r3, #1
 810c462:	60e3      	str	r3, [r4, #12]
 810c464:	1bed      	subs	r5, r5, r7
 810c466:	44ab      	add	fp, r5
 810c468:	6925      	ldr	r5, [r4, #16]
 810c46a:	445d      	add	r5, fp
 810c46c:	6125      	str	r5, [r4, #16]
 810c46e:	2000      	movs	r0, #0
 810c470:	b007      	add	sp, #28
 810c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c476:	f04f 0b00 	mov.w	fp, #0
 810c47a:	e7ca      	b.n	810c412 <_scanf_i+0x15e>
 810c47c:	07ca      	lsls	r2, r1, #31
 810c47e:	bf4c      	ite	mi
 810c480:	8018      	strhmi	r0, [r3, #0]
 810c482:	6018      	strpl	r0, [r3, #0]
 810c484:	e7eb      	b.n	810c45e <_scanf_i+0x1aa>
 810c486:	2001      	movs	r0, #1
 810c488:	e7f2      	b.n	810c470 <_scanf_i+0x1bc>
 810c48a:	bf00      	nop
 810c48c:	0810e61c 	.word	0x0810e61c
 810c490:	0810c789 	.word	0x0810c789
 810c494:	08109879 	.word	0x08109879
 810c498:	0810eaee 	.word	0x0810eaee

0810c49c <_read_r>:
 810c49c:	b538      	push	{r3, r4, r5, lr}
 810c49e:	4d07      	ldr	r5, [pc, #28]	; (810c4bc <_read_r+0x20>)
 810c4a0:	4604      	mov	r4, r0
 810c4a2:	4608      	mov	r0, r1
 810c4a4:	4611      	mov	r1, r2
 810c4a6:	2200      	movs	r2, #0
 810c4a8:	602a      	str	r2, [r5, #0]
 810c4aa:	461a      	mov	r2, r3
 810c4ac:	f7f6 fb02 	bl	8102ab4 <_read>
 810c4b0:	1c43      	adds	r3, r0, #1
 810c4b2:	d102      	bne.n	810c4ba <_read_r+0x1e>
 810c4b4:	682b      	ldr	r3, [r5, #0]
 810c4b6:	b103      	cbz	r3, 810c4ba <_read_r+0x1e>
 810c4b8:	6023      	str	r3, [r4, #0]
 810c4ba:	bd38      	pop	{r3, r4, r5, pc}
 810c4bc:	10000504 	.word	0x10000504

0810c4c0 <lflush>:
 810c4c0:	8983      	ldrh	r3, [r0, #12]
 810c4c2:	f003 0309 	and.w	r3, r3, #9
 810c4c6:	2b09      	cmp	r3, #9
 810c4c8:	d101      	bne.n	810c4ce <lflush+0xe>
 810c4ca:	f7fb b8c5 	b.w	8107658 <fflush>
 810c4ce:	2000      	movs	r0, #0
 810c4d0:	4770      	bx	lr
	...

0810c4d4 <__srefill_r>:
 810c4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c4d6:	460c      	mov	r4, r1
 810c4d8:	4605      	mov	r5, r0
 810c4da:	b118      	cbz	r0, 810c4e4 <__srefill_r+0x10>
 810c4dc:	6983      	ldr	r3, [r0, #24]
 810c4de:	b90b      	cbnz	r3, 810c4e4 <__srefill_r+0x10>
 810c4e0:	f7fb f924 	bl	810772c <__sinit>
 810c4e4:	4b3b      	ldr	r3, [pc, #236]	; (810c5d4 <__srefill_r+0x100>)
 810c4e6:	429c      	cmp	r4, r3
 810c4e8:	d10a      	bne.n	810c500 <__srefill_r+0x2c>
 810c4ea:	686c      	ldr	r4, [r5, #4]
 810c4ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810c4f0:	2300      	movs	r3, #0
 810c4f2:	6063      	str	r3, [r4, #4]
 810c4f4:	89a3      	ldrh	r3, [r4, #12]
 810c4f6:	069e      	lsls	r6, r3, #26
 810c4f8:	d50c      	bpl.n	810c514 <__srefill_r+0x40>
 810c4fa:	f04f 30ff 	mov.w	r0, #4294967295
 810c4fe:	e066      	b.n	810c5ce <__srefill_r+0xfa>
 810c500:	4b35      	ldr	r3, [pc, #212]	; (810c5d8 <__srefill_r+0x104>)
 810c502:	429c      	cmp	r4, r3
 810c504:	d101      	bne.n	810c50a <__srefill_r+0x36>
 810c506:	68ac      	ldr	r4, [r5, #8]
 810c508:	e7f0      	b.n	810c4ec <__srefill_r+0x18>
 810c50a:	4b34      	ldr	r3, [pc, #208]	; (810c5dc <__srefill_r+0x108>)
 810c50c:	429c      	cmp	r4, r3
 810c50e:	bf08      	it	eq
 810c510:	68ec      	ldreq	r4, [r5, #12]
 810c512:	e7eb      	b.n	810c4ec <__srefill_r+0x18>
 810c514:	0758      	lsls	r0, r3, #29
 810c516:	d448      	bmi.n	810c5aa <__srefill_r+0xd6>
 810c518:	06d9      	lsls	r1, r3, #27
 810c51a:	d405      	bmi.n	810c528 <__srefill_r+0x54>
 810c51c:	2309      	movs	r3, #9
 810c51e:	602b      	str	r3, [r5, #0]
 810c520:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810c524:	81a3      	strh	r3, [r4, #12]
 810c526:	e7e8      	b.n	810c4fa <__srefill_r+0x26>
 810c528:	071a      	lsls	r2, r3, #28
 810c52a:	d50b      	bpl.n	810c544 <__srefill_r+0x70>
 810c52c:	4621      	mov	r1, r4
 810c52e:	4628      	mov	r0, r5
 810c530:	f7fb f856 	bl	81075e0 <_fflush_r>
 810c534:	2800      	cmp	r0, #0
 810c536:	d1e0      	bne.n	810c4fa <__srefill_r+0x26>
 810c538:	89a3      	ldrh	r3, [r4, #12]
 810c53a:	60a0      	str	r0, [r4, #8]
 810c53c:	f023 0308 	bic.w	r3, r3, #8
 810c540:	81a3      	strh	r3, [r4, #12]
 810c542:	61a0      	str	r0, [r4, #24]
 810c544:	89a3      	ldrh	r3, [r4, #12]
 810c546:	f043 0304 	orr.w	r3, r3, #4
 810c54a:	81a3      	strh	r3, [r4, #12]
 810c54c:	6923      	ldr	r3, [r4, #16]
 810c54e:	b91b      	cbnz	r3, 810c558 <__srefill_r+0x84>
 810c550:	4621      	mov	r1, r4
 810c552:	4628      	mov	r0, r5
 810c554:	f7fe fc96 	bl	810ae84 <__smakebuf_r>
 810c558:	89a6      	ldrh	r6, [r4, #12]
 810c55a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 810c55e:	07b3      	lsls	r3, r6, #30
 810c560:	d00f      	beq.n	810c582 <__srefill_r+0xae>
 810c562:	2301      	movs	r3, #1
 810c564:	81a3      	strh	r3, [r4, #12]
 810c566:	4b1e      	ldr	r3, [pc, #120]	; (810c5e0 <__srefill_r+0x10c>)
 810c568:	491e      	ldr	r1, [pc, #120]	; (810c5e4 <__srefill_r+0x110>)
 810c56a:	6818      	ldr	r0, [r3, #0]
 810c56c:	f006 0609 	and.w	r6, r6, #9
 810c570:	f7fb f95a 	bl	8107828 <_fwalk>
 810c574:	2e09      	cmp	r6, #9
 810c576:	81a7      	strh	r7, [r4, #12]
 810c578:	d103      	bne.n	810c582 <__srefill_r+0xae>
 810c57a:	4621      	mov	r1, r4
 810c57c:	4628      	mov	r0, r5
 810c57e:	f7fa ffa9 	bl	81074d4 <__sflush_r>
 810c582:	6922      	ldr	r2, [r4, #16]
 810c584:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810c586:	6963      	ldr	r3, [r4, #20]
 810c588:	6a21      	ldr	r1, [r4, #32]
 810c58a:	6022      	str	r2, [r4, #0]
 810c58c:	4628      	mov	r0, r5
 810c58e:	47b0      	blx	r6
 810c590:	2800      	cmp	r0, #0
 810c592:	6060      	str	r0, [r4, #4]
 810c594:	dc1c      	bgt.n	810c5d0 <__srefill_r+0xfc>
 810c596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c59a:	bf17      	itett	ne
 810c59c:	2200      	movne	r2, #0
 810c59e:	f043 0320 	orreq.w	r3, r3, #32
 810c5a2:	6062      	strne	r2, [r4, #4]
 810c5a4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 810c5a8:	e7bc      	b.n	810c524 <__srefill_r+0x50>
 810c5aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810c5ac:	2900      	cmp	r1, #0
 810c5ae:	d0cd      	beq.n	810c54c <__srefill_r+0x78>
 810c5b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c5b4:	4299      	cmp	r1, r3
 810c5b6:	d002      	beq.n	810c5be <__srefill_r+0xea>
 810c5b8:	4628      	mov	r0, r5
 810c5ba:	f7fb f9a1 	bl	8107900 <_free_r>
 810c5be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810c5c0:	6063      	str	r3, [r4, #4]
 810c5c2:	2000      	movs	r0, #0
 810c5c4:	6360      	str	r0, [r4, #52]	; 0x34
 810c5c6:	2b00      	cmp	r3, #0
 810c5c8:	d0c0      	beq.n	810c54c <__srefill_r+0x78>
 810c5ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 810c5cc:	6023      	str	r3, [r4, #0]
 810c5ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c5d0:	2000      	movs	r0, #0
 810c5d2:	e7fc      	b.n	810c5ce <__srefill_r+0xfa>
 810c5d4:	0810e680 	.word	0x0810e680
 810c5d8:	0810e6a0 	.word	0x0810e6a0
 810c5dc:	0810e660 	.word	0x0810e660
 810c5e0:	0810e6c0 	.word	0x0810e6c0
 810c5e4:	0810c4c1 	.word	0x0810c4c1

0810c5e8 <nan>:
 810c5e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810c5f0 <nan+0x8>
 810c5ec:	4770      	bx	lr
 810c5ee:	bf00      	nop
 810c5f0:	00000000 	.word	0x00000000
 810c5f4:	7ff80000 	.word	0x7ff80000

0810c5f8 <__sccl>:
 810c5f8:	b570      	push	{r4, r5, r6, lr}
 810c5fa:	780b      	ldrb	r3, [r1, #0]
 810c5fc:	4604      	mov	r4, r0
 810c5fe:	2b5e      	cmp	r3, #94	; 0x5e
 810c600:	bf0b      	itete	eq
 810c602:	784b      	ldrbeq	r3, [r1, #1]
 810c604:	1c48      	addne	r0, r1, #1
 810c606:	1c88      	addeq	r0, r1, #2
 810c608:	2200      	movne	r2, #0
 810c60a:	bf08      	it	eq
 810c60c:	2201      	moveq	r2, #1
 810c60e:	1e61      	subs	r1, r4, #1
 810c610:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 810c614:	f801 2f01 	strb.w	r2, [r1, #1]!
 810c618:	42a9      	cmp	r1, r5
 810c61a:	d1fb      	bne.n	810c614 <__sccl+0x1c>
 810c61c:	b90b      	cbnz	r3, 810c622 <__sccl+0x2a>
 810c61e:	3801      	subs	r0, #1
 810c620:	bd70      	pop	{r4, r5, r6, pc}
 810c622:	f082 0101 	eor.w	r1, r2, #1
 810c626:	54e1      	strb	r1, [r4, r3]
 810c628:	1c42      	adds	r2, r0, #1
 810c62a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 810c62e:	2d2d      	cmp	r5, #45	; 0x2d
 810c630:	f102 36ff 	add.w	r6, r2, #4294967295
 810c634:	4610      	mov	r0, r2
 810c636:	d006      	beq.n	810c646 <__sccl+0x4e>
 810c638:	2d5d      	cmp	r5, #93	; 0x5d
 810c63a:	d0f1      	beq.n	810c620 <__sccl+0x28>
 810c63c:	b90d      	cbnz	r5, 810c642 <__sccl+0x4a>
 810c63e:	4630      	mov	r0, r6
 810c640:	e7ee      	b.n	810c620 <__sccl+0x28>
 810c642:	462b      	mov	r3, r5
 810c644:	e7ef      	b.n	810c626 <__sccl+0x2e>
 810c646:	7816      	ldrb	r6, [r2, #0]
 810c648:	2e5d      	cmp	r6, #93	; 0x5d
 810c64a:	d0fa      	beq.n	810c642 <__sccl+0x4a>
 810c64c:	42b3      	cmp	r3, r6
 810c64e:	dcf8      	bgt.n	810c642 <__sccl+0x4a>
 810c650:	4618      	mov	r0, r3
 810c652:	3001      	adds	r0, #1
 810c654:	4286      	cmp	r6, r0
 810c656:	5421      	strb	r1, [r4, r0]
 810c658:	dcfb      	bgt.n	810c652 <__sccl+0x5a>
 810c65a:	43d8      	mvns	r0, r3
 810c65c:	4430      	add	r0, r6
 810c65e:	1c5d      	adds	r5, r3, #1
 810c660:	42b3      	cmp	r3, r6
 810c662:	bfa8      	it	ge
 810c664:	2000      	movge	r0, #0
 810c666:	182b      	adds	r3, r5, r0
 810c668:	3202      	adds	r2, #2
 810c66a:	e7de      	b.n	810c62a <__sccl+0x32>

0810c66c <strncmp>:
 810c66c:	b510      	push	{r4, lr}
 810c66e:	b16a      	cbz	r2, 810c68c <strncmp+0x20>
 810c670:	3901      	subs	r1, #1
 810c672:	1884      	adds	r4, r0, r2
 810c674:	f810 3b01 	ldrb.w	r3, [r0], #1
 810c678:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810c67c:	4293      	cmp	r3, r2
 810c67e:	d103      	bne.n	810c688 <strncmp+0x1c>
 810c680:	42a0      	cmp	r0, r4
 810c682:	d001      	beq.n	810c688 <strncmp+0x1c>
 810c684:	2b00      	cmp	r3, #0
 810c686:	d1f5      	bne.n	810c674 <strncmp+0x8>
 810c688:	1a98      	subs	r0, r3, r2
 810c68a:	bd10      	pop	{r4, pc}
 810c68c:	4610      	mov	r0, r2
 810c68e:	e7fc      	b.n	810c68a <strncmp+0x1e>

0810c690 <_strtoul_l.isra.0>:
 810c690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810c694:	4e3b      	ldr	r6, [pc, #236]	; (810c784 <_strtoul_l.isra.0+0xf4>)
 810c696:	4686      	mov	lr, r0
 810c698:	468c      	mov	ip, r1
 810c69a:	4660      	mov	r0, ip
 810c69c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 810c6a0:	5da5      	ldrb	r5, [r4, r6]
 810c6a2:	f015 0508 	ands.w	r5, r5, #8
 810c6a6:	d1f8      	bne.n	810c69a <_strtoul_l.isra.0+0xa>
 810c6a8:	2c2d      	cmp	r4, #45	; 0x2d
 810c6aa:	d134      	bne.n	810c716 <_strtoul_l.isra.0+0x86>
 810c6ac:	f89c 4000 	ldrb.w	r4, [ip]
 810c6b0:	f04f 0801 	mov.w	r8, #1
 810c6b4:	f100 0c02 	add.w	ip, r0, #2
 810c6b8:	2b00      	cmp	r3, #0
 810c6ba:	d05e      	beq.n	810c77a <_strtoul_l.isra.0+0xea>
 810c6bc:	2b10      	cmp	r3, #16
 810c6be:	d10c      	bne.n	810c6da <_strtoul_l.isra.0+0x4a>
 810c6c0:	2c30      	cmp	r4, #48	; 0x30
 810c6c2:	d10a      	bne.n	810c6da <_strtoul_l.isra.0+0x4a>
 810c6c4:	f89c 0000 	ldrb.w	r0, [ip]
 810c6c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 810c6cc:	2858      	cmp	r0, #88	; 0x58
 810c6ce:	d14f      	bne.n	810c770 <_strtoul_l.isra.0+0xe0>
 810c6d0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 810c6d4:	2310      	movs	r3, #16
 810c6d6:	f10c 0c02 	add.w	ip, ip, #2
 810c6da:	f04f 37ff 	mov.w	r7, #4294967295
 810c6de:	2500      	movs	r5, #0
 810c6e0:	fbb7 f7f3 	udiv	r7, r7, r3
 810c6e4:	fb03 f907 	mul.w	r9, r3, r7
 810c6e8:	ea6f 0909 	mvn.w	r9, r9
 810c6ec:	4628      	mov	r0, r5
 810c6ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 810c6f2:	2e09      	cmp	r6, #9
 810c6f4:	d818      	bhi.n	810c728 <_strtoul_l.isra.0+0x98>
 810c6f6:	4634      	mov	r4, r6
 810c6f8:	42a3      	cmp	r3, r4
 810c6fa:	dd24      	ble.n	810c746 <_strtoul_l.isra.0+0xb6>
 810c6fc:	2d00      	cmp	r5, #0
 810c6fe:	db1f      	blt.n	810c740 <_strtoul_l.isra.0+0xb0>
 810c700:	4287      	cmp	r7, r0
 810c702:	d31d      	bcc.n	810c740 <_strtoul_l.isra.0+0xb0>
 810c704:	d101      	bne.n	810c70a <_strtoul_l.isra.0+0x7a>
 810c706:	45a1      	cmp	r9, r4
 810c708:	db1a      	blt.n	810c740 <_strtoul_l.isra.0+0xb0>
 810c70a:	fb00 4003 	mla	r0, r0, r3, r4
 810c70e:	2501      	movs	r5, #1
 810c710:	f81c 4b01 	ldrb.w	r4, [ip], #1
 810c714:	e7eb      	b.n	810c6ee <_strtoul_l.isra.0+0x5e>
 810c716:	2c2b      	cmp	r4, #43	; 0x2b
 810c718:	bf08      	it	eq
 810c71a:	f89c 4000 	ldrbeq.w	r4, [ip]
 810c71e:	46a8      	mov	r8, r5
 810c720:	bf08      	it	eq
 810c722:	f100 0c02 	addeq.w	ip, r0, #2
 810c726:	e7c7      	b.n	810c6b8 <_strtoul_l.isra.0+0x28>
 810c728:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 810c72c:	2e19      	cmp	r6, #25
 810c72e:	d801      	bhi.n	810c734 <_strtoul_l.isra.0+0xa4>
 810c730:	3c37      	subs	r4, #55	; 0x37
 810c732:	e7e1      	b.n	810c6f8 <_strtoul_l.isra.0+0x68>
 810c734:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 810c738:	2e19      	cmp	r6, #25
 810c73a:	d804      	bhi.n	810c746 <_strtoul_l.isra.0+0xb6>
 810c73c:	3c57      	subs	r4, #87	; 0x57
 810c73e:	e7db      	b.n	810c6f8 <_strtoul_l.isra.0+0x68>
 810c740:	f04f 35ff 	mov.w	r5, #4294967295
 810c744:	e7e4      	b.n	810c710 <_strtoul_l.isra.0+0x80>
 810c746:	2d00      	cmp	r5, #0
 810c748:	da07      	bge.n	810c75a <_strtoul_l.isra.0+0xca>
 810c74a:	2322      	movs	r3, #34	; 0x22
 810c74c:	f8ce 3000 	str.w	r3, [lr]
 810c750:	f04f 30ff 	mov.w	r0, #4294967295
 810c754:	b942      	cbnz	r2, 810c768 <_strtoul_l.isra.0+0xd8>
 810c756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c75a:	f1b8 0f00 	cmp.w	r8, #0
 810c75e:	d000      	beq.n	810c762 <_strtoul_l.isra.0+0xd2>
 810c760:	4240      	negs	r0, r0
 810c762:	2a00      	cmp	r2, #0
 810c764:	d0f7      	beq.n	810c756 <_strtoul_l.isra.0+0xc6>
 810c766:	b10d      	cbz	r5, 810c76c <_strtoul_l.isra.0+0xdc>
 810c768:	f10c 31ff 	add.w	r1, ip, #4294967295
 810c76c:	6011      	str	r1, [r2, #0]
 810c76e:	e7f2      	b.n	810c756 <_strtoul_l.isra.0+0xc6>
 810c770:	2430      	movs	r4, #48	; 0x30
 810c772:	2b00      	cmp	r3, #0
 810c774:	d1b1      	bne.n	810c6da <_strtoul_l.isra.0+0x4a>
 810c776:	2308      	movs	r3, #8
 810c778:	e7af      	b.n	810c6da <_strtoul_l.isra.0+0x4a>
 810c77a:	2c30      	cmp	r4, #48	; 0x30
 810c77c:	d0a2      	beq.n	810c6c4 <_strtoul_l.isra.0+0x34>
 810c77e:	230a      	movs	r3, #10
 810c780:	e7ab      	b.n	810c6da <_strtoul_l.isra.0+0x4a>
 810c782:	bf00      	nop
 810c784:	0810e751 	.word	0x0810e751

0810c788 <_strtoul_r>:
 810c788:	f7ff bf82 	b.w	810c690 <_strtoul_l.isra.0>

0810c78c <__submore>:
 810c78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c790:	460c      	mov	r4, r1
 810c792:	6b49      	ldr	r1, [r1, #52]	; 0x34
 810c794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c798:	4299      	cmp	r1, r3
 810c79a:	d11d      	bne.n	810c7d8 <__submore+0x4c>
 810c79c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 810c7a0:	f7fb f8fe 	bl	81079a0 <_malloc_r>
 810c7a4:	b918      	cbnz	r0, 810c7ae <__submore+0x22>
 810c7a6:	f04f 30ff 	mov.w	r0, #4294967295
 810c7aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810c7b2:	63a3      	str	r3, [r4, #56]	; 0x38
 810c7b4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 810c7b8:	6360      	str	r0, [r4, #52]	; 0x34
 810c7ba:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 810c7be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 810c7c2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 810c7c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 810c7ca:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 810c7ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 810c7d2:	6020      	str	r0, [r4, #0]
 810c7d4:	2000      	movs	r0, #0
 810c7d6:	e7e8      	b.n	810c7aa <__submore+0x1e>
 810c7d8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 810c7da:	0077      	lsls	r7, r6, #1
 810c7dc:	463a      	mov	r2, r7
 810c7de:	f000 f921 	bl	810ca24 <_realloc_r>
 810c7e2:	4605      	mov	r5, r0
 810c7e4:	2800      	cmp	r0, #0
 810c7e6:	d0de      	beq.n	810c7a6 <__submore+0x1a>
 810c7e8:	eb00 0806 	add.w	r8, r0, r6
 810c7ec:	4601      	mov	r1, r0
 810c7ee:	4632      	mov	r2, r6
 810c7f0:	4640      	mov	r0, r8
 810c7f2:	f7fe fba1 	bl	810af38 <memcpy>
 810c7f6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 810c7fa:	f8c4 8000 	str.w	r8, [r4]
 810c7fe:	e7e9      	b.n	810c7d4 <__submore+0x48>

0810c800 <_ungetc_r>:
 810c800:	b570      	push	{r4, r5, r6, lr}
 810c802:	4614      	mov	r4, r2
 810c804:	1c4a      	adds	r2, r1, #1
 810c806:	4606      	mov	r6, r0
 810c808:	460d      	mov	r5, r1
 810c80a:	d103      	bne.n	810c814 <_ungetc_r+0x14>
 810c80c:	f04f 35ff 	mov.w	r5, #4294967295
 810c810:	4628      	mov	r0, r5
 810c812:	bd70      	pop	{r4, r5, r6, pc}
 810c814:	b118      	cbz	r0, 810c81e <_ungetc_r+0x1e>
 810c816:	6983      	ldr	r3, [r0, #24]
 810c818:	b90b      	cbnz	r3, 810c81e <_ungetc_r+0x1e>
 810c81a:	f7fa ff87 	bl	810772c <__sinit>
 810c81e:	4b41      	ldr	r3, [pc, #260]	; (810c924 <_ungetc_r+0x124>)
 810c820:	429c      	cmp	r4, r3
 810c822:	d11d      	bne.n	810c860 <_ungetc_r+0x60>
 810c824:	6874      	ldr	r4, [r6, #4]
 810c826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c828:	07db      	lsls	r3, r3, #31
 810c82a:	d405      	bmi.n	810c838 <_ungetc_r+0x38>
 810c82c:	89a3      	ldrh	r3, [r4, #12]
 810c82e:	0598      	lsls	r0, r3, #22
 810c830:	d402      	bmi.n	810c838 <_ungetc_r+0x38>
 810c832:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c834:	f7fb f859 	bl	81078ea <__retarget_lock_acquire_recursive>
 810c838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810c83c:	f023 0320 	bic.w	r3, r3, #32
 810c840:	0759      	lsls	r1, r3, #29
 810c842:	81a3      	strh	r3, [r4, #12]
 810c844:	b29a      	uxth	r2, r3
 810c846:	d42d      	bmi.n	810c8a4 <_ungetc_r+0xa4>
 810c848:	06d3      	lsls	r3, r2, #27
 810c84a:	d413      	bmi.n	810c874 <_ungetc_r+0x74>
 810c84c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c84e:	07dd      	lsls	r5, r3, #31
 810c850:	d4dc      	bmi.n	810c80c <_ungetc_r+0xc>
 810c852:	f412 7f00 	tst.w	r2, #512	; 0x200
 810c856:	d1d9      	bne.n	810c80c <_ungetc_r+0xc>
 810c858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c85a:	f7fb f847 	bl	81078ec <__retarget_lock_release_recursive>
 810c85e:	e7d5      	b.n	810c80c <_ungetc_r+0xc>
 810c860:	4b31      	ldr	r3, [pc, #196]	; (810c928 <_ungetc_r+0x128>)
 810c862:	429c      	cmp	r4, r3
 810c864:	d101      	bne.n	810c86a <_ungetc_r+0x6a>
 810c866:	68b4      	ldr	r4, [r6, #8]
 810c868:	e7dd      	b.n	810c826 <_ungetc_r+0x26>
 810c86a:	4b30      	ldr	r3, [pc, #192]	; (810c92c <_ungetc_r+0x12c>)
 810c86c:	429c      	cmp	r4, r3
 810c86e:	bf08      	it	eq
 810c870:	68f4      	ldreq	r4, [r6, #12]
 810c872:	e7d8      	b.n	810c826 <_ungetc_r+0x26>
 810c874:	0710      	lsls	r0, r2, #28
 810c876:	d511      	bpl.n	810c89c <_ungetc_r+0x9c>
 810c878:	4621      	mov	r1, r4
 810c87a:	4630      	mov	r0, r6
 810c87c:	f7fa feb0 	bl	81075e0 <_fflush_r>
 810c880:	b130      	cbz	r0, 810c890 <_ungetc_r+0x90>
 810c882:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c884:	07d9      	lsls	r1, r3, #31
 810c886:	d4c1      	bmi.n	810c80c <_ungetc_r+0xc>
 810c888:	89a3      	ldrh	r3, [r4, #12]
 810c88a:	f413 7f00 	tst.w	r3, #512	; 0x200
 810c88e:	e7e2      	b.n	810c856 <_ungetc_r+0x56>
 810c890:	89a3      	ldrh	r3, [r4, #12]
 810c892:	60a0      	str	r0, [r4, #8]
 810c894:	f023 0308 	bic.w	r3, r3, #8
 810c898:	81a3      	strh	r3, [r4, #12]
 810c89a:	61a0      	str	r0, [r4, #24]
 810c89c:	89a3      	ldrh	r3, [r4, #12]
 810c89e:	f043 0304 	orr.w	r3, r3, #4
 810c8a2:	81a3      	strh	r3, [r4, #12]
 810c8a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810c8a6:	6862      	ldr	r2, [r4, #4]
 810c8a8:	b2ed      	uxtb	r5, r5
 810c8aa:	b1d3      	cbz	r3, 810c8e2 <_ungetc_r+0xe2>
 810c8ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 810c8ae:	4293      	cmp	r3, r2
 810c8b0:	dc05      	bgt.n	810c8be <_ungetc_r+0xbe>
 810c8b2:	4621      	mov	r1, r4
 810c8b4:	4630      	mov	r0, r6
 810c8b6:	f7ff ff69 	bl	810c78c <__submore>
 810c8ba:	2800      	cmp	r0, #0
 810c8bc:	d1e1      	bne.n	810c882 <_ungetc_r+0x82>
 810c8be:	6823      	ldr	r3, [r4, #0]
 810c8c0:	1e5a      	subs	r2, r3, #1
 810c8c2:	6022      	str	r2, [r4, #0]
 810c8c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 810c8c8:	6863      	ldr	r3, [r4, #4]
 810c8ca:	3301      	adds	r3, #1
 810c8cc:	6063      	str	r3, [r4, #4]
 810c8ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810c8d0:	07da      	lsls	r2, r3, #31
 810c8d2:	d49d      	bmi.n	810c810 <_ungetc_r+0x10>
 810c8d4:	89a3      	ldrh	r3, [r4, #12]
 810c8d6:	059b      	lsls	r3, r3, #22
 810c8d8:	d49a      	bmi.n	810c810 <_ungetc_r+0x10>
 810c8da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810c8dc:	f7fb f806 	bl	81078ec <__retarget_lock_release_recursive>
 810c8e0:	e796      	b.n	810c810 <_ungetc_r+0x10>
 810c8e2:	6e61      	ldr	r1, [r4, #100]	; 0x64
 810c8e4:	6920      	ldr	r0, [r4, #16]
 810c8e6:	6823      	ldr	r3, [r4, #0]
 810c8e8:	f001 0101 	and.w	r1, r1, #1
 810c8ec:	b160      	cbz	r0, 810c908 <_ungetc_r+0x108>
 810c8ee:	4298      	cmp	r0, r3
 810c8f0:	d20a      	bcs.n	810c908 <_ungetc_r+0x108>
 810c8f2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 810c8f6:	42a8      	cmp	r0, r5
 810c8f8:	d106      	bne.n	810c908 <_ungetc_r+0x108>
 810c8fa:	3b01      	subs	r3, #1
 810c8fc:	3201      	adds	r2, #1
 810c8fe:	6023      	str	r3, [r4, #0]
 810c900:	6062      	str	r2, [r4, #4]
 810c902:	2900      	cmp	r1, #0
 810c904:	d184      	bne.n	810c810 <_ungetc_r+0x10>
 810c906:	e7e5      	b.n	810c8d4 <_ungetc_r+0xd4>
 810c908:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 810c90c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810c910:	6363      	str	r3, [r4, #52]	; 0x34
 810c912:	2303      	movs	r3, #3
 810c914:	63a3      	str	r3, [r4, #56]	; 0x38
 810c916:	4623      	mov	r3, r4
 810c918:	f803 5f46 	strb.w	r5, [r3, #70]!
 810c91c:	6023      	str	r3, [r4, #0]
 810c91e:	2301      	movs	r3, #1
 810c920:	6063      	str	r3, [r4, #4]
 810c922:	e7ee      	b.n	810c902 <_ungetc_r+0x102>
 810c924:	0810e680 	.word	0x0810e680
 810c928:	0810e6a0 	.word	0x0810e6a0
 810c92c:	0810e660 	.word	0x0810e660

0810c930 <__ascii_wctomb>:
 810c930:	b149      	cbz	r1, 810c946 <__ascii_wctomb+0x16>
 810c932:	2aff      	cmp	r2, #255	; 0xff
 810c934:	bf85      	ittet	hi
 810c936:	238a      	movhi	r3, #138	; 0x8a
 810c938:	6003      	strhi	r3, [r0, #0]
 810c93a:	700a      	strbls	r2, [r1, #0]
 810c93c:	f04f 30ff 	movhi.w	r0, #4294967295
 810c940:	bf98      	it	ls
 810c942:	2001      	movls	r0, #1
 810c944:	4770      	bx	lr
 810c946:	4608      	mov	r0, r1
 810c948:	4770      	bx	lr
	...

0810c94c <__assert_func>:
 810c94c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810c94e:	4614      	mov	r4, r2
 810c950:	461a      	mov	r2, r3
 810c952:	4b09      	ldr	r3, [pc, #36]	; (810c978 <__assert_func+0x2c>)
 810c954:	681b      	ldr	r3, [r3, #0]
 810c956:	4605      	mov	r5, r0
 810c958:	68d8      	ldr	r0, [r3, #12]
 810c95a:	b14c      	cbz	r4, 810c970 <__assert_func+0x24>
 810c95c:	4b07      	ldr	r3, [pc, #28]	; (810c97c <__assert_func+0x30>)
 810c95e:	9100      	str	r1, [sp, #0]
 810c960:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810c964:	4906      	ldr	r1, [pc, #24]	; (810c980 <__assert_func+0x34>)
 810c966:	462b      	mov	r3, r5
 810c968:	f000 f80e 	bl	810c988 <fiprintf>
 810c96c:	f000 f880 	bl	810ca70 <abort>
 810c970:	4b04      	ldr	r3, [pc, #16]	; (810c984 <__assert_func+0x38>)
 810c972:	461c      	mov	r4, r3
 810c974:	e7f3      	b.n	810c95e <__assert_func+0x12>
 810c976:	bf00      	nop
 810c978:	10000064 	.word	0x10000064
 810c97c:	0810eaf0 	.word	0x0810eaf0
 810c980:	0810eafd 	.word	0x0810eafd
 810c984:	0810eb2b 	.word	0x0810eb2b

0810c988 <fiprintf>:
 810c988:	b40e      	push	{r1, r2, r3}
 810c98a:	b503      	push	{r0, r1, lr}
 810c98c:	4601      	mov	r1, r0
 810c98e:	ab03      	add	r3, sp, #12
 810c990:	4805      	ldr	r0, [pc, #20]	; (810c9a8 <fiprintf+0x20>)
 810c992:	f853 2b04 	ldr.w	r2, [r3], #4
 810c996:	6800      	ldr	r0, [r0, #0]
 810c998:	9301      	str	r3, [sp, #4]
 810c99a:	f7ff f937 	bl	810bc0c <_vfiprintf_r>
 810c99e:	b002      	add	sp, #8
 810c9a0:	f85d eb04 	ldr.w	lr, [sp], #4
 810c9a4:	b003      	add	sp, #12
 810c9a6:	4770      	bx	lr
 810c9a8:	10000064 	.word	0x10000064

0810c9ac <_fstat_r>:
 810c9ac:	b538      	push	{r3, r4, r5, lr}
 810c9ae:	4d07      	ldr	r5, [pc, #28]	; (810c9cc <_fstat_r+0x20>)
 810c9b0:	2300      	movs	r3, #0
 810c9b2:	4604      	mov	r4, r0
 810c9b4:	4608      	mov	r0, r1
 810c9b6:	4611      	mov	r1, r2
 810c9b8:	602b      	str	r3, [r5, #0]
 810c9ba:	f7f6 f8c0 	bl	8102b3e <_fstat>
 810c9be:	1c43      	adds	r3, r0, #1
 810c9c0:	d102      	bne.n	810c9c8 <_fstat_r+0x1c>
 810c9c2:	682b      	ldr	r3, [r5, #0]
 810c9c4:	b103      	cbz	r3, 810c9c8 <_fstat_r+0x1c>
 810c9c6:	6023      	str	r3, [r4, #0]
 810c9c8:	bd38      	pop	{r3, r4, r5, pc}
 810c9ca:	bf00      	nop
 810c9cc:	10000504 	.word	0x10000504

0810c9d0 <_isatty_r>:
 810c9d0:	b538      	push	{r3, r4, r5, lr}
 810c9d2:	4d06      	ldr	r5, [pc, #24]	; (810c9ec <_isatty_r+0x1c>)
 810c9d4:	2300      	movs	r3, #0
 810c9d6:	4604      	mov	r4, r0
 810c9d8:	4608      	mov	r0, r1
 810c9da:	602b      	str	r3, [r5, #0]
 810c9dc:	f7f6 f8bf 	bl	8102b5e <_isatty>
 810c9e0:	1c43      	adds	r3, r0, #1
 810c9e2:	d102      	bne.n	810c9ea <_isatty_r+0x1a>
 810c9e4:	682b      	ldr	r3, [r5, #0]
 810c9e6:	b103      	cbz	r3, 810c9ea <_isatty_r+0x1a>
 810c9e8:	6023      	str	r3, [r4, #0]
 810c9ea:	bd38      	pop	{r3, r4, r5, pc}
 810c9ec:	10000504 	.word	0x10000504

0810c9f0 <memmove>:
 810c9f0:	4288      	cmp	r0, r1
 810c9f2:	b510      	push	{r4, lr}
 810c9f4:	eb01 0402 	add.w	r4, r1, r2
 810c9f8:	d902      	bls.n	810ca00 <memmove+0x10>
 810c9fa:	4284      	cmp	r4, r0
 810c9fc:	4623      	mov	r3, r4
 810c9fe:	d807      	bhi.n	810ca10 <memmove+0x20>
 810ca00:	1e43      	subs	r3, r0, #1
 810ca02:	42a1      	cmp	r1, r4
 810ca04:	d008      	beq.n	810ca18 <memmove+0x28>
 810ca06:	f811 2b01 	ldrb.w	r2, [r1], #1
 810ca0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810ca0e:	e7f8      	b.n	810ca02 <memmove+0x12>
 810ca10:	4402      	add	r2, r0
 810ca12:	4601      	mov	r1, r0
 810ca14:	428a      	cmp	r2, r1
 810ca16:	d100      	bne.n	810ca1a <memmove+0x2a>
 810ca18:	bd10      	pop	{r4, pc}
 810ca1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810ca1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810ca22:	e7f7      	b.n	810ca14 <memmove+0x24>

0810ca24 <_realloc_r>:
 810ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ca26:	4607      	mov	r7, r0
 810ca28:	4614      	mov	r4, r2
 810ca2a:	460e      	mov	r6, r1
 810ca2c:	b921      	cbnz	r1, 810ca38 <_realloc_r+0x14>
 810ca2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810ca32:	4611      	mov	r1, r2
 810ca34:	f7fa bfb4 	b.w	81079a0 <_malloc_r>
 810ca38:	b922      	cbnz	r2, 810ca44 <_realloc_r+0x20>
 810ca3a:	f7fa ff61 	bl	8107900 <_free_r>
 810ca3e:	4625      	mov	r5, r4
 810ca40:	4628      	mov	r0, r5
 810ca42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810ca44:	f000 f81b 	bl	810ca7e <_malloc_usable_size_r>
 810ca48:	42a0      	cmp	r0, r4
 810ca4a:	d20f      	bcs.n	810ca6c <_realloc_r+0x48>
 810ca4c:	4621      	mov	r1, r4
 810ca4e:	4638      	mov	r0, r7
 810ca50:	f7fa ffa6 	bl	81079a0 <_malloc_r>
 810ca54:	4605      	mov	r5, r0
 810ca56:	2800      	cmp	r0, #0
 810ca58:	d0f2      	beq.n	810ca40 <_realloc_r+0x1c>
 810ca5a:	4631      	mov	r1, r6
 810ca5c:	4622      	mov	r2, r4
 810ca5e:	f7fe fa6b 	bl	810af38 <memcpy>
 810ca62:	4631      	mov	r1, r6
 810ca64:	4638      	mov	r0, r7
 810ca66:	f7fa ff4b 	bl	8107900 <_free_r>
 810ca6a:	e7e9      	b.n	810ca40 <_realloc_r+0x1c>
 810ca6c:	4635      	mov	r5, r6
 810ca6e:	e7e7      	b.n	810ca40 <_realloc_r+0x1c>

0810ca70 <abort>:
 810ca70:	b508      	push	{r3, lr}
 810ca72:	2006      	movs	r0, #6
 810ca74:	f000 f834 	bl	810cae0 <raise>
 810ca78:	2001      	movs	r0, #1
 810ca7a:	f7f6 f811 	bl	8102aa0 <_exit>

0810ca7e <_malloc_usable_size_r>:
 810ca7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ca82:	1f18      	subs	r0, r3, #4
 810ca84:	2b00      	cmp	r3, #0
 810ca86:	bfbc      	itt	lt
 810ca88:	580b      	ldrlt	r3, [r1, r0]
 810ca8a:	18c0      	addlt	r0, r0, r3
 810ca8c:	4770      	bx	lr

0810ca8e <_raise_r>:
 810ca8e:	291f      	cmp	r1, #31
 810ca90:	b538      	push	{r3, r4, r5, lr}
 810ca92:	4604      	mov	r4, r0
 810ca94:	460d      	mov	r5, r1
 810ca96:	d904      	bls.n	810caa2 <_raise_r+0x14>
 810ca98:	2316      	movs	r3, #22
 810ca9a:	6003      	str	r3, [r0, #0]
 810ca9c:	f04f 30ff 	mov.w	r0, #4294967295
 810caa0:	bd38      	pop	{r3, r4, r5, pc}
 810caa2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810caa4:	b112      	cbz	r2, 810caac <_raise_r+0x1e>
 810caa6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810caaa:	b94b      	cbnz	r3, 810cac0 <_raise_r+0x32>
 810caac:	4620      	mov	r0, r4
 810caae:	f000 f831 	bl	810cb14 <_getpid_r>
 810cab2:	462a      	mov	r2, r5
 810cab4:	4601      	mov	r1, r0
 810cab6:	4620      	mov	r0, r4
 810cab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810cabc:	f000 b818 	b.w	810caf0 <_kill_r>
 810cac0:	2b01      	cmp	r3, #1
 810cac2:	d00a      	beq.n	810cada <_raise_r+0x4c>
 810cac4:	1c59      	adds	r1, r3, #1
 810cac6:	d103      	bne.n	810cad0 <_raise_r+0x42>
 810cac8:	2316      	movs	r3, #22
 810caca:	6003      	str	r3, [r0, #0]
 810cacc:	2001      	movs	r0, #1
 810cace:	e7e7      	b.n	810caa0 <_raise_r+0x12>
 810cad0:	2400      	movs	r4, #0
 810cad2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810cad6:	4628      	mov	r0, r5
 810cad8:	4798      	blx	r3
 810cada:	2000      	movs	r0, #0
 810cadc:	e7e0      	b.n	810caa0 <_raise_r+0x12>
	...

0810cae0 <raise>:
 810cae0:	4b02      	ldr	r3, [pc, #8]	; (810caec <raise+0xc>)
 810cae2:	4601      	mov	r1, r0
 810cae4:	6818      	ldr	r0, [r3, #0]
 810cae6:	f7ff bfd2 	b.w	810ca8e <_raise_r>
 810caea:	bf00      	nop
 810caec:	10000064 	.word	0x10000064

0810caf0 <_kill_r>:
 810caf0:	b538      	push	{r3, r4, r5, lr}
 810caf2:	4d07      	ldr	r5, [pc, #28]	; (810cb10 <_kill_r+0x20>)
 810caf4:	2300      	movs	r3, #0
 810caf6:	4604      	mov	r4, r0
 810caf8:	4608      	mov	r0, r1
 810cafa:	4611      	mov	r1, r2
 810cafc:	602b      	str	r3, [r5, #0]
 810cafe:	f7f5 ffbf 	bl	8102a80 <_kill>
 810cb02:	1c43      	adds	r3, r0, #1
 810cb04:	d102      	bne.n	810cb0c <_kill_r+0x1c>
 810cb06:	682b      	ldr	r3, [r5, #0]
 810cb08:	b103      	cbz	r3, 810cb0c <_kill_r+0x1c>
 810cb0a:	6023      	str	r3, [r4, #0]
 810cb0c:	bd38      	pop	{r3, r4, r5, pc}
 810cb0e:	bf00      	nop
 810cb10:	10000504 	.word	0x10000504

0810cb14 <_getpid_r>:
 810cb14:	f7f5 bfac 	b.w	8102a70 <_getpid>

0810cb18 <atan>:
 810cb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cb1c:	ec55 4b10 	vmov	r4, r5, d0
 810cb20:	4bc3      	ldr	r3, [pc, #780]	; (810ce30 <atan+0x318>)
 810cb22:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810cb26:	429e      	cmp	r6, r3
 810cb28:	46ab      	mov	fp, r5
 810cb2a:	dd18      	ble.n	810cb5e <atan+0x46>
 810cb2c:	4bc1      	ldr	r3, [pc, #772]	; (810ce34 <atan+0x31c>)
 810cb2e:	429e      	cmp	r6, r3
 810cb30:	dc01      	bgt.n	810cb36 <atan+0x1e>
 810cb32:	d109      	bne.n	810cb48 <atan+0x30>
 810cb34:	b144      	cbz	r4, 810cb48 <atan+0x30>
 810cb36:	4622      	mov	r2, r4
 810cb38:	462b      	mov	r3, r5
 810cb3a:	4620      	mov	r0, r4
 810cb3c:	4629      	mov	r1, r5
 810cb3e:	f7f3 fc2d 	bl	810039c <__adddf3>
 810cb42:	4604      	mov	r4, r0
 810cb44:	460d      	mov	r5, r1
 810cb46:	e006      	b.n	810cb56 <atan+0x3e>
 810cb48:	f1bb 0f00 	cmp.w	fp, #0
 810cb4c:	f300 8131 	bgt.w	810cdb2 <atan+0x29a>
 810cb50:	a59b      	add	r5, pc, #620	; (adr r5, 810cdc0 <atan+0x2a8>)
 810cb52:	e9d5 4500 	ldrd	r4, r5, [r5]
 810cb56:	ec45 4b10 	vmov	d0, r4, r5
 810cb5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cb5e:	4bb6      	ldr	r3, [pc, #728]	; (810ce38 <atan+0x320>)
 810cb60:	429e      	cmp	r6, r3
 810cb62:	dc14      	bgt.n	810cb8e <atan+0x76>
 810cb64:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 810cb68:	429e      	cmp	r6, r3
 810cb6a:	dc0d      	bgt.n	810cb88 <atan+0x70>
 810cb6c:	a396      	add	r3, pc, #600	; (adr r3, 810cdc8 <atan+0x2b0>)
 810cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cb72:	ee10 0a10 	vmov	r0, s0
 810cb76:	4629      	mov	r1, r5
 810cb78:	f7f3 fc10 	bl	810039c <__adddf3>
 810cb7c:	4baf      	ldr	r3, [pc, #700]	; (810ce3c <atan+0x324>)
 810cb7e:	2200      	movs	r2, #0
 810cb80:	f7f4 f852 	bl	8100c28 <__aeabi_dcmpgt>
 810cb84:	2800      	cmp	r0, #0
 810cb86:	d1e6      	bne.n	810cb56 <atan+0x3e>
 810cb88:	f04f 3aff 	mov.w	sl, #4294967295
 810cb8c:	e02b      	b.n	810cbe6 <atan+0xce>
 810cb8e:	f000 f963 	bl	810ce58 <fabs>
 810cb92:	4bab      	ldr	r3, [pc, #684]	; (810ce40 <atan+0x328>)
 810cb94:	429e      	cmp	r6, r3
 810cb96:	ec55 4b10 	vmov	r4, r5, d0
 810cb9a:	f300 80bf 	bgt.w	810cd1c <atan+0x204>
 810cb9e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 810cba2:	429e      	cmp	r6, r3
 810cba4:	f300 80a0 	bgt.w	810cce8 <atan+0x1d0>
 810cba8:	ee10 2a10 	vmov	r2, s0
 810cbac:	ee10 0a10 	vmov	r0, s0
 810cbb0:	462b      	mov	r3, r5
 810cbb2:	4629      	mov	r1, r5
 810cbb4:	f7f3 fbf2 	bl	810039c <__adddf3>
 810cbb8:	4ba0      	ldr	r3, [pc, #640]	; (810ce3c <atan+0x324>)
 810cbba:	2200      	movs	r2, #0
 810cbbc:	f7f3 fbec 	bl	8100398 <__aeabi_dsub>
 810cbc0:	2200      	movs	r2, #0
 810cbc2:	4606      	mov	r6, r0
 810cbc4:	460f      	mov	r7, r1
 810cbc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810cbca:	4620      	mov	r0, r4
 810cbcc:	4629      	mov	r1, r5
 810cbce:	f7f3 fbe5 	bl	810039c <__adddf3>
 810cbd2:	4602      	mov	r2, r0
 810cbd4:	460b      	mov	r3, r1
 810cbd6:	4630      	mov	r0, r6
 810cbd8:	4639      	mov	r1, r7
 810cbda:	f7f3 febf 	bl	810095c <__aeabi_ddiv>
 810cbde:	f04f 0a00 	mov.w	sl, #0
 810cbe2:	4604      	mov	r4, r0
 810cbe4:	460d      	mov	r5, r1
 810cbe6:	4622      	mov	r2, r4
 810cbe8:	462b      	mov	r3, r5
 810cbea:	4620      	mov	r0, r4
 810cbec:	4629      	mov	r1, r5
 810cbee:	f7f3 fd8b 	bl	8100708 <__aeabi_dmul>
 810cbf2:	4602      	mov	r2, r0
 810cbf4:	460b      	mov	r3, r1
 810cbf6:	4680      	mov	r8, r0
 810cbf8:	4689      	mov	r9, r1
 810cbfa:	f7f3 fd85 	bl	8100708 <__aeabi_dmul>
 810cbfe:	a374      	add	r3, pc, #464	; (adr r3, 810cdd0 <atan+0x2b8>)
 810cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc04:	4606      	mov	r6, r0
 810cc06:	460f      	mov	r7, r1
 810cc08:	f7f3 fd7e 	bl	8100708 <__aeabi_dmul>
 810cc0c:	a372      	add	r3, pc, #456	; (adr r3, 810cdd8 <atan+0x2c0>)
 810cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc12:	f7f3 fbc3 	bl	810039c <__adddf3>
 810cc16:	4632      	mov	r2, r6
 810cc18:	463b      	mov	r3, r7
 810cc1a:	f7f3 fd75 	bl	8100708 <__aeabi_dmul>
 810cc1e:	a370      	add	r3, pc, #448	; (adr r3, 810cde0 <atan+0x2c8>)
 810cc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc24:	f7f3 fbba 	bl	810039c <__adddf3>
 810cc28:	4632      	mov	r2, r6
 810cc2a:	463b      	mov	r3, r7
 810cc2c:	f7f3 fd6c 	bl	8100708 <__aeabi_dmul>
 810cc30:	a36d      	add	r3, pc, #436	; (adr r3, 810cde8 <atan+0x2d0>)
 810cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc36:	f7f3 fbb1 	bl	810039c <__adddf3>
 810cc3a:	4632      	mov	r2, r6
 810cc3c:	463b      	mov	r3, r7
 810cc3e:	f7f3 fd63 	bl	8100708 <__aeabi_dmul>
 810cc42:	a36b      	add	r3, pc, #428	; (adr r3, 810cdf0 <atan+0x2d8>)
 810cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc48:	f7f3 fba8 	bl	810039c <__adddf3>
 810cc4c:	4632      	mov	r2, r6
 810cc4e:	463b      	mov	r3, r7
 810cc50:	f7f3 fd5a 	bl	8100708 <__aeabi_dmul>
 810cc54:	a368      	add	r3, pc, #416	; (adr r3, 810cdf8 <atan+0x2e0>)
 810cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc5a:	f7f3 fb9f 	bl	810039c <__adddf3>
 810cc5e:	4642      	mov	r2, r8
 810cc60:	464b      	mov	r3, r9
 810cc62:	f7f3 fd51 	bl	8100708 <__aeabi_dmul>
 810cc66:	a366      	add	r3, pc, #408	; (adr r3, 810ce00 <atan+0x2e8>)
 810cc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc6c:	4680      	mov	r8, r0
 810cc6e:	4689      	mov	r9, r1
 810cc70:	4630      	mov	r0, r6
 810cc72:	4639      	mov	r1, r7
 810cc74:	f7f3 fd48 	bl	8100708 <__aeabi_dmul>
 810cc78:	a363      	add	r3, pc, #396	; (adr r3, 810ce08 <atan+0x2f0>)
 810cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc7e:	f7f3 fb8b 	bl	8100398 <__aeabi_dsub>
 810cc82:	4632      	mov	r2, r6
 810cc84:	463b      	mov	r3, r7
 810cc86:	f7f3 fd3f 	bl	8100708 <__aeabi_dmul>
 810cc8a:	a361      	add	r3, pc, #388	; (adr r3, 810ce10 <atan+0x2f8>)
 810cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc90:	f7f3 fb82 	bl	8100398 <__aeabi_dsub>
 810cc94:	4632      	mov	r2, r6
 810cc96:	463b      	mov	r3, r7
 810cc98:	f7f3 fd36 	bl	8100708 <__aeabi_dmul>
 810cc9c:	a35e      	add	r3, pc, #376	; (adr r3, 810ce18 <atan+0x300>)
 810cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cca2:	f7f3 fb79 	bl	8100398 <__aeabi_dsub>
 810cca6:	4632      	mov	r2, r6
 810cca8:	463b      	mov	r3, r7
 810ccaa:	f7f3 fd2d 	bl	8100708 <__aeabi_dmul>
 810ccae:	a35c      	add	r3, pc, #368	; (adr r3, 810ce20 <atan+0x308>)
 810ccb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccb4:	f7f3 fb70 	bl	8100398 <__aeabi_dsub>
 810ccb8:	4632      	mov	r2, r6
 810ccba:	463b      	mov	r3, r7
 810ccbc:	f7f3 fd24 	bl	8100708 <__aeabi_dmul>
 810ccc0:	4602      	mov	r2, r0
 810ccc2:	460b      	mov	r3, r1
 810ccc4:	4640      	mov	r0, r8
 810ccc6:	4649      	mov	r1, r9
 810ccc8:	f7f3 fb68 	bl	810039c <__adddf3>
 810cccc:	4622      	mov	r2, r4
 810ccce:	462b      	mov	r3, r5
 810ccd0:	f7f3 fd1a 	bl	8100708 <__aeabi_dmul>
 810ccd4:	f1ba 3fff 	cmp.w	sl, #4294967295
 810ccd8:	4602      	mov	r2, r0
 810ccda:	460b      	mov	r3, r1
 810ccdc:	d14b      	bne.n	810cd76 <atan+0x25e>
 810ccde:	4620      	mov	r0, r4
 810cce0:	4629      	mov	r1, r5
 810cce2:	f7f3 fb59 	bl	8100398 <__aeabi_dsub>
 810cce6:	e72c      	b.n	810cb42 <atan+0x2a>
 810cce8:	ee10 0a10 	vmov	r0, s0
 810ccec:	4b53      	ldr	r3, [pc, #332]	; (810ce3c <atan+0x324>)
 810ccee:	2200      	movs	r2, #0
 810ccf0:	4629      	mov	r1, r5
 810ccf2:	f7f3 fb51 	bl	8100398 <__aeabi_dsub>
 810ccf6:	4b51      	ldr	r3, [pc, #324]	; (810ce3c <atan+0x324>)
 810ccf8:	4606      	mov	r6, r0
 810ccfa:	460f      	mov	r7, r1
 810ccfc:	2200      	movs	r2, #0
 810ccfe:	4620      	mov	r0, r4
 810cd00:	4629      	mov	r1, r5
 810cd02:	f7f3 fb4b 	bl	810039c <__adddf3>
 810cd06:	4602      	mov	r2, r0
 810cd08:	460b      	mov	r3, r1
 810cd0a:	4630      	mov	r0, r6
 810cd0c:	4639      	mov	r1, r7
 810cd0e:	f7f3 fe25 	bl	810095c <__aeabi_ddiv>
 810cd12:	f04f 0a01 	mov.w	sl, #1
 810cd16:	4604      	mov	r4, r0
 810cd18:	460d      	mov	r5, r1
 810cd1a:	e764      	b.n	810cbe6 <atan+0xce>
 810cd1c:	4b49      	ldr	r3, [pc, #292]	; (810ce44 <atan+0x32c>)
 810cd1e:	429e      	cmp	r6, r3
 810cd20:	da1d      	bge.n	810cd5e <atan+0x246>
 810cd22:	ee10 0a10 	vmov	r0, s0
 810cd26:	4b48      	ldr	r3, [pc, #288]	; (810ce48 <atan+0x330>)
 810cd28:	2200      	movs	r2, #0
 810cd2a:	4629      	mov	r1, r5
 810cd2c:	f7f3 fb34 	bl	8100398 <__aeabi_dsub>
 810cd30:	4b45      	ldr	r3, [pc, #276]	; (810ce48 <atan+0x330>)
 810cd32:	4606      	mov	r6, r0
 810cd34:	460f      	mov	r7, r1
 810cd36:	2200      	movs	r2, #0
 810cd38:	4620      	mov	r0, r4
 810cd3a:	4629      	mov	r1, r5
 810cd3c:	f7f3 fce4 	bl	8100708 <__aeabi_dmul>
 810cd40:	4b3e      	ldr	r3, [pc, #248]	; (810ce3c <atan+0x324>)
 810cd42:	2200      	movs	r2, #0
 810cd44:	f7f3 fb2a 	bl	810039c <__adddf3>
 810cd48:	4602      	mov	r2, r0
 810cd4a:	460b      	mov	r3, r1
 810cd4c:	4630      	mov	r0, r6
 810cd4e:	4639      	mov	r1, r7
 810cd50:	f7f3 fe04 	bl	810095c <__aeabi_ddiv>
 810cd54:	f04f 0a02 	mov.w	sl, #2
 810cd58:	4604      	mov	r4, r0
 810cd5a:	460d      	mov	r5, r1
 810cd5c:	e743      	b.n	810cbe6 <atan+0xce>
 810cd5e:	462b      	mov	r3, r5
 810cd60:	ee10 2a10 	vmov	r2, s0
 810cd64:	4939      	ldr	r1, [pc, #228]	; (810ce4c <atan+0x334>)
 810cd66:	2000      	movs	r0, #0
 810cd68:	f7f3 fdf8 	bl	810095c <__aeabi_ddiv>
 810cd6c:	f04f 0a03 	mov.w	sl, #3
 810cd70:	4604      	mov	r4, r0
 810cd72:	460d      	mov	r5, r1
 810cd74:	e737      	b.n	810cbe6 <atan+0xce>
 810cd76:	4b36      	ldr	r3, [pc, #216]	; (810ce50 <atan+0x338>)
 810cd78:	4e36      	ldr	r6, [pc, #216]	; (810ce54 <atan+0x33c>)
 810cd7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 810cd7e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 810cd82:	e9da 2300 	ldrd	r2, r3, [sl]
 810cd86:	f7f3 fb07 	bl	8100398 <__aeabi_dsub>
 810cd8a:	4622      	mov	r2, r4
 810cd8c:	462b      	mov	r3, r5
 810cd8e:	f7f3 fb03 	bl	8100398 <__aeabi_dsub>
 810cd92:	4602      	mov	r2, r0
 810cd94:	460b      	mov	r3, r1
 810cd96:	e9d6 0100 	ldrd	r0, r1, [r6]
 810cd9a:	f7f3 fafd 	bl	8100398 <__aeabi_dsub>
 810cd9e:	f1bb 0f00 	cmp.w	fp, #0
 810cda2:	4604      	mov	r4, r0
 810cda4:	460d      	mov	r5, r1
 810cda6:	f6bf aed6 	bge.w	810cb56 <atan+0x3e>
 810cdaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810cdae:	461d      	mov	r5, r3
 810cdb0:	e6d1      	b.n	810cb56 <atan+0x3e>
 810cdb2:	a51d      	add	r5, pc, #116	; (adr r5, 810ce28 <atan+0x310>)
 810cdb4:	e9d5 4500 	ldrd	r4, r5, [r5]
 810cdb8:	e6cd      	b.n	810cb56 <atan+0x3e>
 810cdba:	bf00      	nop
 810cdbc:	f3af 8000 	nop.w
 810cdc0:	54442d18 	.word	0x54442d18
 810cdc4:	bff921fb 	.word	0xbff921fb
 810cdc8:	8800759c 	.word	0x8800759c
 810cdcc:	7e37e43c 	.word	0x7e37e43c
 810cdd0:	e322da11 	.word	0xe322da11
 810cdd4:	3f90ad3a 	.word	0x3f90ad3a
 810cdd8:	24760deb 	.word	0x24760deb
 810cddc:	3fa97b4b 	.word	0x3fa97b4b
 810cde0:	a0d03d51 	.word	0xa0d03d51
 810cde4:	3fb10d66 	.word	0x3fb10d66
 810cde8:	c54c206e 	.word	0xc54c206e
 810cdec:	3fb745cd 	.word	0x3fb745cd
 810cdf0:	920083ff 	.word	0x920083ff
 810cdf4:	3fc24924 	.word	0x3fc24924
 810cdf8:	5555550d 	.word	0x5555550d
 810cdfc:	3fd55555 	.word	0x3fd55555
 810ce00:	2c6a6c2f 	.word	0x2c6a6c2f
 810ce04:	bfa2b444 	.word	0xbfa2b444
 810ce08:	52defd9a 	.word	0x52defd9a
 810ce0c:	3fadde2d 	.word	0x3fadde2d
 810ce10:	af749a6d 	.word	0xaf749a6d
 810ce14:	3fb3b0f2 	.word	0x3fb3b0f2
 810ce18:	fe231671 	.word	0xfe231671
 810ce1c:	3fbc71c6 	.word	0x3fbc71c6
 810ce20:	9998ebc4 	.word	0x9998ebc4
 810ce24:	3fc99999 	.word	0x3fc99999
 810ce28:	54442d18 	.word	0x54442d18
 810ce2c:	3ff921fb 	.word	0x3ff921fb
 810ce30:	440fffff 	.word	0x440fffff
 810ce34:	7ff00000 	.word	0x7ff00000
 810ce38:	3fdbffff 	.word	0x3fdbffff
 810ce3c:	3ff00000 	.word	0x3ff00000
 810ce40:	3ff2ffff 	.word	0x3ff2ffff
 810ce44:	40038000 	.word	0x40038000
 810ce48:	3ff80000 	.word	0x3ff80000
 810ce4c:	bff00000 	.word	0xbff00000
 810ce50:	0810eb50 	.word	0x0810eb50
 810ce54:	0810eb30 	.word	0x0810eb30

0810ce58 <fabs>:
 810ce58:	ec51 0b10 	vmov	r0, r1, d0
 810ce5c:	ee10 2a10 	vmov	r2, s0
 810ce60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810ce64:	ec43 2b10 	vmov	d0, r2, r3
 810ce68:	4770      	bx	lr
 810ce6a:	0000      	movs	r0, r0
 810ce6c:	0000      	movs	r0, r0
	...

0810ce70 <sin>:
 810ce70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ce72:	ec53 2b10 	vmov	r2, r3, d0
 810ce76:	4826      	ldr	r0, [pc, #152]	; (810cf10 <sin+0xa0>)
 810ce78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810ce7c:	4281      	cmp	r1, r0
 810ce7e:	dc07      	bgt.n	810ce90 <sin+0x20>
 810ce80:	ed9f 1b21 	vldr	d1, [pc, #132]	; 810cf08 <sin+0x98>
 810ce84:	2000      	movs	r0, #0
 810ce86:	f000 fe5b 	bl	810db40 <__kernel_sin>
 810ce8a:	ec51 0b10 	vmov	r0, r1, d0
 810ce8e:	e007      	b.n	810cea0 <sin+0x30>
 810ce90:	4820      	ldr	r0, [pc, #128]	; (810cf14 <sin+0xa4>)
 810ce92:	4281      	cmp	r1, r0
 810ce94:	dd09      	ble.n	810ceaa <sin+0x3a>
 810ce96:	ee10 0a10 	vmov	r0, s0
 810ce9a:	4619      	mov	r1, r3
 810ce9c:	f7f3 fa7c 	bl	8100398 <__aeabi_dsub>
 810cea0:	ec41 0b10 	vmov	d0, r0, r1
 810cea4:	b005      	add	sp, #20
 810cea6:	f85d fb04 	ldr.w	pc, [sp], #4
 810ceaa:	4668      	mov	r0, sp
 810ceac:	f000 f834 	bl	810cf18 <__ieee754_rem_pio2>
 810ceb0:	f000 0003 	and.w	r0, r0, #3
 810ceb4:	2801      	cmp	r0, #1
 810ceb6:	d008      	beq.n	810ceca <sin+0x5a>
 810ceb8:	2802      	cmp	r0, #2
 810ceba:	d00d      	beq.n	810ced8 <sin+0x68>
 810cebc:	b9d0      	cbnz	r0, 810cef4 <sin+0x84>
 810cebe:	ed9d 1b02 	vldr	d1, [sp, #8]
 810cec2:	ed9d 0b00 	vldr	d0, [sp]
 810cec6:	2001      	movs	r0, #1
 810cec8:	e7dd      	b.n	810ce86 <sin+0x16>
 810ceca:	ed9d 1b02 	vldr	d1, [sp, #8]
 810cece:	ed9d 0b00 	vldr	d0, [sp]
 810ced2:	f000 fa2d 	bl	810d330 <__kernel_cos>
 810ced6:	e7d8      	b.n	810ce8a <sin+0x1a>
 810ced8:	ed9d 1b02 	vldr	d1, [sp, #8]
 810cedc:	ed9d 0b00 	vldr	d0, [sp]
 810cee0:	2001      	movs	r0, #1
 810cee2:	f000 fe2d 	bl	810db40 <__kernel_sin>
 810cee6:	ec53 2b10 	vmov	r2, r3, d0
 810ceea:	ee10 0a10 	vmov	r0, s0
 810ceee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810cef2:	e7d5      	b.n	810cea0 <sin+0x30>
 810cef4:	ed9d 1b02 	vldr	d1, [sp, #8]
 810cef8:	ed9d 0b00 	vldr	d0, [sp]
 810cefc:	f000 fa18 	bl	810d330 <__kernel_cos>
 810cf00:	e7f1      	b.n	810cee6 <sin+0x76>
 810cf02:	bf00      	nop
 810cf04:	f3af 8000 	nop.w
	...
 810cf10:	3fe921fb 	.word	0x3fe921fb
 810cf14:	7fefffff 	.word	0x7fefffff

0810cf18 <__ieee754_rem_pio2>:
 810cf18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810cf1c:	ed2d 8b02 	vpush	{d8}
 810cf20:	ec55 4b10 	vmov	r4, r5, d0
 810cf24:	4bca      	ldr	r3, [pc, #808]	; (810d250 <__ieee754_rem_pio2+0x338>)
 810cf26:	b08b      	sub	sp, #44	; 0x2c
 810cf28:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 810cf2c:	4598      	cmp	r8, r3
 810cf2e:	4682      	mov	sl, r0
 810cf30:	9502      	str	r5, [sp, #8]
 810cf32:	dc08      	bgt.n	810cf46 <__ieee754_rem_pio2+0x2e>
 810cf34:	2200      	movs	r2, #0
 810cf36:	2300      	movs	r3, #0
 810cf38:	ed80 0b00 	vstr	d0, [r0]
 810cf3c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 810cf40:	f04f 0b00 	mov.w	fp, #0
 810cf44:	e028      	b.n	810cf98 <__ieee754_rem_pio2+0x80>
 810cf46:	4bc3      	ldr	r3, [pc, #780]	; (810d254 <__ieee754_rem_pio2+0x33c>)
 810cf48:	4598      	cmp	r8, r3
 810cf4a:	dc78      	bgt.n	810d03e <__ieee754_rem_pio2+0x126>
 810cf4c:	9b02      	ldr	r3, [sp, #8]
 810cf4e:	4ec2      	ldr	r6, [pc, #776]	; (810d258 <__ieee754_rem_pio2+0x340>)
 810cf50:	2b00      	cmp	r3, #0
 810cf52:	ee10 0a10 	vmov	r0, s0
 810cf56:	a3b0      	add	r3, pc, #704	; (adr r3, 810d218 <__ieee754_rem_pio2+0x300>)
 810cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf5c:	4629      	mov	r1, r5
 810cf5e:	dd39      	ble.n	810cfd4 <__ieee754_rem_pio2+0xbc>
 810cf60:	f7f3 fa1a 	bl	8100398 <__aeabi_dsub>
 810cf64:	45b0      	cmp	r8, r6
 810cf66:	4604      	mov	r4, r0
 810cf68:	460d      	mov	r5, r1
 810cf6a:	d01b      	beq.n	810cfa4 <__ieee754_rem_pio2+0x8c>
 810cf6c:	a3ac      	add	r3, pc, #688	; (adr r3, 810d220 <__ieee754_rem_pio2+0x308>)
 810cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf72:	f7f3 fa11 	bl	8100398 <__aeabi_dsub>
 810cf76:	4602      	mov	r2, r0
 810cf78:	460b      	mov	r3, r1
 810cf7a:	e9ca 2300 	strd	r2, r3, [sl]
 810cf7e:	4620      	mov	r0, r4
 810cf80:	4629      	mov	r1, r5
 810cf82:	f7f3 fa09 	bl	8100398 <__aeabi_dsub>
 810cf86:	a3a6      	add	r3, pc, #664	; (adr r3, 810d220 <__ieee754_rem_pio2+0x308>)
 810cf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf8c:	f7f3 fa04 	bl	8100398 <__aeabi_dsub>
 810cf90:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810cf94:	f04f 0b01 	mov.w	fp, #1
 810cf98:	4658      	mov	r0, fp
 810cf9a:	b00b      	add	sp, #44	; 0x2c
 810cf9c:	ecbd 8b02 	vpop	{d8}
 810cfa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cfa4:	a3a0      	add	r3, pc, #640	; (adr r3, 810d228 <__ieee754_rem_pio2+0x310>)
 810cfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfaa:	f7f3 f9f5 	bl	8100398 <__aeabi_dsub>
 810cfae:	a3a0      	add	r3, pc, #640	; (adr r3, 810d230 <__ieee754_rem_pio2+0x318>)
 810cfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfb4:	4604      	mov	r4, r0
 810cfb6:	460d      	mov	r5, r1
 810cfb8:	f7f3 f9ee 	bl	8100398 <__aeabi_dsub>
 810cfbc:	4602      	mov	r2, r0
 810cfbe:	460b      	mov	r3, r1
 810cfc0:	e9ca 2300 	strd	r2, r3, [sl]
 810cfc4:	4620      	mov	r0, r4
 810cfc6:	4629      	mov	r1, r5
 810cfc8:	f7f3 f9e6 	bl	8100398 <__aeabi_dsub>
 810cfcc:	a398      	add	r3, pc, #608	; (adr r3, 810d230 <__ieee754_rem_pio2+0x318>)
 810cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfd2:	e7db      	b.n	810cf8c <__ieee754_rem_pio2+0x74>
 810cfd4:	f7f3 f9e2 	bl	810039c <__adddf3>
 810cfd8:	45b0      	cmp	r8, r6
 810cfda:	4604      	mov	r4, r0
 810cfdc:	460d      	mov	r5, r1
 810cfde:	d016      	beq.n	810d00e <__ieee754_rem_pio2+0xf6>
 810cfe0:	a38f      	add	r3, pc, #572	; (adr r3, 810d220 <__ieee754_rem_pio2+0x308>)
 810cfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfe6:	f7f3 f9d9 	bl	810039c <__adddf3>
 810cfea:	4602      	mov	r2, r0
 810cfec:	460b      	mov	r3, r1
 810cfee:	e9ca 2300 	strd	r2, r3, [sl]
 810cff2:	4620      	mov	r0, r4
 810cff4:	4629      	mov	r1, r5
 810cff6:	f7f3 f9cf 	bl	8100398 <__aeabi_dsub>
 810cffa:	a389      	add	r3, pc, #548	; (adr r3, 810d220 <__ieee754_rem_pio2+0x308>)
 810cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d000:	f7f3 f9cc 	bl	810039c <__adddf3>
 810d004:	f04f 3bff 	mov.w	fp, #4294967295
 810d008:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810d00c:	e7c4      	b.n	810cf98 <__ieee754_rem_pio2+0x80>
 810d00e:	a386      	add	r3, pc, #536	; (adr r3, 810d228 <__ieee754_rem_pio2+0x310>)
 810d010:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d014:	f7f3 f9c2 	bl	810039c <__adddf3>
 810d018:	a385      	add	r3, pc, #532	; (adr r3, 810d230 <__ieee754_rem_pio2+0x318>)
 810d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d01e:	4604      	mov	r4, r0
 810d020:	460d      	mov	r5, r1
 810d022:	f7f3 f9bb 	bl	810039c <__adddf3>
 810d026:	4602      	mov	r2, r0
 810d028:	460b      	mov	r3, r1
 810d02a:	e9ca 2300 	strd	r2, r3, [sl]
 810d02e:	4620      	mov	r0, r4
 810d030:	4629      	mov	r1, r5
 810d032:	f7f3 f9b1 	bl	8100398 <__aeabi_dsub>
 810d036:	a37e      	add	r3, pc, #504	; (adr r3, 810d230 <__ieee754_rem_pio2+0x318>)
 810d038:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d03c:	e7e0      	b.n	810d000 <__ieee754_rem_pio2+0xe8>
 810d03e:	4b87      	ldr	r3, [pc, #540]	; (810d25c <__ieee754_rem_pio2+0x344>)
 810d040:	4598      	cmp	r8, r3
 810d042:	f300 80d9 	bgt.w	810d1f8 <__ieee754_rem_pio2+0x2e0>
 810d046:	f7ff ff07 	bl	810ce58 <fabs>
 810d04a:	ec55 4b10 	vmov	r4, r5, d0
 810d04e:	ee10 0a10 	vmov	r0, s0
 810d052:	a379      	add	r3, pc, #484	; (adr r3, 810d238 <__ieee754_rem_pio2+0x320>)
 810d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d058:	4629      	mov	r1, r5
 810d05a:	f7f3 fb55 	bl	8100708 <__aeabi_dmul>
 810d05e:	4b80      	ldr	r3, [pc, #512]	; (810d260 <__ieee754_rem_pio2+0x348>)
 810d060:	2200      	movs	r2, #0
 810d062:	f7f3 f99b 	bl	810039c <__adddf3>
 810d066:	f7f3 fdff 	bl	8100c68 <__aeabi_d2iz>
 810d06a:	4683      	mov	fp, r0
 810d06c:	f7f3 fae2 	bl	8100634 <__aeabi_i2d>
 810d070:	4602      	mov	r2, r0
 810d072:	460b      	mov	r3, r1
 810d074:	ec43 2b18 	vmov	d8, r2, r3
 810d078:	a367      	add	r3, pc, #412	; (adr r3, 810d218 <__ieee754_rem_pio2+0x300>)
 810d07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d07e:	f7f3 fb43 	bl	8100708 <__aeabi_dmul>
 810d082:	4602      	mov	r2, r0
 810d084:	460b      	mov	r3, r1
 810d086:	4620      	mov	r0, r4
 810d088:	4629      	mov	r1, r5
 810d08a:	f7f3 f985 	bl	8100398 <__aeabi_dsub>
 810d08e:	a364      	add	r3, pc, #400	; (adr r3, 810d220 <__ieee754_rem_pio2+0x308>)
 810d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d094:	4606      	mov	r6, r0
 810d096:	460f      	mov	r7, r1
 810d098:	ec51 0b18 	vmov	r0, r1, d8
 810d09c:	f7f3 fb34 	bl	8100708 <__aeabi_dmul>
 810d0a0:	f1bb 0f1f 	cmp.w	fp, #31
 810d0a4:	4604      	mov	r4, r0
 810d0a6:	460d      	mov	r5, r1
 810d0a8:	dc0d      	bgt.n	810d0c6 <__ieee754_rem_pio2+0x1ae>
 810d0aa:	4b6e      	ldr	r3, [pc, #440]	; (810d264 <__ieee754_rem_pio2+0x34c>)
 810d0ac:	f10b 32ff 	add.w	r2, fp, #4294967295
 810d0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d0b4:	4543      	cmp	r3, r8
 810d0b6:	d006      	beq.n	810d0c6 <__ieee754_rem_pio2+0x1ae>
 810d0b8:	4622      	mov	r2, r4
 810d0ba:	462b      	mov	r3, r5
 810d0bc:	4630      	mov	r0, r6
 810d0be:	4639      	mov	r1, r7
 810d0c0:	f7f3 f96a 	bl	8100398 <__aeabi_dsub>
 810d0c4:	e00f      	b.n	810d0e6 <__ieee754_rem_pio2+0x1ce>
 810d0c6:	462b      	mov	r3, r5
 810d0c8:	4622      	mov	r2, r4
 810d0ca:	4630      	mov	r0, r6
 810d0cc:	4639      	mov	r1, r7
 810d0ce:	f7f3 f963 	bl	8100398 <__aeabi_dsub>
 810d0d2:	ea4f 5328 	mov.w	r3, r8, asr #20
 810d0d6:	9303      	str	r3, [sp, #12]
 810d0d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 810d0dc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 810d0e0:	f1b8 0f10 	cmp.w	r8, #16
 810d0e4:	dc02      	bgt.n	810d0ec <__ieee754_rem_pio2+0x1d4>
 810d0e6:	e9ca 0100 	strd	r0, r1, [sl]
 810d0ea:	e039      	b.n	810d160 <__ieee754_rem_pio2+0x248>
 810d0ec:	a34e      	add	r3, pc, #312	; (adr r3, 810d228 <__ieee754_rem_pio2+0x310>)
 810d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d0f2:	ec51 0b18 	vmov	r0, r1, d8
 810d0f6:	f7f3 fb07 	bl	8100708 <__aeabi_dmul>
 810d0fa:	4604      	mov	r4, r0
 810d0fc:	460d      	mov	r5, r1
 810d0fe:	4602      	mov	r2, r0
 810d100:	460b      	mov	r3, r1
 810d102:	4630      	mov	r0, r6
 810d104:	4639      	mov	r1, r7
 810d106:	f7f3 f947 	bl	8100398 <__aeabi_dsub>
 810d10a:	4602      	mov	r2, r0
 810d10c:	460b      	mov	r3, r1
 810d10e:	4680      	mov	r8, r0
 810d110:	4689      	mov	r9, r1
 810d112:	4630      	mov	r0, r6
 810d114:	4639      	mov	r1, r7
 810d116:	f7f3 f93f 	bl	8100398 <__aeabi_dsub>
 810d11a:	4622      	mov	r2, r4
 810d11c:	462b      	mov	r3, r5
 810d11e:	f7f3 f93b 	bl	8100398 <__aeabi_dsub>
 810d122:	a343      	add	r3, pc, #268	; (adr r3, 810d230 <__ieee754_rem_pio2+0x318>)
 810d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d128:	4604      	mov	r4, r0
 810d12a:	460d      	mov	r5, r1
 810d12c:	ec51 0b18 	vmov	r0, r1, d8
 810d130:	f7f3 faea 	bl	8100708 <__aeabi_dmul>
 810d134:	4622      	mov	r2, r4
 810d136:	462b      	mov	r3, r5
 810d138:	f7f3 f92e 	bl	8100398 <__aeabi_dsub>
 810d13c:	4602      	mov	r2, r0
 810d13e:	460b      	mov	r3, r1
 810d140:	4604      	mov	r4, r0
 810d142:	460d      	mov	r5, r1
 810d144:	4640      	mov	r0, r8
 810d146:	4649      	mov	r1, r9
 810d148:	f7f3 f926 	bl	8100398 <__aeabi_dsub>
 810d14c:	9a03      	ldr	r2, [sp, #12]
 810d14e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 810d152:	1ad3      	subs	r3, r2, r3
 810d154:	2b31      	cmp	r3, #49	; 0x31
 810d156:	dc24      	bgt.n	810d1a2 <__ieee754_rem_pio2+0x28a>
 810d158:	e9ca 0100 	strd	r0, r1, [sl]
 810d15c:	4646      	mov	r6, r8
 810d15e:	464f      	mov	r7, r9
 810d160:	e9da 8900 	ldrd	r8, r9, [sl]
 810d164:	4630      	mov	r0, r6
 810d166:	4642      	mov	r2, r8
 810d168:	464b      	mov	r3, r9
 810d16a:	4639      	mov	r1, r7
 810d16c:	f7f3 f914 	bl	8100398 <__aeabi_dsub>
 810d170:	462b      	mov	r3, r5
 810d172:	4622      	mov	r2, r4
 810d174:	f7f3 f910 	bl	8100398 <__aeabi_dsub>
 810d178:	9b02      	ldr	r3, [sp, #8]
 810d17a:	2b00      	cmp	r3, #0
 810d17c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810d180:	f6bf af0a 	bge.w	810cf98 <__ieee754_rem_pio2+0x80>
 810d184:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810d188:	f8ca 3004 	str.w	r3, [sl, #4]
 810d18c:	f8ca 8000 	str.w	r8, [sl]
 810d190:	f8ca 0008 	str.w	r0, [sl, #8]
 810d194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d198:	f8ca 300c 	str.w	r3, [sl, #12]
 810d19c:	f1cb 0b00 	rsb	fp, fp, #0
 810d1a0:	e6fa      	b.n	810cf98 <__ieee754_rem_pio2+0x80>
 810d1a2:	a327      	add	r3, pc, #156	; (adr r3, 810d240 <__ieee754_rem_pio2+0x328>)
 810d1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d1a8:	ec51 0b18 	vmov	r0, r1, d8
 810d1ac:	f7f3 faac 	bl	8100708 <__aeabi_dmul>
 810d1b0:	4604      	mov	r4, r0
 810d1b2:	460d      	mov	r5, r1
 810d1b4:	4602      	mov	r2, r0
 810d1b6:	460b      	mov	r3, r1
 810d1b8:	4640      	mov	r0, r8
 810d1ba:	4649      	mov	r1, r9
 810d1bc:	f7f3 f8ec 	bl	8100398 <__aeabi_dsub>
 810d1c0:	4602      	mov	r2, r0
 810d1c2:	460b      	mov	r3, r1
 810d1c4:	4606      	mov	r6, r0
 810d1c6:	460f      	mov	r7, r1
 810d1c8:	4640      	mov	r0, r8
 810d1ca:	4649      	mov	r1, r9
 810d1cc:	f7f3 f8e4 	bl	8100398 <__aeabi_dsub>
 810d1d0:	4622      	mov	r2, r4
 810d1d2:	462b      	mov	r3, r5
 810d1d4:	f7f3 f8e0 	bl	8100398 <__aeabi_dsub>
 810d1d8:	a31b      	add	r3, pc, #108	; (adr r3, 810d248 <__ieee754_rem_pio2+0x330>)
 810d1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d1de:	4604      	mov	r4, r0
 810d1e0:	460d      	mov	r5, r1
 810d1e2:	ec51 0b18 	vmov	r0, r1, d8
 810d1e6:	f7f3 fa8f 	bl	8100708 <__aeabi_dmul>
 810d1ea:	4622      	mov	r2, r4
 810d1ec:	462b      	mov	r3, r5
 810d1ee:	f7f3 f8d3 	bl	8100398 <__aeabi_dsub>
 810d1f2:	4604      	mov	r4, r0
 810d1f4:	460d      	mov	r5, r1
 810d1f6:	e75f      	b.n	810d0b8 <__ieee754_rem_pio2+0x1a0>
 810d1f8:	4b1b      	ldr	r3, [pc, #108]	; (810d268 <__ieee754_rem_pio2+0x350>)
 810d1fa:	4598      	cmp	r8, r3
 810d1fc:	dd36      	ble.n	810d26c <__ieee754_rem_pio2+0x354>
 810d1fe:	ee10 2a10 	vmov	r2, s0
 810d202:	462b      	mov	r3, r5
 810d204:	4620      	mov	r0, r4
 810d206:	4629      	mov	r1, r5
 810d208:	f7f3 f8c6 	bl	8100398 <__aeabi_dsub>
 810d20c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810d210:	e9ca 0100 	strd	r0, r1, [sl]
 810d214:	e694      	b.n	810cf40 <__ieee754_rem_pio2+0x28>
 810d216:	bf00      	nop
 810d218:	54400000 	.word	0x54400000
 810d21c:	3ff921fb 	.word	0x3ff921fb
 810d220:	1a626331 	.word	0x1a626331
 810d224:	3dd0b461 	.word	0x3dd0b461
 810d228:	1a600000 	.word	0x1a600000
 810d22c:	3dd0b461 	.word	0x3dd0b461
 810d230:	2e037073 	.word	0x2e037073
 810d234:	3ba3198a 	.word	0x3ba3198a
 810d238:	6dc9c883 	.word	0x6dc9c883
 810d23c:	3fe45f30 	.word	0x3fe45f30
 810d240:	2e000000 	.word	0x2e000000
 810d244:	3ba3198a 	.word	0x3ba3198a
 810d248:	252049c1 	.word	0x252049c1
 810d24c:	397b839a 	.word	0x397b839a
 810d250:	3fe921fb 	.word	0x3fe921fb
 810d254:	4002d97b 	.word	0x4002d97b
 810d258:	3ff921fb 	.word	0x3ff921fb
 810d25c:	413921fb 	.word	0x413921fb
 810d260:	3fe00000 	.word	0x3fe00000
 810d264:	0810eb70 	.word	0x0810eb70
 810d268:	7fefffff 	.word	0x7fefffff
 810d26c:	ea4f 5428 	mov.w	r4, r8, asr #20
 810d270:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 810d274:	ee10 0a10 	vmov	r0, s0
 810d278:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 810d27c:	ee10 6a10 	vmov	r6, s0
 810d280:	460f      	mov	r7, r1
 810d282:	f7f3 fcf1 	bl	8100c68 <__aeabi_d2iz>
 810d286:	f7f3 f9d5 	bl	8100634 <__aeabi_i2d>
 810d28a:	4602      	mov	r2, r0
 810d28c:	460b      	mov	r3, r1
 810d28e:	4630      	mov	r0, r6
 810d290:	4639      	mov	r1, r7
 810d292:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810d296:	f7f3 f87f 	bl	8100398 <__aeabi_dsub>
 810d29a:	4b22      	ldr	r3, [pc, #136]	; (810d324 <__ieee754_rem_pio2+0x40c>)
 810d29c:	2200      	movs	r2, #0
 810d29e:	f7f3 fa33 	bl	8100708 <__aeabi_dmul>
 810d2a2:	460f      	mov	r7, r1
 810d2a4:	4606      	mov	r6, r0
 810d2a6:	f7f3 fcdf 	bl	8100c68 <__aeabi_d2iz>
 810d2aa:	f7f3 f9c3 	bl	8100634 <__aeabi_i2d>
 810d2ae:	4602      	mov	r2, r0
 810d2b0:	460b      	mov	r3, r1
 810d2b2:	4630      	mov	r0, r6
 810d2b4:	4639      	mov	r1, r7
 810d2b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 810d2ba:	f7f3 f86d 	bl	8100398 <__aeabi_dsub>
 810d2be:	4b19      	ldr	r3, [pc, #100]	; (810d324 <__ieee754_rem_pio2+0x40c>)
 810d2c0:	2200      	movs	r2, #0
 810d2c2:	f7f3 fa21 	bl	8100708 <__aeabi_dmul>
 810d2c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810d2ca:	ad04      	add	r5, sp, #16
 810d2cc:	f04f 0803 	mov.w	r8, #3
 810d2d0:	46a9      	mov	r9, r5
 810d2d2:	2600      	movs	r6, #0
 810d2d4:	2700      	movs	r7, #0
 810d2d6:	4632      	mov	r2, r6
 810d2d8:	463b      	mov	r3, r7
 810d2da:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 810d2de:	46c3      	mov	fp, r8
 810d2e0:	3d08      	subs	r5, #8
 810d2e2:	f108 38ff 	add.w	r8, r8, #4294967295
 810d2e6:	f7f3 fc77 	bl	8100bd8 <__aeabi_dcmpeq>
 810d2ea:	2800      	cmp	r0, #0
 810d2ec:	d1f3      	bne.n	810d2d6 <__ieee754_rem_pio2+0x3be>
 810d2ee:	4b0e      	ldr	r3, [pc, #56]	; (810d328 <__ieee754_rem_pio2+0x410>)
 810d2f0:	9301      	str	r3, [sp, #4]
 810d2f2:	2302      	movs	r3, #2
 810d2f4:	9300      	str	r3, [sp, #0]
 810d2f6:	4622      	mov	r2, r4
 810d2f8:	465b      	mov	r3, fp
 810d2fa:	4651      	mov	r1, sl
 810d2fc:	4648      	mov	r0, r9
 810d2fe:	f000 f8df 	bl	810d4c0 <__kernel_rem_pio2>
 810d302:	9b02      	ldr	r3, [sp, #8]
 810d304:	2b00      	cmp	r3, #0
 810d306:	4683      	mov	fp, r0
 810d308:	f6bf ae46 	bge.w	810cf98 <__ieee754_rem_pio2+0x80>
 810d30c:	f8da 3004 	ldr.w	r3, [sl, #4]
 810d310:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810d314:	f8ca 3004 	str.w	r3, [sl, #4]
 810d318:	f8da 300c 	ldr.w	r3, [sl, #12]
 810d31c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810d320:	e73a      	b.n	810d198 <__ieee754_rem_pio2+0x280>
 810d322:	bf00      	nop
 810d324:	41700000 	.word	0x41700000
 810d328:	0810ebf0 	.word	0x0810ebf0
 810d32c:	00000000 	.word	0x00000000

0810d330 <__kernel_cos>:
 810d330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d334:	ec57 6b10 	vmov	r6, r7, d0
 810d338:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 810d33c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 810d340:	ed8d 1b00 	vstr	d1, [sp]
 810d344:	da07      	bge.n	810d356 <__kernel_cos+0x26>
 810d346:	ee10 0a10 	vmov	r0, s0
 810d34a:	4639      	mov	r1, r7
 810d34c:	f7f3 fc8c 	bl	8100c68 <__aeabi_d2iz>
 810d350:	2800      	cmp	r0, #0
 810d352:	f000 8088 	beq.w	810d466 <__kernel_cos+0x136>
 810d356:	4632      	mov	r2, r6
 810d358:	463b      	mov	r3, r7
 810d35a:	4630      	mov	r0, r6
 810d35c:	4639      	mov	r1, r7
 810d35e:	f7f3 f9d3 	bl	8100708 <__aeabi_dmul>
 810d362:	4b51      	ldr	r3, [pc, #324]	; (810d4a8 <__kernel_cos+0x178>)
 810d364:	2200      	movs	r2, #0
 810d366:	4604      	mov	r4, r0
 810d368:	460d      	mov	r5, r1
 810d36a:	f7f3 f9cd 	bl	8100708 <__aeabi_dmul>
 810d36e:	a340      	add	r3, pc, #256	; (adr r3, 810d470 <__kernel_cos+0x140>)
 810d370:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d374:	4682      	mov	sl, r0
 810d376:	468b      	mov	fp, r1
 810d378:	4620      	mov	r0, r4
 810d37a:	4629      	mov	r1, r5
 810d37c:	f7f3 f9c4 	bl	8100708 <__aeabi_dmul>
 810d380:	a33d      	add	r3, pc, #244	; (adr r3, 810d478 <__kernel_cos+0x148>)
 810d382:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d386:	f7f3 f809 	bl	810039c <__adddf3>
 810d38a:	4622      	mov	r2, r4
 810d38c:	462b      	mov	r3, r5
 810d38e:	f7f3 f9bb 	bl	8100708 <__aeabi_dmul>
 810d392:	a33b      	add	r3, pc, #236	; (adr r3, 810d480 <__kernel_cos+0x150>)
 810d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d398:	f7f2 fffe 	bl	8100398 <__aeabi_dsub>
 810d39c:	4622      	mov	r2, r4
 810d39e:	462b      	mov	r3, r5
 810d3a0:	f7f3 f9b2 	bl	8100708 <__aeabi_dmul>
 810d3a4:	a338      	add	r3, pc, #224	; (adr r3, 810d488 <__kernel_cos+0x158>)
 810d3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d3aa:	f7f2 fff7 	bl	810039c <__adddf3>
 810d3ae:	4622      	mov	r2, r4
 810d3b0:	462b      	mov	r3, r5
 810d3b2:	f7f3 f9a9 	bl	8100708 <__aeabi_dmul>
 810d3b6:	a336      	add	r3, pc, #216	; (adr r3, 810d490 <__kernel_cos+0x160>)
 810d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d3bc:	f7f2 ffec 	bl	8100398 <__aeabi_dsub>
 810d3c0:	4622      	mov	r2, r4
 810d3c2:	462b      	mov	r3, r5
 810d3c4:	f7f3 f9a0 	bl	8100708 <__aeabi_dmul>
 810d3c8:	a333      	add	r3, pc, #204	; (adr r3, 810d498 <__kernel_cos+0x168>)
 810d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d3ce:	f7f2 ffe5 	bl	810039c <__adddf3>
 810d3d2:	4622      	mov	r2, r4
 810d3d4:	462b      	mov	r3, r5
 810d3d6:	f7f3 f997 	bl	8100708 <__aeabi_dmul>
 810d3da:	4622      	mov	r2, r4
 810d3dc:	462b      	mov	r3, r5
 810d3de:	f7f3 f993 	bl	8100708 <__aeabi_dmul>
 810d3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d3e6:	4604      	mov	r4, r0
 810d3e8:	460d      	mov	r5, r1
 810d3ea:	4630      	mov	r0, r6
 810d3ec:	4639      	mov	r1, r7
 810d3ee:	f7f3 f98b 	bl	8100708 <__aeabi_dmul>
 810d3f2:	460b      	mov	r3, r1
 810d3f4:	4602      	mov	r2, r0
 810d3f6:	4629      	mov	r1, r5
 810d3f8:	4620      	mov	r0, r4
 810d3fa:	f7f2 ffcd 	bl	8100398 <__aeabi_dsub>
 810d3fe:	4b2b      	ldr	r3, [pc, #172]	; (810d4ac <__kernel_cos+0x17c>)
 810d400:	4598      	cmp	r8, r3
 810d402:	4606      	mov	r6, r0
 810d404:	460f      	mov	r7, r1
 810d406:	dc10      	bgt.n	810d42a <__kernel_cos+0xfa>
 810d408:	4602      	mov	r2, r0
 810d40a:	460b      	mov	r3, r1
 810d40c:	4650      	mov	r0, sl
 810d40e:	4659      	mov	r1, fp
 810d410:	f7f2 ffc2 	bl	8100398 <__aeabi_dsub>
 810d414:	460b      	mov	r3, r1
 810d416:	4926      	ldr	r1, [pc, #152]	; (810d4b0 <__kernel_cos+0x180>)
 810d418:	4602      	mov	r2, r0
 810d41a:	2000      	movs	r0, #0
 810d41c:	f7f2 ffbc 	bl	8100398 <__aeabi_dsub>
 810d420:	ec41 0b10 	vmov	d0, r0, r1
 810d424:	b003      	add	sp, #12
 810d426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d42a:	4b22      	ldr	r3, [pc, #136]	; (810d4b4 <__kernel_cos+0x184>)
 810d42c:	4920      	ldr	r1, [pc, #128]	; (810d4b0 <__kernel_cos+0x180>)
 810d42e:	4598      	cmp	r8, r3
 810d430:	bfcc      	ite	gt
 810d432:	4d21      	ldrgt	r5, [pc, #132]	; (810d4b8 <__kernel_cos+0x188>)
 810d434:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 810d438:	2400      	movs	r4, #0
 810d43a:	4622      	mov	r2, r4
 810d43c:	462b      	mov	r3, r5
 810d43e:	2000      	movs	r0, #0
 810d440:	f7f2 ffaa 	bl	8100398 <__aeabi_dsub>
 810d444:	4622      	mov	r2, r4
 810d446:	4680      	mov	r8, r0
 810d448:	4689      	mov	r9, r1
 810d44a:	462b      	mov	r3, r5
 810d44c:	4650      	mov	r0, sl
 810d44e:	4659      	mov	r1, fp
 810d450:	f7f2 ffa2 	bl	8100398 <__aeabi_dsub>
 810d454:	4632      	mov	r2, r6
 810d456:	463b      	mov	r3, r7
 810d458:	f7f2 ff9e 	bl	8100398 <__aeabi_dsub>
 810d45c:	4602      	mov	r2, r0
 810d45e:	460b      	mov	r3, r1
 810d460:	4640      	mov	r0, r8
 810d462:	4649      	mov	r1, r9
 810d464:	e7da      	b.n	810d41c <__kernel_cos+0xec>
 810d466:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 810d4a0 <__kernel_cos+0x170>
 810d46a:	e7db      	b.n	810d424 <__kernel_cos+0xf4>
 810d46c:	f3af 8000 	nop.w
 810d470:	be8838d4 	.word	0xbe8838d4
 810d474:	bda8fae9 	.word	0xbda8fae9
 810d478:	bdb4b1c4 	.word	0xbdb4b1c4
 810d47c:	3e21ee9e 	.word	0x3e21ee9e
 810d480:	809c52ad 	.word	0x809c52ad
 810d484:	3e927e4f 	.word	0x3e927e4f
 810d488:	19cb1590 	.word	0x19cb1590
 810d48c:	3efa01a0 	.word	0x3efa01a0
 810d490:	16c15177 	.word	0x16c15177
 810d494:	3f56c16c 	.word	0x3f56c16c
 810d498:	5555554c 	.word	0x5555554c
 810d49c:	3fa55555 	.word	0x3fa55555
 810d4a0:	00000000 	.word	0x00000000
 810d4a4:	3ff00000 	.word	0x3ff00000
 810d4a8:	3fe00000 	.word	0x3fe00000
 810d4ac:	3fd33332 	.word	0x3fd33332
 810d4b0:	3ff00000 	.word	0x3ff00000
 810d4b4:	3fe90000 	.word	0x3fe90000
 810d4b8:	3fd20000 	.word	0x3fd20000
 810d4bc:	00000000 	.word	0x00000000

0810d4c0 <__kernel_rem_pio2>:
 810d4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d4c4:	ed2d 8b02 	vpush	{d8}
 810d4c8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 810d4cc:	f112 0f14 	cmn.w	r2, #20
 810d4d0:	9308      	str	r3, [sp, #32]
 810d4d2:	9101      	str	r1, [sp, #4]
 810d4d4:	4bc6      	ldr	r3, [pc, #792]	; (810d7f0 <__kernel_rem_pio2+0x330>)
 810d4d6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 810d4d8:	9009      	str	r0, [sp, #36]	; 0x24
 810d4da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810d4de:	9304      	str	r3, [sp, #16]
 810d4e0:	9b08      	ldr	r3, [sp, #32]
 810d4e2:	f103 33ff 	add.w	r3, r3, #4294967295
 810d4e6:	bfa8      	it	ge
 810d4e8:	1ed4      	subge	r4, r2, #3
 810d4ea:	9306      	str	r3, [sp, #24]
 810d4ec:	bfb2      	itee	lt
 810d4ee:	2400      	movlt	r4, #0
 810d4f0:	2318      	movge	r3, #24
 810d4f2:	fb94 f4f3 	sdivge	r4, r4, r3
 810d4f6:	f06f 0317 	mvn.w	r3, #23
 810d4fa:	fb04 3303 	mla	r3, r4, r3, r3
 810d4fe:	eb03 0a02 	add.w	sl, r3, r2
 810d502:	9b04      	ldr	r3, [sp, #16]
 810d504:	9a06      	ldr	r2, [sp, #24]
 810d506:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 810d7e0 <__kernel_rem_pio2+0x320>
 810d50a:	eb03 0802 	add.w	r8, r3, r2
 810d50e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 810d510:	1aa7      	subs	r7, r4, r2
 810d512:	ae20      	add	r6, sp, #128	; 0x80
 810d514:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 810d518:	2500      	movs	r5, #0
 810d51a:	4545      	cmp	r5, r8
 810d51c:	dd18      	ble.n	810d550 <__kernel_rem_pio2+0x90>
 810d51e:	9b08      	ldr	r3, [sp, #32]
 810d520:	f8dd 8018 	ldr.w	r8, [sp, #24]
 810d524:	aa20      	add	r2, sp, #128	; 0x80
 810d526:	ed9f 8bae 	vldr	d8, [pc, #696]	; 810d7e0 <__kernel_rem_pio2+0x320>
 810d52a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 810d52e:	f1c3 0301 	rsb	r3, r3, #1
 810d532:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 810d536:	9307      	str	r3, [sp, #28]
 810d538:	9b07      	ldr	r3, [sp, #28]
 810d53a:	9a04      	ldr	r2, [sp, #16]
 810d53c:	4443      	add	r3, r8
 810d53e:	429a      	cmp	r2, r3
 810d540:	db2f      	blt.n	810d5a2 <__kernel_rem_pio2+0xe2>
 810d542:	ed8d 8b02 	vstr	d8, [sp, #8]
 810d546:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 810d54a:	462f      	mov	r7, r5
 810d54c:	2600      	movs	r6, #0
 810d54e:	e01b      	b.n	810d588 <__kernel_rem_pio2+0xc8>
 810d550:	42ef      	cmn	r7, r5
 810d552:	d407      	bmi.n	810d564 <__kernel_rem_pio2+0xa4>
 810d554:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 810d558:	f7f3 f86c 	bl	8100634 <__aeabi_i2d>
 810d55c:	e8e6 0102 	strd	r0, r1, [r6], #8
 810d560:	3501      	adds	r5, #1
 810d562:	e7da      	b.n	810d51a <__kernel_rem_pio2+0x5a>
 810d564:	ec51 0b18 	vmov	r0, r1, d8
 810d568:	e7f8      	b.n	810d55c <__kernel_rem_pio2+0x9c>
 810d56a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d56e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 810d572:	f7f3 f8c9 	bl	8100708 <__aeabi_dmul>
 810d576:	4602      	mov	r2, r0
 810d578:	460b      	mov	r3, r1
 810d57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d57e:	f7f2 ff0d 	bl	810039c <__adddf3>
 810d582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d586:	3601      	adds	r6, #1
 810d588:	9b06      	ldr	r3, [sp, #24]
 810d58a:	429e      	cmp	r6, r3
 810d58c:	f1a7 0708 	sub.w	r7, r7, #8
 810d590:	ddeb      	ble.n	810d56a <__kernel_rem_pio2+0xaa>
 810d592:	ed9d 7b02 	vldr	d7, [sp, #8]
 810d596:	3508      	adds	r5, #8
 810d598:	ecab 7b02 	vstmia	fp!, {d7}
 810d59c:	f108 0801 	add.w	r8, r8, #1
 810d5a0:	e7ca      	b.n	810d538 <__kernel_rem_pio2+0x78>
 810d5a2:	9b04      	ldr	r3, [sp, #16]
 810d5a4:	aa0c      	add	r2, sp, #48	; 0x30
 810d5a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d5aa:	930b      	str	r3, [sp, #44]	; 0x2c
 810d5ac:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 810d5ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 810d5b2:	9c04      	ldr	r4, [sp, #16]
 810d5b4:	930a      	str	r3, [sp, #40]	; 0x28
 810d5b6:	ab98      	add	r3, sp, #608	; 0x260
 810d5b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810d5bc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 810d5c0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 810d5c4:	f8cd b008 	str.w	fp, [sp, #8]
 810d5c8:	4625      	mov	r5, r4
 810d5ca:	2d00      	cmp	r5, #0
 810d5cc:	dc78      	bgt.n	810d6c0 <__kernel_rem_pio2+0x200>
 810d5ce:	ec47 6b10 	vmov	d0, r6, r7
 810d5d2:	4650      	mov	r0, sl
 810d5d4:	f000 fbf4 	bl	810ddc0 <scalbn>
 810d5d8:	ec57 6b10 	vmov	r6, r7, d0
 810d5dc:	2200      	movs	r2, #0
 810d5de:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 810d5e2:	ee10 0a10 	vmov	r0, s0
 810d5e6:	4639      	mov	r1, r7
 810d5e8:	f7f3 f88e 	bl	8100708 <__aeabi_dmul>
 810d5ec:	ec41 0b10 	vmov	d0, r0, r1
 810d5f0:	f000 fb66 	bl	810dcc0 <floor>
 810d5f4:	4b7f      	ldr	r3, [pc, #508]	; (810d7f4 <__kernel_rem_pio2+0x334>)
 810d5f6:	ec51 0b10 	vmov	r0, r1, d0
 810d5fa:	2200      	movs	r2, #0
 810d5fc:	f7f3 f884 	bl	8100708 <__aeabi_dmul>
 810d600:	4602      	mov	r2, r0
 810d602:	460b      	mov	r3, r1
 810d604:	4630      	mov	r0, r6
 810d606:	4639      	mov	r1, r7
 810d608:	f7f2 fec6 	bl	8100398 <__aeabi_dsub>
 810d60c:	460f      	mov	r7, r1
 810d60e:	4606      	mov	r6, r0
 810d610:	f7f3 fb2a 	bl	8100c68 <__aeabi_d2iz>
 810d614:	9007      	str	r0, [sp, #28]
 810d616:	f7f3 f80d 	bl	8100634 <__aeabi_i2d>
 810d61a:	4602      	mov	r2, r0
 810d61c:	460b      	mov	r3, r1
 810d61e:	4630      	mov	r0, r6
 810d620:	4639      	mov	r1, r7
 810d622:	f7f2 feb9 	bl	8100398 <__aeabi_dsub>
 810d626:	f1ba 0f00 	cmp.w	sl, #0
 810d62a:	4606      	mov	r6, r0
 810d62c:	460f      	mov	r7, r1
 810d62e:	dd70      	ble.n	810d712 <__kernel_rem_pio2+0x252>
 810d630:	1e62      	subs	r2, r4, #1
 810d632:	ab0c      	add	r3, sp, #48	; 0x30
 810d634:	9d07      	ldr	r5, [sp, #28]
 810d636:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 810d63a:	f1ca 0118 	rsb	r1, sl, #24
 810d63e:	fa40 f301 	asr.w	r3, r0, r1
 810d642:	441d      	add	r5, r3
 810d644:	408b      	lsls	r3, r1
 810d646:	1ac0      	subs	r0, r0, r3
 810d648:	ab0c      	add	r3, sp, #48	; 0x30
 810d64a:	9507      	str	r5, [sp, #28]
 810d64c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 810d650:	f1ca 0317 	rsb	r3, sl, #23
 810d654:	fa40 f303 	asr.w	r3, r0, r3
 810d658:	9302      	str	r3, [sp, #8]
 810d65a:	9b02      	ldr	r3, [sp, #8]
 810d65c:	2b00      	cmp	r3, #0
 810d65e:	dd66      	ble.n	810d72e <__kernel_rem_pio2+0x26e>
 810d660:	9b07      	ldr	r3, [sp, #28]
 810d662:	2200      	movs	r2, #0
 810d664:	3301      	adds	r3, #1
 810d666:	9307      	str	r3, [sp, #28]
 810d668:	4615      	mov	r5, r2
 810d66a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 810d66e:	4294      	cmp	r4, r2
 810d670:	f300 8099 	bgt.w	810d7a6 <__kernel_rem_pio2+0x2e6>
 810d674:	f1ba 0f00 	cmp.w	sl, #0
 810d678:	dd07      	ble.n	810d68a <__kernel_rem_pio2+0x1ca>
 810d67a:	f1ba 0f01 	cmp.w	sl, #1
 810d67e:	f000 80a5 	beq.w	810d7cc <__kernel_rem_pio2+0x30c>
 810d682:	f1ba 0f02 	cmp.w	sl, #2
 810d686:	f000 80c1 	beq.w	810d80c <__kernel_rem_pio2+0x34c>
 810d68a:	9b02      	ldr	r3, [sp, #8]
 810d68c:	2b02      	cmp	r3, #2
 810d68e:	d14e      	bne.n	810d72e <__kernel_rem_pio2+0x26e>
 810d690:	4632      	mov	r2, r6
 810d692:	463b      	mov	r3, r7
 810d694:	4958      	ldr	r1, [pc, #352]	; (810d7f8 <__kernel_rem_pio2+0x338>)
 810d696:	2000      	movs	r0, #0
 810d698:	f7f2 fe7e 	bl	8100398 <__aeabi_dsub>
 810d69c:	4606      	mov	r6, r0
 810d69e:	460f      	mov	r7, r1
 810d6a0:	2d00      	cmp	r5, #0
 810d6a2:	d044      	beq.n	810d72e <__kernel_rem_pio2+0x26e>
 810d6a4:	4650      	mov	r0, sl
 810d6a6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 810d7e8 <__kernel_rem_pio2+0x328>
 810d6aa:	f000 fb89 	bl	810ddc0 <scalbn>
 810d6ae:	4630      	mov	r0, r6
 810d6b0:	4639      	mov	r1, r7
 810d6b2:	ec53 2b10 	vmov	r2, r3, d0
 810d6b6:	f7f2 fe6f 	bl	8100398 <__aeabi_dsub>
 810d6ba:	4606      	mov	r6, r0
 810d6bc:	460f      	mov	r7, r1
 810d6be:	e036      	b.n	810d72e <__kernel_rem_pio2+0x26e>
 810d6c0:	4b4e      	ldr	r3, [pc, #312]	; (810d7fc <__kernel_rem_pio2+0x33c>)
 810d6c2:	2200      	movs	r2, #0
 810d6c4:	4630      	mov	r0, r6
 810d6c6:	4639      	mov	r1, r7
 810d6c8:	f7f3 f81e 	bl	8100708 <__aeabi_dmul>
 810d6cc:	f7f3 facc 	bl	8100c68 <__aeabi_d2iz>
 810d6d0:	f7f2 ffb0 	bl	8100634 <__aeabi_i2d>
 810d6d4:	4b4a      	ldr	r3, [pc, #296]	; (810d800 <__kernel_rem_pio2+0x340>)
 810d6d6:	2200      	movs	r2, #0
 810d6d8:	4680      	mov	r8, r0
 810d6da:	4689      	mov	r9, r1
 810d6dc:	f7f3 f814 	bl	8100708 <__aeabi_dmul>
 810d6e0:	4602      	mov	r2, r0
 810d6e2:	460b      	mov	r3, r1
 810d6e4:	4630      	mov	r0, r6
 810d6e6:	4639      	mov	r1, r7
 810d6e8:	f7f2 fe56 	bl	8100398 <__aeabi_dsub>
 810d6ec:	f7f3 fabc 	bl	8100c68 <__aeabi_d2iz>
 810d6f0:	9b02      	ldr	r3, [sp, #8]
 810d6f2:	f843 0b04 	str.w	r0, [r3], #4
 810d6f6:	3d01      	subs	r5, #1
 810d6f8:	9302      	str	r3, [sp, #8]
 810d6fa:	ab70      	add	r3, sp, #448	; 0x1c0
 810d6fc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d700:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d704:	4640      	mov	r0, r8
 810d706:	4649      	mov	r1, r9
 810d708:	f7f2 fe48 	bl	810039c <__adddf3>
 810d70c:	4606      	mov	r6, r0
 810d70e:	460f      	mov	r7, r1
 810d710:	e75b      	b.n	810d5ca <__kernel_rem_pio2+0x10a>
 810d712:	d105      	bne.n	810d720 <__kernel_rem_pio2+0x260>
 810d714:	1e63      	subs	r3, r4, #1
 810d716:	aa0c      	add	r2, sp, #48	; 0x30
 810d718:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 810d71c:	15c3      	asrs	r3, r0, #23
 810d71e:	e79b      	b.n	810d658 <__kernel_rem_pio2+0x198>
 810d720:	4b38      	ldr	r3, [pc, #224]	; (810d804 <__kernel_rem_pio2+0x344>)
 810d722:	2200      	movs	r2, #0
 810d724:	f7f3 fa76 	bl	8100c14 <__aeabi_dcmpge>
 810d728:	2800      	cmp	r0, #0
 810d72a:	d139      	bne.n	810d7a0 <__kernel_rem_pio2+0x2e0>
 810d72c:	9002      	str	r0, [sp, #8]
 810d72e:	2200      	movs	r2, #0
 810d730:	2300      	movs	r3, #0
 810d732:	4630      	mov	r0, r6
 810d734:	4639      	mov	r1, r7
 810d736:	f7f3 fa4f 	bl	8100bd8 <__aeabi_dcmpeq>
 810d73a:	2800      	cmp	r0, #0
 810d73c:	f000 80b4 	beq.w	810d8a8 <__kernel_rem_pio2+0x3e8>
 810d740:	f104 3bff 	add.w	fp, r4, #4294967295
 810d744:	465b      	mov	r3, fp
 810d746:	2200      	movs	r2, #0
 810d748:	9904      	ldr	r1, [sp, #16]
 810d74a:	428b      	cmp	r3, r1
 810d74c:	da65      	bge.n	810d81a <__kernel_rem_pio2+0x35a>
 810d74e:	2a00      	cmp	r2, #0
 810d750:	d07b      	beq.n	810d84a <__kernel_rem_pio2+0x38a>
 810d752:	ab0c      	add	r3, sp, #48	; 0x30
 810d754:	f1aa 0a18 	sub.w	sl, sl, #24
 810d758:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 810d75c:	2b00      	cmp	r3, #0
 810d75e:	f000 80a0 	beq.w	810d8a2 <__kernel_rem_pio2+0x3e2>
 810d762:	ed9f 0b21 	vldr	d0, [pc, #132]	; 810d7e8 <__kernel_rem_pio2+0x328>
 810d766:	4650      	mov	r0, sl
 810d768:	f000 fb2a 	bl	810ddc0 <scalbn>
 810d76c:	4f23      	ldr	r7, [pc, #140]	; (810d7fc <__kernel_rem_pio2+0x33c>)
 810d76e:	ec55 4b10 	vmov	r4, r5, d0
 810d772:	46d8      	mov	r8, fp
 810d774:	2600      	movs	r6, #0
 810d776:	f1b8 0f00 	cmp.w	r8, #0
 810d77a:	f280 80cf 	bge.w	810d91c <__kernel_rem_pio2+0x45c>
 810d77e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 810d7e0 <__kernel_rem_pio2+0x320>
 810d782:	465f      	mov	r7, fp
 810d784:	f04f 0800 	mov.w	r8, #0
 810d788:	2f00      	cmp	r7, #0
 810d78a:	f2c0 80fd 	blt.w	810d988 <__kernel_rem_pio2+0x4c8>
 810d78e:	ab70      	add	r3, sp, #448	; 0x1c0
 810d790:	f8df a074 	ldr.w	sl, [pc, #116]	; 810d808 <__kernel_rem_pio2+0x348>
 810d794:	ec55 4b18 	vmov	r4, r5, d8
 810d798:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 810d79c:	2600      	movs	r6, #0
 810d79e:	e0e5      	b.n	810d96c <__kernel_rem_pio2+0x4ac>
 810d7a0:	2302      	movs	r3, #2
 810d7a2:	9302      	str	r3, [sp, #8]
 810d7a4:	e75c      	b.n	810d660 <__kernel_rem_pio2+0x1a0>
 810d7a6:	f8db 3000 	ldr.w	r3, [fp]
 810d7aa:	b955      	cbnz	r5, 810d7c2 <__kernel_rem_pio2+0x302>
 810d7ac:	b123      	cbz	r3, 810d7b8 <__kernel_rem_pio2+0x2f8>
 810d7ae:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 810d7b2:	f8cb 3000 	str.w	r3, [fp]
 810d7b6:	2301      	movs	r3, #1
 810d7b8:	3201      	adds	r2, #1
 810d7ba:	f10b 0b04 	add.w	fp, fp, #4
 810d7be:	461d      	mov	r5, r3
 810d7c0:	e755      	b.n	810d66e <__kernel_rem_pio2+0x1ae>
 810d7c2:	1acb      	subs	r3, r1, r3
 810d7c4:	f8cb 3000 	str.w	r3, [fp]
 810d7c8:	462b      	mov	r3, r5
 810d7ca:	e7f5      	b.n	810d7b8 <__kernel_rem_pio2+0x2f8>
 810d7cc:	1e62      	subs	r2, r4, #1
 810d7ce:	ab0c      	add	r3, sp, #48	; 0x30
 810d7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d7d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 810d7d8:	a90c      	add	r1, sp, #48	; 0x30
 810d7da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 810d7de:	e754      	b.n	810d68a <__kernel_rem_pio2+0x1ca>
	...
 810d7ec:	3ff00000 	.word	0x3ff00000
 810d7f0:	0810ed38 	.word	0x0810ed38
 810d7f4:	40200000 	.word	0x40200000
 810d7f8:	3ff00000 	.word	0x3ff00000
 810d7fc:	3e700000 	.word	0x3e700000
 810d800:	41700000 	.word	0x41700000
 810d804:	3fe00000 	.word	0x3fe00000
 810d808:	0810ecf8 	.word	0x0810ecf8
 810d80c:	1e62      	subs	r2, r4, #1
 810d80e:	ab0c      	add	r3, sp, #48	; 0x30
 810d810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d814:	f3c3 0315 	ubfx	r3, r3, #0, #22
 810d818:	e7de      	b.n	810d7d8 <__kernel_rem_pio2+0x318>
 810d81a:	a90c      	add	r1, sp, #48	; 0x30
 810d81c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 810d820:	3b01      	subs	r3, #1
 810d822:	430a      	orrs	r2, r1
 810d824:	e790      	b.n	810d748 <__kernel_rem_pio2+0x288>
 810d826:	3301      	adds	r3, #1
 810d828:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 810d82c:	2900      	cmp	r1, #0
 810d82e:	d0fa      	beq.n	810d826 <__kernel_rem_pio2+0x366>
 810d830:	9a08      	ldr	r2, [sp, #32]
 810d832:	18e3      	adds	r3, r4, r3
 810d834:	18a6      	adds	r6, r4, r2
 810d836:	aa20      	add	r2, sp, #128	; 0x80
 810d838:	1c65      	adds	r5, r4, #1
 810d83a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 810d83e:	9302      	str	r3, [sp, #8]
 810d840:	9b02      	ldr	r3, [sp, #8]
 810d842:	42ab      	cmp	r3, r5
 810d844:	da04      	bge.n	810d850 <__kernel_rem_pio2+0x390>
 810d846:	461c      	mov	r4, r3
 810d848:	e6b5      	b.n	810d5b6 <__kernel_rem_pio2+0xf6>
 810d84a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d84c:	2301      	movs	r3, #1
 810d84e:	e7eb      	b.n	810d828 <__kernel_rem_pio2+0x368>
 810d850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d852:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810d856:	f7f2 feed 	bl	8100634 <__aeabi_i2d>
 810d85a:	e8e6 0102 	strd	r0, r1, [r6], #8
 810d85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d860:	46b3      	mov	fp, r6
 810d862:	461c      	mov	r4, r3
 810d864:	2700      	movs	r7, #0
 810d866:	f04f 0800 	mov.w	r8, #0
 810d86a:	f04f 0900 	mov.w	r9, #0
 810d86e:	9b06      	ldr	r3, [sp, #24]
 810d870:	429f      	cmp	r7, r3
 810d872:	dd06      	ble.n	810d882 <__kernel_rem_pio2+0x3c2>
 810d874:	ab70      	add	r3, sp, #448	; 0x1c0
 810d876:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d87a:	e9c3 8900 	strd	r8, r9, [r3]
 810d87e:	3501      	adds	r5, #1
 810d880:	e7de      	b.n	810d840 <__kernel_rem_pio2+0x380>
 810d882:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 810d886:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 810d88a:	f7f2 ff3d 	bl	8100708 <__aeabi_dmul>
 810d88e:	4602      	mov	r2, r0
 810d890:	460b      	mov	r3, r1
 810d892:	4640      	mov	r0, r8
 810d894:	4649      	mov	r1, r9
 810d896:	f7f2 fd81 	bl	810039c <__adddf3>
 810d89a:	3701      	adds	r7, #1
 810d89c:	4680      	mov	r8, r0
 810d89e:	4689      	mov	r9, r1
 810d8a0:	e7e5      	b.n	810d86e <__kernel_rem_pio2+0x3ae>
 810d8a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 810d8a6:	e754      	b.n	810d752 <__kernel_rem_pio2+0x292>
 810d8a8:	ec47 6b10 	vmov	d0, r6, r7
 810d8ac:	f1ca 0000 	rsb	r0, sl, #0
 810d8b0:	f000 fa86 	bl	810ddc0 <scalbn>
 810d8b4:	ec57 6b10 	vmov	r6, r7, d0
 810d8b8:	4b9f      	ldr	r3, [pc, #636]	; (810db38 <__kernel_rem_pio2+0x678>)
 810d8ba:	ee10 0a10 	vmov	r0, s0
 810d8be:	2200      	movs	r2, #0
 810d8c0:	4639      	mov	r1, r7
 810d8c2:	f7f3 f9a7 	bl	8100c14 <__aeabi_dcmpge>
 810d8c6:	b300      	cbz	r0, 810d90a <__kernel_rem_pio2+0x44a>
 810d8c8:	4b9c      	ldr	r3, [pc, #624]	; (810db3c <__kernel_rem_pio2+0x67c>)
 810d8ca:	2200      	movs	r2, #0
 810d8cc:	4630      	mov	r0, r6
 810d8ce:	4639      	mov	r1, r7
 810d8d0:	f7f2 ff1a 	bl	8100708 <__aeabi_dmul>
 810d8d4:	f7f3 f9c8 	bl	8100c68 <__aeabi_d2iz>
 810d8d8:	4605      	mov	r5, r0
 810d8da:	f7f2 feab 	bl	8100634 <__aeabi_i2d>
 810d8de:	4b96      	ldr	r3, [pc, #600]	; (810db38 <__kernel_rem_pio2+0x678>)
 810d8e0:	2200      	movs	r2, #0
 810d8e2:	f7f2 ff11 	bl	8100708 <__aeabi_dmul>
 810d8e6:	460b      	mov	r3, r1
 810d8e8:	4602      	mov	r2, r0
 810d8ea:	4639      	mov	r1, r7
 810d8ec:	4630      	mov	r0, r6
 810d8ee:	f7f2 fd53 	bl	8100398 <__aeabi_dsub>
 810d8f2:	f7f3 f9b9 	bl	8100c68 <__aeabi_d2iz>
 810d8f6:	f104 0b01 	add.w	fp, r4, #1
 810d8fa:	ab0c      	add	r3, sp, #48	; 0x30
 810d8fc:	f10a 0a18 	add.w	sl, sl, #24
 810d900:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 810d904:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 810d908:	e72b      	b.n	810d762 <__kernel_rem_pio2+0x2a2>
 810d90a:	4630      	mov	r0, r6
 810d90c:	4639      	mov	r1, r7
 810d90e:	f7f3 f9ab 	bl	8100c68 <__aeabi_d2iz>
 810d912:	ab0c      	add	r3, sp, #48	; 0x30
 810d914:	46a3      	mov	fp, r4
 810d916:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 810d91a:	e722      	b.n	810d762 <__kernel_rem_pio2+0x2a2>
 810d91c:	ab70      	add	r3, sp, #448	; 0x1c0
 810d91e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 810d922:	ab0c      	add	r3, sp, #48	; 0x30
 810d924:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 810d928:	f7f2 fe84 	bl	8100634 <__aeabi_i2d>
 810d92c:	4622      	mov	r2, r4
 810d92e:	462b      	mov	r3, r5
 810d930:	f7f2 feea 	bl	8100708 <__aeabi_dmul>
 810d934:	4632      	mov	r2, r6
 810d936:	e9c9 0100 	strd	r0, r1, [r9]
 810d93a:	463b      	mov	r3, r7
 810d93c:	4620      	mov	r0, r4
 810d93e:	4629      	mov	r1, r5
 810d940:	f7f2 fee2 	bl	8100708 <__aeabi_dmul>
 810d944:	f108 38ff 	add.w	r8, r8, #4294967295
 810d948:	4604      	mov	r4, r0
 810d94a:	460d      	mov	r5, r1
 810d94c:	e713      	b.n	810d776 <__kernel_rem_pio2+0x2b6>
 810d94e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 810d952:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 810d956:	f7f2 fed7 	bl	8100708 <__aeabi_dmul>
 810d95a:	4602      	mov	r2, r0
 810d95c:	460b      	mov	r3, r1
 810d95e:	4620      	mov	r0, r4
 810d960:	4629      	mov	r1, r5
 810d962:	f7f2 fd1b 	bl	810039c <__adddf3>
 810d966:	3601      	adds	r6, #1
 810d968:	4604      	mov	r4, r0
 810d96a:	460d      	mov	r5, r1
 810d96c:	9b04      	ldr	r3, [sp, #16]
 810d96e:	429e      	cmp	r6, r3
 810d970:	dc01      	bgt.n	810d976 <__kernel_rem_pio2+0x4b6>
 810d972:	45b0      	cmp	r8, r6
 810d974:	daeb      	bge.n	810d94e <__kernel_rem_pio2+0x48e>
 810d976:	ab48      	add	r3, sp, #288	; 0x120
 810d978:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810d97c:	e9c3 4500 	strd	r4, r5, [r3]
 810d980:	3f01      	subs	r7, #1
 810d982:	f108 0801 	add.w	r8, r8, #1
 810d986:	e6ff      	b.n	810d788 <__kernel_rem_pio2+0x2c8>
 810d988:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 810d98a:	2b02      	cmp	r3, #2
 810d98c:	dc0b      	bgt.n	810d9a6 <__kernel_rem_pio2+0x4e6>
 810d98e:	2b00      	cmp	r3, #0
 810d990:	dc6e      	bgt.n	810da70 <__kernel_rem_pio2+0x5b0>
 810d992:	d045      	beq.n	810da20 <__kernel_rem_pio2+0x560>
 810d994:	9b07      	ldr	r3, [sp, #28]
 810d996:	f003 0007 	and.w	r0, r3, #7
 810d99a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 810d99e:	ecbd 8b02 	vpop	{d8}
 810d9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d9a6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 810d9a8:	2b03      	cmp	r3, #3
 810d9aa:	d1f3      	bne.n	810d994 <__kernel_rem_pio2+0x4d4>
 810d9ac:	ab48      	add	r3, sp, #288	; 0x120
 810d9ae:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 810d9b2:	46d0      	mov	r8, sl
 810d9b4:	46d9      	mov	r9, fp
 810d9b6:	f1b9 0f00 	cmp.w	r9, #0
 810d9ba:	f1a8 0808 	sub.w	r8, r8, #8
 810d9be:	dc64      	bgt.n	810da8a <__kernel_rem_pio2+0x5ca>
 810d9c0:	465c      	mov	r4, fp
 810d9c2:	2c01      	cmp	r4, #1
 810d9c4:	f1aa 0a08 	sub.w	sl, sl, #8
 810d9c8:	dc7e      	bgt.n	810dac8 <__kernel_rem_pio2+0x608>
 810d9ca:	2000      	movs	r0, #0
 810d9cc:	2100      	movs	r1, #0
 810d9ce:	f1bb 0f01 	cmp.w	fp, #1
 810d9d2:	f300 8097 	bgt.w	810db04 <__kernel_rem_pio2+0x644>
 810d9d6:	9b02      	ldr	r3, [sp, #8]
 810d9d8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 810d9dc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 810d9e0:	2b00      	cmp	r3, #0
 810d9e2:	f040 8099 	bne.w	810db18 <__kernel_rem_pio2+0x658>
 810d9e6:	9b01      	ldr	r3, [sp, #4]
 810d9e8:	e9c3 5600 	strd	r5, r6, [r3]
 810d9ec:	e9c3 7802 	strd	r7, r8, [r3, #8]
 810d9f0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 810d9f4:	e7ce      	b.n	810d994 <__kernel_rem_pio2+0x4d4>
 810d9f6:	ab48      	add	r3, sp, #288	; 0x120
 810d9f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810d9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810da00:	f7f2 fccc 	bl	810039c <__adddf3>
 810da04:	f10b 3bff 	add.w	fp, fp, #4294967295
 810da08:	f1bb 0f00 	cmp.w	fp, #0
 810da0c:	daf3      	bge.n	810d9f6 <__kernel_rem_pio2+0x536>
 810da0e:	9b02      	ldr	r3, [sp, #8]
 810da10:	b113      	cbz	r3, 810da18 <__kernel_rem_pio2+0x558>
 810da12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810da16:	4619      	mov	r1, r3
 810da18:	9b01      	ldr	r3, [sp, #4]
 810da1a:	e9c3 0100 	strd	r0, r1, [r3]
 810da1e:	e7b9      	b.n	810d994 <__kernel_rem_pio2+0x4d4>
 810da20:	2000      	movs	r0, #0
 810da22:	2100      	movs	r1, #0
 810da24:	e7f0      	b.n	810da08 <__kernel_rem_pio2+0x548>
 810da26:	ab48      	add	r3, sp, #288	; 0x120
 810da28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810da2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810da30:	f7f2 fcb4 	bl	810039c <__adddf3>
 810da34:	3c01      	subs	r4, #1
 810da36:	2c00      	cmp	r4, #0
 810da38:	daf5      	bge.n	810da26 <__kernel_rem_pio2+0x566>
 810da3a:	9b02      	ldr	r3, [sp, #8]
 810da3c:	b1e3      	cbz	r3, 810da78 <__kernel_rem_pio2+0x5b8>
 810da3e:	4602      	mov	r2, r0
 810da40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810da44:	9c01      	ldr	r4, [sp, #4]
 810da46:	e9c4 2300 	strd	r2, r3, [r4]
 810da4a:	4602      	mov	r2, r0
 810da4c:	460b      	mov	r3, r1
 810da4e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 810da52:	f7f2 fca1 	bl	8100398 <__aeabi_dsub>
 810da56:	ad4a      	add	r5, sp, #296	; 0x128
 810da58:	2401      	movs	r4, #1
 810da5a:	45a3      	cmp	fp, r4
 810da5c:	da0f      	bge.n	810da7e <__kernel_rem_pio2+0x5be>
 810da5e:	9b02      	ldr	r3, [sp, #8]
 810da60:	b113      	cbz	r3, 810da68 <__kernel_rem_pio2+0x5a8>
 810da62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810da66:	4619      	mov	r1, r3
 810da68:	9b01      	ldr	r3, [sp, #4]
 810da6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 810da6e:	e791      	b.n	810d994 <__kernel_rem_pio2+0x4d4>
 810da70:	465c      	mov	r4, fp
 810da72:	2000      	movs	r0, #0
 810da74:	2100      	movs	r1, #0
 810da76:	e7de      	b.n	810da36 <__kernel_rem_pio2+0x576>
 810da78:	4602      	mov	r2, r0
 810da7a:	460b      	mov	r3, r1
 810da7c:	e7e2      	b.n	810da44 <__kernel_rem_pio2+0x584>
 810da7e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 810da82:	f7f2 fc8b 	bl	810039c <__adddf3>
 810da86:	3401      	adds	r4, #1
 810da88:	e7e7      	b.n	810da5a <__kernel_rem_pio2+0x59a>
 810da8a:	e9d8 4500 	ldrd	r4, r5, [r8]
 810da8e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 810da92:	4620      	mov	r0, r4
 810da94:	4632      	mov	r2, r6
 810da96:	463b      	mov	r3, r7
 810da98:	4629      	mov	r1, r5
 810da9a:	f7f2 fc7f 	bl	810039c <__adddf3>
 810da9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810daa2:	4602      	mov	r2, r0
 810daa4:	460b      	mov	r3, r1
 810daa6:	4620      	mov	r0, r4
 810daa8:	4629      	mov	r1, r5
 810daaa:	f7f2 fc75 	bl	8100398 <__aeabi_dsub>
 810daae:	4632      	mov	r2, r6
 810dab0:	463b      	mov	r3, r7
 810dab2:	f7f2 fc73 	bl	810039c <__adddf3>
 810dab6:	ed9d 7b04 	vldr	d7, [sp, #16]
 810daba:	e9c8 0102 	strd	r0, r1, [r8, #8]
 810dabe:	ed88 7b00 	vstr	d7, [r8]
 810dac2:	f109 39ff 	add.w	r9, r9, #4294967295
 810dac6:	e776      	b.n	810d9b6 <__kernel_rem_pio2+0x4f6>
 810dac8:	e9da 8900 	ldrd	r8, r9, [sl]
 810dacc:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 810dad0:	4640      	mov	r0, r8
 810dad2:	4632      	mov	r2, r6
 810dad4:	463b      	mov	r3, r7
 810dad6:	4649      	mov	r1, r9
 810dad8:	f7f2 fc60 	bl	810039c <__adddf3>
 810dadc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810dae0:	4602      	mov	r2, r0
 810dae2:	460b      	mov	r3, r1
 810dae4:	4640      	mov	r0, r8
 810dae6:	4649      	mov	r1, r9
 810dae8:	f7f2 fc56 	bl	8100398 <__aeabi_dsub>
 810daec:	4632      	mov	r2, r6
 810daee:	463b      	mov	r3, r7
 810daf0:	f7f2 fc54 	bl	810039c <__adddf3>
 810daf4:	ed9d 7b04 	vldr	d7, [sp, #16]
 810daf8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810dafc:	ed8a 7b00 	vstr	d7, [sl]
 810db00:	3c01      	subs	r4, #1
 810db02:	e75e      	b.n	810d9c2 <__kernel_rem_pio2+0x502>
 810db04:	ab48      	add	r3, sp, #288	; 0x120
 810db06:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db0e:	f7f2 fc45 	bl	810039c <__adddf3>
 810db12:	f10b 3bff 	add.w	fp, fp, #4294967295
 810db16:	e75a      	b.n	810d9ce <__kernel_rem_pio2+0x50e>
 810db18:	9b01      	ldr	r3, [sp, #4]
 810db1a:	9a01      	ldr	r2, [sp, #4]
 810db1c:	601d      	str	r5, [r3, #0]
 810db1e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 810db22:	605c      	str	r4, [r3, #4]
 810db24:	609f      	str	r7, [r3, #8]
 810db26:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 810db2a:	60d3      	str	r3, [r2, #12]
 810db2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810db30:	6110      	str	r0, [r2, #16]
 810db32:	6153      	str	r3, [r2, #20]
 810db34:	e72e      	b.n	810d994 <__kernel_rem_pio2+0x4d4>
 810db36:	bf00      	nop
 810db38:	41700000 	.word	0x41700000
 810db3c:	3e700000 	.word	0x3e700000

0810db40 <__kernel_sin>:
 810db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810db44:	ed2d 8b04 	vpush	{d8-d9}
 810db48:	eeb0 8a41 	vmov.f32	s16, s2
 810db4c:	eef0 8a61 	vmov.f32	s17, s3
 810db50:	ec55 4b10 	vmov	r4, r5, d0
 810db54:	b083      	sub	sp, #12
 810db56:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810db5a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 810db5e:	9001      	str	r0, [sp, #4]
 810db60:	da06      	bge.n	810db70 <__kernel_sin+0x30>
 810db62:	ee10 0a10 	vmov	r0, s0
 810db66:	4629      	mov	r1, r5
 810db68:	f7f3 f87e 	bl	8100c68 <__aeabi_d2iz>
 810db6c:	2800      	cmp	r0, #0
 810db6e:	d051      	beq.n	810dc14 <__kernel_sin+0xd4>
 810db70:	4622      	mov	r2, r4
 810db72:	462b      	mov	r3, r5
 810db74:	4620      	mov	r0, r4
 810db76:	4629      	mov	r1, r5
 810db78:	f7f2 fdc6 	bl	8100708 <__aeabi_dmul>
 810db7c:	4682      	mov	sl, r0
 810db7e:	468b      	mov	fp, r1
 810db80:	4602      	mov	r2, r0
 810db82:	460b      	mov	r3, r1
 810db84:	4620      	mov	r0, r4
 810db86:	4629      	mov	r1, r5
 810db88:	f7f2 fdbe 	bl	8100708 <__aeabi_dmul>
 810db8c:	a341      	add	r3, pc, #260	; (adr r3, 810dc94 <__kernel_sin+0x154>)
 810db8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810db92:	4680      	mov	r8, r0
 810db94:	4689      	mov	r9, r1
 810db96:	4650      	mov	r0, sl
 810db98:	4659      	mov	r1, fp
 810db9a:	f7f2 fdb5 	bl	8100708 <__aeabi_dmul>
 810db9e:	a33f      	add	r3, pc, #252	; (adr r3, 810dc9c <__kernel_sin+0x15c>)
 810dba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dba4:	f7f2 fbf8 	bl	8100398 <__aeabi_dsub>
 810dba8:	4652      	mov	r2, sl
 810dbaa:	465b      	mov	r3, fp
 810dbac:	f7f2 fdac 	bl	8100708 <__aeabi_dmul>
 810dbb0:	a33c      	add	r3, pc, #240	; (adr r3, 810dca4 <__kernel_sin+0x164>)
 810dbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbb6:	f7f2 fbf1 	bl	810039c <__adddf3>
 810dbba:	4652      	mov	r2, sl
 810dbbc:	465b      	mov	r3, fp
 810dbbe:	f7f2 fda3 	bl	8100708 <__aeabi_dmul>
 810dbc2:	a33a      	add	r3, pc, #232	; (adr r3, 810dcac <__kernel_sin+0x16c>)
 810dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbc8:	f7f2 fbe6 	bl	8100398 <__aeabi_dsub>
 810dbcc:	4652      	mov	r2, sl
 810dbce:	465b      	mov	r3, fp
 810dbd0:	f7f2 fd9a 	bl	8100708 <__aeabi_dmul>
 810dbd4:	a337      	add	r3, pc, #220	; (adr r3, 810dcb4 <__kernel_sin+0x174>)
 810dbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbda:	f7f2 fbdf 	bl	810039c <__adddf3>
 810dbde:	9b01      	ldr	r3, [sp, #4]
 810dbe0:	4606      	mov	r6, r0
 810dbe2:	460f      	mov	r7, r1
 810dbe4:	b9eb      	cbnz	r3, 810dc22 <__kernel_sin+0xe2>
 810dbe6:	4602      	mov	r2, r0
 810dbe8:	460b      	mov	r3, r1
 810dbea:	4650      	mov	r0, sl
 810dbec:	4659      	mov	r1, fp
 810dbee:	f7f2 fd8b 	bl	8100708 <__aeabi_dmul>
 810dbf2:	a325      	add	r3, pc, #148	; (adr r3, 810dc88 <__kernel_sin+0x148>)
 810dbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbf8:	f7f2 fbce 	bl	8100398 <__aeabi_dsub>
 810dbfc:	4642      	mov	r2, r8
 810dbfe:	464b      	mov	r3, r9
 810dc00:	f7f2 fd82 	bl	8100708 <__aeabi_dmul>
 810dc04:	4602      	mov	r2, r0
 810dc06:	460b      	mov	r3, r1
 810dc08:	4620      	mov	r0, r4
 810dc0a:	4629      	mov	r1, r5
 810dc0c:	f7f2 fbc6 	bl	810039c <__adddf3>
 810dc10:	4604      	mov	r4, r0
 810dc12:	460d      	mov	r5, r1
 810dc14:	ec45 4b10 	vmov	d0, r4, r5
 810dc18:	b003      	add	sp, #12
 810dc1a:	ecbd 8b04 	vpop	{d8-d9}
 810dc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dc22:	4b1b      	ldr	r3, [pc, #108]	; (810dc90 <__kernel_sin+0x150>)
 810dc24:	ec51 0b18 	vmov	r0, r1, d8
 810dc28:	2200      	movs	r2, #0
 810dc2a:	f7f2 fd6d 	bl	8100708 <__aeabi_dmul>
 810dc2e:	4632      	mov	r2, r6
 810dc30:	ec41 0b19 	vmov	d9, r0, r1
 810dc34:	463b      	mov	r3, r7
 810dc36:	4640      	mov	r0, r8
 810dc38:	4649      	mov	r1, r9
 810dc3a:	f7f2 fd65 	bl	8100708 <__aeabi_dmul>
 810dc3e:	4602      	mov	r2, r0
 810dc40:	460b      	mov	r3, r1
 810dc42:	ec51 0b19 	vmov	r0, r1, d9
 810dc46:	f7f2 fba7 	bl	8100398 <__aeabi_dsub>
 810dc4a:	4652      	mov	r2, sl
 810dc4c:	465b      	mov	r3, fp
 810dc4e:	f7f2 fd5b 	bl	8100708 <__aeabi_dmul>
 810dc52:	ec53 2b18 	vmov	r2, r3, d8
 810dc56:	f7f2 fb9f 	bl	8100398 <__aeabi_dsub>
 810dc5a:	a30b      	add	r3, pc, #44	; (adr r3, 810dc88 <__kernel_sin+0x148>)
 810dc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc60:	4606      	mov	r6, r0
 810dc62:	460f      	mov	r7, r1
 810dc64:	4640      	mov	r0, r8
 810dc66:	4649      	mov	r1, r9
 810dc68:	f7f2 fd4e 	bl	8100708 <__aeabi_dmul>
 810dc6c:	4602      	mov	r2, r0
 810dc6e:	460b      	mov	r3, r1
 810dc70:	4630      	mov	r0, r6
 810dc72:	4639      	mov	r1, r7
 810dc74:	f7f2 fb92 	bl	810039c <__adddf3>
 810dc78:	4602      	mov	r2, r0
 810dc7a:	460b      	mov	r3, r1
 810dc7c:	4620      	mov	r0, r4
 810dc7e:	4629      	mov	r1, r5
 810dc80:	f7f2 fb8a 	bl	8100398 <__aeabi_dsub>
 810dc84:	e7c4      	b.n	810dc10 <__kernel_sin+0xd0>
 810dc86:	bf00      	nop
 810dc88:	55555549 	.word	0x55555549
 810dc8c:	3fc55555 	.word	0x3fc55555
 810dc90:	3fe00000 	.word	0x3fe00000
 810dc94:	5acfd57c 	.word	0x5acfd57c
 810dc98:	3de5d93a 	.word	0x3de5d93a
 810dc9c:	8a2b9ceb 	.word	0x8a2b9ceb
 810dca0:	3e5ae5e6 	.word	0x3e5ae5e6
 810dca4:	57b1fe7d 	.word	0x57b1fe7d
 810dca8:	3ec71de3 	.word	0x3ec71de3
 810dcac:	19c161d5 	.word	0x19c161d5
 810dcb0:	3f2a01a0 	.word	0x3f2a01a0
 810dcb4:	1110f8a6 	.word	0x1110f8a6
 810dcb8:	3f811111 	.word	0x3f811111
 810dcbc:	00000000 	.word	0x00000000

0810dcc0 <floor>:
 810dcc0:	ec51 0b10 	vmov	r0, r1, d0
 810dcc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dcc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 810dccc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 810dcd0:	2e13      	cmp	r6, #19
 810dcd2:	ee10 5a10 	vmov	r5, s0
 810dcd6:	ee10 8a10 	vmov	r8, s0
 810dcda:	460c      	mov	r4, r1
 810dcdc:	dc32      	bgt.n	810dd44 <floor+0x84>
 810dcde:	2e00      	cmp	r6, #0
 810dce0:	da14      	bge.n	810dd0c <floor+0x4c>
 810dce2:	a333      	add	r3, pc, #204	; (adr r3, 810ddb0 <floor+0xf0>)
 810dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dce8:	f7f2 fb58 	bl	810039c <__adddf3>
 810dcec:	2200      	movs	r2, #0
 810dcee:	2300      	movs	r3, #0
 810dcf0:	f7f2 ff9a 	bl	8100c28 <__aeabi_dcmpgt>
 810dcf4:	b138      	cbz	r0, 810dd06 <floor+0x46>
 810dcf6:	2c00      	cmp	r4, #0
 810dcf8:	da57      	bge.n	810ddaa <floor+0xea>
 810dcfa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 810dcfe:	431d      	orrs	r5, r3
 810dd00:	d001      	beq.n	810dd06 <floor+0x46>
 810dd02:	4c2d      	ldr	r4, [pc, #180]	; (810ddb8 <floor+0xf8>)
 810dd04:	2500      	movs	r5, #0
 810dd06:	4621      	mov	r1, r4
 810dd08:	4628      	mov	r0, r5
 810dd0a:	e025      	b.n	810dd58 <floor+0x98>
 810dd0c:	4f2b      	ldr	r7, [pc, #172]	; (810ddbc <floor+0xfc>)
 810dd0e:	4137      	asrs	r7, r6
 810dd10:	ea01 0307 	and.w	r3, r1, r7
 810dd14:	4303      	orrs	r3, r0
 810dd16:	d01f      	beq.n	810dd58 <floor+0x98>
 810dd18:	a325      	add	r3, pc, #148	; (adr r3, 810ddb0 <floor+0xf0>)
 810dd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dd1e:	f7f2 fb3d 	bl	810039c <__adddf3>
 810dd22:	2200      	movs	r2, #0
 810dd24:	2300      	movs	r3, #0
 810dd26:	f7f2 ff7f 	bl	8100c28 <__aeabi_dcmpgt>
 810dd2a:	2800      	cmp	r0, #0
 810dd2c:	d0eb      	beq.n	810dd06 <floor+0x46>
 810dd2e:	2c00      	cmp	r4, #0
 810dd30:	bfbe      	ittt	lt
 810dd32:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 810dd36:	fa43 f606 	asrlt.w	r6, r3, r6
 810dd3a:	19a4      	addlt	r4, r4, r6
 810dd3c:	ea24 0407 	bic.w	r4, r4, r7
 810dd40:	2500      	movs	r5, #0
 810dd42:	e7e0      	b.n	810dd06 <floor+0x46>
 810dd44:	2e33      	cmp	r6, #51	; 0x33
 810dd46:	dd0b      	ble.n	810dd60 <floor+0xa0>
 810dd48:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810dd4c:	d104      	bne.n	810dd58 <floor+0x98>
 810dd4e:	ee10 2a10 	vmov	r2, s0
 810dd52:	460b      	mov	r3, r1
 810dd54:	f7f2 fb22 	bl	810039c <__adddf3>
 810dd58:	ec41 0b10 	vmov	d0, r0, r1
 810dd5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810dd60:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 810dd64:	f04f 33ff 	mov.w	r3, #4294967295
 810dd68:	fa23 f707 	lsr.w	r7, r3, r7
 810dd6c:	4207      	tst	r7, r0
 810dd6e:	d0f3      	beq.n	810dd58 <floor+0x98>
 810dd70:	a30f      	add	r3, pc, #60	; (adr r3, 810ddb0 <floor+0xf0>)
 810dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dd76:	f7f2 fb11 	bl	810039c <__adddf3>
 810dd7a:	2200      	movs	r2, #0
 810dd7c:	2300      	movs	r3, #0
 810dd7e:	f7f2 ff53 	bl	8100c28 <__aeabi_dcmpgt>
 810dd82:	2800      	cmp	r0, #0
 810dd84:	d0bf      	beq.n	810dd06 <floor+0x46>
 810dd86:	2c00      	cmp	r4, #0
 810dd88:	da02      	bge.n	810dd90 <floor+0xd0>
 810dd8a:	2e14      	cmp	r6, #20
 810dd8c:	d103      	bne.n	810dd96 <floor+0xd6>
 810dd8e:	3401      	adds	r4, #1
 810dd90:	ea25 0507 	bic.w	r5, r5, r7
 810dd94:	e7b7      	b.n	810dd06 <floor+0x46>
 810dd96:	2301      	movs	r3, #1
 810dd98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 810dd9c:	fa03 f606 	lsl.w	r6, r3, r6
 810dda0:	4435      	add	r5, r6
 810dda2:	4545      	cmp	r5, r8
 810dda4:	bf38      	it	cc
 810dda6:	18e4      	addcc	r4, r4, r3
 810dda8:	e7f2      	b.n	810dd90 <floor+0xd0>
 810ddaa:	2500      	movs	r5, #0
 810ddac:	462c      	mov	r4, r5
 810ddae:	e7aa      	b.n	810dd06 <floor+0x46>
 810ddb0:	8800759c 	.word	0x8800759c
 810ddb4:	7e37e43c 	.word	0x7e37e43c
 810ddb8:	bff00000 	.word	0xbff00000
 810ddbc:	000fffff 	.word	0x000fffff

0810ddc0 <scalbn>:
 810ddc0:	b570      	push	{r4, r5, r6, lr}
 810ddc2:	ec55 4b10 	vmov	r4, r5, d0
 810ddc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810ddca:	4606      	mov	r6, r0
 810ddcc:	462b      	mov	r3, r5
 810ddce:	b99a      	cbnz	r2, 810ddf8 <scalbn+0x38>
 810ddd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810ddd4:	4323      	orrs	r3, r4
 810ddd6:	d036      	beq.n	810de46 <scalbn+0x86>
 810ddd8:	4b39      	ldr	r3, [pc, #228]	; (810dec0 <scalbn+0x100>)
 810ddda:	4629      	mov	r1, r5
 810dddc:	ee10 0a10 	vmov	r0, s0
 810dde0:	2200      	movs	r2, #0
 810dde2:	f7f2 fc91 	bl	8100708 <__aeabi_dmul>
 810dde6:	4b37      	ldr	r3, [pc, #220]	; (810dec4 <scalbn+0x104>)
 810dde8:	429e      	cmp	r6, r3
 810ddea:	4604      	mov	r4, r0
 810ddec:	460d      	mov	r5, r1
 810ddee:	da10      	bge.n	810de12 <scalbn+0x52>
 810ddf0:	a32b      	add	r3, pc, #172	; (adr r3, 810dea0 <scalbn+0xe0>)
 810ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ddf6:	e03a      	b.n	810de6e <scalbn+0xae>
 810ddf8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810ddfc:	428a      	cmp	r2, r1
 810ddfe:	d10c      	bne.n	810de1a <scalbn+0x5a>
 810de00:	ee10 2a10 	vmov	r2, s0
 810de04:	4620      	mov	r0, r4
 810de06:	4629      	mov	r1, r5
 810de08:	f7f2 fac8 	bl	810039c <__adddf3>
 810de0c:	4604      	mov	r4, r0
 810de0e:	460d      	mov	r5, r1
 810de10:	e019      	b.n	810de46 <scalbn+0x86>
 810de12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810de16:	460b      	mov	r3, r1
 810de18:	3a36      	subs	r2, #54	; 0x36
 810de1a:	4432      	add	r2, r6
 810de1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810de20:	428a      	cmp	r2, r1
 810de22:	dd08      	ble.n	810de36 <scalbn+0x76>
 810de24:	2d00      	cmp	r5, #0
 810de26:	a120      	add	r1, pc, #128	; (adr r1, 810dea8 <scalbn+0xe8>)
 810de28:	e9d1 0100 	ldrd	r0, r1, [r1]
 810de2c:	da1c      	bge.n	810de68 <scalbn+0xa8>
 810de2e:	a120      	add	r1, pc, #128	; (adr r1, 810deb0 <scalbn+0xf0>)
 810de30:	e9d1 0100 	ldrd	r0, r1, [r1]
 810de34:	e018      	b.n	810de68 <scalbn+0xa8>
 810de36:	2a00      	cmp	r2, #0
 810de38:	dd08      	ble.n	810de4c <scalbn+0x8c>
 810de3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810de3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810de42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810de46:	ec45 4b10 	vmov	d0, r4, r5
 810de4a:	bd70      	pop	{r4, r5, r6, pc}
 810de4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810de50:	da19      	bge.n	810de86 <scalbn+0xc6>
 810de52:	f24c 3350 	movw	r3, #50000	; 0xc350
 810de56:	429e      	cmp	r6, r3
 810de58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810de5c:	dd0a      	ble.n	810de74 <scalbn+0xb4>
 810de5e:	a112      	add	r1, pc, #72	; (adr r1, 810dea8 <scalbn+0xe8>)
 810de60:	e9d1 0100 	ldrd	r0, r1, [r1]
 810de64:	2b00      	cmp	r3, #0
 810de66:	d1e2      	bne.n	810de2e <scalbn+0x6e>
 810de68:	a30f      	add	r3, pc, #60	; (adr r3, 810dea8 <scalbn+0xe8>)
 810de6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de6e:	f7f2 fc4b 	bl	8100708 <__aeabi_dmul>
 810de72:	e7cb      	b.n	810de0c <scalbn+0x4c>
 810de74:	a10a      	add	r1, pc, #40	; (adr r1, 810dea0 <scalbn+0xe0>)
 810de76:	e9d1 0100 	ldrd	r0, r1, [r1]
 810de7a:	2b00      	cmp	r3, #0
 810de7c:	d0b8      	beq.n	810ddf0 <scalbn+0x30>
 810de7e:	a10e      	add	r1, pc, #56	; (adr r1, 810deb8 <scalbn+0xf8>)
 810de80:	e9d1 0100 	ldrd	r0, r1, [r1]
 810de84:	e7b4      	b.n	810ddf0 <scalbn+0x30>
 810de86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810de8a:	3236      	adds	r2, #54	; 0x36
 810de8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810de90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810de94:	4620      	mov	r0, r4
 810de96:	4b0c      	ldr	r3, [pc, #48]	; (810dec8 <scalbn+0x108>)
 810de98:	2200      	movs	r2, #0
 810de9a:	e7e8      	b.n	810de6e <scalbn+0xae>
 810de9c:	f3af 8000 	nop.w
 810dea0:	c2f8f359 	.word	0xc2f8f359
 810dea4:	01a56e1f 	.word	0x01a56e1f
 810dea8:	8800759c 	.word	0x8800759c
 810deac:	7e37e43c 	.word	0x7e37e43c
 810deb0:	8800759c 	.word	0x8800759c
 810deb4:	fe37e43c 	.word	0xfe37e43c
 810deb8:	c2f8f359 	.word	0xc2f8f359
 810debc:	81a56e1f 	.word	0x81a56e1f
 810dec0:	43500000 	.word	0x43500000
 810dec4:	ffff3cb0 	.word	0xffff3cb0
 810dec8:	3c900000 	.word	0x3c900000

0810decc <_init>:
 810decc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810dece:	bf00      	nop
 810ded0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ded2:	bc08      	pop	{r3}
 810ded4:	469e      	mov	lr, r3
 810ded6:	4770      	bx	lr

0810ded8 <_fini>:
 810ded8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810deda:	bf00      	nop
 810dedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810dede:	bc08      	pop	{r3}
 810dee0:	469e      	mov	lr, r3
 810dee2:	4770      	bx	lr
