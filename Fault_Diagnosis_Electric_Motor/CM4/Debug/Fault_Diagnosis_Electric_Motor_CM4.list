
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e0  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08106b80  08106b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08106d7c  08106d7c  00016d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08106d84  08106d84  00016d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08106d88  08106d88  00016d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  08106d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000210  10000074  08106e00  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10000284  08106e00  00020284  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f4d4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000323c  00000000  00000000  0003f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e08  00000000  00000000  000427b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d20  00000000  00000000  000435c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003bea0  00000000  00000000  000442e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012b57  00000000  00000000  00080180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00185417  00000000  00000000  00092cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002180ee  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004188  00000000  00000000  00218144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08106b68 	.word	0x08106b68

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	08106b68 	.word	0x08106b68

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b96e 	b.w	8100674 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9d08      	ldr	r5, [sp, #32]
 81003b6:	4604      	mov	r4, r0
 81003b8:	468c      	mov	ip, r1
 81003ba:	2b00      	cmp	r3, #0
 81003bc:	f040 8083 	bne.w	81004c6 <__udivmoddi4+0x116>
 81003c0:	428a      	cmp	r2, r1
 81003c2:	4617      	mov	r7, r2
 81003c4:	d947      	bls.n	8100456 <__udivmoddi4+0xa6>
 81003c6:	fab2 f282 	clz	r2, r2
 81003ca:	b142      	cbz	r2, 81003de <__udivmoddi4+0x2e>
 81003cc:	f1c2 0020 	rsb	r0, r2, #32
 81003d0:	fa24 f000 	lsr.w	r0, r4, r0
 81003d4:	4091      	lsls	r1, r2
 81003d6:	4097      	lsls	r7, r2
 81003d8:	ea40 0c01 	orr.w	ip, r0, r1
 81003dc:	4094      	lsls	r4, r2
 81003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 81003e2:	0c23      	lsrs	r3, r4, #16
 81003e4:	fbbc f6f8 	udiv	r6, ip, r8
 81003e8:	fa1f fe87 	uxth.w	lr, r7
 81003ec:	fb08 c116 	mls	r1, r8, r6, ip
 81003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81003f4:	fb06 f10e 	mul.w	r1, r6, lr
 81003f8:	4299      	cmp	r1, r3
 81003fa:	d909      	bls.n	8100410 <__udivmoddi4+0x60>
 81003fc:	18fb      	adds	r3, r7, r3
 81003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8100402:	f080 8119 	bcs.w	8100638 <__udivmoddi4+0x288>
 8100406:	4299      	cmp	r1, r3
 8100408:	f240 8116 	bls.w	8100638 <__udivmoddi4+0x288>
 810040c:	3e02      	subs	r6, #2
 810040e:	443b      	add	r3, r7
 8100410:	1a5b      	subs	r3, r3, r1
 8100412:	b2a4      	uxth	r4, r4
 8100414:	fbb3 f0f8 	udiv	r0, r3, r8
 8100418:	fb08 3310 	mls	r3, r8, r0, r3
 810041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100420:	fb00 fe0e 	mul.w	lr, r0, lr
 8100424:	45a6      	cmp	lr, r4
 8100426:	d909      	bls.n	810043c <__udivmoddi4+0x8c>
 8100428:	193c      	adds	r4, r7, r4
 810042a:	f100 33ff 	add.w	r3, r0, #4294967295
 810042e:	f080 8105 	bcs.w	810063c <__udivmoddi4+0x28c>
 8100432:	45a6      	cmp	lr, r4
 8100434:	f240 8102 	bls.w	810063c <__udivmoddi4+0x28c>
 8100438:	3802      	subs	r0, #2
 810043a:	443c      	add	r4, r7
 810043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100440:	eba4 040e 	sub.w	r4, r4, lr
 8100444:	2600      	movs	r6, #0
 8100446:	b11d      	cbz	r5, 8100450 <__udivmoddi4+0xa0>
 8100448:	40d4      	lsrs	r4, r2
 810044a:	2300      	movs	r3, #0
 810044c:	e9c5 4300 	strd	r4, r3, [r5]
 8100450:	4631      	mov	r1, r6
 8100452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100456:	b902      	cbnz	r2, 810045a <__udivmoddi4+0xaa>
 8100458:	deff      	udf	#255	; 0xff
 810045a:	fab2 f282 	clz	r2, r2
 810045e:	2a00      	cmp	r2, #0
 8100460:	d150      	bne.n	8100504 <__udivmoddi4+0x154>
 8100462:	1bcb      	subs	r3, r1, r7
 8100464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100468:	fa1f f887 	uxth.w	r8, r7
 810046c:	2601      	movs	r6, #1
 810046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8100472:	0c21      	lsrs	r1, r4, #16
 8100474:	fb0e 331c 	mls	r3, lr, ip, r3
 8100478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810047c:	fb08 f30c 	mul.w	r3, r8, ip
 8100480:	428b      	cmp	r3, r1
 8100482:	d907      	bls.n	8100494 <__udivmoddi4+0xe4>
 8100484:	1879      	adds	r1, r7, r1
 8100486:	f10c 30ff 	add.w	r0, ip, #4294967295
 810048a:	d202      	bcs.n	8100492 <__udivmoddi4+0xe2>
 810048c:	428b      	cmp	r3, r1
 810048e:	f200 80e9 	bhi.w	8100664 <__udivmoddi4+0x2b4>
 8100492:	4684      	mov	ip, r0
 8100494:	1ac9      	subs	r1, r1, r3
 8100496:	b2a3      	uxth	r3, r4
 8100498:	fbb1 f0fe 	udiv	r0, r1, lr
 810049c:	fb0e 1110 	mls	r1, lr, r0, r1
 81004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81004a4:	fb08 f800 	mul.w	r8, r8, r0
 81004a8:	45a0      	cmp	r8, r4
 81004aa:	d907      	bls.n	81004bc <__udivmoddi4+0x10c>
 81004ac:	193c      	adds	r4, r7, r4
 81004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 81004b2:	d202      	bcs.n	81004ba <__udivmoddi4+0x10a>
 81004b4:	45a0      	cmp	r8, r4
 81004b6:	f200 80d9 	bhi.w	810066c <__udivmoddi4+0x2bc>
 81004ba:	4618      	mov	r0, r3
 81004bc:	eba4 0408 	sub.w	r4, r4, r8
 81004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 81004c4:	e7bf      	b.n	8100446 <__udivmoddi4+0x96>
 81004c6:	428b      	cmp	r3, r1
 81004c8:	d909      	bls.n	81004de <__udivmoddi4+0x12e>
 81004ca:	2d00      	cmp	r5, #0
 81004cc:	f000 80b1 	beq.w	8100632 <__udivmoddi4+0x282>
 81004d0:	2600      	movs	r6, #0
 81004d2:	e9c5 0100 	strd	r0, r1, [r5]
 81004d6:	4630      	mov	r0, r6
 81004d8:	4631      	mov	r1, r6
 81004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81004de:	fab3 f683 	clz	r6, r3
 81004e2:	2e00      	cmp	r6, #0
 81004e4:	d14a      	bne.n	810057c <__udivmoddi4+0x1cc>
 81004e6:	428b      	cmp	r3, r1
 81004e8:	d302      	bcc.n	81004f0 <__udivmoddi4+0x140>
 81004ea:	4282      	cmp	r2, r0
 81004ec:	f200 80b8 	bhi.w	8100660 <__udivmoddi4+0x2b0>
 81004f0:	1a84      	subs	r4, r0, r2
 81004f2:	eb61 0103 	sbc.w	r1, r1, r3
 81004f6:	2001      	movs	r0, #1
 81004f8:	468c      	mov	ip, r1
 81004fa:	2d00      	cmp	r5, #0
 81004fc:	d0a8      	beq.n	8100450 <__udivmoddi4+0xa0>
 81004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8100502:	e7a5      	b.n	8100450 <__udivmoddi4+0xa0>
 8100504:	f1c2 0320 	rsb	r3, r2, #32
 8100508:	fa20 f603 	lsr.w	r6, r0, r3
 810050c:	4097      	lsls	r7, r2
 810050e:	fa01 f002 	lsl.w	r0, r1, r2
 8100512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100516:	40d9      	lsrs	r1, r3
 8100518:	4330      	orrs	r0, r6
 810051a:	0c03      	lsrs	r3, r0, #16
 810051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8100520:	fa1f f887 	uxth.w	r8, r7
 8100524:	fb0e 1116 	mls	r1, lr, r6, r1
 8100528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810052c:	fb06 f108 	mul.w	r1, r6, r8
 8100530:	4299      	cmp	r1, r3
 8100532:	fa04 f402 	lsl.w	r4, r4, r2
 8100536:	d909      	bls.n	810054c <__udivmoddi4+0x19c>
 8100538:	18fb      	adds	r3, r7, r3
 810053a:	f106 3cff 	add.w	ip, r6, #4294967295
 810053e:	f080 808d 	bcs.w	810065c <__udivmoddi4+0x2ac>
 8100542:	4299      	cmp	r1, r3
 8100544:	f240 808a 	bls.w	810065c <__udivmoddi4+0x2ac>
 8100548:	3e02      	subs	r6, #2
 810054a:	443b      	add	r3, r7
 810054c:	1a5b      	subs	r3, r3, r1
 810054e:	b281      	uxth	r1, r0
 8100550:	fbb3 f0fe 	udiv	r0, r3, lr
 8100554:	fb0e 3310 	mls	r3, lr, r0, r3
 8100558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810055c:	fb00 f308 	mul.w	r3, r0, r8
 8100560:	428b      	cmp	r3, r1
 8100562:	d907      	bls.n	8100574 <__udivmoddi4+0x1c4>
 8100564:	1879      	adds	r1, r7, r1
 8100566:	f100 3cff 	add.w	ip, r0, #4294967295
 810056a:	d273      	bcs.n	8100654 <__udivmoddi4+0x2a4>
 810056c:	428b      	cmp	r3, r1
 810056e:	d971      	bls.n	8100654 <__udivmoddi4+0x2a4>
 8100570:	3802      	subs	r0, #2
 8100572:	4439      	add	r1, r7
 8100574:	1acb      	subs	r3, r1, r3
 8100576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 810057a:	e778      	b.n	810046e <__udivmoddi4+0xbe>
 810057c:	f1c6 0c20 	rsb	ip, r6, #32
 8100580:	fa03 f406 	lsl.w	r4, r3, r6
 8100584:	fa22 f30c 	lsr.w	r3, r2, ip
 8100588:	431c      	orrs	r4, r3
 810058a:	fa20 f70c 	lsr.w	r7, r0, ip
 810058e:	fa01 f306 	lsl.w	r3, r1, r6
 8100592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100596:	fa21 f10c 	lsr.w	r1, r1, ip
 810059a:	431f      	orrs	r7, r3
 810059c:	0c3b      	lsrs	r3, r7, #16
 810059e:	fbb1 f9fe 	udiv	r9, r1, lr
 81005a2:	fa1f f884 	uxth.w	r8, r4
 81005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 81005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 81005ae:	fb09 fa08 	mul.w	sl, r9, r8
 81005b2:	458a      	cmp	sl, r1
 81005b4:	fa02 f206 	lsl.w	r2, r2, r6
 81005b8:	fa00 f306 	lsl.w	r3, r0, r6
 81005bc:	d908      	bls.n	81005d0 <__udivmoddi4+0x220>
 81005be:	1861      	adds	r1, r4, r1
 81005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 81005c4:	d248      	bcs.n	8100658 <__udivmoddi4+0x2a8>
 81005c6:	458a      	cmp	sl, r1
 81005c8:	d946      	bls.n	8100658 <__udivmoddi4+0x2a8>
 81005ca:	f1a9 0902 	sub.w	r9, r9, #2
 81005ce:	4421      	add	r1, r4
 81005d0:	eba1 010a 	sub.w	r1, r1, sl
 81005d4:	b2bf      	uxth	r7, r7
 81005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 81005da:	fb0e 1110 	mls	r1, lr, r0, r1
 81005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 81005e2:	fb00 f808 	mul.w	r8, r0, r8
 81005e6:	45b8      	cmp	r8, r7
 81005e8:	d907      	bls.n	81005fa <__udivmoddi4+0x24a>
 81005ea:	19e7      	adds	r7, r4, r7
 81005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 81005f0:	d22e      	bcs.n	8100650 <__udivmoddi4+0x2a0>
 81005f2:	45b8      	cmp	r8, r7
 81005f4:	d92c      	bls.n	8100650 <__udivmoddi4+0x2a0>
 81005f6:	3802      	subs	r0, #2
 81005f8:	4427      	add	r7, r4
 81005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81005fe:	eba7 0708 	sub.w	r7, r7, r8
 8100602:	fba0 8902 	umull	r8, r9, r0, r2
 8100606:	454f      	cmp	r7, r9
 8100608:	46c6      	mov	lr, r8
 810060a:	4649      	mov	r1, r9
 810060c:	d31a      	bcc.n	8100644 <__udivmoddi4+0x294>
 810060e:	d017      	beq.n	8100640 <__udivmoddi4+0x290>
 8100610:	b15d      	cbz	r5, 810062a <__udivmoddi4+0x27a>
 8100612:	ebb3 020e 	subs.w	r2, r3, lr
 8100616:	eb67 0701 	sbc.w	r7, r7, r1
 810061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 810061e:	40f2      	lsrs	r2, r6
 8100620:	ea4c 0202 	orr.w	r2, ip, r2
 8100624:	40f7      	lsrs	r7, r6
 8100626:	e9c5 2700 	strd	r2, r7, [r5]
 810062a:	2600      	movs	r6, #0
 810062c:	4631      	mov	r1, r6
 810062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100632:	462e      	mov	r6, r5
 8100634:	4628      	mov	r0, r5
 8100636:	e70b      	b.n	8100450 <__udivmoddi4+0xa0>
 8100638:	4606      	mov	r6, r0
 810063a:	e6e9      	b.n	8100410 <__udivmoddi4+0x60>
 810063c:	4618      	mov	r0, r3
 810063e:	e6fd      	b.n	810043c <__udivmoddi4+0x8c>
 8100640:	4543      	cmp	r3, r8
 8100642:	d2e5      	bcs.n	8100610 <__udivmoddi4+0x260>
 8100644:	ebb8 0e02 	subs.w	lr, r8, r2
 8100648:	eb69 0104 	sbc.w	r1, r9, r4
 810064c:	3801      	subs	r0, #1
 810064e:	e7df      	b.n	8100610 <__udivmoddi4+0x260>
 8100650:	4608      	mov	r0, r1
 8100652:	e7d2      	b.n	81005fa <__udivmoddi4+0x24a>
 8100654:	4660      	mov	r0, ip
 8100656:	e78d      	b.n	8100574 <__udivmoddi4+0x1c4>
 8100658:	4681      	mov	r9, r0
 810065a:	e7b9      	b.n	81005d0 <__udivmoddi4+0x220>
 810065c:	4666      	mov	r6, ip
 810065e:	e775      	b.n	810054c <__udivmoddi4+0x19c>
 8100660:	4630      	mov	r0, r6
 8100662:	e74a      	b.n	81004fa <__udivmoddi4+0x14a>
 8100664:	f1ac 0c02 	sub.w	ip, ip, #2
 8100668:	4439      	add	r1, r7
 810066a:	e713      	b.n	8100494 <__udivmoddi4+0xe4>
 810066c:	3802      	subs	r0, #2
 810066e:	443c      	add	r4, r7
 8100670:	e724      	b.n	81004bc <__udivmoddi4+0x10c>
 8100672:	bf00      	nop

08100674 <__aeabi_idiv0>:
 8100674:	4770      	bx	lr
 8100676:	bf00      	nop

08100678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100678:	b480      	push	{r7}
 810067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810067c:	4b0b      	ldr	r3, [pc, #44]	; (81006ac <SystemInit+0x34>)
 810067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100682:	4a0a      	ldr	r2, [pc, #40]	; (81006ac <SystemInit+0x34>)
 8100684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810068c:	4b07      	ldr	r3, [pc, #28]	; (81006ac <SystemInit+0x34>)
 810068e:	691b      	ldr	r3, [r3, #16]
 8100690:	4a06      	ldr	r2, [pc, #24]	; (81006ac <SystemInit+0x34>)
 8100692:	f043 0310 	orr.w	r3, r3, #16
 8100696:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100698:	4b04      	ldr	r3, [pc, #16]	; (81006ac <SystemInit+0x34>)
 810069a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810069e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006a0:	bf00      	nop
 81006a2:	46bd      	mov	sp, r7
 81006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a8:	4770      	bx	lr
 81006aa:	bf00      	nop
 81006ac:	e000ed00 	.word	0xe000ed00

081006b0 <ADE9000_Power>:

#include "ADE9000_API.h"
#include "main.h"

//power-on sequence
void ADE9000_Power(void){
 81006b0:	b580      	push	{r7, lr}
 81006b2:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 81006b4:	2200      	movs	r2, #0
 81006b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81006ba:	480c      	ldr	r0, [pc, #48]	; (81006ec <ADE9000_Power+0x3c>)
 81006bc:	f001 fa9a 	bl	8101bf4 <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 81006c0:	2200      	movs	r2, #0
 81006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 81006c6:	4809      	ldr	r0, [pc, #36]	; (81006ec <ADE9000_Power+0x3c>)
 81006c8:	f001 fa94 	bl	8101bf4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 81006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81006d0:	f000 ff98 	bl	8101604 <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 81006d4:	2201      	movs	r2, #1
 81006d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 81006da:	4804      	ldr	r0, [pc, #16]	; (81006ec <ADE9000_Power+0x3c>)
 81006dc:	f001 fa8a 	bl	8101bf4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 81006e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81006e4:	f000 ff8e 	bl	8101604 <HAL_Delay>
    } while ((value_reg_32 & 0x00010000)==0);
    //Clear IRQ1
    value_reg_32 = value_reg_32 & 0x00010000;
    ADE9000_SPI_Write_32(ADDR_STATUS1,value_reg_32);
    */
}
 81006e8:	bf00      	nop
 81006ea:	bd80      	pop	{r7, pc}
 81006ec:	58021000 	.word	0x58021000

081006f0 <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 81006f0:	b580      	push	{r7, lr}
 81006f2:	b084      	sub	sp, #16
 81006f4:	af00      	add	r7, sp, #0
 81006f6:	4603      	mov	r3, r0
 81006f8:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81006fa:	88fb      	ldrh	r3, [r7, #6]
 81006fc:	011b      	lsls	r3, r3, #4
 81006fe:	b29b      	uxth	r3, r3
 8100700:	3308      	adds	r3, #8
 8100702:	b29b      	uxth	r3, r3
 8100704:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8100706:	2200      	movs	r2, #0
 8100708:	f44f 7100 	mov.w	r1, #512	; 0x200
 810070c:	480f      	ldr	r0, [pc, #60]	; (810074c <ADE9000_SPI_Read_16+0x5c>)
 810070e:	f001 fa71 	bl	8101bf4 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100712:	f107 0108 	add.w	r1, r7, #8
 8100716:	2364      	movs	r3, #100	; 0x64
 8100718:	2201      	movs	r2, #1
 810071a:	480d      	ldr	r0, [pc, #52]	; (8100750 <ADE9000_SPI_Read_16+0x60>)
 810071c:	f003 f978 	bl	8103a10 <HAL_SPI_Transmit>
 8100720:	4603      	mov	r3, r0
 8100722:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 8100724:	f107 010c 	add.w	r1, r7, #12
 8100728:	2364      	movs	r3, #100	; 0x64
 810072a:	2201      	movs	r2, #1
 810072c:	4808      	ldr	r0, [pc, #32]	; (8100750 <ADE9000_SPI_Read_16+0x60>)
 810072e:	f003 fb5d 	bl	8103dec <HAL_SPI_Receive>
 8100732:	4603      	mov	r3, r0
 8100734:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100736:	2201      	movs	r2, #1
 8100738:	f44f 7100 	mov.w	r1, #512	; 0x200
 810073c:	4803      	ldr	r0, [pc, #12]	; (810074c <ADE9000_SPI_Read_16+0x5c>)
 810073e:	f001 fa59 	bl	8101bf4 <HAL_GPIO_WritePin>

	return data.data_16;
 8100742:	89bb      	ldrh	r3, [r7, #12]
}
 8100744:	4618      	mov	r0, r3
 8100746:	3710      	adds	r7, #16
 8100748:	46bd      	mov	sp, r7
 810074a:	bd80      	pop	{r7, pc}
 810074c:	58021800 	.word	0x58021800
 8100750:	1000012c 	.word	0x1000012c

08100754 <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 8100754:	b580      	push	{r7, lr}
 8100756:	b086      	sub	sp, #24
 8100758:	af00      	add	r7, sp, #0
 810075a:	4603      	mov	r3, r0
 810075c:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810075e:	88fb      	ldrh	r3, [r7, #6]
 8100760:	011b      	lsls	r3, r3, #4
 8100762:	b29b      	uxth	r3, r3
 8100764:	3308      	adds	r3, #8
 8100766:	b29b      	uxth	r3, r3
 8100768:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 810076a:	2200      	movs	r2, #0
 810076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100770:	4814      	ldr	r0, [pc, #80]	; (81007c4 <ADE9000_SPI_Read_32+0x70>)
 8100772:	f001 fa3f 	bl	8101bf4 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100776:	f107 010c 	add.w	r1, r7, #12
 810077a:	2364      	movs	r3, #100	; 0x64
 810077c:	2201      	movs	r2, #1
 810077e:	4812      	ldr	r0, [pc, #72]	; (81007c8 <ADE9000_SPI_Read_32+0x74>)
 8100780:	f003 f946 	bl	8103a10 <HAL_SPI_Transmit>
 8100784:	4603      	mov	r3, r0
 8100786:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi3,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100788:	f107 0110 	add.w	r1, r7, #16
 810078c:	3102      	adds	r1, #2
 810078e:	2364      	movs	r3, #100	; 0x64
 8100790:	2201      	movs	r2, #1
 8100792:	480d      	ldr	r0, [pc, #52]	; (81007c8 <ADE9000_SPI_Read_32+0x74>)
 8100794:	f003 fb2a 	bl	8103dec <HAL_SPI_Receive>
 8100798:	4603      	mov	r3, r0
 810079a:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 810079c:	f107 0110 	add.w	r1, r7, #16
 81007a0:	2364      	movs	r3, #100	; 0x64
 81007a2:	2201      	movs	r2, #1
 81007a4:	4808      	ldr	r0, [pc, #32]	; (81007c8 <ADE9000_SPI_Read_32+0x74>)
 81007a6:	f003 fb21 	bl	8103dec <HAL_SPI_Receive>
 81007aa:	4603      	mov	r3, r0
 81007ac:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81007ae:	2201      	movs	r2, #1
 81007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 81007b4:	4803      	ldr	r0, [pc, #12]	; (81007c4 <ADE9000_SPI_Read_32+0x70>)
 81007b6:	f001 fa1d 	bl	8101bf4 <HAL_GPIO_WritePin>

	return data.data_32;
 81007ba:	693b      	ldr	r3, [r7, #16]
}
 81007bc:	4618      	mov	r0, r3
 81007be:	3718      	adds	r7, #24
 81007c0:	46bd      	mov	sp, r7
 81007c2:	bd80      	pop	{r7, pc}
 81007c4:	58021800 	.word	0x58021800
 81007c8:	1000012c 	.word	0x1000012c

081007cc <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 81007cc:	b580      	push	{r7, lr}
 81007ce:	b084      	sub	sp, #16
 81007d0:	af00      	add	r7, sp, #0
 81007d2:	4603      	mov	r3, r0
 81007d4:	460a      	mov	r2, r1
 81007d6:	80fb      	strh	r3, [r7, #6]
 81007d8:	4613      	mov	r3, r2
 81007da:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 81007dc:	88fb      	ldrh	r3, [r7, #6]
 81007de:	011b      	lsls	r3, r3, #4
 81007e0:	b29b      	uxth	r3, r3
 81007e2:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81007e4:	2200      	movs	r2, #0
 81007e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 81007ea:	4810      	ldr	r0, [pc, #64]	; (810082c <ADE9000_SPI_Write_16+0x60>)
 81007ec:	f001 fa02 	bl	8101bf4 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81007f0:	f107 010c 	add.w	r1, r7, #12
 81007f4:	2364      	movs	r3, #100	; 0x64
 81007f6:	2201      	movs	r2, #1
 81007f8:	480d      	ldr	r0, [pc, #52]	; (8100830 <ADE9000_SPI_Write_16+0x64>)
 81007fa:	f003 f909 	bl	8103a10 <HAL_SPI_Transmit>
 81007fe:	4603      	mov	r3, r0
 8100800:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 8100802:	88bb      	ldrh	r3, [r7, #4]
 8100804:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 8100806:	f107 0108 	add.w	r1, r7, #8
 810080a:	2364      	movs	r3, #100	; 0x64
 810080c:	2201      	movs	r2, #1
 810080e:	4808      	ldr	r0, [pc, #32]	; (8100830 <ADE9000_SPI_Write_16+0x64>)
 8100810:	f003 f8fe 	bl	8103a10 <HAL_SPI_Transmit>
 8100814:	4603      	mov	r3, r0
 8100816:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100818:	2201      	movs	r2, #1
 810081a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810081e:	4803      	ldr	r0, [pc, #12]	; (810082c <ADE9000_SPI_Write_16+0x60>)
 8100820:	f001 f9e8 	bl	8101bf4 <HAL_GPIO_WritePin>

}
 8100824:	bf00      	nop
 8100826:	3710      	adds	r7, #16
 8100828:	46bd      	mov	sp, r7
 810082a:	bd80      	pop	{r7, pc}
 810082c:	58021800 	.word	0x58021800
 8100830:	1000012c 	.word	0x1000012c

08100834 <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 8100834:	b580      	push	{r7, lr}
 8100836:	b084      	sub	sp, #16
 8100838:	af00      	add	r7, sp, #0
 810083a:	4603      	mov	r3, r0
 810083c:	6039      	str	r1, [r7, #0]
 810083e:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8100840:	88fb      	ldrh	r3, [r7, #6]
 8100842:	011b      	lsls	r3, r3, #4
 8100844:	b29b      	uxth	r3, r3
 8100846:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8100848:	2200      	movs	r2, #0
 810084a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810084e:	4815      	ldr	r0, [pc, #84]	; (81008a4 <ADE9000_SPI_Write_32+0x70>)
 8100850:	f001 f9d0 	bl	8101bf4 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100854:	f107 010c 	add.w	r1, r7, #12
 8100858:	2364      	movs	r3, #100	; 0x64
 810085a:	2201      	movs	r2, #1
 810085c:	4812      	ldr	r0, [pc, #72]	; (81008a8 <ADE9000_SPI_Write_32+0x74>)
 810085e:	f003 f8d7 	bl	8103a10 <HAL_SPI_Transmit>
 8100862:	4603      	mov	r3, r0
 8100864:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 8100866:	683b      	ldr	r3, [r7, #0]
 8100868:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 810086a:	f107 0108 	add.w	r1, r7, #8
 810086e:	3102      	adds	r1, #2
 8100870:	2364      	movs	r3, #100	; 0x64
 8100872:	2201      	movs	r2, #1
 8100874:	480c      	ldr	r0, [pc, #48]	; (81008a8 <ADE9000_SPI_Write_32+0x74>)
 8100876:	f003 f8cb 	bl	8103a10 <HAL_SPI_Transmit>
 810087a:	4603      	mov	r3, r0
 810087c:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 810087e:	f107 0108 	add.w	r1, r7, #8
 8100882:	2364      	movs	r3, #100	; 0x64
 8100884:	2201      	movs	r2, #1
 8100886:	4808      	ldr	r0, [pc, #32]	; (81008a8 <ADE9000_SPI_Write_32+0x74>)
 8100888:	f003 f8c2 	bl	8103a10 <HAL_SPI_Transmit>
 810088c:	4603      	mov	r3, r0
 810088e:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100890:	2201      	movs	r2, #1
 8100892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100896:	4803      	ldr	r0, [pc, #12]	; (81008a4 <ADE9000_SPI_Write_32+0x70>)
 8100898:	f001 f9ac 	bl	8101bf4 <HAL_GPIO_WritePin>

}
 810089c:	bf00      	nop
 810089e:	3710      	adds	r7, #16
 81008a0:	46bd      	mov	sp, r7
 81008a2:	bd80      	pop	{r7, pc}
 81008a4:	58021800 	.word	0x58021800
 81008a8:	1000012c 	.word	0x1000012c

081008ac <ADE9000_Setup>:

void ADE9000_Setup(){
 81008ac:	b580      	push	{r7, lr}
 81008ae:	b082      	sub	sp, #8
 81008b0:	af00      	add	r7, sp, #0
	uint32_t value_reg_32;
	uint16_t value_reg_16;

	// ADDR_PGA_GAIN
	value_reg_16 = 0x0000; //gain all channel 1
 81008b2:	2300      	movs	r3, #0
 81008b4:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_PGA_GAIN,value_reg_16);
 81008b6:	88fb      	ldrh	r3, [r7, #6]
 81008b8:	4619      	mov	r1, r3
 81008ba:	f240 40b9 	movw	r0, #1209	; 0x4b9
 81008be:	f7ff ff85 	bl	81007cc <ADE9000_SPI_Write_16>

	//CONFIG2
	value_reg_16 = 	0x0C00;			//Default High pass corner frequency of 1.25Hz
 81008c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81008c6:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG2,value_reg_16);
 81008c8:	88fb      	ldrh	r3, [r7, #6]
 81008ca:	4619      	mov	r1, r3
 81008cc:	f240 40af 	movw	r0, #1199	; 0x4af
 81008d0:	f7ff ff7c 	bl	81007cc <ADE9000_SPI_Write_16>

	//ACCMODE
	value_reg_16= 0x0000;			//3P4W Wye configuration
 81008d4:	2300      	movs	r3, #0
 81008d6:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_ACCMODE,value_reg_16);
 81008d8:	88fb      	ldrh	r3, [r7, #6]
 81008da:	4619      	mov	r1, r3
 81008dc:	f240 4092 	movw	r0, #1170	; 0x492
 81008e0:	f7ff ff74 	bl	81007cc <ADE9000_SPI_Write_16>
	//value_reg_16 = 0x1020;//IN, sinc4, stop full, fixed rate, stop, tutti canali(0000)
	//value_reg_16 = 0x0029; //no IN, sinc4, stop full, fixed rate, stop, solo VA (1001)
	//value_reg_16 = 0x0021; //no IN, sinc4, stop full, fixed rate, stop, solo Ia e VA (0001)
	//value_reg_16 = 0x0221; //no IN, LPF, stop full, fixed rate, stop, solo Ia e VA (0001)

	value_reg_16 = 0x0000;
 81008e4:	2300      	movs	r3, #0
 81008e6:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_IN_EN<<12);
 81008e8:	88fb      	ldrh	r3, [r7, #6]
 81008ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 81008ee:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_SRC<<8);
 81008f0:	88fb      	ldrh	r3, [r7, #6]
 81008f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 81008f6:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_MODE<<6);
	value_reg_16 = value_reg_16 | (WF_CAP_SEL<<5);
 81008f8:	88fb      	ldrh	r3, [r7, #6]
 81008fa:	f043 0320 	orr.w	r3, r3, #32
 81008fe:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | BURST_CHAN;

	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8100900:	88fb      	ldrh	r3, [r7, #6]
 8100902:	4619      	mov	r1, r3
 8100904:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8100908:	f7ff ff60 	bl	81007cc <ADE9000_SPI_Write_16>

	//WFB_PG_IRQEN
	// 1 bit per pagina: pag15-pag0
	//fa PageFULL in STATUS0
	value_reg_16 = 0x8000; //page 15
 810090c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8100910:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_PG_IRQEN,value_reg_16);
 8100912:	88fb      	ldrh	r3, [r7, #6]
 8100914:	4619      	mov	r1, r3
 8100916:	f240 40a1 	movw	r0, #1185	; 0x4a1
 810091a:	f7ff ff57 	bl	81007cc <ADE9000_SPI_Write_16>

	//ADDR_MASK0
	//IRQ0 per full page (bit 17)
	value_reg_32 = 0x00020000;
 810091e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8100922:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK0,value_reg_32);
 8100924:	6839      	ldr	r1, [r7, #0]
 8100926:	f240 4005 	movw	r0, #1029	; 0x405
 810092a:	f7ff ff83 	bl	8100834 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK0);
 810092e:	f240 4005 	movw	r0, #1029	; 0x405
 8100932:	f7ff ff0f 	bl	8100754 <ADE9000_SPI_Read_32>
 8100936:	6038      	str	r0, [r7, #0]

	//ADDR_MASK1
	//disable all int
	value_reg_32 = 0x00000000;
 8100938:	2300      	movs	r3, #0
 810093a:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK1,value_reg_32);
 810093c:	6839      	ldr	r1, [r7, #0]
 810093e:	f240 4006 	movw	r0, #1030	; 0x406
 8100942:	f7ff ff77 	bl	8100834 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK1);
 8100946:	f240 4006 	movw	r0, #1030	; 0x406
 810094a:	f7ff ff03 	bl	8100754 <ADE9000_SPI_Read_32>
 810094e:	6038      	str	r0, [r7, #0]

	value_reg_16 = 0x0001;
 8100950:	2301      	movs	r3, #1
 8100952:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16);
 8100954:	88fb      	ldrh	r3, [r7, #6]
 8100956:	4619      	mov	r1, r3
 8100958:	f44f 6090 	mov.w	r0, #1152	; 0x480
 810095c:	f7ff ff36 	bl	81007cc <ADE9000_SPI_Write_16>
}
 8100960:	bf00      	nop
 8100962:	3708      	adds	r7, #8
 8100964:	46bd      	mov	sp, r7
 8100966:	bd80      	pop	{r7, pc}

08100968 <Start_Waveform_Buffer>:
void Start_Waveform_Buffer() {
 8100968:	b580      	push	{r7, lr}
 810096a:	b082      	sub	sp, #8
 810096c:	af00      	add	r7, sp, #0
	//WFB_CFG
	//Res,Res,Res,IN
	//Res,Res,Source
	//Mode,Fixed/resample,Avvio
	//channel burst
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 810096e:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8100972:	f7ff febd 	bl	81006f0 <ADE9000_SPI_Read_16>
 8100976:	4603      	mov	r3, r0
 8100978:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16|0x0010);
 810097a:	88fb      	ldrh	r3, [r7, #6]
 810097c:	f043 0310 	orr.w	r3, r3, #16
 8100980:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8100982:	88fb      	ldrh	r3, [r7, #6]
 8100984:	4619      	mov	r1, r3
 8100986:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810098a:	f7ff ff1f 	bl	81007cc <ADE9000_SPI_Write_16>

	//check
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 810098e:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8100992:	f7ff fead 	bl	81006f0 <ADE9000_SPI_Read_16>
 8100996:	4603      	mov	r3, r0
 8100998:	80fb      	strh	r3, [r7, #6]
	printf("WFB_CFG (dopo start) = %x \r\n", value_reg_16);
 810099a:	88fb      	ldrh	r3, [r7, #6]
 810099c:	4619      	mov	r1, r3
 810099e:	4803      	ldr	r0, [pc, #12]	; (81009ac <Start_Waveform_Buffer+0x44>)
 81009a0:	f005 f916 	bl	8105bd0 <iprintf>

}
 81009a4:	bf00      	nop
 81009a6:	3708      	adds	r7, #8
 81009a8:	46bd      	mov	sp, r7
 81009aa:	bd80      	pop	{r7, pc}
 81009ac:	08106b80 	.word	0x08106b80

081009b0 <ADE9000_SPI_Burst_Read_all>:

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
}

void ADE9000_SPI_Burst_Read_all(uint16_t Address, uint16_t n, int32_t* ia, int32_t* ib, int32_t* ic, int32_t* in, int32_t* va, int32_t* vb, int32_t* vc){
 81009b0:	b580      	push	{r7, lr}
 81009b2:	b088      	sub	sp, #32
 81009b4:	af00      	add	r7, sp, #0
 81009b6:	60ba      	str	r2, [r7, #8]
 81009b8:	607b      	str	r3, [r7, #4]
 81009ba:	4603      	mov	r3, r0
 81009bc:	81fb      	strh	r3, [r7, #14]
 81009be:	460b      	mov	r3, r1
 81009c0:	81bb      	strh	r3, [r7, #12]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81009c2:	89fb      	ldrh	r3, [r7, #14]
 81009c4:	011b      	lsls	r3, r3, #4
 81009c6:	b29b      	uxth	r3, r3
 81009c8:	3308      	adds	r3, #8
 81009ca:	b29b      	uxth	r3, r3
 81009cc:	82bb      	strh	r3, [r7, #20]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81009ce:	2200      	movs	r2, #0
 81009d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 81009d4:	486b      	ldr	r0, [pc, #428]	; (8100b84 <ADE9000_SPI_Burst_Read_all+0x1d4>)
 81009d6:	f001 f90d 	bl	8101bf4 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81009da:	f107 0114 	add.w	r1, r7, #20
 81009de:	2364      	movs	r3, #100	; 0x64
 81009e0:	2201      	movs	r2, #1
 81009e2:	4869      	ldr	r0, [pc, #420]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 81009e4:	f003 f814 	bl	8103a10 <HAL_SPI_Transmit>
 81009e8:	4603      	mov	r3, r0
 81009ea:	777b      	strb	r3, [r7, #29]

	for(uint16_t i=0; i<n; i++){
 81009ec:	2300      	movs	r3, #0
 81009ee:	83fb      	strh	r3, [r7, #30]
 81009f0:	e0b8      	b.n	8100b64 <ADE9000_SPI_Burst_Read_all+0x1b4>
		//Receive data
		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81009f2:	f107 0118 	add.w	r1, r7, #24
 81009f6:	3102      	adds	r1, #2
 81009f8:	2364      	movs	r3, #100	; 0x64
 81009fa:	2201      	movs	r2, #1
 81009fc:	4862      	ldr	r0, [pc, #392]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 81009fe:	f003 f9f5 	bl	8103dec <HAL_SPI_Receive>
 8100a02:	4603      	mov	r3, r0
 8100a04:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100a06:	f107 0118 	add.w	r1, r7, #24
 8100a0a:	2364      	movs	r3, #100	; 0x64
 8100a0c:	2201      	movs	r2, #1
 8100a0e:	485e      	ldr	r0, [pc, #376]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100a10:	f003 f9ec 	bl	8103dec <HAL_SPI_Receive>
 8100a14:	4603      	mov	r3, r0
 8100a16:	777b      	strb	r3, [r7, #29]
		*(ia + i)= app.data_32;
 8100a18:	69b9      	ldr	r1, [r7, #24]
 8100a1a:	8bfb      	ldrh	r3, [r7, #30]
 8100a1c:	009b      	lsls	r3, r3, #2
 8100a1e:	68ba      	ldr	r2, [r7, #8]
 8100a20:	4413      	add	r3, r2
 8100a22:	460a      	mov	r2, r1
 8100a24:	601a      	str	r2, [r3, #0]
		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100a26:	f107 0118 	add.w	r1, r7, #24
 8100a2a:	3102      	adds	r1, #2
 8100a2c:	2364      	movs	r3, #100	; 0x64
 8100a2e:	2201      	movs	r2, #1
 8100a30:	4855      	ldr	r0, [pc, #340]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100a32:	f003 f9db 	bl	8103dec <HAL_SPI_Receive>
 8100a36:	4603      	mov	r3, r0
 8100a38:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100a3a:	f107 0118 	add.w	r1, r7, #24
 8100a3e:	2364      	movs	r3, #100	; 0x64
 8100a40:	2201      	movs	r2, #1
 8100a42:	4851      	ldr	r0, [pc, #324]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100a44:	f003 f9d2 	bl	8103dec <HAL_SPI_Receive>
 8100a48:	4603      	mov	r3, r0
 8100a4a:	777b      	strb	r3, [r7, #29]
		*(va + i)= app.data_32;
 8100a4c:	69b9      	ldr	r1, [r7, #24]
 8100a4e:	8bfb      	ldrh	r3, [r7, #30]
 8100a50:	009b      	lsls	r3, r3, #2
 8100a52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8100a54:	4413      	add	r3, r2
 8100a56:	460a      	mov	r2, r1
 8100a58:	601a      	str	r2, [r3, #0]

		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100a5a:	f107 0118 	add.w	r1, r7, #24
 8100a5e:	3102      	adds	r1, #2
 8100a60:	2364      	movs	r3, #100	; 0x64
 8100a62:	2201      	movs	r2, #1
 8100a64:	4848      	ldr	r0, [pc, #288]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100a66:	f003 f9c1 	bl	8103dec <HAL_SPI_Receive>
 8100a6a:	4603      	mov	r3, r0
 8100a6c:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100a6e:	f107 0118 	add.w	r1, r7, #24
 8100a72:	2364      	movs	r3, #100	; 0x64
 8100a74:	2201      	movs	r2, #1
 8100a76:	4844      	ldr	r0, [pc, #272]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100a78:	f003 f9b8 	bl	8103dec <HAL_SPI_Receive>
 8100a7c:	4603      	mov	r3, r0
 8100a7e:	777b      	strb	r3, [r7, #29]
		*(ib + i)= app.data_32;
 8100a80:	69b9      	ldr	r1, [r7, #24]
 8100a82:	8bfb      	ldrh	r3, [r7, #30]
 8100a84:	009b      	lsls	r3, r3, #2
 8100a86:	687a      	ldr	r2, [r7, #4]
 8100a88:	4413      	add	r3, r2
 8100a8a:	460a      	mov	r2, r1
 8100a8c:	601a      	str	r2, [r3, #0]
		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100a8e:	f107 0118 	add.w	r1, r7, #24
 8100a92:	3102      	adds	r1, #2
 8100a94:	2364      	movs	r3, #100	; 0x64
 8100a96:	2201      	movs	r2, #1
 8100a98:	483b      	ldr	r0, [pc, #236]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100a9a:	f003 f9a7 	bl	8103dec <HAL_SPI_Receive>
 8100a9e:	4603      	mov	r3, r0
 8100aa0:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100aa2:	f107 0118 	add.w	r1, r7, #24
 8100aa6:	2364      	movs	r3, #100	; 0x64
 8100aa8:	2201      	movs	r2, #1
 8100aaa:	4837      	ldr	r0, [pc, #220]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100aac:	f003 f99e 	bl	8103dec <HAL_SPI_Receive>
 8100ab0:	4603      	mov	r3, r0
 8100ab2:	777b      	strb	r3, [r7, #29]
		*(vb + i)= app.data_32;
 8100ab4:	69b9      	ldr	r1, [r7, #24]
 8100ab6:	8bfb      	ldrh	r3, [r7, #30]
 8100ab8:	009b      	lsls	r3, r3, #2
 8100aba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8100abc:	4413      	add	r3, r2
 8100abe:	460a      	mov	r2, r1
 8100ac0:	601a      	str	r2, [r3, #0]

		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100ac2:	f107 0118 	add.w	r1, r7, #24
 8100ac6:	3102      	adds	r1, #2
 8100ac8:	2364      	movs	r3, #100	; 0x64
 8100aca:	2201      	movs	r2, #1
 8100acc:	482e      	ldr	r0, [pc, #184]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100ace:	f003 f98d 	bl	8103dec <HAL_SPI_Receive>
 8100ad2:	4603      	mov	r3, r0
 8100ad4:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100ad6:	f107 0118 	add.w	r1, r7, #24
 8100ada:	2364      	movs	r3, #100	; 0x64
 8100adc:	2201      	movs	r2, #1
 8100ade:	482a      	ldr	r0, [pc, #168]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100ae0:	f003 f984 	bl	8103dec <HAL_SPI_Receive>
 8100ae4:	4603      	mov	r3, r0
 8100ae6:	777b      	strb	r3, [r7, #29]
		*(ic + i)= app.data_32;
 8100ae8:	69b9      	ldr	r1, [r7, #24]
 8100aea:	8bfb      	ldrh	r3, [r7, #30]
 8100aec:	009b      	lsls	r3, r3, #2
 8100aee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8100af0:	4413      	add	r3, r2
 8100af2:	460a      	mov	r2, r1
 8100af4:	601a      	str	r2, [r3, #0]
		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100af6:	f107 0118 	add.w	r1, r7, #24
 8100afa:	3102      	adds	r1, #2
 8100afc:	2364      	movs	r3, #100	; 0x64
 8100afe:	2201      	movs	r2, #1
 8100b00:	4821      	ldr	r0, [pc, #132]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100b02:	f003 f973 	bl	8103dec <HAL_SPI_Receive>
 8100b06:	4603      	mov	r3, r0
 8100b08:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100b0a:	f107 0118 	add.w	r1, r7, #24
 8100b0e:	2364      	movs	r3, #100	; 0x64
 8100b10:	2201      	movs	r2, #1
 8100b12:	481d      	ldr	r0, [pc, #116]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100b14:	f003 f96a 	bl	8103dec <HAL_SPI_Receive>
 8100b18:	4603      	mov	r3, r0
 8100b1a:	777b      	strb	r3, [r7, #29]
		*(vc + i)= app.data_32;
 8100b1c:	69b9      	ldr	r1, [r7, #24]
 8100b1e:	8bfb      	ldrh	r3, [r7, #30]
 8100b20:	009b      	lsls	r3, r3, #2
 8100b22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8100b24:	4413      	add	r3, r2
 8100b26:	460a      	mov	r2, r1
 8100b28:	601a      	str	r2, [r3, #0]

		ret = HAL_SPI_Receive(&hspi3,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100b2a:	f107 0118 	add.w	r1, r7, #24
 8100b2e:	3102      	adds	r1, #2
 8100b30:	2364      	movs	r3, #100	; 0x64
 8100b32:	2201      	movs	r2, #1
 8100b34:	4814      	ldr	r0, [pc, #80]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100b36:	f003 f959 	bl	8103dec <HAL_SPI_Receive>
 8100b3a:	4603      	mov	r3, r0
 8100b3c:	777b      	strb	r3, [r7, #29]
		ret = HAL_SPI_Receive(&hspi3,app.data_8,SIZE_16,TIMEOUT_SPI);
 8100b3e:	f107 0118 	add.w	r1, r7, #24
 8100b42:	2364      	movs	r3, #100	; 0x64
 8100b44:	2201      	movs	r2, #1
 8100b46:	4810      	ldr	r0, [pc, #64]	; (8100b88 <ADE9000_SPI_Burst_Read_all+0x1d8>)
 8100b48:	f003 f950 	bl	8103dec <HAL_SPI_Receive>
 8100b4c:	4603      	mov	r3, r0
 8100b4e:	777b      	strb	r3, [r7, #29]
		*(in + i)= app.data_32;
 8100b50:	69b9      	ldr	r1, [r7, #24]
 8100b52:	8bfb      	ldrh	r3, [r7, #30]
 8100b54:	009b      	lsls	r3, r3, #2
 8100b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8100b58:	4413      	add	r3, r2
 8100b5a:	460a      	mov	r2, r1
 8100b5c:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0; i<n; i++){
 8100b5e:	8bfb      	ldrh	r3, [r7, #30]
 8100b60:	3301      	adds	r3, #1
 8100b62:	83fb      	strh	r3, [r7, #30]
 8100b64:	8bfa      	ldrh	r2, [r7, #30]
 8100b66:	89bb      	ldrh	r3, [r7, #12]
 8100b68:	429a      	cmp	r2, r3
 8100b6a:	f4ff af42 	bcc.w	81009f2 <ADE9000_SPI_Burst_Read_all+0x42>

	}

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100b6e:	2201      	movs	r2, #1
 8100b70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100b74:	4803      	ldr	r0, [pc, #12]	; (8100b84 <ADE9000_SPI_Burst_Read_all+0x1d4>)
 8100b76:	f001 f83d 	bl	8101bf4 <HAL_GPIO_WritePin>
}
 8100b7a:	bf00      	nop
 8100b7c:	3720      	adds	r7, #32
 8100b7e:	46bd      	mov	sp, r7
 8100b80:	bd80      	pop	{r7, pc}
 8100b82:	bf00      	nop
 8100b84:	58021800 	.word	0x58021800
 8100b88:	1000012c 	.word	0x1000012c

08100b8c <ADE9000_Conv_ADC>:

void ADE9000_Conv_ADC(int32_t* data, uint32_t n){
 8100b8c:	b580      	push	{r7, lr}
 8100b8e:	b084      	sub	sp, #16
 8100b90:	af00      	add	r7, sp, #0
 8100b92:	6078      	str	r0, [r7, #4]
 8100b94:	6039      	str	r1, [r7, #0]
	printf("convertion\r\n");
 8100b96:	481f      	ldr	r0, [pc, #124]	; (8100c14 <ADE9000_Conv_ADC+0x88>)
 8100b98:	f005 f8a0 	bl	8105cdc <puts>
	int32_t app;
	for(uint32_t i=0; i<n; i++){
 8100b9c:	2300      	movs	r3, #0
 8100b9e:	60bb      	str	r3, [r7, #8]
 8100ba0:	e02e      	b.n	8100c00 <ADE9000_Conv_ADC+0x74>
		app = *(data + i);
 8100ba2:	68bb      	ldr	r3, [r7, #8]
 8100ba4:	009b      	lsls	r3, r3, #2
 8100ba6:	687a      	ldr	r2, [r7, #4]
 8100ba8:	4413      	add	r3, r2
 8100baa:	681b      	ldr	r3, [r3, #0]
 8100bac:	60fb      	str	r3, [r7, #12]
		if((app & 0x0000000F)!=0) {
 8100bae:	68fb      	ldr	r3, [r7, #12]
 8100bb0:	f003 030f 	and.w	r3, r3, #15
 8100bb4:	2b00      	cmp	r3, #0
 8100bb6:	d002      	beq.n	8100bbe <ADE9000_Conv_ADC+0x32>
			printf("Error ADC code\r\n");
 8100bb8:	4817      	ldr	r0, [pc, #92]	; (8100c18 <ADE9000_Conv_ADC+0x8c>)
 8100bba:	f005 f88f 	bl	8105cdc <puts>
		}
		if ((app &0xF0000000)==0xF0000000){
 8100bbe:	68fb      	ldr	r3, [r7, #12]
 8100bc0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100bc4:	f1b3 4f70 	cmp.w	r3, #4026531840	; 0xf0000000
 8100bc8:	d105      	bne.n	8100bd6 <ADE9000_Conv_ADC+0x4a>
			app = ((app>>4)|0xF0000000);
 8100bca:	68fb      	ldr	r3, [r7, #12]
 8100bcc:	111b      	asrs	r3, r3, #4
 8100bce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8100bd2:	60fb      	str	r3, [r7, #12]
 8100bd4:	e00b      	b.n	8100bee <ADE9000_Conv_ADC+0x62>
		}else if((app &0xF0000000)==0x00000000) {
 8100bd6:	68fb      	ldr	r3, [r7, #12]
 8100bd8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8100bdc:	2b00      	cmp	r3, #0
 8100bde:	d103      	bne.n	8100be8 <ADE9000_Conv_ADC+0x5c>
			app = ((app>>4)|0x00000000);
 8100be0:	68fb      	ldr	r3, [r7, #12]
 8100be2:	111b      	asrs	r3, r3, #4
 8100be4:	60fb      	str	r3, [r7, #12]
 8100be6:	e002      	b.n	8100bee <ADE9000_Conv_ADC+0x62>
		}
		else {
			printf("Error ADC code\r\n");
 8100be8:	480b      	ldr	r0, [pc, #44]	; (8100c18 <ADE9000_Conv_ADC+0x8c>)
 8100bea:	f005 f877 	bl	8105cdc <puts>
		}
		*(data+i) = app;
 8100bee:	68bb      	ldr	r3, [r7, #8]
 8100bf0:	009b      	lsls	r3, r3, #2
 8100bf2:	687a      	ldr	r2, [r7, #4]
 8100bf4:	4413      	add	r3, r2
 8100bf6:	68fa      	ldr	r2, [r7, #12]
 8100bf8:	601a      	str	r2, [r3, #0]
	for(uint32_t i=0; i<n; i++){
 8100bfa:	68bb      	ldr	r3, [r7, #8]
 8100bfc:	3301      	adds	r3, #1
 8100bfe:	60bb      	str	r3, [r7, #8]
 8100c00:	68ba      	ldr	r2, [r7, #8]
 8100c02:	683b      	ldr	r3, [r7, #0]
 8100c04:	429a      	cmp	r2, r3
 8100c06:	d3cc      	bcc.n	8100ba2 <ADE9000_Conv_ADC+0x16>
	}

}
 8100c08:	bf00      	nop
 8100c0a:	bf00      	nop
 8100c0c:	3710      	adds	r7, #16
 8100c0e:	46bd      	mov	sp, r7
 8100c10:	bd80      	pop	{r7, pc}
 8100c12:	bf00      	nop
 8100c14:	08106c44 	.word	0x08106c44
 8100c18:	08106c50 	.word	0x08106c50

08100c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100c1c:	b580      	push	{r7, lr}
 8100c1e:	f5ad 5de1 	sub.w	sp, sp, #7200	; 0x1c20
 8100c22:	af06      	add	r7, sp, #24

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100c24:	4b51      	ldr	r3, [pc, #324]	; (8100d6c <main+0x150>)
 8100c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c2a:	4a50      	ldr	r2, [pc, #320]	; (8100d6c <main+0x150>)
 8100c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c34:	4b4d      	ldr	r3, [pc, #308]	; (8100d6c <main+0x150>)
 8100c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c3a:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 8100c3e:	f107 0308 	add.w	r3, r7, #8
 8100c42:	3b04      	subs	r3, #4
 8100c44:	601a      	str	r2, [r3, #0]
 8100c46:	f107 0308 	add.w	r3, r7, #8
 8100c4a:	3b04      	subs	r3, #4
 8100c4c:	681b      	ldr	r3, [r3, #0]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c4e:	2001      	movs	r0, #1
 8100c50:	f001 f804 	bl	8101c5c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100c54:	f001 f88e 	bl	8101d74 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100c58:	2201      	movs	r2, #1
 8100c5a:	2102      	movs	r1, #2
 8100c5c:	2000      	movs	r0, #0
 8100c5e:	f001 f80f 	bl	8101c80 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100c62:	4b43      	ldr	r3, [pc, #268]	; (8100d70 <main+0x154>)
 8100c64:	681b      	ldr	r3, [r3, #0]
 8100c66:	091b      	lsrs	r3, r3, #4
 8100c68:	f003 030f 	and.w	r3, r3, #15
 8100c6c:	2b07      	cmp	r3, #7
 8100c6e:	d108      	bne.n	8100c82 <main+0x66>
 8100c70:	4b40      	ldr	r3, [pc, #256]	; (8100d74 <main+0x158>)
 8100c72:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100c76:	4a3f      	ldr	r2, [pc, #252]	; (8100d74 <main+0x158>)
 8100c78:	f043 0301 	orr.w	r3, r3, #1
 8100c7c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100c80:	e007      	b.n	8100c92 <main+0x76>
 8100c82:	4b3c      	ldr	r3, [pc, #240]	; (8100d74 <main+0x158>)
 8100c84:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100c88:	4a3a      	ldr	r2, [pc, #232]	; (8100d74 <main+0x158>)
 8100c8a:	f043 0301 	orr.w	r3, r3, #1
 8100c8e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100c92:	f000 fc03 	bl	810149c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100c96:	f000 f913 	bl	8100ec0 <MX_GPIO_Init>
  MX_SPI3_Init();
 8100c9a:	f000 f86f 	bl	8100d7c <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8100c9e:	f000 f8c3 	bl	8100e28 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  uint32_t value_reg_32;

  ADE9000_Power();
 8100ca2:	f7ff fd05 	bl	81006b0 <ADE9000_Power>

  ADE9000_Setup();
 8100ca6:	f7ff fe01 	bl	81008ac <ADE9000_Setup>
  printf("start buffer\r\n");
 8100caa:	4833      	ldr	r0, [pc, #204]	; (8100d78 <main+0x15c>)
 8100cac:	f005 f816 	bl	8105cdc <puts>

  Start_Waveform_Buffer();
 8100cb0:	f7ff fe5a 	bl	8100968 <Start_Waveform_Buffer>
  HAL_Delay(2000);
 8100cb4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8100cb8:	f000 fca4 	bl	8101604 <HAL_Delay>



  int32_t ia [BURST_READ_N],ib [BURST_READ_N],ic [BURST_READ_N],in [BURST_READ_N];
  int32_t va[BURST_READ_N],vb[BURST_READ_N],vc [BURST_READ_N];
  ADE9000_SPI_Burst_Read_all(WAVEFORM_BUFFER_START_ADDR, BURST_READ_N,ia,ib,ic,in,va,vb,vc);
 8100cbc:	f507 51a0 	add.w	r1, r7, #5120	; 0x1400
 8100cc0:	f101 0108 	add.w	r1, r1, #8
 8100cc4:	f507 52c0 	add.w	r2, r7, #6144	; 0x1800
 8100cc8:	f102 0208 	add.w	r2, r2, #8
 8100ccc:	f107 0308 	add.w	r3, r7, #8
 8100cd0:	9304      	str	r3, [sp, #16]
 8100cd2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8100cd6:	9303      	str	r3, [sp, #12]
 8100cd8:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8100cdc:	9302      	str	r3, [sp, #8]
 8100cde:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8100ce2:	9301      	str	r3, [sp, #4]
 8100ce4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8100ce8:	f103 0308 	add.w	r3, r3, #8
 8100cec:	9300      	str	r3, [sp, #0]
 8100cee:	460b      	mov	r3, r1
 8100cf0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8100cf4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8100cf8:	f7ff fe5a 	bl	81009b0 <ADE9000_SPI_Burst_Read_all>
  ADE9000_Conv_ADC(ia,BURST_READ_N);
 8100cfc:	f507 53c0 	add.w	r3, r7, #6144	; 0x1800
 8100d00:	f103 0308 	add.w	r3, r3, #8
 8100d04:	f44f 7180 	mov.w	r1, #256	; 0x100
 8100d08:	4618      	mov	r0, r3
 8100d0a:	f7ff ff3f 	bl	8100b8c <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(ib,BURST_READ_N);
 8100d0e:	f507 53a0 	add.w	r3, r7, #5120	; 0x1400
 8100d12:	f103 0308 	add.w	r3, r3, #8
 8100d16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8100d1a:	4618      	mov	r0, r3
 8100d1c:	f7ff ff36 	bl	8100b8c <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(ic,BURST_READ_N);
 8100d20:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8100d24:	f103 0308 	add.w	r3, r3, #8
 8100d28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8100d2c:	4618      	mov	r0, r3
 8100d2e:	f7ff ff2d 	bl	8100b8c <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(in,BURST_READ_N);
 8100d32:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 8100d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8100d3a:	4618      	mov	r0, r3
 8100d3c:	f7ff ff26 	bl	8100b8c <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(va,BURST_READ_N);
 8100d40:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8100d44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8100d48:	4618      	mov	r0, r3
 8100d4a:	f7ff ff1f 	bl	8100b8c <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(vb,BURST_READ_N);
 8100d4e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8100d52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8100d56:	4618      	mov	r0, r3
 8100d58:	f7ff ff18 	bl	8100b8c <ADE9000_Conv_ADC>
  ADE9000_Conv_ADC(vc,BURST_READ_N);
 8100d5c:	f107 0308 	add.w	r3, r7, #8
 8100d60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8100d64:	4618      	mov	r0, r3
 8100d66:	f7ff ff11 	bl	8100b8c <ADE9000_Conv_ADC>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100d6a:	e7fe      	b.n	8100d6a <main+0x14e>
 8100d6c:	58024400 	.word	0x58024400
 8100d70:	e000ed00 	.word	0xe000ed00
 8100d74:	58026400 	.word	0x58026400
 8100d78:	08106c60 	.word	0x08106c60

08100d7c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8100d7c:	b580      	push	{r7, lr}
 8100d7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8100d80:	4b27      	ldr	r3, [pc, #156]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100d82:	4a28      	ldr	r2, [pc, #160]	; (8100e24 <MX_SPI3_Init+0xa8>)
 8100d84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8100d86:	4b26      	ldr	r3, [pc, #152]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100d88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100d8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8100d8e:	4b24      	ldr	r3, [pc, #144]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100d90:	2200      	movs	r2, #0
 8100d92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8100d94:	4b22      	ldr	r3, [pc, #136]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100d96:	220f      	movs	r2, #15
 8100d98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100d9a:	4b21      	ldr	r3, [pc, #132]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100d9c:	2200      	movs	r2, #0
 8100d9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100da0:	4b1f      	ldr	r3, [pc, #124]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100da2:	2200      	movs	r2, #0
 8100da4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8100da6:	4b1e      	ldr	r3, [pc, #120]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100da8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8100dac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8100dae:	4b1c      	ldr	r3, [pc, #112]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100db0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8100db4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100db6:	4b1a      	ldr	r3, [pc, #104]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100db8:	2200      	movs	r2, #0
 8100dba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8100dbc:	4b18      	ldr	r3, [pc, #96]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100dbe:	2200      	movs	r2, #0
 8100dc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100dc2:	4b17      	ldr	r3, [pc, #92]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100dc4:	2200      	movs	r2, #0
 8100dc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8100dc8:	4b15      	ldr	r3, [pc, #84]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100dca:	2200      	movs	r2, #0
 8100dcc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100dce:	4b14      	ldr	r3, [pc, #80]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100dd0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100dd4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100dd6:	4b12      	ldr	r3, [pc, #72]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100dd8:	2200      	movs	r2, #0
 8100dda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100ddc:	4b10      	ldr	r3, [pc, #64]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100dde:	2200      	movs	r2, #0
 8100de0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100de2:	4b0f      	ldr	r3, [pc, #60]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100de4:	2200      	movs	r2, #0
 8100de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100de8:	4b0d      	ldr	r3, [pc, #52]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100dea:	2200      	movs	r2, #0
 8100dec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100dee:	4b0c      	ldr	r3, [pc, #48]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100df0:	2200      	movs	r2, #0
 8100df2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100df4:	4b0a      	ldr	r3, [pc, #40]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100df6:	2200      	movs	r2, #0
 8100df8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100dfa:	4b09      	ldr	r3, [pc, #36]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100e00:	4b07      	ldr	r3, [pc, #28]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100e02:	2200      	movs	r2, #0
 8100e04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100e06:	4b06      	ldr	r3, [pc, #24]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100e08:	2200      	movs	r2, #0
 8100e0a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8100e0c:	4804      	ldr	r0, [pc, #16]	; (8100e20 <MX_SPI3_Init+0xa4>)
 8100e0e:	f002 fcf9 	bl	8103804 <HAL_SPI_Init>
 8100e12:	4603      	mov	r3, r0
 8100e14:	2b00      	cmp	r3, #0
 8100e16:	d001      	beq.n	8100e1c <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8100e18:	f000 f93c 	bl	8101094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8100e1c:	bf00      	nop
 8100e1e:	bd80      	pop	{r7, pc}
 8100e20:	1000012c 	.word	0x1000012c
 8100e24:	40003c00 	.word	0x40003c00

08100e28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100e28:	b580      	push	{r7, lr}
 8100e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100e2c:	4b22      	ldr	r3, [pc, #136]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e2e:	4a23      	ldr	r2, [pc, #140]	; (8100ebc <MX_USART3_UART_Init+0x94>)
 8100e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100e32:	4b21      	ldr	r3, [pc, #132]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100e3a:	4b1f      	ldr	r3, [pc, #124]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e3c:	2200      	movs	r2, #0
 8100e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100e40:	4b1d      	ldr	r3, [pc, #116]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e42:	2200      	movs	r2, #0
 8100e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100e46:	4b1c      	ldr	r3, [pc, #112]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e48:	2200      	movs	r2, #0
 8100e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100e4c:	4b1a      	ldr	r3, [pc, #104]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e4e:	220c      	movs	r2, #12
 8100e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100e52:	4b19      	ldr	r3, [pc, #100]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e54:	2200      	movs	r2, #0
 8100e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100e58:	4b17      	ldr	r3, [pc, #92]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e5a:	2200      	movs	r2, #0
 8100e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100e5e:	4b16      	ldr	r3, [pc, #88]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e60:	2200      	movs	r2, #0
 8100e62:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100e64:	4b14      	ldr	r3, [pc, #80]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e66:	2200      	movs	r2, #0
 8100e68:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100e6a:	4b13      	ldr	r3, [pc, #76]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e6c:	2200      	movs	r2, #0
 8100e6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100e70:	4811      	ldr	r0, [pc, #68]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e72:	f003 fd7d 	bl	8104970 <HAL_UART_Init>
 8100e76:	4603      	mov	r3, r0
 8100e78:	2b00      	cmp	r3, #0
 8100e7a:	d001      	beq.n	8100e80 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100e7c:	f000 f90a 	bl	8101094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100e80:	2100      	movs	r1, #0
 8100e82:	480d      	ldr	r0, [pc, #52]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e84:	f004 fda8 	bl	81059d8 <HAL_UARTEx_SetTxFifoThreshold>
 8100e88:	4603      	mov	r3, r0
 8100e8a:	2b00      	cmp	r3, #0
 8100e8c:	d001      	beq.n	8100e92 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100e8e:	f000 f901 	bl	8101094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100e92:	2100      	movs	r1, #0
 8100e94:	4808      	ldr	r0, [pc, #32]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100e96:	f004 fddd 	bl	8105a54 <HAL_UARTEx_SetRxFifoThreshold>
 8100e9a:	4603      	mov	r3, r0
 8100e9c:	2b00      	cmp	r3, #0
 8100e9e:	d001      	beq.n	8100ea4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100ea0:	f000 f8f8 	bl	8101094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100ea4:	4804      	ldr	r0, [pc, #16]	; (8100eb8 <MX_USART3_UART_Init+0x90>)
 8100ea6:	f004 fd5e 	bl	8105966 <HAL_UARTEx_DisableFifoMode>
 8100eaa:	4603      	mov	r3, r0
 8100eac:	2b00      	cmp	r3, #0
 8100eae:	d001      	beq.n	8100eb4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100eb0:	f000 f8f0 	bl	8101094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100eb4:	bf00      	nop
 8100eb6:	bd80      	pop	{r7, pc}
 8100eb8:	1000009c 	.word	0x1000009c
 8100ebc:	40004800 	.word	0x40004800

08100ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100ec0:	b580      	push	{r7, lr}
 8100ec2:	b08a      	sub	sp, #40	; 0x28
 8100ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ec6:	f107 0314 	add.w	r3, r7, #20
 8100eca:	2200      	movs	r2, #0
 8100ecc:	601a      	str	r2, [r3, #0]
 8100ece:	605a      	str	r2, [r3, #4]
 8100ed0:	609a      	str	r2, [r3, #8]
 8100ed2:	60da      	str	r2, [r3, #12]
 8100ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100ed6:	4b47      	ldr	r3, [pc, #284]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100edc:	4a45      	ldr	r2, [pc, #276]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100ede:	f043 0310 	orr.w	r3, r3, #16
 8100ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100ee6:	4b43      	ldr	r3, [pc, #268]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100eec:	f003 0310 	and.w	r3, r3, #16
 8100ef0:	613b      	str	r3, [r7, #16]
 8100ef2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100ef4:	4b3f      	ldr	r3, [pc, #252]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100efa:	4a3e      	ldr	r2, [pc, #248]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100efc:	f043 0308 	orr.w	r3, r3, #8
 8100f00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f04:	4b3b      	ldr	r3, [pc, #236]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f0a:	f003 0308 	and.w	r3, r3, #8
 8100f0e:	60fb      	str	r3, [r7, #12]
 8100f10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100f12:	4b38      	ldr	r3, [pc, #224]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f18:	4a36      	ldr	r2, [pc, #216]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f22:	4b34      	ldr	r3, [pc, #208]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100f2c:	60bb      	str	r3, [r7, #8]
 8100f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100f30:	4b30      	ldr	r3, [pc, #192]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f36:	4a2f      	ldr	r2, [pc, #188]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100f38:	f043 0302 	orr.w	r3, r3, #2
 8100f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100f40:	4b2c      	ldr	r3, [pc, #176]	; (8100ff4 <MX_GPIO_Init+0x134>)
 8100f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100f46:	f003 0302 	and.w	r3, r3, #2
 8100f4a:	607b      	str	r3, [r7, #4]
 8100f4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADE9000_Reset_Pin|ADE9000_PM1_Pin, GPIO_PIN_RESET);
 8100f4e:	2200      	movs	r2, #0
 8100f50:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8100f54:	4828      	ldr	r0, [pc, #160]	; (8100ff8 <MX_GPIO_Init+0x138>)
 8100f56:	f000 fe4d 	bl	8101bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADE9000_CS_GPIO_Port, ADE9000_CS_Pin, GPIO_PIN_SET);
 8100f5a:	2201      	movs	r2, #1
 8100f5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100f60:	4826      	ldr	r0, [pc, #152]	; (8100ffc <MX_GPIO_Init+0x13c>)
 8100f62:	f000 fe47 	bl	8101bf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADE9000_Reset_Pin ADE9000_PM1_Pin */
  GPIO_InitStruct.Pin = ADE9000_Reset_Pin|ADE9000_PM1_Pin;
 8100f66:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8100f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100f6c:	2301      	movs	r3, #1
 8100f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f70:	2300      	movs	r3, #0
 8100f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100f74:	2300      	movs	r3, #0
 8100f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100f78:	f107 0314 	add.w	r3, r7, #20
 8100f7c:	4619      	mov	r1, r3
 8100f7e:	481e      	ldr	r0, [pc, #120]	; (8100ff8 <MX_GPIO_Init+0x138>)
 8100f80:	f000 fc88 	bl	8101894 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ1_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ1_Pin;
 8100f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8100f8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8100f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100f90:	2300      	movs	r3, #0
 8100f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ1_GPIO_Port, &GPIO_InitStruct);
 8100f94:	f107 0314 	add.w	r3, r7, #20
 8100f98:	4619      	mov	r1, r3
 8100f9a:	4817      	ldr	r0, [pc, #92]	; (8100ff8 <MX_GPIO_Init+0x138>)
 8100f9c:	f000 fc7a 	bl	8101894 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_CS_Pin */
  GPIO_InitStruct.Pin = ADE9000_CS_Pin;
 8100fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100fa6:	2301      	movs	r3, #1
 8100fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100faa:	2300      	movs	r3, #0
 8100fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100fae:	2300      	movs	r3, #0
 8100fb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADE9000_CS_GPIO_Port, &GPIO_InitStruct);
 8100fb2:	f107 0314 	add.w	r3, r7, #20
 8100fb6:	4619      	mov	r1, r3
 8100fb8:	4810      	ldr	r0, [pc, #64]	; (8100ffc <MX_GPIO_Init+0x13c>)
 8100fba:	f000 fc6b 	bl	8101894 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ0_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ0_Pin;
 8100fbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8100fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8100fc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8100fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100fca:	2300      	movs	r3, #0
 8100fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ0_GPIO_Port, &GPIO_InitStruct);
 8100fce:	f107 0314 	add.w	r3, r7, #20
 8100fd2:	4619      	mov	r1, r3
 8100fd4:	4809      	ldr	r0, [pc, #36]	; (8100ffc <MX_GPIO_Init+0x13c>)
 8100fd6:	f000 fc5d 	bl	8101894 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8100fda:	2200      	movs	r2, #0
 8100fdc:	2100      	movs	r1, #0
 8100fde:	2028      	movs	r0, #40	; 0x28
 8100fe0:	f000 fc0f 	bl	8101802 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8100fe4:	2028      	movs	r0, #40	; 0x28
 8100fe6:	f000 fc26 	bl	8101836 <HAL_NVIC_EnableIRQ>

}
 8100fea:	bf00      	nop
 8100fec:	3728      	adds	r7, #40	; 0x28
 8100fee:	46bd      	mov	sp, r7
 8100ff0:	bd80      	pop	{r7, pc}
 8100ff2:	bf00      	nop
 8100ff4:	58024400 	.word	0x58024400
 8100ff8:	58021000 	.word	0x58021000
 8100ffc:	58021800 	.word	0x58021800

08101000 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8101000:	b580      	push	{r7, lr}
 8101002:	b082      	sub	sp, #8
 8101004:	af00      	add	r7, sp, #0
 8101006:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8101008:	1d39      	adds	r1, r7, #4
 810100a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810100e:	2201      	movs	r2, #1
 8101010:	4803      	ldr	r0, [pc, #12]	; (8101020 <__io_putchar+0x20>)
 8101012:	f003 fcfd 	bl	8104a10 <HAL_UART_Transmit>
	return ch;
 8101016:	687b      	ldr	r3, [r7, #4]
}
 8101018:	4618      	mov	r0, r3
 810101a:	3708      	adds	r7, #8
 810101c:	46bd      	mov	sp, r7
 810101e:	bd80      	pop	{r7, pc}
 8101020:	1000009c 	.word	0x1000009c

08101024 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8101024:	b580      	push	{r7, lr}
 8101026:	b084      	sub	sp, #16
 8101028:	af00      	add	r7, sp, #0
 810102a:	4603      	mov	r3, r0
 810102c:	80fb      	strh	r3, [r7, #6]
	// If the interrupt source is pin IRQ0
	printf("int \r\n");
 810102e:	4815      	ldr	r0, [pc, #84]	; (8101084 <HAL_GPIO_EXTI_Callback+0x60>)
 8101030:	f004 fe54 	bl	8105cdc <puts>
	if (GPIO_Pin == ADE9000_IRQ0_Pin)
 8101034:	88fb      	ldrh	r3, [r7, #6]
 8101036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810103a:	d118      	bne.n	810106e <HAL_GPIO_EXTI_Callback+0x4a>
	{
		printf("IRQ0 interrupt\r\n");
 810103c:	4812      	ldr	r0, [pc, #72]	; (8101088 <HAL_GPIO_EXTI_Callback+0x64>)
 810103e:	f004 fe4d 	bl	8105cdc <puts>

		uint32_t value_reg_32 = ADE9000_SPI_Read_32(ADDR_STATUS0);
 8101042:	f240 4002 	movw	r0, #1026	; 0x402
 8101046:	f7ff fb85 	bl	8100754 <ADE9000_SPI_Read_32>
 810104a:	60f8      	str	r0, [r7, #12]
		  if((value_reg_32 & 0x00020000)!=0){
 810104c:	68fb      	ldr	r3, [r7, #12]
 810104e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101052:	2b00      	cmp	r3, #0
 8101054:	d00b      	beq.n	810106e <HAL_GPIO_EXTI_Callback+0x4a>
			  printf("Fullpage interrupt\r\n");
 8101056:	480d      	ldr	r0, [pc, #52]	; (810108c <HAL_GPIO_EXTI_Callback+0x68>)
 8101058:	f004 fe40 	bl	8105cdc <puts>
			 value_reg_32 = value_reg_32 & 0x00020000;
 810105c:	68fb      	ldr	r3, [r7, #12]
 810105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101062:	60fb      	str	r3, [r7, #12]
			 ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8101064:	68f9      	ldr	r1, [r7, #12]
 8101066:	f240 4002 	movw	r0, #1026	; 0x402
 810106a:	f7ff fbe3 	bl	8100834 <ADE9000_SPI_Write_32>
		  }
	}
	if (GPIO_Pin == ADE9000_IRQ1_Pin)
 810106e:	88fb      	ldrh	r3, [r7, #6]
 8101070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101074:	d102      	bne.n	810107c <HAL_GPIO_EXTI_Callback+0x58>
		{
			printf("IRQ1 interrupt\r\n");
 8101076:	4806      	ldr	r0, [pc, #24]	; (8101090 <HAL_GPIO_EXTI_Callback+0x6c>)
 8101078:	f004 fe30 	bl	8105cdc <puts>
		}
}
 810107c:	bf00      	nop
 810107e:	3710      	adds	r7, #16
 8101080:	46bd      	mov	sp, r7
 8101082:	bd80      	pop	{r7, pc}
 8101084:	08106c70 	.word	0x08106c70
 8101088:	08106c78 	.word	0x08106c78
 810108c:	08106c88 	.word	0x08106c88
 8101090:	08106c9c 	.word	0x08106c9c

08101094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101094:	b480      	push	{r7}
 8101096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101098:	b672      	cpsid	i
}
 810109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810109c:	e7fe      	b.n	810109c <Error_Handler+0x8>
	...

081010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81010a0:	b480      	push	{r7}
 81010a2:	b083      	sub	sp, #12
 81010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81010a6:	4b0a      	ldr	r3, [pc, #40]	; (81010d0 <HAL_MspInit+0x30>)
 81010a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81010ac:	4a08      	ldr	r2, [pc, #32]	; (81010d0 <HAL_MspInit+0x30>)
 81010ae:	f043 0302 	orr.w	r3, r3, #2
 81010b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81010b6:	4b06      	ldr	r3, [pc, #24]	; (81010d0 <HAL_MspInit+0x30>)
 81010b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81010bc:	f003 0302 	and.w	r3, r3, #2
 81010c0:	607b      	str	r3, [r7, #4]
 81010c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81010c4:	bf00      	nop
 81010c6:	370c      	adds	r7, #12
 81010c8:	46bd      	mov	sp, r7
 81010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ce:	4770      	bx	lr
 81010d0:	58024400 	.word	0x58024400

081010d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 81010d4:	b580      	push	{r7, lr}
 81010d6:	b0b8      	sub	sp, #224	; 0xe0
 81010d8:	af00      	add	r7, sp, #0
 81010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81010e0:	2200      	movs	r2, #0
 81010e2:	601a      	str	r2, [r3, #0]
 81010e4:	605a      	str	r2, [r3, #4]
 81010e6:	609a      	str	r2, [r3, #8]
 81010e8:	60da      	str	r2, [r3, #12]
 81010ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81010ec:	f107 0310 	add.w	r3, r7, #16
 81010f0:	22bc      	movs	r2, #188	; 0xbc
 81010f2:	2100      	movs	r1, #0
 81010f4:	4618      	mov	r0, r3
 81010f6:	f004 fd63 	bl	8105bc0 <memset>
  if(hspi->Instance==SPI3)
 81010fa:	687b      	ldr	r3, [r7, #4]
 81010fc:	681b      	ldr	r3, [r3, #0]
 81010fe:	4a2f      	ldr	r2, [pc, #188]	; (81011bc <HAL_SPI_MspInit+0xe8>)
 8101100:	4293      	cmp	r3, r2
 8101102:	d157      	bne.n	81011b4 <HAL_SPI_MspInit+0xe0>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8101104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101108:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 810110a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 810110e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101110:	f107 0310 	add.w	r3, r7, #16
 8101114:	4618      	mov	r0, r3
 8101116:	f001 f813 	bl	8102140 <HAL_RCCEx_PeriphCLKConfig>
 810111a:	4603      	mov	r3, r0
 810111c:	2b00      	cmp	r3, #0
 810111e:	d001      	beq.n	8101124 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8101120:	f7ff ffb8 	bl	8101094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8101124:	4b26      	ldr	r3, [pc, #152]	; (81011c0 <HAL_SPI_MspInit+0xec>)
 8101126:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810112a:	4a25      	ldr	r2, [pc, #148]	; (81011c0 <HAL_SPI_MspInit+0xec>)
 810112c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8101130:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101134:	4b22      	ldr	r3, [pc, #136]	; (81011c0 <HAL_SPI_MspInit+0xec>)
 8101136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810113a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810113e:	60fb      	str	r3, [r7, #12]
 8101140:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101142:	4b1f      	ldr	r3, [pc, #124]	; (81011c0 <HAL_SPI_MspInit+0xec>)
 8101144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101148:	4a1d      	ldr	r2, [pc, #116]	; (81011c0 <HAL_SPI_MspInit+0xec>)
 810114a:	f043 0302 	orr.w	r3, r3, #2
 810114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101152:	4b1b      	ldr	r3, [pc, #108]	; (81011c0 <HAL_SPI_MspInit+0xec>)
 8101154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101158:	f003 0302 	and.w	r3, r3, #2
 810115c:	60bb      	str	r3, [r7, #8]
 810115e:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8101160:	2318      	movs	r3, #24
 8101162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101166:	2302      	movs	r3, #2
 8101168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810116c:	2300      	movs	r3, #0
 810116e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101172:	2303      	movs	r3, #3
 8101174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8101178:	2306      	movs	r3, #6
 810117a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810117e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101182:	4619      	mov	r1, r3
 8101184:	480f      	ldr	r0, [pc, #60]	; (81011c4 <HAL_SPI_MspInit+0xf0>)
 8101186:	f000 fb85 	bl	8101894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810118a:	2320      	movs	r3, #32
 810118c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101190:	2302      	movs	r3, #2
 8101192:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101196:	2300      	movs	r3, #0
 8101198:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810119c:	2303      	movs	r3, #3
 810119e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 81011a2:	2307      	movs	r3, #7
 81011a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81011a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81011ac:	4619      	mov	r1, r3
 81011ae:	4805      	ldr	r0, [pc, #20]	; (81011c4 <HAL_SPI_MspInit+0xf0>)
 81011b0:	f000 fb70 	bl	8101894 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 81011b4:	bf00      	nop
 81011b6:	37e0      	adds	r7, #224	; 0xe0
 81011b8:	46bd      	mov	sp, r7
 81011ba:	bd80      	pop	{r7, pc}
 81011bc:	40003c00 	.word	0x40003c00
 81011c0:	58024400 	.word	0x58024400
 81011c4:	58020400 	.word	0x58020400

081011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81011c8:	b580      	push	{r7, lr}
 81011ca:	b0b8      	sub	sp, #224	; 0xe0
 81011cc:	af00      	add	r7, sp, #0
 81011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81011d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81011d4:	2200      	movs	r2, #0
 81011d6:	601a      	str	r2, [r3, #0]
 81011d8:	605a      	str	r2, [r3, #4]
 81011da:	609a      	str	r2, [r3, #8]
 81011dc:	60da      	str	r2, [r3, #12]
 81011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81011e0:	f107 0310 	add.w	r3, r7, #16
 81011e4:	22bc      	movs	r2, #188	; 0xbc
 81011e6:	2100      	movs	r1, #0
 81011e8:	4618      	mov	r0, r3
 81011ea:	f004 fce9 	bl	8105bc0 <memset>
  if(huart->Instance==USART3)
 81011ee:	687b      	ldr	r3, [r7, #4]
 81011f0:	681b      	ldr	r3, [r3, #0]
 81011f2:	4a25      	ldr	r2, [pc, #148]	; (8101288 <HAL_UART_MspInit+0xc0>)
 81011f4:	4293      	cmp	r3, r2
 81011f6:	d142      	bne.n	810127e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81011f8:	2302      	movs	r3, #2
 81011fa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81011fc:	2300      	movs	r3, #0
 81011fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101202:	f107 0310 	add.w	r3, r7, #16
 8101206:	4618      	mov	r0, r3
 8101208:	f000 ff9a 	bl	8102140 <HAL_RCCEx_PeriphCLKConfig>
 810120c:	4603      	mov	r3, r0
 810120e:	2b00      	cmp	r3, #0
 8101210:	d001      	beq.n	8101216 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8101212:	f7ff ff3f 	bl	8101094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101216:	4b1d      	ldr	r3, [pc, #116]	; (810128c <HAL_UART_MspInit+0xc4>)
 8101218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810121c:	4a1b      	ldr	r2, [pc, #108]	; (810128c <HAL_UART_MspInit+0xc4>)
 810121e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101222:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101226:	4b19      	ldr	r3, [pc, #100]	; (810128c <HAL_UART_MspInit+0xc4>)
 8101228:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810122c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101230:	60fb      	str	r3, [r7, #12]
 8101232:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101234:	4b15      	ldr	r3, [pc, #84]	; (810128c <HAL_UART_MspInit+0xc4>)
 8101236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810123a:	4a14      	ldr	r2, [pc, #80]	; (810128c <HAL_UART_MspInit+0xc4>)
 810123c:	f043 0308 	orr.w	r3, r3, #8
 8101240:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101244:	4b11      	ldr	r3, [pc, #68]	; (810128c <HAL_UART_MspInit+0xc4>)
 8101246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810124a:	f003 0308 	and.w	r3, r3, #8
 810124e:	60bb      	str	r3, [r7, #8]
 8101250:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101256:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810125a:	2302      	movs	r3, #2
 810125c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101260:	2300      	movs	r3, #0
 8101262:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101266:	2300      	movs	r3, #0
 8101268:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 810126c:	2307      	movs	r3, #7
 810126e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101272:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8101276:	4619      	mov	r1, r3
 8101278:	4805      	ldr	r0, [pc, #20]	; (8101290 <HAL_UART_MspInit+0xc8>)
 810127a:	f000 fb0b 	bl	8101894 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 810127e:	bf00      	nop
 8101280:	37e0      	adds	r7, #224	; 0xe0
 8101282:	46bd      	mov	sp, r7
 8101284:	bd80      	pop	{r7, pc}
 8101286:	bf00      	nop
 8101288:	40004800 	.word	0x40004800
 810128c:	58024400 	.word	0x58024400
 8101290:	58020c00 	.word	0x58020c00

08101294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101294:	b480      	push	{r7}
 8101296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8101298:	e7fe      	b.n	8101298 <NMI_Handler+0x4>

0810129a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810129a:	b480      	push	{r7}
 810129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810129e:	e7fe      	b.n	810129e <HardFault_Handler+0x4>

081012a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81012a0:	b480      	push	{r7}
 81012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81012a4:	e7fe      	b.n	81012a4 <MemManage_Handler+0x4>

081012a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81012a6:	b480      	push	{r7}
 81012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81012aa:	e7fe      	b.n	81012aa <BusFault_Handler+0x4>

081012ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81012ac:	b480      	push	{r7}
 81012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81012b0:	e7fe      	b.n	81012b0 <UsageFault_Handler+0x4>

081012b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81012b2:	b480      	push	{r7}
 81012b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81012b6:	bf00      	nop
 81012b8:	46bd      	mov	sp, r7
 81012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012be:	4770      	bx	lr

081012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81012c0:	b480      	push	{r7}
 81012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81012c4:	bf00      	nop
 81012c6:	46bd      	mov	sp, r7
 81012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012cc:	4770      	bx	lr

081012ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81012ce:	b480      	push	{r7}
 81012d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81012d2:	bf00      	nop
 81012d4:	46bd      	mov	sp, r7
 81012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012da:	4770      	bx	lr

081012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81012dc:	b580      	push	{r7, lr}
 81012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81012e0:	f000 f970 	bl	81015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81012e4:	bf00      	nop
 81012e6:	bd80      	pop	{r7, pc}

081012e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 81012e8:	b580      	push	{r7, lr}
 81012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADE9000_IRQ1_Pin);
 81012ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 81012f0:	f000 fc99 	bl	8101c26 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADE9000_PM1_Pin);
 81012f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 81012f8:	f000 fc95 	bl	8101c26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 81012fc:	bf00      	nop
 81012fe:	bd80      	pop	{r7, pc}

08101300 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101300:	b580      	push	{r7, lr}
 8101302:	b086      	sub	sp, #24
 8101304:	af00      	add	r7, sp, #0
 8101306:	60f8      	str	r0, [r7, #12]
 8101308:	60b9      	str	r1, [r7, #8]
 810130a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810130c:	2300      	movs	r3, #0
 810130e:	617b      	str	r3, [r7, #20]
 8101310:	e00a      	b.n	8101328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8101312:	f3af 8000 	nop.w
 8101316:	4601      	mov	r1, r0
 8101318:	68bb      	ldr	r3, [r7, #8]
 810131a:	1c5a      	adds	r2, r3, #1
 810131c:	60ba      	str	r2, [r7, #8]
 810131e:	b2ca      	uxtb	r2, r1
 8101320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101322:	697b      	ldr	r3, [r7, #20]
 8101324:	3301      	adds	r3, #1
 8101326:	617b      	str	r3, [r7, #20]
 8101328:	697a      	ldr	r2, [r7, #20]
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	429a      	cmp	r2, r3
 810132e:	dbf0      	blt.n	8101312 <_read+0x12>
	}

return len;
 8101330:	687b      	ldr	r3, [r7, #4]
}
 8101332:	4618      	mov	r0, r3
 8101334:	3718      	adds	r7, #24
 8101336:	46bd      	mov	sp, r7
 8101338:	bd80      	pop	{r7, pc}

0810133a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810133a:	b580      	push	{r7, lr}
 810133c:	b086      	sub	sp, #24
 810133e:	af00      	add	r7, sp, #0
 8101340:	60f8      	str	r0, [r7, #12]
 8101342:	60b9      	str	r1, [r7, #8]
 8101344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101346:	2300      	movs	r3, #0
 8101348:	617b      	str	r3, [r7, #20]
 810134a:	e009      	b.n	8101360 <_write+0x26>
	{
		__io_putchar(*ptr++);
 810134c:	68bb      	ldr	r3, [r7, #8]
 810134e:	1c5a      	adds	r2, r3, #1
 8101350:	60ba      	str	r2, [r7, #8]
 8101352:	781b      	ldrb	r3, [r3, #0]
 8101354:	4618      	mov	r0, r3
 8101356:	f7ff fe53 	bl	8101000 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 810135a:	697b      	ldr	r3, [r7, #20]
 810135c:	3301      	adds	r3, #1
 810135e:	617b      	str	r3, [r7, #20]
 8101360:	697a      	ldr	r2, [r7, #20]
 8101362:	687b      	ldr	r3, [r7, #4]
 8101364:	429a      	cmp	r2, r3
 8101366:	dbf1      	blt.n	810134c <_write+0x12>
	}
	return len;
 8101368:	687b      	ldr	r3, [r7, #4]
}
 810136a:	4618      	mov	r0, r3
 810136c:	3718      	adds	r7, #24
 810136e:	46bd      	mov	sp, r7
 8101370:	bd80      	pop	{r7, pc}

08101372 <_close>:

int _close(int file)
{
 8101372:	b480      	push	{r7}
 8101374:	b083      	sub	sp, #12
 8101376:	af00      	add	r7, sp, #0
 8101378:	6078      	str	r0, [r7, #4]
	return -1;
 810137a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810137e:	4618      	mov	r0, r3
 8101380:	370c      	adds	r7, #12
 8101382:	46bd      	mov	sp, r7
 8101384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101388:	4770      	bx	lr

0810138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810138a:	b480      	push	{r7}
 810138c:	b083      	sub	sp, #12
 810138e:	af00      	add	r7, sp, #0
 8101390:	6078      	str	r0, [r7, #4]
 8101392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8101394:	683b      	ldr	r3, [r7, #0]
 8101396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810139a:	605a      	str	r2, [r3, #4]
	return 0;
 810139c:	2300      	movs	r3, #0
}
 810139e:	4618      	mov	r0, r3
 81013a0:	370c      	adds	r7, #12
 81013a2:	46bd      	mov	sp, r7
 81013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a8:	4770      	bx	lr

081013aa <_isatty>:

int _isatty(int file)
{
 81013aa:	b480      	push	{r7}
 81013ac:	b083      	sub	sp, #12
 81013ae:	af00      	add	r7, sp, #0
 81013b0:	6078      	str	r0, [r7, #4]
	return 1;
 81013b2:	2301      	movs	r3, #1
}
 81013b4:	4618      	mov	r0, r3
 81013b6:	370c      	adds	r7, #12
 81013b8:	46bd      	mov	sp, r7
 81013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013be:	4770      	bx	lr

081013c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81013c0:	b480      	push	{r7}
 81013c2:	b085      	sub	sp, #20
 81013c4:	af00      	add	r7, sp, #0
 81013c6:	60f8      	str	r0, [r7, #12]
 81013c8:	60b9      	str	r1, [r7, #8]
 81013ca:	607a      	str	r2, [r7, #4]
	return 0;
 81013cc:	2300      	movs	r3, #0
}
 81013ce:	4618      	mov	r0, r3
 81013d0:	3714      	adds	r7, #20
 81013d2:	46bd      	mov	sp, r7
 81013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013d8:	4770      	bx	lr
	...

081013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81013dc:	b580      	push	{r7, lr}
 81013de:	b086      	sub	sp, #24
 81013e0:	af00      	add	r7, sp, #0
 81013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81013e4:	4a14      	ldr	r2, [pc, #80]	; (8101438 <_sbrk+0x5c>)
 81013e6:	4b15      	ldr	r3, [pc, #84]	; (810143c <_sbrk+0x60>)
 81013e8:	1ad3      	subs	r3, r2, r3
 81013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81013ec:	697b      	ldr	r3, [r7, #20]
 81013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81013f0:	4b13      	ldr	r3, [pc, #76]	; (8101440 <_sbrk+0x64>)
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	2b00      	cmp	r3, #0
 81013f6:	d102      	bne.n	81013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81013f8:	4b11      	ldr	r3, [pc, #68]	; (8101440 <_sbrk+0x64>)
 81013fa:	4a12      	ldr	r2, [pc, #72]	; (8101444 <_sbrk+0x68>)
 81013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81013fe:	4b10      	ldr	r3, [pc, #64]	; (8101440 <_sbrk+0x64>)
 8101400:	681a      	ldr	r2, [r3, #0]
 8101402:	687b      	ldr	r3, [r7, #4]
 8101404:	4413      	add	r3, r2
 8101406:	693a      	ldr	r2, [r7, #16]
 8101408:	429a      	cmp	r2, r3
 810140a:	d207      	bcs.n	810141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 810140c:	f004 fbae 	bl	8105b6c <__errno>
 8101410:	4603      	mov	r3, r0
 8101412:	220c      	movs	r2, #12
 8101414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101416:	f04f 33ff 	mov.w	r3, #4294967295
 810141a:	e009      	b.n	8101430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810141c:	4b08      	ldr	r3, [pc, #32]	; (8101440 <_sbrk+0x64>)
 810141e:	681b      	ldr	r3, [r3, #0]
 8101420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101422:	4b07      	ldr	r3, [pc, #28]	; (8101440 <_sbrk+0x64>)
 8101424:	681a      	ldr	r2, [r3, #0]
 8101426:	687b      	ldr	r3, [r7, #4]
 8101428:	4413      	add	r3, r2
 810142a:	4a05      	ldr	r2, [pc, #20]	; (8101440 <_sbrk+0x64>)
 810142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810142e:	68fb      	ldr	r3, [r7, #12]
}
 8101430:	4618      	mov	r0, r3
 8101432:	3718      	adds	r7, #24
 8101434:	46bd      	mov	sp, r7
 8101436:	bd80      	pop	{r7, pc}
 8101438:	10048000 	.word	0x10048000
 810143c:	00000400 	.word	0x00000400
 8101440:	10000090 	.word	0x10000090
 8101444:	10000288 	.word	0x10000288

08101448 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101448:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101480 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 810144c:	f7ff f914 	bl	8100678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101450:	480c      	ldr	r0, [pc, #48]	; (8101484 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101452:	490d      	ldr	r1, [pc, #52]	; (8101488 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101454:	4a0d      	ldr	r2, [pc, #52]	; (810148c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101458:	e002      	b.n	8101460 <LoopCopyDataInit>

0810145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 810145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 810145e:	3304      	adds	r3, #4

08101460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101464:	d3f9      	bcc.n	810145a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101466:	4a0a      	ldr	r2, [pc, #40]	; (8101490 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101468:	4c0a      	ldr	r4, [pc, #40]	; (8101494 <LoopFillZerobss+0x22>)
  movs r3, #0
 810146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810146c:	e001      	b.n	8101472 <LoopFillZerobss>

0810146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101470:	3204      	adds	r2, #4

08101472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101474:	d3fb      	bcc.n	810146e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101476:	f004 fb7f 	bl	8105b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810147a:	f7ff fbcf 	bl	8100c1c <main>
  bx  lr
 810147e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101480:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101484:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101488:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 810148c:	08106d8c 	.word	0x08106d8c
  ldr r2, =_sbss
 8101490:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 8101494:	10000284 	.word	0x10000284

08101498 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101498:	e7fe      	b.n	8101498 <ADC3_IRQHandler>
	...

0810149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810149c:	b580      	push	{r7, lr}
 810149e:	b082      	sub	sp, #8
 81014a0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81014a2:	4b28      	ldr	r3, [pc, #160]	; (8101544 <HAL_Init+0xa8>)
 81014a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81014a8:	4a26      	ldr	r2, [pc, #152]	; (8101544 <HAL_Init+0xa8>)
 81014aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81014ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81014b2:	4b24      	ldr	r3, [pc, #144]	; (8101544 <HAL_Init+0xa8>)
 81014b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81014b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81014bc:	603b      	str	r3, [r7, #0]
 81014be:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81014c0:	4b21      	ldr	r3, [pc, #132]	; (8101548 <HAL_Init+0xac>)
 81014c2:	681b      	ldr	r3, [r3, #0]
 81014c4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81014c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81014cc:	4a1e      	ldr	r2, [pc, #120]	; (8101548 <HAL_Init+0xac>)
 81014ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81014d2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81014d4:	4b1c      	ldr	r3, [pc, #112]	; (8101548 <HAL_Init+0xac>)
 81014d6:	681b      	ldr	r3, [r3, #0]
 81014d8:	4a1b      	ldr	r2, [pc, #108]	; (8101548 <HAL_Init+0xac>)
 81014da:	f043 0301 	orr.w	r3, r3, #1
 81014de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81014e0:	2003      	movs	r0, #3
 81014e2:	f000 f983 	bl	81017ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81014e6:	f000 fc53 	bl	8101d90 <HAL_RCC_GetSysClockFreq>
 81014ea:	4602      	mov	r2, r0
 81014ec:	4b15      	ldr	r3, [pc, #84]	; (8101544 <HAL_Init+0xa8>)
 81014ee:	699b      	ldr	r3, [r3, #24]
 81014f0:	0a1b      	lsrs	r3, r3, #8
 81014f2:	f003 030f 	and.w	r3, r3, #15
 81014f6:	4915      	ldr	r1, [pc, #84]	; (810154c <HAL_Init+0xb0>)
 81014f8:	5ccb      	ldrb	r3, [r1, r3]
 81014fa:	f003 031f 	and.w	r3, r3, #31
 81014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8101502:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101504:	4b0f      	ldr	r3, [pc, #60]	; (8101544 <HAL_Init+0xa8>)
 8101506:	699b      	ldr	r3, [r3, #24]
 8101508:	f003 030f 	and.w	r3, r3, #15
 810150c:	4a0f      	ldr	r2, [pc, #60]	; (810154c <HAL_Init+0xb0>)
 810150e:	5cd3      	ldrb	r3, [r2, r3]
 8101510:	f003 031f 	and.w	r3, r3, #31
 8101514:	687a      	ldr	r2, [r7, #4]
 8101516:	fa22 f303 	lsr.w	r3, r2, r3
 810151a:	4a0d      	ldr	r2, [pc, #52]	; (8101550 <HAL_Init+0xb4>)
 810151c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810151e:	4b0c      	ldr	r3, [pc, #48]	; (8101550 <HAL_Init+0xb4>)
 8101520:	681b      	ldr	r3, [r3, #0]
 8101522:	4a0c      	ldr	r2, [pc, #48]	; (8101554 <HAL_Init+0xb8>)
 8101524:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101526:	2000      	movs	r0, #0
 8101528:	f000 f816 	bl	8101558 <HAL_InitTick>
 810152c:	4603      	mov	r3, r0
 810152e:	2b00      	cmp	r3, #0
 8101530:	d001      	beq.n	8101536 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101532:	2301      	movs	r3, #1
 8101534:	e002      	b.n	810153c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101536:	f7ff fdb3 	bl	81010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810153a:	2300      	movs	r3, #0
}
 810153c:	4618      	mov	r0, r3
 810153e:	3708      	adds	r7, #8
 8101540:	46bd      	mov	sp, r7
 8101542:	bd80      	pop	{r7, pc}
 8101544:	58024400 	.word	0x58024400
 8101548:	40024400 	.word	0x40024400
 810154c:	08106cac 	.word	0x08106cac
 8101550:	10000004 	.word	0x10000004
 8101554:	10000000 	.word	0x10000000

08101558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101558:	b580      	push	{r7, lr}
 810155a:	b082      	sub	sp, #8
 810155c:	af00      	add	r7, sp, #0
 810155e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101560:	4b15      	ldr	r3, [pc, #84]	; (81015b8 <HAL_InitTick+0x60>)
 8101562:	781b      	ldrb	r3, [r3, #0]
 8101564:	2b00      	cmp	r3, #0
 8101566:	d101      	bne.n	810156c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101568:	2301      	movs	r3, #1
 810156a:	e021      	b.n	81015b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810156c:	4b13      	ldr	r3, [pc, #76]	; (81015bc <HAL_InitTick+0x64>)
 810156e:	681a      	ldr	r2, [r3, #0]
 8101570:	4b11      	ldr	r3, [pc, #68]	; (81015b8 <HAL_InitTick+0x60>)
 8101572:	781b      	ldrb	r3, [r3, #0]
 8101574:	4619      	mov	r1, r3
 8101576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810157a:	fbb3 f3f1 	udiv	r3, r3, r1
 810157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101582:	4618      	mov	r0, r3
 8101584:	f000 f965 	bl	8101852 <HAL_SYSTICK_Config>
 8101588:	4603      	mov	r3, r0
 810158a:	2b00      	cmp	r3, #0
 810158c:	d001      	beq.n	8101592 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810158e:	2301      	movs	r3, #1
 8101590:	e00e      	b.n	81015b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101592:	687b      	ldr	r3, [r7, #4]
 8101594:	2b0f      	cmp	r3, #15
 8101596:	d80a      	bhi.n	81015ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101598:	2200      	movs	r2, #0
 810159a:	6879      	ldr	r1, [r7, #4]
 810159c:	f04f 30ff 	mov.w	r0, #4294967295
 81015a0:	f000 f92f 	bl	8101802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81015a4:	4a06      	ldr	r2, [pc, #24]	; (81015c0 <HAL_InitTick+0x68>)
 81015a6:	687b      	ldr	r3, [r7, #4]
 81015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81015aa:	2300      	movs	r3, #0
 81015ac:	e000      	b.n	81015b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81015ae:	2301      	movs	r3, #1
}
 81015b0:	4618      	mov	r0, r3
 81015b2:	3708      	adds	r7, #8
 81015b4:	46bd      	mov	sp, r7
 81015b6:	bd80      	pop	{r7, pc}
 81015b8:	1000000c 	.word	0x1000000c
 81015bc:	10000000 	.word	0x10000000
 81015c0:	10000008 	.word	0x10000008

081015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81015c4:	b480      	push	{r7}
 81015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81015c8:	4b06      	ldr	r3, [pc, #24]	; (81015e4 <HAL_IncTick+0x20>)
 81015ca:	781b      	ldrb	r3, [r3, #0]
 81015cc:	461a      	mov	r2, r3
 81015ce:	4b06      	ldr	r3, [pc, #24]	; (81015e8 <HAL_IncTick+0x24>)
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	4413      	add	r3, r2
 81015d4:	4a04      	ldr	r2, [pc, #16]	; (81015e8 <HAL_IncTick+0x24>)
 81015d6:	6013      	str	r3, [r2, #0]
}
 81015d8:	bf00      	nop
 81015da:	46bd      	mov	sp, r7
 81015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015e0:	4770      	bx	lr
 81015e2:	bf00      	nop
 81015e4:	1000000c 	.word	0x1000000c
 81015e8:	10000270 	.word	0x10000270

081015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81015ec:	b480      	push	{r7}
 81015ee:	af00      	add	r7, sp, #0
  return uwTick;
 81015f0:	4b03      	ldr	r3, [pc, #12]	; (8101600 <HAL_GetTick+0x14>)
 81015f2:	681b      	ldr	r3, [r3, #0]
}
 81015f4:	4618      	mov	r0, r3
 81015f6:	46bd      	mov	sp, r7
 81015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015fc:	4770      	bx	lr
 81015fe:	bf00      	nop
 8101600:	10000270 	.word	0x10000270

08101604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101604:	b580      	push	{r7, lr}
 8101606:	b084      	sub	sp, #16
 8101608:	af00      	add	r7, sp, #0
 810160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810160c:	f7ff ffee 	bl	81015ec <HAL_GetTick>
 8101610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101612:	687b      	ldr	r3, [r7, #4]
 8101614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101616:	68fb      	ldr	r3, [r7, #12]
 8101618:	f1b3 3fff 	cmp.w	r3, #4294967295
 810161c:	d005      	beq.n	810162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810161e:	4b0a      	ldr	r3, [pc, #40]	; (8101648 <HAL_Delay+0x44>)
 8101620:	781b      	ldrb	r3, [r3, #0]
 8101622:	461a      	mov	r2, r3
 8101624:	68fb      	ldr	r3, [r7, #12]
 8101626:	4413      	add	r3, r2
 8101628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810162a:	bf00      	nop
 810162c:	f7ff ffde 	bl	81015ec <HAL_GetTick>
 8101630:	4602      	mov	r2, r0
 8101632:	68bb      	ldr	r3, [r7, #8]
 8101634:	1ad3      	subs	r3, r2, r3
 8101636:	68fa      	ldr	r2, [r7, #12]
 8101638:	429a      	cmp	r2, r3
 810163a:	d8f7      	bhi.n	810162c <HAL_Delay+0x28>
  {
  }
}
 810163c:	bf00      	nop
 810163e:	bf00      	nop
 8101640:	3710      	adds	r7, #16
 8101642:	46bd      	mov	sp, r7
 8101644:	bd80      	pop	{r7, pc}
 8101646:	bf00      	nop
 8101648:	1000000c 	.word	0x1000000c

0810164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810164c:	b480      	push	{r7}
 810164e:	b085      	sub	sp, #20
 8101650:	af00      	add	r7, sp, #0
 8101652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	f003 0307 	and.w	r3, r3, #7
 810165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810165c:	4b0c      	ldr	r3, [pc, #48]	; (8101690 <__NVIC_SetPriorityGrouping+0x44>)
 810165e:	68db      	ldr	r3, [r3, #12]
 8101660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101662:	68ba      	ldr	r2, [r7, #8]
 8101664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101668:	4013      	ands	r3, r2
 810166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810166c:	68fb      	ldr	r3, [r7, #12]
 810166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101670:	68bb      	ldr	r3, [r7, #8]
 8101672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810167e:	4a04      	ldr	r2, [pc, #16]	; (8101690 <__NVIC_SetPriorityGrouping+0x44>)
 8101680:	68bb      	ldr	r3, [r7, #8]
 8101682:	60d3      	str	r3, [r2, #12]
}
 8101684:	bf00      	nop
 8101686:	3714      	adds	r7, #20
 8101688:	46bd      	mov	sp, r7
 810168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810168e:	4770      	bx	lr
 8101690:	e000ed00 	.word	0xe000ed00

08101694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101694:	b480      	push	{r7}
 8101696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101698:	4b04      	ldr	r3, [pc, #16]	; (81016ac <__NVIC_GetPriorityGrouping+0x18>)
 810169a:	68db      	ldr	r3, [r3, #12]
 810169c:	0a1b      	lsrs	r3, r3, #8
 810169e:	f003 0307 	and.w	r3, r3, #7
}
 81016a2:	4618      	mov	r0, r3
 81016a4:	46bd      	mov	sp, r7
 81016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016aa:	4770      	bx	lr
 81016ac:	e000ed00 	.word	0xe000ed00

081016b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81016b0:	b480      	push	{r7}
 81016b2:	b083      	sub	sp, #12
 81016b4:	af00      	add	r7, sp, #0
 81016b6:	4603      	mov	r3, r0
 81016b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016be:	2b00      	cmp	r3, #0
 81016c0:	db0b      	blt.n	81016da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81016c2:	88fb      	ldrh	r3, [r7, #6]
 81016c4:	f003 021f 	and.w	r2, r3, #31
 81016c8:	4907      	ldr	r1, [pc, #28]	; (81016e8 <__NVIC_EnableIRQ+0x38>)
 81016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016ce:	095b      	lsrs	r3, r3, #5
 81016d0:	2001      	movs	r0, #1
 81016d2:	fa00 f202 	lsl.w	r2, r0, r2
 81016d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81016da:	bf00      	nop
 81016dc:	370c      	adds	r7, #12
 81016de:	46bd      	mov	sp, r7
 81016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016e4:	4770      	bx	lr
 81016e6:	bf00      	nop
 81016e8:	e000e100 	.word	0xe000e100

081016ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81016ec:	b480      	push	{r7}
 81016ee:	b083      	sub	sp, #12
 81016f0:	af00      	add	r7, sp, #0
 81016f2:	4603      	mov	r3, r0
 81016f4:	6039      	str	r1, [r7, #0]
 81016f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016fc:	2b00      	cmp	r3, #0
 81016fe:	db0a      	blt.n	8101716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101700:	683b      	ldr	r3, [r7, #0]
 8101702:	b2da      	uxtb	r2, r3
 8101704:	490c      	ldr	r1, [pc, #48]	; (8101738 <__NVIC_SetPriority+0x4c>)
 8101706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810170a:	0112      	lsls	r2, r2, #4
 810170c:	b2d2      	uxtb	r2, r2
 810170e:	440b      	add	r3, r1
 8101710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101714:	e00a      	b.n	810172c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101716:	683b      	ldr	r3, [r7, #0]
 8101718:	b2da      	uxtb	r2, r3
 810171a:	4908      	ldr	r1, [pc, #32]	; (810173c <__NVIC_SetPriority+0x50>)
 810171c:	88fb      	ldrh	r3, [r7, #6]
 810171e:	f003 030f 	and.w	r3, r3, #15
 8101722:	3b04      	subs	r3, #4
 8101724:	0112      	lsls	r2, r2, #4
 8101726:	b2d2      	uxtb	r2, r2
 8101728:	440b      	add	r3, r1
 810172a:	761a      	strb	r2, [r3, #24]
}
 810172c:	bf00      	nop
 810172e:	370c      	adds	r7, #12
 8101730:	46bd      	mov	sp, r7
 8101732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101736:	4770      	bx	lr
 8101738:	e000e100 	.word	0xe000e100
 810173c:	e000ed00 	.word	0xe000ed00

08101740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101740:	b480      	push	{r7}
 8101742:	b089      	sub	sp, #36	; 0x24
 8101744:	af00      	add	r7, sp, #0
 8101746:	60f8      	str	r0, [r7, #12]
 8101748:	60b9      	str	r1, [r7, #8]
 810174a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810174c:	68fb      	ldr	r3, [r7, #12]
 810174e:	f003 0307 	and.w	r3, r3, #7
 8101752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101754:	69fb      	ldr	r3, [r7, #28]
 8101756:	f1c3 0307 	rsb	r3, r3, #7
 810175a:	2b04      	cmp	r3, #4
 810175c:	bf28      	it	cs
 810175e:	2304      	movcs	r3, #4
 8101760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101762:	69fb      	ldr	r3, [r7, #28]
 8101764:	3304      	adds	r3, #4
 8101766:	2b06      	cmp	r3, #6
 8101768:	d902      	bls.n	8101770 <NVIC_EncodePriority+0x30>
 810176a:	69fb      	ldr	r3, [r7, #28]
 810176c:	3b03      	subs	r3, #3
 810176e:	e000      	b.n	8101772 <NVIC_EncodePriority+0x32>
 8101770:	2300      	movs	r3, #0
 8101772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101774:	f04f 32ff 	mov.w	r2, #4294967295
 8101778:	69bb      	ldr	r3, [r7, #24]
 810177a:	fa02 f303 	lsl.w	r3, r2, r3
 810177e:	43da      	mvns	r2, r3
 8101780:	68bb      	ldr	r3, [r7, #8]
 8101782:	401a      	ands	r2, r3
 8101784:	697b      	ldr	r3, [r7, #20]
 8101786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101788:	f04f 31ff 	mov.w	r1, #4294967295
 810178c:	697b      	ldr	r3, [r7, #20]
 810178e:	fa01 f303 	lsl.w	r3, r1, r3
 8101792:	43d9      	mvns	r1, r3
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101798:	4313      	orrs	r3, r2
         );
}
 810179a:	4618      	mov	r0, r3
 810179c:	3724      	adds	r7, #36	; 0x24
 810179e:	46bd      	mov	sp, r7
 81017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a4:	4770      	bx	lr
	...

081017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81017a8:	b580      	push	{r7, lr}
 81017aa:	b082      	sub	sp, #8
 81017ac:	af00      	add	r7, sp, #0
 81017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81017b0:	687b      	ldr	r3, [r7, #4]
 81017b2:	3b01      	subs	r3, #1
 81017b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81017b8:	d301      	bcc.n	81017be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81017ba:	2301      	movs	r3, #1
 81017bc:	e00f      	b.n	81017de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81017be:	4a0a      	ldr	r2, [pc, #40]	; (81017e8 <SysTick_Config+0x40>)
 81017c0:	687b      	ldr	r3, [r7, #4]
 81017c2:	3b01      	subs	r3, #1
 81017c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81017c6:	210f      	movs	r1, #15
 81017c8:	f04f 30ff 	mov.w	r0, #4294967295
 81017cc:	f7ff ff8e 	bl	81016ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81017d0:	4b05      	ldr	r3, [pc, #20]	; (81017e8 <SysTick_Config+0x40>)
 81017d2:	2200      	movs	r2, #0
 81017d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81017d6:	4b04      	ldr	r3, [pc, #16]	; (81017e8 <SysTick_Config+0x40>)
 81017d8:	2207      	movs	r2, #7
 81017da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81017dc:	2300      	movs	r3, #0
}
 81017de:	4618      	mov	r0, r3
 81017e0:	3708      	adds	r7, #8
 81017e2:	46bd      	mov	sp, r7
 81017e4:	bd80      	pop	{r7, pc}
 81017e6:	bf00      	nop
 81017e8:	e000e010 	.word	0xe000e010

081017ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81017ec:	b580      	push	{r7, lr}
 81017ee:	b082      	sub	sp, #8
 81017f0:	af00      	add	r7, sp, #0
 81017f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81017f4:	6878      	ldr	r0, [r7, #4]
 81017f6:	f7ff ff29 	bl	810164c <__NVIC_SetPriorityGrouping>
}
 81017fa:	bf00      	nop
 81017fc:	3708      	adds	r7, #8
 81017fe:	46bd      	mov	sp, r7
 8101800:	bd80      	pop	{r7, pc}

08101802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101802:	b580      	push	{r7, lr}
 8101804:	b086      	sub	sp, #24
 8101806:	af00      	add	r7, sp, #0
 8101808:	4603      	mov	r3, r0
 810180a:	60b9      	str	r1, [r7, #8]
 810180c:	607a      	str	r2, [r7, #4]
 810180e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101810:	f7ff ff40 	bl	8101694 <__NVIC_GetPriorityGrouping>
 8101814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101816:	687a      	ldr	r2, [r7, #4]
 8101818:	68b9      	ldr	r1, [r7, #8]
 810181a:	6978      	ldr	r0, [r7, #20]
 810181c:	f7ff ff90 	bl	8101740 <NVIC_EncodePriority>
 8101820:	4602      	mov	r2, r0
 8101822:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101826:	4611      	mov	r1, r2
 8101828:	4618      	mov	r0, r3
 810182a:	f7ff ff5f 	bl	81016ec <__NVIC_SetPriority>
}
 810182e:	bf00      	nop
 8101830:	3718      	adds	r7, #24
 8101832:	46bd      	mov	sp, r7
 8101834:	bd80      	pop	{r7, pc}

08101836 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101836:	b580      	push	{r7, lr}
 8101838:	b082      	sub	sp, #8
 810183a:	af00      	add	r7, sp, #0
 810183c:	4603      	mov	r3, r0
 810183e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8101840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101844:	4618      	mov	r0, r3
 8101846:	f7ff ff33 	bl	81016b0 <__NVIC_EnableIRQ>
}
 810184a:	bf00      	nop
 810184c:	3708      	adds	r7, #8
 810184e:	46bd      	mov	sp, r7
 8101850:	bd80      	pop	{r7, pc}

08101852 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101852:	b580      	push	{r7, lr}
 8101854:	b082      	sub	sp, #8
 8101856:	af00      	add	r7, sp, #0
 8101858:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810185a:	6878      	ldr	r0, [r7, #4]
 810185c:	f7ff ffa4 	bl	81017a8 <SysTick_Config>
 8101860:	4603      	mov	r3, r0
}
 8101862:	4618      	mov	r0, r3
 8101864:	3708      	adds	r7, #8
 8101866:	46bd      	mov	sp, r7
 8101868:	bd80      	pop	{r7, pc}
	...

0810186c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810186c:	b480      	push	{r7}
 810186e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101870:	4b07      	ldr	r3, [pc, #28]	; (8101890 <HAL_GetCurrentCPUID+0x24>)
 8101872:	681b      	ldr	r3, [r3, #0]
 8101874:	091b      	lsrs	r3, r3, #4
 8101876:	f003 030f 	and.w	r3, r3, #15
 810187a:	2b07      	cmp	r3, #7
 810187c:	d101      	bne.n	8101882 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810187e:	2303      	movs	r3, #3
 8101880:	e000      	b.n	8101884 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101882:	2301      	movs	r3, #1
  }
}
 8101884:	4618      	mov	r0, r3
 8101886:	46bd      	mov	sp, r7
 8101888:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188c:	4770      	bx	lr
 810188e:	bf00      	nop
 8101890:	e000ed00 	.word	0xe000ed00

08101894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101894:	b480      	push	{r7}
 8101896:	b089      	sub	sp, #36	; 0x24
 8101898:	af00      	add	r7, sp, #0
 810189a:	6078      	str	r0, [r7, #4]
 810189c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810189e:	2300      	movs	r3, #0
 81018a0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81018a2:	4b89      	ldr	r3, [pc, #548]	; (8101ac8 <HAL_GPIO_Init+0x234>)
 81018a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81018a6:	e194      	b.n	8101bd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81018a8:	683b      	ldr	r3, [r7, #0]
 81018aa:	681a      	ldr	r2, [r3, #0]
 81018ac:	2101      	movs	r1, #1
 81018ae:	69fb      	ldr	r3, [r7, #28]
 81018b0:	fa01 f303 	lsl.w	r3, r1, r3
 81018b4:	4013      	ands	r3, r2
 81018b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81018b8:	693b      	ldr	r3, [r7, #16]
 81018ba:	2b00      	cmp	r3, #0
 81018bc:	f000 8186 	beq.w	8101bcc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81018c0:	683b      	ldr	r3, [r7, #0]
 81018c2:	685b      	ldr	r3, [r3, #4]
 81018c4:	f003 0303 	and.w	r3, r3, #3
 81018c8:	2b01      	cmp	r3, #1
 81018ca:	d005      	beq.n	81018d8 <HAL_GPIO_Init+0x44>
 81018cc:	683b      	ldr	r3, [r7, #0]
 81018ce:	685b      	ldr	r3, [r3, #4]
 81018d0:	f003 0303 	and.w	r3, r3, #3
 81018d4:	2b02      	cmp	r3, #2
 81018d6:	d130      	bne.n	810193a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81018d8:	687b      	ldr	r3, [r7, #4]
 81018da:	689b      	ldr	r3, [r3, #8]
 81018dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81018de:	69fb      	ldr	r3, [r7, #28]
 81018e0:	005b      	lsls	r3, r3, #1
 81018e2:	2203      	movs	r2, #3
 81018e4:	fa02 f303 	lsl.w	r3, r2, r3
 81018e8:	43db      	mvns	r3, r3
 81018ea:	69ba      	ldr	r2, [r7, #24]
 81018ec:	4013      	ands	r3, r2
 81018ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81018f0:	683b      	ldr	r3, [r7, #0]
 81018f2:	68da      	ldr	r2, [r3, #12]
 81018f4:	69fb      	ldr	r3, [r7, #28]
 81018f6:	005b      	lsls	r3, r3, #1
 81018f8:	fa02 f303 	lsl.w	r3, r2, r3
 81018fc:	69ba      	ldr	r2, [r7, #24]
 81018fe:	4313      	orrs	r3, r2
 8101900:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101902:	687b      	ldr	r3, [r7, #4]
 8101904:	69ba      	ldr	r2, [r7, #24]
 8101906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101908:	687b      	ldr	r3, [r7, #4]
 810190a:	685b      	ldr	r3, [r3, #4]
 810190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810190e:	2201      	movs	r2, #1
 8101910:	69fb      	ldr	r3, [r7, #28]
 8101912:	fa02 f303 	lsl.w	r3, r2, r3
 8101916:	43db      	mvns	r3, r3
 8101918:	69ba      	ldr	r2, [r7, #24]
 810191a:	4013      	ands	r3, r2
 810191c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810191e:	683b      	ldr	r3, [r7, #0]
 8101920:	685b      	ldr	r3, [r3, #4]
 8101922:	091b      	lsrs	r3, r3, #4
 8101924:	f003 0201 	and.w	r2, r3, #1
 8101928:	69fb      	ldr	r3, [r7, #28]
 810192a:	fa02 f303 	lsl.w	r3, r2, r3
 810192e:	69ba      	ldr	r2, [r7, #24]
 8101930:	4313      	orrs	r3, r2
 8101932:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8101934:	687b      	ldr	r3, [r7, #4]
 8101936:	69ba      	ldr	r2, [r7, #24]
 8101938:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810193a:	683b      	ldr	r3, [r7, #0]
 810193c:	685b      	ldr	r3, [r3, #4]
 810193e:	f003 0303 	and.w	r3, r3, #3
 8101942:	2b03      	cmp	r3, #3
 8101944:	d017      	beq.n	8101976 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8101946:	687b      	ldr	r3, [r7, #4]
 8101948:	68db      	ldr	r3, [r3, #12]
 810194a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810194c:	69fb      	ldr	r3, [r7, #28]
 810194e:	005b      	lsls	r3, r3, #1
 8101950:	2203      	movs	r2, #3
 8101952:	fa02 f303 	lsl.w	r3, r2, r3
 8101956:	43db      	mvns	r3, r3
 8101958:	69ba      	ldr	r2, [r7, #24]
 810195a:	4013      	ands	r3, r2
 810195c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810195e:	683b      	ldr	r3, [r7, #0]
 8101960:	689a      	ldr	r2, [r3, #8]
 8101962:	69fb      	ldr	r3, [r7, #28]
 8101964:	005b      	lsls	r3, r3, #1
 8101966:	fa02 f303 	lsl.w	r3, r2, r3
 810196a:	69ba      	ldr	r2, [r7, #24]
 810196c:	4313      	orrs	r3, r2
 810196e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101970:	687b      	ldr	r3, [r7, #4]
 8101972:	69ba      	ldr	r2, [r7, #24]
 8101974:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8101976:	683b      	ldr	r3, [r7, #0]
 8101978:	685b      	ldr	r3, [r3, #4]
 810197a:	f003 0303 	and.w	r3, r3, #3
 810197e:	2b02      	cmp	r3, #2
 8101980:	d123      	bne.n	81019ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101982:	69fb      	ldr	r3, [r7, #28]
 8101984:	08da      	lsrs	r2, r3, #3
 8101986:	687b      	ldr	r3, [r7, #4]
 8101988:	3208      	adds	r2, #8
 810198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101990:	69fb      	ldr	r3, [r7, #28]
 8101992:	f003 0307 	and.w	r3, r3, #7
 8101996:	009b      	lsls	r3, r3, #2
 8101998:	220f      	movs	r2, #15
 810199a:	fa02 f303 	lsl.w	r3, r2, r3
 810199e:	43db      	mvns	r3, r3
 81019a0:	69ba      	ldr	r2, [r7, #24]
 81019a2:	4013      	ands	r3, r2
 81019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81019a6:	683b      	ldr	r3, [r7, #0]
 81019a8:	691a      	ldr	r2, [r3, #16]
 81019aa:	69fb      	ldr	r3, [r7, #28]
 81019ac:	f003 0307 	and.w	r3, r3, #7
 81019b0:	009b      	lsls	r3, r3, #2
 81019b2:	fa02 f303 	lsl.w	r3, r2, r3
 81019b6:	69ba      	ldr	r2, [r7, #24]
 81019b8:	4313      	orrs	r3, r2
 81019ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81019bc:	69fb      	ldr	r3, [r7, #28]
 81019be:	08da      	lsrs	r2, r3, #3
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	3208      	adds	r2, #8
 81019c4:	69b9      	ldr	r1, [r7, #24]
 81019c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81019ca:	687b      	ldr	r3, [r7, #4]
 81019cc:	681b      	ldr	r3, [r3, #0]
 81019ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81019d0:	69fb      	ldr	r3, [r7, #28]
 81019d2:	005b      	lsls	r3, r3, #1
 81019d4:	2203      	movs	r2, #3
 81019d6:	fa02 f303 	lsl.w	r3, r2, r3
 81019da:	43db      	mvns	r3, r3
 81019dc:	69ba      	ldr	r2, [r7, #24]
 81019de:	4013      	ands	r3, r2
 81019e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81019e2:	683b      	ldr	r3, [r7, #0]
 81019e4:	685b      	ldr	r3, [r3, #4]
 81019e6:	f003 0203 	and.w	r2, r3, #3
 81019ea:	69fb      	ldr	r3, [r7, #28]
 81019ec:	005b      	lsls	r3, r3, #1
 81019ee:	fa02 f303 	lsl.w	r3, r2, r3
 81019f2:	69ba      	ldr	r2, [r7, #24]
 81019f4:	4313      	orrs	r3, r2
 81019f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81019f8:	687b      	ldr	r3, [r7, #4]
 81019fa:	69ba      	ldr	r2, [r7, #24]
 81019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81019fe:	683b      	ldr	r3, [r7, #0]
 8101a00:	685b      	ldr	r3, [r3, #4]
 8101a02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	f000 80e0 	beq.w	8101bcc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a0c:	4b2f      	ldr	r3, [pc, #188]	; (8101acc <HAL_GPIO_Init+0x238>)
 8101a0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a12:	4a2e      	ldr	r2, [pc, #184]	; (8101acc <HAL_GPIO_Init+0x238>)
 8101a14:	f043 0302 	orr.w	r3, r3, #2
 8101a18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101a1c:	4b2b      	ldr	r3, [pc, #172]	; (8101acc <HAL_GPIO_Init+0x238>)
 8101a1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a22:	f003 0302 	and.w	r3, r3, #2
 8101a26:	60fb      	str	r3, [r7, #12]
 8101a28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101a2a:	4a29      	ldr	r2, [pc, #164]	; (8101ad0 <HAL_GPIO_Init+0x23c>)
 8101a2c:	69fb      	ldr	r3, [r7, #28]
 8101a2e:	089b      	lsrs	r3, r3, #2
 8101a30:	3302      	adds	r3, #2
 8101a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101a38:	69fb      	ldr	r3, [r7, #28]
 8101a3a:	f003 0303 	and.w	r3, r3, #3
 8101a3e:	009b      	lsls	r3, r3, #2
 8101a40:	220f      	movs	r2, #15
 8101a42:	fa02 f303 	lsl.w	r3, r2, r3
 8101a46:	43db      	mvns	r3, r3
 8101a48:	69ba      	ldr	r2, [r7, #24]
 8101a4a:	4013      	ands	r3, r2
 8101a4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101a4e:	687b      	ldr	r3, [r7, #4]
 8101a50:	4a20      	ldr	r2, [pc, #128]	; (8101ad4 <HAL_GPIO_Init+0x240>)
 8101a52:	4293      	cmp	r3, r2
 8101a54:	d052      	beq.n	8101afc <HAL_GPIO_Init+0x268>
 8101a56:	687b      	ldr	r3, [r7, #4]
 8101a58:	4a1f      	ldr	r2, [pc, #124]	; (8101ad8 <HAL_GPIO_Init+0x244>)
 8101a5a:	4293      	cmp	r3, r2
 8101a5c:	d031      	beq.n	8101ac2 <HAL_GPIO_Init+0x22e>
 8101a5e:	687b      	ldr	r3, [r7, #4]
 8101a60:	4a1e      	ldr	r2, [pc, #120]	; (8101adc <HAL_GPIO_Init+0x248>)
 8101a62:	4293      	cmp	r3, r2
 8101a64:	d02b      	beq.n	8101abe <HAL_GPIO_Init+0x22a>
 8101a66:	687b      	ldr	r3, [r7, #4]
 8101a68:	4a1d      	ldr	r2, [pc, #116]	; (8101ae0 <HAL_GPIO_Init+0x24c>)
 8101a6a:	4293      	cmp	r3, r2
 8101a6c:	d025      	beq.n	8101aba <HAL_GPIO_Init+0x226>
 8101a6e:	687b      	ldr	r3, [r7, #4]
 8101a70:	4a1c      	ldr	r2, [pc, #112]	; (8101ae4 <HAL_GPIO_Init+0x250>)
 8101a72:	4293      	cmp	r3, r2
 8101a74:	d01f      	beq.n	8101ab6 <HAL_GPIO_Init+0x222>
 8101a76:	687b      	ldr	r3, [r7, #4]
 8101a78:	4a1b      	ldr	r2, [pc, #108]	; (8101ae8 <HAL_GPIO_Init+0x254>)
 8101a7a:	4293      	cmp	r3, r2
 8101a7c:	d019      	beq.n	8101ab2 <HAL_GPIO_Init+0x21e>
 8101a7e:	687b      	ldr	r3, [r7, #4]
 8101a80:	4a1a      	ldr	r2, [pc, #104]	; (8101aec <HAL_GPIO_Init+0x258>)
 8101a82:	4293      	cmp	r3, r2
 8101a84:	d013      	beq.n	8101aae <HAL_GPIO_Init+0x21a>
 8101a86:	687b      	ldr	r3, [r7, #4]
 8101a88:	4a19      	ldr	r2, [pc, #100]	; (8101af0 <HAL_GPIO_Init+0x25c>)
 8101a8a:	4293      	cmp	r3, r2
 8101a8c:	d00d      	beq.n	8101aaa <HAL_GPIO_Init+0x216>
 8101a8e:	687b      	ldr	r3, [r7, #4]
 8101a90:	4a18      	ldr	r2, [pc, #96]	; (8101af4 <HAL_GPIO_Init+0x260>)
 8101a92:	4293      	cmp	r3, r2
 8101a94:	d007      	beq.n	8101aa6 <HAL_GPIO_Init+0x212>
 8101a96:	687b      	ldr	r3, [r7, #4]
 8101a98:	4a17      	ldr	r2, [pc, #92]	; (8101af8 <HAL_GPIO_Init+0x264>)
 8101a9a:	4293      	cmp	r3, r2
 8101a9c:	d101      	bne.n	8101aa2 <HAL_GPIO_Init+0x20e>
 8101a9e:	2309      	movs	r3, #9
 8101aa0:	e02d      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101aa2:	230a      	movs	r3, #10
 8101aa4:	e02b      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101aa6:	2308      	movs	r3, #8
 8101aa8:	e029      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101aaa:	2307      	movs	r3, #7
 8101aac:	e027      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101aae:	2306      	movs	r3, #6
 8101ab0:	e025      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101ab2:	2305      	movs	r3, #5
 8101ab4:	e023      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101ab6:	2304      	movs	r3, #4
 8101ab8:	e021      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101aba:	2303      	movs	r3, #3
 8101abc:	e01f      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101abe:	2302      	movs	r3, #2
 8101ac0:	e01d      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101ac2:	2301      	movs	r3, #1
 8101ac4:	e01b      	b.n	8101afe <HAL_GPIO_Init+0x26a>
 8101ac6:	bf00      	nop
 8101ac8:	580000c0 	.word	0x580000c0
 8101acc:	58024400 	.word	0x58024400
 8101ad0:	58000400 	.word	0x58000400
 8101ad4:	58020000 	.word	0x58020000
 8101ad8:	58020400 	.word	0x58020400
 8101adc:	58020800 	.word	0x58020800
 8101ae0:	58020c00 	.word	0x58020c00
 8101ae4:	58021000 	.word	0x58021000
 8101ae8:	58021400 	.word	0x58021400
 8101aec:	58021800 	.word	0x58021800
 8101af0:	58021c00 	.word	0x58021c00
 8101af4:	58022000 	.word	0x58022000
 8101af8:	58022400 	.word	0x58022400
 8101afc:	2300      	movs	r3, #0
 8101afe:	69fa      	ldr	r2, [r7, #28]
 8101b00:	f002 0203 	and.w	r2, r2, #3
 8101b04:	0092      	lsls	r2, r2, #2
 8101b06:	4093      	lsls	r3, r2
 8101b08:	69ba      	ldr	r2, [r7, #24]
 8101b0a:	4313      	orrs	r3, r2
 8101b0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101b0e:	4938      	ldr	r1, [pc, #224]	; (8101bf0 <HAL_GPIO_Init+0x35c>)
 8101b10:	69fb      	ldr	r3, [r7, #28]
 8101b12:	089b      	lsrs	r3, r3, #2
 8101b14:	3302      	adds	r3, #2
 8101b16:	69ba      	ldr	r2, [r7, #24]
 8101b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101b20:	681b      	ldr	r3, [r3, #0]
 8101b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b24:	693b      	ldr	r3, [r7, #16]
 8101b26:	43db      	mvns	r3, r3
 8101b28:	69ba      	ldr	r2, [r7, #24]
 8101b2a:	4013      	ands	r3, r2
 8101b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101b2e:	683b      	ldr	r3, [r7, #0]
 8101b30:	685b      	ldr	r3, [r3, #4]
 8101b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101b36:	2b00      	cmp	r3, #0
 8101b38:	d003      	beq.n	8101b42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101b3a:	69ba      	ldr	r2, [r7, #24]
 8101b3c:	693b      	ldr	r3, [r7, #16]
 8101b3e:	4313      	orrs	r3, r2
 8101b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101b46:	69bb      	ldr	r3, [r7, #24]
 8101b48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101b4e:	685b      	ldr	r3, [r3, #4]
 8101b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b52:	693b      	ldr	r3, [r7, #16]
 8101b54:	43db      	mvns	r3, r3
 8101b56:	69ba      	ldr	r2, [r7, #24]
 8101b58:	4013      	ands	r3, r2
 8101b5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101b5c:	683b      	ldr	r3, [r7, #0]
 8101b5e:	685b      	ldr	r3, [r3, #4]
 8101b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d003      	beq.n	8101b70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101b68:	69ba      	ldr	r2, [r7, #24]
 8101b6a:	693b      	ldr	r3, [r7, #16]
 8101b6c:	4313      	orrs	r3, r2
 8101b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101b70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101b74:	69bb      	ldr	r3, [r7, #24]
 8101b76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101b78:	697b      	ldr	r3, [r7, #20]
 8101b7a:	685b      	ldr	r3, [r3, #4]
 8101b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b7e:	693b      	ldr	r3, [r7, #16]
 8101b80:	43db      	mvns	r3, r3
 8101b82:	69ba      	ldr	r2, [r7, #24]
 8101b84:	4013      	ands	r3, r2
 8101b86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101b88:	683b      	ldr	r3, [r7, #0]
 8101b8a:	685b      	ldr	r3, [r3, #4]
 8101b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101b90:	2b00      	cmp	r3, #0
 8101b92:	d003      	beq.n	8101b9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101b94:	69ba      	ldr	r2, [r7, #24]
 8101b96:	693b      	ldr	r3, [r7, #16]
 8101b98:	4313      	orrs	r3, r2
 8101b9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101b9c:	697b      	ldr	r3, [r7, #20]
 8101b9e:	69ba      	ldr	r2, [r7, #24]
 8101ba0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101ba2:	697b      	ldr	r3, [r7, #20]
 8101ba4:	681b      	ldr	r3, [r3, #0]
 8101ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ba8:	693b      	ldr	r3, [r7, #16]
 8101baa:	43db      	mvns	r3, r3
 8101bac:	69ba      	ldr	r2, [r7, #24]
 8101bae:	4013      	ands	r3, r2
 8101bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101bb2:	683b      	ldr	r3, [r7, #0]
 8101bb4:	685b      	ldr	r3, [r3, #4]
 8101bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101bba:	2b00      	cmp	r3, #0
 8101bbc:	d003      	beq.n	8101bc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101bbe:	69ba      	ldr	r2, [r7, #24]
 8101bc0:	693b      	ldr	r3, [r7, #16]
 8101bc2:	4313      	orrs	r3, r2
 8101bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101bc6:	697b      	ldr	r3, [r7, #20]
 8101bc8:	69ba      	ldr	r2, [r7, #24]
 8101bca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101bcc:	69fb      	ldr	r3, [r7, #28]
 8101bce:	3301      	adds	r3, #1
 8101bd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101bd2:	683b      	ldr	r3, [r7, #0]
 8101bd4:	681a      	ldr	r2, [r3, #0]
 8101bd6:	69fb      	ldr	r3, [r7, #28]
 8101bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8101bdc:	2b00      	cmp	r3, #0
 8101bde:	f47f ae63 	bne.w	81018a8 <HAL_GPIO_Init+0x14>
  }
}
 8101be2:	bf00      	nop
 8101be4:	bf00      	nop
 8101be6:	3724      	adds	r7, #36	; 0x24
 8101be8:	46bd      	mov	sp, r7
 8101bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bee:	4770      	bx	lr
 8101bf0:	58000400 	.word	0x58000400

08101bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101bf4:	b480      	push	{r7}
 8101bf6:	b083      	sub	sp, #12
 8101bf8:	af00      	add	r7, sp, #0
 8101bfa:	6078      	str	r0, [r7, #4]
 8101bfc:	460b      	mov	r3, r1
 8101bfe:	807b      	strh	r3, [r7, #2]
 8101c00:	4613      	mov	r3, r2
 8101c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101c04:	787b      	ldrb	r3, [r7, #1]
 8101c06:	2b00      	cmp	r3, #0
 8101c08:	d003      	beq.n	8101c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101c0a:	887a      	ldrh	r2, [r7, #2]
 8101c0c:	687b      	ldr	r3, [r7, #4]
 8101c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101c10:	e003      	b.n	8101c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101c12:	887b      	ldrh	r3, [r7, #2]
 8101c14:	041a      	lsls	r2, r3, #16
 8101c16:	687b      	ldr	r3, [r7, #4]
 8101c18:	619a      	str	r2, [r3, #24]
}
 8101c1a:	bf00      	nop
 8101c1c:	370c      	adds	r7, #12
 8101c1e:	46bd      	mov	sp, r7
 8101c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c24:	4770      	bx	lr

08101c26 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8101c26:	b580      	push	{r7, lr}
 8101c28:	b082      	sub	sp, #8
 8101c2a:	af00      	add	r7, sp, #0
 8101c2c:	4603      	mov	r3, r0
 8101c2e:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8101c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101c34:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8101c38:	88fb      	ldrh	r3, [r7, #6]
 8101c3a:	4013      	ands	r3, r2
 8101c3c:	2b00      	cmp	r3, #0
 8101c3e:	d008      	beq.n	8101c52 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8101c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101c44:	88fb      	ldrh	r3, [r7, #6]
 8101c46:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8101c4a:	88fb      	ldrh	r3, [r7, #6]
 8101c4c:	4618      	mov	r0, r3
 8101c4e:	f7ff f9e9 	bl	8101024 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8101c52:	bf00      	nop
 8101c54:	3708      	adds	r7, #8
 8101c56:	46bd      	mov	sp, r7
 8101c58:	bd80      	pop	{r7, pc}
	...

08101c5c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101c5c:	b480      	push	{r7}
 8101c5e:	b083      	sub	sp, #12
 8101c60:	af00      	add	r7, sp, #0
 8101c62:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101c64:	4b05      	ldr	r3, [pc, #20]	; (8101c7c <HAL_HSEM_ActivateNotification+0x20>)
 8101c66:	681a      	ldr	r2, [r3, #0]
 8101c68:	4904      	ldr	r1, [pc, #16]	; (8101c7c <HAL_HSEM_ActivateNotification+0x20>)
 8101c6a:	687b      	ldr	r3, [r7, #4]
 8101c6c:	4313      	orrs	r3, r2
 8101c6e:	600b      	str	r3, [r1, #0]
#endif
}
 8101c70:	bf00      	nop
 8101c72:	370c      	adds	r7, #12
 8101c74:	46bd      	mov	sp, r7
 8101c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c7a:	4770      	bx	lr
 8101c7c:	58026510 	.word	0x58026510

08101c80 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101c80:	b580      	push	{r7, lr}
 8101c82:	b084      	sub	sp, #16
 8101c84:	af00      	add	r7, sp, #0
 8101c86:	60f8      	str	r0, [r7, #12]
 8101c88:	460b      	mov	r3, r1
 8101c8a:	607a      	str	r2, [r7, #4]
 8101c8c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101c8e:	4b37      	ldr	r3, [pc, #220]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c90:	681b      	ldr	r3, [r3, #0]
 8101c92:	f023 0201 	bic.w	r2, r3, #1
 8101c96:	4935      	ldr	r1, [pc, #212]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101c98:	68fb      	ldr	r3, [r7, #12]
 8101c9a:	4313      	orrs	r3, r2
 8101c9c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101c9e:	687b      	ldr	r3, [r7, #4]
 8101ca0:	2b00      	cmp	r3, #0
 8101ca2:	d123      	bne.n	8101cec <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101ca4:	f7ff fde2 	bl	810186c <HAL_GetCurrentCPUID>
 8101ca8:	4603      	mov	r3, r0
 8101caa:	2b03      	cmp	r3, #3
 8101cac:	d158      	bne.n	8101d60 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101cae:	4b2f      	ldr	r3, [pc, #188]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cb0:	691b      	ldr	r3, [r3, #16]
 8101cb2:	4a2e      	ldr	r2, [pc, #184]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cb4:	f023 0301 	bic.w	r3, r3, #1
 8101cb8:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101cba:	4b2d      	ldr	r3, [pc, #180]	; (8101d70 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101cbc:	691b      	ldr	r3, [r3, #16]
 8101cbe:	4a2c      	ldr	r2, [pc, #176]	; (8101d70 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101cc0:	f043 0304 	orr.w	r3, r3, #4
 8101cc4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101cc6:	f3bf 8f4f 	dsb	sy
}
 8101cca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101ccc:	f3bf 8f6f 	isb	sy
}
 8101cd0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101cd2:	7afb      	ldrb	r3, [r7, #11]
 8101cd4:	2b01      	cmp	r3, #1
 8101cd6:	d101      	bne.n	8101cdc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101cd8:	bf30      	wfi
 8101cda:	e000      	b.n	8101cde <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101cdc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101cde:	4b24      	ldr	r3, [pc, #144]	; (8101d70 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ce0:	691b      	ldr	r3, [r3, #16]
 8101ce2:	4a23      	ldr	r2, [pc, #140]	; (8101d70 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ce4:	f023 0304 	bic.w	r3, r3, #4
 8101ce8:	6113      	str	r3, [r2, #16]
 8101cea:	e03c      	b.n	8101d66 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	2b01      	cmp	r3, #1
 8101cf0:	d123      	bne.n	8101d3a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101cf2:	f7ff fdbb 	bl	810186c <HAL_GetCurrentCPUID>
 8101cf6:	4603      	mov	r3, r0
 8101cf8:	2b01      	cmp	r3, #1
 8101cfa:	d133      	bne.n	8101d64 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101cfc:	4b1b      	ldr	r3, [pc, #108]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cfe:	695b      	ldr	r3, [r3, #20]
 8101d00:	4a1a      	ldr	r2, [pc, #104]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d02:	f023 0302 	bic.w	r3, r3, #2
 8101d06:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d08:	4b19      	ldr	r3, [pc, #100]	; (8101d70 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d0a:	691b      	ldr	r3, [r3, #16]
 8101d0c:	4a18      	ldr	r2, [pc, #96]	; (8101d70 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d0e:	f043 0304 	orr.w	r3, r3, #4
 8101d12:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101d14:	f3bf 8f4f 	dsb	sy
}
 8101d18:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101d1a:	f3bf 8f6f 	isb	sy
}
 8101d1e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101d20:	7afb      	ldrb	r3, [r7, #11]
 8101d22:	2b01      	cmp	r3, #1
 8101d24:	d101      	bne.n	8101d2a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101d26:	bf30      	wfi
 8101d28:	e000      	b.n	8101d2c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101d2a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d2c:	4b10      	ldr	r3, [pc, #64]	; (8101d70 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d2e:	691b      	ldr	r3, [r3, #16]
 8101d30:	4a0f      	ldr	r2, [pc, #60]	; (8101d70 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d32:	f023 0304 	bic.w	r3, r3, #4
 8101d36:	6113      	str	r3, [r2, #16]
 8101d38:	e015      	b.n	8101d66 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101d3a:	f7ff fd97 	bl	810186c <HAL_GetCurrentCPUID>
 8101d3e:	4603      	mov	r3, r0
 8101d40:	2b03      	cmp	r3, #3
 8101d42:	d106      	bne.n	8101d52 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101d44:	4b09      	ldr	r3, [pc, #36]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d46:	691b      	ldr	r3, [r3, #16]
 8101d48:	4a08      	ldr	r2, [pc, #32]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d4a:	f023 0304 	bic.w	r3, r3, #4
 8101d4e:	6113      	str	r3, [r2, #16]
 8101d50:	e009      	b.n	8101d66 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101d52:	4b06      	ldr	r3, [pc, #24]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d54:	695b      	ldr	r3, [r3, #20]
 8101d56:	4a05      	ldr	r2, [pc, #20]	; (8101d6c <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d58:	f023 0304 	bic.w	r3, r3, #4
 8101d5c:	6153      	str	r3, [r2, #20]
 8101d5e:	e002      	b.n	8101d66 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101d60:	bf00      	nop
 8101d62:	e000      	b.n	8101d66 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101d64:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101d66:	3710      	adds	r7, #16
 8101d68:	46bd      	mov	sp, r7
 8101d6a:	bd80      	pop	{r7, pc}
 8101d6c:	58024800 	.word	0x58024800
 8101d70:	e000ed00 	.word	0xe000ed00

08101d74 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101d74:	b580      	push	{r7, lr}
 8101d76:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101d78:	f7ff fd78 	bl	810186c <HAL_GetCurrentCPUID>
 8101d7c:	4603      	mov	r3, r0
 8101d7e:	2b03      	cmp	r3, #3
 8101d80:	d101      	bne.n	8101d86 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101d82:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101d84:	e001      	b.n	8101d8a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101d86:	bf40      	sev
    __WFE ();
 8101d88:	bf20      	wfe
}
 8101d8a:	bf00      	nop
 8101d8c:	bd80      	pop	{r7, pc}
	...

08101d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101d90:	b480      	push	{r7}
 8101d92:	b089      	sub	sp, #36	; 0x24
 8101d94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101d96:	4bb3      	ldr	r3, [pc, #716]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101d98:	691b      	ldr	r3, [r3, #16]
 8101d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101d9e:	2b18      	cmp	r3, #24
 8101da0:	f200 8155 	bhi.w	810204e <HAL_RCC_GetSysClockFreq+0x2be>
 8101da4:	a201      	add	r2, pc, #4	; (adr r2, 8101dac <HAL_RCC_GetSysClockFreq+0x1c>)
 8101da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101daa:	bf00      	nop
 8101dac:	08101e11 	.word	0x08101e11
 8101db0:	0810204f 	.word	0x0810204f
 8101db4:	0810204f 	.word	0x0810204f
 8101db8:	0810204f 	.word	0x0810204f
 8101dbc:	0810204f 	.word	0x0810204f
 8101dc0:	0810204f 	.word	0x0810204f
 8101dc4:	0810204f 	.word	0x0810204f
 8101dc8:	0810204f 	.word	0x0810204f
 8101dcc:	08101e37 	.word	0x08101e37
 8101dd0:	0810204f 	.word	0x0810204f
 8101dd4:	0810204f 	.word	0x0810204f
 8101dd8:	0810204f 	.word	0x0810204f
 8101ddc:	0810204f 	.word	0x0810204f
 8101de0:	0810204f 	.word	0x0810204f
 8101de4:	0810204f 	.word	0x0810204f
 8101de8:	0810204f 	.word	0x0810204f
 8101dec:	08101e3d 	.word	0x08101e3d
 8101df0:	0810204f 	.word	0x0810204f
 8101df4:	0810204f 	.word	0x0810204f
 8101df8:	0810204f 	.word	0x0810204f
 8101dfc:	0810204f 	.word	0x0810204f
 8101e00:	0810204f 	.word	0x0810204f
 8101e04:	0810204f 	.word	0x0810204f
 8101e08:	0810204f 	.word	0x0810204f
 8101e0c:	08101e43 	.word	0x08101e43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101e10:	4b94      	ldr	r3, [pc, #592]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	f003 0320 	and.w	r3, r3, #32
 8101e18:	2b00      	cmp	r3, #0
 8101e1a:	d009      	beq.n	8101e30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101e1c:	4b91      	ldr	r3, [pc, #580]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e1e:	681b      	ldr	r3, [r3, #0]
 8101e20:	08db      	lsrs	r3, r3, #3
 8101e22:	f003 0303 	and.w	r3, r3, #3
 8101e26:	4a90      	ldr	r2, [pc, #576]	; (8102068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101e28:	fa22 f303 	lsr.w	r3, r2, r3
 8101e2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8101e2e:	e111      	b.n	8102054 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101e30:	4b8d      	ldr	r3, [pc, #564]	; (8102068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101e32:	61bb      	str	r3, [r7, #24]
    break;
 8101e34:	e10e      	b.n	8102054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101e36:	4b8d      	ldr	r3, [pc, #564]	; (810206c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101e38:	61bb      	str	r3, [r7, #24]
    break;
 8101e3a:	e10b      	b.n	8102054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101e3c:	4b8c      	ldr	r3, [pc, #560]	; (8102070 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101e3e:	61bb      	str	r3, [r7, #24]
    break;
 8101e40:	e108      	b.n	8102054 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101e42:	4b88      	ldr	r3, [pc, #544]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101e46:	f003 0303 	and.w	r3, r3, #3
 8101e4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101e4c:	4b85      	ldr	r3, [pc, #532]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101e50:	091b      	lsrs	r3, r3, #4
 8101e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101e56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101e58:	4b82      	ldr	r3, [pc, #520]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e5c:	f003 0301 	and.w	r3, r3, #1
 8101e60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8101e62:	4b80      	ldr	r3, [pc, #512]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101e66:	08db      	lsrs	r3, r3, #3
 8101e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101e6c:	68fa      	ldr	r2, [r7, #12]
 8101e6e:	fb02 f303 	mul.w	r3, r2, r3
 8101e72:	ee07 3a90 	vmov	s15, r3
 8101e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8101e7e:	693b      	ldr	r3, [r7, #16]
 8101e80:	2b00      	cmp	r3, #0
 8101e82:	f000 80e1 	beq.w	8102048 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101e86:	697b      	ldr	r3, [r7, #20]
 8101e88:	2b02      	cmp	r3, #2
 8101e8a:	f000 8083 	beq.w	8101f94 <HAL_RCC_GetSysClockFreq+0x204>
 8101e8e:	697b      	ldr	r3, [r7, #20]
 8101e90:	2b02      	cmp	r3, #2
 8101e92:	f200 80a1 	bhi.w	8101fd8 <HAL_RCC_GetSysClockFreq+0x248>
 8101e96:	697b      	ldr	r3, [r7, #20]
 8101e98:	2b00      	cmp	r3, #0
 8101e9a:	d003      	beq.n	8101ea4 <HAL_RCC_GetSysClockFreq+0x114>
 8101e9c:	697b      	ldr	r3, [r7, #20]
 8101e9e:	2b01      	cmp	r3, #1
 8101ea0:	d056      	beq.n	8101f50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101ea2:	e099      	b.n	8101fd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101ea4:	4b6f      	ldr	r3, [pc, #444]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ea6:	681b      	ldr	r3, [r3, #0]
 8101ea8:	f003 0320 	and.w	r3, r3, #32
 8101eac:	2b00      	cmp	r3, #0
 8101eae:	d02d      	beq.n	8101f0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101eb0:	4b6c      	ldr	r3, [pc, #432]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	08db      	lsrs	r3, r3, #3
 8101eb6:	f003 0303 	and.w	r3, r3, #3
 8101eba:	4a6b      	ldr	r2, [pc, #428]	; (8102068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8101ec0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101ec2:	687b      	ldr	r3, [r7, #4]
 8101ec4:	ee07 3a90 	vmov	s15, r3
 8101ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ecc:	693b      	ldr	r3, [r7, #16]
 8101ece:	ee07 3a90 	vmov	s15, r3
 8101ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101eda:	4b62      	ldr	r3, [pc, #392]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ee2:	ee07 3a90 	vmov	s15, r3
 8101ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8101eee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101f0a:	e087      	b.n	810201c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101f0c:	693b      	ldr	r3, [r7, #16]
 8101f0e:	ee07 3a90 	vmov	s15, r3
 8101f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8102078 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f1e:	4b51      	ldr	r3, [pc, #324]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f26:	ee07 3a90 	vmov	s15, r3
 8101f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101f4e:	e065      	b.n	810201c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101f50:	693b      	ldr	r3, [r7, #16]
 8101f52:	ee07 3a90 	vmov	s15, r3
 8101f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810207c <HAL_RCC_GetSysClockFreq+0x2ec>
 8101f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f62:	4b40      	ldr	r3, [pc, #256]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f6a:	ee07 3a90 	vmov	s15, r3
 8101f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101f92:	e043      	b.n	810201c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101f94:	693b      	ldr	r3, [r7, #16]
 8101f96:	ee07 3a90 	vmov	s15, r3
 8101f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102080 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fa6:	4b2f      	ldr	r3, [pc, #188]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101fae:	ee07 3a90 	vmov	s15, r3
 8101fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8101fba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101fd6:	e021      	b.n	810201c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101fd8:	693b      	ldr	r3, [r7, #16]
 8101fda:	ee07 3a90 	vmov	s15, r3
 8101fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101fe2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810207c <HAL_RCC_GetSysClockFreq+0x2ec>
 8101fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fea:	4b1e      	ldr	r3, [pc, #120]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ff2:	ee07 3a90 	vmov	s15, r3
 8101ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ffe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810200a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810200e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810201a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810201c:	4b11      	ldr	r3, [pc, #68]	; (8102064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102020:	0a5b      	lsrs	r3, r3, #9
 8102022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102026:	3301      	adds	r3, #1
 8102028:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810202a:	683b      	ldr	r3, [r7, #0]
 810202c:	ee07 3a90 	vmov	s15, r3
 8102030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102034:	edd7 6a07 	vldr	s13, [r7, #28]
 8102038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810203c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102040:	ee17 3a90 	vmov	r3, s15
 8102044:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8102046:	e005      	b.n	8102054 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8102048:	2300      	movs	r3, #0
 810204a:	61bb      	str	r3, [r7, #24]
    break;
 810204c:	e002      	b.n	8102054 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810204e:	4b07      	ldr	r3, [pc, #28]	; (810206c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102050:	61bb      	str	r3, [r7, #24]
    break;
 8102052:	bf00      	nop
  }

  return sysclockfreq;
 8102054:	69bb      	ldr	r3, [r7, #24]
}
 8102056:	4618      	mov	r0, r3
 8102058:	3724      	adds	r7, #36	; 0x24
 810205a:	46bd      	mov	sp, r7
 810205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102060:	4770      	bx	lr
 8102062:	bf00      	nop
 8102064:	58024400 	.word	0x58024400
 8102068:	03d09000 	.word	0x03d09000
 810206c:	003d0900 	.word	0x003d0900
 8102070:	007a1200 	.word	0x007a1200
 8102074:	46000000 	.word	0x46000000
 8102078:	4c742400 	.word	0x4c742400
 810207c:	4a742400 	.word	0x4a742400
 8102080:	4af42400 	.word	0x4af42400

08102084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102084:	b580      	push	{r7, lr}
 8102086:	b082      	sub	sp, #8
 8102088:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810208a:	f7ff fe81 	bl	8101d90 <HAL_RCC_GetSysClockFreq>
 810208e:	4602      	mov	r2, r0
 8102090:	4b11      	ldr	r3, [pc, #68]	; (81020d8 <HAL_RCC_GetHCLKFreq+0x54>)
 8102092:	699b      	ldr	r3, [r3, #24]
 8102094:	0a1b      	lsrs	r3, r3, #8
 8102096:	f003 030f 	and.w	r3, r3, #15
 810209a:	4910      	ldr	r1, [pc, #64]	; (81020dc <HAL_RCC_GetHCLKFreq+0x58>)
 810209c:	5ccb      	ldrb	r3, [r1, r3]
 810209e:	f003 031f 	and.w	r3, r3, #31
 81020a2:	fa22 f303 	lsr.w	r3, r2, r3
 81020a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81020a8:	4b0b      	ldr	r3, [pc, #44]	; (81020d8 <HAL_RCC_GetHCLKFreq+0x54>)
 81020aa:	699b      	ldr	r3, [r3, #24]
 81020ac:	f003 030f 	and.w	r3, r3, #15
 81020b0:	4a0a      	ldr	r2, [pc, #40]	; (81020dc <HAL_RCC_GetHCLKFreq+0x58>)
 81020b2:	5cd3      	ldrb	r3, [r2, r3]
 81020b4:	f003 031f 	and.w	r3, r3, #31
 81020b8:	687a      	ldr	r2, [r7, #4]
 81020ba:	fa22 f303 	lsr.w	r3, r2, r3
 81020be:	4a08      	ldr	r2, [pc, #32]	; (81020e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81020c0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81020c2:	4b07      	ldr	r3, [pc, #28]	; (81020e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81020c4:	681b      	ldr	r3, [r3, #0]
 81020c6:	4a07      	ldr	r2, [pc, #28]	; (81020e4 <HAL_RCC_GetHCLKFreq+0x60>)
 81020c8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81020ca:	4b05      	ldr	r3, [pc, #20]	; (81020e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81020cc:	681b      	ldr	r3, [r3, #0]
}
 81020ce:	4618      	mov	r0, r3
 81020d0:	3708      	adds	r7, #8
 81020d2:	46bd      	mov	sp, r7
 81020d4:	bd80      	pop	{r7, pc}
 81020d6:	bf00      	nop
 81020d8:	58024400 	.word	0x58024400
 81020dc:	08106cac 	.word	0x08106cac
 81020e0:	10000004 	.word	0x10000004
 81020e4:	10000000 	.word	0x10000000

081020e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81020e8:	b580      	push	{r7, lr}
 81020ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81020ec:	f7ff ffca 	bl	8102084 <HAL_RCC_GetHCLKFreq>
 81020f0:	4602      	mov	r2, r0
 81020f2:	4b06      	ldr	r3, [pc, #24]	; (810210c <HAL_RCC_GetPCLK1Freq+0x24>)
 81020f4:	69db      	ldr	r3, [r3, #28]
 81020f6:	091b      	lsrs	r3, r3, #4
 81020f8:	f003 0307 	and.w	r3, r3, #7
 81020fc:	4904      	ldr	r1, [pc, #16]	; (8102110 <HAL_RCC_GetPCLK1Freq+0x28>)
 81020fe:	5ccb      	ldrb	r3, [r1, r3]
 8102100:	f003 031f 	and.w	r3, r3, #31
 8102104:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8102108:	4618      	mov	r0, r3
 810210a:	bd80      	pop	{r7, pc}
 810210c:	58024400 	.word	0x58024400
 8102110:	08106cac 	.word	0x08106cac

08102114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102114:	b580      	push	{r7, lr}
 8102116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8102118:	f7ff ffb4 	bl	8102084 <HAL_RCC_GetHCLKFreq>
 810211c:	4602      	mov	r2, r0
 810211e:	4b06      	ldr	r3, [pc, #24]	; (8102138 <HAL_RCC_GetPCLK2Freq+0x24>)
 8102120:	69db      	ldr	r3, [r3, #28]
 8102122:	0a1b      	lsrs	r3, r3, #8
 8102124:	f003 0307 	and.w	r3, r3, #7
 8102128:	4904      	ldr	r1, [pc, #16]	; (810213c <HAL_RCC_GetPCLK2Freq+0x28>)
 810212a:	5ccb      	ldrb	r3, [r1, r3]
 810212c:	f003 031f 	and.w	r3, r3, #31
 8102130:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102134:	4618      	mov	r0, r3
 8102136:	bd80      	pop	{r7, pc}
 8102138:	58024400 	.word	0x58024400
 810213c:	08106cac 	.word	0x08106cac

08102140 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102140:	b580      	push	{r7, lr}
 8102142:	b086      	sub	sp, #24
 8102144:	af00      	add	r7, sp, #0
 8102146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102148:	2300      	movs	r3, #0
 810214a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810214c:	2300      	movs	r3, #0
 810214e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102150:	687b      	ldr	r3, [r7, #4]
 8102152:	681b      	ldr	r3, [r3, #0]
 8102154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8102158:	2b00      	cmp	r3, #0
 810215a:	d03f      	beq.n	81021dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 810215c:	687b      	ldr	r3, [r7, #4]
 810215e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102160:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102164:	d02a      	beq.n	81021bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8102166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810216a:	d824      	bhi.n	81021b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 810216c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102170:	d018      	beq.n	81021a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102176:	d81e      	bhi.n	81021b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8102178:	2b00      	cmp	r3, #0
 810217a:	d003      	beq.n	8102184 <HAL_RCCEx_PeriphCLKConfig+0x44>
 810217c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102180:	d007      	beq.n	8102192 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8102182:	e018      	b.n	81021b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102184:	4bab      	ldr	r3, [pc, #684]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102188:	4aaa      	ldr	r2, [pc, #680]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810218a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810218e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8102190:	e015      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	3304      	adds	r3, #4
 8102196:	2102      	movs	r1, #2
 8102198:	4618      	mov	r0, r3
 810219a:	f001 f9cf 	bl	810353c <RCCEx_PLL2_Config>
 810219e:	4603      	mov	r3, r0
 81021a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81021a2:	e00c      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81021a4:	687b      	ldr	r3, [r7, #4]
 81021a6:	3324      	adds	r3, #36	; 0x24
 81021a8:	2102      	movs	r1, #2
 81021aa:	4618      	mov	r0, r3
 81021ac:	f001 fa78 	bl	81036a0 <RCCEx_PLL3_Config>
 81021b0:	4603      	mov	r3, r0
 81021b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 81021b4:	e003      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81021b6:	2301      	movs	r3, #1
 81021b8:	75fb      	strb	r3, [r7, #23]
      break;
 81021ba:	e000      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 81021bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 81021be:	7dfb      	ldrb	r3, [r7, #23]
 81021c0:	2b00      	cmp	r3, #0
 81021c2:	d109      	bne.n	81021d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81021c4:	4b9b      	ldr	r3, [pc, #620]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81021c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81021c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 81021cc:	687b      	ldr	r3, [r7, #4]
 81021ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81021d0:	4998      	ldr	r1, [pc, #608]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81021d2:	4313      	orrs	r3, r2
 81021d4:	650b      	str	r3, [r1, #80]	; 0x50
 81021d6:	e001      	b.n	81021dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021d8:	7dfb      	ldrb	r3, [r7, #23]
 81021da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81021dc:	687b      	ldr	r3, [r7, #4]
 81021de:	681b      	ldr	r3, [r3, #0]
 81021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81021e4:	2b00      	cmp	r3, #0
 81021e6:	d03d      	beq.n	8102264 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 81021e8:	687b      	ldr	r3, [r7, #4]
 81021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021ec:	2b04      	cmp	r3, #4
 81021ee:	d826      	bhi.n	810223e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 81021f0:	a201      	add	r2, pc, #4	; (adr r2, 81021f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 81021f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81021f6:	bf00      	nop
 81021f8:	0810220d 	.word	0x0810220d
 81021fc:	0810221b 	.word	0x0810221b
 8102200:	0810222d 	.word	0x0810222d
 8102204:	08102245 	.word	0x08102245
 8102208:	08102245 	.word	0x08102245
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810220c:	4b89      	ldr	r3, [pc, #548]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102210:	4a88      	ldr	r2, [pc, #544]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8102212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102218:	e015      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	3304      	adds	r3, #4
 810221e:	2100      	movs	r1, #0
 8102220:	4618      	mov	r0, r3
 8102222:	f001 f98b 	bl	810353c <RCCEx_PLL2_Config>
 8102226:	4603      	mov	r3, r0
 8102228:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810222a:	e00c      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810222c:	687b      	ldr	r3, [r7, #4]
 810222e:	3324      	adds	r3, #36	; 0x24
 8102230:	2100      	movs	r1, #0
 8102232:	4618      	mov	r0, r3
 8102234:	f001 fa34 	bl	81036a0 <RCCEx_PLL3_Config>
 8102238:	4603      	mov	r3, r0
 810223a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810223c:	e003      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810223e:	2301      	movs	r3, #1
 8102240:	75fb      	strb	r3, [r7, #23]
      break;
 8102242:	e000      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8102244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102246:	7dfb      	ldrb	r3, [r7, #23]
 8102248:	2b00      	cmp	r3, #0
 810224a:	d109      	bne.n	8102260 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810224c:	4b79      	ldr	r3, [pc, #484]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810224e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102250:	f023 0207 	bic.w	r2, r3, #7
 8102254:	687b      	ldr	r3, [r7, #4]
 8102256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102258:	4976      	ldr	r1, [pc, #472]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810225a:	4313      	orrs	r3, r2
 810225c:	650b      	str	r3, [r1, #80]	; 0x50
 810225e:	e001      	b.n	8102264 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102260:	7dfb      	ldrb	r3, [r7, #23]
 8102262:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102264:	687b      	ldr	r3, [r7, #4]
 8102266:	681b      	ldr	r3, [r3, #0]
 8102268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810226c:	2b00      	cmp	r3, #0
 810226e:	d042      	beq.n	81022f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8102270:	687b      	ldr	r3, [r7, #4]
 8102272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102278:	d02b      	beq.n	81022d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 810227a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810227e:	d825      	bhi.n	81022cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102280:	2bc0      	cmp	r3, #192	; 0xc0
 8102282:	d028      	beq.n	81022d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8102284:	2bc0      	cmp	r3, #192	; 0xc0
 8102286:	d821      	bhi.n	81022cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102288:	2b80      	cmp	r3, #128	; 0x80
 810228a:	d016      	beq.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 810228c:	2b80      	cmp	r3, #128	; 0x80
 810228e:	d81d      	bhi.n	81022cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8102290:	2b00      	cmp	r3, #0
 8102292:	d002      	beq.n	810229a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8102294:	2b40      	cmp	r3, #64	; 0x40
 8102296:	d007      	beq.n	81022a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8102298:	e018      	b.n	81022cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810229a:	4b66      	ldr	r3, [pc, #408]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810229e:	4a65      	ldr	r2, [pc, #404]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81022a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81022a6:	e017      	b.n	81022d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	3304      	adds	r3, #4
 81022ac:	2100      	movs	r1, #0
 81022ae:	4618      	mov	r0, r3
 81022b0:	f001 f944 	bl	810353c <RCCEx_PLL2_Config>
 81022b4:	4603      	mov	r3, r0
 81022b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81022b8:	e00e      	b.n	81022d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	3324      	adds	r3, #36	; 0x24
 81022be:	2100      	movs	r1, #0
 81022c0:	4618      	mov	r0, r3
 81022c2:	f001 f9ed 	bl	81036a0 <RCCEx_PLL3_Config>
 81022c6:	4603      	mov	r3, r0
 81022c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 81022ca:	e005      	b.n	81022d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81022cc:	2301      	movs	r3, #1
 81022ce:	75fb      	strb	r3, [r7, #23]
      break;
 81022d0:	e002      	b.n	81022d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81022d2:	bf00      	nop
 81022d4:	e000      	b.n	81022d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 81022d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81022d8:	7dfb      	ldrb	r3, [r7, #23]
 81022da:	2b00      	cmp	r3, #0
 81022dc:	d109      	bne.n	81022f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 81022de:	4b55      	ldr	r3, [pc, #340]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81022e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81022e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 81022e6:	687b      	ldr	r3, [r7, #4]
 81022e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022ea:	4952      	ldr	r1, [pc, #328]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81022ec:	4313      	orrs	r3, r2
 81022ee:	650b      	str	r3, [r1, #80]	; 0x50
 81022f0:	e001      	b.n	81022f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022f2:	7dfb      	ldrb	r3, [r7, #23]
 81022f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	681b      	ldr	r3, [r3, #0]
 81022fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81022fe:	2b00      	cmp	r3, #0
 8102300:	d049      	beq.n	8102396 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8102302:	687b      	ldr	r3, [r7, #4]
 8102304:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8102308:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810230c:	d030      	beq.n	8102370 <HAL_RCCEx_PeriphCLKConfig+0x230>
 810230e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102312:	d82a      	bhi.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102314:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8102318:	d02c      	beq.n	8102374 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810231a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810231e:	d824      	bhi.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8102320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102324:	d018      	beq.n	8102358 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8102326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810232a:	d81e      	bhi.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 810232c:	2b00      	cmp	r3, #0
 810232e:	d003      	beq.n	8102338 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8102330:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102334:	d007      	beq.n	8102346 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8102336:	e018      	b.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102338:	4b3e      	ldr	r3, [pc, #248]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810233c:	4a3d      	ldr	r2, [pc, #244]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810233e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102342:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102344:	e017      	b.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	3304      	adds	r3, #4
 810234a:	2100      	movs	r1, #0
 810234c:	4618      	mov	r0, r3
 810234e:	f001 f8f5 	bl	810353c <RCCEx_PLL2_Config>
 8102352:	4603      	mov	r3, r0
 8102354:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8102356:	e00e      	b.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8102358:	687b      	ldr	r3, [r7, #4]
 810235a:	3324      	adds	r3, #36	; 0x24
 810235c:	2100      	movs	r1, #0
 810235e:	4618      	mov	r0, r3
 8102360:	f001 f99e 	bl	81036a0 <RCCEx_PLL3_Config>
 8102364:	4603      	mov	r3, r0
 8102366:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102368:	e005      	b.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810236a:	2301      	movs	r3, #1
 810236c:	75fb      	strb	r3, [r7, #23]
      break;
 810236e:	e002      	b.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102370:	bf00      	nop
 8102372:	e000      	b.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8102374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102376:	7dfb      	ldrb	r3, [r7, #23]
 8102378:	2b00      	cmp	r3, #0
 810237a:	d10a      	bne.n	8102392 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810237c:	4b2d      	ldr	r3, [pc, #180]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102380:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8102384:	687b      	ldr	r3, [r7, #4]
 8102386:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810238a:	492a      	ldr	r1, [pc, #168]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810238c:	4313      	orrs	r3, r2
 810238e:	658b      	str	r3, [r1, #88]	; 0x58
 8102390:	e001      	b.n	8102396 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102392:	7dfb      	ldrb	r3, [r7, #23]
 8102394:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102396:	687b      	ldr	r3, [r7, #4]
 8102398:	681b      	ldr	r3, [r3, #0]
 810239a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810239e:	2b00      	cmp	r3, #0
 81023a0:	d04c      	beq.n	810243c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 81023a2:	687b      	ldr	r3, [r7, #4]
 81023a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81023a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81023ac:	d030      	beq.n	8102410 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 81023ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81023b2:	d82a      	bhi.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81023b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81023b8:	d02c      	beq.n	8102414 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 81023ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 81023be:	d824      	bhi.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81023c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81023c4:	d018      	beq.n	81023f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 81023c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81023ca:	d81e      	bhi.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 81023cc:	2b00      	cmp	r3, #0
 81023ce:	d003      	beq.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 81023d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81023d4:	d007      	beq.n	81023e6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 81023d6:	e018      	b.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023d8:	4b16      	ldr	r3, [pc, #88]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023dc:	4a15      	ldr	r2, [pc, #84]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81023de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81023e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81023e4:	e017      	b.n	8102416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81023e6:	687b      	ldr	r3, [r7, #4]
 81023e8:	3304      	adds	r3, #4
 81023ea:	2100      	movs	r1, #0
 81023ec:	4618      	mov	r0, r3
 81023ee:	f001 f8a5 	bl	810353c <RCCEx_PLL2_Config>
 81023f2:	4603      	mov	r3, r0
 81023f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81023f6:	e00e      	b.n	8102416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	3324      	adds	r3, #36	; 0x24
 81023fc:	2100      	movs	r1, #0
 81023fe:	4618      	mov	r0, r3
 8102400:	f001 f94e 	bl	81036a0 <RCCEx_PLL3_Config>
 8102404:	4603      	mov	r3, r0
 8102406:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8102408:	e005      	b.n	8102416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810240a:	2301      	movs	r3, #1
 810240c:	75fb      	strb	r3, [r7, #23]
      break;
 810240e:	e002      	b.n	8102416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102410:	bf00      	nop
 8102412:	e000      	b.n	8102416 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8102414:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102416:	7dfb      	ldrb	r3, [r7, #23]
 8102418:	2b00      	cmp	r3, #0
 810241a:	d10d      	bne.n	8102438 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810241c:	4b05      	ldr	r3, [pc, #20]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102420:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810242a:	4902      	ldr	r1, [pc, #8]	; (8102434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810242c:	4313      	orrs	r3, r2
 810242e:	658b      	str	r3, [r1, #88]	; 0x58
 8102430:	e004      	b.n	810243c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8102432:	bf00      	nop
 8102434:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102438:	7dfb      	ldrb	r3, [r7, #23]
 810243a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	681b      	ldr	r3, [r3, #0]
 8102440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102444:	2b00      	cmp	r3, #0
 8102446:	d032      	beq.n	81024ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810244c:	2b30      	cmp	r3, #48	; 0x30
 810244e:	d01c      	beq.n	810248a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102450:	2b30      	cmp	r3, #48	; 0x30
 8102452:	d817      	bhi.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8102454:	2b20      	cmp	r3, #32
 8102456:	d00c      	beq.n	8102472 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8102458:	2b20      	cmp	r3, #32
 810245a:	d813      	bhi.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0x344>
 810245c:	2b00      	cmp	r3, #0
 810245e:	d016      	beq.n	810248e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8102460:	2b10      	cmp	r3, #16
 8102462:	d10f      	bne.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102464:	4baf      	ldr	r3, [pc, #700]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102468:	4aae      	ldr	r2, [pc, #696]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810246a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810246e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102470:	e00e      	b.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102472:	687b      	ldr	r3, [r7, #4]
 8102474:	3304      	adds	r3, #4
 8102476:	2102      	movs	r1, #2
 8102478:	4618      	mov	r0, r3
 810247a:	f001 f85f 	bl	810353c <RCCEx_PLL2_Config>
 810247e:	4603      	mov	r3, r0
 8102480:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8102482:	e005      	b.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102484:	2301      	movs	r3, #1
 8102486:	75fb      	strb	r3, [r7, #23]
      break;
 8102488:	e002      	b.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810248a:	bf00      	nop
 810248c:	e000      	b.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810248e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102490:	7dfb      	ldrb	r3, [r7, #23]
 8102492:	2b00      	cmp	r3, #0
 8102494:	d109      	bne.n	81024aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102496:	4ba3      	ldr	r3, [pc, #652]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810249a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81024a2:	49a0      	ldr	r1, [pc, #640]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81024a4:	4313      	orrs	r3, r2
 81024a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81024a8:	e001      	b.n	81024ae <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024aa:	7dfb      	ldrb	r3, [r7, #23]
 81024ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	681b      	ldr	r3, [r3, #0]
 81024b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81024b6:	2b00      	cmp	r3, #0
 81024b8:	d047      	beq.n	810254a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81024be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81024c2:	d030      	beq.n	8102526 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 81024c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81024c8:	d82a      	bhi.n	8102520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81024ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81024ce:	d02c      	beq.n	810252a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 81024d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81024d4:	d824      	bhi.n	8102520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81024d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81024da:	d018      	beq.n	810250e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 81024dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81024e0:	d81e      	bhi.n	8102520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 81024e2:	2b00      	cmp	r3, #0
 81024e4:	d003      	beq.n	81024ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 81024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81024ea:	d007      	beq.n	81024fc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 81024ec:	e018      	b.n	8102520 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81024ee:	4b8d      	ldr	r3, [pc, #564]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81024f2:	4a8c      	ldr	r2, [pc, #560]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81024f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81024fa:	e017      	b.n	810252c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	3304      	adds	r3, #4
 8102500:	2100      	movs	r1, #0
 8102502:	4618      	mov	r0, r3
 8102504:	f001 f81a 	bl	810353c <RCCEx_PLL2_Config>
 8102508:	4603      	mov	r3, r0
 810250a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810250c:	e00e      	b.n	810252c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810250e:	687b      	ldr	r3, [r7, #4]
 8102510:	3324      	adds	r3, #36	; 0x24
 8102512:	2100      	movs	r1, #0
 8102514:	4618      	mov	r0, r3
 8102516:	f001 f8c3 	bl	81036a0 <RCCEx_PLL3_Config>
 810251a:	4603      	mov	r3, r0
 810251c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810251e:	e005      	b.n	810252c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102520:	2301      	movs	r3, #1
 8102522:	75fb      	strb	r3, [r7, #23]
      break;
 8102524:	e002      	b.n	810252c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8102526:	bf00      	nop
 8102528:	e000      	b.n	810252c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 810252a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810252c:	7dfb      	ldrb	r3, [r7, #23]
 810252e:	2b00      	cmp	r3, #0
 8102530:	d109      	bne.n	8102546 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102532:	4b7c      	ldr	r3, [pc, #496]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102536:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810253e:	4979      	ldr	r1, [pc, #484]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102540:	4313      	orrs	r3, r2
 8102542:	650b      	str	r3, [r1, #80]	; 0x50
 8102544:	e001      	b.n	810254a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102546:	7dfb      	ldrb	r3, [r7, #23]
 8102548:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810254a:	687b      	ldr	r3, [r7, #4]
 810254c:	681b      	ldr	r3, [r3, #0]
 810254e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8102552:	2b00      	cmp	r3, #0
 8102554:	d049      	beq.n	81025ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810255a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810255e:	d02e      	beq.n	81025be <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8102560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102564:	d828      	bhi.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 810256a:	d02a      	beq.n	81025c2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 810256c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102570:	d822      	bhi.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8102572:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102576:	d026      	beq.n	81025c6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8102578:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810257c:	d81c      	bhi.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810257e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102582:	d010      	beq.n	81025a6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8102584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102588:	d816      	bhi.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 810258a:	2b00      	cmp	r3, #0
 810258c:	d01d      	beq.n	81025ca <HAL_RCCEx_PeriphCLKConfig+0x48a>
 810258e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102592:	d111      	bne.n	81025b8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102594:	687b      	ldr	r3, [r7, #4]
 8102596:	3304      	adds	r3, #4
 8102598:	2101      	movs	r1, #1
 810259a:	4618      	mov	r0, r3
 810259c:	f000 ffce 	bl	810353c <RCCEx_PLL2_Config>
 81025a0:	4603      	mov	r3, r0
 81025a2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81025a4:	e012      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81025a6:	687b      	ldr	r3, [r7, #4]
 81025a8:	3324      	adds	r3, #36	; 0x24
 81025aa:	2101      	movs	r1, #1
 81025ac:	4618      	mov	r0, r3
 81025ae:	f001 f877 	bl	81036a0 <RCCEx_PLL3_Config>
 81025b2:	4603      	mov	r3, r0
 81025b4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81025b6:	e009      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81025b8:	2301      	movs	r3, #1
 81025ba:	75fb      	strb	r3, [r7, #23]
      break;
 81025bc:	e006      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81025be:	bf00      	nop
 81025c0:	e004      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81025c2:	bf00      	nop
 81025c4:	e002      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81025c6:	bf00      	nop
 81025c8:	e000      	b.n	81025cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 81025ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 81025cc:	7dfb      	ldrb	r3, [r7, #23]
 81025ce:	2b00      	cmp	r3, #0
 81025d0:	d109      	bne.n	81025e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 81025d2:	4b54      	ldr	r3, [pc, #336]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81025d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81025d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81025de:	4951      	ldr	r1, [pc, #324]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81025e0:	4313      	orrs	r3, r2
 81025e2:	650b      	str	r3, [r1, #80]	; 0x50
 81025e4:	e001      	b.n	81025ea <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025e6:	7dfb      	ldrb	r3, [r7, #23]
 81025e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81025ea:	687b      	ldr	r3, [r7, #4]
 81025ec:	681b      	ldr	r3, [r3, #0]
 81025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81025f2:	2b00      	cmp	r3, #0
 81025f4:	d04b      	beq.n	810268e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 81025f6:	687b      	ldr	r3, [r7, #4]
 81025f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81025fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102600:	d02e      	beq.n	8102660 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8102602:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102606:	d828      	bhi.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810260c:	d02a      	beq.n	8102664 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810260e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102612:	d822      	bhi.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102618:	d026      	beq.n	8102668 <HAL_RCCEx_PeriphCLKConfig+0x528>
 810261a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810261e:	d81c      	bhi.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102624:	d010      	beq.n	8102648 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8102626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810262a:	d816      	bhi.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810262c:	2b00      	cmp	r3, #0
 810262e:	d01d      	beq.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8102630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102634:	d111      	bne.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102636:	687b      	ldr	r3, [r7, #4]
 8102638:	3304      	adds	r3, #4
 810263a:	2101      	movs	r1, #1
 810263c:	4618      	mov	r0, r3
 810263e:	f000 ff7d 	bl	810353c <RCCEx_PLL2_Config>
 8102642:	4603      	mov	r3, r0
 8102644:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102646:	e012      	b.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102648:	687b      	ldr	r3, [r7, #4]
 810264a:	3324      	adds	r3, #36	; 0x24
 810264c:	2101      	movs	r1, #1
 810264e:	4618      	mov	r0, r3
 8102650:	f001 f826 	bl	81036a0 <RCCEx_PLL3_Config>
 8102654:	4603      	mov	r3, r0
 8102656:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102658:	e009      	b.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 810265a:	2301      	movs	r3, #1
 810265c:	75fb      	strb	r3, [r7, #23]
      break;
 810265e:	e006      	b.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102660:	bf00      	nop
 8102662:	e004      	b.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102664:	bf00      	nop
 8102666:	e002      	b.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8102668:	bf00      	nop
 810266a:	e000      	b.n	810266e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 810266c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810266e:	7dfb      	ldrb	r3, [r7, #23]
 8102670:	2b00      	cmp	r3, #0
 8102672:	d10a      	bne.n	810268a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102674:	4b2b      	ldr	r3, [pc, #172]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102678:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810267c:	687b      	ldr	r3, [r7, #4]
 810267e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102682:	4928      	ldr	r1, [pc, #160]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102684:	4313      	orrs	r3, r2
 8102686:	658b      	str	r3, [r1, #88]	; 0x58
 8102688:	e001      	b.n	810268e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810268a:	7dfb      	ldrb	r3, [r7, #23]
 810268c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 810268e:	687b      	ldr	r3, [r7, #4]
 8102690:	681b      	ldr	r3, [r3, #0]
 8102692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102696:	2b00      	cmp	r3, #0
 8102698:	d02f      	beq.n	81026fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810269a:	687b      	ldr	r3, [r7, #4]
 810269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810269e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81026a2:	d00e      	beq.n	81026c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 81026a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81026a8:	d814      	bhi.n	81026d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 81026aa:	2b00      	cmp	r3, #0
 81026ac:	d015      	beq.n	81026da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81026ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81026b2:	d10f      	bne.n	81026d4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026b4:	4b1b      	ldr	r3, [pc, #108]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81026b8:	4a1a      	ldr	r2, [pc, #104]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81026ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81026be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81026c0:	e00c      	b.n	81026dc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81026c2:	687b      	ldr	r3, [r7, #4]
 81026c4:	3304      	adds	r3, #4
 81026c6:	2101      	movs	r1, #1
 81026c8:	4618      	mov	r0, r3
 81026ca:	f000 ff37 	bl	810353c <RCCEx_PLL2_Config>
 81026ce:	4603      	mov	r3, r0
 81026d0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 81026d2:	e003      	b.n	81026dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81026d4:	2301      	movs	r3, #1
 81026d6:	75fb      	strb	r3, [r7, #23]
      break;
 81026d8:	e000      	b.n	81026dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 81026da:	bf00      	nop
    }

    if(ret == HAL_OK)
 81026dc:	7dfb      	ldrb	r3, [r7, #23]
 81026de:	2b00      	cmp	r3, #0
 81026e0:	d109      	bne.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81026e2:	4b10      	ldr	r3, [pc, #64]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81026e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81026e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81026ee:	490d      	ldr	r1, [pc, #52]	; (8102724 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81026f0:	4313      	orrs	r3, r2
 81026f2:	650b      	str	r3, [r1, #80]	; 0x50
 81026f4:	e001      	b.n	81026fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81026f6:	7dfb      	ldrb	r3, [r7, #23]
 81026f8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 81026fa:	687b      	ldr	r3, [r7, #4]
 81026fc:	681b      	ldr	r3, [r3, #0]
 81026fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102702:	2b00      	cmp	r3, #0
 8102704:	d033      	beq.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8102706:	687b      	ldr	r3, [r7, #4]
 8102708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810270a:	2b03      	cmp	r3, #3
 810270c:	d81c      	bhi.n	8102748 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810270e:	a201      	add	r2, pc, #4	; (adr r2, 8102714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8102710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102714:	0810274f 	.word	0x0810274f
 8102718:	08102729 	.word	0x08102729
 810271c:	08102737 	.word	0x08102737
 8102720:	0810274f 	.word	0x0810274f
 8102724:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102728:	4bb9      	ldr	r3, [pc, #740]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810272c:	4ab8      	ldr	r2, [pc, #736]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810272e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102732:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102734:	e00c      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102736:	687b      	ldr	r3, [r7, #4]
 8102738:	3304      	adds	r3, #4
 810273a:	2102      	movs	r1, #2
 810273c:	4618      	mov	r0, r3
 810273e:	f000 fefd 	bl	810353c <RCCEx_PLL2_Config>
 8102742:	4603      	mov	r3, r0
 8102744:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102746:	e003      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102748:	2301      	movs	r3, #1
 810274a:	75fb      	strb	r3, [r7, #23]
      break;
 810274c:	e000      	b.n	8102750 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810274e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102750:	7dfb      	ldrb	r3, [r7, #23]
 8102752:	2b00      	cmp	r3, #0
 8102754:	d109      	bne.n	810276a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102756:	4bae      	ldr	r3, [pc, #696]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810275a:	f023 0203 	bic.w	r2, r3, #3
 810275e:	687b      	ldr	r3, [r7, #4]
 8102760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102762:	49ab      	ldr	r1, [pc, #684]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102764:	4313      	orrs	r3, r2
 8102766:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102768:	e001      	b.n	810276e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810276a:	7dfb      	ldrb	r3, [r7, #23]
 810276c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 810276e:	687b      	ldr	r3, [r7, #4]
 8102770:	681b      	ldr	r3, [r3, #0]
 8102772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102776:	2b00      	cmp	r3, #0
 8102778:	f000 8088 	beq.w	810288c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810277c:	4ba5      	ldr	r3, [pc, #660]	; (8102a14 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810277e:	681b      	ldr	r3, [r3, #0]
 8102780:	4aa4      	ldr	r2, [pc, #656]	; (8102a14 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8102782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102788:	f7fe ff30 	bl	81015ec <HAL_GetTick>
 810278c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810278e:	e009      	b.n	81027a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102790:	f7fe ff2c 	bl	81015ec <HAL_GetTick>
 8102794:	4602      	mov	r2, r0
 8102796:	693b      	ldr	r3, [r7, #16]
 8102798:	1ad3      	subs	r3, r2, r3
 810279a:	2b64      	cmp	r3, #100	; 0x64
 810279c:	d902      	bls.n	81027a4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810279e:	2303      	movs	r3, #3
 81027a0:	75fb      	strb	r3, [r7, #23]
        break;
 81027a2:	e005      	b.n	81027b0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81027a4:	4b9b      	ldr	r3, [pc, #620]	; (8102a14 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81027a6:	681b      	ldr	r3, [r3, #0]
 81027a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	d0ef      	beq.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81027b0:	7dfb      	ldrb	r3, [r7, #23]
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d168      	bne.n	8102888 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 81027b6:	4b96      	ldr	r3, [pc, #600]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81027ba:	687b      	ldr	r3, [r7, #4]
 81027bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81027c0:	4053      	eors	r3, r2
 81027c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81027c6:	2b00      	cmp	r3, #0
 81027c8:	d013      	beq.n	81027f2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81027ca:	4b91      	ldr	r3, [pc, #580]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81027ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 81027d2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81027d4:	4b8e      	ldr	r3, [pc, #568]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81027d8:	4a8d      	ldr	r2, [pc, #564]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81027de:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81027e0:	4b8b      	ldr	r3, [pc, #556]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81027e4:	4a8a      	ldr	r2, [pc, #552]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81027ea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81027ec:	4a88      	ldr	r2, [pc, #544]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81027ee:	68fb      	ldr	r3, [r7, #12]
 81027f0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81027f2:	687b      	ldr	r3, [r7, #4]
 81027f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81027f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81027fc:	d115      	bne.n	810282a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81027fe:	f7fe fef5 	bl	81015ec <HAL_GetTick>
 8102802:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102804:	e00b      	b.n	810281e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102806:	f7fe fef1 	bl	81015ec <HAL_GetTick>
 810280a:	4602      	mov	r2, r0
 810280c:	693b      	ldr	r3, [r7, #16]
 810280e:	1ad3      	subs	r3, r2, r3
 8102810:	f241 3288 	movw	r2, #5000	; 0x1388
 8102814:	4293      	cmp	r3, r2
 8102816:	d902      	bls.n	810281e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8102818:	2303      	movs	r3, #3
 810281a:	75fb      	strb	r3, [r7, #23]
            break;
 810281c:	e005      	b.n	810282a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810281e:	4b7c      	ldr	r3, [pc, #496]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102822:	f003 0302 	and.w	r3, r3, #2
 8102826:	2b00      	cmp	r3, #0
 8102828:	d0ed      	beq.n	8102806 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 810282a:	7dfb      	ldrb	r3, [r7, #23]
 810282c:	2b00      	cmp	r3, #0
 810282e:	d128      	bne.n	8102882 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102830:	687b      	ldr	r3, [r7, #4]
 8102832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810283a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810283e:	d10f      	bne.n	8102860 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8102840:	4b73      	ldr	r3, [pc, #460]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102842:	691b      	ldr	r3, [r3, #16]
 8102844:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8102848:	687b      	ldr	r3, [r7, #4]
 810284a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810284e:	091b      	lsrs	r3, r3, #4
 8102850:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102854:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102858:	496d      	ldr	r1, [pc, #436]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810285a:	4313      	orrs	r3, r2
 810285c:	610b      	str	r3, [r1, #16]
 810285e:	e005      	b.n	810286c <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8102860:	4b6b      	ldr	r3, [pc, #428]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102862:	691b      	ldr	r3, [r3, #16]
 8102864:	4a6a      	ldr	r2, [pc, #424]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102866:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 810286a:	6113      	str	r3, [r2, #16]
 810286c:	4b68      	ldr	r3, [pc, #416]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810286e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810287a:	4965      	ldr	r1, [pc, #404]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810287c:	4313      	orrs	r3, r2
 810287e:	670b      	str	r3, [r1, #112]	; 0x70
 8102880:	e004      	b.n	810288c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102882:	7dfb      	ldrb	r3, [r7, #23]
 8102884:	75bb      	strb	r3, [r7, #22]
 8102886:	e001      	b.n	810288c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102888:	7dfb      	ldrb	r3, [r7, #23]
 810288a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810288c:	687b      	ldr	r3, [r7, #4]
 810288e:	681b      	ldr	r3, [r3, #0]
 8102890:	f003 0301 	and.w	r3, r3, #1
 8102894:	2b00      	cmp	r3, #0
 8102896:	d07e      	beq.n	8102996 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8102898:	687b      	ldr	r3, [r7, #4]
 810289a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810289c:	2b28      	cmp	r3, #40	; 0x28
 810289e:	d867      	bhi.n	8102970 <HAL_RCCEx_PeriphCLKConfig+0x830>
 81028a0:	a201      	add	r2, pc, #4	; (adr r2, 81028a8 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81028a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81028a6:	bf00      	nop
 81028a8:	08102977 	.word	0x08102977
 81028ac:	08102971 	.word	0x08102971
 81028b0:	08102971 	.word	0x08102971
 81028b4:	08102971 	.word	0x08102971
 81028b8:	08102971 	.word	0x08102971
 81028bc:	08102971 	.word	0x08102971
 81028c0:	08102971 	.word	0x08102971
 81028c4:	08102971 	.word	0x08102971
 81028c8:	0810294d 	.word	0x0810294d
 81028cc:	08102971 	.word	0x08102971
 81028d0:	08102971 	.word	0x08102971
 81028d4:	08102971 	.word	0x08102971
 81028d8:	08102971 	.word	0x08102971
 81028dc:	08102971 	.word	0x08102971
 81028e0:	08102971 	.word	0x08102971
 81028e4:	08102971 	.word	0x08102971
 81028e8:	0810295f 	.word	0x0810295f
 81028ec:	08102971 	.word	0x08102971
 81028f0:	08102971 	.word	0x08102971
 81028f4:	08102971 	.word	0x08102971
 81028f8:	08102971 	.word	0x08102971
 81028fc:	08102971 	.word	0x08102971
 8102900:	08102971 	.word	0x08102971
 8102904:	08102971 	.word	0x08102971
 8102908:	08102977 	.word	0x08102977
 810290c:	08102971 	.word	0x08102971
 8102910:	08102971 	.word	0x08102971
 8102914:	08102971 	.word	0x08102971
 8102918:	08102971 	.word	0x08102971
 810291c:	08102971 	.word	0x08102971
 8102920:	08102971 	.word	0x08102971
 8102924:	08102971 	.word	0x08102971
 8102928:	08102977 	.word	0x08102977
 810292c:	08102971 	.word	0x08102971
 8102930:	08102971 	.word	0x08102971
 8102934:	08102971 	.word	0x08102971
 8102938:	08102971 	.word	0x08102971
 810293c:	08102971 	.word	0x08102971
 8102940:	08102971 	.word	0x08102971
 8102944:	08102971 	.word	0x08102971
 8102948:	08102977 	.word	0x08102977
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810294c:	687b      	ldr	r3, [r7, #4]
 810294e:	3304      	adds	r3, #4
 8102950:	2101      	movs	r1, #1
 8102952:	4618      	mov	r0, r3
 8102954:	f000 fdf2 	bl	810353c <RCCEx_PLL2_Config>
 8102958:	4603      	mov	r3, r0
 810295a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810295c:	e00c      	b.n	8102978 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810295e:	687b      	ldr	r3, [r7, #4]
 8102960:	3324      	adds	r3, #36	; 0x24
 8102962:	2101      	movs	r1, #1
 8102964:	4618      	mov	r0, r3
 8102966:	f000 fe9b 	bl	81036a0 <RCCEx_PLL3_Config>
 810296a:	4603      	mov	r3, r0
 810296c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 810296e:	e003      	b.n	8102978 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102970:	2301      	movs	r3, #1
 8102972:	75fb      	strb	r3, [r7, #23]
      break;
 8102974:	e000      	b.n	8102978 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8102976:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102978:	7dfb      	ldrb	r3, [r7, #23]
 810297a:	2b00      	cmp	r3, #0
 810297c:	d109      	bne.n	8102992 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810297e:	4b24      	ldr	r3, [pc, #144]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102982:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8102986:	687b      	ldr	r3, [r7, #4]
 8102988:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810298a:	4921      	ldr	r1, [pc, #132]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810298c:	4313      	orrs	r3, r2
 810298e:	654b      	str	r3, [r1, #84]	; 0x54
 8102990:	e001      	b.n	8102996 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102992:	7dfb      	ldrb	r3, [r7, #23]
 8102994:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	681b      	ldr	r3, [r3, #0]
 810299a:	f003 0302 	and.w	r3, r3, #2
 810299e:	2b00      	cmp	r3, #0
 81029a0:	d03c      	beq.n	8102a1c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81029a2:	687b      	ldr	r3, [r7, #4]
 81029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81029a6:	2b05      	cmp	r3, #5
 81029a8:	d820      	bhi.n	81029ec <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 81029aa:	a201      	add	r2, pc, #4	; (adr r2, 81029b0 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81029ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81029b0:	081029f3 	.word	0x081029f3
 81029b4:	081029c9 	.word	0x081029c9
 81029b8:	081029db 	.word	0x081029db
 81029bc:	081029f3 	.word	0x081029f3
 81029c0:	081029f3 	.word	0x081029f3
 81029c4:	081029f3 	.word	0x081029f3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	3304      	adds	r3, #4
 81029cc:	2101      	movs	r1, #1
 81029ce:	4618      	mov	r0, r3
 81029d0:	f000 fdb4 	bl	810353c <RCCEx_PLL2_Config>
 81029d4:	4603      	mov	r3, r0
 81029d6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81029d8:	e00c      	b.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81029da:	687b      	ldr	r3, [r7, #4]
 81029dc:	3324      	adds	r3, #36	; 0x24
 81029de:	2101      	movs	r1, #1
 81029e0:	4618      	mov	r0, r3
 81029e2:	f000 fe5d 	bl	81036a0 <RCCEx_PLL3_Config>
 81029e6:	4603      	mov	r3, r0
 81029e8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 81029ea:	e003      	b.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81029ec:	2301      	movs	r3, #1
 81029ee:	75fb      	strb	r3, [r7, #23]
      break;
 81029f0:	e000      	b.n	81029f4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 81029f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81029f4:	7dfb      	ldrb	r3, [r7, #23]
 81029f6:	2b00      	cmp	r3, #0
 81029f8:	d10e      	bne.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81029fa:	4b05      	ldr	r3, [pc, #20]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81029fe:	f023 0207 	bic.w	r2, r3, #7
 8102a02:	687b      	ldr	r3, [r7, #4]
 8102a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102a06:	4902      	ldr	r1, [pc, #8]	; (8102a10 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102a08:	4313      	orrs	r3, r2
 8102a0a:	654b      	str	r3, [r1, #84]	; 0x54
 8102a0c:	e006      	b.n	8102a1c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8102a0e:	bf00      	nop
 8102a10:	58024400 	.word	0x58024400
 8102a14:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a18:	7dfb      	ldrb	r3, [r7, #23]
 8102a1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102a1c:	687b      	ldr	r3, [r7, #4]
 8102a1e:	681b      	ldr	r3, [r3, #0]
 8102a20:	f003 0304 	and.w	r3, r3, #4
 8102a24:	2b00      	cmp	r3, #0
 8102a26:	d039      	beq.n	8102a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102a28:	687b      	ldr	r3, [r7, #4]
 8102a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102a2e:	2b05      	cmp	r3, #5
 8102a30:	d820      	bhi.n	8102a74 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8102a32:	a201      	add	r2, pc, #4	; (adr r2, 8102a38 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8102a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a38:	08102a7b 	.word	0x08102a7b
 8102a3c:	08102a51 	.word	0x08102a51
 8102a40:	08102a63 	.word	0x08102a63
 8102a44:	08102a7b 	.word	0x08102a7b
 8102a48:	08102a7b 	.word	0x08102a7b
 8102a4c:	08102a7b 	.word	0x08102a7b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102a50:	687b      	ldr	r3, [r7, #4]
 8102a52:	3304      	adds	r3, #4
 8102a54:	2101      	movs	r1, #1
 8102a56:	4618      	mov	r0, r3
 8102a58:	f000 fd70 	bl	810353c <RCCEx_PLL2_Config>
 8102a5c:	4603      	mov	r3, r0
 8102a5e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102a60:	e00c      	b.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102a62:	687b      	ldr	r3, [r7, #4]
 8102a64:	3324      	adds	r3, #36	; 0x24
 8102a66:	2101      	movs	r1, #1
 8102a68:	4618      	mov	r0, r3
 8102a6a:	f000 fe19 	bl	81036a0 <RCCEx_PLL3_Config>
 8102a6e:	4603      	mov	r3, r0
 8102a70:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8102a72:	e003      	b.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102a74:	2301      	movs	r3, #1
 8102a76:	75fb      	strb	r3, [r7, #23]
      break;
 8102a78:	e000      	b.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8102a7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a7c:	7dfb      	ldrb	r3, [r7, #23]
 8102a7e:	2b00      	cmp	r3, #0
 8102a80:	d10a      	bne.n	8102a98 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102a82:	4bb7      	ldr	r3, [pc, #732]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102a86:	f023 0207 	bic.w	r2, r3, #7
 8102a8a:	687b      	ldr	r3, [r7, #4]
 8102a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102a90:	49b3      	ldr	r1, [pc, #716]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102a92:	4313      	orrs	r3, r2
 8102a94:	658b      	str	r3, [r1, #88]	; 0x58
 8102a96:	e001      	b.n	8102a9c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a98:	7dfb      	ldrb	r3, [r7, #23]
 8102a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102a9c:	687b      	ldr	r3, [r7, #4]
 8102a9e:	681b      	ldr	r3, [r3, #0]
 8102aa0:	f003 0320 	and.w	r3, r3, #32
 8102aa4:	2b00      	cmp	r3, #0
 8102aa6:	d04b      	beq.n	8102b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8102aa8:	687b      	ldr	r3, [r7, #4]
 8102aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102ab2:	d02e      	beq.n	8102b12 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8102ab4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102ab8:	d828      	bhi.n	8102b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102abe:	d02a      	beq.n	8102b16 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8102ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102ac4:	d822      	bhi.n	8102b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102ac6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102aca:	d026      	beq.n	8102b1a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102acc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102ad0:	d81c      	bhi.n	8102b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102ad2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102ad6:	d010      	beq.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8102ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102adc:	d816      	bhi.n	8102b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102ade:	2b00      	cmp	r3, #0
 8102ae0:	d01d      	beq.n	8102b1e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8102ae2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102ae6:	d111      	bne.n	8102b0c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	3304      	adds	r3, #4
 8102aec:	2100      	movs	r1, #0
 8102aee:	4618      	mov	r0, r3
 8102af0:	f000 fd24 	bl	810353c <RCCEx_PLL2_Config>
 8102af4:	4603      	mov	r3, r0
 8102af6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102af8:	e012      	b.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102afa:	687b      	ldr	r3, [r7, #4]
 8102afc:	3324      	adds	r3, #36	; 0x24
 8102afe:	2102      	movs	r1, #2
 8102b00:	4618      	mov	r0, r3
 8102b02:	f000 fdcd 	bl	81036a0 <RCCEx_PLL3_Config>
 8102b06:	4603      	mov	r3, r0
 8102b08:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102b0a:	e009      	b.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102b0c:	2301      	movs	r3, #1
 8102b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8102b10:	e006      	b.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102b12:	bf00      	nop
 8102b14:	e004      	b.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102b16:	bf00      	nop
 8102b18:	e002      	b.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102b1a:	bf00      	nop
 8102b1c:	e000      	b.n	8102b20 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102b1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102b20:	7dfb      	ldrb	r3, [r7, #23]
 8102b22:	2b00      	cmp	r3, #0
 8102b24:	d10a      	bne.n	8102b3c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102b26:	4b8e      	ldr	r3, [pc, #568]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b2a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102b34:	498a      	ldr	r1, [pc, #552]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102b36:	4313      	orrs	r3, r2
 8102b38:	654b      	str	r3, [r1, #84]	; 0x54
 8102b3a:	e001      	b.n	8102b40 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b3c:	7dfb      	ldrb	r3, [r7, #23]
 8102b3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102b40:	687b      	ldr	r3, [r7, #4]
 8102b42:	681b      	ldr	r3, [r3, #0]
 8102b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102b48:	2b00      	cmp	r3, #0
 8102b4a:	d04b      	beq.n	8102be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102b4c:	687b      	ldr	r3, [r7, #4]
 8102b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102b56:	d02e      	beq.n	8102bb6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8102b58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102b5c:	d828      	bhi.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102b62:	d02a      	beq.n	8102bba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8102b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102b68:	d822      	bhi.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102b6e:	d026      	beq.n	8102bbe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8102b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102b74:	d81c      	bhi.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102b7a:	d010      	beq.n	8102b9e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8102b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102b80:	d816      	bhi.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8102b82:	2b00      	cmp	r3, #0
 8102b84:	d01d      	beq.n	8102bc2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8102b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102b8a:	d111      	bne.n	8102bb0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	3304      	adds	r3, #4
 8102b90:	2100      	movs	r1, #0
 8102b92:	4618      	mov	r0, r3
 8102b94:	f000 fcd2 	bl	810353c <RCCEx_PLL2_Config>
 8102b98:	4603      	mov	r3, r0
 8102b9a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102b9c:	e012      	b.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102b9e:	687b      	ldr	r3, [r7, #4]
 8102ba0:	3324      	adds	r3, #36	; 0x24
 8102ba2:	2102      	movs	r1, #2
 8102ba4:	4618      	mov	r0, r3
 8102ba6:	f000 fd7b 	bl	81036a0 <RCCEx_PLL3_Config>
 8102baa:	4603      	mov	r3, r0
 8102bac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8102bae:	e009      	b.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102bb0:	2301      	movs	r3, #1
 8102bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8102bb4:	e006      	b.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102bb6:	bf00      	nop
 8102bb8:	e004      	b.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102bba:	bf00      	nop
 8102bbc:	e002      	b.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102bbe:	bf00      	nop
 8102bc0:	e000      	b.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102bc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102bc4:	7dfb      	ldrb	r3, [r7, #23]
 8102bc6:	2b00      	cmp	r3, #0
 8102bc8:	d10a      	bne.n	8102be0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102bca:	4b65      	ldr	r3, [pc, #404]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102bce:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8102bd2:	687b      	ldr	r3, [r7, #4]
 8102bd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102bd8:	4961      	ldr	r1, [pc, #388]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102bda:	4313      	orrs	r3, r2
 8102bdc:	658b      	str	r3, [r1, #88]	; 0x58
 8102bde:	e001      	b.n	8102be4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102be0:	7dfb      	ldrb	r3, [r7, #23]
 8102be2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102be4:	687b      	ldr	r3, [r7, #4]
 8102be6:	681b      	ldr	r3, [r3, #0]
 8102be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102bec:	2b00      	cmp	r3, #0
 8102bee:	d04b      	beq.n	8102c88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8102bf0:	687b      	ldr	r3, [r7, #4]
 8102bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102bf6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102bfa:	d02e      	beq.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8102bfc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102c00:	d828      	bhi.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102c06:	d02a      	beq.n	8102c5e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8102c08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102c0c:	d822      	bhi.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102c0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102c12:	d026      	beq.n	8102c62 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102c14:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102c18:	d81c      	bhi.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102c1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102c1e:	d010      	beq.n	8102c42 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8102c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102c24:	d816      	bhi.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102c26:	2b00      	cmp	r3, #0
 8102c28:	d01d      	beq.n	8102c66 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102c2e:	d111      	bne.n	8102c54 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102c30:	687b      	ldr	r3, [r7, #4]
 8102c32:	3304      	adds	r3, #4
 8102c34:	2100      	movs	r1, #0
 8102c36:	4618      	mov	r0, r3
 8102c38:	f000 fc80 	bl	810353c <RCCEx_PLL2_Config>
 8102c3c:	4603      	mov	r3, r0
 8102c3e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102c40:	e012      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102c42:	687b      	ldr	r3, [r7, #4]
 8102c44:	3324      	adds	r3, #36	; 0x24
 8102c46:	2102      	movs	r1, #2
 8102c48:	4618      	mov	r0, r3
 8102c4a:	f000 fd29 	bl	81036a0 <RCCEx_PLL3_Config>
 8102c4e:	4603      	mov	r3, r0
 8102c50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8102c52:	e009      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102c54:	2301      	movs	r3, #1
 8102c56:	75fb      	strb	r3, [r7, #23]
      break;
 8102c58:	e006      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102c5a:	bf00      	nop
 8102c5c:	e004      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102c5e:	bf00      	nop
 8102c60:	e002      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102c62:	bf00      	nop
 8102c64:	e000      	b.n	8102c68 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8102c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102c68:	7dfb      	ldrb	r3, [r7, #23]
 8102c6a:	2b00      	cmp	r3, #0
 8102c6c:	d10a      	bne.n	8102c84 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102c6e:	4b3c      	ldr	r3, [pc, #240]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102c72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102c7c:	4938      	ldr	r1, [pc, #224]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102c7e:	4313      	orrs	r3, r2
 8102c80:	658b      	str	r3, [r1, #88]	; 0x58
 8102c82:	e001      	b.n	8102c88 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c84:	7dfb      	ldrb	r3, [r7, #23]
 8102c86:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102c88:	687b      	ldr	r3, [r7, #4]
 8102c8a:	681b      	ldr	r3, [r3, #0]
 8102c8c:	f003 0308 	and.w	r3, r3, #8
 8102c90:	2b00      	cmp	r3, #0
 8102c92:	d01a      	beq.n	8102cca <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8102c94:	687b      	ldr	r3, [r7, #4]
 8102c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102c9e:	d10a      	bne.n	8102cb6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102ca0:	687b      	ldr	r3, [r7, #4]
 8102ca2:	3324      	adds	r3, #36	; 0x24
 8102ca4:	2102      	movs	r1, #2
 8102ca6:	4618      	mov	r0, r3
 8102ca8:	f000 fcfa 	bl	81036a0 <RCCEx_PLL3_Config>
 8102cac:	4603      	mov	r3, r0
 8102cae:	2b00      	cmp	r3, #0
 8102cb0:	d001      	beq.n	8102cb6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8102cb2:	2301      	movs	r3, #1
 8102cb4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102cb6:	4b2a      	ldr	r3, [pc, #168]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102cbe:	687b      	ldr	r3, [r7, #4]
 8102cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102cc4:	4926      	ldr	r1, [pc, #152]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102cc6:	4313      	orrs	r3, r2
 8102cc8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102cca:	687b      	ldr	r3, [r7, #4]
 8102ccc:	681b      	ldr	r3, [r3, #0]
 8102cce:	f003 0310 	and.w	r3, r3, #16
 8102cd2:	2b00      	cmp	r3, #0
 8102cd4:	d01a      	beq.n	8102d0c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8102cd6:	687b      	ldr	r3, [r7, #4]
 8102cd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102cdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102ce0:	d10a      	bne.n	8102cf8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	3324      	adds	r3, #36	; 0x24
 8102ce6:	2102      	movs	r1, #2
 8102ce8:	4618      	mov	r0, r3
 8102cea:	f000 fcd9 	bl	81036a0 <RCCEx_PLL3_Config>
 8102cee:	4603      	mov	r3, r0
 8102cf0:	2b00      	cmp	r3, #0
 8102cf2:	d001      	beq.n	8102cf8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8102cf4:	2301      	movs	r3, #1
 8102cf6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102cf8:	4b19      	ldr	r3, [pc, #100]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102d06:	4916      	ldr	r1, [pc, #88]	; (8102d60 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102d08:	4313      	orrs	r3, r2
 8102d0a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102d0c:	687b      	ldr	r3, [r7, #4]
 8102d0e:	681b      	ldr	r3, [r3, #0]
 8102d10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102d14:	2b00      	cmp	r3, #0
 8102d16:	d036      	beq.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102d1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102d22:	d01f      	beq.n	8102d64 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8102d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102d28:	d817      	bhi.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102d2a:	2b00      	cmp	r3, #0
 8102d2c:	d003      	beq.n	8102d36 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8102d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102d32:	d009      	beq.n	8102d48 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8102d34:	e011      	b.n	8102d5a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102d36:	687b      	ldr	r3, [r7, #4]
 8102d38:	3304      	adds	r3, #4
 8102d3a:	2100      	movs	r1, #0
 8102d3c:	4618      	mov	r0, r3
 8102d3e:	f000 fbfd 	bl	810353c <RCCEx_PLL2_Config>
 8102d42:	4603      	mov	r3, r0
 8102d44:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102d46:	e00e      	b.n	8102d66 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102d48:	687b      	ldr	r3, [r7, #4]
 8102d4a:	3324      	adds	r3, #36	; 0x24
 8102d4c:	2102      	movs	r1, #2
 8102d4e:	4618      	mov	r0, r3
 8102d50:	f000 fca6 	bl	81036a0 <RCCEx_PLL3_Config>
 8102d54:	4603      	mov	r3, r0
 8102d56:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102d58:	e005      	b.n	8102d66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102d5a:	2301      	movs	r3, #1
 8102d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8102d5e:	e002      	b.n	8102d66 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8102d60:	58024400 	.word	0x58024400
      break;
 8102d64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102d66:	7dfb      	ldrb	r3, [r7, #23]
 8102d68:	2b00      	cmp	r3, #0
 8102d6a:	d10a      	bne.n	8102d82 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102d6c:	4b93      	ldr	r3, [pc, #588]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102d7a:	4990      	ldr	r1, [pc, #576]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102d7c:	4313      	orrs	r3, r2
 8102d7e:	658b      	str	r3, [r1, #88]	; 0x58
 8102d80:	e001      	b.n	8102d86 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d82:	7dfb      	ldrb	r3, [r7, #23]
 8102d84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8102d86:	687b      	ldr	r3, [r7, #4]
 8102d88:	681b      	ldr	r3, [r3, #0]
 8102d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102d8e:	2b00      	cmp	r3, #0
 8102d90:	d033      	beq.n	8102dfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8102d92:	687b      	ldr	r3, [r7, #4]
 8102d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102d98:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102d9c:	d01c      	beq.n	8102dd8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8102d9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102da2:	d816      	bhi.n	8102dd2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8102da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102da8:	d003      	beq.n	8102db2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8102daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102dae:	d007      	beq.n	8102dc0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8102db0:	e00f      	b.n	8102dd2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102db2:	4b82      	ldr	r3, [pc, #520]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102db6:	4a81      	ldr	r2, [pc, #516]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8102dbe:	e00c      	b.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102dc0:	687b      	ldr	r3, [r7, #4]
 8102dc2:	3324      	adds	r3, #36	; 0x24
 8102dc4:	2101      	movs	r1, #1
 8102dc6:	4618      	mov	r0, r3
 8102dc8:	f000 fc6a 	bl	81036a0 <RCCEx_PLL3_Config>
 8102dcc:	4603      	mov	r3, r0
 8102dce:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8102dd0:	e003      	b.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102dd2:	2301      	movs	r3, #1
 8102dd4:	75fb      	strb	r3, [r7, #23]
      break;
 8102dd6:	e000      	b.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8102dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102dda:	7dfb      	ldrb	r3, [r7, #23]
 8102ddc:	2b00      	cmp	r3, #0
 8102dde:	d10a      	bne.n	8102df6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8102de0:	4b76      	ldr	r3, [pc, #472]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102de4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102de8:	687b      	ldr	r3, [r7, #4]
 8102dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102dee:	4973      	ldr	r1, [pc, #460]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102df0:	4313      	orrs	r3, r2
 8102df2:	654b      	str	r3, [r1, #84]	; 0x54
 8102df4:	e001      	b.n	8102dfa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102df6:	7dfb      	ldrb	r3, [r7, #23]
 8102df8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	681b      	ldr	r3, [r3, #0]
 8102dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102e02:	2b00      	cmp	r3, #0
 8102e04:	d029      	beq.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8102e06:	687b      	ldr	r3, [r7, #4]
 8102e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e0a:	2b00      	cmp	r3, #0
 8102e0c:	d003      	beq.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8102e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102e12:	d007      	beq.n	8102e24 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8102e14:	e00f      	b.n	8102e36 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102e16:	4b69      	ldr	r3, [pc, #420]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e1a:	4a68      	ldr	r2, [pc, #416]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102e20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102e22:	e00b      	b.n	8102e3c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102e24:	687b      	ldr	r3, [r7, #4]
 8102e26:	3304      	adds	r3, #4
 8102e28:	2102      	movs	r1, #2
 8102e2a:	4618      	mov	r0, r3
 8102e2c:	f000 fb86 	bl	810353c <RCCEx_PLL2_Config>
 8102e30:	4603      	mov	r3, r0
 8102e32:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102e34:	e002      	b.n	8102e3c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8102e36:	2301      	movs	r3, #1
 8102e38:	75fb      	strb	r3, [r7, #23]
      break;
 8102e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102e3c:	7dfb      	ldrb	r3, [r7, #23]
 8102e3e:	2b00      	cmp	r3, #0
 8102e40:	d109      	bne.n	8102e56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8102e42:	4b5e      	ldr	r3, [pc, #376]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102e4a:	687b      	ldr	r3, [r7, #4]
 8102e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102e4e:	495b      	ldr	r1, [pc, #364]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102e50:	4313      	orrs	r3, r2
 8102e52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8102e54:	e001      	b.n	8102e5a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e56:	7dfb      	ldrb	r3, [r7, #23]
 8102e58:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8102e5a:	687b      	ldr	r3, [r7, #4]
 8102e5c:	681b      	ldr	r3, [r3, #0]
 8102e5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8102e62:	2b00      	cmp	r3, #0
 8102e64:	d00a      	beq.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	3324      	adds	r3, #36	; 0x24
 8102e6a:	2102      	movs	r1, #2
 8102e6c:	4618      	mov	r0, r3
 8102e6e:	f000 fc17 	bl	81036a0 <RCCEx_PLL3_Config>
 8102e72:	4603      	mov	r3, r0
 8102e74:	2b00      	cmp	r3, #0
 8102e76:	d001      	beq.n	8102e7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8102e78:	2301      	movs	r3, #1
 8102e7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102e7c:	687b      	ldr	r3, [r7, #4]
 8102e7e:	681b      	ldr	r3, [r3, #0]
 8102e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102e84:	2b00      	cmp	r3, #0
 8102e86:	d030      	beq.n	8102eea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8102e88:	687b      	ldr	r3, [r7, #4]
 8102e8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102e90:	d017      	beq.n	8102ec2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8102e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102e96:	d811      	bhi.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102e9c:	d013      	beq.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8102e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8102ea2:	d80b      	bhi.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8102ea4:	2b00      	cmp	r3, #0
 8102ea6:	d010      	beq.n	8102eca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8102ea8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102eac:	d106      	bne.n	8102ebc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102eae:	4b43      	ldr	r3, [pc, #268]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102eb2:	4a42      	ldr	r2, [pc, #264]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102eb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102eb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102eba:	e007      	b.n	8102ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102ebc:	2301      	movs	r3, #1
 8102ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8102ec0:	e004      	b.n	8102ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102ec2:	bf00      	nop
 8102ec4:	e002      	b.n	8102ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102ec6:	bf00      	nop
 8102ec8:	e000      	b.n	8102ecc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102ecc:	7dfb      	ldrb	r3, [r7, #23]
 8102ece:	2b00      	cmp	r3, #0
 8102ed0:	d109      	bne.n	8102ee6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102ed2:	4b3a      	ldr	r3, [pc, #232]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102ede:	4937      	ldr	r1, [pc, #220]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ee0:	4313      	orrs	r3, r2
 8102ee2:	654b      	str	r3, [r1, #84]	; 0x54
 8102ee4:	e001      	b.n	8102eea <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ee6:	7dfb      	ldrb	r3, [r7, #23]
 8102ee8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102eea:	687b      	ldr	r3, [r7, #4]
 8102eec:	681b      	ldr	r3, [r3, #0]
 8102eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102ef2:	2b00      	cmp	r3, #0
 8102ef4:	d008      	beq.n	8102f08 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102ef6:	4b31      	ldr	r3, [pc, #196]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102efa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102efe:	687b      	ldr	r3, [r7, #4]
 8102f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102f02:	492e      	ldr	r1, [pc, #184]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f04:	4313      	orrs	r3, r2
 8102f06:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102f08:	687b      	ldr	r3, [r7, #4]
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102f10:	2b00      	cmp	r3, #0
 8102f12:	d009      	beq.n	8102f28 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102f14:	4b29      	ldr	r3, [pc, #164]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f16:	691b      	ldr	r3, [r3, #16]
 8102f18:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102f1c:	687b      	ldr	r3, [r7, #4]
 8102f1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102f22:	4926      	ldr	r1, [pc, #152]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f24:	4313      	orrs	r3, r2
 8102f26:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102f28:	687b      	ldr	r3, [r7, #4]
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102f30:	2b00      	cmp	r3, #0
 8102f32:	d008      	beq.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102f34:	4b21      	ldr	r3, [pc, #132]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102f3c:	687b      	ldr	r3, [r7, #4]
 8102f3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102f40:	491e      	ldr	r1, [pc, #120]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f42:	4313      	orrs	r3, r2
 8102f44:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102f46:	687b      	ldr	r3, [r7, #4]
 8102f48:	681b      	ldr	r3, [r3, #0]
 8102f4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102f4e:	2b00      	cmp	r3, #0
 8102f50:	d00d      	beq.n	8102f6e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102f52:	4b1a      	ldr	r3, [pc, #104]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f54:	691b      	ldr	r3, [r3, #16]
 8102f56:	4a19      	ldr	r2, [pc, #100]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102f5c:	6113      	str	r3, [r2, #16]
 8102f5e:	4b17      	ldr	r3, [pc, #92]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f60:	691a      	ldr	r2, [r3, #16]
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102f68:	4914      	ldr	r1, [pc, #80]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f6a:	4313      	orrs	r3, r2
 8102f6c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102f6e:	687b      	ldr	r3, [r7, #4]
 8102f70:	681b      	ldr	r3, [r3, #0]
 8102f72:	2b00      	cmp	r3, #0
 8102f74:	da08      	bge.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102f76:	4b11      	ldr	r3, [pc, #68]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102f7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102f82:	490e      	ldr	r1, [pc, #56]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f84:	4313      	orrs	r3, r2
 8102f86:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102f88:	687b      	ldr	r3, [r7, #4]
 8102f8a:	681b      	ldr	r3, [r3, #0]
 8102f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102f90:	2b00      	cmp	r3, #0
 8102f92:	d009      	beq.n	8102fa8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102f94:	4b09      	ldr	r3, [pc, #36]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102f98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8102f9c:	687b      	ldr	r3, [r7, #4]
 8102f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102fa2:	4906      	ldr	r1, [pc, #24]	; (8102fbc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102fa4:	4313      	orrs	r3, r2
 8102fa6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8102fa8:	7dbb      	ldrb	r3, [r7, #22]
 8102faa:	2b00      	cmp	r3, #0
 8102fac:	d101      	bne.n	8102fb2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8102fae:	2300      	movs	r3, #0
 8102fb0:	e000      	b.n	8102fb4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8102fb2:	2301      	movs	r3, #1
}
 8102fb4:	4618      	mov	r0, r3
 8102fb6:	3718      	adds	r7, #24
 8102fb8:	46bd      	mov	sp, r7
 8102fba:	bd80      	pop	{r7, pc}
 8102fbc:	58024400 	.word	0x58024400

08102fc0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102fc0:	b580      	push	{r7, lr}
 8102fc2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102fc4:	f7ff f85e 	bl	8102084 <HAL_RCC_GetHCLKFreq>
 8102fc8:	4602      	mov	r2, r0
 8102fca:	4b06      	ldr	r3, [pc, #24]	; (8102fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102fcc:	6a1b      	ldr	r3, [r3, #32]
 8102fce:	091b      	lsrs	r3, r3, #4
 8102fd0:	f003 0307 	and.w	r3, r3, #7
 8102fd4:	4904      	ldr	r1, [pc, #16]	; (8102fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102fd6:	5ccb      	ldrb	r3, [r1, r3]
 8102fd8:	f003 031f 	and.w	r3, r3, #31
 8102fdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102fe0:	4618      	mov	r0, r3
 8102fe2:	bd80      	pop	{r7, pc}
 8102fe4:	58024400 	.word	0x58024400
 8102fe8:	08106cac 	.word	0x08106cac

08102fec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8102fec:	b480      	push	{r7}
 8102fee:	b089      	sub	sp, #36	; 0x24
 8102ff0:	af00      	add	r7, sp, #0
 8102ff2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102ff4:	4ba1      	ldr	r3, [pc, #644]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102ff8:	f003 0303 	and.w	r3, r3, #3
 8102ffc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8102ffe:	4b9f      	ldr	r3, [pc, #636]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103002:	0b1b      	lsrs	r3, r3, #12
 8103004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103008:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810300a:	4b9c      	ldr	r3, [pc, #624]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810300e:	091b      	lsrs	r3, r3, #4
 8103010:	f003 0301 	and.w	r3, r3, #1
 8103014:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8103016:	4b99      	ldr	r3, [pc, #612]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810301a:	08db      	lsrs	r3, r3, #3
 810301c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103020:	693a      	ldr	r2, [r7, #16]
 8103022:	fb02 f303 	mul.w	r3, r2, r3
 8103026:	ee07 3a90 	vmov	s15, r3
 810302a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810302e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103032:	697b      	ldr	r3, [r7, #20]
 8103034:	2b00      	cmp	r3, #0
 8103036:	f000 8111 	beq.w	810325c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 810303a:	69bb      	ldr	r3, [r7, #24]
 810303c:	2b02      	cmp	r3, #2
 810303e:	f000 8083 	beq.w	8103148 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103042:	69bb      	ldr	r3, [r7, #24]
 8103044:	2b02      	cmp	r3, #2
 8103046:	f200 80a1 	bhi.w	810318c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 810304a:	69bb      	ldr	r3, [r7, #24]
 810304c:	2b00      	cmp	r3, #0
 810304e:	d003      	beq.n	8103058 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103050:	69bb      	ldr	r3, [r7, #24]
 8103052:	2b01      	cmp	r3, #1
 8103054:	d056      	beq.n	8103104 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103056:	e099      	b.n	810318c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103058:	4b88      	ldr	r3, [pc, #544]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	f003 0320 	and.w	r3, r3, #32
 8103060:	2b00      	cmp	r3, #0
 8103062:	d02d      	beq.n	81030c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103064:	4b85      	ldr	r3, [pc, #532]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103066:	681b      	ldr	r3, [r3, #0]
 8103068:	08db      	lsrs	r3, r3, #3
 810306a:	f003 0303 	and.w	r3, r3, #3
 810306e:	4a84      	ldr	r2, [pc, #528]	; (8103280 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103070:	fa22 f303 	lsr.w	r3, r2, r3
 8103074:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103076:	68bb      	ldr	r3, [r7, #8]
 8103078:	ee07 3a90 	vmov	s15, r3
 810307c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103080:	697b      	ldr	r3, [r7, #20]
 8103082:	ee07 3a90 	vmov	s15, r3
 8103086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810308a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810308e:	4b7b      	ldr	r3, [pc, #492]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103096:	ee07 3a90 	vmov	s15, r3
 810309a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810309e:	ed97 6a03 	vldr	s12, [r7, #12]
 81030a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81030a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81030be:	e087      	b.n	81031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81030c0:	697b      	ldr	r3, [r7, #20]
 81030c2:	ee07 3a90 	vmov	s15, r3
 81030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103288 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81030d2:	4b6a      	ldr	r3, [pc, #424]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81030da:	ee07 3a90 	vmov	s15, r3
 81030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81030e2:	ed97 6a03 	vldr	s12, [r7, #12]
 81030e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81030f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81030fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103102:	e065      	b.n	81031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103104:	697b      	ldr	r3, [r7, #20]
 8103106:	ee07 3a90 	vmov	s15, r3
 810310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810310e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810328c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103116:	4b59      	ldr	r3, [pc, #356]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810311e:	ee07 3a90 	vmov	s15, r3
 8103122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103126:	ed97 6a03 	vldr	s12, [r7, #12]
 810312a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103142:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103146:	e043      	b.n	81031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8103148:	697b      	ldr	r3, [r7, #20]
 810314a:	ee07 3a90 	vmov	s15, r3
 810314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103152:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810315a:	4b48      	ldr	r3, [pc, #288]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103162:	ee07 3a90 	vmov	s15, r3
 8103166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810316a:	ed97 6a03 	vldr	s12, [r7, #12]
 810316e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810317a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103186:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810318a:	e021      	b.n	81031d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810318c:	697b      	ldr	r3, [r7, #20]
 810318e:	ee07 3a90 	vmov	s15, r3
 8103192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103196:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810328c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810319e:	4b37      	ldr	r3, [pc, #220]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031a6:	ee07 3a90 	vmov	s15, r3
 81031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031ae:	ed97 6a03 	vldr	s12, [r7, #12]
 81031b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103284 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81031ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81031d0:	4b2a      	ldr	r3, [pc, #168]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81031d4:	0a5b      	lsrs	r3, r3, #9
 81031d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81031da:	ee07 3a90 	vmov	s15, r3
 81031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81031e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81031ea:	edd7 6a07 	vldr	s13, [r7, #28]
 81031ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81031f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81031f6:	ee17 2a90 	vmov	r2, s15
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 81031fe:	4b1f      	ldr	r3, [pc, #124]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103202:	0c1b      	lsrs	r3, r3, #16
 8103204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103208:	ee07 3a90 	vmov	s15, r3
 810320c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103210:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103218:	edd7 6a07 	vldr	s13, [r7, #28]
 810321c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103224:	ee17 2a90 	vmov	r2, s15
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 810322c:	4b13      	ldr	r3, [pc, #76]	; (810327c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103230:	0e1b      	lsrs	r3, r3, #24
 8103232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103236:	ee07 3a90 	vmov	s15, r3
 810323a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810323e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103246:	edd7 6a07 	vldr	s13, [r7, #28]
 810324a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810324e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103252:	ee17 2a90 	vmov	r2, s15
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 810325a:	e008      	b.n	810326e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	2200      	movs	r2, #0
 8103260:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	2200      	movs	r2, #0
 8103266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103268:	687b      	ldr	r3, [r7, #4]
 810326a:	2200      	movs	r2, #0
 810326c:	609a      	str	r2, [r3, #8]
}
 810326e:	bf00      	nop
 8103270:	3724      	adds	r7, #36	; 0x24
 8103272:	46bd      	mov	sp, r7
 8103274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103278:	4770      	bx	lr
 810327a:	bf00      	nop
 810327c:	58024400 	.word	0x58024400
 8103280:	03d09000 	.word	0x03d09000
 8103284:	46000000 	.word	0x46000000
 8103288:	4c742400 	.word	0x4c742400
 810328c:	4a742400 	.word	0x4a742400
 8103290:	4af42400 	.word	0x4af42400

08103294 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8103294:	b480      	push	{r7}
 8103296:	b089      	sub	sp, #36	; 0x24
 8103298:	af00      	add	r7, sp, #0
 810329a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810329c:	4ba1      	ldr	r3, [pc, #644]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81032a0:	f003 0303 	and.w	r3, r3, #3
 81032a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81032a6:	4b9f      	ldr	r3, [pc, #636]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81032aa:	0d1b      	lsrs	r3, r3, #20
 81032ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81032b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81032b2:	4b9c      	ldr	r3, [pc, #624]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032b6:	0a1b      	lsrs	r3, r3, #8
 81032b8:	f003 0301 	and.w	r3, r3, #1
 81032bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81032be:	4b99      	ldr	r3, [pc, #612]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032c2:	08db      	lsrs	r3, r3, #3
 81032c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81032c8:	693a      	ldr	r2, [r7, #16]
 81032ca:	fb02 f303 	mul.w	r3, r2, r3
 81032ce:	ee07 3a90 	vmov	s15, r3
 81032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81032d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 81032da:	697b      	ldr	r3, [r7, #20]
 81032dc:	2b00      	cmp	r3, #0
 81032de:	f000 8111 	beq.w	8103504 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 81032e2:	69bb      	ldr	r3, [r7, #24]
 81032e4:	2b02      	cmp	r3, #2
 81032e6:	f000 8083 	beq.w	81033f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 81032ea:	69bb      	ldr	r3, [r7, #24]
 81032ec:	2b02      	cmp	r3, #2
 81032ee:	f200 80a1 	bhi.w	8103434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 81032f2:	69bb      	ldr	r3, [r7, #24]
 81032f4:	2b00      	cmp	r3, #0
 81032f6:	d003      	beq.n	8103300 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81032f8:	69bb      	ldr	r3, [r7, #24]
 81032fa:	2b01      	cmp	r3, #1
 81032fc:	d056      	beq.n	81033ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81032fe:	e099      	b.n	8103434 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103300:	4b88      	ldr	r3, [pc, #544]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103302:	681b      	ldr	r3, [r3, #0]
 8103304:	f003 0320 	and.w	r3, r3, #32
 8103308:	2b00      	cmp	r3, #0
 810330a:	d02d      	beq.n	8103368 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810330c:	4b85      	ldr	r3, [pc, #532]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	08db      	lsrs	r3, r3, #3
 8103312:	f003 0303 	and.w	r3, r3, #3
 8103316:	4a84      	ldr	r2, [pc, #528]	; (8103528 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8103318:	fa22 f303 	lsr.w	r3, r2, r3
 810331c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810331e:	68bb      	ldr	r3, [r7, #8]
 8103320:	ee07 3a90 	vmov	s15, r3
 8103324:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103328:	697b      	ldr	r3, [r7, #20]
 810332a:	ee07 3a90 	vmov	s15, r3
 810332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103332:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103336:	4b7b      	ldr	r3, [pc, #492]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810333a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810333e:	ee07 3a90 	vmov	s15, r3
 8103342:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103346:	ed97 6a03 	vldr	s12, [r7, #12]
 810334a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810334e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103352:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810335a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810335e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103362:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8103366:	e087      	b.n	8103478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103368:	697b      	ldr	r3, [r7, #20]
 810336a:	ee07 3a90 	vmov	s15, r3
 810336e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103372:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103530 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8103376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810337a:	4b6a      	ldr	r3, [pc, #424]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103382:	ee07 3a90 	vmov	s15, r3
 8103386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810338a:	ed97 6a03 	vldr	s12, [r7, #12]
 810338e:	eddf 5a67 	vldr	s11, [pc, #412]	; 810352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810339a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810339e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81033aa:	e065      	b.n	8103478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81033ac:	697b      	ldr	r3, [r7, #20]
 81033ae:	ee07 3a90 	vmov	s15, r3
 81033b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81033ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81033be:	4b59      	ldr	r3, [pc, #356]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81033c6:	ee07 3a90 	vmov	s15, r3
 81033ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81033ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81033d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 810352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81033d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81033da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81033de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81033e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81033e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81033ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81033ee:	e043      	b.n	8103478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81033f0:	697b      	ldr	r3, [r7, #20]
 81033f2:	ee07 3a90 	vmov	s15, r3
 81033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81033fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103402:	4b48      	ldr	r3, [pc, #288]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810340a:	ee07 3a90 	vmov	s15, r3
 810340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103412:	ed97 6a03 	vldr	s12, [r7, #12]
 8103416:	eddf 5a45 	vldr	s11, [pc, #276]	; 810352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810342e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103432:	e021      	b.n	8103478 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8103434:	697b      	ldr	r3, [r7, #20]
 8103436:	ee07 3a90 	vmov	s15, r3
 810343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810343e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103446:	4b37      	ldr	r3, [pc, #220]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810344e:	ee07 3a90 	vmov	s15, r3
 8103452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103456:	ed97 6a03 	vldr	s12, [r7, #12]
 810345a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810352c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103472:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8103476:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8103478:	4b2a      	ldr	r3, [pc, #168]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810347c:	0a5b      	lsrs	r3, r3, #9
 810347e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103482:	ee07 3a90 	vmov	s15, r3
 8103486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810348a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810348e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103492:	edd7 6a07 	vldr	s13, [r7, #28]
 8103496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810349a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810349e:	ee17 2a90 	vmov	r2, s15
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81034a6:	4b1f      	ldr	r3, [pc, #124]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81034aa:	0c1b      	lsrs	r3, r3, #16
 81034ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81034b0:	ee07 3a90 	vmov	s15, r3
 81034b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81034bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81034c0:	edd7 6a07 	vldr	s13, [r7, #28]
 81034c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81034c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81034cc:	ee17 2a90 	vmov	r2, s15
 81034d0:	687b      	ldr	r3, [r7, #4]
 81034d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81034d4:	4b13      	ldr	r3, [pc, #76]	; (8103524 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81034d8:	0e1b      	lsrs	r3, r3, #24
 81034da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81034de:	ee07 3a90 	vmov	s15, r3
 81034e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81034ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 81034ee:	edd7 6a07 	vldr	s13, [r7, #28]
 81034f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81034f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81034fa:	ee17 2a90 	vmov	r2, s15
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103502:	e008      	b.n	8103516 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103504:	687b      	ldr	r3, [r7, #4]
 8103506:	2200      	movs	r2, #0
 8103508:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	2200      	movs	r2, #0
 810350e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103510:	687b      	ldr	r3, [r7, #4]
 8103512:	2200      	movs	r2, #0
 8103514:	609a      	str	r2, [r3, #8]
}
 8103516:	bf00      	nop
 8103518:	3724      	adds	r7, #36	; 0x24
 810351a:	46bd      	mov	sp, r7
 810351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103520:	4770      	bx	lr
 8103522:	bf00      	nop
 8103524:	58024400 	.word	0x58024400
 8103528:	03d09000 	.word	0x03d09000
 810352c:	46000000 	.word	0x46000000
 8103530:	4c742400 	.word	0x4c742400
 8103534:	4a742400 	.word	0x4a742400
 8103538:	4af42400 	.word	0x4af42400

0810353c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 810353c:	b580      	push	{r7, lr}
 810353e:	b084      	sub	sp, #16
 8103540:	af00      	add	r7, sp, #0
 8103542:	6078      	str	r0, [r7, #4]
 8103544:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103546:	2300      	movs	r3, #0
 8103548:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810354a:	4b54      	ldr	r3, [pc, #336]	; (810369c <RCCEx_PLL2_Config+0x160>)
 810354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810354e:	f003 0303 	and.w	r3, r3, #3
 8103552:	2b03      	cmp	r3, #3
 8103554:	d101      	bne.n	810355a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103556:	2301      	movs	r3, #1
 8103558:	e09b      	b.n	8103692 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810355a:	4b50      	ldr	r3, [pc, #320]	; (810369c <RCCEx_PLL2_Config+0x160>)
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	4a4f      	ldr	r2, [pc, #316]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103566:	f7fe f841 	bl	81015ec <HAL_GetTick>
 810356a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 810356c:	e008      	b.n	8103580 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 810356e:	f7fe f83d 	bl	81015ec <HAL_GetTick>
 8103572:	4602      	mov	r2, r0
 8103574:	68bb      	ldr	r3, [r7, #8]
 8103576:	1ad3      	subs	r3, r2, r3
 8103578:	2b02      	cmp	r3, #2
 810357a:	d901      	bls.n	8103580 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 810357c:	2303      	movs	r3, #3
 810357e:	e088      	b.n	8103692 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103580:	4b46      	ldr	r3, [pc, #280]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103582:	681b      	ldr	r3, [r3, #0]
 8103584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103588:	2b00      	cmp	r3, #0
 810358a:	d1f0      	bne.n	810356e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 810358c:	4b43      	ldr	r3, [pc, #268]	; (810369c <RCCEx_PLL2_Config+0x160>)
 810358e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103590:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	681b      	ldr	r3, [r3, #0]
 8103598:	031b      	lsls	r3, r3, #12
 810359a:	4940      	ldr	r1, [pc, #256]	; (810369c <RCCEx_PLL2_Config+0x160>)
 810359c:	4313      	orrs	r3, r2
 810359e:	628b      	str	r3, [r1, #40]	; 0x28
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	685b      	ldr	r3, [r3, #4]
 81035a4:	3b01      	subs	r3, #1
 81035a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81035aa:	687b      	ldr	r3, [r7, #4]
 81035ac:	689b      	ldr	r3, [r3, #8]
 81035ae:	3b01      	subs	r3, #1
 81035b0:	025b      	lsls	r3, r3, #9
 81035b2:	b29b      	uxth	r3, r3
 81035b4:	431a      	orrs	r2, r3
 81035b6:	687b      	ldr	r3, [r7, #4]
 81035b8:	68db      	ldr	r3, [r3, #12]
 81035ba:	3b01      	subs	r3, #1
 81035bc:	041b      	lsls	r3, r3, #16
 81035be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81035c2:	431a      	orrs	r2, r3
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	691b      	ldr	r3, [r3, #16]
 81035c8:	3b01      	subs	r3, #1
 81035ca:	061b      	lsls	r3, r3, #24
 81035cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81035d0:	4932      	ldr	r1, [pc, #200]	; (810369c <RCCEx_PLL2_Config+0x160>)
 81035d2:	4313      	orrs	r3, r2
 81035d4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 81035d6:	4b31      	ldr	r3, [pc, #196]	; (810369c <RCCEx_PLL2_Config+0x160>)
 81035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 81035de:	687b      	ldr	r3, [r7, #4]
 81035e0:	695b      	ldr	r3, [r3, #20]
 81035e2:	492e      	ldr	r1, [pc, #184]	; (810369c <RCCEx_PLL2_Config+0x160>)
 81035e4:	4313      	orrs	r3, r2
 81035e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 81035e8:	4b2c      	ldr	r3, [pc, #176]	; (810369c <RCCEx_PLL2_Config+0x160>)
 81035ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035ec:	f023 0220 	bic.w	r2, r3, #32
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	699b      	ldr	r3, [r3, #24]
 81035f4:	4929      	ldr	r1, [pc, #164]	; (810369c <RCCEx_PLL2_Config+0x160>)
 81035f6:	4313      	orrs	r3, r2
 81035f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 81035fa:	4b28      	ldr	r3, [pc, #160]	; (810369c <RCCEx_PLL2_Config+0x160>)
 81035fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035fe:	4a27      	ldr	r2, [pc, #156]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103600:	f023 0310 	bic.w	r3, r3, #16
 8103604:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103606:	4b25      	ldr	r3, [pc, #148]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810360a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810360e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103612:	687a      	ldr	r2, [r7, #4]
 8103614:	69d2      	ldr	r2, [r2, #28]
 8103616:	00d2      	lsls	r2, r2, #3
 8103618:	4920      	ldr	r1, [pc, #128]	; (810369c <RCCEx_PLL2_Config+0x160>)
 810361a:	4313      	orrs	r3, r2
 810361c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810361e:	4b1f      	ldr	r3, [pc, #124]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103622:	4a1e      	ldr	r2, [pc, #120]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103624:	f043 0310 	orr.w	r3, r3, #16
 8103628:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810362a:	683b      	ldr	r3, [r7, #0]
 810362c:	2b00      	cmp	r3, #0
 810362e:	d106      	bne.n	810363e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103630:	4b1a      	ldr	r3, [pc, #104]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103634:	4a19      	ldr	r2, [pc, #100]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810363a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810363c:	e00f      	b.n	810365e <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810363e:	683b      	ldr	r3, [r7, #0]
 8103640:	2b01      	cmp	r3, #1
 8103642:	d106      	bne.n	8103652 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103644:	4b15      	ldr	r3, [pc, #84]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103648:	4a14      	ldr	r2, [pc, #80]	; (810369c <RCCEx_PLL2_Config+0x160>)
 810364a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810364e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103650:	e005      	b.n	810365e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103652:	4b12      	ldr	r3, [pc, #72]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103656:	4a11      	ldr	r2, [pc, #68]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103658:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 810365c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 810365e:	4b0f      	ldr	r3, [pc, #60]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103660:	681b      	ldr	r3, [r3, #0]
 8103662:	4a0e      	ldr	r2, [pc, #56]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103664:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810366a:	f7fd ffbf 	bl	81015ec <HAL_GetTick>
 810366e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103670:	e008      	b.n	8103684 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8103672:	f7fd ffbb 	bl	81015ec <HAL_GetTick>
 8103676:	4602      	mov	r2, r0
 8103678:	68bb      	ldr	r3, [r7, #8]
 810367a:	1ad3      	subs	r3, r2, r3
 810367c:	2b02      	cmp	r3, #2
 810367e:	d901      	bls.n	8103684 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103680:	2303      	movs	r3, #3
 8103682:	e006      	b.n	8103692 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103684:	4b05      	ldr	r3, [pc, #20]	; (810369c <RCCEx_PLL2_Config+0x160>)
 8103686:	681b      	ldr	r3, [r3, #0]
 8103688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810368c:	2b00      	cmp	r3, #0
 810368e:	d0f0      	beq.n	8103672 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103690:	7bfb      	ldrb	r3, [r7, #15]
}
 8103692:	4618      	mov	r0, r3
 8103694:	3710      	adds	r7, #16
 8103696:	46bd      	mov	sp, r7
 8103698:	bd80      	pop	{r7, pc}
 810369a:	bf00      	nop
 810369c:	58024400 	.word	0x58024400

081036a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81036a0:	b580      	push	{r7, lr}
 81036a2:	b084      	sub	sp, #16
 81036a4:	af00      	add	r7, sp, #0
 81036a6:	6078      	str	r0, [r7, #4]
 81036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81036aa:	2300      	movs	r3, #0
 81036ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81036ae:	4b54      	ldr	r3, [pc, #336]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036b2:	f003 0303 	and.w	r3, r3, #3
 81036b6:	2b03      	cmp	r3, #3
 81036b8:	d101      	bne.n	81036be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81036ba:	2301      	movs	r3, #1
 81036bc:	e09b      	b.n	81037f6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81036be:	4b50      	ldr	r3, [pc, #320]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81036c0:	681b      	ldr	r3, [r3, #0]
 81036c2:	4a4f      	ldr	r2, [pc, #316]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81036c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81036c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81036ca:	f7fd ff8f 	bl	81015ec <HAL_GetTick>
 81036ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81036d0:	e008      	b.n	81036e4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81036d2:	f7fd ff8b 	bl	81015ec <HAL_GetTick>
 81036d6:	4602      	mov	r2, r0
 81036d8:	68bb      	ldr	r3, [r7, #8]
 81036da:	1ad3      	subs	r3, r2, r3
 81036dc:	2b02      	cmp	r3, #2
 81036de:	d901      	bls.n	81036e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 81036e0:	2303      	movs	r3, #3
 81036e2:	e088      	b.n	81037f6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 81036e4:	4b46      	ldr	r3, [pc, #280]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81036e6:	681b      	ldr	r3, [r3, #0]
 81036e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81036ec:	2b00      	cmp	r3, #0
 81036ee:	d1f0      	bne.n	81036d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 81036f0:	4b43      	ldr	r3, [pc, #268]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036f4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	681b      	ldr	r3, [r3, #0]
 81036fc:	051b      	lsls	r3, r3, #20
 81036fe:	4940      	ldr	r1, [pc, #256]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 8103700:	4313      	orrs	r3, r2
 8103702:	628b      	str	r3, [r1, #40]	; 0x28
 8103704:	687b      	ldr	r3, [r7, #4]
 8103706:	685b      	ldr	r3, [r3, #4]
 8103708:	3b01      	subs	r3, #1
 810370a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810370e:	687b      	ldr	r3, [r7, #4]
 8103710:	689b      	ldr	r3, [r3, #8]
 8103712:	3b01      	subs	r3, #1
 8103714:	025b      	lsls	r3, r3, #9
 8103716:	b29b      	uxth	r3, r3
 8103718:	431a      	orrs	r2, r3
 810371a:	687b      	ldr	r3, [r7, #4]
 810371c:	68db      	ldr	r3, [r3, #12]
 810371e:	3b01      	subs	r3, #1
 8103720:	041b      	lsls	r3, r3, #16
 8103722:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103726:	431a      	orrs	r2, r3
 8103728:	687b      	ldr	r3, [r7, #4]
 810372a:	691b      	ldr	r3, [r3, #16]
 810372c:	3b01      	subs	r3, #1
 810372e:	061b      	lsls	r3, r3, #24
 8103730:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103734:	4932      	ldr	r1, [pc, #200]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 8103736:	4313      	orrs	r3, r2
 8103738:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810373a:	4b31      	ldr	r3, [pc, #196]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 810373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810373e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	695b      	ldr	r3, [r3, #20]
 8103746:	492e      	ldr	r1, [pc, #184]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 8103748:	4313      	orrs	r3, r2
 810374a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 810374c:	4b2c      	ldr	r3, [pc, #176]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 810374e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103750:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	699b      	ldr	r3, [r3, #24]
 8103758:	4929      	ldr	r1, [pc, #164]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 810375a:	4313      	orrs	r3, r2
 810375c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 810375e:	4b28      	ldr	r3, [pc, #160]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 8103760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103762:	4a27      	ldr	r2, [pc, #156]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 8103764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103768:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810376a:	4b25      	ldr	r3, [pc, #148]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 810376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103772:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103776:	687a      	ldr	r2, [r7, #4]
 8103778:	69d2      	ldr	r2, [r2, #28]
 810377a:	00d2      	lsls	r2, r2, #3
 810377c:	4920      	ldr	r1, [pc, #128]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 810377e:	4313      	orrs	r3, r2
 8103780:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103782:	4b1f      	ldr	r3, [pc, #124]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 8103784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103786:	4a1e      	ldr	r2, [pc, #120]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 8103788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810378c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810378e:	683b      	ldr	r3, [r7, #0]
 8103790:	2b00      	cmp	r3, #0
 8103792:	d106      	bne.n	81037a2 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103794:	4b1a      	ldr	r3, [pc, #104]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 8103796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103798:	4a19      	ldr	r2, [pc, #100]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 810379a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810379e:	62d3      	str	r3, [r2, #44]	; 0x2c
 81037a0:	e00f      	b.n	81037c2 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81037a2:	683b      	ldr	r3, [r7, #0]
 81037a4:	2b01      	cmp	r3, #1
 81037a6:	d106      	bne.n	81037b6 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81037a8:	4b15      	ldr	r3, [pc, #84]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037ac:	4a14      	ldr	r2, [pc, #80]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81037ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81037b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81037b4:	e005      	b.n	81037c2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81037b6:	4b12      	ldr	r3, [pc, #72]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81037b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81037ba:	4a11      	ldr	r2, [pc, #68]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81037bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81037c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81037c2:	4b0f      	ldr	r3, [pc, #60]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4a0e      	ldr	r2, [pc, #56]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81037c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81037cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81037ce:	f7fd ff0d 	bl	81015ec <HAL_GetTick>
 81037d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81037d4:	e008      	b.n	81037e8 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 81037d6:	f7fd ff09 	bl	81015ec <HAL_GetTick>
 81037da:	4602      	mov	r2, r0
 81037dc:	68bb      	ldr	r3, [r7, #8]
 81037de:	1ad3      	subs	r3, r2, r3
 81037e0:	2b02      	cmp	r3, #2
 81037e2:	d901      	bls.n	81037e8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 81037e4:	2303      	movs	r3, #3
 81037e6:	e006      	b.n	81037f6 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 81037e8:	4b05      	ldr	r3, [pc, #20]	; (8103800 <RCCEx_PLL3_Config+0x160>)
 81037ea:	681b      	ldr	r3, [r3, #0]
 81037ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81037f0:	2b00      	cmp	r3, #0
 81037f2:	d0f0      	beq.n	81037d6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 81037f4:	7bfb      	ldrb	r3, [r7, #15]
}
 81037f6:	4618      	mov	r0, r3
 81037f8:	3710      	adds	r7, #16
 81037fa:	46bd      	mov	sp, r7
 81037fc:	bd80      	pop	{r7, pc}
 81037fe:	bf00      	nop
 8103800:	58024400 	.word	0x58024400

08103804 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103804:	b580      	push	{r7, lr}
 8103806:	b084      	sub	sp, #16
 8103808:	af00      	add	r7, sp, #0
 810380a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810380c:	687b      	ldr	r3, [r7, #4]
 810380e:	2b00      	cmp	r3, #0
 8103810:	d101      	bne.n	8103816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8103812:	2301      	movs	r3, #1
 8103814:	e0f1      	b.n	81039fa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	2200      	movs	r2, #0
 810381a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	681b      	ldr	r3, [r3, #0]
 8103820:	4a78      	ldr	r2, [pc, #480]	; (8103a04 <HAL_SPI_Init+0x200>)
 8103822:	4293      	cmp	r3, r2
 8103824:	d00f      	beq.n	8103846 <HAL_SPI_Init+0x42>
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	4a77      	ldr	r2, [pc, #476]	; (8103a08 <HAL_SPI_Init+0x204>)
 810382c:	4293      	cmp	r3, r2
 810382e:	d00a      	beq.n	8103846 <HAL_SPI_Init+0x42>
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	681b      	ldr	r3, [r3, #0]
 8103834:	4a75      	ldr	r2, [pc, #468]	; (8103a0c <HAL_SPI_Init+0x208>)
 8103836:	4293      	cmp	r3, r2
 8103838:	d005      	beq.n	8103846 <HAL_SPI_Init+0x42>
 810383a:	687b      	ldr	r3, [r7, #4]
 810383c:	68db      	ldr	r3, [r3, #12]
 810383e:	2b0f      	cmp	r3, #15
 8103840:	d901      	bls.n	8103846 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8103842:	2301      	movs	r3, #1
 8103844:	e0d9      	b.n	81039fa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8103846:	6878      	ldr	r0, [r7, #4]
 8103848:	f001 f877 	bl	810493a <SPI_GetPacketSize>
 810384c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	681b      	ldr	r3, [r3, #0]
 8103852:	4a6c      	ldr	r2, [pc, #432]	; (8103a04 <HAL_SPI_Init+0x200>)
 8103854:	4293      	cmp	r3, r2
 8103856:	d00c      	beq.n	8103872 <HAL_SPI_Init+0x6e>
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	681b      	ldr	r3, [r3, #0]
 810385c:	4a6a      	ldr	r2, [pc, #424]	; (8103a08 <HAL_SPI_Init+0x204>)
 810385e:	4293      	cmp	r3, r2
 8103860:	d007      	beq.n	8103872 <HAL_SPI_Init+0x6e>
 8103862:	687b      	ldr	r3, [r7, #4]
 8103864:	681b      	ldr	r3, [r3, #0]
 8103866:	4a69      	ldr	r2, [pc, #420]	; (8103a0c <HAL_SPI_Init+0x208>)
 8103868:	4293      	cmp	r3, r2
 810386a:	d002      	beq.n	8103872 <HAL_SPI_Init+0x6e>
 810386c:	68fb      	ldr	r3, [r7, #12]
 810386e:	2b08      	cmp	r3, #8
 8103870:	d811      	bhi.n	8103896 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8103872:	687b      	ldr	r3, [r7, #4]
 8103874:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8103876:	4a63      	ldr	r2, [pc, #396]	; (8103a04 <HAL_SPI_Init+0x200>)
 8103878:	4293      	cmp	r3, r2
 810387a:	d009      	beq.n	8103890 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810387c:	687b      	ldr	r3, [r7, #4]
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	4a61      	ldr	r2, [pc, #388]	; (8103a08 <HAL_SPI_Init+0x204>)
 8103882:	4293      	cmp	r3, r2
 8103884:	d004      	beq.n	8103890 <HAL_SPI_Init+0x8c>
 8103886:	687b      	ldr	r3, [r7, #4]
 8103888:	681b      	ldr	r3, [r3, #0]
 810388a:	4a60      	ldr	r2, [pc, #384]	; (8103a0c <HAL_SPI_Init+0x208>)
 810388c:	4293      	cmp	r3, r2
 810388e:	d104      	bne.n	810389a <HAL_SPI_Init+0x96>
 8103890:	68fb      	ldr	r3, [r7, #12]
 8103892:	2b10      	cmp	r3, #16
 8103894:	d901      	bls.n	810389a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8103896:	2301      	movs	r3, #1
 8103898:	e0af      	b.n	81039fa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810389a:	687b      	ldr	r3, [r7, #4]
 810389c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81038a0:	b2db      	uxtb	r3, r3
 81038a2:	2b00      	cmp	r3, #0
 81038a4:	d106      	bne.n	81038b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81038a6:	687b      	ldr	r3, [r7, #4]
 81038a8:	2200      	movs	r2, #0
 81038aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81038ae:	6878      	ldr	r0, [r7, #4]
 81038b0:	f7fd fc10 	bl	81010d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 81038b4:	687b      	ldr	r3, [r7, #4]
 81038b6:	2202      	movs	r2, #2
 81038b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81038bc:	687b      	ldr	r3, [r7, #4]
 81038be:	681b      	ldr	r3, [r3, #0]
 81038c0:	681a      	ldr	r2, [r3, #0]
 81038c2:	687b      	ldr	r3, [r7, #4]
 81038c4:	681b      	ldr	r3, [r3, #0]
 81038c6:	f022 0201 	bic.w	r2, r2, #1
 81038ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	681b      	ldr	r3, [r3, #0]
 81038d0:	689b      	ldr	r3, [r3, #8]
 81038d2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 81038d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	699b      	ldr	r3, [r3, #24]
 81038dc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 81038e0:	d119      	bne.n	8103916 <HAL_SPI_Init+0x112>
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	685b      	ldr	r3, [r3, #4]
 81038e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81038ea:	d103      	bne.n	81038f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81038ec:	687b      	ldr	r3, [r7, #4]
 81038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 81038f0:	2b00      	cmp	r3, #0
 81038f2:	d008      	beq.n	8103906 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 81038f4:	687b      	ldr	r3, [r7, #4]
 81038f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 81038f8:	2b00      	cmp	r3, #0
 81038fa:	d10c      	bne.n	8103916 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103904:	d107      	bne.n	8103916 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	681b      	ldr	r3, [r3, #0]
 810390a:	681a      	ldr	r2, [r3, #0]
 810390c:	687b      	ldr	r3, [r7, #4]
 810390e:	681b      	ldr	r3, [r3, #0]
 8103910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8103914:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	69da      	ldr	r2, [r3, #28]
 810391a:	687b      	ldr	r3, [r7, #4]
 810391c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810391e:	431a      	orrs	r2, r3
 8103920:	68bb      	ldr	r3, [r7, #8]
 8103922:	431a      	orrs	r2, r3
 8103924:	687b      	ldr	r3, [r7, #4]
 8103926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103928:	ea42 0103 	orr.w	r1, r2, r3
 810392c:	687b      	ldr	r3, [r7, #4]
 810392e:	68da      	ldr	r2, [r3, #12]
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	430a      	orrs	r2, r1
 8103936:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8103938:	687b      	ldr	r3, [r7, #4]
 810393a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810393c:	687b      	ldr	r3, [r7, #4]
 810393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103940:	431a      	orrs	r2, r3
 8103942:	687b      	ldr	r3, [r7, #4]
 8103944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103946:	431a      	orrs	r2, r3
 8103948:	687b      	ldr	r3, [r7, #4]
 810394a:	699b      	ldr	r3, [r3, #24]
 810394c:	431a      	orrs	r2, r3
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	691b      	ldr	r3, [r3, #16]
 8103952:	431a      	orrs	r2, r3
 8103954:	687b      	ldr	r3, [r7, #4]
 8103956:	695b      	ldr	r3, [r3, #20]
 8103958:	431a      	orrs	r2, r3
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	6a1b      	ldr	r3, [r3, #32]
 810395e:	431a      	orrs	r2, r3
 8103960:	687b      	ldr	r3, [r7, #4]
 8103962:	685b      	ldr	r3, [r3, #4]
 8103964:	431a      	orrs	r2, r3
 8103966:	687b      	ldr	r3, [r7, #4]
 8103968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810396a:	431a      	orrs	r2, r3
 810396c:	687b      	ldr	r3, [r7, #4]
 810396e:	689b      	ldr	r3, [r3, #8]
 8103970:	431a      	orrs	r2, r3
 8103972:	687b      	ldr	r3, [r7, #4]
 8103974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103976:	ea42 0103 	orr.w	r1, r2, r3
 810397a:	687b      	ldr	r3, [r7, #4]
 810397c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	430a      	orrs	r2, r1
 8103984:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8103986:	687b      	ldr	r3, [r7, #4]
 8103988:	685b      	ldr	r3, [r3, #4]
 810398a:	2b00      	cmp	r3, #0
 810398c:	d113      	bne.n	81039b6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	681b      	ldr	r3, [r3, #0]
 8103992:	689b      	ldr	r3, [r3, #8]
 8103994:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8103998:	687b      	ldr	r3, [r7, #4]
 810399a:	681b      	ldr	r3, [r3, #0]
 810399c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81039a0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81039a2:	687b      	ldr	r3, [r7, #4]
 81039a4:	681b      	ldr	r3, [r3, #0]
 81039a6:	689b      	ldr	r3, [r3, #8]
 81039a8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81039ac:	687b      	ldr	r3, [r7, #4]
 81039ae:	681b      	ldr	r3, [r3, #0]
 81039b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 81039b4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	681b      	ldr	r3, [r3, #0]
 81039ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	f022 0201 	bic.w	r2, r2, #1
 81039c4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 81039c6:	687b      	ldr	r3, [r7, #4]
 81039c8:	685b      	ldr	r3, [r3, #4]
 81039ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81039ce:	2b00      	cmp	r3, #0
 81039d0:	d00a      	beq.n	81039e8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	68db      	ldr	r3, [r3, #12]
 81039d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81039e0:	687b      	ldr	r3, [r7, #4]
 81039e2:	681b      	ldr	r3, [r3, #0]
 81039e4:	430a      	orrs	r2, r1
 81039e6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	2200      	movs	r2, #0
 81039ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	2201      	movs	r2, #1
 81039f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 81039f8:	2300      	movs	r3, #0
}
 81039fa:	4618      	mov	r0, r3
 81039fc:	3710      	adds	r7, #16
 81039fe:	46bd      	mov	sp, r7
 8103a00:	bd80      	pop	{r7, pc}
 8103a02:	bf00      	nop
 8103a04:	40013000 	.word	0x40013000
 8103a08:	40003800 	.word	0x40003800
 8103a0c:	40003c00 	.word	0x40003c00

08103a10 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103a10:	b580      	push	{r7, lr}
 8103a12:	b08a      	sub	sp, #40	; 0x28
 8103a14:	af02      	add	r7, sp, #8
 8103a16:	60f8      	str	r0, [r7, #12]
 8103a18:	60b9      	str	r1, [r7, #8]
 8103a1a:	603b      	str	r3, [r7, #0]
 8103a1c:	4613      	mov	r3, r2
 8103a1e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8103a20:	68fb      	ldr	r3, [r7, #12]
 8103a22:	681b      	ldr	r3, [r3, #0]
 8103a24:	3320      	adds	r3, #32
 8103a26:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103a28:	2300      	movs	r3, #0
 8103a2a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103a2c:	68fb      	ldr	r3, [r7, #12]
 8103a2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103a32:	2b01      	cmp	r3, #1
 8103a34:	d101      	bne.n	8103a3a <HAL_SPI_Transmit+0x2a>
 8103a36:	2302      	movs	r3, #2
 8103a38:	e1d4      	b.n	8103de4 <HAL_SPI_Transmit+0x3d4>
 8103a3a:	68fb      	ldr	r3, [r7, #12]
 8103a3c:	2201      	movs	r2, #1
 8103a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103a42:	f7fd fdd3 	bl	81015ec <HAL_GetTick>
 8103a46:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103a48:	68fb      	ldr	r3, [r7, #12]
 8103a4a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103a4e:	b2db      	uxtb	r3, r3
 8103a50:	2b01      	cmp	r3, #1
 8103a52:	d007      	beq.n	8103a64 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8103a54:	2302      	movs	r3, #2
 8103a56:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8103a58:	68fb      	ldr	r3, [r7, #12]
 8103a5a:	2200      	movs	r2, #0
 8103a5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103a60:	7efb      	ldrb	r3, [r7, #27]
 8103a62:	e1bf      	b.n	8103de4 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103a64:	68bb      	ldr	r3, [r7, #8]
 8103a66:	2b00      	cmp	r3, #0
 8103a68:	d002      	beq.n	8103a70 <HAL_SPI_Transmit+0x60>
 8103a6a:	88fb      	ldrh	r3, [r7, #6]
 8103a6c:	2b00      	cmp	r3, #0
 8103a6e:	d107      	bne.n	8103a80 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8103a70:	2301      	movs	r3, #1
 8103a72:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8103a74:	68fb      	ldr	r3, [r7, #12]
 8103a76:	2200      	movs	r2, #0
 8103a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103a7c:	7efb      	ldrb	r3, [r7, #27]
 8103a7e:	e1b1      	b.n	8103de4 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8103a80:	68fb      	ldr	r3, [r7, #12]
 8103a82:	2203      	movs	r2, #3
 8103a84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103a88:	68fb      	ldr	r3, [r7, #12]
 8103a8a:	2200      	movs	r2, #0
 8103a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8103a90:	68fb      	ldr	r3, [r7, #12]
 8103a92:	68ba      	ldr	r2, [r7, #8]
 8103a94:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8103a96:	68fb      	ldr	r3, [r7, #12]
 8103a98:	88fa      	ldrh	r2, [r7, #6]
 8103a9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8103a9e:	68fb      	ldr	r3, [r7, #12]
 8103aa0:	88fa      	ldrh	r2, [r7, #6]
 8103aa2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8103aa6:	68fb      	ldr	r3, [r7, #12]
 8103aa8:	2200      	movs	r2, #0
 8103aaa:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8103aac:	68fb      	ldr	r3, [r7, #12]
 8103aae:	2200      	movs	r2, #0
 8103ab0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8103ab4:	68fb      	ldr	r3, [r7, #12]
 8103ab6:	2200      	movs	r2, #0
 8103ab8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8103abc:	68fb      	ldr	r3, [r7, #12]
 8103abe:	2200      	movs	r2, #0
 8103ac0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8103ac2:	68fb      	ldr	r3, [r7, #12]
 8103ac4:	2200      	movs	r2, #0
 8103ac6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103ac8:	68fb      	ldr	r3, [r7, #12]
 8103aca:	689b      	ldr	r3, [r3, #8]
 8103acc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8103ad0:	d107      	bne.n	8103ae2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8103ad2:	68fb      	ldr	r3, [r7, #12]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	681a      	ldr	r2, [r3, #0]
 8103ad8:	68fb      	ldr	r3, [r7, #12]
 8103ada:	681b      	ldr	r3, [r3, #0]
 8103adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103ae0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103ae2:	68fb      	ldr	r3, [r7, #12]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	685b      	ldr	r3, [r3, #4]
 8103ae8:	0c1b      	lsrs	r3, r3, #16
 8103aea:	041b      	lsls	r3, r3, #16
 8103aec:	88f9      	ldrh	r1, [r7, #6]
 8103aee:	68fa      	ldr	r2, [r7, #12]
 8103af0:	6812      	ldr	r2, [r2, #0]
 8103af2:	430b      	orrs	r3, r1
 8103af4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103af6:	68fb      	ldr	r3, [r7, #12]
 8103af8:	681b      	ldr	r3, [r3, #0]
 8103afa:	681a      	ldr	r2, [r3, #0]
 8103afc:	68fb      	ldr	r3, [r7, #12]
 8103afe:	681b      	ldr	r3, [r3, #0]
 8103b00:	f042 0201 	orr.w	r2, r2, #1
 8103b04:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103b06:	68fb      	ldr	r3, [r7, #12]
 8103b08:	685b      	ldr	r3, [r3, #4]
 8103b0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103b0e:	d107      	bne.n	8103b20 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103b10:	68fb      	ldr	r3, [r7, #12]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	681a      	ldr	r2, [r3, #0]
 8103b16:	68fb      	ldr	r3, [r7, #12]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103b1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103b20:	68fb      	ldr	r3, [r7, #12]
 8103b22:	68db      	ldr	r3, [r3, #12]
 8103b24:	2b0f      	cmp	r3, #15
 8103b26:	d947      	bls.n	8103bb8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8103b28:	e03f      	b.n	8103baa <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103b2a:	68fb      	ldr	r3, [r7, #12]
 8103b2c:	681b      	ldr	r3, [r3, #0]
 8103b2e:	695b      	ldr	r3, [r3, #20]
 8103b30:	f003 0302 	and.w	r3, r3, #2
 8103b34:	2b02      	cmp	r3, #2
 8103b36:	d114      	bne.n	8103b62 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103b38:	68fb      	ldr	r3, [r7, #12]
 8103b3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103b3c:	68fb      	ldr	r3, [r7, #12]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	6812      	ldr	r2, [r2, #0]
 8103b42:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8103b44:	68fb      	ldr	r3, [r7, #12]
 8103b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103b48:	1d1a      	adds	r2, r3, #4
 8103b4a:	68fb      	ldr	r3, [r7, #12]
 8103b4c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8103b4e:	68fb      	ldr	r3, [r7, #12]
 8103b50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103b54:	b29b      	uxth	r3, r3
 8103b56:	3b01      	subs	r3, #1
 8103b58:	b29a      	uxth	r2, r3
 8103b5a:	68fb      	ldr	r3, [r7, #12]
 8103b5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103b60:	e023      	b.n	8103baa <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103b62:	f7fd fd43 	bl	81015ec <HAL_GetTick>
 8103b66:	4602      	mov	r2, r0
 8103b68:	697b      	ldr	r3, [r7, #20]
 8103b6a:	1ad3      	subs	r3, r2, r3
 8103b6c:	683a      	ldr	r2, [r7, #0]
 8103b6e:	429a      	cmp	r2, r3
 8103b70:	d803      	bhi.n	8103b7a <HAL_SPI_Transmit+0x16a>
 8103b72:	683b      	ldr	r3, [r7, #0]
 8103b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103b78:	d102      	bne.n	8103b80 <HAL_SPI_Transmit+0x170>
 8103b7a:	683b      	ldr	r3, [r7, #0]
 8103b7c:	2b00      	cmp	r3, #0
 8103b7e:	d114      	bne.n	8103baa <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103b80:	68f8      	ldr	r0, [r7, #12]
 8103b82:	f000 fe0c 	bl	810479e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103b86:	68fb      	ldr	r3, [r7, #12]
 8103b88:	2200      	movs	r2, #0
 8103b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103b8e:	68fb      	ldr	r3, [r7, #12]
 8103b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103b94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103b98:	68fb      	ldr	r3, [r7, #12]
 8103b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103b9e:	68fb      	ldr	r3, [r7, #12]
 8103ba0:	2201      	movs	r2, #1
 8103ba2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103ba6:	2303      	movs	r3, #3
 8103ba8:	e11c      	b.n	8103de4 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103baa:	68fb      	ldr	r3, [r7, #12]
 8103bac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103bb0:	b29b      	uxth	r3, r3
 8103bb2:	2b00      	cmp	r3, #0
 8103bb4:	d1b9      	bne.n	8103b2a <HAL_SPI_Transmit+0x11a>
 8103bb6:	e0ef      	b.n	8103d98 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103bb8:	68fb      	ldr	r3, [r7, #12]
 8103bba:	68db      	ldr	r3, [r3, #12]
 8103bbc:	2b07      	cmp	r3, #7
 8103bbe:	f240 80e4 	bls.w	8103d8a <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8103bc2:	e05d      	b.n	8103c80 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103bc4:	68fb      	ldr	r3, [r7, #12]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	695b      	ldr	r3, [r3, #20]
 8103bca:	f003 0302 	and.w	r3, r3, #2
 8103bce:	2b02      	cmp	r3, #2
 8103bd0:	d132      	bne.n	8103c38 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103bd2:	68fb      	ldr	r3, [r7, #12]
 8103bd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103bd8:	b29b      	uxth	r3, r3
 8103bda:	2b01      	cmp	r3, #1
 8103bdc:	d918      	bls.n	8103c10 <HAL_SPI_Transmit+0x200>
 8103bde:	68fb      	ldr	r3, [r7, #12]
 8103be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103be2:	2b00      	cmp	r3, #0
 8103be4:	d014      	beq.n	8103c10 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103be6:	68fb      	ldr	r3, [r7, #12]
 8103be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103bea:	68fb      	ldr	r3, [r7, #12]
 8103bec:	681b      	ldr	r3, [r3, #0]
 8103bee:	6812      	ldr	r2, [r2, #0]
 8103bf0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103bf2:	68fb      	ldr	r3, [r7, #12]
 8103bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103bf6:	1d1a      	adds	r2, r3, #4
 8103bf8:	68fb      	ldr	r3, [r7, #12]
 8103bfa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103bfc:	68fb      	ldr	r3, [r7, #12]
 8103bfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103c02:	b29b      	uxth	r3, r3
 8103c04:	3b02      	subs	r3, #2
 8103c06:	b29a      	uxth	r2, r3
 8103c08:	68fb      	ldr	r3, [r7, #12]
 8103c0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103c0e:	e037      	b.n	8103c80 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103c10:	68fb      	ldr	r3, [r7, #12]
 8103c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c14:	881a      	ldrh	r2, [r3, #0]
 8103c16:	69fb      	ldr	r3, [r7, #28]
 8103c18:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103c1a:	68fb      	ldr	r3, [r7, #12]
 8103c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103c1e:	1c9a      	adds	r2, r3, #2
 8103c20:	68fb      	ldr	r3, [r7, #12]
 8103c22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103c24:	68fb      	ldr	r3, [r7, #12]
 8103c26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103c2a:	b29b      	uxth	r3, r3
 8103c2c:	3b01      	subs	r3, #1
 8103c2e:	b29a      	uxth	r2, r3
 8103c30:	68fb      	ldr	r3, [r7, #12]
 8103c32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103c36:	e023      	b.n	8103c80 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103c38:	f7fd fcd8 	bl	81015ec <HAL_GetTick>
 8103c3c:	4602      	mov	r2, r0
 8103c3e:	697b      	ldr	r3, [r7, #20]
 8103c40:	1ad3      	subs	r3, r2, r3
 8103c42:	683a      	ldr	r2, [r7, #0]
 8103c44:	429a      	cmp	r2, r3
 8103c46:	d803      	bhi.n	8103c50 <HAL_SPI_Transmit+0x240>
 8103c48:	683b      	ldr	r3, [r7, #0]
 8103c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103c4e:	d102      	bne.n	8103c56 <HAL_SPI_Transmit+0x246>
 8103c50:	683b      	ldr	r3, [r7, #0]
 8103c52:	2b00      	cmp	r3, #0
 8103c54:	d114      	bne.n	8103c80 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103c56:	68f8      	ldr	r0, [r7, #12]
 8103c58:	f000 fda1 	bl	810479e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103c5c:	68fb      	ldr	r3, [r7, #12]
 8103c5e:	2200      	movs	r2, #0
 8103c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103c6e:	68fb      	ldr	r3, [r7, #12]
 8103c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103c74:	68fb      	ldr	r3, [r7, #12]
 8103c76:	2201      	movs	r2, #1
 8103c78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103c7c:	2303      	movs	r3, #3
 8103c7e:	e0b1      	b.n	8103de4 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103c80:	68fb      	ldr	r3, [r7, #12]
 8103c82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103c86:	b29b      	uxth	r3, r3
 8103c88:	2b00      	cmp	r3, #0
 8103c8a:	d19b      	bne.n	8103bc4 <HAL_SPI_Transmit+0x1b4>
 8103c8c:	e084      	b.n	8103d98 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103c8e:	68fb      	ldr	r3, [r7, #12]
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	695b      	ldr	r3, [r3, #20]
 8103c94:	f003 0302 	and.w	r3, r3, #2
 8103c98:	2b02      	cmp	r3, #2
 8103c9a:	d152      	bne.n	8103d42 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8103c9c:	68fb      	ldr	r3, [r7, #12]
 8103c9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103ca2:	b29b      	uxth	r3, r3
 8103ca4:	2b03      	cmp	r3, #3
 8103ca6:	d918      	bls.n	8103cda <HAL_SPI_Transmit+0x2ca>
 8103ca8:	68fb      	ldr	r3, [r7, #12]
 8103caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cac:	2b40      	cmp	r3, #64	; 0x40
 8103cae:	d914      	bls.n	8103cda <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103cb0:	68fb      	ldr	r3, [r7, #12]
 8103cb2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103cb4:	68fb      	ldr	r3, [r7, #12]
 8103cb6:	681b      	ldr	r3, [r3, #0]
 8103cb8:	6812      	ldr	r2, [r2, #0]
 8103cba:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103cbc:	68fb      	ldr	r3, [r7, #12]
 8103cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cc0:	1d1a      	adds	r2, r3, #4
 8103cc2:	68fb      	ldr	r3, [r7, #12]
 8103cc4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8103cc6:	68fb      	ldr	r3, [r7, #12]
 8103cc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103ccc:	b29b      	uxth	r3, r3
 8103cce:	3b04      	subs	r3, #4
 8103cd0:	b29a      	uxth	r2, r3
 8103cd2:	68fb      	ldr	r3, [r7, #12]
 8103cd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103cd8:	e057      	b.n	8103d8a <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103cda:	68fb      	ldr	r3, [r7, #12]
 8103cdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103ce0:	b29b      	uxth	r3, r3
 8103ce2:	2b01      	cmp	r3, #1
 8103ce4:	d917      	bls.n	8103d16 <HAL_SPI_Transmit+0x306>
 8103ce6:	68fb      	ldr	r3, [r7, #12]
 8103ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103cea:	2b00      	cmp	r3, #0
 8103cec:	d013      	beq.n	8103d16 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103cee:	68fb      	ldr	r3, [r7, #12]
 8103cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cf2:	881a      	ldrh	r2, [r3, #0]
 8103cf4:	69fb      	ldr	r3, [r7, #28]
 8103cf6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103cf8:	68fb      	ldr	r3, [r7, #12]
 8103cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103cfc:	1c9a      	adds	r2, r3, #2
 8103cfe:	68fb      	ldr	r3, [r7, #12]
 8103d00:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103d02:	68fb      	ldr	r3, [r7, #12]
 8103d04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d08:	b29b      	uxth	r3, r3
 8103d0a:	3b02      	subs	r3, #2
 8103d0c:	b29a      	uxth	r2, r3
 8103d0e:	68fb      	ldr	r3, [r7, #12]
 8103d10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103d14:	e039      	b.n	8103d8a <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8103d16:	68fb      	ldr	r3, [r7, #12]
 8103d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103d1a:	68fb      	ldr	r3, [r7, #12]
 8103d1c:	681b      	ldr	r3, [r3, #0]
 8103d1e:	3320      	adds	r3, #32
 8103d20:	7812      	ldrb	r2, [r2, #0]
 8103d22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8103d24:	68fb      	ldr	r3, [r7, #12]
 8103d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d28:	1c5a      	adds	r2, r3, #1
 8103d2a:	68fb      	ldr	r3, [r7, #12]
 8103d2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103d2e:	68fb      	ldr	r3, [r7, #12]
 8103d30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d34:	b29b      	uxth	r3, r3
 8103d36:	3b01      	subs	r3, #1
 8103d38:	b29a      	uxth	r2, r3
 8103d3a:	68fb      	ldr	r3, [r7, #12]
 8103d3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103d40:	e023      	b.n	8103d8a <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103d42:	f7fd fc53 	bl	81015ec <HAL_GetTick>
 8103d46:	4602      	mov	r2, r0
 8103d48:	697b      	ldr	r3, [r7, #20]
 8103d4a:	1ad3      	subs	r3, r2, r3
 8103d4c:	683a      	ldr	r2, [r7, #0]
 8103d4e:	429a      	cmp	r2, r3
 8103d50:	d803      	bhi.n	8103d5a <HAL_SPI_Transmit+0x34a>
 8103d52:	683b      	ldr	r3, [r7, #0]
 8103d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103d58:	d102      	bne.n	8103d60 <HAL_SPI_Transmit+0x350>
 8103d5a:	683b      	ldr	r3, [r7, #0]
 8103d5c:	2b00      	cmp	r3, #0
 8103d5e:	d114      	bne.n	8103d8a <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103d60:	68f8      	ldr	r0, [r7, #12]
 8103d62:	f000 fd1c 	bl	810479e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103d66:	68fb      	ldr	r3, [r7, #12]
 8103d68:	2200      	movs	r2, #0
 8103d6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103d6e:	68fb      	ldr	r3, [r7, #12]
 8103d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103d74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103d78:	68fb      	ldr	r3, [r7, #12]
 8103d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103d7e:	68fb      	ldr	r3, [r7, #12]
 8103d80:	2201      	movs	r2, #1
 8103d82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103d86:	2303      	movs	r3, #3
 8103d88:	e02c      	b.n	8103de4 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8103d8a:	68fb      	ldr	r3, [r7, #12]
 8103d8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103d90:	b29b      	uxth	r3, r3
 8103d92:	2b00      	cmp	r3, #0
 8103d94:	f47f af7b 	bne.w	8103c8e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8103d98:	683b      	ldr	r3, [r7, #0]
 8103d9a:	9300      	str	r3, [sp, #0]
 8103d9c:	697b      	ldr	r3, [r7, #20]
 8103d9e:	2200      	movs	r2, #0
 8103da0:	2108      	movs	r1, #8
 8103da2:	68f8      	ldr	r0, [r7, #12]
 8103da4:	f000 fd9b 	bl	81048de <SPI_WaitOnFlagUntilTimeout>
 8103da8:	4603      	mov	r3, r0
 8103daa:	2b00      	cmp	r3, #0
 8103dac:	d007      	beq.n	8103dbe <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8103dae:	68fb      	ldr	r3, [r7, #12]
 8103db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103db4:	f043 0220 	orr.w	r2, r3, #32
 8103db8:	68fb      	ldr	r3, [r7, #12]
 8103dba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8103dbe:	68f8      	ldr	r0, [r7, #12]
 8103dc0:	f000 fced 	bl	810479e <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8103dc4:	68fb      	ldr	r3, [r7, #12]
 8103dc6:	2200      	movs	r2, #0
 8103dc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8103dcc:	68fb      	ldr	r3, [r7, #12]
 8103dce:	2201      	movs	r2, #1
 8103dd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8103dd4:	68fb      	ldr	r3, [r7, #12]
 8103dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103dda:	2b00      	cmp	r3, #0
 8103ddc:	d001      	beq.n	8103de2 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8103dde:	2301      	movs	r3, #1
 8103de0:	e000      	b.n	8103de4 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8103de2:	7efb      	ldrb	r3, [r7, #27]
}
 8103de4:	4618      	mov	r0, r3
 8103de6:	3720      	adds	r7, #32
 8103de8:	46bd      	mov	sp, r7
 8103dea:	bd80      	pop	{r7, pc}

08103dec <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103dec:	b580      	push	{r7, lr}
 8103dee:	b08a      	sub	sp, #40	; 0x28
 8103df0:	af02      	add	r7, sp, #8
 8103df2:	60f8      	str	r0, [r7, #12]
 8103df4:	60b9      	str	r1, [r7, #8]
 8103df6:	603b      	str	r3, [r7, #0]
 8103df8:	4613      	mov	r3, r2
 8103dfa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103dfc:	2300      	movs	r3, #0
 8103dfe:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8103e00:	68fb      	ldr	r3, [r7, #12]
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	3330      	adds	r3, #48	; 0x30
 8103e06:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8103e08:	68fb      	ldr	r3, [r7, #12]
 8103e0a:	685b      	ldr	r3, [r3, #4]
 8103e0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103e10:	d112      	bne.n	8103e38 <HAL_SPI_Receive+0x4c>
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	689b      	ldr	r3, [r3, #8]
 8103e16:	2b00      	cmp	r3, #0
 8103e18:	d10e      	bne.n	8103e38 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8103e1a:	68fb      	ldr	r3, [r7, #12]
 8103e1c:	2204      	movs	r2, #4
 8103e1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8103e22:	88fa      	ldrh	r2, [r7, #6]
 8103e24:	683b      	ldr	r3, [r7, #0]
 8103e26:	9300      	str	r3, [sp, #0]
 8103e28:	4613      	mov	r3, r2
 8103e2a:	68ba      	ldr	r2, [r7, #8]
 8103e2c:	68b9      	ldr	r1, [r7, #8]
 8103e2e:	68f8      	ldr	r0, [r7, #12]
 8103e30:	f000 f9cc 	bl	81041cc <HAL_SPI_TransmitReceive>
 8103e34:	4603      	mov	r3, r0
 8103e36:	e1c5      	b.n	81041c4 <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103e38:	68fb      	ldr	r3, [r7, #12]
 8103e3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103e3e:	2b01      	cmp	r3, #1
 8103e40:	d101      	bne.n	8103e46 <HAL_SPI_Receive+0x5a>
 8103e42:	2302      	movs	r3, #2
 8103e44:	e1be      	b.n	81041c4 <HAL_SPI_Receive+0x3d8>
 8103e46:	68fb      	ldr	r3, [r7, #12]
 8103e48:	2201      	movs	r2, #1
 8103e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103e4e:	f7fd fbcd 	bl	81015ec <HAL_GetTick>
 8103e52:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103e54:	68fb      	ldr	r3, [r7, #12]
 8103e56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103e5a:	b2db      	uxtb	r3, r3
 8103e5c:	2b01      	cmp	r3, #1
 8103e5e:	d007      	beq.n	8103e70 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8103e60:	2302      	movs	r3, #2
 8103e62:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8103e64:	68fb      	ldr	r3, [r7, #12]
 8103e66:	2200      	movs	r2, #0
 8103e68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103e6c:	7ffb      	ldrb	r3, [r7, #31]
 8103e6e:	e1a9      	b.n	81041c4 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 8103e70:	68bb      	ldr	r3, [r7, #8]
 8103e72:	2b00      	cmp	r3, #0
 8103e74:	d002      	beq.n	8103e7c <HAL_SPI_Receive+0x90>
 8103e76:	88fb      	ldrh	r3, [r7, #6]
 8103e78:	2b00      	cmp	r3, #0
 8103e7a:	d107      	bne.n	8103e8c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8103e7c:	2301      	movs	r3, #1
 8103e7e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8103e80:	68fb      	ldr	r3, [r7, #12]
 8103e82:	2200      	movs	r2, #0
 8103e84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103e88:	7ffb      	ldrb	r3, [r7, #31]
 8103e8a:	e19b      	b.n	81041c4 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8103e8c:	68fb      	ldr	r3, [r7, #12]
 8103e8e:	2204      	movs	r2, #4
 8103e90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103e94:	68fb      	ldr	r3, [r7, #12]
 8103e96:	2200      	movs	r2, #0
 8103e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	68ba      	ldr	r2, [r7, #8]
 8103ea0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8103ea2:	68fb      	ldr	r3, [r7, #12]
 8103ea4:	88fa      	ldrh	r2, [r7, #6]
 8103ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8103eaa:	68fb      	ldr	r3, [r7, #12]
 8103eac:	88fa      	ldrh	r2, [r7, #6]
 8103eae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8103eb2:	68fb      	ldr	r3, [r7, #12]
 8103eb4:	2200      	movs	r2, #0
 8103eb6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8103eb8:	68fb      	ldr	r3, [r7, #12]
 8103eba:	2200      	movs	r2, #0
 8103ebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8103ec0:	68fb      	ldr	r3, [r7, #12]
 8103ec2:	2200      	movs	r2, #0
 8103ec4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8103ec8:	68fb      	ldr	r3, [r7, #12]
 8103eca:	2200      	movs	r2, #0
 8103ecc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8103ece:	68fb      	ldr	r3, [r7, #12]
 8103ed0:	2200      	movs	r2, #0
 8103ed2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103ed4:	68fb      	ldr	r3, [r7, #12]
 8103ed6:	689b      	ldr	r3, [r3, #8]
 8103ed8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8103edc:	d107      	bne.n	8103eee <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8103ede:	68fb      	ldr	r3, [r7, #12]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	681a      	ldr	r2, [r3, #0]
 8103ee4:	68fb      	ldr	r3, [r7, #12]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8103eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103eee:	68fb      	ldr	r3, [r7, #12]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	685b      	ldr	r3, [r3, #4]
 8103ef4:	0c1b      	lsrs	r3, r3, #16
 8103ef6:	041b      	lsls	r3, r3, #16
 8103ef8:	88f9      	ldrh	r1, [r7, #6]
 8103efa:	68fa      	ldr	r2, [r7, #12]
 8103efc:	6812      	ldr	r2, [r2, #0]
 8103efe:	430b      	orrs	r3, r1
 8103f00:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103f02:	68fb      	ldr	r3, [r7, #12]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	681a      	ldr	r2, [r3, #0]
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	f042 0201 	orr.w	r2, r2, #1
 8103f10:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103f12:	68fb      	ldr	r3, [r7, #12]
 8103f14:	685b      	ldr	r3, [r3, #4]
 8103f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103f1a:	d107      	bne.n	8103f2c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103f1c:	68fb      	ldr	r3, [r7, #12]
 8103f1e:	681b      	ldr	r3, [r3, #0]
 8103f20:	681a      	ldr	r2, [r3, #0]
 8103f22:	68fb      	ldr	r3, [r7, #12]
 8103f24:	681b      	ldr	r3, [r3, #0]
 8103f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103f2a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103f2c:	68fb      	ldr	r3, [r7, #12]
 8103f2e:	68db      	ldr	r3, [r3, #12]
 8103f30:	2b0f      	cmp	r3, #15
 8103f32:	d948      	bls.n	8103fc6 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8103f34:	e040      	b.n	8103fb8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8103f36:	68fb      	ldr	r3, [r7, #12]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	695a      	ldr	r2, [r3, #20]
 8103f3c:	f248 0308 	movw	r3, #32776	; 0x8008
 8103f40:	4013      	ands	r3, r2
 8103f42:	2b00      	cmp	r3, #0
 8103f44:	d014      	beq.n	8103f70 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103f46:	68fb      	ldr	r3, [r7, #12]
 8103f48:	681a      	ldr	r2, [r3, #0]
 8103f4a:	68fb      	ldr	r3, [r7, #12]
 8103f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103f4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8103f50:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8103f52:	68fb      	ldr	r3, [r7, #12]
 8103f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103f56:	1d1a      	adds	r2, r3, #4
 8103f58:	68fb      	ldr	r3, [r7, #12]
 8103f5a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8103f5c:	68fb      	ldr	r3, [r7, #12]
 8103f5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103f62:	b29b      	uxth	r3, r3
 8103f64:	3b01      	subs	r3, #1
 8103f66:	b29a      	uxth	r2, r3
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8103f6e:	e023      	b.n	8103fb8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103f70:	f7fd fb3c 	bl	81015ec <HAL_GetTick>
 8103f74:	4602      	mov	r2, r0
 8103f76:	697b      	ldr	r3, [r7, #20]
 8103f78:	1ad3      	subs	r3, r2, r3
 8103f7a:	683a      	ldr	r2, [r7, #0]
 8103f7c:	429a      	cmp	r2, r3
 8103f7e:	d803      	bhi.n	8103f88 <HAL_SPI_Receive+0x19c>
 8103f80:	683b      	ldr	r3, [r7, #0]
 8103f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103f86:	d102      	bne.n	8103f8e <HAL_SPI_Receive+0x1a2>
 8103f88:	683b      	ldr	r3, [r7, #0]
 8103f8a:	2b00      	cmp	r3, #0
 8103f8c:	d114      	bne.n	8103fb8 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103f8e:	68f8      	ldr	r0, [r7, #12]
 8103f90:	f000 fc05 	bl	810479e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103f94:	68fb      	ldr	r3, [r7, #12]
 8103f96:	2200      	movs	r2, #0
 8103f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103f9c:	68fb      	ldr	r3, [r7, #12]
 8103f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103fa6:	68fb      	ldr	r3, [r7, #12]
 8103fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103fac:	68fb      	ldr	r3, [r7, #12]
 8103fae:	2201      	movs	r2, #1
 8103fb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103fb4:	2303      	movs	r3, #3
 8103fb6:	e105      	b.n	81041c4 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8103fb8:	68fb      	ldr	r3, [r7, #12]
 8103fba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103fbe:	b29b      	uxth	r3, r3
 8103fc0:	2b00      	cmp	r3, #0
 8103fc2:	d1b8      	bne.n	8103f36 <HAL_SPI_Receive+0x14a>
 8103fc4:	e0eb      	b.n	810419e <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	68db      	ldr	r3, [r3, #12]
 8103fca:	2b07      	cmp	r3, #7
 8103fcc:	f240 80e0 	bls.w	8104190 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8103fd0:	e05b      	b.n	810408a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	695b      	ldr	r3, [r3, #20]
 8103fd8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8103fdc:	2b00      	cmp	r3, #0
 8103fde:	d030      	beq.n	8104042 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	695b      	ldr	r3, [r3, #20]
 8103fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103fea:	2b00      	cmp	r3, #0
 8103fec:	d014      	beq.n	8104018 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103fee:	68fb      	ldr	r3, [r7, #12]
 8103ff0:	681a      	ldr	r2, [r3, #0]
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ff6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8103ff8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8103ffa:	68fb      	ldr	r3, [r7, #12]
 8103ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ffe:	1d1a      	adds	r2, r3, #4
 8104000:	68fb      	ldr	r3, [r7, #12]
 8104002:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810400a:	b29b      	uxth	r3, r3
 810400c:	3b02      	subs	r3, #2
 810400e:	b29a      	uxth	r2, r3
 8104010:	68fb      	ldr	r3, [r7, #12]
 8104012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104016:	e038      	b.n	810408a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104018:	68fb      	ldr	r3, [r7, #12]
 810401a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810401c:	69ba      	ldr	r2, [r7, #24]
 810401e:	8812      	ldrh	r2, [r2, #0]
 8104020:	b292      	uxth	r2, r2
 8104022:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104024:	68fb      	ldr	r3, [r7, #12]
 8104026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104028:	1c9a      	adds	r2, r3, #2
 810402a:	68fb      	ldr	r3, [r7, #12]
 810402c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104034:	b29b      	uxth	r3, r3
 8104036:	3b01      	subs	r3, #1
 8104038:	b29a      	uxth	r2, r3
 810403a:	68fb      	ldr	r3, [r7, #12]
 810403c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104040:	e023      	b.n	810408a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104042:	f7fd fad3 	bl	81015ec <HAL_GetTick>
 8104046:	4602      	mov	r2, r0
 8104048:	697b      	ldr	r3, [r7, #20]
 810404a:	1ad3      	subs	r3, r2, r3
 810404c:	683a      	ldr	r2, [r7, #0]
 810404e:	429a      	cmp	r2, r3
 8104050:	d803      	bhi.n	810405a <HAL_SPI_Receive+0x26e>
 8104052:	683b      	ldr	r3, [r7, #0]
 8104054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104058:	d102      	bne.n	8104060 <HAL_SPI_Receive+0x274>
 810405a:	683b      	ldr	r3, [r7, #0]
 810405c:	2b00      	cmp	r3, #0
 810405e:	d114      	bne.n	810408a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104060:	68f8      	ldr	r0, [r7, #12]
 8104062:	f000 fb9c 	bl	810479e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	2200      	movs	r2, #0
 810406a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104074:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104078:	68fb      	ldr	r3, [r7, #12]
 810407a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810407e:	68fb      	ldr	r3, [r7, #12]
 8104080:	2201      	movs	r2, #1
 8104082:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104086:	2303      	movs	r3, #3
 8104088:	e09c      	b.n	81041c4 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810408a:	68fb      	ldr	r3, [r7, #12]
 810408c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104090:	b29b      	uxth	r3, r3
 8104092:	2b00      	cmp	r3, #0
 8104094:	d19d      	bne.n	8103fd2 <HAL_SPI_Receive+0x1e6>
 8104096:	e082      	b.n	810419e <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8104098:	68fb      	ldr	r3, [r7, #12]
 810409a:	681b      	ldr	r3, [r3, #0]
 810409c:	695b      	ldr	r3, [r3, #20]
 810409e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 81040a2:	2b00      	cmp	r3, #0
 81040a4:	d050      	beq.n	8104148 <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 81040a6:	68fb      	ldr	r3, [r7, #12]
 81040a8:	681b      	ldr	r3, [r3, #0]
 81040aa:	695b      	ldr	r3, [r3, #20]
 81040ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81040b0:	2b00      	cmp	r3, #0
 81040b2:	d014      	beq.n	81040de <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81040b4:	68fb      	ldr	r3, [r7, #12]
 81040b6:	681a      	ldr	r2, [r3, #0]
 81040b8:	68fb      	ldr	r3, [r7, #12]
 81040ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81040bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81040be:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81040c0:	68fb      	ldr	r3, [r7, #12]
 81040c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81040c4:	1d1a      	adds	r2, r3, #4
 81040c6:	68fb      	ldr	r3, [r7, #12]
 81040c8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 81040ca:	68fb      	ldr	r3, [r7, #12]
 81040cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81040d0:	b29b      	uxth	r3, r3
 81040d2:	3b04      	subs	r3, #4
 81040d4:	b29a      	uxth	r2, r3
 81040d6:	68fb      	ldr	r3, [r7, #12]
 81040d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81040dc:	e058      	b.n	8104190 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 81040de:	68fb      	ldr	r3, [r7, #12]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	695b      	ldr	r3, [r3, #20]
 81040e4:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 81040e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81040ec:	d914      	bls.n	8104118 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81040ee:	68fb      	ldr	r3, [r7, #12]
 81040f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81040f2:	69ba      	ldr	r2, [r7, #24]
 81040f4:	8812      	ldrh	r2, [r2, #0]
 81040f6:	b292      	uxth	r2, r2
 81040f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81040fa:	68fb      	ldr	r3, [r7, #12]
 81040fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81040fe:	1c9a      	adds	r2, r3, #2
 8104100:	68fb      	ldr	r3, [r7, #12]
 8104102:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104104:	68fb      	ldr	r3, [r7, #12]
 8104106:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810410a:	b29b      	uxth	r3, r3
 810410c:	3b02      	subs	r3, #2
 810410e:	b29a      	uxth	r2, r3
 8104110:	68fb      	ldr	r3, [r7, #12]
 8104112:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104116:	e03b      	b.n	8104190 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104118:	68fb      	ldr	r3, [r7, #12]
 810411a:	681b      	ldr	r3, [r3, #0]
 810411c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8104120:	68fb      	ldr	r3, [r7, #12]
 8104122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104124:	7812      	ldrb	r2, [r2, #0]
 8104126:	b2d2      	uxtb	r2, r2
 8104128:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 810412a:	68fb      	ldr	r3, [r7, #12]
 810412c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810412e:	1c5a      	adds	r2, r3, #1
 8104130:	68fb      	ldr	r3, [r7, #12]
 8104132:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104134:	68fb      	ldr	r3, [r7, #12]
 8104136:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810413a:	b29b      	uxth	r3, r3
 810413c:	3b01      	subs	r3, #1
 810413e:	b29a      	uxth	r2, r3
 8104140:	68fb      	ldr	r3, [r7, #12]
 8104142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8104146:	e023      	b.n	8104190 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104148:	f7fd fa50 	bl	81015ec <HAL_GetTick>
 810414c:	4602      	mov	r2, r0
 810414e:	697b      	ldr	r3, [r7, #20]
 8104150:	1ad3      	subs	r3, r2, r3
 8104152:	683a      	ldr	r2, [r7, #0]
 8104154:	429a      	cmp	r2, r3
 8104156:	d803      	bhi.n	8104160 <HAL_SPI_Receive+0x374>
 8104158:	683b      	ldr	r3, [r7, #0]
 810415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810415e:	d102      	bne.n	8104166 <HAL_SPI_Receive+0x37a>
 8104160:	683b      	ldr	r3, [r7, #0]
 8104162:	2b00      	cmp	r3, #0
 8104164:	d114      	bne.n	8104190 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104166:	68f8      	ldr	r0, [r7, #12]
 8104168:	f000 fb19 	bl	810479e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810416c:	68fb      	ldr	r3, [r7, #12]
 810416e:	2200      	movs	r2, #0
 8104170:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104174:	68fb      	ldr	r3, [r7, #12]
 8104176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810417a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810417e:	68fb      	ldr	r3, [r7, #12]
 8104180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	2201      	movs	r2, #1
 8104188:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810418c:	2303      	movs	r3, #3
 810418e:	e019      	b.n	81041c4 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104196:	b29b      	uxth	r3, r3
 8104198:	2b00      	cmp	r3, #0
 810419a:	f47f af7d 	bne.w	8104098 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810419e:	68f8      	ldr	r0, [r7, #12]
 81041a0:	f000 fafd 	bl	810479e <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81041a4:	68fb      	ldr	r3, [r7, #12]
 81041a6:	2200      	movs	r2, #0
 81041a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81041ac:	68fb      	ldr	r3, [r7, #12]
 81041ae:	2201      	movs	r2, #1
 81041b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81041ba:	2b00      	cmp	r3, #0
 81041bc:	d001      	beq.n	81041c2 <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 81041be:	2301      	movs	r3, #1
 81041c0:	e000      	b.n	81041c4 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 81041c2:	7ffb      	ldrb	r3, [r7, #31]
}
 81041c4:	4618      	mov	r0, r3
 81041c6:	3720      	adds	r7, #32
 81041c8:	46bd      	mov	sp, r7
 81041ca:	bd80      	pop	{r7, pc}

081041cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 81041cc:	b580      	push	{r7, lr}
 81041ce:	b08e      	sub	sp, #56	; 0x38
 81041d0:	af02      	add	r7, sp, #8
 81041d2:	60f8      	str	r0, [r7, #12]
 81041d4:	60b9      	str	r1, [r7, #8]
 81041d6:	607a      	str	r2, [r7, #4]
 81041d8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 81041da:	2300      	movs	r3, #0
 81041dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81041e0:	68fb      	ldr	r3, [r7, #12]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	3320      	adds	r3, #32
 81041e6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 81041e8:	68fb      	ldr	r3, [r7, #12]
 81041ea:	681b      	ldr	r3, [r3, #0]
 81041ec:	3330      	adds	r3, #48	; 0x30
 81041ee:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 81041f0:	68fb      	ldr	r3, [r7, #12]
 81041f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81041f6:	2b01      	cmp	r3, #1
 81041f8:	d101      	bne.n	81041fe <HAL_SPI_TransmitReceive+0x32>
 81041fa:	2302      	movs	r3, #2
 81041fc:	e2cb      	b.n	8104796 <HAL_SPI_TransmitReceive+0x5ca>
 81041fe:	68fb      	ldr	r3, [r7, #12]
 8104200:	2201      	movs	r2, #1
 8104202:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104206:	f7fd f9f1 	bl	81015ec <HAL_GetTick>
 810420a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 810420c:	887b      	ldrh	r3, [r7, #2]
 810420e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8104210:	887b      	ldrh	r3, [r7, #2]
 8104212:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8104214:	68fb      	ldr	r3, [r7, #12]
 8104216:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810421a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 810421c:	68fb      	ldr	r3, [r7, #12]
 810421e:	685b      	ldr	r3, [r3, #4]
 8104220:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8104222:	7efb      	ldrb	r3, [r7, #27]
 8104224:	2b01      	cmp	r3, #1
 8104226:	d014      	beq.n	8104252 <HAL_SPI_TransmitReceive+0x86>
 8104228:	697b      	ldr	r3, [r7, #20]
 810422a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810422e:	d106      	bne.n	810423e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104230:	68fb      	ldr	r3, [r7, #12]
 8104232:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8104234:	2b00      	cmp	r3, #0
 8104236:	d102      	bne.n	810423e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8104238:	7efb      	ldrb	r3, [r7, #27]
 810423a:	2b04      	cmp	r3, #4
 810423c:	d009      	beq.n	8104252 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 810423e:	2302      	movs	r3, #2
 8104240:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8104244:	68fb      	ldr	r3, [r7, #12]
 8104246:	2200      	movs	r2, #0
 8104248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810424c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104250:	e2a1      	b.n	8104796 <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8104252:	68bb      	ldr	r3, [r7, #8]
 8104254:	2b00      	cmp	r3, #0
 8104256:	d005      	beq.n	8104264 <HAL_SPI_TransmitReceive+0x98>
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	2b00      	cmp	r3, #0
 810425c:	d002      	beq.n	8104264 <HAL_SPI_TransmitReceive+0x98>
 810425e:	887b      	ldrh	r3, [r7, #2]
 8104260:	2b00      	cmp	r3, #0
 8104262:	d109      	bne.n	8104278 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8104264:	2301      	movs	r3, #1
 8104266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 810426a:	68fb      	ldr	r3, [r7, #12]
 810426c:	2200      	movs	r2, #0
 810426e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104272:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8104276:	e28e      	b.n	8104796 <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810427e:	b2db      	uxtb	r3, r3
 8104280:	2b04      	cmp	r3, #4
 8104282:	d003      	beq.n	810428c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8104284:	68fb      	ldr	r3, [r7, #12]
 8104286:	2205      	movs	r2, #5
 8104288:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810428c:	68fb      	ldr	r3, [r7, #12]
 810428e:	2200      	movs	r2, #0
 8104290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8104294:	68fb      	ldr	r3, [r7, #12]
 8104296:	687a      	ldr	r2, [r7, #4]
 8104298:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 810429a:	68fb      	ldr	r3, [r7, #12]
 810429c:	887a      	ldrh	r2, [r7, #2]
 810429e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 81042a2:	68fb      	ldr	r3, [r7, #12]
 81042a4:	887a      	ldrh	r2, [r7, #2]
 81042a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 81042aa:	68fb      	ldr	r3, [r7, #12]
 81042ac:	68ba      	ldr	r2, [r7, #8]
 81042ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 81042b0:	68fb      	ldr	r3, [r7, #12]
 81042b2:	887a      	ldrh	r2, [r7, #2]
 81042b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 81042b8:	68fb      	ldr	r3, [r7, #12]
 81042ba:	887a      	ldrh	r2, [r7, #2]
 81042bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 81042c0:	68fb      	ldr	r3, [r7, #12]
 81042c2:	2200      	movs	r2, #0
 81042c4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 81042c6:	68fb      	ldr	r3, [r7, #12]
 81042c8:	2200      	movs	r2, #0
 81042ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 81042cc:	68fb      	ldr	r3, [r7, #12]
 81042ce:	681b      	ldr	r3, [r3, #0]
 81042d0:	685b      	ldr	r3, [r3, #4]
 81042d2:	0c1b      	lsrs	r3, r3, #16
 81042d4:	041b      	lsls	r3, r3, #16
 81042d6:	8879      	ldrh	r1, [r7, #2]
 81042d8:	68fa      	ldr	r2, [r7, #12]
 81042da:	6812      	ldr	r2, [r2, #0]
 81042dc:	430b      	orrs	r3, r1
 81042de:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 81042e0:	68fb      	ldr	r3, [r7, #12]
 81042e2:	681b      	ldr	r3, [r3, #0]
 81042e4:	681a      	ldr	r2, [r3, #0]
 81042e6:	68fb      	ldr	r3, [r7, #12]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	f042 0201 	orr.w	r2, r2, #1
 81042ee:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81042f0:	68fb      	ldr	r3, [r7, #12]
 81042f2:	685b      	ldr	r3, [r3, #4]
 81042f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81042f8:	d107      	bne.n	810430a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81042fa:	68fb      	ldr	r3, [r7, #12]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	681a      	ldr	r2, [r3, #0]
 8104300:	68fb      	ldr	r3, [r7, #12]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810430a:	68fb      	ldr	r3, [r7, #12]
 810430c:	68db      	ldr	r3, [r3, #12]
 810430e:	2b0f      	cmp	r3, #15
 8104310:	d970      	bls.n	81043f4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104312:	e068      	b.n	81043e6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104314:	68fb      	ldr	r3, [r7, #12]
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	695b      	ldr	r3, [r3, #20]
 810431a:	f003 0302 	and.w	r3, r3, #2
 810431e:	2b02      	cmp	r3, #2
 8104320:	d11a      	bne.n	8104358 <HAL_SPI_TransmitReceive+0x18c>
 8104322:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104324:	2b00      	cmp	r3, #0
 8104326:	d017      	beq.n	8104358 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104328:	68fb      	ldr	r3, [r7, #12]
 810432a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810432c:	68fb      	ldr	r3, [r7, #12]
 810432e:	681b      	ldr	r3, [r3, #0]
 8104330:	6812      	ldr	r2, [r2, #0]
 8104332:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104334:	68fb      	ldr	r3, [r7, #12]
 8104336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104338:	1d1a      	adds	r2, r3, #4
 810433a:	68fb      	ldr	r3, [r7, #12]
 810433c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 810433e:	68fb      	ldr	r3, [r7, #12]
 8104340:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104344:	b29b      	uxth	r3, r3
 8104346:	3b01      	subs	r3, #1
 8104348:	b29a      	uxth	r2, r3
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8104350:	68fb      	ldr	r3, [r7, #12]
 8104352:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104356:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8104358:	68fb      	ldr	r3, [r7, #12]
 810435a:	681b      	ldr	r3, [r3, #0]
 810435c:	695a      	ldr	r2, [r3, #20]
 810435e:	f248 0308 	movw	r3, #32776	; 0x8008
 8104362:	4013      	ands	r3, r2
 8104364:	2b00      	cmp	r3, #0
 8104366:	d01a      	beq.n	810439e <HAL_SPI_TransmitReceive+0x1d2>
 8104368:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810436a:	2b00      	cmp	r3, #0
 810436c:	d017      	beq.n	810439e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810436e:	68fb      	ldr	r3, [r7, #12]
 8104370:	681a      	ldr	r2, [r3, #0]
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104376:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104378:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 810437a:	68fb      	ldr	r3, [r7, #12]
 810437c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810437e:	1d1a      	adds	r2, r3, #4
 8104380:	68fb      	ldr	r3, [r7, #12]
 8104382:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8104384:	68fb      	ldr	r3, [r7, #12]
 8104386:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810438a:	b29b      	uxth	r3, r3
 810438c:	3b01      	subs	r3, #1
 810438e:	b29a      	uxth	r2, r3
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8104396:	68fb      	ldr	r3, [r7, #12]
 8104398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810439c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810439e:	f7fd f925 	bl	81015ec <HAL_GetTick>
 81043a2:	4602      	mov	r2, r0
 81043a4:	69fb      	ldr	r3, [r7, #28]
 81043a6:	1ad3      	subs	r3, r2, r3
 81043a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81043aa:	429a      	cmp	r2, r3
 81043ac:	d803      	bhi.n	81043b6 <HAL_SPI_TransmitReceive+0x1ea>
 81043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81043b4:	d102      	bne.n	81043bc <HAL_SPI_TransmitReceive+0x1f0>
 81043b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81043b8:	2b00      	cmp	r3, #0
 81043ba:	d114      	bne.n	81043e6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81043bc:	68f8      	ldr	r0, [r7, #12]
 81043be:	f000 f9ee 	bl	810479e <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81043c2:	68fb      	ldr	r3, [r7, #12]
 81043c4:	2200      	movs	r2, #0
 81043c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81043ca:	68fb      	ldr	r3, [r7, #12]
 81043cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81043d4:	68fb      	ldr	r3, [r7, #12]
 81043d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81043da:	68fb      	ldr	r3, [r7, #12]
 81043dc:	2201      	movs	r2, #1
 81043de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81043e2:	2303      	movs	r3, #3
 81043e4:	e1d7      	b.n	8104796 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81043e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81043e8:	2b00      	cmp	r3, #0
 81043ea:	d193      	bne.n	8104314 <HAL_SPI_TransmitReceive+0x148>
 81043ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81043ee:	2b00      	cmp	r3, #0
 81043f0:	d190      	bne.n	8104314 <HAL_SPI_TransmitReceive+0x148>
 81043f2:	e1a9      	b.n	8104748 <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 81043f4:	68fb      	ldr	r3, [r7, #12]
 81043f6:	68db      	ldr	r3, [r3, #12]
 81043f8:	2b07      	cmp	r3, #7
 81043fa:	f240 819d 	bls.w	8104738 <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81043fe:	e0a6      	b.n	810454e <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8104400:	68fb      	ldr	r3, [r7, #12]
 8104402:	681b      	ldr	r3, [r3, #0]
 8104404:	695b      	ldr	r3, [r3, #20]
 8104406:	f003 0302 	and.w	r3, r3, #2
 810440a:	2b02      	cmp	r3, #2
 810440c:	d139      	bne.n	8104482 <HAL_SPI_TransmitReceive+0x2b6>
 810440e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104410:	2b00      	cmp	r3, #0
 8104412:	d036      	beq.n	8104482 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104414:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104416:	2b01      	cmp	r3, #1
 8104418:	d91c      	bls.n	8104454 <HAL_SPI_TransmitReceive+0x288>
 810441a:	68fb      	ldr	r3, [r7, #12]
 810441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810441e:	2b00      	cmp	r3, #0
 8104420:	d018      	beq.n	8104454 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104422:	68fb      	ldr	r3, [r7, #12]
 8104424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104426:	68fb      	ldr	r3, [r7, #12]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	6812      	ldr	r2, [r2, #0]
 810442c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810442e:	68fb      	ldr	r3, [r7, #12]
 8104430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104432:	1d1a      	adds	r2, r3, #4
 8104434:	68fb      	ldr	r3, [r7, #12]
 8104436:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104438:	68fb      	ldr	r3, [r7, #12]
 810443a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810443e:	b29b      	uxth	r3, r3
 8104440:	3b02      	subs	r3, #2
 8104442:	b29a      	uxth	r2, r3
 8104444:	68fb      	ldr	r3, [r7, #12]
 8104446:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810444a:	68fb      	ldr	r3, [r7, #12]
 810444c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104450:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8104452:	e016      	b.n	8104482 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104454:	68fb      	ldr	r3, [r7, #12]
 8104456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104458:	881a      	ldrh	r2, [r3, #0]
 810445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810445c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104462:	1c9a      	adds	r2, r3, #2
 8104464:	68fb      	ldr	r3, [r7, #12]
 8104466:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104468:	68fb      	ldr	r3, [r7, #12]
 810446a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810446e:	b29b      	uxth	r3, r3
 8104470:	3b01      	subs	r3, #1
 8104472:	b29a      	uxth	r2, r3
 8104474:	68fb      	ldr	r3, [r7, #12]
 8104476:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810447a:	68fb      	ldr	r3, [r7, #12]
 810447c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104480:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8104482:	68fb      	ldr	r3, [r7, #12]
 8104484:	681b      	ldr	r3, [r3, #0]
 8104486:	695b      	ldr	r3, [r3, #20]
 8104488:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810448c:	2b00      	cmp	r3, #0
 810448e:	d03a      	beq.n	8104506 <HAL_SPI_TransmitReceive+0x33a>
 8104490:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104492:	2b00      	cmp	r3, #0
 8104494:	d037      	beq.n	8104506 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	681b      	ldr	r3, [r3, #0]
 810449a:	695b      	ldr	r3, [r3, #20]
 810449c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81044a0:	2b00      	cmp	r3, #0
 81044a2:	d018      	beq.n	81044d6 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81044a4:	68fb      	ldr	r3, [r7, #12]
 81044a6:	681a      	ldr	r2, [r3, #0]
 81044a8:	68fb      	ldr	r3, [r7, #12]
 81044aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81044ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81044ae:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81044b0:	68fb      	ldr	r3, [r7, #12]
 81044b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81044b4:	1d1a      	adds	r2, r3, #4
 81044b6:	68fb      	ldr	r3, [r7, #12]
 81044b8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81044ba:	68fb      	ldr	r3, [r7, #12]
 81044bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81044c0:	b29b      	uxth	r3, r3
 81044c2:	3b02      	subs	r3, #2
 81044c4:	b29a      	uxth	r2, r3
 81044c6:	68fb      	ldr	r3, [r7, #12]
 81044c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81044cc:	68fb      	ldr	r3, [r7, #12]
 81044ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81044d2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81044d4:	e017      	b.n	8104506 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81044d6:	68fb      	ldr	r3, [r7, #12]
 81044d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81044da:	6a3a      	ldr	r2, [r7, #32]
 81044dc:	8812      	ldrh	r2, [r2, #0]
 81044de:	b292      	uxth	r2, r2
 81044e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81044e6:	1c9a      	adds	r2, r3, #2
 81044e8:	68fb      	ldr	r3, [r7, #12]
 81044ea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81044ec:	68fb      	ldr	r3, [r7, #12]
 81044ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81044f2:	b29b      	uxth	r3, r3
 81044f4:	3b01      	subs	r3, #1
 81044f6:	b29a      	uxth	r2, r3
 81044f8:	68fb      	ldr	r3, [r7, #12]
 81044fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81044fe:	68fb      	ldr	r3, [r7, #12]
 8104500:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104504:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104506:	f7fd f871 	bl	81015ec <HAL_GetTick>
 810450a:	4602      	mov	r2, r0
 810450c:	69fb      	ldr	r3, [r7, #28]
 810450e:	1ad3      	subs	r3, r2, r3
 8104510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104512:	429a      	cmp	r2, r3
 8104514:	d803      	bhi.n	810451e <HAL_SPI_TransmitReceive+0x352>
 8104516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104518:	f1b3 3fff 	cmp.w	r3, #4294967295
 810451c:	d102      	bne.n	8104524 <HAL_SPI_TransmitReceive+0x358>
 810451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104520:	2b00      	cmp	r3, #0
 8104522:	d114      	bne.n	810454e <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104524:	68f8      	ldr	r0, [r7, #12]
 8104526:	f000 f93a 	bl	810479e <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 810452a:	68fb      	ldr	r3, [r7, #12]
 810452c:	2200      	movs	r2, #0
 810452e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104532:	68fb      	ldr	r3, [r7, #12]
 8104534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104538:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810453c:	68fb      	ldr	r3, [r7, #12]
 810453e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104542:	68fb      	ldr	r3, [r7, #12]
 8104544:	2201      	movs	r2, #1
 8104546:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 810454a:	2303      	movs	r3, #3
 810454c:	e123      	b.n	8104796 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810454e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104550:	2b00      	cmp	r3, #0
 8104552:	f47f af55 	bne.w	8104400 <HAL_SPI_TransmitReceive+0x234>
 8104556:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104558:	2b00      	cmp	r3, #0
 810455a:	f47f af51 	bne.w	8104400 <HAL_SPI_TransmitReceive+0x234>
 810455e:	e0f3      	b.n	8104748 <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8104560:	68fb      	ldr	r3, [r7, #12]
 8104562:	681b      	ldr	r3, [r3, #0]
 8104564:	695b      	ldr	r3, [r3, #20]
 8104566:	f003 0302 	and.w	r3, r3, #2
 810456a:	2b02      	cmp	r3, #2
 810456c:	d15a      	bne.n	8104624 <HAL_SPI_TransmitReceive+0x458>
 810456e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104570:	2b00      	cmp	r3, #0
 8104572:	d057      	beq.n	8104624 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8104574:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104576:	2b03      	cmp	r3, #3
 8104578:	d91c      	bls.n	81045b4 <HAL_SPI_TransmitReceive+0x3e8>
 810457a:	68fb      	ldr	r3, [r7, #12]
 810457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810457e:	2b40      	cmp	r3, #64	; 0x40
 8104580:	d918      	bls.n	81045b4 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104582:	68fb      	ldr	r3, [r7, #12]
 8104584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104586:	68fb      	ldr	r3, [r7, #12]
 8104588:	681b      	ldr	r3, [r3, #0]
 810458a:	6812      	ldr	r2, [r2, #0]
 810458c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810458e:	68fb      	ldr	r3, [r7, #12]
 8104590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104592:	1d1a      	adds	r2, r3, #4
 8104594:	68fb      	ldr	r3, [r7, #12]
 8104596:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8104598:	68fb      	ldr	r3, [r7, #12]
 810459a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810459e:	b29b      	uxth	r3, r3
 81045a0:	3b04      	subs	r3, #4
 81045a2:	b29a      	uxth	r2, r3
 81045a4:	68fb      	ldr	r3, [r7, #12]
 81045a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81045b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 81045b2:	e037      	b.n	8104624 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 81045b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81045b6:	2b01      	cmp	r3, #1
 81045b8:	d91b      	bls.n	81045f2 <HAL_SPI_TransmitReceive+0x426>
 81045ba:	68fb      	ldr	r3, [r7, #12]
 81045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81045be:	2b00      	cmp	r3, #0
 81045c0:	d017      	beq.n	81045f2 <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81045c2:	68fb      	ldr	r3, [r7, #12]
 81045c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81045c6:	881a      	ldrh	r2, [r3, #0]
 81045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81045ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81045cc:	68fb      	ldr	r3, [r7, #12]
 81045ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81045d0:	1c9a      	adds	r2, r3, #2
 81045d2:	68fb      	ldr	r3, [r7, #12]
 81045d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81045d6:	68fb      	ldr	r3, [r7, #12]
 81045d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81045dc:	b29b      	uxth	r3, r3
 81045de:	3b02      	subs	r3, #2
 81045e0:	b29a      	uxth	r2, r3
 81045e2:	68fb      	ldr	r3, [r7, #12]
 81045e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81045ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 81045f0:	e018      	b.n	8104624 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 81045f2:	68fb      	ldr	r3, [r7, #12]
 81045f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81045f6:	68fb      	ldr	r3, [r7, #12]
 81045f8:	681b      	ldr	r3, [r3, #0]
 81045fa:	3320      	adds	r3, #32
 81045fc:	7812      	ldrb	r2, [r2, #0]
 81045fe:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104600:	68fb      	ldr	r3, [r7, #12]
 8104602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104604:	1c5a      	adds	r2, r3, #1
 8104606:	68fb      	ldr	r3, [r7, #12]
 8104608:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810460a:	68fb      	ldr	r3, [r7, #12]
 810460c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104610:	b29b      	uxth	r3, r3
 8104612:	3b01      	subs	r3, #1
 8104614:	b29a      	uxth	r2, r3
 8104616:	68fb      	ldr	r3, [r7, #12]
 8104618:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810461c:	68fb      	ldr	r3, [r7, #12]
 810461e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104622:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8104624:	68fb      	ldr	r3, [r7, #12]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	695b      	ldr	r3, [r3, #20]
 810462a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810462e:	2b00      	cmp	r3, #0
 8104630:	d05e      	beq.n	81046f0 <HAL_SPI_TransmitReceive+0x524>
 8104632:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104634:	2b00      	cmp	r3, #0
 8104636:	d05b      	beq.n	81046f0 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104638:	68fb      	ldr	r3, [r7, #12]
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	695b      	ldr	r3, [r3, #20]
 810463e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104642:	2b00      	cmp	r3, #0
 8104644:	d018      	beq.n	8104678 <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104646:	68fb      	ldr	r3, [r7, #12]
 8104648:	681a      	ldr	r2, [r3, #0]
 810464a:	68fb      	ldr	r3, [r7, #12]
 810464c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810464e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8104650:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8104652:	68fb      	ldr	r3, [r7, #12]
 8104654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104656:	1d1a      	adds	r2, r3, #4
 8104658:	68fb      	ldr	r3, [r7, #12]
 810465a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810465c:	68fb      	ldr	r3, [r7, #12]
 810465e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104662:	b29b      	uxth	r3, r3
 8104664:	3b04      	subs	r3, #4
 8104666:	b29a      	uxth	r2, r3
 8104668:	68fb      	ldr	r3, [r7, #12]
 810466a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104674:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8104676:	e03b      	b.n	81046f0 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8104678:	68fb      	ldr	r3, [r7, #12]
 810467a:	681b      	ldr	r3, [r3, #0]
 810467c:	695b      	ldr	r3, [r3, #20]
 810467e:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8104682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104686:	d918      	bls.n	81046ba <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104688:	68fb      	ldr	r3, [r7, #12]
 810468a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810468c:	6a3a      	ldr	r2, [r7, #32]
 810468e:	8812      	ldrh	r2, [r2, #0]
 8104690:	b292      	uxth	r2, r2
 8104692:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8104694:	68fb      	ldr	r3, [r7, #12]
 8104696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104698:	1c9a      	adds	r2, r3, #2
 810469a:	68fb      	ldr	r3, [r7, #12]
 810469c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810469e:	68fb      	ldr	r3, [r7, #12]
 81046a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81046a4:	b29b      	uxth	r3, r3
 81046a6:	3b02      	subs	r3, #2
 81046a8:	b29a      	uxth	r2, r3
 81046aa:	68fb      	ldr	r3, [r7, #12]
 81046ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81046b0:	68fb      	ldr	r3, [r7, #12]
 81046b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81046b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81046b8:	e01a      	b.n	81046f0 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 81046ba:	68fb      	ldr	r3, [r7, #12]
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81046c2:	68fb      	ldr	r3, [r7, #12]
 81046c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81046c6:	7812      	ldrb	r2, [r2, #0]
 81046c8:	b2d2      	uxtb	r2, r2
 81046ca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81046cc:	68fb      	ldr	r3, [r7, #12]
 81046ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81046d0:	1c5a      	adds	r2, r3, #1
 81046d2:	68fb      	ldr	r3, [r7, #12]
 81046d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81046d6:	68fb      	ldr	r3, [r7, #12]
 81046d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81046dc:	b29b      	uxth	r3, r3
 81046de:	3b01      	subs	r3, #1
 81046e0:	b29a      	uxth	r2, r3
 81046e2:	68fb      	ldr	r3, [r7, #12]
 81046e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81046e8:	68fb      	ldr	r3, [r7, #12]
 81046ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81046ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81046f0:	f7fc ff7c 	bl	81015ec <HAL_GetTick>
 81046f4:	4602      	mov	r2, r0
 81046f6:	69fb      	ldr	r3, [r7, #28]
 81046f8:	1ad3      	subs	r3, r2, r3
 81046fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81046fc:	429a      	cmp	r2, r3
 81046fe:	d803      	bhi.n	8104708 <HAL_SPI_TransmitReceive+0x53c>
 8104700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104706:	d102      	bne.n	810470e <HAL_SPI_TransmitReceive+0x542>
 8104708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810470a:	2b00      	cmp	r3, #0
 810470c:	d114      	bne.n	8104738 <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810470e:	68f8      	ldr	r0, [r7, #12]
 8104710:	f000 f845 	bl	810479e <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104714:	68fb      	ldr	r3, [r7, #12]
 8104716:	2200      	movs	r2, #0
 8104718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810471c:	68fb      	ldr	r3, [r7, #12]
 810471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104722:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104726:	68fb      	ldr	r3, [r7, #12]
 8104728:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810472c:	68fb      	ldr	r3, [r7, #12]
 810472e:	2201      	movs	r2, #1
 8104730:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104734:	2303      	movs	r3, #3
 8104736:	e02e      	b.n	8104796 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104738:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810473a:	2b00      	cmp	r3, #0
 810473c:	f47f af10 	bne.w	8104560 <HAL_SPI_TransmitReceive+0x394>
 8104740:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104742:	2b00      	cmp	r3, #0
 8104744:	f47f af0c 	bne.w	8104560 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8104748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810474a:	9300      	str	r3, [sp, #0]
 810474c:	69fb      	ldr	r3, [r7, #28]
 810474e:	2200      	movs	r2, #0
 8104750:	2108      	movs	r1, #8
 8104752:	68f8      	ldr	r0, [r7, #12]
 8104754:	f000 f8c3 	bl	81048de <SPI_WaitOnFlagUntilTimeout>
 8104758:	4603      	mov	r3, r0
 810475a:	2b00      	cmp	r3, #0
 810475c:	d007      	beq.n	810476e <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810475e:	68fb      	ldr	r3, [r7, #12]
 8104760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104764:	f043 0220 	orr.w	r2, r3, #32
 8104768:	68fb      	ldr	r3, [r7, #12]
 810476a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810476e:	68f8      	ldr	r0, [r7, #12]
 8104770:	f000 f815 	bl	810479e <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104774:	68fb      	ldr	r3, [r7, #12]
 8104776:	2200      	movs	r2, #0
 8104778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810477c:	68fb      	ldr	r3, [r7, #12]
 810477e:	2201      	movs	r2, #1
 8104780:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104784:	68fb      	ldr	r3, [r7, #12]
 8104786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810478a:	2b00      	cmp	r3, #0
 810478c:	d001      	beq.n	8104792 <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 810478e:	2301      	movs	r3, #1
 8104790:	e001      	b.n	8104796 <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 8104792:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8104796:	4618      	mov	r0, r3
 8104798:	3730      	adds	r7, #48	; 0x30
 810479a:	46bd      	mov	sp, r7
 810479c:	bd80      	pop	{r7, pc}

0810479e <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810479e:	b480      	push	{r7}
 81047a0:	b085      	sub	sp, #20
 81047a2:	af00      	add	r7, sp, #0
 81047a4:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81047a6:	687b      	ldr	r3, [r7, #4]
 81047a8:	681b      	ldr	r3, [r3, #0]
 81047aa:	695b      	ldr	r3, [r3, #20]
 81047ac:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	681b      	ldr	r3, [r3, #0]
 81047b2:	699a      	ldr	r2, [r3, #24]
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	681b      	ldr	r3, [r3, #0]
 81047b8:	f042 0208 	orr.w	r2, r2, #8
 81047bc:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	699a      	ldr	r2, [r3, #24]
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	f042 0210 	orr.w	r2, r2, #16
 81047cc:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	681b      	ldr	r3, [r3, #0]
 81047d2:	681a      	ldr	r2, [r3, #0]
 81047d4:	687b      	ldr	r3, [r7, #4]
 81047d6:	681b      	ldr	r3, [r3, #0]
 81047d8:	f022 0201 	bic.w	r2, r2, #1
 81047dc:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 81047de:	687b      	ldr	r3, [r7, #4]
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	691b      	ldr	r3, [r3, #16]
 81047e4:	687a      	ldr	r2, [r7, #4]
 81047e6:	6812      	ldr	r2, [r2, #0]
 81047e8:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 81047ec:	f023 0303 	bic.w	r3, r3, #3
 81047f0:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81047f2:	687b      	ldr	r3, [r7, #4]
 81047f4:	681b      	ldr	r3, [r3, #0]
 81047f6:	689a      	ldr	r2, [r3, #8]
 81047f8:	687b      	ldr	r3, [r7, #4]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8104800:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8104802:	687b      	ldr	r3, [r7, #4]
 8104804:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104808:	b2db      	uxtb	r3, r3
 810480a:	2b04      	cmp	r3, #4
 810480c:	d014      	beq.n	8104838 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810480e:	68fb      	ldr	r3, [r7, #12]
 8104810:	f003 0320 	and.w	r3, r3, #32
 8104814:	2b00      	cmp	r3, #0
 8104816:	d00f      	beq.n	8104838 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810481e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104828:	687b      	ldr	r3, [r7, #4]
 810482a:	681b      	ldr	r3, [r3, #0]
 810482c:	699a      	ldr	r2, [r3, #24]
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	681b      	ldr	r3, [r3, #0]
 8104832:	f042 0220 	orr.w	r2, r2, #32
 8104836:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8104838:	687b      	ldr	r3, [r7, #4]
 810483a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810483e:	b2db      	uxtb	r3, r3
 8104840:	2b03      	cmp	r3, #3
 8104842:	d014      	beq.n	810486e <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8104844:	68fb      	ldr	r3, [r7, #12]
 8104846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810484a:	2b00      	cmp	r3, #0
 810484c:	d00f      	beq.n	810486e <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104854:	f043 0204 	orr.w	r2, r3, #4
 8104858:	687b      	ldr	r3, [r7, #4]
 810485a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 810485e:	687b      	ldr	r3, [r7, #4]
 8104860:	681b      	ldr	r3, [r3, #0]
 8104862:	699a      	ldr	r2, [r3, #24]
 8104864:	687b      	ldr	r3, [r7, #4]
 8104866:	681b      	ldr	r3, [r3, #0]
 8104868:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810486c:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 810486e:	68fb      	ldr	r3, [r7, #12]
 8104870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104874:	2b00      	cmp	r3, #0
 8104876:	d00f      	beq.n	8104898 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8104878:	687b      	ldr	r3, [r7, #4]
 810487a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810487e:	f043 0201 	orr.w	r2, r3, #1
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8104888:	687b      	ldr	r3, [r7, #4]
 810488a:	681b      	ldr	r3, [r3, #0]
 810488c:	699a      	ldr	r2, [r3, #24]
 810488e:	687b      	ldr	r3, [r7, #4]
 8104890:	681b      	ldr	r3, [r3, #0]
 8104892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104896:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8104898:	68fb      	ldr	r3, [r7, #12]
 810489a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810489e:	2b00      	cmp	r3, #0
 81048a0:	d00f      	beq.n	81048c2 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81048a8:	f043 0208 	orr.w	r2, r3, #8
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81048b2:	687b      	ldr	r3, [r7, #4]
 81048b4:	681b      	ldr	r3, [r3, #0]
 81048b6:	699a      	ldr	r2, [r3, #24]
 81048b8:	687b      	ldr	r3, [r7, #4]
 81048ba:	681b      	ldr	r3, [r3, #0]
 81048bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 81048c0:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 81048c2:	687b      	ldr	r3, [r7, #4]
 81048c4:	2200      	movs	r2, #0
 81048c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 81048ca:	687b      	ldr	r3, [r7, #4]
 81048cc:	2200      	movs	r2, #0
 81048ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 81048d2:	bf00      	nop
 81048d4:	3714      	adds	r7, #20
 81048d6:	46bd      	mov	sp, r7
 81048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81048dc:	4770      	bx	lr

081048de <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 81048de:	b580      	push	{r7, lr}
 81048e0:	b084      	sub	sp, #16
 81048e2:	af00      	add	r7, sp, #0
 81048e4:	60f8      	str	r0, [r7, #12]
 81048e6:	60b9      	str	r1, [r7, #8]
 81048e8:	603b      	str	r3, [r7, #0]
 81048ea:	4613      	mov	r3, r2
 81048ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81048ee:	e010      	b.n	8104912 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81048f0:	f7fc fe7c 	bl	81015ec <HAL_GetTick>
 81048f4:	4602      	mov	r2, r0
 81048f6:	683b      	ldr	r3, [r7, #0]
 81048f8:	1ad3      	subs	r3, r2, r3
 81048fa:	69ba      	ldr	r2, [r7, #24]
 81048fc:	429a      	cmp	r2, r3
 81048fe:	d803      	bhi.n	8104908 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8104900:	69bb      	ldr	r3, [r7, #24]
 8104902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104906:	d102      	bne.n	810490e <SPI_WaitOnFlagUntilTimeout+0x30>
 8104908:	69bb      	ldr	r3, [r7, #24]
 810490a:	2b00      	cmp	r3, #0
 810490c:	d101      	bne.n	8104912 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810490e:	2303      	movs	r3, #3
 8104910:	e00f      	b.n	8104932 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8104912:	68fb      	ldr	r3, [r7, #12]
 8104914:	681b      	ldr	r3, [r3, #0]
 8104916:	695a      	ldr	r2, [r3, #20]
 8104918:	68bb      	ldr	r3, [r7, #8]
 810491a:	4013      	ands	r3, r2
 810491c:	68ba      	ldr	r2, [r7, #8]
 810491e:	429a      	cmp	r2, r3
 8104920:	bf0c      	ite	eq
 8104922:	2301      	moveq	r3, #1
 8104924:	2300      	movne	r3, #0
 8104926:	b2db      	uxtb	r3, r3
 8104928:	461a      	mov	r2, r3
 810492a:	79fb      	ldrb	r3, [r7, #7]
 810492c:	429a      	cmp	r2, r3
 810492e:	d0df      	beq.n	81048f0 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8104930:	2300      	movs	r3, #0
}
 8104932:	4618      	mov	r0, r3
 8104934:	3710      	adds	r7, #16
 8104936:	46bd      	mov	sp, r7
 8104938:	bd80      	pop	{r7, pc}

0810493a <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 810493a:	b480      	push	{r7}
 810493c:	b085      	sub	sp, #20
 810493e:	af00      	add	r7, sp, #0
 8104940:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8104942:	687b      	ldr	r3, [r7, #4]
 8104944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104946:	095b      	lsrs	r3, r3, #5
 8104948:	3301      	adds	r3, #1
 810494a:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810494c:	687b      	ldr	r3, [r7, #4]
 810494e:	68db      	ldr	r3, [r3, #12]
 8104950:	3301      	adds	r3, #1
 8104952:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8104954:	68bb      	ldr	r3, [r7, #8]
 8104956:	3307      	adds	r3, #7
 8104958:	08db      	lsrs	r3, r3, #3
 810495a:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810495c:	68bb      	ldr	r3, [r7, #8]
 810495e:	68fa      	ldr	r2, [r7, #12]
 8104960:	fb02 f303 	mul.w	r3, r2, r3
}
 8104964:	4618      	mov	r0, r3
 8104966:	3714      	adds	r7, #20
 8104968:	46bd      	mov	sp, r7
 810496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810496e:	4770      	bx	lr

08104970 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8104970:	b580      	push	{r7, lr}
 8104972:	b082      	sub	sp, #8
 8104974:	af00      	add	r7, sp, #0
 8104976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8104978:	687b      	ldr	r3, [r7, #4]
 810497a:	2b00      	cmp	r3, #0
 810497c:	d101      	bne.n	8104982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810497e:	2301      	movs	r3, #1
 8104980:	e042      	b.n	8104a08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104988:	2b00      	cmp	r3, #0
 810498a:	d106      	bne.n	810499a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810498c:	687b      	ldr	r3, [r7, #4]
 810498e:	2200      	movs	r2, #0
 8104990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8104994:	6878      	ldr	r0, [r7, #4]
 8104996:	f7fc fc17 	bl	81011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810499a:	687b      	ldr	r3, [r7, #4]
 810499c:	2224      	movs	r2, #36	; 0x24
 810499e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81049a2:	687b      	ldr	r3, [r7, #4]
 81049a4:	681b      	ldr	r3, [r3, #0]
 81049a6:	681a      	ldr	r2, [r3, #0]
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	681b      	ldr	r3, [r3, #0]
 81049ac:	f022 0201 	bic.w	r2, r2, #1
 81049b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81049b2:	6878      	ldr	r0, [r7, #4]
 81049b4:	f000 f8c2 	bl	8104b3c <UART_SetConfig>
 81049b8:	4603      	mov	r3, r0
 81049ba:	2b01      	cmp	r3, #1
 81049bc:	d101      	bne.n	81049c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81049be:	2301      	movs	r3, #1
 81049c0:	e022      	b.n	8104a08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81049c2:	687b      	ldr	r3, [r7, #4]
 81049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81049c6:	2b00      	cmp	r3, #0
 81049c8:	d002      	beq.n	81049d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81049ca:	6878      	ldr	r0, [r7, #4]
 81049cc:	f000 fe16 	bl	81055fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81049d0:	687b      	ldr	r3, [r7, #4]
 81049d2:	681b      	ldr	r3, [r3, #0]
 81049d4:	685a      	ldr	r2, [r3, #4]
 81049d6:	687b      	ldr	r3, [r7, #4]
 81049d8:	681b      	ldr	r3, [r3, #0]
 81049da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81049de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81049e0:	687b      	ldr	r3, [r7, #4]
 81049e2:	681b      	ldr	r3, [r3, #0]
 81049e4:	689a      	ldr	r2, [r3, #8]
 81049e6:	687b      	ldr	r3, [r7, #4]
 81049e8:	681b      	ldr	r3, [r3, #0]
 81049ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81049ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81049f0:	687b      	ldr	r3, [r7, #4]
 81049f2:	681b      	ldr	r3, [r3, #0]
 81049f4:	681a      	ldr	r2, [r3, #0]
 81049f6:	687b      	ldr	r3, [r7, #4]
 81049f8:	681b      	ldr	r3, [r3, #0]
 81049fa:	f042 0201 	orr.w	r2, r2, #1
 81049fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8104a00:	6878      	ldr	r0, [r7, #4]
 8104a02:	f000 fe9d 	bl	8105740 <UART_CheckIdleState>
 8104a06:	4603      	mov	r3, r0
}
 8104a08:	4618      	mov	r0, r3
 8104a0a:	3708      	adds	r7, #8
 8104a0c:	46bd      	mov	sp, r7
 8104a0e:	bd80      	pop	{r7, pc}

08104a10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104a10:	b580      	push	{r7, lr}
 8104a12:	b08a      	sub	sp, #40	; 0x28
 8104a14:	af02      	add	r7, sp, #8
 8104a16:	60f8      	str	r0, [r7, #12]
 8104a18:	60b9      	str	r1, [r7, #8]
 8104a1a:	603b      	str	r3, [r7, #0]
 8104a1c:	4613      	mov	r3, r2
 8104a1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104a20:	68fb      	ldr	r3, [r7, #12]
 8104a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104a26:	2b20      	cmp	r3, #32
 8104a28:	f040 8083 	bne.w	8104b32 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8104a2c:	68bb      	ldr	r3, [r7, #8]
 8104a2e:	2b00      	cmp	r3, #0
 8104a30:	d002      	beq.n	8104a38 <HAL_UART_Transmit+0x28>
 8104a32:	88fb      	ldrh	r3, [r7, #6]
 8104a34:	2b00      	cmp	r3, #0
 8104a36:	d101      	bne.n	8104a3c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8104a38:	2301      	movs	r3, #1
 8104a3a:	e07b      	b.n	8104b34 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8104a3c:	68fb      	ldr	r3, [r7, #12]
 8104a3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104a42:	2b01      	cmp	r3, #1
 8104a44:	d101      	bne.n	8104a4a <HAL_UART_Transmit+0x3a>
 8104a46:	2302      	movs	r3, #2
 8104a48:	e074      	b.n	8104b34 <HAL_UART_Transmit+0x124>
 8104a4a:	68fb      	ldr	r3, [r7, #12]
 8104a4c:	2201      	movs	r2, #1
 8104a4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104a52:	68fb      	ldr	r3, [r7, #12]
 8104a54:	2200      	movs	r2, #0
 8104a56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8104a5a:	68fb      	ldr	r3, [r7, #12]
 8104a5c:	2221      	movs	r2, #33	; 0x21
 8104a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104a62:	f7fc fdc3 	bl	81015ec <HAL_GetTick>
 8104a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104a68:	68fb      	ldr	r3, [r7, #12]
 8104a6a:	88fa      	ldrh	r2, [r7, #6]
 8104a6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8104a70:	68fb      	ldr	r3, [r7, #12]
 8104a72:	88fa      	ldrh	r2, [r7, #6]
 8104a74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104a78:	68fb      	ldr	r3, [r7, #12]
 8104a7a:	689b      	ldr	r3, [r3, #8]
 8104a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104a80:	d108      	bne.n	8104a94 <HAL_UART_Transmit+0x84>
 8104a82:	68fb      	ldr	r3, [r7, #12]
 8104a84:	691b      	ldr	r3, [r3, #16]
 8104a86:	2b00      	cmp	r3, #0
 8104a88:	d104      	bne.n	8104a94 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8104a8a:	2300      	movs	r3, #0
 8104a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8104a8e:	68bb      	ldr	r3, [r7, #8]
 8104a90:	61bb      	str	r3, [r7, #24]
 8104a92:	e003      	b.n	8104a9c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8104a94:	68bb      	ldr	r3, [r7, #8]
 8104a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104a98:	2300      	movs	r3, #0
 8104a9a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8104a9c:	68fb      	ldr	r3, [r7, #12]
 8104a9e:	2200      	movs	r2, #0
 8104aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8104aa4:	e02c      	b.n	8104b00 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8104aa6:	683b      	ldr	r3, [r7, #0]
 8104aa8:	9300      	str	r3, [sp, #0]
 8104aaa:	697b      	ldr	r3, [r7, #20]
 8104aac:	2200      	movs	r2, #0
 8104aae:	2180      	movs	r1, #128	; 0x80
 8104ab0:	68f8      	ldr	r0, [r7, #12]
 8104ab2:	f000 fe90 	bl	81057d6 <UART_WaitOnFlagUntilTimeout>
 8104ab6:	4603      	mov	r3, r0
 8104ab8:	2b00      	cmp	r3, #0
 8104aba:	d001      	beq.n	8104ac0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8104abc:	2303      	movs	r3, #3
 8104abe:	e039      	b.n	8104b34 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8104ac0:	69fb      	ldr	r3, [r7, #28]
 8104ac2:	2b00      	cmp	r3, #0
 8104ac4:	d10b      	bne.n	8104ade <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104ac6:	69bb      	ldr	r3, [r7, #24]
 8104ac8:	881b      	ldrh	r3, [r3, #0]
 8104aca:	461a      	mov	r2, r3
 8104acc:	68fb      	ldr	r3, [r7, #12]
 8104ace:	681b      	ldr	r3, [r3, #0]
 8104ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104ad4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8104ad6:	69bb      	ldr	r3, [r7, #24]
 8104ad8:	3302      	adds	r3, #2
 8104ada:	61bb      	str	r3, [r7, #24]
 8104adc:	e007      	b.n	8104aee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104ade:	69fb      	ldr	r3, [r7, #28]
 8104ae0:	781a      	ldrb	r2, [r3, #0]
 8104ae2:	68fb      	ldr	r3, [r7, #12]
 8104ae4:	681b      	ldr	r3, [r3, #0]
 8104ae6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8104ae8:	69fb      	ldr	r3, [r7, #28]
 8104aea:	3301      	adds	r3, #1
 8104aec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104aee:	68fb      	ldr	r3, [r7, #12]
 8104af0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104af4:	b29b      	uxth	r3, r3
 8104af6:	3b01      	subs	r3, #1
 8104af8:	b29a      	uxth	r2, r3
 8104afa:	68fb      	ldr	r3, [r7, #12]
 8104afc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8104b00:	68fb      	ldr	r3, [r7, #12]
 8104b02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104b06:	b29b      	uxth	r3, r3
 8104b08:	2b00      	cmp	r3, #0
 8104b0a:	d1cc      	bne.n	8104aa6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104b0c:	683b      	ldr	r3, [r7, #0]
 8104b0e:	9300      	str	r3, [sp, #0]
 8104b10:	697b      	ldr	r3, [r7, #20]
 8104b12:	2200      	movs	r2, #0
 8104b14:	2140      	movs	r1, #64	; 0x40
 8104b16:	68f8      	ldr	r0, [r7, #12]
 8104b18:	f000 fe5d 	bl	81057d6 <UART_WaitOnFlagUntilTimeout>
 8104b1c:	4603      	mov	r3, r0
 8104b1e:	2b00      	cmp	r3, #0
 8104b20:	d001      	beq.n	8104b26 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8104b22:	2303      	movs	r3, #3
 8104b24:	e006      	b.n	8104b34 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104b26:	68fb      	ldr	r3, [r7, #12]
 8104b28:	2220      	movs	r2, #32
 8104b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8104b2e:	2300      	movs	r3, #0
 8104b30:	e000      	b.n	8104b34 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8104b32:	2302      	movs	r3, #2
  }
}
 8104b34:	4618      	mov	r0, r3
 8104b36:	3720      	adds	r7, #32
 8104b38:	46bd      	mov	sp, r7
 8104b3a:	bd80      	pop	{r7, pc}

08104b3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104b3c:	b5b0      	push	{r4, r5, r7, lr}
 8104b3e:	b08e      	sub	sp, #56	; 0x38
 8104b40:	af00      	add	r7, sp, #0
 8104b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104b44:	2300      	movs	r3, #0
 8104b46:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104b4a:	687b      	ldr	r3, [r7, #4]
 8104b4c:	689a      	ldr	r2, [r3, #8]
 8104b4e:	687b      	ldr	r3, [r7, #4]
 8104b50:	691b      	ldr	r3, [r3, #16]
 8104b52:	431a      	orrs	r2, r3
 8104b54:	687b      	ldr	r3, [r7, #4]
 8104b56:	695b      	ldr	r3, [r3, #20]
 8104b58:	431a      	orrs	r2, r3
 8104b5a:	687b      	ldr	r3, [r7, #4]
 8104b5c:	69db      	ldr	r3, [r3, #28]
 8104b5e:	4313      	orrs	r3, r2
 8104b60:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8104b62:	687b      	ldr	r3, [r7, #4]
 8104b64:	681b      	ldr	r3, [r3, #0]
 8104b66:	681a      	ldr	r2, [r3, #0]
 8104b68:	4bc0      	ldr	r3, [pc, #768]	; (8104e6c <UART_SetConfig+0x330>)
 8104b6a:	4013      	ands	r3, r2
 8104b6c:	687a      	ldr	r2, [r7, #4]
 8104b6e:	6812      	ldr	r2, [r2, #0]
 8104b70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104b72:	430b      	orrs	r3, r1
 8104b74:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8104b76:	687b      	ldr	r3, [r7, #4]
 8104b78:	681b      	ldr	r3, [r3, #0]
 8104b7a:	685b      	ldr	r3, [r3, #4]
 8104b7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	68da      	ldr	r2, [r3, #12]
 8104b84:	687b      	ldr	r3, [r7, #4]
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	430a      	orrs	r2, r1
 8104b8a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8104b8c:	687b      	ldr	r3, [r7, #4]
 8104b8e:	699b      	ldr	r3, [r3, #24]
 8104b90:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8104b92:	687b      	ldr	r3, [r7, #4]
 8104b94:	681b      	ldr	r3, [r3, #0]
 8104b96:	4ab6      	ldr	r2, [pc, #728]	; (8104e70 <UART_SetConfig+0x334>)
 8104b98:	4293      	cmp	r3, r2
 8104b9a:	d004      	beq.n	8104ba6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104b9c:	687b      	ldr	r3, [r7, #4]
 8104b9e:	6a1b      	ldr	r3, [r3, #32]
 8104ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104ba2:	4313      	orrs	r3, r2
 8104ba4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	681b      	ldr	r3, [r3, #0]
 8104baa:	689b      	ldr	r3, [r3, #8]
 8104bac:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104bb0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104bb4:	687a      	ldr	r2, [r7, #4]
 8104bb6:	6812      	ldr	r2, [r2, #0]
 8104bb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104bba:	430b      	orrs	r3, r1
 8104bbc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104bbe:	687b      	ldr	r3, [r7, #4]
 8104bc0:	681b      	ldr	r3, [r3, #0]
 8104bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104bc4:	f023 010f 	bic.w	r1, r3, #15
 8104bc8:	687b      	ldr	r3, [r7, #4]
 8104bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	430a      	orrs	r2, r1
 8104bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104bd4:	687b      	ldr	r3, [r7, #4]
 8104bd6:	681b      	ldr	r3, [r3, #0]
 8104bd8:	4aa6      	ldr	r2, [pc, #664]	; (8104e74 <UART_SetConfig+0x338>)
 8104bda:	4293      	cmp	r3, r2
 8104bdc:	d176      	bne.n	8104ccc <UART_SetConfig+0x190>
 8104bde:	4ba6      	ldr	r3, [pc, #664]	; (8104e78 <UART_SetConfig+0x33c>)
 8104be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104be2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104be6:	2b28      	cmp	r3, #40	; 0x28
 8104be8:	d86c      	bhi.n	8104cc4 <UART_SetConfig+0x188>
 8104bea:	a201      	add	r2, pc, #4	; (adr r2, 8104bf0 <UART_SetConfig+0xb4>)
 8104bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104bf0:	08104c95 	.word	0x08104c95
 8104bf4:	08104cc5 	.word	0x08104cc5
 8104bf8:	08104cc5 	.word	0x08104cc5
 8104bfc:	08104cc5 	.word	0x08104cc5
 8104c00:	08104cc5 	.word	0x08104cc5
 8104c04:	08104cc5 	.word	0x08104cc5
 8104c08:	08104cc5 	.word	0x08104cc5
 8104c0c:	08104cc5 	.word	0x08104cc5
 8104c10:	08104c9d 	.word	0x08104c9d
 8104c14:	08104cc5 	.word	0x08104cc5
 8104c18:	08104cc5 	.word	0x08104cc5
 8104c1c:	08104cc5 	.word	0x08104cc5
 8104c20:	08104cc5 	.word	0x08104cc5
 8104c24:	08104cc5 	.word	0x08104cc5
 8104c28:	08104cc5 	.word	0x08104cc5
 8104c2c:	08104cc5 	.word	0x08104cc5
 8104c30:	08104ca5 	.word	0x08104ca5
 8104c34:	08104cc5 	.word	0x08104cc5
 8104c38:	08104cc5 	.word	0x08104cc5
 8104c3c:	08104cc5 	.word	0x08104cc5
 8104c40:	08104cc5 	.word	0x08104cc5
 8104c44:	08104cc5 	.word	0x08104cc5
 8104c48:	08104cc5 	.word	0x08104cc5
 8104c4c:	08104cc5 	.word	0x08104cc5
 8104c50:	08104cad 	.word	0x08104cad
 8104c54:	08104cc5 	.word	0x08104cc5
 8104c58:	08104cc5 	.word	0x08104cc5
 8104c5c:	08104cc5 	.word	0x08104cc5
 8104c60:	08104cc5 	.word	0x08104cc5
 8104c64:	08104cc5 	.word	0x08104cc5
 8104c68:	08104cc5 	.word	0x08104cc5
 8104c6c:	08104cc5 	.word	0x08104cc5
 8104c70:	08104cb5 	.word	0x08104cb5
 8104c74:	08104cc5 	.word	0x08104cc5
 8104c78:	08104cc5 	.word	0x08104cc5
 8104c7c:	08104cc5 	.word	0x08104cc5
 8104c80:	08104cc5 	.word	0x08104cc5
 8104c84:	08104cc5 	.word	0x08104cc5
 8104c88:	08104cc5 	.word	0x08104cc5
 8104c8c:	08104cc5 	.word	0x08104cc5
 8104c90:	08104cbd 	.word	0x08104cbd
 8104c94:	2301      	movs	r3, #1
 8104c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c9a:	e220      	b.n	81050de <UART_SetConfig+0x5a2>
 8104c9c:	2304      	movs	r3, #4
 8104c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ca2:	e21c      	b.n	81050de <UART_SetConfig+0x5a2>
 8104ca4:	2308      	movs	r3, #8
 8104ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104caa:	e218      	b.n	81050de <UART_SetConfig+0x5a2>
 8104cac:	2310      	movs	r3, #16
 8104cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104cb2:	e214      	b.n	81050de <UART_SetConfig+0x5a2>
 8104cb4:	2320      	movs	r3, #32
 8104cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104cba:	e210      	b.n	81050de <UART_SetConfig+0x5a2>
 8104cbc:	2340      	movs	r3, #64	; 0x40
 8104cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104cc2:	e20c      	b.n	81050de <UART_SetConfig+0x5a2>
 8104cc4:	2380      	movs	r3, #128	; 0x80
 8104cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104cca:	e208      	b.n	81050de <UART_SetConfig+0x5a2>
 8104ccc:	687b      	ldr	r3, [r7, #4]
 8104cce:	681b      	ldr	r3, [r3, #0]
 8104cd0:	4a6a      	ldr	r2, [pc, #424]	; (8104e7c <UART_SetConfig+0x340>)
 8104cd2:	4293      	cmp	r3, r2
 8104cd4:	d130      	bne.n	8104d38 <UART_SetConfig+0x1fc>
 8104cd6:	4b68      	ldr	r3, [pc, #416]	; (8104e78 <UART_SetConfig+0x33c>)
 8104cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104cda:	f003 0307 	and.w	r3, r3, #7
 8104cde:	2b05      	cmp	r3, #5
 8104ce0:	d826      	bhi.n	8104d30 <UART_SetConfig+0x1f4>
 8104ce2:	a201      	add	r2, pc, #4	; (adr r2, 8104ce8 <UART_SetConfig+0x1ac>)
 8104ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104ce8:	08104d01 	.word	0x08104d01
 8104cec:	08104d09 	.word	0x08104d09
 8104cf0:	08104d11 	.word	0x08104d11
 8104cf4:	08104d19 	.word	0x08104d19
 8104cf8:	08104d21 	.word	0x08104d21
 8104cfc:	08104d29 	.word	0x08104d29
 8104d00:	2300      	movs	r3, #0
 8104d02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d06:	e1ea      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d08:	2304      	movs	r3, #4
 8104d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d0e:	e1e6      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d10:	2308      	movs	r3, #8
 8104d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d16:	e1e2      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d18:	2310      	movs	r3, #16
 8104d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d1e:	e1de      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d20:	2320      	movs	r3, #32
 8104d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d26:	e1da      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d28:	2340      	movs	r3, #64	; 0x40
 8104d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d2e:	e1d6      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d30:	2380      	movs	r3, #128	; 0x80
 8104d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d36:	e1d2      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	681b      	ldr	r3, [r3, #0]
 8104d3c:	4a50      	ldr	r2, [pc, #320]	; (8104e80 <UART_SetConfig+0x344>)
 8104d3e:	4293      	cmp	r3, r2
 8104d40:	d130      	bne.n	8104da4 <UART_SetConfig+0x268>
 8104d42:	4b4d      	ldr	r3, [pc, #308]	; (8104e78 <UART_SetConfig+0x33c>)
 8104d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104d46:	f003 0307 	and.w	r3, r3, #7
 8104d4a:	2b05      	cmp	r3, #5
 8104d4c:	d826      	bhi.n	8104d9c <UART_SetConfig+0x260>
 8104d4e:	a201      	add	r2, pc, #4	; (adr r2, 8104d54 <UART_SetConfig+0x218>)
 8104d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d54:	08104d6d 	.word	0x08104d6d
 8104d58:	08104d75 	.word	0x08104d75
 8104d5c:	08104d7d 	.word	0x08104d7d
 8104d60:	08104d85 	.word	0x08104d85
 8104d64:	08104d8d 	.word	0x08104d8d
 8104d68:	08104d95 	.word	0x08104d95
 8104d6c:	2300      	movs	r3, #0
 8104d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d72:	e1b4      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d74:	2304      	movs	r3, #4
 8104d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d7a:	e1b0      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d7c:	2308      	movs	r3, #8
 8104d7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d82:	e1ac      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d84:	2310      	movs	r3, #16
 8104d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d8a:	e1a8      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d8c:	2320      	movs	r3, #32
 8104d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d92:	e1a4      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d94:	2340      	movs	r3, #64	; 0x40
 8104d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104d9a:	e1a0      	b.n	81050de <UART_SetConfig+0x5a2>
 8104d9c:	2380      	movs	r3, #128	; 0x80
 8104d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104da2:	e19c      	b.n	81050de <UART_SetConfig+0x5a2>
 8104da4:	687b      	ldr	r3, [r7, #4]
 8104da6:	681b      	ldr	r3, [r3, #0]
 8104da8:	4a36      	ldr	r2, [pc, #216]	; (8104e84 <UART_SetConfig+0x348>)
 8104daa:	4293      	cmp	r3, r2
 8104dac:	d130      	bne.n	8104e10 <UART_SetConfig+0x2d4>
 8104dae:	4b32      	ldr	r3, [pc, #200]	; (8104e78 <UART_SetConfig+0x33c>)
 8104db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104db2:	f003 0307 	and.w	r3, r3, #7
 8104db6:	2b05      	cmp	r3, #5
 8104db8:	d826      	bhi.n	8104e08 <UART_SetConfig+0x2cc>
 8104dba:	a201      	add	r2, pc, #4	; (adr r2, 8104dc0 <UART_SetConfig+0x284>)
 8104dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dc0:	08104dd9 	.word	0x08104dd9
 8104dc4:	08104de1 	.word	0x08104de1
 8104dc8:	08104de9 	.word	0x08104de9
 8104dcc:	08104df1 	.word	0x08104df1
 8104dd0:	08104df9 	.word	0x08104df9
 8104dd4:	08104e01 	.word	0x08104e01
 8104dd8:	2300      	movs	r3, #0
 8104dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dde:	e17e      	b.n	81050de <UART_SetConfig+0x5a2>
 8104de0:	2304      	movs	r3, #4
 8104de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104de6:	e17a      	b.n	81050de <UART_SetConfig+0x5a2>
 8104de8:	2308      	movs	r3, #8
 8104dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dee:	e176      	b.n	81050de <UART_SetConfig+0x5a2>
 8104df0:	2310      	movs	r3, #16
 8104df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104df6:	e172      	b.n	81050de <UART_SetConfig+0x5a2>
 8104df8:	2320      	movs	r3, #32
 8104dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104dfe:	e16e      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e00:	2340      	movs	r3, #64	; 0x40
 8104e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e06:	e16a      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e08:	2380      	movs	r3, #128	; 0x80
 8104e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e0e:	e166      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e10:	687b      	ldr	r3, [r7, #4]
 8104e12:	681b      	ldr	r3, [r3, #0]
 8104e14:	4a1c      	ldr	r2, [pc, #112]	; (8104e88 <UART_SetConfig+0x34c>)
 8104e16:	4293      	cmp	r3, r2
 8104e18:	d140      	bne.n	8104e9c <UART_SetConfig+0x360>
 8104e1a:	4b17      	ldr	r3, [pc, #92]	; (8104e78 <UART_SetConfig+0x33c>)
 8104e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104e1e:	f003 0307 	and.w	r3, r3, #7
 8104e22:	2b05      	cmp	r3, #5
 8104e24:	d836      	bhi.n	8104e94 <UART_SetConfig+0x358>
 8104e26:	a201      	add	r2, pc, #4	; (adr r2, 8104e2c <UART_SetConfig+0x2f0>)
 8104e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e2c:	08104e45 	.word	0x08104e45
 8104e30:	08104e4d 	.word	0x08104e4d
 8104e34:	08104e55 	.word	0x08104e55
 8104e38:	08104e5d 	.word	0x08104e5d
 8104e3c:	08104e65 	.word	0x08104e65
 8104e40:	08104e8d 	.word	0x08104e8d
 8104e44:	2300      	movs	r3, #0
 8104e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e4a:	e148      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e4c:	2304      	movs	r3, #4
 8104e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e52:	e144      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e54:	2308      	movs	r3, #8
 8104e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e5a:	e140      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e5c:	2310      	movs	r3, #16
 8104e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e62:	e13c      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e64:	2320      	movs	r3, #32
 8104e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e6a:	e138      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e6c:	cfff69f3 	.word	0xcfff69f3
 8104e70:	58000c00 	.word	0x58000c00
 8104e74:	40011000 	.word	0x40011000
 8104e78:	58024400 	.word	0x58024400
 8104e7c:	40004400 	.word	0x40004400
 8104e80:	40004800 	.word	0x40004800
 8104e84:	40004c00 	.word	0x40004c00
 8104e88:	40005000 	.word	0x40005000
 8104e8c:	2340      	movs	r3, #64	; 0x40
 8104e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e92:	e124      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e94:	2380      	movs	r3, #128	; 0x80
 8104e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104e9a:	e120      	b.n	81050de <UART_SetConfig+0x5a2>
 8104e9c:	687b      	ldr	r3, [r7, #4]
 8104e9e:	681b      	ldr	r3, [r3, #0]
 8104ea0:	4acc      	ldr	r2, [pc, #816]	; (81051d4 <UART_SetConfig+0x698>)
 8104ea2:	4293      	cmp	r3, r2
 8104ea4:	d176      	bne.n	8104f94 <UART_SetConfig+0x458>
 8104ea6:	4bcc      	ldr	r3, [pc, #816]	; (81051d8 <UART_SetConfig+0x69c>)
 8104ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104eaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104eae:	2b28      	cmp	r3, #40	; 0x28
 8104eb0:	d86c      	bhi.n	8104f8c <UART_SetConfig+0x450>
 8104eb2:	a201      	add	r2, pc, #4	; (adr r2, 8104eb8 <UART_SetConfig+0x37c>)
 8104eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104eb8:	08104f5d 	.word	0x08104f5d
 8104ebc:	08104f8d 	.word	0x08104f8d
 8104ec0:	08104f8d 	.word	0x08104f8d
 8104ec4:	08104f8d 	.word	0x08104f8d
 8104ec8:	08104f8d 	.word	0x08104f8d
 8104ecc:	08104f8d 	.word	0x08104f8d
 8104ed0:	08104f8d 	.word	0x08104f8d
 8104ed4:	08104f8d 	.word	0x08104f8d
 8104ed8:	08104f65 	.word	0x08104f65
 8104edc:	08104f8d 	.word	0x08104f8d
 8104ee0:	08104f8d 	.word	0x08104f8d
 8104ee4:	08104f8d 	.word	0x08104f8d
 8104ee8:	08104f8d 	.word	0x08104f8d
 8104eec:	08104f8d 	.word	0x08104f8d
 8104ef0:	08104f8d 	.word	0x08104f8d
 8104ef4:	08104f8d 	.word	0x08104f8d
 8104ef8:	08104f6d 	.word	0x08104f6d
 8104efc:	08104f8d 	.word	0x08104f8d
 8104f00:	08104f8d 	.word	0x08104f8d
 8104f04:	08104f8d 	.word	0x08104f8d
 8104f08:	08104f8d 	.word	0x08104f8d
 8104f0c:	08104f8d 	.word	0x08104f8d
 8104f10:	08104f8d 	.word	0x08104f8d
 8104f14:	08104f8d 	.word	0x08104f8d
 8104f18:	08104f75 	.word	0x08104f75
 8104f1c:	08104f8d 	.word	0x08104f8d
 8104f20:	08104f8d 	.word	0x08104f8d
 8104f24:	08104f8d 	.word	0x08104f8d
 8104f28:	08104f8d 	.word	0x08104f8d
 8104f2c:	08104f8d 	.word	0x08104f8d
 8104f30:	08104f8d 	.word	0x08104f8d
 8104f34:	08104f8d 	.word	0x08104f8d
 8104f38:	08104f7d 	.word	0x08104f7d
 8104f3c:	08104f8d 	.word	0x08104f8d
 8104f40:	08104f8d 	.word	0x08104f8d
 8104f44:	08104f8d 	.word	0x08104f8d
 8104f48:	08104f8d 	.word	0x08104f8d
 8104f4c:	08104f8d 	.word	0x08104f8d
 8104f50:	08104f8d 	.word	0x08104f8d
 8104f54:	08104f8d 	.word	0x08104f8d
 8104f58:	08104f85 	.word	0x08104f85
 8104f5c:	2301      	movs	r3, #1
 8104f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f62:	e0bc      	b.n	81050de <UART_SetConfig+0x5a2>
 8104f64:	2304      	movs	r3, #4
 8104f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f6a:	e0b8      	b.n	81050de <UART_SetConfig+0x5a2>
 8104f6c:	2308      	movs	r3, #8
 8104f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f72:	e0b4      	b.n	81050de <UART_SetConfig+0x5a2>
 8104f74:	2310      	movs	r3, #16
 8104f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f7a:	e0b0      	b.n	81050de <UART_SetConfig+0x5a2>
 8104f7c:	2320      	movs	r3, #32
 8104f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f82:	e0ac      	b.n	81050de <UART_SetConfig+0x5a2>
 8104f84:	2340      	movs	r3, #64	; 0x40
 8104f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f8a:	e0a8      	b.n	81050de <UART_SetConfig+0x5a2>
 8104f8c:	2380      	movs	r3, #128	; 0x80
 8104f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104f92:	e0a4      	b.n	81050de <UART_SetConfig+0x5a2>
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	4a90      	ldr	r2, [pc, #576]	; (81051dc <UART_SetConfig+0x6a0>)
 8104f9a:	4293      	cmp	r3, r2
 8104f9c:	d130      	bne.n	8105000 <UART_SetConfig+0x4c4>
 8104f9e:	4b8e      	ldr	r3, [pc, #568]	; (81051d8 <UART_SetConfig+0x69c>)
 8104fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104fa2:	f003 0307 	and.w	r3, r3, #7
 8104fa6:	2b05      	cmp	r3, #5
 8104fa8:	d826      	bhi.n	8104ff8 <UART_SetConfig+0x4bc>
 8104faa:	a201      	add	r2, pc, #4	; (adr r2, 8104fb0 <UART_SetConfig+0x474>)
 8104fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104fb0:	08104fc9 	.word	0x08104fc9
 8104fb4:	08104fd1 	.word	0x08104fd1
 8104fb8:	08104fd9 	.word	0x08104fd9
 8104fbc:	08104fe1 	.word	0x08104fe1
 8104fc0:	08104fe9 	.word	0x08104fe9
 8104fc4:	08104ff1 	.word	0x08104ff1
 8104fc8:	2300      	movs	r3, #0
 8104fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fce:	e086      	b.n	81050de <UART_SetConfig+0x5a2>
 8104fd0:	2304      	movs	r3, #4
 8104fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fd6:	e082      	b.n	81050de <UART_SetConfig+0x5a2>
 8104fd8:	2308      	movs	r3, #8
 8104fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fde:	e07e      	b.n	81050de <UART_SetConfig+0x5a2>
 8104fe0:	2310      	movs	r3, #16
 8104fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fe6:	e07a      	b.n	81050de <UART_SetConfig+0x5a2>
 8104fe8:	2320      	movs	r3, #32
 8104fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104fee:	e076      	b.n	81050de <UART_SetConfig+0x5a2>
 8104ff0:	2340      	movs	r3, #64	; 0x40
 8104ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ff6:	e072      	b.n	81050de <UART_SetConfig+0x5a2>
 8104ff8:	2380      	movs	r3, #128	; 0x80
 8104ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ffe:	e06e      	b.n	81050de <UART_SetConfig+0x5a2>
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	681b      	ldr	r3, [r3, #0]
 8105004:	4a76      	ldr	r2, [pc, #472]	; (81051e0 <UART_SetConfig+0x6a4>)
 8105006:	4293      	cmp	r3, r2
 8105008:	d130      	bne.n	810506c <UART_SetConfig+0x530>
 810500a:	4b73      	ldr	r3, [pc, #460]	; (81051d8 <UART_SetConfig+0x69c>)
 810500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810500e:	f003 0307 	and.w	r3, r3, #7
 8105012:	2b05      	cmp	r3, #5
 8105014:	d826      	bhi.n	8105064 <UART_SetConfig+0x528>
 8105016:	a201      	add	r2, pc, #4	; (adr r2, 810501c <UART_SetConfig+0x4e0>)
 8105018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810501c:	08105035 	.word	0x08105035
 8105020:	0810503d 	.word	0x0810503d
 8105024:	08105045 	.word	0x08105045
 8105028:	0810504d 	.word	0x0810504d
 810502c:	08105055 	.word	0x08105055
 8105030:	0810505d 	.word	0x0810505d
 8105034:	2300      	movs	r3, #0
 8105036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810503a:	e050      	b.n	81050de <UART_SetConfig+0x5a2>
 810503c:	2304      	movs	r3, #4
 810503e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105042:	e04c      	b.n	81050de <UART_SetConfig+0x5a2>
 8105044:	2308      	movs	r3, #8
 8105046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810504a:	e048      	b.n	81050de <UART_SetConfig+0x5a2>
 810504c:	2310      	movs	r3, #16
 810504e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105052:	e044      	b.n	81050de <UART_SetConfig+0x5a2>
 8105054:	2320      	movs	r3, #32
 8105056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810505a:	e040      	b.n	81050de <UART_SetConfig+0x5a2>
 810505c:	2340      	movs	r3, #64	; 0x40
 810505e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8105062:	e03c      	b.n	81050de <UART_SetConfig+0x5a2>
 8105064:	2380      	movs	r3, #128	; 0x80
 8105066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810506a:	e038      	b.n	81050de <UART_SetConfig+0x5a2>
 810506c:	687b      	ldr	r3, [r7, #4]
 810506e:	681b      	ldr	r3, [r3, #0]
 8105070:	4a5c      	ldr	r2, [pc, #368]	; (81051e4 <UART_SetConfig+0x6a8>)
 8105072:	4293      	cmp	r3, r2
 8105074:	d130      	bne.n	81050d8 <UART_SetConfig+0x59c>
 8105076:	4b58      	ldr	r3, [pc, #352]	; (81051d8 <UART_SetConfig+0x69c>)
 8105078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810507a:	f003 0307 	and.w	r3, r3, #7
 810507e:	2b05      	cmp	r3, #5
 8105080:	d826      	bhi.n	81050d0 <UART_SetConfig+0x594>
 8105082:	a201      	add	r2, pc, #4	; (adr r2, 8105088 <UART_SetConfig+0x54c>)
 8105084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105088:	081050a1 	.word	0x081050a1
 810508c:	081050a9 	.word	0x081050a9
 8105090:	081050b1 	.word	0x081050b1
 8105094:	081050b9 	.word	0x081050b9
 8105098:	081050c1 	.word	0x081050c1
 810509c:	081050c9 	.word	0x081050c9
 81050a0:	2302      	movs	r3, #2
 81050a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050a6:	e01a      	b.n	81050de <UART_SetConfig+0x5a2>
 81050a8:	2304      	movs	r3, #4
 81050aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ae:	e016      	b.n	81050de <UART_SetConfig+0x5a2>
 81050b0:	2308      	movs	r3, #8
 81050b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050b6:	e012      	b.n	81050de <UART_SetConfig+0x5a2>
 81050b8:	2310      	movs	r3, #16
 81050ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050be:	e00e      	b.n	81050de <UART_SetConfig+0x5a2>
 81050c0:	2320      	movs	r3, #32
 81050c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050c6:	e00a      	b.n	81050de <UART_SetConfig+0x5a2>
 81050c8:	2340      	movs	r3, #64	; 0x40
 81050ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050ce:	e006      	b.n	81050de <UART_SetConfig+0x5a2>
 81050d0:	2380      	movs	r3, #128	; 0x80
 81050d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81050d6:	e002      	b.n	81050de <UART_SetConfig+0x5a2>
 81050d8:	2380      	movs	r3, #128	; 0x80
 81050da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81050de:	687b      	ldr	r3, [r7, #4]
 81050e0:	681b      	ldr	r3, [r3, #0]
 81050e2:	4a40      	ldr	r2, [pc, #256]	; (81051e4 <UART_SetConfig+0x6a8>)
 81050e4:	4293      	cmp	r3, r2
 81050e6:	f040 80ef 	bne.w	81052c8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81050ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81050ee:	2b20      	cmp	r3, #32
 81050f0:	dc46      	bgt.n	8105180 <UART_SetConfig+0x644>
 81050f2:	2b02      	cmp	r3, #2
 81050f4:	f2c0 8081 	blt.w	81051fa <UART_SetConfig+0x6be>
 81050f8:	3b02      	subs	r3, #2
 81050fa:	2b1e      	cmp	r3, #30
 81050fc:	d87d      	bhi.n	81051fa <UART_SetConfig+0x6be>
 81050fe:	a201      	add	r2, pc, #4	; (adr r2, 8105104 <UART_SetConfig+0x5c8>)
 8105100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105104:	08105187 	.word	0x08105187
 8105108:	081051fb 	.word	0x081051fb
 810510c:	0810518f 	.word	0x0810518f
 8105110:	081051fb 	.word	0x081051fb
 8105114:	081051fb 	.word	0x081051fb
 8105118:	081051fb 	.word	0x081051fb
 810511c:	0810519f 	.word	0x0810519f
 8105120:	081051fb 	.word	0x081051fb
 8105124:	081051fb 	.word	0x081051fb
 8105128:	081051fb 	.word	0x081051fb
 810512c:	081051fb 	.word	0x081051fb
 8105130:	081051fb 	.word	0x081051fb
 8105134:	081051fb 	.word	0x081051fb
 8105138:	081051fb 	.word	0x081051fb
 810513c:	081051af 	.word	0x081051af
 8105140:	081051fb 	.word	0x081051fb
 8105144:	081051fb 	.word	0x081051fb
 8105148:	081051fb 	.word	0x081051fb
 810514c:	081051fb 	.word	0x081051fb
 8105150:	081051fb 	.word	0x081051fb
 8105154:	081051fb 	.word	0x081051fb
 8105158:	081051fb 	.word	0x081051fb
 810515c:	081051fb 	.word	0x081051fb
 8105160:	081051fb 	.word	0x081051fb
 8105164:	081051fb 	.word	0x081051fb
 8105168:	081051fb 	.word	0x081051fb
 810516c:	081051fb 	.word	0x081051fb
 8105170:	081051fb 	.word	0x081051fb
 8105174:	081051fb 	.word	0x081051fb
 8105178:	081051fb 	.word	0x081051fb
 810517c:	081051ed 	.word	0x081051ed
 8105180:	2b40      	cmp	r3, #64	; 0x40
 8105182:	d036      	beq.n	81051f2 <UART_SetConfig+0x6b6>
 8105184:	e039      	b.n	81051fa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105186:	f7fd ff1b 	bl	8102fc0 <HAL_RCCEx_GetD3PCLK1Freq>
 810518a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810518c:	e03b      	b.n	8105206 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810518e:	f107 0314 	add.w	r3, r7, #20
 8105192:	4618      	mov	r0, r3
 8105194:	f7fd ff2a 	bl	8102fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105198:	69bb      	ldr	r3, [r7, #24]
 810519a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810519c:	e033      	b.n	8105206 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810519e:	f107 0308 	add.w	r3, r7, #8
 81051a2:	4618      	mov	r0, r3
 81051a4:	f7fe f876 	bl	8103294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81051a8:	68fb      	ldr	r3, [r7, #12]
 81051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81051ac:	e02b      	b.n	8105206 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81051ae:	4b0a      	ldr	r3, [pc, #40]	; (81051d8 <UART_SetConfig+0x69c>)
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	f003 0320 	and.w	r3, r3, #32
 81051b6:	2b00      	cmp	r3, #0
 81051b8:	d009      	beq.n	81051ce <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81051ba:	4b07      	ldr	r3, [pc, #28]	; (81051d8 <UART_SetConfig+0x69c>)
 81051bc:	681b      	ldr	r3, [r3, #0]
 81051be:	08db      	lsrs	r3, r3, #3
 81051c0:	f003 0303 	and.w	r3, r3, #3
 81051c4:	4a08      	ldr	r2, [pc, #32]	; (81051e8 <UART_SetConfig+0x6ac>)
 81051c6:	fa22 f303 	lsr.w	r3, r2, r3
 81051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81051cc:	e01b      	b.n	8105206 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 81051ce:	4b06      	ldr	r3, [pc, #24]	; (81051e8 <UART_SetConfig+0x6ac>)
 81051d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81051d2:	e018      	b.n	8105206 <UART_SetConfig+0x6ca>
 81051d4:	40011400 	.word	0x40011400
 81051d8:	58024400 	.word	0x58024400
 81051dc:	40007800 	.word	0x40007800
 81051e0:	40007c00 	.word	0x40007c00
 81051e4:	58000c00 	.word	0x58000c00
 81051e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81051ec:	4bc4      	ldr	r3, [pc, #784]	; (8105500 <UART_SetConfig+0x9c4>)
 81051ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81051f0:	e009      	b.n	8105206 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81051f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81051f8:	e005      	b.n	8105206 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 81051fa:	2300      	movs	r3, #0
 81051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81051fe:	2301      	movs	r3, #1
 8105200:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105208:	2b00      	cmp	r3, #0
 810520a:	f000 81da 	beq.w	81055c2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105212:	4abc      	ldr	r2, [pc, #752]	; (8105504 <UART_SetConfig+0x9c8>)
 8105214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105218:	461a      	mov	r2, r3
 810521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810521c:	fbb3 f3f2 	udiv	r3, r3, r2
 8105220:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	685a      	ldr	r2, [r3, #4]
 8105226:	4613      	mov	r3, r2
 8105228:	005b      	lsls	r3, r3, #1
 810522a:	4413      	add	r3, r2
 810522c:	6a3a      	ldr	r2, [r7, #32]
 810522e:	429a      	cmp	r2, r3
 8105230:	d305      	bcc.n	810523e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	685b      	ldr	r3, [r3, #4]
 8105236:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105238:	6a3a      	ldr	r2, [r7, #32]
 810523a:	429a      	cmp	r2, r3
 810523c:	d903      	bls.n	8105246 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810523e:	2301      	movs	r3, #1
 8105240:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8105244:	e1bd      	b.n	81055c2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8105248:	4618      	mov	r0, r3
 810524a:	f04f 0100 	mov.w	r1, #0
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105252:	4aac      	ldr	r2, [pc, #688]	; (8105504 <UART_SetConfig+0x9c8>)
 8105254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105258:	b29a      	uxth	r2, r3
 810525a:	f04f 0300 	mov.w	r3, #0
 810525e:	f7fb f88f 	bl	8100380 <__aeabi_uldivmod>
 8105262:	4602      	mov	r2, r0
 8105264:	460b      	mov	r3, r1
 8105266:	4610      	mov	r0, r2
 8105268:	4619      	mov	r1, r3
 810526a:	f04f 0200 	mov.w	r2, #0
 810526e:	f04f 0300 	mov.w	r3, #0
 8105272:	020b      	lsls	r3, r1, #8
 8105274:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105278:	0202      	lsls	r2, r0, #8
 810527a:	6879      	ldr	r1, [r7, #4]
 810527c:	6849      	ldr	r1, [r1, #4]
 810527e:	0849      	lsrs	r1, r1, #1
 8105280:	4608      	mov	r0, r1
 8105282:	f04f 0100 	mov.w	r1, #0
 8105286:	1814      	adds	r4, r2, r0
 8105288:	eb43 0501 	adc.w	r5, r3, r1
 810528c:	687b      	ldr	r3, [r7, #4]
 810528e:	685b      	ldr	r3, [r3, #4]
 8105290:	461a      	mov	r2, r3
 8105292:	f04f 0300 	mov.w	r3, #0
 8105296:	4620      	mov	r0, r4
 8105298:	4629      	mov	r1, r5
 810529a:	f7fb f871 	bl	8100380 <__aeabi_uldivmod>
 810529e:	4602      	mov	r2, r0
 81052a0:	460b      	mov	r3, r1
 81052a2:	4613      	mov	r3, r2
 81052a4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81052ac:	d308      	bcc.n	81052c0 <UART_SetConfig+0x784>
 81052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81052b4:	d204      	bcs.n	81052c0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	681b      	ldr	r3, [r3, #0]
 81052ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81052bc:	60da      	str	r2, [r3, #12]
 81052be:	e180      	b.n	81055c2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 81052c0:	2301      	movs	r3, #1
 81052c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81052c6:	e17c      	b.n	81055c2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	69db      	ldr	r3, [r3, #28]
 81052cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81052d0:	f040 80be 	bne.w	8105450 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 81052d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 81052d8:	2b20      	cmp	r3, #32
 81052da:	dc49      	bgt.n	8105370 <UART_SetConfig+0x834>
 81052dc:	2b00      	cmp	r3, #0
 81052de:	db7c      	blt.n	81053da <UART_SetConfig+0x89e>
 81052e0:	2b20      	cmp	r3, #32
 81052e2:	d87a      	bhi.n	81053da <UART_SetConfig+0x89e>
 81052e4:	a201      	add	r2, pc, #4	; (adr r2, 81052ec <UART_SetConfig+0x7b0>)
 81052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052ea:	bf00      	nop
 81052ec:	08105377 	.word	0x08105377
 81052f0:	0810537f 	.word	0x0810537f
 81052f4:	081053db 	.word	0x081053db
 81052f8:	081053db 	.word	0x081053db
 81052fc:	08105387 	.word	0x08105387
 8105300:	081053db 	.word	0x081053db
 8105304:	081053db 	.word	0x081053db
 8105308:	081053db 	.word	0x081053db
 810530c:	08105397 	.word	0x08105397
 8105310:	081053db 	.word	0x081053db
 8105314:	081053db 	.word	0x081053db
 8105318:	081053db 	.word	0x081053db
 810531c:	081053db 	.word	0x081053db
 8105320:	081053db 	.word	0x081053db
 8105324:	081053db 	.word	0x081053db
 8105328:	081053db 	.word	0x081053db
 810532c:	081053a7 	.word	0x081053a7
 8105330:	081053db 	.word	0x081053db
 8105334:	081053db 	.word	0x081053db
 8105338:	081053db 	.word	0x081053db
 810533c:	081053db 	.word	0x081053db
 8105340:	081053db 	.word	0x081053db
 8105344:	081053db 	.word	0x081053db
 8105348:	081053db 	.word	0x081053db
 810534c:	081053db 	.word	0x081053db
 8105350:	081053db 	.word	0x081053db
 8105354:	081053db 	.word	0x081053db
 8105358:	081053db 	.word	0x081053db
 810535c:	081053db 	.word	0x081053db
 8105360:	081053db 	.word	0x081053db
 8105364:	081053db 	.word	0x081053db
 8105368:	081053db 	.word	0x081053db
 810536c:	081053cd 	.word	0x081053cd
 8105370:	2b40      	cmp	r3, #64	; 0x40
 8105372:	d02e      	beq.n	81053d2 <UART_SetConfig+0x896>
 8105374:	e031      	b.n	81053da <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105376:	f7fc feb7 	bl	81020e8 <HAL_RCC_GetPCLK1Freq>
 810537a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 810537c:	e033      	b.n	81053e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810537e:	f7fc fec9 	bl	8102114 <HAL_RCC_GetPCLK2Freq>
 8105382:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105384:	e02f      	b.n	81053e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105386:	f107 0314 	add.w	r3, r7, #20
 810538a:	4618      	mov	r0, r3
 810538c:	f7fd fe2e 	bl	8102fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105390:	69bb      	ldr	r3, [r7, #24]
 8105392:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105394:	e027      	b.n	81053e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105396:	f107 0308 	add.w	r3, r7, #8
 810539a:	4618      	mov	r0, r3
 810539c:	f7fd ff7a 	bl	8103294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81053a0:	68fb      	ldr	r3, [r7, #12]
 81053a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81053a4:	e01f      	b.n	81053e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81053a6:	4b58      	ldr	r3, [pc, #352]	; (8105508 <UART_SetConfig+0x9cc>)
 81053a8:	681b      	ldr	r3, [r3, #0]
 81053aa:	f003 0320 	and.w	r3, r3, #32
 81053ae:	2b00      	cmp	r3, #0
 81053b0:	d009      	beq.n	81053c6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81053b2:	4b55      	ldr	r3, [pc, #340]	; (8105508 <UART_SetConfig+0x9cc>)
 81053b4:	681b      	ldr	r3, [r3, #0]
 81053b6:	08db      	lsrs	r3, r3, #3
 81053b8:	f003 0303 	and.w	r3, r3, #3
 81053bc:	4a53      	ldr	r2, [pc, #332]	; (810550c <UART_SetConfig+0x9d0>)
 81053be:	fa22 f303 	lsr.w	r3, r2, r3
 81053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81053c4:	e00f      	b.n	81053e6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 81053c6:	4b51      	ldr	r3, [pc, #324]	; (810550c <UART_SetConfig+0x9d0>)
 81053c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81053ca:	e00c      	b.n	81053e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81053cc:	4b4c      	ldr	r3, [pc, #304]	; (8105500 <UART_SetConfig+0x9c4>)
 81053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81053d0:	e009      	b.n	81053e6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81053d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81053d8:	e005      	b.n	81053e6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 81053da:	2300      	movs	r3, #0
 81053dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81053de:	2301      	movs	r3, #1
 81053e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81053e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 81053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81053e8:	2b00      	cmp	r3, #0
 81053ea:	f000 80ea 	beq.w	81055c2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81053ee:	687b      	ldr	r3, [r7, #4]
 81053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053f2:	4a44      	ldr	r2, [pc, #272]	; (8105504 <UART_SetConfig+0x9c8>)
 81053f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81053f8:	461a      	mov	r2, r3
 81053fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81053fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8105400:	005a      	lsls	r2, r3, #1
 8105402:	687b      	ldr	r3, [r7, #4]
 8105404:	685b      	ldr	r3, [r3, #4]
 8105406:	085b      	lsrs	r3, r3, #1
 8105408:	441a      	add	r2, r3
 810540a:	687b      	ldr	r3, [r7, #4]
 810540c:	685b      	ldr	r3, [r3, #4]
 810540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105412:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105416:	2b0f      	cmp	r3, #15
 8105418:	d916      	bls.n	8105448 <UART_SetConfig+0x90c>
 810541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105420:	d212      	bcs.n	8105448 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8105422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105424:	b29b      	uxth	r3, r3
 8105426:	f023 030f 	bic.w	r3, r3, #15
 810542a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810542e:	085b      	lsrs	r3, r3, #1
 8105430:	b29b      	uxth	r3, r3
 8105432:	f003 0307 	and.w	r3, r3, #7
 8105436:	b29a      	uxth	r2, r3
 8105438:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810543a:	4313      	orrs	r3, r2
 810543c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810543e:	687b      	ldr	r3, [r7, #4]
 8105440:	681b      	ldr	r3, [r3, #0]
 8105442:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8105444:	60da      	str	r2, [r3, #12]
 8105446:	e0bc      	b.n	81055c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8105448:	2301      	movs	r3, #1
 810544a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810544e:	e0b8      	b.n	81055c2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8105450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8105454:	2b20      	cmp	r3, #32
 8105456:	dc4b      	bgt.n	81054f0 <UART_SetConfig+0x9b4>
 8105458:	2b00      	cmp	r3, #0
 810545a:	f2c0 8087 	blt.w	810556c <UART_SetConfig+0xa30>
 810545e:	2b20      	cmp	r3, #32
 8105460:	f200 8084 	bhi.w	810556c <UART_SetConfig+0xa30>
 8105464:	a201      	add	r2, pc, #4	; (adr r2, 810546c <UART_SetConfig+0x930>)
 8105466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810546a:	bf00      	nop
 810546c:	081054f7 	.word	0x081054f7
 8105470:	08105511 	.word	0x08105511
 8105474:	0810556d 	.word	0x0810556d
 8105478:	0810556d 	.word	0x0810556d
 810547c:	08105519 	.word	0x08105519
 8105480:	0810556d 	.word	0x0810556d
 8105484:	0810556d 	.word	0x0810556d
 8105488:	0810556d 	.word	0x0810556d
 810548c:	08105529 	.word	0x08105529
 8105490:	0810556d 	.word	0x0810556d
 8105494:	0810556d 	.word	0x0810556d
 8105498:	0810556d 	.word	0x0810556d
 810549c:	0810556d 	.word	0x0810556d
 81054a0:	0810556d 	.word	0x0810556d
 81054a4:	0810556d 	.word	0x0810556d
 81054a8:	0810556d 	.word	0x0810556d
 81054ac:	08105539 	.word	0x08105539
 81054b0:	0810556d 	.word	0x0810556d
 81054b4:	0810556d 	.word	0x0810556d
 81054b8:	0810556d 	.word	0x0810556d
 81054bc:	0810556d 	.word	0x0810556d
 81054c0:	0810556d 	.word	0x0810556d
 81054c4:	0810556d 	.word	0x0810556d
 81054c8:	0810556d 	.word	0x0810556d
 81054cc:	0810556d 	.word	0x0810556d
 81054d0:	0810556d 	.word	0x0810556d
 81054d4:	0810556d 	.word	0x0810556d
 81054d8:	0810556d 	.word	0x0810556d
 81054dc:	0810556d 	.word	0x0810556d
 81054e0:	0810556d 	.word	0x0810556d
 81054e4:	0810556d 	.word	0x0810556d
 81054e8:	0810556d 	.word	0x0810556d
 81054ec:	0810555f 	.word	0x0810555f
 81054f0:	2b40      	cmp	r3, #64	; 0x40
 81054f2:	d037      	beq.n	8105564 <UART_SetConfig+0xa28>
 81054f4:	e03a      	b.n	810556c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81054f6:	f7fc fdf7 	bl	81020e8 <HAL_RCC_GetPCLK1Freq>
 81054fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81054fc:	e03c      	b.n	8105578 <UART_SetConfig+0xa3c>
 81054fe:	bf00      	nop
 8105500:	003d0900 	.word	0x003d0900
 8105504:	08106cbc 	.word	0x08106cbc
 8105508:	58024400 	.word	0x58024400
 810550c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105510:	f7fc fe00 	bl	8102114 <HAL_RCC_GetPCLK2Freq>
 8105514:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105516:	e02f      	b.n	8105578 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105518:	f107 0314 	add.w	r3, r7, #20
 810551c:	4618      	mov	r0, r3
 810551e:	f7fd fd65 	bl	8102fec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105522:	69bb      	ldr	r3, [r7, #24]
 8105524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105526:	e027      	b.n	8105578 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105528:	f107 0308 	add.w	r3, r7, #8
 810552c:	4618      	mov	r0, r3
 810552e:	f7fd feb1 	bl	8103294 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105532:	68fb      	ldr	r3, [r7, #12]
 8105534:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105536:	e01f      	b.n	8105578 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105538:	4b2c      	ldr	r3, [pc, #176]	; (81055ec <UART_SetConfig+0xab0>)
 810553a:	681b      	ldr	r3, [r3, #0]
 810553c:	f003 0320 	and.w	r3, r3, #32
 8105540:	2b00      	cmp	r3, #0
 8105542:	d009      	beq.n	8105558 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105544:	4b29      	ldr	r3, [pc, #164]	; (81055ec <UART_SetConfig+0xab0>)
 8105546:	681b      	ldr	r3, [r3, #0]
 8105548:	08db      	lsrs	r3, r3, #3
 810554a:	f003 0303 	and.w	r3, r3, #3
 810554e:	4a28      	ldr	r2, [pc, #160]	; (81055f0 <UART_SetConfig+0xab4>)
 8105550:	fa22 f303 	lsr.w	r3, r2, r3
 8105554:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105556:	e00f      	b.n	8105578 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8105558:	4b25      	ldr	r3, [pc, #148]	; (81055f0 <UART_SetConfig+0xab4>)
 810555a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810555c:	e00c      	b.n	8105578 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810555e:	4b25      	ldr	r3, [pc, #148]	; (81055f4 <UART_SetConfig+0xab8>)
 8105560:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105562:	e009      	b.n	8105578 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105564:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105568:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810556a:	e005      	b.n	8105578 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 810556c:	2300      	movs	r3, #0
 810556e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8105570:	2301      	movs	r3, #1
 8105572:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8105576:	bf00      	nop
    }

    if (pclk != 0U)
 8105578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810557a:	2b00      	cmp	r3, #0
 810557c:	d021      	beq.n	81055c2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105582:	4a1d      	ldr	r2, [pc, #116]	; (81055f8 <UART_SetConfig+0xabc>)
 8105584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105588:	461a      	mov	r2, r3
 810558a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810558c:	fbb3 f2f2 	udiv	r2, r3, r2
 8105590:	687b      	ldr	r3, [r7, #4]
 8105592:	685b      	ldr	r3, [r3, #4]
 8105594:	085b      	lsrs	r3, r3, #1
 8105596:	441a      	add	r2, r3
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	685b      	ldr	r3, [r3, #4]
 810559c:	fbb2 f3f3 	udiv	r3, r2, r3
 81055a0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055a4:	2b0f      	cmp	r3, #15
 81055a6:	d909      	bls.n	81055bc <UART_SetConfig+0xa80>
 81055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81055ae:	d205      	bcs.n	81055bc <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81055b2:	b29a      	uxth	r2, r3
 81055b4:	687b      	ldr	r3, [r7, #4]
 81055b6:	681b      	ldr	r3, [r3, #0]
 81055b8:	60da      	str	r2, [r3, #12]
 81055ba:	e002      	b.n	81055c2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81055bc:	2301      	movs	r3, #1
 81055be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81055c2:	687b      	ldr	r3, [r7, #4]
 81055c4:	2201      	movs	r2, #1
 81055c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81055ca:	687b      	ldr	r3, [r7, #4]
 81055cc:	2201      	movs	r2, #1
 81055ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81055d2:	687b      	ldr	r3, [r7, #4]
 81055d4:	2200      	movs	r2, #0
 81055d6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 81055d8:	687b      	ldr	r3, [r7, #4]
 81055da:	2200      	movs	r2, #0
 81055dc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 81055de:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 81055e2:	4618      	mov	r0, r3
 81055e4:	3738      	adds	r7, #56	; 0x38
 81055e6:	46bd      	mov	sp, r7
 81055e8:	bdb0      	pop	{r4, r5, r7, pc}
 81055ea:	bf00      	nop
 81055ec:	58024400 	.word	0x58024400
 81055f0:	03d09000 	.word	0x03d09000
 81055f4:	003d0900 	.word	0x003d0900
 81055f8:	08106cbc 	.word	0x08106cbc

081055fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 81055fc:	b480      	push	{r7}
 81055fe:	b083      	sub	sp, #12
 8105600:	af00      	add	r7, sp, #0
 8105602:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105604:	687b      	ldr	r3, [r7, #4]
 8105606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105608:	f003 0301 	and.w	r3, r3, #1
 810560c:	2b00      	cmp	r3, #0
 810560e:	d00a      	beq.n	8105626 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105610:	687b      	ldr	r3, [r7, #4]
 8105612:	681b      	ldr	r3, [r3, #0]
 8105614:	685b      	ldr	r3, [r3, #4]
 8105616:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 810561a:	687b      	ldr	r3, [r7, #4]
 810561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810561e:	687b      	ldr	r3, [r7, #4]
 8105620:	681b      	ldr	r3, [r3, #0]
 8105622:	430a      	orrs	r2, r1
 8105624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105626:	687b      	ldr	r3, [r7, #4]
 8105628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810562a:	f003 0302 	and.w	r3, r3, #2
 810562e:	2b00      	cmp	r3, #0
 8105630:	d00a      	beq.n	8105648 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105632:	687b      	ldr	r3, [r7, #4]
 8105634:	681b      	ldr	r3, [r3, #0]
 8105636:	685b      	ldr	r3, [r3, #4]
 8105638:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 810563c:	687b      	ldr	r3, [r7, #4]
 810563e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8105640:	687b      	ldr	r3, [r7, #4]
 8105642:	681b      	ldr	r3, [r3, #0]
 8105644:	430a      	orrs	r2, r1
 8105646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105648:	687b      	ldr	r3, [r7, #4]
 810564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810564c:	f003 0304 	and.w	r3, r3, #4
 8105650:	2b00      	cmp	r3, #0
 8105652:	d00a      	beq.n	810566a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105654:	687b      	ldr	r3, [r7, #4]
 8105656:	681b      	ldr	r3, [r3, #0]
 8105658:	685b      	ldr	r3, [r3, #4]
 810565a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 810565e:	687b      	ldr	r3, [r7, #4]
 8105660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	681b      	ldr	r3, [r3, #0]
 8105666:	430a      	orrs	r2, r1
 8105668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810566a:	687b      	ldr	r3, [r7, #4]
 810566c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810566e:	f003 0308 	and.w	r3, r3, #8
 8105672:	2b00      	cmp	r3, #0
 8105674:	d00a      	beq.n	810568c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105676:	687b      	ldr	r3, [r7, #4]
 8105678:	681b      	ldr	r3, [r3, #0]
 810567a:	685b      	ldr	r3, [r3, #4]
 810567c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8105680:	687b      	ldr	r3, [r7, #4]
 8105682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105684:	687b      	ldr	r3, [r7, #4]
 8105686:	681b      	ldr	r3, [r3, #0]
 8105688:	430a      	orrs	r2, r1
 810568a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810568c:	687b      	ldr	r3, [r7, #4]
 810568e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105690:	f003 0310 	and.w	r3, r3, #16
 8105694:	2b00      	cmp	r3, #0
 8105696:	d00a      	beq.n	81056ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105698:	687b      	ldr	r3, [r7, #4]
 810569a:	681b      	ldr	r3, [r3, #0]
 810569c:	689b      	ldr	r3, [r3, #8]
 810569e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81056a2:	687b      	ldr	r3, [r7, #4]
 81056a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81056a6:	687b      	ldr	r3, [r7, #4]
 81056a8:	681b      	ldr	r3, [r3, #0]
 81056aa:	430a      	orrs	r2, r1
 81056ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81056ae:	687b      	ldr	r3, [r7, #4]
 81056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056b2:	f003 0320 	and.w	r3, r3, #32
 81056b6:	2b00      	cmp	r3, #0
 81056b8:	d00a      	beq.n	81056d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81056ba:	687b      	ldr	r3, [r7, #4]
 81056bc:	681b      	ldr	r3, [r3, #0]
 81056be:	689b      	ldr	r3, [r3, #8]
 81056c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81056c4:	687b      	ldr	r3, [r7, #4]
 81056c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81056c8:	687b      	ldr	r3, [r7, #4]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	430a      	orrs	r2, r1
 81056ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81056d0:	687b      	ldr	r3, [r7, #4]
 81056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81056d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81056d8:	2b00      	cmp	r3, #0
 81056da:	d01a      	beq.n	8105712 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81056dc:	687b      	ldr	r3, [r7, #4]
 81056de:	681b      	ldr	r3, [r3, #0]
 81056e0:	685b      	ldr	r3, [r3, #4]
 81056e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81056e6:	687b      	ldr	r3, [r7, #4]
 81056e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81056ea:	687b      	ldr	r3, [r7, #4]
 81056ec:	681b      	ldr	r3, [r3, #0]
 81056ee:	430a      	orrs	r2, r1
 81056f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81056f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81056fa:	d10a      	bne.n	8105712 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 81056fc:	687b      	ldr	r3, [r7, #4]
 81056fe:	681b      	ldr	r3, [r3, #0]
 8105700:	685b      	ldr	r3, [r3, #4]
 8105702:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8105706:	687b      	ldr	r3, [r7, #4]
 8105708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810570a:	687b      	ldr	r3, [r7, #4]
 810570c:	681b      	ldr	r3, [r3, #0]
 810570e:	430a      	orrs	r2, r1
 8105710:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105712:	687b      	ldr	r3, [r7, #4]
 8105714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810571a:	2b00      	cmp	r3, #0
 810571c:	d00a      	beq.n	8105734 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810571e:	687b      	ldr	r3, [r7, #4]
 8105720:	681b      	ldr	r3, [r3, #0]
 8105722:	685b      	ldr	r3, [r3, #4]
 8105724:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	430a      	orrs	r2, r1
 8105732:	605a      	str	r2, [r3, #4]
  }
}
 8105734:	bf00      	nop
 8105736:	370c      	adds	r7, #12
 8105738:	46bd      	mov	sp, r7
 810573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810573e:	4770      	bx	lr

08105740 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8105740:	b580      	push	{r7, lr}
 8105742:	b086      	sub	sp, #24
 8105744:	af02      	add	r7, sp, #8
 8105746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105748:	687b      	ldr	r3, [r7, #4]
 810574a:	2200      	movs	r2, #0
 810574c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8105750:	f7fb ff4c 	bl	81015ec <HAL_GetTick>
 8105754:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8105756:	687b      	ldr	r3, [r7, #4]
 8105758:	681b      	ldr	r3, [r3, #0]
 810575a:	681b      	ldr	r3, [r3, #0]
 810575c:	f003 0308 	and.w	r3, r3, #8
 8105760:	2b08      	cmp	r3, #8
 8105762:	d10e      	bne.n	8105782 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105764:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105768:	9300      	str	r3, [sp, #0]
 810576a:	68fb      	ldr	r3, [r7, #12]
 810576c:	2200      	movs	r2, #0
 810576e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8105772:	6878      	ldr	r0, [r7, #4]
 8105774:	f000 f82f 	bl	81057d6 <UART_WaitOnFlagUntilTimeout>
 8105778:	4603      	mov	r3, r0
 810577a:	2b00      	cmp	r3, #0
 810577c:	d001      	beq.n	8105782 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 810577e:	2303      	movs	r3, #3
 8105780:	e025      	b.n	81057ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105782:	687b      	ldr	r3, [r7, #4]
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	681b      	ldr	r3, [r3, #0]
 8105788:	f003 0304 	and.w	r3, r3, #4
 810578c:	2b04      	cmp	r3, #4
 810578e:	d10e      	bne.n	81057ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8105794:	9300      	str	r3, [sp, #0]
 8105796:	68fb      	ldr	r3, [r7, #12]
 8105798:	2200      	movs	r2, #0
 810579a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810579e:	6878      	ldr	r0, [r7, #4]
 81057a0:	f000 f819 	bl	81057d6 <UART_WaitOnFlagUntilTimeout>
 81057a4:	4603      	mov	r3, r0
 81057a6:	2b00      	cmp	r3, #0
 81057a8:	d001      	beq.n	81057ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81057aa:	2303      	movs	r3, #3
 81057ac:	e00f      	b.n	81057ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81057ae:	687b      	ldr	r3, [r7, #4]
 81057b0:	2220      	movs	r2, #32
 81057b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	2220      	movs	r2, #32
 81057ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81057be:	687b      	ldr	r3, [r7, #4]
 81057c0:	2200      	movs	r2, #0
 81057c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81057c4:	687b      	ldr	r3, [r7, #4]
 81057c6:	2200      	movs	r2, #0
 81057c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81057cc:	2300      	movs	r3, #0
}
 81057ce:	4618      	mov	r0, r3
 81057d0:	3710      	adds	r7, #16
 81057d2:	46bd      	mov	sp, r7
 81057d4:	bd80      	pop	{r7, pc}

081057d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81057d6:	b580      	push	{r7, lr}
 81057d8:	b09c      	sub	sp, #112	; 0x70
 81057da:	af00      	add	r7, sp, #0
 81057dc:	60f8      	str	r0, [r7, #12]
 81057de:	60b9      	str	r1, [r7, #8]
 81057e0:	603b      	str	r3, [r7, #0]
 81057e2:	4613      	mov	r3, r2
 81057e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81057e6:	e0a9      	b.n	810593c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81057e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057ee:	f000 80a5 	beq.w	810593c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81057f2:	f7fb fefb 	bl	81015ec <HAL_GetTick>
 81057f6:	4602      	mov	r2, r0
 81057f8:	683b      	ldr	r3, [r7, #0]
 81057fa:	1ad3      	subs	r3, r2, r3
 81057fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 81057fe:	429a      	cmp	r2, r3
 8105800:	d302      	bcc.n	8105808 <UART_WaitOnFlagUntilTimeout+0x32>
 8105802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105804:	2b00      	cmp	r3, #0
 8105806:	d140      	bne.n	810588a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105808:	68fb      	ldr	r3, [r7, #12]
 810580a:	681b      	ldr	r3, [r3, #0]
 810580c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810580e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105810:	e853 3f00 	ldrex	r3, [r3]
 8105814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8105816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 810581c:	667b      	str	r3, [r7, #100]	; 0x64
 810581e:	68fb      	ldr	r3, [r7, #12]
 8105820:	681b      	ldr	r3, [r3, #0]
 8105822:	461a      	mov	r2, r3
 8105824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8105826:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105828:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810582a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 810582c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810582e:	e841 2300 	strex	r3, r2, [r1]
 8105832:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8105834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8105836:	2b00      	cmp	r3, #0
 8105838:	d1e6      	bne.n	8105808 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810583a:	68fb      	ldr	r3, [r7, #12]
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	3308      	adds	r3, #8
 8105840:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105844:	e853 3f00 	ldrex	r3, [r3]
 8105848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810584a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810584c:	f023 0301 	bic.w	r3, r3, #1
 8105850:	663b      	str	r3, [r7, #96]	; 0x60
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	681b      	ldr	r3, [r3, #0]
 8105856:	3308      	adds	r3, #8
 8105858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 810585a:	64ba      	str	r2, [r7, #72]	; 0x48
 810585c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810585e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8105860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105862:	e841 2300 	strex	r3, r2, [r1]
 8105866:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8105868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810586a:	2b00      	cmp	r3, #0
 810586c:	d1e5      	bne.n	810583a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 810586e:	68fb      	ldr	r3, [r7, #12]
 8105870:	2220      	movs	r2, #32
 8105872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	2220      	movs	r2, #32
 810587a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810587e:	68fb      	ldr	r3, [r7, #12]
 8105880:	2200      	movs	r2, #0
 8105882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8105886:	2303      	movs	r3, #3
 8105888:	e069      	b.n	810595e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	681b      	ldr	r3, [r3, #0]
 810588e:	681b      	ldr	r3, [r3, #0]
 8105890:	f003 0304 	and.w	r3, r3, #4
 8105894:	2b00      	cmp	r3, #0
 8105896:	d051      	beq.n	810593c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105898:	68fb      	ldr	r3, [r7, #12]
 810589a:	681b      	ldr	r3, [r3, #0]
 810589c:	69db      	ldr	r3, [r3, #28]
 810589e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81058a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81058a6:	d149      	bne.n	810593c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81058a8:	68fb      	ldr	r3, [r7, #12]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81058b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81058b2:	68fb      	ldr	r3, [r7, #12]
 81058b4:	681b      	ldr	r3, [r3, #0]
 81058b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81058ba:	e853 3f00 	ldrex	r3, [r3]
 81058be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81058c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81058c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 81058c8:	68fb      	ldr	r3, [r7, #12]
 81058ca:	681b      	ldr	r3, [r3, #0]
 81058cc:	461a      	mov	r2, r3
 81058ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81058d0:	637b      	str	r3, [r7, #52]	; 0x34
 81058d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81058d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81058d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81058d8:	e841 2300 	strex	r3, r2, [r1]
 81058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81058e0:	2b00      	cmp	r3, #0
 81058e2:	d1e6      	bne.n	81058b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81058e4:	68fb      	ldr	r3, [r7, #12]
 81058e6:	681b      	ldr	r3, [r3, #0]
 81058e8:	3308      	adds	r3, #8
 81058ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81058ec:	697b      	ldr	r3, [r7, #20]
 81058ee:	e853 3f00 	ldrex	r3, [r3]
 81058f2:	613b      	str	r3, [r7, #16]
   return(result);
 81058f4:	693b      	ldr	r3, [r7, #16]
 81058f6:	f023 0301 	bic.w	r3, r3, #1
 81058fa:	66bb      	str	r3, [r7, #104]	; 0x68
 81058fc:	68fb      	ldr	r3, [r7, #12]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	3308      	adds	r3, #8
 8105902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8105904:	623a      	str	r2, [r7, #32]
 8105906:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105908:	69f9      	ldr	r1, [r7, #28]
 810590a:	6a3a      	ldr	r2, [r7, #32]
 810590c:	e841 2300 	strex	r3, r2, [r1]
 8105910:	61bb      	str	r3, [r7, #24]
   return(result);
 8105912:	69bb      	ldr	r3, [r7, #24]
 8105914:	2b00      	cmp	r3, #0
 8105916:	d1e5      	bne.n	81058e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8105918:	68fb      	ldr	r3, [r7, #12]
 810591a:	2220      	movs	r2, #32
 810591c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8105920:	68fb      	ldr	r3, [r7, #12]
 8105922:	2220      	movs	r2, #32
 8105924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105928:	68fb      	ldr	r3, [r7, #12]
 810592a:	2220      	movs	r2, #32
 810592c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105930:	68fb      	ldr	r3, [r7, #12]
 8105932:	2200      	movs	r2, #0
 8105934:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8105938:	2303      	movs	r3, #3
 810593a:	e010      	b.n	810595e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810593c:	68fb      	ldr	r3, [r7, #12]
 810593e:	681b      	ldr	r3, [r3, #0]
 8105940:	69da      	ldr	r2, [r3, #28]
 8105942:	68bb      	ldr	r3, [r7, #8]
 8105944:	4013      	ands	r3, r2
 8105946:	68ba      	ldr	r2, [r7, #8]
 8105948:	429a      	cmp	r2, r3
 810594a:	bf0c      	ite	eq
 810594c:	2301      	moveq	r3, #1
 810594e:	2300      	movne	r3, #0
 8105950:	b2db      	uxtb	r3, r3
 8105952:	461a      	mov	r2, r3
 8105954:	79fb      	ldrb	r3, [r7, #7]
 8105956:	429a      	cmp	r2, r3
 8105958:	f43f af46 	beq.w	81057e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810595c:	2300      	movs	r3, #0
}
 810595e:	4618      	mov	r0, r3
 8105960:	3770      	adds	r7, #112	; 0x70
 8105962:	46bd      	mov	sp, r7
 8105964:	bd80      	pop	{r7, pc}

08105966 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8105966:	b480      	push	{r7}
 8105968:	b085      	sub	sp, #20
 810596a:	af00      	add	r7, sp, #0
 810596c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810596e:	687b      	ldr	r3, [r7, #4]
 8105970:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105974:	2b01      	cmp	r3, #1
 8105976:	d101      	bne.n	810597c <HAL_UARTEx_DisableFifoMode+0x16>
 8105978:	2302      	movs	r3, #2
 810597a:	e027      	b.n	81059cc <HAL_UARTEx_DisableFifoMode+0x66>
 810597c:	687b      	ldr	r3, [r7, #4]
 810597e:	2201      	movs	r2, #1
 8105980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105984:	687b      	ldr	r3, [r7, #4]
 8105986:	2224      	movs	r2, #36	; 0x24
 8105988:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810598c:	687b      	ldr	r3, [r7, #4]
 810598e:	681b      	ldr	r3, [r3, #0]
 8105990:	681b      	ldr	r3, [r3, #0]
 8105992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105994:	687b      	ldr	r3, [r7, #4]
 8105996:	681b      	ldr	r3, [r3, #0]
 8105998:	681a      	ldr	r2, [r3, #0]
 810599a:	687b      	ldr	r3, [r7, #4]
 810599c:	681b      	ldr	r3, [r3, #0]
 810599e:	f022 0201 	bic.w	r2, r2, #1
 81059a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81059a4:	68fb      	ldr	r3, [r7, #12]
 81059a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81059aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	2200      	movs	r2, #0
 81059b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81059b2:	687b      	ldr	r3, [r7, #4]
 81059b4:	681b      	ldr	r3, [r3, #0]
 81059b6:	68fa      	ldr	r2, [r7, #12]
 81059b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81059ba:	687b      	ldr	r3, [r7, #4]
 81059bc:	2220      	movs	r2, #32
 81059be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81059c2:	687b      	ldr	r3, [r7, #4]
 81059c4:	2200      	movs	r2, #0
 81059c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81059ca:	2300      	movs	r3, #0
}
 81059cc:	4618      	mov	r0, r3
 81059ce:	3714      	adds	r7, #20
 81059d0:	46bd      	mov	sp, r7
 81059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059d6:	4770      	bx	lr

081059d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81059d8:	b580      	push	{r7, lr}
 81059da:	b084      	sub	sp, #16
 81059dc:	af00      	add	r7, sp, #0
 81059de:	6078      	str	r0, [r7, #4]
 81059e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81059e2:	687b      	ldr	r3, [r7, #4]
 81059e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81059e8:	2b01      	cmp	r3, #1
 81059ea:	d101      	bne.n	81059f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81059ec:	2302      	movs	r3, #2
 81059ee:	e02d      	b.n	8105a4c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81059f0:	687b      	ldr	r3, [r7, #4]
 81059f2:	2201      	movs	r2, #1
 81059f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81059f8:	687b      	ldr	r3, [r7, #4]
 81059fa:	2224      	movs	r2, #36	; 0x24
 81059fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105a00:	687b      	ldr	r3, [r7, #4]
 8105a02:	681b      	ldr	r3, [r3, #0]
 8105a04:	681b      	ldr	r3, [r3, #0]
 8105a06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105a08:	687b      	ldr	r3, [r7, #4]
 8105a0a:	681b      	ldr	r3, [r3, #0]
 8105a0c:	681a      	ldr	r2, [r3, #0]
 8105a0e:	687b      	ldr	r3, [r7, #4]
 8105a10:	681b      	ldr	r3, [r3, #0]
 8105a12:	f022 0201 	bic.w	r2, r2, #1
 8105a16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105a18:	687b      	ldr	r3, [r7, #4]
 8105a1a:	681b      	ldr	r3, [r3, #0]
 8105a1c:	689b      	ldr	r3, [r3, #8]
 8105a1e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8105a22:	687b      	ldr	r3, [r7, #4]
 8105a24:	681b      	ldr	r3, [r3, #0]
 8105a26:	683a      	ldr	r2, [r7, #0]
 8105a28:	430a      	orrs	r2, r1
 8105a2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105a2c:	6878      	ldr	r0, [r7, #4]
 8105a2e:	f000 f84f 	bl	8105ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	681b      	ldr	r3, [r3, #0]
 8105a36:	68fa      	ldr	r2, [r7, #12]
 8105a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105a3a:	687b      	ldr	r3, [r7, #4]
 8105a3c:	2220      	movs	r2, #32
 8105a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	2200      	movs	r2, #0
 8105a46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105a4a:	2300      	movs	r3, #0
}
 8105a4c:	4618      	mov	r0, r3
 8105a4e:	3710      	adds	r7, #16
 8105a50:	46bd      	mov	sp, r7
 8105a52:	bd80      	pop	{r7, pc}

08105a54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105a54:	b580      	push	{r7, lr}
 8105a56:	b084      	sub	sp, #16
 8105a58:	af00      	add	r7, sp, #0
 8105a5a:	6078      	str	r0, [r7, #4]
 8105a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8105a5e:	687b      	ldr	r3, [r7, #4]
 8105a60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105a64:	2b01      	cmp	r3, #1
 8105a66:	d101      	bne.n	8105a6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8105a68:	2302      	movs	r3, #2
 8105a6a:	e02d      	b.n	8105ac8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8105a6c:	687b      	ldr	r3, [r7, #4]
 8105a6e:	2201      	movs	r2, #1
 8105a70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105a74:	687b      	ldr	r3, [r7, #4]
 8105a76:	2224      	movs	r2, #36	; 0x24
 8105a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	681b      	ldr	r3, [r3, #0]
 8105a82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105a84:	687b      	ldr	r3, [r7, #4]
 8105a86:	681b      	ldr	r3, [r3, #0]
 8105a88:	681a      	ldr	r2, [r3, #0]
 8105a8a:	687b      	ldr	r3, [r7, #4]
 8105a8c:	681b      	ldr	r3, [r3, #0]
 8105a8e:	f022 0201 	bic.w	r2, r2, #1
 8105a92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8105a94:	687b      	ldr	r3, [r7, #4]
 8105a96:	681b      	ldr	r3, [r3, #0]
 8105a98:	689b      	ldr	r3, [r3, #8]
 8105a9a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8105a9e:	687b      	ldr	r3, [r7, #4]
 8105aa0:	681b      	ldr	r3, [r3, #0]
 8105aa2:	683a      	ldr	r2, [r7, #0]
 8105aa4:	430a      	orrs	r2, r1
 8105aa6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105aa8:	6878      	ldr	r0, [r7, #4]
 8105aaa:	f000 f811 	bl	8105ad0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	681b      	ldr	r3, [r3, #0]
 8105ab2:	68fa      	ldr	r2, [r7, #12]
 8105ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105ab6:	687b      	ldr	r3, [r7, #4]
 8105ab8:	2220      	movs	r2, #32
 8105aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8105abe:	687b      	ldr	r3, [r7, #4]
 8105ac0:	2200      	movs	r2, #0
 8105ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105ac6:	2300      	movs	r3, #0
}
 8105ac8:	4618      	mov	r0, r3
 8105aca:	3710      	adds	r7, #16
 8105acc:	46bd      	mov	sp, r7
 8105ace:	bd80      	pop	{r7, pc}

08105ad0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8105ad0:	b480      	push	{r7}
 8105ad2:	b085      	sub	sp, #20
 8105ad4:	af00      	add	r7, sp, #0
 8105ad6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105adc:	2b00      	cmp	r3, #0
 8105ade:	d108      	bne.n	8105af2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8105ae0:	687b      	ldr	r3, [r7, #4]
 8105ae2:	2201      	movs	r2, #1
 8105ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	2201      	movs	r2, #1
 8105aec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8105af0:	e031      	b.n	8105b56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8105af2:	2310      	movs	r3, #16
 8105af4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105af6:	2310      	movs	r3, #16
 8105af8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	681b      	ldr	r3, [r3, #0]
 8105afe:	689b      	ldr	r3, [r3, #8]
 8105b00:	0e5b      	lsrs	r3, r3, #25
 8105b02:	b2db      	uxtb	r3, r3
 8105b04:	f003 0307 	and.w	r3, r3, #7
 8105b08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105b0a:	687b      	ldr	r3, [r7, #4]
 8105b0c:	681b      	ldr	r3, [r3, #0]
 8105b0e:	689b      	ldr	r3, [r3, #8]
 8105b10:	0f5b      	lsrs	r3, r3, #29
 8105b12:	b2db      	uxtb	r3, r3
 8105b14:	f003 0307 	and.w	r3, r3, #7
 8105b18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105b1a:	7bbb      	ldrb	r3, [r7, #14]
 8105b1c:	7b3a      	ldrb	r2, [r7, #12]
 8105b1e:	4911      	ldr	r1, [pc, #68]	; (8105b64 <UARTEx_SetNbDataToProcess+0x94>)
 8105b20:	5c8a      	ldrb	r2, [r1, r2]
 8105b22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8105b26:	7b3a      	ldrb	r2, [r7, #12]
 8105b28:	490f      	ldr	r1, [pc, #60]	; (8105b68 <UARTEx_SetNbDataToProcess+0x98>)
 8105b2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105b2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8105b30:	b29a      	uxth	r2, r3
 8105b32:	687b      	ldr	r3, [r7, #4]
 8105b34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105b38:	7bfb      	ldrb	r3, [r7, #15]
 8105b3a:	7b7a      	ldrb	r2, [r7, #13]
 8105b3c:	4909      	ldr	r1, [pc, #36]	; (8105b64 <UARTEx_SetNbDataToProcess+0x94>)
 8105b3e:	5c8a      	ldrb	r2, [r1, r2]
 8105b40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8105b44:	7b7a      	ldrb	r2, [r7, #13]
 8105b46:	4908      	ldr	r1, [pc, #32]	; (8105b68 <UARTEx_SetNbDataToProcess+0x98>)
 8105b48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105b4a:	fb93 f3f2 	sdiv	r3, r3, r2
 8105b4e:	b29a      	uxth	r2, r3
 8105b50:	687b      	ldr	r3, [r7, #4]
 8105b52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8105b56:	bf00      	nop
 8105b58:	3714      	adds	r7, #20
 8105b5a:	46bd      	mov	sp, r7
 8105b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b60:	4770      	bx	lr
 8105b62:	bf00      	nop
 8105b64:	08106cd4 	.word	0x08106cd4
 8105b68:	08106cdc 	.word	0x08106cdc

08105b6c <__errno>:
 8105b6c:	4b01      	ldr	r3, [pc, #4]	; (8105b74 <__errno+0x8>)
 8105b6e:	6818      	ldr	r0, [r3, #0]
 8105b70:	4770      	bx	lr
 8105b72:	bf00      	nop
 8105b74:	10000010 	.word	0x10000010

08105b78 <__libc_init_array>:
 8105b78:	b570      	push	{r4, r5, r6, lr}
 8105b7a:	4d0d      	ldr	r5, [pc, #52]	; (8105bb0 <__libc_init_array+0x38>)
 8105b7c:	4c0d      	ldr	r4, [pc, #52]	; (8105bb4 <__libc_init_array+0x3c>)
 8105b7e:	1b64      	subs	r4, r4, r5
 8105b80:	10a4      	asrs	r4, r4, #2
 8105b82:	2600      	movs	r6, #0
 8105b84:	42a6      	cmp	r6, r4
 8105b86:	d109      	bne.n	8105b9c <__libc_init_array+0x24>
 8105b88:	4d0b      	ldr	r5, [pc, #44]	; (8105bb8 <__libc_init_array+0x40>)
 8105b8a:	4c0c      	ldr	r4, [pc, #48]	; (8105bbc <__libc_init_array+0x44>)
 8105b8c:	f000 ffec 	bl	8106b68 <_init>
 8105b90:	1b64      	subs	r4, r4, r5
 8105b92:	10a4      	asrs	r4, r4, #2
 8105b94:	2600      	movs	r6, #0
 8105b96:	42a6      	cmp	r6, r4
 8105b98:	d105      	bne.n	8105ba6 <__libc_init_array+0x2e>
 8105b9a:	bd70      	pop	{r4, r5, r6, pc}
 8105b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8105ba0:	4798      	blx	r3
 8105ba2:	3601      	adds	r6, #1
 8105ba4:	e7ee      	b.n	8105b84 <__libc_init_array+0xc>
 8105ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8105baa:	4798      	blx	r3
 8105bac:	3601      	adds	r6, #1
 8105bae:	e7f2      	b.n	8105b96 <__libc_init_array+0x1e>
 8105bb0:	08106d84 	.word	0x08106d84
 8105bb4:	08106d84 	.word	0x08106d84
 8105bb8:	08106d84 	.word	0x08106d84
 8105bbc:	08106d88 	.word	0x08106d88

08105bc0 <memset>:
 8105bc0:	4402      	add	r2, r0
 8105bc2:	4603      	mov	r3, r0
 8105bc4:	4293      	cmp	r3, r2
 8105bc6:	d100      	bne.n	8105bca <memset+0xa>
 8105bc8:	4770      	bx	lr
 8105bca:	f803 1b01 	strb.w	r1, [r3], #1
 8105bce:	e7f9      	b.n	8105bc4 <memset+0x4>

08105bd0 <iprintf>:
 8105bd0:	b40f      	push	{r0, r1, r2, r3}
 8105bd2:	4b0a      	ldr	r3, [pc, #40]	; (8105bfc <iprintf+0x2c>)
 8105bd4:	b513      	push	{r0, r1, r4, lr}
 8105bd6:	681c      	ldr	r4, [r3, #0]
 8105bd8:	b124      	cbz	r4, 8105be4 <iprintf+0x14>
 8105bda:	69a3      	ldr	r3, [r4, #24]
 8105bdc:	b913      	cbnz	r3, 8105be4 <iprintf+0x14>
 8105bde:	4620      	mov	r0, r4
 8105be0:	f000 fa5e 	bl	81060a0 <__sinit>
 8105be4:	ab05      	add	r3, sp, #20
 8105be6:	9a04      	ldr	r2, [sp, #16]
 8105be8:	68a1      	ldr	r1, [r4, #8]
 8105bea:	9301      	str	r3, [sp, #4]
 8105bec:	4620      	mov	r0, r4
 8105bee:	f000 fc2f 	bl	8106450 <_vfiprintf_r>
 8105bf2:	b002      	add	sp, #8
 8105bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105bf8:	b004      	add	sp, #16
 8105bfa:	4770      	bx	lr
 8105bfc:	10000010 	.word	0x10000010

08105c00 <_puts_r>:
 8105c00:	b570      	push	{r4, r5, r6, lr}
 8105c02:	460e      	mov	r6, r1
 8105c04:	4605      	mov	r5, r0
 8105c06:	b118      	cbz	r0, 8105c10 <_puts_r+0x10>
 8105c08:	6983      	ldr	r3, [r0, #24]
 8105c0a:	b90b      	cbnz	r3, 8105c10 <_puts_r+0x10>
 8105c0c:	f000 fa48 	bl	81060a0 <__sinit>
 8105c10:	69ab      	ldr	r3, [r5, #24]
 8105c12:	68ac      	ldr	r4, [r5, #8]
 8105c14:	b913      	cbnz	r3, 8105c1c <_puts_r+0x1c>
 8105c16:	4628      	mov	r0, r5
 8105c18:	f000 fa42 	bl	81060a0 <__sinit>
 8105c1c:	4b2c      	ldr	r3, [pc, #176]	; (8105cd0 <_puts_r+0xd0>)
 8105c1e:	429c      	cmp	r4, r3
 8105c20:	d120      	bne.n	8105c64 <_puts_r+0x64>
 8105c22:	686c      	ldr	r4, [r5, #4]
 8105c24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105c26:	07db      	lsls	r3, r3, #31
 8105c28:	d405      	bmi.n	8105c36 <_puts_r+0x36>
 8105c2a:	89a3      	ldrh	r3, [r4, #12]
 8105c2c:	0598      	lsls	r0, r3, #22
 8105c2e:	d402      	bmi.n	8105c36 <_puts_r+0x36>
 8105c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105c32:	f000 fad3 	bl	81061dc <__retarget_lock_acquire_recursive>
 8105c36:	89a3      	ldrh	r3, [r4, #12]
 8105c38:	0719      	lsls	r1, r3, #28
 8105c3a:	d51d      	bpl.n	8105c78 <_puts_r+0x78>
 8105c3c:	6923      	ldr	r3, [r4, #16]
 8105c3e:	b1db      	cbz	r3, 8105c78 <_puts_r+0x78>
 8105c40:	3e01      	subs	r6, #1
 8105c42:	68a3      	ldr	r3, [r4, #8]
 8105c44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8105c48:	3b01      	subs	r3, #1
 8105c4a:	60a3      	str	r3, [r4, #8]
 8105c4c:	bb39      	cbnz	r1, 8105c9e <_puts_r+0x9e>
 8105c4e:	2b00      	cmp	r3, #0
 8105c50:	da38      	bge.n	8105cc4 <_puts_r+0xc4>
 8105c52:	4622      	mov	r2, r4
 8105c54:	210a      	movs	r1, #10
 8105c56:	4628      	mov	r0, r5
 8105c58:	f000 f848 	bl	8105cec <__swbuf_r>
 8105c5c:	3001      	adds	r0, #1
 8105c5e:	d011      	beq.n	8105c84 <_puts_r+0x84>
 8105c60:	250a      	movs	r5, #10
 8105c62:	e011      	b.n	8105c88 <_puts_r+0x88>
 8105c64:	4b1b      	ldr	r3, [pc, #108]	; (8105cd4 <_puts_r+0xd4>)
 8105c66:	429c      	cmp	r4, r3
 8105c68:	d101      	bne.n	8105c6e <_puts_r+0x6e>
 8105c6a:	68ac      	ldr	r4, [r5, #8]
 8105c6c:	e7da      	b.n	8105c24 <_puts_r+0x24>
 8105c6e:	4b1a      	ldr	r3, [pc, #104]	; (8105cd8 <_puts_r+0xd8>)
 8105c70:	429c      	cmp	r4, r3
 8105c72:	bf08      	it	eq
 8105c74:	68ec      	ldreq	r4, [r5, #12]
 8105c76:	e7d5      	b.n	8105c24 <_puts_r+0x24>
 8105c78:	4621      	mov	r1, r4
 8105c7a:	4628      	mov	r0, r5
 8105c7c:	f000 f888 	bl	8105d90 <__swsetup_r>
 8105c80:	2800      	cmp	r0, #0
 8105c82:	d0dd      	beq.n	8105c40 <_puts_r+0x40>
 8105c84:	f04f 35ff 	mov.w	r5, #4294967295
 8105c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105c8a:	07da      	lsls	r2, r3, #31
 8105c8c:	d405      	bmi.n	8105c9a <_puts_r+0x9a>
 8105c8e:	89a3      	ldrh	r3, [r4, #12]
 8105c90:	059b      	lsls	r3, r3, #22
 8105c92:	d402      	bmi.n	8105c9a <_puts_r+0x9a>
 8105c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105c96:	f000 faa2 	bl	81061de <__retarget_lock_release_recursive>
 8105c9a:	4628      	mov	r0, r5
 8105c9c:	bd70      	pop	{r4, r5, r6, pc}
 8105c9e:	2b00      	cmp	r3, #0
 8105ca0:	da04      	bge.n	8105cac <_puts_r+0xac>
 8105ca2:	69a2      	ldr	r2, [r4, #24]
 8105ca4:	429a      	cmp	r2, r3
 8105ca6:	dc06      	bgt.n	8105cb6 <_puts_r+0xb6>
 8105ca8:	290a      	cmp	r1, #10
 8105caa:	d004      	beq.n	8105cb6 <_puts_r+0xb6>
 8105cac:	6823      	ldr	r3, [r4, #0]
 8105cae:	1c5a      	adds	r2, r3, #1
 8105cb0:	6022      	str	r2, [r4, #0]
 8105cb2:	7019      	strb	r1, [r3, #0]
 8105cb4:	e7c5      	b.n	8105c42 <_puts_r+0x42>
 8105cb6:	4622      	mov	r2, r4
 8105cb8:	4628      	mov	r0, r5
 8105cba:	f000 f817 	bl	8105cec <__swbuf_r>
 8105cbe:	3001      	adds	r0, #1
 8105cc0:	d1bf      	bne.n	8105c42 <_puts_r+0x42>
 8105cc2:	e7df      	b.n	8105c84 <_puts_r+0x84>
 8105cc4:	6823      	ldr	r3, [r4, #0]
 8105cc6:	250a      	movs	r5, #10
 8105cc8:	1c5a      	adds	r2, r3, #1
 8105cca:	6022      	str	r2, [r4, #0]
 8105ccc:	701d      	strb	r5, [r3, #0]
 8105cce:	e7db      	b.n	8105c88 <_puts_r+0x88>
 8105cd0:	08106d08 	.word	0x08106d08
 8105cd4:	08106d28 	.word	0x08106d28
 8105cd8:	08106ce8 	.word	0x08106ce8

08105cdc <puts>:
 8105cdc:	4b02      	ldr	r3, [pc, #8]	; (8105ce8 <puts+0xc>)
 8105cde:	4601      	mov	r1, r0
 8105ce0:	6818      	ldr	r0, [r3, #0]
 8105ce2:	f7ff bf8d 	b.w	8105c00 <_puts_r>
 8105ce6:	bf00      	nop
 8105ce8:	10000010 	.word	0x10000010

08105cec <__swbuf_r>:
 8105cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105cee:	460e      	mov	r6, r1
 8105cf0:	4614      	mov	r4, r2
 8105cf2:	4605      	mov	r5, r0
 8105cf4:	b118      	cbz	r0, 8105cfe <__swbuf_r+0x12>
 8105cf6:	6983      	ldr	r3, [r0, #24]
 8105cf8:	b90b      	cbnz	r3, 8105cfe <__swbuf_r+0x12>
 8105cfa:	f000 f9d1 	bl	81060a0 <__sinit>
 8105cfe:	4b21      	ldr	r3, [pc, #132]	; (8105d84 <__swbuf_r+0x98>)
 8105d00:	429c      	cmp	r4, r3
 8105d02:	d12b      	bne.n	8105d5c <__swbuf_r+0x70>
 8105d04:	686c      	ldr	r4, [r5, #4]
 8105d06:	69a3      	ldr	r3, [r4, #24]
 8105d08:	60a3      	str	r3, [r4, #8]
 8105d0a:	89a3      	ldrh	r3, [r4, #12]
 8105d0c:	071a      	lsls	r2, r3, #28
 8105d0e:	d52f      	bpl.n	8105d70 <__swbuf_r+0x84>
 8105d10:	6923      	ldr	r3, [r4, #16]
 8105d12:	b36b      	cbz	r3, 8105d70 <__swbuf_r+0x84>
 8105d14:	6923      	ldr	r3, [r4, #16]
 8105d16:	6820      	ldr	r0, [r4, #0]
 8105d18:	1ac0      	subs	r0, r0, r3
 8105d1a:	6963      	ldr	r3, [r4, #20]
 8105d1c:	b2f6      	uxtb	r6, r6
 8105d1e:	4283      	cmp	r3, r0
 8105d20:	4637      	mov	r7, r6
 8105d22:	dc04      	bgt.n	8105d2e <__swbuf_r+0x42>
 8105d24:	4621      	mov	r1, r4
 8105d26:	4628      	mov	r0, r5
 8105d28:	f000 f926 	bl	8105f78 <_fflush_r>
 8105d2c:	bb30      	cbnz	r0, 8105d7c <__swbuf_r+0x90>
 8105d2e:	68a3      	ldr	r3, [r4, #8]
 8105d30:	3b01      	subs	r3, #1
 8105d32:	60a3      	str	r3, [r4, #8]
 8105d34:	6823      	ldr	r3, [r4, #0]
 8105d36:	1c5a      	adds	r2, r3, #1
 8105d38:	6022      	str	r2, [r4, #0]
 8105d3a:	701e      	strb	r6, [r3, #0]
 8105d3c:	6963      	ldr	r3, [r4, #20]
 8105d3e:	3001      	adds	r0, #1
 8105d40:	4283      	cmp	r3, r0
 8105d42:	d004      	beq.n	8105d4e <__swbuf_r+0x62>
 8105d44:	89a3      	ldrh	r3, [r4, #12]
 8105d46:	07db      	lsls	r3, r3, #31
 8105d48:	d506      	bpl.n	8105d58 <__swbuf_r+0x6c>
 8105d4a:	2e0a      	cmp	r6, #10
 8105d4c:	d104      	bne.n	8105d58 <__swbuf_r+0x6c>
 8105d4e:	4621      	mov	r1, r4
 8105d50:	4628      	mov	r0, r5
 8105d52:	f000 f911 	bl	8105f78 <_fflush_r>
 8105d56:	b988      	cbnz	r0, 8105d7c <__swbuf_r+0x90>
 8105d58:	4638      	mov	r0, r7
 8105d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8105d5c:	4b0a      	ldr	r3, [pc, #40]	; (8105d88 <__swbuf_r+0x9c>)
 8105d5e:	429c      	cmp	r4, r3
 8105d60:	d101      	bne.n	8105d66 <__swbuf_r+0x7a>
 8105d62:	68ac      	ldr	r4, [r5, #8]
 8105d64:	e7cf      	b.n	8105d06 <__swbuf_r+0x1a>
 8105d66:	4b09      	ldr	r3, [pc, #36]	; (8105d8c <__swbuf_r+0xa0>)
 8105d68:	429c      	cmp	r4, r3
 8105d6a:	bf08      	it	eq
 8105d6c:	68ec      	ldreq	r4, [r5, #12]
 8105d6e:	e7ca      	b.n	8105d06 <__swbuf_r+0x1a>
 8105d70:	4621      	mov	r1, r4
 8105d72:	4628      	mov	r0, r5
 8105d74:	f000 f80c 	bl	8105d90 <__swsetup_r>
 8105d78:	2800      	cmp	r0, #0
 8105d7a:	d0cb      	beq.n	8105d14 <__swbuf_r+0x28>
 8105d7c:	f04f 37ff 	mov.w	r7, #4294967295
 8105d80:	e7ea      	b.n	8105d58 <__swbuf_r+0x6c>
 8105d82:	bf00      	nop
 8105d84:	08106d08 	.word	0x08106d08
 8105d88:	08106d28 	.word	0x08106d28
 8105d8c:	08106ce8 	.word	0x08106ce8

08105d90 <__swsetup_r>:
 8105d90:	4b32      	ldr	r3, [pc, #200]	; (8105e5c <__swsetup_r+0xcc>)
 8105d92:	b570      	push	{r4, r5, r6, lr}
 8105d94:	681d      	ldr	r5, [r3, #0]
 8105d96:	4606      	mov	r6, r0
 8105d98:	460c      	mov	r4, r1
 8105d9a:	b125      	cbz	r5, 8105da6 <__swsetup_r+0x16>
 8105d9c:	69ab      	ldr	r3, [r5, #24]
 8105d9e:	b913      	cbnz	r3, 8105da6 <__swsetup_r+0x16>
 8105da0:	4628      	mov	r0, r5
 8105da2:	f000 f97d 	bl	81060a0 <__sinit>
 8105da6:	4b2e      	ldr	r3, [pc, #184]	; (8105e60 <__swsetup_r+0xd0>)
 8105da8:	429c      	cmp	r4, r3
 8105daa:	d10f      	bne.n	8105dcc <__swsetup_r+0x3c>
 8105dac:	686c      	ldr	r4, [r5, #4]
 8105dae:	89a3      	ldrh	r3, [r4, #12]
 8105db0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105db4:	0719      	lsls	r1, r3, #28
 8105db6:	d42c      	bmi.n	8105e12 <__swsetup_r+0x82>
 8105db8:	06dd      	lsls	r5, r3, #27
 8105dba:	d411      	bmi.n	8105de0 <__swsetup_r+0x50>
 8105dbc:	2309      	movs	r3, #9
 8105dbe:	6033      	str	r3, [r6, #0]
 8105dc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8105dc4:	81a3      	strh	r3, [r4, #12]
 8105dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8105dca:	e03e      	b.n	8105e4a <__swsetup_r+0xba>
 8105dcc:	4b25      	ldr	r3, [pc, #148]	; (8105e64 <__swsetup_r+0xd4>)
 8105dce:	429c      	cmp	r4, r3
 8105dd0:	d101      	bne.n	8105dd6 <__swsetup_r+0x46>
 8105dd2:	68ac      	ldr	r4, [r5, #8]
 8105dd4:	e7eb      	b.n	8105dae <__swsetup_r+0x1e>
 8105dd6:	4b24      	ldr	r3, [pc, #144]	; (8105e68 <__swsetup_r+0xd8>)
 8105dd8:	429c      	cmp	r4, r3
 8105dda:	bf08      	it	eq
 8105ddc:	68ec      	ldreq	r4, [r5, #12]
 8105dde:	e7e6      	b.n	8105dae <__swsetup_r+0x1e>
 8105de0:	0758      	lsls	r0, r3, #29
 8105de2:	d512      	bpl.n	8105e0a <__swsetup_r+0x7a>
 8105de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105de6:	b141      	cbz	r1, 8105dfa <__swsetup_r+0x6a>
 8105de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105dec:	4299      	cmp	r1, r3
 8105dee:	d002      	beq.n	8105df6 <__swsetup_r+0x66>
 8105df0:	4630      	mov	r0, r6
 8105df2:	f000 fa59 	bl	81062a8 <_free_r>
 8105df6:	2300      	movs	r3, #0
 8105df8:	6363      	str	r3, [r4, #52]	; 0x34
 8105dfa:	89a3      	ldrh	r3, [r4, #12]
 8105dfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8105e00:	81a3      	strh	r3, [r4, #12]
 8105e02:	2300      	movs	r3, #0
 8105e04:	6063      	str	r3, [r4, #4]
 8105e06:	6923      	ldr	r3, [r4, #16]
 8105e08:	6023      	str	r3, [r4, #0]
 8105e0a:	89a3      	ldrh	r3, [r4, #12]
 8105e0c:	f043 0308 	orr.w	r3, r3, #8
 8105e10:	81a3      	strh	r3, [r4, #12]
 8105e12:	6923      	ldr	r3, [r4, #16]
 8105e14:	b94b      	cbnz	r3, 8105e2a <__swsetup_r+0x9a>
 8105e16:	89a3      	ldrh	r3, [r4, #12]
 8105e18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8105e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105e20:	d003      	beq.n	8105e2a <__swsetup_r+0x9a>
 8105e22:	4621      	mov	r1, r4
 8105e24:	4630      	mov	r0, r6
 8105e26:	f000 f9ff 	bl	8106228 <__smakebuf_r>
 8105e2a:	89a0      	ldrh	r0, [r4, #12]
 8105e2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105e30:	f010 0301 	ands.w	r3, r0, #1
 8105e34:	d00a      	beq.n	8105e4c <__swsetup_r+0xbc>
 8105e36:	2300      	movs	r3, #0
 8105e38:	60a3      	str	r3, [r4, #8]
 8105e3a:	6963      	ldr	r3, [r4, #20]
 8105e3c:	425b      	negs	r3, r3
 8105e3e:	61a3      	str	r3, [r4, #24]
 8105e40:	6923      	ldr	r3, [r4, #16]
 8105e42:	b943      	cbnz	r3, 8105e56 <__swsetup_r+0xc6>
 8105e44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8105e48:	d1ba      	bne.n	8105dc0 <__swsetup_r+0x30>
 8105e4a:	bd70      	pop	{r4, r5, r6, pc}
 8105e4c:	0781      	lsls	r1, r0, #30
 8105e4e:	bf58      	it	pl
 8105e50:	6963      	ldrpl	r3, [r4, #20]
 8105e52:	60a3      	str	r3, [r4, #8]
 8105e54:	e7f4      	b.n	8105e40 <__swsetup_r+0xb0>
 8105e56:	2000      	movs	r0, #0
 8105e58:	e7f7      	b.n	8105e4a <__swsetup_r+0xba>
 8105e5a:	bf00      	nop
 8105e5c:	10000010 	.word	0x10000010
 8105e60:	08106d08 	.word	0x08106d08
 8105e64:	08106d28 	.word	0x08106d28
 8105e68:	08106ce8 	.word	0x08106ce8

08105e6c <__sflush_r>:
 8105e6c:	898a      	ldrh	r2, [r1, #12]
 8105e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105e72:	4605      	mov	r5, r0
 8105e74:	0710      	lsls	r0, r2, #28
 8105e76:	460c      	mov	r4, r1
 8105e78:	d458      	bmi.n	8105f2c <__sflush_r+0xc0>
 8105e7a:	684b      	ldr	r3, [r1, #4]
 8105e7c:	2b00      	cmp	r3, #0
 8105e7e:	dc05      	bgt.n	8105e8c <__sflush_r+0x20>
 8105e80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8105e82:	2b00      	cmp	r3, #0
 8105e84:	dc02      	bgt.n	8105e8c <__sflush_r+0x20>
 8105e86:	2000      	movs	r0, #0
 8105e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8105e8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105e8e:	2e00      	cmp	r6, #0
 8105e90:	d0f9      	beq.n	8105e86 <__sflush_r+0x1a>
 8105e92:	2300      	movs	r3, #0
 8105e94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8105e98:	682f      	ldr	r7, [r5, #0]
 8105e9a:	602b      	str	r3, [r5, #0]
 8105e9c:	d032      	beq.n	8105f04 <__sflush_r+0x98>
 8105e9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8105ea0:	89a3      	ldrh	r3, [r4, #12]
 8105ea2:	075a      	lsls	r2, r3, #29
 8105ea4:	d505      	bpl.n	8105eb2 <__sflush_r+0x46>
 8105ea6:	6863      	ldr	r3, [r4, #4]
 8105ea8:	1ac0      	subs	r0, r0, r3
 8105eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8105eac:	b10b      	cbz	r3, 8105eb2 <__sflush_r+0x46>
 8105eae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8105eb0:	1ac0      	subs	r0, r0, r3
 8105eb2:	2300      	movs	r3, #0
 8105eb4:	4602      	mov	r2, r0
 8105eb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105eb8:	6a21      	ldr	r1, [r4, #32]
 8105eba:	4628      	mov	r0, r5
 8105ebc:	47b0      	blx	r6
 8105ebe:	1c43      	adds	r3, r0, #1
 8105ec0:	89a3      	ldrh	r3, [r4, #12]
 8105ec2:	d106      	bne.n	8105ed2 <__sflush_r+0x66>
 8105ec4:	6829      	ldr	r1, [r5, #0]
 8105ec6:	291d      	cmp	r1, #29
 8105ec8:	d82c      	bhi.n	8105f24 <__sflush_r+0xb8>
 8105eca:	4a2a      	ldr	r2, [pc, #168]	; (8105f74 <__sflush_r+0x108>)
 8105ecc:	40ca      	lsrs	r2, r1
 8105ece:	07d6      	lsls	r6, r2, #31
 8105ed0:	d528      	bpl.n	8105f24 <__sflush_r+0xb8>
 8105ed2:	2200      	movs	r2, #0
 8105ed4:	6062      	str	r2, [r4, #4]
 8105ed6:	04d9      	lsls	r1, r3, #19
 8105ed8:	6922      	ldr	r2, [r4, #16]
 8105eda:	6022      	str	r2, [r4, #0]
 8105edc:	d504      	bpl.n	8105ee8 <__sflush_r+0x7c>
 8105ede:	1c42      	adds	r2, r0, #1
 8105ee0:	d101      	bne.n	8105ee6 <__sflush_r+0x7a>
 8105ee2:	682b      	ldr	r3, [r5, #0]
 8105ee4:	b903      	cbnz	r3, 8105ee8 <__sflush_r+0x7c>
 8105ee6:	6560      	str	r0, [r4, #84]	; 0x54
 8105ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105eea:	602f      	str	r7, [r5, #0]
 8105eec:	2900      	cmp	r1, #0
 8105eee:	d0ca      	beq.n	8105e86 <__sflush_r+0x1a>
 8105ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105ef4:	4299      	cmp	r1, r3
 8105ef6:	d002      	beq.n	8105efe <__sflush_r+0x92>
 8105ef8:	4628      	mov	r0, r5
 8105efa:	f000 f9d5 	bl	81062a8 <_free_r>
 8105efe:	2000      	movs	r0, #0
 8105f00:	6360      	str	r0, [r4, #52]	; 0x34
 8105f02:	e7c1      	b.n	8105e88 <__sflush_r+0x1c>
 8105f04:	6a21      	ldr	r1, [r4, #32]
 8105f06:	2301      	movs	r3, #1
 8105f08:	4628      	mov	r0, r5
 8105f0a:	47b0      	blx	r6
 8105f0c:	1c41      	adds	r1, r0, #1
 8105f0e:	d1c7      	bne.n	8105ea0 <__sflush_r+0x34>
 8105f10:	682b      	ldr	r3, [r5, #0]
 8105f12:	2b00      	cmp	r3, #0
 8105f14:	d0c4      	beq.n	8105ea0 <__sflush_r+0x34>
 8105f16:	2b1d      	cmp	r3, #29
 8105f18:	d001      	beq.n	8105f1e <__sflush_r+0xb2>
 8105f1a:	2b16      	cmp	r3, #22
 8105f1c:	d101      	bne.n	8105f22 <__sflush_r+0xb6>
 8105f1e:	602f      	str	r7, [r5, #0]
 8105f20:	e7b1      	b.n	8105e86 <__sflush_r+0x1a>
 8105f22:	89a3      	ldrh	r3, [r4, #12]
 8105f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105f28:	81a3      	strh	r3, [r4, #12]
 8105f2a:	e7ad      	b.n	8105e88 <__sflush_r+0x1c>
 8105f2c:	690f      	ldr	r7, [r1, #16]
 8105f2e:	2f00      	cmp	r7, #0
 8105f30:	d0a9      	beq.n	8105e86 <__sflush_r+0x1a>
 8105f32:	0793      	lsls	r3, r2, #30
 8105f34:	680e      	ldr	r6, [r1, #0]
 8105f36:	bf08      	it	eq
 8105f38:	694b      	ldreq	r3, [r1, #20]
 8105f3a:	600f      	str	r7, [r1, #0]
 8105f3c:	bf18      	it	ne
 8105f3e:	2300      	movne	r3, #0
 8105f40:	eba6 0807 	sub.w	r8, r6, r7
 8105f44:	608b      	str	r3, [r1, #8]
 8105f46:	f1b8 0f00 	cmp.w	r8, #0
 8105f4a:	dd9c      	ble.n	8105e86 <__sflush_r+0x1a>
 8105f4c:	6a21      	ldr	r1, [r4, #32]
 8105f4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8105f50:	4643      	mov	r3, r8
 8105f52:	463a      	mov	r2, r7
 8105f54:	4628      	mov	r0, r5
 8105f56:	47b0      	blx	r6
 8105f58:	2800      	cmp	r0, #0
 8105f5a:	dc06      	bgt.n	8105f6a <__sflush_r+0xfe>
 8105f5c:	89a3      	ldrh	r3, [r4, #12]
 8105f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105f62:	81a3      	strh	r3, [r4, #12]
 8105f64:	f04f 30ff 	mov.w	r0, #4294967295
 8105f68:	e78e      	b.n	8105e88 <__sflush_r+0x1c>
 8105f6a:	4407      	add	r7, r0
 8105f6c:	eba8 0800 	sub.w	r8, r8, r0
 8105f70:	e7e9      	b.n	8105f46 <__sflush_r+0xda>
 8105f72:	bf00      	nop
 8105f74:	20400001 	.word	0x20400001

08105f78 <_fflush_r>:
 8105f78:	b538      	push	{r3, r4, r5, lr}
 8105f7a:	690b      	ldr	r3, [r1, #16]
 8105f7c:	4605      	mov	r5, r0
 8105f7e:	460c      	mov	r4, r1
 8105f80:	b913      	cbnz	r3, 8105f88 <_fflush_r+0x10>
 8105f82:	2500      	movs	r5, #0
 8105f84:	4628      	mov	r0, r5
 8105f86:	bd38      	pop	{r3, r4, r5, pc}
 8105f88:	b118      	cbz	r0, 8105f92 <_fflush_r+0x1a>
 8105f8a:	6983      	ldr	r3, [r0, #24]
 8105f8c:	b90b      	cbnz	r3, 8105f92 <_fflush_r+0x1a>
 8105f8e:	f000 f887 	bl	81060a0 <__sinit>
 8105f92:	4b14      	ldr	r3, [pc, #80]	; (8105fe4 <_fflush_r+0x6c>)
 8105f94:	429c      	cmp	r4, r3
 8105f96:	d11b      	bne.n	8105fd0 <_fflush_r+0x58>
 8105f98:	686c      	ldr	r4, [r5, #4]
 8105f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8105f9e:	2b00      	cmp	r3, #0
 8105fa0:	d0ef      	beq.n	8105f82 <_fflush_r+0xa>
 8105fa2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8105fa4:	07d0      	lsls	r0, r2, #31
 8105fa6:	d404      	bmi.n	8105fb2 <_fflush_r+0x3a>
 8105fa8:	0599      	lsls	r1, r3, #22
 8105faa:	d402      	bmi.n	8105fb2 <_fflush_r+0x3a>
 8105fac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105fae:	f000 f915 	bl	81061dc <__retarget_lock_acquire_recursive>
 8105fb2:	4628      	mov	r0, r5
 8105fb4:	4621      	mov	r1, r4
 8105fb6:	f7ff ff59 	bl	8105e6c <__sflush_r>
 8105fba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105fbc:	07da      	lsls	r2, r3, #31
 8105fbe:	4605      	mov	r5, r0
 8105fc0:	d4e0      	bmi.n	8105f84 <_fflush_r+0xc>
 8105fc2:	89a3      	ldrh	r3, [r4, #12]
 8105fc4:	059b      	lsls	r3, r3, #22
 8105fc6:	d4dd      	bmi.n	8105f84 <_fflush_r+0xc>
 8105fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105fca:	f000 f908 	bl	81061de <__retarget_lock_release_recursive>
 8105fce:	e7d9      	b.n	8105f84 <_fflush_r+0xc>
 8105fd0:	4b05      	ldr	r3, [pc, #20]	; (8105fe8 <_fflush_r+0x70>)
 8105fd2:	429c      	cmp	r4, r3
 8105fd4:	d101      	bne.n	8105fda <_fflush_r+0x62>
 8105fd6:	68ac      	ldr	r4, [r5, #8]
 8105fd8:	e7df      	b.n	8105f9a <_fflush_r+0x22>
 8105fda:	4b04      	ldr	r3, [pc, #16]	; (8105fec <_fflush_r+0x74>)
 8105fdc:	429c      	cmp	r4, r3
 8105fde:	bf08      	it	eq
 8105fe0:	68ec      	ldreq	r4, [r5, #12]
 8105fe2:	e7da      	b.n	8105f9a <_fflush_r+0x22>
 8105fe4:	08106d08 	.word	0x08106d08
 8105fe8:	08106d28 	.word	0x08106d28
 8105fec:	08106ce8 	.word	0x08106ce8

08105ff0 <std>:
 8105ff0:	2300      	movs	r3, #0
 8105ff2:	b510      	push	{r4, lr}
 8105ff4:	4604      	mov	r4, r0
 8105ff6:	e9c0 3300 	strd	r3, r3, [r0]
 8105ffa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8105ffe:	6083      	str	r3, [r0, #8]
 8106000:	8181      	strh	r1, [r0, #12]
 8106002:	6643      	str	r3, [r0, #100]	; 0x64
 8106004:	81c2      	strh	r2, [r0, #14]
 8106006:	6183      	str	r3, [r0, #24]
 8106008:	4619      	mov	r1, r3
 810600a:	2208      	movs	r2, #8
 810600c:	305c      	adds	r0, #92	; 0x5c
 810600e:	f7ff fdd7 	bl	8105bc0 <memset>
 8106012:	4b05      	ldr	r3, [pc, #20]	; (8106028 <std+0x38>)
 8106014:	6263      	str	r3, [r4, #36]	; 0x24
 8106016:	4b05      	ldr	r3, [pc, #20]	; (810602c <std+0x3c>)
 8106018:	62a3      	str	r3, [r4, #40]	; 0x28
 810601a:	4b05      	ldr	r3, [pc, #20]	; (8106030 <std+0x40>)
 810601c:	62e3      	str	r3, [r4, #44]	; 0x2c
 810601e:	4b05      	ldr	r3, [pc, #20]	; (8106034 <std+0x44>)
 8106020:	6224      	str	r4, [r4, #32]
 8106022:	6323      	str	r3, [r4, #48]	; 0x30
 8106024:	bd10      	pop	{r4, pc}
 8106026:	bf00      	nop
 8106028:	081069f9 	.word	0x081069f9
 810602c:	08106a1b 	.word	0x08106a1b
 8106030:	08106a53 	.word	0x08106a53
 8106034:	08106a77 	.word	0x08106a77

08106038 <_cleanup_r>:
 8106038:	4901      	ldr	r1, [pc, #4]	; (8106040 <_cleanup_r+0x8>)
 810603a:	f000 b8af 	b.w	810619c <_fwalk_reent>
 810603e:	bf00      	nop
 8106040:	08105f79 	.word	0x08105f79

08106044 <__sfmoreglue>:
 8106044:	b570      	push	{r4, r5, r6, lr}
 8106046:	1e4a      	subs	r2, r1, #1
 8106048:	2568      	movs	r5, #104	; 0x68
 810604a:	4355      	muls	r5, r2
 810604c:	460e      	mov	r6, r1
 810604e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8106052:	f000 f979 	bl	8106348 <_malloc_r>
 8106056:	4604      	mov	r4, r0
 8106058:	b140      	cbz	r0, 810606c <__sfmoreglue+0x28>
 810605a:	2100      	movs	r1, #0
 810605c:	e9c0 1600 	strd	r1, r6, [r0]
 8106060:	300c      	adds	r0, #12
 8106062:	60a0      	str	r0, [r4, #8]
 8106064:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8106068:	f7ff fdaa 	bl	8105bc0 <memset>
 810606c:	4620      	mov	r0, r4
 810606e:	bd70      	pop	{r4, r5, r6, pc}

08106070 <__sfp_lock_acquire>:
 8106070:	4801      	ldr	r0, [pc, #4]	; (8106078 <__sfp_lock_acquire+0x8>)
 8106072:	f000 b8b3 	b.w	81061dc <__retarget_lock_acquire_recursive>
 8106076:	bf00      	nop
 8106078:	1000027c 	.word	0x1000027c

0810607c <__sfp_lock_release>:
 810607c:	4801      	ldr	r0, [pc, #4]	; (8106084 <__sfp_lock_release+0x8>)
 810607e:	f000 b8ae 	b.w	81061de <__retarget_lock_release_recursive>
 8106082:	bf00      	nop
 8106084:	1000027c 	.word	0x1000027c

08106088 <__sinit_lock_acquire>:
 8106088:	4801      	ldr	r0, [pc, #4]	; (8106090 <__sinit_lock_acquire+0x8>)
 810608a:	f000 b8a7 	b.w	81061dc <__retarget_lock_acquire_recursive>
 810608e:	bf00      	nop
 8106090:	10000277 	.word	0x10000277

08106094 <__sinit_lock_release>:
 8106094:	4801      	ldr	r0, [pc, #4]	; (810609c <__sinit_lock_release+0x8>)
 8106096:	f000 b8a2 	b.w	81061de <__retarget_lock_release_recursive>
 810609a:	bf00      	nop
 810609c:	10000277 	.word	0x10000277

081060a0 <__sinit>:
 81060a0:	b510      	push	{r4, lr}
 81060a2:	4604      	mov	r4, r0
 81060a4:	f7ff fff0 	bl	8106088 <__sinit_lock_acquire>
 81060a8:	69a3      	ldr	r3, [r4, #24]
 81060aa:	b11b      	cbz	r3, 81060b4 <__sinit+0x14>
 81060ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81060b0:	f7ff bff0 	b.w	8106094 <__sinit_lock_release>
 81060b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 81060b8:	6523      	str	r3, [r4, #80]	; 0x50
 81060ba:	4b13      	ldr	r3, [pc, #76]	; (8106108 <__sinit+0x68>)
 81060bc:	4a13      	ldr	r2, [pc, #76]	; (810610c <__sinit+0x6c>)
 81060be:	681b      	ldr	r3, [r3, #0]
 81060c0:	62a2      	str	r2, [r4, #40]	; 0x28
 81060c2:	42a3      	cmp	r3, r4
 81060c4:	bf04      	itt	eq
 81060c6:	2301      	moveq	r3, #1
 81060c8:	61a3      	streq	r3, [r4, #24]
 81060ca:	4620      	mov	r0, r4
 81060cc:	f000 f820 	bl	8106110 <__sfp>
 81060d0:	6060      	str	r0, [r4, #4]
 81060d2:	4620      	mov	r0, r4
 81060d4:	f000 f81c 	bl	8106110 <__sfp>
 81060d8:	60a0      	str	r0, [r4, #8]
 81060da:	4620      	mov	r0, r4
 81060dc:	f000 f818 	bl	8106110 <__sfp>
 81060e0:	2200      	movs	r2, #0
 81060e2:	60e0      	str	r0, [r4, #12]
 81060e4:	2104      	movs	r1, #4
 81060e6:	6860      	ldr	r0, [r4, #4]
 81060e8:	f7ff ff82 	bl	8105ff0 <std>
 81060ec:	68a0      	ldr	r0, [r4, #8]
 81060ee:	2201      	movs	r2, #1
 81060f0:	2109      	movs	r1, #9
 81060f2:	f7ff ff7d 	bl	8105ff0 <std>
 81060f6:	68e0      	ldr	r0, [r4, #12]
 81060f8:	2202      	movs	r2, #2
 81060fa:	2112      	movs	r1, #18
 81060fc:	f7ff ff78 	bl	8105ff0 <std>
 8106100:	2301      	movs	r3, #1
 8106102:	61a3      	str	r3, [r4, #24]
 8106104:	e7d2      	b.n	81060ac <__sinit+0xc>
 8106106:	bf00      	nop
 8106108:	08106ce4 	.word	0x08106ce4
 810610c:	08106039 	.word	0x08106039

08106110 <__sfp>:
 8106110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106112:	4607      	mov	r7, r0
 8106114:	f7ff ffac 	bl	8106070 <__sfp_lock_acquire>
 8106118:	4b1e      	ldr	r3, [pc, #120]	; (8106194 <__sfp+0x84>)
 810611a:	681e      	ldr	r6, [r3, #0]
 810611c:	69b3      	ldr	r3, [r6, #24]
 810611e:	b913      	cbnz	r3, 8106126 <__sfp+0x16>
 8106120:	4630      	mov	r0, r6
 8106122:	f7ff ffbd 	bl	81060a0 <__sinit>
 8106126:	3648      	adds	r6, #72	; 0x48
 8106128:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810612c:	3b01      	subs	r3, #1
 810612e:	d503      	bpl.n	8106138 <__sfp+0x28>
 8106130:	6833      	ldr	r3, [r6, #0]
 8106132:	b30b      	cbz	r3, 8106178 <__sfp+0x68>
 8106134:	6836      	ldr	r6, [r6, #0]
 8106136:	e7f7      	b.n	8106128 <__sfp+0x18>
 8106138:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810613c:	b9d5      	cbnz	r5, 8106174 <__sfp+0x64>
 810613e:	4b16      	ldr	r3, [pc, #88]	; (8106198 <__sfp+0x88>)
 8106140:	60e3      	str	r3, [r4, #12]
 8106142:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8106146:	6665      	str	r5, [r4, #100]	; 0x64
 8106148:	f000 f847 	bl	81061da <__retarget_lock_init_recursive>
 810614c:	f7ff ff96 	bl	810607c <__sfp_lock_release>
 8106150:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8106154:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8106158:	6025      	str	r5, [r4, #0]
 810615a:	61a5      	str	r5, [r4, #24]
 810615c:	2208      	movs	r2, #8
 810615e:	4629      	mov	r1, r5
 8106160:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8106164:	f7ff fd2c 	bl	8105bc0 <memset>
 8106168:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 810616c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8106170:	4620      	mov	r0, r4
 8106172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8106174:	3468      	adds	r4, #104	; 0x68
 8106176:	e7d9      	b.n	810612c <__sfp+0x1c>
 8106178:	2104      	movs	r1, #4
 810617a:	4638      	mov	r0, r7
 810617c:	f7ff ff62 	bl	8106044 <__sfmoreglue>
 8106180:	4604      	mov	r4, r0
 8106182:	6030      	str	r0, [r6, #0]
 8106184:	2800      	cmp	r0, #0
 8106186:	d1d5      	bne.n	8106134 <__sfp+0x24>
 8106188:	f7ff ff78 	bl	810607c <__sfp_lock_release>
 810618c:	230c      	movs	r3, #12
 810618e:	603b      	str	r3, [r7, #0]
 8106190:	e7ee      	b.n	8106170 <__sfp+0x60>
 8106192:	bf00      	nop
 8106194:	08106ce4 	.word	0x08106ce4
 8106198:	ffff0001 	.word	0xffff0001

0810619c <_fwalk_reent>:
 810619c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81061a0:	4606      	mov	r6, r0
 81061a2:	4688      	mov	r8, r1
 81061a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 81061a8:	2700      	movs	r7, #0
 81061aa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81061ae:	f1b9 0901 	subs.w	r9, r9, #1
 81061b2:	d505      	bpl.n	81061c0 <_fwalk_reent+0x24>
 81061b4:	6824      	ldr	r4, [r4, #0]
 81061b6:	2c00      	cmp	r4, #0
 81061b8:	d1f7      	bne.n	81061aa <_fwalk_reent+0xe>
 81061ba:	4638      	mov	r0, r7
 81061bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81061c0:	89ab      	ldrh	r3, [r5, #12]
 81061c2:	2b01      	cmp	r3, #1
 81061c4:	d907      	bls.n	81061d6 <_fwalk_reent+0x3a>
 81061c6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81061ca:	3301      	adds	r3, #1
 81061cc:	d003      	beq.n	81061d6 <_fwalk_reent+0x3a>
 81061ce:	4629      	mov	r1, r5
 81061d0:	4630      	mov	r0, r6
 81061d2:	47c0      	blx	r8
 81061d4:	4307      	orrs	r7, r0
 81061d6:	3568      	adds	r5, #104	; 0x68
 81061d8:	e7e9      	b.n	81061ae <_fwalk_reent+0x12>

081061da <__retarget_lock_init_recursive>:
 81061da:	4770      	bx	lr

081061dc <__retarget_lock_acquire_recursive>:
 81061dc:	4770      	bx	lr

081061de <__retarget_lock_release_recursive>:
 81061de:	4770      	bx	lr

081061e0 <__swhatbuf_r>:
 81061e0:	b570      	push	{r4, r5, r6, lr}
 81061e2:	460e      	mov	r6, r1
 81061e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81061e8:	2900      	cmp	r1, #0
 81061ea:	b096      	sub	sp, #88	; 0x58
 81061ec:	4614      	mov	r4, r2
 81061ee:	461d      	mov	r5, r3
 81061f0:	da07      	bge.n	8106202 <__swhatbuf_r+0x22>
 81061f2:	2300      	movs	r3, #0
 81061f4:	602b      	str	r3, [r5, #0]
 81061f6:	89b3      	ldrh	r3, [r6, #12]
 81061f8:	061a      	lsls	r2, r3, #24
 81061fa:	d410      	bmi.n	810621e <__swhatbuf_r+0x3e>
 81061fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8106200:	e00e      	b.n	8106220 <__swhatbuf_r+0x40>
 8106202:	466a      	mov	r2, sp
 8106204:	f000 fc5e 	bl	8106ac4 <_fstat_r>
 8106208:	2800      	cmp	r0, #0
 810620a:	dbf2      	blt.n	81061f2 <__swhatbuf_r+0x12>
 810620c:	9a01      	ldr	r2, [sp, #4]
 810620e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8106212:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8106216:	425a      	negs	r2, r3
 8106218:	415a      	adcs	r2, r3
 810621a:	602a      	str	r2, [r5, #0]
 810621c:	e7ee      	b.n	81061fc <__swhatbuf_r+0x1c>
 810621e:	2340      	movs	r3, #64	; 0x40
 8106220:	2000      	movs	r0, #0
 8106222:	6023      	str	r3, [r4, #0]
 8106224:	b016      	add	sp, #88	; 0x58
 8106226:	bd70      	pop	{r4, r5, r6, pc}

08106228 <__smakebuf_r>:
 8106228:	898b      	ldrh	r3, [r1, #12]
 810622a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810622c:	079d      	lsls	r5, r3, #30
 810622e:	4606      	mov	r6, r0
 8106230:	460c      	mov	r4, r1
 8106232:	d507      	bpl.n	8106244 <__smakebuf_r+0x1c>
 8106234:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8106238:	6023      	str	r3, [r4, #0]
 810623a:	6123      	str	r3, [r4, #16]
 810623c:	2301      	movs	r3, #1
 810623e:	6163      	str	r3, [r4, #20]
 8106240:	b002      	add	sp, #8
 8106242:	bd70      	pop	{r4, r5, r6, pc}
 8106244:	ab01      	add	r3, sp, #4
 8106246:	466a      	mov	r2, sp
 8106248:	f7ff ffca 	bl	81061e0 <__swhatbuf_r>
 810624c:	9900      	ldr	r1, [sp, #0]
 810624e:	4605      	mov	r5, r0
 8106250:	4630      	mov	r0, r6
 8106252:	f000 f879 	bl	8106348 <_malloc_r>
 8106256:	b948      	cbnz	r0, 810626c <__smakebuf_r+0x44>
 8106258:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810625c:	059a      	lsls	r2, r3, #22
 810625e:	d4ef      	bmi.n	8106240 <__smakebuf_r+0x18>
 8106260:	f023 0303 	bic.w	r3, r3, #3
 8106264:	f043 0302 	orr.w	r3, r3, #2
 8106268:	81a3      	strh	r3, [r4, #12]
 810626a:	e7e3      	b.n	8106234 <__smakebuf_r+0xc>
 810626c:	4b0d      	ldr	r3, [pc, #52]	; (81062a4 <__smakebuf_r+0x7c>)
 810626e:	62b3      	str	r3, [r6, #40]	; 0x28
 8106270:	89a3      	ldrh	r3, [r4, #12]
 8106272:	6020      	str	r0, [r4, #0]
 8106274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8106278:	81a3      	strh	r3, [r4, #12]
 810627a:	9b00      	ldr	r3, [sp, #0]
 810627c:	6163      	str	r3, [r4, #20]
 810627e:	9b01      	ldr	r3, [sp, #4]
 8106280:	6120      	str	r0, [r4, #16]
 8106282:	b15b      	cbz	r3, 810629c <__smakebuf_r+0x74>
 8106284:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106288:	4630      	mov	r0, r6
 810628a:	f000 fc2d 	bl	8106ae8 <_isatty_r>
 810628e:	b128      	cbz	r0, 810629c <__smakebuf_r+0x74>
 8106290:	89a3      	ldrh	r3, [r4, #12]
 8106292:	f023 0303 	bic.w	r3, r3, #3
 8106296:	f043 0301 	orr.w	r3, r3, #1
 810629a:	81a3      	strh	r3, [r4, #12]
 810629c:	89a0      	ldrh	r0, [r4, #12]
 810629e:	4305      	orrs	r5, r0
 81062a0:	81a5      	strh	r5, [r4, #12]
 81062a2:	e7cd      	b.n	8106240 <__smakebuf_r+0x18>
 81062a4:	08106039 	.word	0x08106039

081062a8 <_free_r>:
 81062a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81062aa:	2900      	cmp	r1, #0
 81062ac:	d048      	beq.n	8106340 <_free_r+0x98>
 81062ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81062b2:	9001      	str	r0, [sp, #4]
 81062b4:	2b00      	cmp	r3, #0
 81062b6:	f1a1 0404 	sub.w	r4, r1, #4
 81062ba:	bfb8      	it	lt
 81062bc:	18e4      	addlt	r4, r4, r3
 81062be:	f000 fc35 	bl	8106b2c <__malloc_lock>
 81062c2:	4a20      	ldr	r2, [pc, #128]	; (8106344 <_free_r+0x9c>)
 81062c4:	9801      	ldr	r0, [sp, #4]
 81062c6:	6813      	ldr	r3, [r2, #0]
 81062c8:	4615      	mov	r5, r2
 81062ca:	b933      	cbnz	r3, 81062da <_free_r+0x32>
 81062cc:	6063      	str	r3, [r4, #4]
 81062ce:	6014      	str	r4, [r2, #0]
 81062d0:	b003      	add	sp, #12
 81062d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81062d6:	f000 bc2f 	b.w	8106b38 <__malloc_unlock>
 81062da:	42a3      	cmp	r3, r4
 81062dc:	d90b      	bls.n	81062f6 <_free_r+0x4e>
 81062de:	6821      	ldr	r1, [r4, #0]
 81062e0:	1862      	adds	r2, r4, r1
 81062e2:	4293      	cmp	r3, r2
 81062e4:	bf04      	itt	eq
 81062e6:	681a      	ldreq	r2, [r3, #0]
 81062e8:	685b      	ldreq	r3, [r3, #4]
 81062ea:	6063      	str	r3, [r4, #4]
 81062ec:	bf04      	itt	eq
 81062ee:	1852      	addeq	r2, r2, r1
 81062f0:	6022      	streq	r2, [r4, #0]
 81062f2:	602c      	str	r4, [r5, #0]
 81062f4:	e7ec      	b.n	81062d0 <_free_r+0x28>
 81062f6:	461a      	mov	r2, r3
 81062f8:	685b      	ldr	r3, [r3, #4]
 81062fa:	b10b      	cbz	r3, 8106300 <_free_r+0x58>
 81062fc:	42a3      	cmp	r3, r4
 81062fe:	d9fa      	bls.n	81062f6 <_free_r+0x4e>
 8106300:	6811      	ldr	r1, [r2, #0]
 8106302:	1855      	adds	r5, r2, r1
 8106304:	42a5      	cmp	r5, r4
 8106306:	d10b      	bne.n	8106320 <_free_r+0x78>
 8106308:	6824      	ldr	r4, [r4, #0]
 810630a:	4421      	add	r1, r4
 810630c:	1854      	adds	r4, r2, r1
 810630e:	42a3      	cmp	r3, r4
 8106310:	6011      	str	r1, [r2, #0]
 8106312:	d1dd      	bne.n	81062d0 <_free_r+0x28>
 8106314:	681c      	ldr	r4, [r3, #0]
 8106316:	685b      	ldr	r3, [r3, #4]
 8106318:	6053      	str	r3, [r2, #4]
 810631a:	4421      	add	r1, r4
 810631c:	6011      	str	r1, [r2, #0]
 810631e:	e7d7      	b.n	81062d0 <_free_r+0x28>
 8106320:	d902      	bls.n	8106328 <_free_r+0x80>
 8106322:	230c      	movs	r3, #12
 8106324:	6003      	str	r3, [r0, #0]
 8106326:	e7d3      	b.n	81062d0 <_free_r+0x28>
 8106328:	6825      	ldr	r5, [r4, #0]
 810632a:	1961      	adds	r1, r4, r5
 810632c:	428b      	cmp	r3, r1
 810632e:	bf04      	itt	eq
 8106330:	6819      	ldreq	r1, [r3, #0]
 8106332:	685b      	ldreq	r3, [r3, #4]
 8106334:	6063      	str	r3, [r4, #4]
 8106336:	bf04      	itt	eq
 8106338:	1949      	addeq	r1, r1, r5
 810633a:	6021      	streq	r1, [r4, #0]
 810633c:	6054      	str	r4, [r2, #4]
 810633e:	e7c7      	b.n	81062d0 <_free_r+0x28>
 8106340:	b003      	add	sp, #12
 8106342:	bd30      	pop	{r4, r5, pc}
 8106344:	10000094 	.word	0x10000094

08106348 <_malloc_r>:
 8106348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810634a:	1ccd      	adds	r5, r1, #3
 810634c:	f025 0503 	bic.w	r5, r5, #3
 8106350:	3508      	adds	r5, #8
 8106352:	2d0c      	cmp	r5, #12
 8106354:	bf38      	it	cc
 8106356:	250c      	movcc	r5, #12
 8106358:	2d00      	cmp	r5, #0
 810635a:	4606      	mov	r6, r0
 810635c:	db01      	blt.n	8106362 <_malloc_r+0x1a>
 810635e:	42a9      	cmp	r1, r5
 8106360:	d903      	bls.n	810636a <_malloc_r+0x22>
 8106362:	230c      	movs	r3, #12
 8106364:	6033      	str	r3, [r6, #0]
 8106366:	2000      	movs	r0, #0
 8106368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810636a:	f000 fbdf 	bl	8106b2c <__malloc_lock>
 810636e:	4921      	ldr	r1, [pc, #132]	; (81063f4 <_malloc_r+0xac>)
 8106370:	680a      	ldr	r2, [r1, #0]
 8106372:	4614      	mov	r4, r2
 8106374:	b99c      	cbnz	r4, 810639e <_malloc_r+0x56>
 8106376:	4f20      	ldr	r7, [pc, #128]	; (81063f8 <_malloc_r+0xb0>)
 8106378:	683b      	ldr	r3, [r7, #0]
 810637a:	b923      	cbnz	r3, 8106386 <_malloc_r+0x3e>
 810637c:	4621      	mov	r1, r4
 810637e:	4630      	mov	r0, r6
 8106380:	f000 fb2a 	bl	81069d8 <_sbrk_r>
 8106384:	6038      	str	r0, [r7, #0]
 8106386:	4629      	mov	r1, r5
 8106388:	4630      	mov	r0, r6
 810638a:	f000 fb25 	bl	81069d8 <_sbrk_r>
 810638e:	1c43      	adds	r3, r0, #1
 8106390:	d123      	bne.n	81063da <_malloc_r+0x92>
 8106392:	230c      	movs	r3, #12
 8106394:	6033      	str	r3, [r6, #0]
 8106396:	4630      	mov	r0, r6
 8106398:	f000 fbce 	bl	8106b38 <__malloc_unlock>
 810639c:	e7e3      	b.n	8106366 <_malloc_r+0x1e>
 810639e:	6823      	ldr	r3, [r4, #0]
 81063a0:	1b5b      	subs	r3, r3, r5
 81063a2:	d417      	bmi.n	81063d4 <_malloc_r+0x8c>
 81063a4:	2b0b      	cmp	r3, #11
 81063a6:	d903      	bls.n	81063b0 <_malloc_r+0x68>
 81063a8:	6023      	str	r3, [r4, #0]
 81063aa:	441c      	add	r4, r3
 81063ac:	6025      	str	r5, [r4, #0]
 81063ae:	e004      	b.n	81063ba <_malloc_r+0x72>
 81063b0:	6863      	ldr	r3, [r4, #4]
 81063b2:	42a2      	cmp	r2, r4
 81063b4:	bf0c      	ite	eq
 81063b6:	600b      	streq	r3, [r1, #0]
 81063b8:	6053      	strne	r3, [r2, #4]
 81063ba:	4630      	mov	r0, r6
 81063bc:	f000 fbbc 	bl	8106b38 <__malloc_unlock>
 81063c0:	f104 000b 	add.w	r0, r4, #11
 81063c4:	1d23      	adds	r3, r4, #4
 81063c6:	f020 0007 	bic.w	r0, r0, #7
 81063ca:	1ac2      	subs	r2, r0, r3
 81063cc:	d0cc      	beq.n	8106368 <_malloc_r+0x20>
 81063ce:	1a1b      	subs	r3, r3, r0
 81063d0:	50a3      	str	r3, [r4, r2]
 81063d2:	e7c9      	b.n	8106368 <_malloc_r+0x20>
 81063d4:	4622      	mov	r2, r4
 81063d6:	6864      	ldr	r4, [r4, #4]
 81063d8:	e7cc      	b.n	8106374 <_malloc_r+0x2c>
 81063da:	1cc4      	adds	r4, r0, #3
 81063dc:	f024 0403 	bic.w	r4, r4, #3
 81063e0:	42a0      	cmp	r0, r4
 81063e2:	d0e3      	beq.n	81063ac <_malloc_r+0x64>
 81063e4:	1a21      	subs	r1, r4, r0
 81063e6:	4630      	mov	r0, r6
 81063e8:	f000 faf6 	bl	81069d8 <_sbrk_r>
 81063ec:	3001      	adds	r0, #1
 81063ee:	d1dd      	bne.n	81063ac <_malloc_r+0x64>
 81063f0:	e7cf      	b.n	8106392 <_malloc_r+0x4a>
 81063f2:	bf00      	nop
 81063f4:	10000094 	.word	0x10000094
 81063f8:	10000098 	.word	0x10000098

081063fc <__sfputc_r>:
 81063fc:	6893      	ldr	r3, [r2, #8]
 81063fe:	3b01      	subs	r3, #1
 8106400:	2b00      	cmp	r3, #0
 8106402:	b410      	push	{r4}
 8106404:	6093      	str	r3, [r2, #8]
 8106406:	da08      	bge.n	810641a <__sfputc_r+0x1e>
 8106408:	6994      	ldr	r4, [r2, #24]
 810640a:	42a3      	cmp	r3, r4
 810640c:	db01      	blt.n	8106412 <__sfputc_r+0x16>
 810640e:	290a      	cmp	r1, #10
 8106410:	d103      	bne.n	810641a <__sfputc_r+0x1e>
 8106412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8106416:	f7ff bc69 	b.w	8105cec <__swbuf_r>
 810641a:	6813      	ldr	r3, [r2, #0]
 810641c:	1c58      	adds	r0, r3, #1
 810641e:	6010      	str	r0, [r2, #0]
 8106420:	7019      	strb	r1, [r3, #0]
 8106422:	4608      	mov	r0, r1
 8106424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8106428:	4770      	bx	lr

0810642a <__sfputs_r>:
 810642a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810642c:	4606      	mov	r6, r0
 810642e:	460f      	mov	r7, r1
 8106430:	4614      	mov	r4, r2
 8106432:	18d5      	adds	r5, r2, r3
 8106434:	42ac      	cmp	r4, r5
 8106436:	d101      	bne.n	810643c <__sfputs_r+0x12>
 8106438:	2000      	movs	r0, #0
 810643a:	e007      	b.n	810644c <__sfputs_r+0x22>
 810643c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106440:	463a      	mov	r2, r7
 8106442:	4630      	mov	r0, r6
 8106444:	f7ff ffda 	bl	81063fc <__sfputc_r>
 8106448:	1c43      	adds	r3, r0, #1
 810644a:	d1f3      	bne.n	8106434 <__sfputs_r+0xa>
 810644c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08106450 <_vfiprintf_r>:
 8106450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106454:	460d      	mov	r5, r1
 8106456:	b09d      	sub	sp, #116	; 0x74
 8106458:	4614      	mov	r4, r2
 810645a:	4698      	mov	r8, r3
 810645c:	4606      	mov	r6, r0
 810645e:	b118      	cbz	r0, 8106468 <_vfiprintf_r+0x18>
 8106460:	6983      	ldr	r3, [r0, #24]
 8106462:	b90b      	cbnz	r3, 8106468 <_vfiprintf_r+0x18>
 8106464:	f7ff fe1c 	bl	81060a0 <__sinit>
 8106468:	4b89      	ldr	r3, [pc, #548]	; (8106690 <_vfiprintf_r+0x240>)
 810646a:	429d      	cmp	r5, r3
 810646c:	d11b      	bne.n	81064a6 <_vfiprintf_r+0x56>
 810646e:	6875      	ldr	r5, [r6, #4]
 8106470:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106472:	07d9      	lsls	r1, r3, #31
 8106474:	d405      	bmi.n	8106482 <_vfiprintf_r+0x32>
 8106476:	89ab      	ldrh	r3, [r5, #12]
 8106478:	059a      	lsls	r2, r3, #22
 810647a:	d402      	bmi.n	8106482 <_vfiprintf_r+0x32>
 810647c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810647e:	f7ff fead 	bl	81061dc <__retarget_lock_acquire_recursive>
 8106482:	89ab      	ldrh	r3, [r5, #12]
 8106484:	071b      	lsls	r3, r3, #28
 8106486:	d501      	bpl.n	810648c <_vfiprintf_r+0x3c>
 8106488:	692b      	ldr	r3, [r5, #16]
 810648a:	b9eb      	cbnz	r3, 81064c8 <_vfiprintf_r+0x78>
 810648c:	4629      	mov	r1, r5
 810648e:	4630      	mov	r0, r6
 8106490:	f7ff fc7e 	bl	8105d90 <__swsetup_r>
 8106494:	b1c0      	cbz	r0, 81064c8 <_vfiprintf_r+0x78>
 8106496:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106498:	07dc      	lsls	r4, r3, #31
 810649a:	d50e      	bpl.n	81064ba <_vfiprintf_r+0x6a>
 810649c:	f04f 30ff 	mov.w	r0, #4294967295
 81064a0:	b01d      	add	sp, #116	; 0x74
 81064a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81064a6:	4b7b      	ldr	r3, [pc, #492]	; (8106694 <_vfiprintf_r+0x244>)
 81064a8:	429d      	cmp	r5, r3
 81064aa:	d101      	bne.n	81064b0 <_vfiprintf_r+0x60>
 81064ac:	68b5      	ldr	r5, [r6, #8]
 81064ae:	e7df      	b.n	8106470 <_vfiprintf_r+0x20>
 81064b0:	4b79      	ldr	r3, [pc, #484]	; (8106698 <_vfiprintf_r+0x248>)
 81064b2:	429d      	cmp	r5, r3
 81064b4:	bf08      	it	eq
 81064b6:	68f5      	ldreq	r5, [r6, #12]
 81064b8:	e7da      	b.n	8106470 <_vfiprintf_r+0x20>
 81064ba:	89ab      	ldrh	r3, [r5, #12]
 81064bc:	0598      	lsls	r0, r3, #22
 81064be:	d4ed      	bmi.n	810649c <_vfiprintf_r+0x4c>
 81064c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81064c2:	f7ff fe8c 	bl	81061de <__retarget_lock_release_recursive>
 81064c6:	e7e9      	b.n	810649c <_vfiprintf_r+0x4c>
 81064c8:	2300      	movs	r3, #0
 81064ca:	9309      	str	r3, [sp, #36]	; 0x24
 81064cc:	2320      	movs	r3, #32
 81064ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 81064d2:	f8cd 800c 	str.w	r8, [sp, #12]
 81064d6:	2330      	movs	r3, #48	; 0x30
 81064d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810669c <_vfiprintf_r+0x24c>
 81064dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 81064e0:	f04f 0901 	mov.w	r9, #1
 81064e4:	4623      	mov	r3, r4
 81064e6:	469a      	mov	sl, r3
 81064e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 81064ec:	b10a      	cbz	r2, 81064f2 <_vfiprintf_r+0xa2>
 81064ee:	2a25      	cmp	r2, #37	; 0x25
 81064f0:	d1f9      	bne.n	81064e6 <_vfiprintf_r+0x96>
 81064f2:	ebba 0b04 	subs.w	fp, sl, r4
 81064f6:	d00b      	beq.n	8106510 <_vfiprintf_r+0xc0>
 81064f8:	465b      	mov	r3, fp
 81064fa:	4622      	mov	r2, r4
 81064fc:	4629      	mov	r1, r5
 81064fe:	4630      	mov	r0, r6
 8106500:	f7ff ff93 	bl	810642a <__sfputs_r>
 8106504:	3001      	adds	r0, #1
 8106506:	f000 80aa 	beq.w	810665e <_vfiprintf_r+0x20e>
 810650a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810650c:	445a      	add	r2, fp
 810650e:	9209      	str	r2, [sp, #36]	; 0x24
 8106510:	f89a 3000 	ldrb.w	r3, [sl]
 8106514:	2b00      	cmp	r3, #0
 8106516:	f000 80a2 	beq.w	810665e <_vfiprintf_r+0x20e>
 810651a:	2300      	movs	r3, #0
 810651c:	f04f 32ff 	mov.w	r2, #4294967295
 8106520:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106524:	f10a 0a01 	add.w	sl, sl, #1
 8106528:	9304      	str	r3, [sp, #16]
 810652a:	9307      	str	r3, [sp, #28]
 810652c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8106530:	931a      	str	r3, [sp, #104]	; 0x68
 8106532:	4654      	mov	r4, sl
 8106534:	2205      	movs	r2, #5
 8106536:	f814 1b01 	ldrb.w	r1, [r4], #1
 810653a:	4858      	ldr	r0, [pc, #352]	; (810669c <_vfiprintf_r+0x24c>)
 810653c:	f7f9 fed0 	bl	81002e0 <memchr>
 8106540:	9a04      	ldr	r2, [sp, #16]
 8106542:	b9d8      	cbnz	r0, 810657c <_vfiprintf_r+0x12c>
 8106544:	06d1      	lsls	r1, r2, #27
 8106546:	bf44      	itt	mi
 8106548:	2320      	movmi	r3, #32
 810654a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810654e:	0713      	lsls	r3, r2, #28
 8106550:	bf44      	itt	mi
 8106552:	232b      	movmi	r3, #43	; 0x2b
 8106554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106558:	f89a 3000 	ldrb.w	r3, [sl]
 810655c:	2b2a      	cmp	r3, #42	; 0x2a
 810655e:	d015      	beq.n	810658c <_vfiprintf_r+0x13c>
 8106560:	9a07      	ldr	r2, [sp, #28]
 8106562:	4654      	mov	r4, sl
 8106564:	2000      	movs	r0, #0
 8106566:	f04f 0c0a 	mov.w	ip, #10
 810656a:	4621      	mov	r1, r4
 810656c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106570:	3b30      	subs	r3, #48	; 0x30
 8106572:	2b09      	cmp	r3, #9
 8106574:	d94e      	bls.n	8106614 <_vfiprintf_r+0x1c4>
 8106576:	b1b0      	cbz	r0, 81065a6 <_vfiprintf_r+0x156>
 8106578:	9207      	str	r2, [sp, #28]
 810657a:	e014      	b.n	81065a6 <_vfiprintf_r+0x156>
 810657c:	eba0 0308 	sub.w	r3, r0, r8
 8106580:	fa09 f303 	lsl.w	r3, r9, r3
 8106584:	4313      	orrs	r3, r2
 8106586:	9304      	str	r3, [sp, #16]
 8106588:	46a2      	mov	sl, r4
 810658a:	e7d2      	b.n	8106532 <_vfiprintf_r+0xe2>
 810658c:	9b03      	ldr	r3, [sp, #12]
 810658e:	1d19      	adds	r1, r3, #4
 8106590:	681b      	ldr	r3, [r3, #0]
 8106592:	9103      	str	r1, [sp, #12]
 8106594:	2b00      	cmp	r3, #0
 8106596:	bfbb      	ittet	lt
 8106598:	425b      	neglt	r3, r3
 810659a:	f042 0202 	orrlt.w	r2, r2, #2
 810659e:	9307      	strge	r3, [sp, #28]
 81065a0:	9307      	strlt	r3, [sp, #28]
 81065a2:	bfb8      	it	lt
 81065a4:	9204      	strlt	r2, [sp, #16]
 81065a6:	7823      	ldrb	r3, [r4, #0]
 81065a8:	2b2e      	cmp	r3, #46	; 0x2e
 81065aa:	d10c      	bne.n	81065c6 <_vfiprintf_r+0x176>
 81065ac:	7863      	ldrb	r3, [r4, #1]
 81065ae:	2b2a      	cmp	r3, #42	; 0x2a
 81065b0:	d135      	bne.n	810661e <_vfiprintf_r+0x1ce>
 81065b2:	9b03      	ldr	r3, [sp, #12]
 81065b4:	1d1a      	adds	r2, r3, #4
 81065b6:	681b      	ldr	r3, [r3, #0]
 81065b8:	9203      	str	r2, [sp, #12]
 81065ba:	2b00      	cmp	r3, #0
 81065bc:	bfb8      	it	lt
 81065be:	f04f 33ff 	movlt.w	r3, #4294967295
 81065c2:	3402      	adds	r4, #2
 81065c4:	9305      	str	r3, [sp, #20]
 81065c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 81066ac <_vfiprintf_r+0x25c>
 81065ca:	7821      	ldrb	r1, [r4, #0]
 81065cc:	2203      	movs	r2, #3
 81065ce:	4650      	mov	r0, sl
 81065d0:	f7f9 fe86 	bl	81002e0 <memchr>
 81065d4:	b140      	cbz	r0, 81065e8 <_vfiprintf_r+0x198>
 81065d6:	2340      	movs	r3, #64	; 0x40
 81065d8:	eba0 000a 	sub.w	r0, r0, sl
 81065dc:	fa03 f000 	lsl.w	r0, r3, r0
 81065e0:	9b04      	ldr	r3, [sp, #16]
 81065e2:	4303      	orrs	r3, r0
 81065e4:	3401      	adds	r4, #1
 81065e6:	9304      	str	r3, [sp, #16]
 81065e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81065ec:	482c      	ldr	r0, [pc, #176]	; (81066a0 <_vfiprintf_r+0x250>)
 81065ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 81065f2:	2206      	movs	r2, #6
 81065f4:	f7f9 fe74 	bl	81002e0 <memchr>
 81065f8:	2800      	cmp	r0, #0
 81065fa:	d03f      	beq.n	810667c <_vfiprintf_r+0x22c>
 81065fc:	4b29      	ldr	r3, [pc, #164]	; (81066a4 <_vfiprintf_r+0x254>)
 81065fe:	bb1b      	cbnz	r3, 8106648 <_vfiprintf_r+0x1f8>
 8106600:	9b03      	ldr	r3, [sp, #12]
 8106602:	3307      	adds	r3, #7
 8106604:	f023 0307 	bic.w	r3, r3, #7
 8106608:	3308      	adds	r3, #8
 810660a:	9303      	str	r3, [sp, #12]
 810660c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810660e:	443b      	add	r3, r7
 8106610:	9309      	str	r3, [sp, #36]	; 0x24
 8106612:	e767      	b.n	81064e4 <_vfiprintf_r+0x94>
 8106614:	fb0c 3202 	mla	r2, ip, r2, r3
 8106618:	460c      	mov	r4, r1
 810661a:	2001      	movs	r0, #1
 810661c:	e7a5      	b.n	810656a <_vfiprintf_r+0x11a>
 810661e:	2300      	movs	r3, #0
 8106620:	3401      	adds	r4, #1
 8106622:	9305      	str	r3, [sp, #20]
 8106624:	4619      	mov	r1, r3
 8106626:	f04f 0c0a 	mov.w	ip, #10
 810662a:	4620      	mov	r0, r4
 810662c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106630:	3a30      	subs	r2, #48	; 0x30
 8106632:	2a09      	cmp	r2, #9
 8106634:	d903      	bls.n	810663e <_vfiprintf_r+0x1ee>
 8106636:	2b00      	cmp	r3, #0
 8106638:	d0c5      	beq.n	81065c6 <_vfiprintf_r+0x176>
 810663a:	9105      	str	r1, [sp, #20]
 810663c:	e7c3      	b.n	81065c6 <_vfiprintf_r+0x176>
 810663e:	fb0c 2101 	mla	r1, ip, r1, r2
 8106642:	4604      	mov	r4, r0
 8106644:	2301      	movs	r3, #1
 8106646:	e7f0      	b.n	810662a <_vfiprintf_r+0x1da>
 8106648:	ab03      	add	r3, sp, #12
 810664a:	9300      	str	r3, [sp, #0]
 810664c:	462a      	mov	r2, r5
 810664e:	4b16      	ldr	r3, [pc, #88]	; (81066a8 <_vfiprintf_r+0x258>)
 8106650:	a904      	add	r1, sp, #16
 8106652:	4630      	mov	r0, r6
 8106654:	f3af 8000 	nop.w
 8106658:	4607      	mov	r7, r0
 810665a:	1c78      	adds	r0, r7, #1
 810665c:	d1d6      	bne.n	810660c <_vfiprintf_r+0x1bc>
 810665e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106660:	07d9      	lsls	r1, r3, #31
 8106662:	d405      	bmi.n	8106670 <_vfiprintf_r+0x220>
 8106664:	89ab      	ldrh	r3, [r5, #12]
 8106666:	059a      	lsls	r2, r3, #22
 8106668:	d402      	bmi.n	8106670 <_vfiprintf_r+0x220>
 810666a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810666c:	f7ff fdb7 	bl	81061de <__retarget_lock_release_recursive>
 8106670:	89ab      	ldrh	r3, [r5, #12]
 8106672:	065b      	lsls	r3, r3, #25
 8106674:	f53f af12 	bmi.w	810649c <_vfiprintf_r+0x4c>
 8106678:	9809      	ldr	r0, [sp, #36]	; 0x24
 810667a:	e711      	b.n	81064a0 <_vfiprintf_r+0x50>
 810667c:	ab03      	add	r3, sp, #12
 810667e:	9300      	str	r3, [sp, #0]
 8106680:	462a      	mov	r2, r5
 8106682:	4b09      	ldr	r3, [pc, #36]	; (81066a8 <_vfiprintf_r+0x258>)
 8106684:	a904      	add	r1, sp, #16
 8106686:	4630      	mov	r0, r6
 8106688:	f000 f880 	bl	810678c <_printf_i>
 810668c:	e7e4      	b.n	8106658 <_vfiprintf_r+0x208>
 810668e:	bf00      	nop
 8106690:	08106d08 	.word	0x08106d08
 8106694:	08106d28 	.word	0x08106d28
 8106698:	08106ce8 	.word	0x08106ce8
 810669c:	08106d48 	.word	0x08106d48
 81066a0:	08106d52 	.word	0x08106d52
 81066a4:	00000000 	.word	0x00000000
 81066a8:	0810642b 	.word	0x0810642b
 81066ac:	08106d4e 	.word	0x08106d4e

081066b0 <_printf_common>:
 81066b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81066b4:	4616      	mov	r6, r2
 81066b6:	4699      	mov	r9, r3
 81066b8:	688a      	ldr	r2, [r1, #8]
 81066ba:	690b      	ldr	r3, [r1, #16]
 81066bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81066c0:	4293      	cmp	r3, r2
 81066c2:	bfb8      	it	lt
 81066c4:	4613      	movlt	r3, r2
 81066c6:	6033      	str	r3, [r6, #0]
 81066c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81066cc:	4607      	mov	r7, r0
 81066ce:	460c      	mov	r4, r1
 81066d0:	b10a      	cbz	r2, 81066d6 <_printf_common+0x26>
 81066d2:	3301      	adds	r3, #1
 81066d4:	6033      	str	r3, [r6, #0]
 81066d6:	6823      	ldr	r3, [r4, #0]
 81066d8:	0699      	lsls	r1, r3, #26
 81066da:	bf42      	ittt	mi
 81066dc:	6833      	ldrmi	r3, [r6, #0]
 81066de:	3302      	addmi	r3, #2
 81066e0:	6033      	strmi	r3, [r6, #0]
 81066e2:	6825      	ldr	r5, [r4, #0]
 81066e4:	f015 0506 	ands.w	r5, r5, #6
 81066e8:	d106      	bne.n	81066f8 <_printf_common+0x48>
 81066ea:	f104 0a19 	add.w	sl, r4, #25
 81066ee:	68e3      	ldr	r3, [r4, #12]
 81066f0:	6832      	ldr	r2, [r6, #0]
 81066f2:	1a9b      	subs	r3, r3, r2
 81066f4:	42ab      	cmp	r3, r5
 81066f6:	dc26      	bgt.n	8106746 <_printf_common+0x96>
 81066f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81066fc:	1e13      	subs	r3, r2, #0
 81066fe:	6822      	ldr	r2, [r4, #0]
 8106700:	bf18      	it	ne
 8106702:	2301      	movne	r3, #1
 8106704:	0692      	lsls	r2, r2, #26
 8106706:	d42b      	bmi.n	8106760 <_printf_common+0xb0>
 8106708:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810670c:	4649      	mov	r1, r9
 810670e:	4638      	mov	r0, r7
 8106710:	47c0      	blx	r8
 8106712:	3001      	adds	r0, #1
 8106714:	d01e      	beq.n	8106754 <_printf_common+0xa4>
 8106716:	6823      	ldr	r3, [r4, #0]
 8106718:	68e5      	ldr	r5, [r4, #12]
 810671a:	6832      	ldr	r2, [r6, #0]
 810671c:	f003 0306 	and.w	r3, r3, #6
 8106720:	2b04      	cmp	r3, #4
 8106722:	bf08      	it	eq
 8106724:	1aad      	subeq	r5, r5, r2
 8106726:	68a3      	ldr	r3, [r4, #8]
 8106728:	6922      	ldr	r2, [r4, #16]
 810672a:	bf0c      	ite	eq
 810672c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106730:	2500      	movne	r5, #0
 8106732:	4293      	cmp	r3, r2
 8106734:	bfc4      	itt	gt
 8106736:	1a9b      	subgt	r3, r3, r2
 8106738:	18ed      	addgt	r5, r5, r3
 810673a:	2600      	movs	r6, #0
 810673c:	341a      	adds	r4, #26
 810673e:	42b5      	cmp	r5, r6
 8106740:	d11a      	bne.n	8106778 <_printf_common+0xc8>
 8106742:	2000      	movs	r0, #0
 8106744:	e008      	b.n	8106758 <_printf_common+0xa8>
 8106746:	2301      	movs	r3, #1
 8106748:	4652      	mov	r2, sl
 810674a:	4649      	mov	r1, r9
 810674c:	4638      	mov	r0, r7
 810674e:	47c0      	blx	r8
 8106750:	3001      	adds	r0, #1
 8106752:	d103      	bne.n	810675c <_printf_common+0xac>
 8106754:	f04f 30ff 	mov.w	r0, #4294967295
 8106758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810675c:	3501      	adds	r5, #1
 810675e:	e7c6      	b.n	81066ee <_printf_common+0x3e>
 8106760:	18e1      	adds	r1, r4, r3
 8106762:	1c5a      	adds	r2, r3, #1
 8106764:	2030      	movs	r0, #48	; 0x30
 8106766:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810676a:	4422      	add	r2, r4
 810676c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8106770:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8106774:	3302      	adds	r3, #2
 8106776:	e7c7      	b.n	8106708 <_printf_common+0x58>
 8106778:	2301      	movs	r3, #1
 810677a:	4622      	mov	r2, r4
 810677c:	4649      	mov	r1, r9
 810677e:	4638      	mov	r0, r7
 8106780:	47c0      	blx	r8
 8106782:	3001      	adds	r0, #1
 8106784:	d0e6      	beq.n	8106754 <_printf_common+0xa4>
 8106786:	3601      	adds	r6, #1
 8106788:	e7d9      	b.n	810673e <_printf_common+0x8e>
	...

0810678c <_printf_i>:
 810678c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106790:	460c      	mov	r4, r1
 8106792:	4691      	mov	r9, r2
 8106794:	7e27      	ldrb	r7, [r4, #24]
 8106796:	990c      	ldr	r1, [sp, #48]	; 0x30
 8106798:	2f78      	cmp	r7, #120	; 0x78
 810679a:	4680      	mov	r8, r0
 810679c:	469a      	mov	sl, r3
 810679e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81067a2:	d807      	bhi.n	81067b4 <_printf_i+0x28>
 81067a4:	2f62      	cmp	r7, #98	; 0x62
 81067a6:	d80a      	bhi.n	81067be <_printf_i+0x32>
 81067a8:	2f00      	cmp	r7, #0
 81067aa:	f000 80d8 	beq.w	810695e <_printf_i+0x1d2>
 81067ae:	2f58      	cmp	r7, #88	; 0x58
 81067b0:	f000 80a3 	beq.w	81068fa <_printf_i+0x16e>
 81067b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 81067b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81067bc:	e03a      	b.n	8106834 <_printf_i+0xa8>
 81067be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81067c2:	2b15      	cmp	r3, #21
 81067c4:	d8f6      	bhi.n	81067b4 <_printf_i+0x28>
 81067c6:	a001      	add	r0, pc, #4	; (adr r0, 81067cc <_printf_i+0x40>)
 81067c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 81067cc:	08106825 	.word	0x08106825
 81067d0:	08106839 	.word	0x08106839
 81067d4:	081067b5 	.word	0x081067b5
 81067d8:	081067b5 	.word	0x081067b5
 81067dc:	081067b5 	.word	0x081067b5
 81067e0:	081067b5 	.word	0x081067b5
 81067e4:	08106839 	.word	0x08106839
 81067e8:	081067b5 	.word	0x081067b5
 81067ec:	081067b5 	.word	0x081067b5
 81067f0:	081067b5 	.word	0x081067b5
 81067f4:	081067b5 	.word	0x081067b5
 81067f8:	08106945 	.word	0x08106945
 81067fc:	08106869 	.word	0x08106869
 8106800:	08106927 	.word	0x08106927
 8106804:	081067b5 	.word	0x081067b5
 8106808:	081067b5 	.word	0x081067b5
 810680c:	08106967 	.word	0x08106967
 8106810:	081067b5 	.word	0x081067b5
 8106814:	08106869 	.word	0x08106869
 8106818:	081067b5 	.word	0x081067b5
 810681c:	081067b5 	.word	0x081067b5
 8106820:	0810692f 	.word	0x0810692f
 8106824:	680b      	ldr	r3, [r1, #0]
 8106826:	1d1a      	adds	r2, r3, #4
 8106828:	681b      	ldr	r3, [r3, #0]
 810682a:	600a      	str	r2, [r1, #0]
 810682c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8106830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106834:	2301      	movs	r3, #1
 8106836:	e0a3      	b.n	8106980 <_printf_i+0x1f4>
 8106838:	6825      	ldr	r5, [r4, #0]
 810683a:	6808      	ldr	r0, [r1, #0]
 810683c:	062e      	lsls	r6, r5, #24
 810683e:	f100 0304 	add.w	r3, r0, #4
 8106842:	d50a      	bpl.n	810685a <_printf_i+0xce>
 8106844:	6805      	ldr	r5, [r0, #0]
 8106846:	600b      	str	r3, [r1, #0]
 8106848:	2d00      	cmp	r5, #0
 810684a:	da03      	bge.n	8106854 <_printf_i+0xc8>
 810684c:	232d      	movs	r3, #45	; 0x2d
 810684e:	426d      	negs	r5, r5
 8106850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106854:	485e      	ldr	r0, [pc, #376]	; (81069d0 <_printf_i+0x244>)
 8106856:	230a      	movs	r3, #10
 8106858:	e019      	b.n	810688e <_printf_i+0x102>
 810685a:	f015 0f40 	tst.w	r5, #64	; 0x40
 810685e:	6805      	ldr	r5, [r0, #0]
 8106860:	600b      	str	r3, [r1, #0]
 8106862:	bf18      	it	ne
 8106864:	b22d      	sxthne	r5, r5
 8106866:	e7ef      	b.n	8106848 <_printf_i+0xbc>
 8106868:	680b      	ldr	r3, [r1, #0]
 810686a:	6825      	ldr	r5, [r4, #0]
 810686c:	1d18      	adds	r0, r3, #4
 810686e:	6008      	str	r0, [r1, #0]
 8106870:	0628      	lsls	r0, r5, #24
 8106872:	d501      	bpl.n	8106878 <_printf_i+0xec>
 8106874:	681d      	ldr	r5, [r3, #0]
 8106876:	e002      	b.n	810687e <_printf_i+0xf2>
 8106878:	0669      	lsls	r1, r5, #25
 810687a:	d5fb      	bpl.n	8106874 <_printf_i+0xe8>
 810687c:	881d      	ldrh	r5, [r3, #0]
 810687e:	4854      	ldr	r0, [pc, #336]	; (81069d0 <_printf_i+0x244>)
 8106880:	2f6f      	cmp	r7, #111	; 0x6f
 8106882:	bf0c      	ite	eq
 8106884:	2308      	moveq	r3, #8
 8106886:	230a      	movne	r3, #10
 8106888:	2100      	movs	r1, #0
 810688a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810688e:	6866      	ldr	r6, [r4, #4]
 8106890:	60a6      	str	r6, [r4, #8]
 8106892:	2e00      	cmp	r6, #0
 8106894:	bfa2      	ittt	ge
 8106896:	6821      	ldrge	r1, [r4, #0]
 8106898:	f021 0104 	bicge.w	r1, r1, #4
 810689c:	6021      	strge	r1, [r4, #0]
 810689e:	b90d      	cbnz	r5, 81068a4 <_printf_i+0x118>
 81068a0:	2e00      	cmp	r6, #0
 81068a2:	d04d      	beq.n	8106940 <_printf_i+0x1b4>
 81068a4:	4616      	mov	r6, r2
 81068a6:	fbb5 f1f3 	udiv	r1, r5, r3
 81068aa:	fb03 5711 	mls	r7, r3, r1, r5
 81068ae:	5dc7      	ldrb	r7, [r0, r7]
 81068b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 81068b4:	462f      	mov	r7, r5
 81068b6:	42bb      	cmp	r3, r7
 81068b8:	460d      	mov	r5, r1
 81068ba:	d9f4      	bls.n	81068a6 <_printf_i+0x11a>
 81068bc:	2b08      	cmp	r3, #8
 81068be:	d10b      	bne.n	81068d8 <_printf_i+0x14c>
 81068c0:	6823      	ldr	r3, [r4, #0]
 81068c2:	07df      	lsls	r7, r3, #31
 81068c4:	d508      	bpl.n	81068d8 <_printf_i+0x14c>
 81068c6:	6923      	ldr	r3, [r4, #16]
 81068c8:	6861      	ldr	r1, [r4, #4]
 81068ca:	4299      	cmp	r1, r3
 81068cc:	bfde      	ittt	le
 81068ce:	2330      	movle	r3, #48	; 0x30
 81068d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 81068d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 81068d8:	1b92      	subs	r2, r2, r6
 81068da:	6122      	str	r2, [r4, #16]
 81068dc:	f8cd a000 	str.w	sl, [sp]
 81068e0:	464b      	mov	r3, r9
 81068e2:	aa03      	add	r2, sp, #12
 81068e4:	4621      	mov	r1, r4
 81068e6:	4640      	mov	r0, r8
 81068e8:	f7ff fee2 	bl	81066b0 <_printf_common>
 81068ec:	3001      	adds	r0, #1
 81068ee:	d14c      	bne.n	810698a <_printf_i+0x1fe>
 81068f0:	f04f 30ff 	mov.w	r0, #4294967295
 81068f4:	b004      	add	sp, #16
 81068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81068fa:	4835      	ldr	r0, [pc, #212]	; (81069d0 <_printf_i+0x244>)
 81068fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8106900:	6823      	ldr	r3, [r4, #0]
 8106902:	680e      	ldr	r6, [r1, #0]
 8106904:	061f      	lsls	r7, r3, #24
 8106906:	f856 5b04 	ldr.w	r5, [r6], #4
 810690a:	600e      	str	r6, [r1, #0]
 810690c:	d514      	bpl.n	8106938 <_printf_i+0x1ac>
 810690e:	07d9      	lsls	r1, r3, #31
 8106910:	bf44      	itt	mi
 8106912:	f043 0320 	orrmi.w	r3, r3, #32
 8106916:	6023      	strmi	r3, [r4, #0]
 8106918:	b91d      	cbnz	r5, 8106922 <_printf_i+0x196>
 810691a:	6823      	ldr	r3, [r4, #0]
 810691c:	f023 0320 	bic.w	r3, r3, #32
 8106920:	6023      	str	r3, [r4, #0]
 8106922:	2310      	movs	r3, #16
 8106924:	e7b0      	b.n	8106888 <_printf_i+0xfc>
 8106926:	6823      	ldr	r3, [r4, #0]
 8106928:	f043 0320 	orr.w	r3, r3, #32
 810692c:	6023      	str	r3, [r4, #0]
 810692e:	2378      	movs	r3, #120	; 0x78
 8106930:	4828      	ldr	r0, [pc, #160]	; (81069d4 <_printf_i+0x248>)
 8106932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106936:	e7e3      	b.n	8106900 <_printf_i+0x174>
 8106938:	065e      	lsls	r6, r3, #25
 810693a:	bf48      	it	mi
 810693c:	b2ad      	uxthmi	r5, r5
 810693e:	e7e6      	b.n	810690e <_printf_i+0x182>
 8106940:	4616      	mov	r6, r2
 8106942:	e7bb      	b.n	81068bc <_printf_i+0x130>
 8106944:	680b      	ldr	r3, [r1, #0]
 8106946:	6826      	ldr	r6, [r4, #0]
 8106948:	6960      	ldr	r0, [r4, #20]
 810694a:	1d1d      	adds	r5, r3, #4
 810694c:	600d      	str	r5, [r1, #0]
 810694e:	0635      	lsls	r5, r6, #24
 8106950:	681b      	ldr	r3, [r3, #0]
 8106952:	d501      	bpl.n	8106958 <_printf_i+0x1cc>
 8106954:	6018      	str	r0, [r3, #0]
 8106956:	e002      	b.n	810695e <_printf_i+0x1d2>
 8106958:	0671      	lsls	r1, r6, #25
 810695a:	d5fb      	bpl.n	8106954 <_printf_i+0x1c8>
 810695c:	8018      	strh	r0, [r3, #0]
 810695e:	2300      	movs	r3, #0
 8106960:	6123      	str	r3, [r4, #16]
 8106962:	4616      	mov	r6, r2
 8106964:	e7ba      	b.n	81068dc <_printf_i+0x150>
 8106966:	680b      	ldr	r3, [r1, #0]
 8106968:	1d1a      	adds	r2, r3, #4
 810696a:	600a      	str	r2, [r1, #0]
 810696c:	681e      	ldr	r6, [r3, #0]
 810696e:	6862      	ldr	r2, [r4, #4]
 8106970:	2100      	movs	r1, #0
 8106972:	4630      	mov	r0, r6
 8106974:	f7f9 fcb4 	bl	81002e0 <memchr>
 8106978:	b108      	cbz	r0, 810697e <_printf_i+0x1f2>
 810697a:	1b80      	subs	r0, r0, r6
 810697c:	6060      	str	r0, [r4, #4]
 810697e:	6863      	ldr	r3, [r4, #4]
 8106980:	6123      	str	r3, [r4, #16]
 8106982:	2300      	movs	r3, #0
 8106984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106988:	e7a8      	b.n	81068dc <_printf_i+0x150>
 810698a:	6923      	ldr	r3, [r4, #16]
 810698c:	4632      	mov	r2, r6
 810698e:	4649      	mov	r1, r9
 8106990:	4640      	mov	r0, r8
 8106992:	47d0      	blx	sl
 8106994:	3001      	adds	r0, #1
 8106996:	d0ab      	beq.n	81068f0 <_printf_i+0x164>
 8106998:	6823      	ldr	r3, [r4, #0]
 810699a:	079b      	lsls	r3, r3, #30
 810699c:	d413      	bmi.n	81069c6 <_printf_i+0x23a>
 810699e:	68e0      	ldr	r0, [r4, #12]
 81069a0:	9b03      	ldr	r3, [sp, #12]
 81069a2:	4298      	cmp	r0, r3
 81069a4:	bfb8      	it	lt
 81069a6:	4618      	movlt	r0, r3
 81069a8:	e7a4      	b.n	81068f4 <_printf_i+0x168>
 81069aa:	2301      	movs	r3, #1
 81069ac:	4632      	mov	r2, r6
 81069ae:	4649      	mov	r1, r9
 81069b0:	4640      	mov	r0, r8
 81069b2:	47d0      	blx	sl
 81069b4:	3001      	adds	r0, #1
 81069b6:	d09b      	beq.n	81068f0 <_printf_i+0x164>
 81069b8:	3501      	adds	r5, #1
 81069ba:	68e3      	ldr	r3, [r4, #12]
 81069bc:	9903      	ldr	r1, [sp, #12]
 81069be:	1a5b      	subs	r3, r3, r1
 81069c0:	42ab      	cmp	r3, r5
 81069c2:	dcf2      	bgt.n	81069aa <_printf_i+0x21e>
 81069c4:	e7eb      	b.n	810699e <_printf_i+0x212>
 81069c6:	2500      	movs	r5, #0
 81069c8:	f104 0619 	add.w	r6, r4, #25
 81069cc:	e7f5      	b.n	81069ba <_printf_i+0x22e>
 81069ce:	bf00      	nop
 81069d0:	08106d59 	.word	0x08106d59
 81069d4:	08106d6a 	.word	0x08106d6a

081069d8 <_sbrk_r>:
 81069d8:	b538      	push	{r3, r4, r5, lr}
 81069da:	4d06      	ldr	r5, [pc, #24]	; (81069f4 <_sbrk_r+0x1c>)
 81069dc:	2300      	movs	r3, #0
 81069de:	4604      	mov	r4, r0
 81069e0:	4608      	mov	r0, r1
 81069e2:	602b      	str	r3, [r5, #0]
 81069e4:	f7fa fcfa 	bl	81013dc <_sbrk>
 81069e8:	1c43      	adds	r3, r0, #1
 81069ea:	d102      	bne.n	81069f2 <_sbrk_r+0x1a>
 81069ec:	682b      	ldr	r3, [r5, #0]
 81069ee:	b103      	cbz	r3, 81069f2 <_sbrk_r+0x1a>
 81069f0:	6023      	str	r3, [r4, #0]
 81069f2:	bd38      	pop	{r3, r4, r5, pc}
 81069f4:	10000280 	.word	0x10000280

081069f8 <__sread>:
 81069f8:	b510      	push	{r4, lr}
 81069fa:	460c      	mov	r4, r1
 81069fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106a00:	f000 f8a0 	bl	8106b44 <_read_r>
 8106a04:	2800      	cmp	r0, #0
 8106a06:	bfab      	itete	ge
 8106a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8106a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8106a0c:	181b      	addge	r3, r3, r0
 8106a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8106a12:	bfac      	ite	ge
 8106a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8106a16:	81a3      	strhlt	r3, [r4, #12]
 8106a18:	bd10      	pop	{r4, pc}

08106a1a <__swrite>:
 8106a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106a1e:	461f      	mov	r7, r3
 8106a20:	898b      	ldrh	r3, [r1, #12]
 8106a22:	05db      	lsls	r3, r3, #23
 8106a24:	4605      	mov	r5, r0
 8106a26:	460c      	mov	r4, r1
 8106a28:	4616      	mov	r6, r2
 8106a2a:	d505      	bpl.n	8106a38 <__swrite+0x1e>
 8106a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106a30:	2302      	movs	r3, #2
 8106a32:	2200      	movs	r2, #0
 8106a34:	f000 f868 	bl	8106b08 <_lseek_r>
 8106a38:	89a3      	ldrh	r3, [r4, #12]
 8106a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106a42:	81a3      	strh	r3, [r4, #12]
 8106a44:	4632      	mov	r2, r6
 8106a46:	463b      	mov	r3, r7
 8106a48:	4628      	mov	r0, r5
 8106a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106a4e:	f000 b817 	b.w	8106a80 <_write_r>

08106a52 <__sseek>:
 8106a52:	b510      	push	{r4, lr}
 8106a54:	460c      	mov	r4, r1
 8106a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106a5a:	f000 f855 	bl	8106b08 <_lseek_r>
 8106a5e:	1c43      	adds	r3, r0, #1
 8106a60:	89a3      	ldrh	r3, [r4, #12]
 8106a62:	bf15      	itete	ne
 8106a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8106a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8106a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8106a6e:	81a3      	strheq	r3, [r4, #12]
 8106a70:	bf18      	it	ne
 8106a72:	81a3      	strhne	r3, [r4, #12]
 8106a74:	bd10      	pop	{r4, pc}

08106a76 <__sclose>:
 8106a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106a7a:	f000 b813 	b.w	8106aa4 <_close_r>
	...

08106a80 <_write_r>:
 8106a80:	b538      	push	{r3, r4, r5, lr}
 8106a82:	4d07      	ldr	r5, [pc, #28]	; (8106aa0 <_write_r+0x20>)
 8106a84:	4604      	mov	r4, r0
 8106a86:	4608      	mov	r0, r1
 8106a88:	4611      	mov	r1, r2
 8106a8a:	2200      	movs	r2, #0
 8106a8c:	602a      	str	r2, [r5, #0]
 8106a8e:	461a      	mov	r2, r3
 8106a90:	f7fa fc53 	bl	810133a <_write>
 8106a94:	1c43      	adds	r3, r0, #1
 8106a96:	d102      	bne.n	8106a9e <_write_r+0x1e>
 8106a98:	682b      	ldr	r3, [r5, #0]
 8106a9a:	b103      	cbz	r3, 8106a9e <_write_r+0x1e>
 8106a9c:	6023      	str	r3, [r4, #0]
 8106a9e:	bd38      	pop	{r3, r4, r5, pc}
 8106aa0:	10000280 	.word	0x10000280

08106aa4 <_close_r>:
 8106aa4:	b538      	push	{r3, r4, r5, lr}
 8106aa6:	4d06      	ldr	r5, [pc, #24]	; (8106ac0 <_close_r+0x1c>)
 8106aa8:	2300      	movs	r3, #0
 8106aaa:	4604      	mov	r4, r0
 8106aac:	4608      	mov	r0, r1
 8106aae:	602b      	str	r3, [r5, #0]
 8106ab0:	f7fa fc5f 	bl	8101372 <_close>
 8106ab4:	1c43      	adds	r3, r0, #1
 8106ab6:	d102      	bne.n	8106abe <_close_r+0x1a>
 8106ab8:	682b      	ldr	r3, [r5, #0]
 8106aba:	b103      	cbz	r3, 8106abe <_close_r+0x1a>
 8106abc:	6023      	str	r3, [r4, #0]
 8106abe:	bd38      	pop	{r3, r4, r5, pc}
 8106ac0:	10000280 	.word	0x10000280

08106ac4 <_fstat_r>:
 8106ac4:	b538      	push	{r3, r4, r5, lr}
 8106ac6:	4d07      	ldr	r5, [pc, #28]	; (8106ae4 <_fstat_r+0x20>)
 8106ac8:	2300      	movs	r3, #0
 8106aca:	4604      	mov	r4, r0
 8106acc:	4608      	mov	r0, r1
 8106ace:	4611      	mov	r1, r2
 8106ad0:	602b      	str	r3, [r5, #0]
 8106ad2:	f7fa fc5a 	bl	810138a <_fstat>
 8106ad6:	1c43      	adds	r3, r0, #1
 8106ad8:	d102      	bne.n	8106ae0 <_fstat_r+0x1c>
 8106ada:	682b      	ldr	r3, [r5, #0]
 8106adc:	b103      	cbz	r3, 8106ae0 <_fstat_r+0x1c>
 8106ade:	6023      	str	r3, [r4, #0]
 8106ae0:	bd38      	pop	{r3, r4, r5, pc}
 8106ae2:	bf00      	nop
 8106ae4:	10000280 	.word	0x10000280

08106ae8 <_isatty_r>:
 8106ae8:	b538      	push	{r3, r4, r5, lr}
 8106aea:	4d06      	ldr	r5, [pc, #24]	; (8106b04 <_isatty_r+0x1c>)
 8106aec:	2300      	movs	r3, #0
 8106aee:	4604      	mov	r4, r0
 8106af0:	4608      	mov	r0, r1
 8106af2:	602b      	str	r3, [r5, #0]
 8106af4:	f7fa fc59 	bl	81013aa <_isatty>
 8106af8:	1c43      	adds	r3, r0, #1
 8106afa:	d102      	bne.n	8106b02 <_isatty_r+0x1a>
 8106afc:	682b      	ldr	r3, [r5, #0]
 8106afe:	b103      	cbz	r3, 8106b02 <_isatty_r+0x1a>
 8106b00:	6023      	str	r3, [r4, #0]
 8106b02:	bd38      	pop	{r3, r4, r5, pc}
 8106b04:	10000280 	.word	0x10000280

08106b08 <_lseek_r>:
 8106b08:	b538      	push	{r3, r4, r5, lr}
 8106b0a:	4d07      	ldr	r5, [pc, #28]	; (8106b28 <_lseek_r+0x20>)
 8106b0c:	4604      	mov	r4, r0
 8106b0e:	4608      	mov	r0, r1
 8106b10:	4611      	mov	r1, r2
 8106b12:	2200      	movs	r2, #0
 8106b14:	602a      	str	r2, [r5, #0]
 8106b16:	461a      	mov	r2, r3
 8106b18:	f7fa fc52 	bl	81013c0 <_lseek>
 8106b1c:	1c43      	adds	r3, r0, #1
 8106b1e:	d102      	bne.n	8106b26 <_lseek_r+0x1e>
 8106b20:	682b      	ldr	r3, [r5, #0]
 8106b22:	b103      	cbz	r3, 8106b26 <_lseek_r+0x1e>
 8106b24:	6023      	str	r3, [r4, #0]
 8106b26:	bd38      	pop	{r3, r4, r5, pc}
 8106b28:	10000280 	.word	0x10000280

08106b2c <__malloc_lock>:
 8106b2c:	4801      	ldr	r0, [pc, #4]	; (8106b34 <__malloc_lock+0x8>)
 8106b2e:	f7ff bb55 	b.w	81061dc <__retarget_lock_acquire_recursive>
 8106b32:	bf00      	nop
 8106b34:	10000278 	.word	0x10000278

08106b38 <__malloc_unlock>:
 8106b38:	4801      	ldr	r0, [pc, #4]	; (8106b40 <__malloc_unlock+0x8>)
 8106b3a:	f7ff bb50 	b.w	81061de <__retarget_lock_release_recursive>
 8106b3e:	bf00      	nop
 8106b40:	10000278 	.word	0x10000278

08106b44 <_read_r>:
 8106b44:	b538      	push	{r3, r4, r5, lr}
 8106b46:	4d07      	ldr	r5, [pc, #28]	; (8106b64 <_read_r+0x20>)
 8106b48:	4604      	mov	r4, r0
 8106b4a:	4608      	mov	r0, r1
 8106b4c:	4611      	mov	r1, r2
 8106b4e:	2200      	movs	r2, #0
 8106b50:	602a      	str	r2, [r5, #0]
 8106b52:	461a      	mov	r2, r3
 8106b54:	f7fa fbd4 	bl	8101300 <_read>
 8106b58:	1c43      	adds	r3, r0, #1
 8106b5a:	d102      	bne.n	8106b62 <_read_r+0x1e>
 8106b5c:	682b      	ldr	r3, [r5, #0]
 8106b5e:	b103      	cbz	r3, 8106b62 <_read_r+0x1e>
 8106b60:	6023      	str	r3, [r4, #0]
 8106b62:	bd38      	pop	{r3, r4, r5, pc}
 8106b64:	10000280 	.word	0x10000280

08106b68 <_init>:
 8106b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106b6a:	bf00      	nop
 8106b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106b6e:	bc08      	pop	{r3}
 8106b70:	469e      	mov	lr, r3
 8106b72:	4770      	bx	lr

08106b74 <_fini>:
 8106b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106b76:	bf00      	nop
 8106b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106b7a:	bc08      	pop	{r3}
 8106b7c:	469e      	mov	lr, r3
 8106b7e:	4770      	bx	lr
