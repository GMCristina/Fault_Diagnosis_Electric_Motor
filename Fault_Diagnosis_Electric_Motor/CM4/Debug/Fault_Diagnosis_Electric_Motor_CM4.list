
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000642c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  081066cc  081066cc  000166cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08106838  08106838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08106840  08106840  00016840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08106844  08106844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  10000000  08106848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000210  10000074  081068bc  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10000284  081068bc  00020284  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001edc2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003175  00000000  00000000  0003ee66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000dd0  00000000  00000000  00041fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000ce8  00000000  00000000  00042db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003be3a  00000000  00000000  00043a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000127dc  00000000  00000000  0007f8d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001851ee  00000000  00000000  000920ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021729c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004094  00000000  00000000  002172f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000074 	.word	0x10000074
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081066b4 	.word	0x081066b4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	10000078 	.word	0x10000078
 81002dc:	081066b4 	.word	0x081066b4

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <__aeabi_uldivmod>:
 8100380:	b953      	cbnz	r3, 8100398 <__aeabi_uldivmod+0x18>
 8100382:	b94a      	cbnz	r2, 8100398 <__aeabi_uldivmod+0x18>
 8100384:	2900      	cmp	r1, #0
 8100386:	bf08      	it	eq
 8100388:	2800      	cmpeq	r0, #0
 810038a:	bf1c      	itt	ne
 810038c:	f04f 31ff 	movne.w	r1, #4294967295
 8100390:	f04f 30ff 	movne.w	r0, #4294967295
 8100394:	f000 b96e 	b.w	8100674 <__aeabi_idiv0>
 8100398:	f1ad 0c08 	sub.w	ip, sp, #8
 810039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003a0:	f000 f806 	bl	81003b0 <__udivmoddi4>
 81003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003ac:	b004      	add	sp, #16
 81003ae:	4770      	bx	lr

081003b0 <__udivmoddi4>:
 81003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003b4:	9d08      	ldr	r5, [sp, #32]
 81003b6:	4604      	mov	r4, r0
 81003b8:	468c      	mov	ip, r1
 81003ba:	2b00      	cmp	r3, #0
 81003bc:	f040 8083 	bne.w	81004c6 <__udivmoddi4+0x116>
 81003c0:	428a      	cmp	r2, r1
 81003c2:	4617      	mov	r7, r2
 81003c4:	d947      	bls.n	8100456 <__udivmoddi4+0xa6>
 81003c6:	fab2 f282 	clz	r2, r2
 81003ca:	b142      	cbz	r2, 81003de <__udivmoddi4+0x2e>
 81003cc:	f1c2 0020 	rsb	r0, r2, #32
 81003d0:	fa24 f000 	lsr.w	r0, r4, r0
 81003d4:	4091      	lsls	r1, r2
 81003d6:	4097      	lsls	r7, r2
 81003d8:	ea40 0c01 	orr.w	ip, r0, r1
 81003dc:	4094      	lsls	r4, r2
 81003de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 81003e2:	0c23      	lsrs	r3, r4, #16
 81003e4:	fbbc f6f8 	udiv	r6, ip, r8
 81003e8:	fa1f fe87 	uxth.w	lr, r7
 81003ec:	fb08 c116 	mls	r1, r8, r6, ip
 81003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81003f4:	fb06 f10e 	mul.w	r1, r6, lr
 81003f8:	4299      	cmp	r1, r3
 81003fa:	d909      	bls.n	8100410 <__udivmoddi4+0x60>
 81003fc:	18fb      	adds	r3, r7, r3
 81003fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8100402:	f080 8119 	bcs.w	8100638 <__udivmoddi4+0x288>
 8100406:	4299      	cmp	r1, r3
 8100408:	f240 8116 	bls.w	8100638 <__udivmoddi4+0x288>
 810040c:	3e02      	subs	r6, #2
 810040e:	443b      	add	r3, r7
 8100410:	1a5b      	subs	r3, r3, r1
 8100412:	b2a4      	uxth	r4, r4
 8100414:	fbb3 f0f8 	udiv	r0, r3, r8
 8100418:	fb08 3310 	mls	r3, r8, r0, r3
 810041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100420:	fb00 fe0e 	mul.w	lr, r0, lr
 8100424:	45a6      	cmp	lr, r4
 8100426:	d909      	bls.n	810043c <__udivmoddi4+0x8c>
 8100428:	193c      	adds	r4, r7, r4
 810042a:	f100 33ff 	add.w	r3, r0, #4294967295
 810042e:	f080 8105 	bcs.w	810063c <__udivmoddi4+0x28c>
 8100432:	45a6      	cmp	lr, r4
 8100434:	f240 8102 	bls.w	810063c <__udivmoddi4+0x28c>
 8100438:	3802      	subs	r0, #2
 810043a:	443c      	add	r4, r7
 810043c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100440:	eba4 040e 	sub.w	r4, r4, lr
 8100444:	2600      	movs	r6, #0
 8100446:	b11d      	cbz	r5, 8100450 <__udivmoddi4+0xa0>
 8100448:	40d4      	lsrs	r4, r2
 810044a:	2300      	movs	r3, #0
 810044c:	e9c5 4300 	strd	r4, r3, [r5]
 8100450:	4631      	mov	r1, r6
 8100452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100456:	b902      	cbnz	r2, 810045a <__udivmoddi4+0xaa>
 8100458:	deff      	udf	#255	; 0xff
 810045a:	fab2 f282 	clz	r2, r2
 810045e:	2a00      	cmp	r2, #0
 8100460:	d150      	bne.n	8100504 <__udivmoddi4+0x154>
 8100462:	1bcb      	subs	r3, r1, r7
 8100464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100468:	fa1f f887 	uxth.w	r8, r7
 810046c:	2601      	movs	r6, #1
 810046e:	fbb3 fcfe 	udiv	ip, r3, lr
 8100472:	0c21      	lsrs	r1, r4, #16
 8100474:	fb0e 331c 	mls	r3, lr, ip, r3
 8100478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810047c:	fb08 f30c 	mul.w	r3, r8, ip
 8100480:	428b      	cmp	r3, r1
 8100482:	d907      	bls.n	8100494 <__udivmoddi4+0xe4>
 8100484:	1879      	adds	r1, r7, r1
 8100486:	f10c 30ff 	add.w	r0, ip, #4294967295
 810048a:	d202      	bcs.n	8100492 <__udivmoddi4+0xe2>
 810048c:	428b      	cmp	r3, r1
 810048e:	f200 80e9 	bhi.w	8100664 <__udivmoddi4+0x2b4>
 8100492:	4684      	mov	ip, r0
 8100494:	1ac9      	subs	r1, r1, r3
 8100496:	b2a3      	uxth	r3, r4
 8100498:	fbb1 f0fe 	udiv	r0, r1, lr
 810049c:	fb0e 1110 	mls	r1, lr, r0, r1
 81004a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81004a4:	fb08 f800 	mul.w	r8, r8, r0
 81004a8:	45a0      	cmp	r8, r4
 81004aa:	d907      	bls.n	81004bc <__udivmoddi4+0x10c>
 81004ac:	193c      	adds	r4, r7, r4
 81004ae:	f100 33ff 	add.w	r3, r0, #4294967295
 81004b2:	d202      	bcs.n	81004ba <__udivmoddi4+0x10a>
 81004b4:	45a0      	cmp	r8, r4
 81004b6:	f200 80d9 	bhi.w	810066c <__udivmoddi4+0x2bc>
 81004ba:	4618      	mov	r0, r3
 81004bc:	eba4 0408 	sub.w	r4, r4, r8
 81004c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 81004c4:	e7bf      	b.n	8100446 <__udivmoddi4+0x96>
 81004c6:	428b      	cmp	r3, r1
 81004c8:	d909      	bls.n	81004de <__udivmoddi4+0x12e>
 81004ca:	2d00      	cmp	r5, #0
 81004cc:	f000 80b1 	beq.w	8100632 <__udivmoddi4+0x282>
 81004d0:	2600      	movs	r6, #0
 81004d2:	e9c5 0100 	strd	r0, r1, [r5]
 81004d6:	4630      	mov	r0, r6
 81004d8:	4631      	mov	r1, r6
 81004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81004de:	fab3 f683 	clz	r6, r3
 81004e2:	2e00      	cmp	r6, #0
 81004e4:	d14a      	bne.n	810057c <__udivmoddi4+0x1cc>
 81004e6:	428b      	cmp	r3, r1
 81004e8:	d302      	bcc.n	81004f0 <__udivmoddi4+0x140>
 81004ea:	4282      	cmp	r2, r0
 81004ec:	f200 80b8 	bhi.w	8100660 <__udivmoddi4+0x2b0>
 81004f0:	1a84      	subs	r4, r0, r2
 81004f2:	eb61 0103 	sbc.w	r1, r1, r3
 81004f6:	2001      	movs	r0, #1
 81004f8:	468c      	mov	ip, r1
 81004fa:	2d00      	cmp	r5, #0
 81004fc:	d0a8      	beq.n	8100450 <__udivmoddi4+0xa0>
 81004fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8100502:	e7a5      	b.n	8100450 <__udivmoddi4+0xa0>
 8100504:	f1c2 0320 	rsb	r3, r2, #32
 8100508:	fa20 f603 	lsr.w	r6, r0, r3
 810050c:	4097      	lsls	r7, r2
 810050e:	fa01 f002 	lsl.w	r0, r1, r2
 8100512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100516:	40d9      	lsrs	r1, r3
 8100518:	4330      	orrs	r0, r6
 810051a:	0c03      	lsrs	r3, r0, #16
 810051c:	fbb1 f6fe 	udiv	r6, r1, lr
 8100520:	fa1f f887 	uxth.w	r8, r7
 8100524:	fb0e 1116 	mls	r1, lr, r6, r1
 8100528:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810052c:	fb06 f108 	mul.w	r1, r6, r8
 8100530:	4299      	cmp	r1, r3
 8100532:	fa04 f402 	lsl.w	r4, r4, r2
 8100536:	d909      	bls.n	810054c <__udivmoddi4+0x19c>
 8100538:	18fb      	adds	r3, r7, r3
 810053a:	f106 3cff 	add.w	ip, r6, #4294967295
 810053e:	f080 808d 	bcs.w	810065c <__udivmoddi4+0x2ac>
 8100542:	4299      	cmp	r1, r3
 8100544:	f240 808a 	bls.w	810065c <__udivmoddi4+0x2ac>
 8100548:	3e02      	subs	r6, #2
 810054a:	443b      	add	r3, r7
 810054c:	1a5b      	subs	r3, r3, r1
 810054e:	b281      	uxth	r1, r0
 8100550:	fbb3 f0fe 	udiv	r0, r3, lr
 8100554:	fb0e 3310 	mls	r3, lr, r0, r3
 8100558:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 810055c:	fb00 f308 	mul.w	r3, r0, r8
 8100560:	428b      	cmp	r3, r1
 8100562:	d907      	bls.n	8100574 <__udivmoddi4+0x1c4>
 8100564:	1879      	adds	r1, r7, r1
 8100566:	f100 3cff 	add.w	ip, r0, #4294967295
 810056a:	d273      	bcs.n	8100654 <__udivmoddi4+0x2a4>
 810056c:	428b      	cmp	r3, r1
 810056e:	d971      	bls.n	8100654 <__udivmoddi4+0x2a4>
 8100570:	3802      	subs	r0, #2
 8100572:	4439      	add	r1, r7
 8100574:	1acb      	subs	r3, r1, r3
 8100576:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 810057a:	e778      	b.n	810046e <__udivmoddi4+0xbe>
 810057c:	f1c6 0c20 	rsb	ip, r6, #32
 8100580:	fa03 f406 	lsl.w	r4, r3, r6
 8100584:	fa22 f30c 	lsr.w	r3, r2, ip
 8100588:	431c      	orrs	r4, r3
 810058a:	fa20 f70c 	lsr.w	r7, r0, ip
 810058e:	fa01 f306 	lsl.w	r3, r1, r6
 8100592:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8100596:	fa21 f10c 	lsr.w	r1, r1, ip
 810059a:	431f      	orrs	r7, r3
 810059c:	0c3b      	lsrs	r3, r7, #16
 810059e:	fbb1 f9fe 	udiv	r9, r1, lr
 81005a2:	fa1f f884 	uxth.w	r8, r4
 81005a6:	fb0e 1119 	mls	r1, lr, r9, r1
 81005aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 81005ae:	fb09 fa08 	mul.w	sl, r9, r8
 81005b2:	458a      	cmp	sl, r1
 81005b4:	fa02 f206 	lsl.w	r2, r2, r6
 81005b8:	fa00 f306 	lsl.w	r3, r0, r6
 81005bc:	d908      	bls.n	81005d0 <__udivmoddi4+0x220>
 81005be:	1861      	adds	r1, r4, r1
 81005c0:	f109 30ff 	add.w	r0, r9, #4294967295
 81005c4:	d248      	bcs.n	8100658 <__udivmoddi4+0x2a8>
 81005c6:	458a      	cmp	sl, r1
 81005c8:	d946      	bls.n	8100658 <__udivmoddi4+0x2a8>
 81005ca:	f1a9 0902 	sub.w	r9, r9, #2
 81005ce:	4421      	add	r1, r4
 81005d0:	eba1 010a 	sub.w	r1, r1, sl
 81005d4:	b2bf      	uxth	r7, r7
 81005d6:	fbb1 f0fe 	udiv	r0, r1, lr
 81005da:	fb0e 1110 	mls	r1, lr, r0, r1
 81005de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 81005e2:	fb00 f808 	mul.w	r8, r0, r8
 81005e6:	45b8      	cmp	r8, r7
 81005e8:	d907      	bls.n	81005fa <__udivmoddi4+0x24a>
 81005ea:	19e7      	adds	r7, r4, r7
 81005ec:	f100 31ff 	add.w	r1, r0, #4294967295
 81005f0:	d22e      	bcs.n	8100650 <__udivmoddi4+0x2a0>
 81005f2:	45b8      	cmp	r8, r7
 81005f4:	d92c      	bls.n	8100650 <__udivmoddi4+0x2a0>
 81005f6:	3802      	subs	r0, #2
 81005f8:	4427      	add	r7, r4
 81005fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 81005fe:	eba7 0708 	sub.w	r7, r7, r8
 8100602:	fba0 8902 	umull	r8, r9, r0, r2
 8100606:	454f      	cmp	r7, r9
 8100608:	46c6      	mov	lr, r8
 810060a:	4649      	mov	r1, r9
 810060c:	d31a      	bcc.n	8100644 <__udivmoddi4+0x294>
 810060e:	d017      	beq.n	8100640 <__udivmoddi4+0x290>
 8100610:	b15d      	cbz	r5, 810062a <__udivmoddi4+0x27a>
 8100612:	ebb3 020e 	subs.w	r2, r3, lr
 8100616:	eb67 0701 	sbc.w	r7, r7, r1
 810061a:	fa07 fc0c 	lsl.w	ip, r7, ip
 810061e:	40f2      	lsrs	r2, r6
 8100620:	ea4c 0202 	orr.w	r2, ip, r2
 8100624:	40f7      	lsrs	r7, r6
 8100626:	e9c5 2700 	strd	r2, r7, [r5]
 810062a:	2600      	movs	r6, #0
 810062c:	4631      	mov	r1, r6
 810062e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100632:	462e      	mov	r6, r5
 8100634:	4628      	mov	r0, r5
 8100636:	e70b      	b.n	8100450 <__udivmoddi4+0xa0>
 8100638:	4606      	mov	r6, r0
 810063a:	e6e9      	b.n	8100410 <__udivmoddi4+0x60>
 810063c:	4618      	mov	r0, r3
 810063e:	e6fd      	b.n	810043c <__udivmoddi4+0x8c>
 8100640:	4543      	cmp	r3, r8
 8100642:	d2e5      	bcs.n	8100610 <__udivmoddi4+0x260>
 8100644:	ebb8 0e02 	subs.w	lr, r8, r2
 8100648:	eb69 0104 	sbc.w	r1, r9, r4
 810064c:	3801      	subs	r0, #1
 810064e:	e7df      	b.n	8100610 <__udivmoddi4+0x260>
 8100650:	4608      	mov	r0, r1
 8100652:	e7d2      	b.n	81005fa <__udivmoddi4+0x24a>
 8100654:	4660      	mov	r0, ip
 8100656:	e78d      	b.n	8100574 <__udivmoddi4+0x1c4>
 8100658:	4681      	mov	r9, r0
 810065a:	e7b9      	b.n	81005d0 <__udivmoddi4+0x220>
 810065c:	4666      	mov	r6, ip
 810065e:	e775      	b.n	810054c <__udivmoddi4+0x19c>
 8100660:	4630      	mov	r0, r6
 8100662:	e74a      	b.n	81004fa <__udivmoddi4+0x14a>
 8100664:	f1ac 0c02 	sub.w	ip, ip, #2
 8100668:	4439      	add	r1, r7
 810066a:	e713      	b.n	8100494 <__udivmoddi4+0xe4>
 810066c:	3802      	subs	r0, #2
 810066e:	443c      	add	r4, r7
 8100670:	e724      	b.n	81004bc <__udivmoddi4+0x10c>
 8100672:	bf00      	nop

08100674 <__aeabi_idiv0>:
 8100674:	4770      	bx	lr
 8100676:	bf00      	nop

08100678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100678:	b480      	push	{r7}
 810067a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810067c:	4b0b      	ldr	r3, [pc, #44]	; (81006ac <SystemInit+0x34>)
 810067e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100682:	4a0a      	ldr	r2, [pc, #40]	; (81006ac <SystemInit+0x34>)
 8100684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810068c:	4b07      	ldr	r3, [pc, #28]	; (81006ac <SystemInit+0x34>)
 810068e:	691b      	ldr	r3, [r3, #16]
 8100690:	4a06      	ldr	r2, [pc, #24]	; (81006ac <SystemInit+0x34>)
 8100692:	f043 0310 	orr.w	r3, r3, #16
 8100696:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100698:	4b04      	ldr	r3, [pc, #16]	; (81006ac <SystemInit+0x34>)
 810069a:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810069e:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81006a0:	bf00      	nop
 81006a2:	46bd      	mov	sp, r7
 81006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006a8:	4770      	bx	lr
 81006aa:	bf00      	nop
 81006ac:	e000ed00 	.word	0xe000ed00

081006b0 <ADE9000_Power>:

#include "ADE9000_API.h"
#include "main.h"

//power-on sequence
void ADE9000_Power(void){
 81006b0:	b580      	push	{r7, lr}
 81006b2:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 81006b4:	2200      	movs	r2, #0
 81006b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81006ba:	480c      	ldr	r0, [pc, #48]	; (81006ec <ADE9000_Power+0x3c>)
 81006bc:	f001 f85a 	bl	8101774 <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 81006c0:	2200      	movs	r2, #0
 81006c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 81006c6:	4809      	ldr	r0, [pc, #36]	; (81006ec <ADE9000_Power+0x3c>)
 81006c8:	f001 f854 	bl	8101774 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 81006cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81006d0:	f000 fd84 	bl	81011dc <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 81006d4:	2201      	movs	r2, #1
 81006d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 81006da:	4804      	ldr	r0, [pc, #16]	; (81006ec <ADE9000_Power+0x3c>)
 81006dc:	f001 f84a 	bl	8101774 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 81006e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81006e4:	f000 fd7a 	bl	81011dc <HAL_Delay>
}
 81006e8:	bf00      	nop
 81006ea:	bd80      	pop	{r7, pc}
 81006ec:	58021000 	.word	0x58021000

081006f0 <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 81006f0:	b580      	push	{r7, lr}
 81006f2:	b084      	sub	sp, #16
 81006f4:	af00      	add	r7, sp, #0
 81006f6:	4603      	mov	r3, r0
 81006f8:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81006fa:	88fb      	ldrh	r3, [r7, #6]
 81006fc:	011b      	lsls	r3, r3, #4
 81006fe:	b29b      	uxth	r3, r3
 8100700:	3308      	adds	r3, #8
 8100702:	b29b      	uxth	r3, r3
 8100704:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8100706:	2200      	movs	r2, #0
 8100708:	f44f 7100 	mov.w	r1, #512	; 0x200
 810070c:	480f      	ldr	r0, [pc, #60]	; (810074c <ADE9000_SPI_Read_16+0x5c>)
 810070e:	f001 f831 	bl	8101774 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100712:	f107 0108 	add.w	r1, r7, #8
 8100716:	2364      	movs	r3, #100	; 0x64
 8100718:	2201      	movs	r2, #1
 810071a:	480d      	ldr	r0, [pc, #52]	; (8100750 <ADE9000_SPI_Read_16+0x60>)
 810071c:	f002 ff1e 	bl	810355c <HAL_SPI_Transmit>
 8100720:	4603      	mov	r3, r0
 8100722:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 8100724:	f107 010c 	add.w	r1, r7, #12
 8100728:	2364      	movs	r3, #100	; 0x64
 810072a:	2201      	movs	r2, #1
 810072c:	4808      	ldr	r0, [pc, #32]	; (8100750 <ADE9000_SPI_Read_16+0x60>)
 810072e:	f003 f903 	bl	8103938 <HAL_SPI_Receive>
 8100732:	4603      	mov	r3, r0
 8100734:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100736:	2201      	movs	r2, #1
 8100738:	f44f 7100 	mov.w	r1, #512	; 0x200
 810073c:	4803      	ldr	r0, [pc, #12]	; (810074c <ADE9000_SPI_Read_16+0x5c>)
 810073e:	f001 f819 	bl	8101774 <HAL_GPIO_WritePin>

	return data.data_16;
 8100742:	89bb      	ldrh	r3, [r7, #12]
}
 8100744:	4618      	mov	r0, r3
 8100746:	3710      	adds	r7, #16
 8100748:	46bd      	mov	sp, r7
 810074a:	bd80      	pop	{r7, pc}
 810074c:	58021800 	.word	0x58021800
 8100750:	1000012c 	.word	0x1000012c

08100754 <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 8100754:	b580      	push	{r7, lr}
 8100756:	b086      	sub	sp, #24
 8100758:	af00      	add	r7, sp, #0
 810075a:	4603      	mov	r3, r0
 810075c:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810075e:	88fb      	ldrh	r3, [r7, #6]
 8100760:	011b      	lsls	r3, r3, #4
 8100762:	b29b      	uxth	r3, r3
 8100764:	3308      	adds	r3, #8
 8100766:	b29b      	uxth	r3, r3
 8100768:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 810076a:	2200      	movs	r2, #0
 810076c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100770:	4814      	ldr	r0, [pc, #80]	; (81007c4 <ADE9000_SPI_Read_32+0x70>)
 8100772:	f000 ffff 	bl	8101774 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100776:	f107 010c 	add.w	r1, r7, #12
 810077a:	2364      	movs	r3, #100	; 0x64
 810077c:	2201      	movs	r2, #1
 810077e:	4812      	ldr	r0, [pc, #72]	; (81007c8 <ADE9000_SPI_Read_32+0x74>)
 8100780:	f002 feec 	bl	810355c <HAL_SPI_Transmit>
 8100784:	4603      	mov	r3, r0
 8100786:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi3,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8100788:	f107 0110 	add.w	r1, r7, #16
 810078c:	3102      	adds	r1, #2
 810078e:	2364      	movs	r3, #100	; 0x64
 8100790:	2201      	movs	r2, #1
 8100792:	480d      	ldr	r0, [pc, #52]	; (81007c8 <ADE9000_SPI_Read_32+0x74>)
 8100794:	f003 f8d0 	bl	8103938 <HAL_SPI_Receive>
 8100798:	4603      	mov	r3, r0
 810079a:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 810079c:	f107 0110 	add.w	r1, r7, #16
 81007a0:	2364      	movs	r3, #100	; 0x64
 81007a2:	2201      	movs	r2, #1
 81007a4:	4808      	ldr	r0, [pc, #32]	; (81007c8 <ADE9000_SPI_Read_32+0x74>)
 81007a6:	f003 f8c7 	bl	8103938 <HAL_SPI_Receive>
 81007aa:	4603      	mov	r3, r0
 81007ac:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81007ae:	2201      	movs	r2, #1
 81007b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 81007b4:	4803      	ldr	r0, [pc, #12]	; (81007c4 <ADE9000_SPI_Read_32+0x70>)
 81007b6:	f000 ffdd 	bl	8101774 <HAL_GPIO_WritePin>

	return data.data_32;
 81007ba:	693b      	ldr	r3, [r7, #16]
}
 81007bc:	4618      	mov	r0, r3
 81007be:	3718      	adds	r7, #24
 81007c0:	46bd      	mov	sp, r7
 81007c2:	bd80      	pop	{r7, pc}
 81007c4:	58021800 	.word	0x58021800
 81007c8:	1000012c 	.word	0x1000012c

081007cc <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 81007cc:	b580      	push	{r7, lr}
 81007ce:	b084      	sub	sp, #16
 81007d0:	af00      	add	r7, sp, #0
 81007d2:	4603      	mov	r3, r0
 81007d4:	460a      	mov	r2, r1
 81007d6:	80fb      	strh	r3, [r7, #6]
 81007d8:	4613      	mov	r3, r2
 81007da:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 81007dc:	88fb      	ldrh	r3, [r7, #6]
 81007de:	011b      	lsls	r3, r3, #4
 81007e0:	b29b      	uxth	r3, r3
 81007e2:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81007e4:	2200      	movs	r2, #0
 81007e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 81007ea:	4810      	ldr	r0, [pc, #64]	; (810082c <ADE9000_SPI_Write_16+0x60>)
 81007ec:	f000 ffc2 	bl	8101774 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81007f0:	f107 010c 	add.w	r1, r7, #12
 81007f4:	2364      	movs	r3, #100	; 0x64
 81007f6:	2201      	movs	r2, #1
 81007f8:	480d      	ldr	r0, [pc, #52]	; (8100830 <ADE9000_SPI_Write_16+0x64>)
 81007fa:	f002 feaf 	bl	810355c <HAL_SPI_Transmit>
 81007fe:	4603      	mov	r3, r0
 8100800:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 8100802:	88bb      	ldrh	r3, [r7, #4]
 8100804:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 8100806:	f107 0108 	add.w	r1, r7, #8
 810080a:	2364      	movs	r3, #100	; 0x64
 810080c:	2201      	movs	r2, #1
 810080e:	4808      	ldr	r0, [pc, #32]	; (8100830 <ADE9000_SPI_Write_16+0x64>)
 8100810:	f002 fea4 	bl	810355c <HAL_SPI_Transmit>
 8100814:	4603      	mov	r3, r0
 8100816:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100818:	2201      	movs	r2, #1
 810081a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810081e:	4803      	ldr	r0, [pc, #12]	; (810082c <ADE9000_SPI_Write_16+0x60>)
 8100820:	f000 ffa8 	bl	8101774 <HAL_GPIO_WritePin>

}
 8100824:	bf00      	nop
 8100826:	3710      	adds	r7, #16
 8100828:	46bd      	mov	sp, r7
 810082a:	bd80      	pop	{r7, pc}
 810082c:	58021800 	.word	0x58021800
 8100830:	1000012c 	.word	0x1000012c

08100834 <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 8100834:	b580      	push	{r7, lr}
 8100836:	b084      	sub	sp, #16
 8100838:	af00      	add	r7, sp, #0
 810083a:	4603      	mov	r3, r0
 810083c:	6039      	str	r1, [r7, #0]
 810083e:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8100840:	88fb      	ldrh	r3, [r7, #6]
 8100842:	011b      	lsls	r3, r3, #4
 8100844:	b29b      	uxth	r3, r3
 8100846:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8100848:	2200      	movs	r2, #0
 810084a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810084e:	4815      	ldr	r0, [pc, #84]	; (81008a4 <ADE9000_SPI_Write_32+0x70>)
 8100850:	f000 ff90 	bl	8101774 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi3,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8100854:	f107 010c 	add.w	r1, r7, #12
 8100858:	2364      	movs	r3, #100	; 0x64
 810085a:	2201      	movs	r2, #1
 810085c:	4812      	ldr	r0, [pc, #72]	; (81008a8 <ADE9000_SPI_Write_32+0x74>)
 810085e:	f002 fe7d 	bl	810355c <HAL_SPI_Transmit>
 8100862:	4603      	mov	r3, r0
 8100864:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 8100866:	683b      	ldr	r3, [r7, #0]
 8100868:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 810086a:	f107 0108 	add.w	r1, r7, #8
 810086e:	3102      	adds	r1, #2
 8100870:	2364      	movs	r3, #100	; 0x64
 8100872:	2201      	movs	r2, #1
 8100874:	480c      	ldr	r0, [pc, #48]	; (81008a8 <ADE9000_SPI_Write_32+0x74>)
 8100876:	f002 fe71 	bl	810355c <HAL_SPI_Transmit>
 810087a:	4603      	mov	r3, r0
 810087c:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi3,data.data_8,SIZE_16,TIMEOUT_SPI);
 810087e:	f107 0108 	add.w	r1, r7, #8
 8100882:	2364      	movs	r3, #100	; 0x64
 8100884:	2201      	movs	r2, #1
 8100886:	4808      	ldr	r0, [pc, #32]	; (81008a8 <ADE9000_SPI_Write_32+0x74>)
 8100888:	f002 fe68 	bl	810355c <HAL_SPI_Transmit>
 810088c:	4603      	mov	r3, r0
 810088e:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100890:	2201      	movs	r2, #1
 8100892:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100896:	4803      	ldr	r0, [pc, #12]	; (81008a4 <ADE9000_SPI_Write_32+0x70>)
 8100898:	f000 ff6c 	bl	8101774 <HAL_GPIO_WritePin>

}
 810089c:	bf00      	nop
 810089e:	3710      	adds	r7, #16
 81008a0:	46bd      	mov	sp, r7
 81008a2:	bd80      	pop	{r7, pc}
 81008a4:	58021800 	.word	0x58021800
 81008a8:	1000012c 	.word	0x1000012c

081008ac <test_read_write_reg>:

	value_reg_16.data_16 = 0x0001;
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16.data_16);
}

void test_read_write_reg(){
 81008ac:	b580      	push	{r7, lr}
 81008ae:	b082      	sub	sp, #8
 81008b0:	af00      	add	r7, sp, #0
	uint16_t data_16;
	uint32_t data_32;

	printf("Attesa\r\n");
 81008b2:	4830      	ldr	r0, [pc, #192]	; (8100974 <test_read_write_reg+0xc8>)
 81008b4:	f004 ffb8 	bl	8105828 <puts>
	HAL_Delay(2000);
 81008b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 81008bc:	f000 fc8e 	bl	81011dc <HAL_Delay>
	//Lettura reg RUN (prima)
	data_16 = ADE9000_SPI_Read_16(ADDR_RUN);
 81008c0:	f44f 6090 	mov.w	r0, #1152	; 0x480
 81008c4:	f7ff ff14 	bl	81006f0 <ADE9000_SPI_Read_16>
 81008c8:	4603      	mov	r3, r0
 81008ca:	80fb      	strh	r3, [r7, #6]
	printf("ADDR_RUN = %x \r\n", data_16);
 81008cc:	88fb      	ldrh	r3, [r7, #6]
 81008ce:	4619      	mov	r1, r3
 81008d0:	4829      	ldr	r0, [pc, #164]	; (8100978 <test_read_write_reg+0xcc>)
 81008d2:	f004 ff23 	bl	810571c <iprintf>

	//Scrittura reg RUN
	data_16 = 0x0001;
 81008d6:	2301      	movs	r3, #1
 81008d8:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, data_16);
 81008da:	88fb      	ldrh	r3, [r7, #6]
 81008dc:	4619      	mov	r1, r3
 81008de:	f44f 6090 	mov.w	r0, #1152	; 0x480
 81008e2:	f7ff ff73 	bl	81007cc <ADE9000_SPI_Write_16>
	printf("ADDR_RUN scritto = %x \r\n",  data_16);
 81008e6:	88fb      	ldrh	r3, [r7, #6]
 81008e8:	4619      	mov	r1, r3
 81008ea:	4824      	ldr	r0, [pc, #144]	; (810097c <test_read_write_reg+0xd0>)
 81008ec:	f004 ff16 	bl	810571c <iprintf>

	//Lettura reg RUN (dopo)
	data_16 = ADE9000_SPI_Read_16(ADDR_RUN);
 81008f0:	f44f 6090 	mov.w	r0, #1152	; 0x480
 81008f4:	f7ff fefc 	bl	81006f0 <ADE9000_SPI_Read_16>
 81008f8:	4603      	mov	r3, r0
 81008fa:	80fb      	strh	r3, [r7, #6]
	printf("ADDR_RUN = %x \r\n",  data_16);
 81008fc:	88fb      	ldrh	r3, [r7, #6]
 81008fe:	4619      	mov	r1, r3
 8100900:	481d      	ldr	r0, [pc, #116]	; (8100978 <test_read_write_reg+0xcc>)
 8100902:	f004 ff0b 	bl	810571c <iprintf>

	//Lettura reg SPI
	data_16 = ADE9000_SPI_Read_16(ADDR_LAST_CMD);
 8100906:	f240 40ae 	movw	r0, #1198	; 0x4ae
 810090a:	f7ff fef1 	bl	81006f0 <ADE9000_SPI_Read_16>
 810090e:	4603      	mov	r3, r0
 8100910:	80fb      	strh	r3, [r7, #6]
	printf("ADDR_LAST_CMD = %x \r\n",  data_16);
 8100912:	88fb      	ldrh	r3, [r7, #6]
 8100914:	4619      	mov	r1, r3
 8100916:	481a      	ldr	r0, [pc, #104]	; (8100980 <test_read_write_reg+0xd4>)
 8100918:	f004 ff00 	bl	810571c <iprintf>
	data_16 = ADE9000_SPI_Read_16(ADDR_LAST_DATA_16);
 810091c:	f240 40ac 	movw	r0, #1196	; 0x4ac
 8100920:	f7ff fee6 	bl	81006f0 <ADE9000_SPI_Read_16>
 8100924:	4603      	mov	r3, r0
 8100926:	80fb      	strh	r3, [r7, #6]
	printf("ADDR_LAST_DATA_16 = %x \r\n",  data_16);
 8100928:	88fb      	ldrh	r3, [r7, #6]
 810092a:	4619      	mov	r1, r3
 810092c:	4815      	ldr	r0, [pc, #84]	; (8100984 <test_read_write_reg+0xd8>)
 810092e:	f004 fef5 	bl	810571c <iprintf>

	//Lettura e scrittura 32
	data_32 = ADE9000_SPI_Read_32(ADDR_VLEVEL);
 8100932:	f240 400f 	movw	r0, #1039	; 0x40f
 8100936:	f7ff ff0d 	bl	8100754 <ADE9000_SPI_Read_32>
 810093a:	6038      	str	r0, [r7, #0]
	printf("ADDR_VLEVEL = %x \r\n",  data_32);
 810093c:	6839      	ldr	r1, [r7, #0]
 810093e:	4812      	ldr	r0, [pc, #72]	; (8100988 <test_read_write_reg+0xdc>)
 8100940:	f004 feec 	bl	810571c <iprintf>
	data_32 = 0x0022EA28;
 8100944:	4b11      	ldr	r3, [pc, #68]	; (810098c <test_read_write_reg+0xe0>)
 8100946:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_VLEVEL,data_32);
 8100948:	6839      	ldr	r1, [r7, #0]
 810094a:	f240 400f 	movw	r0, #1039	; 0x40f
 810094e:	f7ff ff71 	bl	8100834 <ADE9000_SPI_Write_32>
	printf("ADDR_VLEVEL scritto = %x \r\n",  data_32);
 8100952:	6839      	ldr	r1, [r7, #0]
 8100954:	480e      	ldr	r0, [pc, #56]	; (8100990 <test_read_write_reg+0xe4>)
 8100956:	f004 fee1 	bl	810571c <iprintf>
	data_32 = ADE9000_SPI_Read_32(ADDR_VLEVEL);
 810095a:	f240 400f 	movw	r0, #1039	; 0x40f
 810095e:	f7ff fef9 	bl	8100754 <ADE9000_SPI_Read_32>
 8100962:	6038      	str	r0, [r7, #0]
	printf("ADDR_VLEVEL = %x \r\n",  data_32);
 8100964:	6839      	ldr	r1, [r7, #0]
 8100966:	4808      	ldr	r0, [pc, #32]	; (8100988 <test_read_write_reg+0xdc>)
 8100968:	f004 fed8 	bl	810571c <iprintf>


}
 810096c:	bf00      	nop
 810096e:	3708      	adds	r7, #8
 8100970:	46bd      	mov	sp, r7
 8100972:	bd80      	pop	{r7, pc}
 8100974:	081066cc 	.word	0x081066cc
 8100978:	081066d4 	.word	0x081066d4
 810097c:	081066e8 	.word	0x081066e8
 8100980:	08106704 	.word	0x08106704
 8100984:	0810671c 	.word	0x0810671c
 8100988:	08106738 	.word	0x08106738
 810098c:	0022ea28 	.word	0x0022ea28
 8100990:	0810674c 	.word	0x0810674c

08100994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100994:	b580      	push	{r7, lr}
 8100996:	b082      	sub	sp, #8
 8100998:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810099a:	4b1f      	ldr	r3, [pc, #124]	; (8100a18 <main+0x84>)
 810099c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009a0:	4a1d      	ldr	r2, [pc, #116]	; (8100a18 <main+0x84>)
 81009a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81009a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81009aa:	4b1b      	ldr	r3, [pc, #108]	; (8100a18 <main+0x84>)
 81009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81009b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81009b4:	607b      	str	r3, [r7, #4]
 81009b6:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81009b8:	2001      	movs	r0, #1
 81009ba:	f000 fef5 	bl	81017a8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81009be:	f000 ff7f 	bl	81018c0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81009c2:	2201      	movs	r2, #1
 81009c4:	2102      	movs	r1, #2
 81009c6:	2000      	movs	r0, #0
 81009c8:	f000 ff00 	bl	81017cc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81009cc:	4b13      	ldr	r3, [pc, #76]	; (8100a1c <main+0x88>)
 81009ce:	681b      	ldr	r3, [r3, #0]
 81009d0:	091b      	lsrs	r3, r3, #4
 81009d2:	f003 030f 	and.w	r3, r3, #15
 81009d6:	2b07      	cmp	r3, #7
 81009d8:	d108      	bne.n	81009ec <main+0x58>
 81009da:	4b11      	ldr	r3, [pc, #68]	; (8100a20 <main+0x8c>)
 81009dc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81009e0:	4a0f      	ldr	r2, [pc, #60]	; (8100a20 <main+0x8c>)
 81009e2:	f043 0301 	orr.w	r3, r3, #1
 81009e6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81009ea:	e007      	b.n	81009fc <main+0x68>
 81009ec:	4b0c      	ldr	r3, [pc, #48]	; (8100a20 <main+0x8c>)
 81009ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81009f2:	4a0b      	ldr	r2, [pc, #44]	; (8100a20 <main+0x8c>)
 81009f4:	f043 0301 	orr.w	r3, r3, #1
 81009f8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81009fc:	f000 fb3a 	bl	8101074 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100a00:	f000 f8b2 	bl	8100b68 <MX_GPIO_Init>
  MX_SPI3_Init();
 8100a04:	f000 f80e 	bl	8100a24 <MX_SPI3_Init>
  MX_USART3_UART_Init();
 8100a08:	f000 f862 	bl	8100ad0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  ADE9000_Power();
 8100a0c:	f7ff fe50 	bl	81006b0 <ADE9000_Power>
  test_read_write_reg();
 8100a10:	f7ff ff4c 	bl	81008ac <test_read_write_reg>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8100a14:	e7fe      	b.n	8100a14 <main+0x80>
 8100a16:	bf00      	nop
 8100a18:	58024400 	.word	0x58024400
 8100a1c:	e000ed00 	.word	0xe000ed00
 8100a20:	58026400 	.word	0x58026400

08100a24 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8100a24:	b580      	push	{r7, lr}
 8100a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8100a28:	4b27      	ldr	r3, [pc, #156]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a2a:	4a28      	ldr	r2, [pc, #160]	; (8100acc <MX_SPI3_Init+0xa8>)
 8100a2c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8100a2e:	4b26      	ldr	r3, [pc, #152]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a30:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8100a34:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8100a36:	4b24      	ldr	r3, [pc, #144]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a38:	2200      	movs	r2, #0
 8100a3a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8100a3c:	4b22      	ldr	r3, [pc, #136]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a3e:	220f      	movs	r2, #15
 8100a40:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100a42:	4b21      	ldr	r3, [pc, #132]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a44:	2200      	movs	r2, #0
 8100a46:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100a48:	4b1f      	ldr	r3, [pc, #124]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a4a:	2200      	movs	r2, #0
 8100a4c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8100a4e:	4b1e      	ldr	r3, [pc, #120]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8100a54:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8100a56:	4b1c      	ldr	r3, [pc, #112]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a58:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8100a5c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100a5e:	4b1a      	ldr	r3, [pc, #104]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a60:	2200      	movs	r2, #0
 8100a62:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8100a64:	4b18      	ldr	r3, [pc, #96]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a66:	2200      	movs	r2, #0
 8100a68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100a6a:	4b17      	ldr	r3, [pc, #92]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a6c:	2200      	movs	r2, #0
 8100a6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8100a70:	4b15      	ldr	r3, [pc, #84]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a72:	2200      	movs	r2, #0
 8100a74:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100a76:	4b14      	ldr	r3, [pc, #80]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a78:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8100a7c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100a7e:	4b12      	ldr	r3, [pc, #72]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a80:	2200      	movs	r2, #0
 8100a82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100a84:	4b10      	ldr	r3, [pc, #64]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a86:	2200      	movs	r2, #0
 8100a88:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100a8a:	4b0f      	ldr	r3, [pc, #60]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a8c:	2200      	movs	r2, #0
 8100a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100a90:	4b0d      	ldr	r3, [pc, #52]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a92:	2200      	movs	r2, #0
 8100a94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100a96:	4b0c      	ldr	r3, [pc, #48]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a98:	2200      	movs	r2, #0
 8100a9a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100a9c:	4b0a      	ldr	r3, [pc, #40]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100a9e:	2200      	movs	r2, #0
 8100aa0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100aa2:	4b09      	ldr	r3, [pc, #36]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100aa4:	2200      	movs	r2, #0
 8100aa6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100aa8:	4b07      	ldr	r3, [pc, #28]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100aaa:	2200      	movs	r2, #0
 8100aac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100aae:	4b06      	ldr	r3, [pc, #24]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100ab0:	2200      	movs	r2, #0
 8100ab2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8100ab4:	4804      	ldr	r0, [pc, #16]	; (8100ac8 <MX_SPI3_Init+0xa4>)
 8100ab6:	f002 fc4b 	bl	8103350 <HAL_SPI_Init>
 8100aba:	4603      	mov	r3, r0
 8100abc:	2b00      	cmp	r3, #0
 8100abe:	d001      	beq.n	8100ac4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8100ac0:	f000 f8e0 	bl	8100c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8100ac4:	bf00      	nop
 8100ac6:	bd80      	pop	{r7, pc}
 8100ac8:	1000012c 	.word	0x1000012c
 8100acc:	40003c00 	.word	0x40003c00

08100ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8100ad0:	b580      	push	{r7, lr}
 8100ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8100ad4:	4b22      	ldr	r3, [pc, #136]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100ad6:	4a23      	ldr	r2, [pc, #140]	; (8100b64 <MX_USART3_UART_Init+0x94>)
 8100ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8100ada:	4b21      	ldr	r3, [pc, #132]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8100ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8100ae2:	4b1f      	ldr	r3, [pc, #124]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100ae4:	2200      	movs	r2, #0
 8100ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8100ae8:	4b1d      	ldr	r3, [pc, #116]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100aea:	2200      	movs	r2, #0
 8100aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8100aee:	4b1c      	ldr	r3, [pc, #112]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100af0:	2200      	movs	r2, #0
 8100af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8100af4:	4b1a      	ldr	r3, [pc, #104]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100af6:	220c      	movs	r2, #12
 8100af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100afa:	4b19      	ldr	r3, [pc, #100]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100afc:	2200      	movs	r2, #0
 8100afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8100b00:	4b17      	ldr	r3, [pc, #92]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100b02:	2200      	movs	r2, #0
 8100b04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100b06:	4b16      	ldr	r3, [pc, #88]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100b08:	2200      	movs	r2, #0
 8100b0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100b0c:	4b14      	ldr	r3, [pc, #80]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100b0e:	2200      	movs	r2, #0
 8100b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8100b12:	4b13      	ldr	r3, [pc, #76]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100b14:	2200      	movs	r2, #0
 8100b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8100b18:	4811      	ldr	r0, [pc, #68]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100b1a:	f003 fccf 	bl	81044bc <HAL_UART_Init>
 8100b1e:	4603      	mov	r3, r0
 8100b20:	2b00      	cmp	r3, #0
 8100b22:	d001      	beq.n	8100b28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8100b24:	f000 f8ae 	bl	8100c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b28:	2100      	movs	r1, #0
 8100b2a:	480d      	ldr	r0, [pc, #52]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100b2c:	f004 fcfa 	bl	8105524 <HAL_UARTEx_SetTxFifoThreshold>
 8100b30:	4603      	mov	r3, r0
 8100b32:	2b00      	cmp	r3, #0
 8100b34:	d001      	beq.n	8100b3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8100b36:	f000 f8a5 	bl	8100c84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100b3a:	2100      	movs	r1, #0
 8100b3c:	4808      	ldr	r0, [pc, #32]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100b3e:	f004 fd2f 	bl	81055a0 <HAL_UARTEx_SetRxFifoThreshold>
 8100b42:	4603      	mov	r3, r0
 8100b44:	2b00      	cmp	r3, #0
 8100b46:	d001      	beq.n	8100b4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8100b48:	f000 f89c 	bl	8100c84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8100b4c:	4804      	ldr	r0, [pc, #16]	; (8100b60 <MX_USART3_UART_Init+0x90>)
 8100b4e:	f004 fcb0 	bl	81054b2 <HAL_UARTEx_DisableFifoMode>
 8100b52:	4603      	mov	r3, r0
 8100b54:	2b00      	cmp	r3, #0
 8100b56:	d001      	beq.n	8100b5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8100b58:	f000 f894 	bl	8100c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8100b5c:	bf00      	nop
 8100b5e:	bd80      	pop	{r7, pc}
 8100b60:	1000009c 	.word	0x1000009c
 8100b64:	40004800 	.word	0x40004800

08100b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100b68:	b580      	push	{r7, lr}
 8100b6a:	b08a      	sub	sp, #40	; 0x28
 8100b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b6e:	f107 0314 	add.w	r3, r7, #20
 8100b72:	2200      	movs	r2, #0
 8100b74:	601a      	str	r2, [r3, #0]
 8100b76:	605a      	str	r2, [r3, #4]
 8100b78:	609a      	str	r2, [r3, #8]
 8100b7a:	60da      	str	r2, [r3, #12]
 8100b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100b7e:	4b35      	ldr	r3, [pc, #212]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b84:	4a33      	ldr	r2, [pc, #204]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100b86:	f043 0310 	orr.w	r3, r3, #16
 8100b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100b8e:	4b31      	ldr	r3, [pc, #196]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100b94:	f003 0310 	and.w	r3, r3, #16
 8100b98:	613b      	str	r3, [r7, #16]
 8100b9a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8100b9c:	4b2d      	ldr	r3, [pc, #180]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100ba2:	4a2c      	ldr	r2, [pc, #176]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100ba4:	f043 0308 	orr.w	r3, r3, #8
 8100ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bac:	4b29      	ldr	r3, [pc, #164]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bb2:	f003 0308 	and.w	r3, r3, #8
 8100bb6:	60fb      	str	r3, [r7, #12]
 8100bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8100bba:	4b26      	ldr	r3, [pc, #152]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bc0:	4a24      	ldr	r2, [pc, #144]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8100bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bca:	4b22      	ldr	r3, [pc, #136]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8100bd4:	60bb      	str	r3, [r7, #8]
 8100bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100bd8:	4b1e      	ldr	r3, [pc, #120]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bde:	4a1d      	ldr	r2, [pc, #116]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100be0:	f043 0302 	orr.w	r3, r3, #2
 8100be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100be8:	4b1a      	ldr	r3, [pc, #104]	; (8100c54 <MX_GPIO_Init+0xec>)
 8100bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bee:	f003 0302 	and.w	r3, r3, #2
 8100bf2:	607b      	str	r3, [r7, #4]
 8100bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11|GPIO_PIN_14, GPIO_PIN_RESET);
 8100bf6:	2200      	movs	r2, #0
 8100bf8:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8100bfc:	4816      	ldr	r0, [pc, #88]	; (8100c58 <MX_GPIO_Init+0xf0>)
 8100bfe:	f000 fdb9 	bl	8101774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8100c02:	2201      	movs	r2, #1
 8100c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8100c08:	4814      	ldr	r0, [pc, #80]	; (8100c5c <MX_GPIO_Init+0xf4>)
 8100c0a:	f000 fdb3 	bl	8101774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE11 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_14;
 8100c0e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8100c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c14:	2301      	movs	r3, #1
 8100c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c18:	2300      	movs	r3, #0
 8100c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c1c:	2300      	movs	r3, #0
 8100c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8100c20:	f107 0314 	add.w	r3, r7, #20
 8100c24:	4619      	mov	r1, r3
 8100c26:	480c      	ldr	r0, [pc, #48]	; (8100c58 <MX_GPIO_Init+0xf0>)
 8100c28:	f000 fbf4 	bl	8101414 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8100c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8100c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100c32:	2301      	movs	r3, #1
 8100c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100c36:	2300      	movs	r3, #0
 8100c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100c3a:	2300      	movs	r3, #0
 8100c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8100c3e:	f107 0314 	add.w	r3, r7, #20
 8100c42:	4619      	mov	r1, r3
 8100c44:	4805      	ldr	r0, [pc, #20]	; (8100c5c <MX_GPIO_Init+0xf4>)
 8100c46:	f000 fbe5 	bl	8101414 <HAL_GPIO_Init>

}
 8100c4a:	bf00      	nop
 8100c4c:	3728      	adds	r7, #40	; 0x28
 8100c4e:	46bd      	mov	sp, r7
 8100c50:	bd80      	pop	{r7, pc}
 8100c52:	bf00      	nop
 8100c54:	58024400 	.word	0x58024400
 8100c58:	58021000 	.word	0x58021000
 8100c5c:	58021800 	.word	0x58021800

08100c60 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8100c60:	b580      	push	{r7, lr}
 8100c62:	b082      	sub	sp, #8
 8100c64:	af00      	add	r7, sp, #0
 8100c66:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8100c68:	1d39      	adds	r1, r7, #4
 8100c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8100c6e:	2201      	movs	r2, #1
 8100c70:	4803      	ldr	r0, [pc, #12]	; (8100c80 <__io_putchar+0x20>)
 8100c72:	f003 fc73 	bl	810455c <HAL_UART_Transmit>
	return ch;
 8100c76:	687b      	ldr	r3, [r7, #4]
}
 8100c78:	4618      	mov	r0, r3
 8100c7a:	3708      	adds	r7, #8
 8100c7c:	46bd      	mov	sp, r7
 8100c7e:	bd80      	pop	{r7, pc}
 8100c80:	1000009c 	.word	0x1000009c

08100c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100c84:	b480      	push	{r7}
 8100c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100c88:	b672      	cpsid	i
}
 8100c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100c8c:	e7fe      	b.n	8100c8c <Error_Handler+0x8>
	...

08100c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100c90:	b480      	push	{r7}
 8100c92:	b083      	sub	sp, #12
 8100c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100c96:	4b0a      	ldr	r3, [pc, #40]	; (8100cc0 <HAL_MspInit+0x30>)
 8100c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100c9c:	4a08      	ldr	r2, [pc, #32]	; (8100cc0 <HAL_MspInit+0x30>)
 8100c9e:	f043 0302 	orr.w	r3, r3, #2
 8100ca2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8100ca6:	4b06      	ldr	r3, [pc, #24]	; (8100cc0 <HAL_MspInit+0x30>)
 8100ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100cac:	f003 0302 	and.w	r3, r3, #2
 8100cb0:	607b      	str	r3, [r7, #4]
 8100cb2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8100cb4:	bf00      	nop
 8100cb6:	370c      	adds	r7, #12
 8100cb8:	46bd      	mov	sp, r7
 8100cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cbe:	4770      	bx	lr
 8100cc0:	58024400 	.word	0x58024400

08100cc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8100cc4:	b580      	push	{r7, lr}
 8100cc6:	b0b8      	sub	sp, #224	; 0xe0
 8100cc8:	af00      	add	r7, sp, #0
 8100cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100ccc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100cd0:	2200      	movs	r2, #0
 8100cd2:	601a      	str	r2, [r3, #0]
 8100cd4:	605a      	str	r2, [r3, #4]
 8100cd6:	609a      	str	r2, [r3, #8]
 8100cd8:	60da      	str	r2, [r3, #12]
 8100cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100cdc:	f107 0310 	add.w	r3, r7, #16
 8100ce0:	22bc      	movs	r2, #188	; 0xbc
 8100ce2:	2100      	movs	r1, #0
 8100ce4:	4618      	mov	r0, r3
 8100ce6:	f004 fd11 	bl	810570c <memset>
  if(hspi->Instance==SPI3)
 8100cea:	687b      	ldr	r3, [r7, #4]
 8100cec:	681b      	ldr	r3, [r3, #0]
 8100cee:	4a2f      	ldr	r2, [pc, #188]	; (8100dac <HAL_SPI_MspInit+0xe8>)
 8100cf0:	4293      	cmp	r3, r2
 8100cf2:	d157      	bne.n	8100da4 <HAL_SPI_MspInit+0xe0>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8100cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8100cf8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8100cfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8100cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100d00:	f107 0310 	add.w	r3, r7, #16
 8100d04:	4618      	mov	r0, r3
 8100d06:	f000 ffc1 	bl	8101c8c <HAL_RCCEx_PeriphCLKConfig>
 8100d0a:	4603      	mov	r3, r0
 8100d0c:	2b00      	cmp	r3, #0
 8100d0e:	d001      	beq.n	8100d14 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8100d10:	f7ff ffb8 	bl	8100c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8100d14:	4b26      	ldr	r3, [pc, #152]	; (8100db0 <HAL_SPI_MspInit+0xec>)
 8100d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100d1a:	4a25      	ldr	r2, [pc, #148]	; (8100db0 <HAL_SPI_MspInit+0xec>)
 8100d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8100d20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100d24:	4b22      	ldr	r3, [pc, #136]	; (8100db0 <HAL_SPI_MspInit+0xec>)
 8100d26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8100d2e:	60fb      	str	r3, [r7, #12]
 8100d30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8100d32:	4b1f      	ldr	r3, [pc, #124]	; (8100db0 <HAL_SPI_MspInit+0xec>)
 8100d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d38:	4a1d      	ldr	r2, [pc, #116]	; (8100db0 <HAL_SPI_MspInit+0xec>)
 8100d3a:	f043 0302 	orr.w	r3, r3, #2
 8100d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100d42:	4b1b      	ldr	r3, [pc, #108]	; (8100db0 <HAL_SPI_MspInit+0xec>)
 8100d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100d48:	f003 0302 	and.w	r3, r3, #2
 8100d4c:	60bb      	str	r3, [r7, #8]
 8100d4e:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8100d50:	2318      	movs	r3, #24
 8100d52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d56:	2302      	movs	r3, #2
 8100d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d5c:	2300      	movs	r3, #0
 8100d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d62:	2300      	movs	r3, #0
 8100d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8100d68:	2306      	movs	r3, #6
 8100d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100d6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100d72:	4619      	mov	r1, r3
 8100d74:	480f      	ldr	r0, [pc, #60]	; (8100db4 <HAL_SPI_MspInit+0xf0>)
 8100d76:	f000 fb4d 	bl	8101414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8100d7a:	2320      	movs	r3, #32
 8100d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100d80:	2302      	movs	r3, #2
 8100d82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100d86:	2300      	movs	r3, #0
 8100d88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100d8c:	2300      	movs	r3, #0
 8100d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8100d92:	2307      	movs	r3, #7
 8100d94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100d98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100d9c:	4619      	mov	r1, r3
 8100d9e:	4805      	ldr	r0, [pc, #20]	; (8100db4 <HAL_SPI_MspInit+0xf0>)
 8100da0:	f000 fb38 	bl	8101414 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8100da4:	bf00      	nop
 8100da6:	37e0      	adds	r7, #224	; 0xe0
 8100da8:	46bd      	mov	sp, r7
 8100daa:	bd80      	pop	{r7, pc}
 8100dac:	40003c00 	.word	0x40003c00
 8100db0:	58024400 	.word	0x58024400
 8100db4:	58020400 	.word	0x58020400

08100db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8100db8:	b580      	push	{r7, lr}
 8100dba:	b0b8      	sub	sp, #224	; 0xe0
 8100dbc:	af00      	add	r7, sp, #0
 8100dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100dc0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100dc4:	2200      	movs	r2, #0
 8100dc6:	601a      	str	r2, [r3, #0]
 8100dc8:	605a      	str	r2, [r3, #4]
 8100dca:	609a      	str	r2, [r3, #8]
 8100dcc:	60da      	str	r2, [r3, #12]
 8100dce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100dd0:	f107 0310 	add.w	r3, r7, #16
 8100dd4:	22bc      	movs	r2, #188	; 0xbc
 8100dd6:	2100      	movs	r1, #0
 8100dd8:	4618      	mov	r0, r3
 8100dda:	f004 fc97 	bl	810570c <memset>
  if(huart->Instance==USART3)
 8100dde:	687b      	ldr	r3, [r7, #4]
 8100de0:	681b      	ldr	r3, [r3, #0]
 8100de2:	4a25      	ldr	r2, [pc, #148]	; (8100e78 <HAL_UART_MspInit+0xc0>)
 8100de4:	4293      	cmp	r3, r2
 8100de6:	d142      	bne.n	8100e6e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100de8:	2302      	movs	r3, #2
 8100dea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100dec:	2300      	movs	r3, #0
 8100dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100df2:	f107 0310 	add.w	r3, r7, #16
 8100df6:	4618      	mov	r0, r3
 8100df8:	f000 ff48 	bl	8101c8c <HAL_RCCEx_PeriphCLKConfig>
 8100dfc:	4603      	mov	r3, r0
 8100dfe:	2b00      	cmp	r3, #0
 8100e00:	d001      	beq.n	8100e06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8100e02:	f7ff ff3f 	bl	8100c84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8100e06:	4b1d      	ldr	r3, [pc, #116]	; (8100e7c <HAL_UART_MspInit+0xc4>)
 8100e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e0c:	4a1b      	ldr	r2, [pc, #108]	; (8100e7c <HAL_UART_MspInit+0xc4>)
 8100e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100e12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8100e16:	4b19      	ldr	r3, [pc, #100]	; (8100e7c <HAL_UART_MspInit+0xc4>)
 8100e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100e20:	60fb      	str	r3, [r7, #12]
 8100e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8100e24:	4b15      	ldr	r3, [pc, #84]	; (8100e7c <HAL_UART_MspInit+0xc4>)
 8100e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e2a:	4a14      	ldr	r2, [pc, #80]	; (8100e7c <HAL_UART_MspInit+0xc4>)
 8100e2c:	f043 0308 	orr.w	r3, r3, #8
 8100e30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e34:	4b11      	ldr	r3, [pc, #68]	; (8100e7c <HAL_UART_MspInit+0xc4>)
 8100e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e3a:	f003 0308 	and.w	r3, r3, #8
 8100e3e:	60bb      	str	r3, [r7, #8]
 8100e40:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8100e42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8100e46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8100e4a:	2302      	movs	r3, #2
 8100e4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100e50:	2300      	movs	r3, #0
 8100e52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100e56:	2300      	movs	r3, #0
 8100e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8100e5c:	2307      	movs	r3, #7
 8100e5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8100e62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100e66:	4619      	mov	r1, r3
 8100e68:	4805      	ldr	r0, [pc, #20]	; (8100e80 <HAL_UART_MspInit+0xc8>)
 8100e6a:	f000 fad3 	bl	8101414 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8100e6e:	bf00      	nop
 8100e70:	37e0      	adds	r7, #224	; 0xe0
 8100e72:	46bd      	mov	sp, r7
 8100e74:	bd80      	pop	{r7, pc}
 8100e76:	bf00      	nop
 8100e78:	40004800 	.word	0x40004800
 8100e7c:	58024400 	.word	0x58024400
 8100e80:	58020c00 	.word	0x58020c00

08100e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100e84:	b480      	push	{r7}
 8100e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8100e88:	e7fe      	b.n	8100e88 <NMI_Handler+0x4>

08100e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100e8a:	b480      	push	{r7}
 8100e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100e8e:	e7fe      	b.n	8100e8e <HardFault_Handler+0x4>

08100e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100e90:	b480      	push	{r7}
 8100e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100e94:	e7fe      	b.n	8100e94 <MemManage_Handler+0x4>

08100e96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100e96:	b480      	push	{r7}
 8100e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100e9a:	e7fe      	b.n	8100e9a <BusFault_Handler+0x4>

08100e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100e9c:	b480      	push	{r7}
 8100e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100ea0:	e7fe      	b.n	8100ea0 <UsageFault_Handler+0x4>

08100ea2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100ea2:	b480      	push	{r7}
 8100ea4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100ea6:	bf00      	nop
 8100ea8:	46bd      	mov	sp, r7
 8100eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eae:	4770      	bx	lr

08100eb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8100eb0:	b480      	push	{r7}
 8100eb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100eb4:	bf00      	nop
 8100eb6:	46bd      	mov	sp, r7
 8100eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100ebc:	4770      	bx	lr

08100ebe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100ebe:	b480      	push	{r7}
 8100ec0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100ec2:	bf00      	nop
 8100ec4:	46bd      	mov	sp, r7
 8100ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eca:	4770      	bx	lr

08100ecc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100ecc:	b580      	push	{r7, lr}
 8100ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100ed0:	f000 f964 	bl	810119c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100ed4:	bf00      	nop
 8100ed6:	bd80      	pop	{r7, pc}

08100ed8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8100ed8:	b580      	push	{r7, lr}
 8100eda:	b086      	sub	sp, #24
 8100edc:	af00      	add	r7, sp, #0
 8100ede:	60f8      	str	r0, [r7, #12]
 8100ee0:	60b9      	str	r1, [r7, #8]
 8100ee2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100ee4:	2300      	movs	r3, #0
 8100ee6:	617b      	str	r3, [r7, #20]
 8100ee8:	e00a      	b.n	8100f00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8100eea:	f3af 8000 	nop.w
 8100eee:	4601      	mov	r1, r0
 8100ef0:	68bb      	ldr	r3, [r7, #8]
 8100ef2:	1c5a      	adds	r2, r3, #1
 8100ef4:	60ba      	str	r2, [r7, #8]
 8100ef6:	b2ca      	uxtb	r2, r1
 8100ef8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100efa:	697b      	ldr	r3, [r7, #20]
 8100efc:	3301      	adds	r3, #1
 8100efe:	617b      	str	r3, [r7, #20]
 8100f00:	697a      	ldr	r2, [r7, #20]
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	429a      	cmp	r2, r3
 8100f06:	dbf0      	blt.n	8100eea <_read+0x12>
	}

return len;
 8100f08:	687b      	ldr	r3, [r7, #4]
}
 8100f0a:	4618      	mov	r0, r3
 8100f0c:	3718      	adds	r7, #24
 8100f0e:	46bd      	mov	sp, r7
 8100f10:	bd80      	pop	{r7, pc}

08100f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8100f12:	b580      	push	{r7, lr}
 8100f14:	b086      	sub	sp, #24
 8100f16:	af00      	add	r7, sp, #0
 8100f18:	60f8      	str	r0, [r7, #12]
 8100f1a:	60b9      	str	r1, [r7, #8]
 8100f1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100f1e:	2300      	movs	r3, #0
 8100f20:	617b      	str	r3, [r7, #20]
 8100f22:	e009      	b.n	8100f38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8100f24:	68bb      	ldr	r3, [r7, #8]
 8100f26:	1c5a      	adds	r2, r3, #1
 8100f28:	60ba      	str	r2, [r7, #8]
 8100f2a:	781b      	ldrb	r3, [r3, #0]
 8100f2c:	4618      	mov	r0, r3
 8100f2e:	f7ff fe97 	bl	8100c60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8100f32:	697b      	ldr	r3, [r7, #20]
 8100f34:	3301      	adds	r3, #1
 8100f36:	617b      	str	r3, [r7, #20]
 8100f38:	697a      	ldr	r2, [r7, #20]
 8100f3a:	687b      	ldr	r3, [r7, #4]
 8100f3c:	429a      	cmp	r2, r3
 8100f3e:	dbf1      	blt.n	8100f24 <_write+0x12>
	}
	return len;
 8100f40:	687b      	ldr	r3, [r7, #4]
}
 8100f42:	4618      	mov	r0, r3
 8100f44:	3718      	adds	r7, #24
 8100f46:	46bd      	mov	sp, r7
 8100f48:	bd80      	pop	{r7, pc}

08100f4a <_close>:

int _close(int file)
{
 8100f4a:	b480      	push	{r7}
 8100f4c:	b083      	sub	sp, #12
 8100f4e:	af00      	add	r7, sp, #0
 8100f50:	6078      	str	r0, [r7, #4]
	return -1;
 8100f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8100f56:	4618      	mov	r0, r3
 8100f58:	370c      	adds	r7, #12
 8100f5a:	46bd      	mov	sp, r7
 8100f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f60:	4770      	bx	lr

08100f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8100f62:	b480      	push	{r7}
 8100f64:	b083      	sub	sp, #12
 8100f66:	af00      	add	r7, sp, #0
 8100f68:	6078      	str	r0, [r7, #4]
 8100f6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8100f6c:	683b      	ldr	r3, [r7, #0]
 8100f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8100f72:	605a      	str	r2, [r3, #4]
	return 0;
 8100f74:	2300      	movs	r3, #0
}
 8100f76:	4618      	mov	r0, r3
 8100f78:	370c      	adds	r7, #12
 8100f7a:	46bd      	mov	sp, r7
 8100f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f80:	4770      	bx	lr

08100f82 <_isatty>:

int _isatty(int file)
{
 8100f82:	b480      	push	{r7}
 8100f84:	b083      	sub	sp, #12
 8100f86:	af00      	add	r7, sp, #0
 8100f88:	6078      	str	r0, [r7, #4]
	return 1;
 8100f8a:	2301      	movs	r3, #1
}
 8100f8c:	4618      	mov	r0, r3
 8100f8e:	370c      	adds	r7, #12
 8100f90:	46bd      	mov	sp, r7
 8100f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f96:	4770      	bx	lr

08100f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8100f98:	b480      	push	{r7}
 8100f9a:	b085      	sub	sp, #20
 8100f9c:	af00      	add	r7, sp, #0
 8100f9e:	60f8      	str	r0, [r7, #12]
 8100fa0:	60b9      	str	r1, [r7, #8]
 8100fa2:	607a      	str	r2, [r7, #4]
	return 0;
 8100fa4:	2300      	movs	r3, #0
}
 8100fa6:	4618      	mov	r0, r3
 8100fa8:	3714      	adds	r7, #20
 8100faa:	46bd      	mov	sp, r7
 8100fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fb0:	4770      	bx	lr
	...

08100fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8100fb4:	b580      	push	{r7, lr}
 8100fb6:	b086      	sub	sp, #24
 8100fb8:	af00      	add	r7, sp, #0
 8100fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8100fbc:	4a14      	ldr	r2, [pc, #80]	; (8101010 <_sbrk+0x5c>)
 8100fbe:	4b15      	ldr	r3, [pc, #84]	; (8101014 <_sbrk+0x60>)
 8100fc0:	1ad3      	subs	r3, r2, r3
 8100fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8100fc4:	697b      	ldr	r3, [r7, #20]
 8100fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8100fc8:	4b13      	ldr	r3, [pc, #76]	; (8101018 <_sbrk+0x64>)
 8100fca:	681b      	ldr	r3, [r3, #0]
 8100fcc:	2b00      	cmp	r3, #0
 8100fce:	d102      	bne.n	8100fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8100fd0:	4b11      	ldr	r3, [pc, #68]	; (8101018 <_sbrk+0x64>)
 8100fd2:	4a12      	ldr	r2, [pc, #72]	; (810101c <_sbrk+0x68>)
 8100fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8100fd6:	4b10      	ldr	r3, [pc, #64]	; (8101018 <_sbrk+0x64>)
 8100fd8:	681a      	ldr	r2, [r3, #0]
 8100fda:	687b      	ldr	r3, [r7, #4]
 8100fdc:	4413      	add	r3, r2
 8100fde:	693a      	ldr	r2, [r7, #16]
 8100fe0:	429a      	cmp	r2, r3
 8100fe2:	d207      	bcs.n	8100ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8100fe4:	f004 fb68 	bl	81056b8 <__errno>
 8100fe8:	4603      	mov	r3, r0
 8100fea:	220c      	movs	r2, #12
 8100fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8100fee:	f04f 33ff 	mov.w	r3, #4294967295
 8100ff2:	e009      	b.n	8101008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8100ff4:	4b08      	ldr	r3, [pc, #32]	; (8101018 <_sbrk+0x64>)
 8100ff6:	681b      	ldr	r3, [r3, #0]
 8100ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8100ffa:	4b07      	ldr	r3, [pc, #28]	; (8101018 <_sbrk+0x64>)
 8100ffc:	681a      	ldr	r2, [r3, #0]
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	4413      	add	r3, r2
 8101002:	4a05      	ldr	r2, [pc, #20]	; (8101018 <_sbrk+0x64>)
 8101004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101006:	68fb      	ldr	r3, [r7, #12]
}
 8101008:	4618      	mov	r0, r3
 810100a:	3718      	adds	r7, #24
 810100c:	46bd      	mov	sp, r7
 810100e:	bd80      	pop	{r7, pc}
 8101010:	10048000 	.word	0x10048000
 8101014:	00000400 	.word	0x00000400
 8101018:	10000090 	.word	0x10000090
 810101c:	10000288 	.word	0x10000288

08101020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101058 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101024:	f7ff fb28 	bl	8100678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101028:	480c      	ldr	r0, [pc, #48]	; (810105c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810102a:	490d      	ldr	r1, [pc, #52]	; (8101060 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810102c:	4a0d      	ldr	r2, [pc, #52]	; (8101064 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101030:	e002      	b.n	8101038 <LoopCopyDataInit>

08101032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101036:	3304      	adds	r3, #4

08101038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810103c:	d3f9      	bcc.n	8101032 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810103e:	4a0a      	ldr	r2, [pc, #40]	; (8101068 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101040:	4c0a      	ldr	r4, [pc, #40]	; (810106c <LoopFillZerobss+0x22>)
  movs r3, #0
 8101042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101044:	e001      	b.n	810104a <LoopFillZerobss>

08101046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101048:	3204      	adds	r2, #4

0810104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810104c:	d3fb      	bcc.n	8101046 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810104e:	f004 fb39 	bl	81056c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101052:	f7ff fc9f 	bl	8100994 <main>
  bx  lr
 8101056:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101058:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810105c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101060:	10000074 	.word	0x10000074
  ldr r2, =_sidata
 8101064:	08106848 	.word	0x08106848
  ldr r2, =_sbss
 8101068:	10000074 	.word	0x10000074
  ldr r4, =_ebss
 810106c:	10000284 	.word	0x10000284

08101070 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101070:	e7fe      	b.n	8101070 <ADC3_IRQHandler>
	...

08101074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101074:	b580      	push	{r7, lr}
 8101076:	b082      	sub	sp, #8
 8101078:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810107a:	4b28      	ldr	r3, [pc, #160]	; (810111c <HAL_Init+0xa8>)
 810107c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101080:	4a26      	ldr	r2, [pc, #152]	; (810111c <HAL_Init+0xa8>)
 8101082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101086:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810108a:	4b24      	ldr	r3, [pc, #144]	; (810111c <HAL_Init+0xa8>)
 810108c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101094:	603b      	str	r3, [r7, #0]
 8101096:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101098:	4b21      	ldr	r3, [pc, #132]	; (8101120 <HAL_Init+0xac>)
 810109a:	681b      	ldr	r3, [r3, #0]
 810109c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81010a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81010a4:	4a1e      	ldr	r2, [pc, #120]	; (8101120 <HAL_Init+0xac>)
 81010a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81010aa:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81010ac:	4b1c      	ldr	r3, [pc, #112]	; (8101120 <HAL_Init+0xac>)
 81010ae:	681b      	ldr	r3, [r3, #0]
 81010b0:	4a1b      	ldr	r2, [pc, #108]	; (8101120 <HAL_Init+0xac>)
 81010b2:	f043 0301 	orr.w	r3, r3, #1
 81010b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81010b8:	2003      	movs	r0, #3
 81010ba:	f000 f965 	bl	8101388 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81010be:	f000 fc0d 	bl	81018dc <HAL_RCC_GetSysClockFreq>
 81010c2:	4602      	mov	r2, r0
 81010c4:	4b15      	ldr	r3, [pc, #84]	; (810111c <HAL_Init+0xa8>)
 81010c6:	699b      	ldr	r3, [r3, #24]
 81010c8:	0a1b      	lsrs	r3, r3, #8
 81010ca:	f003 030f 	and.w	r3, r3, #15
 81010ce:	4915      	ldr	r1, [pc, #84]	; (8101124 <HAL_Init+0xb0>)
 81010d0:	5ccb      	ldrb	r3, [r1, r3]
 81010d2:	f003 031f 	and.w	r3, r3, #31
 81010d6:	fa22 f303 	lsr.w	r3, r2, r3
 81010da:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81010dc:	4b0f      	ldr	r3, [pc, #60]	; (810111c <HAL_Init+0xa8>)
 81010de:	699b      	ldr	r3, [r3, #24]
 81010e0:	f003 030f 	and.w	r3, r3, #15
 81010e4:	4a0f      	ldr	r2, [pc, #60]	; (8101124 <HAL_Init+0xb0>)
 81010e6:	5cd3      	ldrb	r3, [r2, r3]
 81010e8:	f003 031f 	and.w	r3, r3, #31
 81010ec:	687a      	ldr	r2, [r7, #4]
 81010ee:	fa22 f303 	lsr.w	r3, r2, r3
 81010f2:	4a0d      	ldr	r2, [pc, #52]	; (8101128 <HAL_Init+0xb4>)
 81010f4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81010f6:	4b0c      	ldr	r3, [pc, #48]	; (8101128 <HAL_Init+0xb4>)
 81010f8:	681b      	ldr	r3, [r3, #0]
 81010fa:	4a0c      	ldr	r2, [pc, #48]	; (810112c <HAL_Init+0xb8>)
 81010fc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81010fe:	2000      	movs	r0, #0
 8101100:	f000 f816 	bl	8101130 <HAL_InitTick>
 8101104:	4603      	mov	r3, r0
 8101106:	2b00      	cmp	r3, #0
 8101108:	d001      	beq.n	810110e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810110a:	2301      	movs	r3, #1
 810110c:	e002      	b.n	8101114 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810110e:	f7ff fdbf 	bl	8100c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101112:	2300      	movs	r3, #0
}
 8101114:	4618      	mov	r0, r3
 8101116:	3708      	adds	r7, #8
 8101118:	46bd      	mov	sp, r7
 810111a:	bd80      	pop	{r7, pc}
 810111c:	58024400 	.word	0x58024400
 8101120:	40024400 	.word	0x40024400
 8101124:	08106768 	.word	0x08106768
 8101128:	10000004 	.word	0x10000004
 810112c:	10000000 	.word	0x10000000

08101130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101130:	b580      	push	{r7, lr}
 8101132:	b082      	sub	sp, #8
 8101134:	af00      	add	r7, sp, #0
 8101136:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101138:	4b15      	ldr	r3, [pc, #84]	; (8101190 <HAL_InitTick+0x60>)
 810113a:	781b      	ldrb	r3, [r3, #0]
 810113c:	2b00      	cmp	r3, #0
 810113e:	d101      	bne.n	8101144 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101140:	2301      	movs	r3, #1
 8101142:	e021      	b.n	8101188 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101144:	4b13      	ldr	r3, [pc, #76]	; (8101194 <HAL_InitTick+0x64>)
 8101146:	681a      	ldr	r2, [r3, #0]
 8101148:	4b11      	ldr	r3, [pc, #68]	; (8101190 <HAL_InitTick+0x60>)
 810114a:	781b      	ldrb	r3, [r3, #0]
 810114c:	4619      	mov	r1, r3
 810114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101152:	fbb3 f3f1 	udiv	r3, r3, r1
 8101156:	fbb2 f3f3 	udiv	r3, r2, r3
 810115a:	4618      	mov	r0, r3
 810115c:	f000 f939 	bl	81013d2 <HAL_SYSTICK_Config>
 8101160:	4603      	mov	r3, r0
 8101162:	2b00      	cmp	r3, #0
 8101164:	d001      	beq.n	810116a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101166:	2301      	movs	r3, #1
 8101168:	e00e      	b.n	8101188 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	2b0f      	cmp	r3, #15
 810116e:	d80a      	bhi.n	8101186 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101170:	2200      	movs	r2, #0
 8101172:	6879      	ldr	r1, [r7, #4]
 8101174:	f04f 30ff 	mov.w	r0, #4294967295
 8101178:	f000 f911 	bl	810139e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810117c:	4a06      	ldr	r2, [pc, #24]	; (8101198 <HAL_InitTick+0x68>)
 810117e:	687b      	ldr	r3, [r7, #4]
 8101180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101182:	2300      	movs	r3, #0
 8101184:	e000      	b.n	8101188 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101186:	2301      	movs	r3, #1
}
 8101188:	4618      	mov	r0, r3
 810118a:	3708      	adds	r7, #8
 810118c:	46bd      	mov	sp, r7
 810118e:	bd80      	pop	{r7, pc}
 8101190:	1000000c 	.word	0x1000000c
 8101194:	10000000 	.word	0x10000000
 8101198:	10000008 	.word	0x10000008

0810119c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810119c:	b480      	push	{r7}
 810119e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81011a0:	4b06      	ldr	r3, [pc, #24]	; (81011bc <HAL_IncTick+0x20>)
 81011a2:	781b      	ldrb	r3, [r3, #0]
 81011a4:	461a      	mov	r2, r3
 81011a6:	4b06      	ldr	r3, [pc, #24]	; (81011c0 <HAL_IncTick+0x24>)
 81011a8:	681b      	ldr	r3, [r3, #0]
 81011aa:	4413      	add	r3, r2
 81011ac:	4a04      	ldr	r2, [pc, #16]	; (81011c0 <HAL_IncTick+0x24>)
 81011ae:	6013      	str	r3, [r2, #0]
}
 81011b0:	bf00      	nop
 81011b2:	46bd      	mov	sp, r7
 81011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011b8:	4770      	bx	lr
 81011ba:	bf00      	nop
 81011bc:	1000000c 	.word	0x1000000c
 81011c0:	10000270 	.word	0x10000270

081011c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81011c4:	b480      	push	{r7}
 81011c6:	af00      	add	r7, sp, #0
  return uwTick;
 81011c8:	4b03      	ldr	r3, [pc, #12]	; (81011d8 <HAL_GetTick+0x14>)
 81011ca:	681b      	ldr	r3, [r3, #0]
}
 81011cc:	4618      	mov	r0, r3
 81011ce:	46bd      	mov	sp, r7
 81011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d4:	4770      	bx	lr
 81011d6:	bf00      	nop
 81011d8:	10000270 	.word	0x10000270

081011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81011dc:	b580      	push	{r7, lr}
 81011de:	b084      	sub	sp, #16
 81011e0:	af00      	add	r7, sp, #0
 81011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81011e4:	f7ff ffee 	bl	81011c4 <HAL_GetTick>
 81011e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81011ea:	687b      	ldr	r3, [r7, #4]
 81011ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81011ee:	68fb      	ldr	r3, [r7, #12]
 81011f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81011f4:	d005      	beq.n	8101202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81011f6:	4b0a      	ldr	r3, [pc, #40]	; (8101220 <HAL_Delay+0x44>)
 81011f8:	781b      	ldrb	r3, [r3, #0]
 81011fa:	461a      	mov	r2, r3
 81011fc:	68fb      	ldr	r3, [r7, #12]
 81011fe:	4413      	add	r3, r2
 8101200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101202:	bf00      	nop
 8101204:	f7ff ffde 	bl	81011c4 <HAL_GetTick>
 8101208:	4602      	mov	r2, r0
 810120a:	68bb      	ldr	r3, [r7, #8]
 810120c:	1ad3      	subs	r3, r2, r3
 810120e:	68fa      	ldr	r2, [r7, #12]
 8101210:	429a      	cmp	r2, r3
 8101212:	d8f7      	bhi.n	8101204 <HAL_Delay+0x28>
  {
  }
}
 8101214:	bf00      	nop
 8101216:	bf00      	nop
 8101218:	3710      	adds	r7, #16
 810121a:	46bd      	mov	sp, r7
 810121c:	bd80      	pop	{r7, pc}
 810121e:	bf00      	nop
 8101220:	1000000c 	.word	0x1000000c

08101224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101224:	b480      	push	{r7}
 8101226:	b085      	sub	sp, #20
 8101228:	af00      	add	r7, sp, #0
 810122a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810122c:	687b      	ldr	r3, [r7, #4]
 810122e:	f003 0307 	and.w	r3, r3, #7
 8101232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101234:	4b0c      	ldr	r3, [pc, #48]	; (8101268 <__NVIC_SetPriorityGrouping+0x44>)
 8101236:	68db      	ldr	r3, [r3, #12]
 8101238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810123a:	68ba      	ldr	r2, [r7, #8]
 810123c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101240:	4013      	ands	r3, r2
 8101242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101244:	68fb      	ldr	r3, [r7, #12]
 8101246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101248:	68bb      	ldr	r3, [r7, #8]
 810124a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810124c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101256:	4a04      	ldr	r2, [pc, #16]	; (8101268 <__NVIC_SetPriorityGrouping+0x44>)
 8101258:	68bb      	ldr	r3, [r7, #8]
 810125a:	60d3      	str	r3, [r2, #12]
}
 810125c:	bf00      	nop
 810125e:	3714      	adds	r7, #20
 8101260:	46bd      	mov	sp, r7
 8101262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101266:	4770      	bx	lr
 8101268:	e000ed00 	.word	0xe000ed00

0810126c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810126c:	b480      	push	{r7}
 810126e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101270:	4b04      	ldr	r3, [pc, #16]	; (8101284 <__NVIC_GetPriorityGrouping+0x18>)
 8101272:	68db      	ldr	r3, [r3, #12]
 8101274:	0a1b      	lsrs	r3, r3, #8
 8101276:	f003 0307 	and.w	r3, r3, #7
}
 810127a:	4618      	mov	r0, r3
 810127c:	46bd      	mov	sp, r7
 810127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101282:	4770      	bx	lr
 8101284:	e000ed00 	.word	0xe000ed00

08101288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101288:	b480      	push	{r7}
 810128a:	b083      	sub	sp, #12
 810128c:	af00      	add	r7, sp, #0
 810128e:	4603      	mov	r3, r0
 8101290:	6039      	str	r1, [r7, #0]
 8101292:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101294:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101298:	2b00      	cmp	r3, #0
 810129a:	db0a      	blt.n	81012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810129c:	683b      	ldr	r3, [r7, #0]
 810129e:	b2da      	uxtb	r2, r3
 81012a0:	490c      	ldr	r1, [pc, #48]	; (81012d4 <__NVIC_SetPriority+0x4c>)
 81012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81012a6:	0112      	lsls	r2, r2, #4
 81012a8:	b2d2      	uxtb	r2, r2
 81012aa:	440b      	add	r3, r1
 81012ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81012b0:	e00a      	b.n	81012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81012b2:	683b      	ldr	r3, [r7, #0]
 81012b4:	b2da      	uxtb	r2, r3
 81012b6:	4908      	ldr	r1, [pc, #32]	; (81012d8 <__NVIC_SetPriority+0x50>)
 81012b8:	88fb      	ldrh	r3, [r7, #6]
 81012ba:	f003 030f 	and.w	r3, r3, #15
 81012be:	3b04      	subs	r3, #4
 81012c0:	0112      	lsls	r2, r2, #4
 81012c2:	b2d2      	uxtb	r2, r2
 81012c4:	440b      	add	r3, r1
 81012c6:	761a      	strb	r2, [r3, #24]
}
 81012c8:	bf00      	nop
 81012ca:	370c      	adds	r7, #12
 81012cc:	46bd      	mov	sp, r7
 81012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012d2:	4770      	bx	lr
 81012d4:	e000e100 	.word	0xe000e100
 81012d8:	e000ed00 	.word	0xe000ed00

081012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81012dc:	b480      	push	{r7}
 81012de:	b089      	sub	sp, #36	; 0x24
 81012e0:	af00      	add	r7, sp, #0
 81012e2:	60f8      	str	r0, [r7, #12]
 81012e4:	60b9      	str	r1, [r7, #8]
 81012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81012e8:	68fb      	ldr	r3, [r7, #12]
 81012ea:	f003 0307 	and.w	r3, r3, #7
 81012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81012f0:	69fb      	ldr	r3, [r7, #28]
 81012f2:	f1c3 0307 	rsb	r3, r3, #7
 81012f6:	2b04      	cmp	r3, #4
 81012f8:	bf28      	it	cs
 81012fa:	2304      	movcs	r3, #4
 81012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81012fe:	69fb      	ldr	r3, [r7, #28]
 8101300:	3304      	adds	r3, #4
 8101302:	2b06      	cmp	r3, #6
 8101304:	d902      	bls.n	810130c <NVIC_EncodePriority+0x30>
 8101306:	69fb      	ldr	r3, [r7, #28]
 8101308:	3b03      	subs	r3, #3
 810130a:	e000      	b.n	810130e <NVIC_EncodePriority+0x32>
 810130c:	2300      	movs	r3, #0
 810130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101310:	f04f 32ff 	mov.w	r2, #4294967295
 8101314:	69bb      	ldr	r3, [r7, #24]
 8101316:	fa02 f303 	lsl.w	r3, r2, r3
 810131a:	43da      	mvns	r2, r3
 810131c:	68bb      	ldr	r3, [r7, #8]
 810131e:	401a      	ands	r2, r3
 8101320:	697b      	ldr	r3, [r7, #20]
 8101322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101324:	f04f 31ff 	mov.w	r1, #4294967295
 8101328:	697b      	ldr	r3, [r7, #20]
 810132a:	fa01 f303 	lsl.w	r3, r1, r3
 810132e:	43d9      	mvns	r1, r3
 8101330:	687b      	ldr	r3, [r7, #4]
 8101332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101334:	4313      	orrs	r3, r2
         );
}
 8101336:	4618      	mov	r0, r3
 8101338:	3724      	adds	r7, #36	; 0x24
 810133a:	46bd      	mov	sp, r7
 810133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101340:	4770      	bx	lr
	...

08101344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101344:	b580      	push	{r7, lr}
 8101346:	b082      	sub	sp, #8
 8101348:	af00      	add	r7, sp, #0
 810134a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810134c:	687b      	ldr	r3, [r7, #4]
 810134e:	3b01      	subs	r3, #1
 8101350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101354:	d301      	bcc.n	810135a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101356:	2301      	movs	r3, #1
 8101358:	e00f      	b.n	810137a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810135a:	4a0a      	ldr	r2, [pc, #40]	; (8101384 <SysTick_Config+0x40>)
 810135c:	687b      	ldr	r3, [r7, #4]
 810135e:	3b01      	subs	r3, #1
 8101360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101362:	210f      	movs	r1, #15
 8101364:	f04f 30ff 	mov.w	r0, #4294967295
 8101368:	f7ff ff8e 	bl	8101288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810136c:	4b05      	ldr	r3, [pc, #20]	; (8101384 <SysTick_Config+0x40>)
 810136e:	2200      	movs	r2, #0
 8101370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101372:	4b04      	ldr	r3, [pc, #16]	; (8101384 <SysTick_Config+0x40>)
 8101374:	2207      	movs	r2, #7
 8101376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101378:	2300      	movs	r3, #0
}
 810137a:	4618      	mov	r0, r3
 810137c:	3708      	adds	r7, #8
 810137e:	46bd      	mov	sp, r7
 8101380:	bd80      	pop	{r7, pc}
 8101382:	bf00      	nop
 8101384:	e000e010 	.word	0xe000e010

08101388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101388:	b580      	push	{r7, lr}
 810138a:	b082      	sub	sp, #8
 810138c:	af00      	add	r7, sp, #0
 810138e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101390:	6878      	ldr	r0, [r7, #4]
 8101392:	f7ff ff47 	bl	8101224 <__NVIC_SetPriorityGrouping>
}
 8101396:	bf00      	nop
 8101398:	3708      	adds	r7, #8
 810139a:	46bd      	mov	sp, r7
 810139c:	bd80      	pop	{r7, pc}

0810139e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810139e:	b580      	push	{r7, lr}
 81013a0:	b086      	sub	sp, #24
 81013a2:	af00      	add	r7, sp, #0
 81013a4:	4603      	mov	r3, r0
 81013a6:	60b9      	str	r1, [r7, #8]
 81013a8:	607a      	str	r2, [r7, #4]
 81013aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81013ac:	f7ff ff5e 	bl	810126c <__NVIC_GetPriorityGrouping>
 81013b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81013b2:	687a      	ldr	r2, [r7, #4]
 81013b4:	68b9      	ldr	r1, [r7, #8]
 81013b6:	6978      	ldr	r0, [r7, #20]
 81013b8:	f7ff ff90 	bl	81012dc <NVIC_EncodePriority>
 81013bc:	4602      	mov	r2, r0
 81013be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81013c2:	4611      	mov	r1, r2
 81013c4:	4618      	mov	r0, r3
 81013c6:	f7ff ff5f 	bl	8101288 <__NVIC_SetPriority>
}
 81013ca:	bf00      	nop
 81013cc:	3718      	adds	r7, #24
 81013ce:	46bd      	mov	sp, r7
 81013d0:	bd80      	pop	{r7, pc}

081013d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81013d2:	b580      	push	{r7, lr}
 81013d4:	b082      	sub	sp, #8
 81013d6:	af00      	add	r7, sp, #0
 81013d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81013da:	6878      	ldr	r0, [r7, #4]
 81013dc:	f7ff ffb2 	bl	8101344 <SysTick_Config>
 81013e0:	4603      	mov	r3, r0
}
 81013e2:	4618      	mov	r0, r3
 81013e4:	3708      	adds	r7, #8
 81013e6:	46bd      	mov	sp, r7
 81013e8:	bd80      	pop	{r7, pc}
	...

081013ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81013ec:	b480      	push	{r7}
 81013ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81013f0:	4b07      	ldr	r3, [pc, #28]	; (8101410 <HAL_GetCurrentCPUID+0x24>)
 81013f2:	681b      	ldr	r3, [r3, #0]
 81013f4:	091b      	lsrs	r3, r3, #4
 81013f6:	f003 030f 	and.w	r3, r3, #15
 81013fa:	2b07      	cmp	r3, #7
 81013fc:	d101      	bne.n	8101402 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81013fe:	2303      	movs	r3, #3
 8101400:	e000      	b.n	8101404 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8101402:	2301      	movs	r3, #1
  }
}
 8101404:	4618      	mov	r0, r3
 8101406:	46bd      	mov	sp, r7
 8101408:	f85d 7b04 	ldr.w	r7, [sp], #4
 810140c:	4770      	bx	lr
 810140e:	bf00      	nop
 8101410:	e000ed00 	.word	0xe000ed00

08101414 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101414:	b480      	push	{r7}
 8101416:	b089      	sub	sp, #36	; 0x24
 8101418:	af00      	add	r7, sp, #0
 810141a:	6078      	str	r0, [r7, #4]
 810141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810141e:	2300      	movs	r3, #0
 8101420:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8101422:	4b89      	ldr	r3, [pc, #548]	; (8101648 <HAL_GPIO_Init+0x234>)
 8101424:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101426:	e194      	b.n	8101752 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101428:	683b      	ldr	r3, [r7, #0]
 810142a:	681a      	ldr	r2, [r3, #0]
 810142c:	2101      	movs	r1, #1
 810142e:	69fb      	ldr	r3, [r7, #28]
 8101430:	fa01 f303 	lsl.w	r3, r1, r3
 8101434:	4013      	ands	r3, r2
 8101436:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101438:	693b      	ldr	r3, [r7, #16]
 810143a:	2b00      	cmp	r3, #0
 810143c:	f000 8186 	beq.w	810174c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101440:	683b      	ldr	r3, [r7, #0]
 8101442:	685b      	ldr	r3, [r3, #4]
 8101444:	f003 0303 	and.w	r3, r3, #3
 8101448:	2b01      	cmp	r3, #1
 810144a:	d005      	beq.n	8101458 <HAL_GPIO_Init+0x44>
 810144c:	683b      	ldr	r3, [r7, #0]
 810144e:	685b      	ldr	r3, [r3, #4]
 8101450:	f003 0303 	and.w	r3, r3, #3
 8101454:	2b02      	cmp	r3, #2
 8101456:	d130      	bne.n	81014ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101458:	687b      	ldr	r3, [r7, #4]
 810145a:	689b      	ldr	r3, [r3, #8]
 810145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810145e:	69fb      	ldr	r3, [r7, #28]
 8101460:	005b      	lsls	r3, r3, #1
 8101462:	2203      	movs	r2, #3
 8101464:	fa02 f303 	lsl.w	r3, r2, r3
 8101468:	43db      	mvns	r3, r3
 810146a:	69ba      	ldr	r2, [r7, #24]
 810146c:	4013      	ands	r3, r2
 810146e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101470:	683b      	ldr	r3, [r7, #0]
 8101472:	68da      	ldr	r2, [r3, #12]
 8101474:	69fb      	ldr	r3, [r7, #28]
 8101476:	005b      	lsls	r3, r3, #1
 8101478:	fa02 f303 	lsl.w	r3, r2, r3
 810147c:	69ba      	ldr	r2, [r7, #24]
 810147e:	4313      	orrs	r3, r2
 8101480:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8101482:	687b      	ldr	r3, [r7, #4]
 8101484:	69ba      	ldr	r2, [r7, #24]
 8101486:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101488:	687b      	ldr	r3, [r7, #4]
 810148a:	685b      	ldr	r3, [r3, #4]
 810148c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810148e:	2201      	movs	r2, #1
 8101490:	69fb      	ldr	r3, [r7, #28]
 8101492:	fa02 f303 	lsl.w	r3, r2, r3
 8101496:	43db      	mvns	r3, r3
 8101498:	69ba      	ldr	r2, [r7, #24]
 810149a:	4013      	ands	r3, r2
 810149c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810149e:	683b      	ldr	r3, [r7, #0]
 81014a0:	685b      	ldr	r3, [r3, #4]
 81014a2:	091b      	lsrs	r3, r3, #4
 81014a4:	f003 0201 	and.w	r2, r3, #1
 81014a8:	69fb      	ldr	r3, [r7, #28]
 81014aa:	fa02 f303 	lsl.w	r3, r2, r3
 81014ae:	69ba      	ldr	r2, [r7, #24]
 81014b0:	4313      	orrs	r3, r2
 81014b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81014b4:	687b      	ldr	r3, [r7, #4]
 81014b6:	69ba      	ldr	r2, [r7, #24]
 81014b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81014ba:	683b      	ldr	r3, [r7, #0]
 81014bc:	685b      	ldr	r3, [r3, #4]
 81014be:	f003 0303 	and.w	r3, r3, #3
 81014c2:	2b03      	cmp	r3, #3
 81014c4:	d017      	beq.n	81014f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81014c6:	687b      	ldr	r3, [r7, #4]
 81014c8:	68db      	ldr	r3, [r3, #12]
 81014ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81014cc:	69fb      	ldr	r3, [r7, #28]
 81014ce:	005b      	lsls	r3, r3, #1
 81014d0:	2203      	movs	r2, #3
 81014d2:	fa02 f303 	lsl.w	r3, r2, r3
 81014d6:	43db      	mvns	r3, r3
 81014d8:	69ba      	ldr	r2, [r7, #24]
 81014da:	4013      	ands	r3, r2
 81014dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81014de:	683b      	ldr	r3, [r7, #0]
 81014e0:	689a      	ldr	r2, [r3, #8]
 81014e2:	69fb      	ldr	r3, [r7, #28]
 81014e4:	005b      	lsls	r3, r3, #1
 81014e6:	fa02 f303 	lsl.w	r3, r2, r3
 81014ea:	69ba      	ldr	r2, [r7, #24]
 81014ec:	4313      	orrs	r3, r2
 81014ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81014f0:	687b      	ldr	r3, [r7, #4]
 81014f2:	69ba      	ldr	r2, [r7, #24]
 81014f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81014f6:	683b      	ldr	r3, [r7, #0]
 81014f8:	685b      	ldr	r3, [r3, #4]
 81014fa:	f003 0303 	and.w	r3, r3, #3
 81014fe:	2b02      	cmp	r3, #2
 8101500:	d123      	bne.n	810154a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8101502:	69fb      	ldr	r3, [r7, #28]
 8101504:	08da      	lsrs	r2, r3, #3
 8101506:	687b      	ldr	r3, [r7, #4]
 8101508:	3208      	adds	r2, #8
 810150a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810150e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101510:	69fb      	ldr	r3, [r7, #28]
 8101512:	f003 0307 	and.w	r3, r3, #7
 8101516:	009b      	lsls	r3, r3, #2
 8101518:	220f      	movs	r2, #15
 810151a:	fa02 f303 	lsl.w	r3, r2, r3
 810151e:	43db      	mvns	r3, r3
 8101520:	69ba      	ldr	r2, [r7, #24]
 8101522:	4013      	ands	r3, r2
 8101524:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101526:	683b      	ldr	r3, [r7, #0]
 8101528:	691a      	ldr	r2, [r3, #16]
 810152a:	69fb      	ldr	r3, [r7, #28]
 810152c:	f003 0307 	and.w	r3, r3, #7
 8101530:	009b      	lsls	r3, r3, #2
 8101532:	fa02 f303 	lsl.w	r3, r2, r3
 8101536:	69ba      	ldr	r2, [r7, #24]
 8101538:	4313      	orrs	r3, r2
 810153a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810153c:	69fb      	ldr	r3, [r7, #28]
 810153e:	08da      	lsrs	r2, r3, #3
 8101540:	687b      	ldr	r3, [r7, #4]
 8101542:	3208      	adds	r2, #8
 8101544:	69b9      	ldr	r1, [r7, #24]
 8101546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810154a:	687b      	ldr	r3, [r7, #4]
 810154c:	681b      	ldr	r3, [r3, #0]
 810154e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101550:	69fb      	ldr	r3, [r7, #28]
 8101552:	005b      	lsls	r3, r3, #1
 8101554:	2203      	movs	r2, #3
 8101556:	fa02 f303 	lsl.w	r3, r2, r3
 810155a:	43db      	mvns	r3, r3
 810155c:	69ba      	ldr	r2, [r7, #24]
 810155e:	4013      	ands	r3, r2
 8101560:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101562:	683b      	ldr	r3, [r7, #0]
 8101564:	685b      	ldr	r3, [r3, #4]
 8101566:	f003 0203 	and.w	r2, r3, #3
 810156a:	69fb      	ldr	r3, [r7, #28]
 810156c:	005b      	lsls	r3, r3, #1
 810156e:	fa02 f303 	lsl.w	r3, r2, r3
 8101572:	69ba      	ldr	r2, [r7, #24]
 8101574:	4313      	orrs	r3, r2
 8101576:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101578:	687b      	ldr	r3, [r7, #4]
 810157a:	69ba      	ldr	r2, [r7, #24]
 810157c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810157e:	683b      	ldr	r3, [r7, #0]
 8101580:	685b      	ldr	r3, [r3, #4]
 8101582:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101586:	2b00      	cmp	r3, #0
 8101588:	f000 80e0 	beq.w	810174c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810158c:	4b2f      	ldr	r3, [pc, #188]	; (810164c <HAL_GPIO_Init+0x238>)
 810158e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101592:	4a2e      	ldr	r2, [pc, #184]	; (810164c <HAL_GPIO_Init+0x238>)
 8101594:	f043 0302 	orr.w	r3, r3, #2
 8101598:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810159c:	4b2b      	ldr	r3, [pc, #172]	; (810164c <HAL_GPIO_Init+0x238>)
 810159e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81015a2:	f003 0302 	and.w	r3, r3, #2
 81015a6:	60fb      	str	r3, [r7, #12]
 81015a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81015aa:	4a29      	ldr	r2, [pc, #164]	; (8101650 <HAL_GPIO_Init+0x23c>)
 81015ac:	69fb      	ldr	r3, [r7, #28]
 81015ae:	089b      	lsrs	r3, r3, #2
 81015b0:	3302      	adds	r3, #2
 81015b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81015b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81015b8:	69fb      	ldr	r3, [r7, #28]
 81015ba:	f003 0303 	and.w	r3, r3, #3
 81015be:	009b      	lsls	r3, r3, #2
 81015c0:	220f      	movs	r2, #15
 81015c2:	fa02 f303 	lsl.w	r3, r2, r3
 81015c6:	43db      	mvns	r3, r3
 81015c8:	69ba      	ldr	r2, [r7, #24]
 81015ca:	4013      	ands	r3, r2
 81015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81015ce:	687b      	ldr	r3, [r7, #4]
 81015d0:	4a20      	ldr	r2, [pc, #128]	; (8101654 <HAL_GPIO_Init+0x240>)
 81015d2:	4293      	cmp	r3, r2
 81015d4:	d052      	beq.n	810167c <HAL_GPIO_Init+0x268>
 81015d6:	687b      	ldr	r3, [r7, #4]
 81015d8:	4a1f      	ldr	r2, [pc, #124]	; (8101658 <HAL_GPIO_Init+0x244>)
 81015da:	4293      	cmp	r3, r2
 81015dc:	d031      	beq.n	8101642 <HAL_GPIO_Init+0x22e>
 81015de:	687b      	ldr	r3, [r7, #4]
 81015e0:	4a1e      	ldr	r2, [pc, #120]	; (810165c <HAL_GPIO_Init+0x248>)
 81015e2:	4293      	cmp	r3, r2
 81015e4:	d02b      	beq.n	810163e <HAL_GPIO_Init+0x22a>
 81015e6:	687b      	ldr	r3, [r7, #4]
 81015e8:	4a1d      	ldr	r2, [pc, #116]	; (8101660 <HAL_GPIO_Init+0x24c>)
 81015ea:	4293      	cmp	r3, r2
 81015ec:	d025      	beq.n	810163a <HAL_GPIO_Init+0x226>
 81015ee:	687b      	ldr	r3, [r7, #4]
 81015f0:	4a1c      	ldr	r2, [pc, #112]	; (8101664 <HAL_GPIO_Init+0x250>)
 81015f2:	4293      	cmp	r3, r2
 81015f4:	d01f      	beq.n	8101636 <HAL_GPIO_Init+0x222>
 81015f6:	687b      	ldr	r3, [r7, #4]
 81015f8:	4a1b      	ldr	r2, [pc, #108]	; (8101668 <HAL_GPIO_Init+0x254>)
 81015fa:	4293      	cmp	r3, r2
 81015fc:	d019      	beq.n	8101632 <HAL_GPIO_Init+0x21e>
 81015fe:	687b      	ldr	r3, [r7, #4]
 8101600:	4a1a      	ldr	r2, [pc, #104]	; (810166c <HAL_GPIO_Init+0x258>)
 8101602:	4293      	cmp	r3, r2
 8101604:	d013      	beq.n	810162e <HAL_GPIO_Init+0x21a>
 8101606:	687b      	ldr	r3, [r7, #4]
 8101608:	4a19      	ldr	r2, [pc, #100]	; (8101670 <HAL_GPIO_Init+0x25c>)
 810160a:	4293      	cmp	r3, r2
 810160c:	d00d      	beq.n	810162a <HAL_GPIO_Init+0x216>
 810160e:	687b      	ldr	r3, [r7, #4]
 8101610:	4a18      	ldr	r2, [pc, #96]	; (8101674 <HAL_GPIO_Init+0x260>)
 8101612:	4293      	cmp	r3, r2
 8101614:	d007      	beq.n	8101626 <HAL_GPIO_Init+0x212>
 8101616:	687b      	ldr	r3, [r7, #4]
 8101618:	4a17      	ldr	r2, [pc, #92]	; (8101678 <HAL_GPIO_Init+0x264>)
 810161a:	4293      	cmp	r3, r2
 810161c:	d101      	bne.n	8101622 <HAL_GPIO_Init+0x20e>
 810161e:	2309      	movs	r3, #9
 8101620:	e02d      	b.n	810167e <HAL_GPIO_Init+0x26a>
 8101622:	230a      	movs	r3, #10
 8101624:	e02b      	b.n	810167e <HAL_GPIO_Init+0x26a>
 8101626:	2308      	movs	r3, #8
 8101628:	e029      	b.n	810167e <HAL_GPIO_Init+0x26a>
 810162a:	2307      	movs	r3, #7
 810162c:	e027      	b.n	810167e <HAL_GPIO_Init+0x26a>
 810162e:	2306      	movs	r3, #6
 8101630:	e025      	b.n	810167e <HAL_GPIO_Init+0x26a>
 8101632:	2305      	movs	r3, #5
 8101634:	e023      	b.n	810167e <HAL_GPIO_Init+0x26a>
 8101636:	2304      	movs	r3, #4
 8101638:	e021      	b.n	810167e <HAL_GPIO_Init+0x26a>
 810163a:	2303      	movs	r3, #3
 810163c:	e01f      	b.n	810167e <HAL_GPIO_Init+0x26a>
 810163e:	2302      	movs	r3, #2
 8101640:	e01d      	b.n	810167e <HAL_GPIO_Init+0x26a>
 8101642:	2301      	movs	r3, #1
 8101644:	e01b      	b.n	810167e <HAL_GPIO_Init+0x26a>
 8101646:	bf00      	nop
 8101648:	580000c0 	.word	0x580000c0
 810164c:	58024400 	.word	0x58024400
 8101650:	58000400 	.word	0x58000400
 8101654:	58020000 	.word	0x58020000
 8101658:	58020400 	.word	0x58020400
 810165c:	58020800 	.word	0x58020800
 8101660:	58020c00 	.word	0x58020c00
 8101664:	58021000 	.word	0x58021000
 8101668:	58021400 	.word	0x58021400
 810166c:	58021800 	.word	0x58021800
 8101670:	58021c00 	.word	0x58021c00
 8101674:	58022000 	.word	0x58022000
 8101678:	58022400 	.word	0x58022400
 810167c:	2300      	movs	r3, #0
 810167e:	69fa      	ldr	r2, [r7, #28]
 8101680:	f002 0203 	and.w	r2, r2, #3
 8101684:	0092      	lsls	r2, r2, #2
 8101686:	4093      	lsls	r3, r2
 8101688:	69ba      	ldr	r2, [r7, #24]
 810168a:	4313      	orrs	r3, r2
 810168c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810168e:	4938      	ldr	r1, [pc, #224]	; (8101770 <HAL_GPIO_Init+0x35c>)
 8101690:	69fb      	ldr	r3, [r7, #28]
 8101692:	089b      	lsrs	r3, r3, #2
 8101694:	3302      	adds	r3, #2
 8101696:	69ba      	ldr	r2, [r7, #24]
 8101698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810169c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81016a0:	681b      	ldr	r3, [r3, #0]
 81016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81016a4:	693b      	ldr	r3, [r7, #16]
 81016a6:	43db      	mvns	r3, r3
 81016a8:	69ba      	ldr	r2, [r7, #24]
 81016aa:	4013      	ands	r3, r2
 81016ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81016ae:	683b      	ldr	r3, [r7, #0]
 81016b0:	685b      	ldr	r3, [r3, #4]
 81016b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81016b6:	2b00      	cmp	r3, #0
 81016b8:	d003      	beq.n	81016c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81016ba:	69ba      	ldr	r2, [r7, #24]
 81016bc:	693b      	ldr	r3, [r7, #16]
 81016be:	4313      	orrs	r3, r2
 81016c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81016c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81016c6:	69bb      	ldr	r3, [r7, #24]
 81016c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81016ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81016ce:	685b      	ldr	r3, [r3, #4]
 81016d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81016d2:	693b      	ldr	r3, [r7, #16]
 81016d4:	43db      	mvns	r3, r3
 81016d6:	69ba      	ldr	r2, [r7, #24]
 81016d8:	4013      	ands	r3, r2
 81016da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81016dc:	683b      	ldr	r3, [r7, #0]
 81016de:	685b      	ldr	r3, [r3, #4]
 81016e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81016e4:	2b00      	cmp	r3, #0
 81016e6:	d003      	beq.n	81016f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81016e8:	69ba      	ldr	r2, [r7, #24]
 81016ea:	693b      	ldr	r3, [r7, #16]
 81016ec:	4313      	orrs	r3, r2
 81016ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81016f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81016f4:	69bb      	ldr	r3, [r7, #24]
 81016f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81016f8:	697b      	ldr	r3, [r7, #20]
 81016fa:	685b      	ldr	r3, [r3, #4]
 81016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81016fe:	693b      	ldr	r3, [r7, #16]
 8101700:	43db      	mvns	r3, r3
 8101702:	69ba      	ldr	r2, [r7, #24]
 8101704:	4013      	ands	r3, r2
 8101706:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101708:	683b      	ldr	r3, [r7, #0]
 810170a:	685b      	ldr	r3, [r3, #4]
 810170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101710:	2b00      	cmp	r3, #0
 8101712:	d003      	beq.n	810171c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101714:	69ba      	ldr	r2, [r7, #24]
 8101716:	693b      	ldr	r3, [r7, #16]
 8101718:	4313      	orrs	r3, r2
 810171a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810171c:	697b      	ldr	r3, [r7, #20]
 810171e:	69ba      	ldr	r2, [r7, #24]
 8101720:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101722:	697b      	ldr	r3, [r7, #20]
 8101724:	681b      	ldr	r3, [r3, #0]
 8101726:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101728:	693b      	ldr	r3, [r7, #16]
 810172a:	43db      	mvns	r3, r3
 810172c:	69ba      	ldr	r2, [r7, #24]
 810172e:	4013      	ands	r3, r2
 8101730:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101732:	683b      	ldr	r3, [r7, #0]
 8101734:	685b      	ldr	r3, [r3, #4]
 8101736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810173a:	2b00      	cmp	r3, #0
 810173c:	d003      	beq.n	8101746 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810173e:	69ba      	ldr	r2, [r7, #24]
 8101740:	693b      	ldr	r3, [r7, #16]
 8101742:	4313      	orrs	r3, r2
 8101744:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101746:	697b      	ldr	r3, [r7, #20]
 8101748:	69ba      	ldr	r2, [r7, #24]
 810174a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810174c:	69fb      	ldr	r3, [r7, #28]
 810174e:	3301      	adds	r3, #1
 8101750:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101752:	683b      	ldr	r3, [r7, #0]
 8101754:	681a      	ldr	r2, [r3, #0]
 8101756:	69fb      	ldr	r3, [r7, #28]
 8101758:	fa22 f303 	lsr.w	r3, r2, r3
 810175c:	2b00      	cmp	r3, #0
 810175e:	f47f ae63 	bne.w	8101428 <HAL_GPIO_Init+0x14>
  }
}
 8101762:	bf00      	nop
 8101764:	bf00      	nop
 8101766:	3724      	adds	r7, #36	; 0x24
 8101768:	46bd      	mov	sp, r7
 810176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810176e:	4770      	bx	lr
 8101770:	58000400 	.word	0x58000400

08101774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101774:	b480      	push	{r7}
 8101776:	b083      	sub	sp, #12
 8101778:	af00      	add	r7, sp, #0
 810177a:	6078      	str	r0, [r7, #4]
 810177c:	460b      	mov	r3, r1
 810177e:	807b      	strh	r3, [r7, #2]
 8101780:	4613      	mov	r3, r2
 8101782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101784:	787b      	ldrb	r3, [r7, #1]
 8101786:	2b00      	cmp	r3, #0
 8101788:	d003      	beq.n	8101792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810178a:	887a      	ldrh	r2, [r7, #2]
 810178c:	687b      	ldr	r3, [r7, #4]
 810178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101790:	e003      	b.n	810179a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101792:	887b      	ldrh	r3, [r7, #2]
 8101794:	041a      	lsls	r2, r3, #16
 8101796:	687b      	ldr	r3, [r7, #4]
 8101798:	619a      	str	r2, [r3, #24]
}
 810179a:	bf00      	nop
 810179c:	370c      	adds	r7, #12
 810179e:	46bd      	mov	sp, r7
 81017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a4:	4770      	bx	lr
	...

081017a8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81017a8:	b480      	push	{r7}
 81017aa:	b083      	sub	sp, #12
 81017ac:	af00      	add	r7, sp, #0
 81017ae:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81017b0:	4b05      	ldr	r3, [pc, #20]	; (81017c8 <HAL_HSEM_ActivateNotification+0x20>)
 81017b2:	681a      	ldr	r2, [r3, #0]
 81017b4:	4904      	ldr	r1, [pc, #16]	; (81017c8 <HAL_HSEM_ActivateNotification+0x20>)
 81017b6:	687b      	ldr	r3, [r7, #4]
 81017b8:	4313      	orrs	r3, r2
 81017ba:	600b      	str	r3, [r1, #0]
#endif
}
 81017bc:	bf00      	nop
 81017be:	370c      	adds	r7, #12
 81017c0:	46bd      	mov	sp, r7
 81017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017c6:	4770      	bx	lr
 81017c8:	58026510 	.word	0x58026510

081017cc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81017cc:	b580      	push	{r7, lr}
 81017ce:	b084      	sub	sp, #16
 81017d0:	af00      	add	r7, sp, #0
 81017d2:	60f8      	str	r0, [r7, #12]
 81017d4:	460b      	mov	r3, r1
 81017d6:	607a      	str	r2, [r7, #4]
 81017d8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81017da:	4b37      	ldr	r3, [pc, #220]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81017dc:	681b      	ldr	r3, [r3, #0]
 81017de:	f023 0201 	bic.w	r2, r3, #1
 81017e2:	4935      	ldr	r1, [pc, #212]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81017e4:	68fb      	ldr	r3, [r7, #12]
 81017e6:	4313      	orrs	r3, r2
 81017e8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81017ea:	687b      	ldr	r3, [r7, #4]
 81017ec:	2b00      	cmp	r3, #0
 81017ee:	d123      	bne.n	8101838 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81017f0:	f7ff fdfc 	bl	81013ec <HAL_GetCurrentCPUID>
 81017f4:	4603      	mov	r3, r0
 81017f6:	2b03      	cmp	r3, #3
 81017f8:	d158      	bne.n	81018ac <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81017fa:	4b2f      	ldr	r3, [pc, #188]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81017fc:	691b      	ldr	r3, [r3, #16]
 81017fe:	4a2e      	ldr	r2, [pc, #184]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101800:	f023 0301 	bic.w	r3, r3, #1
 8101804:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101806:	4b2d      	ldr	r3, [pc, #180]	; (81018bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101808:	691b      	ldr	r3, [r3, #16]
 810180a:	4a2c      	ldr	r2, [pc, #176]	; (81018bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810180c:	f043 0304 	orr.w	r3, r3, #4
 8101810:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101812:	f3bf 8f4f 	dsb	sy
}
 8101816:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101818:	f3bf 8f6f 	isb	sy
}
 810181c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810181e:	7afb      	ldrb	r3, [r7, #11]
 8101820:	2b01      	cmp	r3, #1
 8101822:	d101      	bne.n	8101828 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101824:	bf30      	wfi
 8101826:	e000      	b.n	810182a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101828:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810182a:	4b24      	ldr	r3, [pc, #144]	; (81018bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810182c:	691b      	ldr	r3, [r3, #16]
 810182e:	4a23      	ldr	r2, [pc, #140]	; (81018bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101830:	f023 0304 	bic.w	r3, r3, #4
 8101834:	6113      	str	r3, [r2, #16]
 8101836:	e03c      	b.n	81018b2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101838:	687b      	ldr	r3, [r7, #4]
 810183a:	2b01      	cmp	r3, #1
 810183c:	d123      	bne.n	8101886 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810183e:	f7ff fdd5 	bl	81013ec <HAL_GetCurrentCPUID>
 8101842:	4603      	mov	r3, r0
 8101844:	2b01      	cmp	r3, #1
 8101846:	d133      	bne.n	81018b0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101848:	4b1b      	ldr	r3, [pc, #108]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810184a:	695b      	ldr	r3, [r3, #20]
 810184c:	4a1a      	ldr	r2, [pc, #104]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810184e:	f023 0302 	bic.w	r3, r3, #2
 8101852:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101854:	4b19      	ldr	r3, [pc, #100]	; (81018bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101856:	691b      	ldr	r3, [r3, #16]
 8101858:	4a18      	ldr	r2, [pc, #96]	; (81018bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810185a:	f043 0304 	orr.w	r3, r3, #4
 810185e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101860:	f3bf 8f4f 	dsb	sy
}
 8101864:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101866:	f3bf 8f6f 	isb	sy
}
 810186a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810186c:	7afb      	ldrb	r3, [r7, #11]
 810186e:	2b01      	cmp	r3, #1
 8101870:	d101      	bne.n	8101876 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101872:	bf30      	wfi
 8101874:	e000      	b.n	8101878 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101876:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101878:	4b10      	ldr	r3, [pc, #64]	; (81018bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810187a:	691b      	ldr	r3, [r3, #16]
 810187c:	4a0f      	ldr	r2, [pc, #60]	; (81018bc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810187e:	f023 0304 	bic.w	r3, r3, #4
 8101882:	6113      	str	r3, [r2, #16]
 8101884:	e015      	b.n	81018b2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101886:	f7ff fdb1 	bl	81013ec <HAL_GetCurrentCPUID>
 810188a:	4603      	mov	r3, r0
 810188c:	2b03      	cmp	r3, #3
 810188e:	d106      	bne.n	810189e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101890:	4b09      	ldr	r3, [pc, #36]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101892:	691b      	ldr	r3, [r3, #16]
 8101894:	4a08      	ldr	r2, [pc, #32]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101896:	f023 0304 	bic.w	r3, r3, #4
 810189a:	6113      	str	r3, [r2, #16]
 810189c:	e009      	b.n	81018b2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810189e:	4b06      	ldr	r3, [pc, #24]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81018a0:	695b      	ldr	r3, [r3, #20]
 81018a2:	4a05      	ldr	r2, [pc, #20]	; (81018b8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81018a4:	f023 0304 	bic.w	r3, r3, #4
 81018a8:	6153      	str	r3, [r2, #20]
 81018aa:	e002      	b.n	81018b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81018ac:	bf00      	nop
 81018ae:	e000      	b.n	81018b2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81018b0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81018b2:	3710      	adds	r7, #16
 81018b4:	46bd      	mov	sp, r7
 81018b6:	bd80      	pop	{r7, pc}
 81018b8:	58024800 	.word	0x58024800
 81018bc:	e000ed00 	.word	0xe000ed00

081018c0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81018c0:	b580      	push	{r7, lr}
 81018c2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81018c4:	f7ff fd92 	bl	81013ec <HAL_GetCurrentCPUID>
 81018c8:	4603      	mov	r3, r0
 81018ca:	2b03      	cmp	r3, #3
 81018cc:	d101      	bne.n	81018d2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81018ce:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81018d0:	e001      	b.n	81018d6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81018d2:	bf40      	sev
    __WFE ();
 81018d4:	bf20      	wfe
}
 81018d6:	bf00      	nop
 81018d8:	bd80      	pop	{r7, pc}
	...

081018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81018dc:	b480      	push	{r7}
 81018de:	b089      	sub	sp, #36	; 0x24
 81018e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81018e2:	4bb3      	ldr	r3, [pc, #716]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81018e4:	691b      	ldr	r3, [r3, #16]
 81018e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81018ea:	2b18      	cmp	r3, #24
 81018ec:	f200 8155 	bhi.w	8101b9a <HAL_RCC_GetSysClockFreq+0x2be>
 81018f0:	a201      	add	r2, pc, #4	; (adr r2, 81018f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81018f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81018f6:	bf00      	nop
 81018f8:	0810195d 	.word	0x0810195d
 81018fc:	08101b9b 	.word	0x08101b9b
 8101900:	08101b9b 	.word	0x08101b9b
 8101904:	08101b9b 	.word	0x08101b9b
 8101908:	08101b9b 	.word	0x08101b9b
 810190c:	08101b9b 	.word	0x08101b9b
 8101910:	08101b9b 	.word	0x08101b9b
 8101914:	08101b9b 	.word	0x08101b9b
 8101918:	08101983 	.word	0x08101983
 810191c:	08101b9b 	.word	0x08101b9b
 8101920:	08101b9b 	.word	0x08101b9b
 8101924:	08101b9b 	.word	0x08101b9b
 8101928:	08101b9b 	.word	0x08101b9b
 810192c:	08101b9b 	.word	0x08101b9b
 8101930:	08101b9b 	.word	0x08101b9b
 8101934:	08101b9b 	.word	0x08101b9b
 8101938:	08101989 	.word	0x08101989
 810193c:	08101b9b 	.word	0x08101b9b
 8101940:	08101b9b 	.word	0x08101b9b
 8101944:	08101b9b 	.word	0x08101b9b
 8101948:	08101b9b 	.word	0x08101b9b
 810194c:	08101b9b 	.word	0x08101b9b
 8101950:	08101b9b 	.word	0x08101b9b
 8101954:	08101b9b 	.word	0x08101b9b
 8101958:	0810198f 	.word	0x0810198f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810195c:	4b94      	ldr	r3, [pc, #592]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810195e:	681b      	ldr	r3, [r3, #0]
 8101960:	f003 0320 	and.w	r3, r3, #32
 8101964:	2b00      	cmp	r3, #0
 8101966:	d009      	beq.n	810197c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8101968:	4b91      	ldr	r3, [pc, #580]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810196a:	681b      	ldr	r3, [r3, #0]
 810196c:	08db      	lsrs	r3, r3, #3
 810196e:	f003 0303 	and.w	r3, r3, #3
 8101972:	4a90      	ldr	r2, [pc, #576]	; (8101bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101974:	fa22 f303 	lsr.w	r3, r2, r3
 8101978:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810197a:	e111      	b.n	8101ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810197c:	4b8d      	ldr	r3, [pc, #564]	; (8101bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810197e:	61bb      	str	r3, [r7, #24]
    break;
 8101980:	e10e      	b.n	8101ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8101982:	4b8d      	ldr	r3, [pc, #564]	; (8101bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101984:	61bb      	str	r3, [r7, #24]
    break;
 8101986:	e10b      	b.n	8101ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8101988:	4b8c      	ldr	r3, [pc, #560]	; (8101bbc <HAL_RCC_GetSysClockFreq+0x2e0>)
 810198a:	61bb      	str	r3, [r7, #24]
    break;
 810198c:	e108      	b.n	8101ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810198e:	4b88      	ldr	r3, [pc, #544]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101992:	f003 0303 	and.w	r3, r3, #3
 8101996:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8101998:	4b85      	ldr	r3, [pc, #532]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810199c:	091b      	lsrs	r3, r3, #4
 810199e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81019a2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81019a4:	4b82      	ldr	r3, [pc, #520]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81019a8:	f003 0301 	and.w	r3, r3, #1
 81019ac:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81019ae:	4b80      	ldr	r3, [pc, #512]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81019b2:	08db      	lsrs	r3, r3, #3
 81019b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81019b8:	68fa      	ldr	r2, [r7, #12]
 81019ba:	fb02 f303 	mul.w	r3, r2, r3
 81019be:	ee07 3a90 	vmov	s15, r3
 81019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81019c6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81019ca:	693b      	ldr	r3, [r7, #16]
 81019cc:	2b00      	cmp	r3, #0
 81019ce:	f000 80e1 	beq.w	8101b94 <HAL_RCC_GetSysClockFreq+0x2b8>
 81019d2:	697b      	ldr	r3, [r7, #20]
 81019d4:	2b02      	cmp	r3, #2
 81019d6:	f000 8083 	beq.w	8101ae0 <HAL_RCC_GetSysClockFreq+0x204>
 81019da:	697b      	ldr	r3, [r7, #20]
 81019dc:	2b02      	cmp	r3, #2
 81019de:	f200 80a1 	bhi.w	8101b24 <HAL_RCC_GetSysClockFreq+0x248>
 81019e2:	697b      	ldr	r3, [r7, #20]
 81019e4:	2b00      	cmp	r3, #0
 81019e6:	d003      	beq.n	81019f0 <HAL_RCC_GetSysClockFreq+0x114>
 81019e8:	697b      	ldr	r3, [r7, #20]
 81019ea:	2b01      	cmp	r3, #1
 81019ec:	d056      	beq.n	8101a9c <HAL_RCC_GetSysClockFreq+0x1c0>
 81019ee:	e099      	b.n	8101b24 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81019f0:	4b6f      	ldr	r3, [pc, #444]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019f2:	681b      	ldr	r3, [r3, #0]
 81019f4:	f003 0320 	and.w	r3, r3, #32
 81019f8:	2b00      	cmp	r3, #0
 81019fa:	d02d      	beq.n	8101a58 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81019fc:	4b6c      	ldr	r3, [pc, #432]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81019fe:	681b      	ldr	r3, [r3, #0]
 8101a00:	08db      	lsrs	r3, r3, #3
 8101a02:	f003 0303 	and.w	r3, r3, #3
 8101a06:	4a6b      	ldr	r2, [pc, #428]	; (8101bb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101a08:	fa22 f303 	lsr.w	r3, r2, r3
 8101a0c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	ee07 3a90 	vmov	s15, r3
 8101a14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a18:	693b      	ldr	r3, [r7, #16]
 8101a1a:	ee07 3a90 	vmov	s15, r3
 8101a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a26:	4b62      	ldr	r3, [pc, #392]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a2e:	ee07 3a90 	vmov	s15, r3
 8101a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8101bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8101a56:	e087      	b.n	8101b68 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101a58:	693b      	ldr	r3, [r7, #16]
 8101a5a:	ee07 3a90 	vmov	s15, r3
 8101a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101a62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8101bc4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101a6a:	4b51      	ldr	r3, [pc, #324]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101a72:	ee07 3a90 	vmov	s15, r3
 8101a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8101a7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8101bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101a9a:	e065      	b.n	8101b68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101a9c:	693b      	ldr	r3, [r7, #16]
 8101a9e:	ee07 3a90 	vmov	s15, r3
 8101aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101aa6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8101bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101aae:	4b40      	ldr	r3, [pc, #256]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ab6:	ee07 3a90 	vmov	s15, r3
 8101aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8101ac2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8101bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101ade:	e043      	b.n	8101b68 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101ae0:	693b      	ldr	r3, [r7, #16]
 8101ae2:	ee07 3a90 	vmov	s15, r3
 8101ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101aea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8101bcc <HAL_RCC_GetSysClockFreq+0x2f0>
 8101aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101af2:	4b2f      	ldr	r3, [pc, #188]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101afa:	ee07 3a90 	vmov	s15, r3
 8101afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b02:	ed97 6a02 	vldr	s12, [r7, #8]
 8101b06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8101bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101b22:	e021      	b.n	8101b68 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8101b24:	693b      	ldr	r3, [r7, #16]
 8101b26:	ee07 3a90 	vmov	s15, r3
 8101b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8101bc8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101b36:	4b1e      	ldr	r3, [pc, #120]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101b3e:	ee07 3a90 	vmov	s15, r3
 8101b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101b46:	ed97 6a02 	vldr	s12, [r7, #8]
 8101b4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8101bc0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8101b66:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8101b68:	4b11      	ldr	r3, [pc, #68]	; (8101bb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101b6c:	0a5b      	lsrs	r3, r3, #9
 8101b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8101b72:	3301      	adds	r3, #1
 8101b74:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8101b76:	683b      	ldr	r3, [r7, #0]
 8101b78:	ee07 3a90 	vmov	s15, r3
 8101b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101b80:	edd7 6a07 	vldr	s13, [r7, #28]
 8101b84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101b88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101b8c:	ee17 3a90 	vmov	r3, s15
 8101b90:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8101b92:	e005      	b.n	8101ba0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8101b94:	2300      	movs	r3, #0
 8101b96:	61bb      	str	r3, [r7, #24]
    break;
 8101b98:	e002      	b.n	8101ba0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8101b9a:	4b07      	ldr	r3, [pc, #28]	; (8101bb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101b9c:	61bb      	str	r3, [r7, #24]
    break;
 8101b9e:	bf00      	nop
  }

  return sysclockfreq;
 8101ba0:	69bb      	ldr	r3, [r7, #24]
}
 8101ba2:	4618      	mov	r0, r3
 8101ba4:	3724      	adds	r7, #36	; 0x24
 8101ba6:	46bd      	mov	sp, r7
 8101ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bac:	4770      	bx	lr
 8101bae:	bf00      	nop
 8101bb0:	58024400 	.word	0x58024400
 8101bb4:	03d09000 	.word	0x03d09000
 8101bb8:	003d0900 	.word	0x003d0900
 8101bbc:	007a1200 	.word	0x007a1200
 8101bc0:	46000000 	.word	0x46000000
 8101bc4:	4c742400 	.word	0x4c742400
 8101bc8:	4a742400 	.word	0x4a742400
 8101bcc:	4af42400 	.word	0x4af42400

08101bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101bd0:	b580      	push	{r7, lr}
 8101bd2:	b082      	sub	sp, #8
 8101bd4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101bd6:	f7ff fe81 	bl	81018dc <HAL_RCC_GetSysClockFreq>
 8101bda:	4602      	mov	r2, r0
 8101bdc:	4b11      	ldr	r3, [pc, #68]	; (8101c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8101bde:	699b      	ldr	r3, [r3, #24]
 8101be0:	0a1b      	lsrs	r3, r3, #8
 8101be2:	f003 030f 	and.w	r3, r3, #15
 8101be6:	4910      	ldr	r1, [pc, #64]	; (8101c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8101be8:	5ccb      	ldrb	r3, [r1, r3]
 8101bea:	f003 031f 	and.w	r3, r3, #31
 8101bee:	fa22 f303 	lsr.w	r3, r2, r3
 8101bf2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101bf4:	4b0b      	ldr	r3, [pc, #44]	; (8101c24 <HAL_RCC_GetHCLKFreq+0x54>)
 8101bf6:	699b      	ldr	r3, [r3, #24]
 8101bf8:	f003 030f 	and.w	r3, r3, #15
 8101bfc:	4a0a      	ldr	r2, [pc, #40]	; (8101c28 <HAL_RCC_GetHCLKFreq+0x58>)
 8101bfe:	5cd3      	ldrb	r3, [r2, r3]
 8101c00:	f003 031f 	and.w	r3, r3, #31
 8101c04:	687a      	ldr	r2, [r7, #4]
 8101c06:	fa22 f303 	lsr.w	r3, r2, r3
 8101c0a:	4a08      	ldr	r2, [pc, #32]	; (8101c2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101c0c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101c0e:	4b07      	ldr	r3, [pc, #28]	; (8101c2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	4a07      	ldr	r2, [pc, #28]	; (8101c30 <HAL_RCC_GetHCLKFreq+0x60>)
 8101c14:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8101c16:	4b05      	ldr	r3, [pc, #20]	; (8101c2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8101c18:	681b      	ldr	r3, [r3, #0]
}
 8101c1a:	4618      	mov	r0, r3
 8101c1c:	3708      	adds	r7, #8
 8101c1e:	46bd      	mov	sp, r7
 8101c20:	bd80      	pop	{r7, pc}
 8101c22:	bf00      	nop
 8101c24:	58024400 	.word	0x58024400
 8101c28:	08106768 	.word	0x08106768
 8101c2c:	10000004 	.word	0x10000004
 8101c30:	10000000 	.word	0x10000000

08101c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8101c34:	b580      	push	{r7, lr}
 8101c36:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8101c38:	f7ff ffca 	bl	8101bd0 <HAL_RCC_GetHCLKFreq>
 8101c3c:	4602      	mov	r2, r0
 8101c3e:	4b06      	ldr	r3, [pc, #24]	; (8101c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101c40:	69db      	ldr	r3, [r3, #28]
 8101c42:	091b      	lsrs	r3, r3, #4
 8101c44:	f003 0307 	and.w	r3, r3, #7
 8101c48:	4904      	ldr	r1, [pc, #16]	; (8101c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8101c4a:	5ccb      	ldrb	r3, [r1, r3]
 8101c4c:	f003 031f 	and.w	r3, r3, #31
 8101c50:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101c54:	4618      	mov	r0, r3
 8101c56:	bd80      	pop	{r7, pc}
 8101c58:	58024400 	.word	0x58024400
 8101c5c:	08106768 	.word	0x08106768

08101c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101c60:	b580      	push	{r7, lr}
 8101c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101c64:	f7ff ffb4 	bl	8101bd0 <HAL_RCC_GetHCLKFreq>
 8101c68:	4602      	mov	r2, r0
 8101c6a:	4b06      	ldr	r3, [pc, #24]	; (8101c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8101c6c:	69db      	ldr	r3, [r3, #28]
 8101c6e:	0a1b      	lsrs	r3, r3, #8
 8101c70:	f003 0307 	and.w	r3, r3, #7
 8101c74:	4904      	ldr	r1, [pc, #16]	; (8101c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101c76:	5ccb      	ldrb	r3, [r1, r3]
 8101c78:	f003 031f 	and.w	r3, r3, #31
 8101c7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101c80:	4618      	mov	r0, r3
 8101c82:	bd80      	pop	{r7, pc}
 8101c84:	58024400 	.word	0x58024400
 8101c88:	08106768 	.word	0x08106768

08101c8c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8101c8c:	b580      	push	{r7, lr}
 8101c8e:	b086      	sub	sp, #24
 8101c90:	af00      	add	r7, sp, #0
 8101c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101c94:	2300      	movs	r3, #0
 8101c96:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8101c98:	2300      	movs	r3, #0
 8101c9a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101c9c:	687b      	ldr	r3, [r7, #4]
 8101c9e:	681b      	ldr	r3, [r3, #0]
 8101ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8101ca4:	2b00      	cmp	r3, #0
 8101ca6:	d03f      	beq.n	8101d28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8101ca8:	687b      	ldr	r3, [r7, #4]
 8101caa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101cac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101cb0:	d02a      	beq.n	8101d08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8101cb2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8101cb6:	d824      	bhi.n	8101d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101cb8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101cbc:	d018      	beq.n	8101cf0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8101cbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101cc2:	d81e      	bhi.n	8101d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8101cc4:	2b00      	cmp	r3, #0
 8101cc6:	d003      	beq.n	8101cd0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8101cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8101ccc:	d007      	beq.n	8101cde <HAL_RCCEx_PeriphCLKConfig+0x52>
 8101cce:	e018      	b.n	8101d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101cd0:	4bab      	ldr	r3, [pc, #684]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101cd4:	4aaa      	ldr	r2, [pc, #680]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101cda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101cdc:	e015      	b.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	3304      	adds	r3, #4
 8101ce2:	2102      	movs	r1, #2
 8101ce4:	4618      	mov	r0, r3
 8101ce6:	f001 f9cf 	bl	8103088 <RCCEx_PLL2_Config>
 8101cea:	4603      	mov	r3, r0
 8101cec:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101cee:	e00c      	b.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	3324      	adds	r3, #36	; 0x24
 8101cf4:	2102      	movs	r1, #2
 8101cf6:	4618      	mov	r0, r3
 8101cf8:	f001 fa78 	bl	81031ec <RCCEx_PLL3_Config>
 8101cfc:	4603      	mov	r3, r0
 8101cfe:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8101d00:	e003      	b.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101d02:	2301      	movs	r3, #1
 8101d04:	75fb      	strb	r3, [r7, #23]
      break;
 8101d06:	e000      	b.n	8101d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8101d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d0a:	7dfb      	ldrb	r3, [r7, #23]
 8101d0c:	2b00      	cmp	r3, #0
 8101d0e:	d109      	bne.n	8101d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8101d10:	4b9b      	ldr	r3, [pc, #620]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101d14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8101d1c:	4998      	ldr	r1, [pc, #608]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d1e:	4313      	orrs	r3, r2
 8101d20:	650b      	str	r3, [r1, #80]	; 0x50
 8101d22:	e001      	b.n	8101d28 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d24:	7dfb      	ldrb	r3, [r7, #23]
 8101d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8101d28:	687b      	ldr	r3, [r7, #4]
 8101d2a:	681b      	ldr	r3, [r3, #0]
 8101d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101d30:	2b00      	cmp	r3, #0
 8101d32:	d03d      	beq.n	8101db0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101d38:	2b04      	cmp	r3, #4
 8101d3a:	d826      	bhi.n	8101d8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8101d3c:	a201      	add	r2, pc, #4	; (adr r2, 8101d44 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8101d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101d42:	bf00      	nop
 8101d44:	08101d59 	.word	0x08101d59
 8101d48:	08101d67 	.word	0x08101d67
 8101d4c:	08101d79 	.word	0x08101d79
 8101d50:	08101d91 	.word	0x08101d91
 8101d54:	08101d91 	.word	0x08101d91
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101d58:	4b89      	ldr	r3, [pc, #548]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101d5c:	4a88      	ldr	r2, [pc, #544]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101d62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101d64:	e015      	b.n	8101d92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101d66:	687b      	ldr	r3, [r7, #4]
 8101d68:	3304      	adds	r3, #4
 8101d6a:	2100      	movs	r1, #0
 8101d6c:	4618      	mov	r0, r3
 8101d6e:	f001 f98b 	bl	8103088 <RCCEx_PLL2_Config>
 8101d72:	4603      	mov	r3, r0
 8101d74:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101d76:	e00c      	b.n	8101d92 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101d78:	687b      	ldr	r3, [r7, #4]
 8101d7a:	3324      	adds	r3, #36	; 0x24
 8101d7c:	2100      	movs	r1, #0
 8101d7e:	4618      	mov	r0, r3
 8101d80:	f001 fa34 	bl	81031ec <RCCEx_PLL3_Config>
 8101d84:	4603      	mov	r3, r0
 8101d86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101d88:	e003      	b.n	8101d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101d8a:	2301      	movs	r3, #1
 8101d8c:	75fb      	strb	r3, [r7, #23]
      break;
 8101d8e:	e000      	b.n	8101d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8101d90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101d92:	7dfb      	ldrb	r3, [r7, #23]
 8101d94:	2b00      	cmp	r3, #0
 8101d96:	d109      	bne.n	8101dac <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101d98:	4b79      	ldr	r3, [pc, #484]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101d9c:	f023 0207 	bic.w	r2, r3, #7
 8101da0:	687b      	ldr	r3, [r7, #4]
 8101da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101da4:	4976      	ldr	r1, [pc, #472]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101da6:	4313      	orrs	r3, r2
 8101da8:	650b      	str	r3, [r1, #80]	; 0x50
 8101daa:	e001      	b.n	8101db0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101dac:	7dfb      	ldrb	r3, [r7, #23]
 8101dae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8101db0:	687b      	ldr	r3, [r7, #4]
 8101db2:	681b      	ldr	r3, [r3, #0]
 8101db4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8101db8:	2b00      	cmp	r3, #0
 8101dba:	d042      	beq.n	8101e42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8101dbc:	687b      	ldr	r3, [r7, #4]
 8101dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101dc4:	d02b      	beq.n	8101e1e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8101dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101dca:	d825      	bhi.n	8101e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101dcc:	2bc0      	cmp	r3, #192	; 0xc0
 8101dce:	d028      	beq.n	8101e22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8101dd0:	2bc0      	cmp	r3, #192	; 0xc0
 8101dd2:	d821      	bhi.n	8101e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101dd4:	2b80      	cmp	r3, #128	; 0x80
 8101dd6:	d016      	beq.n	8101e06 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8101dd8:	2b80      	cmp	r3, #128	; 0x80
 8101dda:	d81d      	bhi.n	8101e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8101ddc:	2b00      	cmp	r3, #0
 8101dde:	d002      	beq.n	8101de6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8101de0:	2b40      	cmp	r3, #64	; 0x40
 8101de2:	d007      	beq.n	8101df4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8101de4:	e018      	b.n	8101e18 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101de6:	4b66      	ldr	r3, [pc, #408]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101dea:	4a65      	ldr	r2, [pc, #404]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101df2:	e017      	b.n	8101e24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	3304      	adds	r3, #4
 8101df8:	2100      	movs	r1, #0
 8101dfa:	4618      	mov	r0, r3
 8101dfc:	f001 f944 	bl	8103088 <RCCEx_PLL2_Config>
 8101e00:	4603      	mov	r3, r0
 8101e02:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101e04:	e00e      	b.n	8101e24 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	3324      	adds	r3, #36	; 0x24
 8101e0a:	2100      	movs	r1, #0
 8101e0c:	4618      	mov	r0, r3
 8101e0e:	f001 f9ed 	bl	81031ec <RCCEx_PLL3_Config>
 8101e12:	4603      	mov	r3, r0
 8101e14:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8101e16:	e005      	b.n	8101e24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8101e18:	2301      	movs	r3, #1
 8101e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8101e1c:	e002      	b.n	8101e24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101e1e:	bf00      	nop
 8101e20:	e000      	b.n	8101e24 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8101e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101e24:	7dfb      	ldrb	r3, [r7, #23]
 8101e26:	2b00      	cmp	r3, #0
 8101e28:	d109      	bne.n	8101e3e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101e2a:	4b55      	ldr	r3, [pc, #340]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101e2e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8101e32:	687b      	ldr	r3, [r7, #4]
 8101e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101e36:	4952      	ldr	r1, [pc, #328]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101e38:	4313      	orrs	r3, r2
 8101e3a:	650b      	str	r3, [r1, #80]	; 0x50
 8101e3c:	e001      	b.n	8101e42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e3e:	7dfb      	ldrb	r3, [r7, #23]
 8101e40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	681b      	ldr	r3, [r3, #0]
 8101e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8101e4a:	2b00      	cmp	r3, #0
 8101e4c:	d049      	beq.n	8101ee2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8101e4e:	687b      	ldr	r3, [r7, #4]
 8101e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101e54:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101e58:	d030      	beq.n	8101ebc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8101e5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8101e5e:	d82a      	bhi.n	8101eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101e60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101e64:	d02c      	beq.n	8101ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8101e66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8101e6a:	d824      	bhi.n	8101eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101e70:	d018      	beq.n	8101ea4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8101e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101e76:	d81e      	bhi.n	8101eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8101e78:	2b00      	cmp	r3, #0
 8101e7a:	d003      	beq.n	8101e84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8101e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101e80:	d007      	beq.n	8101e92 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8101e82:	e018      	b.n	8101eb6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101e84:	4b3e      	ldr	r3, [pc, #248]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e88:	4a3d      	ldr	r2, [pc, #244]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101e90:	e017      	b.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101e92:	687b      	ldr	r3, [r7, #4]
 8101e94:	3304      	adds	r3, #4
 8101e96:	2100      	movs	r1, #0
 8101e98:	4618      	mov	r0, r3
 8101e9a:	f001 f8f5 	bl	8103088 <RCCEx_PLL2_Config>
 8101e9e:	4603      	mov	r3, r0
 8101ea0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101ea2:	e00e      	b.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8101ea4:	687b      	ldr	r3, [r7, #4]
 8101ea6:	3324      	adds	r3, #36	; 0x24
 8101ea8:	2100      	movs	r1, #0
 8101eaa:	4618      	mov	r0, r3
 8101eac:	f001 f99e 	bl	81031ec <RCCEx_PLL3_Config>
 8101eb0:	4603      	mov	r3, r0
 8101eb2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101eb4:	e005      	b.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101eb6:	2301      	movs	r3, #1
 8101eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8101eba:	e002      	b.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101ebc:	bf00      	nop
 8101ebe:	e000      	b.n	8101ec2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8101ec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101ec2:	7dfb      	ldrb	r3, [r7, #23]
 8101ec4:	2b00      	cmp	r3, #0
 8101ec6:	d10a      	bne.n	8101ede <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8101ec8:	4b2d      	ldr	r3, [pc, #180]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101ecc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8101ed0:	687b      	ldr	r3, [r7, #4]
 8101ed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8101ed6:	492a      	ldr	r1, [pc, #168]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101ed8:	4313      	orrs	r3, r2
 8101eda:	658b      	str	r3, [r1, #88]	; 0x58
 8101edc:	e001      	b.n	8101ee2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ede:	7dfb      	ldrb	r3, [r7, #23]
 8101ee0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8101ee2:	687b      	ldr	r3, [r7, #4]
 8101ee4:	681b      	ldr	r3, [r3, #0]
 8101ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8101eea:	2b00      	cmp	r3, #0
 8101eec:	d04c      	beq.n	8101f88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8101eee:	687b      	ldr	r3, [r7, #4]
 8101ef0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101ef8:	d030      	beq.n	8101f5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8101efa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8101efe:	d82a      	bhi.n	8101f56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101f00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101f04:	d02c      	beq.n	8101f60 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8101f06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8101f0a:	d824      	bhi.n	8101f56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101f10:	d018      	beq.n	8101f44 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8101f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8101f16:	d81e      	bhi.n	8101f56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8101f18:	2b00      	cmp	r3, #0
 8101f1a:	d003      	beq.n	8101f24 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8101f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101f20:	d007      	beq.n	8101f32 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8101f22:	e018      	b.n	8101f56 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101f24:	4b16      	ldr	r3, [pc, #88]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101f28:	4a15      	ldr	r2, [pc, #84]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101f2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101f2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101f30:	e017      	b.n	8101f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8101f32:	687b      	ldr	r3, [r7, #4]
 8101f34:	3304      	adds	r3, #4
 8101f36:	2100      	movs	r1, #0
 8101f38:	4618      	mov	r0, r3
 8101f3a:	f001 f8a5 	bl	8103088 <RCCEx_PLL2_Config>
 8101f3e:	4603      	mov	r3, r0
 8101f40:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8101f42:	e00e      	b.n	8101f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101f44:	687b      	ldr	r3, [r7, #4]
 8101f46:	3324      	adds	r3, #36	; 0x24
 8101f48:	2100      	movs	r1, #0
 8101f4a:	4618      	mov	r0, r3
 8101f4c:	f001 f94e 	bl	81031ec <RCCEx_PLL3_Config>
 8101f50:	4603      	mov	r3, r0
 8101f52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8101f54:	e005      	b.n	8101f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8101f56:	2301      	movs	r3, #1
 8101f58:	75fb      	strb	r3, [r7, #23]
      break;
 8101f5a:	e002      	b.n	8101f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8101f5c:	bf00      	nop
 8101f5e:	e000      	b.n	8101f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8101f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101f62:	7dfb      	ldrb	r3, [r7, #23]
 8101f64:	2b00      	cmp	r3, #0
 8101f66:	d10d      	bne.n	8101f84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8101f68:	4b05      	ldr	r3, [pc, #20]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f6c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8101f70:	687b      	ldr	r3, [r7, #4]
 8101f72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8101f76:	4902      	ldr	r1, [pc, #8]	; (8101f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8101f78:	4313      	orrs	r3, r2
 8101f7a:	658b      	str	r3, [r1, #88]	; 0x58
 8101f7c:	e004      	b.n	8101f88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8101f7e:	bf00      	nop
 8101f80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f84:	7dfb      	ldrb	r3, [r7, #23]
 8101f86:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	681b      	ldr	r3, [r3, #0]
 8101f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101f90:	2b00      	cmp	r3, #0
 8101f92:	d032      	beq.n	8101ffa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8101f94:	687b      	ldr	r3, [r7, #4]
 8101f96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101f98:	2b30      	cmp	r3, #48	; 0x30
 8101f9a:	d01c      	beq.n	8101fd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101f9c:	2b30      	cmp	r3, #48	; 0x30
 8101f9e:	d817      	bhi.n	8101fd0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101fa0:	2b20      	cmp	r3, #32
 8101fa2:	d00c      	beq.n	8101fbe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8101fa4:	2b20      	cmp	r3, #32
 8101fa6:	d813      	bhi.n	8101fd0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8101fa8:	2b00      	cmp	r3, #0
 8101faa:	d016      	beq.n	8101fda <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8101fac:	2b10      	cmp	r3, #16
 8101fae:	d10f      	bne.n	8101fd0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101fb0:	4baf      	ldr	r3, [pc, #700]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101fb4:	4aae      	ldr	r2, [pc, #696]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101fb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101fba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101fbc:	e00e      	b.n	8101fdc <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8101fbe:	687b      	ldr	r3, [r7, #4]
 8101fc0:	3304      	adds	r3, #4
 8101fc2:	2102      	movs	r1, #2
 8101fc4:	4618      	mov	r0, r3
 8101fc6:	f001 f85f 	bl	8103088 <RCCEx_PLL2_Config>
 8101fca:	4603      	mov	r3, r0
 8101fcc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8101fce:	e005      	b.n	8101fdc <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8101fd0:	2301      	movs	r3, #1
 8101fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8101fd4:	e002      	b.n	8101fdc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8101fd6:	bf00      	nop
 8101fd8:	e000      	b.n	8101fdc <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8101fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8101fdc:	7dfb      	ldrb	r3, [r7, #23]
 8101fde:	2b00      	cmp	r3, #0
 8101fe0:	d109      	bne.n	8101ff6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101fe2:	4ba3      	ldr	r3, [pc, #652]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101fe6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8101fea:	687b      	ldr	r3, [r7, #4]
 8101fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8101fee:	49a0      	ldr	r1, [pc, #640]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8101ff0:	4313      	orrs	r3, r2
 8101ff2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8101ff4:	e001      	b.n	8101ffa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101ff6:	7dfb      	ldrb	r3, [r7, #23]
 8101ff8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8101ffa:	687b      	ldr	r3, [r7, #4]
 8101ffc:	681b      	ldr	r3, [r3, #0]
 8101ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102002:	2b00      	cmp	r3, #0
 8102004:	d047      	beq.n	8102096 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810200a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810200e:	d030      	beq.n	8102072 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8102010:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102014:	d82a      	bhi.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102016:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810201a:	d02c      	beq.n	8102076 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 810201c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8102020:	d824      	bhi.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8102022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102026:	d018      	beq.n	810205a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8102028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810202c:	d81e      	bhi.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810202e:	2b00      	cmp	r3, #0
 8102030:	d003      	beq.n	810203a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8102032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102036:	d007      	beq.n	8102048 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8102038:	e018      	b.n	810206c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810203a:	4b8d      	ldr	r3, [pc, #564]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810203e:	4a8c      	ldr	r2, [pc, #560]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102046:	e017      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102048:	687b      	ldr	r3, [r7, #4]
 810204a:	3304      	adds	r3, #4
 810204c:	2100      	movs	r1, #0
 810204e:	4618      	mov	r0, r3
 8102050:	f001 f81a 	bl	8103088 <RCCEx_PLL2_Config>
 8102054:	4603      	mov	r3, r0
 8102056:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8102058:	e00e      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	3324      	adds	r3, #36	; 0x24
 810205e:	2100      	movs	r1, #0
 8102060:	4618      	mov	r0, r3
 8102062:	f001 f8c3 	bl	81031ec <RCCEx_PLL3_Config>
 8102066:	4603      	mov	r3, r0
 8102068:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810206a:	e005      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810206c:	2301      	movs	r3, #1
 810206e:	75fb      	strb	r3, [r7, #23]
      break;
 8102070:	e002      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8102072:	bf00      	nop
 8102074:	e000      	b.n	8102078 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8102076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102078:	7dfb      	ldrb	r3, [r7, #23]
 810207a:	2b00      	cmp	r3, #0
 810207c:	d109      	bne.n	8102092 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810207e:	4b7c      	ldr	r3, [pc, #496]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102082:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8102086:	687b      	ldr	r3, [r7, #4]
 8102088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810208a:	4979      	ldr	r1, [pc, #484]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810208c:	4313      	orrs	r3, r2
 810208e:	650b      	str	r3, [r1, #80]	; 0x50
 8102090:	e001      	b.n	8102096 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102092:	7dfb      	ldrb	r3, [r7, #23]
 8102094:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102096:	687b      	ldr	r3, [r7, #4]
 8102098:	681b      	ldr	r3, [r3, #0]
 810209a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 810209e:	2b00      	cmp	r3, #0
 81020a0:	d049      	beq.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81020a2:	687b      	ldr	r3, [r7, #4]
 81020a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81020a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81020aa:	d02e      	beq.n	810210a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81020b0:	d828      	bhi.n	8102104 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81020b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81020b6:	d02a      	beq.n	810210e <HAL_RCCEx_PeriphCLKConfig+0x482>
 81020b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81020bc:	d822      	bhi.n	8102104 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81020be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81020c2:	d026      	beq.n	8102112 <HAL_RCCEx_PeriphCLKConfig+0x486>
 81020c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81020c8:	d81c      	bhi.n	8102104 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81020ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81020ce:	d010      	beq.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 81020d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81020d4:	d816      	bhi.n	8102104 <HAL_RCCEx_PeriphCLKConfig+0x478>
 81020d6:	2b00      	cmp	r3, #0
 81020d8:	d01d      	beq.n	8102116 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 81020da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81020de:	d111      	bne.n	8102104 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81020e0:	687b      	ldr	r3, [r7, #4]
 81020e2:	3304      	adds	r3, #4
 81020e4:	2101      	movs	r1, #1
 81020e6:	4618      	mov	r0, r3
 81020e8:	f000 ffce 	bl	8103088 <RCCEx_PLL2_Config>
 81020ec:	4603      	mov	r3, r0
 81020ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 81020f0:	e012      	b.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81020f2:	687b      	ldr	r3, [r7, #4]
 81020f4:	3324      	adds	r3, #36	; 0x24
 81020f6:	2101      	movs	r1, #1
 81020f8:	4618      	mov	r0, r3
 81020fa:	f001 f877 	bl	81031ec <RCCEx_PLL3_Config>
 81020fe:	4603      	mov	r3, r0
 8102100:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8102102:	e009      	b.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102104:	2301      	movs	r3, #1
 8102106:	75fb      	strb	r3, [r7, #23]
      break;
 8102108:	e006      	b.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810210a:	bf00      	nop
 810210c:	e004      	b.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810210e:	bf00      	nop
 8102110:	e002      	b.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102112:	bf00      	nop
 8102114:	e000      	b.n	8102118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8102116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102118:	7dfb      	ldrb	r3, [r7, #23]
 810211a:	2b00      	cmp	r3, #0
 810211c:	d109      	bne.n	8102132 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810211e:	4b54      	ldr	r3, [pc, #336]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102122:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8102126:	687b      	ldr	r3, [r7, #4]
 8102128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810212a:	4951      	ldr	r1, [pc, #324]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810212c:	4313      	orrs	r3, r2
 810212e:	650b      	str	r3, [r1, #80]	; 0x50
 8102130:	e001      	b.n	8102136 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102132:	7dfb      	ldrb	r3, [r7, #23]
 8102134:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102136:	687b      	ldr	r3, [r7, #4]
 8102138:	681b      	ldr	r3, [r3, #0]
 810213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810213e:	2b00      	cmp	r3, #0
 8102140:	d04b      	beq.n	81021da <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8102142:	687b      	ldr	r3, [r7, #4]
 8102144:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8102148:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810214c:	d02e      	beq.n	81021ac <HAL_RCCEx_PeriphCLKConfig+0x520>
 810214e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102152:	d828      	bhi.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102158:	d02a      	beq.n	81021b0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 810215a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810215e:	d822      	bhi.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102160:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102164:	d026      	beq.n	81021b4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8102166:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810216a:	d81c      	bhi.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810216c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102170:	d010      	beq.n	8102194 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8102172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102176:	d816      	bhi.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8102178:	2b00      	cmp	r3, #0
 810217a:	d01d      	beq.n	81021b8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 810217c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102180:	d111      	bne.n	81021a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102182:	687b      	ldr	r3, [r7, #4]
 8102184:	3304      	adds	r3, #4
 8102186:	2101      	movs	r1, #1
 8102188:	4618      	mov	r0, r3
 810218a:	f000 ff7d 	bl	8103088 <RCCEx_PLL2_Config>
 810218e:	4603      	mov	r3, r0
 8102190:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8102192:	e012      	b.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	3324      	adds	r3, #36	; 0x24
 8102198:	2101      	movs	r1, #1
 810219a:	4618      	mov	r0, r3
 810219c:	f001 f826 	bl	81031ec <RCCEx_PLL3_Config>
 81021a0:	4603      	mov	r3, r0
 81021a2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81021a4:	e009      	b.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81021a6:	2301      	movs	r3, #1
 81021a8:	75fb      	strb	r3, [r7, #23]
      break;
 81021aa:	e006      	b.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81021ac:	bf00      	nop
 81021ae:	e004      	b.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81021b0:	bf00      	nop
 81021b2:	e002      	b.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81021b4:	bf00      	nop
 81021b6:	e000      	b.n	81021ba <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81021b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81021ba:	7dfb      	ldrb	r3, [r7, #23]
 81021bc:	2b00      	cmp	r3, #0
 81021be:	d10a      	bne.n	81021d6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81021c0:	4b2b      	ldr	r3, [pc, #172]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81021c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81021c4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81021c8:	687b      	ldr	r3, [r7, #4]
 81021ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81021ce:	4928      	ldr	r1, [pc, #160]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81021d0:	4313      	orrs	r3, r2
 81021d2:	658b      	str	r3, [r1, #88]	; 0x58
 81021d4:	e001      	b.n	81021da <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021d6:	7dfb      	ldrb	r3, [r7, #23]
 81021d8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81021da:	687b      	ldr	r3, [r7, #4]
 81021dc:	681b      	ldr	r3, [r3, #0]
 81021de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81021e2:	2b00      	cmp	r3, #0
 81021e4:	d02f      	beq.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 81021e6:	687b      	ldr	r3, [r7, #4]
 81021e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81021ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81021ee:	d00e      	beq.n	810220e <HAL_RCCEx_PeriphCLKConfig+0x582>
 81021f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81021f4:	d814      	bhi.n	8102220 <HAL_RCCEx_PeriphCLKConfig+0x594>
 81021f6:	2b00      	cmp	r3, #0
 81021f8:	d015      	beq.n	8102226 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81021fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81021fe:	d10f      	bne.n	8102220 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102200:	4b1b      	ldr	r3, [pc, #108]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102204:	4a1a      	ldr	r2, [pc, #104]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810220a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810220c:	e00c      	b.n	8102228 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810220e:	687b      	ldr	r3, [r7, #4]
 8102210:	3304      	adds	r3, #4
 8102212:	2101      	movs	r1, #1
 8102214:	4618      	mov	r0, r3
 8102216:	f000 ff37 	bl	8103088 <RCCEx_PLL2_Config>
 810221a:	4603      	mov	r3, r0
 810221c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 810221e:	e003      	b.n	8102228 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102220:	2301      	movs	r3, #1
 8102222:	75fb      	strb	r3, [r7, #23]
      break;
 8102224:	e000      	b.n	8102228 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8102226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102228:	7dfb      	ldrb	r3, [r7, #23]
 810222a:	2b00      	cmp	r3, #0
 810222c:	d109      	bne.n	8102242 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810222e:	4b10      	ldr	r3, [pc, #64]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8102230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810223a:	490d      	ldr	r1, [pc, #52]	; (8102270 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810223c:	4313      	orrs	r3, r2
 810223e:	650b      	str	r3, [r1, #80]	; 0x50
 8102240:	e001      	b.n	8102246 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102242:	7dfb      	ldrb	r3, [r7, #23]
 8102244:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	681b      	ldr	r3, [r3, #0]
 810224a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810224e:	2b00      	cmp	r3, #0
 8102250:	d033      	beq.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102256:	2b03      	cmp	r3, #3
 8102258:	d81c      	bhi.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0x608>
 810225a:	a201      	add	r2, pc, #4	; (adr r2, 8102260 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 810225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102260:	0810229b 	.word	0x0810229b
 8102264:	08102275 	.word	0x08102275
 8102268:	08102283 	.word	0x08102283
 810226c:	0810229b 	.word	0x0810229b
 8102270:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102274:	4bb9      	ldr	r3, [pc, #740]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102278:	4ab8      	ldr	r2, [pc, #736]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810227a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810227e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102280:	e00c      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	3304      	adds	r3, #4
 8102286:	2102      	movs	r1, #2
 8102288:	4618      	mov	r0, r3
 810228a:	f000 fefd 	bl	8103088 <RCCEx_PLL2_Config>
 810228e:	4603      	mov	r3, r0
 8102290:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8102292:	e003      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8102294:	2301      	movs	r3, #1
 8102296:	75fb      	strb	r3, [r7, #23]
      break;
 8102298:	e000      	b.n	810229c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 810229a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810229c:	7dfb      	ldrb	r3, [r7, #23]
 810229e:	2b00      	cmp	r3, #0
 81022a0:	d109      	bne.n	81022b6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81022a2:	4bae      	ldr	r3, [pc, #696]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81022a6:	f023 0203 	bic.w	r2, r3, #3
 81022aa:	687b      	ldr	r3, [r7, #4]
 81022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81022ae:	49ab      	ldr	r1, [pc, #684]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81022b0:	4313      	orrs	r3, r2
 81022b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81022b4:	e001      	b.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022b6:	7dfb      	ldrb	r3, [r7, #23]
 81022b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81022ba:	687b      	ldr	r3, [r7, #4]
 81022bc:	681b      	ldr	r3, [r3, #0]
 81022be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81022c2:	2b00      	cmp	r3, #0
 81022c4:	f000 8088 	beq.w	81023d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81022c8:	4ba5      	ldr	r3, [pc, #660]	; (8102560 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81022ca:	681b      	ldr	r3, [r3, #0]
 81022cc:	4aa4      	ldr	r2, [pc, #656]	; (8102560 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81022d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81022d4:	f7fe ff76 	bl	81011c4 <HAL_GetTick>
 81022d8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81022da:	e009      	b.n	81022f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81022dc:	f7fe ff72 	bl	81011c4 <HAL_GetTick>
 81022e0:	4602      	mov	r2, r0
 81022e2:	693b      	ldr	r3, [r7, #16]
 81022e4:	1ad3      	subs	r3, r2, r3
 81022e6:	2b64      	cmp	r3, #100	; 0x64
 81022e8:	d902      	bls.n	81022f0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 81022ea:	2303      	movs	r3, #3
 81022ec:	75fb      	strb	r3, [r7, #23]
        break;
 81022ee:	e005      	b.n	81022fc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81022f0:	4b9b      	ldr	r3, [pc, #620]	; (8102560 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 81022f2:	681b      	ldr	r3, [r3, #0]
 81022f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81022f8:	2b00      	cmp	r3, #0
 81022fa:	d0ef      	beq.n	81022dc <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 81022fc:	7dfb      	ldrb	r3, [r7, #23]
 81022fe:	2b00      	cmp	r3, #0
 8102300:	d168      	bne.n	81023d4 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102302:	4b96      	ldr	r3, [pc, #600]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102304:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102306:	687b      	ldr	r3, [r7, #4]
 8102308:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810230c:	4053      	eors	r3, r2
 810230e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102312:	2b00      	cmp	r3, #0
 8102314:	d013      	beq.n	810233e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102316:	4b91      	ldr	r3, [pc, #580]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810231e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102320:	4b8e      	ldr	r3, [pc, #568]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102324:	4a8d      	ldr	r2, [pc, #564]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810232a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810232c:	4b8b      	ldr	r3, [pc, #556]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102330:	4a8a      	ldr	r2, [pc, #552]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102336:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102338:	4a88      	ldr	r2, [pc, #544]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810233a:	68fb      	ldr	r3, [r7, #12]
 810233c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810233e:	687b      	ldr	r3, [r7, #4]
 8102340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102348:	d115      	bne.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810234a:	f7fe ff3b 	bl	81011c4 <HAL_GetTick>
 810234e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102350:	e00b      	b.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102352:	f7fe ff37 	bl	81011c4 <HAL_GetTick>
 8102356:	4602      	mov	r2, r0
 8102358:	693b      	ldr	r3, [r7, #16]
 810235a:	1ad3      	subs	r3, r2, r3
 810235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8102360:	4293      	cmp	r3, r2
 8102362:	d902      	bls.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8102364:	2303      	movs	r3, #3
 8102366:	75fb      	strb	r3, [r7, #23]
            break;
 8102368:	e005      	b.n	8102376 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810236a:	4b7c      	ldr	r3, [pc, #496]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810236e:	f003 0302 	and.w	r3, r3, #2
 8102372:	2b00      	cmp	r3, #0
 8102374:	d0ed      	beq.n	8102352 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8102376:	7dfb      	ldrb	r3, [r7, #23]
 8102378:	2b00      	cmp	r3, #0
 810237a:	d128      	bne.n	81023ce <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 810237c:	687b      	ldr	r3, [r7, #4]
 810237e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102386:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810238a:	d10f      	bne.n	81023ac <HAL_RCCEx_PeriphCLKConfig+0x720>
 810238c:	4b73      	ldr	r3, [pc, #460]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810238e:	691b      	ldr	r3, [r3, #16]
 8102390:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8102394:	687b      	ldr	r3, [r7, #4]
 8102396:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810239a:	091b      	lsrs	r3, r3, #4
 810239c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81023a0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81023a4:	496d      	ldr	r1, [pc, #436]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023a6:	4313      	orrs	r3, r2
 81023a8:	610b      	str	r3, [r1, #16]
 81023aa:	e005      	b.n	81023b8 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81023ac:	4b6b      	ldr	r3, [pc, #428]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023ae:	691b      	ldr	r3, [r3, #16]
 81023b0:	4a6a      	ldr	r2, [pc, #424]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81023b6:	6113      	str	r3, [r2, #16]
 81023b8:	4b68      	ldr	r3, [pc, #416]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81023c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81023c6:	4965      	ldr	r1, [pc, #404]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81023c8:	4313      	orrs	r3, r2
 81023ca:	670b      	str	r3, [r1, #112]	; 0x70
 81023cc:	e004      	b.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81023ce:	7dfb      	ldrb	r3, [r7, #23]
 81023d0:	75bb      	strb	r3, [r7, #22]
 81023d2:	e001      	b.n	81023d8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023d4:	7dfb      	ldrb	r3, [r7, #23]
 81023d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 81023d8:	687b      	ldr	r3, [r7, #4]
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	f003 0301 	and.w	r3, r3, #1
 81023e0:	2b00      	cmp	r3, #0
 81023e2:	d07e      	beq.n	81024e2 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 81023e4:	687b      	ldr	r3, [r7, #4]
 81023e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81023e8:	2b28      	cmp	r3, #40	; 0x28
 81023ea:	d867      	bhi.n	81024bc <HAL_RCCEx_PeriphCLKConfig+0x830>
 81023ec:	a201      	add	r2, pc, #4	; (adr r2, 81023f4 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 81023ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81023f2:	bf00      	nop
 81023f4:	081024c3 	.word	0x081024c3
 81023f8:	081024bd 	.word	0x081024bd
 81023fc:	081024bd 	.word	0x081024bd
 8102400:	081024bd 	.word	0x081024bd
 8102404:	081024bd 	.word	0x081024bd
 8102408:	081024bd 	.word	0x081024bd
 810240c:	081024bd 	.word	0x081024bd
 8102410:	081024bd 	.word	0x081024bd
 8102414:	08102499 	.word	0x08102499
 8102418:	081024bd 	.word	0x081024bd
 810241c:	081024bd 	.word	0x081024bd
 8102420:	081024bd 	.word	0x081024bd
 8102424:	081024bd 	.word	0x081024bd
 8102428:	081024bd 	.word	0x081024bd
 810242c:	081024bd 	.word	0x081024bd
 8102430:	081024bd 	.word	0x081024bd
 8102434:	081024ab 	.word	0x081024ab
 8102438:	081024bd 	.word	0x081024bd
 810243c:	081024bd 	.word	0x081024bd
 8102440:	081024bd 	.word	0x081024bd
 8102444:	081024bd 	.word	0x081024bd
 8102448:	081024bd 	.word	0x081024bd
 810244c:	081024bd 	.word	0x081024bd
 8102450:	081024bd 	.word	0x081024bd
 8102454:	081024c3 	.word	0x081024c3
 8102458:	081024bd 	.word	0x081024bd
 810245c:	081024bd 	.word	0x081024bd
 8102460:	081024bd 	.word	0x081024bd
 8102464:	081024bd 	.word	0x081024bd
 8102468:	081024bd 	.word	0x081024bd
 810246c:	081024bd 	.word	0x081024bd
 8102470:	081024bd 	.word	0x081024bd
 8102474:	081024c3 	.word	0x081024c3
 8102478:	081024bd 	.word	0x081024bd
 810247c:	081024bd 	.word	0x081024bd
 8102480:	081024bd 	.word	0x081024bd
 8102484:	081024bd 	.word	0x081024bd
 8102488:	081024bd 	.word	0x081024bd
 810248c:	081024bd 	.word	0x081024bd
 8102490:	081024bd 	.word	0x081024bd
 8102494:	081024c3 	.word	0x081024c3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102498:	687b      	ldr	r3, [r7, #4]
 810249a:	3304      	adds	r3, #4
 810249c:	2101      	movs	r1, #1
 810249e:	4618      	mov	r0, r3
 81024a0:	f000 fdf2 	bl	8103088 <RCCEx_PLL2_Config>
 81024a4:	4603      	mov	r3, r0
 81024a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81024a8:	e00c      	b.n	81024c4 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81024aa:	687b      	ldr	r3, [r7, #4]
 81024ac:	3324      	adds	r3, #36	; 0x24
 81024ae:	2101      	movs	r1, #1
 81024b0:	4618      	mov	r0, r3
 81024b2:	f000 fe9b 	bl	81031ec <RCCEx_PLL3_Config>
 81024b6:	4603      	mov	r3, r0
 81024b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81024ba:	e003      	b.n	81024c4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81024bc:	2301      	movs	r3, #1
 81024be:	75fb      	strb	r3, [r7, #23]
      break;
 81024c0:	e000      	b.n	81024c4 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81024c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81024c4:	7dfb      	ldrb	r3, [r7, #23]
 81024c6:	2b00      	cmp	r3, #0
 81024c8:	d109      	bne.n	81024de <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81024ca:	4b24      	ldr	r3, [pc, #144]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024ce:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81024d6:	4921      	ldr	r1, [pc, #132]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81024d8:	4313      	orrs	r3, r2
 81024da:	654b      	str	r3, [r1, #84]	; 0x54
 81024dc:	e001      	b.n	81024e2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024de:	7dfb      	ldrb	r3, [r7, #23]
 81024e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	f003 0302 	and.w	r3, r3, #2
 81024ea:	2b00      	cmp	r3, #0
 81024ec:	d03c      	beq.n	8102568 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 81024ee:	687b      	ldr	r3, [r7, #4]
 81024f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81024f2:	2b05      	cmp	r3, #5
 81024f4:	d820      	bhi.n	8102538 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 81024f6:	a201      	add	r2, pc, #4	; (adr r2, 81024fc <HAL_RCCEx_PeriphCLKConfig+0x870>)
 81024f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81024fc:	0810253f 	.word	0x0810253f
 8102500:	08102515 	.word	0x08102515
 8102504:	08102527 	.word	0x08102527
 8102508:	0810253f 	.word	0x0810253f
 810250c:	0810253f 	.word	0x0810253f
 8102510:	0810253f 	.word	0x0810253f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	3304      	adds	r3, #4
 8102518:	2101      	movs	r1, #1
 810251a:	4618      	mov	r0, r3
 810251c:	f000 fdb4 	bl	8103088 <RCCEx_PLL2_Config>
 8102520:	4603      	mov	r3, r0
 8102522:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102524:	e00c      	b.n	8102540 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8102526:	687b      	ldr	r3, [r7, #4]
 8102528:	3324      	adds	r3, #36	; 0x24
 810252a:	2101      	movs	r1, #1
 810252c:	4618      	mov	r0, r3
 810252e:	f000 fe5d 	bl	81031ec <RCCEx_PLL3_Config>
 8102532:	4603      	mov	r3, r0
 8102534:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8102536:	e003      	b.n	8102540 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102538:	2301      	movs	r3, #1
 810253a:	75fb      	strb	r3, [r7, #23]
      break;
 810253c:	e000      	b.n	8102540 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 810253e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102540:	7dfb      	ldrb	r3, [r7, #23]
 8102542:	2b00      	cmp	r3, #0
 8102544:	d10e      	bne.n	8102564 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102546:	4b05      	ldr	r3, [pc, #20]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810254a:	f023 0207 	bic.w	r2, r3, #7
 810254e:	687b      	ldr	r3, [r7, #4]
 8102550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8102552:	4902      	ldr	r1, [pc, #8]	; (810255c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8102554:	4313      	orrs	r3, r2
 8102556:	654b      	str	r3, [r1, #84]	; 0x54
 8102558:	e006      	b.n	8102568 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810255a:	bf00      	nop
 810255c:	58024400 	.word	0x58024400
 8102560:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102564:	7dfb      	ldrb	r3, [r7, #23]
 8102566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102568:	687b      	ldr	r3, [r7, #4]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	f003 0304 	and.w	r3, r3, #4
 8102570:	2b00      	cmp	r3, #0
 8102572:	d039      	beq.n	81025e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8102574:	687b      	ldr	r3, [r7, #4]
 8102576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810257a:	2b05      	cmp	r3, #5
 810257c:	d820      	bhi.n	81025c0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 810257e:	a201      	add	r2, pc, #4	; (adr r2, 8102584 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8102580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102584:	081025c7 	.word	0x081025c7
 8102588:	0810259d 	.word	0x0810259d
 810258c:	081025af 	.word	0x081025af
 8102590:	081025c7 	.word	0x081025c7
 8102594:	081025c7 	.word	0x081025c7
 8102598:	081025c7 	.word	0x081025c7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810259c:	687b      	ldr	r3, [r7, #4]
 810259e:	3304      	adds	r3, #4
 81025a0:	2101      	movs	r1, #1
 81025a2:	4618      	mov	r0, r3
 81025a4:	f000 fd70 	bl	8103088 <RCCEx_PLL2_Config>
 81025a8:	4603      	mov	r3, r0
 81025aa:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81025ac:	e00c      	b.n	81025c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	3324      	adds	r3, #36	; 0x24
 81025b2:	2101      	movs	r1, #1
 81025b4:	4618      	mov	r0, r3
 81025b6:	f000 fe19 	bl	81031ec <RCCEx_PLL3_Config>
 81025ba:	4603      	mov	r3, r0
 81025bc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81025be:	e003      	b.n	81025c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81025c0:	2301      	movs	r3, #1
 81025c2:	75fb      	strb	r3, [r7, #23]
      break;
 81025c4:	e000      	b.n	81025c8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81025c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81025c8:	7dfb      	ldrb	r3, [r7, #23]
 81025ca:	2b00      	cmp	r3, #0
 81025cc:	d10a      	bne.n	81025e4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81025ce:	4bb7      	ldr	r3, [pc, #732]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025d2:	f023 0207 	bic.w	r2, r3, #7
 81025d6:	687b      	ldr	r3, [r7, #4]
 81025d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81025dc:	49b3      	ldr	r1, [pc, #716]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81025de:	4313      	orrs	r3, r2
 81025e0:	658b      	str	r3, [r1, #88]	; 0x58
 81025e2:	e001      	b.n	81025e8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025e4:	7dfb      	ldrb	r3, [r7, #23]
 81025e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81025e8:	687b      	ldr	r3, [r7, #4]
 81025ea:	681b      	ldr	r3, [r3, #0]
 81025ec:	f003 0320 	and.w	r3, r3, #32
 81025f0:	2b00      	cmp	r3, #0
 81025f2:	d04b      	beq.n	810268c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 81025f4:	687b      	ldr	r3, [r7, #4]
 81025f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81025fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81025fe:	d02e      	beq.n	810265e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8102600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102604:	d828      	bhi.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810260a:	d02a      	beq.n	8102662 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 810260c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102610:	d822      	bhi.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8102612:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102616:	d026      	beq.n	8102666 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8102618:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810261c:	d81c      	bhi.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810261e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102622:	d010      	beq.n	8102646 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8102624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102628:	d816      	bhi.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810262a:	2b00      	cmp	r3, #0
 810262c:	d01d      	beq.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 810262e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102632:	d111      	bne.n	8102658 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102634:	687b      	ldr	r3, [r7, #4]
 8102636:	3304      	adds	r3, #4
 8102638:	2100      	movs	r1, #0
 810263a:	4618      	mov	r0, r3
 810263c:	f000 fd24 	bl	8103088 <RCCEx_PLL2_Config>
 8102640:	4603      	mov	r3, r0
 8102642:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102644:	e012      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102646:	687b      	ldr	r3, [r7, #4]
 8102648:	3324      	adds	r3, #36	; 0x24
 810264a:	2102      	movs	r1, #2
 810264c:	4618      	mov	r0, r3
 810264e:	f000 fdcd 	bl	81031ec <RCCEx_PLL3_Config>
 8102652:	4603      	mov	r3, r0
 8102654:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8102656:	e009      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102658:	2301      	movs	r3, #1
 810265a:	75fb      	strb	r3, [r7, #23]
      break;
 810265c:	e006      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810265e:	bf00      	nop
 8102660:	e004      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102662:	bf00      	nop
 8102664:	e002      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8102666:	bf00      	nop
 8102668:	e000      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810266a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810266c:	7dfb      	ldrb	r3, [r7, #23]
 810266e:	2b00      	cmp	r3, #0
 8102670:	d10a      	bne.n	8102688 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102672:	4b8e      	ldr	r3, [pc, #568]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102676:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 810267a:	687b      	ldr	r3, [r7, #4]
 810267c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8102680:	498a      	ldr	r1, [pc, #552]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102682:	4313      	orrs	r3, r2
 8102684:	654b      	str	r3, [r1, #84]	; 0x54
 8102686:	e001      	b.n	810268c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102688:	7dfb      	ldrb	r3, [r7, #23]
 810268a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810268c:	687b      	ldr	r3, [r7, #4]
 810268e:	681b      	ldr	r3, [r3, #0]
 8102690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102694:	2b00      	cmp	r3, #0
 8102696:	d04b      	beq.n	8102730 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8102698:	687b      	ldr	r3, [r7, #4]
 810269a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810269e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81026a2:	d02e      	beq.n	8102702 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81026a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81026a8:	d828      	bhi.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81026aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81026ae:	d02a      	beq.n	8102706 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81026b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81026b4:	d822      	bhi.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81026b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81026ba:	d026      	beq.n	810270a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81026bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81026c0:	d81c      	bhi.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81026c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81026c6:	d010      	beq.n	81026ea <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81026c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81026cc:	d816      	bhi.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81026ce:	2b00      	cmp	r3, #0
 81026d0:	d01d      	beq.n	810270e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 81026d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81026d6:	d111      	bne.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81026d8:	687b      	ldr	r3, [r7, #4]
 81026da:	3304      	adds	r3, #4
 81026dc:	2100      	movs	r1, #0
 81026de:	4618      	mov	r0, r3
 81026e0:	f000 fcd2 	bl	8103088 <RCCEx_PLL2_Config>
 81026e4:	4603      	mov	r3, r0
 81026e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81026e8:	e012      	b.n	8102710 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81026ea:	687b      	ldr	r3, [r7, #4]
 81026ec:	3324      	adds	r3, #36	; 0x24
 81026ee:	2102      	movs	r1, #2
 81026f0:	4618      	mov	r0, r3
 81026f2:	f000 fd7b 	bl	81031ec <RCCEx_PLL3_Config>
 81026f6:	4603      	mov	r3, r0
 81026f8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 81026fa:	e009      	b.n	8102710 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81026fc:	2301      	movs	r3, #1
 81026fe:	75fb      	strb	r3, [r7, #23]
      break;
 8102700:	e006      	b.n	8102710 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102702:	bf00      	nop
 8102704:	e004      	b.n	8102710 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8102706:	bf00      	nop
 8102708:	e002      	b.n	8102710 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810270a:	bf00      	nop
 810270c:	e000      	b.n	8102710 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810270e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102710:	7dfb      	ldrb	r3, [r7, #23]
 8102712:	2b00      	cmp	r3, #0
 8102714:	d10a      	bne.n	810272c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102716:	4b65      	ldr	r3, [pc, #404]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810271a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 810271e:	687b      	ldr	r3, [r7, #4]
 8102720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102724:	4961      	ldr	r1, [pc, #388]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102726:	4313      	orrs	r3, r2
 8102728:	658b      	str	r3, [r1, #88]	; 0x58
 810272a:	e001      	b.n	8102730 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810272c:	7dfb      	ldrb	r3, [r7, #23]
 810272e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102738:	2b00      	cmp	r3, #0
 810273a:	d04b      	beq.n	81027d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102742:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102746:	d02e      	beq.n	81027a6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8102748:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810274c:	d828      	bhi.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810274e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102752:	d02a      	beq.n	81027aa <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8102754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102758:	d822      	bhi.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810275a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810275e:	d026      	beq.n	81027ae <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8102760:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102764:	d81c      	bhi.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102766:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810276a:	d010      	beq.n	810278e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 810276c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102770:	d816      	bhi.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8102772:	2b00      	cmp	r3, #0
 8102774:	d01d      	beq.n	81027b2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8102776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810277a:	d111      	bne.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810277c:	687b      	ldr	r3, [r7, #4]
 810277e:	3304      	adds	r3, #4
 8102780:	2100      	movs	r1, #0
 8102782:	4618      	mov	r0, r3
 8102784:	f000 fc80 	bl	8103088 <RCCEx_PLL2_Config>
 8102788:	4603      	mov	r3, r0
 810278a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810278c:	e012      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810278e:	687b      	ldr	r3, [r7, #4]
 8102790:	3324      	adds	r3, #36	; 0x24
 8102792:	2102      	movs	r1, #2
 8102794:	4618      	mov	r0, r3
 8102796:	f000 fd29 	bl	81031ec <RCCEx_PLL3_Config>
 810279a:	4603      	mov	r3, r0
 810279c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 810279e:	e009      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81027a0:	2301      	movs	r3, #1
 81027a2:	75fb      	strb	r3, [r7, #23]
      break;
 81027a4:	e006      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81027a6:	bf00      	nop
 81027a8:	e004      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81027aa:	bf00      	nop
 81027ac:	e002      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81027ae:	bf00      	nop
 81027b0:	e000      	b.n	81027b4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81027b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81027b4:	7dfb      	ldrb	r3, [r7, #23]
 81027b6:	2b00      	cmp	r3, #0
 81027b8:	d10a      	bne.n	81027d0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81027ba:	4b3c      	ldr	r3, [pc, #240]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81027be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81027c2:	687b      	ldr	r3, [r7, #4]
 81027c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81027c8:	4938      	ldr	r1, [pc, #224]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81027ca:	4313      	orrs	r3, r2
 81027cc:	658b      	str	r3, [r1, #88]	; 0x58
 81027ce:	e001      	b.n	81027d4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027d0:	7dfb      	ldrb	r3, [r7, #23]
 81027d2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	681b      	ldr	r3, [r3, #0]
 81027d8:	f003 0308 	and.w	r3, r3, #8
 81027dc:	2b00      	cmp	r3, #0
 81027de:	d01a      	beq.n	8102816 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81027e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81027ea:	d10a      	bne.n	8102802 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	3324      	adds	r3, #36	; 0x24
 81027f0:	2102      	movs	r1, #2
 81027f2:	4618      	mov	r0, r3
 81027f4:	f000 fcfa 	bl	81031ec <RCCEx_PLL3_Config>
 81027f8:	4603      	mov	r3, r0
 81027fa:	2b00      	cmp	r3, #0
 81027fc:	d001      	beq.n	8102802 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 81027fe:	2301      	movs	r3, #1
 8102800:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102802:	4b2a      	ldr	r3, [pc, #168]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102806:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8102810:	4926      	ldr	r1, [pc, #152]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102812:	4313      	orrs	r3, r2
 8102814:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	681b      	ldr	r3, [r3, #0]
 810281a:	f003 0310 	and.w	r3, r3, #16
 810281e:	2b00      	cmp	r3, #0
 8102820:	d01a      	beq.n	8102858 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810282c:	d10a      	bne.n	8102844 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 810282e:	687b      	ldr	r3, [r7, #4]
 8102830:	3324      	adds	r3, #36	; 0x24
 8102832:	2102      	movs	r1, #2
 8102834:	4618      	mov	r0, r3
 8102836:	f000 fcd9 	bl	81031ec <RCCEx_PLL3_Config>
 810283a:	4603      	mov	r3, r0
 810283c:	2b00      	cmp	r3, #0
 810283e:	d001      	beq.n	8102844 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8102840:	2301      	movs	r3, #1
 8102842:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102844:	4b19      	ldr	r3, [pc, #100]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102852:	4916      	ldr	r1, [pc, #88]	; (81028ac <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8102854:	4313      	orrs	r3, r2
 8102856:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102858:	687b      	ldr	r3, [r7, #4]
 810285a:	681b      	ldr	r3, [r3, #0]
 810285c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8102860:	2b00      	cmp	r3, #0
 8102862:	d036      	beq.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810286a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810286e:	d01f      	beq.n	81028b0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8102870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102874:	d817      	bhi.n	81028a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8102876:	2b00      	cmp	r3, #0
 8102878:	d003      	beq.n	8102882 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 810287a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810287e:	d009      	beq.n	8102894 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8102880:	e011      	b.n	81028a6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8102882:	687b      	ldr	r3, [r7, #4]
 8102884:	3304      	adds	r3, #4
 8102886:	2100      	movs	r1, #0
 8102888:	4618      	mov	r0, r3
 810288a:	f000 fbfd 	bl	8103088 <RCCEx_PLL2_Config>
 810288e:	4603      	mov	r3, r0
 8102890:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8102892:	e00e      	b.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8102894:	687b      	ldr	r3, [r7, #4]
 8102896:	3324      	adds	r3, #36	; 0x24
 8102898:	2102      	movs	r1, #2
 810289a:	4618      	mov	r0, r3
 810289c:	f000 fca6 	bl	81031ec <RCCEx_PLL3_Config>
 81028a0:	4603      	mov	r3, r0
 81028a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81028a4:	e005      	b.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81028a6:	2301      	movs	r3, #1
 81028a8:	75fb      	strb	r3, [r7, #23]
      break;
 81028aa:	e002      	b.n	81028b2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81028ac:	58024400 	.word	0x58024400
      break;
 81028b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81028b2:	7dfb      	ldrb	r3, [r7, #23]
 81028b4:	2b00      	cmp	r3, #0
 81028b6:	d10a      	bne.n	81028ce <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81028b8:	4b93      	ldr	r3, [pc, #588]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81028bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81028c0:	687b      	ldr	r3, [r7, #4]
 81028c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81028c6:	4990      	ldr	r1, [pc, #576]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81028c8:	4313      	orrs	r3, r2
 81028ca:	658b      	str	r3, [r1, #88]	; 0x58
 81028cc:	e001      	b.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028ce:	7dfb      	ldrb	r3, [r7, #23]
 81028d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81028d2:	687b      	ldr	r3, [r7, #4]
 81028d4:	681b      	ldr	r3, [r3, #0]
 81028d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 81028da:	2b00      	cmp	r3, #0
 81028dc:	d033      	beq.n	8102946 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 81028de:	687b      	ldr	r3, [r7, #4]
 81028e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81028e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81028e8:	d01c      	beq.n	8102924 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 81028ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81028ee:	d816      	bhi.n	810291e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 81028f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81028f4:	d003      	beq.n	81028fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
 81028f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81028fa:	d007      	beq.n	810290c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 81028fc:	e00f      	b.n	810291e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81028fe:	4b82      	ldr	r3, [pc, #520]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102902:	4a81      	ldr	r2, [pc, #516]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102908:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810290a:	e00c      	b.n	8102926 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810290c:	687b      	ldr	r3, [r7, #4]
 810290e:	3324      	adds	r3, #36	; 0x24
 8102910:	2101      	movs	r1, #1
 8102912:	4618      	mov	r0, r3
 8102914:	f000 fc6a 	bl	81031ec <RCCEx_PLL3_Config>
 8102918:	4603      	mov	r3, r0
 810291a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 810291c:	e003      	b.n	8102926 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810291e:	2301      	movs	r3, #1
 8102920:	75fb      	strb	r3, [r7, #23]
      break;
 8102922:	e000      	b.n	8102926 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8102924:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102926:	7dfb      	ldrb	r3, [r7, #23]
 8102928:	2b00      	cmp	r3, #0
 810292a:	d10a      	bne.n	8102942 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810292c:	4b76      	ldr	r3, [pc, #472]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810292e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102930:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8102934:	687b      	ldr	r3, [r7, #4]
 8102936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810293a:	4973      	ldr	r1, [pc, #460]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810293c:	4313      	orrs	r3, r2
 810293e:	654b      	str	r3, [r1, #84]	; 0x54
 8102940:	e001      	b.n	8102946 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102942:	7dfb      	ldrb	r3, [r7, #23]
 8102944:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8102946:	687b      	ldr	r3, [r7, #4]
 8102948:	681b      	ldr	r3, [r3, #0]
 810294a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810294e:	2b00      	cmp	r3, #0
 8102950:	d029      	beq.n	81029a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8102952:	687b      	ldr	r3, [r7, #4]
 8102954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102956:	2b00      	cmp	r3, #0
 8102958:	d003      	beq.n	8102962 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810295a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810295e:	d007      	beq.n	8102970 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8102960:	e00f      	b.n	8102982 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102962:	4b69      	ldr	r3, [pc, #420]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102966:	4a68      	ldr	r2, [pc, #416]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810296c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 810296e:	e00b      	b.n	8102988 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8102970:	687b      	ldr	r3, [r7, #4]
 8102972:	3304      	adds	r3, #4
 8102974:	2102      	movs	r1, #2
 8102976:	4618      	mov	r0, r3
 8102978:	f000 fb86 	bl	8103088 <RCCEx_PLL2_Config>
 810297c:	4603      	mov	r3, r0
 810297e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8102980:	e002      	b.n	8102988 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8102982:	2301      	movs	r3, #1
 8102984:	75fb      	strb	r3, [r7, #23]
      break;
 8102986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102988:	7dfb      	ldrb	r3, [r7, #23]
 810298a:	2b00      	cmp	r3, #0
 810298c:	d109      	bne.n	81029a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 810298e:	4b5e      	ldr	r3, [pc, #376]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102992:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810299a:	495b      	ldr	r1, [pc, #364]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810299c:	4313      	orrs	r3, r2
 810299e:	64cb      	str	r3, [r1, #76]	; 0x4c
 81029a0:	e001      	b.n	81029a6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029a2:	7dfb      	ldrb	r3, [r7, #23]
 81029a4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81029a6:	687b      	ldr	r3, [r7, #4]
 81029a8:	681b      	ldr	r3, [r3, #0]
 81029aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81029ae:	2b00      	cmp	r3, #0
 81029b0:	d00a      	beq.n	81029c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81029b2:	687b      	ldr	r3, [r7, #4]
 81029b4:	3324      	adds	r3, #36	; 0x24
 81029b6:	2102      	movs	r1, #2
 81029b8:	4618      	mov	r0, r3
 81029ba:	f000 fc17 	bl	81031ec <RCCEx_PLL3_Config>
 81029be:	4603      	mov	r3, r0
 81029c0:	2b00      	cmp	r3, #0
 81029c2:	d001      	beq.n	81029c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81029c4:	2301      	movs	r3, #1
 81029c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81029d0:	2b00      	cmp	r3, #0
 81029d2:	d030      	beq.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 81029d4:	687b      	ldr	r3, [r7, #4]
 81029d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 81029d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81029dc:	d017      	beq.n	8102a0e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 81029de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81029e2:	d811      	bhi.n	8102a08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81029e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81029e8:	d013      	beq.n	8102a12 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 81029ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 81029ee:	d80b      	bhi.n	8102a08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 81029f0:	2b00      	cmp	r3, #0
 81029f2:	d010      	beq.n	8102a16 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 81029f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81029f8:	d106      	bne.n	8102a08 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81029fa:	4b43      	ldr	r3, [pc, #268]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81029fe:	4a42      	ldr	r2, [pc, #264]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102a04:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8102a06:	e007      	b.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8102a08:	2301      	movs	r3, #1
 8102a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8102a0c:	e004      	b.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102a0e:	bf00      	nop
 8102a10:	e002      	b.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102a12:	bf00      	nop
 8102a14:	e000      	b.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8102a16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8102a18:	7dfb      	ldrb	r3, [r7, #23]
 8102a1a:	2b00      	cmp	r3, #0
 8102a1c:	d109      	bne.n	8102a32 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102a1e:	4b3a      	ldr	r3, [pc, #232]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102a26:	687b      	ldr	r3, [r7, #4]
 8102a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102a2a:	4937      	ldr	r1, [pc, #220]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a2c:	4313      	orrs	r3, r2
 8102a2e:	654b      	str	r3, [r1, #84]	; 0x54
 8102a30:	e001      	b.n	8102a36 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a32:	7dfb      	ldrb	r3, [r7, #23]
 8102a34:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102a36:	687b      	ldr	r3, [r7, #4]
 8102a38:	681b      	ldr	r3, [r3, #0]
 8102a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102a3e:	2b00      	cmp	r3, #0
 8102a40:	d008      	beq.n	8102a54 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8102a42:	4b31      	ldr	r3, [pc, #196]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102a46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8102a4a:	687b      	ldr	r3, [r7, #4]
 8102a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102a4e:	492e      	ldr	r1, [pc, #184]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a50:	4313      	orrs	r3, r2
 8102a52:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8102a54:	687b      	ldr	r3, [r7, #4]
 8102a56:	681b      	ldr	r3, [r3, #0]
 8102a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8102a5c:	2b00      	cmp	r3, #0
 8102a5e:	d009      	beq.n	8102a74 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8102a60:	4b29      	ldr	r3, [pc, #164]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a62:	691b      	ldr	r3, [r3, #16]
 8102a64:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8102a68:	687b      	ldr	r3, [r7, #4]
 8102a6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102a6e:	4926      	ldr	r1, [pc, #152]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a70:	4313      	orrs	r3, r2
 8102a72:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8102a74:	687b      	ldr	r3, [r7, #4]
 8102a76:	681b      	ldr	r3, [r3, #0]
 8102a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102a7c:	2b00      	cmp	r3, #0
 8102a7e:	d008      	beq.n	8102a92 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102a80:	4b21      	ldr	r3, [pc, #132]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102a84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8102a88:	687b      	ldr	r3, [r7, #4]
 8102a8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102a8c:	491e      	ldr	r1, [pc, #120]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102a8e:	4313      	orrs	r3, r2
 8102a90:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102a92:	687b      	ldr	r3, [r7, #4]
 8102a94:	681b      	ldr	r3, [r3, #0]
 8102a96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8102a9a:	2b00      	cmp	r3, #0
 8102a9c:	d00d      	beq.n	8102aba <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102a9e:	4b1a      	ldr	r3, [pc, #104]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102aa0:	691b      	ldr	r3, [r3, #16]
 8102aa2:	4a19      	ldr	r2, [pc, #100]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102aa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8102aa8:	6113      	str	r3, [r2, #16]
 8102aaa:	4b17      	ldr	r3, [pc, #92]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102aac:	691a      	ldr	r2, [r3, #16]
 8102aae:	687b      	ldr	r3, [r7, #4]
 8102ab0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8102ab4:	4914      	ldr	r1, [pc, #80]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ab6:	4313      	orrs	r3, r2
 8102ab8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102aba:	687b      	ldr	r3, [r7, #4]
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	2b00      	cmp	r3, #0
 8102ac0:	da08      	bge.n	8102ad4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8102ac2:	4b11      	ldr	r3, [pc, #68]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102ac6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8102aca:	687b      	ldr	r3, [r7, #4]
 8102acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102ace:	490e      	ldr	r1, [pc, #56]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ad0:	4313      	orrs	r3, r2
 8102ad2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102ad4:	687b      	ldr	r3, [r7, #4]
 8102ad6:	681b      	ldr	r3, [r3, #0]
 8102ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102adc:	2b00      	cmp	r3, #0
 8102ade:	d009      	beq.n	8102af4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8102ae0:	4b09      	ldr	r3, [pc, #36]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102ae4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8102ae8:	687b      	ldr	r3, [r7, #4]
 8102aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8102aee:	4906      	ldr	r1, [pc, #24]	; (8102b08 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8102af0:	4313      	orrs	r3, r2
 8102af2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8102af4:	7dbb      	ldrb	r3, [r7, #22]
 8102af6:	2b00      	cmp	r3, #0
 8102af8:	d101      	bne.n	8102afe <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8102afa:	2300      	movs	r3, #0
 8102afc:	e000      	b.n	8102b00 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8102afe:	2301      	movs	r3, #1
}
 8102b00:	4618      	mov	r0, r3
 8102b02:	3718      	adds	r7, #24
 8102b04:	46bd      	mov	sp, r7
 8102b06:	bd80      	pop	{r7, pc}
 8102b08:	58024400 	.word	0x58024400

08102b0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102b0c:	b580      	push	{r7, lr}
 8102b0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102b10:	f7ff f85e 	bl	8101bd0 <HAL_RCC_GetHCLKFreq>
 8102b14:	4602      	mov	r2, r0
 8102b16:	4b06      	ldr	r3, [pc, #24]	; (8102b30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8102b18:	6a1b      	ldr	r3, [r3, #32]
 8102b1a:	091b      	lsrs	r3, r3, #4
 8102b1c:	f003 0307 	and.w	r3, r3, #7
 8102b20:	4904      	ldr	r1, [pc, #16]	; (8102b34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102b22:	5ccb      	ldrb	r3, [r1, r3]
 8102b24:	f003 031f 	and.w	r3, r3, #31
 8102b28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102b2c:	4618      	mov	r0, r3
 8102b2e:	bd80      	pop	{r7, pc}
 8102b30:	58024400 	.word	0x58024400
 8102b34:	08106768 	.word	0x08106768

08102b38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8102b38:	b480      	push	{r7}
 8102b3a:	b089      	sub	sp, #36	; 0x24
 8102b3c:	af00      	add	r7, sp, #0
 8102b3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102b40:	4ba1      	ldr	r3, [pc, #644]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b44:	f003 0303 	and.w	r3, r3, #3
 8102b48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8102b4a:	4b9f      	ldr	r3, [pc, #636]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102b4e:	0b1b      	lsrs	r3, r3, #12
 8102b50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102b54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8102b56:	4b9c      	ldr	r3, [pc, #624]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b5a:	091b      	lsrs	r3, r3, #4
 8102b5c:	f003 0301 	and.w	r3, r3, #1
 8102b60:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8102b62:	4b99      	ldr	r3, [pc, #612]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8102b66:	08db      	lsrs	r3, r3, #3
 8102b68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102b6c:	693a      	ldr	r2, [r7, #16]
 8102b6e:	fb02 f303 	mul.w	r3, r2, r3
 8102b72:	ee07 3a90 	vmov	s15, r3
 8102b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8102b7e:	697b      	ldr	r3, [r7, #20]
 8102b80:	2b00      	cmp	r3, #0
 8102b82:	f000 8111 	beq.w	8102da8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8102b86:	69bb      	ldr	r3, [r7, #24]
 8102b88:	2b02      	cmp	r3, #2
 8102b8a:	f000 8083 	beq.w	8102c94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8102b8e:	69bb      	ldr	r3, [r7, #24]
 8102b90:	2b02      	cmp	r3, #2
 8102b92:	f200 80a1 	bhi.w	8102cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8102b96:	69bb      	ldr	r3, [r7, #24]
 8102b98:	2b00      	cmp	r3, #0
 8102b9a:	d003      	beq.n	8102ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8102b9c:	69bb      	ldr	r3, [r7, #24]
 8102b9e:	2b01      	cmp	r3, #1
 8102ba0:	d056      	beq.n	8102c50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8102ba2:	e099      	b.n	8102cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102ba4:	4b88      	ldr	r3, [pc, #544]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	f003 0320 	and.w	r3, r3, #32
 8102bac:	2b00      	cmp	r3, #0
 8102bae:	d02d      	beq.n	8102c0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102bb0:	4b85      	ldr	r3, [pc, #532]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	08db      	lsrs	r3, r3, #3
 8102bb6:	f003 0303 	and.w	r3, r3, #3
 8102bba:	4a84      	ldr	r2, [pc, #528]	; (8102dcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8102bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8102bc0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102bc2:	68bb      	ldr	r3, [r7, #8]
 8102bc4:	ee07 3a90 	vmov	s15, r3
 8102bc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bcc:	697b      	ldr	r3, [r7, #20]
 8102bce:	ee07 3a90 	vmov	s15, r3
 8102bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102bda:	4b7b      	ldr	r3, [pc, #492]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102be2:	ee07 3a90 	vmov	s15, r3
 8102be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8102bee:	eddf 5a78 	vldr	s11, [pc, #480]	; 8102dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c06:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102c0a:	e087      	b.n	8102d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102c0c:	697b      	ldr	r3, [r7, #20]
 8102c0e:	ee07 3a90 	vmov	s15, r3
 8102c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c16:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8102dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8102c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c1e:	4b6a      	ldr	r3, [pc, #424]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c26:	ee07 3a90 	vmov	s15, r3
 8102c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c32:	eddf 5a67 	vldr	s11, [pc, #412]	; 8102dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102c4e:	e065      	b.n	8102d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102c50:	697b      	ldr	r3, [r7, #20]
 8102c52:	ee07 3a90 	vmov	s15, r3
 8102c56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c5a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8102dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102c62:	4b59      	ldr	r3, [pc, #356]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102c6a:	ee07 3a90 	vmov	s15, r3
 8102c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8102c76:	eddf 5a56 	vldr	s11, [pc, #344]	; 8102dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102c82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102c8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102c92:	e043      	b.n	8102d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102c94:	697b      	ldr	r3, [r7, #20]
 8102c96:	ee07 3a90 	vmov	s15, r3
 8102c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c9e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8102ddc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102ca6:	4b48      	ldr	r3, [pc, #288]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102cae:	ee07 3a90 	vmov	s15, r3
 8102cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102cba:	eddf 5a45 	vldr	s11, [pc, #276]	; 8102dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102cc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102cd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102cd6:	e021      	b.n	8102d1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8102cd8:	697b      	ldr	r3, [r7, #20]
 8102cda:	ee07 3a90 	vmov	s15, r3
 8102cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ce2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8102dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cea:	4b37      	ldr	r3, [pc, #220]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102cf2:	ee07 3a90 	vmov	s15, r3
 8102cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8102cfe:	eddf 5a34 	vldr	s11, [pc, #208]	; 8102dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102d1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8102d1c:	4b2a      	ldr	r3, [pc, #168]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102d20:	0a5b      	lsrs	r3, r3, #9
 8102d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102d26:	ee07 3a90 	vmov	s15, r3
 8102d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d42:	ee17 2a90 	vmov	r2, s15
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8102d4a:	4b1f      	ldr	r3, [pc, #124]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102d4e:	0c1b      	lsrs	r3, r3, #16
 8102d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102d54:	ee07 3a90 	vmov	s15, r3
 8102d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102d64:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d70:	ee17 2a90 	vmov	r2, s15
 8102d74:	687b      	ldr	r3, [r7, #4]
 8102d76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8102d78:	4b13      	ldr	r3, [pc, #76]	; (8102dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102d7c:	0e1b      	lsrs	r3, r3, #24
 8102d7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102d82:	ee07 3a90 	vmov	s15, r3
 8102d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102d8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102d92:	edd7 6a07 	vldr	s13, [r7, #28]
 8102d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102d9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102d9e:	ee17 2a90 	vmov	r2, s15
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102da6:	e008      	b.n	8102dba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	2200      	movs	r2, #0
 8102dac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8102dae:	687b      	ldr	r3, [r7, #4]
 8102db0:	2200      	movs	r2, #0
 8102db2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102db4:	687b      	ldr	r3, [r7, #4]
 8102db6:	2200      	movs	r2, #0
 8102db8:	609a      	str	r2, [r3, #8]
}
 8102dba:	bf00      	nop
 8102dbc:	3724      	adds	r7, #36	; 0x24
 8102dbe:	46bd      	mov	sp, r7
 8102dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dc4:	4770      	bx	lr
 8102dc6:	bf00      	nop
 8102dc8:	58024400 	.word	0x58024400
 8102dcc:	03d09000 	.word	0x03d09000
 8102dd0:	46000000 	.word	0x46000000
 8102dd4:	4c742400 	.word	0x4c742400
 8102dd8:	4a742400 	.word	0x4a742400
 8102ddc:	4af42400 	.word	0x4af42400

08102de0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8102de0:	b480      	push	{r7}
 8102de2:	b089      	sub	sp, #36	; 0x24
 8102de4:	af00      	add	r7, sp, #0
 8102de6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102de8:	4ba1      	ldr	r3, [pc, #644]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102dec:	f003 0303 	and.w	r3, r3, #3
 8102df0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8102df2:	4b9f      	ldr	r3, [pc, #636]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102df6:	0d1b      	lsrs	r3, r3, #20
 8102df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8102dfc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8102dfe:	4b9c      	ldr	r3, [pc, #624]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102e02:	0a1b      	lsrs	r3, r3, #8
 8102e04:	f003 0301 	and.w	r3, r3, #1
 8102e08:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8102e0a:	4b99      	ldr	r3, [pc, #612]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102e0e:	08db      	lsrs	r3, r3, #3
 8102e10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102e14:	693a      	ldr	r2, [r7, #16]
 8102e16:	fb02 f303 	mul.w	r3, r2, r3
 8102e1a:	ee07 3a90 	vmov	s15, r3
 8102e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8102e26:	697b      	ldr	r3, [r7, #20]
 8102e28:	2b00      	cmp	r3, #0
 8102e2a:	f000 8111 	beq.w	8103050 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8102e2e:	69bb      	ldr	r3, [r7, #24]
 8102e30:	2b02      	cmp	r3, #2
 8102e32:	f000 8083 	beq.w	8102f3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8102e36:	69bb      	ldr	r3, [r7, #24]
 8102e38:	2b02      	cmp	r3, #2
 8102e3a:	f200 80a1 	bhi.w	8102f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8102e3e:	69bb      	ldr	r3, [r7, #24]
 8102e40:	2b00      	cmp	r3, #0
 8102e42:	d003      	beq.n	8102e4c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8102e44:	69bb      	ldr	r3, [r7, #24]
 8102e46:	2b01      	cmp	r3, #1
 8102e48:	d056      	beq.n	8102ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8102e4a:	e099      	b.n	8102f80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102e4c:	4b88      	ldr	r3, [pc, #544]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e4e:	681b      	ldr	r3, [r3, #0]
 8102e50:	f003 0320 	and.w	r3, r3, #32
 8102e54:	2b00      	cmp	r3, #0
 8102e56:	d02d      	beq.n	8102eb4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8102e58:	4b85      	ldr	r3, [pc, #532]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e5a:	681b      	ldr	r3, [r3, #0]
 8102e5c:	08db      	lsrs	r3, r3, #3
 8102e5e:	f003 0303 	and.w	r3, r3, #3
 8102e62:	4a84      	ldr	r2, [pc, #528]	; (8103074 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102e64:	fa22 f303 	lsr.w	r3, r2, r3
 8102e68:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102e6a:	68bb      	ldr	r3, [r7, #8]
 8102e6c:	ee07 3a90 	vmov	s15, r3
 8102e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e74:	697b      	ldr	r3, [r7, #20]
 8102e76:	ee07 3a90 	vmov	s15, r3
 8102e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102e82:	4b7b      	ldr	r3, [pc, #492]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102e8a:	ee07 3a90 	vmov	s15, r3
 8102e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102e92:	ed97 6a03 	vldr	s12, [r7, #12]
 8102e96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102eae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8102eb2:	e087      	b.n	8102fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102eb4:	697b      	ldr	r3, [r7, #20]
 8102eb6:	ee07 3a90 	vmov	s15, r3
 8102eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102ebe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810307c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102ec6:	4b6a      	ldr	r3, [pc, #424]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102ece:	ee07 3a90 	vmov	s15, r3
 8102ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ed6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102eda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ef2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102ef6:	e065      	b.n	8102fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102ef8:	697b      	ldr	r3, [r7, #20]
 8102efa:	ee07 3a90 	vmov	s15, r3
 8102efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f0a:	4b59      	ldr	r3, [pc, #356]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f12:	ee07 3a90 	vmov	s15, r3
 8102f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8102f1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102f36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102f3a:	e043      	b.n	8102fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102f3c:	697b      	ldr	r3, [r7, #20]
 8102f3e:	ee07 3a90 	vmov	s15, r3
 8102f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103084 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8102f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f4e:	4b48      	ldr	r3, [pc, #288]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f56:	ee07 3a90 	vmov	s15, r3
 8102f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102f5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102f62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102f7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102f7e:	e021      	b.n	8102fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8102f80:	697b      	ldr	r3, [r7, #20]
 8102f82:	ee07 3a90 	vmov	s15, r3
 8102f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102f8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103080 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102f92:	4b37      	ldr	r3, [pc, #220]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102f9a:	ee07 3a90 	vmov	s15, r3
 8102f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102fa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8102fa6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103078 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102fbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8102fc2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8102fc4:	4b2a      	ldr	r3, [pc, #168]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102fc8:	0a5b      	lsrs	r3, r3, #9
 8102fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102fce:	ee07 3a90 	vmov	s15, r3
 8102fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102fd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8102fda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102fde:	edd7 6a07 	vldr	s13, [r7, #28]
 8102fe2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102fe6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102fea:	ee17 2a90 	vmov	r2, s15
 8102fee:	687b      	ldr	r3, [r7, #4]
 8102ff0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8102ff2:	4b1f      	ldr	r3, [pc, #124]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102ff6:	0c1b      	lsrs	r3, r3, #16
 8102ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102ffc:	ee07 3a90 	vmov	s15, r3
 8103000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103008:	ee37 7a87 	vadd.f32	s14, s15, s14
 810300c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103014:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103018:	ee17 2a90 	vmov	r2, s15
 810301c:	687b      	ldr	r3, [r7, #4]
 810301e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8103020:	4b13      	ldr	r3, [pc, #76]	; (8103070 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103024:	0e1b      	lsrs	r3, r3, #24
 8103026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810302a:	ee07 3a90 	vmov	s15, r3
 810302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103036:	ee37 7a87 	vadd.f32	s14, s15, s14
 810303a:	edd7 6a07 	vldr	s13, [r7, #28]
 810303e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103042:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103046:	ee17 2a90 	vmov	r2, s15
 810304a:	687b      	ldr	r3, [r7, #4]
 810304c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810304e:	e008      	b.n	8103062 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	2200      	movs	r2, #0
 8103054:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103056:	687b      	ldr	r3, [r7, #4]
 8103058:	2200      	movs	r2, #0
 810305a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 810305c:	687b      	ldr	r3, [r7, #4]
 810305e:	2200      	movs	r2, #0
 8103060:	609a      	str	r2, [r3, #8]
}
 8103062:	bf00      	nop
 8103064:	3724      	adds	r7, #36	; 0x24
 8103066:	46bd      	mov	sp, r7
 8103068:	f85d 7b04 	ldr.w	r7, [sp], #4
 810306c:	4770      	bx	lr
 810306e:	bf00      	nop
 8103070:	58024400 	.word	0x58024400
 8103074:	03d09000 	.word	0x03d09000
 8103078:	46000000 	.word	0x46000000
 810307c:	4c742400 	.word	0x4c742400
 8103080:	4a742400 	.word	0x4a742400
 8103084:	4af42400 	.word	0x4af42400

08103088 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103088:	b580      	push	{r7, lr}
 810308a:	b084      	sub	sp, #16
 810308c:	af00      	add	r7, sp, #0
 810308e:	6078      	str	r0, [r7, #4]
 8103090:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103092:	2300      	movs	r3, #0
 8103094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103096:	4b54      	ldr	r3, [pc, #336]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810309a:	f003 0303 	and.w	r3, r3, #3
 810309e:	2b03      	cmp	r3, #3
 81030a0:	d101      	bne.n	81030a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81030a2:	2301      	movs	r3, #1
 81030a4:	e09b      	b.n	81031de <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81030a6:	4b50      	ldr	r3, [pc, #320]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81030a8:	681b      	ldr	r3, [r3, #0]
 81030aa:	4a4f      	ldr	r2, [pc, #316]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81030ac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81030b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81030b2:	f7fe f887 	bl	81011c4 <HAL_GetTick>
 81030b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81030b8:	e008      	b.n	81030cc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81030ba:	f7fe f883 	bl	81011c4 <HAL_GetTick>
 81030be:	4602      	mov	r2, r0
 81030c0:	68bb      	ldr	r3, [r7, #8]
 81030c2:	1ad3      	subs	r3, r2, r3
 81030c4:	2b02      	cmp	r3, #2
 81030c6:	d901      	bls.n	81030cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81030c8:	2303      	movs	r3, #3
 81030ca:	e088      	b.n	81031de <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81030cc:	4b46      	ldr	r3, [pc, #280]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81030ce:	681b      	ldr	r3, [r3, #0]
 81030d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81030d4:	2b00      	cmp	r3, #0
 81030d6:	d1f0      	bne.n	81030ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81030d8:	4b43      	ldr	r3, [pc, #268]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	681b      	ldr	r3, [r3, #0]
 81030e4:	031b      	lsls	r3, r3, #12
 81030e6:	4940      	ldr	r1, [pc, #256]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81030e8:	4313      	orrs	r3, r2
 81030ea:	628b      	str	r3, [r1, #40]	; 0x28
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	685b      	ldr	r3, [r3, #4]
 81030f0:	3b01      	subs	r3, #1
 81030f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	689b      	ldr	r3, [r3, #8]
 81030fa:	3b01      	subs	r3, #1
 81030fc:	025b      	lsls	r3, r3, #9
 81030fe:	b29b      	uxth	r3, r3
 8103100:	431a      	orrs	r2, r3
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	68db      	ldr	r3, [r3, #12]
 8103106:	3b01      	subs	r3, #1
 8103108:	041b      	lsls	r3, r3, #16
 810310a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810310e:	431a      	orrs	r2, r3
 8103110:	687b      	ldr	r3, [r7, #4]
 8103112:	691b      	ldr	r3, [r3, #16]
 8103114:	3b01      	subs	r3, #1
 8103116:	061b      	lsls	r3, r3, #24
 8103118:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810311c:	4932      	ldr	r1, [pc, #200]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 810311e:	4313      	orrs	r3, r2
 8103120:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103122:	4b31      	ldr	r3, [pc, #196]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103126:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 810312a:	687b      	ldr	r3, [r7, #4]
 810312c:	695b      	ldr	r3, [r3, #20]
 810312e:	492e      	ldr	r1, [pc, #184]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103130:	4313      	orrs	r3, r2
 8103132:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103134:	4b2c      	ldr	r3, [pc, #176]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103138:	f023 0220 	bic.w	r2, r3, #32
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	699b      	ldr	r3, [r3, #24]
 8103140:	4929      	ldr	r1, [pc, #164]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103142:	4313      	orrs	r3, r2
 8103144:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103146:	4b28      	ldr	r3, [pc, #160]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810314a:	4a27      	ldr	r2, [pc, #156]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 810314c:	f023 0310 	bic.w	r3, r3, #16
 8103150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103152:	4b25      	ldr	r3, [pc, #148]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103156:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810315a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810315e:	687a      	ldr	r2, [r7, #4]
 8103160:	69d2      	ldr	r2, [r2, #28]
 8103162:	00d2      	lsls	r2, r2, #3
 8103164:	4920      	ldr	r1, [pc, #128]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103166:	4313      	orrs	r3, r2
 8103168:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810316a:	4b1f      	ldr	r3, [pc, #124]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 810316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810316e:	4a1e      	ldr	r2, [pc, #120]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103170:	f043 0310 	orr.w	r3, r3, #16
 8103174:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8103176:	683b      	ldr	r3, [r7, #0]
 8103178:	2b00      	cmp	r3, #0
 810317a:	d106      	bne.n	810318a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810317c:	4b1a      	ldr	r3, [pc, #104]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 810317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103180:	4a19      	ldr	r2, [pc, #100]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103186:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103188:	e00f      	b.n	81031aa <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 810318a:	683b      	ldr	r3, [r7, #0]
 810318c:	2b01      	cmp	r3, #1
 810318e:	d106      	bne.n	810319e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103190:	4b15      	ldr	r3, [pc, #84]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103194:	4a14      	ldr	r2, [pc, #80]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 8103196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810319a:	62d3      	str	r3, [r2, #44]	; 0x2c
 810319c:	e005      	b.n	81031aa <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810319e:	4b12      	ldr	r3, [pc, #72]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81031a2:	4a11      	ldr	r2, [pc, #68]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81031a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81031a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81031aa:	4b0f      	ldr	r3, [pc, #60]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81031ac:	681b      	ldr	r3, [r3, #0]
 81031ae:	4a0e      	ldr	r2, [pc, #56]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81031b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81031b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81031b6:	f7fe f805 	bl	81011c4 <HAL_GetTick>
 81031ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81031bc:	e008      	b.n	81031d0 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81031be:	f7fe f801 	bl	81011c4 <HAL_GetTick>
 81031c2:	4602      	mov	r2, r0
 81031c4:	68bb      	ldr	r3, [r7, #8]
 81031c6:	1ad3      	subs	r3, r2, r3
 81031c8:	2b02      	cmp	r3, #2
 81031ca:	d901      	bls.n	81031d0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81031cc:	2303      	movs	r3, #3
 81031ce:	e006      	b.n	81031de <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81031d0:	4b05      	ldr	r3, [pc, #20]	; (81031e8 <RCCEx_PLL2_Config+0x160>)
 81031d2:	681b      	ldr	r3, [r3, #0]
 81031d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81031d8:	2b00      	cmp	r3, #0
 81031da:	d0f0      	beq.n	81031be <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 81031de:	4618      	mov	r0, r3
 81031e0:	3710      	adds	r7, #16
 81031e2:	46bd      	mov	sp, r7
 81031e4:	bd80      	pop	{r7, pc}
 81031e6:	bf00      	nop
 81031e8:	58024400 	.word	0x58024400

081031ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81031ec:	b580      	push	{r7, lr}
 81031ee:	b084      	sub	sp, #16
 81031f0:	af00      	add	r7, sp, #0
 81031f2:	6078      	str	r0, [r7, #4]
 81031f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81031f6:	2300      	movs	r3, #0
 81031f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81031fa:	4b54      	ldr	r3, [pc, #336]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81031fe:	f003 0303 	and.w	r3, r3, #3
 8103202:	2b03      	cmp	r3, #3
 8103204:	d101      	bne.n	810320a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103206:	2301      	movs	r3, #1
 8103208:	e09b      	b.n	8103342 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810320a:	4b50      	ldr	r3, [pc, #320]	; (810334c <RCCEx_PLL3_Config+0x160>)
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	4a4f      	ldr	r2, [pc, #316]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103216:	f7fd ffd5 	bl	81011c4 <HAL_GetTick>
 810321a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810321c:	e008      	b.n	8103230 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 810321e:	f7fd ffd1 	bl	81011c4 <HAL_GetTick>
 8103222:	4602      	mov	r2, r0
 8103224:	68bb      	ldr	r3, [r7, #8]
 8103226:	1ad3      	subs	r3, r2, r3
 8103228:	2b02      	cmp	r3, #2
 810322a:	d901      	bls.n	8103230 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810322c:	2303      	movs	r3, #3
 810322e:	e088      	b.n	8103342 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103230:	4b46      	ldr	r3, [pc, #280]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103232:	681b      	ldr	r3, [r3, #0]
 8103234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103238:	2b00      	cmp	r3, #0
 810323a:	d1f0      	bne.n	810321e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810323c:	4b43      	ldr	r3, [pc, #268]	; (810334c <RCCEx_PLL3_Config+0x160>)
 810323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103240:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	681b      	ldr	r3, [r3, #0]
 8103248:	051b      	lsls	r3, r3, #20
 810324a:	4940      	ldr	r1, [pc, #256]	; (810334c <RCCEx_PLL3_Config+0x160>)
 810324c:	4313      	orrs	r3, r2
 810324e:	628b      	str	r3, [r1, #40]	; 0x28
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	685b      	ldr	r3, [r3, #4]
 8103254:	3b01      	subs	r3, #1
 8103256:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	689b      	ldr	r3, [r3, #8]
 810325e:	3b01      	subs	r3, #1
 8103260:	025b      	lsls	r3, r3, #9
 8103262:	b29b      	uxth	r3, r3
 8103264:	431a      	orrs	r2, r3
 8103266:	687b      	ldr	r3, [r7, #4]
 8103268:	68db      	ldr	r3, [r3, #12]
 810326a:	3b01      	subs	r3, #1
 810326c:	041b      	lsls	r3, r3, #16
 810326e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103272:	431a      	orrs	r2, r3
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	691b      	ldr	r3, [r3, #16]
 8103278:	3b01      	subs	r3, #1
 810327a:	061b      	lsls	r3, r3, #24
 810327c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103280:	4932      	ldr	r1, [pc, #200]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103282:	4313      	orrs	r3, r2
 8103284:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103286:	4b31      	ldr	r3, [pc, #196]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810328a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	695b      	ldr	r3, [r3, #20]
 8103292:	492e      	ldr	r1, [pc, #184]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103294:	4313      	orrs	r3, r2
 8103296:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103298:	4b2c      	ldr	r3, [pc, #176]	; (810334c <RCCEx_PLL3_Config+0x160>)
 810329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810329c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81032a0:	687b      	ldr	r3, [r7, #4]
 81032a2:	699b      	ldr	r3, [r3, #24]
 81032a4:	4929      	ldr	r1, [pc, #164]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032a6:	4313      	orrs	r3, r2
 81032a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81032aa:	4b28      	ldr	r3, [pc, #160]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032ae:	4a27      	ldr	r2, [pc, #156]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81032b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81032b6:	4b25      	ldr	r3, [pc, #148]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81032ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81032be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81032c2:	687a      	ldr	r2, [r7, #4]
 81032c4:	69d2      	ldr	r2, [r2, #28]
 81032c6:	00d2      	lsls	r2, r2, #3
 81032c8:	4920      	ldr	r1, [pc, #128]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032ca:	4313      	orrs	r3, r2
 81032cc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81032ce:	4b1f      	ldr	r3, [pc, #124]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032d2:	4a1e      	ldr	r2, [pc, #120]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81032d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81032da:	683b      	ldr	r3, [r7, #0]
 81032dc:	2b00      	cmp	r3, #0
 81032de:	d106      	bne.n	81032ee <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81032e0:	4b1a      	ldr	r3, [pc, #104]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032e4:	4a19      	ldr	r2, [pc, #100]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81032ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 81032ec:	e00f      	b.n	810330e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81032ee:	683b      	ldr	r3, [r7, #0]
 81032f0:	2b01      	cmp	r3, #1
 81032f2:	d106      	bne.n	8103302 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81032f4:	4b15      	ldr	r3, [pc, #84]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81032f8:	4a14      	ldr	r2, [pc, #80]	; (810334c <RCCEx_PLL3_Config+0x160>)
 81032fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81032fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103300:	e005      	b.n	810330e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103302:	4b12      	ldr	r3, [pc, #72]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103306:	4a11      	ldr	r2, [pc, #68]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 810330c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810330e:	4b0f      	ldr	r3, [pc, #60]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	4a0e      	ldr	r2, [pc, #56]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810331a:	f7fd ff53 	bl	81011c4 <HAL_GetTick>
 810331e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103320:	e008      	b.n	8103334 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8103322:	f7fd ff4f 	bl	81011c4 <HAL_GetTick>
 8103326:	4602      	mov	r2, r0
 8103328:	68bb      	ldr	r3, [r7, #8]
 810332a:	1ad3      	subs	r3, r2, r3
 810332c:	2b02      	cmp	r3, #2
 810332e:	d901      	bls.n	8103334 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103330:	2303      	movs	r3, #3
 8103332:	e006      	b.n	8103342 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103334:	4b05      	ldr	r3, [pc, #20]	; (810334c <RCCEx_PLL3_Config+0x160>)
 8103336:	681b      	ldr	r3, [r3, #0]
 8103338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 810333c:	2b00      	cmp	r3, #0
 810333e:	d0f0      	beq.n	8103322 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103340:	7bfb      	ldrb	r3, [r7, #15]
}
 8103342:	4618      	mov	r0, r3
 8103344:	3710      	adds	r7, #16
 8103346:	46bd      	mov	sp, r7
 8103348:	bd80      	pop	{r7, pc}
 810334a:	bf00      	nop
 810334c:	58024400 	.word	0x58024400

08103350 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8103350:	b580      	push	{r7, lr}
 8103352:	b084      	sub	sp, #16
 8103354:	af00      	add	r7, sp, #0
 8103356:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	2b00      	cmp	r3, #0
 810335c:	d101      	bne.n	8103362 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810335e:	2301      	movs	r3, #1
 8103360:	e0f1      	b.n	8103546 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8103362:	687b      	ldr	r3, [r7, #4]
 8103364:	2200      	movs	r2, #0
 8103366:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8103368:	687b      	ldr	r3, [r7, #4]
 810336a:	681b      	ldr	r3, [r3, #0]
 810336c:	4a78      	ldr	r2, [pc, #480]	; (8103550 <HAL_SPI_Init+0x200>)
 810336e:	4293      	cmp	r3, r2
 8103370:	d00f      	beq.n	8103392 <HAL_SPI_Init+0x42>
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	4a77      	ldr	r2, [pc, #476]	; (8103554 <HAL_SPI_Init+0x204>)
 8103378:	4293      	cmp	r3, r2
 810337a:	d00a      	beq.n	8103392 <HAL_SPI_Init+0x42>
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	681b      	ldr	r3, [r3, #0]
 8103380:	4a75      	ldr	r2, [pc, #468]	; (8103558 <HAL_SPI_Init+0x208>)
 8103382:	4293      	cmp	r3, r2
 8103384:	d005      	beq.n	8103392 <HAL_SPI_Init+0x42>
 8103386:	687b      	ldr	r3, [r7, #4]
 8103388:	68db      	ldr	r3, [r3, #12]
 810338a:	2b0f      	cmp	r3, #15
 810338c:	d901      	bls.n	8103392 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810338e:	2301      	movs	r3, #1
 8103390:	e0d9      	b.n	8103546 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8103392:	6878      	ldr	r0, [r7, #4]
 8103394:	f001 f877 	bl	8104486 <SPI_GetPacketSize>
 8103398:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	4a6c      	ldr	r2, [pc, #432]	; (8103550 <HAL_SPI_Init+0x200>)
 81033a0:	4293      	cmp	r3, r2
 81033a2:	d00c      	beq.n	81033be <HAL_SPI_Init+0x6e>
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	4a6a      	ldr	r2, [pc, #424]	; (8103554 <HAL_SPI_Init+0x204>)
 81033aa:	4293      	cmp	r3, r2
 81033ac:	d007      	beq.n	81033be <HAL_SPI_Init+0x6e>
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	4a69      	ldr	r2, [pc, #420]	; (8103558 <HAL_SPI_Init+0x208>)
 81033b4:	4293      	cmp	r3, r2
 81033b6:	d002      	beq.n	81033be <HAL_SPI_Init+0x6e>
 81033b8:	68fb      	ldr	r3, [r7, #12]
 81033ba:	2b08      	cmp	r3, #8
 81033bc:	d811      	bhi.n	81033e2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81033be:	687b      	ldr	r3, [r7, #4]
 81033c0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81033c2:	4a63      	ldr	r2, [pc, #396]	; (8103550 <HAL_SPI_Init+0x200>)
 81033c4:	4293      	cmp	r3, r2
 81033c6:	d009      	beq.n	81033dc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	4a61      	ldr	r2, [pc, #388]	; (8103554 <HAL_SPI_Init+0x204>)
 81033ce:	4293      	cmp	r3, r2
 81033d0:	d004      	beq.n	81033dc <HAL_SPI_Init+0x8c>
 81033d2:	687b      	ldr	r3, [r7, #4]
 81033d4:	681b      	ldr	r3, [r3, #0]
 81033d6:	4a60      	ldr	r2, [pc, #384]	; (8103558 <HAL_SPI_Init+0x208>)
 81033d8:	4293      	cmp	r3, r2
 81033da:	d104      	bne.n	81033e6 <HAL_SPI_Init+0x96>
 81033dc:	68fb      	ldr	r3, [r7, #12]
 81033de:	2b10      	cmp	r3, #16
 81033e0:	d901      	bls.n	81033e6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81033e2:	2301      	movs	r3, #1
 81033e4:	e0af      	b.n	8103546 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81033e6:	687b      	ldr	r3, [r7, #4]
 81033e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81033ec:	b2db      	uxtb	r3, r3
 81033ee:	2b00      	cmp	r3, #0
 81033f0:	d106      	bne.n	8103400 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	2200      	movs	r2, #0
 81033f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 81033fa:	6878      	ldr	r0, [r7, #4]
 81033fc:	f7fd fc62 	bl	8100cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8103400:	687b      	ldr	r3, [r7, #4]
 8103402:	2202      	movs	r2, #2
 8103404:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8103408:	687b      	ldr	r3, [r7, #4]
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	681a      	ldr	r2, [r3, #0]
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	681b      	ldr	r3, [r3, #0]
 8103412:	f022 0201 	bic.w	r2, r2, #1
 8103416:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8103418:	687b      	ldr	r3, [r7, #4]
 810341a:	681b      	ldr	r3, [r3, #0]
 810341c:	689b      	ldr	r3, [r3, #8]
 810341e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8103422:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8103424:	687b      	ldr	r3, [r7, #4]
 8103426:	699b      	ldr	r3, [r3, #24]
 8103428:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810342c:	d119      	bne.n	8103462 <HAL_SPI_Init+0x112>
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	685b      	ldr	r3, [r3, #4]
 8103432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103436:	d103      	bne.n	8103440 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103438:	687b      	ldr	r3, [r7, #4]
 810343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810343c:	2b00      	cmp	r3, #0
 810343e:	d008      	beq.n	8103452 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8103440:	687b      	ldr	r3, [r7, #4]
 8103442:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8103444:	2b00      	cmp	r3, #0
 8103446:	d10c      	bne.n	8103462 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8103448:	687b      	ldr	r3, [r7, #4]
 810344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810344c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103450:	d107      	bne.n	8103462 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8103452:	687b      	ldr	r3, [r7, #4]
 8103454:	681b      	ldr	r3, [r3, #0]
 8103456:	681a      	ldr	r2, [r3, #0]
 8103458:	687b      	ldr	r3, [r7, #4]
 810345a:	681b      	ldr	r3, [r3, #0]
 810345c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8103460:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	69da      	ldr	r2, [r3, #28]
 8103466:	687b      	ldr	r3, [r7, #4]
 8103468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810346a:	431a      	orrs	r2, r3
 810346c:	68bb      	ldr	r3, [r7, #8]
 810346e:	431a      	orrs	r2, r3
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103474:	ea42 0103 	orr.w	r1, r2, r3
 8103478:	687b      	ldr	r3, [r7, #4]
 810347a:	68da      	ldr	r2, [r3, #12]
 810347c:	687b      	ldr	r3, [r7, #4]
 810347e:	681b      	ldr	r3, [r3, #0]
 8103480:	430a      	orrs	r2, r1
 8103482:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8103484:	687b      	ldr	r3, [r7, #4]
 8103486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8103488:	687b      	ldr	r3, [r7, #4]
 810348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810348c:	431a      	orrs	r2, r3
 810348e:	687b      	ldr	r3, [r7, #4]
 8103490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103492:	431a      	orrs	r2, r3
 8103494:	687b      	ldr	r3, [r7, #4]
 8103496:	699b      	ldr	r3, [r3, #24]
 8103498:	431a      	orrs	r2, r3
 810349a:	687b      	ldr	r3, [r7, #4]
 810349c:	691b      	ldr	r3, [r3, #16]
 810349e:	431a      	orrs	r2, r3
 81034a0:	687b      	ldr	r3, [r7, #4]
 81034a2:	695b      	ldr	r3, [r3, #20]
 81034a4:	431a      	orrs	r2, r3
 81034a6:	687b      	ldr	r3, [r7, #4]
 81034a8:	6a1b      	ldr	r3, [r3, #32]
 81034aa:	431a      	orrs	r2, r3
 81034ac:	687b      	ldr	r3, [r7, #4]
 81034ae:	685b      	ldr	r3, [r3, #4]
 81034b0:	431a      	orrs	r2, r3
 81034b2:	687b      	ldr	r3, [r7, #4]
 81034b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81034b6:	431a      	orrs	r2, r3
 81034b8:	687b      	ldr	r3, [r7, #4]
 81034ba:	689b      	ldr	r3, [r3, #8]
 81034bc:	431a      	orrs	r2, r3
 81034be:	687b      	ldr	r3, [r7, #4]
 81034c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81034c2:	ea42 0103 	orr.w	r1, r2, r3
 81034c6:	687b      	ldr	r3, [r7, #4]
 81034c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	681b      	ldr	r3, [r3, #0]
 81034ce:	430a      	orrs	r2, r1
 81034d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	685b      	ldr	r3, [r3, #4]
 81034d6:	2b00      	cmp	r3, #0
 81034d8:	d113      	bne.n	8103502 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	681b      	ldr	r3, [r3, #0]
 81034de:	689b      	ldr	r3, [r3, #8]
 81034e0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 81034e4:	687b      	ldr	r3, [r7, #4]
 81034e6:	681b      	ldr	r3, [r3, #0]
 81034e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81034ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	681b      	ldr	r3, [r3, #0]
 81034f2:	689b      	ldr	r3, [r3, #8]
 81034f4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	681b      	ldr	r3, [r3, #0]
 81034fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8103500:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8103502:	687b      	ldr	r3, [r7, #4]
 8103504:	681b      	ldr	r3, [r3, #0]
 8103506:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	f022 0201 	bic.w	r2, r2, #1
 8103510:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8103512:	687b      	ldr	r3, [r7, #4]
 8103514:	685b      	ldr	r3, [r3, #4]
 8103516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810351a:	2b00      	cmp	r3, #0
 810351c:	d00a      	beq.n	8103534 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	681b      	ldr	r3, [r3, #0]
 8103522:	68db      	ldr	r3, [r3, #12]
 8103524:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	681b      	ldr	r3, [r3, #0]
 8103530:	430a      	orrs	r2, r1
 8103532:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8103534:	687b      	ldr	r3, [r7, #4]
 8103536:	2200      	movs	r2, #0
 8103538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	2201      	movs	r2, #1
 8103540:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8103544:	2300      	movs	r3, #0
}
 8103546:	4618      	mov	r0, r3
 8103548:	3710      	adds	r7, #16
 810354a:	46bd      	mov	sp, r7
 810354c:	bd80      	pop	{r7, pc}
 810354e:	bf00      	nop
 8103550:	40013000 	.word	0x40013000
 8103554:	40003800 	.word	0x40003800
 8103558:	40003c00 	.word	0x40003c00

0810355c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810355c:	b580      	push	{r7, lr}
 810355e:	b08a      	sub	sp, #40	; 0x28
 8103560:	af02      	add	r7, sp, #8
 8103562:	60f8      	str	r0, [r7, #12]
 8103564:	60b9      	str	r1, [r7, #8]
 8103566:	603b      	str	r3, [r7, #0]
 8103568:	4613      	mov	r3, r2
 810356a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 810356c:	68fb      	ldr	r3, [r7, #12]
 810356e:	681b      	ldr	r3, [r3, #0]
 8103570:	3320      	adds	r3, #32
 8103572:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103574:	2300      	movs	r3, #0
 8103576:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103578:	68fb      	ldr	r3, [r7, #12]
 810357a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810357e:	2b01      	cmp	r3, #1
 8103580:	d101      	bne.n	8103586 <HAL_SPI_Transmit+0x2a>
 8103582:	2302      	movs	r3, #2
 8103584:	e1d4      	b.n	8103930 <HAL_SPI_Transmit+0x3d4>
 8103586:	68fb      	ldr	r3, [r7, #12]
 8103588:	2201      	movs	r2, #1
 810358a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810358e:	f7fd fe19 	bl	81011c4 <HAL_GetTick>
 8103592:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8103594:	68fb      	ldr	r3, [r7, #12]
 8103596:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810359a:	b2db      	uxtb	r3, r3
 810359c:	2b01      	cmp	r3, #1
 810359e:	d007      	beq.n	81035b0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 81035a0:	2302      	movs	r3, #2
 81035a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81035a4:	68fb      	ldr	r3, [r7, #12]
 81035a6:	2200      	movs	r2, #0
 81035a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81035ac:	7efb      	ldrb	r3, [r7, #27]
 81035ae:	e1bf      	b.n	8103930 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 81035b0:	68bb      	ldr	r3, [r7, #8]
 81035b2:	2b00      	cmp	r3, #0
 81035b4:	d002      	beq.n	81035bc <HAL_SPI_Transmit+0x60>
 81035b6:	88fb      	ldrh	r3, [r7, #6]
 81035b8:	2b00      	cmp	r3, #0
 81035ba:	d107      	bne.n	81035cc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 81035bc:	2301      	movs	r3, #1
 81035be:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81035c0:	68fb      	ldr	r3, [r7, #12]
 81035c2:	2200      	movs	r2, #0
 81035c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81035c8:	7efb      	ldrb	r3, [r7, #27]
 81035ca:	e1b1      	b.n	8103930 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 81035cc:	68fb      	ldr	r3, [r7, #12]
 81035ce:	2203      	movs	r2, #3
 81035d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81035d4:	68fb      	ldr	r3, [r7, #12]
 81035d6:	2200      	movs	r2, #0
 81035d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 81035dc:	68fb      	ldr	r3, [r7, #12]
 81035de:	68ba      	ldr	r2, [r7, #8]
 81035e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 81035e2:	68fb      	ldr	r3, [r7, #12]
 81035e4:	88fa      	ldrh	r2, [r7, #6]
 81035e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 81035ea:	68fb      	ldr	r3, [r7, #12]
 81035ec:	88fa      	ldrh	r2, [r7, #6]
 81035ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 81035f2:	68fb      	ldr	r3, [r7, #12]
 81035f4:	2200      	movs	r2, #0
 81035f6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 81035f8:	68fb      	ldr	r3, [r7, #12]
 81035fa:	2200      	movs	r2, #0
 81035fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8103600:	68fb      	ldr	r3, [r7, #12]
 8103602:	2200      	movs	r2, #0
 8103604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8103608:	68fb      	ldr	r3, [r7, #12]
 810360a:	2200      	movs	r2, #0
 810360c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 810360e:	68fb      	ldr	r3, [r7, #12]
 8103610:	2200      	movs	r2, #0
 8103612:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103614:	68fb      	ldr	r3, [r7, #12]
 8103616:	689b      	ldr	r3, [r3, #8]
 8103618:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810361c:	d107      	bne.n	810362e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 810361e:	68fb      	ldr	r3, [r7, #12]
 8103620:	681b      	ldr	r3, [r3, #0]
 8103622:	681a      	ldr	r2, [r3, #0]
 8103624:	68fb      	ldr	r3, [r7, #12]
 8103626:	681b      	ldr	r3, [r3, #0]
 8103628:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 810362c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810362e:	68fb      	ldr	r3, [r7, #12]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	685b      	ldr	r3, [r3, #4]
 8103634:	0c1b      	lsrs	r3, r3, #16
 8103636:	041b      	lsls	r3, r3, #16
 8103638:	88f9      	ldrh	r1, [r7, #6]
 810363a:	68fa      	ldr	r2, [r7, #12]
 810363c:	6812      	ldr	r2, [r2, #0]
 810363e:	430b      	orrs	r3, r1
 8103640:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103642:	68fb      	ldr	r3, [r7, #12]
 8103644:	681b      	ldr	r3, [r3, #0]
 8103646:	681a      	ldr	r2, [r3, #0]
 8103648:	68fb      	ldr	r3, [r7, #12]
 810364a:	681b      	ldr	r3, [r3, #0]
 810364c:	f042 0201 	orr.w	r2, r2, #1
 8103650:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103652:	68fb      	ldr	r3, [r7, #12]
 8103654:	685b      	ldr	r3, [r3, #4]
 8103656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810365a:	d107      	bne.n	810366c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810365c:	68fb      	ldr	r3, [r7, #12]
 810365e:	681b      	ldr	r3, [r3, #0]
 8103660:	681a      	ldr	r2, [r3, #0]
 8103662:	68fb      	ldr	r3, [r7, #12]
 8103664:	681b      	ldr	r3, [r3, #0]
 8103666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810366a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810366c:	68fb      	ldr	r3, [r7, #12]
 810366e:	68db      	ldr	r3, [r3, #12]
 8103670:	2b0f      	cmp	r3, #15
 8103672:	d947      	bls.n	8103704 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8103674:	e03f      	b.n	81036f6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103676:	68fb      	ldr	r3, [r7, #12]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	695b      	ldr	r3, [r3, #20]
 810367c:	f003 0302 	and.w	r3, r3, #2
 8103680:	2b02      	cmp	r3, #2
 8103682:	d114      	bne.n	81036ae <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103684:	68fb      	ldr	r3, [r7, #12]
 8103686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103688:	68fb      	ldr	r3, [r7, #12]
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	6812      	ldr	r2, [r2, #0]
 810368e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8103690:	68fb      	ldr	r3, [r7, #12]
 8103692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103694:	1d1a      	adds	r2, r3, #4
 8103696:	68fb      	ldr	r3, [r7, #12]
 8103698:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 810369a:	68fb      	ldr	r3, [r7, #12]
 810369c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81036a0:	b29b      	uxth	r3, r3
 81036a2:	3b01      	subs	r3, #1
 81036a4:	b29a      	uxth	r2, r3
 81036a6:	68fb      	ldr	r3, [r7, #12]
 81036a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81036ac:	e023      	b.n	81036f6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81036ae:	f7fd fd89 	bl	81011c4 <HAL_GetTick>
 81036b2:	4602      	mov	r2, r0
 81036b4:	697b      	ldr	r3, [r7, #20]
 81036b6:	1ad3      	subs	r3, r2, r3
 81036b8:	683a      	ldr	r2, [r7, #0]
 81036ba:	429a      	cmp	r2, r3
 81036bc:	d803      	bhi.n	81036c6 <HAL_SPI_Transmit+0x16a>
 81036be:	683b      	ldr	r3, [r7, #0]
 81036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81036c4:	d102      	bne.n	81036cc <HAL_SPI_Transmit+0x170>
 81036c6:	683b      	ldr	r3, [r7, #0]
 81036c8:	2b00      	cmp	r3, #0
 81036ca:	d114      	bne.n	81036f6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81036cc:	68f8      	ldr	r0, [r7, #12]
 81036ce:	f000 fe0c 	bl	81042ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81036d2:	68fb      	ldr	r3, [r7, #12]
 81036d4:	2200      	movs	r2, #0
 81036d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81036da:	68fb      	ldr	r3, [r7, #12]
 81036dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81036e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81036e4:	68fb      	ldr	r3, [r7, #12]
 81036e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81036ea:	68fb      	ldr	r3, [r7, #12]
 81036ec:	2201      	movs	r2, #1
 81036ee:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81036f2:	2303      	movs	r3, #3
 81036f4:	e11c      	b.n	8103930 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81036f6:	68fb      	ldr	r3, [r7, #12]
 81036f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81036fc:	b29b      	uxth	r3, r3
 81036fe:	2b00      	cmp	r3, #0
 8103700:	d1b9      	bne.n	8103676 <HAL_SPI_Transmit+0x11a>
 8103702:	e0ef      	b.n	81038e4 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103704:	68fb      	ldr	r3, [r7, #12]
 8103706:	68db      	ldr	r3, [r3, #12]
 8103708:	2b07      	cmp	r3, #7
 810370a:	f240 80e4 	bls.w	81038d6 <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810370e:	e05d      	b.n	81037cc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8103710:	68fb      	ldr	r3, [r7, #12]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	695b      	ldr	r3, [r3, #20]
 8103716:	f003 0302 	and.w	r3, r3, #2
 810371a:	2b02      	cmp	r3, #2
 810371c:	d132      	bne.n	8103784 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810371e:	68fb      	ldr	r3, [r7, #12]
 8103720:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103724:	b29b      	uxth	r3, r3
 8103726:	2b01      	cmp	r3, #1
 8103728:	d918      	bls.n	810375c <HAL_SPI_Transmit+0x200>
 810372a:	68fb      	ldr	r3, [r7, #12]
 810372c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810372e:	2b00      	cmp	r3, #0
 8103730:	d014      	beq.n	810375c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103732:	68fb      	ldr	r3, [r7, #12]
 8103734:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103736:	68fb      	ldr	r3, [r7, #12]
 8103738:	681b      	ldr	r3, [r3, #0]
 810373a:	6812      	ldr	r2, [r2, #0]
 810373c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810373e:	68fb      	ldr	r3, [r7, #12]
 8103740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103742:	1d1a      	adds	r2, r3, #4
 8103744:	68fb      	ldr	r3, [r7, #12]
 8103746:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103748:	68fb      	ldr	r3, [r7, #12]
 810374a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810374e:	b29b      	uxth	r3, r3
 8103750:	3b02      	subs	r3, #2
 8103752:	b29a      	uxth	r2, r3
 8103754:	68fb      	ldr	r3, [r7, #12]
 8103756:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810375a:	e037      	b.n	81037cc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810375c:	68fb      	ldr	r3, [r7, #12]
 810375e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103760:	881a      	ldrh	r2, [r3, #0]
 8103762:	69fb      	ldr	r3, [r7, #28]
 8103764:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103766:	68fb      	ldr	r3, [r7, #12]
 8103768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810376a:	1c9a      	adds	r2, r3, #2
 810376c:	68fb      	ldr	r3, [r7, #12]
 810376e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103770:	68fb      	ldr	r3, [r7, #12]
 8103772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103776:	b29b      	uxth	r3, r3
 8103778:	3b01      	subs	r3, #1
 810377a:	b29a      	uxth	r2, r3
 810377c:	68fb      	ldr	r3, [r7, #12]
 810377e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103782:	e023      	b.n	81037cc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103784:	f7fd fd1e 	bl	81011c4 <HAL_GetTick>
 8103788:	4602      	mov	r2, r0
 810378a:	697b      	ldr	r3, [r7, #20]
 810378c:	1ad3      	subs	r3, r2, r3
 810378e:	683a      	ldr	r2, [r7, #0]
 8103790:	429a      	cmp	r2, r3
 8103792:	d803      	bhi.n	810379c <HAL_SPI_Transmit+0x240>
 8103794:	683b      	ldr	r3, [r7, #0]
 8103796:	f1b3 3fff 	cmp.w	r3, #4294967295
 810379a:	d102      	bne.n	81037a2 <HAL_SPI_Transmit+0x246>
 810379c:	683b      	ldr	r3, [r7, #0]
 810379e:	2b00      	cmp	r3, #0
 81037a0:	d114      	bne.n	81037cc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81037a2:	68f8      	ldr	r0, [r7, #12]
 81037a4:	f000 fda1 	bl	81042ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81037a8:	68fb      	ldr	r3, [r7, #12]
 81037aa:	2200      	movs	r2, #0
 81037ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81037b0:	68fb      	ldr	r3, [r7, #12]
 81037b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81037b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81037ba:	68fb      	ldr	r3, [r7, #12]
 81037bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81037c0:	68fb      	ldr	r3, [r7, #12]
 81037c2:	2201      	movs	r2, #1
 81037c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81037c8:	2303      	movs	r3, #3
 81037ca:	e0b1      	b.n	8103930 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81037cc:	68fb      	ldr	r3, [r7, #12]
 81037ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81037d2:	b29b      	uxth	r3, r3
 81037d4:	2b00      	cmp	r3, #0
 81037d6:	d19b      	bne.n	8103710 <HAL_SPI_Transmit+0x1b4>
 81037d8:	e084      	b.n	81038e4 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81037da:	68fb      	ldr	r3, [r7, #12]
 81037dc:	681b      	ldr	r3, [r3, #0]
 81037de:	695b      	ldr	r3, [r3, #20]
 81037e0:	f003 0302 	and.w	r3, r3, #2
 81037e4:	2b02      	cmp	r3, #2
 81037e6:	d152      	bne.n	810388e <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81037e8:	68fb      	ldr	r3, [r7, #12]
 81037ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81037ee:	b29b      	uxth	r3, r3
 81037f0:	2b03      	cmp	r3, #3
 81037f2:	d918      	bls.n	8103826 <HAL_SPI_Transmit+0x2ca>
 81037f4:	68fb      	ldr	r3, [r7, #12]
 81037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81037f8:	2b40      	cmp	r3, #64	; 0x40
 81037fa:	d914      	bls.n	8103826 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81037fc:	68fb      	ldr	r3, [r7, #12]
 81037fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103800:	68fb      	ldr	r3, [r7, #12]
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	6812      	ldr	r2, [r2, #0]
 8103806:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103808:	68fb      	ldr	r3, [r7, #12]
 810380a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810380c:	1d1a      	adds	r2, r3, #4
 810380e:	68fb      	ldr	r3, [r7, #12]
 8103810:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8103812:	68fb      	ldr	r3, [r7, #12]
 8103814:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103818:	b29b      	uxth	r3, r3
 810381a:	3b04      	subs	r3, #4
 810381c:	b29a      	uxth	r2, r3
 810381e:	68fb      	ldr	r3, [r7, #12]
 8103820:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103824:	e057      	b.n	81038d6 <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103826:	68fb      	ldr	r3, [r7, #12]
 8103828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810382c:	b29b      	uxth	r3, r3
 810382e:	2b01      	cmp	r3, #1
 8103830:	d917      	bls.n	8103862 <HAL_SPI_Transmit+0x306>
 8103832:	68fb      	ldr	r3, [r7, #12]
 8103834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103836:	2b00      	cmp	r3, #0
 8103838:	d013      	beq.n	8103862 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810383a:	68fb      	ldr	r3, [r7, #12]
 810383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810383e:	881a      	ldrh	r2, [r3, #0]
 8103840:	69fb      	ldr	r3, [r7, #28]
 8103842:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103844:	68fb      	ldr	r3, [r7, #12]
 8103846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103848:	1c9a      	adds	r2, r3, #2
 810384a:	68fb      	ldr	r3, [r7, #12]
 810384c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810384e:	68fb      	ldr	r3, [r7, #12]
 8103850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103854:	b29b      	uxth	r3, r3
 8103856:	3b02      	subs	r3, #2
 8103858:	b29a      	uxth	r2, r3
 810385a:	68fb      	ldr	r3, [r7, #12]
 810385c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8103860:	e039      	b.n	81038d6 <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8103862:	68fb      	ldr	r3, [r7, #12]
 8103864:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103866:	68fb      	ldr	r3, [r7, #12]
 8103868:	681b      	ldr	r3, [r3, #0]
 810386a:	3320      	adds	r3, #32
 810386c:	7812      	ldrb	r2, [r2, #0]
 810386e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8103870:	68fb      	ldr	r3, [r7, #12]
 8103872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103874:	1c5a      	adds	r2, r3, #1
 8103876:	68fb      	ldr	r3, [r7, #12]
 8103878:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810387a:	68fb      	ldr	r3, [r7, #12]
 810387c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103880:	b29b      	uxth	r3, r3
 8103882:	3b01      	subs	r3, #1
 8103884:	b29a      	uxth	r2, r3
 8103886:	68fb      	ldr	r3, [r7, #12]
 8103888:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810388c:	e023      	b.n	81038d6 <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810388e:	f7fd fc99 	bl	81011c4 <HAL_GetTick>
 8103892:	4602      	mov	r2, r0
 8103894:	697b      	ldr	r3, [r7, #20]
 8103896:	1ad3      	subs	r3, r2, r3
 8103898:	683a      	ldr	r2, [r7, #0]
 810389a:	429a      	cmp	r2, r3
 810389c:	d803      	bhi.n	81038a6 <HAL_SPI_Transmit+0x34a>
 810389e:	683b      	ldr	r3, [r7, #0]
 81038a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81038a4:	d102      	bne.n	81038ac <HAL_SPI_Transmit+0x350>
 81038a6:	683b      	ldr	r3, [r7, #0]
 81038a8:	2b00      	cmp	r3, #0
 81038aa:	d114      	bne.n	81038d6 <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81038ac:	68f8      	ldr	r0, [r7, #12]
 81038ae:	f000 fd1c 	bl	81042ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81038b2:	68fb      	ldr	r3, [r7, #12]
 81038b4:	2200      	movs	r2, #0
 81038b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81038ba:	68fb      	ldr	r3, [r7, #12]
 81038bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81038c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81038c4:	68fb      	ldr	r3, [r7, #12]
 81038c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81038ca:	68fb      	ldr	r3, [r7, #12]
 81038cc:	2201      	movs	r2, #1
 81038ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81038d2:	2303      	movs	r3, #3
 81038d4:	e02c      	b.n	8103930 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 81038d6:	68fb      	ldr	r3, [r7, #12]
 81038d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81038dc:	b29b      	uxth	r3, r3
 81038de:	2b00      	cmp	r3, #0
 81038e0:	f47f af7b 	bne.w	81037da <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81038e4:	683b      	ldr	r3, [r7, #0]
 81038e6:	9300      	str	r3, [sp, #0]
 81038e8:	697b      	ldr	r3, [r7, #20]
 81038ea:	2200      	movs	r2, #0
 81038ec:	2108      	movs	r1, #8
 81038ee:	68f8      	ldr	r0, [r7, #12]
 81038f0:	f000 fd9b 	bl	810442a <SPI_WaitOnFlagUntilTimeout>
 81038f4:	4603      	mov	r3, r0
 81038f6:	2b00      	cmp	r3, #0
 81038f8:	d007      	beq.n	810390a <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81038fa:	68fb      	ldr	r3, [r7, #12]
 81038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103900:	f043 0220 	orr.w	r2, r3, #32
 8103904:	68fb      	ldr	r3, [r7, #12]
 8103906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810390a:	68f8      	ldr	r0, [r7, #12]
 810390c:	f000 fced 	bl	81042ea <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8103910:	68fb      	ldr	r3, [r7, #12]
 8103912:	2200      	movs	r2, #0
 8103914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8103918:	68fb      	ldr	r3, [r7, #12]
 810391a:	2201      	movs	r2, #1
 810391c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8103920:	68fb      	ldr	r3, [r7, #12]
 8103922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103926:	2b00      	cmp	r3, #0
 8103928:	d001      	beq.n	810392e <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 810392a:	2301      	movs	r3, #1
 810392c:	e000      	b.n	8103930 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 810392e:	7efb      	ldrb	r3, [r7, #27]
}
 8103930:	4618      	mov	r0, r3
 8103932:	3720      	adds	r7, #32
 8103934:	46bd      	mov	sp, r7
 8103936:	bd80      	pop	{r7, pc}

08103938 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103938:	b580      	push	{r7, lr}
 810393a:	b08a      	sub	sp, #40	; 0x28
 810393c:	af02      	add	r7, sp, #8
 810393e:	60f8      	str	r0, [r7, #12]
 8103940:	60b9      	str	r1, [r7, #8]
 8103942:	603b      	str	r3, [r7, #0]
 8103944:	4613      	mov	r3, r2
 8103946:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103948:	2300      	movs	r3, #0
 810394a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810394c:	68fb      	ldr	r3, [r7, #12]
 810394e:	681b      	ldr	r3, [r3, #0]
 8103950:	3330      	adds	r3, #48	; 0x30
 8103952:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8103954:	68fb      	ldr	r3, [r7, #12]
 8103956:	685b      	ldr	r3, [r3, #4]
 8103958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810395c:	d112      	bne.n	8103984 <HAL_SPI_Receive+0x4c>
 810395e:	68fb      	ldr	r3, [r7, #12]
 8103960:	689b      	ldr	r3, [r3, #8]
 8103962:	2b00      	cmp	r3, #0
 8103964:	d10e      	bne.n	8103984 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8103966:	68fb      	ldr	r3, [r7, #12]
 8103968:	2204      	movs	r2, #4
 810396a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 810396e:	88fa      	ldrh	r2, [r7, #6]
 8103970:	683b      	ldr	r3, [r7, #0]
 8103972:	9300      	str	r3, [sp, #0]
 8103974:	4613      	mov	r3, r2
 8103976:	68ba      	ldr	r2, [r7, #8]
 8103978:	68b9      	ldr	r1, [r7, #8]
 810397a:	68f8      	ldr	r0, [r7, #12]
 810397c:	f000 f9cc 	bl	8103d18 <HAL_SPI_TransmitReceive>
 8103980:	4603      	mov	r3, r0
 8103982:	e1c5      	b.n	8103d10 <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103984:	68fb      	ldr	r3, [r7, #12]
 8103986:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810398a:	2b01      	cmp	r3, #1
 810398c:	d101      	bne.n	8103992 <HAL_SPI_Receive+0x5a>
 810398e:	2302      	movs	r3, #2
 8103990:	e1be      	b.n	8103d10 <HAL_SPI_Receive+0x3d8>
 8103992:	68fb      	ldr	r3, [r7, #12]
 8103994:	2201      	movs	r2, #1
 8103996:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810399a:	f7fd fc13 	bl	81011c4 <HAL_GetTick>
 810399e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81039a0:	68fb      	ldr	r3, [r7, #12]
 81039a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81039a6:	b2db      	uxtb	r3, r3
 81039a8:	2b01      	cmp	r3, #1
 81039aa:	d007      	beq.n	81039bc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 81039ac:	2302      	movs	r3, #2
 81039ae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81039b0:	68fb      	ldr	r3, [r7, #12]
 81039b2:	2200      	movs	r2, #0
 81039b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81039b8:	7ffb      	ldrb	r3, [r7, #31]
 81039ba:	e1a9      	b.n	8103d10 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 81039bc:	68bb      	ldr	r3, [r7, #8]
 81039be:	2b00      	cmp	r3, #0
 81039c0:	d002      	beq.n	81039c8 <HAL_SPI_Receive+0x90>
 81039c2:	88fb      	ldrh	r3, [r7, #6]
 81039c4:	2b00      	cmp	r3, #0
 81039c6:	d107      	bne.n	81039d8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 81039c8:	2301      	movs	r3, #1
 81039ca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81039cc:	68fb      	ldr	r3, [r7, #12]
 81039ce:	2200      	movs	r2, #0
 81039d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81039d4:	7ffb      	ldrb	r3, [r7, #31]
 81039d6:	e19b      	b.n	8103d10 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 81039d8:	68fb      	ldr	r3, [r7, #12]
 81039da:	2204      	movs	r2, #4
 81039dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 81039e0:	68fb      	ldr	r3, [r7, #12]
 81039e2:	2200      	movs	r2, #0
 81039e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 81039e8:	68fb      	ldr	r3, [r7, #12]
 81039ea:	68ba      	ldr	r2, [r7, #8]
 81039ec:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 81039ee:	68fb      	ldr	r3, [r7, #12]
 81039f0:	88fa      	ldrh	r2, [r7, #6]
 81039f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 81039f6:	68fb      	ldr	r3, [r7, #12]
 81039f8:	88fa      	ldrh	r2, [r7, #6]
 81039fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 81039fe:	68fb      	ldr	r3, [r7, #12]
 8103a00:	2200      	movs	r2, #0
 8103a02:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8103a04:	68fb      	ldr	r3, [r7, #12]
 8103a06:	2200      	movs	r2, #0
 8103a08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8103a0c:	68fb      	ldr	r3, [r7, #12]
 8103a0e:	2200      	movs	r2, #0
 8103a10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8103a14:	68fb      	ldr	r3, [r7, #12]
 8103a16:	2200      	movs	r2, #0
 8103a18:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8103a1a:	68fb      	ldr	r3, [r7, #12]
 8103a1c:	2200      	movs	r2, #0
 8103a1e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8103a20:	68fb      	ldr	r3, [r7, #12]
 8103a22:	689b      	ldr	r3, [r3, #8]
 8103a24:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8103a28:	d107      	bne.n	8103a3a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8103a2a:	68fb      	ldr	r3, [r7, #12]
 8103a2c:	681b      	ldr	r3, [r3, #0]
 8103a2e:	681a      	ldr	r2, [r3, #0]
 8103a30:	68fb      	ldr	r3, [r7, #12]
 8103a32:	681b      	ldr	r3, [r3, #0]
 8103a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8103a38:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103a3a:	68fb      	ldr	r3, [r7, #12]
 8103a3c:	681b      	ldr	r3, [r3, #0]
 8103a3e:	685b      	ldr	r3, [r3, #4]
 8103a40:	0c1b      	lsrs	r3, r3, #16
 8103a42:	041b      	lsls	r3, r3, #16
 8103a44:	88f9      	ldrh	r1, [r7, #6]
 8103a46:	68fa      	ldr	r2, [r7, #12]
 8103a48:	6812      	ldr	r2, [r2, #0]
 8103a4a:	430b      	orrs	r3, r1
 8103a4c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8103a4e:	68fb      	ldr	r3, [r7, #12]
 8103a50:	681b      	ldr	r3, [r3, #0]
 8103a52:	681a      	ldr	r2, [r3, #0]
 8103a54:	68fb      	ldr	r3, [r7, #12]
 8103a56:	681b      	ldr	r3, [r3, #0]
 8103a58:	f042 0201 	orr.w	r2, r2, #1
 8103a5c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103a5e:	68fb      	ldr	r3, [r7, #12]
 8103a60:	685b      	ldr	r3, [r3, #4]
 8103a62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103a66:	d107      	bne.n	8103a78 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103a68:	68fb      	ldr	r3, [r7, #12]
 8103a6a:	681b      	ldr	r3, [r3, #0]
 8103a6c:	681a      	ldr	r2, [r3, #0]
 8103a6e:	68fb      	ldr	r3, [r7, #12]
 8103a70:	681b      	ldr	r3, [r3, #0]
 8103a72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103a76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103a78:	68fb      	ldr	r3, [r7, #12]
 8103a7a:	68db      	ldr	r3, [r3, #12]
 8103a7c:	2b0f      	cmp	r3, #15
 8103a7e:	d948      	bls.n	8103b12 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8103a80:	e040      	b.n	8103b04 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8103a82:	68fb      	ldr	r3, [r7, #12]
 8103a84:	681b      	ldr	r3, [r3, #0]
 8103a86:	695a      	ldr	r2, [r3, #20]
 8103a88:	f248 0308 	movw	r3, #32776	; 0x8008
 8103a8c:	4013      	ands	r3, r2
 8103a8e:	2b00      	cmp	r3, #0
 8103a90:	d014      	beq.n	8103abc <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103a92:	68fb      	ldr	r3, [r7, #12]
 8103a94:	681a      	ldr	r2, [r3, #0]
 8103a96:	68fb      	ldr	r3, [r7, #12]
 8103a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8103a9c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8103a9e:	68fb      	ldr	r3, [r7, #12]
 8103aa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103aa2:	1d1a      	adds	r2, r3, #4
 8103aa4:	68fb      	ldr	r3, [r7, #12]
 8103aa6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8103aa8:	68fb      	ldr	r3, [r7, #12]
 8103aaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103aae:	b29b      	uxth	r3, r3
 8103ab0:	3b01      	subs	r3, #1
 8103ab2:	b29a      	uxth	r2, r3
 8103ab4:	68fb      	ldr	r3, [r7, #12]
 8103ab6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8103aba:	e023      	b.n	8103b04 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103abc:	f7fd fb82 	bl	81011c4 <HAL_GetTick>
 8103ac0:	4602      	mov	r2, r0
 8103ac2:	697b      	ldr	r3, [r7, #20]
 8103ac4:	1ad3      	subs	r3, r2, r3
 8103ac6:	683a      	ldr	r2, [r7, #0]
 8103ac8:	429a      	cmp	r2, r3
 8103aca:	d803      	bhi.n	8103ad4 <HAL_SPI_Receive+0x19c>
 8103acc:	683b      	ldr	r3, [r7, #0]
 8103ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103ad2:	d102      	bne.n	8103ada <HAL_SPI_Receive+0x1a2>
 8103ad4:	683b      	ldr	r3, [r7, #0]
 8103ad6:	2b00      	cmp	r3, #0
 8103ad8:	d114      	bne.n	8103b04 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103ada:	68f8      	ldr	r0, [r7, #12]
 8103adc:	f000 fc05 	bl	81042ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103ae0:	68fb      	ldr	r3, [r7, #12]
 8103ae2:	2200      	movs	r2, #0
 8103ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103ae8:	68fb      	ldr	r3, [r7, #12]
 8103aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103af2:	68fb      	ldr	r3, [r7, #12]
 8103af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103af8:	68fb      	ldr	r3, [r7, #12]
 8103afa:	2201      	movs	r2, #1
 8103afc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103b00:	2303      	movs	r3, #3
 8103b02:	e105      	b.n	8103d10 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8103b04:	68fb      	ldr	r3, [r7, #12]
 8103b06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103b0a:	b29b      	uxth	r3, r3
 8103b0c:	2b00      	cmp	r3, #0
 8103b0e:	d1b8      	bne.n	8103a82 <HAL_SPI_Receive+0x14a>
 8103b10:	e0eb      	b.n	8103cea <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103b12:	68fb      	ldr	r3, [r7, #12]
 8103b14:	68db      	ldr	r3, [r3, #12]
 8103b16:	2b07      	cmp	r3, #7
 8103b18:	f240 80e0 	bls.w	8103cdc <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8103b1c:	e05b      	b.n	8103bd6 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8103b1e:	68fb      	ldr	r3, [r7, #12]
 8103b20:	681b      	ldr	r3, [r3, #0]
 8103b22:	695b      	ldr	r3, [r3, #20]
 8103b24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8103b28:	2b00      	cmp	r3, #0
 8103b2a:	d030      	beq.n	8103b8e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8103b2c:	68fb      	ldr	r3, [r7, #12]
 8103b2e:	681b      	ldr	r3, [r3, #0]
 8103b30:	695b      	ldr	r3, [r3, #20]
 8103b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103b36:	2b00      	cmp	r3, #0
 8103b38:	d014      	beq.n	8103b64 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103b3a:	68fb      	ldr	r3, [r7, #12]
 8103b3c:	681a      	ldr	r2, [r3, #0]
 8103b3e:	68fb      	ldr	r3, [r7, #12]
 8103b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103b42:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8103b44:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8103b46:	68fb      	ldr	r3, [r7, #12]
 8103b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103b4a:	1d1a      	adds	r2, r3, #4
 8103b4c:	68fb      	ldr	r3, [r7, #12]
 8103b4e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8103b50:	68fb      	ldr	r3, [r7, #12]
 8103b52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103b56:	b29b      	uxth	r3, r3
 8103b58:	3b02      	subs	r3, #2
 8103b5a:	b29a      	uxth	r2, r3
 8103b5c:	68fb      	ldr	r3, [r7, #12]
 8103b5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8103b62:	e038      	b.n	8103bd6 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8103b64:	68fb      	ldr	r3, [r7, #12]
 8103b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103b68:	69ba      	ldr	r2, [r7, #24]
 8103b6a:	8812      	ldrh	r2, [r2, #0]
 8103b6c:	b292      	uxth	r2, r2
 8103b6e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8103b70:	68fb      	ldr	r3, [r7, #12]
 8103b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103b74:	1c9a      	adds	r2, r3, #2
 8103b76:	68fb      	ldr	r3, [r7, #12]
 8103b78:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8103b7a:	68fb      	ldr	r3, [r7, #12]
 8103b7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103b80:	b29b      	uxth	r3, r3
 8103b82:	3b01      	subs	r3, #1
 8103b84:	b29a      	uxth	r2, r3
 8103b86:	68fb      	ldr	r3, [r7, #12]
 8103b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8103b8c:	e023      	b.n	8103bd6 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103b8e:	f7fd fb19 	bl	81011c4 <HAL_GetTick>
 8103b92:	4602      	mov	r2, r0
 8103b94:	697b      	ldr	r3, [r7, #20]
 8103b96:	1ad3      	subs	r3, r2, r3
 8103b98:	683a      	ldr	r2, [r7, #0]
 8103b9a:	429a      	cmp	r2, r3
 8103b9c:	d803      	bhi.n	8103ba6 <HAL_SPI_Receive+0x26e>
 8103b9e:	683b      	ldr	r3, [r7, #0]
 8103ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103ba4:	d102      	bne.n	8103bac <HAL_SPI_Receive+0x274>
 8103ba6:	683b      	ldr	r3, [r7, #0]
 8103ba8:	2b00      	cmp	r3, #0
 8103baa:	d114      	bne.n	8103bd6 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103bac:	68f8      	ldr	r0, [r7, #12]
 8103bae:	f000 fb9c 	bl	81042ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103bb2:	68fb      	ldr	r3, [r7, #12]
 8103bb4:	2200      	movs	r2, #0
 8103bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103bba:	68fb      	ldr	r3, [r7, #12]
 8103bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103bc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103bc4:	68fb      	ldr	r3, [r7, #12]
 8103bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103bca:	68fb      	ldr	r3, [r7, #12]
 8103bcc:	2201      	movs	r2, #1
 8103bce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103bd2:	2303      	movs	r3, #3
 8103bd4:	e09c      	b.n	8103d10 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8103bd6:	68fb      	ldr	r3, [r7, #12]
 8103bd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103bdc:	b29b      	uxth	r3, r3
 8103bde:	2b00      	cmp	r3, #0
 8103be0:	d19d      	bne.n	8103b1e <HAL_SPI_Receive+0x1e6>
 8103be2:	e082      	b.n	8103cea <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8103be4:	68fb      	ldr	r3, [r7, #12]
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	695b      	ldr	r3, [r3, #20]
 8103bea:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8103bee:	2b00      	cmp	r3, #0
 8103bf0:	d050      	beq.n	8103c94 <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8103bf2:	68fb      	ldr	r3, [r7, #12]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	695b      	ldr	r3, [r3, #20]
 8103bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103bfc:	2b00      	cmp	r3, #0
 8103bfe:	d014      	beq.n	8103c2a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103c00:	68fb      	ldr	r3, [r7, #12]
 8103c02:	681a      	ldr	r2, [r3, #0]
 8103c04:	68fb      	ldr	r3, [r7, #12]
 8103c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103c08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8103c0a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8103c0c:	68fb      	ldr	r3, [r7, #12]
 8103c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103c10:	1d1a      	adds	r2, r3, #4
 8103c12:	68fb      	ldr	r3, [r7, #12]
 8103c14:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8103c16:	68fb      	ldr	r3, [r7, #12]
 8103c18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103c1c:	b29b      	uxth	r3, r3
 8103c1e:	3b04      	subs	r3, #4
 8103c20:	b29a      	uxth	r2, r3
 8103c22:	68fb      	ldr	r3, [r7, #12]
 8103c24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8103c28:	e058      	b.n	8103cdc <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8103c2a:	68fb      	ldr	r3, [r7, #12]
 8103c2c:	681b      	ldr	r3, [r3, #0]
 8103c2e:	695b      	ldr	r3, [r3, #20]
 8103c30:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8103c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103c38:	d914      	bls.n	8103c64 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8103c3a:	68fb      	ldr	r3, [r7, #12]
 8103c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103c3e:	69ba      	ldr	r2, [r7, #24]
 8103c40:	8812      	ldrh	r2, [r2, #0]
 8103c42:	b292      	uxth	r2, r2
 8103c44:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8103c46:	68fb      	ldr	r3, [r7, #12]
 8103c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103c4a:	1c9a      	adds	r2, r3, #2
 8103c4c:	68fb      	ldr	r3, [r7, #12]
 8103c4e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8103c50:	68fb      	ldr	r3, [r7, #12]
 8103c52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103c56:	b29b      	uxth	r3, r3
 8103c58:	3b02      	subs	r3, #2
 8103c5a:	b29a      	uxth	r2, r3
 8103c5c:	68fb      	ldr	r3, [r7, #12]
 8103c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8103c62:	e03b      	b.n	8103cdc <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8103c64:	68fb      	ldr	r3, [r7, #12]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8103c6c:	68fb      	ldr	r3, [r7, #12]
 8103c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103c70:	7812      	ldrb	r2, [r2, #0]
 8103c72:	b2d2      	uxtb	r2, r2
 8103c74:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8103c76:	68fb      	ldr	r3, [r7, #12]
 8103c78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103c7a:	1c5a      	adds	r2, r3, #1
 8103c7c:	68fb      	ldr	r3, [r7, #12]
 8103c7e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8103c80:	68fb      	ldr	r3, [r7, #12]
 8103c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103c86:	b29b      	uxth	r3, r3
 8103c88:	3b01      	subs	r3, #1
 8103c8a:	b29a      	uxth	r2, r3
 8103c8c:	68fb      	ldr	r3, [r7, #12]
 8103c8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8103c92:	e023      	b.n	8103cdc <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103c94:	f7fd fa96 	bl	81011c4 <HAL_GetTick>
 8103c98:	4602      	mov	r2, r0
 8103c9a:	697b      	ldr	r3, [r7, #20]
 8103c9c:	1ad3      	subs	r3, r2, r3
 8103c9e:	683a      	ldr	r2, [r7, #0]
 8103ca0:	429a      	cmp	r2, r3
 8103ca2:	d803      	bhi.n	8103cac <HAL_SPI_Receive+0x374>
 8103ca4:	683b      	ldr	r3, [r7, #0]
 8103ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103caa:	d102      	bne.n	8103cb2 <HAL_SPI_Receive+0x37a>
 8103cac:	683b      	ldr	r3, [r7, #0]
 8103cae:	2b00      	cmp	r3, #0
 8103cb0:	d114      	bne.n	8103cdc <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8103cb2:	68f8      	ldr	r0, [r7, #12]
 8103cb4:	f000 fb19 	bl	81042ea <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8103cb8:	68fb      	ldr	r3, [r7, #12]
 8103cba:	2200      	movs	r2, #0
 8103cbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103cc0:	68fb      	ldr	r3, [r7, #12]
 8103cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103cca:	68fb      	ldr	r3, [r7, #12]
 8103ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8103cd0:	68fb      	ldr	r3, [r7, #12]
 8103cd2:	2201      	movs	r2, #1
 8103cd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8103cd8:	2303      	movs	r3, #3
 8103cda:	e019      	b.n	8103d10 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8103cdc:	68fb      	ldr	r3, [r7, #12]
 8103cde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103ce2:	b29b      	uxth	r3, r3
 8103ce4:	2b00      	cmp	r3, #0
 8103ce6:	f47f af7d 	bne.w	8103be4 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8103cea:	68f8      	ldr	r0, [r7, #12]
 8103cec:	f000 fafd 	bl	81042ea <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8103cf0:	68fb      	ldr	r3, [r7, #12]
 8103cf2:	2200      	movs	r2, #0
 8103cf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8103cf8:	68fb      	ldr	r3, [r7, #12]
 8103cfa:	2201      	movs	r2, #1
 8103cfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8103d00:	68fb      	ldr	r3, [r7, #12]
 8103d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103d06:	2b00      	cmp	r3, #0
 8103d08:	d001      	beq.n	8103d0e <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 8103d0a:	2301      	movs	r3, #1
 8103d0c:	e000      	b.n	8103d10 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 8103d0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8103d10:	4618      	mov	r0, r3
 8103d12:	3720      	adds	r7, #32
 8103d14:	46bd      	mov	sp, r7
 8103d16:	bd80      	pop	{r7, pc}

08103d18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8103d18:	b580      	push	{r7, lr}
 8103d1a:	b08e      	sub	sp, #56	; 0x38
 8103d1c:	af02      	add	r7, sp, #8
 8103d1e:	60f8      	str	r0, [r7, #12]
 8103d20:	60b9      	str	r1, [r7, #8]
 8103d22:	607a      	str	r2, [r7, #4]
 8103d24:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8103d26:	2300      	movs	r3, #0
 8103d28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8103d2c:	68fb      	ldr	r3, [r7, #12]
 8103d2e:	681b      	ldr	r3, [r3, #0]
 8103d30:	3320      	adds	r3, #32
 8103d32:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8103d34:	68fb      	ldr	r3, [r7, #12]
 8103d36:	681b      	ldr	r3, [r3, #0]
 8103d38:	3330      	adds	r3, #48	; 0x30
 8103d3a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8103d3c:	68fb      	ldr	r3, [r7, #12]
 8103d3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8103d42:	2b01      	cmp	r3, #1
 8103d44:	d101      	bne.n	8103d4a <HAL_SPI_TransmitReceive+0x32>
 8103d46:	2302      	movs	r3, #2
 8103d48:	e2cb      	b.n	81042e2 <HAL_SPI_TransmitReceive+0x5ca>
 8103d4a:	68fb      	ldr	r3, [r7, #12]
 8103d4c:	2201      	movs	r2, #1
 8103d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8103d52:	f7fd fa37 	bl	81011c4 <HAL_GetTick>
 8103d56:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8103d58:	887b      	ldrh	r3, [r7, #2]
 8103d5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8103d5c:	887b      	ldrh	r3, [r7, #2]
 8103d5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8103d60:	68fb      	ldr	r3, [r7, #12]
 8103d62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103d66:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8103d68:	68fb      	ldr	r3, [r7, #12]
 8103d6a:	685b      	ldr	r3, [r3, #4]
 8103d6c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8103d6e:	7efb      	ldrb	r3, [r7, #27]
 8103d70:	2b01      	cmp	r3, #1
 8103d72:	d014      	beq.n	8103d9e <HAL_SPI_TransmitReceive+0x86>
 8103d74:	697b      	ldr	r3, [r7, #20]
 8103d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103d7a:	d106      	bne.n	8103d8a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8103d7c:	68fb      	ldr	r3, [r7, #12]
 8103d7e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8103d80:	2b00      	cmp	r3, #0
 8103d82:	d102      	bne.n	8103d8a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8103d84:	7efb      	ldrb	r3, [r7, #27]
 8103d86:	2b04      	cmp	r3, #4
 8103d88:	d009      	beq.n	8103d9e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8103d8a:	2302      	movs	r3, #2
 8103d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8103d90:	68fb      	ldr	r3, [r7, #12]
 8103d92:	2200      	movs	r2, #0
 8103d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103d98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8103d9c:	e2a1      	b.n	81042e2 <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8103d9e:	68bb      	ldr	r3, [r7, #8]
 8103da0:	2b00      	cmp	r3, #0
 8103da2:	d005      	beq.n	8103db0 <HAL_SPI_TransmitReceive+0x98>
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	2b00      	cmp	r3, #0
 8103da8:	d002      	beq.n	8103db0 <HAL_SPI_TransmitReceive+0x98>
 8103daa:	887b      	ldrh	r3, [r7, #2]
 8103dac:	2b00      	cmp	r3, #0
 8103dae:	d109      	bne.n	8103dc4 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8103db0:	2301      	movs	r3, #1
 8103db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8103db6:	68fb      	ldr	r3, [r7, #12]
 8103db8:	2200      	movs	r2, #0
 8103dba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8103dbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8103dc2:	e28e      	b.n	81042e2 <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8103dc4:	68fb      	ldr	r3, [r7, #12]
 8103dc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8103dca:	b2db      	uxtb	r3, r3
 8103dcc:	2b04      	cmp	r3, #4
 8103dce:	d003      	beq.n	8103dd8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8103dd0:	68fb      	ldr	r3, [r7, #12]
 8103dd2:	2205      	movs	r2, #5
 8103dd4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8103dd8:	68fb      	ldr	r3, [r7, #12]
 8103dda:	2200      	movs	r2, #0
 8103ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8103de0:	68fb      	ldr	r3, [r7, #12]
 8103de2:	687a      	ldr	r2, [r7, #4]
 8103de4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8103de6:	68fb      	ldr	r3, [r7, #12]
 8103de8:	887a      	ldrh	r2, [r7, #2]
 8103dea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8103dee:	68fb      	ldr	r3, [r7, #12]
 8103df0:	887a      	ldrh	r2, [r7, #2]
 8103df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8103df6:	68fb      	ldr	r3, [r7, #12]
 8103df8:	68ba      	ldr	r2, [r7, #8]
 8103dfa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8103dfc:	68fb      	ldr	r3, [r7, #12]
 8103dfe:	887a      	ldrh	r2, [r7, #2]
 8103e00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8103e04:	68fb      	ldr	r3, [r7, #12]
 8103e06:	887a      	ldrh	r2, [r7, #2]
 8103e08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8103e0c:	68fb      	ldr	r3, [r7, #12]
 8103e0e:	2200      	movs	r2, #0
 8103e10:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8103e12:	68fb      	ldr	r3, [r7, #12]
 8103e14:	2200      	movs	r2, #0
 8103e16:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8103e18:	68fb      	ldr	r3, [r7, #12]
 8103e1a:	681b      	ldr	r3, [r3, #0]
 8103e1c:	685b      	ldr	r3, [r3, #4]
 8103e1e:	0c1b      	lsrs	r3, r3, #16
 8103e20:	041b      	lsls	r3, r3, #16
 8103e22:	8879      	ldrh	r1, [r7, #2]
 8103e24:	68fa      	ldr	r2, [r7, #12]
 8103e26:	6812      	ldr	r2, [r2, #0]
 8103e28:	430b      	orrs	r3, r1
 8103e2a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8103e2c:	68fb      	ldr	r3, [r7, #12]
 8103e2e:	681b      	ldr	r3, [r3, #0]
 8103e30:	681a      	ldr	r2, [r3, #0]
 8103e32:	68fb      	ldr	r3, [r7, #12]
 8103e34:	681b      	ldr	r3, [r3, #0]
 8103e36:	f042 0201 	orr.w	r2, r2, #1
 8103e3a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8103e3c:	68fb      	ldr	r3, [r7, #12]
 8103e3e:	685b      	ldr	r3, [r3, #4]
 8103e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103e44:	d107      	bne.n	8103e56 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8103e46:	68fb      	ldr	r3, [r7, #12]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	681a      	ldr	r2, [r3, #0]
 8103e4c:	68fb      	ldr	r3, [r7, #12]
 8103e4e:	681b      	ldr	r3, [r3, #0]
 8103e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8103e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8103e56:	68fb      	ldr	r3, [r7, #12]
 8103e58:	68db      	ldr	r3, [r3, #12]
 8103e5a:	2b0f      	cmp	r3, #15
 8103e5c:	d970      	bls.n	8103f40 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8103e5e:	e068      	b.n	8103f32 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8103e60:	68fb      	ldr	r3, [r7, #12]
 8103e62:	681b      	ldr	r3, [r3, #0]
 8103e64:	695b      	ldr	r3, [r3, #20]
 8103e66:	f003 0302 	and.w	r3, r3, #2
 8103e6a:	2b02      	cmp	r3, #2
 8103e6c:	d11a      	bne.n	8103ea4 <HAL_SPI_TransmitReceive+0x18c>
 8103e6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8103e70:	2b00      	cmp	r3, #0
 8103e72:	d017      	beq.n	8103ea4 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103e74:	68fb      	ldr	r3, [r7, #12]
 8103e76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103e78:	68fb      	ldr	r3, [r7, #12]
 8103e7a:	681b      	ldr	r3, [r3, #0]
 8103e7c:	6812      	ldr	r2, [r2, #0]
 8103e7e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8103e80:	68fb      	ldr	r3, [r7, #12]
 8103e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103e84:	1d1a      	adds	r2, r3, #4
 8103e86:	68fb      	ldr	r3, [r7, #12]
 8103e88:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8103e8a:	68fb      	ldr	r3, [r7, #12]
 8103e8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103e90:	b29b      	uxth	r3, r3
 8103e92:	3b01      	subs	r3, #1
 8103e94:	b29a      	uxth	r2, r3
 8103e96:	68fb      	ldr	r3, [r7, #12]
 8103e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103ea2:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	681b      	ldr	r3, [r3, #0]
 8103ea8:	695a      	ldr	r2, [r3, #20]
 8103eaa:	f248 0308 	movw	r3, #32776	; 0x8008
 8103eae:	4013      	ands	r3, r2
 8103eb0:	2b00      	cmp	r3, #0
 8103eb2:	d01a      	beq.n	8103eea <HAL_SPI_TransmitReceive+0x1d2>
 8103eb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8103eb6:	2b00      	cmp	r3, #0
 8103eb8:	d017      	beq.n	8103eea <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103eba:	68fb      	ldr	r3, [r7, #12]
 8103ebc:	681a      	ldr	r2, [r3, #0]
 8103ebe:	68fb      	ldr	r3, [r7, #12]
 8103ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ec2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8103ec4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8103ec6:	68fb      	ldr	r3, [r7, #12]
 8103ec8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103eca:	1d1a      	adds	r2, r3, #4
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103ed6:	b29b      	uxth	r3, r3
 8103ed8:	3b01      	subs	r3, #1
 8103eda:	b29a      	uxth	r2, r3
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8103ee2:	68fb      	ldr	r3, [r7, #12]
 8103ee4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8103ee8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8103eea:	f7fd f96b 	bl	81011c4 <HAL_GetTick>
 8103eee:	4602      	mov	r2, r0
 8103ef0:	69fb      	ldr	r3, [r7, #28]
 8103ef2:	1ad3      	subs	r3, r2, r3
 8103ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8103ef6:	429a      	cmp	r2, r3
 8103ef8:	d803      	bhi.n	8103f02 <HAL_SPI_TransmitReceive+0x1ea>
 8103efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103f00:	d102      	bne.n	8103f08 <HAL_SPI_TransmitReceive+0x1f0>
 8103f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103f04:	2b00      	cmp	r3, #0
 8103f06:	d114      	bne.n	8103f32 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8103f08:	68f8      	ldr	r0, [r7, #12]
 8103f0a:	f000 f9ee 	bl	81042ea <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8103f0e:	68fb      	ldr	r3, [r7, #12]
 8103f10:	2200      	movs	r2, #0
 8103f12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8103f16:	68fb      	ldr	r3, [r7, #12]
 8103f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8103f1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8103f20:	68fb      	ldr	r3, [r7, #12]
 8103f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8103f26:	68fb      	ldr	r3, [r7, #12]
 8103f28:	2201      	movs	r2, #1
 8103f2a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8103f2e:	2303      	movs	r3, #3
 8103f30:	e1d7      	b.n	81042e2 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8103f32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8103f34:	2b00      	cmp	r3, #0
 8103f36:	d193      	bne.n	8103e60 <HAL_SPI_TransmitReceive+0x148>
 8103f38:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8103f3a:	2b00      	cmp	r3, #0
 8103f3c:	d190      	bne.n	8103e60 <HAL_SPI_TransmitReceive+0x148>
 8103f3e:	e1a9      	b.n	8104294 <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8103f40:	68fb      	ldr	r3, [r7, #12]
 8103f42:	68db      	ldr	r3, [r3, #12]
 8103f44:	2b07      	cmp	r3, #7
 8103f46:	f240 819d 	bls.w	8104284 <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8103f4a:	e0a6      	b.n	810409a <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8103f4c:	68fb      	ldr	r3, [r7, #12]
 8103f4e:	681b      	ldr	r3, [r3, #0]
 8103f50:	695b      	ldr	r3, [r3, #20]
 8103f52:	f003 0302 	and.w	r3, r3, #2
 8103f56:	2b02      	cmp	r3, #2
 8103f58:	d139      	bne.n	8103fce <HAL_SPI_TransmitReceive+0x2b6>
 8103f5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8103f5c:	2b00      	cmp	r3, #0
 8103f5e:	d036      	beq.n	8103fce <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8103f60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8103f62:	2b01      	cmp	r3, #1
 8103f64:	d91c      	bls.n	8103fa0 <HAL_SPI_TransmitReceive+0x288>
 8103f66:	68fb      	ldr	r3, [r7, #12]
 8103f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103f6a:	2b00      	cmp	r3, #0
 8103f6c:	d018      	beq.n	8103fa0 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8103f6e:	68fb      	ldr	r3, [r7, #12]
 8103f70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8103f72:	68fb      	ldr	r3, [r7, #12]
 8103f74:	681b      	ldr	r3, [r3, #0]
 8103f76:	6812      	ldr	r2, [r2, #0]
 8103f78:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8103f7a:	68fb      	ldr	r3, [r7, #12]
 8103f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103f7e:	1d1a      	adds	r2, r3, #4
 8103f80:	68fb      	ldr	r3, [r7, #12]
 8103f82:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8103f84:	68fb      	ldr	r3, [r7, #12]
 8103f86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f8a:	b29b      	uxth	r3, r3
 8103f8c:	3b02      	subs	r3, #2
 8103f8e:	b29a      	uxth	r2, r3
 8103f90:	68fb      	ldr	r3, [r7, #12]
 8103f92:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8103f96:	68fb      	ldr	r3, [r7, #12]
 8103f98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103f9c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8103f9e:	e016      	b.n	8103fce <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103fa4:	881a      	ldrh	r2, [r3, #0]
 8103fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103fa8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8103faa:	68fb      	ldr	r3, [r7, #12]
 8103fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103fae:	1c9a      	adds	r2, r3, #2
 8103fb0:	68fb      	ldr	r3, [r7, #12]
 8103fb2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103fba:	b29b      	uxth	r3, r3
 8103fbc:	3b01      	subs	r3, #1
 8103fbe:	b29a      	uxth	r2, r3
 8103fc0:	68fb      	ldr	r3, [r7, #12]
 8103fc2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8103fc6:	68fb      	ldr	r3, [r7, #12]
 8103fc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8103fcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8103fce:	68fb      	ldr	r3, [r7, #12]
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	695b      	ldr	r3, [r3, #20]
 8103fd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8103fd8:	2b00      	cmp	r3, #0
 8103fda:	d03a      	beq.n	8104052 <HAL_SPI_TransmitReceive+0x33a>
 8103fdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8103fde:	2b00      	cmp	r3, #0
 8103fe0:	d037      	beq.n	8104052 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8103fe2:	68fb      	ldr	r3, [r7, #12]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	695b      	ldr	r3, [r3, #20]
 8103fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103fec:	2b00      	cmp	r3, #0
 8103fee:	d018      	beq.n	8104022 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8103ff0:	68fb      	ldr	r3, [r7, #12]
 8103ff2:	681a      	ldr	r2, [r3, #0]
 8103ff4:	68fb      	ldr	r3, [r7, #12]
 8103ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ff8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8103ffa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8103ffc:	68fb      	ldr	r3, [r7, #12]
 8103ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104000:	1d1a      	adds	r2, r3, #4
 8104002:	68fb      	ldr	r3, [r7, #12]
 8104004:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8104006:	68fb      	ldr	r3, [r7, #12]
 8104008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810400c:	b29b      	uxth	r3, r3
 810400e:	3b02      	subs	r3, #2
 8104010:	b29a      	uxth	r2, r3
 8104012:	68fb      	ldr	r3, [r7, #12]
 8104014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104018:	68fb      	ldr	r3, [r7, #12]
 810401a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810401e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8104020:	e017      	b.n	8104052 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104022:	68fb      	ldr	r3, [r7, #12]
 8104024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104026:	6a3a      	ldr	r2, [r7, #32]
 8104028:	8812      	ldrh	r2, [r2, #0]
 810402a:	b292      	uxth	r2, r2
 810402c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810402e:	68fb      	ldr	r3, [r7, #12]
 8104030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104032:	1c9a      	adds	r2, r3, #2
 8104034:	68fb      	ldr	r3, [r7, #12]
 8104036:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104038:	68fb      	ldr	r3, [r7, #12]
 810403a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810403e:	b29b      	uxth	r3, r3
 8104040:	3b01      	subs	r3, #1
 8104042:	b29a      	uxth	r2, r3
 8104044:	68fb      	ldr	r3, [r7, #12]
 8104046:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104050:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104052:	f7fd f8b7 	bl	81011c4 <HAL_GetTick>
 8104056:	4602      	mov	r2, r0
 8104058:	69fb      	ldr	r3, [r7, #28]
 810405a:	1ad3      	subs	r3, r2, r3
 810405c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810405e:	429a      	cmp	r2, r3
 8104060:	d803      	bhi.n	810406a <HAL_SPI_TransmitReceive+0x352>
 8104062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104068:	d102      	bne.n	8104070 <HAL_SPI_TransmitReceive+0x358>
 810406a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810406c:	2b00      	cmp	r3, #0
 810406e:	d114      	bne.n	810409a <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8104070:	68f8      	ldr	r0, [r7, #12]
 8104072:	f000 f93a 	bl	81042ea <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104076:	68fb      	ldr	r3, [r7, #12]
 8104078:	2200      	movs	r2, #0
 810407a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810407e:	68fb      	ldr	r3, [r7, #12]
 8104080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104084:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104088:	68fb      	ldr	r3, [r7, #12]
 810408a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810408e:	68fb      	ldr	r3, [r7, #12]
 8104090:	2201      	movs	r2, #1
 8104092:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104096:	2303      	movs	r3, #3
 8104098:	e123      	b.n	81042e2 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810409a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810409c:	2b00      	cmp	r3, #0
 810409e:	f47f af55 	bne.w	8103f4c <HAL_SPI_TransmitReceive+0x234>
 81040a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81040a4:	2b00      	cmp	r3, #0
 81040a6:	f47f af51 	bne.w	8103f4c <HAL_SPI_TransmitReceive+0x234>
 81040aa:	e0f3      	b.n	8104294 <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81040ac:	68fb      	ldr	r3, [r7, #12]
 81040ae:	681b      	ldr	r3, [r3, #0]
 81040b0:	695b      	ldr	r3, [r3, #20]
 81040b2:	f003 0302 	and.w	r3, r3, #2
 81040b6:	2b02      	cmp	r3, #2
 81040b8:	d15a      	bne.n	8104170 <HAL_SPI_TransmitReceive+0x458>
 81040ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81040bc:	2b00      	cmp	r3, #0
 81040be:	d057      	beq.n	8104170 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81040c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81040c2:	2b03      	cmp	r3, #3
 81040c4:	d91c      	bls.n	8104100 <HAL_SPI_TransmitReceive+0x3e8>
 81040c6:	68fb      	ldr	r3, [r7, #12]
 81040c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81040ca:	2b40      	cmp	r3, #64	; 0x40
 81040cc:	d918      	bls.n	8104100 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81040d2:	68fb      	ldr	r3, [r7, #12]
 81040d4:	681b      	ldr	r3, [r3, #0]
 81040d6:	6812      	ldr	r2, [r2, #0]
 81040d8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81040da:	68fb      	ldr	r3, [r7, #12]
 81040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81040de:	1d1a      	adds	r2, r3, #4
 81040e0:	68fb      	ldr	r3, [r7, #12]
 81040e2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 81040e4:	68fb      	ldr	r3, [r7, #12]
 81040e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81040ea:	b29b      	uxth	r3, r3
 81040ec:	3b04      	subs	r3, #4
 81040ee:	b29a      	uxth	r2, r3
 81040f0:	68fb      	ldr	r3, [r7, #12]
 81040f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81040fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 81040fe:	e037      	b.n	8104170 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104100:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104102:	2b01      	cmp	r3, #1
 8104104:	d91b      	bls.n	810413e <HAL_SPI_TransmitReceive+0x426>
 8104106:	68fb      	ldr	r3, [r7, #12]
 8104108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810410a:	2b00      	cmp	r3, #0
 810410c:	d017      	beq.n	810413e <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810410e:	68fb      	ldr	r3, [r7, #12]
 8104110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104112:	881a      	ldrh	r2, [r3, #0]
 8104114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104116:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104118:	68fb      	ldr	r3, [r7, #12]
 810411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810411c:	1c9a      	adds	r2, r3, #2
 810411e:	68fb      	ldr	r3, [r7, #12]
 8104120:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104122:	68fb      	ldr	r3, [r7, #12]
 8104124:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104128:	b29b      	uxth	r3, r3
 810412a:	3b02      	subs	r3, #2
 810412c:	b29a      	uxth	r2, r3
 810412e:	68fb      	ldr	r3, [r7, #12]
 8104130:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104134:	68fb      	ldr	r3, [r7, #12]
 8104136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810413a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 810413c:	e018      	b.n	8104170 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 810413e:	68fb      	ldr	r3, [r7, #12]
 8104140:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	681b      	ldr	r3, [r3, #0]
 8104146:	3320      	adds	r3, #32
 8104148:	7812      	ldrb	r2, [r2, #0]
 810414a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 810414c:	68fb      	ldr	r3, [r7, #12]
 810414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104150:	1c5a      	adds	r2, r3, #1
 8104152:	68fb      	ldr	r3, [r7, #12]
 8104154:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104156:	68fb      	ldr	r3, [r7, #12]
 8104158:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810415c:	b29b      	uxth	r3, r3
 810415e:	3b01      	subs	r3, #1
 8104160:	b29a      	uxth	r2, r3
 8104162:	68fb      	ldr	r3, [r7, #12]
 8104164:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8104168:	68fb      	ldr	r3, [r7, #12]
 810416a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810416e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8104170:	68fb      	ldr	r3, [r7, #12]
 8104172:	681b      	ldr	r3, [r3, #0]
 8104174:	695b      	ldr	r3, [r3, #20]
 8104176:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810417a:	2b00      	cmp	r3, #0
 810417c:	d05e      	beq.n	810423c <HAL_SPI_TransmitReceive+0x524>
 810417e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8104180:	2b00      	cmp	r3, #0
 8104182:	d05b      	beq.n	810423c <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8104184:	68fb      	ldr	r3, [r7, #12]
 8104186:	681b      	ldr	r3, [r3, #0]
 8104188:	695b      	ldr	r3, [r3, #20]
 810418a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810418e:	2b00      	cmp	r3, #0
 8104190:	d018      	beq.n	81041c4 <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104192:	68fb      	ldr	r3, [r7, #12]
 8104194:	681a      	ldr	r2, [r3, #0]
 8104196:	68fb      	ldr	r3, [r7, #12]
 8104198:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810419a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810419c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810419e:	68fb      	ldr	r3, [r7, #12]
 81041a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81041a2:	1d1a      	adds	r2, r3, #4
 81041a4:	68fb      	ldr	r3, [r7, #12]
 81041a6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 81041a8:	68fb      	ldr	r3, [r7, #12]
 81041aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81041ae:	b29b      	uxth	r3, r3
 81041b0:	3b04      	subs	r3, #4
 81041b2:	b29a      	uxth	r2, r3
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81041ba:	68fb      	ldr	r3, [r7, #12]
 81041bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81041c0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81041c2:	e03b      	b.n	810423c <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 81041c4:	68fb      	ldr	r3, [r7, #12]
 81041c6:	681b      	ldr	r3, [r3, #0]
 81041c8:	695b      	ldr	r3, [r3, #20]
 81041ca:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 81041ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81041d2:	d918      	bls.n	8104206 <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 81041d4:	68fb      	ldr	r3, [r7, #12]
 81041d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81041d8:	6a3a      	ldr	r2, [r7, #32]
 81041da:	8812      	ldrh	r2, [r2, #0]
 81041dc:	b292      	uxth	r2, r2
 81041de:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81041e0:	68fb      	ldr	r3, [r7, #12]
 81041e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81041e4:	1c9a      	adds	r2, r3, #2
 81041e6:	68fb      	ldr	r3, [r7, #12]
 81041e8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81041f0:	b29b      	uxth	r3, r3
 81041f2:	3b02      	subs	r3, #2
 81041f4:	b29a      	uxth	r2, r3
 81041f6:	68fb      	ldr	r3, [r7, #12]
 81041f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104202:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8104204:	e01a      	b.n	810423c <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104206:	68fb      	ldr	r3, [r7, #12]
 8104208:	681b      	ldr	r3, [r3, #0]
 810420a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 810420e:	68fb      	ldr	r3, [r7, #12]
 8104210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8104212:	7812      	ldrb	r2, [r2, #0]
 8104214:	b2d2      	uxtb	r2, r2
 8104216:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8104218:	68fb      	ldr	r3, [r7, #12]
 810421a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810421c:	1c5a      	adds	r2, r3, #1
 810421e:	68fb      	ldr	r3, [r7, #12]
 8104220:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8104222:	68fb      	ldr	r3, [r7, #12]
 8104224:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8104228:	b29b      	uxth	r3, r3
 810422a:	3b01      	subs	r3, #1
 810422c:	b29a      	uxth	r2, r3
 810422e:	68fb      	ldr	r3, [r7, #12]
 8104230:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8104234:	68fb      	ldr	r3, [r7, #12]
 8104236:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810423a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810423c:	f7fc ffc2 	bl	81011c4 <HAL_GetTick>
 8104240:	4602      	mov	r2, r0
 8104242:	69fb      	ldr	r3, [r7, #28]
 8104244:	1ad3      	subs	r3, r2, r3
 8104246:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104248:	429a      	cmp	r2, r3
 810424a:	d803      	bhi.n	8104254 <HAL_SPI_TransmitReceive+0x53c>
 810424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810424e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104252:	d102      	bne.n	810425a <HAL_SPI_TransmitReceive+0x542>
 8104254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104256:	2b00      	cmp	r3, #0
 8104258:	d114      	bne.n	8104284 <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 810425a:	68f8      	ldr	r0, [r7, #12]
 810425c:	f000 f845 	bl	81042ea <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8104260:	68fb      	ldr	r3, [r7, #12]
 8104262:	2200      	movs	r2, #0
 8104264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104268:	68fb      	ldr	r3, [r7, #12]
 810426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810426e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104272:	68fb      	ldr	r3, [r7, #12]
 8104274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8104278:	68fb      	ldr	r3, [r7, #12]
 810427a:	2201      	movs	r2, #1
 810427c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8104280:	2303      	movs	r3, #3
 8104282:	e02e      	b.n	81042e2 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8104284:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8104286:	2b00      	cmp	r3, #0
 8104288:	f47f af10 	bne.w	81040ac <HAL_SPI_TransmitReceive+0x394>
 810428c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 810428e:	2b00      	cmp	r3, #0
 8104290:	f47f af0c 	bne.w	81040ac <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8104294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104296:	9300      	str	r3, [sp, #0]
 8104298:	69fb      	ldr	r3, [r7, #28]
 810429a:	2200      	movs	r2, #0
 810429c:	2108      	movs	r1, #8
 810429e:	68f8      	ldr	r0, [r7, #12]
 81042a0:	f000 f8c3 	bl	810442a <SPI_WaitOnFlagUntilTimeout>
 81042a4:	4603      	mov	r3, r0
 81042a6:	2b00      	cmp	r3, #0
 81042a8:	d007      	beq.n	81042ba <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81042aa:	68fb      	ldr	r3, [r7, #12]
 81042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81042b0:	f043 0220 	orr.w	r2, r3, #32
 81042b4:	68fb      	ldr	r3, [r7, #12]
 81042b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81042ba:	68f8      	ldr	r0, [r7, #12]
 81042bc:	f000 f815 	bl	81042ea <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81042c0:	68fb      	ldr	r3, [r7, #12]
 81042c2:	2200      	movs	r2, #0
 81042c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 81042c8:	68fb      	ldr	r3, [r7, #12]
 81042ca:	2201      	movs	r2, #1
 81042cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 81042d0:	68fb      	ldr	r3, [r7, #12]
 81042d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d001      	beq.n	81042de <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 81042da:	2301      	movs	r3, #1
 81042dc:	e001      	b.n	81042e2 <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 81042de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 81042e2:	4618      	mov	r0, r3
 81042e4:	3730      	adds	r7, #48	; 0x30
 81042e6:	46bd      	mov	sp, r7
 81042e8:	bd80      	pop	{r7, pc}

081042ea <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 81042ea:	b480      	push	{r7}
 81042ec:	b085      	sub	sp, #20
 81042ee:	af00      	add	r7, sp, #0
 81042f0:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	695b      	ldr	r3, [r3, #20]
 81042f8:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 81042fa:	687b      	ldr	r3, [r7, #4]
 81042fc:	681b      	ldr	r3, [r3, #0]
 81042fe:	699a      	ldr	r2, [r3, #24]
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	f042 0208 	orr.w	r2, r2, #8
 8104308:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	681b      	ldr	r3, [r3, #0]
 810430e:	699a      	ldr	r2, [r3, #24]
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	681b      	ldr	r3, [r3, #0]
 8104314:	f042 0210 	orr.w	r2, r2, #16
 8104318:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	681b      	ldr	r3, [r3, #0]
 810431e:	681a      	ldr	r2, [r3, #0]
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	f022 0201 	bic.w	r2, r2, #1
 8104328:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	681b      	ldr	r3, [r3, #0]
 810432e:	691b      	ldr	r3, [r3, #16]
 8104330:	687a      	ldr	r2, [r7, #4]
 8104332:	6812      	ldr	r2, [r2, #0]
 8104334:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8104338:	f023 0303 	bic.w	r3, r3, #3
 810433c:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	689a      	ldr	r2, [r3, #8]
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	681b      	ldr	r3, [r3, #0]
 8104348:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 810434c:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 810434e:	687b      	ldr	r3, [r7, #4]
 8104350:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104354:	b2db      	uxtb	r3, r3
 8104356:	2b04      	cmp	r3, #4
 8104358:	d014      	beq.n	8104384 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810435a:	68fb      	ldr	r3, [r7, #12]
 810435c:	f003 0320 	and.w	r3, r3, #32
 8104360:	2b00      	cmp	r3, #0
 8104362:	d00f      	beq.n	8104384 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810436a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 810436e:	687b      	ldr	r3, [r7, #4]
 8104370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	699a      	ldr	r2, [r3, #24]
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	681b      	ldr	r3, [r3, #0]
 810437e:	f042 0220 	orr.w	r2, r2, #32
 8104382:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8104384:	687b      	ldr	r3, [r7, #4]
 8104386:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810438a:	b2db      	uxtb	r3, r3
 810438c:	2b03      	cmp	r3, #3
 810438e:	d014      	beq.n	81043ba <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8104390:	68fb      	ldr	r3, [r7, #12]
 8104392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104396:	2b00      	cmp	r3, #0
 8104398:	d00f      	beq.n	81043ba <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 810439a:	687b      	ldr	r3, [r7, #4]
 810439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043a0:	f043 0204 	orr.w	r2, r3, #4
 81043a4:	687b      	ldr	r3, [r7, #4]
 81043a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	681b      	ldr	r3, [r3, #0]
 81043ae:	699a      	ldr	r2, [r3, #24]
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	681b      	ldr	r3, [r3, #0]
 81043b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81043b8:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81043ba:	68fb      	ldr	r3, [r7, #12]
 81043bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81043c0:	2b00      	cmp	r3, #0
 81043c2:	d00f      	beq.n	81043e4 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043ca:	f043 0201 	orr.w	r2, r3, #1
 81043ce:	687b      	ldr	r3, [r7, #4]
 81043d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	699a      	ldr	r2, [r3, #24]
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	681b      	ldr	r3, [r3, #0]
 81043de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81043e2:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 81043e4:	68fb      	ldr	r3, [r7, #12]
 81043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81043ea:	2b00      	cmp	r3, #0
 81043ec:	d00f      	beq.n	810440e <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 81043ee:	687b      	ldr	r3, [r7, #4]
 81043f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81043f4:	f043 0208 	orr.w	r2, r3, #8
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 81043fe:	687b      	ldr	r3, [r7, #4]
 8104400:	681b      	ldr	r3, [r3, #0]
 8104402:	699a      	ldr	r2, [r3, #24]
 8104404:	687b      	ldr	r3, [r7, #4]
 8104406:	681b      	ldr	r3, [r3, #0]
 8104408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 810440c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810440e:	687b      	ldr	r3, [r7, #4]
 8104410:	2200      	movs	r2, #0
 8104412:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8104416:	687b      	ldr	r3, [r7, #4]
 8104418:	2200      	movs	r2, #0
 810441a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 810441e:	bf00      	nop
 8104420:	3714      	adds	r7, #20
 8104422:	46bd      	mov	sp, r7
 8104424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104428:	4770      	bx	lr

0810442a <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 810442a:	b580      	push	{r7, lr}
 810442c:	b084      	sub	sp, #16
 810442e:	af00      	add	r7, sp, #0
 8104430:	60f8      	str	r0, [r7, #12]
 8104432:	60b9      	str	r1, [r7, #8]
 8104434:	603b      	str	r3, [r7, #0]
 8104436:	4613      	mov	r3, r2
 8104438:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810443a:	e010      	b.n	810445e <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810443c:	f7fc fec2 	bl	81011c4 <HAL_GetTick>
 8104440:	4602      	mov	r2, r0
 8104442:	683b      	ldr	r3, [r7, #0]
 8104444:	1ad3      	subs	r3, r2, r3
 8104446:	69ba      	ldr	r2, [r7, #24]
 8104448:	429a      	cmp	r2, r3
 810444a:	d803      	bhi.n	8104454 <SPI_WaitOnFlagUntilTimeout+0x2a>
 810444c:	69bb      	ldr	r3, [r7, #24]
 810444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104452:	d102      	bne.n	810445a <SPI_WaitOnFlagUntilTimeout+0x30>
 8104454:	69bb      	ldr	r3, [r7, #24]
 8104456:	2b00      	cmp	r3, #0
 8104458:	d101      	bne.n	810445e <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810445a:	2303      	movs	r3, #3
 810445c:	e00f      	b.n	810447e <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810445e:	68fb      	ldr	r3, [r7, #12]
 8104460:	681b      	ldr	r3, [r3, #0]
 8104462:	695a      	ldr	r2, [r3, #20]
 8104464:	68bb      	ldr	r3, [r7, #8]
 8104466:	4013      	ands	r3, r2
 8104468:	68ba      	ldr	r2, [r7, #8]
 810446a:	429a      	cmp	r2, r3
 810446c:	bf0c      	ite	eq
 810446e:	2301      	moveq	r3, #1
 8104470:	2300      	movne	r3, #0
 8104472:	b2db      	uxtb	r3, r3
 8104474:	461a      	mov	r2, r3
 8104476:	79fb      	ldrb	r3, [r7, #7]
 8104478:	429a      	cmp	r2, r3
 810447a:	d0df      	beq.n	810443c <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 810447c:	2300      	movs	r3, #0
}
 810447e:	4618      	mov	r0, r3
 8104480:	3710      	adds	r7, #16
 8104482:	46bd      	mov	sp, r7
 8104484:	bd80      	pop	{r7, pc}

08104486 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8104486:	b480      	push	{r7}
 8104488:	b085      	sub	sp, #20
 810448a:	af00      	add	r7, sp, #0
 810448c:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810448e:	687b      	ldr	r3, [r7, #4]
 8104490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104492:	095b      	lsrs	r3, r3, #5
 8104494:	3301      	adds	r3, #1
 8104496:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	68db      	ldr	r3, [r3, #12]
 810449c:	3301      	adds	r3, #1
 810449e:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81044a0:	68bb      	ldr	r3, [r7, #8]
 81044a2:	3307      	adds	r3, #7
 81044a4:	08db      	lsrs	r3, r3, #3
 81044a6:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81044a8:	68bb      	ldr	r3, [r7, #8]
 81044aa:	68fa      	ldr	r2, [r7, #12]
 81044ac:	fb02 f303 	mul.w	r3, r2, r3
}
 81044b0:	4618      	mov	r0, r3
 81044b2:	3714      	adds	r7, #20
 81044b4:	46bd      	mov	sp, r7
 81044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044ba:	4770      	bx	lr

081044bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81044bc:	b580      	push	{r7, lr}
 81044be:	b082      	sub	sp, #8
 81044c0:	af00      	add	r7, sp, #0
 81044c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81044c4:	687b      	ldr	r3, [r7, #4]
 81044c6:	2b00      	cmp	r3, #0
 81044c8:	d101      	bne.n	81044ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81044ca:	2301      	movs	r3, #1
 81044cc:	e042      	b.n	8104554 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81044ce:	687b      	ldr	r3, [r7, #4]
 81044d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81044d4:	2b00      	cmp	r3, #0
 81044d6:	d106      	bne.n	81044e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81044d8:	687b      	ldr	r3, [r7, #4]
 81044da:	2200      	movs	r2, #0
 81044dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81044e0:	6878      	ldr	r0, [r7, #4]
 81044e2:	f7fc fc69 	bl	8100db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	2224      	movs	r2, #36	; 0x24
 81044ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	681b      	ldr	r3, [r3, #0]
 81044f2:	681a      	ldr	r2, [r3, #0]
 81044f4:	687b      	ldr	r3, [r7, #4]
 81044f6:	681b      	ldr	r3, [r3, #0]
 81044f8:	f022 0201 	bic.w	r2, r2, #1
 81044fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81044fe:	6878      	ldr	r0, [r7, #4]
 8104500:	f000 f8c2 	bl	8104688 <UART_SetConfig>
 8104504:	4603      	mov	r3, r0
 8104506:	2b01      	cmp	r3, #1
 8104508:	d101      	bne.n	810450e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810450a:	2301      	movs	r3, #1
 810450c:	e022      	b.n	8104554 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810450e:	687b      	ldr	r3, [r7, #4]
 8104510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104512:	2b00      	cmp	r3, #0
 8104514:	d002      	beq.n	810451c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8104516:	6878      	ldr	r0, [r7, #4]
 8104518:	f000 fe16 	bl	8105148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810451c:	687b      	ldr	r3, [r7, #4]
 810451e:	681b      	ldr	r3, [r3, #0]
 8104520:	685a      	ldr	r2, [r3, #4]
 8104522:	687b      	ldr	r3, [r7, #4]
 8104524:	681b      	ldr	r3, [r3, #0]
 8104526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810452a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810452c:	687b      	ldr	r3, [r7, #4]
 810452e:	681b      	ldr	r3, [r3, #0]
 8104530:	689a      	ldr	r2, [r3, #8]
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810453a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	681b      	ldr	r3, [r3, #0]
 8104540:	681a      	ldr	r2, [r3, #0]
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	681b      	ldr	r3, [r3, #0]
 8104546:	f042 0201 	orr.w	r2, r2, #1
 810454a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810454c:	6878      	ldr	r0, [r7, #4]
 810454e:	f000 fe9d 	bl	810528c <UART_CheckIdleState>
 8104552:	4603      	mov	r3, r0
}
 8104554:	4618      	mov	r0, r3
 8104556:	3708      	adds	r7, #8
 8104558:	46bd      	mov	sp, r7
 810455a:	bd80      	pop	{r7, pc}

0810455c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810455c:	b580      	push	{r7, lr}
 810455e:	b08a      	sub	sp, #40	; 0x28
 8104560:	af02      	add	r7, sp, #8
 8104562:	60f8      	str	r0, [r7, #12]
 8104564:	60b9      	str	r1, [r7, #8]
 8104566:	603b      	str	r3, [r7, #0]
 8104568:	4613      	mov	r3, r2
 810456a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810456c:	68fb      	ldr	r3, [r7, #12]
 810456e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104572:	2b20      	cmp	r3, #32
 8104574:	f040 8083 	bne.w	810467e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8104578:	68bb      	ldr	r3, [r7, #8]
 810457a:	2b00      	cmp	r3, #0
 810457c:	d002      	beq.n	8104584 <HAL_UART_Transmit+0x28>
 810457e:	88fb      	ldrh	r3, [r7, #6]
 8104580:	2b00      	cmp	r3, #0
 8104582:	d101      	bne.n	8104588 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8104584:	2301      	movs	r3, #1
 8104586:	e07b      	b.n	8104680 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8104588:	68fb      	ldr	r3, [r7, #12]
 810458a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810458e:	2b01      	cmp	r3, #1
 8104590:	d101      	bne.n	8104596 <HAL_UART_Transmit+0x3a>
 8104592:	2302      	movs	r3, #2
 8104594:	e074      	b.n	8104680 <HAL_UART_Transmit+0x124>
 8104596:	68fb      	ldr	r3, [r7, #12]
 8104598:	2201      	movs	r2, #1
 810459a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810459e:	68fb      	ldr	r3, [r7, #12]
 81045a0:	2200      	movs	r2, #0
 81045a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81045a6:	68fb      	ldr	r3, [r7, #12]
 81045a8:	2221      	movs	r2, #33	; 0x21
 81045aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81045ae:	f7fc fe09 	bl	81011c4 <HAL_GetTick>
 81045b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81045b4:	68fb      	ldr	r3, [r7, #12]
 81045b6:	88fa      	ldrh	r2, [r7, #6]
 81045b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81045bc:	68fb      	ldr	r3, [r7, #12]
 81045be:	88fa      	ldrh	r2, [r7, #6]
 81045c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81045c4:	68fb      	ldr	r3, [r7, #12]
 81045c6:	689b      	ldr	r3, [r3, #8]
 81045c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81045cc:	d108      	bne.n	81045e0 <HAL_UART_Transmit+0x84>
 81045ce:	68fb      	ldr	r3, [r7, #12]
 81045d0:	691b      	ldr	r3, [r3, #16]
 81045d2:	2b00      	cmp	r3, #0
 81045d4:	d104      	bne.n	81045e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 81045d6:	2300      	movs	r3, #0
 81045d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81045da:	68bb      	ldr	r3, [r7, #8]
 81045dc:	61bb      	str	r3, [r7, #24]
 81045de:	e003      	b.n	81045e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 81045e0:	68bb      	ldr	r3, [r7, #8]
 81045e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81045e4:	2300      	movs	r3, #0
 81045e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	2200      	movs	r2, #0
 81045ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 81045f0:	e02c      	b.n	810464c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81045f2:	683b      	ldr	r3, [r7, #0]
 81045f4:	9300      	str	r3, [sp, #0]
 81045f6:	697b      	ldr	r3, [r7, #20]
 81045f8:	2200      	movs	r2, #0
 81045fa:	2180      	movs	r1, #128	; 0x80
 81045fc:	68f8      	ldr	r0, [r7, #12]
 81045fe:	f000 fe90 	bl	8105322 <UART_WaitOnFlagUntilTimeout>
 8104602:	4603      	mov	r3, r0
 8104604:	2b00      	cmp	r3, #0
 8104606:	d001      	beq.n	810460c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8104608:	2303      	movs	r3, #3
 810460a:	e039      	b.n	8104680 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 810460c:	69fb      	ldr	r3, [r7, #28]
 810460e:	2b00      	cmp	r3, #0
 8104610:	d10b      	bne.n	810462a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104612:	69bb      	ldr	r3, [r7, #24]
 8104614:	881b      	ldrh	r3, [r3, #0]
 8104616:	461a      	mov	r2, r3
 8104618:	68fb      	ldr	r3, [r7, #12]
 810461a:	681b      	ldr	r3, [r3, #0]
 810461c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104620:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8104622:	69bb      	ldr	r3, [r7, #24]
 8104624:	3302      	adds	r3, #2
 8104626:	61bb      	str	r3, [r7, #24]
 8104628:	e007      	b.n	810463a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810462a:	69fb      	ldr	r3, [r7, #28]
 810462c:	781a      	ldrb	r2, [r3, #0]
 810462e:	68fb      	ldr	r3, [r7, #12]
 8104630:	681b      	ldr	r3, [r3, #0]
 8104632:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8104634:	69fb      	ldr	r3, [r7, #28]
 8104636:	3301      	adds	r3, #1
 8104638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810463a:	68fb      	ldr	r3, [r7, #12]
 810463c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104640:	b29b      	uxth	r3, r3
 8104642:	3b01      	subs	r3, #1
 8104644:	b29a      	uxth	r2, r3
 8104646:	68fb      	ldr	r3, [r7, #12]
 8104648:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 810464c:	68fb      	ldr	r3, [r7, #12]
 810464e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8104652:	b29b      	uxth	r3, r3
 8104654:	2b00      	cmp	r3, #0
 8104656:	d1cc      	bne.n	81045f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104658:	683b      	ldr	r3, [r7, #0]
 810465a:	9300      	str	r3, [sp, #0]
 810465c:	697b      	ldr	r3, [r7, #20]
 810465e:	2200      	movs	r2, #0
 8104660:	2140      	movs	r1, #64	; 0x40
 8104662:	68f8      	ldr	r0, [r7, #12]
 8104664:	f000 fe5d 	bl	8105322 <UART_WaitOnFlagUntilTimeout>
 8104668:	4603      	mov	r3, r0
 810466a:	2b00      	cmp	r3, #0
 810466c:	d001      	beq.n	8104672 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 810466e:	2303      	movs	r3, #3
 8104670:	e006      	b.n	8104680 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104672:	68fb      	ldr	r3, [r7, #12]
 8104674:	2220      	movs	r2, #32
 8104676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 810467a:	2300      	movs	r3, #0
 810467c:	e000      	b.n	8104680 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 810467e:	2302      	movs	r3, #2
  }
}
 8104680:	4618      	mov	r0, r3
 8104682:	3720      	adds	r7, #32
 8104684:	46bd      	mov	sp, r7
 8104686:	bd80      	pop	{r7, pc}

08104688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8104688:	b5b0      	push	{r4, r5, r7, lr}
 810468a:	b08e      	sub	sp, #56	; 0x38
 810468c:	af00      	add	r7, sp, #0
 810468e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8104690:	2300      	movs	r3, #0
 8104692:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	689a      	ldr	r2, [r3, #8]
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	691b      	ldr	r3, [r3, #16]
 810469e:	431a      	orrs	r2, r3
 81046a0:	687b      	ldr	r3, [r7, #4]
 81046a2:	695b      	ldr	r3, [r3, #20]
 81046a4:	431a      	orrs	r2, r3
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	69db      	ldr	r3, [r3, #28]
 81046aa:	4313      	orrs	r3, r2
 81046ac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81046ae:	687b      	ldr	r3, [r7, #4]
 81046b0:	681b      	ldr	r3, [r3, #0]
 81046b2:	681a      	ldr	r2, [r3, #0]
 81046b4:	4bc0      	ldr	r3, [pc, #768]	; (81049b8 <UART_SetConfig+0x330>)
 81046b6:	4013      	ands	r3, r2
 81046b8:	687a      	ldr	r2, [r7, #4]
 81046ba:	6812      	ldr	r2, [r2, #0]
 81046bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81046be:	430b      	orrs	r3, r1
 81046c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	681b      	ldr	r3, [r3, #0]
 81046c6:	685b      	ldr	r3, [r3, #4]
 81046c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	68da      	ldr	r2, [r3, #12]
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	430a      	orrs	r2, r1
 81046d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	699b      	ldr	r3, [r3, #24]
 81046dc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81046de:	687b      	ldr	r3, [r7, #4]
 81046e0:	681b      	ldr	r3, [r3, #0]
 81046e2:	4ab6      	ldr	r2, [pc, #728]	; (81049bc <UART_SetConfig+0x334>)
 81046e4:	4293      	cmp	r3, r2
 81046e6:	d004      	beq.n	81046f2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	6a1b      	ldr	r3, [r3, #32]
 81046ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81046ee:	4313      	orrs	r3, r2
 81046f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	681b      	ldr	r3, [r3, #0]
 81046f6:	689b      	ldr	r3, [r3, #8]
 81046f8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81046fc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8104700:	687a      	ldr	r2, [r7, #4]
 8104702:	6812      	ldr	r2, [r2, #0]
 8104704:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8104706:	430b      	orrs	r3, r1
 8104708:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	681b      	ldr	r3, [r3, #0]
 810470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104710:	f023 010f 	bic.w	r1, r3, #15
 8104714:	687b      	ldr	r3, [r7, #4]
 8104716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	430a      	orrs	r2, r1
 810471e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	681b      	ldr	r3, [r3, #0]
 8104724:	4aa6      	ldr	r2, [pc, #664]	; (81049c0 <UART_SetConfig+0x338>)
 8104726:	4293      	cmp	r3, r2
 8104728:	d176      	bne.n	8104818 <UART_SetConfig+0x190>
 810472a:	4ba6      	ldr	r3, [pc, #664]	; (81049c4 <UART_SetConfig+0x33c>)
 810472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810472e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104732:	2b28      	cmp	r3, #40	; 0x28
 8104734:	d86c      	bhi.n	8104810 <UART_SetConfig+0x188>
 8104736:	a201      	add	r2, pc, #4	; (adr r2, 810473c <UART_SetConfig+0xb4>)
 8104738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810473c:	081047e1 	.word	0x081047e1
 8104740:	08104811 	.word	0x08104811
 8104744:	08104811 	.word	0x08104811
 8104748:	08104811 	.word	0x08104811
 810474c:	08104811 	.word	0x08104811
 8104750:	08104811 	.word	0x08104811
 8104754:	08104811 	.word	0x08104811
 8104758:	08104811 	.word	0x08104811
 810475c:	081047e9 	.word	0x081047e9
 8104760:	08104811 	.word	0x08104811
 8104764:	08104811 	.word	0x08104811
 8104768:	08104811 	.word	0x08104811
 810476c:	08104811 	.word	0x08104811
 8104770:	08104811 	.word	0x08104811
 8104774:	08104811 	.word	0x08104811
 8104778:	08104811 	.word	0x08104811
 810477c:	081047f1 	.word	0x081047f1
 8104780:	08104811 	.word	0x08104811
 8104784:	08104811 	.word	0x08104811
 8104788:	08104811 	.word	0x08104811
 810478c:	08104811 	.word	0x08104811
 8104790:	08104811 	.word	0x08104811
 8104794:	08104811 	.word	0x08104811
 8104798:	08104811 	.word	0x08104811
 810479c:	081047f9 	.word	0x081047f9
 81047a0:	08104811 	.word	0x08104811
 81047a4:	08104811 	.word	0x08104811
 81047a8:	08104811 	.word	0x08104811
 81047ac:	08104811 	.word	0x08104811
 81047b0:	08104811 	.word	0x08104811
 81047b4:	08104811 	.word	0x08104811
 81047b8:	08104811 	.word	0x08104811
 81047bc:	08104801 	.word	0x08104801
 81047c0:	08104811 	.word	0x08104811
 81047c4:	08104811 	.word	0x08104811
 81047c8:	08104811 	.word	0x08104811
 81047cc:	08104811 	.word	0x08104811
 81047d0:	08104811 	.word	0x08104811
 81047d4:	08104811 	.word	0x08104811
 81047d8:	08104811 	.word	0x08104811
 81047dc:	08104809 	.word	0x08104809
 81047e0:	2301      	movs	r3, #1
 81047e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81047e6:	e220      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81047e8:	2304      	movs	r3, #4
 81047ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81047ee:	e21c      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81047f0:	2308      	movs	r3, #8
 81047f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81047f6:	e218      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81047f8:	2310      	movs	r3, #16
 81047fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81047fe:	e214      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104800:	2320      	movs	r3, #32
 8104802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104806:	e210      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104808:	2340      	movs	r3, #64	; 0x40
 810480a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810480e:	e20c      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104810:	2380      	movs	r3, #128	; 0x80
 8104812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104816:	e208      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	681b      	ldr	r3, [r3, #0]
 810481c:	4a6a      	ldr	r2, [pc, #424]	; (81049c8 <UART_SetConfig+0x340>)
 810481e:	4293      	cmp	r3, r2
 8104820:	d130      	bne.n	8104884 <UART_SetConfig+0x1fc>
 8104822:	4b68      	ldr	r3, [pc, #416]	; (81049c4 <UART_SetConfig+0x33c>)
 8104824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104826:	f003 0307 	and.w	r3, r3, #7
 810482a:	2b05      	cmp	r3, #5
 810482c:	d826      	bhi.n	810487c <UART_SetConfig+0x1f4>
 810482e:	a201      	add	r2, pc, #4	; (adr r2, 8104834 <UART_SetConfig+0x1ac>)
 8104830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104834:	0810484d 	.word	0x0810484d
 8104838:	08104855 	.word	0x08104855
 810483c:	0810485d 	.word	0x0810485d
 8104840:	08104865 	.word	0x08104865
 8104844:	0810486d 	.word	0x0810486d
 8104848:	08104875 	.word	0x08104875
 810484c:	2300      	movs	r3, #0
 810484e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104852:	e1ea      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104854:	2304      	movs	r3, #4
 8104856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810485a:	e1e6      	b.n	8104c2a <UART_SetConfig+0x5a2>
 810485c:	2308      	movs	r3, #8
 810485e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104862:	e1e2      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104864:	2310      	movs	r3, #16
 8104866:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810486a:	e1de      	b.n	8104c2a <UART_SetConfig+0x5a2>
 810486c:	2320      	movs	r3, #32
 810486e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104872:	e1da      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104874:	2340      	movs	r3, #64	; 0x40
 8104876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810487a:	e1d6      	b.n	8104c2a <UART_SetConfig+0x5a2>
 810487c:	2380      	movs	r3, #128	; 0x80
 810487e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104882:	e1d2      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	681b      	ldr	r3, [r3, #0]
 8104888:	4a50      	ldr	r2, [pc, #320]	; (81049cc <UART_SetConfig+0x344>)
 810488a:	4293      	cmp	r3, r2
 810488c:	d130      	bne.n	81048f0 <UART_SetConfig+0x268>
 810488e:	4b4d      	ldr	r3, [pc, #308]	; (81049c4 <UART_SetConfig+0x33c>)
 8104890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104892:	f003 0307 	and.w	r3, r3, #7
 8104896:	2b05      	cmp	r3, #5
 8104898:	d826      	bhi.n	81048e8 <UART_SetConfig+0x260>
 810489a:	a201      	add	r2, pc, #4	; (adr r2, 81048a0 <UART_SetConfig+0x218>)
 810489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048a0:	081048b9 	.word	0x081048b9
 81048a4:	081048c1 	.word	0x081048c1
 81048a8:	081048c9 	.word	0x081048c9
 81048ac:	081048d1 	.word	0x081048d1
 81048b0:	081048d9 	.word	0x081048d9
 81048b4:	081048e1 	.word	0x081048e1
 81048b8:	2300      	movs	r3, #0
 81048ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048be:	e1b4      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81048c0:	2304      	movs	r3, #4
 81048c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048c6:	e1b0      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81048c8:	2308      	movs	r3, #8
 81048ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048ce:	e1ac      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81048d0:	2310      	movs	r3, #16
 81048d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048d6:	e1a8      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81048d8:	2320      	movs	r3, #32
 81048da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048de:	e1a4      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81048e0:	2340      	movs	r3, #64	; 0x40
 81048e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048e6:	e1a0      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81048e8:	2380      	movs	r3, #128	; 0x80
 81048ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81048ee:	e19c      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81048f0:	687b      	ldr	r3, [r7, #4]
 81048f2:	681b      	ldr	r3, [r3, #0]
 81048f4:	4a36      	ldr	r2, [pc, #216]	; (81049d0 <UART_SetConfig+0x348>)
 81048f6:	4293      	cmp	r3, r2
 81048f8:	d130      	bne.n	810495c <UART_SetConfig+0x2d4>
 81048fa:	4b32      	ldr	r3, [pc, #200]	; (81049c4 <UART_SetConfig+0x33c>)
 81048fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81048fe:	f003 0307 	and.w	r3, r3, #7
 8104902:	2b05      	cmp	r3, #5
 8104904:	d826      	bhi.n	8104954 <UART_SetConfig+0x2cc>
 8104906:	a201      	add	r2, pc, #4	; (adr r2, 810490c <UART_SetConfig+0x284>)
 8104908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810490c:	08104925 	.word	0x08104925
 8104910:	0810492d 	.word	0x0810492d
 8104914:	08104935 	.word	0x08104935
 8104918:	0810493d 	.word	0x0810493d
 810491c:	08104945 	.word	0x08104945
 8104920:	0810494d 	.word	0x0810494d
 8104924:	2300      	movs	r3, #0
 8104926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810492a:	e17e      	b.n	8104c2a <UART_SetConfig+0x5a2>
 810492c:	2304      	movs	r3, #4
 810492e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104932:	e17a      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104934:	2308      	movs	r3, #8
 8104936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810493a:	e176      	b.n	8104c2a <UART_SetConfig+0x5a2>
 810493c:	2310      	movs	r3, #16
 810493e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104942:	e172      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104944:	2320      	movs	r3, #32
 8104946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810494a:	e16e      	b.n	8104c2a <UART_SetConfig+0x5a2>
 810494c:	2340      	movs	r3, #64	; 0x40
 810494e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104952:	e16a      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104954:	2380      	movs	r3, #128	; 0x80
 8104956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810495a:	e166      	b.n	8104c2a <UART_SetConfig+0x5a2>
 810495c:	687b      	ldr	r3, [r7, #4]
 810495e:	681b      	ldr	r3, [r3, #0]
 8104960:	4a1c      	ldr	r2, [pc, #112]	; (81049d4 <UART_SetConfig+0x34c>)
 8104962:	4293      	cmp	r3, r2
 8104964:	d140      	bne.n	81049e8 <UART_SetConfig+0x360>
 8104966:	4b17      	ldr	r3, [pc, #92]	; (81049c4 <UART_SetConfig+0x33c>)
 8104968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810496a:	f003 0307 	and.w	r3, r3, #7
 810496e:	2b05      	cmp	r3, #5
 8104970:	d836      	bhi.n	81049e0 <UART_SetConfig+0x358>
 8104972:	a201      	add	r2, pc, #4	; (adr r2, 8104978 <UART_SetConfig+0x2f0>)
 8104974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104978:	08104991 	.word	0x08104991
 810497c:	08104999 	.word	0x08104999
 8104980:	081049a1 	.word	0x081049a1
 8104984:	081049a9 	.word	0x081049a9
 8104988:	081049b1 	.word	0x081049b1
 810498c:	081049d9 	.word	0x081049d9
 8104990:	2300      	movs	r3, #0
 8104992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104996:	e148      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104998:	2304      	movs	r3, #4
 810499a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810499e:	e144      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81049a0:	2308      	movs	r3, #8
 81049a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049a6:	e140      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81049a8:	2310      	movs	r3, #16
 81049aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049ae:	e13c      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81049b0:	2320      	movs	r3, #32
 81049b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049b6:	e138      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81049b8:	cfff69f3 	.word	0xcfff69f3
 81049bc:	58000c00 	.word	0x58000c00
 81049c0:	40011000 	.word	0x40011000
 81049c4:	58024400 	.word	0x58024400
 81049c8:	40004400 	.word	0x40004400
 81049cc:	40004800 	.word	0x40004800
 81049d0:	40004c00 	.word	0x40004c00
 81049d4:	40005000 	.word	0x40005000
 81049d8:	2340      	movs	r3, #64	; 0x40
 81049da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049de:	e124      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81049e0:	2380      	movs	r3, #128	; 0x80
 81049e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81049e6:	e120      	b.n	8104c2a <UART_SetConfig+0x5a2>
 81049e8:	687b      	ldr	r3, [r7, #4]
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	4acc      	ldr	r2, [pc, #816]	; (8104d20 <UART_SetConfig+0x698>)
 81049ee:	4293      	cmp	r3, r2
 81049f0:	d176      	bne.n	8104ae0 <UART_SetConfig+0x458>
 81049f2:	4bcc      	ldr	r3, [pc, #816]	; (8104d24 <UART_SetConfig+0x69c>)
 81049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81049fa:	2b28      	cmp	r3, #40	; 0x28
 81049fc:	d86c      	bhi.n	8104ad8 <UART_SetConfig+0x450>
 81049fe:	a201      	add	r2, pc, #4	; (adr r2, 8104a04 <UART_SetConfig+0x37c>)
 8104a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a04:	08104aa9 	.word	0x08104aa9
 8104a08:	08104ad9 	.word	0x08104ad9
 8104a0c:	08104ad9 	.word	0x08104ad9
 8104a10:	08104ad9 	.word	0x08104ad9
 8104a14:	08104ad9 	.word	0x08104ad9
 8104a18:	08104ad9 	.word	0x08104ad9
 8104a1c:	08104ad9 	.word	0x08104ad9
 8104a20:	08104ad9 	.word	0x08104ad9
 8104a24:	08104ab1 	.word	0x08104ab1
 8104a28:	08104ad9 	.word	0x08104ad9
 8104a2c:	08104ad9 	.word	0x08104ad9
 8104a30:	08104ad9 	.word	0x08104ad9
 8104a34:	08104ad9 	.word	0x08104ad9
 8104a38:	08104ad9 	.word	0x08104ad9
 8104a3c:	08104ad9 	.word	0x08104ad9
 8104a40:	08104ad9 	.word	0x08104ad9
 8104a44:	08104ab9 	.word	0x08104ab9
 8104a48:	08104ad9 	.word	0x08104ad9
 8104a4c:	08104ad9 	.word	0x08104ad9
 8104a50:	08104ad9 	.word	0x08104ad9
 8104a54:	08104ad9 	.word	0x08104ad9
 8104a58:	08104ad9 	.word	0x08104ad9
 8104a5c:	08104ad9 	.word	0x08104ad9
 8104a60:	08104ad9 	.word	0x08104ad9
 8104a64:	08104ac1 	.word	0x08104ac1
 8104a68:	08104ad9 	.word	0x08104ad9
 8104a6c:	08104ad9 	.word	0x08104ad9
 8104a70:	08104ad9 	.word	0x08104ad9
 8104a74:	08104ad9 	.word	0x08104ad9
 8104a78:	08104ad9 	.word	0x08104ad9
 8104a7c:	08104ad9 	.word	0x08104ad9
 8104a80:	08104ad9 	.word	0x08104ad9
 8104a84:	08104ac9 	.word	0x08104ac9
 8104a88:	08104ad9 	.word	0x08104ad9
 8104a8c:	08104ad9 	.word	0x08104ad9
 8104a90:	08104ad9 	.word	0x08104ad9
 8104a94:	08104ad9 	.word	0x08104ad9
 8104a98:	08104ad9 	.word	0x08104ad9
 8104a9c:	08104ad9 	.word	0x08104ad9
 8104aa0:	08104ad9 	.word	0x08104ad9
 8104aa4:	08104ad1 	.word	0x08104ad1
 8104aa8:	2301      	movs	r3, #1
 8104aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104aae:	e0bc      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ab0:	2304      	movs	r3, #4
 8104ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ab6:	e0b8      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ab8:	2308      	movs	r3, #8
 8104aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104abe:	e0b4      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ac0:	2310      	movs	r3, #16
 8104ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ac6:	e0b0      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ac8:	2320      	movs	r3, #32
 8104aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ace:	e0ac      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ad0:	2340      	movs	r3, #64	; 0x40
 8104ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ad6:	e0a8      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ad8:	2380      	movs	r3, #128	; 0x80
 8104ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ade:	e0a4      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ae0:	687b      	ldr	r3, [r7, #4]
 8104ae2:	681b      	ldr	r3, [r3, #0]
 8104ae4:	4a90      	ldr	r2, [pc, #576]	; (8104d28 <UART_SetConfig+0x6a0>)
 8104ae6:	4293      	cmp	r3, r2
 8104ae8:	d130      	bne.n	8104b4c <UART_SetConfig+0x4c4>
 8104aea:	4b8e      	ldr	r3, [pc, #568]	; (8104d24 <UART_SetConfig+0x69c>)
 8104aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104aee:	f003 0307 	and.w	r3, r3, #7
 8104af2:	2b05      	cmp	r3, #5
 8104af4:	d826      	bhi.n	8104b44 <UART_SetConfig+0x4bc>
 8104af6:	a201      	add	r2, pc, #4	; (adr r2, 8104afc <UART_SetConfig+0x474>)
 8104af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104afc:	08104b15 	.word	0x08104b15
 8104b00:	08104b1d 	.word	0x08104b1d
 8104b04:	08104b25 	.word	0x08104b25
 8104b08:	08104b2d 	.word	0x08104b2d
 8104b0c:	08104b35 	.word	0x08104b35
 8104b10:	08104b3d 	.word	0x08104b3d
 8104b14:	2300      	movs	r3, #0
 8104b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b1a:	e086      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b1c:	2304      	movs	r3, #4
 8104b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b22:	e082      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b24:	2308      	movs	r3, #8
 8104b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b2a:	e07e      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b2c:	2310      	movs	r3, #16
 8104b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b32:	e07a      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b34:	2320      	movs	r3, #32
 8104b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b3a:	e076      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b3c:	2340      	movs	r3, #64	; 0x40
 8104b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b42:	e072      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b44:	2380      	movs	r3, #128	; 0x80
 8104b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b4a:	e06e      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	681b      	ldr	r3, [r3, #0]
 8104b50:	4a76      	ldr	r2, [pc, #472]	; (8104d2c <UART_SetConfig+0x6a4>)
 8104b52:	4293      	cmp	r3, r2
 8104b54:	d130      	bne.n	8104bb8 <UART_SetConfig+0x530>
 8104b56:	4b73      	ldr	r3, [pc, #460]	; (8104d24 <UART_SetConfig+0x69c>)
 8104b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b5a:	f003 0307 	and.w	r3, r3, #7
 8104b5e:	2b05      	cmp	r3, #5
 8104b60:	d826      	bhi.n	8104bb0 <UART_SetConfig+0x528>
 8104b62:	a201      	add	r2, pc, #4	; (adr r2, 8104b68 <UART_SetConfig+0x4e0>)
 8104b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b68:	08104b81 	.word	0x08104b81
 8104b6c:	08104b89 	.word	0x08104b89
 8104b70:	08104b91 	.word	0x08104b91
 8104b74:	08104b99 	.word	0x08104b99
 8104b78:	08104ba1 	.word	0x08104ba1
 8104b7c:	08104ba9 	.word	0x08104ba9
 8104b80:	2300      	movs	r3, #0
 8104b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b86:	e050      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b88:	2304      	movs	r3, #4
 8104b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b8e:	e04c      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b90:	2308      	movs	r3, #8
 8104b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b96:	e048      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104b98:	2310      	movs	r3, #16
 8104b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104b9e:	e044      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ba0:	2320      	movs	r3, #32
 8104ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104ba6:	e040      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104ba8:	2340      	movs	r3, #64	; 0x40
 8104baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104bae:	e03c      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104bb0:	2380      	movs	r3, #128	; 0x80
 8104bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104bb6:	e038      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104bb8:	687b      	ldr	r3, [r7, #4]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	4a5c      	ldr	r2, [pc, #368]	; (8104d30 <UART_SetConfig+0x6a8>)
 8104bbe:	4293      	cmp	r3, r2
 8104bc0:	d130      	bne.n	8104c24 <UART_SetConfig+0x59c>
 8104bc2:	4b58      	ldr	r3, [pc, #352]	; (8104d24 <UART_SetConfig+0x69c>)
 8104bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104bc6:	f003 0307 	and.w	r3, r3, #7
 8104bca:	2b05      	cmp	r3, #5
 8104bcc:	d826      	bhi.n	8104c1c <UART_SetConfig+0x594>
 8104bce:	a201      	add	r2, pc, #4	; (adr r2, 8104bd4 <UART_SetConfig+0x54c>)
 8104bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104bd4:	08104bed 	.word	0x08104bed
 8104bd8:	08104bf5 	.word	0x08104bf5
 8104bdc:	08104bfd 	.word	0x08104bfd
 8104be0:	08104c05 	.word	0x08104c05
 8104be4:	08104c0d 	.word	0x08104c0d
 8104be8:	08104c15 	.word	0x08104c15
 8104bec:	2302      	movs	r3, #2
 8104bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104bf2:	e01a      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104bf4:	2304      	movs	r3, #4
 8104bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104bfa:	e016      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104bfc:	2308      	movs	r3, #8
 8104bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c02:	e012      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104c04:	2310      	movs	r3, #16
 8104c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c0a:	e00e      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104c0c:	2320      	movs	r3, #32
 8104c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c12:	e00a      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104c14:	2340      	movs	r3, #64	; 0x40
 8104c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c1a:	e006      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104c1c:	2380      	movs	r3, #128	; 0x80
 8104c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8104c22:	e002      	b.n	8104c2a <UART_SetConfig+0x5a2>
 8104c24:	2380      	movs	r3, #128	; 0x80
 8104c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8104c2a:	687b      	ldr	r3, [r7, #4]
 8104c2c:	681b      	ldr	r3, [r3, #0]
 8104c2e:	4a40      	ldr	r2, [pc, #256]	; (8104d30 <UART_SetConfig+0x6a8>)
 8104c30:	4293      	cmp	r3, r2
 8104c32:	f040 80ef 	bne.w	8104e14 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8104c36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8104c3a:	2b20      	cmp	r3, #32
 8104c3c:	dc46      	bgt.n	8104ccc <UART_SetConfig+0x644>
 8104c3e:	2b02      	cmp	r3, #2
 8104c40:	f2c0 8081 	blt.w	8104d46 <UART_SetConfig+0x6be>
 8104c44:	3b02      	subs	r3, #2
 8104c46:	2b1e      	cmp	r3, #30
 8104c48:	d87d      	bhi.n	8104d46 <UART_SetConfig+0x6be>
 8104c4a:	a201      	add	r2, pc, #4	; (adr r2, 8104c50 <UART_SetConfig+0x5c8>)
 8104c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c50:	08104cd3 	.word	0x08104cd3
 8104c54:	08104d47 	.word	0x08104d47
 8104c58:	08104cdb 	.word	0x08104cdb
 8104c5c:	08104d47 	.word	0x08104d47
 8104c60:	08104d47 	.word	0x08104d47
 8104c64:	08104d47 	.word	0x08104d47
 8104c68:	08104ceb 	.word	0x08104ceb
 8104c6c:	08104d47 	.word	0x08104d47
 8104c70:	08104d47 	.word	0x08104d47
 8104c74:	08104d47 	.word	0x08104d47
 8104c78:	08104d47 	.word	0x08104d47
 8104c7c:	08104d47 	.word	0x08104d47
 8104c80:	08104d47 	.word	0x08104d47
 8104c84:	08104d47 	.word	0x08104d47
 8104c88:	08104cfb 	.word	0x08104cfb
 8104c8c:	08104d47 	.word	0x08104d47
 8104c90:	08104d47 	.word	0x08104d47
 8104c94:	08104d47 	.word	0x08104d47
 8104c98:	08104d47 	.word	0x08104d47
 8104c9c:	08104d47 	.word	0x08104d47
 8104ca0:	08104d47 	.word	0x08104d47
 8104ca4:	08104d47 	.word	0x08104d47
 8104ca8:	08104d47 	.word	0x08104d47
 8104cac:	08104d47 	.word	0x08104d47
 8104cb0:	08104d47 	.word	0x08104d47
 8104cb4:	08104d47 	.word	0x08104d47
 8104cb8:	08104d47 	.word	0x08104d47
 8104cbc:	08104d47 	.word	0x08104d47
 8104cc0:	08104d47 	.word	0x08104d47
 8104cc4:	08104d47 	.word	0x08104d47
 8104cc8:	08104d39 	.word	0x08104d39
 8104ccc:	2b40      	cmp	r3, #64	; 0x40
 8104cce:	d036      	beq.n	8104d3e <UART_SetConfig+0x6b6>
 8104cd0:	e039      	b.n	8104d46 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8104cd2:	f7fd ff1b 	bl	8102b0c <HAL_RCCEx_GetD3PCLK1Freq>
 8104cd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8104cd8:	e03b      	b.n	8104d52 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104cda:	f107 0314 	add.w	r3, r7, #20
 8104cde:	4618      	mov	r0, r3
 8104ce0:	f7fd ff2a 	bl	8102b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104ce4:	69bb      	ldr	r3, [r7, #24]
 8104ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104ce8:	e033      	b.n	8104d52 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104cea:	f107 0308 	add.w	r3, r7, #8
 8104cee:	4618      	mov	r0, r3
 8104cf0:	f7fe f876 	bl	8102de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104cf4:	68fb      	ldr	r3, [r7, #12]
 8104cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104cf8:	e02b      	b.n	8104d52 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104cfa:	4b0a      	ldr	r3, [pc, #40]	; (8104d24 <UART_SetConfig+0x69c>)
 8104cfc:	681b      	ldr	r3, [r3, #0]
 8104cfe:	f003 0320 	and.w	r3, r3, #32
 8104d02:	2b00      	cmp	r3, #0
 8104d04:	d009      	beq.n	8104d1a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104d06:	4b07      	ldr	r3, [pc, #28]	; (8104d24 <UART_SetConfig+0x69c>)
 8104d08:	681b      	ldr	r3, [r3, #0]
 8104d0a:	08db      	lsrs	r3, r3, #3
 8104d0c:	f003 0303 	and.w	r3, r3, #3
 8104d10:	4a08      	ldr	r2, [pc, #32]	; (8104d34 <UART_SetConfig+0x6ac>)
 8104d12:	fa22 f303 	lsr.w	r3, r2, r3
 8104d16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104d18:	e01b      	b.n	8104d52 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8104d1a:	4b06      	ldr	r3, [pc, #24]	; (8104d34 <UART_SetConfig+0x6ac>)
 8104d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104d1e:	e018      	b.n	8104d52 <UART_SetConfig+0x6ca>
 8104d20:	40011400 	.word	0x40011400
 8104d24:	58024400 	.word	0x58024400
 8104d28:	40007800 	.word	0x40007800
 8104d2c:	40007c00 	.word	0x40007c00
 8104d30:	58000c00 	.word	0x58000c00
 8104d34:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104d38:	4bc4      	ldr	r3, [pc, #784]	; (810504c <UART_SetConfig+0x9c4>)
 8104d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104d3c:	e009      	b.n	8104d52 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104d44:	e005      	b.n	8104d52 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8104d46:	2300      	movs	r3, #0
 8104d48:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8104d4a:	2301      	movs	r3, #1
 8104d4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8104d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8104d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104d54:	2b00      	cmp	r3, #0
 8104d56:	f000 81da 	beq.w	810510e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d5e:	4abc      	ldr	r2, [pc, #752]	; (8105050 <UART_SetConfig+0x9c8>)
 8104d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104d64:	461a      	mov	r2, r3
 8104d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8104d6c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	685a      	ldr	r2, [r3, #4]
 8104d72:	4613      	mov	r3, r2
 8104d74:	005b      	lsls	r3, r3, #1
 8104d76:	4413      	add	r3, r2
 8104d78:	6a3a      	ldr	r2, [r7, #32]
 8104d7a:	429a      	cmp	r2, r3
 8104d7c:	d305      	bcc.n	8104d8a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8104d7e:	687b      	ldr	r3, [r7, #4]
 8104d80:	685b      	ldr	r3, [r3, #4]
 8104d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104d84:	6a3a      	ldr	r2, [r7, #32]
 8104d86:	429a      	cmp	r2, r3
 8104d88:	d903      	bls.n	8104d92 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8104d8a:	2301      	movs	r3, #1
 8104d8c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8104d90:	e1bd      	b.n	810510e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104d94:	4618      	mov	r0, r3
 8104d96:	f04f 0100 	mov.w	r1, #0
 8104d9a:	687b      	ldr	r3, [r7, #4]
 8104d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104d9e:	4aac      	ldr	r2, [pc, #688]	; (8105050 <UART_SetConfig+0x9c8>)
 8104da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104da4:	b29a      	uxth	r2, r3
 8104da6:	f04f 0300 	mov.w	r3, #0
 8104daa:	f7fb fae9 	bl	8100380 <__aeabi_uldivmod>
 8104dae:	4602      	mov	r2, r0
 8104db0:	460b      	mov	r3, r1
 8104db2:	4610      	mov	r0, r2
 8104db4:	4619      	mov	r1, r3
 8104db6:	f04f 0200 	mov.w	r2, #0
 8104dba:	f04f 0300 	mov.w	r3, #0
 8104dbe:	020b      	lsls	r3, r1, #8
 8104dc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8104dc4:	0202      	lsls	r2, r0, #8
 8104dc6:	6879      	ldr	r1, [r7, #4]
 8104dc8:	6849      	ldr	r1, [r1, #4]
 8104dca:	0849      	lsrs	r1, r1, #1
 8104dcc:	4608      	mov	r0, r1
 8104dce:	f04f 0100 	mov.w	r1, #0
 8104dd2:	1814      	adds	r4, r2, r0
 8104dd4:	eb43 0501 	adc.w	r5, r3, r1
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	685b      	ldr	r3, [r3, #4]
 8104ddc:	461a      	mov	r2, r3
 8104dde:	f04f 0300 	mov.w	r3, #0
 8104de2:	4620      	mov	r0, r4
 8104de4:	4629      	mov	r1, r5
 8104de6:	f7fb facb 	bl	8100380 <__aeabi_uldivmod>
 8104dea:	4602      	mov	r2, r0
 8104dec:	460b      	mov	r3, r1
 8104dee:	4613      	mov	r3, r2
 8104df0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8104df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104df8:	d308      	bcc.n	8104e0c <UART_SetConfig+0x784>
 8104dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104e00:	d204      	bcs.n	8104e0c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8104e02:	687b      	ldr	r3, [r7, #4]
 8104e04:	681b      	ldr	r3, [r3, #0]
 8104e06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8104e08:	60da      	str	r2, [r3, #12]
 8104e0a:	e180      	b.n	810510e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8104e0c:	2301      	movs	r3, #1
 8104e0e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8104e12:	e17c      	b.n	810510e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	69db      	ldr	r3, [r3, #28]
 8104e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104e1c:	f040 80be 	bne.w	8104f9c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8104e20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8104e24:	2b20      	cmp	r3, #32
 8104e26:	dc49      	bgt.n	8104ebc <UART_SetConfig+0x834>
 8104e28:	2b00      	cmp	r3, #0
 8104e2a:	db7c      	blt.n	8104f26 <UART_SetConfig+0x89e>
 8104e2c:	2b20      	cmp	r3, #32
 8104e2e:	d87a      	bhi.n	8104f26 <UART_SetConfig+0x89e>
 8104e30:	a201      	add	r2, pc, #4	; (adr r2, 8104e38 <UART_SetConfig+0x7b0>)
 8104e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104e36:	bf00      	nop
 8104e38:	08104ec3 	.word	0x08104ec3
 8104e3c:	08104ecb 	.word	0x08104ecb
 8104e40:	08104f27 	.word	0x08104f27
 8104e44:	08104f27 	.word	0x08104f27
 8104e48:	08104ed3 	.word	0x08104ed3
 8104e4c:	08104f27 	.word	0x08104f27
 8104e50:	08104f27 	.word	0x08104f27
 8104e54:	08104f27 	.word	0x08104f27
 8104e58:	08104ee3 	.word	0x08104ee3
 8104e5c:	08104f27 	.word	0x08104f27
 8104e60:	08104f27 	.word	0x08104f27
 8104e64:	08104f27 	.word	0x08104f27
 8104e68:	08104f27 	.word	0x08104f27
 8104e6c:	08104f27 	.word	0x08104f27
 8104e70:	08104f27 	.word	0x08104f27
 8104e74:	08104f27 	.word	0x08104f27
 8104e78:	08104ef3 	.word	0x08104ef3
 8104e7c:	08104f27 	.word	0x08104f27
 8104e80:	08104f27 	.word	0x08104f27
 8104e84:	08104f27 	.word	0x08104f27
 8104e88:	08104f27 	.word	0x08104f27
 8104e8c:	08104f27 	.word	0x08104f27
 8104e90:	08104f27 	.word	0x08104f27
 8104e94:	08104f27 	.word	0x08104f27
 8104e98:	08104f27 	.word	0x08104f27
 8104e9c:	08104f27 	.word	0x08104f27
 8104ea0:	08104f27 	.word	0x08104f27
 8104ea4:	08104f27 	.word	0x08104f27
 8104ea8:	08104f27 	.word	0x08104f27
 8104eac:	08104f27 	.word	0x08104f27
 8104eb0:	08104f27 	.word	0x08104f27
 8104eb4:	08104f27 	.word	0x08104f27
 8104eb8:	08104f19 	.word	0x08104f19
 8104ebc:	2b40      	cmp	r3, #64	; 0x40
 8104ebe:	d02e      	beq.n	8104f1e <UART_SetConfig+0x896>
 8104ec0:	e031      	b.n	8104f26 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8104ec2:	f7fc feb7 	bl	8101c34 <HAL_RCC_GetPCLK1Freq>
 8104ec6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8104ec8:	e033      	b.n	8104f32 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8104eca:	f7fc fec9 	bl	8101c60 <HAL_RCC_GetPCLK2Freq>
 8104ece:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8104ed0:	e02f      	b.n	8104f32 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104ed2:	f107 0314 	add.w	r3, r7, #20
 8104ed6:	4618      	mov	r0, r3
 8104ed8:	f7fd fe2e 	bl	8102b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104edc:	69bb      	ldr	r3, [r7, #24]
 8104ede:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104ee0:	e027      	b.n	8104f32 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104ee2:	f107 0308 	add.w	r3, r7, #8
 8104ee6:	4618      	mov	r0, r3
 8104ee8:	f7fd ff7a 	bl	8102de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104eec:	68fb      	ldr	r3, [r7, #12]
 8104eee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104ef0:	e01f      	b.n	8104f32 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104ef2:	4b58      	ldr	r3, [pc, #352]	; (8105054 <UART_SetConfig+0x9cc>)
 8104ef4:	681b      	ldr	r3, [r3, #0]
 8104ef6:	f003 0320 	and.w	r3, r3, #32
 8104efa:	2b00      	cmp	r3, #0
 8104efc:	d009      	beq.n	8104f12 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104efe:	4b55      	ldr	r3, [pc, #340]	; (8105054 <UART_SetConfig+0x9cc>)
 8104f00:	681b      	ldr	r3, [r3, #0]
 8104f02:	08db      	lsrs	r3, r3, #3
 8104f04:	f003 0303 	and.w	r3, r3, #3
 8104f08:	4a53      	ldr	r2, [pc, #332]	; (8105058 <UART_SetConfig+0x9d0>)
 8104f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8104f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104f10:	e00f      	b.n	8104f32 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8104f12:	4b51      	ldr	r3, [pc, #324]	; (8105058 <UART_SetConfig+0x9d0>)
 8104f14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104f16:	e00c      	b.n	8104f32 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104f18:	4b4c      	ldr	r3, [pc, #304]	; (810504c <UART_SetConfig+0x9c4>)
 8104f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104f1c:	e009      	b.n	8104f32 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8104f24:	e005      	b.n	8104f32 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8104f26:	2300      	movs	r3, #0
 8104f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8104f2a:	2301      	movs	r3, #1
 8104f2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8104f30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8104f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104f34:	2b00      	cmp	r3, #0
 8104f36:	f000 80ea 	beq.w	810510e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104f3e:	4a44      	ldr	r2, [pc, #272]	; (8105050 <UART_SetConfig+0x9c8>)
 8104f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104f44:	461a      	mov	r2, r3
 8104f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8104f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8104f4c:	005a      	lsls	r2, r3, #1
 8104f4e:	687b      	ldr	r3, [r7, #4]
 8104f50:	685b      	ldr	r3, [r3, #4]
 8104f52:	085b      	lsrs	r3, r3, #1
 8104f54:	441a      	add	r2, r3
 8104f56:	687b      	ldr	r3, [r7, #4]
 8104f58:	685b      	ldr	r3, [r3, #4]
 8104f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8104f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8104f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f62:	2b0f      	cmp	r3, #15
 8104f64:	d916      	bls.n	8104f94 <UART_SetConfig+0x90c>
 8104f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104f6c:	d212      	bcs.n	8104f94 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8104f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f70:	b29b      	uxth	r3, r3
 8104f72:	f023 030f 	bic.w	r3, r3, #15
 8104f76:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8104f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f7a:	085b      	lsrs	r3, r3, #1
 8104f7c:	b29b      	uxth	r3, r3
 8104f7e:	f003 0307 	and.w	r3, r3, #7
 8104f82:	b29a      	uxth	r2, r3
 8104f84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8104f86:	4313      	orrs	r3, r2
 8104f88:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	681b      	ldr	r3, [r3, #0]
 8104f8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8104f90:	60da      	str	r2, [r3, #12]
 8104f92:	e0bc      	b.n	810510e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8104f94:	2301      	movs	r3, #1
 8104f96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8104f9a:	e0b8      	b.n	810510e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8104f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8104fa0:	2b20      	cmp	r3, #32
 8104fa2:	dc4b      	bgt.n	810503c <UART_SetConfig+0x9b4>
 8104fa4:	2b00      	cmp	r3, #0
 8104fa6:	f2c0 8087 	blt.w	81050b8 <UART_SetConfig+0xa30>
 8104faa:	2b20      	cmp	r3, #32
 8104fac:	f200 8084 	bhi.w	81050b8 <UART_SetConfig+0xa30>
 8104fb0:	a201      	add	r2, pc, #4	; (adr r2, 8104fb8 <UART_SetConfig+0x930>)
 8104fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104fb6:	bf00      	nop
 8104fb8:	08105043 	.word	0x08105043
 8104fbc:	0810505d 	.word	0x0810505d
 8104fc0:	081050b9 	.word	0x081050b9
 8104fc4:	081050b9 	.word	0x081050b9
 8104fc8:	08105065 	.word	0x08105065
 8104fcc:	081050b9 	.word	0x081050b9
 8104fd0:	081050b9 	.word	0x081050b9
 8104fd4:	081050b9 	.word	0x081050b9
 8104fd8:	08105075 	.word	0x08105075
 8104fdc:	081050b9 	.word	0x081050b9
 8104fe0:	081050b9 	.word	0x081050b9
 8104fe4:	081050b9 	.word	0x081050b9
 8104fe8:	081050b9 	.word	0x081050b9
 8104fec:	081050b9 	.word	0x081050b9
 8104ff0:	081050b9 	.word	0x081050b9
 8104ff4:	081050b9 	.word	0x081050b9
 8104ff8:	08105085 	.word	0x08105085
 8104ffc:	081050b9 	.word	0x081050b9
 8105000:	081050b9 	.word	0x081050b9
 8105004:	081050b9 	.word	0x081050b9
 8105008:	081050b9 	.word	0x081050b9
 810500c:	081050b9 	.word	0x081050b9
 8105010:	081050b9 	.word	0x081050b9
 8105014:	081050b9 	.word	0x081050b9
 8105018:	081050b9 	.word	0x081050b9
 810501c:	081050b9 	.word	0x081050b9
 8105020:	081050b9 	.word	0x081050b9
 8105024:	081050b9 	.word	0x081050b9
 8105028:	081050b9 	.word	0x081050b9
 810502c:	081050b9 	.word	0x081050b9
 8105030:	081050b9 	.word	0x081050b9
 8105034:	081050b9 	.word	0x081050b9
 8105038:	081050ab 	.word	0x081050ab
 810503c:	2b40      	cmp	r3, #64	; 0x40
 810503e:	d037      	beq.n	81050b0 <UART_SetConfig+0xa28>
 8105040:	e03a      	b.n	81050b8 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105042:	f7fc fdf7 	bl	8101c34 <HAL_RCC_GetPCLK1Freq>
 8105046:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105048:	e03c      	b.n	81050c4 <UART_SetConfig+0xa3c>
 810504a:	bf00      	nop
 810504c:	003d0900 	.word	0x003d0900
 8105050:	08106778 	.word	0x08106778
 8105054:	58024400 	.word	0x58024400
 8105058:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810505c:	f7fc fe00 	bl	8101c60 <HAL_RCC_GetPCLK2Freq>
 8105060:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8105062:	e02f      	b.n	81050c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105064:	f107 0314 	add.w	r3, r7, #20
 8105068:	4618      	mov	r0, r3
 810506a:	f7fd fd65 	bl	8102b38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810506e:	69bb      	ldr	r3, [r7, #24]
 8105070:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105072:	e027      	b.n	81050c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105074:	f107 0308 	add.w	r3, r7, #8
 8105078:	4618      	mov	r0, r3
 810507a:	f7fd feb1 	bl	8102de0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810507e:	68fb      	ldr	r3, [r7, #12]
 8105080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8105082:	e01f      	b.n	81050c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105084:	4b2c      	ldr	r3, [pc, #176]	; (8105138 <UART_SetConfig+0xab0>)
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	f003 0320 	and.w	r3, r3, #32
 810508c:	2b00      	cmp	r3, #0
 810508e:	d009      	beq.n	81050a4 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105090:	4b29      	ldr	r3, [pc, #164]	; (8105138 <UART_SetConfig+0xab0>)
 8105092:	681b      	ldr	r3, [r3, #0]
 8105094:	08db      	lsrs	r3, r3, #3
 8105096:	f003 0303 	and.w	r3, r3, #3
 810509a:	4a28      	ldr	r2, [pc, #160]	; (810513c <UART_SetConfig+0xab4>)
 810509c:	fa22 f303 	lsr.w	r3, r2, r3
 81050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81050a2:	e00f      	b.n	81050c4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 81050a4:	4b25      	ldr	r3, [pc, #148]	; (810513c <UART_SetConfig+0xab4>)
 81050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81050a8:	e00c      	b.n	81050c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81050aa:	4b25      	ldr	r3, [pc, #148]	; (8105140 <UART_SetConfig+0xab8>)
 81050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81050ae:	e009      	b.n	81050c4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81050b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81050b6:	e005      	b.n	81050c4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 81050b8:	2300      	movs	r3, #0
 81050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 81050bc:	2301      	movs	r3, #1
 81050be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81050c2:	bf00      	nop
    }

    if (pclk != 0U)
 81050c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81050c6:	2b00      	cmp	r3, #0
 81050c8:	d021      	beq.n	810510e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81050ce:	4a1d      	ldr	r2, [pc, #116]	; (8105144 <UART_SetConfig+0xabc>)
 81050d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81050d4:	461a      	mov	r2, r3
 81050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81050d8:	fbb3 f2f2 	udiv	r2, r3, r2
 81050dc:	687b      	ldr	r3, [r7, #4]
 81050de:	685b      	ldr	r3, [r3, #4]
 81050e0:	085b      	lsrs	r3, r3, #1
 81050e2:	441a      	add	r2, r3
 81050e4:	687b      	ldr	r3, [r7, #4]
 81050e6:	685b      	ldr	r3, [r3, #4]
 81050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 81050ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81050f0:	2b0f      	cmp	r3, #15
 81050f2:	d909      	bls.n	8105108 <UART_SetConfig+0xa80>
 81050f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81050f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81050fa:	d205      	bcs.n	8105108 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81050fe:	b29a      	uxth	r2, r3
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	681b      	ldr	r3, [r3, #0]
 8105104:	60da      	str	r2, [r3, #12]
 8105106:	e002      	b.n	810510e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8105108:	2301      	movs	r3, #1
 810510a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810510e:	687b      	ldr	r3, [r7, #4]
 8105110:	2201      	movs	r2, #1
 8105112:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	2201      	movs	r2, #1
 810511a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	2200      	movs	r2, #0
 8105122:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8105124:	687b      	ldr	r3, [r7, #4]
 8105126:	2200      	movs	r2, #0
 8105128:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 810512a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810512e:	4618      	mov	r0, r3
 8105130:	3738      	adds	r7, #56	; 0x38
 8105132:	46bd      	mov	sp, r7
 8105134:	bdb0      	pop	{r4, r5, r7, pc}
 8105136:	bf00      	nop
 8105138:	58024400 	.word	0x58024400
 810513c:	03d09000 	.word	0x03d09000
 8105140:	003d0900 	.word	0x003d0900
 8105144:	08106778 	.word	0x08106778

08105148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105148:	b480      	push	{r7}
 810514a:	b083      	sub	sp, #12
 810514c:	af00      	add	r7, sp, #0
 810514e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105154:	f003 0301 	and.w	r3, r3, #1
 8105158:	2b00      	cmp	r3, #0
 810515a:	d00a      	beq.n	8105172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810515c:	687b      	ldr	r3, [r7, #4]
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	685b      	ldr	r3, [r3, #4]
 8105162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8105166:	687b      	ldr	r3, [r7, #4]
 8105168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	430a      	orrs	r2, r1
 8105170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105172:	687b      	ldr	r3, [r7, #4]
 8105174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105176:	f003 0302 	and.w	r3, r3, #2
 810517a:	2b00      	cmp	r3, #0
 810517c:	d00a      	beq.n	8105194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810517e:	687b      	ldr	r3, [r7, #4]
 8105180:	681b      	ldr	r3, [r3, #0]
 8105182:	685b      	ldr	r3, [r3, #4]
 8105184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105188:	687b      	ldr	r3, [r7, #4]
 810518a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	430a      	orrs	r2, r1
 8105192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105198:	f003 0304 	and.w	r3, r3, #4
 810519c:	2b00      	cmp	r3, #0
 810519e:	d00a      	beq.n	81051b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	685b      	ldr	r3, [r3, #4]
 81051a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81051aa:	687b      	ldr	r3, [r7, #4]
 81051ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	430a      	orrs	r2, r1
 81051b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 81051b6:	687b      	ldr	r3, [r7, #4]
 81051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051ba:	f003 0308 	and.w	r3, r3, #8
 81051be:	2b00      	cmp	r3, #0
 81051c0:	d00a      	beq.n	81051d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	685b      	ldr	r3, [r3, #4]
 81051c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81051cc:	687b      	ldr	r3, [r7, #4]
 81051ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81051d0:	687b      	ldr	r3, [r7, #4]
 81051d2:	681b      	ldr	r3, [r3, #0]
 81051d4:	430a      	orrs	r2, r1
 81051d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81051d8:	687b      	ldr	r3, [r7, #4]
 81051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051dc:	f003 0310 	and.w	r3, r3, #16
 81051e0:	2b00      	cmp	r3, #0
 81051e2:	d00a      	beq.n	81051fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81051e4:	687b      	ldr	r3, [r7, #4]
 81051e6:	681b      	ldr	r3, [r3, #0]
 81051e8:	689b      	ldr	r3, [r3, #8]
 81051ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81051ee:	687b      	ldr	r3, [r7, #4]
 81051f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	681b      	ldr	r3, [r3, #0]
 81051f6:	430a      	orrs	r2, r1
 81051f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81051fe:	f003 0320 	and.w	r3, r3, #32
 8105202:	2b00      	cmp	r3, #0
 8105204:	d00a      	beq.n	810521c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	681b      	ldr	r3, [r3, #0]
 810520a:	689b      	ldr	r3, [r3, #8]
 810520c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105210:	687b      	ldr	r3, [r7, #4]
 8105212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	681b      	ldr	r3, [r3, #0]
 8105218:	430a      	orrs	r2, r1
 810521a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810521c:	687b      	ldr	r3, [r7, #4]
 810521e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105224:	2b00      	cmp	r3, #0
 8105226:	d01a      	beq.n	810525e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105228:	687b      	ldr	r3, [r7, #4]
 810522a:	681b      	ldr	r3, [r3, #0]
 810522c:	685b      	ldr	r3, [r3, #4]
 810522e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8105232:	687b      	ldr	r3, [r7, #4]
 8105234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	430a      	orrs	r2, r1
 810523c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810523e:	687b      	ldr	r3, [r7, #4]
 8105240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105246:	d10a      	bne.n	810525e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	681b      	ldr	r3, [r3, #0]
 810524c:	685b      	ldr	r3, [r3, #4]
 810524e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	430a      	orrs	r2, r1
 810525c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8105266:	2b00      	cmp	r3, #0
 8105268:	d00a      	beq.n	8105280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	681b      	ldr	r3, [r3, #0]
 810526e:	685b      	ldr	r3, [r3, #4]
 8105270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	681b      	ldr	r3, [r3, #0]
 810527c:	430a      	orrs	r2, r1
 810527e:	605a      	str	r2, [r3, #4]
  }
}
 8105280:	bf00      	nop
 8105282:	370c      	adds	r7, #12
 8105284:	46bd      	mov	sp, r7
 8105286:	f85d 7b04 	ldr.w	r7, [sp], #4
 810528a:	4770      	bx	lr

0810528c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810528c:	b580      	push	{r7, lr}
 810528e:	b086      	sub	sp, #24
 8105290:	af02      	add	r7, sp, #8
 8105292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105294:	687b      	ldr	r3, [r7, #4]
 8105296:	2200      	movs	r2, #0
 8105298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810529c:	f7fb ff92 	bl	81011c4 <HAL_GetTick>
 81052a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81052a2:	687b      	ldr	r3, [r7, #4]
 81052a4:	681b      	ldr	r3, [r3, #0]
 81052a6:	681b      	ldr	r3, [r3, #0]
 81052a8:	f003 0308 	and.w	r3, r3, #8
 81052ac:	2b08      	cmp	r3, #8
 81052ae:	d10e      	bne.n	81052ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81052b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81052b4:	9300      	str	r3, [sp, #0]
 81052b6:	68fb      	ldr	r3, [r7, #12]
 81052b8:	2200      	movs	r2, #0
 81052ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81052be:	6878      	ldr	r0, [r7, #4]
 81052c0:	f000 f82f 	bl	8105322 <UART_WaitOnFlagUntilTimeout>
 81052c4:	4603      	mov	r3, r0
 81052c6:	2b00      	cmp	r3, #0
 81052c8:	d001      	beq.n	81052ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81052ca:	2303      	movs	r3, #3
 81052cc:	e025      	b.n	810531a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	681b      	ldr	r3, [r3, #0]
 81052d2:	681b      	ldr	r3, [r3, #0]
 81052d4:	f003 0304 	and.w	r3, r3, #4
 81052d8:	2b04      	cmp	r3, #4
 81052da:	d10e      	bne.n	81052fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81052dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81052e0:	9300      	str	r3, [sp, #0]
 81052e2:	68fb      	ldr	r3, [r7, #12]
 81052e4:	2200      	movs	r2, #0
 81052e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81052ea:	6878      	ldr	r0, [r7, #4]
 81052ec:	f000 f819 	bl	8105322 <UART_WaitOnFlagUntilTimeout>
 81052f0:	4603      	mov	r3, r0
 81052f2:	2b00      	cmp	r3, #0
 81052f4:	d001      	beq.n	81052fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81052f6:	2303      	movs	r3, #3
 81052f8:	e00f      	b.n	810531a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81052fa:	687b      	ldr	r3, [r7, #4]
 81052fc:	2220      	movs	r2, #32
 81052fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	2220      	movs	r2, #32
 8105306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810530a:	687b      	ldr	r3, [r7, #4]
 810530c:	2200      	movs	r2, #0
 810530e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	2200      	movs	r2, #0
 8105314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105318:	2300      	movs	r3, #0
}
 810531a:	4618      	mov	r0, r3
 810531c:	3710      	adds	r7, #16
 810531e:	46bd      	mov	sp, r7
 8105320:	bd80      	pop	{r7, pc}

08105322 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105322:	b580      	push	{r7, lr}
 8105324:	b09c      	sub	sp, #112	; 0x70
 8105326:	af00      	add	r7, sp, #0
 8105328:	60f8      	str	r0, [r7, #12]
 810532a:	60b9      	str	r1, [r7, #8]
 810532c:	603b      	str	r3, [r7, #0]
 810532e:	4613      	mov	r3, r2
 8105330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105332:	e0a9      	b.n	8105488 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105336:	f1b3 3fff 	cmp.w	r3, #4294967295
 810533a:	f000 80a5 	beq.w	8105488 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810533e:	f7fb ff41 	bl	81011c4 <HAL_GetTick>
 8105342:	4602      	mov	r2, r0
 8105344:	683b      	ldr	r3, [r7, #0]
 8105346:	1ad3      	subs	r3, r2, r3
 8105348:	6fba      	ldr	r2, [r7, #120]	; 0x78
 810534a:	429a      	cmp	r2, r3
 810534c:	d302      	bcc.n	8105354 <UART_WaitOnFlagUntilTimeout+0x32>
 810534e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8105350:	2b00      	cmp	r3, #0
 8105352:	d140      	bne.n	81053d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8105354:	68fb      	ldr	r3, [r7, #12]
 8105356:	681b      	ldr	r3, [r3, #0]
 8105358:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810535a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810535c:	e853 3f00 	ldrex	r3, [r3]
 8105360:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8105362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105368:	667b      	str	r3, [r7, #100]	; 0x64
 810536a:	68fb      	ldr	r3, [r7, #12]
 810536c:	681b      	ldr	r3, [r3, #0]
 810536e:	461a      	mov	r2, r3
 8105370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8105372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105374:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105378:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810537a:	e841 2300 	strex	r3, r2, [r1]
 810537e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8105380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8105382:	2b00      	cmp	r3, #0
 8105384:	d1e6      	bne.n	8105354 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105386:	68fb      	ldr	r3, [r7, #12]
 8105388:	681b      	ldr	r3, [r3, #0]
 810538a:	3308      	adds	r3, #8
 810538c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810538e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105390:	e853 3f00 	ldrex	r3, [r3]
 8105394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105398:	f023 0301 	bic.w	r3, r3, #1
 810539c:	663b      	str	r3, [r7, #96]	; 0x60
 810539e:	68fb      	ldr	r3, [r7, #12]
 81053a0:	681b      	ldr	r3, [r3, #0]
 81053a2:	3308      	adds	r3, #8
 81053a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 81053a6:	64ba      	str	r2, [r7, #72]	; 0x48
 81053a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81053aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81053ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81053ae:	e841 2300 	strex	r3, r2, [r1]
 81053b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 81053b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81053b6:	2b00      	cmp	r3, #0
 81053b8:	d1e5      	bne.n	8105386 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 81053ba:	68fb      	ldr	r3, [r7, #12]
 81053bc:	2220      	movs	r2, #32
 81053be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 81053c2:	68fb      	ldr	r3, [r7, #12]
 81053c4:	2220      	movs	r2, #32
 81053c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81053ca:	68fb      	ldr	r3, [r7, #12]
 81053cc:	2200      	movs	r2, #0
 81053ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81053d2:	2303      	movs	r3, #3
 81053d4:	e069      	b.n	81054aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81053d6:	68fb      	ldr	r3, [r7, #12]
 81053d8:	681b      	ldr	r3, [r3, #0]
 81053da:	681b      	ldr	r3, [r3, #0]
 81053dc:	f003 0304 	and.w	r3, r3, #4
 81053e0:	2b00      	cmp	r3, #0
 81053e2:	d051      	beq.n	8105488 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	681b      	ldr	r3, [r3, #0]
 81053e8:	69db      	ldr	r3, [r3, #28]
 81053ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81053ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81053f2:	d149      	bne.n	8105488 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81053f4:	68fb      	ldr	r3, [r7, #12]
 81053f6:	681b      	ldr	r3, [r3, #0]
 81053f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81053fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81053fe:	68fb      	ldr	r3, [r7, #12]
 8105400:	681b      	ldr	r3, [r3, #0]
 8105402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105406:	e853 3f00 	ldrex	r3, [r3]
 810540a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 810540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810540e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8105412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105414:	68fb      	ldr	r3, [r7, #12]
 8105416:	681b      	ldr	r3, [r3, #0]
 8105418:	461a      	mov	r2, r3
 810541a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810541c:	637b      	str	r3, [r7, #52]	; 0x34
 810541e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8105422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105424:	e841 2300 	strex	r3, r2, [r1]
 8105428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 810542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810542c:	2b00      	cmp	r3, #0
 810542e:	d1e6      	bne.n	81053fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105430:	68fb      	ldr	r3, [r7, #12]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	3308      	adds	r3, #8
 8105436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105438:	697b      	ldr	r3, [r7, #20]
 810543a:	e853 3f00 	ldrex	r3, [r3]
 810543e:	613b      	str	r3, [r7, #16]
   return(result);
 8105440:	693b      	ldr	r3, [r7, #16]
 8105442:	f023 0301 	bic.w	r3, r3, #1
 8105446:	66bb      	str	r3, [r7, #104]	; 0x68
 8105448:	68fb      	ldr	r3, [r7, #12]
 810544a:	681b      	ldr	r3, [r3, #0]
 810544c:	3308      	adds	r3, #8
 810544e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8105450:	623a      	str	r2, [r7, #32]
 8105452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105454:	69f9      	ldr	r1, [r7, #28]
 8105456:	6a3a      	ldr	r2, [r7, #32]
 8105458:	e841 2300 	strex	r3, r2, [r1]
 810545c:	61bb      	str	r3, [r7, #24]
   return(result);
 810545e:	69bb      	ldr	r3, [r7, #24]
 8105460:	2b00      	cmp	r3, #0
 8105462:	d1e5      	bne.n	8105430 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	2220      	movs	r2, #32
 8105468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 810546c:	68fb      	ldr	r3, [r7, #12]
 810546e:	2220      	movs	r2, #32
 8105470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8105474:	68fb      	ldr	r3, [r7, #12]
 8105476:	2220      	movs	r2, #32
 8105478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810547c:	68fb      	ldr	r3, [r7, #12]
 810547e:	2200      	movs	r2, #0
 8105480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8105484:	2303      	movs	r3, #3
 8105486:	e010      	b.n	81054aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105488:	68fb      	ldr	r3, [r7, #12]
 810548a:	681b      	ldr	r3, [r3, #0]
 810548c:	69da      	ldr	r2, [r3, #28]
 810548e:	68bb      	ldr	r3, [r7, #8]
 8105490:	4013      	ands	r3, r2
 8105492:	68ba      	ldr	r2, [r7, #8]
 8105494:	429a      	cmp	r2, r3
 8105496:	bf0c      	ite	eq
 8105498:	2301      	moveq	r3, #1
 810549a:	2300      	movne	r3, #0
 810549c:	b2db      	uxtb	r3, r3
 810549e:	461a      	mov	r2, r3
 81054a0:	79fb      	ldrb	r3, [r7, #7]
 81054a2:	429a      	cmp	r2, r3
 81054a4:	f43f af46 	beq.w	8105334 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81054a8:	2300      	movs	r3, #0
}
 81054aa:	4618      	mov	r0, r3
 81054ac:	3770      	adds	r7, #112	; 0x70
 81054ae:	46bd      	mov	sp, r7
 81054b0:	bd80      	pop	{r7, pc}

081054b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81054b2:	b480      	push	{r7}
 81054b4:	b085      	sub	sp, #20
 81054b6:	af00      	add	r7, sp, #0
 81054b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81054ba:	687b      	ldr	r3, [r7, #4]
 81054bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81054c0:	2b01      	cmp	r3, #1
 81054c2:	d101      	bne.n	81054c8 <HAL_UARTEx_DisableFifoMode+0x16>
 81054c4:	2302      	movs	r3, #2
 81054c6:	e027      	b.n	8105518 <HAL_UARTEx_DisableFifoMode+0x66>
 81054c8:	687b      	ldr	r3, [r7, #4]
 81054ca:	2201      	movs	r2, #1
 81054cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	2224      	movs	r2, #36	; 0x24
 81054d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81054d8:	687b      	ldr	r3, [r7, #4]
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	681b      	ldr	r3, [r3, #0]
 81054de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81054e0:	687b      	ldr	r3, [r7, #4]
 81054e2:	681b      	ldr	r3, [r3, #0]
 81054e4:	681a      	ldr	r2, [r3, #0]
 81054e6:	687b      	ldr	r3, [r7, #4]
 81054e8:	681b      	ldr	r3, [r3, #0]
 81054ea:	f022 0201 	bic.w	r2, r2, #1
 81054ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81054f0:	68fb      	ldr	r3, [r7, #12]
 81054f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81054f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	2200      	movs	r2, #0
 81054fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81054fe:	687b      	ldr	r3, [r7, #4]
 8105500:	681b      	ldr	r3, [r3, #0]
 8105502:	68fa      	ldr	r2, [r7, #12]
 8105504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	2220      	movs	r2, #32
 810550a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810550e:	687b      	ldr	r3, [r7, #4]
 8105510:	2200      	movs	r2, #0
 8105512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105516:	2300      	movs	r3, #0
}
 8105518:	4618      	mov	r0, r3
 810551a:	3714      	adds	r7, #20
 810551c:	46bd      	mov	sp, r7
 810551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105522:	4770      	bx	lr

08105524 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8105524:	b580      	push	{r7, lr}
 8105526:	b084      	sub	sp, #16
 8105528:	af00      	add	r7, sp, #0
 810552a:	6078      	str	r0, [r7, #4]
 810552c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810552e:	687b      	ldr	r3, [r7, #4]
 8105530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105534:	2b01      	cmp	r3, #1
 8105536:	d101      	bne.n	810553c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8105538:	2302      	movs	r3, #2
 810553a:	e02d      	b.n	8105598 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810553c:	687b      	ldr	r3, [r7, #4]
 810553e:	2201      	movs	r2, #1
 8105540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8105544:	687b      	ldr	r3, [r7, #4]
 8105546:	2224      	movs	r2, #36	; 0x24
 8105548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810554c:	687b      	ldr	r3, [r7, #4]
 810554e:	681b      	ldr	r3, [r3, #0]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8105554:	687b      	ldr	r3, [r7, #4]
 8105556:	681b      	ldr	r3, [r3, #0]
 8105558:	681a      	ldr	r2, [r3, #0]
 810555a:	687b      	ldr	r3, [r7, #4]
 810555c:	681b      	ldr	r3, [r3, #0]
 810555e:	f022 0201 	bic.w	r2, r2, #1
 8105562:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8105564:	687b      	ldr	r3, [r7, #4]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	689b      	ldr	r3, [r3, #8]
 810556a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810556e:	687b      	ldr	r3, [r7, #4]
 8105570:	681b      	ldr	r3, [r3, #0]
 8105572:	683a      	ldr	r2, [r7, #0]
 8105574:	430a      	orrs	r2, r1
 8105576:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8105578:	6878      	ldr	r0, [r7, #4]
 810557a:	f000 f84f 	bl	810561c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810557e:	687b      	ldr	r3, [r7, #4]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	68fa      	ldr	r2, [r7, #12]
 8105584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	2220      	movs	r2, #32
 810558a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	2200      	movs	r2, #0
 8105592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105596:	2300      	movs	r3, #0
}
 8105598:	4618      	mov	r0, r3
 810559a:	3710      	adds	r7, #16
 810559c:	46bd      	mov	sp, r7
 810559e:	bd80      	pop	{r7, pc}

081055a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81055a0:	b580      	push	{r7, lr}
 81055a2:	b084      	sub	sp, #16
 81055a4:	af00      	add	r7, sp, #0
 81055a6:	6078      	str	r0, [r7, #4]
 81055a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81055aa:	687b      	ldr	r3, [r7, #4]
 81055ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81055b0:	2b01      	cmp	r3, #1
 81055b2:	d101      	bne.n	81055b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81055b4:	2302      	movs	r3, #2
 81055b6:	e02d      	b.n	8105614 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81055b8:	687b      	ldr	r3, [r7, #4]
 81055ba:	2201      	movs	r2, #1
 81055bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81055c0:	687b      	ldr	r3, [r7, #4]
 81055c2:	2224      	movs	r2, #36	; 0x24
 81055c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81055c8:	687b      	ldr	r3, [r7, #4]
 81055ca:	681b      	ldr	r3, [r3, #0]
 81055cc:	681b      	ldr	r3, [r3, #0]
 81055ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81055d0:	687b      	ldr	r3, [r7, #4]
 81055d2:	681b      	ldr	r3, [r3, #0]
 81055d4:	681a      	ldr	r2, [r3, #0]
 81055d6:	687b      	ldr	r3, [r7, #4]
 81055d8:	681b      	ldr	r3, [r3, #0]
 81055da:	f022 0201 	bic.w	r2, r2, #1
 81055de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81055e0:	687b      	ldr	r3, [r7, #4]
 81055e2:	681b      	ldr	r3, [r3, #0]
 81055e4:	689b      	ldr	r3, [r3, #8]
 81055e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81055ea:	687b      	ldr	r3, [r7, #4]
 81055ec:	681b      	ldr	r3, [r3, #0]
 81055ee:	683a      	ldr	r2, [r7, #0]
 81055f0:	430a      	orrs	r2, r1
 81055f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81055f4:	6878      	ldr	r0, [r7, #4]
 81055f6:	f000 f811 	bl	810561c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81055fa:	687b      	ldr	r3, [r7, #4]
 81055fc:	681b      	ldr	r3, [r3, #0]
 81055fe:	68fa      	ldr	r2, [r7, #12]
 8105600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8105602:	687b      	ldr	r3, [r7, #4]
 8105604:	2220      	movs	r2, #32
 8105606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810560a:	687b      	ldr	r3, [r7, #4]
 810560c:	2200      	movs	r2, #0
 810560e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8105612:	2300      	movs	r3, #0
}
 8105614:	4618      	mov	r0, r3
 8105616:	3710      	adds	r7, #16
 8105618:	46bd      	mov	sp, r7
 810561a:	bd80      	pop	{r7, pc}

0810561c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810561c:	b480      	push	{r7}
 810561e:	b085      	sub	sp, #20
 8105620:	af00      	add	r7, sp, #0
 8105622:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8105624:	687b      	ldr	r3, [r7, #4]
 8105626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105628:	2b00      	cmp	r3, #0
 810562a:	d108      	bne.n	810563e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810562c:	687b      	ldr	r3, [r7, #4]
 810562e:	2201      	movs	r2, #1
 8105630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8105634:	687b      	ldr	r3, [r7, #4]
 8105636:	2201      	movs	r2, #1
 8105638:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810563c:	e031      	b.n	81056a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810563e:	2310      	movs	r3, #16
 8105640:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8105642:	2310      	movs	r3, #16
 8105644:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	681b      	ldr	r3, [r3, #0]
 810564a:	689b      	ldr	r3, [r3, #8]
 810564c:	0e5b      	lsrs	r3, r3, #25
 810564e:	b2db      	uxtb	r3, r3
 8105650:	f003 0307 	and.w	r3, r3, #7
 8105654:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8105656:	687b      	ldr	r3, [r7, #4]
 8105658:	681b      	ldr	r3, [r3, #0]
 810565a:	689b      	ldr	r3, [r3, #8]
 810565c:	0f5b      	lsrs	r3, r3, #29
 810565e:	b2db      	uxtb	r3, r3
 8105660:	f003 0307 	and.w	r3, r3, #7
 8105664:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105666:	7bbb      	ldrb	r3, [r7, #14]
 8105668:	7b3a      	ldrb	r2, [r7, #12]
 810566a:	4911      	ldr	r1, [pc, #68]	; (81056b0 <UARTEx_SetNbDataToProcess+0x94>)
 810566c:	5c8a      	ldrb	r2, [r1, r2]
 810566e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8105672:	7b3a      	ldrb	r2, [r7, #12]
 8105674:	490f      	ldr	r1, [pc, #60]	; (81056b4 <UARTEx_SetNbDataToProcess+0x98>)
 8105676:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8105678:	fb93 f3f2 	sdiv	r3, r3, r2
 810567c:	b29a      	uxth	r2, r3
 810567e:	687b      	ldr	r3, [r7, #4]
 8105680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105684:	7bfb      	ldrb	r3, [r7, #15]
 8105686:	7b7a      	ldrb	r2, [r7, #13]
 8105688:	4909      	ldr	r1, [pc, #36]	; (81056b0 <UARTEx_SetNbDataToProcess+0x94>)
 810568a:	5c8a      	ldrb	r2, [r1, r2]
 810568c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8105690:	7b7a      	ldrb	r2, [r7, #13]
 8105692:	4908      	ldr	r1, [pc, #32]	; (81056b4 <UARTEx_SetNbDataToProcess+0x98>)
 8105694:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8105696:	fb93 f3f2 	sdiv	r3, r3, r2
 810569a:	b29a      	uxth	r2, r3
 810569c:	687b      	ldr	r3, [r7, #4]
 810569e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81056a2:	bf00      	nop
 81056a4:	3714      	adds	r7, #20
 81056a6:	46bd      	mov	sp, r7
 81056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81056ac:	4770      	bx	lr
 81056ae:	bf00      	nop
 81056b0:	08106790 	.word	0x08106790
 81056b4:	08106798 	.word	0x08106798

081056b8 <__errno>:
 81056b8:	4b01      	ldr	r3, [pc, #4]	; (81056c0 <__errno+0x8>)
 81056ba:	6818      	ldr	r0, [r3, #0]
 81056bc:	4770      	bx	lr
 81056be:	bf00      	nop
 81056c0:	10000010 	.word	0x10000010

081056c4 <__libc_init_array>:
 81056c4:	b570      	push	{r4, r5, r6, lr}
 81056c6:	4d0d      	ldr	r5, [pc, #52]	; (81056fc <__libc_init_array+0x38>)
 81056c8:	4c0d      	ldr	r4, [pc, #52]	; (8105700 <__libc_init_array+0x3c>)
 81056ca:	1b64      	subs	r4, r4, r5
 81056cc:	10a4      	asrs	r4, r4, #2
 81056ce:	2600      	movs	r6, #0
 81056d0:	42a6      	cmp	r6, r4
 81056d2:	d109      	bne.n	81056e8 <__libc_init_array+0x24>
 81056d4:	4d0b      	ldr	r5, [pc, #44]	; (8105704 <__libc_init_array+0x40>)
 81056d6:	4c0c      	ldr	r4, [pc, #48]	; (8105708 <__libc_init_array+0x44>)
 81056d8:	f000 ffec 	bl	81066b4 <_init>
 81056dc:	1b64      	subs	r4, r4, r5
 81056de:	10a4      	asrs	r4, r4, #2
 81056e0:	2600      	movs	r6, #0
 81056e2:	42a6      	cmp	r6, r4
 81056e4:	d105      	bne.n	81056f2 <__libc_init_array+0x2e>
 81056e6:	bd70      	pop	{r4, r5, r6, pc}
 81056e8:	f855 3b04 	ldr.w	r3, [r5], #4
 81056ec:	4798      	blx	r3
 81056ee:	3601      	adds	r6, #1
 81056f0:	e7ee      	b.n	81056d0 <__libc_init_array+0xc>
 81056f2:	f855 3b04 	ldr.w	r3, [r5], #4
 81056f6:	4798      	blx	r3
 81056f8:	3601      	adds	r6, #1
 81056fa:	e7f2      	b.n	81056e2 <__libc_init_array+0x1e>
 81056fc:	08106840 	.word	0x08106840
 8105700:	08106840 	.word	0x08106840
 8105704:	08106840 	.word	0x08106840
 8105708:	08106844 	.word	0x08106844

0810570c <memset>:
 810570c:	4402      	add	r2, r0
 810570e:	4603      	mov	r3, r0
 8105710:	4293      	cmp	r3, r2
 8105712:	d100      	bne.n	8105716 <memset+0xa>
 8105714:	4770      	bx	lr
 8105716:	f803 1b01 	strb.w	r1, [r3], #1
 810571a:	e7f9      	b.n	8105710 <memset+0x4>

0810571c <iprintf>:
 810571c:	b40f      	push	{r0, r1, r2, r3}
 810571e:	4b0a      	ldr	r3, [pc, #40]	; (8105748 <iprintf+0x2c>)
 8105720:	b513      	push	{r0, r1, r4, lr}
 8105722:	681c      	ldr	r4, [r3, #0]
 8105724:	b124      	cbz	r4, 8105730 <iprintf+0x14>
 8105726:	69a3      	ldr	r3, [r4, #24]
 8105728:	b913      	cbnz	r3, 8105730 <iprintf+0x14>
 810572a:	4620      	mov	r0, r4
 810572c:	f000 fa5e 	bl	8105bec <__sinit>
 8105730:	ab05      	add	r3, sp, #20
 8105732:	9a04      	ldr	r2, [sp, #16]
 8105734:	68a1      	ldr	r1, [r4, #8]
 8105736:	9301      	str	r3, [sp, #4]
 8105738:	4620      	mov	r0, r4
 810573a:	f000 fc2f 	bl	8105f9c <_vfiprintf_r>
 810573e:	b002      	add	sp, #8
 8105740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105744:	b004      	add	sp, #16
 8105746:	4770      	bx	lr
 8105748:	10000010 	.word	0x10000010

0810574c <_puts_r>:
 810574c:	b570      	push	{r4, r5, r6, lr}
 810574e:	460e      	mov	r6, r1
 8105750:	4605      	mov	r5, r0
 8105752:	b118      	cbz	r0, 810575c <_puts_r+0x10>
 8105754:	6983      	ldr	r3, [r0, #24]
 8105756:	b90b      	cbnz	r3, 810575c <_puts_r+0x10>
 8105758:	f000 fa48 	bl	8105bec <__sinit>
 810575c:	69ab      	ldr	r3, [r5, #24]
 810575e:	68ac      	ldr	r4, [r5, #8]
 8105760:	b913      	cbnz	r3, 8105768 <_puts_r+0x1c>
 8105762:	4628      	mov	r0, r5
 8105764:	f000 fa42 	bl	8105bec <__sinit>
 8105768:	4b2c      	ldr	r3, [pc, #176]	; (810581c <_puts_r+0xd0>)
 810576a:	429c      	cmp	r4, r3
 810576c:	d120      	bne.n	81057b0 <_puts_r+0x64>
 810576e:	686c      	ldr	r4, [r5, #4]
 8105770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105772:	07db      	lsls	r3, r3, #31
 8105774:	d405      	bmi.n	8105782 <_puts_r+0x36>
 8105776:	89a3      	ldrh	r3, [r4, #12]
 8105778:	0598      	lsls	r0, r3, #22
 810577a:	d402      	bmi.n	8105782 <_puts_r+0x36>
 810577c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810577e:	f000 fad3 	bl	8105d28 <__retarget_lock_acquire_recursive>
 8105782:	89a3      	ldrh	r3, [r4, #12]
 8105784:	0719      	lsls	r1, r3, #28
 8105786:	d51d      	bpl.n	81057c4 <_puts_r+0x78>
 8105788:	6923      	ldr	r3, [r4, #16]
 810578a:	b1db      	cbz	r3, 81057c4 <_puts_r+0x78>
 810578c:	3e01      	subs	r6, #1
 810578e:	68a3      	ldr	r3, [r4, #8]
 8105790:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8105794:	3b01      	subs	r3, #1
 8105796:	60a3      	str	r3, [r4, #8]
 8105798:	bb39      	cbnz	r1, 81057ea <_puts_r+0x9e>
 810579a:	2b00      	cmp	r3, #0
 810579c:	da38      	bge.n	8105810 <_puts_r+0xc4>
 810579e:	4622      	mov	r2, r4
 81057a0:	210a      	movs	r1, #10
 81057a2:	4628      	mov	r0, r5
 81057a4:	f000 f848 	bl	8105838 <__swbuf_r>
 81057a8:	3001      	adds	r0, #1
 81057aa:	d011      	beq.n	81057d0 <_puts_r+0x84>
 81057ac:	250a      	movs	r5, #10
 81057ae:	e011      	b.n	81057d4 <_puts_r+0x88>
 81057b0:	4b1b      	ldr	r3, [pc, #108]	; (8105820 <_puts_r+0xd4>)
 81057b2:	429c      	cmp	r4, r3
 81057b4:	d101      	bne.n	81057ba <_puts_r+0x6e>
 81057b6:	68ac      	ldr	r4, [r5, #8]
 81057b8:	e7da      	b.n	8105770 <_puts_r+0x24>
 81057ba:	4b1a      	ldr	r3, [pc, #104]	; (8105824 <_puts_r+0xd8>)
 81057bc:	429c      	cmp	r4, r3
 81057be:	bf08      	it	eq
 81057c0:	68ec      	ldreq	r4, [r5, #12]
 81057c2:	e7d5      	b.n	8105770 <_puts_r+0x24>
 81057c4:	4621      	mov	r1, r4
 81057c6:	4628      	mov	r0, r5
 81057c8:	f000 f888 	bl	81058dc <__swsetup_r>
 81057cc:	2800      	cmp	r0, #0
 81057ce:	d0dd      	beq.n	810578c <_puts_r+0x40>
 81057d0:	f04f 35ff 	mov.w	r5, #4294967295
 81057d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81057d6:	07da      	lsls	r2, r3, #31
 81057d8:	d405      	bmi.n	81057e6 <_puts_r+0x9a>
 81057da:	89a3      	ldrh	r3, [r4, #12]
 81057dc:	059b      	lsls	r3, r3, #22
 81057de:	d402      	bmi.n	81057e6 <_puts_r+0x9a>
 81057e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81057e2:	f000 faa2 	bl	8105d2a <__retarget_lock_release_recursive>
 81057e6:	4628      	mov	r0, r5
 81057e8:	bd70      	pop	{r4, r5, r6, pc}
 81057ea:	2b00      	cmp	r3, #0
 81057ec:	da04      	bge.n	81057f8 <_puts_r+0xac>
 81057ee:	69a2      	ldr	r2, [r4, #24]
 81057f0:	429a      	cmp	r2, r3
 81057f2:	dc06      	bgt.n	8105802 <_puts_r+0xb6>
 81057f4:	290a      	cmp	r1, #10
 81057f6:	d004      	beq.n	8105802 <_puts_r+0xb6>
 81057f8:	6823      	ldr	r3, [r4, #0]
 81057fa:	1c5a      	adds	r2, r3, #1
 81057fc:	6022      	str	r2, [r4, #0]
 81057fe:	7019      	strb	r1, [r3, #0]
 8105800:	e7c5      	b.n	810578e <_puts_r+0x42>
 8105802:	4622      	mov	r2, r4
 8105804:	4628      	mov	r0, r5
 8105806:	f000 f817 	bl	8105838 <__swbuf_r>
 810580a:	3001      	adds	r0, #1
 810580c:	d1bf      	bne.n	810578e <_puts_r+0x42>
 810580e:	e7df      	b.n	81057d0 <_puts_r+0x84>
 8105810:	6823      	ldr	r3, [r4, #0]
 8105812:	250a      	movs	r5, #10
 8105814:	1c5a      	adds	r2, r3, #1
 8105816:	6022      	str	r2, [r4, #0]
 8105818:	701d      	strb	r5, [r3, #0]
 810581a:	e7db      	b.n	81057d4 <_puts_r+0x88>
 810581c:	081067c4 	.word	0x081067c4
 8105820:	081067e4 	.word	0x081067e4
 8105824:	081067a4 	.word	0x081067a4

08105828 <puts>:
 8105828:	4b02      	ldr	r3, [pc, #8]	; (8105834 <puts+0xc>)
 810582a:	4601      	mov	r1, r0
 810582c:	6818      	ldr	r0, [r3, #0]
 810582e:	f7ff bf8d 	b.w	810574c <_puts_r>
 8105832:	bf00      	nop
 8105834:	10000010 	.word	0x10000010

08105838 <__swbuf_r>:
 8105838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810583a:	460e      	mov	r6, r1
 810583c:	4614      	mov	r4, r2
 810583e:	4605      	mov	r5, r0
 8105840:	b118      	cbz	r0, 810584a <__swbuf_r+0x12>
 8105842:	6983      	ldr	r3, [r0, #24]
 8105844:	b90b      	cbnz	r3, 810584a <__swbuf_r+0x12>
 8105846:	f000 f9d1 	bl	8105bec <__sinit>
 810584a:	4b21      	ldr	r3, [pc, #132]	; (81058d0 <__swbuf_r+0x98>)
 810584c:	429c      	cmp	r4, r3
 810584e:	d12b      	bne.n	81058a8 <__swbuf_r+0x70>
 8105850:	686c      	ldr	r4, [r5, #4]
 8105852:	69a3      	ldr	r3, [r4, #24]
 8105854:	60a3      	str	r3, [r4, #8]
 8105856:	89a3      	ldrh	r3, [r4, #12]
 8105858:	071a      	lsls	r2, r3, #28
 810585a:	d52f      	bpl.n	81058bc <__swbuf_r+0x84>
 810585c:	6923      	ldr	r3, [r4, #16]
 810585e:	b36b      	cbz	r3, 81058bc <__swbuf_r+0x84>
 8105860:	6923      	ldr	r3, [r4, #16]
 8105862:	6820      	ldr	r0, [r4, #0]
 8105864:	1ac0      	subs	r0, r0, r3
 8105866:	6963      	ldr	r3, [r4, #20]
 8105868:	b2f6      	uxtb	r6, r6
 810586a:	4283      	cmp	r3, r0
 810586c:	4637      	mov	r7, r6
 810586e:	dc04      	bgt.n	810587a <__swbuf_r+0x42>
 8105870:	4621      	mov	r1, r4
 8105872:	4628      	mov	r0, r5
 8105874:	f000 f926 	bl	8105ac4 <_fflush_r>
 8105878:	bb30      	cbnz	r0, 81058c8 <__swbuf_r+0x90>
 810587a:	68a3      	ldr	r3, [r4, #8]
 810587c:	3b01      	subs	r3, #1
 810587e:	60a3      	str	r3, [r4, #8]
 8105880:	6823      	ldr	r3, [r4, #0]
 8105882:	1c5a      	adds	r2, r3, #1
 8105884:	6022      	str	r2, [r4, #0]
 8105886:	701e      	strb	r6, [r3, #0]
 8105888:	6963      	ldr	r3, [r4, #20]
 810588a:	3001      	adds	r0, #1
 810588c:	4283      	cmp	r3, r0
 810588e:	d004      	beq.n	810589a <__swbuf_r+0x62>
 8105890:	89a3      	ldrh	r3, [r4, #12]
 8105892:	07db      	lsls	r3, r3, #31
 8105894:	d506      	bpl.n	81058a4 <__swbuf_r+0x6c>
 8105896:	2e0a      	cmp	r6, #10
 8105898:	d104      	bne.n	81058a4 <__swbuf_r+0x6c>
 810589a:	4621      	mov	r1, r4
 810589c:	4628      	mov	r0, r5
 810589e:	f000 f911 	bl	8105ac4 <_fflush_r>
 81058a2:	b988      	cbnz	r0, 81058c8 <__swbuf_r+0x90>
 81058a4:	4638      	mov	r0, r7
 81058a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81058a8:	4b0a      	ldr	r3, [pc, #40]	; (81058d4 <__swbuf_r+0x9c>)
 81058aa:	429c      	cmp	r4, r3
 81058ac:	d101      	bne.n	81058b2 <__swbuf_r+0x7a>
 81058ae:	68ac      	ldr	r4, [r5, #8]
 81058b0:	e7cf      	b.n	8105852 <__swbuf_r+0x1a>
 81058b2:	4b09      	ldr	r3, [pc, #36]	; (81058d8 <__swbuf_r+0xa0>)
 81058b4:	429c      	cmp	r4, r3
 81058b6:	bf08      	it	eq
 81058b8:	68ec      	ldreq	r4, [r5, #12]
 81058ba:	e7ca      	b.n	8105852 <__swbuf_r+0x1a>
 81058bc:	4621      	mov	r1, r4
 81058be:	4628      	mov	r0, r5
 81058c0:	f000 f80c 	bl	81058dc <__swsetup_r>
 81058c4:	2800      	cmp	r0, #0
 81058c6:	d0cb      	beq.n	8105860 <__swbuf_r+0x28>
 81058c8:	f04f 37ff 	mov.w	r7, #4294967295
 81058cc:	e7ea      	b.n	81058a4 <__swbuf_r+0x6c>
 81058ce:	bf00      	nop
 81058d0:	081067c4 	.word	0x081067c4
 81058d4:	081067e4 	.word	0x081067e4
 81058d8:	081067a4 	.word	0x081067a4

081058dc <__swsetup_r>:
 81058dc:	4b32      	ldr	r3, [pc, #200]	; (81059a8 <__swsetup_r+0xcc>)
 81058de:	b570      	push	{r4, r5, r6, lr}
 81058e0:	681d      	ldr	r5, [r3, #0]
 81058e2:	4606      	mov	r6, r0
 81058e4:	460c      	mov	r4, r1
 81058e6:	b125      	cbz	r5, 81058f2 <__swsetup_r+0x16>
 81058e8:	69ab      	ldr	r3, [r5, #24]
 81058ea:	b913      	cbnz	r3, 81058f2 <__swsetup_r+0x16>
 81058ec:	4628      	mov	r0, r5
 81058ee:	f000 f97d 	bl	8105bec <__sinit>
 81058f2:	4b2e      	ldr	r3, [pc, #184]	; (81059ac <__swsetup_r+0xd0>)
 81058f4:	429c      	cmp	r4, r3
 81058f6:	d10f      	bne.n	8105918 <__swsetup_r+0x3c>
 81058f8:	686c      	ldr	r4, [r5, #4]
 81058fa:	89a3      	ldrh	r3, [r4, #12]
 81058fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8105900:	0719      	lsls	r1, r3, #28
 8105902:	d42c      	bmi.n	810595e <__swsetup_r+0x82>
 8105904:	06dd      	lsls	r5, r3, #27
 8105906:	d411      	bmi.n	810592c <__swsetup_r+0x50>
 8105908:	2309      	movs	r3, #9
 810590a:	6033      	str	r3, [r6, #0]
 810590c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8105910:	81a3      	strh	r3, [r4, #12]
 8105912:	f04f 30ff 	mov.w	r0, #4294967295
 8105916:	e03e      	b.n	8105996 <__swsetup_r+0xba>
 8105918:	4b25      	ldr	r3, [pc, #148]	; (81059b0 <__swsetup_r+0xd4>)
 810591a:	429c      	cmp	r4, r3
 810591c:	d101      	bne.n	8105922 <__swsetup_r+0x46>
 810591e:	68ac      	ldr	r4, [r5, #8]
 8105920:	e7eb      	b.n	81058fa <__swsetup_r+0x1e>
 8105922:	4b24      	ldr	r3, [pc, #144]	; (81059b4 <__swsetup_r+0xd8>)
 8105924:	429c      	cmp	r4, r3
 8105926:	bf08      	it	eq
 8105928:	68ec      	ldreq	r4, [r5, #12]
 810592a:	e7e6      	b.n	81058fa <__swsetup_r+0x1e>
 810592c:	0758      	lsls	r0, r3, #29
 810592e:	d512      	bpl.n	8105956 <__swsetup_r+0x7a>
 8105930:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105932:	b141      	cbz	r1, 8105946 <__swsetup_r+0x6a>
 8105934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105938:	4299      	cmp	r1, r3
 810593a:	d002      	beq.n	8105942 <__swsetup_r+0x66>
 810593c:	4630      	mov	r0, r6
 810593e:	f000 fa59 	bl	8105df4 <_free_r>
 8105942:	2300      	movs	r3, #0
 8105944:	6363      	str	r3, [r4, #52]	; 0x34
 8105946:	89a3      	ldrh	r3, [r4, #12]
 8105948:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810594c:	81a3      	strh	r3, [r4, #12]
 810594e:	2300      	movs	r3, #0
 8105950:	6063      	str	r3, [r4, #4]
 8105952:	6923      	ldr	r3, [r4, #16]
 8105954:	6023      	str	r3, [r4, #0]
 8105956:	89a3      	ldrh	r3, [r4, #12]
 8105958:	f043 0308 	orr.w	r3, r3, #8
 810595c:	81a3      	strh	r3, [r4, #12]
 810595e:	6923      	ldr	r3, [r4, #16]
 8105960:	b94b      	cbnz	r3, 8105976 <__swsetup_r+0x9a>
 8105962:	89a3      	ldrh	r3, [r4, #12]
 8105964:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8105968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810596c:	d003      	beq.n	8105976 <__swsetup_r+0x9a>
 810596e:	4621      	mov	r1, r4
 8105970:	4630      	mov	r0, r6
 8105972:	f000 f9ff 	bl	8105d74 <__smakebuf_r>
 8105976:	89a0      	ldrh	r0, [r4, #12]
 8105978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810597c:	f010 0301 	ands.w	r3, r0, #1
 8105980:	d00a      	beq.n	8105998 <__swsetup_r+0xbc>
 8105982:	2300      	movs	r3, #0
 8105984:	60a3      	str	r3, [r4, #8]
 8105986:	6963      	ldr	r3, [r4, #20]
 8105988:	425b      	negs	r3, r3
 810598a:	61a3      	str	r3, [r4, #24]
 810598c:	6923      	ldr	r3, [r4, #16]
 810598e:	b943      	cbnz	r3, 81059a2 <__swsetup_r+0xc6>
 8105990:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8105994:	d1ba      	bne.n	810590c <__swsetup_r+0x30>
 8105996:	bd70      	pop	{r4, r5, r6, pc}
 8105998:	0781      	lsls	r1, r0, #30
 810599a:	bf58      	it	pl
 810599c:	6963      	ldrpl	r3, [r4, #20]
 810599e:	60a3      	str	r3, [r4, #8]
 81059a0:	e7f4      	b.n	810598c <__swsetup_r+0xb0>
 81059a2:	2000      	movs	r0, #0
 81059a4:	e7f7      	b.n	8105996 <__swsetup_r+0xba>
 81059a6:	bf00      	nop
 81059a8:	10000010 	.word	0x10000010
 81059ac:	081067c4 	.word	0x081067c4
 81059b0:	081067e4 	.word	0x081067e4
 81059b4:	081067a4 	.word	0x081067a4

081059b8 <__sflush_r>:
 81059b8:	898a      	ldrh	r2, [r1, #12]
 81059ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81059be:	4605      	mov	r5, r0
 81059c0:	0710      	lsls	r0, r2, #28
 81059c2:	460c      	mov	r4, r1
 81059c4:	d458      	bmi.n	8105a78 <__sflush_r+0xc0>
 81059c6:	684b      	ldr	r3, [r1, #4]
 81059c8:	2b00      	cmp	r3, #0
 81059ca:	dc05      	bgt.n	81059d8 <__sflush_r+0x20>
 81059cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81059ce:	2b00      	cmp	r3, #0
 81059d0:	dc02      	bgt.n	81059d8 <__sflush_r+0x20>
 81059d2:	2000      	movs	r0, #0
 81059d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81059d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81059da:	2e00      	cmp	r6, #0
 81059dc:	d0f9      	beq.n	81059d2 <__sflush_r+0x1a>
 81059de:	2300      	movs	r3, #0
 81059e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81059e4:	682f      	ldr	r7, [r5, #0]
 81059e6:	602b      	str	r3, [r5, #0]
 81059e8:	d032      	beq.n	8105a50 <__sflush_r+0x98>
 81059ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81059ec:	89a3      	ldrh	r3, [r4, #12]
 81059ee:	075a      	lsls	r2, r3, #29
 81059f0:	d505      	bpl.n	81059fe <__sflush_r+0x46>
 81059f2:	6863      	ldr	r3, [r4, #4]
 81059f4:	1ac0      	subs	r0, r0, r3
 81059f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81059f8:	b10b      	cbz	r3, 81059fe <__sflush_r+0x46>
 81059fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81059fc:	1ac0      	subs	r0, r0, r3
 81059fe:	2300      	movs	r3, #0
 8105a00:	4602      	mov	r2, r0
 8105a02:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8105a04:	6a21      	ldr	r1, [r4, #32]
 8105a06:	4628      	mov	r0, r5
 8105a08:	47b0      	blx	r6
 8105a0a:	1c43      	adds	r3, r0, #1
 8105a0c:	89a3      	ldrh	r3, [r4, #12]
 8105a0e:	d106      	bne.n	8105a1e <__sflush_r+0x66>
 8105a10:	6829      	ldr	r1, [r5, #0]
 8105a12:	291d      	cmp	r1, #29
 8105a14:	d82c      	bhi.n	8105a70 <__sflush_r+0xb8>
 8105a16:	4a2a      	ldr	r2, [pc, #168]	; (8105ac0 <__sflush_r+0x108>)
 8105a18:	40ca      	lsrs	r2, r1
 8105a1a:	07d6      	lsls	r6, r2, #31
 8105a1c:	d528      	bpl.n	8105a70 <__sflush_r+0xb8>
 8105a1e:	2200      	movs	r2, #0
 8105a20:	6062      	str	r2, [r4, #4]
 8105a22:	04d9      	lsls	r1, r3, #19
 8105a24:	6922      	ldr	r2, [r4, #16]
 8105a26:	6022      	str	r2, [r4, #0]
 8105a28:	d504      	bpl.n	8105a34 <__sflush_r+0x7c>
 8105a2a:	1c42      	adds	r2, r0, #1
 8105a2c:	d101      	bne.n	8105a32 <__sflush_r+0x7a>
 8105a2e:	682b      	ldr	r3, [r5, #0]
 8105a30:	b903      	cbnz	r3, 8105a34 <__sflush_r+0x7c>
 8105a32:	6560      	str	r0, [r4, #84]	; 0x54
 8105a34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8105a36:	602f      	str	r7, [r5, #0]
 8105a38:	2900      	cmp	r1, #0
 8105a3a:	d0ca      	beq.n	81059d2 <__sflush_r+0x1a>
 8105a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8105a40:	4299      	cmp	r1, r3
 8105a42:	d002      	beq.n	8105a4a <__sflush_r+0x92>
 8105a44:	4628      	mov	r0, r5
 8105a46:	f000 f9d5 	bl	8105df4 <_free_r>
 8105a4a:	2000      	movs	r0, #0
 8105a4c:	6360      	str	r0, [r4, #52]	; 0x34
 8105a4e:	e7c1      	b.n	81059d4 <__sflush_r+0x1c>
 8105a50:	6a21      	ldr	r1, [r4, #32]
 8105a52:	2301      	movs	r3, #1
 8105a54:	4628      	mov	r0, r5
 8105a56:	47b0      	blx	r6
 8105a58:	1c41      	adds	r1, r0, #1
 8105a5a:	d1c7      	bne.n	81059ec <__sflush_r+0x34>
 8105a5c:	682b      	ldr	r3, [r5, #0]
 8105a5e:	2b00      	cmp	r3, #0
 8105a60:	d0c4      	beq.n	81059ec <__sflush_r+0x34>
 8105a62:	2b1d      	cmp	r3, #29
 8105a64:	d001      	beq.n	8105a6a <__sflush_r+0xb2>
 8105a66:	2b16      	cmp	r3, #22
 8105a68:	d101      	bne.n	8105a6e <__sflush_r+0xb6>
 8105a6a:	602f      	str	r7, [r5, #0]
 8105a6c:	e7b1      	b.n	81059d2 <__sflush_r+0x1a>
 8105a6e:	89a3      	ldrh	r3, [r4, #12]
 8105a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105a74:	81a3      	strh	r3, [r4, #12]
 8105a76:	e7ad      	b.n	81059d4 <__sflush_r+0x1c>
 8105a78:	690f      	ldr	r7, [r1, #16]
 8105a7a:	2f00      	cmp	r7, #0
 8105a7c:	d0a9      	beq.n	81059d2 <__sflush_r+0x1a>
 8105a7e:	0793      	lsls	r3, r2, #30
 8105a80:	680e      	ldr	r6, [r1, #0]
 8105a82:	bf08      	it	eq
 8105a84:	694b      	ldreq	r3, [r1, #20]
 8105a86:	600f      	str	r7, [r1, #0]
 8105a88:	bf18      	it	ne
 8105a8a:	2300      	movne	r3, #0
 8105a8c:	eba6 0807 	sub.w	r8, r6, r7
 8105a90:	608b      	str	r3, [r1, #8]
 8105a92:	f1b8 0f00 	cmp.w	r8, #0
 8105a96:	dd9c      	ble.n	81059d2 <__sflush_r+0x1a>
 8105a98:	6a21      	ldr	r1, [r4, #32]
 8105a9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8105a9c:	4643      	mov	r3, r8
 8105a9e:	463a      	mov	r2, r7
 8105aa0:	4628      	mov	r0, r5
 8105aa2:	47b0      	blx	r6
 8105aa4:	2800      	cmp	r0, #0
 8105aa6:	dc06      	bgt.n	8105ab6 <__sflush_r+0xfe>
 8105aa8:	89a3      	ldrh	r3, [r4, #12]
 8105aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8105aae:	81a3      	strh	r3, [r4, #12]
 8105ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8105ab4:	e78e      	b.n	81059d4 <__sflush_r+0x1c>
 8105ab6:	4407      	add	r7, r0
 8105ab8:	eba8 0800 	sub.w	r8, r8, r0
 8105abc:	e7e9      	b.n	8105a92 <__sflush_r+0xda>
 8105abe:	bf00      	nop
 8105ac0:	20400001 	.word	0x20400001

08105ac4 <_fflush_r>:
 8105ac4:	b538      	push	{r3, r4, r5, lr}
 8105ac6:	690b      	ldr	r3, [r1, #16]
 8105ac8:	4605      	mov	r5, r0
 8105aca:	460c      	mov	r4, r1
 8105acc:	b913      	cbnz	r3, 8105ad4 <_fflush_r+0x10>
 8105ace:	2500      	movs	r5, #0
 8105ad0:	4628      	mov	r0, r5
 8105ad2:	bd38      	pop	{r3, r4, r5, pc}
 8105ad4:	b118      	cbz	r0, 8105ade <_fflush_r+0x1a>
 8105ad6:	6983      	ldr	r3, [r0, #24]
 8105ad8:	b90b      	cbnz	r3, 8105ade <_fflush_r+0x1a>
 8105ada:	f000 f887 	bl	8105bec <__sinit>
 8105ade:	4b14      	ldr	r3, [pc, #80]	; (8105b30 <_fflush_r+0x6c>)
 8105ae0:	429c      	cmp	r4, r3
 8105ae2:	d11b      	bne.n	8105b1c <_fflush_r+0x58>
 8105ae4:	686c      	ldr	r4, [r5, #4]
 8105ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8105aea:	2b00      	cmp	r3, #0
 8105aec:	d0ef      	beq.n	8105ace <_fflush_r+0xa>
 8105aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8105af0:	07d0      	lsls	r0, r2, #31
 8105af2:	d404      	bmi.n	8105afe <_fflush_r+0x3a>
 8105af4:	0599      	lsls	r1, r3, #22
 8105af6:	d402      	bmi.n	8105afe <_fflush_r+0x3a>
 8105af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105afa:	f000 f915 	bl	8105d28 <__retarget_lock_acquire_recursive>
 8105afe:	4628      	mov	r0, r5
 8105b00:	4621      	mov	r1, r4
 8105b02:	f7ff ff59 	bl	81059b8 <__sflush_r>
 8105b06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8105b08:	07da      	lsls	r2, r3, #31
 8105b0a:	4605      	mov	r5, r0
 8105b0c:	d4e0      	bmi.n	8105ad0 <_fflush_r+0xc>
 8105b0e:	89a3      	ldrh	r3, [r4, #12]
 8105b10:	059b      	lsls	r3, r3, #22
 8105b12:	d4dd      	bmi.n	8105ad0 <_fflush_r+0xc>
 8105b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8105b16:	f000 f908 	bl	8105d2a <__retarget_lock_release_recursive>
 8105b1a:	e7d9      	b.n	8105ad0 <_fflush_r+0xc>
 8105b1c:	4b05      	ldr	r3, [pc, #20]	; (8105b34 <_fflush_r+0x70>)
 8105b1e:	429c      	cmp	r4, r3
 8105b20:	d101      	bne.n	8105b26 <_fflush_r+0x62>
 8105b22:	68ac      	ldr	r4, [r5, #8]
 8105b24:	e7df      	b.n	8105ae6 <_fflush_r+0x22>
 8105b26:	4b04      	ldr	r3, [pc, #16]	; (8105b38 <_fflush_r+0x74>)
 8105b28:	429c      	cmp	r4, r3
 8105b2a:	bf08      	it	eq
 8105b2c:	68ec      	ldreq	r4, [r5, #12]
 8105b2e:	e7da      	b.n	8105ae6 <_fflush_r+0x22>
 8105b30:	081067c4 	.word	0x081067c4
 8105b34:	081067e4 	.word	0x081067e4
 8105b38:	081067a4 	.word	0x081067a4

08105b3c <std>:
 8105b3c:	2300      	movs	r3, #0
 8105b3e:	b510      	push	{r4, lr}
 8105b40:	4604      	mov	r4, r0
 8105b42:	e9c0 3300 	strd	r3, r3, [r0]
 8105b46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8105b4a:	6083      	str	r3, [r0, #8]
 8105b4c:	8181      	strh	r1, [r0, #12]
 8105b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8105b50:	81c2      	strh	r2, [r0, #14]
 8105b52:	6183      	str	r3, [r0, #24]
 8105b54:	4619      	mov	r1, r3
 8105b56:	2208      	movs	r2, #8
 8105b58:	305c      	adds	r0, #92	; 0x5c
 8105b5a:	f7ff fdd7 	bl	810570c <memset>
 8105b5e:	4b05      	ldr	r3, [pc, #20]	; (8105b74 <std+0x38>)
 8105b60:	6263      	str	r3, [r4, #36]	; 0x24
 8105b62:	4b05      	ldr	r3, [pc, #20]	; (8105b78 <std+0x3c>)
 8105b64:	62a3      	str	r3, [r4, #40]	; 0x28
 8105b66:	4b05      	ldr	r3, [pc, #20]	; (8105b7c <std+0x40>)
 8105b68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8105b6a:	4b05      	ldr	r3, [pc, #20]	; (8105b80 <std+0x44>)
 8105b6c:	6224      	str	r4, [r4, #32]
 8105b6e:	6323      	str	r3, [r4, #48]	; 0x30
 8105b70:	bd10      	pop	{r4, pc}
 8105b72:	bf00      	nop
 8105b74:	08106545 	.word	0x08106545
 8105b78:	08106567 	.word	0x08106567
 8105b7c:	0810659f 	.word	0x0810659f
 8105b80:	081065c3 	.word	0x081065c3

08105b84 <_cleanup_r>:
 8105b84:	4901      	ldr	r1, [pc, #4]	; (8105b8c <_cleanup_r+0x8>)
 8105b86:	f000 b8af 	b.w	8105ce8 <_fwalk_reent>
 8105b8a:	bf00      	nop
 8105b8c:	08105ac5 	.word	0x08105ac5

08105b90 <__sfmoreglue>:
 8105b90:	b570      	push	{r4, r5, r6, lr}
 8105b92:	1e4a      	subs	r2, r1, #1
 8105b94:	2568      	movs	r5, #104	; 0x68
 8105b96:	4355      	muls	r5, r2
 8105b98:	460e      	mov	r6, r1
 8105b9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8105b9e:	f000 f979 	bl	8105e94 <_malloc_r>
 8105ba2:	4604      	mov	r4, r0
 8105ba4:	b140      	cbz	r0, 8105bb8 <__sfmoreglue+0x28>
 8105ba6:	2100      	movs	r1, #0
 8105ba8:	e9c0 1600 	strd	r1, r6, [r0]
 8105bac:	300c      	adds	r0, #12
 8105bae:	60a0      	str	r0, [r4, #8]
 8105bb0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8105bb4:	f7ff fdaa 	bl	810570c <memset>
 8105bb8:	4620      	mov	r0, r4
 8105bba:	bd70      	pop	{r4, r5, r6, pc}

08105bbc <__sfp_lock_acquire>:
 8105bbc:	4801      	ldr	r0, [pc, #4]	; (8105bc4 <__sfp_lock_acquire+0x8>)
 8105bbe:	f000 b8b3 	b.w	8105d28 <__retarget_lock_acquire_recursive>
 8105bc2:	bf00      	nop
 8105bc4:	1000027c 	.word	0x1000027c

08105bc8 <__sfp_lock_release>:
 8105bc8:	4801      	ldr	r0, [pc, #4]	; (8105bd0 <__sfp_lock_release+0x8>)
 8105bca:	f000 b8ae 	b.w	8105d2a <__retarget_lock_release_recursive>
 8105bce:	bf00      	nop
 8105bd0:	1000027c 	.word	0x1000027c

08105bd4 <__sinit_lock_acquire>:
 8105bd4:	4801      	ldr	r0, [pc, #4]	; (8105bdc <__sinit_lock_acquire+0x8>)
 8105bd6:	f000 b8a7 	b.w	8105d28 <__retarget_lock_acquire_recursive>
 8105bda:	bf00      	nop
 8105bdc:	10000277 	.word	0x10000277

08105be0 <__sinit_lock_release>:
 8105be0:	4801      	ldr	r0, [pc, #4]	; (8105be8 <__sinit_lock_release+0x8>)
 8105be2:	f000 b8a2 	b.w	8105d2a <__retarget_lock_release_recursive>
 8105be6:	bf00      	nop
 8105be8:	10000277 	.word	0x10000277

08105bec <__sinit>:
 8105bec:	b510      	push	{r4, lr}
 8105bee:	4604      	mov	r4, r0
 8105bf0:	f7ff fff0 	bl	8105bd4 <__sinit_lock_acquire>
 8105bf4:	69a3      	ldr	r3, [r4, #24]
 8105bf6:	b11b      	cbz	r3, 8105c00 <__sinit+0x14>
 8105bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105bfc:	f7ff bff0 	b.w	8105be0 <__sinit_lock_release>
 8105c00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8105c04:	6523      	str	r3, [r4, #80]	; 0x50
 8105c06:	4b13      	ldr	r3, [pc, #76]	; (8105c54 <__sinit+0x68>)
 8105c08:	4a13      	ldr	r2, [pc, #76]	; (8105c58 <__sinit+0x6c>)
 8105c0a:	681b      	ldr	r3, [r3, #0]
 8105c0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8105c0e:	42a3      	cmp	r3, r4
 8105c10:	bf04      	itt	eq
 8105c12:	2301      	moveq	r3, #1
 8105c14:	61a3      	streq	r3, [r4, #24]
 8105c16:	4620      	mov	r0, r4
 8105c18:	f000 f820 	bl	8105c5c <__sfp>
 8105c1c:	6060      	str	r0, [r4, #4]
 8105c1e:	4620      	mov	r0, r4
 8105c20:	f000 f81c 	bl	8105c5c <__sfp>
 8105c24:	60a0      	str	r0, [r4, #8]
 8105c26:	4620      	mov	r0, r4
 8105c28:	f000 f818 	bl	8105c5c <__sfp>
 8105c2c:	2200      	movs	r2, #0
 8105c2e:	60e0      	str	r0, [r4, #12]
 8105c30:	2104      	movs	r1, #4
 8105c32:	6860      	ldr	r0, [r4, #4]
 8105c34:	f7ff ff82 	bl	8105b3c <std>
 8105c38:	68a0      	ldr	r0, [r4, #8]
 8105c3a:	2201      	movs	r2, #1
 8105c3c:	2109      	movs	r1, #9
 8105c3e:	f7ff ff7d 	bl	8105b3c <std>
 8105c42:	68e0      	ldr	r0, [r4, #12]
 8105c44:	2202      	movs	r2, #2
 8105c46:	2112      	movs	r1, #18
 8105c48:	f7ff ff78 	bl	8105b3c <std>
 8105c4c:	2301      	movs	r3, #1
 8105c4e:	61a3      	str	r3, [r4, #24]
 8105c50:	e7d2      	b.n	8105bf8 <__sinit+0xc>
 8105c52:	bf00      	nop
 8105c54:	081067a0 	.word	0x081067a0
 8105c58:	08105b85 	.word	0x08105b85

08105c5c <__sfp>:
 8105c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105c5e:	4607      	mov	r7, r0
 8105c60:	f7ff ffac 	bl	8105bbc <__sfp_lock_acquire>
 8105c64:	4b1e      	ldr	r3, [pc, #120]	; (8105ce0 <__sfp+0x84>)
 8105c66:	681e      	ldr	r6, [r3, #0]
 8105c68:	69b3      	ldr	r3, [r6, #24]
 8105c6a:	b913      	cbnz	r3, 8105c72 <__sfp+0x16>
 8105c6c:	4630      	mov	r0, r6
 8105c6e:	f7ff ffbd 	bl	8105bec <__sinit>
 8105c72:	3648      	adds	r6, #72	; 0x48
 8105c74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8105c78:	3b01      	subs	r3, #1
 8105c7a:	d503      	bpl.n	8105c84 <__sfp+0x28>
 8105c7c:	6833      	ldr	r3, [r6, #0]
 8105c7e:	b30b      	cbz	r3, 8105cc4 <__sfp+0x68>
 8105c80:	6836      	ldr	r6, [r6, #0]
 8105c82:	e7f7      	b.n	8105c74 <__sfp+0x18>
 8105c84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8105c88:	b9d5      	cbnz	r5, 8105cc0 <__sfp+0x64>
 8105c8a:	4b16      	ldr	r3, [pc, #88]	; (8105ce4 <__sfp+0x88>)
 8105c8c:	60e3      	str	r3, [r4, #12]
 8105c8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8105c92:	6665      	str	r5, [r4, #100]	; 0x64
 8105c94:	f000 f847 	bl	8105d26 <__retarget_lock_init_recursive>
 8105c98:	f7ff ff96 	bl	8105bc8 <__sfp_lock_release>
 8105c9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8105ca0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8105ca4:	6025      	str	r5, [r4, #0]
 8105ca6:	61a5      	str	r5, [r4, #24]
 8105ca8:	2208      	movs	r2, #8
 8105caa:	4629      	mov	r1, r5
 8105cac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8105cb0:	f7ff fd2c 	bl	810570c <memset>
 8105cb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8105cb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8105cbc:	4620      	mov	r0, r4
 8105cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8105cc0:	3468      	adds	r4, #104	; 0x68
 8105cc2:	e7d9      	b.n	8105c78 <__sfp+0x1c>
 8105cc4:	2104      	movs	r1, #4
 8105cc6:	4638      	mov	r0, r7
 8105cc8:	f7ff ff62 	bl	8105b90 <__sfmoreglue>
 8105ccc:	4604      	mov	r4, r0
 8105cce:	6030      	str	r0, [r6, #0]
 8105cd0:	2800      	cmp	r0, #0
 8105cd2:	d1d5      	bne.n	8105c80 <__sfp+0x24>
 8105cd4:	f7ff ff78 	bl	8105bc8 <__sfp_lock_release>
 8105cd8:	230c      	movs	r3, #12
 8105cda:	603b      	str	r3, [r7, #0]
 8105cdc:	e7ee      	b.n	8105cbc <__sfp+0x60>
 8105cde:	bf00      	nop
 8105ce0:	081067a0 	.word	0x081067a0
 8105ce4:	ffff0001 	.word	0xffff0001

08105ce8 <_fwalk_reent>:
 8105ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8105cec:	4606      	mov	r6, r0
 8105cee:	4688      	mov	r8, r1
 8105cf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8105cf4:	2700      	movs	r7, #0
 8105cf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8105cfa:	f1b9 0901 	subs.w	r9, r9, #1
 8105cfe:	d505      	bpl.n	8105d0c <_fwalk_reent+0x24>
 8105d00:	6824      	ldr	r4, [r4, #0]
 8105d02:	2c00      	cmp	r4, #0
 8105d04:	d1f7      	bne.n	8105cf6 <_fwalk_reent+0xe>
 8105d06:	4638      	mov	r0, r7
 8105d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8105d0c:	89ab      	ldrh	r3, [r5, #12]
 8105d0e:	2b01      	cmp	r3, #1
 8105d10:	d907      	bls.n	8105d22 <_fwalk_reent+0x3a>
 8105d12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8105d16:	3301      	adds	r3, #1
 8105d18:	d003      	beq.n	8105d22 <_fwalk_reent+0x3a>
 8105d1a:	4629      	mov	r1, r5
 8105d1c:	4630      	mov	r0, r6
 8105d1e:	47c0      	blx	r8
 8105d20:	4307      	orrs	r7, r0
 8105d22:	3568      	adds	r5, #104	; 0x68
 8105d24:	e7e9      	b.n	8105cfa <_fwalk_reent+0x12>

08105d26 <__retarget_lock_init_recursive>:
 8105d26:	4770      	bx	lr

08105d28 <__retarget_lock_acquire_recursive>:
 8105d28:	4770      	bx	lr

08105d2a <__retarget_lock_release_recursive>:
 8105d2a:	4770      	bx	lr

08105d2c <__swhatbuf_r>:
 8105d2c:	b570      	push	{r4, r5, r6, lr}
 8105d2e:	460e      	mov	r6, r1
 8105d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8105d34:	2900      	cmp	r1, #0
 8105d36:	b096      	sub	sp, #88	; 0x58
 8105d38:	4614      	mov	r4, r2
 8105d3a:	461d      	mov	r5, r3
 8105d3c:	da07      	bge.n	8105d4e <__swhatbuf_r+0x22>
 8105d3e:	2300      	movs	r3, #0
 8105d40:	602b      	str	r3, [r5, #0]
 8105d42:	89b3      	ldrh	r3, [r6, #12]
 8105d44:	061a      	lsls	r2, r3, #24
 8105d46:	d410      	bmi.n	8105d6a <__swhatbuf_r+0x3e>
 8105d48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8105d4c:	e00e      	b.n	8105d6c <__swhatbuf_r+0x40>
 8105d4e:	466a      	mov	r2, sp
 8105d50:	f000 fc5e 	bl	8106610 <_fstat_r>
 8105d54:	2800      	cmp	r0, #0
 8105d56:	dbf2      	blt.n	8105d3e <__swhatbuf_r+0x12>
 8105d58:	9a01      	ldr	r2, [sp, #4]
 8105d5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8105d5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8105d62:	425a      	negs	r2, r3
 8105d64:	415a      	adcs	r2, r3
 8105d66:	602a      	str	r2, [r5, #0]
 8105d68:	e7ee      	b.n	8105d48 <__swhatbuf_r+0x1c>
 8105d6a:	2340      	movs	r3, #64	; 0x40
 8105d6c:	2000      	movs	r0, #0
 8105d6e:	6023      	str	r3, [r4, #0]
 8105d70:	b016      	add	sp, #88	; 0x58
 8105d72:	bd70      	pop	{r4, r5, r6, pc}

08105d74 <__smakebuf_r>:
 8105d74:	898b      	ldrh	r3, [r1, #12]
 8105d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8105d78:	079d      	lsls	r5, r3, #30
 8105d7a:	4606      	mov	r6, r0
 8105d7c:	460c      	mov	r4, r1
 8105d7e:	d507      	bpl.n	8105d90 <__smakebuf_r+0x1c>
 8105d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8105d84:	6023      	str	r3, [r4, #0]
 8105d86:	6123      	str	r3, [r4, #16]
 8105d88:	2301      	movs	r3, #1
 8105d8a:	6163      	str	r3, [r4, #20]
 8105d8c:	b002      	add	sp, #8
 8105d8e:	bd70      	pop	{r4, r5, r6, pc}
 8105d90:	ab01      	add	r3, sp, #4
 8105d92:	466a      	mov	r2, sp
 8105d94:	f7ff ffca 	bl	8105d2c <__swhatbuf_r>
 8105d98:	9900      	ldr	r1, [sp, #0]
 8105d9a:	4605      	mov	r5, r0
 8105d9c:	4630      	mov	r0, r6
 8105d9e:	f000 f879 	bl	8105e94 <_malloc_r>
 8105da2:	b948      	cbnz	r0, 8105db8 <__smakebuf_r+0x44>
 8105da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8105da8:	059a      	lsls	r2, r3, #22
 8105daa:	d4ef      	bmi.n	8105d8c <__smakebuf_r+0x18>
 8105dac:	f023 0303 	bic.w	r3, r3, #3
 8105db0:	f043 0302 	orr.w	r3, r3, #2
 8105db4:	81a3      	strh	r3, [r4, #12]
 8105db6:	e7e3      	b.n	8105d80 <__smakebuf_r+0xc>
 8105db8:	4b0d      	ldr	r3, [pc, #52]	; (8105df0 <__smakebuf_r+0x7c>)
 8105dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8105dbc:	89a3      	ldrh	r3, [r4, #12]
 8105dbe:	6020      	str	r0, [r4, #0]
 8105dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8105dc4:	81a3      	strh	r3, [r4, #12]
 8105dc6:	9b00      	ldr	r3, [sp, #0]
 8105dc8:	6163      	str	r3, [r4, #20]
 8105dca:	9b01      	ldr	r3, [sp, #4]
 8105dcc:	6120      	str	r0, [r4, #16]
 8105dce:	b15b      	cbz	r3, 8105de8 <__smakebuf_r+0x74>
 8105dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8105dd4:	4630      	mov	r0, r6
 8105dd6:	f000 fc2d 	bl	8106634 <_isatty_r>
 8105dda:	b128      	cbz	r0, 8105de8 <__smakebuf_r+0x74>
 8105ddc:	89a3      	ldrh	r3, [r4, #12]
 8105dde:	f023 0303 	bic.w	r3, r3, #3
 8105de2:	f043 0301 	orr.w	r3, r3, #1
 8105de6:	81a3      	strh	r3, [r4, #12]
 8105de8:	89a0      	ldrh	r0, [r4, #12]
 8105dea:	4305      	orrs	r5, r0
 8105dec:	81a5      	strh	r5, [r4, #12]
 8105dee:	e7cd      	b.n	8105d8c <__smakebuf_r+0x18>
 8105df0:	08105b85 	.word	0x08105b85

08105df4 <_free_r>:
 8105df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8105df6:	2900      	cmp	r1, #0
 8105df8:	d048      	beq.n	8105e8c <_free_r+0x98>
 8105dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8105dfe:	9001      	str	r0, [sp, #4]
 8105e00:	2b00      	cmp	r3, #0
 8105e02:	f1a1 0404 	sub.w	r4, r1, #4
 8105e06:	bfb8      	it	lt
 8105e08:	18e4      	addlt	r4, r4, r3
 8105e0a:	f000 fc35 	bl	8106678 <__malloc_lock>
 8105e0e:	4a20      	ldr	r2, [pc, #128]	; (8105e90 <_free_r+0x9c>)
 8105e10:	9801      	ldr	r0, [sp, #4]
 8105e12:	6813      	ldr	r3, [r2, #0]
 8105e14:	4615      	mov	r5, r2
 8105e16:	b933      	cbnz	r3, 8105e26 <_free_r+0x32>
 8105e18:	6063      	str	r3, [r4, #4]
 8105e1a:	6014      	str	r4, [r2, #0]
 8105e1c:	b003      	add	sp, #12
 8105e1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8105e22:	f000 bc2f 	b.w	8106684 <__malloc_unlock>
 8105e26:	42a3      	cmp	r3, r4
 8105e28:	d90b      	bls.n	8105e42 <_free_r+0x4e>
 8105e2a:	6821      	ldr	r1, [r4, #0]
 8105e2c:	1862      	adds	r2, r4, r1
 8105e2e:	4293      	cmp	r3, r2
 8105e30:	bf04      	itt	eq
 8105e32:	681a      	ldreq	r2, [r3, #0]
 8105e34:	685b      	ldreq	r3, [r3, #4]
 8105e36:	6063      	str	r3, [r4, #4]
 8105e38:	bf04      	itt	eq
 8105e3a:	1852      	addeq	r2, r2, r1
 8105e3c:	6022      	streq	r2, [r4, #0]
 8105e3e:	602c      	str	r4, [r5, #0]
 8105e40:	e7ec      	b.n	8105e1c <_free_r+0x28>
 8105e42:	461a      	mov	r2, r3
 8105e44:	685b      	ldr	r3, [r3, #4]
 8105e46:	b10b      	cbz	r3, 8105e4c <_free_r+0x58>
 8105e48:	42a3      	cmp	r3, r4
 8105e4a:	d9fa      	bls.n	8105e42 <_free_r+0x4e>
 8105e4c:	6811      	ldr	r1, [r2, #0]
 8105e4e:	1855      	adds	r5, r2, r1
 8105e50:	42a5      	cmp	r5, r4
 8105e52:	d10b      	bne.n	8105e6c <_free_r+0x78>
 8105e54:	6824      	ldr	r4, [r4, #0]
 8105e56:	4421      	add	r1, r4
 8105e58:	1854      	adds	r4, r2, r1
 8105e5a:	42a3      	cmp	r3, r4
 8105e5c:	6011      	str	r1, [r2, #0]
 8105e5e:	d1dd      	bne.n	8105e1c <_free_r+0x28>
 8105e60:	681c      	ldr	r4, [r3, #0]
 8105e62:	685b      	ldr	r3, [r3, #4]
 8105e64:	6053      	str	r3, [r2, #4]
 8105e66:	4421      	add	r1, r4
 8105e68:	6011      	str	r1, [r2, #0]
 8105e6a:	e7d7      	b.n	8105e1c <_free_r+0x28>
 8105e6c:	d902      	bls.n	8105e74 <_free_r+0x80>
 8105e6e:	230c      	movs	r3, #12
 8105e70:	6003      	str	r3, [r0, #0]
 8105e72:	e7d3      	b.n	8105e1c <_free_r+0x28>
 8105e74:	6825      	ldr	r5, [r4, #0]
 8105e76:	1961      	adds	r1, r4, r5
 8105e78:	428b      	cmp	r3, r1
 8105e7a:	bf04      	itt	eq
 8105e7c:	6819      	ldreq	r1, [r3, #0]
 8105e7e:	685b      	ldreq	r3, [r3, #4]
 8105e80:	6063      	str	r3, [r4, #4]
 8105e82:	bf04      	itt	eq
 8105e84:	1949      	addeq	r1, r1, r5
 8105e86:	6021      	streq	r1, [r4, #0]
 8105e88:	6054      	str	r4, [r2, #4]
 8105e8a:	e7c7      	b.n	8105e1c <_free_r+0x28>
 8105e8c:	b003      	add	sp, #12
 8105e8e:	bd30      	pop	{r4, r5, pc}
 8105e90:	10000094 	.word	0x10000094

08105e94 <_malloc_r>:
 8105e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105e96:	1ccd      	adds	r5, r1, #3
 8105e98:	f025 0503 	bic.w	r5, r5, #3
 8105e9c:	3508      	adds	r5, #8
 8105e9e:	2d0c      	cmp	r5, #12
 8105ea0:	bf38      	it	cc
 8105ea2:	250c      	movcc	r5, #12
 8105ea4:	2d00      	cmp	r5, #0
 8105ea6:	4606      	mov	r6, r0
 8105ea8:	db01      	blt.n	8105eae <_malloc_r+0x1a>
 8105eaa:	42a9      	cmp	r1, r5
 8105eac:	d903      	bls.n	8105eb6 <_malloc_r+0x22>
 8105eae:	230c      	movs	r3, #12
 8105eb0:	6033      	str	r3, [r6, #0]
 8105eb2:	2000      	movs	r0, #0
 8105eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8105eb6:	f000 fbdf 	bl	8106678 <__malloc_lock>
 8105eba:	4921      	ldr	r1, [pc, #132]	; (8105f40 <_malloc_r+0xac>)
 8105ebc:	680a      	ldr	r2, [r1, #0]
 8105ebe:	4614      	mov	r4, r2
 8105ec0:	b99c      	cbnz	r4, 8105eea <_malloc_r+0x56>
 8105ec2:	4f20      	ldr	r7, [pc, #128]	; (8105f44 <_malloc_r+0xb0>)
 8105ec4:	683b      	ldr	r3, [r7, #0]
 8105ec6:	b923      	cbnz	r3, 8105ed2 <_malloc_r+0x3e>
 8105ec8:	4621      	mov	r1, r4
 8105eca:	4630      	mov	r0, r6
 8105ecc:	f000 fb2a 	bl	8106524 <_sbrk_r>
 8105ed0:	6038      	str	r0, [r7, #0]
 8105ed2:	4629      	mov	r1, r5
 8105ed4:	4630      	mov	r0, r6
 8105ed6:	f000 fb25 	bl	8106524 <_sbrk_r>
 8105eda:	1c43      	adds	r3, r0, #1
 8105edc:	d123      	bne.n	8105f26 <_malloc_r+0x92>
 8105ede:	230c      	movs	r3, #12
 8105ee0:	6033      	str	r3, [r6, #0]
 8105ee2:	4630      	mov	r0, r6
 8105ee4:	f000 fbce 	bl	8106684 <__malloc_unlock>
 8105ee8:	e7e3      	b.n	8105eb2 <_malloc_r+0x1e>
 8105eea:	6823      	ldr	r3, [r4, #0]
 8105eec:	1b5b      	subs	r3, r3, r5
 8105eee:	d417      	bmi.n	8105f20 <_malloc_r+0x8c>
 8105ef0:	2b0b      	cmp	r3, #11
 8105ef2:	d903      	bls.n	8105efc <_malloc_r+0x68>
 8105ef4:	6023      	str	r3, [r4, #0]
 8105ef6:	441c      	add	r4, r3
 8105ef8:	6025      	str	r5, [r4, #0]
 8105efa:	e004      	b.n	8105f06 <_malloc_r+0x72>
 8105efc:	6863      	ldr	r3, [r4, #4]
 8105efe:	42a2      	cmp	r2, r4
 8105f00:	bf0c      	ite	eq
 8105f02:	600b      	streq	r3, [r1, #0]
 8105f04:	6053      	strne	r3, [r2, #4]
 8105f06:	4630      	mov	r0, r6
 8105f08:	f000 fbbc 	bl	8106684 <__malloc_unlock>
 8105f0c:	f104 000b 	add.w	r0, r4, #11
 8105f10:	1d23      	adds	r3, r4, #4
 8105f12:	f020 0007 	bic.w	r0, r0, #7
 8105f16:	1ac2      	subs	r2, r0, r3
 8105f18:	d0cc      	beq.n	8105eb4 <_malloc_r+0x20>
 8105f1a:	1a1b      	subs	r3, r3, r0
 8105f1c:	50a3      	str	r3, [r4, r2]
 8105f1e:	e7c9      	b.n	8105eb4 <_malloc_r+0x20>
 8105f20:	4622      	mov	r2, r4
 8105f22:	6864      	ldr	r4, [r4, #4]
 8105f24:	e7cc      	b.n	8105ec0 <_malloc_r+0x2c>
 8105f26:	1cc4      	adds	r4, r0, #3
 8105f28:	f024 0403 	bic.w	r4, r4, #3
 8105f2c:	42a0      	cmp	r0, r4
 8105f2e:	d0e3      	beq.n	8105ef8 <_malloc_r+0x64>
 8105f30:	1a21      	subs	r1, r4, r0
 8105f32:	4630      	mov	r0, r6
 8105f34:	f000 faf6 	bl	8106524 <_sbrk_r>
 8105f38:	3001      	adds	r0, #1
 8105f3a:	d1dd      	bne.n	8105ef8 <_malloc_r+0x64>
 8105f3c:	e7cf      	b.n	8105ede <_malloc_r+0x4a>
 8105f3e:	bf00      	nop
 8105f40:	10000094 	.word	0x10000094
 8105f44:	10000098 	.word	0x10000098

08105f48 <__sfputc_r>:
 8105f48:	6893      	ldr	r3, [r2, #8]
 8105f4a:	3b01      	subs	r3, #1
 8105f4c:	2b00      	cmp	r3, #0
 8105f4e:	b410      	push	{r4}
 8105f50:	6093      	str	r3, [r2, #8]
 8105f52:	da08      	bge.n	8105f66 <__sfputc_r+0x1e>
 8105f54:	6994      	ldr	r4, [r2, #24]
 8105f56:	42a3      	cmp	r3, r4
 8105f58:	db01      	blt.n	8105f5e <__sfputc_r+0x16>
 8105f5a:	290a      	cmp	r1, #10
 8105f5c:	d103      	bne.n	8105f66 <__sfputc_r+0x1e>
 8105f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8105f62:	f7ff bc69 	b.w	8105838 <__swbuf_r>
 8105f66:	6813      	ldr	r3, [r2, #0]
 8105f68:	1c58      	adds	r0, r3, #1
 8105f6a:	6010      	str	r0, [r2, #0]
 8105f6c:	7019      	strb	r1, [r3, #0]
 8105f6e:	4608      	mov	r0, r1
 8105f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8105f74:	4770      	bx	lr

08105f76 <__sfputs_r>:
 8105f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105f78:	4606      	mov	r6, r0
 8105f7a:	460f      	mov	r7, r1
 8105f7c:	4614      	mov	r4, r2
 8105f7e:	18d5      	adds	r5, r2, r3
 8105f80:	42ac      	cmp	r4, r5
 8105f82:	d101      	bne.n	8105f88 <__sfputs_r+0x12>
 8105f84:	2000      	movs	r0, #0
 8105f86:	e007      	b.n	8105f98 <__sfputs_r+0x22>
 8105f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8105f8c:	463a      	mov	r2, r7
 8105f8e:	4630      	mov	r0, r6
 8105f90:	f7ff ffda 	bl	8105f48 <__sfputc_r>
 8105f94:	1c43      	adds	r3, r0, #1
 8105f96:	d1f3      	bne.n	8105f80 <__sfputs_r+0xa>
 8105f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08105f9c <_vfiprintf_r>:
 8105f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105fa0:	460d      	mov	r5, r1
 8105fa2:	b09d      	sub	sp, #116	; 0x74
 8105fa4:	4614      	mov	r4, r2
 8105fa6:	4698      	mov	r8, r3
 8105fa8:	4606      	mov	r6, r0
 8105faa:	b118      	cbz	r0, 8105fb4 <_vfiprintf_r+0x18>
 8105fac:	6983      	ldr	r3, [r0, #24]
 8105fae:	b90b      	cbnz	r3, 8105fb4 <_vfiprintf_r+0x18>
 8105fb0:	f7ff fe1c 	bl	8105bec <__sinit>
 8105fb4:	4b89      	ldr	r3, [pc, #548]	; (81061dc <_vfiprintf_r+0x240>)
 8105fb6:	429d      	cmp	r5, r3
 8105fb8:	d11b      	bne.n	8105ff2 <_vfiprintf_r+0x56>
 8105fba:	6875      	ldr	r5, [r6, #4]
 8105fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8105fbe:	07d9      	lsls	r1, r3, #31
 8105fc0:	d405      	bmi.n	8105fce <_vfiprintf_r+0x32>
 8105fc2:	89ab      	ldrh	r3, [r5, #12]
 8105fc4:	059a      	lsls	r2, r3, #22
 8105fc6:	d402      	bmi.n	8105fce <_vfiprintf_r+0x32>
 8105fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8105fca:	f7ff fead 	bl	8105d28 <__retarget_lock_acquire_recursive>
 8105fce:	89ab      	ldrh	r3, [r5, #12]
 8105fd0:	071b      	lsls	r3, r3, #28
 8105fd2:	d501      	bpl.n	8105fd8 <_vfiprintf_r+0x3c>
 8105fd4:	692b      	ldr	r3, [r5, #16]
 8105fd6:	b9eb      	cbnz	r3, 8106014 <_vfiprintf_r+0x78>
 8105fd8:	4629      	mov	r1, r5
 8105fda:	4630      	mov	r0, r6
 8105fdc:	f7ff fc7e 	bl	81058dc <__swsetup_r>
 8105fe0:	b1c0      	cbz	r0, 8106014 <_vfiprintf_r+0x78>
 8105fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8105fe4:	07dc      	lsls	r4, r3, #31
 8105fe6:	d50e      	bpl.n	8106006 <_vfiprintf_r+0x6a>
 8105fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8105fec:	b01d      	add	sp, #116	; 0x74
 8105fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105ff2:	4b7b      	ldr	r3, [pc, #492]	; (81061e0 <_vfiprintf_r+0x244>)
 8105ff4:	429d      	cmp	r5, r3
 8105ff6:	d101      	bne.n	8105ffc <_vfiprintf_r+0x60>
 8105ff8:	68b5      	ldr	r5, [r6, #8]
 8105ffa:	e7df      	b.n	8105fbc <_vfiprintf_r+0x20>
 8105ffc:	4b79      	ldr	r3, [pc, #484]	; (81061e4 <_vfiprintf_r+0x248>)
 8105ffe:	429d      	cmp	r5, r3
 8106000:	bf08      	it	eq
 8106002:	68f5      	ldreq	r5, [r6, #12]
 8106004:	e7da      	b.n	8105fbc <_vfiprintf_r+0x20>
 8106006:	89ab      	ldrh	r3, [r5, #12]
 8106008:	0598      	lsls	r0, r3, #22
 810600a:	d4ed      	bmi.n	8105fe8 <_vfiprintf_r+0x4c>
 810600c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810600e:	f7ff fe8c 	bl	8105d2a <__retarget_lock_release_recursive>
 8106012:	e7e9      	b.n	8105fe8 <_vfiprintf_r+0x4c>
 8106014:	2300      	movs	r3, #0
 8106016:	9309      	str	r3, [sp, #36]	; 0x24
 8106018:	2320      	movs	r3, #32
 810601a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810601e:	f8cd 800c 	str.w	r8, [sp, #12]
 8106022:	2330      	movs	r3, #48	; 0x30
 8106024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 81061e8 <_vfiprintf_r+0x24c>
 8106028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810602c:	f04f 0901 	mov.w	r9, #1
 8106030:	4623      	mov	r3, r4
 8106032:	469a      	mov	sl, r3
 8106034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106038:	b10a      	cbz	r2, 810603e <_vfiprintf_r+0xa2>
 810603a:	2a25      	cmp	r2, #37	; 0x25
 810603c:	d1f9      	bne.n	8106032 <_vfiprintf_r+0x96>
 810603e:	ebba 0b04 	subs.w	fp, sl, r4
 8106042:	d00b      	beq.n	810605c <_vfiprintf_r+0xc0>
 8106044:	465b      	mov	r3, fp
 8106046:	4622      	mov	r2, r4
 8106048:	4629      	mov	r1, r5
 810604a:	4630      	mov	r0, r6
 810604c:	f7ff ff93 	bl	8105f76 <__sfputs_r>
 8106050:	3001      	adds	r0, #1
 8106052:	f000 80aa 	beq.w	81061aa <_vfiprintf_r+0x20e>
 8106056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8106058:	445a      	add	r2, fp
 810605a:	9209      	str	r2, [sp, #36]	; 0x24
 810605c:	f89a 3000 	ldrb.w	r3, [sl]
 8106060:	2b00      	cmp	r3, #0
 8106062:	f000 80a2 	beq.w	81061aa <_vfiprintf_r+0x20e>
 8106066:	2300      	movs	r3, #0
 8106068:	f04f 32ff 	mov.w	r2, #4294967295
 810606c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106070:	f10a 0a01 	add.w	sl, sl, #1
 8106074:	9304      	str	r3, [sp, #16]
 8106076:	9307      	str	r3, [sp, #28]
 8106078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810607c:	931a      	str	r3, [sp, #104]	; 0x68
 810607e:	4654      	mov	r4, sl
 8106080:	2205      	movs	r2, #5
 8106082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106086:	4858      	ldr	r0, [pc, #352]	; (81061e8 <_vfiprintf_r+0x24c>)
 8106088:	f7fa f92a 	bl	81002e0 <memchr>
 810608c:	9a04      	ldr	r2, [sp, #16]
 810608e:	b9d8      	cbnz	r0, 81060c8 <_vfiprintf_r+0x12c>
 8106090:	06d1      	lsls	r1, r2, #27
 8106092:	bf44      	itt	mi
 8106094:	2320      	movmi	r3, #32
 8106096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810609a:	0713      	lsls	r3, r2, #28
 810609c:	bf44      	itt	mi
 810609e:	232b      	movmi	r3, #43	; 0x2b
 81060a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81060a4:	f89a 3000 	ldrb.w	r3, [sl]
 81060a8:	2b2a      	cmp	r3, #42	; 0x2a
 81060aa:	d015      	beq.n	81060d8 <_vfiprintf_r+0x13c>
 81060ac:	9a07      	ldr	r2, [sp, #28]
 81060ae:	4654      	mov	r4, sl
 81060b0:	2000      	movs	r0, #0
 81060b2:	f04f 0c0a 	mov.w	ip, #10
 81060b6:	4621      	mov	r1, r4
 81060b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 81060bc:	3b30      	subs	r3, #48	; 0x30
 81060be:	2b09      	cmp	r3, #9
 81060c0:	d94e      	bls.n	8106160 <_vfiprintf_r+0x1c4>
 81060c2:	b1b0      	cbz	r0, 81060f2 <_vfiprintf_r+0x156>
 81060c4:	9207      	str	r2, [sp, #28]
 81060c6:	e014      	b.n	81060f2 <_vfiprintf_r+0x156>
 81060c8:	eba0 0308 	sub.w	r3, r0, r8
 81060cc:	fa09 f303 	lsl.w	r3, r9, r3
 81060d0:	4313      	orrs	r3, r2
 81060d2:	9304      	str	r3, [sp, #16]
 81060d4:	46a2      	mov	sl, r4
 81060d6:	e7d2      	b.n	810607e <_vfiprintf_r+0xe2>
 81060d8:	9b03      	ldr	r3, [sp, #12]
 81060da:	1d19      	adds	r1, r3, #4
 81060dc:	681b      	ldr	r3, [r3, #0]
 81060de:	9103      	str	r1, [sp, #12]
 81060e0:	2b00      	cmp	r3, #0
 81060e2:	bfbb      	ittet	lt
 81060e4:	425b      	neglt	r3, r3
 81060e6:	f042 0202 	orrlt.w	r2, r2, #2
 81060ea:	9307      	strge	r3, [sp, #28]
 81060ec:	9307      	strlt	r3, [sp, #28]
 81060ee:	bfb8      	it	lt
 81060f0:	9204      	strlt	r2, [sp, #16]
 81060f2:	7823      	ldrb	r3, [r4, #0]
 81060f4:	2b2e      	cmp	r3, #46	; 0x2e
 81060f6:	d10c      	bne.n	8106112 <_vfiprintf_r+0x176>
 81060f8:	7863      	ldrb	r3, [r4, #1]
 81060fa:	2b2a      	cmp	r3, #42	; 0x2a
 81060fc:	d135      	bne.n	810616a <_vfiprintf_r+0x1ce>
 81060fe:	9b03      	ldr	r3, [sp, #12]
 8106100:	1d1a      	adds	r2, r3, #4
 8106102:	681b      	ldr	r3, [r3, #0]
 8106104:	9203      	str	r2, [sp, #12]
 8106106:	2b00      	cmp	r3, #0
 8106108:	bfb8      	it	lt
 810610a:	f04f 33ff 	movlt.w	r3, #4294967295
 810610e:	3402      	adds	r4, #2
 8106110:	9305      	str	r3, [sp, #20]
 8106112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 81061f8 <_vfiprintf_r+0x25c>
 8106116:	7821      	ldrb	r1, [r4, #0]
 8106118:	2203      	movs	r2, #3
 810611a:	4650      	mov	r0, sl
 810611c:	f7fa f8e0 	bl	81002e0 <memchr>
 8106120:	b140      	cbz	r0, 8106134 <_vfiprintf_r+0x198>
 8106122:	2340      	movs	r3, #64	; 0x40
 8106124:	eba0 000a 	sub.w	r0, r0, sl
 8106128:	fa03 f000 	lsl.w	r0, r3, r0
 810612c:	9b04      	ldr	r3, [sp, #16]
 810612e:	4303      	orrs	r3, r0
 8106130:	3401      	adds	r4, #1
 8106132:	9304      	str	r3, [sp, #16]
 8106134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106138:	482c      	ldr	r0, [pc, #176]	; (81061ec <_vfiprintf_r+0x250>)
 810613a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810613e:	2206      	movs	r2, #6
 8106140:	f7fa f8ce 	bl	81002e0 <memchr>
 8106144:	2800      	cmp	r0, #0
 8106146:	d03f      	beq.n	81061c8 <_vfiprintf_r+0x22c>
 8106148:	4b29      	ldr	r3, [pc, #164]	; (81061f0 <_vfiprintf_r+0x254>)
 810614a:	bb1b      	cbnz	r3, 8106194 <_vfiprintf_r+0x1f8>
 810614c:	9b03      	ldr	r3, [sp, #12]
 810614e:	3307      	adds	r3, #7
 8106150:	f023 0307 	bic.w	r3, r3, #7
 8106154:	3308      	adds	r3, #8
 8106156:	9303      	str	r3, [sp, #12]
 8106158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810615a:	443b      	add	r3, r7
 810615c:	9309      	str	r3, [sp, #36]	; 0x24
 810615e:	e767      	b.n	8106030 <_vfiprintf_r+0x94>
 8106160:	fb0c 3202 	mla	r2, ip, r2, r3
 8106164:	460c      	mov	r4, r1
 8106166:	2001      	movs	r0, #1
 8106168:	e7a5      	b.n	81060b6 <_vfiprintf_r+0x11a>
 810616a:	2300      	movs	r3, #0
 810616c:	3401      	adds	r4, #1
 810616e:	9305      	str	r3, [sp, #20]
 8106170:	4619      	mov	r1, r3
 8106172:	f04f 0c0a 	mov.w	ip, #10
 8106176:	4620      	mov	r0, r4
 8106178:	f810 2b01 	ldrb.w	r2, [r0], #1
 810617c:	3a30      	subs	r2, #48	; 0x30
 810617e:	2a09      	cmp	r2, #9
 8106180:	d903      	bls.n	810618a <_vfiprintf_r+0x1ee>
 8106182:	2b00      	cmp	r3, #0
 8106184:	d0c5      	beq.n	8106112 <_vfiprintf_r+0x176>
 8106186:	9105      	str	r1, [sp, #20]
 8106188:	e7c3      	b.n	8106112 <_vfiprintf_r+0x176>
 810618a:	fb0c 2101 	mla	r1, ip, r1, r2
 810618e:	4604      	mov	r4, r0
 8106190:	2301      	movs	r3, #1
 8106192:	e7f0      	b.n	8106176 <_vfiprintf_r+0x1da>
 8106194:	ab03      	add	r3, sp, #12
 8106196:	9300      	str	r3, [sp, #0]
 8106198:	462a      	mov	r2, r5
 810619a:	4b16      	ldr	r3, [pc, #88]	; (81061f4 <_vfiprintf_r+0x258>)
 810619c:	a904      	add	r1, sp, #16
 810619e:	4630      	mov	r0, r6
 81061a0:	f3af 8000 	nop.w
 81061a4:	4607      	mov	r7, r0
 81061a6:	1c78      	adds	r0, r7, #1
 81061a8:	d1d6      	bne.n	8106158 <_vfiprintf_r+0x1bc>
 81061aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 81061ac:	07d9      	lsls	r1, r3, #31
 81061ae:	d405      	bmi.n	81061bc <_vfiprintf_r+0x220>
 81061b0:	89ab      	ldrh	r3, [r5, #12]
 81061b2:	059a      	lsls	r2, r3, #22
 81061b4:	d402      	bmi.n	81061bc <_vfiprintf_r+0x220>
 81061b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 81061b8:	f7ff fdb7 	bl	8105d2a <__retarget_lock_release_recursive>
 81061bc:	89ab      	ldrh	r3, [r5, #12]
 81061be:	065b      	lsls	r3, r3, #25
 81061c0:	f53f af12 	bmi.w	8105fe8 <_vfiprintf_r+0x4c>
 81061c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 81061c6:	e711      	b.n	8105fec <_vfiprintf_r+0x50>
 81061c8:	ab03      	add	r3, sp, #12
 81061ca:	9300      	str	r3, [sp, #0]
 81061cc:	462a      	mov	r2, r5
 81061ce:	4b09      	ldr	r3, [pc, #36]	; (81061f4 <_vfiprintf_r+0x258>)
 81061d0:	a904      	add	r1, sp, #16
 81061d2:	4630      	mov	r0, r6
 81061d4:	f000 f880 	bl	81062d8 <_printf_i>
 81061d8:	e7e4      	b.n	81061a4 <_vfiprintf_r+0x208>
 81061da:	bf00      	nop
 81061dc:	081067c4 	.word	0x081067c4
 81061e0:	081067e4 	.word	0x081067e4
 81061e4:	081067a4 	.word	0x081067a4
 81061e8:	08106804 	.word	0x08106804
 81061ec:	0810680e 	.word	0x0810680e
 81061f0:	00000000 	.word	0x00000000
 81061f4:	08105f77 	.word	0x08105f77
 81061f8:	0810680a 	.word	0x0810680a

081061fc <_printf_common>:
 81061fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106200:	4616      	mov	r6, r2
 8106202:	4699      	mov	r9, r3
 8106204:	688a      	ldr	r2, [r1, #8]
 8106206:	690b      	ldr	r3, [r1, #16]
 8106208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810620c:	4293      	cmp	r3, r2
 810620e:	bfb8      	it	lt
 8106210:	4613      	movlt	r3, r2
 8106212:	6033      	str	r3, [r6, #0]
 8106214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8106218:	4607      	mov	r7, r0
 810621a:	460c      	mov	r4, r1
 810621c:	b10a      	cbz	r2, 8106222 <_printf_common+0x26>
 810621e:	3301      	adds	r3, #1
 8106220:	6033      	str	r3, [r6, #0]
 8106222:	6823      	ldr	r3, [r4, #0]
 8106224:	0699      	lsls	r1, r3, #26
 8106226:	bf42      	ittt	mi
 8106228:	6833      	ldrmi	r3, [r6, #0]
 810622a:	3302      	addmi	r3, #2
 810622c:	6033      	strmi	r3, [r6, #0]
 810622e:	6825      	ldr	r5, [r4, #0]
 8106230:	f015 0506 	ands.w	r5, r5, #6
 8106234:	d106      	bne.n	8106244 <_printf_common+0x48>
 8106236:	f104 0a19 	add.w	sl, r4, #25
 810623a:	68e3      	ldr	r3, [r4, #12]
 810623c:	6832      	ldr	r2, [r6, #0]
 810623e:	1a9b      	subs	r3, r3, r2
 8106240:	42ab      	cmp	r3, r5
 8106242:	dc26      	bgt.n	8106292 <_printf_common+0x96>
 8106244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106248:	1e13      	subs	r3, r2, #0
 810624a:	6822      	ldr	r2, [r4, #0]
 810624c:	bf18      	it	ne
 810624e:	2301      	movne	r3, #1
 8106250:	0692      	lsls	r2, r2, #26
 8106252:	d42b      	bmi.n	81062ac <_printf_common+0xb0>
 8106254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106258:	4649      	mov	r1, r9
 810625a:	4638      	mov	r0, r7
 810625c:	47c0      	blx	r8
 810625e:	3001      	adds	r0, #1
 8106260:	d01e      	beq.n	81062a0 <_printf_common+0xa4>
 8106262:	6823      	ldr	r3, [r4, #0]
 8106264:	68e5      	ldr	r5, [r4, #12]
 8106266:	6832      	ldr	r2, [r6, #0]
 8106268:	f003 0306 	and.w	r3, r3, #6
 810626c:	2b04      	cmp	r3, #4
 810626e:	bf08      	it	eq
 8106270:	1aad      	subeq	r5, r5, r2
 8106272:	68a3      	ldr	r3, [r4, #8]
 8106274:	6922      	ldr	r2, [r4, #16]
 8106276:	bf0c      	ite	eq
 8106278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810627c:	2500      	movne	r5, #0
 810627e:	4293      	cmp	r3, r2
 8106280:	bfc4      	itt	gt
 8106282:	1a9b      	subgt	r3, r3, r2
 8106284:	18ed      	addgt	r5, r5, r3
 8106286:	2600      	movs	r6, #0
 8106288:	341a      	adds	r4, #26
 810628a:	42b5      	cmp	r5, r6
 810628c:	d11a      	bne.n	81062c4 <_printf_common+0xc8>
 810628e:	2000      	movs	r0, #0
 8106290:	e008      	b.n	81062a4 <_printf_common+0xa8>
 8106292:	2301      	movs	r3, #1
 8106294:	4652      	mov	r2, sl
 8106296:	4649      	mov	r1, r9
 8106298:	4638      	mov	r0, r7
 810629a:	47c0      	blx	r8
 810629c:	3001      	adds	r0, #1
 810629e:	d103      	bne.n	81062a8 <_printf_common+0xac>
 81062a0:	f04f 30ff 	mov.w	r0, #4294967295
 81062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81062a8:	3501      	adds	r5, #1
 81062aa:	e7c6      	b.n	810623a <_printf_common+0x3e>
 81062ac:	18e1      	adds	r1, r4, r3
 81062ae:	1c5a      	adds	r2, r3, #1
 81062b0:	2030      	movs	r0, #48	; 0x30
 81062b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81062b6:	4422      	add	r2, r4
 81062b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81062bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81062c0:	3302      	adds	r3, #2
 81062c2:	e7c7      	b.n	8106254 <_printf_common+0x58>
 81062c4:	2301      	movs	r3, #1
 81062c6:	4622      	mov	r2, r4
 81062c8:	4649      	mov	r1, r9
 81062ca:	4638      	mov	r0, r7
 81062cc:	47c0      	blx	r8
 81062ce:	3001      	adds	r0, #1
 81062d0:	d0e6      	beq.n	81062a0 <_printf_common+0xa4>
 81062d2:	3601      	adds	r6, #1
 81062d4:	e7d9      	b.n	810628a <_printf_common+0x8e>
	...

081062d8 <_printf_i>:
 81062d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81062dc:	460c      	mov	r4, r1
 81062de:	4691      	mov	r9, r2
 81062e0:	7e27      	ldrb	r7, [r4, #24]
 81062e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 81062e4:	2f78      	cmp	r7, #120	; 0x78
 81062e6:	4680      	mov	r8, r0
 81062e8:	469a      	mov	sl, r3
 81062ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81062ee:	d807      	bhi.n	8106300 <_printf_i+0x28>
 81062f0:	2f62      	cmp	r7, #98	; 0x62
 81062f2:	d80a      	bhi.n	810630a <_printf_i+0x32>
 81062f4:	2f00      	cmp	r7, #0
 81062f6:	f000 80d8 	beq.w	81064aa <_printf_i+0x1d2>
 81062fa:	2f58      	cmp	r7, #88	; 0x58
 81062fc:	f000 80a3 	beq.w	8106446 <_printf_i+0x16e>
 8106300:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8106304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8106308:	e03a      	b.n	8106380 <_printf_i+0xa8>
 810630a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810630e:	2b15      	cmp	r3, #21
 8106310:	d8f6      	bhi.n	8106300 <_printf_i+0x28>
 8106312:	a001      	add	r0, pc, #4	; (adr r0, 8106318 <_printf_i+0x40>)
 8106314:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8106318:	08106371 	.word	0x08106371
 810631c:	08106385 	.word	0x08106385
 8106320:	08106301 	.word	0x08106301
 8106324:	08106301 	.word	0x08106301
 8106328:	08106301 	.word	0x08106301
 810632c:	08106301 	.word	0x08106301
 8106330:	08106385 	.word	0x08106385
 8106334:	08106301 	.word	0x08106301
 8106338:	08106301 	.word	0x08106301
 810633c:	08106301 	.word	0x08106301
 8106340:	08106301 	.word	0x08106301
 8106344:	08106491 	.word	0x08106491
 8106348:	081063b5 	.word	0x081063b5
 810634c:	08106473 	.word	0x08106473
 8106350:	08106301 	.word	0x08106301
 8106354:	08106301 	.word	0x08106301
 8106358:	081064b3 	.word	0x081064b3
 810635c:	08106301 	.word	0x08106301
 8106360:	081063b5 	.word	0x081063b5
 8106364:	08106301 	.word	0x08106301
 8106368:	08106301 	.word	0x08106301
 810636c:	0810647b 	.word	0x0810647b
 8106370:	680b      	ldr	r3, [r1, #0]
 8106372:	1d1a      	adds	r2, r3, #4
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	600a      	str	r2, [r1, #0]
 8106378:	f104 0642 	add.w	r6, r4, #66	; 0x42
 810637c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106380:	2301      	movs	r3, #1
 8106382:	e0a3      	b.n	81064cc <_printf_i+0x1f4>
 8106384:	6825      	ldr	r5, [r4, #0]
 8106386:	6808      	ldr	r0, [r1, #0]
 8106388:	062e      	lsls	r6, r5, #24
 810638a:	f100 0304 	add.w	r3, r0, #4
 810638e:	d50a      	bpl.n	81063a6 <_printf_i+0xce>
 8106390:	6805      	ldr	r5, [r0, #0]
 8106392:	600b      	str	r3, [r1, #0]
 8106394:	2d00      	cmp	r5, #0
 8106396:	da03      	bge.n	81063a0 <_printf_i+0xc8>
 8106398:	232d      	movs	r3, #45	; 0x2d
 810639a:	426d      	negs	r5, r5
 810639c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81063a0:	485e      	ldr	r0, [pc, #376]	; (810651c <_printf_i+0x244>)
 81063a2:	230a      	movs	r3, #10
 81063a4:	e019      	b.n	81063da <_printf_i+0x102>
 81063a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 81063aa:	6805      	ldr	r5, [r0, #0]
 81063ac:	600b      	str	r3, [r1, #0]
 81063ae:	bf18      	it	ne
 81063b0:	b22d      	sxthne	r5, r5
 81063b2:	e7ef      	b.n	8106394 <_printf_i+0xbc>
 81063b4:	680b      	ldr	r3, [r1, #0]
 81063b6:	6825      	ldr	r5, [r4, #0]
 81063b8:	1d18      	adds	r0, r3, #4
 81063ba:	6008      	str	r0, [r1, #0]
 81063bc:	0628      	lsls	r0, r5, #24
 81063be:	d501      	bpl.n	81063c4 <_printf_i+0xec>
 81063c0:	681d      	ldr	r5, [r3, #0]
 81063c2:	e002      	b.n	81063ca <_printf_i+0xf2>
 81063c4:	0669      	lsls	r1, r5, #25
 81063c6:	d5fb      	bpl.n	81063c0 <_printf_i+0xe8>
 81063c8:	881d      	ldrh	r5, [r3, #0]
 81063ca:	4854      	ldr	r0, [pc, #336]	; (810651c <_printf_i+0x244>)
 81063cc:	2f6f      	cmp	r7, #111	; 0x6f
 81063ce:	bf0c      	ite	eq
 81063d0:	2308      	moveq	r3, #8
 81063d2:	230a      	movne	r3, #10
 81063d4:	2100      	movs	r1, #0
 81063d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81063da:	6866      	ldr	r6, [r4, #4]
 81063dc:	60a6      	str	r6, [r4, #8]
 81063de:	2e00      	cmp	r6, #0
 81063e0:	bfa2      	ittt	ge
 81063e2:	6821      	ldrge	r1, [r4, #0]
 81063e4:	f021 0104 	bicge.w	r1, r1, #4
 81063e8:	6021      	strge	r1, [r4, #0]
 81063ea:	b90d      	cbnz	r5, 81063f0 <_printf_i+0x118>
 81063ec:	2e00      	cmp	r6, #0
 81063ee:	d04d      	beq.n	810648c <_printf_i+0x1b4>
 81063f0:	4616      	mov	r6, r2
 81063f2:	fbb5 f1f3 	udiv	r1, r5, r3
 81063f6:	fb03 5711 	mls	r7, r3, r1, r5
 81063fa:	5dc7      	ldrb	r7, [r0, r7]
 81063fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8106400:	462f      	mov	r7, r5
 8106402:	42bb      	cmp	r3, r7
 8106404:	460d      	mov	r5, r1
 8106406:	d9f4      	bls.n	81063f2 <_printf_i+0x11a>
 8106408:	2b08      	cmp	r3, #8
 810640a:	d10b      	bne.n	8106424 <_printf_i+0x14c>
 810640c:	6823      	ldr	r3, [r4, #0]
 810640e:	07df      	lsls	r7, r3, #31
 8106410:	d508      	bpl.n	8106424 <_printf_i+0x14c>
 8106412:	6923      	ldr	r3, [r4, #16]
 8106414:	6861      	ldr	r1, [r4, #4]
 8106416:	4299      	cmp	r1, r3
 8106418:	bfde      	ittt	le
 810641a:	2330      	movle	r3, #48	; 0x30
 810641c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8106420:	f106 36ff 	addle.w	r6, r6, #4294967295
 8106424:	1b92      	subs	r2, r2, r6
 8106426:	6122      	str	r2, [r4, #16]
 8106428:	f8cd a000 	str.w	sl, [sp]
 810642c:	464b      	mov	r3, r9
 810642e:	aa03      	add	r2, sp, #12
 8106430:	4621      	mov	r1, r4
 8106432:	4640      	mov	r0, r8
 8106434:	f7ff fee2 	bl	81061fc <_printf_common>
 8106438:	3001      	adds	r0, #1
 810643a:	d14c      	bne.n	81064d6 <_printf_i+0x1fe>
 810643c:	f04f 30ff 	mov.w	r0, #4294967295
 8106440:	b004      	add	sp, #16
 8106442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106446:	4835      	ldr	r0, [pc, #212]	; (810651c <_printf_i+0x244>)
 8106448:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810644c:	6823      	ldr	r3, [r4, #0]
 810644e:	680e      	ldr	r6, [r1, #0]
 8106450:	061f      	lsls	r7, r3, #24
 8106452:	f856 5b04 	ldr.w	r5, [r6], #4
 8106456:	600e      	str	r6, [r1, #0]
 8106458:	d514      	bpl.n	8106484 <_printf_i+0x1ac>
 810645a:	07d9      	lsls	r1, r3, #31
 810645c:	bf44      	itt	mi
 810645e:	f043 0320 	orrmi.w	r3, r3, #32
 8106462:	6023      	strmi	r3, [r4, #0]
 8106464:	b91d      	cbnz	r5, 810646e <_printf_i+0x196>
 8106466:	6823      	ldr	r3, [r4, #0]
 8106468:	f023 0320 	bic.w	r3, r3, #32
 810646c:	6023      	str	r3, [r4, #0]
 810646e:	2310      	movs	r3, #16
 8106470:	e7b0      	b.n	81063d4 <_printf_i+0xfc>
 8106472:	6823      	ldr	r3, [r4, #0]
 8106474:	f043 0320 	orr.w	r3, r3, #32
 8106478:	6023      	str	r3, [r4, #0]
 810647a:	2378      	movs	r3, #120	; 0x78
 810647c:	4828      	ldr	r0, [pc, #160]	; (8106520 <_printf_i+0x248>)
 810647e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8106482:	e7e3      	b.n	810644c <_printf_i+0x174>
 8106484:	065e      	lsls	r6, r3, #25
 8106486:	bf48      	it	mi
 8106488:	b2ad      	uxthmi	r5, r5
 810648a:	e7e6      	b.n	810645a <_printf_i+0x182>
 810648c:	4616      	mov	r6, r2
 810648e:	e7bb      	b.n	8106408 <_printf_i+0x130>
 8106490:	680b      	ldr	r3, [r1, #0]
 8106492:	6826      	ldr	r6, [r4, #0]
 8106494:	6960      	ldr	r0, [r4, #20]
 8106496:	1d1d      	adds	r5, r3, #4
 8106498:	600d      	str	r5, [r1, #0]
 810649a:	0635      	lsls	r5, r6, #24
 810649c:	681b      	ldr	r3, [r3, #0]
 810649e:	d501      	bpl.n	81064a4 <_printf_i+0x1cc>
 81064a0:	6018      	str	r0, [r3, #0]
 81064a2:	e002      	b.n	81064aa <_printf_i+0x1d2>
 81064a4:	0671      	lsls	r1, r6, #25
 81064a6:	d5fb      	bpl.n	81064a0 <_printf_i+0x1c8>
 81064a8:	8018      	strh	r0, [r3, #0]
 81064aa:	2300      	movs	r3, #0
 81064ac:	6123      	str	r3, [r4, #16]
 81064ae:	4616      	mov	r6, r2
 81064b0:	e7ba      	b.n	8106428 <_printf_i+0x150>
 81064b2:	680b      	ldr	r3, [r1, #0]
 81064b4:	1d1a      	adds	r2, r3, #4
 81064b6:	600a      	str	r2, [r1, #0]
 81064b8:	681e      	ldr	r6, [r3, #0]
 81064ba:	6862      	ldr	r2, [r4, #4]
 81064bc:	2100      	movs	r1, #0
 81064be:	4630      	mov	r0, r6
 81064c0:	f7f9 ff0e 	bl	81002e0 <memchr>
 81064c4:	b108      	cbz	r0, 81064ca <_printf_i+0x1f2>
 81064c6:	1b80      	subs	r0, r0, r6
 81064c8:	6060      	str	r0, [r4, #4]
 81064ca:	6863      	ldr	r3, [r4, #4]
 81064cc:	6123      	str	r3, [r4, #16]
 81064ce:	2300      	movs	r3, #0
 81064d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81064d4:	e7a8      	b.n	8106428 <_printf_i+0x150>
 81064d6:	6923      	ldr	r3, [r4, #16]
 81064d8:	4632      	mov	r2, r6
 81064da:	4649      	mov	r1, r9
 81064dc:	4640      	mov	r0, r8
 81064de:	47d0      	blx	sl
 81064e0:	3001      	adds	r0, #1
 81064e2:	d0ab      	beq.n	810643c <_printf_i+0x164>
 81064e4:	6823      	ldr	r3, [r4, #0]
 81064e6:	079b      	lsls	r3, r3, #30
 81064e8:	d413      	bmi.n	8106512 <_printf_i+0x23a>
 81064ea:	68e0      	ldr	r0, [r4, #12]
 81064ec:	9b03      	ldr	r3, [sp, #12]
 81064ee:	4298      	cmp	r0, r3
 81064f0:	bfb8      	it	lt
 81064f2:	4618      	movlt	r0, r3
 81064f4:	e7a4      	b.n	8106440 <_printf_i+0x168>
 81064f6:	2301      	movs	r3, #1
 81064f8:	4632      	mov	r2, r6
 81064fa:	4649      	mov	r1, r9
 81064fc:	4640      	mov	r0, r8
 81064fe:	47d0      	blx	sl
 8106500:	3001      	adds	r0, #1
 8106502:	d09b      	beq.n	810643c <_printf_i+0x164>
 8106504:	3501      	adds	r5, #1
 8106506:	68e3      	ldr	r3, [r4, #12]
 8106508:	9903      	ldr	r1, [sp, #12]
 810650a:	1a5b      	subs	r3, r3, r1
 810650c:	42ab      	cmp	r3, r5
 810650e:	dcf2      	bgt.n	81064f6 <_printf_i+0x21e>
 8106510:	e7eb      	b.n	81064ea <_printf_i+0x212>
 8106512:	2500      	movs	r5, #0
 8106514:	f104 0619 	add.w	r6, r4, #25
 8106518:	e7f5      	b.n	8106506 <_printf_i+0x22e>
 810651a:	bf00      	nop
 810651c:	08106815 	.word	0x08106815
 8106520:	08106826 	.word	0x08106826

08106524 <_sbrk_r>:
 8106524:	b538      	push	{r3, r4, r5, lr}
 8106526:	4d06      	ldr	r5, [pc, #24]	; (8106540 <_sbrk_r+0x1c>)
 8106528:	2300      	movs	r3, #0
 810652a:	4604      	mov	r4, r0
 810652c:	4608      	mov	r0, r1
 810652e:	602b      	str	r3, [r5, #0]
 8106530:	f7fa fd40 	bl	8100fb4 <_sbrk>
 8106534:	1c43      	adds	r3, r0, #1
 8106536:	d102      	bne.n	810653e <_sbrk_r+0x1a>
 8106538:	682b      	ldr	r3, [r5, #0]
 810653a:	b103      	cbz	r3, 810653e <_sbrk_r+0x1a>
 810653c:	6023      	str	r3, [r4, #0]
 810653e:	bd38      	pop	{r3, r4, r5, pc}
 8106540:	10000280 	.word	0x10000280

08106544 <__sread>:
 8106544:	b510      	push	{r4, lr}
 8106546:	460c      	mov	r4, r1
 8106548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810654c:	f000 f8a0 	bl	8106690 <_read_r>
 8106550:	2800      	cmp	r0, #0
 8106552:	bfab      	itete	ge
 8106554:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8106556:	89a3      	ldrhlt	r3, [r4, #12]
 8106558:	181b      	addge	r3, r3, r0
 810655a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810655e:	bfac      	ite	ge
 8106560:	6563      	strge	r3, [r4, #84]	; 0x54
 8106562:	81a3      	strhlt	r3, [r4, #12]
 8106564:	bd10      	pop	{r4, pc}

08106566 <__swrite>:
 8106566:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810656a:	461f      	mov	r7, r3
 810656c:	898b      	ldrh	r3, [r1, #12]
 810656e:	05db      	lsls	r3, r3, #23
 8106570:	4605      	mov	r5, r0
 8106572:	460c      	mov	r4, r1
 8106574:	4616      	mov	r6, r2
 8106576:	d505      	bpl.n	8106584 <__swrite+0x1e>
 8106578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810657c:	2302      	movs	r3, #2
 810657e:	2200      	movs	r2, #0
 8106580:	f000 f868 	bl	8106654 <_lseek_r>
 8106584:	89a3      	ldrh	r3, [r4, #12]
 8106586:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810658a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810658e:	81a3      	strh	r3, [r4, #12]
 8106590:	4632      	mov	r2, r6
 8106592:	463b      	mov	r3, r7
 8106594:	4628      	mov	r0, r5
 8106596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810659a:	f000 b817 	b.w	81065cc <_write_r>

0810659e <__sseek>:
 810659e:	b510      	push	{r4, lr}
 81065a0:	460c      	mov	r4, r1
 81065a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81065a6:	f000 f855 	bl	8106654 <_lseek_r>
 81065aa:	1c43      	adds	r3, r0, #1
 81065ac:	89a3      	ldrh	r3, [r4, #12]
 81065ae:	bf15      	itete	ne
 81065b0:	6560      	strne	r0, [r4, #84]	; 0x54
 81065b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 81065b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 81065ba:	81a3      	strheq	r3, [r4, #12]
 81065bc:	bf18      	it	ne
 81065be:	81a3      	strhne	r3, [r4, #12]
 81065c0:	bd10      	pop	{r4, pc}

081065c2 <__sclose>:
 81065c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81065c6:	f000 b813 	b.w	81065f0 <_close_r>
	...

081065cc <_write_r>:
 81065cc:	b538      	push	{r3, r4, r5, lr}
 81065ce:	4d07      	ldr	r5, [pc, #28]	; (81065ec <_write_r+0x20>)
 81065d0:	4604      	mov	r4, r0
 81065d2:	4608      	mov	r0, r1
 81065d4:	4611      	mov	r1, r2
 81065d6:	2200      	movs	r2, #0
 81065d8:	602a      	str	r2, [r5, #0]
 81065da:	461a      	mov	r2, r3
 81065dc:	f7fa fc99 	bl	8100f12 <_write>
 81065e0:	1c43      	adds	r3, r0, #1
 81065e2:	d102      	bne.n	81065ea <_write_r+0x1e>
 81065e4:	682b      	ldr	r3, [r5, #0]
 81065e6:	b103      	cbz	r3, 81065ea <_write_r+0x1e>
 81065e8:	6023      	str	r3, [r4, #0]
 81065ea:	bd38      	pop	{r3, r4, r5, pc}
 81065ec:	10000280 	.word	0x10000280

081065f0 <_close_r>:
 81065f0:	b538      	push	{r3, r4, r5, lr}
 81065f2:	4d06      	ldr	r5, [pc, #24]	; (810660c <_close_r+0x1c>)
 81065f4:	2300      	movs	r3, #0
 81065f6:	4604      	mov	r4, r0
 81065f8:	4608      	mov	r0, r1
 81065fa:	602b      	str	r3, [r5, #0]
 81065fc:	f7fa fca5 	bl	8100f4a <_close>
 8106600:	1c43      	adds	r3, r0, #1
 8106602:	d102      	bne.n	810660a <_close_r+0x1a>
 8106604:	682b      	ldr	r3, [r5, #0]
 8106606:	b103      	cbz	r3, 810660a <_close_r+0x1a>
 8106608:	6023      	str	r3, [r4, #0]
 810660a:	bd38      	pop	{r3, r4, r5, pc}
 810660c:	10000280 	.word	0x10000280

08106610 <_fstat_r>:
 8106610:	b538      	push	{r3, r4, r5, lr}
 8106612:	4d07      	ldr	r5, [pc, #28]	; (8106630 <_fstat_r+0x20>)
 8106614:	2300      	movs	r3, #0
 8106616:	4604      	mov	r4, r0
 8106618:	4608      	mov	r0, r1
 810661a:	4611      	mov	r1, r2
 810661c:	602b      	str	r3, [r5, #0]
 810661e:	f7fa fca0 	bl	8100f62 <_fstat>
 8106622:	1c43      	adds	r3, r0, #1
 8106624:	d102      	bne.n	810662c <_fstat_r+0x1c>
 8106626:	682b      	ldr	r3, [r5, #0]
 8106628:	b103      	cbz	r3, 810662c <_fstat_r+0x1c>
 810662a:	6023      	str	r3, [r4, #0]
 810662c:	bd38      	pop	{r3, r4, r5, pc}
 810662e:	bf00      	nop
 8106630:	10000280 	.word	0x10000280

08106634 <_isatty_r>:
 8106634:	b538      	push	{r3, r4, r5, lr}
 8106636:	4d06      	ldr	r5, [pc, #24]	; (8106650 <_isatty_r+0x1c>)
 8106638:	2300      	movs	r3, #0
 810663a:	4604      	mov	r4, r0
 810663c:	4608      	mov	r0, r1
 810663e:	602b      	str	r3, [r5, #0]
 8106640:	f7fa fc9f 	bl	8100f82 <_isatty>
 8106644:	1c43      	adds	r3, r0, #1
 8106646:	d102      	bne.n	810664e <_isatty_r+0x1a>
 8106648:	682b      	ldr	r3, [r5, #0]
 810664a:	b103      	cbz	r3, 810664e <_isatty_r+0x1a>
 810664c:	6023      	str	r3, [r4, #0]
 810664e:	bd38      	pop	{r3, r4, r5, pc}
 8106650:	10000280 	.word	0x10000280

08106654 <_lseek_r>:
 8106654:	b538      	push	{r3, r4, r5, lr}
 8106656:	4d07      	ldr	r5, [pc, #28]	; (8106674 <_lseek_r+0x20>)
 8106658:	4604      	mov	r4, r0
 810665a:	4608      	mov	r0, r1
 810665c:	4611      	mov	r1, r2
 810665e:	2200      	movs	r2, #0
 8106660:	602a      	str	r2, [r5, #0]
 8106662:	461a      	mov	r2, r3
 8106664:	f7fa fc98 	bl	8100f98 <_lseek>
 8106668:	1c43      	adds	r3, r0, #1
 810666a:	d102      	bne.n	8106672 <_lseek_r+0x1e>
 810666c:	682b      	ldr	r3, [r5, #0]
 810666e:	b103      	cbz	r3, 8106672 <_lseek_r+0x1e>
 8106670:	6023      	str	r3, [r4, #0]
 8106672:	bd38      	pop	{r3, r4, r5, pc}
 8106674:	10000280 	.word	0x10000280

08106678 <__malloc_lock>:
 8106678:	4801      	ldr	r0, [pc, #4]	; (8106680 <__malloc_lock+0x8>)
 810667a:	f7ff bb55 	b.w	8105d28 <__retarget_lock_acquire_recursive>
 810667e:	bf00      	nop
 8106680:	10000278 	.word	0x10000278

08106684 <__malloc_unlock>:
 8106684:	4801      	ldr	r0, [pc, #4]	; (810668c <__malloc_unlock+0x8>)
 8106686:	f7ff bb50 	b.w	8105d2a <__retarget_lock_release_recursive>
 810668a:	bf00      	nop
 810668c:	10000278 	.word	0x10000278

08106690 <_read_r>:
 8106690:	b538      	push	{r3, r4, r5, lr}
 8106692:	4d07      	ldr	r5, [pc, #28]	; (81066b0 <_read_r+0x20>)
 8106694:	4604      	mov	r4, r0
 8106696:	4608      	mov	r0, r1
 8106698:	4611      	mov	r1, r2
 810669a:	2200      	movs	r2, #0
 810669c:	602a      	str	r2, [r5, #0]
 810669e:	461a      	mov	r2, r3
 81066a0:	f7fa fc1a 	bl	8100ed8 <_read>
 81066a4:	1c43      	adds	r3, r0, #1
 81066a6:	d102      	bne.n	81066ae <_read_r+0x1e>
 81066a8:	682b      	ldr	r3, [r5, #0]
 81066aa:	b103      	cbz	r3, 81066ae <_read_r+0x1e>
 81066ac:	6023      	str	r3, [r4, #0]
 81066ae:	bd38      	pop	{r3, r4, r5, pc}
 81066b0:	10000280 	.word	0x10000280

081066b4 <_init>:
 81066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81066b6:	bf00      	nop
 81066b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81066ba:	bc08      	pop	{r3}
 81066bc:	469e      	mov	lr, r3
 81066be:	4770      	bx	lr

081066c0 <_fini>:
 81066c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81066c2:	bf00      	nop
 81066c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81066c6:	bc08      	pop	{r3}
 81066c8:	469e      	mov	lr, r3
 81066ca:	4770      	bx	lr
