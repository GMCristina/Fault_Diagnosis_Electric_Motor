
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de34  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  0810e0d8  0810e0d8  0001e0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810e810  0810e810  0001e810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810e818  0810e818  0001e818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810e81c  0810e81c  0001e81c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000238  10000000  0810e820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000258  10000238  0810ea58  00020238  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000490  0810ea58  00020490  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022f17  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000037a8  00000000  00000000  0004317f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ea0  00000000  00000000  00046928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d98  00000000  00000000  000477c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cd19  00000000  00000000  00048560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014a1d  00000000  00000000  00085279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00187256  00000000  00000000  00099c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00220eec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000055fc  00000000  00000000  00220f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000238 	.word	0x10000238
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e0bc 	.word	0x0810e0bc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000023c 	.word	0x1000023c
 81002dc:	0810e0bc 	.word	0x0810e0bc

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 bafe 	b.w	81013ac <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f996 	bl	81010e8 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__mulsc3>:
 8100dc8:	ee60 6a01 	vmul.f32	s13, s0, s2
 8100dcc:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8100dd0:	ee20 5a21 	vmul.f32	s10, s0, s3
 8100dd4:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8100dd8:	ee61 5a20 	vmul.f32	s11, s2, s1
 8100ddc:	eef4 7a67 	vcmp.f32	s15, s15
 8100de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100de4:	ee35 7a25 	vadd.f32	s14, s10, s11
 8100de8:	d604      	bvs.n	8100df4 <__mulsc3+0x2c>
 8100dea:	eeb0 0a67 	vmov.f32	s0, s15
 8100dee:	eef0 0a47 	vmov.f32	s1, s14
 8100df2:	4770      	bx	lr
 8100df4:	eeb4 7a47 	vcmp.f32	s14, s14
 8100df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100dfc:	d7f5      	bvc.n	8100dea <__mulsc3+0x22>
 8100dfe:	eddf 4a9b 	vldr	s9, [pc, #620]	; 810106c <__mulsc3+0x2a4>
 8100e02:	eeb0 4ac0 	vabs.f32	s8, s0
 8100e06:	eeb4 4a64 	vcmp.f32	s8, s9
 8100e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e0e:	bfcc      	ite	gt
 8100e10:	2301      	movgt	r3, #1
 8100e12:	2300      	movle	r3, #0
 8100e14:	eeb0 4ae0 	vabs.f32	s8, s1
 8100e18:	f300 809a 	bgt.w	8100f50 <__mulsc3+0x188>
 8100e1c:	eeb4 4a64 	vcmp.f32	s8, s9
 8100e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e24:	f300 8094 	bgt.w	8100f50 <__mulsc3+0x188>
 8100e28:	2200      	movs	r2, #0
 8100e2a:	eddf 4a90 	vldr	s9, [pc, #576]	; 810106c <__mulsc3+0x2a4>
 8100e2e:	eeb0 4ac1 	vabs.f32	s8, s2
 8100e32:	eeb4 4a64 	vcmp.f32	s8, s9
 8100e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e3a:	bfcc      	ite	gt
 8100e3c:	2301      	movgt	r3, #1
 8100e3e:	2300      	movle	r3, #0
 8100e40:	eeb0 4ae1 	vabs.f32	s8, s3
 8100e44:	dc48      	bgt.n	8100ed8 <__mulsc3+0x110>
 8100e46:	eeb4 4a64 	vcmp.f32	s8, s9
 8100e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e4e:	dc43      	bgt.n	8100ed8 <__mulsc3+0x110>
 8100e50:	bb9a      	cbnz	r2, 8100eba <__mulsc3+0xf2>
 8100e52:	eef0 6ae6 	vabs.f32	s13, s13
 8100e56:	eef4 6a64 	vcmp.f32	s13, s9
 8100e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e5e:	dc14      	bgt.n	8100e8a <__mulsc3+0xc2>
 8100e60:	eeb0 6ac6 	vabs.f32	s12, s12
 8100e64:	eeb4 6a64 	vcmp.f32	s12, s9
 8100e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e6c:	dc0d      	bgt.n	8100e8a <__mulsc3+0xc2>
 8100e6e:	eeb0 5ac5 	vabs.f32	s10, s10
 8100e72:	eeb4 5a64 	vcmp.f32	s10, s9
 8100e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e7a:	dc06      	bgt.n	8100e8a <__mulsc3+0xc2>
 8100e7c:	eef0 5ae5 	vabs.f32	s11, s11
 8100e80:	eef4 5a64 	vcmp.f32	s11, s9
 8100e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e88:	ddaf      	ble.n	8100dea <__mulsc3+0x22>
 8100e8a:	eeb4 0a40 	vcmp.f32	s0, s0
 8100e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e92:	f180 80de 	bvs.w	8101052 <__mulsc3+0x28a>
 8100e96:	eef4 0a60 	vcmp.f32	s1, s1
 8100e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100e9e:	f180 80cb 	bvs.w	8101038 <__mulsc3+0x270>
 8100ea2:	eeb4 1a41 	vcmp.f32	s2, s2
 8100ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100eaa:	f180 80b8 	bvs.w	810101e <__mulsc3+0x256>
 8100eae:	eef4 1a61 	vcmp.f32	s3, s3
 8100eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100eb6:	f180 80a5 	bvs.w	8101004 <__mulsc3+0x23c>
 8100eba:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8100ebe:	ee60 0a81 	vmul.f32	s1, s1, s2
 8100ec2:	eee0 7a01 	vfma.f32	s15, s0, s2
 8100ec6:	eee0 0a21 	vfma.f32	s1, s0, s3
 8100eca:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8101070 <__mulsc3+0x2a8>
 8100ece:	ee67 7a87 	vmul.f32	s15, s15, s14
 8100ed2:	ee20 7a87 	vmul.f32	s14, s1, s14
 8100ed6:	e788      	b.n	8100dea <__mulsc3+0x22>
 8100ed8:	ee07 3a90 	vmov	s15, r3
 8100edc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 810106c <__mulsc3+0x2a4>
 8100ee0:	ee11 3a10 	vmov	r3, s2
 8100ee4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8100ee8:	2b00      	cmp	r3, #0
 8100eea:	eef0 7ae7 	vabs.f32	s15, s15
 8100eee:	eeb4 4a47 	vcmp.f32	s8, s14
 8100ef2:	bfb8      	it	lt
 8100ef4:	eef1 7a67 	vneglt.f32	s15, s15
 8100ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100efc:	bfcc      	ite	gt
 8100efe:	2301      	movgt	r3, #1
 8100f00:	2300      	movle	r3, #0
 8100f02:	ee07 3a10 	vmov	s14, r3
 8100f06:	ee11 3a90 	vmov	r3, s3
 8100f0a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8100f0e:	2b00      	cmp	r3, #0
 8100f10:	eeb0 1a67 	vmov.f32	s2, s15
 8100f14:	eeb4 0a40 	vcmp.f32	s0, s0
 8100f18:	eef0 7ac7 	vabs.f32	s15, s14
 8100f1c:	bfb8      	it	lt
 8100f1e:	eef1 7a67 	vneglt.f32	s15, s15
 8100f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100f26:	eef0 1a67 	vmov.f32	s3, s15
 8100f2a:	d651      	bvs.n	8100fd0 <__mulsc3+0x208>
 8100f2c:	eef4 0a60 	vcmp.f32	s1, s1
 8100f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100f34:	d7c1      	bvc.n	8100eba <__mulsc3+0xf2>
 8100f36:	ee10 3a90 	vmov	r3, s1
 8100f3a:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8101074 <__mulsc3+0x2ac>
 8100f3e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8101078 <__mulsc3+0x2b0>
 8100f42:	2b00      	cmp	r3, #0
 8100f44:	bfb4      	ite	lt
 8100f46:	eef0 0a67 	vmovlt.f32	s1, s15
 8100f4a:	eef0 0a47 	vmovge.f32	s1, s14
 8100f4e:	e7b4      	b.n	8100eba <__mulsc3+0xf2>
 8100f50:	ee04 3a90 	vmov	s9, r3
 8100f54:	eddf 3a45 	vldr	s7, [pc, #276]	; 810106c <__mulsc3+0x2a4>
 8100f58:	ee10 3a10 	vmov	r3, s0
 8100f5c:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8100f60:	2b00      	cmp	r3, #0
 8100f62:	eef0 4ae4 	vabs.f32	s9, s9
 8100f66:	eeb4 4a63 	vcmp.f32	s8, s7
 8100f6a:	bfb8      	it	lt
 8100f6c:	eef1 4a64 	vneglt.f32	s9, s9
 8100f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100f74:	bfcc      	ite	gt
 8100f76:	2301      	movgt	r3, #1
 8100f78:	2300      	movle	r3, #0
 8100f7a:	ee04 3a10 	vmov	s8, r3
 8100f7e:	ee10 3a90 	vmov	r3, s1
 8100f82:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 8100f86:	2b00      	cmp	r3, #0
 8100f88:	eeb0 0a64 	vmov.f32	s0, s9
 8100f8c:	eeb4 1a41 	vcmp.f32	s2, s2
 8100f90:	eef0 4ac4 	vabs.f32	s9, s8
 8100f94:	bfb8      	it	lt
 8100f96:	eef1 4a64 	vneglt.f32	s9, s9
 8100f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100f9e:	eef0 0a64 	vmov.f32	s1, s9
 8100fa2:	d622      	bvs.n	8100fea <__mulsc3+0x222>
 8100fa4:	eef4 1a61 	vcmp.f32	s3, s3
 8100fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8100fac:	bf78      	it	vc
 8100fae:	2201      	movvc	r2, #1
 8100fb0:	f5ff af3b 	bvc.w	8100e2a <__mulsc3+0x62>
 8100fb4:	ee11 3a90 	vmov	r3, s3
 8100fb8:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 8101074 <__mulsc3+0x2ac>
 8100fbc:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8101078 <__mulsc3+0x2b0>
 8100fc0:	2b00      	cmp	r3, #0
 8100fc2:	bfb4      	ite	lt
 8100fc4:	eef0 1a64 	vmovlt.f32	s3, s9
 8100fc8:	eef0 1a44 	vmovge.f32	s3, s8
 8100fcc:	2201      	movs	r2, #1
 8100fce:	e72c      	b.n	8100e2a <__mulsc3+0x62>
 8100fd0:	ee10 3a10 	vmov	r3, s0
 8100fd4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8101074 <__mulsc3+0x2ac>
 8100fd8:	eddf 7a27 	vldr	s15, [pc, #156]	; 8101078 <__mulsc3+0x2b0>
 8100fdc:	2b00      	cmp	r3, #0
 8100fde:	bfb4      	ite	lt
 8100fe0:	eeb0 0a67 	vmovlt.f32	s0, s15
 8100fe4:	eeb0 0a47 	vmovge.f32	s0, s14
 8100fe8:	e7a0      	b.n	8100f2c <__mulsc3+0x164>
 8100fea:	ee11 3a10 	vmov	r3, s2
 8100fee:	ed9f 4a21 	vldr	s8, [pc, #132]	; 8101074 <__mulsc3+0x2ac>
 8100ff2:	eddf 4a21 	vldr	s9, [pc, #132]	; 8101078 <__mulsc3+0x2b0>
 8100ff6:	2b00      	cmp	r3, #0
 8100ff8:	bfb4      	ite	lt
 8100ffa:	eeb0 1a64 	vmovlt.f32	s2, s9
 8100ffe:	eeb0 1a44 	vmovge.f32	s2, s8
 8101002:	e7cf      	b.n	8100fa4 <__mulsc3+0x1dc>
 8101004:	ee11 3a90 	vmov	r3, s3
 8101008:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8101074 <__mulsc3+0x2ac>
 810100c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8101078 <__mulsc3+0x2b0>
 8101010:	2b00      	cmp	r3, #0
 8101012:	bfb4      	ite	lt
 8101014:	eef0 1a67 	vmovlt.f32	s3, s15
 8101018:	eef0 1a47 	vmovge.f32	s3, s14
 810101c:	e74d      	b.n	8100eba <__mulsc3+0xf2>
 810101e:	ee11 3a10 	vmov	r3, s2
 8101022:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8101074 <__mulsc3+0x2ac>
 8101026:	eddf 7a14 	vldr	s15, [pc, #80]	; 8101078 <__mulsc3+0x2b0>
 810102a:	2b00      	cmp	r3, #0
 810102c:	bfb4      	ite	lt
 810102e:	eeb0 1a67 	vmovlt.f32	s2, s15
 8101032:	eeb0 1a47 	vmovge.f32	s2, s14
 8101036:	e73a      	b.n	8100eae <__mulsc3+0xe6>
 8101038:	ee10 3a90 	vmov	r3, s1
 810103c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8101074 <__mulsc3+0x2ac>
 8101040:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8101078 <__mulsc3+0x2b0>
 8101044:	2b00      	cmp	r3, #0
 8101046:	bfb4      	ite	lt
 8101048:	eef0 0a67 	vmovlt.f32	s1, s15
 810104c:	eef0 0a47 	vmovge.f32	s1, s14
 8101050:	e727      	b.n	8100ea2 <__mulsc3+0xda>
 8101052:	ee10 3a10 	vmov	r3, s0
 8101056:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8101074 <__mulsc3+0x2ac>
 810105a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8101078 <__mulsc3+0x2b0>
 810105e:	2b00      	cmp	r3, #0
 8101060:	bfb4      	ite	lt
 8101062:	eeb0 0a67 	vmovlt.f32	s0, s15
 8101066:	eeb0 0a47 	vmovge.f32	s0, s14
 810106a:	e714      	b.n	8100e96 <__mulsc3+0xce>
 810106c:	7f7fffff 	.word	0x7f7fffff
 8101070:	7f800000 	.word	0x7f800000
 8101074:	00000000 	.word	0x00000000
 8101078:	80000000 	.word	0x80000000

0810107c <__aeabi_d2lz>:
 810107c:	b538      	push	{r3, r4, r5, lr}
 810107e:	2200      	movs	r2, #0
 8101080:	2300      	movs	r3, #0
 8101082:	4604      	mov	r4, r0
 8101084:	460d      	mov	r5, r1
 8101086:	f7ff fdb1 	bl	8100bec <__aeabi_dcmplt>
 810108a:	b928      	cbnz	r0, 8101098 <__aeabi_d2lz+0x1c>
 810108c:	4620      	mov	r0, r4
 810108e:	4629      	mov	r1, r5
 8101090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8101094:	f000 b80a 	b.w	81010ac <__aeabi_d2ulz>
 8101098:	4620      	mov	r0, r4
 810109a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 810109e:	f000 f805 	bl	81010ac <__aeabi_d2ulz>
 81010a2:	4240      	negs	r0, r0
 81010a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81010a8:	bd38      	pop	{r3, r4, r5, pc}
 81010aa:	bf00      	nop

081010ac <__aeabi_d2ulz>:
 81010ac:	b5d0      	push	{r4, r6, r7, lr}
 81010ae:	4b0c      	ldr	r3, [pc, #48]	; (81010e0 <__aeabi_d2ulz+0x34>)
 81010b0:	2200      	movs	r2, #0
 81010b2:	4606      	mov	r6, r0
 81010b4:	460f      	mov	r7, r1
 81010b6:	f7ff fb27 	bl	8100708 <__aeabi_dmul>
 81010ba:	f7ff fdfd 	bl	8100cb8 <__aeabi_d2uiz>
 81010be:	4604      	mov	r4, r0
 81010c0:	f7ff faa8 	bl	8100614 <__aeabi_ui2d>
 81010c4:	4b07      	ldr	r3, [pc, #28]	; (81010e4 <__aeabi_d2ulz+0x38>)
 81010c6:	2200      	movs	r2, #0
 81010c8:	f7ff fb1e 	bl	8100708 <__aeabi_dmul>
 81010cc:	4602      	mov	r2, r0
 81010ce:	460b      	mov	r3, r1
 81010d0:	4630      	mov	r0, r6
 81010d2:	4639      	mov	r1, r7
 81010d4:	f7ff f960 	bl	8100398 <__aeabi_dsub>
 81010d8:	f7ff fdee 	bl	8100cb8 <__aeabi_d2uiz>
 81010dc:	4621      	mov	r1, r4
 81010de:	bdd0      	pop	{r4, r6, r7, pc}
 81010e0:	3df00000 	.word	0x3df00000
 81010e4:	41f00000 	.word	0x41f00000

081010e8 <__udivmoddi4>:
 81010e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81010ec:	9d08      	ldr	r5, [sp, #32]
 81010ee:	4604      	mov	r4, r0
 81010f0:	468c      	mov	ip, r1
 81010f2:	2b00      	cmp	r3, #0
 81010f4:	f040 8083 	bne.w	81011fe <__udivmoddi4+0x116>
 81010f8:	428a      	cmp	r2, r1
 81010fa:	4617      	mov	r7, r2
 81010fc:	d947      	bls.n	810118e <__udivmoddi4+0xa6>
 81010fe:	fab2 f282 	clz	r2, r2
 8101102:	b142      	cbz	r2, 8101116 <__udivmoddi4+0x2e>
 8101104:	f1c2 0020 	rsb	r0, r2, #32
 8101108:	fa24 f000 	lsr.w	r0, r4, r0
 810110c:	4091      	lsls	r1, r2
 810110e:	4097      	lsls	r7, r2
 8101110:	ea40 0c01 	orr.w	ip, r0, r1
 8101114:	4094      	lsls	r4, r2
 8101116:	ea4f 4817 	mov.w	r8, r7, lsr #16
 810111a:	0c23      	lsrs	r3, r4, #16
 810111c:	fbbc f6f8 	udiv	r6, ip, r8
 8101120:	fa1f fe87 	uxth.w	lr, r7
 8101124:	fb08 c116 	mls	r1, r8, r6, ip
 8101128:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810112c:	fb06 f10e 	mul.w	r1, r6, lr
 8101130:	4299      	cmp	r1, r3
 8101132:	d909      	bls.n	8101148 <__udivmoddi4+0x60>
 8101134:	18fb      	adds	r3, r7, r3
 8101136:	f106 30ff 	add.w	r0, r6, #4294967295
 810113a:	f080 8119 	bcs.w	8101370 <__udivmoddi4+0x288>
 810113e:	4299      	cmp	r1, r3
 8101140:	f240 8116 	bls.w	8101370 <__udivmoddi4+0x288>
 8101144:	3e02      	subs	r6, #2
 8101146:	443b      	add	r3, r7
 8101148:	1a5b      	subs	r3, r3, r1
 810114a:	b2a4      	uxth	r4, r4
 810114c:	fbb3 f0f8 	udiv	r0, r3, r8
 8101150:	fb08 3310 	mls	r3, r8, r0, r3
 8101154:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8101158:	fb00 fe0e 	mul.w	lr, r0, lr
 810115c:	45a6      	cmp	lr, r4
 810115e:	d909      	bls.n	8101174 <__udivmoddi4+0x8c>
 8101160:	193c      	adds	r4, r7, r4
 8101162:	f100 33ff 	add.w	r3, r0, #4294967295
 8101166:	f080 8105 	bcs.w	8101374 <__udivmoddi4+0x28c>
 810116a:	45a6      	cmp	lr, r4
 810116c:	f240 8102 	bls.w	8101374 <__udivmoddi4+0x28c>
 8101170:	3802      	subs	r0, #2
 8101172:	443c      	add	r4, r7
 8101174:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8101178:	eba4 040e 	sub.w	r4, r4, lr
 810117c:	2600      	movs	r6, #0
 810117e:	b11d      	cbz	r5, 8101188 <__udivmoddi4+0xa0>
 8101180:	40d4      	lsrs	r4, r2
 8101182:	2300      	movs	r3, #0
 8101184:	e9c5 4300 	strd	r4, r3, [r5]
 8101188:	4631      	mov	r1, r6
 810118a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810118e:	b902      	cbnz	r2, 8101192 <__udivmoddi4+0xaa>
 8101190:	deff      	udf	#255	; 0xff
 8101192:	fab2 f282 	clz	r2, r2
 8101196:	2a00      	cmp	r2, #0
 8101198:	d150      	bne.n	810123c <__udivmoddi4+0x154>
 810119a:	1bcb      	subs	r3, r1, r7
 810119c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81011a0:	fa1f f887 	uxth.w	r8, r7
 81011a4:	2601      	movs	r6, #1
 81011a6:	fbb3 fcfe 	udiv	ip, r3, lr
 81011aa:	0c21      	lsrs	r1, r4, #16
 81011ac:	fb0e 331c 	mls	r3, lr, ip, r3
 81011b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 81011b4:	fb08 f30c 	mul.w	r3, r8, ip
 81011b8:	428b      	cmp	r3, r1
 81011ba:	d907      	bls.n	81011cc <__udivmoddi4+0xe4>
 81011bc:	1879      	adds	r1, r7, r1
 81011be:	f10c 30ff 	add.w	r0, ip, #4294967295
 81011c2:	d202      	bcs.n	81011ca <__udivmoddi4+0xe2>
 81011c4:	428b      	cmp	r3, r1
 81011c6:	f200 80e9 	bhi.w	810139c <__udivmoddi4+0x2b4>
 81011ca:	4684      	mov	ip, r0
 81011cc:	1ac9      	subs	r1, r1, r3
 81011ce:	b2a3      	uxth	r3, r4
 81011d0:	fbb1 f0fe 	udiv	r0, r1, lr
 81011d4:	fb0e 1110 	mls	r1, lr, r0, r1
 81011d8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 81011dc:	fb08 f800 	mul.w	r8, r8, r0
 81011e0:	45a0      	cmp	r8, r4
 81011e2:	d907      	bls.n	81011f4 <__udivmoddi4+0x10c>
 81011e4:	193c      	adds	r4, r7, r4
 81011e6:	f100 33ff 	add.w	r3, r0, #4294967295
 81011ea:	d202      	bcs.n	81011f2 <__udivmoddi4+0x10a>
 81011ec:	45a0      	cmp	r8, r4
 81011ee:	f200 80d9 	bhi.w	81013a4 <__udivmoddi4+0x2bc>
 81011f2:	4618      	mov	r0, r3
 81011f4:	eba4 0408 	sub.w	r4, r4, r8
 81011f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 81011fc:	e7bf      	b.n	810117e <__udivmoddi4+0x96>
 81011fe:	428b      	cmp	r3, r1
 8101200:	d909      	bls.n	8101216 <__udivmoddi4+0x12e>
 8101202:	2d00      	cmp	r5, #0
 8101204:	f000 80b1 	beq.w	810136a <__udivmoddi4+0x282>
 8101208:	2600      	movs	r6, #0
 810120a:	e9c5 0100 	strd	r0, r1, [r5]
 810120e:	4630      	mov	r0, r6
 8101210:	4631      	mov	r1, r6
 8101212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101216:	fab3 f683 	clz	r6, r3
 810121a:	2e00      	cmp	r6, #0
 810121c:	d14a      	bne.n	81012b4 <__udivmoddi4+0x1cc>
 810121e:	428b      	cmp	r3, r1
 8101220:	d302      	bcc.n	8101228 <__udivmoddi4+0x140>
 8101222:	4282      	cmp	r2, r0
 8101224:	f200 80b8 	bhi.w	8101398 <__udivmoddi4+0x2b0>
 8101228:	1a84      	subs	r4, r0, r2
 810122a:	eb61 0103 	sbc.w	r1, r1, r3
 810122e:	2001      	movs	r0, #1
 8101230:	468c      	mov	ip, r1
 8101232:	2d00      	cmp	r5, #0
 8101234:	d0a8      	beq.n	8101188 <__udivmoddi4+0xa0>
 8101236:	e9c5 4c00 	strd	r4, ip, [r5]
 810123a:	e7a5      	b.n	8101188 <__udivmoddi4+0xa0>
 810123c:	f1c2 0320 	rsb	r3, r2, #32
 8101240:	fa20 f603 	lsr.w	r6, r0, r3
 8101244:	4097      	lsls	r7, r2
 8101246:	fa01 f002 	lsl.w	r0, r1, r2
 810124a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810124e:	40d9      	lsrs	r1, r3
 8101250:	4330      	orrs	r0, r6
 8101252:	0c03      	lsrs	r3, r0, #16
 8101254:	fbb1 f6fe 	udiv	r6, r1, lr
 8101258:	fa1f f887 	uxth.w	r8, r7
 810125c:	fb0e 1116 	mls	r1, lr, r6, r1
 8101260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8101264:	fb06 f108 	mul.w	r1, r6, r8
 8101268:	4299      	cmp	r1, r3
 810126a:	fa04 f402 	lsl.w	r4, r4, r2
 810126e:	d909      	bls.n	8101284 <__udivmoddi4+0x19c>
 8101270:	18fb      	adds	r3, r7, r3
 8101272:	f106 3cff 	add.w	ip, r6, #4294967295
 8101276:	f080 808d 	bcs.w	8101394 <__udivmoddi4+0x2ac>
 810127a:	4299      	cmp	r1, r3
 810127c:	f240 808a 	bls.w	8101394 <__udivmoddi4+0x2ac>
 8101280:	3e02      	subs	r6, #2
 8101282:	443b      	add	r3, r7
 8101284:	1a5b      	subs	r3, r3, r1
 8101286:	b281      	uxth	r1, r0
 8101288:	fbb3 f0fe 	udiv	r0, r3, lr
 810128c:	fb0e 3310 	mls	r3, lr, r0, r3
 8101290:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8101294:	fb00 f308 	mul.w	r3, r0, r8
 8101298:	428b      	cmp	r3, r1
 810129a:	d907      	bls.n	81012ac <__udivmoddi4+0x1c4>
 810129c:	1879      	adds	r1, r7, r1
 810129e:	f100 3cff 	add.w	ip, r0, #4294967295
 81012a2:	d273      	bcs.n	810138c <__udivmoddi4+0x2a4>
 81012a4:	428b      	cmp	r3, r1
 81012a6:	d971      	bls.n	810138c <__udivmoddi4+0x2a4>
 81012a8:	3802      	subs	r0, #2
 81012aa:	4439      	add	r1, r7
 81012ac:	1acb      	subs	r3, r1, r3
 81012ae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 81012b2:	e778      	b.n	81011a6 <__udivmoddi4+0xbe>
 81012b4:	f1c6 0c20 	rsb	ip, r6, #32
 81012b8:	fa03 f406 	lsl.w	r4, r3, r6
 81012bc:	fa22 f30c 	lsr.w	r3, r2, ip
 81012c0:	431c      	orrs	r4, r3
 81012c2:	fa20 f70c 	lsr.w	r7, r0, ip
 81012c6:	fa01 f306 	lsl.w	r3, r1, r6
 81012ca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 81012ce:	fa21 f10c 	lsr.w	r1, r1, ip
 81012d2:	431f      	orrs	r7, r3
 81012d4:	0c3b      	lsrs	r3, r7, #16
 81012d6:	fbb1 f9fe 	udiv	r9, r1, lr
 81012da:	fa1f f884 	uxth.w	r8, r4
 81012de:	fb0e 1119 	mls	r1, lr, r9, r1
 81012e2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 81012e6:	fb09 fa08 	mul.w	sl, r9, r8
 81012ea:	458a      	cmp	sl, r1
 81012ec:	fa02 f206 	lsl.w	r2, r2, r6
 81012f0:	fa00 f306 	lsl.w	r3, r0, r6
 81012f4:	d908      	bls.n	8101308 <__udivmoddi4+0x220>
 81012f6:	1861      	adds	r1, r4, r1
 81012f8:	f109 30ff 	add.w	r0, r9, #4294967295
 81012fc:	d248      	bcs.n	8101390 <__udivmoddi4+0x2a8>
 81012fe:	458a      	cmp	sl, r1
 8101300:	d946      	bls.n	8101390 <__udivmoddi4+0x2a8>
 8101302:	f1a9 0902 	sub.w	r9, r9, #2
 8101306:	4421      	add	r1, r4
 8101308:	eba1 010a 	sub.w	r1, r1, sl
 810130c:	b2bf      	uxth	r7, r7
 810130e:	fbb1 f0fe 	udiv	r0, r1, lr
 8101312:	fb0e 1110 	mls	r1, lr, r0, r1
 8101316:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 810131a:	fb00 f808 	mul.w	r8, r0, r8
 810131e:	45b8      	cmp	r8, r7
 8101320:	d907      	bls.n	8101332 <__udivmoddi4+0x24a>
 8101322:	19e7      	adds	r7, r4, r7
 8101324:	f100 31ff 	add.w	r1, r0, #4294967295
 8101328:	d22e      	bcs.n	8101388 <__udivmoddi4+0x2a0>
 810132a:	45b8      	cmp	r8, r7
 810132c:	d92c      	bls.n	8101388 <__udivmoddi4+0x2a0>
 810132e:	3802      	subs	r0, #2
 8101330:	4427      	add	r7, r4
 8101332:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101336:	eba7 0708 	sub.w	r7, r7, r8
 810133a:	fba0 8902 	umull	r8, r9, r0, r2
 810133e:	454f      	cmp	r7, r9
 8101340:	46c6      	mov	lr, r8
 8101342:	4649      	mov	r1, r9
 8101344:	d31a      	bcc.n	810137c <__udivmoddi4+0x294>
 8101346:	d017      	beq.n	8101378 <__udivmoddi4+0x290>
 8101348:	b15d      	cbz	r5, 8101362 <__udivmoddi4+0x27a>
 810134a:	ebb3 020e 	subs.w	r2, r3, lr
 810134e:	eb67 0701 	sbc.w	r7, r7, r1
 8101352:	fa07 fc0c 	lsl.w	ip, r7, ip
 8101356:	40f2      	lsrs	r2, r6
 8101358:	ea4c 0202 	orr.w	r2, ip, r2
 810135c:	40f7      	lsrs	r7, r6
 810135e:	e9c5 2700 	strd	r2, r7, [r5]
 8101362:	2600      	movs	r6, #0
 8101364:	4631      	mov	r1, r6
 8101366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810136a:	462e      	mov	r6, r5
 810136c:	4628      	mov	r0, r5
 810136e:	e70b      	b.n	8101188 <__udivmoddi4+0xa0>
 8101370:	4606      	mov	r6, r0
 8101372:	e6e9      	b.n	8101148 <__udivmoddi4+0x60>
 8101374:	4618      	mov	r0, r3
 8101376:	e6fd      	b.n	8101174 <__udivmoddi4+0x8c>
 8101378:	4543      	cmp	r3, r8
 810137a:	d2e5      	bcs.n	8101348 <__udivmoddi4+0x260>
 810137c:	ebb8 0e02 	subs.w	lr, r8, r2
 8101380:	eb69 0104 	sbc.w	r1, r9, r4
 8101384:	3801      	subs	r0, #1
 8101386:	e7df      	b.n	8101348 <__udivmoddi4+0x260>
 8101388:	4608      	mov	r0, r1
 810138a:	e7d2      	b.n	8101332 <__udivmoddi4+0x24a>
 810138c:	4660      	mov	r0, ip
 810138e:	e78d      	b.n	81012ac <__udivmoddi4+0x1c4>
 8101390:	4681      	mov	r9, r0
 8101392:	e7b9      	b.n	8101308 <__udivmoddi4+0x220>
 8101394:	4666      	mov	r6, ip
 8101396:	e775      	b.n	8101284 <__udivmoddi4+0x19c>
 8101398:	4630      	mov	r0, r6
 810139a:	e74a      	b.n	8101232 <__udivmoddi4+0x14a>
 810139c:	f1ac 0c02 	sub.w	ip, ip, #2
 81013a0:	4439      	add	r1, r7
 81013a2:	e713      	b.n	81011cc <__udivmoddi4+0xe4>
 81013a4:	3802      	subs	r0, #2
 81013a6:	443c      	add	r4, r7
 81013a8:	e724      	b.n	81011f4 <__udivmoddi4+0x10c>
 81013aa:	bf00      	nop

081013ac <__aeabi_idiv0>:
 81013ac:	4770      	bx	lr
 81013ae:	bf00      	nop

081013b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81013b0:	b480      	push	{r7}
 81013b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81013b4:	4b0b      	ldr	r3, [pc, #44]	; (81013e4 <SystemInit+0x34>)
 81013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81013ba:	4a0a      	ldr	r2, [pc, #40]	; (81013e4 <SystemInit+0x34>)
 81013bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81013c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81013c4:	4b07      	ldr	r3, [pc, #28]	; (81013e4 <SystemInit+0x34>)
 81013c6:	691b      	ldr	r3, [r3, #16]
 81013c8:	4a06      	ldr	r2, [pc, #24]	; (81013e4 <SystemInit+0x34>)
 81013ca:	f043 0310 	orr.w	r3, r3, #16
 81013ce:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 81013d0:	4b04      	ldr	r3, [pc, #16]	; (81013e4 <SystemInit+0x34>)
 81013d2:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 81013d6:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 81013d8:	bf00      	nop
 81013da:	46bd      	mov	sp, r7
 81013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013e0:	4770      	bx	lr
 81013e2:	bf00      	nop
 81013e4:	e000ed00 	.word	0xe000ed00

081013e8 <ADE9000_Setup>:
int32_t n_int = 0;

//union DATA  ia[N_SAMPLE];
//va[N_SAMPLE],

void ADE9000_Setup(){
 81013e8:	b580      	push	{r7, lr}
 81013ea:	b082      	sub	sp, #8
 81013ec:	af00      	add	r7, sp, #0
	uint32_t value_reg_32;
	uint16_t value_reg_16;

	// ADDR_PGA_GAIN
	value_reg_16 = 0x0000; //gain all channel 1
 81013ee:	2300      	movs	r3, #0
 81013f0:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_PGA_GAIN,value_reg_16);
 81013f2:	88fb      	ldrh	r3, [r7, #6]
 81013f4:	4619      	mov	r1, r3
 81013f6:	f240 40b9 	movw	r0, #1209	; 0x4b9
 81013fa:	f000 f8ed 	bl	81015d8 <ADE9000_SPI_Write_16>

	//CONFIG2
	value_reg_16 = 	0x0C00;			//Default High pass corner frequency of 1.25Hz
 81013fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101402:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG2,value_reg_16);
 8101404:	88fb      	ldrh	r3, [r7, #6]
 8101406:	4619      	mov	r1, r3
 8101408:	f240 40af 	movw	r0, #1199	; 0x4af
 810140c:	f000 f8e4 	bl	81015d8 <ADE9000_SPI_Write_16>

	//CONFIG1
	//EXT_REF off
	value_reg_16 = 0x000000;
 8101410:	2300      	movs	r3, #0
 8101412:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG1,value_reg_16);
 8101414:	88fb      	ldrh	r3, [r7, #6]
 8101416:	4619      	mov	r1, r3
 8101418:	f240 4081 	movw	r0, #1153	; 0x481
 810141c:	f000 f8dc 	bl	81015d8 <ADE9000_SPI_Write_16>

	//ACCMODE
	value_reg_16= 0x0000;			//3P4W Wye configuration
 8101420:	2300      	movs	r3, #0
 8101422:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_ACCMODE,value_reg_16);
 8101424:	88fb      	ldrh	r3, [r7, #6]
 8101426:	4619      	mov	r1, r3
 8101428:	f240 4092 	movw	r0, #1170	; 0x492
 810142c:	f000 f8d4 	bl	81015d8 <ADE9000_SPI_Write_16>
	//value_reg_16 = 0x1020;//IN, sinc4, stop full, fixed rate, stop, tutti canali(0000)
	//value_reg_16 = 0x0029; //no IN, sinc4, stop full, fixed rate, stop, solo VA (1001)
	//value_reg_16 = 0x0021; //no IN, sinc4, stop full, fixed rate, stop, solo Ia e VA (0001)
	//value_reg_16 = 0x0221; //no IN, LPF, stop full, fixed rate, stop, solo Ia e VA (0001)

	value_reg_16 = 0x0000;
 8101430:	2300      	movs	r3, #0
 8101432:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_IN_EN<<12);
	value_reg_16 = value_reg_16 | (WF_SRC<<8);
 8101434:	88fb      	ldrh	r3, [r7, #6]
 8101436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 810143a:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_MODE<<6);
 810143c:	88fb      	ldrh	r3, [r7, #6]
 810143e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8101442:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_CAP_SEL<<5);
 8101444:	88fb      	ldrh	r3, [r7, #6]
 8101446:	f043 0320 	orr.w	r3, r3, #32
 810144a:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | BURST_CHAN;
 810144c:	88fb      	ldrh	r3, [r7, #6]
 810144e:	f043 0308 	orr.w	r3, r3, #8
 8101452:	80fb      	strh	r3, [r7, #6]

	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101454:	88fb      	ldrh	r3, [r7, #6]
 8101456:	4619      	mov	r1, r3
 8101458:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810145c:	f000 f8bc 	bl	81015d8 <ADE9000_SPI_Write_16>
	// 1 bit per pagina: pag15-pag0
	//fa PageFULL in STATUS0

	//value_reg_16 = 0x8000; //page 15
	//value_reg_16 = 0xFFFF; //all page
	value_reg_16 = 0x8080; //page 15, page 7 (metà)
 8101460:	f248 0380 	movw	r3, #32896	; 0x8080
 8101464:	80fb      	strh	r3, [r7, #6]
	//value_reg_16 = 0x0000; //no int
	ADE9000_SPI_Write_16(ADDR_WFB_PG_IRQEN,value_reg_16);
 8101466:	88fb      	ldrh	r3, [r7, #6]
 8101468:	4619      	mov	r1, r3
 810146a:	f240 40a1 	movw	r0, #1185	; 0x4a1
 810146e:	f000 f8b3 	bl	81015d8 <ADE9000_SPI_Write_16>

	//ADDR_MASK0
	//IRQ0 per full page (bit 17)
	//quando una delle pagine settate è piena
	value_reg_32 = 0x00020000;
 8101472:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8101476:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK0,value_reg_32);
 8101478:	6839      	ldr	r1, [r7, #0]
 810147a:	f240 4005 	movw	r0, #1029	; 0x405
 810147e:	f000 f8df 	bl	8101640 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK0);
 8101482:	f240 4005 	movw	r0, #1029	; 0x405
 8101486:	f000 f86b 	bl	8101560 <ADE9000_SPI_Read_32>
 810148a:	6038      	str	r0, [r7, #0]

	//ADDR_MASK1
	//disable all int
	value_reg_32 = 0x00000000;
 810148c:	2300      	movs	r3, #0
 810148e:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK1,value_reg_32);
 8101490:	6839      	ldr	r1, [r7, #0]
 8101492:	f240 4006 	movw	r0, #1030	; 0x406
 8101496:	f000 f8d3 	bl	8101640 <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK1);
 810149a:	f240 4006 	movw	r0, #1030	; 0x406
 810149e:	f000 f85f 	bl	8101560 <ADE9000_SPI_Read_32>
 81014a2:	6038      	str	r0, [r7, #0]

	//ADDR_RUN
	//Start ADE9000 measurement
	value_reg_16 = 0x0001;
 81014a4:	2301      	movs	r3, #1
 81014a6:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16);
 81014a8:	88fb      	ldrh	r3, [r7, #6]
 81014aa:	4619      	mov	r1, r3
 81014ac:	f44f 6090 	mov.w	r0, #1152	; 0x480
 81014b0:	f000 f892 	bl	81015d8 <ADE9000_SPI_Write_16>
}
 81014b4:	bf00      	nop
 81014b6:	3708      	adds	r7, #8
 81014b8:	46bd      	mov	sp, r7
 81014ba:	bd80      	pop	{r7, pc}

081014bc <ADE9000_Power>:

//power-on sequence
void ADE9000_Power(void){
 81014bc:	b580      	push	{r7, lr}
 81014be:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 81014c0:	2200      	movs	r2, #0
 81014c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81014c6:	480c      	ldr	r0, [pc, #48]	; (81014f8 <ADE9000_Power+0x3c>)
 81014c8:	f001 ffd4 	bl	8103474 <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 81014cc:	2200      	movs	r2, #0
 81014ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 81014d2:	4809      	ldr	r0, [pc, #36]	; (81014f8 <ADE9000_Power+0x3c>)
 81014d4:	f001 ffce 	bl	8103474 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 81014d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81014dc:	f001 fcd2 	bl	8102e84 <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 81014e0:	2201      	movs	r2, #1
 81014e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 81014e6:	4804      	ldr	r0, [pc, #16]	; (81014f8 <ADE9000_Power+0x3c>)
 81014e8:	f001 ffc4 	bl	8103474 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 81014ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81014f0:	f001 fcc8 	bl	8102e84 <HAL_Delay>
    } while ((value_reg_32 & 0x00010000)==0);
    //Clear IRQ1
    value_reg_32 = value_reg_32 & 0x00010000;
    ADE9000_SPI_Write_32(ADDR_STATUS1,value_reg_32);
    */
}
 81014f4:	bf00      	nop
 81014f6:	bd80      	pop	{r7, pc}
 81014f8:	58021000 	.word	0x58021000

081014fc <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 81014fc:	b580      	push	{r7, lr}
 81014fe:	b084      	sub	sp, #16
 8101500:	af00      	add	r7, sp, #0
 8101502:	4603      	mov	r3, r0
 8101504:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 8101506:	88fb      	ldrh	r3, [r7, #6]
 8101508:	011b      	lsls	r3, r3, #4
 810150a:	b29b      	uxth	r3, r3
 810150c:	3308      	adds	r3, #8
 810150e:	b29b      	uxth	r3, r3
 8101510:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101512:	2200      	movs	r2, #0
 8101514:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101518:	480f      	ldr	r0, [pc, #60]	; (8101558 <ADE9000_SPI_Read_16+0x5c>)
 810151a:	f001 ffab 	bl	8103474 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 810151e:	f107 0108 	add.w	r1, r7, #8
 8101522:	2364      	movs	r3, #100	; 0x64
 8101524:	2201      	movs	r2, #1
 8101526:	480d      	ldr	r0, [pc, #52]	; (810155c <ADE9000_SPI_Read_16+0x60>)
 8101528:	f003 feb2 	bl	8105290 <HAL_SPI_Transmit>
 810152c:	4603      	mov	r3, r0
 810152e:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 8101530:	f107 010c 	add.w	r1, r7, #12
 8101534:	2364      	movs	r3, #100	; 0x64
 8101536:	2201      	movs	r2, #1
 8101538:	4808      	ldr	r0, [pc, #32]	; (810155c <ADE9000_SPI_Read_16+0x60>)
 810153a:	f004 f897 	bl	810566c <HAL_SPI_Receive>
 810153e:	4603      	mov	r3, r0
 8101540:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101542:	2201      	movs	r2, #1
 8101544:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101548:	4803      	ldr	r0, [pc, #12]	; (8101558 <ADE9000_SPI_Read_16+0x5c>)
 810154a:	f001 ff93 	bl	8103474 <HAL_GPIO_WritePin>

	return data.data_16;
 810154e:	89bb      	ldrh	r3, [r7, #12]
}
 8101550:	4618      	mov	r0, r3
 8101552:	3710      	adds	r7, #16
 8101554:	46bd      	mov	sp, r7
 8101556:	bd80      	pop	{r7, pc}
 8101558:	58021800 	.word	0x58021800
 810155c:	10000338 	.word	0x10000338

08101560 <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 8101560:	b580      	push	{r7, lr}
 8101562:	b086      	sub	sp, #24
 8101564:	af00      	add	r7, sp, #0
 8101566:	4603      	mov	r3, r0
 8101568:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 810156a:	88fb      	ldrh	r3, [r7, #6]
 810156c:	011b      	lsls	r3, r3, #4
 810156e:	b29b      	uxth	r3, r3
 8101570:	3308      	adds	r3, #8
 8101572:	b29b      	uxth	r3, r3
 8101574:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101576:	2200      	movs	r2, #0
 8101578:	f44f 7100 	mov.w	r1, #512	; 0x200
 810157c:	4814      	ldr	r0, [pc, #80]	; (81015d0 <ADE9000_SPI_Read_32+0x70>)
 810157e:	f001 ff79 	bl	8103474 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101582:	f107 010c 	add.w	r1, r7, #12
 8101586:	2364      	movs	r3, #100	; 0x64
 8101588:	2201      	movs	r2, #1
 810158a:	4812      	ldr	r0, [pc, #72]	; (81015d4 <ADE9000_SPI_Read_32+0x74>)
 810158c:	f003 fe80 	bl	8105290 <HAL_SPI_Transmit>
 8101590:	4603      	mov	r3, r0
 8101592:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8101594:	f107 0110 	add.w	r1, r7, #16
 8101598:	3102      	adds	r1, #2
 810159a:	2364      	movs	r3, #100	; 0x64
 810159c:	2201      	movs	r2, #1
 810159e:	480d      	ldr	r0, [pc, #52]	; (81015d4 <ADE9000_SPI_Read_32+0x74>)
 81015a0:	f004 f864 	bl	810566c <HAL_SPI_Receive>
 81015a4:	4603      	mov	r3, r0
 81015a6:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81015a8:	f107 0110 	add.w	r1, r7, #16
 81015ac:	2364      	movs	r3, #100	; 0x64
 81015ae:	2201      	movs	r2, #1
 81015b0:	4808      	ldr	r0, [pc, #32]	; (81015d4 <ADE9000_SPI_Read_32+0x74>)
 81015b2:	f004 f85b 	bl	810566c <HAL_SPI_Receive>
 81015b6:	4603      	mov	r3, r0
 81015b8:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81015ba:	2201      	movs	r2, #1
 81015bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 81015c0:	4803      	ldr	r0, [pc, #12]	; (81015d0 <ADE9000_SPI_Read_32+0x70>)
 81015c2:	f001 ff57 	bl	8103474 <HAL_GPIO_WritePin>

	return data.data_32;
 81015c6:	693b      	ldr	r3, [r7, #16]
}
 81015c8:	4618      	mov	r0, r3
 81015ca:	3718      	adds	r7, #24
 81015cc:	46bd      	mov	sp, r7
 81015ce:	bd80      	pop	{r7, pc}
 81015d0:	58021800 	.word	0x58021800
 81015d4:	10000338 	.word	0x10000338

081015d8 <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 81015d8:	b580      	push	{r7, lr}
 81015da:	b084      	sub	sp, #16
 81015dc:	af00      	add	r7, sp, #0
 81015de:	4603      	mov	r3, r0
 81015e0:	460a      	mov	r2, r1
 81015e2:	80fb      	strh	r3, [r7, #6]
 81015e4:	4613      	mov	r3, r2
 81015e6:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 81015e8:	88fb      	ldrh	r3, [r7, #6]
 81015ea:	011b      	lsls	r3, r3, #4
 81015ec:	b29b      	uxth	r3, r3
 81015ee:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81015f0:	2200      	movs	r2, #0
 81015f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 81015f6:	4810      	ldr	r0, [pc, #64]	; (8101638 <ADE9000_SPI_Write_16+0x60>)
 81015f8:	f001 ff3c 	bl	8103474 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81015fc:	f107 010c 	add.w	r1, r7, #12
 8101600:	2364      	movs	r3, #100	; 0x64
 8101602:	2201      	movs	r2, #1
 8101604:	480d      	ldr	r0, [pc, #52]	; (810163c <ADE9000_SPI_Write_16+0x64>)
 8101606:	f003 fe43 	bl	8105290 <HAL_SPI_Transmit>
 810160a:	4603      	mov	r3, r0
 810160c:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 810160e:	88bb      	ldrh	r3, [r7, #4]
 8101610:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 8101612:	f107 0108 	add.w	r1, r7, #8
 8101616:	2364      	movs	r3, #100	; 0x64
 8101618:	2201      	movs	r2, #1
 810161a:	4808      	ldr	r0, [pc, #32]	; (810163c <ADE9000_SPI_Write_16+0x64>)
 810161c:	f003 fe38 	bl	8105290 <HAL_SPI_Transmit>
 8101620:	4603      	mov	r3, r0
 8101622:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101624:	2201      	movs	r2, #1
 8101626:	f44f 7100 	mov.w	r1, #512	; 0x200
 810162a:	4803      	ldr	r0, [pc, #12]	; (8101638 <ADE9000_SPI_Write_16+0x60>)
 810162c:	f001 ff22 	bl	8103474 <HAL_GPIO_WritePin>

}
 8101630:	bf00      	nop
 8101632:	3710      	adds	r7, #16
 8101634:	46bd      	mov	sp, r7
 8101636:	bd80      	pop	{r7, pc}
 8101638:	58021800 	.word	0x58021800
 810163c:	10000338 	.word	0x10000338

08101640 <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 8101640:	b580      	push	{r7, lr}
 8101642:	b084      	sub	sp, #16
 8101644:	af00      	add	r7, sp, #0
 8101646:	4603      	mov	r3, r0
 8101648:	6039      	str	r1, [r7, #0]
 810164a:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 810164c:	88fb      	ldrh	r3, [r7, #6]
 810164e:	011b      	lsls	r3, r3, #4
 8101650:	b29b      	uxth	r3, r3
 8101652:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101654:	2200      	movs	r2, #0
 8101656:	f44f 7100 	mov.w	r1, #512	; 0x200
 810165a:	4815      	ldr	r0, [pc, #84]	; (81016b0 <ADE9000_SPI_Write_32+0x70>)
 810165c:	f001 ff0a 	bl	8103474 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101660:	f107 010c 	add.w	r1, r7, #12
 8101664:	2364      	movs	r3, #100	; 0x64
 8101666:	2201      	movs	r2, #1
 8101668:	4812      	ldr	r0, [pc, #72]	; (81016b4 <ADE9000_SPI_Write_32+0x74>)
 810166a:	f003 fe11 	bl	8105290 <HAL_SPI_Transmit>
 810166e:	4603      	mov	r3, r0
 8101670:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 8101672:	683b      	ldr	r3, [r7, #0]
 8101674:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 8101676:	f107 0108 	add.w	r1, r7, #8
 810167a:	3102      	adds	r1, #2
 810167c:	2364      	movs	r3, #100	; 0x64
 810167e:	2201      	movs	r2, #1
 8101680:	480c      	ldr	r0, [pc, #48]	; (81016b4 <ADE9000_SPI_Write_32+0x74>)
 8101682:	f003 fe05 	bl	8105290 <HAL_SPI_Transmit>
 8101686:	4603      	mov	r3, r0
 8101688:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 810168a:	f107 0108 	add.w	r1, r7, #8
 810168e:	2364      	movs	r3, #100	; 0x64
 8101690:	2201      	movs	r2, #1
 8101692:	4808      	ldr	r0, [pc, #32]	; (81016b4 <ADE9000_SPI_Write_32+0x74>)
 8101694:	f003 fdfc 	bl	8105290 <HAL_SPI_Transmit>
 8101698:	4603      	mov	r3, r0
 810169a:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 810169c:	2201      	movs	r2, #1
 810169e:	f44f 7100 	mov.w	r1, #512	; 0x200
 81016a2:	4803      	ldr	r0, [pc, #12]	; (81016b0 <ADE9000_SPI_Write_32+0x70>)
 81016a4:	f001 fee6 	bl	8103474 <HAL_GPIO_WritePin>

}
 81016a8:	bf00      	nop
 81016aa:	3710      	adds	r7, #16
 81016ac:	46bd      	mov	sp, r7
 81016ae:	bd80      	pop	{r7, pc}
 81016b0:	58021800 	.word	0x58021800
 81016b4:	10000338 	.word	0x10000338

081016b8 <Start_Waveform_Buffer>:


void Start_Waveform_Buffer() {
 81016b8:	b580      	push	{r7, lr}
 81016ba:	b082      	sub	sp, #8
 81016bc:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 81016be:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81016c2:	f7ff ff1b 	bl	81014fc <ADE9000_SPI_Read_16>
 81016c6:	4603      	mov	r3, r0
 81016c8:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16|0x0010);
 81016ca:	88fb      	ldrh	r3, [r7, #6]
 81016cc:	f043 0310 	orr.w	r3, r3, #16
 81016d0:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 81016d2:	88fb      	ldrh	r3, [r7, #6]
 81016d4:	4619      	mov	r1, r3
 81016d6:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81016da:	f7ff ff7d 	bl	81015d8 <ADE9000_SPI_Write_16>
}
 81016de:	bf00      	nop
 81016e0:	3708      	adds	r7, #8
 81016e2:	46bd      	mov	sp, r7
 81016e4:	bd80      	pop	{r7, pc}

081016e6 <Stop_Waveform_Buffer>:

void Stop_Waveform_Buffer(){
 81016e6:	b580      	push	{r7, lr}
 81016e8:	b082      	sub	sp, #8
 81016ea:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 81016ec:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81016f0:	f7ff ff04 	bl	81014fc <ADE9000_SPI_Read_16>
 81016f4:	4603      	mov	r3, r0
 81016f6:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16 & 0xFFEF);
 81016f8:	88fb      	ldrh	r3, [r7, #6]
 81016fa:	f023 0310 	bic.w	r3, r3, #16
 81016fe:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 8101700:	88fb      	ldrh	r3, [r7, #6]
 8101702:	4619      	mov	r1, r3
 8101704:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101708:	f7ff ff66 	bl	81015d8 <ADE9000_SPI_Write_16>
}
 810170c:	bf00      	nop
 810170e:	3708      	adds	r7, #8
 8101710:	46bd      	mov	sp, r7
 8101712:	bd80      	pop	{r7, pc}

08101714 <ADE9000_SPI_Burst_Read_one_ch>:
	printf("ADDR_VLEVEL = %x \r\n",  data_32);


}

void ADE9000_SPI_Burst_Read_one_ch(uint16_t Address, uint16_t n, int32_t* data){
 8101714:	b580      	push	{r7, lr}
 8101716:	b086      	sub	sp, #24
 8101718:	af00      	add	r7, sp, #0
 810171a:	4603      	mov	r3, r0
 810171c:	603a      	str	r2, [r7, #0]
 810171e:	80fb      	strh	r3, [r7, #6]
 8101720:	460b      	mov	r3, r1
 8101722:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 8101724:	88fb      	ldrh	r3, [r7, #6]
 8101726:	011b      	lsls	r3, r3, #4
 8101728:	b29b      	uxth	r3, r3
 810172a:	3308      	adds	r3, #8
 810172c:	b29b      	uxth	r3, r3
 810172e:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 8101730:	2200      	movs	r2, #0
 8101732:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101736:	481d      	ldr	r0, [pc, #116]	; (81017ac <ADE9000_SPI_Burst_Read_one_ch+0x98>)
 8101738:	f001 fe9c 	bl	8103474 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 810173c:	f107 010c 	add.w	r1, r7, #12
 8101740:	2364      	movs	r3, #100	; 0x64
 8101742:	2201      	movs	r2, #1
 8101744:	481a      	ldr	r0, [pc, #104]	; (81017b0 <ADE9000_SPI_Burst_Read_one_ch+0x9c>)
 8101746:	f003 fda3 	bl	8105290 <HAL_SPI_Transmit>
 810174a:	4603      	mov	r3, r0
 810174c:	757b      	strb	r3, [r7, #21]

	for(uint16_t i=0; i<n; i++){
 810174e:	2300      	movs	r3, #0
 8101750:	82fb      	strh	r3, [r7, #22]
 8101752:	e01c      	b.n	810178e <ADE9000_SPI_Burst_Read_one_ch+0x7a>
		//Receive data
		ret = HAL_SPI_Receive(&hspi1,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 8101754:	f107 0110 	add.w	r1, r7, #16
 8101758:	3102      	adds	r1, #2
 810175a:	2364      	movs	r3, #100	; 0x64
 810175c:	2201      	movs	r2, #1
 810175e:	4814      	ldr	r0, [pc, #80]	; (81017b0 <ADE9000_SPI_Burst_Read_one_ch+0x9c>)
 8101760:	f003 ff84 	bl	810566c <HAL_SPI_Receive>
 8101764:	4603      	mov	r3, r0
 8101766:	757b      	strb	r3, [r7, #21]
		ret = HAL_SPI_Receive(&hspi1,app.data_8,SIZE_16,TIMEOUT_SPI);
 8101768:	f107 0110 	add.w	r1, r7, #16
 810176c:	2364      	movs	r3, #100	; 0x64
 810176e:	2201      	movs	r2, #1
 8101770:	480f      	ldr	r0, [pc, #60]	; (81017b0 <ADE9000_SPI_Burst_Read_one_ch+0x9c>)
 8101772:	f003 ff7b 	bl	810566c <HAL_SPI_Receive>
 8101776:	4603      	mov	r3, r0
 8101778:	757b      	strb	r3, [r7, #21]
		*(data + i)= app.data_32;
 810177a:	6939      	ldr	r1, [r7, #16]
 810177c:	8afb      	ldrh	r3, [r7, #22]
 810177e:	009b      	lsls	r3, r3, #2
 8101780:	683a      	ldr	r2, [r7, #0]
 8101782:	4413      	add	r3, r2
 8101784:	460a      	mov	r2, r1
 8101786:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0; i<n; i++){
 8101788:	8afb      	ldrh	r3, [r7, #22]
 810178a:	3301      	adds	r3, #1
 810178c:	82fb      	strh	r3, [r7, #22]
 810178e:	8afa      	ldrh	r2, [r7, #22]
 8101790:	88bb      	ldrh	r3, [r7, #4]
 8101792:	429a      	cmp	r2, r3
 8101794:	d3de      	bcc.n	8101754 <ADE9000_SPI_Burst_Read_one_ch+0x40>
	}

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101796:	2201      	movs	r2, #1
 8101798:	f44f 7100 	mov.w	r1, #512	; 0x200
 810179c:	4803      	ldr	r0, [pc, #12]	; (81017ac <ADE9000_SPI_Burst_Read_one_ch+0x98>)
 810179e:	f001 fe69 	bl	8103474 <HAL_GPIO_WritePin>
}
 81017a2:	bf00      	nop
 81017a4:	3718      	adds	r7, #24
 81017a6:	46bd      	mov	sp, r7
 81017a8:	bd80      	pop	{r7, pc}
 81017aa:	bf00      	nop
 81017ac:	58021800 	.word	0x58021800
 81017b0:	10000338 	.word	0x10000338
 81017b4:	00000000 	.word	0x00000000

081017b8 <ADE9000_Conv_ADC_I>:
	}
	printf("errori: %d\r\n",err);

}

void ADE9000_Conv_ADC_I(union DATA *data_i, uint32_t n) {
 81017b8:	b590      	push	{r4, r7, lr}
 81017ba:	b085      	sub	sp, #20
 81017bc:	af00      	add	r7, sp, #0
 81017be:	6078      	str	r0, [r7, #4]
 81017c0:	6039      	str	r1, [r7, #0]
	if (ACQUISITION_FREQ == 32000) {
		for (uint32_t i = 0; i < n; i++) {
			data_i[i].data_float = ((float) data_i[i].data_int * V_REF / FULL_SCALE_CODE_SINC4) / FDT_I;
		}
	} else if (ACQUISITION_FREQ == 8000) {
		for (uint32_t i = 0; i < n; i++) {
 81017c2:	2300      	movs	r3, #0
 81017c4:	60fb      	str	r3, [r7, #12]
 81017c6:	e024      	b.n	8101812 <ADE9000_Conv_ADC_I+0x5a>
			data_i[i].data_float = ((float) data_i[i].data_int * V_REF / FULL_SCALE_CODE_LPF) / FDT_I;
 81017c8:	68fb      	ldr	r3, [r7, #12]
 81017ca:	009b      	lsls	r3, r3, #2
 81017cc:	687a      	ldr	r2, [r7, #4]
 81017ce:	4413      	add	r3, r2
 81017d0:	681b      	ldr	r3, [r3, #0]
 81017d2:	ee07 3a90 	vmov	s15, r3
 81017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 81017da:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8101858 <ADE9000_Conv_ADC_I+0xa0>
 81017de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 81017e2:	ee16 0a90 	vmov	r0, s13
 81017e6:	f7fe ff37 	bl	8100658 <__aeabi_f2d>
 81017ea:	a319      	add	r3, pc, #100	; (adr r3, 8101850 <ADE9000_Conv_ADC_I+0x98>)
 81017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 81017f0:	f7ff f8b4 	bl	810095c <__aeabi_ddiv>
 81017f4:	4602      	mov	r2, r0
 81017f6:	460b      	mov	r3, r1
 81017f8:	4610      	mov	r0, r2
 81017fa:	4619      	mov	r1, r3
 81017fc:	68fb      	ldr	r3, [r7, #12]
 81017fe:	009b      	lsls	r3, r3, #2
 8101800:	687a      	ldr	r2, [r7, #4]
 8101802:	18d4      	adds	r4, r2, r3
 8101804:	f7ff fa78 	bl	8100cf8 <__aeabi_d2f>
 8101808:	4603      	mov	r3, r0
 810180a:	6023      	str	r3, [r4, #0]
		for (uint32_t i = 0; i < n; i++) {
 810180c:	68fb      	ldr	r3, [r7, #12]
 810180e:	3301      	adds	r3, #1
 8101810:	60fb      	str	r3, [r7, #12]
 8101812:	68fa      	ldr	r2, [r7, #12]
 8101814:	683b      	ldr	r3, [r7, #0]
 8101816:	429a      	cmp	r2, r3
 8101818:	d3d6      	bcc.n	81017c8 <ADE9000_Conv_ADC_I+0x10>
		}
	}

	for (uint32_t i = 0; i < n; i++) {
 810181a:	2300      	movs	r3, #0
 810181c:	60bb      	str	r3, [r7, #8]
 810181e:	e00c      	b.n	810183a <ADE9000_Conv_ADC_I+0x82>
				data_i[i].data_float = (data_i[i].data_float - OFFSET_I)*GAIN_I;
 8101820:	68bb      	ldr	r3, [r7, #8]
 8101822:	009b      	lsls	r3, r3, #2
 8101824:	687a      	ldr	r2, [r7, #4]
 8101826:	441a      	add	r2, r3
 8101828:	68bb      	ldr	r3, [r7, #8]
 810182a:	009b      	lsls	r3, r3, #2
 810182c:	6879      	ldr	r1, [r7, #4]
 810182e:	440b      	add	r3, r1
 8101830:	6812      	ldr	r2, [r2, #0]
 8101832:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < n; i++) {
 8101834:	68bb      	ldr	r3, [r7, #8]
 8101836:	3301      	adds	r3, #1
 8101838:	60bb      	str	r3, [r7, #8]
 810183a:	68ba      	ldr	r2, [r7, #8]
 810183c:	683b      	ldr	r3, [r7, #0]
 810183e:	429a      	cmp	r2, r3
 8101840:	d3ee      	bcc.n	8101820 <ADE9000_Conv_ADC_I+0x68>
	}


}
 8101842:	bf00      	nop
 8101844:	bf00      	nop
 8101846:	3714      	adds	r7, #20
 8101848:	46bd      	mov	sp, r7
 810184a:	bd90      	pop	{r4, r7, pc}
 810184c:	f3af 8000 	nop.w
 8101850:	19ce075f 	.word	0x19ce075f
 8101854:	3f7bda51 	.word	0x3f7bda51
 8101858:	4c8e0fb0 	.word	0x4c8e0fb0

0810185c <log2_c>:
//float complex vec[N_SAMPLE];
//float complex app[N_SAMPLE];


int log2_c(int N)
{
 810185c:	b480      	push	{r7}
 810185e:	b085      	sub	sp, #20
 8101860:	af00      	add	r7, sp, #0
 8101862:	6078      	str	r0, [r7, #4]
  int k = N, i = 0;
 8101864:	687b      	ldr	r3, [r7, #4]
 8101866:	60fb      	str	r3, [r7, #12]
 8101868:	2300      	movs	r3, #0
 810186a:	60bb      	str	r3, [r7, #8]
  while(k) {
 810186c:	e005      	b.n	810187a <log2_c+0x1e>
    k >>= 1;
 810186e:	68fb      	ldr	r3, [r7, #12]
 8101870:	105b      	asrs	r3, r3, #1
 8101872:	60fb      	str	r3, [r7, #12]
    i++;
 8101874:	68bb      	ldr	r3, [r7, #8]
 8101876:	3301      	adds	r3, #1
 8101878:	60bb      	str	r3, [r7, #8]
  while(k) {
 810187a:	68fb      	ldr	r3, [r7, #12]
 810187c:	2b00      	cmp	r3, #0
 810187e:	d1f6      	bne.n	810186e <log2_c+0x12>
  }
  return i - 1;
 8101880:	68bb      	ldr	r3, [r7, #8]
 8101882:	3b01      	subs	r3, #1
}
 8101884:	4618      	mov	r0, r3
 8101886:	3714      	adds	r7, #20
 8101888:	46bd      	mov	sp, r7
 810188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810188e:	4770      	bx	lr

08101890 <reverse>:

int reverse(int N, int n)
{
 8101890:	b580      	push	{r7, lr}
 8101892:	b086      	sub	sp, #24
 8101894:	af00      	add	r7, sp, #0
 8101896:	6078      	str	r0, [r7, #4]
 8101898:	6039      	str	r1, [r7, #0]
  uint32_t step = log2_c(N);
 810189a:	6878      	ldr	r0, [r7, #4]
 810189c:	f7ff ffde 	bl	810185c <log2_c>
 81018a0:	4603      	mov	r3, r0
 81018a2:	60fb      	str	r3, [r7, #12]
  int j, p = 0;
 81018a4:	2300      	movs	r3, #0
 81018a6:	613b      	str	r3, [r7, #16]
  for(j = 1; j <= step; j++) {
 81018a8:	2301      	movs	r3, #1
 81018aa:	617b      	str	r3, [r7, #20]
 81018ac:	e014      	b.n	81018d8 <reverse+0x48>
    if(n & (1 << (step - j)))
 81018ae:	697b      	ldr	r3, [r7, #20]
 81018b0:	68fa      	ldr	r2, [r7, #12]
 81018b2:	1ad3      	subs	r3, r2, r3
 81018b4:	683a      	ldr	r2, [r7, #0]
 81018b6:	fa42 f303 	asr.w	r3, r2, r3
 81018ba:	f003 0301 	and.w	r3, r3, #1
 81018be:	2b00      	cmp	r3, #0
 81018c0:	d007      	beq.n	81018d2 <reverse+0x42>
      p |= 1 << (j - 1);
 81018c2:	697b      	ldr	r3, [r7, #20]
 81018c4:	3b01      	subs	r3, #1
 81018c6:	2201      	movs	r2, #1
 81018c8:	fa02 f303 	lsl.w	r3, r2, r3
 81018cc:	693a      	ldr	r2, [r7, #16]
 81018ce:	4313      	orrs	r3, r2
 81018d0:	613b      	str	r3, [r7, #16]
  for(j = 1; j <= step; j++) {
 81018d2:	697b      	ldr	r3, [r7, #20]
 81018d4:	3301      	adds	r3, #1
 81018d6:	617b      	str	r3, [r7, #20]
 81018d8:	697b      	ldr	r3, [r7, #20]
 81018da:	68fa      	ldr	r2, [r7, #12]
 81018dc:	429a      	cmp	r2, r3
 81018de:	d2e6      	bcs.n	81018ae <reverse+0x1e>
  }
  return p;
 81018e0:	693b      	ldr	r3, [r7, #16]
}
 81018e2:	4618      	mov	r0, r3
 81018e4:	3718      	adds	r7, #24
 81018e6:	46bd      	mov	sp, r7
 81018e8:	bd80      	pop	{r7, pc}

081018ea <order>:

void order(float complex* f1, int N)
{
 81018ea:	b580      	push	{r7, lr}
 81018ec:	b086      	sub	sp, #24
 81018ee:	af00      	add	r7, sp, #0
 81018f0:	6078      	str	r0, [r7, #4]
 81018f2:	6039      	str	r1, [r7, #0]
  float complex *app = (float complex*)malloc(N_SAMPLE * sizeof(float complex));
 81018f4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 81018f8:	f006 f832 	bl	8107960 <malloc>
 81018fc:	4603      	mov	r3, r0
 81018fe:	60fb      	str	r3, [r7, #12]

  for(int i = 0; i < N; i++)
 8101900:	2300      	movs	r3, #0
 8101902:	617b      	str	r3, [r7, #20]
 8101904:	e012      	b.n	810192c <order+0x42>
    app[i] = f1[reverse(N, i)];
 8101906:	6979      	ldr	r1, [r7, #20]
 8101908:	6838      	ldr	r0, [r7, #0]
 810190a:	f7ff ffc1 	bl	8101890 <reverse>
 810190e:	4603      	mov	r3, r0
 8101910:	00db      	lsls	r3, r3, #3
 8101912:	687a      	ldr	r2, [r7, #4]
 8101914:	441a      	add	r2, r3
 8101916:	697b      	ldr	r3, [r7, #20]
 8101918:	00db      	lsls	r3, r3, #3
 810191a:	68f9      	ldr	r1, [r7, #12]
 810191c:	440b      	add	r3, r1
 810191e:	6811      	ldr	r1, [r2, #0]
 8101920:	6852      	ldr	r2, [r2, #4]
 8101922:	6019      	str	r1, [r3, #0]
 8101924:	605a      	str	r2, [r3, #4]
  for(int i = 0; i < N; i++)
 8101926:	697b      	ldr	r3, [r7, #20]
 8101928:	3301      	adds	r3, #1
 810192a:	617b      	str	r3, [r7, #20]
 810192c:	697a      	ldr	r2, [r7, #20]
 810192e:	683b      	ldr	r3, [r7, #0]
 8101930:	429a      	cmp	r2, r3
 8101932:	dbe8      	blt.n	8101906 <order+0x1c>
  for(int j = 0; j < N; j++)
 8101934:	2300      	movs	r3, #0
 8101936:	613b      	str	r3, [r7, #16]
 8101938:	e00e      	b.n	8101958 <order+0x6e>
    f1[j] = app[j];
 810193a:	693b      	ldr	r3, [r7, #16]
 810193c:	00db      	lsls	r3, r3, #3
 810193e:	68fa      	ldr	r2, [r7, #12]
 8101940:	441a      	add	r2, r3
 8101942:	693b      	ldr	r3, [r7, #16]
 8101944:	00db      	lsls	r3, r3, #3
 8101946:	6879      	ldr	r1, [r7, #4]
 8101948:	440b      	add	r3, r1
 810194a:	6811      	ldr	r1, [r2, #0]
 810194c:	6852      	ldr	r2, [r2, #4]
 810194e:	6019      	str	r1, [r3, #0]
 8101950:	605a      	str	r2, [r3, #4]
  for(int j = 0; j < N; j++)
 8101952:	693b      	ldr	r3, [r7, #16]
 8101954:	3301      	adds	r3, #1
 8101956:	613b      	str	r3, [r7, #16]
 8101958:	693a      	ldr	r2, [r7, #16]
 810195a:	683b      	ldr	r3, [r7, #0]
 810195c:	429a      	cmp	r2, r3
 810195e:	dbec      	blt.n	810193a <order+0x50>
  free(app);
 8101960:	68f8      	ldr	r0, [r7, #12]
 8101962:	f006 f805 	bl	8107970 <free>
  app=NULL;
 8101966:	2300      	movs	r3, #0
 8101968:	60fb      	str	r3, [r7, #12]
}
 810196a:	bf00      	nop
 810196c:	3718      	adds	r7, #24
 810196e:	46bd      	mov	sp, r7
 8101970:	bd80      	pop	{r7, pc}
 8101972:	0000      	movs	r0, r0
 8101974:	0000      	movs	r0, r0
	...

08101978 <FFT>:

void FFT(float complex* f, int N){
 8101978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810197c:	b093      	sub	sp, #76	; 0x4c
 810197e:	af00      	add	r7, sp, #0
 8101980:	6078      	str	r0, [r7, #4]
 8101982:	6039      	str	r1, [r7, #0]
	order(f, N);
 8101984:	6839      	ldr	r1, [r7, #0]
 8101986:	6878      	ldr	r0, [r7, #4]
 8101988:	f7ff ffaf 	bl	81018ea <order>
	uint32_t step = log2_c(N);
 810198c:	6838      	ldr	r0, [r7, #0]
 810198e:	f7ff ff65 	bl	810185c <log2_c>
 8101992:	4603      	mov	r3, r0
 8101994:	633b      	str	r3, [r7, #48]	; 0x30

	float complex *W = (float complex*)malloc(N_SAMPLE/2 * sizeof(float complex));
 8101996:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 810199a:	f005 ffe1 	bl	8107960 <malloc>
 810199e:	4603      	mov	r3, r0
 81019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	      W[0] = 1;
 81019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81019a4:	4a86      	ldr	r2, [pc, #536]	; (8101bc0 <FFT+0x248>)
 81019a6:	6811      	ldr	r1, [r2, #0]
 81019a8:	6019      	str	r1, [r3, #0]
 81019aa:	6852      	ldr	r2, [r2, #4]
 81019ac:	605a      	str	r2, [r3, #4]
	      for(int i = 1; i < N / 2; i++)
 81019ae:	2301      	movs	r3, #1
 81019b0:	647b      	str	r3, [r7, #68]	; 0x44
 81019b2:	e064      	b.n	8101a7e <FFT+0x106>
	        W[i] = cos(-2*M_PI*i/N)+I*sin(-2*M_PI*i/N);
 81019b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 81019b6:	f7fe fe3d 	bl	8100634 <__aeabi_i2d>
 81019ba:	a37f      	add	r3, pc, #508	; (adr r3, 8101bb8 <FFT+0x240>)
 81019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81019c0:	f7fe fea2 	bl	8100708 <__aeabi_dmul>
 81019c4:	4602      	mov	r2, r0
 81019c6:	460b      	mov	r3, r1
 81019c8:	4614      	mov	r4, r2
 81019ca:	461d      	mov	r5, r3
 81019cc:	6838      	ldr	r0, [r7, #0]
 81019ce:	f7fe fe31 	bl	8100634 <__aeabi_i2d>
 81019d2:	4602      	mov	r2, r0
 81019d4:	460b      	mov	r3, r1
 81019d6:	4620      	mov	r0, r4
 81019d8:	4629      	mov	r1, r5
 81019da:	f7fe ffbf 	bl	810095c <__aeabi_ddiv>
 81019de:	4602      	mov	r2, r0
 81019e0:	460b      	mov	r3, r1
 81019e2:	ec43 2b17 	vmov	d7, r2, r3
 81019e6:	eeb0 0a47 	vmov.f32	s0, s14
 81019ea:	eef0 0a67 	vmov.f32	s1, s15
 81019ee:	f00a fbe3 	bl	810c1b8 <sin>
 81019f2:	ec55 4b10 	vmov	r4, r5, d0
 81019f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 81019f8:	f7fe fe1c 	bl	8100634 <__aeabi_i2d>
 81019fc:	a36e      	add	r3, pc, #440	; (adr r3, 8101bb8 <FFT+0x240>)
 81019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a02:	f7fe fe81 	bl	8100708 <__aeabi_dmul>
 8101a06:	4602      	mov	r2, r0
 8101a08:	460b      	mov	r3, r1
 8101a0a:	4690      	mov	r8, r2
 8101a0c:	4699      	mov	r9, r3
 8101a0e:	6838      	ldr	r0, [r7, #0]
 8101a10:	f7fe fe10 	bl	8100634 <__aeabi_i2d>
 8101a14:	4602      	mov	r2, r0
 8101a16:	460b      	mov	r3, r1
 8101a18:	4640      	mov	r0, r8
 8101a1a:	4649      	mov	r1, r9
 8101a1c:	f7fe ff9e 	bl	810095c <__aeabi_ddiv>
 8101a20:	4602      	mov	r2, r0
 8101a22:	460b      	mov	r3, r1
 8101a24:	ec43 2b17 	vmov	d7, r2, r3
 8101a28:	eeb0 0a47 	vmov.f32	s0, s14
 8101a2c:	eef0 0a67 	vmov.f32	s1, s15
 8101a30:	f00a fb66 	bl	810c100 <cos>
 8101a34:	ec59 8b10 	vmov	r8, r9, d0
 8101a38:	f04f 0200 	mov.w	r2, #0
 8101a3c:	f04f 0300 	mov.w	r3, #0
 8101a40:	4620      	mov	r0, r4
 8101a42:	4629      	mov	r1, r5
 8101a44:	f7fe fe60 	bl	8100708 <__aeabi_dmul>
 8101a48:	4602      	mov	r2, r0
 8101a4a:	460b      	mov	r3, r1
 8101a4c:	4640      	mov	r0, r8
 8101a4e:	4649      	mov	r1, r9
 8101a50:	f7fe fca4 	bl	810039c <__adddf3>
 8101a54:	4602      	mov	r2, r0
 8101a56:	460b      	mov	r3, r1
 8101a58:	4610      	mov	r0, r2
 8101a5a:	4619      	mov	r1, r3
 8101a5c:	f7ff f94c 	bl	8100cf8 <__aeabi_d2f>
 8101a60:	4606      	mov	r6, r0
 8101a62:	4620      	mov	r0, r4
 8101a64:	4629      	mov	r1, r5
 8101a66:	f7ff f947 	bl	8100cf8 <__aeabi_d2f>
 8101a6a:	4601      	mov	r1, r0
 8101a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101a6e:	00db      	lsls	r3, r3, #3
 8101a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101a72:	4413      	add	r3, r2
 8101a74:	601e      	str	r6, [r3, #0]
 8101a76:	6059      	str	r1, [r3, #4]
	      for(int i = 1; i < N / 2; i++)
 8101a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101a7a:	3301      	adds	r3, #1
 8101a7c:	647b      	str	r3, [r7, #68]	; 0x44
 8101a7e:	683b      	ldr	r3, [r7, #0]
 8101a80:	0fda      	lsrs	r2, r3, #31
 8101a82:	4413      	add	r3, r2
 8101a84:	105b      	asrs	r3, r3, #1
 8101a86:	461a      	mov	r2, r3
 8101a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101a8a:	4293      	cmp	r3, r2
 8101a8c:	db92      	blt.n	81019b4 <FFT+0x3c>
	      int n = 1;
 8101a8e:	2301      	movs	r3, #1
 8101a90:	643b      	str	r3, [r7, #64]	; 0x40
	      int a = N / 2;
 8101a92:	683b      	ldr	r3, [r7, #0]
 8101a94:	0fda      	lsrs	r2, r3, #31
 8101a96:	4413      	add	r3, r2
 8101a98:	105b      	asrs	r3, r3, #1
 8101a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	      for(int j = 0; j < step; j++) {
 8101a9c:	2300      	movs	r3, #0
 8101a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101aa0:	e07f      	b.n	8101ba2 <FFT+0x22a>
	        for(int i = 0; i < N; i++) {
 8101aa2:	2300      	movs	r3, #0
 8101aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8101aa6:	e06d      	b.n	8101b84 <FFT+0x20c>
	          if(!(i & n)) {
 8101aa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101aac:	4013      	ands	r3, r2
 8101aae:	2b00      	cmp	r3, #0
 8101ab0:	d165      	bne.n	8101b7e <FFT+0x206>
	              float complex temp = f[i];
 8101ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101ab4:	00db      	lsls	r3, r3, #3
 8101ab6:	687a      	ldr	r2, [r7, #4]
 8101ab8:	4413      	add	r3, r2
 8101aba:	681a      	ldr	r2, [r3, #0]
 8101abc:	61ba      	str	r2, [r7, #24]
 8101abe:	685b      	ldr	r3, [r3, #4]
 8101ac0:	617b      	str	r3, [r7, #20]
 8101ac2:	697b      	ldr	r3, [r7, #20]
 8101ac4:	69ba      	ldr	r2, [r7, #24]
 8101ac6:	627a      	str	r2, [r7, #36]	; 0x24
 8101ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	            float complex Temp = W[(i * a) % (n * a)] * f[i + n];
 8101aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101acc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8101ace:	fb02 f303 	mul.w	r3, r2, r3
 8101ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8101ad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8101ad6:	fb01 f202 	mul.w	r2, r1, r2
 8101ada:	fb93 f1f2 	sdiv	r1, r3, r2
 8101ade:	fb02 f201 	mul.w	r2, r2, r1
 8101ae2:	1a9b      	subs	r3, r3, r2
 8101ae4:	00db      	lsls	r3, r3, #3
 8101ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101ae8:	4413      	add	r3, r2
 8101aea:	edd3 7a00 	vldr	s15, [r3]
 8101aee:	ed93 7a01 	vldr	s14, [r3, #4]
 8101af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101af6:	4413      	add	r3, r2
 8101af8:	00db      	lsls	r3, r3, #3
 8101afa:	687a      	ldr	r2, [r7, #4]
 8101afc:	4413      	add	r3, r2
 8101afe:	edd3 6a00 	vldr	s13, [r3]
 8101b02:	ed93 6a01 	vldr	s12, [r3, #4]
 8101b06:	eef0 1a46 	vmov.f32	s3, s12
 8101b0a:	eeb0 1a66 	vmov.f32	s2, s13
 8101b0e:	eef0 0a47 	vmov.f32	s1, s14
 8101b12:	eeb0 0a67 	vmov.f32	s0, s15
 8101b16:	f7ff f957 	bl	8100dc8 <__mulsc3>
 8101b1a:	ed87 0a07 	vstr	s0, [r7, #28]
 8101b1e:	edc7 0a08 	vstr	s1, [r7, #32]
 8101b22:	69fb      	ldr	r3, [r7, #28]
 8101b24:	613b      	str	r3, [r7, #16]
 8101b26:	6a3b      	ldr	r3, [r7, #32]
 8101b28:	60fb      	str	r3, [r7, #12]
	            f[i] = temp + Temp;
 8101b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101b2c:	00db      	lsls	r3, r3, #3
 8101b2e:	687a      	ldr	r2, [r7, #4]
 8101b30:	4413      	add	r3, r2
 8101b32:	ed97 7a06 	vldr	s14, [r7, #24]
 8101b36:	edd7 7a04 	vldr	s15, [r7, #16]
 8101b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101b3e:	edd7 6a05 	vldr	s13, [r7, #20]
 8101b42:	edd7 7a03 	vldr	s15, [r7, #12]
 8101b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101b4a:	ed83 7a00 	vstr	s14, [r3]
 8101b4e:	edc3 7a01 	vstr	s15, [r3, #4]
	            f[i + n] = temp - Temp;
 8101b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101b56:	4413      	add	r3, r2
 8101b58:	00db      	lsls	r3, r3, #3
 8101b5a:	687a      	ldr	r2, [r7, #4]
 8101b5c:	4413      	add	r3, r2
 8101b5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8101b62:	edd7 7a04 	vldr	s15, [r7, #16]
 8101b66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8101b6a:	edd7 6a05 	vldr	s13, [r7, #20]
 8101b6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8101b72:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8101b76:	ed83 7a00 	vstr	s14, [r3]
 8101b7a:	edc3 7a01 	vstr	s15, [r3, #4]
	        for(int i = 0; i < N; i++) {
 8101b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101b80:	3301      	adds	r3, #1
 8101b82:	637b      	str	r3, [r7, #52]	; 0x34
 8101b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101b86:	683b      	ldr	r3, [r7, #0]
 8101b88:	429a      	cmp	r2, r3
 8101b8a:	db8d      	blt.n	8101aa8 <FFT+0x130>

	          }
	        }
	        n *= 2;
 8101b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101b8e:	005b      	lsls	r3, r3, #1
 8101b90:	643b      	str	r3, [r7, #64]	; 0x40
	        a = a / 2;
 8101b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101b94:	0fda      	lsrs	r2, r3, #31
 8101b96:	4413      	add	r3, r2
 8101b98:	105b      	asrs	r3, r3, #1
 8101b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
	      for(int j = 0; j < step; j++) {
 8101b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101b9e:	3301      	adds	r3, #1
 8101ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8101ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101ba6:	429a      	cmp	r2, r3
 8101ba8:	f63f af7b 	bhi.w	8101aa2 <FFT+0x12a>
	      }
}
 8101bac:	bf00      	nop
 8101bae:	bf00      	nop
 8101bb0:	374c      	adds	r7, #76	; 0x4c
 8101bb2:	46bd      	mov	sp, r7
 8101bb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8101bb8:	54442d18 	.word	0x54442d18
 8101bbc:	c01921fb 	.word	0xc01921fb
 8101bc0:	0810e0d8 	.word	0x0810e0d8

08101bc4 <IFFT>:

void IFFT(float complex* f, int N){
 8101bc4:	b580      	push	{r7, lr}
 8101bc6:	b086      	sub	sp, #24
 8101bc8:	af00      	add	r7, sp, #0
 8101bca:	6078      	str	r0, [r7, #4]
 8101bcc:	6039      	str	r1, [r7, #0]
	FFT(f,N);
 8101bce:	6839      	ldr	r1, [r7, #0]
 8101bd0:	6878      	ldr	r0, [r7, #4]
 8101bd2:	f7ff fed1 	bl	8101978 <FFT>
	f[0]=f[0]/N;
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	681a      	ldr	r2, [r3, #0]
 8101bda:	685b      	ldr	r3, [r3, #4]
 8101bdc:	ee07 2a10 	vmov	s14, r2
 8101be0:	683a      	ldr	r2, [r7, #0]
 8101be2:	ee07 2a90 	vmov	s15, r2
 8101be6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101bea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8101bee:	ee06 3a10 	vmov	s12, r3
 8101bf2:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8101bf6:	ee16 1a90 	vmov	r1, s13
 8101bfa:	ee17 2a10 	vmov	r2, s14
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	6019      	str	r1, [r3, #0]
 8101c02:	605a      	str	r2, [r3, #4]
	for(uint32_t i=1;i<=N/2;i++){
 8101c04:	2301      	movs	r3, #1
 8101c06:	617b      	str	r3, [r7, #20]
 8101c08:	e044      	b.n	8101c94 <IFFT+0xd0>
		float complex app;
		app = f[i];
 8101c0a:	697b      	ldr	r3, [r7, #20]
 8101c0c:	00db      	lsls	r3, r3, #3
 8101c0e:	687a      	ldr	r2, [r7, #4]
 8101c10:	4413      	add	r3, r2
 8101c12:	681a      	ldr	r2, [r3, #0]
 8101c14:	60fa      	str	r2, [r7, #12]
 8101c16:	685b      	ldr	r3, [r3, #4]
 8101c18:	613b      	str	r3, [r7, #16]
		f[i] = f[N-i]/N;
 8101c1a:	683a      	ldr	r2, [r7, #0]
 8101c1c:	697b      	ldr	r3, [r7, #20]
 8101c1e:	1ad3      	subs	r3, r2, r3
 8101c20:	00db      	lsls	r3, r3, #3
 8101c22:	687a      	ldr	r2, [r7, #4]
 8101c24:	4413      	add	r3, r2
 8101c26:	681a      	ldr	r2, [r3, #0]
 8101c28:	685b      	ldr	r3, [r3, #4]
 8101c2a:	ee07 2a10 	vmov	s14, r2
 8101c2e:	683a      	ldr	r2, [r7, #0]
 8101c30:	ee07 2a90 	vmov	s15, r2
 8101c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101c38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8101c3c:	ee06 3a10 	vmov	s12, r3
 8101c40:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8101c44:	697b      	ldr	r3, [r7, #20]
 8101c46:	00db      	lsls	r3, r3, #3
 8101c48:	687a      	ldr	r2, [r7, #4]
 8101c4a:	4413      	add	r3, r2
 8101c4c:	ee16 1a90 	vmov	r1, s13
 8101c50:	ee17 2a10 	vmov	r2, s14
 8101c54:	6019      	str	r1, [r3, #0]
 8101c56:	605a      	str	r2, [r3, #4]
		f[N-i]= app/N;
 8101c58:	68fa      	ldr	r2, [r7, #12]
 8101c5a:	693b      	ldr	r3, [r7, #16]
 8101c5c:	ee07 2a10 	vmov	s14, r2
 8101c60:	683a      	ldr	r2, [r7, #0]
 8101c62:	ee07 2a90 	vmov	s15, r2
 8101c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101c6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8101c6e:	ee06 3a10 	vmov	s12, r3
 8101c72:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8101c76:	683a      	ldr	r2, [r7, #0]
 8101c78:	697b      	ldr	r3, [r7, #20]
 8101c7a:	1ad3      	subs	r3, r2, r3
 8101c7c:	00db      	lsls	r3, r3, #3
 8101c7e:	687a      	ldr	r2, [r7, #4]
 8101c80:	4413      	add	r3, r2
 8101c82:	ee16 1a90 	vmov	r1, s13
 8101c86:	ee17 2a10 	vmov	r2, s14
 8101c8a:	6019      	str	r1, [r3, #0]
 8101c8c:	605a      	str	r2, [r3, #4]
	for(uint32_t i=1;i<=N/2;i++){
 8101c8e:	697b      	ldr	r3, [r7, #20]
 8101c90:	3301      	adds	r3, #1
 8101c92:	617b      	str	r3, [r7, #20]
 8101c94:	683b      	ldr	r3, [r7, #0]
 8101c96:	0fda      	lsrs	r2, r3, #31
 8101c98:	4413      	add	r3, r2
 8101c9a:	105b      	asrs	r3, r3, #1
 8101c9c:	461a      	mov	r2, r3
 8101c9e:	697b      	ldr	r3, [r7, #20]
 8101ca0:	4293      	cmp	r3, r2
 8101ca2:	d9b2      	bls.n	8101c0a <IFFT+0x46>
	}

}
 8101ca4:	bf00      	nop
 8101ca6:	bf00      	nop
 8101ca8:	3718      	adds	r7, #24
 8101caa:	46bd      	mov	sp, r7
 8101cac:	bd80      	pop	{r7, pc}
	...

08101cb0 <FD_Wavedec_sym>:
		}
	}
}


void FD_Wavedec_sym(float* dec, uint16_t* dec_dim, float* y){
 8101cb0:	b480      	push	{r7}
 8101cb2:	b08b      	sub	sp, #44	; 0x2c
 8101cb4:	af00      	add	r7, sp, #0
 8101cb6:	60f8      	str	r0, [r7, #12]
 8101cb8:	60b9      	str	r1, [r7, #8]
 8101cba:	607a      	str	r2, [r7, #4]
	uint16_t dim_y = N_SAMPLE;
 8101cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8101cc0:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t dim_conv = dim_y + DIM_FILTER_WAVELET - 1;
 8101cc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101cc4:	3309      	adds	r3, #9
 8101cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t dim_coeff = (int)dim_conv/2;
 8101cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101cca:	085b      	lsrs	r3, r3, #1
 8101ccc:	847b      	strh	r3, [r7, #34]	; 0x22

	uint16_t index_border;

	uint16_t index_dec = 0;
 8101cce:	2300      	movs	r3, #0
 8101cd0:	843b      	strh	r3, [r7, #32]

	for(int16_t k =0;k<N_DEC_WAVELET;k++){
 8101cd2:	2300      	movs	r3, #0
 8101cd4:	83fb      	strh	r3, [r7, #30]
 8101cd6:	e00d      	b.n	8101cf4 <FD_Wavedec_sym+0x44>
		dec[k]=0;
 8101cd8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8101cdc:	009b      	lsls	r3, r3, #2
 8101cde:	68fa      	ldr	r2, [r7, #12]
 8101ce0:	4413      	add	r3, r2
 8101ce2:	f04f 0200 	mov.w	r2, #0
 8101ce6:	601a      	str	r2, [r3, #0]
	for(int16_t k =0;k<N_DEC_WAVELET;k++){
 8101ce8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8101cec:	b29b      	uxth	r3, r3
 8101cee:	3301      	adds	r3, #1
 8101cf0:	b29b      	uxth	r3, r3
 8101cf2:	83fb      	strh	r3, [r7, #30]
 8101cf4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8101cf8:	f242 0250 	movw	r2, #8272	; 0x2050
 8101cfc:	4293      	cmp	r3, r2
 8101cfe:	ddeb      	ble.n	8101cd8 <FD_Wavedec_sym+0x28>
	}

	for(uint16_t k=0; k<N_LEVEL_WAVELET; k++){
 8101d00:	2300      	movs	r3, #0
 8101d02:	83bb      	strh	r3, [r7, #28]
 8101d04:	e18d      	b.n	8102022 <FD_Wavedec_sym+0x372>
		//DIM
		Wavelet_dec_dim[k]=dim_coeff;
 8101d06:	8bbb      	ldrh	r3, [r7, #28]
 8101d08:	49b0      	ldr	r1, [pc, #704]	; (8101fcc <FD_Wavedec_sym+0x31c>)
 8101d0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8101d0c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		//DETT
		for (uint16_t i = 0; i < dim_conv; i++) {
 8101d10:	2300      	movs	r3, #0
 8101d12:	837b      	strh	r3, [r7, #26]
 8101d14:	e0a0      	b.n	8101e58 <FD_Wavedec_sym+0x1a8>
			for (uint16_t j = 0; j < DIM_FILTER_WAVELET; j++) {
 8101d16:	2300      	movs	r3, #0
 8101d18:	833b      	strh	r3, [r7, #24]
 8101d1a:	e096      	b.n	8101e4a <FD_Wavedec_sym+0x19a>
				if ((i % 2) == 1) { //downsampling (solo pari matlab(da 1)=solo dispari in C (da 0))
 8101d1c:	8b7b      	ldrh	r3, [r7, #26]
 8101d1e:	f003 0301 	and.w	r3, r3, #1
 8101d22:	b29b      	uxth	r3, r3
 8101d24:	2b00      	cmp	r3, #0
 8101d26:	f000 808d 	beq.w	8101e44 <FD_Wavedec_sym+0x194>
					if((i-j)<0){ //gestire primi elementi
 8101d2a:	8b7a      	ldrh	r2, [r7, #26]
 8101d2c:	8b3b      	ldrh	r3, [r7, #24]
 8101d2e:	1ad3      	subs	r3, r2, r3
 8101d30:	2b00      	cmp	r3, #0
 8101d32:	da2a      	bge.n	8101d8a <FD_Wavedec_sym+0xda>
						index_border = -(i-j)-1;
 8101d34:	8b3a      	ldrh	r2, [r7, #24]
 8101d36:	8b7b      	ldrh	r3, [r7, #26]
 8101d38:	1ad3      	subs	r3, r2, r3
 8101d3a:	b29b      	uxth	r3, r3
 8101d3c:	3b01      	subs	r3, #1
 8101d3e:	823b      	strh	r3, [r7, #16]
						dec[index_dec+i/2] = dec[index_dec+i/2] + y[index_border] * HiD[j];
 8101d40:	8c3b      	ldrh	r3, [r7, #32]
 8101d42:	8b7a      	ldrh	r2, [r7, #26]
 8101d44:	0852      	lsrs	r2, r2, #1
 8101d46:	b292      	uxth	r2, r2
 8101d48:	4413      	add	r3, r2
 8101d4a:	009b      	lsls	r3, r3, #2
 8101d4c:	68fa      	ldr	r2, [r7, #12]
 8101d4e:	4413      	add	r3, r2
 8101d50:	ed93 7a00 	vldr	s14, [r3]
 8101d54:	8a3b      	ldrh	r3, [r7, #16]
 8101d56:	009b      	lsls	r3, r3, #2
 8101d58:	687a      	ldr	r2, [r7, #4]
 8101d5a:	4413      	add	r3, r2
 8101d5c:	edd3 6a00 	vldr	s13, [r3]
 8101d60:	8b3b      	ldrh	r3, [r7, #24]
 8101d62:	4a9b      	ldr	r2, [pc, #620]	; (8101fd0 <FD_Wavedec_sym+0x320>)
 8101d64:	009b      	lsls	r3, r3, #2
 8101d66:	4413      	add	r3, r2
 8101d68:	edd3 7a00 	vldr	s15, [r3]
 8101d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101d70:	8c3b      	ldrh	r3, [r7, #32]
 8101d72:	8b7a      	ldrh	r2, [r7, #26]
 8101d74:	0852      	lsrs	r2, r2, #1
 8101d76:	b292      	uxth	r2, r2
 8101d78:	4413      	add	r3, r2
 8101d7a:	009b      	lsls	r3, r3, #2
 8101d7c:	68fa      	ldr	r2, [r7, #12]
 8101d7e:	4413      	add	r3, r2
 8101d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101d84:	edc3 7a00 	vstr	s15, [r3]
 8101d88:	e05c      	b.n	8101e44 <FD_Wavedec_sym+0x194>
					} else if((i-j)>=dim_y){ //gestire ultimi elementi
 8101d8a:	8b7a      	ldrh	r2, [r7, #26]
 8101d8c:	8b3b      	ldrh	r3, [r7, #24]
 8101d8e:	1ad2      	subs	r2, r2, r3
 8101d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101d92:	429a      	cmp	r2, r3
 8101d94:	db30      	blt.n	8101df8 <FD_Wavedec_sym+0x148>
						index_border = (dim_y-1)-((i-j)-dim_y);
 8101d96:	8b3a      	ldrh	r2, [r7, #24]
 8101d98:	8b7b      	ldrh	r3, [r7, #26]
 8101d9a:	1ad3      	subs	r3, r2, r3
 8101d9c:	b29a      	uxth	r2, r3
 8101d9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101da0:	4413      	add	r3, r2
 8101da2:	b29a      	uxth	r2, r3
 8101da4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101da6:	4413      	add	r3, r2
 8101da8:	b29b      	uxth	r3, r3
 8101daa:	3b01      	subs	r3, #1
 8101dac:	823b      	strh	r3, [r7, #16]
						dec[index_dec+i/2] = dec[index_dec+i/2] + y[index_border] * HiD[j];
 8101dae:	8c3b      	ldrh	r3, [r7, #32]
 8101db0:	8b7a      	ldrh	r2, [r7, #26]
 8101db2:	0852      	lsrs	r2, r2, #1
 8101db4:	b292      	uxth	r2, r2
 8101db6:	4413      	add	r3, r2
 8101db8:	009b      	lsls	r3, r3, #2
 8101dba:	68fa      	ldr	r2, [r7, #12]
 8101dbc:	4413      	add	r3, r2
 8101dbe:	ed93 7a00 	vldr	s14, [r3]
 8101dc2:	8a3b      	ldrh	r3, [r7, #16]
 8101dc4:	009b      	lsls	r3, r3, #2
 8101dc6:	687a      	ldr	r2, [r7, #4]
 8101dc8:	4413      	add	r3, r2
 8101dca:	edd3 6a00 	vldr	s13, [r3]
 8101dce:	8b3b      	ldrh	r3, [r7, #24]
 8101dd0:	4a7f      	ldr	r2, [pc, #508]	; (8101fd0 <FD_Wavedec_sym+0x320>)
 8101dd2:	009b      	lsls	r3, r3, #2
 8101dd4:	4413      	add	r3, r2
 8101dd6:	edd3 7a00 	vldr	s15, [r3]
 8101dda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101dde:	8c3b      	ldrh	r3, [r7, #32]
 8101de0:	8b7a      	ldrh	r2, [r7, #26]
 8101de2:	0852      	lsrs	r2, r2, #1
 8101de4:	b292      	uxth	r2, r2
 8101de6:	4413      	add	r3, r2
 8101de8:	009b      	lsls	r3, r3, #2
 8101dea:	68fa      	ldr	r2, [r7, #12]
 8101dec:	4413      	add	r3, r2
 8101dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101df2:	edc3 7a00 	vstr	s15, [r3]
 8101df6:	e025      	b.n	8101e44 <FD_Wavedec_sym+0x194>
					} else {
						dec [index_dec+i/2] = dec[index_dec+i/2] + y[i-j] * HiD[j];
 8101df8:	8c3b      	ldrh	r3, [r7, #32]
 8101dfa:	8b7a      	ldrh	r2, [r7, #26]
 8101dfc:	0852      	lsrs	r2, r2, #1
 8101dfe:	b292      	uxth	r2, r2
 8101e00:	4413      	add	r3, r2
 8101e02:	009b      	lsls	r3, r3, #2
 8101e04:	68fa      	ldr	r2, [r7, #12]
 8101e06:	4413      	add	r3, r2
 8101e08:	ed93 7a00 	vldr	s14, [r3]
 8101e0c:	8b7a      	ldrh	r2, [r7, #26]
 8101e0e:	8b3b      	ldrh	r3, [r7, #24]
 8101e10:	1ad3      	subs	r3, r2, r3
 8101e12:	009b      	lsls	r3, r3, #2
 8101e14:	687a      	ldr	r2, [r7, #4]
 8101e16:	4413      	add	r3, r2
 8101e18:	edd3 6a00 	vldr	s13, [r3]
 8101e1c:	8b3b      	ldrh	r3, [r7, #24]
 8101e1e:	4a6c      	ldr	r2, [pc, #432]	; (8101fd0 <FD_Wavedec_sym+0x320>)
 8101e20:	009b      	lsls	r3, r3, #2
 8101e22:	4413      	add	r3, r2
 8101e24:	edd3 7a00 	vldr	s15, [r3]
 8101e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101e2c:	8c3b      	ldrh	r3, [r7, #32]
 8101e2e:	8b7a      	ldrh	r2, [r7, #26]
 8101e30:	0852      	lsrs	r2, r2, #1
 8101e32:	b292      	uxth	r2, r2
 8101e34:	4413      	add	r3, r2
 8101e36:	009b      	lsls	r3, r3, #2
 8101e38:	68fa      	ldr	r2, [r7, #12]
 8101e3a:	4413      	add	r3, r2
 8101e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101e40:	edc3 7a00 	vstr	s15, [r3]
			for (uint16_t j = 0; j < DIM_FILTER_WAVELET; j++) {
 8101e44:	8b3b      	ldrh	r3, [r7, #24]
 8101e46:	3301      	adds	r3, #1
 8101e48:	833b      	strh	r3, [r7, #24]
 8101e4a:	8b3b      	ldrh	r3, [r7, #24]
 8101e4c:	2b09      	cmp	r3, #9
 8101e4e:	f67f af65 	bls.w	8101d1c <FD_Wavedec_sym+0x6c>
		for (uint16_t i = 0; i < dim_conv; i++) {
 8101e52:	8b7b      	ldrh	r3, [r7, #26]
 8101e54:	3301      	adds	r3, #1
 8101e56:	837b      	strh	r3, [r7, #26]
 8101e58:	8b7a      	ldrh	r2, [r7, #26]
 8101e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101e5c:	429a      	cmp	r2, r3
 8101e5e:	f4ff af5a 	bcc.w	8101d16 <FD_Wavedec_sym+0x66>
					}
				}
			}
		}
		//APPR
		index_dec = index_dec + dim_coeff;
 8101e62:	8c3a      	ldrh	r2, [r7, #32]
 8101e64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8101e66:	4413      	add	r3, r2
 8101e68:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < dim_conv; i++) {
 8101e6a:	2300      	movs	r3, #0
 8101e6c:	82fb      	strh	r3, [r7, #22]
 8101e6e:	e0a0      	b.n	8101fb2 <FD_Wavedec_sym+0x302>
			for (uint16_t j = 0; j < DIM_FILTER_WAVELET; j++) {
 8101e70:	2300      	movs	r3, #0
 8101e72:	82bb      	strh	r3, [r7, #20]
 8101e74:	e096      	b.n	8101fa4 <FD_Wavedec_sym+0x2f4>
				if ((i % 2) == 1) { //downsampling (solo pari matlab(da 1)=solo dispari in C (da 0))
 8101e76:	8afb      	ldrh	r3, [r7, #22]
 8101e78:	f003 0301 	and.w	r3, r3, #1
 8101e7c:	b29b      	uxth	r3, r3
 8101e7e:	2b00      	cmp	r3, #0
 8101e80:	f000 808d 	beq.w	8101f9e <FD_Wavedec_sym+0x2ee>
					if((i-j)<0){ //gestire primi elementi
 8101e84:	8afa      	ldrh	r2, [r7, #22]
 8101e86:	8abb      	ldrh	r3, [r7, #20]
 8101e88:	1ad3      	subs	r3, r2, r3
 8101e8a:	2b00      	cmp	r3, #0
 8101e8c:	da2a      	bge.n	8101ee4 <FD_Wavedec_sym+0x234>
						index_border = -(i-j)-1;
 8101e8e:	8aba      	ldrh	r2, [r7, #20]
 8101e90:	8afb      	ldrh	r3, [r7, #22]
 8101e92:	1ad3      	subs	r3, r2, r3
 8101e94:	b29b      	uxth	r3, r3
 8101e96:	3b01      	subs	r3, #1
 8101e98:	823b      	strh	r3, [r7, #16]
						dec[index_dec+i/2] = dec[index_dec+i/2] + y[index_border] * LoD[j];
 8101e9a:	8c3b      	ldrh	r3, [r7, #32]
 8101e9c:	8afa      	ldrh	r2, [r7, #22]
 8101e9e:	0852      	lsrs	r2, r2, #1
 8101ea0:	b292      	uxth	r2, r2
 8101ea2:	4413      	add	r3, r2
 8101ea4:	009b      	lsls	r3, r3, #2
 8101ea6:	68fa      	ldr	r2, [r7, #12]
 8101ea8:	4413      	add	r3, r2
 8101eaa:	ed93 7a00 	vldr	s14, [r3]
 8101eae:	8a3b      	ldrh	r3, [r7, #16]
 8101eb0:	009b      	lsls	r3, r3, #2
 8101eb2:	687a      	ldr	r2, [r7, #4]
 8101eb4:	4413      	add	r3, r2
 8101eb6:	edd3 6a00 	vldr	s13, [r3]
 8101eba:	8abb      	ldrh	r3, [r7, #20]
 8101ebc:	4a45      	ldr	r2, [pc, #276]	; (8101fd4 <FD_Wavedec_sym+0x324>)
 8101ebe:	009b      	lsls	r3, r3, #2
 8101ec0:	4413      	add	r3, r2
 8101ec2:	edd3 7a00 	vldr	s15, [r3]
 8101ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101eca:	8c3b      	ldrh	r3, [r7, #32]
 8101ecc:	8afa      	ldrh	r2, [r7, #22]
 8101ece:	0852      	lsrs	r2, r2, #1
 8101ed0:	b292      	uxth	r2, r2
 8101ed2:	4413      	add	r3, r2
 8101ed4:	009b      	lsls	r3, r3, #2
 8101ed6:	68fa      	ldr	r2, [r7, #12]
 8101ed8:	4413      	add	r3, r2
 8101eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101ede:	edc3 7a00 	vstr	s15, [r3]
 8101ee2:	e05c      	b.n	8101f9e <FD_Wavedec_sym+0x2ee>
					} else if((i-j)>=dim_y){ //gestire ultimi elementi
 8101ee4:	8afa      	ldrh	r2, [r7, #22]
 8101ee6:	8abb      	ldrh	r3, [r7, #20]
 8101ee8:	1ad2      	subs	r2, r2, r3
 8101eea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101eec:	429a      	cmp	r2, r3
 8101eee:	db30      	blt.n	8101f52 <FD_Wavedec_sym+0x2a2>
						index_border = (dim_y-1)-((i-j)-dim_y);
 8101ef0:	8aba      	ldrh	r2, [r7, #20]
 8101ef2:	8afb      	ldrh	r3, [r7, #22]
 8101ef4:	1ad3      	subs	r3, r2, r3
 8101ef6:	b29a      	uxth	r2, r3
 8101ef8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101efa:	4413      	add	r3, r2
 8101efc:	b29a      	uxth	r2, r3
 8101efe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101f00:	4413      	add	r3, r2
 8101f02:	b29b      	uxth	r3, r3
 8101f04:	3b01      	subs	r3, #1
 8101f06:	823b      	strh	r3, [r7, #16]
						dec[index_dec+i/2] = dec[index_dec+i/2] + y[index_border] * LoD[j];
 8101f08:	8c3b      	ldrh	r3, [r7, #32]
 8101f0a:	8afa      	ldrh	r2, [r7, #22]
 8101f0c:	0852      	lsrs	r2, r2, #1
 8101f0e:	b292      	uxth	r2, r2
 8101f10:	4413      	add	r3, r2
 8101f12:	009b      	lsls	r3, r3, #2
 8101f14:	68fa      	ldr	r2, [r7, #12]
 8101f16:	4413      	add	r3, r2
 8101f18:	ed93 7a00 	vldr	s14, [r3]
 8101f1c:	8a3b      	ldrh	r3, [r7, #16]
 8101f1e:	009b      	lsls	r3, r3, #2
 8101f20:	687a      	ldr	r2, [r7, #4]
 8101f22:	4413      	add	r3, r2
 8101f24:	edd3 6a00 	vldr	s13, [r3]
 8101f28:	8abb      	ldrh	r3, [r7, #20]
 8101f2a:	4a2a      	ldr	r2, [pc, #168]	; (8101fd4 <FD_Wavedec_sym+0x324>)
 8101f2c:	009b      	lsls	r3, r3, #2
 8101f2e:	4413      	add	r3, r2
 8101f30:	edd3 7a00 	vldr	s15, [r3]
 8101f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101f38:	8c3b      	ldrh	r3, [r7, #32]
 8101f3a:	8afa      	ldrh	r2, [r7, #22]
 8101f3c:	0852      	lsrs	r2, r2, #1
 8101f3e:	b292      	uxth	r2, r2
 8101f40:	4413      	add	r3, r2
 8101f42:	009b      	lsls	r3, r3, #2
 8101f44:	68fa      	ldr	r2, [r7, #12]
 8101f46:	4413      	add	r3, r2
 8101f48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f4c:	edc3 7a00 	vstr	s15, [r3]
 8101f50:	e025      	b.n	8101f9e <FD_Wavedec_sym+0x2ee>
					} else {
						dec [index_dec+i/2] = dec[index_dec+i/2] + y[i-j] * LoD[j];
 8101f52:	8c3b      	ldrh	r3, [r7, #32]
 8101f54:	8afa      	ldrh	r2, [r7, #22]
 8101f56:	0852      	lsrs	r2, r2, #1
 8101f58:	b292      	uxth	r2, r2
 8101f5a:	4413      	add	r3, r2
 8101f5c:	009b      	lsls	r3, r3, #2
 8101f5e:	68fa      	ldr	r2, [r7, #12]
 8101f60:	4413      	add	r3, r2
 8101f62:	ed93 7a00 	vldr	s14, [r3]
 8101f66:	8afa      	ldrh	r2, [r7, #22]
 8101f68:	8abb      	ldrh	r3, [r7, #20]
 8101f6a:	1ad3      	subs	r3, r2, r3
 8101f6c:	009b      	lsls	r3, r3, #2
 8101f6e:	687a      	ldr	r2, [r7, #4]
 8101f70:	4413      	add	r3, r2
 8101f72:	edd3 6a00 	vldr	s13, [r3]
 8101f76:	8abb      	ldrh	r3, [r7, #20]
 8101f78:	4a16      	ldr	r2, [pc, #88]	; (8101fd4 <FD_Wavedec_sym+0x324>)
 8101f7a:	009b      	lsls	r3, r3, #2
 8101f7c:	4413      	add	r3, r2
 8101f7e:	edd3 7a00 	vldr	s15, [r3]
 8101f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101f86:	8c3b      	ldrh	r3, [r7, #32]
 8101f88:	8afa      	ldrh	r2, [r7, #22]
 8101f8a:	0852      	lsrs	r2, r2, #1
 8101f8c:	b292      	uxth	r2, r2
 8101f8e:	4413      	add	r3, r2
 8101f90:	009b      	lsls	r3, r3, #2
 8101f92:	68fa      	ldr	r2, [r7, #12]
 8101f94:	4413      	add	r3, r2
 8101f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101f9a:	edc3 7a00 	vstr	s15, [r3]
			for (uint16_t j = 0; j < DIM_FILTER_WAVELET; j++) {
 8101f9e:	8abb      	ldrh	r3, [r7, #20]
 8101fa0:	3301      	adds	r3, #1
 8101fa2:	82bb      	strh	r3, [r7, #20]
 8101fa4:	8abb      	ldrh	r3, [r7, #20]
 8101fa6:	2b09      	cmp	r3, #9
 8101fa8:	f67f af65 	bls.w	8101e76 <FD_Wavedec_sym+0x1c6>
		for (uint16_t i = 0; i < dim_conv; i++) {
 8101fac:	8afb      	ldrh	r3, [r7, #22]
 8101fae:	3301      	adds	r3, #1
 8101fb0:	82fb      	strh	r3, [r7, #22]
 8101fb2:	8afa      	ldrh	r2, [r7, #22]
 8101fb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101fb6:	429a      	cmp	r2, r3
 8101fb8:	f4ff af5a 	bcc.w	8101e70 <FD_Wavedec_sym+0x1c0>
					}
				}
			}
		}

		if(!(k==N_LEVEL_WAVELET-1)){
 8101fbc:	8bbb      	ldrh	r3, [r7, #28]
 8101fbe:	2b09      	cmp	r3, #9
 8101fc0:	d02c      	beq.n	810201c <FD_Wavedec_sym+0x36c>
		dim_y = dim_coeff;
 8101fc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8101fc4:	84fb      	strh	r3, [r7, #38]	; 0x26

		for(uint16_t i=0; i< dim_y;i++){
 8101fc6:	2300      	movs	r3, #0
 8101fc8:	827b      	strh	r3, [r7, #18]
 8101fca:	e01d      	b.n	8102008 <FD_Wavedec_sym+0x358>
 8101fcc:	10000290 	.word	0x10000290
 8101fd0:	10000030 	.word	0x10000030
 8101fd4:	10000008 	.word	0x10000008
			y[i] = dec[index_dec + i];
 8101fd8:	8c3a      	ldrh	r2, [r7, #32]
 8101fda:	8a7b      	ldrh	r3, [r7, #18]
 8101fdc:	4413      	add	r3, r2
 8101fde:	009b      	lsls	r3, r3, #2
 8101fe0:	68fa      	ldr	r2, [r7, #12]
 8101fe2:	441a      	add	r2, r3
 8101fe4:	8a7b      	ldrh	r3, [r7, #18]
 8101fe6:	009b      	lsls	r3, r3, #2
 8101fe8:	6879      	ldr	r1, [r7, #4]
 8101fea:	440b      	add	r3, r1
 8101fec:	6812      	ldr	r2, [r2, #0]
 8101fee:	601a      	str	r2, [r3, #0]
			dec[index_dec+i]=0;
 8101ff0:	8c3a      	ldrh	r2, [r7, #32]
 8101ff2:	8a7b      	ldrh	r3, [r7, #18]
 8101ff4:	4413      	add	r3, r2
 8101ff6:	009b      	lsls	r3, r3, #2
 8101ff8:	68fa      	ldr	r2, [r7, #12]
 8101ffa:	4413      	add	r3, r2
 8101ffc:	f04f 0200 	mov.w	r2, #0
 8102000:	601a      	str	r2, [r3, #0]
		for(uint16_t i=0; i< dim_y;i++){
 8102002:	8a7b      	ldrh	r3, [r7, #18]
 8102004:	3301      	adds	r3, #1
 8102006:	827b      	strh	r3, [r7, #18]
 8102008:	8a7a      	ldrh	r2, [r7, #18]
 810200a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810200c:	429a      	cmp	r2, r3
 810200e:	d3e3      	bcc.n	8101fd8 <FD_Wavedec_sym+0x328>
		}

		dim_conv = dim_y + DIM_FILTER_WAVELET - 1;
 8102010:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8102012:	3309      	adds	r3, #9
 8102014:	84bb      	strh	r3, [r7, #36]	; 0x24
		dim_coeff = (int)dim_conv/2;
 8102016:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102018:	085b      	lsrs	r3, r3, #1
 810201a:	847b      	strh	r3, [r7, #34]	; 0x22
	for(uint16_t k=0; k<N_LEVEL_WAVELET; k++){
 810201c:	8bbb      	ldrh	r3, [r7, #28]
 810201e:	3301      	adds	r3, #1
 8102020:	83bb      	strh	r3, [r7, #28]
 8102022:	8bbb      	ldrh	r3, [r7, #28]
 8102024:	2b09      	cmp	r3, #9
 8102026:	f67f ae6e 	bls.w	8101d06 <FD_Wavedec_sym+0x56>
		}
	}
}
 810202a:	bf00      	nop
 810202c:	bf00      	nop
 810202e:	372c      	adds	r7, #44	; 0x2c
 8102030:	46bd      	mov	sp, r7
 8102032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102036:	4770      	bx	lr

08102038 <FD_Wenergy>:

void FD_Wenergy(float* dec, uint16_t* dec_dim, float* Ea, float* Ed){
 8102038:	b5b0      	push	{r4, r5, r7, lr}
 810203a:	b08a      	sub	sp, #40	; 0x28
 810203c:	af00      	add	r7, sp, #0
 810203e:	60f8      	str	r0, [r7, #12]
 8102040:	60b9      	str	r1, [r7, #8]
 8102042:	607a      	str	r2, [r7, #4]
 8102044:	603b      	str	r3, [r7, #0]
	float tot=0;
 8102046:	f04f 0300 	mov.w	r3, #0
 810204a:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t index=0;
 810204c:	2300      	movs	r3, #0
 810204e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t dim = 0;
 8102050:	2300      	movs	r3, #0
 8102052:	82bb      	strh	r3, [r7, #20]

	*Ea =0;
 8102054:	687b      	ldr	r3, [r7, #4]
 8102056:	f04f 0200 	mov.w	r2, #0
 810205a:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 810205c:	2300      	movs	r3, #0
 810205e:	843b      	strh	r3, [r7, #32]
 8102060:	e009      	b.n	8102076 <FD_Wenergy+0x3e>
		Ed[i]=0;
 8102062:	8c3b      	ldrh	r3, [r7, #32]
 8102064:	009b      	lsls	r3, r3, #2
 8102066:	683a      	ldr	r2, [r7, #0]
 8102068:	4413      	add	r3, r2
 810206a:	f04f 0200 	mov.w	r2, #0
 810206e:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8102070:	8c3b      	ldrh	r3, [r7, #32]
 8102072:	3301      	adds	r3, #1
 8102074:	843b      	strh	r3, [r7, #32]
 8102076:	8c3b      	ldrh	r3, [r7, #32]
 8102078:	2b09      	cmp	r3, #9
 810207a:	d9f2      	bls.n	8102062 <FD_Wenergy+0x2a>
	}

	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 810207c:	2300      	movs	r3, #0
 810207e:	83fb      	strh	r3, [r7, #30]
 8102080:	e044      	b.n	810210c <FD_Wenergy+0xd4>
		dim = dec_dim[i];
 8102082:	8bfb      	ldrh	r3, [r7, #30]
 8102084:	005b      	lsls	r3, r3, #1
 8102086:	68ba      	ldr	r2, [r7, #8]
 8102088:	4413      	add	r3, r2
 810208a:	881b      	ldrh	r3, [r3, #0]
 810208c:	82bb      	strh	r3, [r7, #20]
		for(uint16_t j=0;j<dim;j++){
 810208e:	2300      	movs	r3, #0
 8102090:	83bb      	strh	r3, [r7, #28]
 8102092:	e030      	b.n	81020f6 <FD_Wenergy+0xbe>
			Ed[i]=Ed[i]+pow(dec[index+j],2);
 8102094:	8bfb      	ldrh	r3, [r7, #30]
 8102096:	009b      	lsls	r3, r3, #2
 8102098:	683a      	ldr	r2, [r7, #0]
 810209a:	4413      	add	r3, r2
 810209c:	681b      	ldr	r3, [r3, #0]
 810209e:	4618      	mov	r0, r3
 81020a0:	f7fe fada 	bl	8100658 <__aeabi_f2d>
 81020a4:	4604      	mov	r4, r0
 81020a6:	460d      	mov	r5, r1
 81020a8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 81020aa:	8bbb      	ldrh	r3, [r7, #28]
 81020ac:	4413      	add	r3, r2
 81020ae:	009b      	lsls	r3, r3, #2
 81020b0:	68fa      	ldr	r2, [r7, #12]
 81020b2:	4413      	add	r3, r2
 81020b4:	681b      	ldr	r3, [r3, #0]
 81020b6:	4618      	mov	r0, r3
 81020b8:	f7fe face 	bl	8100658 <__aeabi_f2d>
 81020bc:	4602      	mov	r2, r0
 81020be:	460b      	mov	r3, r1
 81020c0:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8102210 <FD_Wenergy+0x1d8>
 81020c4:	ec43 2b10 	vmov	d0, r2, r3
 81020c8:	f00a f8ca 	bl	810c260 <pow>
 81020cc:	ec53 2b10 	vmov	r2, r3, d0
 81020d0:	4620      	mov	r0, r4
 81020d2:	4629      	mov	r1, r5
 81020d4:	f7fe f962 	bl	810039c <__adddf3>
 81020d8:	4602      	mov	r2, r0
 81020da:	460b      	mov	r3, r1
 81020dc:	4610      	mov	r0, r2
 81020de:	4619      	mov	r1, r3
 81020e0:	8bfb      	ldrh	r3, [r7, #30]
 81020e2:	009b      	lsls	r3, r3, #2
 81020e4:	683a      	ldr	r2, [r7, #0]
 81020e6:	18d4      	adds	r4, r2, r3
 81020e8:	f7fe fe06 	bl	8100cf8 <__aeabi_d2f>
 81020ec:	4603      	mov	r3, r0
 81020ee:	6023      	str	r3, [r4, #0]
		for(uint16_t j=0;j<dim;j++){
 81020f0:	8bbb      	ldrh	r3, [r7, #28]
 81020f2:	3301      	adds	r3, #1
 81020f4:	83bb      	strh	r3, [r7, #28]
 81020f6:	8bba      	ldrh	r2, [r7, #28]
 81020f8:	8abb      	ldrh	r3, [r7, #20]
 81020fa:	429a      	cmp	r2, r3
 81020fc:	d3ca      	bcc.n	8102094 <FD_Wenergy+0x5c>
		}
		index = index + dim;
 81020fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8102100:	8abb      	ldrh	r3, [r7, #20]
 8102102:	4413      	add	r3, r2
 8102104:	847b      	strh	r3, [r7, #34]	; 0x22
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8102106:	8bfb      	ldrh	r3, [r7, #30]
 8102108:	3301      	adds	r3, #1
 810210a:	83fb      	strh	r3, [r7, #30]
 810210c:	8bfb      	ldrh	r3, [r7, #30]
 810210e:	2b09      	cmp	r3, #9
 8102110:	d9b7      	bls.n	8102082 <FD_Wenergy+0x4a>
	}

	dim = dec_dim[N_LEVEL_WAVELET-1];
 8102112:	68bb      	ldr	r3, [r7, #8]
 8102114:	8a5b      	ldrh	r3, [r3, #18]
 8102116:	82bb      	strh	r3, [r7, #20]
	for(uint16_t j=0;j<dim;j++){
 8102118:	2300      	movs	r3, #0
 810211a:	837b      	strh	r3, [r7, #26]
 810211c:	e02a      	b.n	8102174 <FD_Wenergy+0x13c>
		*Ea=*Ea+pow(dec[index+j],2);
 810211e:	687b      	ldr	r3, [r7, #4]
 8102120:	681b      	ldr	r3, [r3, #0]
 8102122:	4618      	mov	r0, r3
 8102124:	f7fe fa98 	bl	8100658 <__aeabi_f2d>
 8102128:	4604      	mov	r4, r0
 810212a:	460d      	mov	r5, r1
 810212c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 810212e:	8b7b      	ldrh	r3, [r7, #26]
 8102130:	4413      	add	r3, r2
 8102132:	009b      	lsls	r3, r3, #2
 8102134:	68fa      	ldr	r2, [r7, #12]
 8102136:	4413      	add	r3, r2
 8102138:	681b      	ldr	r3, [r3, #0]
 810213a:	4618      	mov	r0, r3
 810213c:	f7fe fa8c 	bl	8100658 <__aeabi_f2d>
 8102140:	4602      	mov	r2, r0
 8102142:	460b      	mov	r3, r1
 8102144:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8102210 <FD_Wenergy+0x1d8>
 8102148:	ec43 2b10 	vmov	d0, r2, r3
 810214c:	f00a f888 	bl	810c260 <pow>
 8102150:	ec53 2b10 	vmov	r2, r3, d0
 8102154:	4620      	mov	r0, r4
 8102156:	4629      	mov	r1, r5
 8102158:	f7fe f920 	bl	810039c <__adddf3>
 810215c:	4602      	mov	r2, r0
 810215e:	460b      	mov	r3, r1
 8102160:	4610      	mov	r0, r2
 8102162:	4619      	mov	r1, r3
 8102164:	f7fe fdc8 	bl	8100cf8 <__aeabi_d2f>
 8102168:	4602      	mov	r2, r0
 810216a:	687b      	ldr	r3, [r7, #4]
 810216c:	601a      	str	r2, [r3, #0]
	for(uint16_t j=0;j<dim;j++){
 810216e:	8b7b      	ldrh	r3, [r7, #26]
 8102170:	3301      	adds	r3, #1
 8102172:	837b      	strh	r3, [r7, #26]
 8102174:	8b7a      	ldrh	r2, [r7, #26]
 8102176:	8abb      	ldrh	r3, [r7, #20]
 8102178:	429a      	cmp	r2, r3
 810217a:	d3d0      	bcc.n	810211e <FD_Wenergy+0xe6>
	}

	tot = *Ea;
 810217c:	687b      	ldr	r3, [r7, #4]
 810217e:	681b      	ldr	r3, [r3, #0]
 8102180:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8102182:	2300      	movs	r3, #0
 8102184:	833b      	strh	r3, [r7, #24]
 8102186:	e00e      	b.n	81021a6 <FD_Wenergy+0x16e>
		tot = tot + Ed[i];
 8102188:	8b3b      	ldrh	r3, [r7, #24]
 810218a:	009b      	lsls	r3, r3, #2
 810218c:	683a      	ldr	r2, [r7, #0]
 810218e:	4413      	add	r3, r2
 8102190:	edd3 7a00 	vldr	s15, [r3]
 8102194:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8102198:	ee77 7a27 	vadd.f32	s15, s14, s15
 810219c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 81021a0:	8b3b      	ldrh	r3, [r7, #24]
 81021a2:	3301      	adds	r3, #1
 81021a4:	833b      	strh	r3, [r7, #24]
 81021a6:	8b3b      	ldrh	r3, [r7, #24]
 81021a8:	2b09      	cmp	r3, #9
 81021aa:	d9ed      	bls.n	8102188 <FD_Wenergy+0x150>
	}

	*Ea = 100*(*Ea)/tot;
 81021ac:	687b      	ldr	r3, [r7, #4]
 81021ae:	edd3 7a00 	vldr	s15, [r3]
 81021b2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8102218 <FD_Wenergy+0x1e0>
 81021b6:	ee67 6a87 	vmul.f32	s13, s15, s14
 81021ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 81021be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 81021c8:	2300      	movs	r3, #0
 81021ca:	82fb      	strh	r3, [r7, #22]
 81021cc:	e016      	b.n	81021fc <FD_Wenergy+0x1c4>
		Ed[i] = 100*Ed[i]/tot;
 81021ce:	8afb      	ldrh	r3, [r7, #22]
 81021d0:	009b      	lsls	r3, r3, #2
 81021d2:	683a      	ldr	r2, [r7, #0]
 81021d4:	4413      	add	r3, r2
 81021d6:	edd3 7a00 	vldr	s15, [r3]
 81021da:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8102218 <FD_Wenergy+0x1e0>
 81021de:	ee67 6a87 	vmul.f32	s13, s15, s14
 81021e2:	8afb      	ldrh	r3, [r7, #22]
 81021e4:	009b      	lsls	r3, r3, #2
 81021e6:	683a      	ldr	r2, [r7, #0]
 81021e8:	4413      	add	r3, r2
 81021ea:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 81021ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81021f2:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 81021f6:	8afb      	ldrh	r3, [r7, #22]
 81021f8:	3301      	adds	r3, #1
 81021fa:	82fb      	strh	r3, [r7, #22]
 81021fc:	8afb      	ldrh	r3, [r7, #22]
 81021fe:	2b09      	cmp	r3, #9
 8102200:	d9e5      	bls.n	81021ce <FD_Wenergy+0x196>
	}
}
 8102202:	bf00      	nop
 8102204:	bf00      	nop
 8102206:	3728      	adds	r7, #40	; 0x28
 8102208:	46bd      	mov	sp, r7
 810220a:	bdb0      	pop	{r4, r5, r7, pc}
 810220c:	f3af 8000 	nop.w
 8102210:	00000000 	.word	0x00000000
 8102214:	40000000 	.word	0x40000000
 8102218:	42c80000 	.word	0x42c80000

0810221c <FD_Hilbert_fast>:


}
*/

void FD_Hilbert_fast(float*y){
 810221c:	b590      	push	{r4, r7, lr}
 810221e:	b089      	sub	sp, #36	; 0x24
 8102220:	af00      	add	r7, sp, #0
 8102222:	6078      	str	r0, [r7, #4]

	float complex *x = (float complex*)malloc(N_SAMPLE * sizeof(float complex));
 8102224:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8102228:	f005 fb9a 	bl	8107960 <malloc>
 810222c:	4603      	mov	r3, r0
 810222e:	613b      	str	r3, [r7, #16]

	for(uint32_t n=0;n<N_SAMPLE;n++){
 8102230:	2300      	movs	r3, #0
 8102232:	61fb      	str	r3, [r7, #28]
 8102234:	e00f      	b.n	8102256 <FD_Hilbert_fast+0x3a>
		x[n]=y[n];
 8102236:	69fb      	ldr	r3, [r7, #28]
 8102238:	009b      	lsls	r3, r3, #2
 810223a:	687a      	ldr	r2, [r7, #4]
 810223c:	4413      	add	r3, r2
 810223e:	6819      	ldr	r1, [r3, #0]
 8102240:	69fb      	ldr	r3, [r7, #28]
 8102242:	00db      	lsls	r3, r3, #3
 8102244:	693a      	ldr	r2, [r7, #16]
 8102246:	4413      	add	r3, r2
 8102248:	f04f 0200 	mov.w	r2, #0
 810224c:	6019      	str	r1, [r3, #0]
 810224e:	605a      	str	r2, [r3, #4]
	for(uint32_t n=0;n<N_SAMPLE;n++){
 8102250:	69fb      	ldr	r3, [r7, #28]
 8102252:	3301      	adds	r3, #1
 8102254:	61fb      	str	r3, [r7, #28]
 8102256:	69fb      	ldr	r3, [r7, #28]
 8102258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810225c:	d3eb      	bcc.n	8102236 <FD_Hilbert_fast+0x1a>
	}

	FFT(x,N_SAMPLE);
 810225e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8102262:	6938      	ldr	r0, [r7, #16]
 8102264:	f7ff fb88 	bl	8101978 <FFT>

	//DELETE NEGATIVE
	for(uint32_t n=0;n<N_SAMPLE;n++){
 8102268:	2300      	movs	r3, #0
 810226a:	61bb      	str	r3, [r7, #24]
 810226c:	e02f      	b.n	81022ce <FD_Hilbert_fast+0xb2>
		if (n>0 && n<N_SAMPLE/2){
 810226e:	69bb      	ldr	r3, [r7, #24]
 8102270:	2b00      	cmp	r3, #0
 8102272:	d01c      	beq.n	81022ae <FD_Hilbert_fast+0x92>
 8102274:	69bb      	ldr	r3, [r7, #24]
 8102276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810227a:	d218      	bcs.n	81022ae <FD_Hilbert_fast+0x92>
			x[n] = 2*x[n];
 810227c:	69bb      	ldr	r3, [r7, #24]
 810227e:	00db      	lsls	r3, r3, #3
 8102280:	693a      	ldr	r2, [r7, #16]
 8102282:	4413      	add	r3, r2
 8102284:	681a      	ldr	r2, [r3, #0]
 8102286:	685b      	ldr	r3, [r3, #4]
 8102288:	ee07 2a90 	vmov	s15, r2
 810228c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8102290:	ee07 3a90 	vmov	s15, r3
 8102294:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8102298:	69bb      	ldr	r3, [r7, #24]
 810229a:	00db      	lsls	r3, r3, #3
 810229c:	693a      	ldr	r2, [r7, #16]
 810229e:	4413      	add	r3, r2
 81022a0:	ee17 1a10 	vmov	r1, s14
 81022a4:	ee17 2a90 	vmov	r2, s15
 81022a8:	6019      	str	r1, [r3, #0]
 81022aa:	605a      	str	r2, [r3, #4]
 81022ac:	e00c      	b.n	81022c8 <FD_Hilbert_fast+0xac>
		} else if(n>N_SAMPLE/2) {
 81022ae:	69bb      	ldr	r3, [r7, #24]
 81022b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81022b4:	d908      	bls.n	81022c8 <FD_Hilbert_fast+0xac>
			x[n]=0;
 81022b6:	69bb      	ldr	r3, [r7, #24]
 81022b8:	00db      	lsls	r3, r3, #3
 81022ba:	693a      	ldr	r2, [r7, #16]
 81022bc:	4413      	add	r3, r2
 81022be:	4a27      	ldr	r2, [pc, #156]	; (810235c <FD_Hilbert_fast+0x140>)
 81022c0:	6811      	ldr	r1, [r2, #0]
 81022c2:	6019      	str	r1, [r3, #0]
 81022c4:	6852      	ldr	r2, [r2, #4]
 81022c6:	605a      	str	r2, [r3, #4]
	for(uint32_t n=0;n<N_SAMPLE;n++){
 81022c8:	69bb      	ldr	r3, [r7, #24]
 81022ca:	3301      	adds	r3, #1
 81022cc:	61bb      	str	r3, [r7, #24]
 81022ce:	69bb      	ldr	r3, [r7, #24]
 81022d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81022d4:	d3cb      	bcc.n	810226e <FD_Hilbert_fast+0x52>
		}
	}

	IFFT(x,N_SAMPLE);
 81022d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 81022da:	6938      	ldr	r0, [r7, #16]
 81022dc:	f7ff fc72 	bl	8101bc4 <IFFT>

	for(uint32_t n=0;n<N_SAMPLE;n++){
 81022e0:	2300      	movs	r3, #0
 81022e2:	617b      	str	r3, [r7, #20]
 81022e4:	e02c      	b.n	8102340 <FD_Hilbert_fast+0x124>
		float hil = cimagf(x[n]);
 81022e6:	697b      	ldr	r3, [r7, #20]
 81022e8:	00db      	lsls	r3, r3, #3
 81022ea:	693a      	ldr	r2, [r7, #16]
 81022ec:	4413      	add	r3, r2
 81022ee:	685b      	ldr	r3, [r3, #4]
 81022f0:	60fb      	str	r3, [r7, #12]
		float signal = y[n];
 81022f2:	697b      	ldr	r3, [r7, #20]
 81022f4:	009b      	lsls	r3, r3, #2
 81022f6:	687a      	ldr	r2, [r7, #4]
 81022f8:	4413      	add	r3, r2
 81022fa:	681b      	ldr	r3, [r3, #0]
 81022fc:	60bb      	str	r3, [r7, #8]
		y[n] = sqrt(hil*hil + signal*signal);
 81022fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8102302:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8102306:	edd7 7a02 	vldr	s15, [r7, #8]
 810230a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 810230e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8102312:	ee17 0a90 	vmov	r0, s15
 8102316:	f7fe f99f 	bl	8100658 <__aeabi_f2d>
 810231a:	4602      	mov	r2, r0
 810231c:	460b      	mov	r3, r1
 810231e:	ec43 2b10 	vmov	d0, r2, r3
 8102322:	f00a f84b 	bl	810c3bc <sqrt>
 8102326:	ec51 0b10 	vmov	r0, r1, d0
 810232a:	697b      	ldr	r3, [r7, #20]
 810232c:	009b      	lsls	r3, r3, #2
 810232e:	687a      	ldr	r2, [r7, #4]
 8102330:	18d4      	adds	r4, r2, r3
 8102332:	f7fe fce1 	bl	8100cf8 <__aeabi_d2f>
 8102336:	4603      	mov	r3, r0
 8102338:	6023      	str	r3, [r4, #0]
	for(uint32_t n=0;n<N_SAMPLE;n++){
 810233a:	697b      	ldr	r3, [r7, #20]
 810233c:	3301      	adds	r3, #1
 810233e:	617b      	str	r3, [r7, #20]
 8102340:	697b      	ldr	r3, [r7, #20]
 8102342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102346:	d3ce      	bcc.n	81022e6 <FD_Hilbert_fast+0xca>
	}
	 free(x);
 8102348:	6938      	ldr	r0, [r7, #16]
 810234a:	f005 fb11 	bl	8107970 <free>
	 x = NULL;
 810234e:	2300      	movs	r3, #0
 8102350:	613b      	str	r3, [r7, #16]
}
 8102352:	bf00      	nop
 8102354:	3724      	adds	r7, #36	; 0x24
 8102356:	46bd      	mov	sp, r7
 8102358:	bd90      	pop	{r4, r7, pc}
 810235a:	bf00      	nop
 810235c:	0810e0e0 	.word	0x0810e0e0

08102360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102360:	b580      	push	{r7, lr}
 8102362:	b08a      	sub	sp, #40	; 0x28
 8102364:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102366:	4b81      	ldr	r3, [pc, #516]	; (810256c <main+0x20c>)
 8102368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810236c:	4a7f      	ldr	r2, [pc, #508]	; (810256c <main+0x20c>)
 810236e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102376:	4b7d      	ldr	r3, [pc, #500]	; (810256c <main+0x20c>)
 8102378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102380:	607b      	str	r3, [r7, #4]
 8102382:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102384:	2001      	movs	r0, #1
 8102386:	f001 f8a9 	bl	81034dc <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810238a:	f001 f933 	bl	81035f4 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 810238e:	2201      	movs	r2, #1
 8102390:	2102      	movs	r1, #2
 8102392:	2000      	movs	r0, #0
 8102394:	f001 f8b4 	bl	8103500 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102398:	4b75      	ldr	r3, [pc, #468]	; (8102570 <main+0x210>)
 810239a:	681b      	ldr	r3, [r3, #0]
 810239c:	091b      	lsrs	r3, r3, #4
 810239e:	f003 030f 	and.w	r3, r3, #15
 81023a2:	2b07      	cmp	r3, #7
 81023a4:	d108      	bne.n	81023b8 <main+0x58>
 81023a6:	4b73      	ldr	r3, [pc, #460]	; (8102574 <main+0x214>)
 81023a8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81023ac:	4a71      	ldr	r2, [pc, #452]	; (8102574 <main+0x214>)
 81023ae:	f043 0301 	orr.w	r3, r3, #1
 81023b2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81023b6:	e007      	b.n	81023c8 <main+0x68>
 81023b8:	4b6e      	ldr	r3, [pc, #440]	; (8102574 <main+0x214>)
 81023ba:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81023be:	4a6d      	ldr	r2, [pc, #436]	; (8102574 <main+0x214>)
 81023c0:	f043 0301 	orr.w	r3, r3, #1
 81023c4:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81023c8:	f000 fca8 	bl	8102d1c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81023cc:	f000 f988 	bl	81026e0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 81023d0:	f000 f93a 	bl	8102648 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 81023d4:	f000 f8e2 	bl	810259c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ADE9000_Power();
 81023d8:	f7ff f870 	bl	81014bc <ADE9000_Power>
  float complex *out = (float complex*)malloc(N_SAMPLE * sizeof(float complex));

  free(out);
   out = NULL;
*/
  setvbuf( stdin, NULL, _IONBF, 0 );
 81023dc:	4b66      	ldr	r3, [pc, #408]	; (8102578 <main+0x218>)
 81023de:	681b      	ldr	r3, [r3, #0]
 81023e0:	6858      	ldr	r0, [r3, #4]
 81023e2:	2300      	movs	r3, #0
 81023e4:	2202      	movs	r2, #2
 81023e6:	2100      	movs	r1, #0
 81023e8:	f006 fa94 	bl	8108914 <setvbuf>

  ADE9000_Setup();
 81023ec:	f7fe fffc 	bl	81013e8 <ADE9000_Setup>

  union DATA * ia = (union DATA *)malloc(N_SAMPLE * sizeof(union DATA));
 81023f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 81023f4:	f005 fab4 	bl	8107960 <malloc>
 81023f8:	4603      	mov	r3, r0
 81023fa:	61bb      	str	r3, [r7, #24]



  uint16_t index = 0;
 81023fc:	2300      	movs	r3, #0
 81023fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint32_t start;
  uint32_t value_reg_32 = 0x00020000;
 8102400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8102404:	617b      	str	r3, [r7, #20]
  uint16_t value_reg_16;

  Start_Waveform_Buffer();
 8102406:	f7ff f957 	bl	81016b8 <Start_Waveform_Buffer>

  while(index < N_SAMPLE){
 810240a:	e057      	b.n	81024bc <main+0x15c>
 		  while(flag_read == 0){}
 810240c:	bf00      	nop
 810240e:	4b5b      	ldr	r3, [pc, #364]	; (810257c <main+0x21c>)
 8102410:	f993 3000 	ldrsb.w	r3, [r3]
 8102414:	2b00      	cmp	r3, #0
 8102416:	d0fa      	beq.n	810240e <main+0xae>

 		  flag_read = 0;
 8102418:	4b58      	ldr	r3, [pc, #352]	; (810257c <main+0x21c>)
 810241a:	2200      	movs	r2, #0
 810241c:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 810241e:	6979      	ldr	r1, [r7, #20]
 8102420:	f240 4002 	movw	r0, #1026	; 0x402
 8102424:	f7ff f90c 	bl	8101640 <ADE9000_SPI_Write_32>

		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 8102428:	f240 40a3 	movw	r0, #1187	; 0x4a3
 810242c:	f7ff f866 	bl	81014fc <ADE9000_SPI_Read_16>
 8102430:	4603      	mov	r3, r0
 8102432:	81fb      	strh	r3, [r7, #14]
		  value_reg_16 = (value_reg_16>>12)&0x0F;
 8102434:	89fb      	ldrh	r3, [r7, #14]
 8102436:	0b1b      	lsrs	r3, r3, #12
 8102438:	81fb      	strh	r3, [r7, #14]
		  printf("pg: %i\r\n",value_reg_16);
 810243a:	89fb      	ldrh	r3, [r7, #14]
 810243c:	4619      	mov	r1, r3
 810243e:	4850      	ldr	r0, [pc, #320]	; (8102580 <main+0x220>)
 8102440:	f006 f9ca 	bl	81087d8 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR;
 8102444:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8102448:	60bb      	str	r3, [r7, #8]



 		 ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,&ia[index].data_int);
 810244a:	68bb      	ldr	r3, [r7, #8]
 810244c:	b298      	uxth	r0, r3
 810244e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8102450:	009b      	lsls	r3, r3, #2
 8102452:	69ba      	ldr	r2, [r7, #24]
 8102454:	4413      	add	r3, r2
 8102456:	461a      	mov	r2, r3
 8102458:	2180      	movs	r1, #128	; 0x80
 810245a:	f7ff f95b 	bl	8101714 <ADE9000_SPI_Burst_Read_one_ch>

 		  index += BURST_READ_N;
 810245e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8102460:	3380      	adds	r3, #128	; 0x80
 8102462:	84fb      	strh	r3, [r7, #38]	; 0x26

 		  while(flag_read == 0){}
 8102464:	bf00      	nop
 8102466:	4b45      	ldr	r3, [pc, #276]	; (810257c <main+0x21c>)
 8102468:	f993 3000 	ldrsb.w	r3, [r3]
 810246c:	2b00      	cmp	r3, #0
 810246e:	d0fa      	beq.n	8102466 <main+0x106>


 		  flag_read = 0;
 8102470:	4b42      	ldr	r3, [pc, #264]	; (810257c <main+0x21c>)
 8102472:	2200      	movs	r2, #0
 8102474:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8102476:	6979      	ldr	r1, [r7, #20]
 8102478:	f240 4002 	movw	r0, #1026	; 0x402
 810247c:	f7ff f8e0 	bl	8101640 <ADE9000_SPI_Write_32>
 		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 8102480:	f240 40a3 	movw	r0, #1187	; 0x4a3
 8102484:	f7ff f83a 	bl	81014fc <ADE9000_SPI_Read_16>
 8102488:	4603      	mov	r3, r0
 810248a:	81fb      	strh	r3, [r7, #14]
 		  value_reg_16 = (value_reg_16>>12)&0x0F;
 810248c:	89fb      	ldrh	r3, [r7, #14]
 810248e:	0b1b      	lsrs	r3, r3, #12
 8102490:	81fb      	strh	r3, [r7, #14]
 		  printf("pg: %i\r\n",value_reg_16);
 8102492:	89fb      	ldrh	r3, [r7, #14]
 8102494:	4619      	mov	r1, r3
 8102496:	483a      	ldr	r0, [pc, #232]	; (8102580 <main+0x220>)
 8102498:	f006 f99e 	bl	81087d8 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR + BURST_READ_N*8;
 810249c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 81024a0:	60bb      	str	r3, [r7, #8]


 		 ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,&ia[index].data_int);
 81024a2:	68bb      	ldr	r3, [r7, #8]
 81024a4:	b298      	uxth	r0, r3
 81024a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81024a8:	009b      	lsls	r3, r3, #2
 81024aa:	69ba      	ldr	r2, [r7, #24]
 81024ac:	4413      	add	r3, r2
 81024ae:	461a      	mov	r2, r3
 81024b0:	2180      	movs	r1, #128	; 0x80
 81024b2:	f7ff f92f 	bl	8101714 <ADE9000_SPI_Burst_Read_one_ch>

 		 index += BURST_READ_N;
 81024b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81024b8:	3380      	adds	r3, #128	; 0x80
 81024ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(index < N_SAMPLE){
 81024bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81024be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81024c2:	d3a3      	bcc.n	810240c <main+0xac>


 }
  Stop_Waveform_Buffer();
 81024c4:	f7ff f90f 	bl	81016e6 <Stop_Waveform_Buffer>


  ADE9000_Conv_ADC_I(ia,N_SAMPLE);
 81024c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 81024cc:	69b8      	ldr	r0, [r7, #24]
 81024ce:	f7ff f973 	bl	81017b8 <ADE9000_Conv_ADC_I>

  printf("IA\r\n");
 81024d2:	482c      	ldr	r0, [pc, #176]	; (8102584 <main+0x224>)
 81024d4:	f006 fa06 	bl	81088e4 <puts>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 81024d8:	2300      	movs	r3, #0
 81024da:	623b      	str	r3, [r7, #32]
 81024dc:	e00f      	b.n	81024fe <main+0x19e>
	 printf("%f\r\n",ia[i].data_float);
 81024de:	6a3b      	ldr	r3, [r7, #32]
 81024e0:	009b      	lsls	r3, r3, #2
 81024e2:	69ba      	ldr	r2, [r7, #24]
 81024e4:	4413      	add	r3, r2
 81024e6:	681b      	ldr	r3, [r3, #0]
 81024e8:	4618      	mov	r0, r3
 81024ea:	f7fe f8b5 	bl	8100658 <__aeabi_f2d>
 81024ee:	4602      	mov	r2, r0
 81024f0:	460b      	mov	r3, r1
 81024f2:	4825      	ldr	r0, [pc, #148]	; (8102588 <main+0x228>)
 81024f4:	f006 f970 	bl	81087d8 <iprintf>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 81024f8:	6a3b      	ldr	r3, [r7, #32]
 81024fa:	3301      	adds	r3, #1
 81024fc:	623b      	str	r3, [r7, #32]
 81024fe:	6a3b      	ldr	r3, [r7, #32]
 8102500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102504:	d3eb      	bcc.n	81024de <main+0x17e>
  }

 // FD_Hilbert(&ia[0].data_float);
  FD_Hilbert_fast(&ia[0].data_float);
 8102506:	69bb      	ldr	r3, [r7, #24]
 8102508:	4618      	mov	r0, r3
 810250a:	f7ff fe87 	bl	810221c <FD_Hilbert_fast>

  float * Wavelet_dec = (float *)malloc(N_DEC_WAVELET * sizeof(union DATA));
 810250e:	f248 1044 	movw	r0, #33092	; 0x8144
 8102512:	f005 fa25 	bl	8107960 <malloc>
 8102516:	4603      	mov	r3, r0
 8102518:	613b      	str	r3, [r7, #16]

  //FD_Wavedec_zpd(Wavelet_dec,Wavelet_dec_dim,&ia[0].data_float);
  FD_Wavedec_sym(Wavelet_dec,Wavelet_dec_dim,&ia[0].data_float);
 810251a:	69bb      	ldr	r3, [r7, #24]
 810251c:	461a      	mov	r2, r3
 810251e:	491b      	ldr	r1, [pc, #108]	; (810258c <main+0x22c>)
 8102520:	6938      	ldr	r0, [r7, #16]
 8102522:	f7ff fbc5 	bl	8101cb0 <FD_Wavedec_sym>

  printf("Dec\r\n");
 8102526:	481a      	ldr	r0, [pc, #104]	; (8102590 <main+0x230>)
 8102528:	f006 f9dc 	bl	81088e4 <puts>
  for(uint32_t i = 0; i<N_DEC_WAVELET; i++){
 810252c:	2300      	movs	r3, #0
 810252e:	61fb      	str	r3, [r7, #28]
 8102530:	e00f      	b.n	8102552 <main+0x1f2>
	  printf("%f\r\n",Wavelet_dec[i]);
 8102532:	69fb      	ldr	r3, [r7, #28]
 8102534:	009b      	lsls	r3, r3, #2
 8102536:	693a      	ldr	r2, [r7, #16]
 8102538:	4413      	add	r3, r2
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	4618      	mov	r0, r3
 810253e:	f7fe f88b 	bl	8100658 <__aeabi_f2d>
 8102542:	4602      	mov	r2, r0
 8102544:	460b      	mov	r3, r1
 8102546:	4810      	ldr	r0, [pc, #64]	; (8102588 <main+0x228>)
 8102548:	f006 f946 	bl	81087d8 <iprintf>
  for(uint32_t i = 0; i<N_DEC_WAVELET; i++){
 810254c:	69fb      	ldr	r3, [r7, #28]
 810254e:	3301      	adds	r3, #1
 8102550:	61fb      	str	r3, [r7, #28]
 8102552:	69fb      	ldr	r3, [r7, #28]
 8102554:	f242 0250 	movw	r2, #8272	; 0x2050
 8102558:	4293      	cmp	r3, r2
 810255a:	d9ea      	bls.n	8102532 <main+0x1d2>
  }

  FD_Wenergy(Wavelet_dec,Wavelet_dec_dim,&Ea,Ed);
 810255c:	4b0d      	ldr	r3, [pc, #52]	; (8102594 <main+0x234>)
 810255e:	4a0e      	ldr	r2, [pc, #56]	; (8102598 <main+0x238>)
 8102560:	490a      	ldr	r1, [pc, #40]	; (810258c <main+0x22c>)
 8102562:	6938      	ldr	r0, [r7, #16]
 8102564:	f7ff fd68 	bl	8102038 <FD_Wenergy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8102568:	e7fe      	b.n	8102568 <main+0x208>
 810256a:	bf00      	nop
 810256c:	58024400 	.word	0x58024400
 8102570:	e000ed00 	.word	0xe000ed00
 8102574:	58026400 	.word	0x58026400
 8102578:	10000060 	.word	0x10000060
 810257c:	10000254 	.word	0x10000254
 8102580:	0810e0e8 	.word	0x0810e0e8
 8102584:	0810e0f4 	.word	0x0810e0f4
 8102588:	0810e0f8 	.word	0x0810e0f8
 810258c:	10000290 	.word	0x10000290
 8102590:	0810e100 	.word	0x0810e100
 8102594:	10000268 	.word	0x10000268
 8102598:	100002a4 	.word	0x100002a4

0810259c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 810259c:	b580      	push	{r7, lr}
 810259e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 81025a0:	4b27      	ldr	r3, [pc, #156]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025a2:	4a28      	ldr	r2, [pc, #160]	; (8102644 <MX_SPI1_Init+0xa8>)
 81025a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 81025a6:	4b26      	ldr	r3, [pc, #152]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025a8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 81025ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 81025ae:	4b24      	ldr	r3, [pc, #144]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025b0:	2200      	movs	r2, #0
 81025b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 81025b4:	4b22      	ldr	r3, [pc, #136]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025b6:	220f      	movs	r2, #15
 81025b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 81025ba:	4b21      	ldr	r3, [pc, #132]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025bc:	2200      	movs	r2, #0
 81025be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 81025c0:	4b1f      	ldr	r3, [pc, #124]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025c2:	2200      	movs	r2, #0
 81025c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 81025c6:	4b1e      	ldr	r3, [pc, #120]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 81025cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 81025ce:	4b1c      	ldr	r3, [pc, #112]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025d0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 81025d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 81025d6:	4b1a      	ldr	r3, [pc, #104]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025d8:	2200      	movs	r2, #0
 81025da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 81025dc:	4b18      	ldr	r3, [pc, #96]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025de:	2200      	movs	r2, #0
 81025e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 81025e2:	4b17      	ldr	r3, [pc, #92]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025e4:	2200      	movs	r2, #0
 81025e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 81025e8:	4b15      	ldr	r3, [pc, #84]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025ea:	2200      	movs	r2, #0
 81025ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 81025ee:	4b14      	ldr	r3, [pc, #80]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025f0:	2200      	movs	r2, #0
 81025f2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 81025f4:	4b12      	ldr	r3, [pc, #72]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025f6:	2200      	movs	r2, #0
 81025f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 81025fa:	4b11      	ldr	r3, [pc, #68]	; (8102640 <MX_SPI1_Init+0xa4>)
 81025fc:	2200      	movs	r2, #0
 81025fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102600:	4b0f      	ldr	r3, [pc, #60]	; (8102640 <MX_SPI1_Init+0xa4>)
 8102602:	2200      	movs	r2, #0
 8102604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102606:	4b0e      	ldr	r3, [pc, #56]	; (8102640 <MX_SPI1_Init+0xa4>)
 8102608:	2200      	movs	r2, #0
 810260a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 810260c:	4b0c      	ldr	r3, [pc, #48]	; (8102640 <MX_SPI1_Init+0xa4>)
 810260e:	2200      	movs	r2, #0
 8102610:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102612:	4b0b      	ldr	r3, [pc, #44]	; (8102640 <MX_SPI1_Init+0xa4>)
 8102614:	2200      	movs	r2, #0
 8102616:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8102618:	4b09      	ldr	r3, [pc, #36]	; (8102640 <MX_SPI1_Init+0xa4>)
 810261a:	2200      	movs	r2, #0
 810261c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810261e:	4b08      	ldr	r3, [pc, #32]	; (8102640 <MX_SPI1_Init+0xa4>)
 8102620:	2200      	movs	r2, #0
 8102622:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102624:	4b06      	ldr	r3, [pc, #24]	; (8102640 <MX_SPI1_Init+0xa4>)
 8102626:	2200      	movs	r2, #0
 8102628:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 810262a:	4805      	ldr	r0, [pc, #20]	; (8102640 <MX_SPI1_Init+0xa4>)
 810262c:	f002 fd2a 	bl	8105084 <HAL_SPI_Init>
 8102630:	4603      	mov	r3, r0
 8102632:	2b00      	cmp	r3, #0
 8102634:	d001      	beq.n	810263a <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8102636:	f000 f94b 	bl	81028d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 810263a:	bf00      	nop
 810263c:	bd80      	pop	{r7, pc}
 810263e:	bf00      	nop
 8102640:	10000338 	.word	0x10000338
 8102644:	40013000 	.word	0x40013000

08102648 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8102648:	b580      	push	{r7, lr}
 810264a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810264c:	4b22      	ldr	r3, [pc, #136]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 810264e:	4a23      	ldr	r2, [pc, #140]	; (81026dc <MX_USART3_UART_Init+0x94>)
 8102650:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102652:	4b21      	ldr	r3, [pc, #132]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 8102654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102658:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810265a:	4b1f      	ldr	r3, [pc, #124]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 810265c:	2200      	movs	r2, #0
 810265e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102660:	4b1d      	ldr	r3, [pc, #116]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 8102662:	2200      	movs	r2, #0
 8102664:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8102666:	4b1c      	ldr	r3, [pc, #112]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 8102668:	2200      	movs	r2, #0
 810266a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810266c:	4b1a      	ldr	r3, [pc, #104]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 810266e:	220c      	movs	r2, #12
 8102670:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102672:	4b19      	ldr	r3, [pc, #100]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 8102674:	2200      	movs	r2, #0
 8102676:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102678:	4b17      	ldr	r3, [pc, #92]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 810267a:	2200      	movs	r2, #0
 810267c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810267e:	4b16      	ldr	r3, [pc, #88]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 8102680:	2200      	movs	r2, #0
 8102682:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102684:	4b14      	ldr	r3, [pc, #80]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 8102686:	2200      	movs	r2, #0
 8102688:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810268a:	4b13      	ldr	r3, [pc, #76]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 810268c:	2200      	movs	r2, #0
 810268e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102690:	4811      	ldr	r0, [pc, #68]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 8102692:	f003 fdad 	bl	81061f0 <HAL_UART_Init>
 8102696:	4603      	mov	r3, r0
 8102698:	2b00      	cmp	r3, #0
 810269a:	d001      	beq.n	81026a0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810269c:	f000 f918 	bl	81028d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81026a0:	2100      	movs	r1, #0
 81026a2:	480d      	ldr	r0, [pc, #52]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 81026a4:	f004 feac 	bl	8107400 <HAL_UARTEx_SetTxFifoThreshold>
 81026a8:	4603      	mov	r3, r0
 81026aa:	2b00      	cmp	r3, #0
 81026ac:	d001      	beq.n	81026b2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81026ae:	f000 f90f 	bl	81028d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81026b2:	2100      	movs	r1, #0
 81026b4:	4808      	ldr	r0, [pc, #32]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 81026b6:	f004 fee1 	bl	810747c <HAL_UARTEx_SetRxFifoThreshold>
 81026ba:	4603      	mov	r3, r0
 81026bc:	2b00      	cmp	r3, #0
 81026be:	d001      	beq.n	81026c4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81026c0:	f000 f906 	bl	81028d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81026c4:	4804      	ldr	r0, [pc, #16]	; (81026d8 <MX_USART3_UART_Init+0x90>)
 81026c6:	f004 fe62 	bl	810738e <HAL_UARTEx_DisableFifoMode>
 81026ca:	4603      	mov	r3, r0
 81026cc:	2b00      	cmp	r3, #0
 81026ce:	d001      	beq.n	81026d4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81026d0:	f000 f8fe 	bl	81028d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81026d4:	bf00      	nop
 81026d6:	bd80      	pop	{r7, pc}
 81026d8:	100002a8 	.word	0x100002a8
 81026dc:	40004800 	.word	0x40004800

081026e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81026e0:	b580      	push	{r7, lr}
 81026e2:	b08a      	sub	sp, #40	; 0x28
 81026e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81026e6:	f107 0314 	add.w	r3, r7, #20
 81026ea:	2200      	movs	r2, #0
 81026ec:	601a      	str	r2, [r3, #0]
 81026ee:	605a      	str	r2, [r3, #4]
 81026f0:	609a      	str	r2, [r3, #8]
 81026f2:	60da      	str	r2, [r3, #12]
 81026f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81026f6:	4b4e      	ldr	r3, [pc, #312]	; (8102830 <MX_GPIO_Init+0x150>)
 81026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026fc:	4a4c      	ldr	r2, [pc, #304]	; (8102830 <MX_GPIO_Init+0x150>)
 81026fe:	f043 0301 	orr.w	r3, r3, #1
 8102702:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102706:	4b4a      	ldr	r3, [pc, #296]	; (8102830 <MX_GPIO_Init+0x150>)
 8102708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810270c:	f003 0301 	and.w	r3, r3, #1
 8102710:	613b      	str	r3, [r7, #16]
 8102712:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102714:	4b46      	ldr	r3, [pc, #280]	; (8102830 <MX_GPIO_Init+0x150>)
 8102716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810271a:	4a45      	ldr	r2, [pc, #276]	; (8102830 <MX_GPIO_Init+0x150>)
 810271c:	f043 0310 	orr.w	r3, r3, #16
 8102720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102724:	4b42      	ldr	r3, [pc, #264]	; (8102830 <MX_GPIO_Init+0x150>)
 8102726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810272a:	f003 0310 	and.w	r3, r3, #16
 810272e:	60fb      	str	r3, [r7, #12]
 8102730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102732:	4b3f      	ldr	r3, [pc, #252]	; (8102830 <MX_GPIO_Init+0x150>)
 8102734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102738:	4a3d      	ldr	r2, [pc, #244]	; (8102830 <MX_GPIO_Init+0x150>)
 810273a:	f043 0308 	orr.w	r3, r3, #8
 810273e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102742:	4b3b      	ldr	r3, [pc, #236]	; (8102830 <MX_GPIO_Init+0x150>)
 8102744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102748:	f003 0308 	and.w	r3, r3, #8
 810274c:	60bb      	str	r3, [r7, #8]
 810274e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8102750:	4b37      	ldr	r3, [pc, #220]	; (8102830 <MX_GPIO_Init+0x150>)
 8102752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102756:	4a36      	ldr	r2, [pc, #216]	; (8102830 <MX_GPIO_Init+0x150>)
 8102758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810275c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102760:	4b33      	ldr	r3, [pc, #204]	; (8102830 <MX_GPIO_Init+0x150>)
 8102762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810276a:	607b      	str	r3, [r7, #4]
 810276c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 810276e:	4b30      	ldr	r3, [pc, #192]	; (8102830 <MX_GPIO_Init+0x150>)
 8102770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102774:	4a2e      	ldr	r2, [pc, #184]	; (8102830 <MX_GPIO_Init+0x150>)
 8102776:	f043 0302 	orr.w	r3, r3, #2
 810277a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810277e:	4b2c      	ldr	r3, [pc, #176]	; (8102830 <MX_GPIO_Init+0x150>)
 8102780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102784:	f003 0302 	and.w	r3, r3, #2
 8102788:	603b      	str	r3, [r7, #0]
 810278a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADE9000_Reset_Pin|ADE9000_PM1_Pin, GPIO_PIN_RESET);
 810278c:	2200      	movs	r2, #0
 810278e:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8102792:	4828      	ldr	r0, [pc, #160]	; (8102834 <MX_GPIO_Init+0x154>)
 8102794:	f000 fe6e 	bl	8103474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADE9000_CS_GPIO_Port, ADE9000_CS_Pin, GPIO_PIN_SET);
 8102798:	2201      	movs	r2, #1
 810279a:	f44f 7100 	mov.w	r1, #512	; 0x200
 810279e:	4826      	ldr	r0, [pc, #152]	; (8102838 <MX_GPIO_Init+0x158>)
 81027a0:	f000 fe68 	bl	8103474 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADE9000_Reset_Pin ADE9000_PM1_Pin */
  GPIO_InitStruct.Pin = ADE9000_Reset_Pin|ADE9000_PM1_Pin;
 81027a4:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 81027a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81027aa:	2301      	movs	r3, #1
 81027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027ae:	2300      	movs	r3, #0
 81027b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027b2:	2300      	movs	r3, #0
 81027b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81027b6:	f107 0314 	add.w	r3, r7, #20
 81027ba:	4619      	mov	r1, r3
 81027bc:	481d      	ldr	r0, [pc, #116]	; (8102834 <MX_GPIO_Init+0x154>)
 81027be:	f000 fca9 	bl	8103114 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ1_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ1_Pin;
 81027c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 81027c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 81027cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027ce:	2300      	movs	r3, #0
 81027d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ1_GPIO_Port, &GPIO_InitStruct);
 81027d2:	f107 0314 	add.w	r3, r7, #20
 81027d6:	4619      	mov	r1, r3
 81027d8:	4816      	ldr	r0, [pc, #88]	; (8102834 <MX_GPIO_Init+0x154>)
 81027da:	f000 fc9b 	bl	8103114 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_CS_Pin */
  GPIO_InitStruct.Pin = ADE9000_CS_Pin;
 81027de:	f44f 7300 	mov.w	r3, #512	; 0x200
 81027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81027e4:	2301      	movs	r3, #1
 81027e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027e8:	2300      	movs	r3, #0
 81027ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027ec:	2300      	movs	r3, #0
 81027ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADE9000_CS_GPIO_Port, &GPIO_InitStruct);
 81027f0:	f107 0314 	add.w	r3, r7, #20
 81027f4:	4619      	mov	r1, r3
 81027f6:	4810      	ldr	r0, [pc, #64]	; (8102838 <MX_GPIO_Init+0x158>)
 81027f8:	f000 fc8c 	bl	8103114 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ0_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ0_Pin;
 81027fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8102802:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8102806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102808:	2300      	movs	r3, #0
 810280a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ0_GPIO_Port, &GPIO_InitStruct);
 810280c:	f107 0314 	add.w	r3, r7, #20
 8102810:	4619      	mov	r1, r3
 8102812:	4809      	ldr	r0, [pc, #36]	; (8102838 <MX_GPIO_Init+0x158>)
 8102814:	f000 fc7e 	bl	8103114 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8102818:	2200      	movs	r2, #0
 810281a:	2100      	movs	r1, #0
 810281c:	2028      	movs	r0, #40	; 0x28
 810281e:	f000 fc30 	bl	8103082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8102822:	2028      	movs	r0, #40	; 0x28
 8102824:	f000 fc47 	bl	81030b6 <HAL_NVIC_EnableIRQ>

}
 8102828:	bf00      	nop
 810282a:	3728      	adds	r7, #40	; 0x28
 810282c:	46bd      	mov	sp, r7
 810282e:	bd80      	pop	{r7, pc}
 8102830:	58024400 	.word	0x58024400
 8102834:	58021000 	.word	0x58021000
 8102838:	58021800 	.word	0x58021800

0810283c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 810283c:	b580      	push	{r7, lr}
 810283e:	b082      	sub	sp, #8
 8102840:	af00      	add	r7, sp, #0
 8102842:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8102844:	1d39      	adds	r1, r7, #4
 8102846:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810284a:	2201      	movs	r2, #1
 810284c:	4803      	ldr	r0, [pc, #12]	; (810285c <__io_putchar+0x20>)
 810284e:	f003 fd1f 	bl	8106290 <HAL_UART_Transmit>
	return ch;
 8102852:	687b      	ldr	r3, [r7, #4]
}
 8102854:	4618      	mov	r0, r3
 8102856:	3708      	adds	r7, #8
 8102858:	46bd      	mov	sp, r7
 810285a:	bd80      	pop	{r7, pc}
 810285c:	100002a8 	.word	0x100002a8

08102860 <__io_getchar>:

int __io_getchar(void)
{
 8102860:	b580      	push	{r7, lr}
 8102862:	b082      	sub	sp, #8
 8102864:	af00      	add	r7, sp, #0

	uint8_t ch;
	// Clear the Overrun flag just before receiving the first character
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8102866:	4b0b      	ldr	r3, [pc, #44]	; (8102894 <__io_getchar+0x34>)
 8102868:	681b      	ldr	r3, [r3, #0]
 810286a:	2208      	movs	r2, #8
 810286c:	621a      	str	r2, [r3, #32]

	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 810286e:	1df9      	adds	r1, r7, #7
 8102870:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8102874:	2201      	movs	r2, #1
 8102876:	4807      	ldr	r0, [pc, #28]	; (8102894 <__io_getchar+0x34>)
 8102878:	f003 fda0 	bl	81063bc <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 810287c:	1df9      	adds	r1, r7, #7
 810287e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8102882:	2201      	movs	r2, #1
 8102884:	4803      	ldr	r0, [pc, #12]	; (8102894 <__io_getchar+0x34>)
 8102886:	f003 fd03 	bl	8106290 <HAL_UART_Transmit>

	return ch;
 810288a:	79fb      	ldrb	r3, [r7, #7]
}
 810288c:	4618      	mov	r0, r3
 810288e:	3708      	adds	r7, #8
 8102890:	46bd      	mov	sp, r7
 8102892:	bd80      	pop	{r7, pc}
 8102894:	100002a8 	.word	0x100002a8

08102898 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8102898:	b480      	push	{r7}
 810289a:	b083      	sub	sp, #12
 810289c:	af00      	add	r7, sp, #0
 810289e:	4603      	mov	r3, r0
 81028a0:	80fb      	strh	r3, [r7, #6]
	// If the interrupt source is pin IRQ0
	if (GPIO_Pin == ADE9000_IRQ0_Pin)
 81028a2:	88fb      	ldrh	r3, [r7, #6]
 81028a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81028a8:	d107      	bne.n	81028ba <HAL_GPIO_EXTI_Callback+0x22>
	{
		//printf("IRQ0s\r\n");
		flag_read = 1;
 81028aa:	4b07      	ldr	r3, [pc, #28]	; (81028c8 <HAL_GPIO_EXTI_Callback+0x30>)
 81028ac:	2201      	movs	r2, #1
 81028ae:	701a      	strb	r2, [r3, #0]
		n_int ++;
 81028b0:	4b06      	ldr	r3, [pc, #24]	; (81028cc <HAL_GPIO_EXTI_Callback+0x34>)
 81028b2:	681b      	ldr	r3, [r3, #0]
 81028b4:	3301      	adds	r3, #1
 81028b6:	4a05      	ldr	r2, [pc, #20]	; (81028cc <HAL_GPIO_EXTI_Callback+0x34>)
 81028b8:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == ADE9000_IRQ1_Pin)
		{
			//printf("IRQ1\r\n");
		}
}
 81028ba:	bf00      	nop
 81028bc:	370c      	adds	r7, #12
 81028be:	46bd      	mov	sp, r7
 81028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028c4:	4770      	bx	lr
 81028c6:	bf00      	nop
 81028c8:	10000254 	.word	0x10000254
 81028cc:	10000258 	.word	0x10000258

081028d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81028d0:	b480      	push	{r7}
 81028d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81028d4:	b672      	cpsid	i
}
 81028d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81028d8:	e7fe      	b.n	81028d8 <Error_Handler+0x8>
	...

081028dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81028dc:	b480      	push	{r7}
 81028de:	b083      	sub	sp, #12
 81028e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81028e2:	4b0a      	ldr	r3, [pc, #40]	; (810290c <HAL_MspInit+0x30>)
 81028e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81028e8:	4a08      	ldr	r2, [pc, #32]	; (810290c <HAL_MspInit+0x30>)
 81028ea:	f043 0302 	orr.w	r3, r3, #2
 81028ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81028f2:	4b06      	ldr	r3, [pc, #24]	; (810290c <HAL_MspInit+0x30>)
 81028f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81028f8:	f003 0302 	and.w	r3, r3, #2
 81028fc:	607b      	str	r3, [r7, #4]
 81028fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102900:	bf00      	nop
 8102902:	370c      	adds	r7, #12
 8102904:	46bd      	mov	sp, r7
 8102906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810290a:	4770      	bx	lr
 810290c:	58024400 	.word	0x58024400

08102910 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8102910:	b580      	push	{r7, lr}
 8102912:	b08a      	sub	sp, #40	; 0x28
 8102914:	af00      	add	r7, sp, #0
 8102916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102918:	f107 0314 	add.w	r3, r7, #20
 810291c:	2200      	movs	r2, #0
 810291e:	601a      	str	r2, [r3, #0]
 8102920:	605a      	str	r2, [r3, #4]
 8102922:	609a      	str	r2, [r3, #8]
 8102924:	60da      	str	r2, [r3, #12]
 8102926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8102928:	687b      	ldr	r3, [r7, #4]
 810292a:	681b      	ldr	r3, [r3, #0]
 810292c:	4a31      	ldr	r2, [pc, #196]	; (81029f4 <HAL_SPI_MspInit+0xe4>)
 810292e:	4293      	cmp	r3, r2
 8102930:	d15c      	bne.n	81029ec <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102932:	4b31      	ldr	r3, [pc, #196]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 8102934:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102938:	4a2f      	ldr	r2, [pc, #188]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 810293a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 810293e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102942:	4b2d      	ldr	r3, [pc, #180]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 8102944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810294c:	613b      	str	r3, [r7, #16]
 810294e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102950:	4b29      	ldr	r3, [pc, #164]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 8102952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102956:	4a28      	ldr	r2, [pc, #160]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 8102958:	f043 0301 	orr.w	r3, r3, #1
 810295c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102960:	4b25      	ldr	r3, [pc, #148]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 8102962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102966:	f003 0301 	and.w	r3, r3, #1
 810296a:	60fb      	str	r3, [r7, #12]
 810296c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810296e:	4b22      	ldr	r3, [pc, #136]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 8102970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102974:	4a20      	ldr	r2, [pc, #128]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 8102976:	f043 0302 	orr.w	r3, r3, #2
 810297a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810297e:	4b1e      	ldr	r3, [pc, #120]	; (81029f8 <HAL_SPI_MspInit+0xe8>)
 8102980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102984:	f003 0302 	and.w	r3, r3, #2
 8102988:	60bb      	str	r3, [r7, #8]
 810298a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 810298c:	2320      	movs	r3, #32
 810298e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102990:	2302      	movs	r3, #2
 8102992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8102994:	2302      	movs	r3, #2
 8102996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102998:	2303      	movs	r3, #3
 810299a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 810299c:	2305      	movs	r3, #5
 810299e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81029a0:	f107 0314 	add.w	r3, r7, #20
 81029a4:	4619      	mov	r1, r3
 81029a6:	4815      	ldr	r0, [pc, #84]	; (81029fc <HAL_SPI_MspInit+0xec>)
 81029a8:	f000 fbb4 	bl	8103114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81029ac:	2340      	movs	r3, #64	; 0x40
 81029ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81029b0:	2302      	movs	r3, #2
 81029b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029b4:	2300      	movs	r3, #0
 81029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81029b8:	2303      	movs	r3, #3
 81029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81029bc:	2305      	movs	r3, #5
 81029be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81029c0:	f107 0314 	add.w	r3, r7, #20
 81029c4:	4619      	mov	r1, r3
 81029c6:	480d      	ldr	r0, [pc, #52]	; (81029fc <HAL_SPI_MspInit+0xec>)
 81029c8:	f000 fba4 	bl	8103114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 81029cc:	2320      	movs	r3, #32
 81029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81029d0:	2302      	movs	r3, #2
 81029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81029d4:	2300      	movs	r3, #0
 81029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81029d8:	2303      	movs	r3, #3
 81029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81029dc:	2305      	movs	r3, #5
 81029de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81029e0:	f107 0314 	add.w	r3, r7, #20
 81029e4:	4619      	mov	r1, r3
 81029e6:	4806      	ldr	r0, [pc, #24]	; (8102a00 <HAL_SPI_MspInit+0xf0>)
 81029e8:	f000 fb94 	bl	8103114 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 81029ec:	bf00      	nop
 81029ee:	3728      	adds	r7, #40	; 0x28
 81029f0:	46bd      	mov	sp, r7
 81029f2:	bd80      	pop	{r7, pc}
 81029f4:	40013000 	.word	0x40013000
 81029f8:	58024400 	.word	0x58024400
 81029fc:	58020000 	.word	0x58020000
 8102a00:	58020400 	.word	0x58020400

08102a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102a04:	b580      	push	{r7, lr}
 8102a06:	b0b8      	sub	sp, #224	; 0xe0
 8102a08:	af00      	add	r7, sp, #0
 8102a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a0c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102a10:	2200      	movs	r2, #0
 8102a12:	601a      	str	r2, [r3, #0]
 8102a14:	605a      	str	r2, [r3, #4]
 8102a16:	609a      	str	r2, [r3, #8]
 8102a18:	60da      	str	r2, [r3, #12]
 8102a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102a1c:	f107 0310 	add.w	r3, r7, #16
 8102a20:	22bc      	movs	r2, #188	; 0xbc
 8102a22:	2100      	movs	r1, #0
 8102a24:	4618      	mov	r0, r3
 8102a26:	f004 ffab 	bl	8107980 <memset>
  if(huart->Instance==USART3)
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	4a25      	ldr	r2, [pc, #148]	; (8102ac4 <HAL_UART_MspInit+0xc0>)
 8102a30:	4293      	cmp	r3, r2
 8102a32:	d142      	bne.n	8102aba <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102a34:	2302      	movs	r3, #2
 8102a36:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8102a38:	2300      	movs	r3, #0
 8102a3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102a3e:	f107 0310 	add.w	r3, r7, #16
 8102a42:	4618      	mov	r0, r3
 8102a44:	f000 ffbc 	bl	81039c0 <HAL_RCCEx_PeriphCLKConfig>
 8102a48:	4603      	mov	r3, r0
 8102a4a:	2b00      	cmp	r3, #0
 8102a4c:	d001      	beq.n	8102a52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8102a4e:	f7ff ff3f 	bl	81028d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102a52:	4b1d      	ldr	r3, [pc, #116]	; (8102ac8 <HAL_UART_MspInit+0xc4>)
 8102a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a58:	4a1b      	ldr	r2, [pc, #108]	; (8102ac8 <HAL_UART_MspInit+0xc4>)
 8102a5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102a5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102a62:	4b19      	ldr	r3, [pc, #100]	; (8102ac8 <HAL_UART_MspInit+0xc4>)
 8102a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102a68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102a6c:	60fb      	str	r3, [r7, #12]
 8102a6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102a70:	4b15      	ldr	r3, [pc, #84]	; (8102ac8 <HAL_UART_MspInit+0xc4>)
 8102a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a76:	4a14      	ldr	r2, [pc, #80]	; (8102ac8 <HAL_UART_MspInit+0xc4>)
 8102a78:	f043 0308 	orr.w	r3, r3, #8
 8102a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102a80:	4b11      	ldr	r3, [pc, #68]	; (8102ac8 <HAL_UART_MspInit+0xc4>)
 8102a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a86:	f003 0308 	and.w	r3, r3, #8
 8102a8a:	60bb      	str	r3, [r7, #8]
 8102a8c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102a8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102a92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102a96:	2302      	movs	r3, #2
 8102a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102a9c:	2300      	movs	r3, #0
 8102a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102aa2:	2300      	movs	r3, #0
 8102aa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8102aa8:	2307      	movs	r3, #7
 8102aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102aae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102ab2:	4619      	mov	r1, r3
 8102ab4:	4805      	ldr	r0, [pc, #20]	; (8102acc <HAL_UART_MspInit+0xc8>)
 8102ab6:	f000 fb2d 	bl	8103114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8102aba:	bf00      	nop
 8102abc:	37e0      	adds	r7, #224	; 0xe0
 8102abe:	46bd      	mov	sp, r7
 8102ac0:	bd80      	pop	{r7, pc}
 8102ac2:	bf00      	nop
 8102ac4:	40004800 	.word	0x40004800
 8102ac8:	58024400 	.word	0x58024400
 8102acc:	58020c00 	.word	0x58020c00

08102ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102ad0:	b480      	push	{r7}
 8102ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102ad4:	e7fe      	b.n	8102ad4 <NMI_Handler+0x4>

08102ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102ad6:	b480      	push	{r7}
 8102ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102ada:	e7fe      	b.n	8102ada <HardFault_Handler+0x4>

08102adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102adc:	b480      	push	{r7}
 8102ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102ae0:	e7fe      	b.n	8102ae0 <MemManage_Handler+0x4>

08102ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102ae2:	b480      	push	{r7}
 8102ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102ae6:	e7fe      	b.n	8102ae6 <BusFault_Handler+0x4>

08102ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102ae8:	b480      	push	{r7}
 8102aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102aec:	e7fe      	b.n	8102aec <UsageFault_Handler+0x4>

08102aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102aee:	b480      	push	{r7}
 8102af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102af2:	bf00      	nop
 8102af4:	46bd      	mov	sp, r7
 8102af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102afa:	4770      	bx	lr

08102afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102afc:	b480      	push	{r7}
 8102afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102b00:	bf00      	nop
 8102b02:	46bd      	mov	sp, r7
 8102b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b08:	4770      	bx	lr

08102b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102b0a:	b480      	push	{r7}
 8102b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102b0e:	bf00      	nop
 8102b10:	46bd      	mov	sp, r7
 8102b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b16:	4770      	bx	lr

08102b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102b18:	b580      	push	{r7, lr}
 8102b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102b1c:	f000 f992 	bl	8102e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102b20:	bf00      	nop
 8102b22:	bd80      	pop	{r7, pc}

08102b24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8102b24:	b580      	push	{r7, lr}
 8102b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADE9000_IRQ1_Pin);
 8102b28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8102b2c:	f000 fcbb 	bl	81034a6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADE9000_PM1_Pin);
 8102b30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8102b34:	f000 fcb7 	bl	81034a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8102b38:	bf00      	nop
 8102b3a:	bd80      	pop	{r7, pc}

08102b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102b3c:	b480      	push	{r7}
 8102b3e:	af00      	add	r7, sp, #0
	return 1;
 8102b40:	2301      	movs	r3, #1
}
 8102b42:	4618      	mov	r0, r3
 8102b44:	46bd      	mov	sp, r7
 8102b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b4a:	4770      	bx	lr

08102b4c <_kill>:

int _kill(int pid, int sig)
{
 8102b4c:	b580      	push	{r7, lr}
 8102b4e:	b082      	sub	sp, #8
 8102b50:	af00      	add	r7, sp, #0
 8102b52:	6078      	str	r0, [r7, #4]
 8102b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8102b56:	f004 fd1d 	bl	8107594 <__errno>
 8102b5a:	4603      	mov	r3, r0
 8102b5c:	2216      	movs	r2, #22
 8102b5e:	601a      	str	r2, [r3, #0]
	return -1;
 8102b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102b64:	4618      	mov	r0, r3
 8102b66:	3708      	adds	r7, #8
 8102b68:	46bd      	mov	sp, r7
 8102b6a:	bd80      	pop	{r7, pc}

08102b6c <_exit>:

void _exit (int status)
{
 8102b6c:	b580      	push	{r7, lr}
 8102b6e:	b082      	sub	sp, #8
 8102b70:	af00      	add	r7, sp, #0
 8102b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8102b74:	f04f 31ff 	mov.w	r1, #4294967295
 8102b78:	6878      	ldr	r0, [r7, #4]
 8102b7a:	f7ff ffe7 	bl	8102b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8102b7e:	e7fe      	b.n	8102b7e <_exit+0x12>

08102b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102b80:	b580      	push	{r7, lr}
 8102b82:	b086      	sub	sp, #24
 8102b84:	af00      	add	r7, sp, #0
 8102b86:	60f8      	str	r0, [r7, #12]
 8102b88:	60b9      	str	r1, [r7, #8]
 8102b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102b8c:	2300      	movs	r3, #0
 8102b8e:	617b      	str	r3, [r7, #20]
 8102b90:	e00a      	b.n	8102ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8102b92:	f7ff fe65 	bl	8102860 <__io_getchar>
 8102b96:	4601      	mov	r1, r0
 8102b98:	68bb      	ldr	r3, [r7, #8]
 8102b9a:	1c5a      	adds	r2, r3, #1
 8102b9c:	60ba      	str	r2, [r7, #8]
 8102b9e:	b2ca      	uxtb	r2, r1
 8102ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102ba2:	697b      	ldr	r3, [r7, #20]
 8102ba4:	3301      	adds	r3, #1
 8102ba6:	617b      	str	r3, [r7, #20]
 8102ba8:	697a      	ldr	r2, [r7, #20]
 8102baa:	687b      	ldr	r3, [r7, #4]
 8102bac:	429a      	cmp	r2, r3
 8102bae:	dbf0      	blt.n	8102b92 <_read+0x12>
	}

return len;
 8102bb0:	687b      	ldr	r3, [r7, #4]
}
 8102bb2:	4618      	mov	r0, r3
 8102bb4:	3718      	adds	r7, #24
 8102bb6:	46bd      	mov	sp, r7
 8102bb8:	bd80      	pop	{r7, pc}

08102bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8102bba:	b580      	push	{r7, lr}
 8102bbc:	b086      	sub	sp, #24
 8102bbe:	af00      	add	r7, sp, #0
 8102bc0:	60f8      	str	r0, [r7, #12]
 8102bc2:	60b9      	str	r1, [r7, #8]
 8102bc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102bc6:	2300      	movs	r3, #0
 8102bc8:	617b      	str	r3, [r7, #20]
 8102bca:	e009      	b.n	8102be0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8102bcc:	68bb      	ldr	r3, [r7, #8]
 8102bce:	1c5a      	adds	r2, r3, #1
 8102bd0:	60ba      	str	r2, [r7, #8]
 8102bd2:	781b      	ldrb	r3, [r3, #0]
 8102bd4:	4618      	mov	r0, r3
 8102bd6:	f7ff fe31 	bl	810283c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102bda:	697b      	ldr	r3, [r7, #20]
 8102bdc:	3301      	adds	r3, #1
 8102bde:	617b      	str	r3, [r7, #20]
 8102be0:	697a      	ldr	r2, [r7, #20]
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	429a      	cmp	r2, r3
 8102be6:	dbf1      	blt.n	8102bcc <_write+0x12>
	}
	return len;
 8102be8:	687b      	ldr	r3, [r7, #4]
}
 8102bea:	4618      	mov	r0, r3
 8102bec:	3718      	adds	r7, #24
 8102bee:	46bd      	mov	sp, r7
 8102bf0:	bd80      	pop	{r7, pc}

08102bf2 <_close>:

int _close(int file)
{
 8102bf2:	b480      	push	{r7}
 8102bf4:	b083      	sub	sp, #12
 8102bf6:	af00      	add	r7, sp, #0
 8102bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8102bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102bfe:	4618      	mov	r0, r3
 8102c00:	370c      	adds	r7, #12
 8102c02:	46bd      	mov	sp, r7
 8102c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c08:	4770      	bx	lr

08102c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8102c0a:	b480      	push	{r7}
 8102c0c:	b083      	sub	sp, #12
 8102c0e:	af00      	add	r7, sp, #0
 8102c10:	6078      	str	r0, [r7, #4]
 8102c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8102c14:	683b      	ldr	r3, [r7, #0]
 8102c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8102c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8102c1c:	2300      	movs	r3, #0
}
 8102c1e:	4618      	mov	r0, r3
 8102c20:	370c      	adds	r7, #12
 8102c22:	46bd      	mov	sp, r7
 8102c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c28:	4770      	bx	lr

08102c2a <_isatty>:

int _isatty(int file)
{
 8102c2a:	b480      	push	{r7}
 8102c2c:	b083      	sub	sp, #12
 8102c2e:	af00      	add	r7, sp, #0
 8102c30:	6078      	str	r0, [r7, #4]
	return 1;
 8102c32:	2301      	movs	r3, #1
}
 8102c34:	4618      	mov	r0, r3
 8102c36:	370c      	adds	r7, #12
 8102c38:	46bd      	mov	sp, r7
 8102c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c3e:	4770      	bx	lr

08102c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102c40:	b480      	push	{r7}
 8102c42:	b085      	sub	sp, #20
 8102c44:	af00      	add	r7, sp, #0
 8102c46:	60f8      	str	r0, [r7, #12]
 8102c48:	60b9      	str	r1, [r7, #8]
 8102c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8102c4c:	2300      	movs	r3, #0
}
 8102c4e:	4618      	mov	r0, r3
 8102c50:	3714      	adds	r7, #20
 8102c52:	46bd      	mov	sp, r7
 8102c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c58:	4770      	bx	lr
	...

08102c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102c5c:	b580      	push	{r7, lr}
 8102c5e:	b086      	sub	sp, #24
 8102c60:	af00      	add	r7, sp, #0
 8102c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102c64:	4a14      	ldr	r2, [pc, #80]	; (8102cb8 <_sbrk+0x5c>)
 8102c66:	4b15      	ldr	r3, [pc, #84]	; (8102cbc <_sbrk+0x60>)
 8102c68:	1ad3      	subs	r3, r2, r3
 8102c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102c6c:	697b      	ldr	r3, [r7, #20]
 8102c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102c70:	4b13      	ldr	r3, [pc, #76]	; (8102cc0 <_sbrk+0x64>)
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	2b00      	cmp	r3, #0
 8102c76:	d102      	bne.n	8102c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8102c78:	4b11      	ldr	r3, [pc, #68]	; (8102cc0 <_sbrk+0x64>)
 8102c7a:	4a12      	ldr	r2, [pc, #72]	; (8102cc4 <_sbrk+0x68>)
 8102c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102c7e:	4b10      	ldr	r3, [pc, #64]	; (8102cc0 <_sbrk+0x64>)
 8102c80:	681a      	ldr	r2, [r3, #0]
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	4413      	add	r3, r2
 8102c86:	693a      	ldr	r2, [r7, #16]
 8102c88:	429a      	cmp	r2, r3
 8102c8a:	d207      	bcs.n	8102c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102c8c:	f004 fc82 	bl	8107594 <__errno>
 8102c90:	4603      	mov	r3, r0
 8102c92:	220c      	movs	r2, #12
 8102c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8102c96:	f04f 33ff 	mov.w	r3, #4294967295
 8102c9a:	e009      	b.n	8102cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8102c9c:	4b08      	ldr	r3, [pc, #32]	; (8102cc0 <_sbrk+0x64>)
 8102c9e:	681b      	ldr	r3, [r3, #0]
 8102ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8102ca2:	4b07      	ldr	r3, [pc, #28]	; (8102cc0 <_sbrk+0x64>)
 8102ca4:	681a      	ldr	r2, [r3, #0]
 8102ca6:	687b      	ldr	r3, [r7, #4]
 8102ca8:	4413      	add	r3, r2
 8102caa:	4a05      	ldr	r2, [pc, #20]	; (8102cc0 <_sbrk+0x64>)
 8102cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8102cae:	68fb      	ldr	r3, [r7, #12]
}
 8102cb0:	4618      	mov	r0, r3
 8102cb2:	3718      	adds	r7, #24
 8102cb4:	46bd      	mov	sp, r7
 8102cb6:	bd80      	pop	{r7, pc}
 8102cb8:	10048000 	.word	0x10048000
 8102cbc:	00000400 	.word	0x00000400
 8102cc0:	1000025c 	.word	0x1000025c
 8102cc4:	10000490 	.word	0x10000490

08102cc8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 8102cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102d00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8102ccc:	f7fe fb70 	bl	81013b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102cd0:	480c      	ldr	r0, [pc, #48]	; (8102d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102cd2:	490d      	ldr	r1, [pc, #52]	; (8102d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102cd4:	4a0d      	ldr	r2, [pc, #52]	; (8102d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102cd8:	e002      	b.n	8102ce0 <LoopCopyDataInit>

08102cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102cde:	3304      	adds	r3, #4

08102ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102ce4:	d3f9      	bcc.n	8102cda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102ce6:	4a0a      	ldr	r2, [pc, #40]	; (8102d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102ce8:	4c0a      	ldr	r4, [pc, #40]	; (8102d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8102cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102cec:	e001      	b.n	8102cf2 <LoopFillZerobss>

08102cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102cf0:	3204      	adds	r2, #4

08102cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102cf4:	d3fb      	bcc.n	8102cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102cf6:	f004 fe0b 	bl	8107910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102cfa:	f7ff fb31 	bl	8102360 <main>
  bx  lr
 8102cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102d00:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102d04:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102d08:	10000238 	.word	0x10000238
  ldr r2, =_sidata
 8102d0c:	0810e820 	.word	0x0810e820
  ldr r2, =_sbss
 8102d10:	10000238 	.word	0x10000238
  ldr r4, =_ebss
 8102d14:	10000490 	.word	0x10000490

08102d18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102d18:	e7fe      	b.n	8102d18 <ADC3_IRQHandler>
	...

08102d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102d1c:	b580      	push	{r7, lr}
 8102d1e:	b082      	sub	sp, #8
 8102d20:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102d22:	4b28      	ldr	r3, [pc, #160]	; (8102dc4 <HAL_Init+0xa8>)
 8102d24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102d28:	4a26      	ldr	r2, [pc, #152]	; (8102dc4 <HAL_Init+0xa8>)
 8102d2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102d2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102d32:	4b24      	ldr	r3, [pc, #144]	; (8102dc4 <HAL_Init+0xa8>)
 8102d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102d3c:	603b      	str	r3, [r7, #0]
 8102d3e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102d40:	4b21      	ldr	r3, [pc, #132]	; (8102dc8 <HAL_Init+0xac>)
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102d48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102d4c:	4a1e      	ldr	r2, [pc, #120]	; (8102dc8 <HAL_Init+0xac>)
 8102d4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102d52:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102d54:	4b1c      	ldr	r3, [pc, #112]	; (8102dc8 <HAL_Init+0xac>)
 8102d56:	681b      	ldr	r3, [r3, #0]
 8102d58:	4a1b      	ldr	r2, [pc, #108]	; (8102dc8 <HAL_Init+0xac>)
 8102d5a:	f043 0301 	orr.w	r3, r3, #1
 8102d5e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102d60:	2003      	movs	r0, #3
 8102d62:	f000 f983 	bl	810306c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102d66:	f000 fc53 	bl	8103610 <HAL_RCC_GetSysClockFreq>
 8102d6a:	4602      	mov	r2, r0
 8102d6c:	4b15      	ldr	r3, [pc, #84]	; (8102dc4 <HAL_Init+0xa8>)
 8102d6e:	699b      	ldr	r3, [r3, #24]
 8102d70:	0a1b      	lsrs	r3, r3, #8
 8102d72:	f003 030f 	and.w	r3, r3, #15
 8102d76:	4915      	ldr	r1, [pc, #84]	; (8102dcc <HAL_Init+0xb0>)
 8102d78:	5ccb      	ldrb	r3, [r1, r3]
 8102d7a:	f003 031f 	and.w	r3, r3, #31
 8102d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8102d82:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102d84:	4b0f      	ldr	r3, [pc, #60]	; (8102dc4 <HAL_Init+0xa8>)
 8102d86:	699b      	ldr	r3, [r3, #24]
 8102d88:	f003 030f 	and.w	r3, r3, #15
 8102d8c:	4a0f      	ldr	r2, [pc, #60]	; (8102dcc <HAL_Init+0xb0>)
 8102d8e:	5cd3      	ldrb	r3, [r2, r3]
 8102d90:	f003 031f 	and.w	r3, r3, #31
 8102d94:	687a      	ldr	r2, [r7, #4]
 8102d96:	fa22 f303 	lsr.w	r3, r2, r3
 8102d9a:	4a0d      	ldr	r2, [pc, #52]	; (8102dd0 <HAL_Init+0xb4>)
 8102d9c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102d9e:	4b0c      	ldr	r3, [pc, #48]	; (8102dd0 <HAL_Init+0xb4>)
 8102da0:	681b      	ldr	r3, [r3, #0]
 8102da2:	4a0c      	ldr	r2, [pc, #48]	; (8102dd4 <HAL_Init+0xb8>)
 8102da4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102da6:	2000      	movs	r0, #0
 8102da8:	f000 f816 	bl	8102dd8 <HAL_InitTick>
 8102dac:	4603      	mov	r3, r0
 8102dae:	2b00      	cmp	r3, #0
 8102db0:	d001      	beq.n	8102db6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102db2:	2301      	movs	r3, #1
 8102db4:	e002      	b.n	8102dbc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102db6:	f7ff fd91 	bl	81028dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102dba:	2300      	movs	r3, #0
}
 8102dbc:	4618      	mov	r0, r3
 8102dbe:	3708      	adds	r7, #8
 8102dc0:	46bd      	mov	sp, r7
 8102dc2:	bd80      	pop	{r7, pc}
 8102dc4:	58024400 	.word	0x58024400
 8102dc8:	40024400 	.word	0x40024400
 8102dcc:	0810e108 	.word	0x0810e108
 8102dd0:	10000004 	.word	0x10000004
 8102dd4:	10000000 	.word	0x10000000

08102dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102dd8:	b580      	push	{r7, lr}
 8102dda:	b082      	sub	sp, #8
 8102ddc:	af00      	add	r7, sp, #0
 8102dde:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102de0:	4b15      	ldr	r3, [pc, #84]	; (8102e38 <HAL_InitTick+0x60>)
 8102de2:	781b      	ldrb	r3, [r3, #0]
 8102de4:	2b00      	cmp	r3, #0
 8102de6:	d101      	bne.n	8102dec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102de8:	2301      	movs	r3, #1
 8102dea:	e021      	b.n	8102e30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102dec:	4b13      	ldr	r3, [pc, #76]	; (8102e3c <HAL_InitTick+0x64>)
 8102dee:	681a      	ldr	r2, [r3, #0]
 8102df0:	4b11      	ldr	r3, [pc, #68]	; (8102e38 <HAL_InitTick+0x60>)
 8102df2:	781b      	ldrb	r3, [r3, #0]
 8102df4:	4619      	mov	r1, r3
 8102df6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8102dfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8102dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8102e02:	4618      	mov	r0, r3
 8102e04:	f000 f965 	bl	81030d2 <HAL_SYSTICK_Config>
 8102e08:	4603      	mov	r3, r0
 8102e0a:	2b00      	cmp	r3, #0
 8102e0c:	d001      	beq.n	8102e12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102e0e:	2301      	movs	r3, #1
 8102e10:	e00e      	b.n	8102e30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	2b0f      	cmp	r3, #15
 8102e16:	d80a      	bhi.n	8102e2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102e18:	2200      	movs	r2, #0
 8102e1a:	6879      	ldr	r1, [r7, #4]
 8102e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8102e20:	f000 f92f 	bl	8103082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102e24:	4a06      	ldr	r2, [pc, #24]	; (8102e40 <HAL_InitTick+0x68>)
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102e2a:	2300      	movs	r3, #0
 8102e2c:	e000      	b.n	8102e30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102e2e:	2301      	movs	r3, #1
}
 8102e30:	4618      	mov	r0, r3
 8102e32:	3708      	adds	r7, #8
 8102e34:	46bd      	mov	sp, r7
 8102e36:	bd80      	pop	{r7, pc}
 8102e38:	1000005c 	.word	0x1000005c
 8102e3c:	10000000 	.word	0x10000000
 8102e40:	10000058 	.word	0x10000058

08102e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102e44:	b480      	push	{r7}
 8102e46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102e48:	4b06      	ldr	r3, [pc, #24]	; (8102e64 <HAL_IncTick+0x20>)
 8102e4a:	781b      	ldrb	r3, [r3, #0]
 8102e4c:	461a      	mov	r2, r3
 8102e4e:	4b06      	ldr	r3, [pc, #24]	; (8102e68 <HAL_IncTick+0x24>)
 8102e50:	681b      	ldr	r3, [r3, #0]
 8102e52:	4413      	add	r3, r2
 8102e54:	4a04      	ldr	r2, [pc, #16]	; (8102e68 <HAL_IncTick+0x24>)
 8102e56:	6013      	str	r3, [r2, #0]
}
 8102e58:	bf00      	nop
 8102e5a:	46bd      	mov	sp, r7
 8102e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e60:	4770      	bx	lr
 8102e62:	bf00      	nop
 8102e64:	1000005c 	.word	0x1000005c
 8102e68:	1000047c 	.word	0x1000047c

08102e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102e6c:	b480      	push	{r7}
 8102e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8102e70:	4b03      	ldr	r3, [pc, #12]	; (8102e80 <HAL_GetTick+0x14>)
 8102e72:	681b      	ldr	r3, [r3, #0]
}
 8102e74:	4618      	mov	r0, r3
 8102e76:	46bd      	mov	sp, r7
 8102e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e7c:	4770      	bx	lr
 8102e7e:	bf00      	nop
 8102e80:	1000047c 	.word	0x1000047c

08102e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102e84:	b580      	push	{r7, lr}
 8102e86:	b084      	sub	sp, #16
 8102e88:	af00      	add	r7, sp, #0
 8102e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102e8c:	f7ff ffee 	bl	8102e6c <HAL_GetTick>
 8102e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102e96:	68fb      	ldr	r3, [r7, #12]
 8102e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102e9c:	d005      	beq.n	8102eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102e9e:	4b0a      	ldr	r3, [pc, #40]	; (8102ec8 <HAL_Delay+0x44>)
 8102ea0:	781b      	ldrb	r3, [r3, #0]
 8102ea2:	461a      	mov	r2, r3
 8102ea4:	68fb      	ldr	r3, [r7, #12]
 8102ea6:	4413      	add	r3, r2
 8102ea8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102eaa:	bf00      	nop
 8102eac:	f7ff ffde 	bl	8102e6c <HAL_GetTick>
 8102eb0:	4602      	mov	r2, r0
 8102eb2:	68bb      	ldr	r3, [r7, #8]
 8102eb4:	1ad3      	subs	r3, r2, r3
 8102eb6:	68fa      	ldr	r2, [r7, #12]
 8102eb8:	429a      	cmp	r2, r3
 8102eba:	d8f7      	bhi.n	8102eac <HAL_Delay+0x28>
  {
  }
}
 8102ebc:	bf00      	nop
 8102ebe:	bf00      	nop
 8102ec0:	3710      	adds	r7, #16
 8102ec2:	46bd      	mov	sp, r7
 8102ec4:	bd80      	pop	{r7, pc}
 8102ec6:	bf00      	nop
 8102ec8:	1000005c 	.word	0x1000005c

08102ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102ecc:	b480      	push	{r7}
 8102ece:	b085      	sub	sp, #20
 8102ed0:	af00      	add	r7, sp, #0
 8102ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102ed4:	687b      	ldr	r3, [r7, #4]
 8102ed6:	f003 0307 	and.w	r3, r3, #7
 8102eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102edc:	4b0c      	ldr	r3, [pc, #48]	; (8102f10 <__NVIC_SetPriorityGrouping+0x44>)
 8102ede:	68db      	ldr	r3, [r3, #12]
 8102ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102ee2:	68ba      	ldr	r2, [r7, #8]
 8102ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102ee8:	4013      	ands	r3, r2
 8102eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102eec:	68fb      	ldr	r3, [r7, #12]
 8102eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102ef0:	68bb      	ldr	r3, [r7, #8]
 8102ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102efe:	4a04      	ldr	r2, [pc, #16]	; (8102f10 <__NVIC_SetPriorityGrouping+0x44>)
 8102f00:	68bb      	ldr	r3, [r7, #8]
 8102f02:	60d3      	str	r3, [r2, #12]
}
 8102f04:	bf00      	nop
 8102f06:	3714      	adds	r7, #20
 8102f08:	46bd      	mov	sp, r7
 8102f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f0e:	4770      	bx	lr
 8102f10:	e000ed00 	.word	0xe000ed00

08102f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102f14:	b480      	push	{r7}
 8102f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102f18:	4b04      	ldr	r3, [pc, #16]	; (8102f2c <__NVIC_GetPriorityGrouping+0x18>)
 8102f1a:	68db      	ldr	r3, [r3, #12]
 8102f1c:	0a1b      	lsrs	r3, r3, #8
 8102f1e:	f003 0307 	and.w	r3, r3, #7
}
 8102f22:	4618      	mov	r0, r3
 8102f24:	46bd      	mov	sp, r7
 8102f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f2a:	4770      	bx	lr
 8102f2c:	e000ed00 	.word	0xe000ed00

08102f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102f30:	b480      	push	{r7}
 8102f32:	b083      	sub	sp, #12
 8102f34:	af00      	add	r7, sp, #0
 8102f36:	4603      	mov	r3, r0
 8102f38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f3e:	2b00      	cmp	r3, #0
 8102f40:	db0b      	blt.n	8102f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102f42:	88fb      	ldrh	r3, [r7, #6]
 8102f44:	f003 021f 	and.w	r2, r3, #31
 8102f48:	4907      	ldr	r1, [pc, #28]	; (8102f68 <__NVIC_EnableIRQ+0x38>)
 8102f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f4e:	095b      	lsrs	r3, r3, #5
 8102f50:	2001      	movs	r0, #1
 8102f52:	fa00 f202 	lsl.w	r2, r0, r2
 8102f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8102f5a:	bf00      	nop
 8102f5c:	370c      	adds	r7, #12
 8102f5e:	46bd      	mov	sp, r7
 8102f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f64:	4770      	bx	lr
 8102f66:	bf00      	nop
 8102f68:	e000e100 	.word	0xe000e100

08102f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102f6c:	b480      	push	{r7}
 8102f6e:	b083      	sub	sp, #12
 8102f70:	af00      	add	r7, sp, #0
 8102f72:	4603      	mov	r3, r0
 8102f74:	6039      	str	r1, [r7, #0]
 8102f76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f7c:	2b00      	cmp	r3, #0
 8102f7e:	db0a      	blt.n	8102f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f80:	683b      	ldr	r3, [r7, #0]
 8102f82:	b2da      	uxtb	r2, r3
 8102f84:	490c      	ldr	r1, [pc, #48]	; (8102fb8 <__NVIC_SetPriority+0x4c>)
 8102f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102f8a:	0112      	lsls	r2, r2, #4
 8102f8c:	b2d2      	uxtb	r2, r2
 8102f8e:	440b      	add	r3, r1
 8102f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102f94:	e00a      	b.n	8102fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102f96:	683b      	ldr	r3, [r7, #0]
 8102f98:	b2da      	uxtb	r2, r3
 8102f9a:	4908      	ldr	r1, [pc, #32]	; (8102fbc <__NVIC_SetPriority+0x50>)
 8102f9c:	88fb      	ldrh	r3, [r7, #6]
 8102f9e:	f003 030f 	and.w	r3, r3, #15
 8102fa2:	3b04      	subs	r3, #4
 8102fa4:	0112      	lsls	r2, r2, #4
 8102fa6:	b2d2      	uxtb	r2, r2
 8102fa8:	440b      	add	r3, r1
 8102faa:	761a      	strb	r2, [r3, #24]
}
 8102fac:	bf00      	nop
 8102fae:	370c      	adds	r7, #12
 8102fb0:	46bd      	mov	sp, r7
 8102fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fb6:	4770      	bx	lr
 8102fb8:	e000e100 	.word	0xe000e100
 8102fbc:	e000ed00 	.word	0xe000ed00

08102fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102fc0:	b480      	push	{r7}
 8102fc2:	b089      	sub	sp, #36	; 0x24
 8102fc4:	af00      	add	r7, sp, #0
 8102fc6:	60f8      	str	r0, [r7, #12]
 8102fc8:	60b9      	str	r1, [r7, #8]
 8102fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102fcc:	68fb      	ldr	r3, [r7, #12]
 8102fce:	f003 0307 	and.w	r3, r3, #7
 8102fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102fd4:	69fb      	ldr	r3, [r7, #28]
 8102fd6:	f1c3 0307 	rsb	r3, r3, #7
 8102fda:	2b04      	cmp	r3, #4
 8102fdc:	bf28      	it	cs
 8102fde:	2304      	movcs	r3, #4
 8102fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102fe2:	69fb      	ldr	r3, [r7, #28]
 8102fe4:	3304      	adds	r3, #4
 8102fe6:	2b06      	cmp	r3, #6
 8102fe8:	d902      	bls.n	8102ff0 <NVIC_EncodePriority+0x30>
 8102fea:	69fb      	ldr	r3, [r7, #28]
 8102fec:	3b03      	subs	r3, #3
 8102fee:	e000      	b.n	8102ff2 <NVIC_EncodePriority+0x32>
 8102ff0:	2300      	movs	r3, #0
 8102ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8102ff8:	69bb      	ldr	r3, [r7, #24]
 8102ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8102ffe:	43da      	mvns	r2, r3
 8103000:	68bb      	ldr	r3, [r7, #8]
 8103002:	401a      	ands	r2, r3
 8103004:	697b      	ldr	r3, [r7, #20]
 8103006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103008:	f04f 31ff 	mov.w	r1, #4294967295
 810300c:	697b      	ldr	r3, [r7, #20]
 810300e:	fa01 f303 	lsl.w	r3, r1, r3
 8103012:	43d9      	mvns	r1, r3
 8103014:	687b      	ldr	r3, [r7, #4]
 8103016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103018:	4313      	orrs	r3, r2
         );
}
 810301a:	4618      	mov	r0, r3
 810301c:	3724      	adds	r7, #36	; 0x24
 810301e:	46bd      	mov	sp, r7
 8103020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103024:	4770      	bx	lr
	...

08103028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103028:	b580      	push	{r7, lr}
 810302a:	b082      	sub	sp, #8
 810302c:	af00      	add	r7, sp, #0
 810302e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103030:	687b      	ldr	r3, [r7, #4]
 8103032:	3b01      	subs	r3, #1
 8103034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103038:	d301      	bcc.n	810303e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810303a:	2301      	movs	r3, #1
 810303c:	e00f      	b.n	810305e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810303e:	4a0a      	ldr	r2, [pc, #40]	; (8103068 <SysTick_Config+0x40>)
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	3b01      	subs	r3, #1
 8103044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103046:	210f      	movs	r1, #15
 8103048:	f04f 30ff 	mov.w	r0, #4294967295
 810304c:	f7ff ff8e 	bl	8102f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103050:	4b05      	ldr	r3, [pc, #20]	; (8103068 <SysTick_Config+0x40>)
 8103052:	2200      	movs	r2, #0
 8103054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103056:	4b04      	ldr	r3, [pc, #16]	; (8103068 <SysTick_Config+0x40>)
 8103058:	2207      	movs	r2, #7
 810305a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810305c:	2300      	movs	r3, #0
}
 810305e:	4618      	mov	r0, r3
 8103060:	3708      	adds	r7, #8
 8103062:	46bd      	mov	sp, r7
 8103064:	bd80      	pop	{r7, pc}
 8103066:	bf00      	nop
 8103068:	e000e010 	.word	0xe000e010

0810306c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810306c:	b580      	push	{r7, lr}
 810306e:	b082      	sub	sp, #8
 8103070:	af00      	add	r7, sp, #0
 8103072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103074:	6878      	ldr	r0, [r7, #4]
 8103076:	f7ff ff29 	bl	8102ecc <__NVIC_SetPriorityGrouping>
}
 810307a:	bf00      	nop
 810307c:	3708      	adds	r7, #8
 810307e:	46bd      	mov	sp, r7
 8103080:	bd80      	pop	{r7, pc}

08103082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103082:	b580      	push	{r7, lr}
 8103084:	b086      	sub	sp, #24
 8103086:	af00      	add	r7, sp, #0
 8103088:	4603      	mov	r3, r0
 810308a:	60b9      	str	r1, [r7, #8]
 810308c:	607a      	str	r2, [r7, #4]
 810308e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103090:	f7ff ff40 	bl	8102f14 <__NVIC_GetPriorityGrouping>
 8103094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103096:	687a      	ldr	r2, [r7, #4]
 8103098:	68b9      	ldr	r1, [r7, #8]
 810309a:	6978      	ldr	r0, [r7, #20]
 810309c:	f7ff ff90 	bl	8102fc0 <NVIC_EncodePriority>
 81030a0:	4602      	mov	r2, r0
 81030a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81030a6:	4611      	mov	r1, r2
 81030a8:	4618      	mov	r0, r3
 81030aa:	f7ff ff5f 	bl	8102f6c <__NVIC_SetPriority>
}
 81030ae:	bf00      	nop
 81030b0:	3718      	adds	r7, #24
 81030b2:	46bd      	mov	sp, r7
 81030b4:	bd80      	pop	{r7, pc}

081030b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81030b6:	b580      	push	{r7, lr}
 81030b8:	b082      	sub	sp, #8
 81030ba:	af00      	add	r7, sp, #0
 81030bc:	4603      	mov	r3, r0
 81030be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81030c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81030c4:	4618      	mov	r0, r3
 81030c6:	f7ff ff33 	bl	8102f30 <__NVIC_EnableIRQ>
}
 81030ca:	bf00      	nop
 81030cc:	3708      	adds	r7, #8
 81030ce:	46bd      	mov	sp, r7
 81030d0:	bd80      	pop	{r7, pc}

081030d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81030d2:	b580      	push	{r7, lr}
 81030d4:	b082      	sub	sp, #8
 81030d6:	af00      	add	r7, sp, #0
 81030d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81030da:	6878      	ldr	r0, [r7, #4]
 81030dc:	f7ff ffa4 	bl	8103028 <SysTick_Config>
 81030e0:	4603      	mov	r3, r0
}
 81030e2:	4618      	mov	r0, r3
 81030e4:	3708      	adds	r7, #8
 81030e6:	46bd      	mov	sp, r7
 81030e8:	bd80      	pop	{r7, pc}
	...

081030ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81030ec:	b480      	push	{r7}
 81030ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81030f0:	4b07      	ldr	r3, [pc, #28]	; (8103110 <HAL_GetCurrentCPUID+0x24>)
 81030f2:	681b      	ldr	r3, [r3, #0]
 81030f4:	091b      	lsrs	r3, r3, #4
 81030f6:	f003 030f 	and.w	r3, r3, #15
 81030fa:	2b07      	cmp	r3, #7
 81030fc:	d101      	bne.n	8103102 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81030fe:	2303      	movs	r3, #3
 8103100:	e000      	b.n	8103104 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103102:	2301      	movs	r3, #1
  }
}
 8103104:	4618      	mov	r0, r3
 8103106:	46bd      	mov	sp, r7
 8103108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810310c:	4770      	bx	lr
 810310e:	bf00      	nop
 8103110:	e000ed00 	.word	0xe000ed00

08103114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103114:	b480      	push	{r7}
 8103116:	b089      	sub	sp, #36	; 0x24
 8103118:	af00      	add	r7, sp, #0
 810311a:	6078      	str	r0, [r7, #4]
 810311c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810311e:	2300      	movs	r3, #0
 8103120:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103122:	4b89      	ldr	r3, [pc, #548]	; (8103348 <HAL_GPIO_Init+0x234>)
 8103124:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103126:	e194      	b.n	8103452 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103128:	683b      	ldr	r3, [r7, #0]
 810312a:	681a      	ldr	r2, [r3, #0]
 810312c:	2101      	movs	r1, #1
 810312e:	69fb      	ldr	r3, [r7, #28]
 8103130:	fa01 f303 	lsl.w	r3, r1, r3
 8103134:	4013      	ands	r3, r2
 8103136:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103138:	693b      	ldr	r3, [r7, #16]
 810313a:	2b00      	cmp	r3, #0
 810313c:	f000 8186 	beq.w	810344c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103140:	683b      	ldr	r3, [r7, #0]
 8103142:	685b      	ldr	r3, [r3, #4]
 8103144:	f003 0303 	and.w	r3, r3, #3
 8103148:	2b01      	cmp	r3, #1
 810314a:	d005      	beq.n	8103158 <HAL_GPIO_Init+0x44>
 810314c:	683b      	ldr	r3, [r7, #0]
 810314e:	685b      	ldr	r3, [r3, #4]
 8103150:	f003 0303 	and.w	r3, r3, #3
 8103154:	2b02      	cmp	r3, #2
 8103156:	d130      	bne.n	81031ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	689b      	ldr	r3, [r3, #8]
 810315c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810315e:	69fb      	ldr	r3, [r7, #28]
 8103160:	005b      	lsls	r3, r3, #1
 8103162:	2203      	movs	r2, #3
 8103164:	fa02 f303 	lsl.w	r3, r2, r3
 8103168:	43db      	mvns	r3, r3
 810316a:	69ba      	ldr	r2, [r7, #24]
 810316c:	4013      	ands	r3, r2
 810316e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103170:	683b      	ldr	r3, [r7, #0]
 8103172:	68da      	ldr	r2, [r3, #12]
 8103174:	69fb      	ldr	r3, [r7, #28]
 8103176:	005b      	lsls	r3, r3, #1
 8103178:	fa02 f303 	lsl.w	r3, r2, r3
 810317c:	69ba      	ldr	r2, [r7, #24]
 810317e:	4313      	orrs	r3, r2
 8103180:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	69ba      	ldr	r2, [r7, #24]
 8103186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103188:	687b      	ldr	r3, [r7, #4]
 810318a:	685b      	ldr	r3, [r3, #4]
 810318c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810318e:	2201      	movs	r2, #1
 8103190:	69fb      	ldr	r3, [r7, #28]
 8103192:	fa02 f303 	lsl.w	r3, r2, r3
 8103196:	43db      	mvns	r3, r3
 8103198:	69ba      	ldr	r2, [r7, #24]
 810319a:	4013      	ands	r3, r2
 810319c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810319e:	683b      	ldr	r3, [r7, #0]
 81031a0:	685b      	ldr	r3, [r3, #4]
 81031a2:	091b      	lsrs	r3, r3, #4
 81031a4:	f003 0201 	and.w	r2, r3, #1
 81031a8:	69fb      	ldr	r3, [r7, #28]
 81031aa:	fa02 f303 	lsl.w	r3, r2, r3
 81031ae:	69ba      	ldr	r2, [r7, #24]
 81031b0:	4313      	orrs	r3, r2
 81031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	69ba      	ldr	r2, [r7, #24]
 81031b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81031ba:	683b      	ldr	r3, [r7, #0]
 81031bc:	685b      	ldr	r3, [r3, #4]
 81031be:	f003 0303 	and.w	r3, r3, #3
 81031c2:	2b03      	cmp	r3, #3
 81031c4:	d017      	beq.n	81031f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81031c6:	687b      	ldr	r3, [r7, #4]
 81031c8:	68db      	ldr	r3, [r3, #12]
 81031ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81031cc:	69fb      	ldr	r3, [r7, #28]
 81031ce:	005b      	lsls	r3, r3, #1
 81031d0:	2203      	movs	r2, #3
 81031d2:	fa02 f303 	lsl.w	r3, r2, r3
 81031d6:	43db      	mvns	r3, r3
 81031d8:	69ba      	ldr	r2, [r7, #24]
 81031da:	4013      	ands	r3, r2
 81031dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81031de:	683b      	ldr	r3, [r7, #0]
 81031e0:	689a      	ldr	r2, [r3, #8]
 81031e2:	69fb      	ldr	r3, [r7, #28]
 81031e4:	005b      	lsls	r3, r3, #1
 81031e6:	fa02 f303 	lsl.w	r3, r2, r3
 81031ea:	69ba      	ldr	r2, [r7, #24]
 81031ec:	4313      	orrs	r3, r2
 81031ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81031f0:	687b      	ldr	r3, [r7, #4]
 81031f2:	69ba      	ldr	r2, [r7, #24]
 81031f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81031f6:	683b      	ldr	r3, [r7, #0]
 81031f8:	685b      	ldr	r3, [r3, #4]
 81031fa:	f003 0303 	and.w	r3, r3, #3
 81031fe:	2b02      	cmp	r3, #2
 8103200:	d123      	bne.n	810324a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103202:	69fb      	ldr	r3, [r7, #28]
 8103204:	08da      	lsrs	r2, r3, #3
 8103206:	687b      	ldr	r3, [r7, #4]
 8103208:	3208      	adds	r2, #8
 810320a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810320e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103210:	69fb      	ldr	r3, [r7, #28]
 8103212:	f003 0307 	and.w	r3, r3, #7
 8103216:	009b      	lsls	r3, r3, #2
 8103218:	220f      	movs	r2, #15
 810321a:	fa02 f303 	lsl.w	r3, r2, r3
 810321e:	43db      	mvns	r3, r3
 8103220:	69ba      	ldr	r2, [r7, #24]
 8103222:	4013      	ands	r3, r2
 8103224:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103226:	683b      	ldr	r3, [r7, #0]
 8103228:	691a      	ldr	r2, [r3, #16]
 810322a:	69fb      	ldr	r3, [r7, #28]
 810322c:	f003 0307 	and.w	r3, r3, #7
 8103230:	009b      	lsls	r3, r3, #2
 8103232:	fa02 f303 	lsl.w	r3, r2, r3
 8103236:	69ba      	ldr	r2, [r7, #24]
 8103238:	4313      	orrs	r3, r2
 810323a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810323c:	69fb      	ldr	r3, [r7, #28]
 810323e:	08da      	lsrs	r2, r3, #3
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	3208      	adds	r2, #8
 8103244:	69b9      	ldr	r1, [r7, #24]
 8103246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810324a:	687b      	ldr	r3, [r7, #4]
 810324c:	681b      	ldr	r3, [r3, #0]
 810324e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103250:	69fb      	ldr	r3, [r7, #28]
 8103252:	005b      	lsls	r3, r3, #1
 8103254:	2203      	movs	r2, #3
 8103256:	fa02 f303 	lsl.w	r3, r2, r3
 810325a:	43db      	mvns	r3, r3
 810325c:	69ba      	ldr	r2, [r7, #24]
 810325e:	4013      	ands	r3, r2
 8103260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103262:	683b      	ldr	r3, [r7, #0]
 8103264:	685b      	ldr	r3, [r3, #4]
 8103266:	f003 0203 	and.w	r2, r3, #3
 810326a:	69fb      	ldr	r3, [r7, #28]
 810326c:	005b      	lsls	r3, r3, #1
 810326e:	fa02 f303 	lsl.w	r3, r2, r3
 8103272:	69ba      	ldr	r2, [r7, #24]
 8103274:	4313      	orrs	r3, r2
 8103276:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103278:	687b      	ldr	r3, [r7, #4]
 810327a:	69ba      	ldr	r2, [r7, #24]
 810327c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810327e:	683b      	ldr	r3, [r7, #0]
 8103280:	685b      	ldr	r3, [r3, #4]
 8103282:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103286:	2b00      	cmp	r3, #0
 8103288:	f000 80e0 	beq.w	810344c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810328c:	4b2f      	ldr	r3, [pc, #188]	; (810334c <HAL_GPIO_Init+0x238>)
 810328e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103292:	4a2e      	ldr	r2, [pc, #184]	; (810334c <HAL_GPIO_Init+0x238>)
 8103294:	f043 0302 	orr.w	r3, r3, #2
 8103298:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810329c:	4b2b      	ldr	r3, [pc, #172]	; (810334c <HAL_GPIO_Init+0x238>)
 810329e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81032a2:	f003 0302 	and.w	r3, r3, #2
 81032a6:	60fb      	str	r3, [r7, #12]
 81032a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81032aa:	4a29      	ldr	r2, [pc, #164]	; (8103350 <HAL_GPIO_Init+0x23c>)
 81032ac:	69fb      	ldr	r3, [r7, #28]
 81032ae:	089b      	lsrs	r3, r3, #2
 81032b0:	3302      	adds	r3, #2
 81032b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81032b8:	69fb      	ldr	r3, [r7, #28]
 81032ba:	f003 0303 	and.w	r3, r3, #3
 81032be:	009b      	lsls	r3, r3, #2
 81032c0:	220f      	movs	r2, #15
 81032c2:	fa02 f303 	lsl.w	r3, r2, r3
 81032c6:	43db      	mvns	r3, r3
 81032c8:	69ba      	ldr	r2, [r7, #24]
 81032ca:	4013      	ands	r3, r2
 81032cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81032ce:	687b      	ldr	r3, [r7, #4]
 81032d0:	4a20      	ldr	r2, [pc, #128]	; (8103354 <HAL_GPIO_Init+0x240>)
 81032d2:	4293      	cmp	r3, r2
 81032d4:	d052      	beq.n	810337c <HAL_GPIO_Init+0x268>
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	4a1f      	ldr	r2, [pc, #124]	; (8103358 <HAL_GPIO_Init+0x244>)
 81032da:	4293      	cmp	r3, r2
 81032dc:	d031      	beq.n	8103342 <HAL_GPIO_Init+0x22e>
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	4a1e      	ldr	r2, [pc, #120]	; (810335c <HAL_GPIO_Init+0x248>)
 81032e2:	4293      	cmp	r3, r2
 81032e4:	d02b      	beq.n	810333e <HAL_GPIO_Init+0x22a>
 81032e6:	687b      	ldr	r3, [r7, #4]
 81032e8:	4a1d      	ldr	r2, [pc, #116]	; (8103360 <HAL_GPIO_Init+0x24c>)
 81032ea:	4293      	cmp	r3, r2
 81032ec:	d025      	beq.n	810333a <HAL_GPIO_Init+0x226>
 81032ee:	687b      	ldr	r3, [r7, #4]
 81032f0:	4a1c      	ldr	r2, [pc, #112]	; (8103364 <HAL_GPIO_Init+0x250>)
 81032f2:	4293      	cmp	r3, r2
 81032f4:	d01f      	beq.n	8103336 <HAL_GPIO_Init+0x222>
 81032f6:	687b      	ldr	r3, [r7, #4]
 81032f8:	4a1b      	ldr	r2, [pc, #108]	; (8103368 <HAL_GPIO_Init+0x254>)
 81032fa:	4293      	cmp	r3, r2
 81032fc:	d019      	beq.n	8103332 <HAL_GPIO_Init+0x21e>
 81032fe:	687b      	ldr	r3, [r7, #4]
 8103300:	4a1a      	ldr	r2, [pc, #104]	; (810336c <HAL_GPIO_Init+0x258>)
 8103302:	4293      	cmp	r3, r2
 8103304:	d013      	beq.n	810332e <HAL_GPIO_Init+0x21a>
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	4a19      	ldr	r2, [pc, #100]	; (8103370 <HAL_GPIO_Init+0x25c>)
 810330a:	4293      	cmp	r3, r2
 810330c:	d00d      	beq.n	810332a <HAL_GPIO_Init+0x216>
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	4a18      	ldr	r2, [pc, #96]	; (8103374 <HAL_GPIO_Init+0x260>)
 8103312:	4293      	cmp	r3, r2
 8103314:	d007      	beq.n	8103326 <HAL_GPIO_Init+0x212>
 8103316:	687b      	ldr	r3, [r7, #4]
 8103318:	4a17      	ldr	r2, [pc, #92]	; (8103378 <HAL_GPIO_Init+0x264>)
 810331a:	4293      	cmp	r3, r2
 810331c:	d101      	bne.n	8103322 <HAL_GPIO_Init+0x20e>
 810331e:	2309      	movs	r3, #9
 8103320:	e02d      	b.n	810337e <HAL_GPIO_Init+0x26a>
 8103322:	230a      	movs	r3, #10
 8103324:	e02b      	b.n	810337e <HAL_GPIO_Init+0x26a>
 8103326:	2308      	movs	r3, #8
 8103328:	e029      	b.n	810337e <HAL_GPIO_Init+0x26a>
 810332a:	2307      	movs	r3, #7
 810332c:	e027      	b.n	810337e <HAL_GPIO_Init+0x26a>
 810332e:	2306      	movs	r3, #6
 8103330:	e025      	b.n	810337e <HAL_GPIO_Init+0x26a>
 8103332:	2305      	movs	r3, #5
 8103334:	e023      	b.n	810337e <HAL_GPIO_Init+0x26a>
 8103336:	2304      	movs	r3, #4
 8103338:	e021      	b.n	810337e <HAL_GPIO_Init+0x26a>
 810333a:	2303      	movs	r3, #3
 810333c:	e01f      	b.n	810337e <HAL_GPIO_Init+0x26a>
 810333e:	2302      	movs	r3, #2
 8103340:	e01d      	b.n	810337e <HAL_GPIO_Init+0x26a>
 8103342:	2301      	movs	r3, #1
 8103344:	e01b      	b.n	810337e <HAL_GPIO_Init+0x26a>
 8103346:	bf00      	nop
 8103348:	580000c0 	.word	0x580000c0
 810334c:	58024400 	.word	0x58024400
 8103350:	58000400 	.word	0x58000400
 8103354:	58020000 	.word	0x58020000
 8103358:	58020400 	.word	0x58020400
 810335c:	58020800 	.word	0x58020800
 8103360:	58020c00 	.word	0x58020c00
 8103364:	58021000 	.word	0x58021000
 8103368:	58021400 	.word	0x58021400
 810336c:	58021800 	.word	0x58021800
 8103370:	58021c00 	.word	0x58021c00
 8103374:	58022000 	.word	0x58022000
 8103378:	58022400 	.word	0x58022400
 810337c:	2300      	movs	r3, #0
 810337e:	69fa      	ldr	r2, [r7, #28]
 8103380:	f002 0203 	and.w	r2, r2, #3
 8103384:	0092      	lsls	r2, r2, #2
 8103386:	4093      	lsls	r3, r2
 8103388:	69ba      	ldr	r2, [r7, #24]
 810338a:	4313      	orrs	r3, r2
 810338c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810338e:	4938      	ldr	r1, [pc, #224]	; (8103470 <HAL_GPIO_Init+0x35c>)
 8103390:	69fb      	ldr	r3, [r7, #28]
 8103392:	089b      	lsrs	r3, r3, #2
 8103394:	3302      	adds	r3, #2
 8103396:	69ba      	ldr	r2, [r7, #24]
 8103398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810339c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81033a0:	681b      	ldr	r3, [r3, #0]
 81033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81033a4:	693b      	ldr	r3, [r7, #16]
 81033a6:	43db      	mvns	r3, r3
 81033a8:	69ba      	ldr	r2, [r7, #24]
 81033aa:	4013      	ands	r3, r2
 81033ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81033ae:	683b      	ldr	r3, [r7, #0]
 81033b0:	685b      	ldr	r3, [r3, #4]
 81033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81033b6:	2b00      	cmp	r3, #0
 81033b8:	d003      	beq.n	81033c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81033ba:	69ba      	ldr	r2, [r7, #24]
 81033bc:	693b      	ldr	r3, [r7, #16]
 81033be:	4313      	orrs	r3, r2
 81033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81033c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81033c6:	69bb      	ldr	r3, [r7, #24]
 81033c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81033ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81033ce:	685b      	ldr	r3, [r3, #4]
 81033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81033d2:	693b      	ldr	r3, [r7, #16]
 81033d4:	43db      	mvns	r3, r3
 81033d6:	69ba      	ldr	r2, [r7, #24]
 81033d8:	4013      	ands	r3, r2
 81033da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81033dc:	683b      	ldr	r3, [r7, #0]
 81033de:	685b      	ldr	r3, [r3, #4]
 81033e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81033e4:	2b00      	cmp	r3, #0
 81033e6:	d003      	beq.n	81033f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81033e8:	69ba      	ldr	r2, [r7, #24]
 81033ea:	693b      	ldr	r3, [r7, #16]
 81033ec:	4313      	orrs	r3, r2
 81033ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81033f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81033f4:	69bb      	ldr	r3, [r7, #24]
 81033f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81033f8:	697b      	ldr	r3, [r7, #20]
 81033fa:	685b      	ldr	r3, [r3, #4]
 81033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81033fe:	693b      	ldr	r3, [r7, #16]
 8103400:	43db      	mvns	r3, r3
 8103402:	69ba      	ldr	r2, [r7, #24]
 8103404:	4013      	ands	r3, r2
 8103406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103408:	683b      	ldr	r3, [r7, #0]
 810340a:	685b      	ldr	r3, [r3, #4]
 810340c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103410:	2b00      	cmp	r3, #0
 8103412:	d003      	beq.n	810341c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103414:	69ba      	ldr	r2, [r7, #24]
 8103416:	693b      	ldr	r3, [r7, #16]
 8103418:	4313      	orrs	r3, r2
 810341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810341c:	697b      	ldr	r3, [r7, #20]
 810341e:	69ba      	ldr	r2, [r7, #24]
 8103420:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103422:	697b      	ldr	r3, [r7, #20]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103428:	693b      	ldr	r3, [r7, #16]
 810342a:	43db      	mvns	r3, r3
 810342c:	69ba      	ldr	r2, [r7, #24]
 810342e:	4013      	ands	r3, r2
 8103430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103432:	683b      	ldr	r3, [r7, #0]
 8103434:	685b      	ldr	r3, [r3, #4]
 8103436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810343a:	2b00      	cmp	r3, #0
 810343c:	d003      	beq.n	8103446 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810343e:	69ba      	ldr	r2, [r7, #24]
 8103440:	693b      	ldr	r3, [r7, #16]
 8103442:	4313      	orrs	r3, r2
 8103444:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103446:	697b      	ldr	r3, [r7, #20]
 8103448:	69ba      	ldr	r2, [r7, #24]
 810344a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 810344c:	69fb      	ldr	r3, [r7, #28]
 810344e:	3301      	adds	r3, #1
 8103450:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103452:	683b      	ldr	r3, [r7, #0]
 8103454:	681a      	ldr	r2, [r3, #0]
 8103456:	69fb      	ldr	r3, [r7, #28]
 8103458:	fa22 f303 	lsr.w	r3, r2, r3
 810345c:	2b00      	cmp	r3, #0
 810345e:	f47f ae63 	bne.w	8103128 <HAL_GPIO_Init+0x14>
  }
}
 8103462:	bf00      	nop
 8103464:	bf00      	nop
 8103466:	3724      	adds	r7, #36	; 0x24
 8103468:	46bd      	mov	sp, r7
 810346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810346e:	4770      	bx	lr
 8103470:	58000400 	.word	0x58000400

08103474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103474:	b480      	push	{r7}
 8103476:	b083      	sub	sp, #12
 8103478:	af00      	add	r7, sp, #0
 810347a:	6078      	str	r0, [r7, #4]
 810347c:	460b      	mov	r3, r1
 810347e:	807b      	strh	r3, [r7, #2]
 8103480:	4613      	mov	r3, r2
 8103482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103484:	787b      	ldrb	r3, [r7, #1]
 8103486:	2b00      	cmp	r3, #0
 8103488:	d003      	beq.n	8103492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810348a:	887a      	ldrh	r2, [r7, #2]
 810348c:	687b      	ldr	r3, [r7, #4]
 810348e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103490:	e003      	b.n	810349a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103492:	887b      	ldrh	r3, [r7, #2]
 8103494:	041a      	lsls	r2, r3, #16
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	619a      	str	r2, [r3, #24]
}
 810349a:	bf00      	nop
 810349c:	370c      	adds	r7, #12
 810349e:	46bd      	mov	sp, r7
 81034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034a4:	4770      	bx	lr

081034a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81034a6:	b580      	push	{r7, lr}
 81034a8:	b082      	sub	sp, #8
 81034aa:	af00      	add	r7, sp, #0
 81034ac:	4603      	mov	r3, r0
 81034ae:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81034b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81034b4:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81034b8:	88fb      	ldrh	r3, [r7, #6]
 81034ba:	4013      	ands	r3, r2
 81034bc:	2b00      	cmp	r3, #0
 81034be:	d008      	beq.n	81034d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81034c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81034c4:	88fb      	ldrh	r3, [r7, #6]
 81034c6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 81034ca:	88fb      	ldrh	r3, [r7, #6]
 81034cc:	4618      	mov	r0, r3
 81034ce:	f7ff f9e3 	bl	8102898 <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 81034d2:	bf00      	nop
 81034d4:	3708      	adds	r7, #8
 81034d6:	46bd      	mov	sp, r7
 81034d8:	bd80      	pop	{r7, pc}
	...

081034dc <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81034dc:	b480      	push	{r7}
 81034de:	b083      	sub	sp, #12
 81034e0:	af00      	add	r7, sp, #0
 81034e2:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81034e4:	4b05      	ldr	r3, [pc, #20]	; (81034fc <HAL_HSEM_ActivateNotification+0x20>)
 81034e6:	681a      	ldr	r2, [r3, #0]
 81034e8:	4904      	ldr	r1, [pc, #16]	; (81034fc <HAL_HSEM_ActivateNotification+0x20>)
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	4313      	orrs	r3, r2
 81034ee:	600b      	str	r3, [r1, #0]
#endif
}
 81034f0:	bf00      	nop
 81034f2:	370c      	adds	r7, #12
 81034f4:	46bd      	mov	sp, r7
 81034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034fa:	4770      	bx	lr
 81034fc:	58026510 	.word	0x58026510

08103500 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103500:	b580      	push	{r7, lr}
 8103502:	b084      	sub	sp, #16
 8103504:	af00      	add	r7, sp, #0
 8103506:	60f8      	str	r0, [r7, #12]
 8103508:	460b      	mov	r3, r1
 810350a:	607a      	str	r2, [r7, #4]
 810350c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810350e:	4b37      	ldr	r3, [pc, #220]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8103510:	681b      	ldr	r3, [r3, #0]
 8103512:	f023 0201 	bic.w	r2, r3, #1
 8103516:	4935      	ldr	r1, [pc, #212]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8103518:	68fb      	ldr	r3, [r7, #12]
 810351a:	4313      	orrs	r3, r2
 810351c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	2b00      	cmp	r3, #0
 8103522:	d123      	bne.n	810356c <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103524:	f7ff fde2 	bl	81030ec <HAL_GetCurrentCPUID>
 8103528:	4603      	mov	r3, r0
 810352a:	2b03      	cmp	r3, #3
 810352c:	d158      	bne.n	81035e0 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810352e:	4b2f      	ldr	r3, [pc, #188]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8103530:	691b      	ldr	r3, [r3, #16]
 8103532:	4a2e      	ldr	r2, [pc, #184]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8103534:	f023 0301 	bic.w	r3, r3, #1
 8103538:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810353a:	4b2d      	ldr	r3, [pc, #180]	; (81035f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810353c:	691b      	ldr	r3, [r3, #16]
 810353e:	4a2c      	ldr	r2, [pc, #176]	; (81035f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103540:	f043 0304 	orr.w	r3, r3, #4
 8103544:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8103546:	f3bf 8f4f 	dsb	sy
}
 810354a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810354c:	f3bf 8f6f 	isb	sy
}
 8103550:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103552:	7afb      	ldrb	r3, [r7, #11]
 8103554:	2b01      	cmp	r3, #1
 8103556:	d101      	bne.n	810355c <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103558:	bf30      	wfi
 810355a:	e000      	b.n	810355e <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810355c:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810355e:	4b24      	ldr	r3, [pc, #144]	; (81035f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103560:	691b      	ldr	r3, [r3, #16]
 8103562:	4a23      	ldr	r2, [pc, #140]	; (81035f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103564:	f023 0304 	bic.w	r3, r3, #4
 8103568:	6113      	str	r3, [r2, #16]
 810356a:	e03c      	b.n	81035e6 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810356c:	687b      	ldr	r3, [r7, #4]
 810356e:	2b01      	cmp	r3, #1
 8103570:	d123      	bne.n	81035ba <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103572:	f7ff fdbb 	bl	81030ec <HAL_GetCurrentCPUID>
 8103576:	4603      	mov	r3, r0
 8103578:	2b01      	cmp	r3, #1
 810357a:	d133      	bne.n	81035e4 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810357c:	4b1b      	ldr	r3, [pc, #108]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 810357e:	695b      	ldr	r3, [r3, #20]
 8103580:	4a1a      	ldr	r2, [pc, #104]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 8103582:	f023 0302 	bic.w	r3, r3, #2
 8103586:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103588:	4b19      	ldr	r3, [pc, #100]	; (81035f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810358a:	691b      	ldr	r3, [r3, #16]
 810358c:	4a18      	ldr	r2, [pc, #96]	; (81035f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810358e:	f043 0304 	orr.w	r3, r3, #4
 8103592:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103594:	f3bf 8f4f 	dsb	sy
}
 8103598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810359a:	f3bf 8f6f 	isb	sy
}
 810359e:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81035a0:	7afb      	ldrb	r3, [r7, #11]
 81035a2:	2b01      	cmp	r3, #1
 81035a4:	d101      	bne.n	81035aa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81035a6:	bf30      	wfi
 81035a8:	e000      	b.n	81035ac <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81035aa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81035ac:	4b10      	ldr	r3, [pc, #64]	; (81035f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035ae:	691b      	ldr	r3, [r3, #16]
 81035b0:	4a0f      	ldr	r2, [pc, #60]	; (81035f0 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81035b2:	f023 0304 	bic.w	r3, r3, #4
 81035b6:	6113      	str	r3, [r2, #16]
 81035b8:	e015      	b.n	81035e6 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81035ba:	f7ff fd97 	bl	81030ec <HAL_GetCurrentCPUID>
 81035be:	4603      	mov	r3, r0
 81035c0:	2b03      	cmp	r3, #3
 81035c2:	d106      	bne.n	81035d2 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81035c4:	4b09      	ldr	r3, [pc, #36]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81035c6:	691b      	ldr	r3, [r3, #16]
 81035c8:	4a08      	ldr	r2, [pc, #32]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81035ca:	f023 0304 	bic.w	r3, r3, #4
 81035ce:	6113      	str	r3, [r2, #16]
 81035d0:	e009      	b.n	81035e6 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81035d2:	4b06      	ldr	r3, [pc, #24]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81035d4:	695b      	ldr	r3, [r3, #20]
 81035d6:	4a05      	ldr	r2, [pc, #20]	; (81035ec <HAL_PWREx_EnterSTOPMode+0xec>)
 81035d8:	f023 0304 	bic.w	r3, r3, #4
 81035dc:	6153      	str	r3, [r2, #20]
 81035de:	e002      	b.n	81035e6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81035e0:	bf00      	nop
 81035e2:	e000      	b.n	81035e6 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81035e4:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81035e6:	3710      	adds	r7, #16
 81035e8:	46bd      	mov	sp, r7
 81035ea:	bd80      	pop	{r7, pc}
 81035ec:	58024800 	.word	0x58024800
 81035f0:	e000ed00 	.word	0xe000ed00

081035f4 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81035f4:	b580      	push	{r7, lr}
 81035f6:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81035f8:	f7ff fd78 	bl	81030ec <HAL_GetCurrentCPUID>
 81035fc:	4603      	mov	r3, r0
 81035fe:	2b03      	cmp	r3, #3
 8103600:	d101      	bne.n	8103606 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103602:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103604:	e001      	b.n	810360a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103606:	bf40      	sev
    __WFE ();
 8103608:	bf20      	wfe
}
 810360a:	bf00      	nop
 810360c:	bd80      	pop	{r7, pc}
	...

08103610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103610:	b480      	push	{r7}
 8103612:	b089      	sub	sp, #36	; 0x24
 8103614:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103616:	4bb3      	ldr	r3, [pc, #716]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103618:	691b      	ldr	r3, [r3, #16]
 810361a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810361e:	2b18      	cmp	r3, #24
 8103620:	f200 8155 	bhi.w	81038ce <HAL_RCC_GetSysClockFreq+0x2be>
 8103624:	a201      	add	r2, pc, #4	; (adr r2, 810362c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810362a:	bf00      	nop
 810362c:	08103691 	.word	0x08103691
 8103630:	081038cf 	.word	0x081038cf
 8103634:	081038cf 	.word	0x081038cf
 8103638:	081038cf 	.word	0x081038cf
 810363c:	081038cf 	.word	0x081038cf
 8103640:	081038cf 	.word	0x081038cf
 8103644:	081038cf 	.word	0x081038cf
 8103648:	081038cf 	.word	0x081038cf
 810364c:	081036b7 	.word	0x081036b7
 8103650:	081038cf 	.word	0x081038cf
 8103654:	081038cf 	.word	0x081038cf
 8103658:	081038cf 	.word	0x081038cf
 810365c:	081038cf 	.word	0x081038cf
 8103660:	081038cf 	.word	0x081038cf
 8103664:	081038cf 	.word	0x081038cf
 8103668:	081038cf 	.word	0x081038cf
 810366c:	081036bd 	.word	0x081036bd
 8103670:	081038cf 	.word	0x081038cf
 8103674:	081038cf 	.word	0x081038cf
 8103678:	081038cf 	.word	0x081038cf
 810367c:	081038cf 	.word	0x081038cf
 8103680:	081038cf 	.word	0x081038cf
 8103684:	081038cf 	.word	0x081038cf
 8103688:	081038cf 	.word	0x081038cf
 810368c:	081036c3 	.word	0x081036c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103690:	4b94      	ldr	r3, [pc, #592]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103692:	681b      	ldr	r3, [r3, #0]
 8103694:	f003 0320 	and.w	r3, r3, #32
 8103698:	2b00      	cmp	r3, #0
 810369a:	d009      	beq.n	81036b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810369c:	4b91      	ldr	r3, [pc, #580]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810369e:	681b      	ldr	r3, [r3, #0]
 81036a0:	08db      	lsrs	r3, r3, #3
 81036a2:	f003 0303 	and.w	r3, r3, #3
 81036a6:	4a90      	ldr	r2, [pc, #576]	; (81038e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036a8:	fa22 f303 	lsr.w	r3, r2, r3
 81036ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81036ae:	e111      	b.n	81038d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81036b0:	4b8d      	ldr	r3, [pc, #564]	; (81038e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81036b2:	61bb      	str	r3, [r7, #24]
    break;
 81036b4:	e10e      	b.n	81038d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81036b6:	4b8d      	ldr	r3, [pc, #564]	; (81038ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81036b8:	61bb      	str	r3, [r7, #24]
    break;
 81036ba:	e10b      	b.n	81038d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81036bc:	4b8c      	ldr	r3, [pc, #560]	; (81038f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81036be:	61bb      	str	r3, [r7, #24]
    break;
 81036c0:	e108      	b.n	81038d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81036c2:	4b88      	ldr	r3, [pc, #544]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036c6:	f003 0303 	and.w	r3, r3, #3
 81036ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81036cc:	4b85      	ldr	r3, [pc, #532]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81036d0:	091b      	lsrs	r3, r3, #4
 81036d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81036d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81036d8:	4b82      	ldr	r3, [pc, #520]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036dc:	f003 0301 	and.w	r3, r3, #1
 81036e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81036e2:	4b80      	ldr	r3, [pc, #512]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81036e6:	08db      	lsrs	r3, r3, #3
 81036e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81036ec:	68fa      	ldr	r2, [r7, #12]
 81036ee:	fb02 f303 	mul.w	r3, r2, r3
 81036f2:	ee07 3a90 	vmov	s15, r3
 81036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81036fe:	693b      	ldr	r3, [r7, #16]
 8103700:	2b00      	cmp	r3, #0
 8103702:	f000 80e1 	beq.w	81038c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103706:	697b      	ldr	r3, [r7, #20]
 8103708:	2b02      	cmp	r3, #2
 810370a:	f000 8083 	beq.w	8103814 <HAL_RCC_GetSysClockFreq+0x204>
 810370e:	697b      	ldr	r3, [r7, #20]
 8103710:	2b02      	cmp	r3, #2
 8103712:	f200 80a1 	bhi.w	8103858 <HAL_RCC_GetSysClockFreq+0x248>
 8103716:	697b      	ldr	r3, [r7, #20]
 8103718:	2b00      	cmp	r3, #0
 810371a:	d003      	beq.n	8103724 <HAL_RCC_GetSysClockFreq+0x114>
 810371c:	697b      	ldr	r3, [r7, #20]
 810371e:	2b01      	cmp	r3, #1
 8103720:	d056      	beq.n	81037d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103722:	e099      	b.n	8103858 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103724:	4b6f      	ldr	r3, [pc, #444]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	f003 0320 	and.w	r3, r3, #32
 810372c:	2b00      	cmp	r3, #0
 810372e:	d02d      	beq.n	810378c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103730:	4b6c      	ldr	r3, [pc, #432]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103732:	681b      	ldr	r3, [r3, #0]
 8103734:	08db      	lsrs	r3, r3, #3
 8103736:	f003 0303 	and.w	r3, r3, #3
 810373a:	4a6b      	ldr	r2, [pc, #428]	; (81038e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810373c:	fa22 f303 	lsr.w	r3, r2, r3
 8103740:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	ee07 3a90 	vmov	s15, r3
 8103748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810374c:	693b      	ldr	r3, [r7, #16]
 810374e:	ee07 3a90 	vmov	s15, r3
 8103752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810375a:	4b62      	ldr	r3, [pc, #392]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810375e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103762:	ee07 3a90 	vmov	s15, r3
 8103766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810376a:	ed97 6a02 	vldr	s12, [r7, #8]
 810376e:	eddf 5a61 	vldr	s11, [pc, #388]	; 81038f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810377a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810377e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103786:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810378a:	e087      	b.n	810389c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810378c:	693b      	ldr	r3, [r7, #16]
 810378e:	ee07 3a90 	vmov	s15, r3
 8103792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103796:	eddf 6a58 	vldr	s13, [pc, #352]	; 81038f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810379a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810379e:	4b51      	ldr	r3, [pc, #324]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037a6:	ee07 3a90 	vmov	s15, r3
 81037aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81037b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 81038f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81037b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81037be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81037c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81037c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81037ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81037ce:	e065      	b.n	810389c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81037d0:	693b      	ldr	r3, [r7, #16]
 81037d2:	ee07 3a90 	vmov	s15, r3
 81037d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037da:	eddf 6a48 	vldr	s13, [pc, #288]	; 81038fc <HAL_RCC_GetSysClockFreq+0x2ec>
 81037de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81037e2:	4b40      	ldr	r3, [pc, #256]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81037e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81037ea:	ee07 3a90 	vmov	s15, r3
 81037ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81037f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81037f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81038f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81037fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81037fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810380a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810380e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103812:	e043      	b.n	810389c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103814:	693b      	ldr	r3, [r7, #16]
 8103816:	ee07 3a90 	vmov	s15, r3
 810381a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810381e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103900 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103826:	4b2f      	ldr	r3, [pc, #188]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810382a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810382e:	ee07 3a90 	vmov	s15, r3
 8103832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103836:	ed97 6a02 	vldr	s12, [r7, #8]
 810383a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81038f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810383e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810384a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810384e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103856:	e021      	b.n	810389c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103858:	693b      	ldr	r3, [r7, #16]
 810385a:	ee07 3a90 	vmov	s15, r3
 810385e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103862:	eddf 6a26 	vldr	s13, [pc, #152]	; 81038fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8103866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810386a:	4b1e      	ldr	r3, [pc, #120]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810386e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103872:	ee07 3a90 	vmov	s15, r3
 8103876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810387a:	ed97 6a02 	vldr	s12, [r7, #8]
 810387e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81038f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810388a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810388e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810389a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810389c:	4b11      	ldr	r3, [pc, #68]	; (81038e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81038a0:	0a5b      	lsrs	r3, r3, #9
 81038a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81038a6:	3301      	adds	r3, #1
 81038a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81038aa:	683b      	ldr	r3, [r7, #0]
 81038ac:	ee07 3a90 	vmov	s15, r3
 81038b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81038b4:	edd7 6a07 	vldr	s13, [r7, #28]
 81038b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81038bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81038c0:	ee17 3a90 	vmov	r3, s15
 81038c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81038c6:	e005      	b.n	81038d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81038c8:	2300      	movs	r3, #0
 81038ca:	61bb      	str	r3, [r7, #24]
    break;
 81038cc:	e002      	b.n	81038d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81038ce:	4b07      	ldr	r3, [pc, #28]	; (81038ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81038d0:	61bb      	str	r3, [r7, #24]
    break;
 81038d2:	bf00      	nop
  }

  return sysclockfreq;
 81038d4:	69bb      	ldr	r3, [r7, #24]
}
 81038d6:	4618      	mov	r0, r3
 81038d8:	3724      	adds	r7, #36	; 0x24
 81038da:	46bd      	mov	sp, r7
 81038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81038e0:	4770      	bx	lr
 81038e2:	bf00      	nop
 81038e4:	58024400 	.word	0x58024400
 81038e8:	03d09000 	.word	0x03d09000
 81038ec:	003d0900 	.word	0x003d0900
 81038f0:	007a1200 	.word	0x007a1200
 81038f4:	46000000 	.word	0x46000000
 81038f8:	4c742400 	.word	0x4c742400
 81038fc:	4a742400 	.word	0x4a742400
 8103900:	4af42400 	.word	0x4af42400

08103904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103904:	b580      	push	{r7, lr}
 8103906:	b082      	sub	sp, #8
 8103908:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810390a:	f7ff fe81 	bl	8103610 <HAL_RCC_GetSysClockFreq>
 810390e:	4602      	mov	r2, r0
 8103910:	4b11      	ldr	r3, [pc, #68]	; (8103958 <HAL_RCC_GetHCLKFreq+0x54>)
 8103912:	699b      	ldr	r3, [r3, #24]
 8103914:	0a1b      	lsrs	r3, r3, #8
 8103916:	f003 030f 	and.w	r3, r3, #15
 810391a:	4910      	ldr	r1, [pc, #64]	; (810395c <HAL_RCC_GetHCLKFreq+0x58>)
 810391c:	5ccb      	ldrb	r3, [r1, r3]
 810391e:	f003 031f 	and.w	r3, r3, #31
 8103922:	fa22 f303 	lsr.w	r3, r2, r3
 8103926:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103928:	4b0b      	ldr	r3, [pc, #44]	; (8103958 <HAL_RCC_GetHCLKFreq+0x54>)
 810392a:	699b      	ldr	r3, [r3, #24]
 810392c:	f003 030f 	and.w	r3, r3, #15
 8103930:	4a0a      	ldr	r2, [pc, #40]	; (810395c <HAL_RCC_GetHCLKFreq+0x58>)
 8103932:	5cd3      	ldrb	r3, [r2, r3]
 8103934:	f003 031f 	and.w	r3, r3, #31
 8103938:	687a      	ldr	r2, [r7, #4]
 810393a:	fa22 f303 	lsr.w	r3, r2, r3
 810393e:	4a08      	ldr	r2, [pc, #32]	; (8103960 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103940:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103942:	4b07      	ldr	r3, [pc, #28]	; (8103960 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103944:	681b      	ldr	r3, [r3, #0]
 8103946:	4a07      	ldr	r2, [pc, #28]	; (8103964 <HAL_RCC_GetHCLKFreq+0x60>)
 8103948:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810394a:	4b05      	ldr	r3, [pc, #20]	; (8103960 <HAL_RCC_GetHCLKFreq+0x5c>)
 810394c:	681b      	ldr	r3, [r3, #0]
}
 810394e:	4618      	mov	r0, r3
 8103950:	3708      	adds	r7, #8
 8103952:	46bd      	mov	sp, r7
 8103954:	bd80      	pop	{r7, pc}
 8103956:	bf00      	nop
 8103958:	58024400 	.word	0x58024400
 810395c:	0810e108 	.word	0x0810e108
 8103960:	10000004 	.word	0x10000004
 8103964:	10000000 	.word	0x10000000

08103968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103968:	b580      	push	{r7, lr}
 810396a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810396c:	f7ff ffca 	bl	8103904 <HAL_RCC_GetHCLKFreq>
 8103970:	4602      	mov	r2, r0
 8103972:	4b06      	ldr	r3, [pc, #24]	; (810398c <HAL_RCC_GetPCLK1Freq+0x24>)
 8103974:	69db      	ldr	r3, [r3, #28]
 8103976:	091b      	lsrs	r3, r3, #4
 8103978:	f003 0307 	and.w	r3, r3, #7
 810397c:	4904      	ldr	r1, [pc, #16]	; (8103990 <HAL_RCC_GetPCLK1Freq+0x28>)
 810397e:	5ccb      	ldrb	r3, [r1, r3]
 8103980:	f003 031f 	and.w	r3, r3, #31
 8103984:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103988:	4618      	mov	r0, r3
 810398a:	bd80      	pop	{r7, pc}
 810398c:	58024400 	.word	0x58024400
 8103990:	0810e108 	.word	0x0810e108

08103994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103994:	b580      	push	{r7, lr}
 8103996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8103998:	f7ff ffb4 	bl	8103904 <HAL_RCC_GetHCLKFreq>
 810399c:	4602      	mov	r2, r0
 810399e:	4b06      	ldr	r3, [pc, #24]	; (81039b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 81039a0:	69db      	ldr	r3, [r3, #28]
 81039a2:	0a1b      	lsrs	r3, r3, #8
 81039a4:	f003 0307 	and.w	r3, r3, #7
 81039a8:	4904      	ldr	r1, [pc, #16]	; (81039bc <HAL_RCC_GetPCLK2Freq+0x28>)
 81039aa:	5ccb      	ldrb	r3, [r1, r3]
 81039ac:	f003 031f 	and.w	r3, r3, #31
 81039b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81039b4:	4618      	mov	r0, r3
 81039b6:	bd80      	pop	{r7, pc}
 81039b8:	58024400 	.word	0x58024400
 81039bc:	0810e108 	.word	0x0810e108

081039c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81039c0:	b580      	push	{r7, lr}
 81039c2:	b086      	sub	sp, #24
 81039c4:	af00      	add	r7, sp, #0
 81039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81039c8:	2300      	movs	r3, #0
 81039ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81039cc:	2300      	movs	r3, #0
 81039ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81039d0:	687b      	ldr	r3, [r7, #4]
 81039d2:	681b      	ldr	r3, [r3, #0]
 81039d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81039d8:	2b00      	cmp	r3, #0
 81039da:	d03f      	beq.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81039e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81039e4:	d02a      	beq.n	8103a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81039e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81039ea:	d824      	bhi.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81039ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81039f0:	d018      	beq.n	8103a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81039f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81039f6:	d81e      	bhi.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 81039f8:	2b00      	cmp	r3, #0
 81039fa:	d003      	beq.n	8103a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 81039fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103a00:	d007      	beq.n	8103a12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103a02:	e018      	b.n	8103a36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a04:	4bab      	ldr	r3, [pc, #684]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a08:	4aaa      	ldr	r2, [pc, #680]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a10:	e015      	b.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103a12:	687b      	ldr	r3, [r7, #4]
 8103a14:	3304      	adds	r3, #4
 8103a16:	2102      	movs	r1, #2
 8103a18:	4618      	mov	r0, r3
 8103a1a:	f001 f9cf 	bl	8104dbc <RCCEx_PLL2_Config>
 8103a1e:	4603      	mov	r3, r0
 8103a20:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a22:	e00c      	b.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103a24:	687b      	ldr	r3, [r7, #4]
 8103a26:	3324      	adds	r3, #36	; 0x24
 8103a28:	2102      	movs	r1, #2
 8103a2a:	4618      	mov	r0, r3
 8103a2c:	f001 fa78 	bl	8104f20 <RCCEx_PLL3_Config>
 8103a30:	4603      	mov	r3, r0
 8103a32:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103a34:	e003      	b.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103a36:	2301      	movs	r3, #1
 8103a38:	75fb      	strb	r3, [r7, #23]
      break;
 8103a3a:	e000      	b.n	8103a3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103a3e:	7dfb      	ldrb	r3, [r7, #23]
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d109      	bne.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103a44:	4b9b      	ldr	r3, [pc, #620]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103a48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103a4c:	687b      	ldr	r3, [r7, #4]
 8103a4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103a50:	4998      	ldr	r1, [pc, #608]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a52:	4313      	orrs	r3, r2
 8103a54:	650b      	str	r3, [r1, #80]	; 0x50
 8103a56:	e001      	b.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a58:	7dfb      	ldrb	r3, [r7, #23]
 8103a5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103a5c:	687b      	ldr	r3, [r7, #4]
 8103a5e:	681b      	ldr	r3, [r3, #0]
 8103a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	d03d      	beq.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103a6c:	2b04      	cmp	r3, #4
 8103a6e:	d826      	bhi.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103a70:	a201      	add	r2, pc, #4	; (adr r2, 8103a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a76:	bf00      	nop
 8103a78:	08103a8d 	.word	0x08103a8d
 8103a7c:	08103a9b 	.word	0x08103a9b
 8103a80:	08103aad 	.word	0x08103aad
 8103a84:	08103ac5 	.word	0x08103ac5
 8103a88:	08103ac5 	.word	0x08103ac5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a8c:	4b89      	ldr	r3, [pc, #548]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a90:	4a88      	ldr	r2, [pc, #544]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103a98:	e015      	b.n	8103ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103a9a:	687b      	ldr	r3, [r7, #4]
 8103a9c:	3304      	adds	r3, #4
 8103a9e:	2100      	movs	r1, #0
 8103aa0:	4618      	mov	r0, r3
 8103aa2:	f001 f98b 	bl	8104dbc <RCCEx_PLL2_Config>
 8103aa6:	4603      	mov	r3, r0
 8103aa8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103aaa:	e00c      	b.n	8103ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	3324      	adds	r3, #36	; 0x24
 8103ab0:	2100      	movs	r1, #0
 8103ab2:	4618      	mov	r0, r3
 8103ab4:	f001 fa34 	bl	8104f20 <RCCEx_PLL3_Config>
 8103ab8:	4603      	mov	r3, r0
 8103aba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103abc:	e003      	b.n	8103ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103abe:	2301      	movs	r3, #1
 8103ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8103ac2:	e000      	b.n	8103ac6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103ac6:	7dfb      	ldrb	r3, [r7, #23]
 8103ac8:	2b00      	cmp	r3, #0
 8103aca:	d109      	bne.n	8103ae0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103acc:	4b79      	ldr	r3, [pc, #484]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103ad0:	f023 0207 	bic.w	r2, r3, #7
 8103ad4:	687b      	ldr	r3, [r7, #4]
 8103ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ad8:	4976      	ldr	r1, [pc, #472]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103ada:	4313      	orrs	r3, r2
 8103adc:	650b      	str	r3, [r1, #80]	; 0x50
 8103ade:	e001      	b.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ae0:	7dfb      	ldrb	r3, [r7, #23]
 8103ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103ae4:	687b      	ldr	r3, [r7, #4]
 8103ae6:	681b      	ldr	r3, [r3, #0]
 8103ae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103aec:	2b00      	cmp	r3, #0
 8103aee:	d042      	beq.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103af0:	687b      	ldr	r3, [r7, #4]
 8103af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103af8:	d02b      	beq.n	8103b52 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103afe:	d825      	bhi.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b00:	2bc0      	cmp	r3, #192	; 0xc0
 8103b02:	d028      	beq.n	8103b56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103b04:	2bc0      	cmp	r3, #192	; 0xc0
 8103b06:	d821      	bhi.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b08:	2b80      	cmp	r3, #128	; 0x80
 8103b0a:	d016      	beq.n	8103b3a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103b0c:	2b80      	cmp	r3, #128	; 0x80
 8103b0e:	d81d      	bhi.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103b10:	2b00      	cmp	r3, #0
 8103b12:	d002      	beq.n	8103b1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103b14:	2b40      	cmp	r3, #64	; 0x40
 8103b16:	d007      	beq.n	8103b28 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103b18:	e018      	b.n	8103b4c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b1a:	4b66      	ldr	r3, [pc, #408]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b1e:	4a65      	ldr	r2, [pc, #404]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b24:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b26:	e017      	b.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103b28:	687b      	ldr	r3, [r7, #4]
 8103b2a:	3304      	adds	r3, #4
 8103b2c:	2100      	movs	r1, #0
 8103b2e:	4618      	mov	r0, r3
 8103b30:	f001 f944 	bl	8104dbc <RCCEx_PLL2_Config>
 8103b34:	4603      	mov	r3, r0
 8103b36:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b38:	e00e      	b.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103b3a:	687b      	ldr	r3, [r7, #4]
 8103b3c:	3324      	adds	r3, #36	; 0x24
 8103b3e:	2100      	movs	r1, #0
 8103b40:	4618      	mov	r0, r3
 8103b42:	f001 f9ed 	bl	8104f20 <RCCEx_PLL3_Config>
 8103b46:	4603      	mov	r3, r0
 8103b48:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103b4a:	e005      	b.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103b4c:	2301      	movs	r3, #1
 8103b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8103b50:	e002      	b.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103b52:	bf00      	nop
 8103b54:	e000      	b.n	8103b58 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103b56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103b58:	7dfb      	ldrb	r3, [r7, #23]
 8103b5a:	2b00      	cmp	r3, #0
 8103b5c:	d109      	bne.n	8103b72 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103b5e:	4b55      	ldr	r3, [pc, #340]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103b62:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103b66:	687b      	ldr	r3, [r7, #4]
 8103b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103b6a:	4952      	ldr	r1, [pc, #328]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103b6c:	4313      	orrs	r3, r2
 8103b6e:	650b      	str	r3, [r1, #80]	; 0x50
 8103b70:	e001      	b.n	8103b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b72:	7dfb      	ldrb	r3, [r7, #23]
 8103b74:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103b76:	687b      	ldr	r3, [r7, #4]
 8103b78:	681b      	ldr	r3, [r3, #0]
 8103b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103b7e:	2b00      	cmp	r3, #0
 8103b80:	d049      	beq.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103b82:	687b      	ldr	r3, [r7, #4]
 8103b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103b88:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103b8c:	d030      	beq.n	8103bf0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103b8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103b92:	d82a      	bhi.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103b94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103b98:	d02c      	beq.n	8103bf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103b9a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103b9e:	d824      	bhi.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103ba4:	d018      	beq.n	8103bd8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103baa:	d81e      	bhi.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103bac:	2b00      	cmp	r3, #0
 8103bae:	d003      	beq.n	8103bb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103bb4:	d007      	beq.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103bb6:	e018      	b.n	8103bea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bb8:	4b3e      	ldr	r3, [pc, #248]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bbc:	4a3d      	ldr	r2, [pc, #244]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103bc4:	e017      	b.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	3304      	adds	r3, #4
 8103bca:	2100      	movs	r1, #0
 8103bcc:	4618      	mov	r0, r3
 8103bce:	f001 f8f5 	bl	8104dbc <RCCEx_PLL2_Config>
 8103bd2:	4603      	mov	r3, r0
 8103bd4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103bd6:	e00e      	b.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103bd8:	687b      	ldr	r3, [r7, #4]
 8103bda:	3324      	adds	r3, #36	; 0x24
 8103bdc:	2100      	movs	r1, #0
 8103bde:	4618      	mov	r0, r3
 8103be0:	f001 f99e 	bl	8104f20 <RCCEx_PLL3_Config>
 8103be4:	4603      	mov	r3, r0
 8103be6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103be8:	e005      	b.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103bea:	2301      	movs	r3, #1
 8103bec:	75fb      	strb	r3, [r7, #23]
      break;
 8103bee:	e002      	b.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103bf0:	bf00      	nop
 8103bf2:	e000      	b.n	8103bf6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bf6:	7dfb      	ldrb	r3, [r7, #23]
 8103bf8:	2b00      	cmp	r3, #0
 8103bfa:	d10a      	bne.n	8103c12 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103bfc:	4b2d      	ldr	r3, [pc, #180]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103c00:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103c0a:	492a      	ldr	r1, [pc, #168]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103c0c:	4313      	orrs	r3, r2
 8103c0e:	658b      	str	r3, [r1, #88]	; 0x58
 8103c10:	e001      	b.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c12:	7dfb      	ldrb	r3, [r7, #23]
 8103c14:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103c1e:	2b00      	cmp	r3, #0
 8103c20:	d04c      	beq.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103c28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103c2c:	d030      	beq.n	8103c90 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103c2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103c32:	d82a      	bhi.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103c38:	d02c      	beq.n	8103c94 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8103c3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103c3e:	d824      	bhi.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103c44:	d018      	beq.n	8103c78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103c46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103c4a:	d81e      	bhi.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103c4c:	2b00      	cmp	r3, #0
 8103c4e:	d003      	beq.n	8103c58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103c54:	d007      	beq.n	8103c66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103c56:	e018      	b.n	8103c8a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103c58:	4b16      	ldr	r3, [pc, #88]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103c5c:	4a15      	ldr	r2, [pc, #84]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c64:	e017      	b.n	8103c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103c66:	687b      	ldr	r3, [r7, #4]
 8103c68:	3304      	adds	r3, #4
 8103c6a:	2100      	movs	r1, #0
 8103c6c:	4618      	mov	r0, r3
 8103c6e:	f001 f8a5 	bl	8104dbc <RCCEx_PLL2_Config>
 8103c72:	4603      	mov	r3, r0
 8103c74:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103c76:	e00e      	b.n	8103c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	3324      	adds	r3, #36	; 0x24
 8103c7c:	2100      	movs	r1, #0
 8103c7e:	4618      	mov	r0, r3
 8103c80:	f001 f94e 	bl	8104f20 <RCCEx_PLL3_Config>
 8103c84:	4603      	mov	r3, r0
 8103c86:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103c88:	e005      	b.n	8103c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103c8a:	2301      	movs	r3, #1
 8103c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8103c8e:	e002      	b.n	8103c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103c90:	bf00      	nop
 8103c92:	e000      	b.n	8103c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103c94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c96:	7dfb      	ldrb	r3, [r7, #23]
 8103c98:	2b00      	cmp	r3, #0
 8103c9a:	d10d      	bne.n	8103cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103c9c:	4b05      	ldr	r3, [pc, #20]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ca0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103caa:	4902      	ldr	r1, [pc, #8]	; (8103cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103cac:	4313      	orrs	r3, r2
 8103cae:	658b      	str	r3, [r1, #88]	; 0x58
 8103cb0:	e004      	b.n	8103cbc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8103cb2:	bf00      	nop
 8103cb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cb8:	7dfb      	ldrb	r3, [r7, #23]
 8103cba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	681b      	ldr	r3, [r3, #0]
 8103cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103cc4:	2b00      	cmp	r3, #0
 8103cc6:	d032      	beq.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103cc8:	687b      	ldr	r3, [r7, #4]
 8103cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ccc:	2b30      	cmp	r3, #48	; 0x30
 8103cce:	d01c      	beq.n	8103d0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103cd0:	2b30      	cmp	r3, #48	; 0x30
 8103cd2:	d817      	bhi.n	8103d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103cd4:	2b20      	cmp	r3, #32
 8103cd6:	d00c      	beq.n	8103cf2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8103cd8:	2b20      	cmp	r3, #32
 8103cda:	d813      	bhi.n	8103d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103cdc:	2b00      	cmp	r3, #0
 8103cde:	d016      	beq.n	8103d0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8103ce0:	2b10      	cmp	r3, #16
 8103ce2:	d10f      	bne.n	8103d04 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ce4:	4baf      	ldr	r3, [pc, #700]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ce8:	4aae      	ldr	r2, [pc, #696]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103cee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103cf0:	e00e      	b.n	8103d10 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	3304      	adds	r3, #4
 8103cf6:	2102      	movs	r1, #2
 8103cf8:	4618      	mov	r0, r3
 8103cfa:	f001 f85f 	bl	8104dbc <RCCEx_PLL2_Config>
 8103cfe:	4603      	mov	r3, r0
 8103d00:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103d02:	e005      	b.n	8103d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103d04:	2301      	movs	r3, #1
 8103d06:	75fb      	strb	r3, [r7, #23]
      break;
 8103d08:	e002      	b.n	8103d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103d0a:	bf00      	nop
 8103d0c:	e000      	b.n	8103d10 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103d0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d10:	7dfb      	ldrb	r3, [r7, #23]
 8103d12:	2b00      	cmp	r3, #0
 8103d14:	d109      	bne.n	8103d2a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103d16:	4ba3      	ldr	r3, [pc, #652]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103d1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103d22:	49a0      	ldr	r1, [pc, #640]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103d24:	4313      	orrs	r3, r2
 8103d26:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103d28:	e001      	b.n	8103d2e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d2a:	7dfb      	ldrb	r3, [r7, #23]
 8103d2c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103d2e:	687b      	ldr	r3, [r7, #4]
 8103d30:	681b      	ldr	r3, [r3, #0]
 8103d32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8103d36:	2b00      	cmp	r3, #0
 8103d38:	d047      	beq.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8103d3a:	687b      	ldr	r3, [r7, #4]
 8103d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103d3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d42:	d030      	beq.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8103d44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103d48:	d82a      	bhi.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103d4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103d4e:	d02c      	beq.n	8103daa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8103d50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103d54:	d824      	bhi.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103d5a:	d018      	beq.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103d60:	d81e      	bhi.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103d62:	2b00      	cmp	r3, #0
 8103d64:	d003      	beq.n	8103d6e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8103d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103d6a:	d007      	beq.n	8103d7c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103d6c:	e018      	b.n	8103da0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d6e:	4b8d      	ldr	r3, [pc, #564]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d72:	4a8c      	ldr	r2, [pc, #560]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d78:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103d7a:	e017      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	3304      	adds	r3, #4
 8103d80:	2100      	movs	r1, #0
 8103d82:	4618      	mov	r0, r3
 8103d84:	f001 f81a 	bl	8104dbc <RCCEx_PLL2_Config>
 8103d88:	4603      	mov	r3, r0
 8103d8a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103d8c:	e00e      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	3324      	adds	r3, #36	; 0x24
 8103d92:	2100      	movs	r1, #0
 8103d94:	4618      	mov	r0, r3
 8103d96:	f001 f8c3 	bl	8104f20 <RCCEx_PLL3_Config>
 8103d9a:	4603      	mov	r3, r0
 8103d9c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103d9e:	e005      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103da0:	2301      	movs	r3, #1
 8103da2:	75fb      	strb	r3, [r7, #23]
      break;
 8103da4:	e002      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103da6:	bf00      	nop
 8103da8:	e000      	b.n	8103dac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8103daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dac:	7dfb      	ldrb	r3, [r7, #23]
 8103dae:	2b00      	cmp	r3, #0
 8103db0:	d109      	bne.n	8103dc6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103db2:	4b7c      	ldr	r3, [pc, #496]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103db6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103dbe:	4979      	ldr	r1, [pc, #484]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103dc0:	4313      	orrs	r3, r2
 8103dc2:	650b      	str	r3, [r1, #80]	; 0x50
 8103dc4:	e001      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dc6:	7dfb      	ldrb	r3, [r7, #23]
 8103dc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103dca:	687b      	ldr	r3, [r7, #4]
 8103dcc:	681b      	ldr	r3, [r3, #0]
 8103dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8103dd2:	2b00      	cmp	r3, #0
 8103dd4:	d049      	beq.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103dde:	d02e      	beq.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8103de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103de4:	d828      	bhi.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103de6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103dea:	d02a      	beq.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8103dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103df0:	d822      	bhi.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103df2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103df6:	d026      	beq.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8103df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103dfc:	d81c      	bhi.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103dfe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e02:	d010      	beq.n	8103e26 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103e08:	d816      	bhi.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103e0a:	2b00      	cmp	r3, #0
 8103e0c:	d01d      	beq.n	8103e4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8103e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103e12:	d111      	bne.n	8103e38 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	3304      	adds	r3, #4
 8103e18:	2101      	movs	r1, #1
 8103e1a:	4618      	mov	r0, r3
 8103e1c:	f000 ffce 	bl	8104dbc <RCCEx_PLL2_Config>
 8103e20:	4603      	mov	r3, r0
 8103e22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103e24:	e012      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	3324      	adds	r3, #36	; 0x24
 8103e2a:	2101      	movs	r1, #1
 8103e2c:	4618      	mov	r0, r3
 8103e2e:	f001 f877 	bl	8104f20 <RCCEx_PLL3_Config>
 8103e32:	4603      	mov	r3, r0
 8103e34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103e36:	e009      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e38:	2301      	movs	r3, #1
 8103e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8103e3c:	e006      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103e3e:	bf00      	nop
 8103e40:	e004      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103e42:	bf00      	nop
 8103e44:	e002      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103e46:	bf00      	nop
 8103e48:	e000      	b.n	8103e4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103e4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e4c:	7dfb      	ldrb	r3, [r7, #23]
 8103e4e:	2b00      	cmp	r3, #0
 8103e50:	d109      	bne.n	8103e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103e52:	4b54      	ldr	r3, [pc, #336]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103e5e:	4951      	ldr	r1, [pc, #324]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103e60:	4313      	orrs	r3, r2
 8103e62:	650b      	str	r3, [r1, #80]	; 0x50
 8103e64:	e001      	b.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e66:	7dfb      	ldrb	r3, [r7, #23]
 8103e68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	681b      	ldr	r3, [r3, #0]
 8103e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103e72:	2b00      	cmp	r3, #0
 8103e74:	d04b      	beq.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e80:	d02e      	beq.n	8103ee0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8103e82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103e86:	d828      	bhi.n	8103eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e8c:	d02a      	beq.n	8103ee4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8103e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103e92:	d822      	bhi.n	8103eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103e94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e98:	d026      	beq.n	8103ee8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8103e9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103e9e:	d81c      	bhi.n	8103eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103ea4:	d010      	beq.n	8103ec8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8103ea6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103eaa:	d816      	bhi.n	8103eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103eac:	2b00      	cmp	r3, #0
 8103eae:	d01d      	beq.n	8103eec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8103eb0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103eb4:	d111      	bne.n	8103eda <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103eb6:	687b      	ldr	r3, [r7, #4]
 8103eb8:	3304      	adds	r3, #4
 8103eba:	2101      	movs	r1, #1
 8103ebc:	4618      	mov	r0, r3
 8103ebe:	f000 ff7d 	bl	8104dbc <RCCEx_PLL2_Config>
 8103ec2:	4603      	mov	r3, r0
 8103ec4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103ec6:	e012      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	3324      	adds	r3, #36	; 0x24
 8103ecc:	2101      	movs	r1, #1
 8103ece:	4618      	mov	r0, r3
 8103ed0:	f001 f826 	bl	8104f20 <RCCEx_PLL3_Config>
 8103ed4:	4603      	mov	r3, r0
 8103ed6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8103ed8:	e009      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8103eda:	2301      	movs	r3, #1
 8103edc:	75fb      	strb	r3, [r7, #23]
      break;
 8103ede:	e006      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103ee0:	bf00      	nop
 8103ee2:	e004      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103ee4:	bf00      	nop
 8103ee6:	e002      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103ee8:	bf00      	nop
 8103eea:	e000      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8103eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103eee:	7dfb      	ldrb	r3, [r7, #23]
 8103ef0:	2b00      	cmp	r3, #0
 8103ef2:	d10a      	bne.n	8103f0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103ef4:	4b2b      	ldr	r3, [pc, #172]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ef8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103f02:	4928      	ldr	r1, [pc, #160]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103f04:	4313      	orrs	r3, r2
 8103f06:	658b      	str	r3, [r1, #88]	; 0x58
 8103f08:	e001      	b.n	8103f0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f0a:	7dfb      	ldrb	r3, [r7, #23]
 8103f0c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	681b      	ldr	r3, [r3, #0]
 8103f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8103f16:	2b00      	cmp	r3, #0
 8103f18:	d02f      	beq.n	8103f7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f22:	d00e      	beq.n	8103f42 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103f28:	d814      	bhi.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8103f2a:	2b00      	cmp	r3, #0
 8103f2c:	d015      	beq.n	8103f5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103f32:	d10f      	bne.n	8103f54 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f34:	4b1b      	ldr	r3, [pc, #108]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f38:	4a1a      	ldr	r2, [pc, #104]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103f3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103f40:	e00c      	b.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103f42:	687b      	ldr	r3, [r7, #4]
 8103f44:	3304      	adds	r3, #4
 8103f46:	2101      	movs	r1, #1
 8103f48:	4618      	mov	r0, r3
 8103f4a:	f000 ff37 	bl	8104dbc <RCCEx_PLL2_Config>
 8103f4e:	4603      	mov	r3, r0
 8103f50:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103f52:	e003      	b.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103f54:	2301      	movs	r3, #1
 8103f56:	75fb      	strb	r3, [r7, #23]
      break;
 8103f58:	e000      	b.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8103f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f5c:	7dfb      	ldrb	r3, [r7, #23]
 8103f5e:	2b00      	cmp	r3, #0
 8103f60:	d109      	bne.n	8103f76 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103f62:	4b10      	ldr	r3, [pc, #64]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103f66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103f6e:	490d      	ldr	r1, [pc, #52]	; (8103fa4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103f70:	4313      	orrs	r3, r2
 8103f72:	650b      	str	r3, [r1, #80]	; 0x50
 8103f74:	e001      	b.n	8103f7a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f76:	7dfb      	ldrb	r3, [r7, #23]
 8103f78:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103f7a:	687b      	ldr	r3, [r7, #4]
 8103f7c:	681b      	ldr	r3, [r3, #0]
 8103f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103f82:	2b00      	cmp	r3, #0
 8103f84:	d033      	beq.n	8103fee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103f8a:	2b03      	cmp	r3, #3
 8103f8c:	d81c      	bhi.n	8103fc8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103f8e:	a201      	add	r2, pc, #4	; (adr r2, 8103f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8103f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f94:	08103fcf 	.word	0x08103fcf
 8103f98:	08103fa9 	.word	0x08103fa9
 8103f9c:	08103fb7 	.word	0x08103fb7
 8103fa0:	08103fcf 	.word	0x08103fcf
 8103fa4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fa8:	4bb9      	ldr	r3, [pc, #740]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fac:	4ab8      	ldr	r2, [pc, #736]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103fb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103fb4:	e00c      	b.n	8103fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	3304      	adds	r3, #4
 8103fba:	2102      	movs	r1, #2
 8103fbc:	4618      	mov	r0, r3
 8103fbe:	f000 fefd 	bl	8104dbc <RCCEx_PLL2_Config>
 8103fc2:	4603      	mov	r3, r0
 8103fc4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8103fc6:	e003      	b.n	8103fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103fc8:	2301      	movs	r3, #1
 8103fca:	75fb      	strb	r3, [r7, #23]
      break;
 8103fcc:	e000      	b.n	8103fd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8103fce:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103fd0:	7dfb      	ldrb	r3, [r7, #23]
 8103fd2:	2b00      	cmp	r3, #0
 8103fd4:	d109      	bne.n	8103fea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103fd6:	4bae      	ldr	r3, [pc, #696]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103fda:	f023 0203 	bic.w	r2, r3, #3
 8103fde:	687b      	ldr	r3, [r7, #4]
 8103fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103fe2:	49ab      	ldr	r1, [pc, #684]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103fe4:	4313      	orrs	r3, r2
 8103fe6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8103fe8:	e001      	b.n	8103fee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fea:	7dfb      	ldrb	r3, [r7, #23]
 8103fec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103fee:	687b      	ldr	r3, [r7, #4]
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8103ff6:	2b00      	cmp	r3, #0
 8103ff8:	f000 8088 	beq.w	810410c <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103ffc:	4ba5      	ldr	r3, [pc, #660]	; (8104294 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103ffe:	681b      	ldr	r3, [r3, #0]
 8104000:	4aa4      	ldr	r2, [pc, #656]	; (8104294 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8104002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104006:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8104008:	f7fe ff30 	bl	8102e6c <HAL_GetTick>
 810400c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810400e:	e009      	b.n	8104024 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104010:	f7fe ff2c 	bl	8102e6c <HAL_GetTick>
 8104014:	4602      	mov	r2, r0
 8104016:	693b      	ldr	r3, [r7, #16]
 8104018:	1ad3      	subs	r3, r2, r3
 810401a:	2b64      	cmp	r3, #100	; 0x64
 810401c:	d902      	bls.n	8104024 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 810401e:	2303      	movs	r3, #3
 8104020:	75fb      	strb	r3, [r7, #23]
        break;
 8104022:	e005      	b.n	8104030 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104024:	4b9b      	ldr	r3, [pc, #620]	; (8104294 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8104026:	681b      	ldr	r3, [r3, #0]
 8104028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810402c:	2b00      	cmp	r3, #0
 810402e:	d0ef      	beq.n	8104010 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104030:	7dfb      	ldrb	r3, [r7, #23]
 8104032:	2b00      	cmp	r3, #0
 8104034:	d168      	bne.n	8104108 <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104036:	4b96      	ldr	r3, [pc, #600]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104038:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810403a:	687b      	ldr	r3, [r7, #4]
 810403c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104040:	4053      	eors	r3, r2
 8104042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104046:	2b00      	cmp	r3, #0
 8104048:	d013      	beq.n	8104072 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810404a:	4b91      	ldr	r3, [pc, #580]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810404c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810404e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104052:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104054:	4b8e      	ldr	r3, [pc, #568]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104058:	4a8d      	ldr	r2, [pc, #564]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810405e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104060:	4b8b      	ldr	r3, [pc, #556]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104064:	4a8a      	ldr	r2, [pc, #552]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810406a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810406c:	4a88      	ldr	r2, [pc, #544]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810406e:	68fb      	ldr	r3, [r7, #12]
 8104070:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104072:	687b      	ldr	r3, [r7, #4]
 8104074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810407c:	d115      	bne.n	81040aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810407e:	f7fe fef5 	bl	8102e6c <HAL_GetTick>
 8104082:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104084:	e00b      	b.n	810409e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8104086:	f7fe fef1 	bl	8102e6c <HAL_GetTick>
 810408a:	4602      	mov	r2, r0
 810408c:	693b      	ldr	r3, [r7, #16]
 810408e:	1ad3      	subs	r3, r2, r3
 8104090:	f241 3288 	movw	r2, #5000	; 0x1388
 8104094:	4293      	cmp	r3, r2
 8104096:	d902      	bls.n	810409e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8104098:	2303      	movs	r3, #3
 810409a:	75fb      	strb	r3, [r7, #23]
            break;
 810409c:	e005      	b.n	81040aa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 810409e:	4b7c      	ldr	r3, [pc, #496]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81040a2:	f003 0302 	and.w	r3, r3, #2
 81040a6:	2b00      	cmp	r3, #0
 81040a8:	d0ed      	beq.n	8104086 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81040aa:	7dfb      	ldrb	r3, [r7, #23]
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d128      	bne.n	8104102 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81040ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81040be:	d10f      	bne.n	81040e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81040c0:	4b73      	ldr	r3, [pc, #460]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81040c2:	691b      	ldr	r3, [r3, #16]
 81040c4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81040c8:	687b      	ldr	r3, [r7, #4]
 81040ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040ce:	091b      	lsrs	r3, r3, #4
 81040d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81040d4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81040d8:	496d      	ldr	r1, [pc, #436]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81040da:	4313      	orrs	r3, r2
 81040dc:	610b      	str	r3, [r1, #16]
 81040de:	e005      	b.n	81040ec <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81040e0:	4b6b      	ldr	r3, [pc, #428]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81040e2:	691b      	ldr	r3, [r3, #16]
 81040e4:	4a6a      	ldr	r2, [pc, #424]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81040e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81040ea:	6113      	str	r3, [r2, #16]
 81040ec:	4b68      	ldr	r3, [pc, #416]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81040ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81040f0:	687b      	ldr	r3, [r7, #4]
 81040f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81040f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81040fa:	4965      	ldr	r1, [pc, #404]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81040fc:	4313      	orrs	r3, r2
 81040fe:	670b      	str	r3, [r1, #112]	; 0x70
 8104100:	e004      	b.n	810410c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104102:	7dfb      	ldrb	r3, [r7, #23]
 8104104:	75bb      	strb	r3, [r7, #22]
 8104106:	e001      	b.n	810410c <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104108:	7dfb      	ldrb	r3, [r7, #23]
 810410a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	681b      	ldr	r3, [r3, #0]
 8104110:	f003 0301 	and.w	r3, r3, #1
 8104114:	2b00      	cmp	r3, #0
 8104116:	d07e      	beq.n	8104216 <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810411c:	2b28      	cmp	r3, #40	; 0x28
 810411e:	d867      	bhi.n	81041f0 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104120:	a201      	add	r2, pc, #4	; (adr r2, 8104128 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104126:	bf00      	nop
 8104128:	081041f7 	.word	0x081041f7
 810412c:	081041f1 	.word	0x081041f1
 8104130:	081041f1 	.word	0x081041f1
 8104134:	081041f1 	.word	0x081041f1
 8104138:	081041f1 	.word	0x081041f1
 810413c:	081041f1 	.word	0x081041f1
 8104140:	081041f1 	.word	0x081041f1
 8104144:	081041f1 	.word	0x081041f1
 8104148:	081041cd 	.word	0x081041cd
 810414c:	081041f1 	.word	0x081041f1
 8104150:	081041f1 	.word	0x081041f1
 8104154:	081041f1 	.word	0x081041f1
 8104158:	081041f1 	.word	0x081041f1
 810415c:	081041f1 	.word	0x081041f1
 8104160:	081041f1 	.word	0x081041f1
 8104164:	081041f1 	.word	0x081041f1
 8104168:	081041df 	.word	0x081041df
 810416c:	081041f1 	.word	0x081041f1
 8104170:	081041f1 	.word	0x081041f1
 8104174:	081041f1 	.word	0x081041f1
 8104178:	081041f1 	.word	0x081041f1
 810417c:	081041f1 	.word	0x081041f1
 8104180:	081041f1 	.word	0x081041f1
 8104184:	081041f1 	.word	0x081041f1
 8104188:	081041f7 	.word	0x081041f7
 810418c:	081041f1 	.word	0x081041f1
 8104190:	081041f1 	.word	0x081041f1
 8104194:	081041f1 	.word	0x081041f1
 8104198:	081041f1 	.word	0x081041f1
 810419c:	081041f1 	.word	0x081041f1
 81041a0:	081041f1 	.word	0x081041f1
 81041a4:	081041f1 	.word	0x081041f1
 81041a8:	081041f7 	.word	0x081041f7
 81041ac:	081041f1 	.word	0x081041f1
 81041b0:	081041f1 	.word	0x081041f1
 81041b4:	081041f1 	.word	0x081041f1
 81041b8:	081041f1 	.word	0x081041f1
 81041bc:	081041f1 	.word	0x081041f1
 81041c0:	081041f1 	.word	0x081041f1
 81041c4:	081041f1 	.word	0x081041f1
 81041c8:	081041f7 	.word	0x081041f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	3304      	adds	r3, #4
 81041d0:	2101      	movs	r1, #1
 81041d2:	4618      	mov	r0, r3
 81041d4:	f000 fdf2 	bl	8104dbc <RCCEx_PLL2_Config>
 81041d8:	4603      	mov	r3, r0
 81041da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81041dc:	e00c      	b.n	81041f8 <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81041de:	687b      	ldr	r3, [r7, #4]
 81041e0:	3324      	adds	r3, #36	; 0x24
 81041e2:	2101      	movs	r1, #1
 81041e4:	4618      	mov	r0, r3
 81041e6:	f000 fe9b 	bl	8104f20 <RCCEx_PLL3_Config>
 81041ea:	4603      	mov	r3, r0
 81041ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81041ee:	e003      	b.n	81041f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81041f0:	2301      	movs	r3, #1
 81041f2:	75fb      	strb	r3, [r7, #23]
      break;
 81041f4:	e000      	b.n	81041f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81041f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041f8:	7dfb      	ldrb	r3, [r7, #23]
 81041fa:	2b00      	cmp	r3, #0
 81041fc:	d109      	bne.n	8104212 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 81041fe:	4b24      	ldr	r3, [pc, #144]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104202:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810420a:	4921      	ldr	r1, [pc, #132]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810420c:	4313      	orrs	r3, r2
 810420e:	654b      	str	r3, [r1, #84]	; 0x54
 8104210:	e001      	b.n	8104216 <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104212:	7dfb      	ldrb	r3, [r7, #23]
 8104214:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104216:	687b      	ldr	r3, [r7, #4]
 8104218:	681b      	ldr	r3, [r3, #0]
 810421a:	f003 0302 	and.w	r3, r3, #2
 810421e:	2b00      	cmp	r3, #0
 8104220:	d03c      	beq.n	810429c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104222:	687b      	ldr	r3, [r7, #4]
 8104224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104226:	2b05      	cmp	r3, #5
 8104228:	d820      	bhi.n	810426c <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810422a:	a201      	add	r2, pc, #4	; (adr r2, 8104230 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 810422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104230:	08104273 	.word	0x08104273
 8104234:	08104249 	.word	0x08104249
 8104238:	0810425b 	.word	0x0810425b
 810423c:	08104273 	.word	0x08104273
 8104240:	08104273 	.word	0x08104273
 8104244:	08104273 	.word	0x08104273
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104248:	687b      	ldr	r3, [r7, #4]
 810424a:	3304      	adds	r3, #4
 810424c:	2101      	movs	r1, #1
 810424e:	4618      	mov	r0, r3
 8104250:	f000 fdb4 	bl	8104dbc <RCCEx_PLL2_Config>
 8104254:	4603      	mov	r3, r0
 8104256:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8104258:	e00c      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	3324      	adds	r3, #36	; 0x24
 810425e:	2101      	movs	r1, #1
 8104260:	4618      	mov	r0, r3
 8104262:	f000 fe5d 	bl	8104f20 <RCCEx_PLL3_Config>
 8104266:	4603      	mov	r3, r0
 8104268:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810426a:	e003      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810426c:	2301      	movs	r3, #1
 810426e:	75fb      	strb	r3, [r7, #23]
      break;
 8104270:	e000      	b.n	8104274 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8104272:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104274:	7dfb      	ldrb	r3, [r7, #23]
 8104276:	2b00      	cmp	r3, #0
 8104278:	d10e      	bne.n	8104298 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810427a:	4b05      	ldr	r3, [pc, #20]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810427c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810427e:	f023 0207 	bic.w	r2, r3, #7
 8104282:	687b      	ldr	r3, [r7, #4]
 8104284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104286:	4902      	ldr	r1, [pc, #8]	; (8104290 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104288:	4313      	orrs	r3, r2
 810428a:	654b      	str	r3, [r1, #84]	; 0x54
 810428c:	e006      	b.n	810429c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 810428e:	bf00      	nop
 8104290:	58024400 	.word	0x58024400
 8104294:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104298:	7dfb      	ldrb	r3, [r7, #23]
 810429a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810429c:	687b      	ldr	r3, [r7, #4]
 810429e:	681b      	ldr	r3, [r3, #0]
 81042a0:	f003 0304 	and.w	r3, r3, #4
 81042a4:	2b00      	cmp	r3, #0
 81042a6:	d039      	beq.n	810431c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81042a8:	687b      	ldr	r3, [r7, #4]
 81042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81042ae:	2b05      	cmp	r3, #5
 81042b0:	d820      	bhi.n	81042f4 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81042b2:	a201      	add	r2, pc, #4	; (adr r2, 81042b8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81042b8:	081042fb 	.word	0x081042fb
 81042bc:	081042d1 	.word	0x081042d1
 81042c0:	081042e3 	.word	0x081042e3
 81042c4:	081042fb 	.word	0x081042fb
 81042c8:	081042fb 	.word	0x081042fb
 81042cc:	081042fb 	.word	0x081042fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81042d0:	687b      	ldr	r3, [r7, #4]
 81042d2:	3304      	adds	r3, #4
 81042d4:	2101      	movs	r1, #1
 81042d6:	4618      	mov	r0, r3
 81042d8:	f000 fd70 	bl	8104dbc <RCCEx_PLL2_Config>
 81042dc:	4603      	mov	r3, r0
 81042de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81042e0:	e00c      	b.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	3324      	adds	r3, #36	; 0x24
 81042e6:	2101      	movs	r1, #1
 81042e8:	4618      	mov	r0, r3
 81042ea:	f000 fe19 	bl	8104f20 <RCCEx_PLL3_Config>
 81042ee:	4603      	mov	r3, r0
 81042f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81042f2:	e003      	b.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81042f4:	2301      	movs	r3, #1
 81042f6:	75fb      	strb	r3, [r7, #23]
      break;
 81042f8:	e000      	b.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81042fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042fc:	7dfb      	ldrb	r3, [r7, #23]
 81042fe:	2b00      	cmp	r3, #0
 8104300:	d10a      	bne.n	8104318 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104302:	4bb7      	ldr	r3, [pc, #732]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104306:	f023 0207 	bic.w	r2, r3, #7
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104310:	49b3      	ldr	r1, [pc, #716]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104312:	4313      	orrs	r3, r2
 8104314:	658b      	str	r3, [r1, #88]	; 0x58
 8104316:	e001      	b.n	810431c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104318:	7dfb      	ldrb	r3, [r7, #23]
 810431a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810431c:	687b      	ldr	r3, [r7, #4]
 810431e:	681b      	ldr	r3, [r3, #0]
 8104320:	f003 0320 	and.w	r3, r3, #32
 8104324:	2b00      	cmp	r3, #0
 8104326:	d04b      	beq.n	81043c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810432e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104332:	d02e      	beq.n	8104392 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8104334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104338:	d828      	bhi.n	810438c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810433e:	d02a      	beq.n	8104396 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104344:	d822      	bhi.n	810438c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810434a:	d026      	beq.n	810439a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 810434c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104350:	d81c      	bhi.n	810438c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104356:	d010      	beq.n	810437a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8104358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810435c:	d816      	bhi.n	810438c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810435e:	2b00      	cmp	r3, #0
 8104360:	d01d      	beq.n	810439e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104366:	d111      	bne.n	810438c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104368:	687b      	ldr	r3, [r7, #4]
 810436a:	3304      	adds	r3, #4
 810436c:	2100      	movs	r1, #0
 810436e:	4618      	mov	r0, r3
 8104370:	f000 fd24 	bl	8104dbc <RCCEx_PLL2_Config>
 8104374:	4603      	mov	r3, r0
 8104376:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8104378:	e012      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	3324      	adds	r3, #36	; 0x24
 810437e:	2102      	movs	r1, #2
 8104380:	4618      	mov	r0, r3
 8104382:	f000 fdcd 	bl	8104f20 <RCCEx_PLL3_Config>
 8104386:	4603      	mov	r3, r0
 8104388:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810438a:	e009      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810438c:	2301      	movs	r3, #1
 810438e:	75fb      	strb	r3, [r7, #23]
      break;
 8104390:	e006      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104392:	bf00      	nop
 8104394:	e004      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104396:	bf00      	nop
 8104398:	e002      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810439a:	bf00      	nop
 810439c:	e000      	b.n	81043a0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810439e:	bf00      	nop
    }

    if(ret == HAL_OK)
 81043a0:	7dfb      	ldrb	r3, [r7, #23]
 81043a2:	2b00      	cmp	r3, #0
 81043a4:	d10a      	bne.n	81043bc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81043a6:	4b8e      	ldr	r3, [pc, #568]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81043aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81043ae:	687b      	ldr	r3, [r7, #4]
 81043b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81043b4:	498a      	ldr	r1, [pc, #552]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81043b6:	4313      	orrs	r3, r2
 81043b8:	654b      	str	r3, [r1, #84]	; 0x54
 81043ba:	e001      	b.n	81043c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043bc:	7dfb      	ldrb	r3, [r7, #23]
 81043be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81043c0:	687b      	ldr	r3, [r7, #4]
 81043c2:	681b      	ldr	r3, [r3, #0]
 81043c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81043c8:	2b00      	cmp	r3, #0
 81043ca:	d04b      	beq.n	8104464 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81043d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81043d6:	d02e      	beq.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81043d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81043dc:	d828      	bhi.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81043de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81043e2:	d02a      	beq.n	810443a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81043e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81043e8:	d822      	bhi.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81043ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81043ee:	d026      	beq.n	810443e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81043f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81043f4:	d81c      	bhi.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81043f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81043fa:	d010      	beq.n	810441e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 81043fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104400:	d816      	bhi.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104402:	2b00      	cmp	r3, #0
 8104404:	d01d      	beq.n	8104442 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8104406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810440a:	d111      	bne.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810440c:	687b      	ldr	r3, [r7, #4]
 810440e:	3304      	adds	r3, #4
 8104410:	2100      	movs	r1, #0
 8104412:	4618      	mov	r0, r3
 8104414:	f000 fcd2 	bl	8104dbc <RCCEx_PLL2_Config>
 8104418:	4603      	mov	r3, r0
 810441a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810441c:	e012      	b.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	3324      	adds	r3, #36	; 0x24
 8104422:	2102      	movs	r1, #2
 8104424:	4618      	mov	r0, r3
 8104426:	f000 fd7b 	bl	8104f20 <RCCEx_PLL3_Config>
 810442a:	4603      	mov	r3, r0
 810442c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 810442e:	e009      	b.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104430:	2301      	movs	r3, #1
 8104432:	75fb      	strb	r3, [r7, #23]
      break;
 8104434:	e006      	b.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104436:	bf00      	nop
 8104438:	e004      	b.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810443a:	bf00      	nop
 810443c:	e002      	b.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810443e:	bf00      	nop
 8104440:	e000      	b.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104442:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104444:	7dfb      	ldrb	r3, [r7, #23]
 8104446:	2b00      	cmp	r3, #0
 8104448:	d10a      	bne.n	8104460 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810444a:	4b65      	ldr	r3, [pc, #404]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810444c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810444e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8104458:	4961      	ldr	r1, [pc, #388]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810445a:	4313      	orrs	r3, r2
 810445c:	658b      	str	r3, [r1, #88]	; 0x58
 810445e:	e001      	b.n	8104464 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104460:	7dfb      	ldrb	r3, [r7, #23]
 8104462:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104464:	687b      	ldr	r3, [r7, #4]
 8104466:	681b      	ldr	r3, [r3, #0]
 8104468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810446c:	2b00      	cmp	r3, #0
 810446e:	d04b      	beq.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104476:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810447a:	d02e      	beq.n	81044da <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 810447c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104480:	d828      	bhi.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104486:	d02a      	beq.n	81044de <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8104488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810448c:	d822      	bhi.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810448e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104492:	d026      	beq.n	81044e2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104494:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104498:	d81c      	bhi.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810449a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810449e:	d010      	beq.n	81044c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81044a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044a4:	d816      	bhi.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81044a6:	2b00      	cmp	r3, #0
 81044a8:	d01d      	beq.n	81044e6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81044aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81044ae:	d111      	bne.n	81044d4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81044b0:	687b      	ldr	r3, [r7, #4]
 81044b2:	3304      	adds	r3, #4
 81044b4:	2100      	movs	r1, #0
 81044b6:	4618      	mov	r0, r3
 81044b8:	f000 fc80 	bl	8104dbc <RCCEx_PLL2_Config>
 81044bc:	4603      	mov	r3, r0
 81044be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81044c0:	e012      	b.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81044c2:	687b      	ldr	r3, [r7, #4]
 81044c4:	3324      	adds	r3, #36	; 0x24
 81044c6:	2102      	movs	r1, #2
 81044c8:	4618      	mov	r0, r3
 81044ca:	f000 fd29 	bl	8104f20 <RCCEx_PLL3_Config>
 81044ce:	4603      	mov	r3, r0
 81044d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81044d2:	e009      	b.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81044d4:	2301      	movs	r3, #1
 81044d6:	75fb      	strb	r3, [r7, #23]
      break;
 81044d8:	e006      	b.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81044da:	bf00      	nop
 81044dc:	e004      	b.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81044de:	bf00      	nop
 81044e0:	e002      	b.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81044e2:	bf00      	nop
 81044e4:	e000      	b.n	81044e8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81044e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 81044e8:	7dfb      	ldrb	r3, [r7, #23]
 81044ea:	2b00      	cmp	r3, #0
 81044ec:	d10a      	bne.n	8104504 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81044ee:	4b3c      	ldr	r3, [pc, #240]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81044f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81044f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81044f6:	687b      	ldr	r3, [r7, #4]
 81044f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81044fc:	4938      	ldr	r1, [pc, #224]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81044fe:	4313      	orrs	r3, r2
 8104500:	658b      	str	r3, [r1, #88]	; 0x58
 8104502:	e001      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104504:	7dfb      	ldrb	r3, [r7, #23]
 8104506:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	681b      	ldr	r3, [r3, #0]
 810450c:	f003 0308 	and.w	r3, r3, #8
 8104510:	2b00      	cmp	r3, #0
 8104512:	d01a      	beq.n	810454a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810451a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810451e:	d10a      	bne.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	3324      	adds	r3, #36	; 0x24
 8104524:	2102      	movs	r1, #2
 8104526:	4618      	mov	r0, r3
 8104528:	f000 fcfa 	bl	8104f20 <RCCEx_PLL3_Config>
 810452c:	4603      	mov	r3, r0
 810452e:	2b00      	cmp	r3, #0
 8104530:	d001      	beq.n	8104536 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8104532:	2301      	movs	r3, #1
 8104534:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104536:	4b2a      	ldr	r3, [pc, #168]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810453a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104544:	4926      	ldr	r1, [pc, #152]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104546:	4313      	orrs	r3, r2
 8104548:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810454a:	687b      	ldr	r3, [r7, #4]
 810454c:	681b      	ldr	r3, [r3, #0]
 810454e:	f003 0310 	and.w	r3, r3, #16
 8104552:	2b00      	cmp	r3, #0
 8104554:	d01a      	beq.n	810458c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810455c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104560:	d10a      	bne.n	8104578 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104562:	687b      	ldr	r3, [r7, #4]
 8104564:	3324      	adds	r3, #36	; 0x24
 8104566:	2102      	movs	r1, #2
 8104568:	4618      	mov	r0, r3
 810456a:	f000 fcd9 	bl	8104f20 <RCCEx_PLL3_Config>
 810456e:	4603      	mov	r3, r0
 8104570:	2b00      	cmp	r3, #0
 8104572:	d001      	beq.n	8104578 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8104574:	2301      	movs	r3, #1
 8104576:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8104578:	4b19      	ldr	r3, [pc, #100]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810457c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104586:	4916      	ldr	r1, [pc, #88]	; (81045e0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104588:	4313      	orrs	r3, r2
 810458a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810458c:	687b      	ldr	r3, [r7, #4]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104594:	2b00      	cmp	r3, #0
 8104596:	d036      	beq.n	8104606 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8104598:	687b      	ldr	r3, [r7, #4]
 810459a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810459e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81045a2:	d01f      	beq.n	81045e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 81045a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81045a8:	d817      	bhi.n	81045da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81045aa:	2b00      	cmp	r3, #0
 81045ac:	d003      	beq.n	81045b6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81045ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81045b2:	d009      	beq.n	81045c8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81045b4:	e011      	b.n	81045da <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	3304      	adds	r3, #4
 81045ba:	2100      	movs	r1, #0
 81045bc:	4618      	mov	r0, r3
 81045be:	f000 fbfd 	bl	8104dbc <RCCEx_PLL2_Config>
 81045c2:	4603      	mov	r3, r0
 81045c4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81045c6:	e00e      	b.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	3324      	adds	r3, #36	; 0x24
 81045cc:	2102      	movs	r1, #2
 81045ce:	4618      	mov	r0, r3
 81045d0:	f000 fca6 	bl	8104f20 <RCCEx_PLL3_Config>
 81045d4:	4603      	mov	r3, r0
 81045d6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81045d8:	e005      	b.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81045da:	2301      	movs	r3, #1
 81045dc:	75fb      	strb	r3, [r7, #23]
      break;
 81045de:	e002      	b.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81045e0:	58024400 	.word	0x58024400
      break;
 81045e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 81045e6:	7dfb      	ldrb	r3, [r7, #23]
 81045e8:	2b00      	cmp	r3, #0
 81045ea:	d10a      	bne.n	8104602 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81045ec:	4b93      	ldr	r3, [pc, #588]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81045f4:	687b      	ldr	r3, [r7, #4]
 81045f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81045fa:	4990      	ldr	r1, [pc, #576]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81045fc:	4313      	orrs	r3, r2
 81045fe:	658b      	str	r3, [r1, #88]	; 0x58
 8104600:	e001      	b.n	8104606 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104602:	7dfb      	ldrb	r3, [r7, #23]
 8104604:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810460e:	2b00      	cmp	r3, #0
 8104610:	d033      	beq.n	810467a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104618:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810461c:	d01c      	beq.n	8104658 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 810461e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104622:	d816      	bhi.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8104624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104628:	d003      	beq.n	8104632 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810462a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810462e:	d007      	beq.n	8104640 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8104630:	e00f      	b.n	8104652 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104632:	4b82      	ldr	r3, [pc, #520]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104636:	4a81      	ldr	r2, [pc, #516]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810463c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 810463e:	e00c      	b.n	810465a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104640:	687b      	ldr	r3, [r7, #4]
 8104642:	3324      	adds	r3, #36	; 0x24
 8104644:	2101      	movs	r1, #1
 8104646:	4618      	mov	r0, r3
 8104648:	f000 fc6a 	bl	8104f20 <RCCEx_PLL3_Config>
 810464c:	4603      	mov	r3, r0
 810464e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104650:	e003      	b.n	810465a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104652:	2301      	movs	r3, #1
 8104654:	75fb      	strb	r3, [r7, #23]
      break;
 8104656:	e000      	b.n	810465a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8104658:	bf00      	nop
    }

    if(ret == HAL_OK)
 810465a:	7dfb      	ldrb	r3, [r7, #23]
 810465c:	2b00      	cmp	r3, #0
 810465e:	d10a      	bne.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104660:	4b76      	ldr	r3, [pc, #472]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8104668:	687b      	ldr	r3, [r7, #4]
 810466a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810466e:	4973      	ldr	r1, [pc, #460]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104670:	4313      	orrs	r3, r2
 8104672:	654b      	str	r3, [r1, #84]	; 0x54
 8104674:	e001      	b.n	810467a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104676:	7dfb      	ldrb	r3, [r7, #23]
 8104678:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	681b      	ldr	r3, [r3, #0]
 810467e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104682:	2b00      	cmp	r3, #0
 8104684:	d029      	beq.n	81046da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810468a:	2b00      	cmp	r3, #0
 810468c:	d003      	beq.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 810468e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104692:	d007      	beq.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8104694:	e00f      	b.n	81046b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104696:	4b69      	ldr	r3, [pc, #420]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810469a:	4a68      	ldr	r2, [pc, #416]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810469c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81046a2:	e00b      	b.n	81046bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	3304      	adds	r3, #4
 81046a8:	2102      	movs	r1, #2
 81046aa:	4618      	mov	r0, r3
 81046ac:	f000 fb86 	bl	8104dbc <RCCEx_PLL2_Config>
 81046b0:	4603      	mov	r3, r0
 81046b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81046b4:	e002      	b.n	81046bc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81046b6:	2301      	movs	r3, #1
 81046b8:	75fb      	strb	r3, [r7, #23]
      break;
 81046ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046bc:	7dfb      	ldrb	r3, [r7, #23]
 81046be:	2b00      	cmp	r3, #0
 81046c0:	d109      	bne.n	81046d6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81046c2:	4b5e      	ldr	r3, [pc, #376]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81046c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81046ce:	495b      	ldr	r1, [pc, #364]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81046d0:	4313      	orrs	r3, r2
 81046d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 81046d4:	e001      	b.n	81046da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046d6:	7dfb      	ldrb	r3, [r7, #23]
 81046d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81046da:	687b      	ldr	r3, [r7, #4]
 81046dc:	681b      	ldr	r3, [r3, #0]
 81046de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81046e2:	2b00      	cmp	r3, #0
 81046e4:	d00a      	beq.n	81046fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81046e6:	687b      	ldr	r3, [r7, #4]
 81046e8:	3324      	adds	r3, #36	; 0x24
 81046ea:	2102      	movs	r1, #2
 81046ec:	4618      	mov	r0, r3
 81046ee:	f000 fc17 	bl	8104f20 <RCCEx_PLL3_Config>
 81046f2:	4603      	mov	r3, r0
 81046f4:	2b00      	cmp	r3, #0
 81046f6:	d001      	beq.n	81046fc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81046f8:	2301      	movs	r3, #1
 81046fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81046fc:	687b      	ldr	r3, [r7, #4]
 81046fe:	681b      	ldr	r3, [r3, #0]
 8104700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104704:	2b00      	cmp	r3, #0
 8104706:	d030      	beq.n	810476a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104708:	687b      	ldr	r3, [r7, #4]
 810470a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810470c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104710:	d017      	beq.n	8104742 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8104712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104716:	d811      	bhi.n	810473c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810471c:	d013      	beq.n	8104746 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 810471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104722:	d80b      	bhi.n	810473c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104724:	2b00      	cmp	r3, #0
 8104726:	d010      	beq.n	810474a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104728:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810472c:	d106      	bne.n	810473c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810472e:	4b43      	ldr	r3, [pc, #268]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104732:	4a42      	ldr	r2, [pc, #264]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810473a:	e007      	b.n	810474c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810473c:	2301      	movs	r3, #1
 810473e:	75fb      	strb	r3, [r7, #23]
      break;
 8104740:	e004      	b.n	810474c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104742:	bf00      	nop
 8104744:	e002      	b.n	810474c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104746:	bf00      	nop
 8104748:	e000      	b.n	810474c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810474a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810474c:	7dfb      	ldrb	r3, [r7, #23]
 810474e:	2b00      	cmp	r3, #0
 8104750:	d109      	bne.n	8104766 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104752:	4b3a      	ldr	r3, [pc, #232]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104756:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810475a:	687b      	ldr	r3, [r7, #4]
 810475c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810475e:	4937      	ldr	r1, [pc, #220]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104760:	4313      	orrs	r3, r2
 8104762:	654b      	str	r3, [r1, #84]	; 0x54
 8104764:	e001      	b.n	810476a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104766:	7dfb      	ldrb	r3, [r7, #23]
 8104768:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810476a:	687b      	ldr	r3, [r7, #4]
 810476c:	681b      	ldr	r3, [r3, #0]
 810476e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104772:	2b00      	cmp	r3, #0
 8104774:	d008      	beq.n	8104788 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104776:	4b31      	ldr	r3, [pc, #196]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810477a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 810477e:	687b      	ldr	r3, [r7, #4]
 8104780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104782:	492e      	ldr	r1, [pc, #184]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104784:	4313      	orrs	r3, r2
 8104786:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	681b      	ldr	r3, [r3, #0]
 810478c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104790:	2b00      	cmp	r3, #0
 8104792:	d009      	beq.n	81047a8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104794:	4b29      	ldr	r3, [pc, #164]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104796:	691b      	ldr	r3, [r3, #16]
 8104798:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810479c:	687b      	ldr	r3, [r7, #4]
 810479e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81047a2:	4926      	ldr	r1, [pc, #152]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81047a4:	4313      	orrs	r3, r2
 81047a6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81047a8:	687b      	ldr	r3, [r7, #4]
 81047aa:	681b      	ldr	r3, [r3, #0]
 81047ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81047b0:	2b00      	cmp	r3, #0
 81047b2:	d008      	beq.n	81047c6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81047b4:	4b21      	ldr	r3, [pc, #132]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81047b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81047b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81047bc:	687b      	ldr	r3, [r7, #4]
 81047be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81047c0:	491e      	ldr	r1, [pc, #120]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81047c2:	4313      	orrs	r3, r2
 81047c4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	681b      	ldr	r3, [r3, #0]
 81047ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81047ce:	2b00      	cmp	r3, #0
 81047d0:	d00d      	beq.n	81047ee <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81047d2:	4b1a      	ldr	r3, [pc, #104]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81047d4:	691b      	ldr	r3, [r3, #16]
 81047d6:	4a19      	ldr	r2, [pc, #100]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81047d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81047dc:	6113      	str	r3, [r2, #16]
 81047de:	4b17      	ldr	r3, [pc, #92]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81047e0:	691a      	ldr	r2, [r3, #16]
 81047e2:	687b      	ldr	r3, [r7, #4]
 81047e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81047e8:	4914      	ldr	r1, [pc, #80]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81047ea:	4313      	orrs	r3, r2
 81047ec:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81047ee:	687b      	ldr	r3, [r7, #4]
 81047f0:	681b      	ldr	r3, [r3, #0]
 81047f2:	2b00      	cmp	r3, #0
 81047f4:	da08      	bge.n	8104808 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81047f6:	4b11      	ldr	r3, [pc, #68]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81047f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81047fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 81047fe:	687b      	ldr	r3, [r7, #4]
 8104800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104802:	490e      	ldr	r1, [pc, #56]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104804:	4313      	orrs	r3, r2
 8104806:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	681b      	ldr	r3, [r3, #0]
 810480c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104810:	2b00      	cmp	r3, #0
 8104812:	d009      	beq.n	8104828 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104814:	4b09      	ldr	r3, [pc, #36]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104818:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 810481c:	687b      	ldr	r3, [r7, #4]
 810481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104822:	4906      	ldr	r1, [pc, #24]	; (810483c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104824:	4313      	orrs	r3, r2
 8104826:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104828:	7dbb      	ldrb	r3, [r7, #22]
 810482a:	2b00      	cmp	r3, #0
 810482c:	d101      	bne.n	8104832 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 810482e:	2300      	movs	r3, #0
 8104830:	e000      	b.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8104832:	2301      	movs	r3, #1
}
 8104834:	4618      	mov	r0, r3
 8104836:	3718      	adds	r7, #24
 8104838:	46bd      	mov	sp, r7
 810483a:	bd80      	pop	{r7, pc}
 810483c:	58024400 	.word	0x58024400

08104840 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104840:	b580      	push	{r7, lr}
 8104842:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104844:	f7ff f85e 	bl	8103904 <HAL_RCC_GetHCLKFreq>
 8104848:	4602      	mov	r2, r0
 810484a:	4b06      	ldr	r3, [pc, #24]	; (8104864 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810484c:	6a1b      	ldr	r3, [r3, #32]
 810484e:	091b      	lsrs	r3, r3, #4
 8104850:	f003 0307 	and.w	r3, r3, #7
 8104854:	4904      	ldr	r1, [pc, #16]	; (8104868 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104856:	5ccb      	ldrb	r3, [r1, r3]
 8104858:	f003 031f 	and.w	r3, r3, #31
 810485c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104860:	4618      	mov	r0, r3
 8104862:	bd80      	pop	{r7, pc}
 8104864:	58024400 	.word	0x58024400
 8104868:	0810e108 	.word	0x0810e108

0810486c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 810486c:	b480      	push	{r7}
 810486e:	b089      	sub	sp, #36	; 0x24
 8104870:	af00      	add	r7, sp, #0
 8104872:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104874:	4ba1      	ldr	r3, [pc, #644]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104878:	f003 0303 	and.w	r3, r3, #3
 810487c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 810487e:	4b9f      	ldr	r3, [pc, #636]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104882:	0b1b      	lsrs	r3, r3, #12
 8104884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104888:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810488a:	4b9c      	ldr	r3, [pc, #624]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810488e:	091b      	lsrs	r3, r3, #4
 8104890:	f003 0301 	and.w	r3, r3, #1
 8104894:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8104896:	4b99      	ldr	r3, [pc, #612]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810489a:	08db      	lsrs	r3, r3, #3
 810489c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81048a0:	693a      	ldr	r2, [r7, #16]
 81048a2:	fb02 f303 	mul.w	r3, r2, r3
 81048a6:	ee07 3a90 	vmov	s15, r3
 81048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81048ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81048b2:	697b      	ldr	r3, [r7, #20]
 81048b4:	2b00      	cmp	r3, #0
 81048b6:	f000 8111 	beq.w	8104adc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81048ba:	69bb      	ldr	r3, [r7, #24]
 81048bc:	2b02      	cmp	r3, #2
 81048be:	f000 8083 	beq.w	81049c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81048c2:	69bb      	ldr	r3, [r7, #24]
 81048c4:	2b02      	cmp	r3, #2
 81048c6:	f200 80a1 	bhi.w	8104a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81048ca:	69bb      	ldr	r3, [r7, #24]
 81048cc:	2b00      	cmp	r3, #0
 81048ce:	d003      	beq.n	81048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81048d0:	69bb      	ldr	r3, [r7, #24]
 81048d2:	2b01      	cmp	r3, #1
 81048d4:	d056      	beq.n	8104984 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81048d6:	e099      	b.n	8104a0c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81048d8:	4b88      	ldr	r3, [pc, #544]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048da:	681b      	ldr	r3, [r3, #0]
 81048dc:	f003 0320 	and.w	r3, r3, #32
 81048e0:	2b00      	cmp	r3, #0
 81048e2:	d02d      	beq.n	8104940 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81048e4:	4b85      	ldr	r3, [pc, #532]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	08db      	lsrs	r3, r3, #3
 81048ea:	f003 0303 	and.w	r3, r3, #3
 81048ee:	4a84      	ldr	r2, [pc, #528]	; (8104b00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81048f0:	fa22 f303 	lsr.w	r3, r2, r3
 81048f4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81048f6:	68bb      	ldr	r3, [r7, #8]
 81048f8:	ee07 3a90 	vmov	s15, r3
 81048fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104900:	697b      	ldr	r3, [r7, #20]
 8104902:	ee07 3a90 	vmov	s15, r3
 8104906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810490a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810490e:	4b7b      	ldr	r3, [pc, #492]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104916:	ee07 3a90 	vmov	s15, r3
 810491a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810491e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104922:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810492a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810492e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104936:	ee67 7a27 	vmul.f32	s15, s14, s15
 810493a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810493e:	e087      	b.n	8104a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104940:	697b      	ldr	r3, [r7, #20]
 8104942:	ee07 3a90 	vmov	s15, r3
 8104946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810494a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104b08 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 810494e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104952:	4b6a      	ldr	r3, [pc, #424]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810495a:	ee07 3a90 	vmov	s15, r3
 810495e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104962:	ed97 6a03 	vldr	s12, [r7, #12]
 8104966:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810496a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810496e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810497e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104982:	e065      	b.n	8104a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104984:	697b      	ldr	r3, [r7, #20]
 8104986:	ee07 3a90 	vmov	s15, r3
 810498a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810498e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104b0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104996:	4b59      	ldr	r3, [pc, #356]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810499e:	ee07 3a90 	vmov	s15, r3
 81049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049a6:	ed97 6a03 	vldr	s12, [r7, #12]
 81049aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 81049c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81049c6:	e043      	b.n	8104a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81049c8:	697b      	ldr	r3, [r7, #20]
 81049ca:	ee07 3a90 	vmov	s15, r3
 81049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104b10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81049da:	4b48      	ldr	r3, [pc, #288]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81049dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81049e2:	ee07 3a90 	vmov	s15, r3
 81049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81049ea:	ed97 6a03 	vldr	s12, [r7, #12]
 81049ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81049fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a0a:	e021      	b.n	8104a50 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104a0c:	697b      	ldr	r3, [r7, #20]
 8104a0e:	ee07 3a90 	vmov	s15, r3
 8104a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104b0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a1e:	4b37      	ldr	r3, [pc, #220]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a26:	ee07 3a90 	vmov	s15, r3
 8104a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104a32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104b04 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104a4e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104a50:	4b2a      	ldr	r3, [pc, #168]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a54:	0a5b      	lsrs	r3, r3, #9
 8104a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104a5a:	ee07 3a90 	vmov	s15, r3
 8104a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8104a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104a76:	ee17 2a90 	vmov	r2, s15
 8104a7a:	687b      	ldr	r3, [r7, #4]
 8104a7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104a7e:	4b1f      	ldr	r3, [pc, #124]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104a82:	0c1b      	lsrs	r3, r3, #16
 8104a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104a88:	ee07 3a90 	vmov	s15, r3
 8104a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104a94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104a98:	edd7 6a07 	vldr	s13, [r7, #28]
 8104a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104aa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104aa4:	ee17 2a90 	vmov	r2, s15
 8104aa8:	687b      	ldr	r3, [r7, #4]
 8104aaa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8104aac:	4b13      	ldr	r3, [pc, #76]	; (8104afc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104ab0:	0e1b      	lsrs	r3, r3, #24
 8104ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ab6:	ee07 3a90 	vmov	s15, r3
 8104aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8104aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104ad2:	ee17 2a90 	vmov	r2, s15
 8104ad6:	687b      	ldr	r3, [r7, #4]
 8104ad8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104ada:	e008      	b.n	8104aee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	2200      	movs	r2, #0
 8104ae0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104ae2:	687b      	ldr	r3, [r7, #4]
 8104ae4:	2200      	movs	r2, #0
 8104ae6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104ae8:	687b      	ldr	r3, [r7, #4]
 8104aea:	2200      	movs	r2, #0
 8104aec:	609a      	str	r2, [r3, #8]
}
 8104aee:	bf00      	nop
 8104af0:	3724      	adds	r7, #36	; 0x24
 8104af2:	46bd      	mov	sp, r7
 8104af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104af8:	4770      	bx	lr
 8104afa:	bf00      	nop
 8104afc:	58024400 	.word	0x58024400
 8104b00:	03d09000 	.word	0x03d09000
 8104b04:	46000000 	.word	0x46000000
 8104b08:	4c742400 	.word	0x4c742400
 8104b0c:	4a742400 	.word	0x4a742400
 8104b10:	4af42400 	.word	0x4af42400

08104b14 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104b14:	b480      	push	{r7}
 8104b16:	b089      	sub	sp, #36	; 0x24
 8104b18:	af00      	add	r7, sp, #0
 8104b1a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104b1c:	4ba1      	ldr	r3, [pc, #644]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b20:	f003 0303 	and.w	r3, r3, #3
 8104b24:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8104b26:	4b9f      	ldr	r3, [pc, #636]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b2a:	0d1b      	lsrs	r3, r3, #20
 8104b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104b30:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104b32:	4b9c      	ldr	r3, [pc, #624]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b36:	0a1b      	lsrs	r3, r3, #8
 8104b38:	f003 0301 	and.w	r3, r3, #1
 8104b3c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8104b3e:	4b99      	ldr	r3, [pc, #612]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104b42:	08db      	lsrs	r3, r3, #3
 8104b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104b48:	693a      	ldr	r2, [r7, #16]
 8104b4a:	fb02 f303 	mul.w	r3, r2, r3
 8104b4e:	ee07 3a90 	vmov	s15, r3
 8104b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104b5a:	697b      	ldr	r3, [r7, #20]
 8104b5c:	2b00      	cmp	r3, #0
 8104b5e:	f000 8111 	beq.w	8104d84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104b62:	69bb      	ldr	r3, [r7, #24]
 8104b64:	2b02      	cmp	r3, #2
 8104b66:	f000 8083 	beq.w	8104c70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104b6a:	69bb      	ldr	r3, [r7, #24]
 8104b6c:	2b02      	cmp	r3, #2
 8104b6e:	f200 80a1 	bhi.w	8104cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104b72:	69bb      	ldr	r3, [r7, #24]
 8104b74:	2b00      	cmp	r3, #0
 8104b76:	d003      	beq.n	8104b80 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104b78:	69bb      	ldr	r3, [r7, #24]
 8104b7a:	2b01      	cmp	r3, #1
 8104b7c:	d056      	beq.n	8104c2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104b7e:	e099      	b.n	8104cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104b80:	4b88      	ldr	r3, [pc, #544]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b82:	681b      	ldr	r3, [r3, #0]
 8104b84:	f003 0320 	and.w	r3, r3, #32
 8104b88:	2b00      	cmp	r3, #0
 8104b8a:	d02d      	beq.n	8104be8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104b8c:	4b85      	ldr	r3, [pc, #532]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104b8e:	681b      	ldr	r3, [r3, #0]
 8104b90:	08db      	lsrs	r3, r3, #3
 8104b92:	f003 0303 	and.w	r3, r3, #3
 8104b96:	4a84      	ldr	r2, [pc, #528]	; (8104da8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104b98:	fa22 f303 	lsr.w	r3, r2, r3
 8104b9c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104b9e:	68bb      	ldr	r3, [r7, #8]
 8104ba0:	ee07 3a90 	vmov	s15, r3
 8104ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ba8:	697b      	ldr	r3, [r7, #20]
 8104baa:	ee07 3a90 	vmov	s15, r3
 8104bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bb6:	4b7b      	ldr	r3, [pc, #492]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104bbe:	ee07 3a90 	vmov	s15, r3
 8104bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104bca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104be2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104be6:	e087      	b.n	8104cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104be8:	697b      	ldr	r3, [r7, #20]
 8104bea:	ee07 3a90 	vmov	s15, r3
 8104bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bf2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104db0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104bfa:	4b6a      	ldr	r3, [pc, #424]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c02:	ee07 3a90 	vmov	s15, r3
 8104c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c2a:	e065      	b.n	8104cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c2c:	697b      	ldr	r3, [r7, #20]
 8104c2e:	ee07 3a90 	vmov	s15, r3
 8104c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c3e:	4b59      	ldr	r3, [pc, #356]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c46:	ee07 3a90 	vmov	s15, r3
 8104c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104c6e:	e043      	b.n	8104cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104c70:	697b      	ldr	r3, [r7, #20]
 8104c72:	ee07 3a90 	vmov	s15, r3
 8104c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104db8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c82:	4b48      	ldr	r3, [pc, #288]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c8a:	ee07 3a90 	vmov	s15, r3
 8104c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104cb2:	e021      	b.n	8104cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104cb4:	697b      	ldr	r3, [r7, #20]
 8104cb6:	ee07 3a90 	vmov	s15, r3
 8104cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cbe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104cc6:	4b37      	ldr	r3, [pc, #220]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104cce:	ee07 3a90 	vmov	s15, r3
 8104cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8104cda:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104dac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104cf6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8104cf8:	4b2a      	ldr	r3, [pc, #168]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104cfc:	0a5b      	lsrs	r3, r3, #9
 8104cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d02:	ee07 3a90 	vmov	s15, r3
 8104d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d12:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d1e:	ee17 2a90 	vmov	r2, s15
 8104d22:	687b      	ldr	r3, [r7, #4]
 8104d24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8104d26:	4b1f      	ldr	r3, [pc, #124]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d2a:	0c1b      	lsrs	r3, r3, #16
 8104d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d30:	ee07 3a90 	vmov	s15, r3
 8104d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d4c:	ee17 2a90 	vmov	r2, s15
 8104d50:	687b      	ldr	r3, [r7, #4]
 8104d52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104d54:	4b13      	ldr	r3, [pc, #76]	; (8104da4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104d58:	0e1b      	lsrs	r3, r3, #24
 8104d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d5e:	ee07 3a90 	vmov	s15, r3
 8104d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d7a:	ee17 2a90 	vmov	r2, s15
 8104d7e:	687b      	ldr	r3, [r7, #4]
 8104d80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104d82:	e008      	b.n	8104d96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104d84:	687b      	ldr	r3, [r7, #4]
 8104d86:	2200      	movs	r2, #0
 8104d88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8104d8a:	687b      	ldr	r3, [r7, #4]
 8104d8c:	2200      	movs	r2, #0
 8104d8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104d90:	687b      	ldr	r3, [r7, #4]
 8104d92:	2200      	movs	r2, #0
 8104d94:	609a      	str	r2, [r3, #8]
}
 8104d96:	bf00      	nop
 8104d98:	3724      	adds	r7, #36	; 0x24
 8104d9a:	46bd      	mov	sp, r7
 8104d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104da0:	4770      	bx	lr
 8104da2:	bf00      	nop
 8104da4:	58024400 	.word	0x58024400
 8104da8:	03d09000 	.word	0x03d09000
 8104dac:	46000000 	.word	0x46000000
 8104db0:	4c742400 	.word	0x4c742400
 8104db4:	4a742400 	.word	0x4a742400
 8104db8:	4af42400 	.word	0x4af42400

08104dbc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104dbc:	b580      	push	{r7, lr}
 8104dbe:	b084      	sub	sp, #16
 8104dc0:	af00      	add	r7, sp, #0
 8104dc2:	6078      	str	r0, [r7, #4]
 8104dc4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104dc6:	2300      	movs	r3, #0
 8104dc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104dca:	4b54      	ldr	r3, [pc, #336]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104dce:	f003 0303 	and.w	r3, r3, #3
 8104dd2:	2b03      	cmp	r3, #3
 8104dd4:	d101      	bne.n	8104dda <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104dd6:	2301      	movs	r3, #1
 8104dd8:	e09b      	b.n	8104f12 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104dda:	4b50      	ldr	r3, [pc, #320]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104ddc:	681b      	ldr	r3, [r3, #0]
 8104dde:	4a4f      	ldr	r2, [pc, #316]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104de0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8104de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104de6:	f7fe f841 	bl	8102e6c <HAL_GetTick>
 8104dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104dec:	e008      	b.n	8104e00 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104dee:	f7fe f83d 	bl	8102e6c <HAL_GetTick>
 8104df2:	4602      	mov	r2, r0
 8104df4:	68bb      	ldr	r3, [r7, #8]
 8104df6:	1ad3      	subs	r3, r2, r3
 8104df8:	2b02      	cmp	r3, #2
 8104dfa:	d901      	bls.n	8104e00 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104dfc:	2303      	movs	r3, #3
 8104dfe:	e088      	b.n	8104f12 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104e00:	4b46      	ldr	r3, [pc, #280]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e02:	681b      	ldr	r3, [r3, #0]
 8104e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e08:	2b00      	cmp	r3, #0
 8104e0a:	d1f0      	bne.n	8104dee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104e0c:	4b43      	ldr	r3, [pc, #268]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104e14:	687b      	ldr	r3, [r7, #4]
 8104e16:	681b      	ldr	r3, [r3, #0]
 8104e18:	031b      	lsls	r3, r3, #12
 8104e1a:	4940      	ldr	r1, [pc, #256]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e1c:	4313      	orrs	r3, r2
 8104e1e:	628b      	str	r3, [r1, #40]	; 0x28
 8104e20:	687b      	ldr	r3, [r7, #4]
 8104e22:	685b      	ldr	r3, [r3, #4]
 8104e24:	3b01      	subs	r3, #1
 8104e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104e2a:	687b      	ldr	r3, [r7, #4]
 8104e2c:	689b      	ldr	r3, [r3, #8]
 8104e2e:	3b01      	subs	r3, #1
 8104e30:	025b      	lsls	r3, r3, #9
 8104e32:	b29b      	uxth	r3, r3
 8104e34:	431a      	orrs	r2, r3
 8104e36:	687b      	ldr	r3, [r7, #4]
 8104e38:	68db      	ldr	r3, [r3, #12]
 8104e3a:	3b01      	subs	r3, #1
 8104e3c:	041b      	lsls	r3, r3, #16
 8104e3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104e42:	431a      	orrs	r2, r3
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	691b      	ldr	r3, [r3, #16]
 8104e48:	3b01      	subs	r3, #1
 8104e4a:	061b      	lsls	r3, r3, #24
 8104e4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104e50:	4932      	ldr	r1, [pc, #200]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e52:	4313      	orrs	r3, r2
 8104e54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104e56:	4b31      	ldr	r3, [pc, #196]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104e5e:	687b      	ldr	r3, [r7, #4]
 8104e60:	695b      	ldr	r3, [r3, #20]
 8104e62:	492e      	ldr	r1, [pc, #184]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e64:	4313      	orrs	r3, r2
 8104e66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104e68:	4b2c      	ldr	r3, [pc, #176]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e6c:	f023 0220 	bic.w	r2, r3, #32
 8104e70:	687b      	ldr	r3, [r7, #4]
 8104e72:	699b      	ldr	r3, [r3, #24]
 8104e74:	4929      	ldr	r1, [pc, #164]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e76:	4313      	orrs	r3, r2
 8104e78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104e7a:	4b28      	ldr	r3, [pc, #160]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e7e:	4a27      	ldr	r2, [pc, #156]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e80:	f023 0310 	bic.w	r3, r3, #16
 8104e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104e86:	4b25      	ldr	r3, [pc, #148]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104e8e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104e92:	687a      	ldr	r2, [r7, #4]
 8104e94:	69d2      	ldr	r2, [r2, #28]
 8104e96:	00d2      	lsls	r2, r2, #3
 8104e98:	4920      	ldr	r1, [pc, #128]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104e9a:	4313      	orrs	r3, r2
 8104e9c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104e9e:	4b1f      	ldr	r3, [pc, #124]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ea2:	4a1e      	ldr	r2, [pc, #120]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104ea4:	f043 0310 	orr.w	r3, r3, #16
 8104ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104eaa:	683b      	ldr	r3, [r7, #0]
 8104eac:	2b00      	cmp	r3, #0
 8104eae:	d106      	bne.n	8104ebe <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104eb0:	4b1a      	ldr	r3, [pc, #104]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104eb4:	4a19      	ldr	r2, [pc, #100]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104eb6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8104eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104ebc:	e00f      	b.n	8104ede <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104ebe:	683b      	ldr	r3, [r7, #0]
 8104ec0:	2b01      	cmp	r3, #1
 8104ec2:	d106      	bne.n	8104ed2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104ec4:	4b15      	ldr	r3, [pc, #84]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ec8:	4a14      	ldr	r2, [pc, #80]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8104ece:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104ed0:	e005      	b.n	8104ede <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104ed2:	4b12      	ldr	r3, [pc, #72]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104ed6:	4a11      	ldr	r2, [pc, #68]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104ed8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8104edc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104ede:	4b0f      	ldr	r3, [pc, #60]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104ee0:	681b      	ldr	r3, [r3, #0]
 8104ee2:	4a0e      	ldr	r2, [pc, #56]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104ee4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8104ee8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104eea:	f7fd ffbf 	bl	8102e6c <HAL_GetTick>
 8104eee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104ef0:	e008      	b.n	8104f04 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8104ef2:	f7fd ffbb 	bl	8102e6c <HAL_GetTick>
 8104ef6:	4602      	mov	r2, r0
 8104ef8:	68bb      	ldr	r3, [r7, #8]
 8104efa:	1ad3      	subs	r3, r2, r3
 8104efc:	2b02      	cmp	r3, #2
 8104efe:	d901      	bls.n	8104f04 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104f00:	2303      	movs	r3, #3
 8104f02:	e006      	b.n	8104f12 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104f04:	4b05      	ldr	r3, [pc, #20]	; (8104f1c <RCCEx_PLL2_Config+0x160>)
 8104f06:	681b      	ldr	r3, [r3, #0]
 8104f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f0c:	2b00      	cmp	r3, #0
 8104f0e:	d0f0      	beq.n	8104ef2 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8104f12:	4618      	mov	r0, r3
 8104f14:	3710      	adds	r7, #16
 8104f16:	46bd      	mov	sp, r7
 8104f18:	bd80      	pop	{r7, pc}
 8104f1a:	bf00      	nop
 8104f1c:	58024400 	.word	0x58024400

08104f20 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104f20:	b580      	push	{r7, lr}
 8104f22:	b084      	sub	sp, #16
 8104f24:	af00      	add	r7, sp, #0
 8104f26:	6078      	str	r0, [r7, #4]
 8104f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104f2a:	2300      	movs	r3, #0
 8104f2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104f2e:	4b54      	ldr	r3, [pc, #336]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f32:	f003 0303 	and.w	r3, r3, #3
 8104f36:	2b03      	cmp	r3, #3
 8104f38:	d101      	bne.n	8104f3e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104f3a:	2301      	movs	r3, #1
 8104f3c:	e09b      	b.n	8105076 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104f3e:	4b50      	ldr	r3, [pc, #320]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104f40:	681b      	ldr	r3, [r3, #0]
 8104f42:	4a4f      	ldr	r2, [pc, #316]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8104f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104f4a:	f7fd ff8f 	bl	8102e6c <HAL_GetTick>
 8104f4e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104f50:	e008      	b.n	8104f64 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104f52:	f7fd ff8b 	bl	8102e6c <HAL_GetTick>
 8104f56:	4602      	mov	r2, r0
 8104f58:	68bb      	ldr	r3, [r7, #8]
 8104f5a:	1ad3      	subs	r3, r2, r3
 8104f5c:	2b02      	cmp	r3, #2
 8104f5e:	d901      	bls.n	8104f64 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104f60:	2303      	movs	r3, #3
 8104f62:	e088      	b.n	8105076 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104f64:	4b46      	ldr	r3, [pc, #280]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104f66:	681b      	ldr	r3, [r3, #0]
 8104f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104f6c:	2b00      	cmp	r3, #0
 8104f6e:	d1f0      	bne.n	8104f52 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104f70:	4b43      	ldr	r3, [pc, #268]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104f74:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8104f78:	687b      	ldr	r3, [r7, #4]
 8104f7a:	681b      	ldr	r3, [r3, #0]
 8104f7c:	051b      	lsls	r3, r3, #20
 8104f7e:	4940      	ldr	r1, [pc, #256]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104f80:	4313      	orrs	r3, r2
 8104f82:	628b      	str	r3, [r1, #40]	; 0x28
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	685b      	ldr	r3, [r3, #4]
 8104f88:	3b01      	subs	r3, #1
 8104f8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104f8e:	687b      	ldr	r3, [r7, #4]
 8104f90:	689b      	ldr	r3, [r3, #8]
 8104f92:	3b01      	subs	r3, #1
 8104f94:	025b      	lsls	r3, r3, #9
 8104f96:	b29b      	uxth	r3, r3
 8104f98:	431a      	orrs	r2, r3
 8104f9a:	687b      	ldr	r3, [r7, #4]
 8104f9c:	68db      	ldr	r3, [r3, #12]
 8104f9e:	3b01      	subs	r3, #1
 8104fa0:	041b      	lsls	r3, r3, #16
 8104fa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104fa6:	431a      	orrs	r2, r3
 8104fa8:	687b      	ldr	r3, [r7, #4]
 8104faa:	691b      	ldr	r3, [r3, #16]
 8104fac:	3b01      	subs	r3, #1
 8104fae:	061b      	lsls	r3, r3, #24
 8104fb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104fb4:	4932      	ldr	r1, [pc, #200]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104fb6:	4313      	orrs	r3, r2
 8104fb8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104fba:	4b31      	ldr	r3, [pc, #196]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8104fc2:	687b      	ldr	r3, [r7, #4]
 8104fc4:	695b      	ldr	r3, [r3, #20]
 8104fc6:	492e      	ldr	r1, [pc, #184]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104fc8:	4313      	orrs	r3, r2
 8104fca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104fcc:	4b2c      	ldr	r3, [pc, #176]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fd0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8104fd4:	687b      	ldr	r3, [r7, #4]
 8104fd6:	699b      	ldr	r3, [r3, #24]
 8104fd8:	4929      	ldr	r1, [pc, #164]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104fda:	4313      	orrs	r3, r2
 8104fdc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104fde:	4b28      	ldr	r3, [pc, #160]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104fe2:	4a27      	ldr	r2, [pc, #156]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104fea:	4b25      	ldr	r3, [pc, #148]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104ff2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104ff6:	687a      	ldr	r2, [r7, #4]
 8104ff8:	69d2      	ldr	r2, [r2, #28]
 8104ffa:	00d2      	lsls	r2, r2, #3
 8104ffc:	4920      	ldr	r1, [pc, #128]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8104ffe:	4313      	orrs	r3, r2
 8105000:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105002:	4b1f      	ldr	r3, [pc, #124]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8105004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105006:	4a1e      	ldr	r2, [pc, #120]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8105008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810500c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 810500e:	683b      	ldr	r3, [r7, #0]
 8105010:	2b00      	cmp	r3, #0
 8105012:	d106      	bne.n	8105022 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105014:	4b1a      	ldr	r3, [pc, #104]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8105016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105018:	4a19      	ldr	r2, [pc, #100]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 810501a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 810501e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105020:	e00f      	b.n	8105042 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105022:	683b      	ldr	r3, [r7, #0]
 8105024:	2b01      	cmp	r3, #1
 8105026:	d106      	bne.n	8105036 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105028:	4b15      	ldr	r3, [pc, #84]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 810502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810502c:	4a14      	ldr	r2, [pc, #80]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 810502e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105034:	e005      	b.n	8105042 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105036:	4b12      	ldr	r3, [pc, #72]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8105038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810503a:	4a11      	ldr	r2, [pc, #68]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 810503c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105040:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105042:	4b0f      	ldr	r3, [pc, #60]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8105044:	681b      	ldr	r3, [r3, #0]
 8105046:	4a0e      	ldr	r2, [pc, #56]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 8105048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810504c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810504e:	f7fd ff0d 	bl	8102e6c <HAL_GetTick>
 8105052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105054:	e008      	b.n	8105068 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105056:	f7fd ff09 	bl	8102e6c <HAL_GetTick>
 810505a:	4602      	mov	r2, r0
 810505c:	68bb      	ldr	r3, [r7, #8]
 810505e:	1ad3      	subs	r3, r2, r3
 8105060:	2b02      	cmp	r3, #2
 8105062:	d901      	bls.n	8105068 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105064:	2303      	movs	r3, #3
 8105066:	e006      	b.n	8105076 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105068:	4b05      	ldr	r3, [pc, #20]	; (8105080 <RCCEx_PLL3_Config+0x160>)
 810506a:	681b      	ldr	r3, [r3, #0]
 810506c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105070:	2b00      	cmp	r3, #0
 8105072:	d0f0      	beq.n	8105056 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105074:	7bfb      	ldrb	r3, [r7, #15]
}
 8105076:	4618      	mov	r0, r3
 8105078:	3710      	adds	r7, #16
 810507a:	46bd      	mov	sp, r7
 810507c:	bd80      	pop	{r7, pc}
 810507e:	bf00      	nop
 8105080:	58024400 	.word	0x58024400

08105084 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8105084:	b580      	push	{r7, lr}
 8105086:	b084      	sub	sp, #16
 8105088:	af00      	add	r7, sp, #0
 810508a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	2b00      	cmp	r3, #0
 8105090:	d101      	bne.n	8105096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8105092:	2301      	movs	r3, #1
 8105094:	e0f1      	b.n	810527a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	2200      	movs	r2, #0
 810509a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	4a78      	ldr	r2, [pc, #480]	; (8105284 <HAL_SPI_Init+0x200>)
 81050a2:	4293      	cmp	r3, r2
 81050a4:	d00f      	beq.n	81050c6 <HAL_SPI_Init+0x42>
 81050a6:	687b      	ldr	r3, [r7, #4]
 81050a8:	681b      	ldr	r3, [r3, #0]
 81050aa:	4a77      	ldr	r2, [pc, #476]	; (8105288 <HAL_SPI_Init+0x204>)
 81050ac:	4293      	cmp	r3, r2
 81050ae:	d00a      	beq.n	81050c6 <HAL_SPI_Init+0x42>
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	681b      	ldr	r3, [r3, #0]
 81050b4:	4a75      	ldr	r2, [pc, #468]	; (810528c <HAL_SPI_Init+0x208>)
 81050b6:	4293      	cmp	r3, r2
 81050b8:	d005      	beq.n	81050c6 <HAL_SPI_Init+0x42>
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	68db      	ldr	r3, [r3, #12]
 81050be:	2b0f      	cmp	r3, #15
 81050c0:	d901      	bls.n	81050c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81050c2:	2301      	movs	r3, #1
 81050c4:	e0d9      	b.n	810527a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81050c6:	6878      	ldr	r0, [r7, #4]
 81050c8:	f001 f877 	bl	81061ba <SPI_GetPacketSize>
 81050cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81050ce:	687b      	ldr	r3, [r7, #4]
 81050d0:	681b      	ldr	r3, [r3, #0]
 81050d2:	4a6c      	ldr	r2, [pc, #432]	; (8105284 <HAL_SPI_Init+0x200>)
 81050d4:	4293      	cmp	r3, r2
 81050d6:	d00c      	beq.n	81050f2 <HAL_SPI_Init+0x6e>
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	681b      	ldr	r3, [r3, #0]
 81050dc:	4a6a      	ldr	r2, [pc, #424]	; (8105288 <HAL_SPI_Init+0x204>)
 81050de:	4293      	cmp	r3, r2
 81050e0:	d007      	beq.n	81050f2 <HAL_SPI_Init+0x6e>
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	681b      	ldr	r3, [r3, #0]
 81050e6:	4a69      	ldr	r2, [pc, #420]	; (810528c <HAL_SPI_Init+0x208>)
 81050e8:	4293      	cmp	r3, r2
 81050ea:	d002      	beq.n	81050f2 <HAL_SPI_Init+0x6e>
 81050ec:	68fb      	ldr	r3, [r7, #12]
 81050ee:	2b08      	cmp	r3, #8
 81050f0:	d811      	bhi.n	8105116 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81050f6:	4a63      	ldr	r2, [pc, #396]	; (8105284 <HAL_SPI_Init+0x200>)
 81050f8:	4293      	cmp	r3, r2
 81050fa:	d009      	beq.n	8105110 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81050fc:	687b      	ldr	r3, [r7, #4]
 81050fe:	681b      	ldr	r3, [r3, #0]
 8105100:	4a61      	ldr	r2, [pc, #388]	; (8105288 <HAL_SPI_Init+0x204>)
 8105102:	4293      	cmp	r3, r2
 8105104:	d004      	beq.n	8105110 <HAL_SPI_Init+0x8c>
 8105106:	687b      	ldr	r3, [r7, #4]
 8105108:	681b      	ldr	r3, [r3, #0]
 810510a:	4a60      	ldr	r2, [pc, #384]	; (810528c <HAL_SPI_Init+0x208>)
 810510c:	4293      	cmp	r3, r2
 810510e:	d104      	bne.n	810511a <HAL_SPI_Init+0x96>
 8105110:	68fb      	ldr	r3, [r7, #12]
 8105112:	2b10      	cmp	r3, #16
 8105114:	d901      	bls.n	810511a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8105116:	2301      	movs	r3, #1
 8105118:	e0af      	b.n	810527a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105120:	b2db      	uxtb	r3, r3
 8105122:	2b00      	cmp	r3, #0
 8105124:	d106      	bne.n	8105134 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	2200      	movs	r2, #0
 810512a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810512e:	6878      	ldr	r0, [r7, #4]
 8105130:	f7fd fbee 	bl	8102910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8105134:	687b      	ldr	r3, [r7, #4]
 8105136:	2202      	movs	r2, #2
 8105138:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810513c:	687b      	ldr	r3, [r7, #4]
 810513e:	681b      	ldr	r3, [r3, #0]
 8105140:	681a      	ldr	r2, [r3, #0]
 8105142:	687b      	ldr	r3, [r7, #4]
 8105144:	681b      	ldr	r3, [r3, #0]
 8105146:	f022 0201 	bic.w	r2, r2, #1
 810514a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	689b      	ldr	r3, [r3, #8]
 8105152:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8105156:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8105158:	687b      	ldr	r3, [r7, #4]
 810515a:	699b      	ldr	r3, [r3, #24]
 810515c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8105160:	d119      	bne.n	8105196 <HAL_SPI_Init+0x112>
 8105162:	687b      	ldr	r3, [r7, #4]
 8105164:	685b      	ldr	r3, [r3, #4]
 8105166:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810516a:	d103      	bne.n	8105174 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8105170:	2b00      	cmp	r3, #0
 8105172:	d008      	beq.n	8105186 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8105178:	2b00      	cmp	r3, #0
 810517a:	d10c      	bne.n	8105196 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8105180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105184:	d107      	bne.n	8105196 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	681a      	ldr	r2, [r3, #0]
 810518c:	687b      	ldr	r3, [r7, #4]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8105194:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8105196:	687b      	ldr	r3, [r7, #4]
 8105198:	69da      	ldr	r2, [r3, #28]
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810519e:	431a      	orrs	r2, r3
 81051a0:	68bb      	ldr	r3, [r7, #8]
 81051a2:	431a      	orrs	r2, r3
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81051a8:	ea42 0103 	orr.w	r1, r2, r3
 81051ac:	687b      	ldr	r3, [r7, #4]
 81051ae:	68da      	ldr	r2, [r3, #12]
 81051b0:	687b      	ldr	r3, [r7, #4]
 81051b2:	681b      	ldr	r3, [r3, #0]
 81051b4:	430a      	orrs	r2, r1
 81051b6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81051bc:	687b      	ldr	r3, [r7, #4]
 81051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81051c0:	431a      	orrs	r2, r3
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81051c6:	431a      	orrs	r2, r3
 81051c8:	687b      	ldr	r3, [r7, #4]
 81051ca:	699b      	ldr	r3, [r3, #24]
 81051cc:	431a      	orrs	r2, r3
 81051ce:	687b      	ldr	r3, [r7, #4]
 81051d0:	691b      	ldr	r3, [r3, #16]
 81051d2:	431a      	orrs	r2, r3
 81051d4:	687b      	ldr	r3, [r7, #4]
 81051d6:	695b      	ldr	r3, [r3, #20]
 81051d8:	431a      	orrs	r2, r3
 81051da:	687b      	ldr	r3, [r7, #4]
 81051dc:	6a1b      	ldr	r3, [r3, #32]
 81051de:	431a      	orrs	r2, r3
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	685b      	ldr	r3, [r3, #4]
 81051e4:	431a      	orrs	r2, r3
 81051e6:	687b      	ldr	r3, [r7, #4]
 81051e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81051ea:	431a      	orrs	r2, r3
 81051ec:	687b      	ldr	r3, [r7, #4]
 81051ee:	689b      	ldr	r3, [r3, #8]
 81051f0:	431a      	orrs	r2, r3
 81051f2:	687b      	ldr	r3, [r7, #4]
 81051f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81051f6:	ea42 0103 	orr.w	r1, r2, r3
 81051fa:	687b      	ldr	r3, [r7, #4]
 81051fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	430a      	orrs	r2, r1
 8105204:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8105206:	687b      	ldr	r3, [r7, #4]
 8105208:	685b      	ldr	r3, [r3, #4]
 810520a:	2b00      	cmp	r3, #0
 810520c:	d113      	bne.n	8105236 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810520e:	687b      	ldr	r3, [r7, #4]
 8105210:	681b      	ldr	r3, [r3, #0]
 8105212:	689b      	ldr	r3, [r3, #8]
 8105214:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8105218:	687b      	ldr	r3, [r7, #4]
 810521a:	681b      	ldr	r3, [r3, #0]
 810521c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105220:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8105222:	687b      	ldr	r3, [r7, #4]
 8105224:	681b      	ldr	r3, [r3, #0]
 8105226:	689b      	ldr	r3, [r3, #8]
 8105228:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 810522c:	687b      	ldr	r3, [r7, #4]
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8105234:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8105236:	687b      	ldr	r3, [r7, #4]
 8105238:	681b      	ldr	r3, [r3, #0]
 810523a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 810523c:	687b      	ldr	r3, [r7, #4]
 810523e:	681b      	ldr	r3, [r3, #0]
 8105240:	f022 0201 	bic.w	r2, r2, #1
 8105244:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8105246:	687b      	ldr	r3, [r7, #4]
 8105248:	685b      	ldr	r3, [r3, #4]
 810524a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810524e:	2b00      	cmp	r3, #0
 8105250:	d00a      	beq.n	8105268 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8105252:	687b      	ldr	r3, [r7, #4]
 8105254:	681b      	ldr	r3, [r3, #0]
 8105256:	68db      	ldr	r3, [r3, #12]
 8105258:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810525c:	687b      	ldr	r3, [r7, #4]
 810525e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	430a      	orrs	r2, r1
 8105266:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	2200      	movs	r2, #0
 810526c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8105270:	687b      	ldr	r3, [r7, #4]
 8105272:	2201      	movs	r2, #1
 8105274:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8105278:	2300      	movs	r3, #0
}
 810527a:	4618      	mov	r0, r3
 810527c:	3710      	adds	r7, #16
 810527e:	46bd      	mov	sp, r7
 8105280:	bd80      	pop	{r7, pc}
 8105282:	bf00      	nop
 8105284:	40013000 	.word	0x40013000
 8105288:	40003800 	.word	0x40003800
 810528c:	40003c00 	.word	0x40003c00

08105290 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105290:	b580      	push	{r7, lr}
 8105292:	b08a      	sub	sp, #40	; 0x28
 8105294:	af02      	add	r7, sp, #8
 8105296:	60f8      	str	r0, [r7, #12]
 8105298:	60b9      	str	r1, [r7, #8]
 810529a:	603b      	str	r3, [r7, #0]
 810529c:	4613      	mov	r3, r2
 810529e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81052a0:	68fb      	ldr	r3, [r7, #12]
 81052a2:	681b      	ldr	r3, [r3, #0]
 81052a4:	3320      	adds	r3, #32
 81052a6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 81052a8:	2300      	movs	r3, #0
 81052aa:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 81052ac:	68fb      	ldr	r3, [r7, #12]
 81052ae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81052b2:	2b01      	cmp	r3, #1
 81052b4:	d101      	bne.n	81052ba <HAL_SPI_Transmit+0x2a>
 81052b6:	2302      	movs	r3, #2
 81052b8:	e1d4      	b.n	8105664 <HAL_SPI_Transmit+0x3d4>
 81052ba:	68fb      	ldr	r3, [r7, #12]
 81052bc:	2201      	movs	r2, #1
 81052be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81052c2:	f7fd fdd3 	bl	8102e6c <HAL_GetTick>
 81052c6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81052c8:	68fb      	ldr	r3, [r7, #12]
 81052ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81052ce:	b2db      	uxtb	r3, r3
 81052d0:	2b01      	cmp	r3, #1
 81052d2:	d007      	beq.n	81052e4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 81052d4:	2302      	movs	r3, #2
 81052d6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	2200      	movs	r2, #0
 81052dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81052e0:	7efb      	ldrb	r3, [r7, #27]
 81052e2:	e1bf      	b.n	8105664 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 81052e4:	68bb      	ldr	r3, [r7, #8]
 81052e6:	2b00      	cmp	r3, #0
 81052e8:	d002      	beq.n	81052f0 <HAL_SPI_Transmit+0x60>
 81052ea:	88fb      	ldrh	r3, [r7, #6]
 81052ec:	2b00      	cmp	r3, #0
 81052ee:	d107      	bne.n	8105300 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 81052f0:	2301      	movs	r3, #1
 81052f2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 81052f4:	68fb      	ldr	r3, [r7, #12]
 81052f6:	2200      	movs	r2, #0
 81052f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81052fc:	7efb      	ldrb	r3, [r7, #27]
 81052fe:	e1b1      	b.n	8105664 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8105300:	68fb      	ldr	r3, [r7, #12]
 8105302:	2203      	movs	r2, #3
 8105304:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105308:	68fb      	ldr	r3, [r7, #12]
 810530a:	2200      	movs	r2, #0
 810530c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8105310:	68fb      	ldr	r3, [r7, #12]
 8105312:	68ba      	ldr	r2, [r7, #8]
 8105314:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8105316:	68fb      	ldr	r3, [r7, #12]
 8105318:	88fa      	ldrh	r2, [r7, #6]
 810531a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 810531e:	68fb      	ldr	r3, [r7, #12]
 8105320:	88fa      	ldrh	r2, [r7, #6]
 8105322:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8105326:	68fb      	ldr	r3, [r7, #12]
 8105328:	2200      	movs	r2, #0
 810532a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 810532c:	68fb      	ldr	r3, [r7, #12]
 810532e:	2200      	movs	r2, #0
 8105330:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8105334:	68fb      	ldr	r3, [r7, #12]
 8105336:	2200      	movs	r2, #0
 8105338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 810533c:	68fb      	ldr	r3, [r7, #12]
 810533e:	2200      	movs	r2, #0
 8105340:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8105342:	68fb      	ldr	r3, [r7, #12]
 8105344:	2200      	movs	r2, #0
 8105346:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8105348:	68fb      	ldr	r3, [r7, #12]
 810534a:	689b      	ldr	r3, [r3, #8]
 810534c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8105350:	d107      	bne.n	8105362 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8105352:	68fb      	ldr	r3, [r7, #12]
 8105354:	681b      	ldr	r3, [r3, #0]
 8105356:	681a      	ldr	r2, [r3, #0]
 8105358:	68fb      	ldr	r3, [r7, #12]
 810535a:	681b      	ldr	r3, [r3, #0]
 810535c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8105360:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105362:	68fb      	ldr	r3, [r7, #12]
 8105364:	681b      	ldr	r3, [r3, #0]
 8105366:	685b      	ldr	r3, [r3, #4]
 8105368:	0c1b      	lsrs	r3, r3, #16
 810536a:	041b      	lsls	r3, r3, #16
 810536c:	88f9      	ldrh	r1, [r7, #6]
 810536e:	68fa      	ldr	r2, [r7, #12]
 8105370:	6812      	ldr	r2, [r2, #0]
 8105372:	430b      	orrs	r3, r1
 8105374:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8105376:	68fb      	ldr	r3, [r7, #12]
 8105378:	681b      	ldr	r3, [r3, #0]
 810537a:	681a      	ldr	r2, [r3, #0]
 810537c:	68fb      	ldr	r3, [r7, #12]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	f042 0201 	orr.w	r2, r2, #1
 8105384:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8105386:	68fb      	ldr	r3, [r7, #12]
 8105388:	685b      	ldr	r3, [r3, #4]
 810538a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810538e:	d107      	bne.n	81053a0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8105390:	68fb      	ldr	r3, [r7, #12]
 8105392:	681b      	ldr	r3, [r3, #0]
 8105394:	681a      	ldr	r2, [r3, #0]
 8105396:	68fb      	ldr	r3, [r7, #12]
 8105398:	681b      	ldr	r3, [r3, #0]
 810539a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810539e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81053a0:	68fb      	ldr	r3, [r7, #12]
 81053a2:	68db      	ldr	r3, [r3, #12]
 81053a4:	2b0f      	cmp	r3, #15
 81053a6:	d947      	bls.n	8105438 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81053a8:	e03f      	b.n	810542a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81053aa:	68fb      	ldr	r3, [r7, #12]
 81053ac:	681b      	ldr	r3, [r3, #0]
 81053ae:	695b      	ldr	r3, [r3, #20]
 81053b0:	f003 0302 	and.w	r3, r3, #2
 81053b4:	2b02      	cmp	r3, #2
 81053b6:	d114      	bne.n	81053e2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81053b8:	68fb      	ldr	r3, [r7, #12]
 81053ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81053bc:	68fb      	ldr	r3, [r7, #12]
 81053be:	681b      	ldr	r3, [r3, #0]
 81053c0:	6812      	ldr	r2, [r2, #0]
 81053c2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81053c4:	68fb      	ldr	r3, [r7, #12]
 81053c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81053c8:	1d1a      	adds	r2, r3, #4
 81053ca:	68fb      	ldr	r3, [r7, #12]
 81053cc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 81053ce:	68fb      	ldr	r3, [r7, #12]
 81053d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81053d4:	b29b      	uxth	r3, r3
 81053d6:	3b01      	subs	r3, #1
 81053d8:	b29a      	uxth	r2, r3
 81053da:	68fb      	ldr	r3, [r7, #12]
 81053dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81053e0:	e023      	b.n	810542a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81053e2:	f7fd fd43 	bl	8102e6c <HAL_GetTick>
 81053e6:	4602      	mov	r2, r0
 81053e8:	697b      	ldr	r3, [r7, #20]
 81053ea:	1ad3      	subs	r3, r2, r3
 81053ec:	683a      	ldr	r2, [r7, #0]
 81053ee:	429a      	cmp	r2, r3
 81053f0:	d803      	bhi.n	81053fa <HAL_SPI_Transmit+0x16a>
 81053f2:	683b      	ldr	r3, [r7, #0]
 81053f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81053f8:	d102      	bne.n	8105400 <HAL_SPI_Transmit+0x170>
 81053fa:	683b      	ldr	r3, [r7, #0]
 81053fc:	2b00      	cmp	r3, #0
 81053fe:	d114      	bne.n	810542a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8105400:	68f8      	ldr	r0, [r7, #12]
 8105402:	f000 fe0c 	bl	810601e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8105406:	68fb      	ldr	r3, [r7, #12]
 8105408:	2200      	movs	r2, #0
 810540a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810540e:	68fb      	ldr	r3, [r7, #12]
 8105410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105414:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105418:	68fb      	ldr	r3, [r7, #12]
 810541a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810541e:	68fb      	ldr	r3, [r7, #12]
 8105420:	2201      	movs	r2, #1
 8105422:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105426:	2303      	movs	r3, #3
 8105428:	e11c      	b.n	8105664 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810542a:	68fb      	ldr	r3, [r7, #12]
 810542c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105430:	b29b      	uxth	r3, r3
 8105432:	2b00      	cmp	r3, #0
 8105434:	d1b9      	bne.n	81053aa <HAL_SPI_Transmit+0x11a>
 8105436:	e0ef      	b.n	8105618 <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	68db      	ldr	r3, [r3, #12]
 810543c:	2b07      	cmp	r3, #7
 810543e:	f240 80e4 	bls.w	810560a <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8105442:	e05d      	b.n	8105500 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8105444:	68fb      	ldr	r3, [r7, #12]
 8105446:	681b      	ldr	r3, [r3, #0]
 8105448:	695b      	ldr	r3, [r3, #20]
 810544a:	f003 0302 	and.w	r3, r3, #2
 810544e:	2b02      	cmp	r3, #2
 8105450:	d132      	bne.n	81054b8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105452:	68fb      	ldr	r3, [r7, #12]
 8105454:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105458:	b29b      	uxth	r3, r3
 810545a:	2b01      	cmp	r3, #1
 810545c:	d918      	bls.n	8105490 <HAL_SPI_Transmit+0x200>
 810545e:	68fb      	ldr	r3, [r7, #12]
 8105460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105462:	2b00      	cmp	r3, #0
 8105464:	d014      	beq.n	8105490 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105466:	68fb      	ldr	r3, [r7, #12]
 8105468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810546a:	68fb      	ldr	r3, [r7, #12]
 810546c:	681b      	ldr	r3, [r3, #0]
 810546e:	6812      	ldr	r2, [r2, #0]
 8105470:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105472:	68fb      	ldr	r3, [r7, #12]
 8105474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105476:	1d1a      	adds	r2, r3, #4
 8105478:	68fb      	ldr	r3, [r7, #12]
 810547a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810547c:	68fb      	ldr	r3, [r7, #12]
 810547e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105482:	b29b      	uxth	r3, r3
 8105484:	3b02      	subs	r3, #2
 8105486:	b29a      	uxth	r2, r3
 8105488:	68fb      	ldr	r3, [r7, #12]
 810548a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 810548e:	e037      	b.n	8105500 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105490:	68fb      	ldr	r3, [r7, #12]
 8105492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105494:	881a      	ldrh	r2, [r3, #0]
 8105496:	69fb      	ldr	r3, [r7, #28]
 8105498:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 810549a:	68fb      	ldr	r3, [r7, #12]
 810549c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810549e:	1c9a      	adds	r2, r3, #2
 81054a0:	68fb      	ldr	r3, [r7, #12]
 81054a2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81054a4:	68fb      	ldr	r3, [r7, #12]
 81054a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81054aa:	b29b      	uxth	r3, r3
 81054ac:	3b01      	subs	r3, #1
 81054ae:	b29a      	uxth	r2, r3
 81054b0:	68fb      	ldr	r3, [r7, #12]
 81054b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81054b6:	e023      	b.n	8105500 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81054b8:	f7fd fcd8 	bl	8102e6c <HAL_GetTick>
 81054bc:	4602      	mov	r2, r0
 81054be:	697b      	ldr	r3, [r7, #20]
 81054c0:	1ad3      	subs	r3, r2, r3
 81054c2:	683a      	ldr	r2, [r7, #0]
 81054c4:	429a      	cmp	r2, r3
 81054c6:	d803      	bhi.n	81054d0 <HAL_SPI_Transmit+0x240>
 81054c8:	683b      	ldr	r3, [r7, #0]
 81054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 81054ce:	d102      	bne.n	81054d6 <HAL_SPI_Transmit+0x246>
 81054d0:	683b      	ldr	r3, [r7, #0]
 81054d2:	2b00      	cmp	r3, #0
 81054d4:	d114      	bne.n	8105500 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81054d6:	68f8      	ldr	r0, [r7, #12]
 81054d8:	f000 fda1 	bl	810601e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81054dc:	68fb      	ldr	r3, [r7, #12]
 81054de:	2200      	movs	r2, #0
 81054e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81054e4:	68fb      	ldr	r3, [r7, #12]
 81054e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81054ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81054ee:	68fb      	ldr	r3, [r7, #12]
 81054f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81054f4:	68fb      	ldr	r3, [r7, #12]
 81054f6:	2201      	movs	r2, #1
 81054f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 81054fc:	2303      	movs	r3, #3
 81054fe:	e0b1      	b.n	8105664 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8105500:	68fb      	ldr	r3, [r7, #12]
 8105502:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105506:	b29b      	uxth	r3, r3
 8105508:	2b00      	cmp	r3, #0
 810550a:	d19b      	bne.n	8105444 <HAL_SPI_Transmit+0x1b4>
 810550c:	e084      	b.n	8105618 <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810550e:	68fb      	ldr	r3, [r7, #12]
 8105510:	681b      	ldr	r3, [r3, #0]
 8105512:	695b      	ldr	r3, [r3, #20]
 8105514:	f003 0302 	and.w	r3, r3, #2
 8105518:	2b02      	cmp	r3, #2
 810551a:	d152      	bne.n	81055c2 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 810551c:	68fb      	ldr	r3, [r7, #12]
 810551e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105522:	b29b      	uxth	r3, r3
 8105524:	2b03      	cmp	r3, #3
 8105526:	d918      	bls.n	810555a <HAL_SPI_Transmit+0x2ca>
 8105528:	68fb      	ldr	r3, [r7, #12]
 810552a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810552c:	2b40      	cmp	r3, #64	; 0x40
 810552e:	d914      	bls.n	810555a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105530:	68fb      	ldr	r3, [r7, #12]
 8105532:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105534:	68fb      	ldr	r3, [r7, #12]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	6812      	ldr	r2, [r2, #0]
 810553a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810553c:	68fb      	ldr	r3, [r7, #12]
 810553e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105540:	1d1a      	adds	r2, r3, #4
 8105542:	68fb      	ldr	r3, [r7, #12]
 8105544:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8105546:	68fb      	ldr	r3, [r7, #12]
 8105548:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 810554c:	b29b      	uxth	r3, r3
 810554e:	3b04      	subs	r3, #4
 8105550:	b29a      	uxth	r2, r3
 8105552:	68fb      	ldr	r3, [r7, #12]
 8105554:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8105558:	e057      	b.n	810560a <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810555a:	68fb      	ldr	r3, [r7, #12]
 810555c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105560:	b29b      	uxth	r3, r3
 8105562:	2b01      	cmp	r3, #1
 8105564:	d917      	bls.n	8105596 <HAL_SPI_Transmit+0x306>
 8105566:	68fb      	ldr	r3, [r7, #12]
 8105568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810556a:	2b00      	cmp	r3, #0
 810556c:	d013      	beq.n	8105596 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 810556e:	68fb      	ldr	r3, [r7, #12]
 8105570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105572:	881a      	ldrh	r2, [r3, #0]
 8105574:	69fb      	ldr	r3, [r7, #28]
 8105576:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8105578:	68fb      	ldr	r3, [r7, #12]
 810557a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810557c:	1c9a      	adds	r2, r3, #2
 810557e:	68fb      	ldr	r3, [r7, #12]
 8105580:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8105582:	68fb      	ldr	r3, [r7, #12]
 8105584:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105588:	b29b      	uxth	r3, r3
 810558a:	3b02      	subs	r3, #2
 810558c:	b29a      	uxth	r2, r3
 810558e:	68fb      	ldr	r3, [r7, #12]
 8105590:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8105594:	e039      	b.n	810560a <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8105596:	68fb      	ldr	r3, [r7, #12]
 8105598:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810559a:	68fb      	ldr	r3, [r7, #12]
 810559c:	681b      	ldr	r3, [r3, #0]
 810559e:	3320      	adds	r3, #32
 81055a0:	7812      	ldrb	r2, [r2, #0]
 81055a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 81055a4:	68fb      	ldr	r3, [r7, #12]
 81055a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81055a8:	1c5a      	adds	r2, r3, #1
 81055aa:	68fb      	ldr	r3, [r7, #12]
 81055ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81055ae:	68fb      	ldr	r3, [r7, #12]
 81055b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81055b4:	b29b      	uxth	r3, r3
 81055b6:	3b01      	subs	r3, #1
 81055b8:	b29a      	uxth	r2, r3
 81055ba:	68fb      	ldr	r3, [r7, #12]
 81055bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 81055c0:	e023      	b.n	810560a <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81055c2:	f7fd fc53 	bl	8102e6c <HAL_GetTick>
 81055c6:	4602      	mov	r2, r0
 81055c8:	697b      	ldr	r3, [r7, #20]
 81055ca:	1ad3      	subs	r3, r2, r3
 81055cc:	683a      	ldr	r2, [r7, #0]
 81055ce:	429a      	cmp	r2, r3
 81055d0:	d803      	bhi.n	81055da <HAL_SPI_Transmit+0x34a>
 81055d2:	683b      	ldr	r3, [r7, #0]
 81055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81055d8:	d102      	bne.n	81055e0 <HAL_SPI_Transmit+0x350>
 81055da:	683b      	ldr	r3, [r7, #0]
 81055dc:	2b00      	cmp	r3, #0
 81055de:	d114      	bne.n	810560a <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81055e0:	68f8      	ldr	r0, [r7, #12]
 81055e2:	f000 fd1c 	bl	810601e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81055e6:	68fb      	ldr	r3, [r7, #12]
 81055e8:	2200      	movs	r2, #0
 81055ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81055ee:	68fb      	ldr	r3, [r7, #12]
 81055f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81055f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81055f8:	68fb      	ldr	r3, [r7, #12]
 81055fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81055fe:	68fb      	ldr	r3, [r7, #12]
 8105600:	2201      	movs	r2, #1
 8105602:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105606:	2303      	movs	r3, #3
 8105608:	e02c      	b.n	8105664 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810560a:	68fb      	ldr	r3, [r7, #12]
 810560c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105610:	b29b      	uxth	r3, r3
 8105612:	2b00      	cmp	r3, #0
 8105614:	f47f af7b 	bne.w	810550e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8105618:	683b      	ldr	r3, [r7, #0]
 810561a:	9300      	str	r3, [sp, #0]
 810561c:	697b      	ldr	r3, [r7, #20]
 810561e:	2200      	movs	r2, #0
 8105620:	2108      	movs	r1, #8
 8105622:	68f8      	ldr	r0, [r7, #12]
 8105624:	f000 fd9b 	bl	810615e <SPI_WaitOnFlagUntilTimeout>
 8105628:	4603      	mov	r3, r0
 810562a:	2b00      	cmp	r3, #0
 810562c:	d007      	beq.n	810563e <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 810562e:	68fb      	ldr	r3, [r7, #12]
 8105630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105634:	f043 0220 	orr.w	r2, r3, #32
 8105638:	68fb      	ldr	r3, [r7, #12]
 810563a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 810563e:	68f8      	ldr	r0, [r7, #12]
 8105640:	f000 fced 	bl	810601e <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105644:	68fb      	ldr	r3, [r7, #12]
 8105646:	2200      	movs	r2, #0
 8105648:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 810564c:	68fb      	ldr	r3, [r7, #12]
 810564e:	2201      	movs	r2, #1
 8105650:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105654:	68fb      	ldr	r3, [r7, #12]
 8105656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810565a:	2b00      	cmp	r3, #0
 810565c:	d001      	beq.n	8105662 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 810565e:	2301      	movs	r3, #1
 8105660:	e000      	b.n	8105664 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8105662:	7efb      	ldrb	r3, [r7, #27]
}
 8105664:	4618      	mov	r0, r3
 8105666:	3720      	adds	r7, #32
 8105668:	46bd      	mov	sp, r7
 810566a:	bd80      	pop	{r7, pc}

0810566c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810566c:	b580      	push	{r7, lr}
 810566e:	b08a      	sub	sp, #40	; 0x28
 8105670:	af02      	add	r7, sp, #8
 8105672:	60f8      	str	r0, [r7, #12]
 8105674:	60b9      	str	r1, [r7, #8]
 8105676:	603b      	str	r3, [r7, #0]
 8105678:	4613      	mov	r3, r2
 810567a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810567c:	2300      	movs	r3, #0
 810567e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8105680:	68fb      	ldr	r3, [r7, #12]
 8105682:	681b      	ldr	r3, [r3, #0]
 8105684:	3330      	adds	r3, #48	; 0x30
 8105686:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8105688:	68fb      	ldr	r3, [r7, #12]
 810568a:	685b      	ldr	r3, [r3, #4]
 810568c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105690:	d112      	bne.n	81056b8 <HAL_SPI_Receive+0x4c>
 8105692:	68fb      	ldr	r3, [r7, #12]
 8105694:	689b      	ldr	r3, [r3, #8]
 8105696:	2b00      	cmp	r3, #0
 8105698:	d10e      	bne.n	81056b8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 810569a:	68fb      	ldr	r3, [r7, #12]
 810569c:	2204      	movs	r2, #4
 810569e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 81056a2:	88fa      	ldrh	r2, [r7, #6]
 81056a4:	683b      	ldr	r3, [r7, #0]
 81056a6:	9300      	str	r3, [sp, #0]
 81056a8:	4613      	mov	r3, r2
 81056aa:	68ba      	ldr	r2, [r7, #8]
 81056ac:	68b9      	ldr	r1, [r7, #8]
 81056ae:	68f8      	ldr	r0, [r7, #12]
 81056b0:	f000 f9cc 	bl	8105a4c <HAL_SPI_TransmitReceive>
 81056b4:	4603      	mov	r3, r0
 81056b6:	e1c5      	b.n	8105a44 <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 81056b8:	68fb      	ldr	r3, [r7, #12]
 81056ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81056be:	2b01      	cmp	r3, #1
 81056c0:	d101      	bne.n	81056c6 <HAL_SPI_Receive+0x5a>
 81056c2:	2302      	movs	r3, #2
 81056c4:	e1be      	b.n	8105a44 <HAL_SPI_Receive+0x3d8>
 81056c6:	68fb      	ldr	r3, [r7, #12]
 81056c8:	2201      	movs	r2, #1
 81056ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81056ce:	f7fd fbcd 	bl	8102e6c <HAL_GetTick>
 81056d2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81056d4:	68fb      	ldr	r3, [r7, #12]
 81056d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81056da:	b2db      	uxtb	r3, r3
 81056dc:	2b01      	cmp	r3, #1
 81056de:	d007      	beq.n	81056f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 81056e0:	2302      	movs	r3, #2
 81056e2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81056e4:	68fb      	ldr	r3, [r7, #12]
 81056e6:	2200      	movs	r2, #0
 81056e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81056ec:	7ffb      	ldrb	r3, [r7, #31]
 81056ee:	e1a9      	b.n	8105a44 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 81056f0:	68bb      	ldr	r3, [r7, #8]
 81056f2:	2b00      	cmp	r3, #0
 81056f4:	d002      	beq.n	81056fc <HAL_SPI_Receive+0x90>
 81056f6:	88fb      	ldrh	r3, [r7, #6]
 81056f8:	2b00      	cmp	r3, #0
 81056fa:	d107      	bne.n	810570c <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 81056fc:	2301      	movs	r3, #1
 81056fe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8105700:	68fb      	ldr	r3, [r7, #12]
 8105702:	2200      	movs	r2, #0
 8105704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105708:	7ffb      	ldrb	r3, [r7, #31]
 810570a:	e19b      	b.n	8105a44 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 810570c:	68fb      	ldr	r3, [r7, #12]
 810570e:	2204      	movs	r2, #4
 8105710:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105714:	68fb      	ldr	r3, [r7, #12]
 8105716:	2200      	movs	r2, #0
 8105718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 810571c:	68fb      	ldr	r3, [r7, #12]
 810571e:	68ba      	ldr	r2, [r7, #8]
 8105720:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8105722:	68fb      	ldr	r3, [r7, #12]
 8105724:	88fa      	ldrh	r2, [r7, #6]
 8105726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810572a:	68fb      	ldr	r3, [r7, #12]
 810572c:	88fa      	ldrh	r2, [r7, #6]
 810572e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8105732:	68fb      	ldr	r3, [r7, #12]
 8105734:	2200      	movs	r2, #0
 8105736:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8105738:	68fb      	ldr	r3, [r7, #12]
 810573a:	2200      	movs	r2, #0
 810573c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8105740:	68fb      	ldr	r3, [r7, #12]
 8105742:	2200      	movs	r2, #0
 8105744:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8105748:	68fb      	ldr	r3, [r7, #12]
 810574a:	2200      	movs	r2, #0
 810574c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810574e:	68fb      	ldr	r3, [r7, #12]
 8105750:	2200      	movs	r2, #0
 8105752:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8105754:	68fb      	ldr	r3, [r7, #12]
 8105756:	689b      	ldr	r3, [r3, #8]
 8105758:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 810575c:	d107      	bne.n	810576e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 810575e:	68fb      	ldr	r3, [r7, #12]
 8105760:	681b      	ldr	r3, [r3, #0]
 8105762:	681a      	ldr	r2, [r3, #0]
 8105764:	68fb      	ldr	r3, [r7, #12]
 8105766:	681b      	ldr	r3, [r3, #0]
 8105768:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 810576c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810576e:	68fb      	ldr	r3, [r7, #12]
 8105770:	681b      	ldr	r3, [r3, #0]
 8105772:	685b      	ldr	r3, [r3, #4]
 8105774:	0c1b      	lsrs	r3, r3, #16
 8105776:	041b      	lsls	r3, r3, #16
 8105778:	88f9      	ldrh	r1, [r7, #6]
 810577a:	68fa      	ldr	r2, [r7, #12]
 810577c:	6812      	ldr	r2, [r2, #0]
 810577e:	430b      	orrs	r3, r1
 8105780:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8105782:	68fb      	ldr	r3, [r7, #12]
 8105784:	681b      	ldr	r3, [r3, #0]
 8105786:	681a      	ldr	r2, [r3, #0]
 8105788:	68fb      	ldr	r3, [r7, #12]
 810578a:	681b      	ldr	r3, [r3, #0]
 810578c:	f042 0201 	orr.w	r2, r2, #1
 8105790:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8105792:	68fb      	ldr	r3, [r7, #12]
 8105794:	685b      	ldr	r3, [r3, #4]
 8105796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810579a:	d107      	bne.n	81057ac <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810579c:	68fb      	ldr	r3, [r7, #12]
 810579e:	681b      	ldr	r3, [r3, #0]
 81057a0:	681a      	ldr	r2, [r3, #0]
 81057a2:	68fb      	ldr	r3, [r7, #12]
 81057a4:	681b      	ldr	r3, [r3, #0]
 81057a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81057aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81057ac:	68fb      	ldr	r3, [r7, #12]
 81057ae:	68db      	ldr	r3, [r3, #12]
 81057b0:	2b0f      	cmp	r3, #15
 81057b2:	d948      	bls.n	8105846 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 81057b4:	e040      	b.n	8105838 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 81057b6:	68fb      	ldr	r3, [r7, #12]
 81057b8:	681b      	ldr	r3, [r3, #0]
 81057ba:	695a      	ldr	r2, [r3, #20]
 81057bc:	f248 0308 	movw	r3, #32776	; 0x8008
 81057c0:	4013      	ands	r3, r2
 81057c2:	2b00      	cmp	r3, #0
 81057c4:	d014      	beq.n	81057f0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81057c6:	68fb      	ldr	r3, [r7, #12]
 81057c8:	681a      	ldr	r2, [r3, #0]
 81057ca:	68fb      	ldr	r3, [r7, #12]
 81057cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81057ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81057d0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81057d2:	68fb      	ldr	r3, [r7, #12]
 81057d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81057d6:	1d1a      	adds	r2, r3, #4
 81057d8:	68fb      	ldr	r3, [r7, #12]
 81057da:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81057dc:	68fb      	ldr	r3, [r7, #12]
 81057de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81057e2:	b29b      	uxth	r3, r3
 81057e4:	3b01      	subs	r3, #1
 81057e6:	b29a      	uxth	r2, r3
 81057e8:	68fb      	ldr	r3, [r7, #12]
 81057ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81057ee:	e023      	b.n	8105838 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81057f0:	f7fd fb3c 	bl	8102e6c <HAL_GetTick>
 81057f4:	4602      	mov	r2, r0
 81057f6:	697b      	ldr	r3, [r7, #20]
 81057f8:	1ad3      	subs	r3, r2, r3
 81057fa:	683a      	ldr	r2, [r7, #0]
 81057fc:	429a      	cmp	r2, r3
 81057fe:	d803      	bhi.n	8105808 <HAL_SPI_Receive+0x19c>
 8105800:	683b      	ldr	r3, [r7, #0]
 8105802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105806:	d102      	bne.n	810580e <HAL_SPI_Receive+0x1a2>
 8105808:	683b      	ldr	r3, [r7, #0]
 810580a:	2b00      	cmp	r3, #0
 810580c:	d114      	bne.n	8105838 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810580e:	68f8      	ldr	r0, [r7, #12]
 8105810:	f000 fc05 	bl	810601e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8105814:	68fb      	ldr	r3, [r7, #12]
 8105816:	2200      	movs	r2, #0
 8105818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810581c:	68fb      	ldr	r3, [r7, #12]
 810581e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105822:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105826:	68fb      	ldr	r3, [r7, #12]
 8105828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 810582c:	68fb      	ldr	r3, [r7, #12]
 810582e:	2201      	movs	r2, #1
 8105830:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105834:	2303      	movs	r3, #3
 8105836:	e105      	b.n	8105a44 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8105838:	68fb      	ldr	r3, [r7, #12]
 810583a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810583e:	b29b      	uxth	r3, r3
 8105840:	2b00      	cmp	r3, #0
 8105842:	d1b8      	bne.n	81057b6 <HAL_SPI_Receive+0x14a>
 8105844:	e0eb      	b.n	8105a1e <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105846:	68fb      	ldr	r3, [r7, #12]
 8105848:	68db      	ldr	r3, [r3, #12]
 810584a:	2b07      	cmp	r3, #7
 810584c:	f240 80e0 	bls.w	8105a10 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8105850:	e05b      	b.n	810590a <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8105852:	68fb      	ldr	r3, [r7, #12]
 8105854:	681b      	ldr	r3, [r3, #0]
 8105856:	695b      	ldr	r3, [r3, #20]
 8105858:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 810585c:	2b00      	cmp	r3, #0
 810585e:	d030      	beq.n	81058c2 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105860:	68fb      	ldr	r3, [r7, #12]
 8105862:	681b      	ldr	r3, [r3, #0]
 8105864:	695b      	ldr	r3, [r3, #20]
 8105866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810586a:	2b00      	cmp	r3, #0
 810586c:	d014      	beq.n	8105898 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 810586e:	68fb      	ldr	r3, [r7, #12]
 8105870:	681a      	ldr	r2, [r3, #0]
 8105872:	68fb      	ldr	r3, [r7, #12]
 8105874:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105876:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105878:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810587e:	1d1a      	adds	r2, r3, #4
 8105880:	68fb      	ldr	r3, [r7, #12]
 8105882:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810588a:	b29b      	uxth	r3, r3
 810588c:	3b02      	subs	r3, #2
 810588e:	b29a      	uxth	r2, r3
 8105890:	68fb      	ldr	r3, [r7, #12]
 8105892:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8105896:	e038      	b.n	810590a <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105898:	68fb      	ldr	r3, [r7, #12]
 810589a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810589c:	69ba      	ldr	r2, [r7, #24]
 810589e:	8812      	ldrh	r2, [r2, #0]
 81058a0:	b292      	uxth	r2, r2
 81058a2:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81058a4:	68fb      	ldr	r3, [r7, #12]
 81058a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058a8:	1c9a      	adds	r2, r3, #2
 81058aa:	68fb      	ldr	r3, [r7, #12]
 81058ac:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81058ae:	68fb      	ldr	r3, [r7, #12]
 81058b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81058b4:	b29b      	uxth	r3, r3
 81058b6:	3b01      	subs	r3, #1
 81058b8:	b29a      	uxth	r2, r3
 81058ba:	68fb      	ldr	r3, [r7, #12]
 81058bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81058c0:	e023      	b.n	810590a <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81058c2:	f7fd fad3 	bl	8102e6c <HAL_GetTick>
 81058c6:	4602      	mov	r2, r0
 81058c8:	697b      	ldr	r3, [r7, #20]
 81058ca:	1ad3      	subs	r3, r2, r3
 81058cc:	683a      	ldr	r2, [r7, #0]
 81058ce:	429a      	cmp	r2, r3
 81058d0:	d803      	bhi.n	81058da <HAL_SPI_Receive+0x26e>
 81058d2:	683b      	ldr	r3, [r7, #0]
 81058d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81058d8:	d102      	bne.n	81058e0 <HAL_SPI_Receive+0x274>
 81058da:	683b      	ldr	r3, [r7, #0]
 81058dc:	2b00      	cmp	r3, #0
 81058de:	d114      	bne.n	810590a <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81058e0:	68f8      	ldr	r0, [r7, #12]
 81058e2:	f000 fb9c 	bl	810601e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81058e6:	68fb      	ldr	r3, [r7, #12]
 81058e8:	2200      	movs	r2, #0
 81058ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81058ee:	68fb      	ldr	r3, [r7, #12]
 81058f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81058f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81058f8:	68fb      	ldr	r3, [r7, #12]
 81058fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 81058fe:	68fb      	ldr	r3, [r7, #12]
 8105900:	2201      	movs	r2, #1
 8105902:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105906:	2303      	movs	r3, #3
 8105908:	e09c      	b.n	8105a44 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810590a:	68fb      	ldr	r3, [r7, #12]
 810590c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105910:	b29b      	uxth	r3, r3
 8105912:	2b00      	cmp	r3, #0
 8105914:	d19d      	bne.n	8105852 <HAL_SPI_Receive+0x1e6>
 8105916:	e082      	b.n	8105a1e <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8105918:	68fb      	ldr	r3, [r7, #12]
 810591a:	681b      	ldr	r3, [r3, #0]
 810591c:	695b      	ldr	r3, [r3, #20]
 810591e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105922:	2b00      	cmp	r3, #0
 8105924:	d050      	beq.n	81059c8 <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105926:	68fb      	ldr	r3, [r7, #12]
 8105928:	681b      	ldr	r3, [r3, #0]
 810592a:	695b      	ldr	r3, [r3, #20]
 810592c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105930:	2b00      	cmp	r3, #0
 8105932:	d014      	beq.n	810595e <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105934:	68fb      	ldr	r3, [r7, #12]
 8105936:	681a      	ldr	r2, [r3, #0]
 8105938:	68fb      	ldr	r3, [r7, #12]
 810593a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810593c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810593e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105940:	68fb      	ldr	r3, [r7, #12]
 8105942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105944:	1d1a      	adds	r2, r3, #4
 8105946:	68fb      	ldr	r3, [r7, #12]
 8105948:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810594a:	68fb      	ldr	r3, [r7, #12]
 810594c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105950:	b29b      	uxth	r3, r3
 8105952:	3b04      	subs	r3, #4
 8105954:	b29a      	uxth	r2, r3
 8105956:	68fb      	ldr	r3, [r7, #12]
 8105958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810595c:	e058      	b.n	8105a10 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 810595e:	68fb      	ldr	r3, [r7, #12]
 8105960:	681b      	ldr	r3, [r3, #0]
 8105962:	695b      	ldr	r3, [r3, #20]
 8105964:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8105968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810596c:	d914      	bls.n	8105998 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810596e:	68fb      	ldr	r3, [r7, #12]
 8105970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105972:	69ba      	ldr	r2, [r7, #24]
 8105974:	8812      	ldrh	r2, [r2, #0]
 8105976:	b292      	uxth	r2, r2
 8105978:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810597a:	68fb      	ldr	r3, [r7, #12]
 810597c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810597e:	1c9a      	adds	r2, r3, #2
 8105980:	68fb      	ldr	r3, [r7, #12]
 8105982:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105984:	68fb      	ldr	r3, [r7, #12]
 8105986:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810598a:	b29b      	uxth	r3, r3
 810598c:	3b02      	subs	r3, #2
 810598e:	b29a      	uxth	r2, r3
 8105990:	68fb      	ldr	r3, [r7, #12]
 8105992:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8105996:	e03b      	b.n	8105a10 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105998:	68fb      	ldr	r3, [r7, #12]
 810599a:	681b      	ldr	r3, [r3, #0]
 810599c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81059a0:	68fb      	ldr	r3, [r7, #12]
 81059a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059a4:	7812      	ldrb	r2, [r2, #0]
 81059a6:	b2d2      	uxtb	r2, r2
 81059a8:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81059aa:	68fb      	ldr	r3, [r7, #12]
 81059ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81059ae:	1c5a      	adds	r2, r3, #1
 81059b0:	68fb      	ldr	r3, [r7, #12]
 81059b2:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81059b4:	68fb      	ldr	r3, [r7, #12]
 81059b6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81059ba:	b29b      	uxth	r3, r3
 81059bc:	3b01      	subs	r3, #1
 81059be:	b29a      	uxth	r2, r3
 81059c0:	68fb      	ldr	r3, [r7, #12]
 81059c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81059c6:	e023      	b.n	8105a10 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81059c8:	f7fd fa50 	bl	8102e6c <HAL_GetTick>
 81059cc:	4602      	mov	r2, r0
 81059ce:	697b      	ldr	r3, [r7, #20]
 81059d0:	1ad3      	subs	r3, r2, r3
 81059d2:	683a      	ldr	r2, [r7, #0]
 81059d4:	429a      	cmp	r2, r3
 81059d6:	d803      	bhi.n	81059e0 <HAL_SPI_Receive+0x374>
 81059d8:	683b      	ldr	r3, [r7, #0]
 81059da:	f1b3 3fff 	cmp.w	r3, #4294967295
 81059de:	d102      	bne.n	81059e6 <HAL_SPI_Receive+0x37a>
 81059e0:	683b      	ldr	r3, [r7, #0]
 81059e2:	2b00      	cmp	r3, #0
 81059e4:	d114      	bne.n	8105a10 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81059e6:	68f8      	ldr	r0, [r7, #12]
 81059e8:	f000 fb19 	bl	810601e <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81059ec:	68fb      	ldr	r3, [r7, #12]
 81059ee:	2200      	movs	r2, #0
 81059f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81059f4:	68fb      	ldr	r3, [r7, #12]
 81059f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81059fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81059fe:	68fb      	ldr	r3, [r7, #12]
 8105a00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105a04:	68fb      	ldr	r3, [r7, #12]
 8105a06:	2201      	movs	r2, #1
 8105a08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105a0c:	2303      	movs	r3, #3
 8105a0e:	e019      	b.n	8105a44 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8105a10:	68fb      	ldr	r3, [r7, #12]
 8105a12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105a16:	b29b      	uxth	r3, r3
 8105a18:	2b00      	cmp	r3, #0
 8105a1a:	f47f af7d 	bne.w	8105918 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105a1e:	68f8      	ldr	r0, [r7, #12]
 8105a20:	f000 fafd 	bl	810601e <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105a24:	68fb      	ldr	r3, [r7, #12]
 8105a26:	2200      	movs	r2, #0
 8105a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105a2c:	68fb      	ldr	r3, [r7, #12]
 8105a2e:	2201      	movs	r2, #1
 8105a30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105a34:	68fb      	ldr	r3, [r7, #12]
 8105a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105a3a:	2b00      	cmp	r3, #0
 8105a3c:	d001      	beq.n	8105a42 <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 8105a3e:	2301      	movs	r3, #1
 8105a40:	e000      	b.n	8105a44 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 8105a42:	7ffb      	ldrb	r3, [r7, #31]
}
 8105a44:	4618      	mov	r0, r3
 8105a46:	3720      	adds	r7, #32
 8105a48:	46bd      	mov	sp, r7
 8105a4a:	bd80      	pop	{r7, pc}

08105a4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8105a4c:	b580      	push	{r7, lr}
 8105a4e:	b08e      	sub	sp, #56	; 0x38
 8105a50:	af02      	add	r7, sp, #8
 8105a52:	60f8      	str	r0, [r7, #12]
 8105a54:	60b9      	str	r1, [r7, #8]
 8105a56:	607a      	str	r2, [r7, #4]
 8105a58:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8105a5a:	2300      	movs	r3, #0
 8105a5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8105a60:	68fb      	ldr	r3, [r7, #12]
 8105a62:	681b      	ldr	r3, [r3, #0]
 8105a64:	3320      	adds	r3, #32
 8105a66:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8105a68:	68fb      	ldr	r3, [r7, #12]
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	3330      	adds	r3, #48	; 0x30
 8105a6e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8105a70:	68fb      	ldr	r3, [r7, #12]
 8105a72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105a76:	2b01      	cmp	r3, #1
 8105a78:	d101      	bne.n	8105a7e <HAL_SPI_TransmitReceive+0x32>
 8105a7a:	2302      	movs	r3, #2
 8105a7c:	e2cb      	b.n	8106016 <HAL_SPI_TransmitReceive+0x5ca>
 8105a7e:	68fb      	ldr	r3, [r7, #12]
 8105a80:	2201      	movs	r2, #1
 8105a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8105a86:	f7fd f9f1 	bl	8102e6c <HAL_GetTick>
 8105a8a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8105a8c:	887b      	ldrh	r3, [r7, #2]
 8105a8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8105a90:	887b      	ldrh	r3, [r7, #2]
 8105a92:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8105a94:	68fb      	ldr	r3, [r7, #12]
 8105a96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105a9a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8105a9c:	68fb      	ldr	r3, [r7, #12]
 8105a9e:	685b      	ldr	r3, [r3, #4]
 8105aa0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8105aa2:	7efb      	ldrb	r3, [r7, #27]
 8105aa4:	2b01      	cmp	r3, #1
 8105aa6:	d014      	beq.n	8105ad2 <HAL_SPI_TransmitReceive+0x86>
 8105aa8:	697b      	ldr	r3, [r7, #20]
 8105aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105aae:	d106      	bne.n	8105abe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8105ab0:	68fb      	ldr	r3, [r7, #12]
 8105ab2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8105ab4:	2b00      	cmp	r3, #0
 8105ab6:	d102      	bne.n	8105abe <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8105ab8:	7efb      	ldrb	r3, [r7, #27]
 8105aba:	2b04      	cmp	r3, #4
 8105abc:	d009      	beq.n	8105ad2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8105abe:	2302      	movs	r3, #2
 8105ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8105ac4:	68fb      	ldr	r3, [r7, #12]
 8105ac6:	2200      	movs	r2, #0
 8105ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105acc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8105ad0:	e2a1      	b.n	8106016 <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8105ad2:	68bb      	ldr	r3, [r7, #8]
 8105ad4:	2b00      	cmp	r3, #0
 8105ad6:	d005      	beq.n	8105ae4 <HAL_SPI_TransmitReceive+0x98>
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	2b00      	cmp	r3, #0
 8105adc:	d002      	beq.n	8105ae4 <HAL_SPI_TransmitReceive+0x98>
 8105ade:	887b      	ldrh	r3, [r7, #2]
 8105ae0:	2b00      	cmp	r3, #0
 8105ae2:	d109      	bne.n	8105af8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8105ae4:	2301      	movs	r3, #1
 8105ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8105aea:	68fb      	ldr	r3, [r7, #12]
 8105aec:	2200      	movs	r2, #0
 8105aee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8105af2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8105af6:	e28e      	b.n	8106016 <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105af8:	68fb      	ldr	r3, [r7, #12]
 8105afa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105afe:	b2db      	uxtb	r3, r3
 8105b00:	2b04      	cmp	r3, #4
 8105b02:	d003      	beq.n	8105b0c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8105b04:	68fb      	ldr	r3, [r7, #12]
 8105b06:	2205      	movs	r2, #5
 8105b08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105b0c:	68fb      	ldr	r3, [r7, #12]
 8105b0e:	2200      	movs	r2, #0
 8105b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8105b14:	68fb      	ldr	r3, [r7, #12]
 8105b16:	687a      	ldr	r2, [r7, #4]
 8105b18:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8105b1a:	68fb      	ldr	r3, [r7, #12]
 8105b1c:	887a      	ldrh	r2, [r7, #2]
 8105b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8105b22:	68fb      	ldr	r3, [r7, #12]
 8105b24:	887a      	ldrh	r2, [r7, #2]
 8105b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8105b2a:	68fb      	ldr	r3, [r7, #12]
 8105b2c:	68ba      	ldr	r2, [r7, #8]
 8105b2e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8105b30:	68fb      	ldr	r3, [r7, #12]
 8105b32:	887a      	ldrh	r2, [r7, #2]
 8105b34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8105b38:	68fb      	ldr	r3, [r7, #12]
 8105b3a:	887a      	ldrh	r2, [r7, #2]
 8105b3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8105b40:	68fb      	ldr	r3, [r7, #12]
 8105b42:	2200      	movs	r2, #0
 8105b44:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8105b46:	68fb      	ldr	r3, [r7, #12]
 8105b48:	2200      	movs	r2, #0
 8105b4a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105b4c:	68fb      	ldr	r3, [r7, #12]
 8105b4e:	681b      	ldr	r3, [r3, #0]
 8105b50:	685b      	ldr	r3, [r3, #4]
 8105b52:	0c1b      	lsrs	r3, r3, #16
 8105b54:	041b      	lsls	r3, r3, #16
 8105b56:	8879      	ldrh	r1, [r7, #2]
 8105b58:	68fa      	ldr	r2, [r7, #12]
 8105b5a:	6812      	ldr	r2, [r2, #0]
 8105b5c:	430b      	orrs	r3, r1
 8105b5e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8105b60:	68fb      	ldr	r3, [r7, #12]
 8105b62:	681b      	ldr	r3, [r3, #0]
 8105b64:	681a      	ldr	r2, [r3, #0]
 8105b66:	68fb      	ldr	r3, [r7, #12]
 8105b68:	681b      	ldr	r3, [r3, #0]
 8105b6a:	f042 0201 	orr.w	r2, r2, #1
 8105b6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8105b70:	68fb      	ldr	r3, [r7, #12]
 8105b72:	685b      	ldr	r3, [r3, #4]
 8105b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105b78:	d107      	bne.n	8105b8a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8105b7a:	68fb      	ldr	r3, [r7, #12]
 8105b7c:	681b      	ldr	r3, [r3, #0]
 8105b7e:	681a      	ldr	r2, [r3, #0]
 8105b80:	68fb      	ldr	r3, [r7, #12]
 8105b82:	681b      	ldr	r3, [r3, #0]
 8105b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105b88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8105b8a:	68fb      	ldr	r3, [r7, #12]
 8105b8c:	68db      	ldr	r3, [r3, #12]
 8105b8e:	2b0f      	cmp	r3, #15
 8105b90:	d970      	bls.n	8105c74 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105b92:	e068      	b.n	8105c66 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8105b94:	68fb      	ldr	r3, [r7, #12]
 8105b96:	681b      	ldr	r3, [r3, #0]
 8105b98:	695b      	ldr	r3, [r3, #20]
 8105b9a:	f003 0302 	and.w	r3, r3, #2
 8105b9e:	2b02      	cmp	r3, #2
 8105ba0:	d11a      	bne.n	8105bd8 <HAL_SPI_TransmitReceive+0x18c>
 8105ba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105ba4:	2b00      	cmp	r3, #0
 8105ba6:	d017      	beq.n	8105bd8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105ba8:	68fb      	ldr	r3, [r7, #12]
 8105baa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105bac:	68fb      	ldr	r3, [r7, #12]
 8105bae:	681b      	ldr	r3, [r3, #0]
 8105bb0:	6812      	ldr	r2, [r2, #0]
 8105bb2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8105bb4:	68fb      	ldr	r3, [r7, #12]
 8105bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105bb8:	1d1a      	adds	r2, r3, #4
 8105bba:	68fb      	ldr	r3, [r7, #12]
 8105bbc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8105bbe:	68fb      	ldr	r3, [r7, #12]
 8105bc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105bc4:	b29b      	uxth	r3, r3
 8105bc6:	3b01      	subs	r3, #1
 8105bc8:	b29a      	uxth	r2, r3
 8105bca:	68fb      	ldr	r3, [r7, #12]
 8105bcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8105bd0:	68fb      	ldr	r3, [r7, #12]
 8105bd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105bd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8105bd8:	68fb      	ldr	r3, [r7, #12]
 8105bda:	681b      	ldr	r3, [r3, #0]
 8105bdc:	695a      	ldr	r2, [r3, #20]
 8105bde:	f248 0308 	movw	r3, #32776	; 0x8008
 8105be2:	4013      	ands	r3, r2
 8105be4:	2b00      	cmp	r3, #0
 8105be6:	d01a      	beq.n	8105c1e <HAL_SPI_TransmitReceive+0x1d2>
 8105be8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105bea:	2b00      	cmp	r3, #0
 8105bec:	d017      	beq.n	8105c1e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105bee:	68fb      	ldr	r3, [r7, #12]
 8105bf0:	681a      	ldr	r2, [r3, #0]
 8105bf2:	68fb      	ldr	r3, [r7, #12]
 8105bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105bf6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105bf8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8105bfa:	68fb      	ldr	r3, [r7, #12]
 8105bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105bfe:	1d1a      	adds	r2, r3, #4
 8105c00:	68fb      	ldr	r3, [r7, #12]
 8105c02:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8105c04:	68fb      	ldr	r3, [r7, #12]
 8105c06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105c0a:	b29b      	uxth	r3, r3
 8105c0c:	3b01      	subs	r3, #1
 8105c0e:	b29a      	uxth	r2, r3
 8105c10:	68fb      	ldr	r3, [r7, #12]
 8105c12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8105c16:	68fb      	ldr	r3, [r7, #12]
 8105c18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105c1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105c1e:	f7fd f925 	bl	8102e6c <HAL_GetTick>
 8105c22:	4602      	mov	r2, r0
 8105c24:	69fb      	ldr	r3, [r7, #28]
 8105c26:	1ad3      	subs	r3, r2, r3
 8105c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105c2a:	429a      	cmp	r2, r3
 8105c2c:	d803      	bhi.n	8105c36 <HAL_SPI_TransmitReceive+0x1ea>
 8105c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105c34:	d102      	bne.n	8105c3c <HAL_SPI_TransmitReceive+0x1f0>
 8105c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105c38:	2b00      	cmp	r3, #0
 8105c3a:	d114      	bne.n	8105c66 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105c3c:	68f8      	ldr	r0, [r7, #12]
 8105c3e:	f000 f9ee 	bl	810601e <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105c42:	68fb      	ldr	r3, [r7, #12]
 8105c44:	2200      	movs	r2, #0
 8105c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105c4a:	68fb      	ldr	r3, [r7, #12]
 8105c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105c50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105c54:	68fb      	ldr	r3, [r7, #12]
 8105c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105c5a:	68fb      	ldr	r3, [r7, #12]
 8105c5c:	2201      	movs	r2, #1
 8105c5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105c62:	2303      	movs	r3, #3
 8105c64:	e1d7      	b.n	8106016 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105c66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105c68:	2b00      	cmp	r3, #0
 8105c6a:	d193      	bne.n	8105b94 <HAL_SPI_TransmitReceive+0x148>
 8105c6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105c6e:	2b00      	cmp	r3, #0
 8105c70:	d190      	bne.n	8105b94 <HAL_SPI_TransmitReceive+0x148>
 8105c72:	e1a9      	b.n	8105fc8 <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105c74:	68fb      	ldr	r3, [r7, #12]
 8105c76:	68db      	ldr	r3, [r3, #12]
 8105c78:	2b07      	cmp	r3, #7
 8105c7a:	f240 819d 	bls.w	8105fb8 <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105c7e:	e0a6      	b.n	8105dce <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8105c80:	68fb      	ldr	r3, [r7, #12]
 8105c82:	681b      	ldr	r3, [r3, #0]
 8105c84:	695b      	ldr	r3, [r3, #20]
 8105c86:	f003 0302 	and.w	r3, r3, #2
 8105c8a:	2b02      	cmp	r3, #2
 8105c8c:	d139      	bne.n	8105d02 <HAL_SPI_TransmitReceive+0x2b6>
 8105c8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105c90:	2b00      	cmp	r3, #0
 8105c92:	d036      	beq.n	8105d02 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105c94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105c96:	2b01      	cmp	r3, #1
 8105c98:	d91c      	bls.n	8105cd4 <HAL_SPI_TransmitReceive+0x288>
 8105c9a:	68fb      	ldr	r3, [r7, #12]
 8105c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105c9e:	2b00      	cmp	r3, #0
 8105ca0:	d018      	beq.n	8105cd4 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105ca2:	68fb      	ldr	r3, [r7, #12]
 8105ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105ca6:	68fb      	ldr	r3, [r7, #12]
 8105ca8:	681b      	ldr	r3, [r3, #0]
 8105caa:	6812      	ldr	r2, [r2, #0]
 8105cac:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105cae:	68fb      	ldr	r3, [r7, #12]
 8105cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105cb2:	1d1a      	adds	r2, r3, #4
 8105cb4:	68fb      	ldr	r3, [r7, #12]
 8105cb6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8105cb8:	68fb      	ldr	r3, [r7, #12]
 8105cba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105cbe:	b29b      	uxth	r3, r3
 8105cc0:	3b02      	subs	r3, #2
 8105cc2:	b29a      	uxth	r2, r3
 8105cc4:	68fb      	ldr	r3, [r7, #12]
 8105cc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105cca:	68fb      	ldr	r3, [r7, #12]
 8105ccc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105cd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105cd2:	e016      	b.n	8105d02 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105cd4:	68fb      	ldr	r3, [r7, #12]
 8105cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105cd8:	881a      	ldrh	r2, [r3, #0]
 8105cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105cdc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8105cde:	68fb      	ldr	r3, [r7, #12]
 8105ce0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105ce2:	1c9a      	adds	r2, r3, #2
 8105ce4:	68fb      	ldr	r3, [r7, #12]
 8105ce6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8105ce8:	68fb      	ldr	r3, [r7, #12]
 8105cea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105cee:	b29b      	uxth	r3, r3
 8105cf0:	3b01      	subs	r3, #1
 8105cf2:	b29a      	uxth	r2, r3
 8105cf4:	68fb      	ldr	r3, [r7, #12]
 8105cf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105cfa:	68fb      	ldr	r3, [r7, #12]
 8105cfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105d00:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8105d02:	68fb      	ldr	r3, [r7, #12]
 8105d04:	681b      	ldr	r3, [r3, #0]
 8105d06:	695b      	ldr	r3, [r3, #20]
 8105d08:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105d0c:	2b00      	cmp	r3, #0
 8105d0e:	d03a      	beq.n	8105d86 <HAL_SPI_TransmitReceive+0x33a>
 8105d10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105d12:	2b00      	cmp	r3, #0
 8105d14:	d037      	beq.n	8105d86 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105d16:	68fb      	ldr	r3, [r7, #12]
 8105d18:	681b      	ldr	r3, [r3, #0]
 8105d1a:	695b      	ldr	r3, [r3, #20]
 8105d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105d20:	2b00      	cmp	r3, #0
 8105d22:	d018      	beq.n	8105d56 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105d24:	68fb      	ldr	r3, [r7, #12]
 8105d26:	681a      	ldr	r2, [r3, #0]
 8105d28:	68fb      	ldr	r3, [r7, #12]
 8105d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105d2e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105d30:	68fb      	ldr	r3, [r7, #12]
 8105d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d34:	1d1a      	adds	r2, r3, #4
 8105d36:	68fb      	ldr	r3, [r7, #12]
 8105d38:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105d3a:	68fb      	ldr	r3, [r7, #12]
 8105d3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105d40:	b29b      	uxth	r3, r3
 8105d42:	3b02      	subs	r3, #2
 8105d44:	b29a      	uxth	r2, r3
 8105d46:	68fb      	ldr	r3, [r7, #12]
 8105d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105d4c:	68fb      	ldr	r3, [r7, #12]
 8105d4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105d52:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105d54:	e017      	b.n	8105d86 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105d56:	68fb      	ldr	r3, [r7, #12]
 8105d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d5a:	6a3a      	ldr	r2, [r7, #32]
 8105d5c:	8812      	ldrh	r2, [r2, #0]
 8105d5e:	b292      	uxth	r2, r2
 8105d60:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105d62:	68fb      	ldr	r3, [r7, #12]
 8105d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105d66:	1c9a      	adds	r2, r3, #2
 8105d68:	68fb      	ldr	r3, [r7, #12]
 8105d6a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8105d6c:	68fb      	ldr	r3, [r7, #12]
 8105d6e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105d72:	b29b      	uxth	r3, r3
 8105d74:	3b01      	subs	r3, #1
 8105d76:	b29a      	uxth	r2, r3
 8105d78:	68fb      	ldr	r3, [r7, #12]
 8105d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105d7e:	68fb      	ldr	r3, [r7, #12]
 8105d80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105d84:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105d86:	f7fd f871 	bl	8102e6c <HAL_GetTick>
 8105d8a:	4602      	mov	r2, r0
 8105d8c:	69fb      	ldr	r3, [r7, #28]
 8105d8e:	1ad3      	subs	r3, r2, r3
 8105d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105d92:	429a      	cmp	r2, r3
 8105d94:	d803      	bhi.n	8105d9e <HAL_SPI_TransmitReceive+0x352>
 8105d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105d9c:	d102      	bne.n	8105da4 <HAL_SPI_TransmitReceive+0x358>
 8105d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105da0:	2b00      	cmp	r3, #0
 8105da2:	d114      	bne.n	8105dce <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105da4:	68f8      	ldr	r0, [r7, #12]
 8105da6:	f000 f93a 	bl	810601e <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105daa:	68fb      	ldr	r3, [r7, #12]
 8105dac:	2200      	movs	r2, #0
 8105dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105db2:	68fb      	ldr	r3, [r7, #12]
 8105db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105db8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105dbc:	68fb      	ldr	r3, [r7, #12]
 8105dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105dc2:	68fb      	ldr	r3, [r7, #12]
 8105dc4:	2201      	movs	r2, #1
 8105dc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105dca:	2303      	movs	r3, #3
 8105dcc:	e123      	b.n	8106016 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105dce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105dd0:	2b00      	cmp	r3, #0
 8105dd2:	f47f af55 	bne.w	8105c80 <HAL_SPI_TransmitReceive+0x234>
 8105dd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105dd8:	2b00      	cmp	r3, #0
 8105dda:	f47f af51 	bne.w	8105c80 <HAL_SPI_TransmitReceive+0x234>
 8105dde:	e0f3      	b.n	8105fc8 <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8105de0:	68fb      	ldr	r3, [r7, #12]
 8105de2:	681b      	ldr	r3, [r3, #0]
 8105de4:	695b      	ldr	r3, [r3, #20]
 8105de6:	f003 0302 	and.w	r3, r3, #2
 8105dea:	2b02      	cmp	r3, #2
 8105dec:	d15a      	bne.n	8105ea4 <HAL_SPI_TransmitReceive+0x458>
 8105dee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105df0:	2b00      	cmp	r3, #0
 8105df2:	d057      	beq.n	8105ea4 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8105df4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105df6:	2b03      	cmp	r3, #3
 8105df8:	d91c      	bls.n	8105e34 <HAL_SPI_TransmitReceive+0x3e8>
 8105dfa:	68fb      	ldr	r3, [r7, #12]
 8105dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105dfe:	2b40      	cmp	r3, #64	; 0x40
 8105e00:	d918      	bls.n	8105e34 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105e02:	68fb      	ldr	r3, [r7, #12]
 8105e04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105e06:	68fb      	ldr	r3, [r7, #12]
 8105e08:	681b      	ldr	r3, [r3, #0]
 8105e0a:	6812      	ldr	r2, [r2, #0]
 8105e0c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105e0e:	68fb      	ldr	r3, [r7, #12]
 8105e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e12:	1d1a      	adds	r2, r3, #4
 8105e14:	68fb      	ldr	r3, [r7, #12]
 8105e16:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8105e18:	68fb      	ldr	r3, [r7, #12]
 8105e1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105e1e:	b29b      	uxth	r3, r3
 8105e20:	3b04      	subs	r3, #4
 8105e22:	b29a      	uxth	r2, r3
 8105e24:	68fb      	ldr	r3, [r7, #12]
 8105e26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105e2a:	68fb      	ldr	r3, [r7, #12]
 8105e2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105e30:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105e32:	e037      	b.n	8105ea4 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105e34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105e36:	2b01      	cmp	r3, #1
 8105e38:	d91b      	bls.n	8105e72 <HAL_SPI_TransmitReceive+0x426>
 8105e3a:	68fb      	ldr	r3, [r7, #12]
 8105e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105e3e:	2b00      	cmp	r3, #0
 8105e40:	d017      	beq.n	8105e72 <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105e42:	68fb      	ldr	r3, [r7, #12]
 8105e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e46:	881a      	ldrh	r2, [r3, #0]
 8105e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105e4a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e50:	1c9a      	adds	r2, r3, #2
 8105e52:	68fb      	ldr	r3, [r7, #12]
 8105e54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8105e56:	68fb      	ldr	r3, [r7, #12]
 8105e58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105e5c:	b29b      	uxth	r3, r3
 8105e5e:	3b02      	subs	r3, #2
 8105e60:	b29a      	uxth	r2, r3
 8105e62:	68fb      	ldr	r3, [r7, #12]
 8105e64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105e68:	68fb      	ldr	r3, [r7, #12]
 8105e6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105e6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105e70:	e018      	b.n	8105ea4 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8105e72:	68fb      	ldr	r3, [r7, #12]
 8105e74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8105e76:	68fb      	ldr	r3, [r7, #12]
 8105e78:	681b      	ldr	r3, [r3, #0]
 8105e7a:	3320      	adds	r3, #32
 8105e7c:	7812      	ldrb	r2, [r2, #0]
 8105e7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8105e80:	68fb      	ldr	r3, [r7, #12]
 8105e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105e84:	1c5a      	adds	r2, r3, #1
 8105e86:	68fb      	ldr	r3, [r7, #12]
 8105e88:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8105e8a:	68fb      	ldr	r3, [r7, #12]
 8105e8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105e90:	b29b      	uxth	r3, r3
 8105e92:	3b01      	subs	r3, #1
 8105e94:	b29a      	uxth	r2, r3
 8105e96:	68fb      	ldr	r3, [r7, #12]
 8105e98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8105e9c:	68fb      	ldr	r3, [r7, #12]
 8105e9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105ea2:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8105ea4:	68fb      	ldr	r3, [r7, #12]
 8105ea6:	681b      	ldr	r3, [r3, #0]
 8105ea8:	695b      	ldr	r3, [r3, #20]
 8105eaa:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105eae:	2b00      	cmp	r3, #0
 8105eb0:	d05e      	beq.n	8105f70 <HAL_SPI_TransmitReceive+0x524>
 8105eb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105eb4:	2b00      	cmp	r3, #0
 8105eb6:	d05b      	beq.n	8105f70 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105eb8:	68fb      	ldr	r3, [r7, #12]
 8105eba:	681b      	ldr	r3, [r3, #0]
 8105ebc:	695b      	ldr	r3, [r3, #20]
 8105ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105ec2:	2b00      	cmp	r3, #0
 8105ec4:	d018      	beq.n	8105ef8 <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105ec6:	68fb      	ldr	r3, [r7, #12]
 8105ec8:	681a      	ldr	r2, [r3, #0]
 8105eca:	68fb      	ldr	r3, [r7, #12]
 8105ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105ece:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105ed0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105ed2:	68fb      	ldr	r3, [r7, #12]
 8105ed4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105ed6:	1d1a      	adds	r2, r3, #4
 8105ed8:	68fb      	ldr	r3, [r7, #12]
 8105eda:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8105edc:	68fb      	ldr	r3, [r7, #12]
 8105ede:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105ee2:	b29b      	uxth	r3, r3
 8105ee4:	3b04      	subs	r3, #4
 8105ee6:	b29a      	uxth	r2, r3
 8105ee8:	68fb      	ldr	r3, [r7, #12]
 8105eea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105eee:	68fb      	ldr	r3, [r7, #12]
 8105ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105ef4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105ef6:	e03b      	b.n	8105f70 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8105ef8:	68fb      	ldr	r3, [r7, #12]
 8105efa:	681b      	ldr	r3, [r3, #0]
 8105efc:	695b      	ldr	r3, [r3, #20]
 8105efe:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8105f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105f06:	d918      	bls.n	8105f3a <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105f08:	68fb      	ldr	r3, [r7, #12]
 8105f0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105f0c:	6a3a      	ldr	r2, [r7, #32]
 8105f0e:	8812      	ldrh	r2, [r2, #0]
 8105f10:	b292      	uxth	r2, r2
 8105f12:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105f14:	68fb      	ldr	r3, [r7, #12]
 8105f16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105f18:	1c9a      	adds	r2, r3, #2
 8105f1a:	68fb      	ldr	r3, [r7, #12]
 8105f1c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105f1e:	68fb      	ldr	r3, [r7, #12]
 8105f20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105f24:	b29b      	uxth	r3, r3
 8105f26:	3b02      	subs	r3, #2
 8105f28:	b29a      	uxth	r2, r3
 8105f2a:	68fb      	ldr	r3, [r7, #12]
 8105f2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105f30:	68fb      	ldr	r3, [r7, #12]
 8105f32:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105f36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105f38:	e01a      	b.n	8105f70 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8105f3a:	68fb      	ldr	r3, [r7, #12]
 8105f3c:	681b      	ldr	r3, [r3, #0]
 8105f3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8105f42:	68fb      	ldr	r3, [r7, #12]
 8105f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105f46:	7812      	ldrb	r2, [r2, #0]
 8105f48:	b2d2      	uxtb	r2, r2
 8105f4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105f4c:	68fb      	ldr	r3, [r7, #12]
 8105f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105f50:	1c5a      	adds	r2, r3, #1
 8105f52:	68fb      	ldr	r3, [r7, #12]
 8105f54:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8105f56:	68fb      	ldr	r3, [r7, #12]
 8105f58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105f5c:	b29b      	uxth	r3, r3
 8105f5e:	3b01      	subs	r3, #1
 8105f60:	b29a      	uxth	r2, r3
 8105f62:	68fb      	ldr	r3, [r7, #12]
 8105f64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105f68:	68fb      	ldr	r3, [r7, #12]
 8105f6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105f6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105f70:	f7fc ff7c 	bl	8102e6c <HAL_GetTick>
 8105f74:	4602      	mov	r2, r0
 8105f76:	69fb      	ldr	r3, [r7, #28]
 8105f78:	1ad3      	subs	r3, r2, r3
 8105f7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105f7c:	429a      	cmp	r2, r3
 8105f7e:	d803      	bhi.n	8105f88 <HAL_SPI_TransmitReceive+0x53c>
 8105f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105f86:	d102      	bne.n	8105f8e <HAL_SPI_TransmitReceive+0x542>
 8105f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f8a:	2b00      	cmp	r3, #0
 8105f8c:	d114      	bne.n	8105fb8 <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105f8e:	68f8      	ldr	r0, [r7, #12]
 8105f90:	f000 f845 	bl	810601e <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105f94:	68fb      	ldr	r3, [r7, #12]
 8105f96:	2200      	movs	r2, #0
 8105f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105f9c:	68fb      	ldr	r3, [r7, #12]
 8105f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105fa2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105fa6:	68fb      	ldr	r3, [r7, #12]
 8105fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8105fac:	68fb      	ldr	r3, [r7, #12]
 8105fae:	2201      	movs	r2, #1
 8105fb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105fb4:	2303      	movs	r3, #3
 8105fb6:	e02e      	b.n	8106016 <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105fb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105fba:	2b00      	cmp	r3, #0
 8105fbc:	f47f af10 	bne.w	8105de0 <HAL_SPI_TransmitReceive+0x394>
 8105fc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105fc2:	2b00      	cmp	r3, #0
 8105fc4:	f47f af0c 	bne.w	8105de0 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8105fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fca:	9300      	str	r3, [sp, #0]
 8105fcc:	69fb      	ldr	r3, [r7, #28]
 8105fce:	2200      	movs	r2, #0
 8105fd0:	2108      	movs	r1, #8
 8105fd2:	68f8      	ldr	r0, [r7, #12]
 8105fd4:	f000 f8c3 	bl	810615e <SPI_WaitOnFlagUntilTimeout>
 8105fd8:	4603      	mov	r3, r0
 8105fda:	2b00      	cmp	r3, #0
 8105fdc:	d007      	beq.n	8105fee <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8105fde:	68fb      	ldr	r3, [r7, #12]
 8105fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105fe4:	f043 0220 	orr.w	r2, r3, #32
 8105fe8:	68fb      	ldr	r3, [r7, #12]
 8105fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105fee:	68f8      	ldr	r0, [r7, #12]
 8105ff0:	f000 f815 	bl	810601e <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105ff4:	68fb      	ldr	r3, [r7, #12]
 8105ff6:	2200      	movs	r2, #0
 8105ff8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105ffc:	68fb      	ldr	r3, [r7, #12]
 8105ffe:	2201      	movs	r2, #1
 8106000:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8106004:	68fb      	ldr	r3, [r7, #12]
 8106006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810600a:	2b00      	cmp	r3, #0
 810600c:	d001      	beq.n	8106012 <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 810600e:	2301      	movs	r3, #1
 8106010:	e001      	b.n	8106016 <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 8106012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8106016:	4618      	mov	r0, r3
 8106018:	3730      	adds	r7, #48	; 0x30
 810601a:	46bd      	mov	sp, r7
 810601c:	bd80      	pop	{r7, pc}

0810601e <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 810601e:	b480      	push	{r7}
 8106020:	b085      	sub	sp, #20
 8106022:	af00      	add	r7, sp, #0
 8106024:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	695b      	ldr	r3, [r3, #20]
 810602c:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	699a      	ldr	r2, [r3, #24]
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	681b      	ldr	r3, [r3, #0]
 8106038:	f042 0208 	orr.w	r2, r2, #8
 810603c:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 810603e:	687b      	ldr	r3, [r7, #4]
 8106040:	681b      	ldr	r3, [r3, #0]
 8106042:	699a      	ldr	r2, [r3, #24]
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	681b      	ldr	r3, [r3, #0]
 8106048:	f042 0210 	orr.w	r2, r2, #16
 810604c:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810604e:	687b      	ldr	r3, [r7, #4]
 8106050:	681b      	ldr	r3, [r3, #0]
 8106052:	681a      	ldr	r2, [r3, #0]
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	681b      	ldr	r3, [r3, #0]
 8106058:	f022 0201 	bic.w	r2, r2, #1
 810605c:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 810605e:	687b      	ldr	r3, [r7, #4]
 8106060:	681b      	ldr	r3, [r3, #0]
 8106062:	691b      	ldr	r3, [r3, #16]
 8106064:	687a      	ldr	r2, [r7, #4]
 8106066:	6812      	ldr	r2, [r2, #0]
 8106068:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 810606c:	f023 0303 	bic.w	r3, r3, #3
 8106070:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	681b      	ldr	r3, [r3, #0]
 8106076:	689a      	ldr	r2, [r3, #8]
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8106080:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8106082:	687b      	ldr	r3, [r7, #4]
 8106084:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8106088:	b2db      	uxtb	r3, r3
 810608a:	2b04      	cmp	r3, #4
 810608c:	d014      	beq.n	81060b8 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 810608e:	68fb      	ldr	r3, [r7, #12]
 8106090:	f003 0320 	and.w	r3, r3, #32
 8106094:	2b00      	cmp	r3, #0
 8106096:	d00f      	beq.n	81060b8 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810609e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 81060a2:	687b      	ldr	r3, [r7, #4]
 81060a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81060a8:	687b      	ldr	r3, [r7, #4]
 81060aa:	681b      	ldr	r3, [r3, #0]
 81060ac:	699a      	ldr	r2, [r3, #24]
 81060ae:	687b      	ldr	r3, [r7, #4]
 81060b0:	681b      	ldr	r3, [r3, #0]
 81060b2:	f042 0220 	orr.w	r2, r2, #32
 81060b6:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 81060b8:	687b      	ldr	r3, [r7, #4]
 81060ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81060be:	b2db      	uxtb	r3, r3
 81060c0:	2b03      	cmp	r3, #3
 81060c2:	d014      	beq.n	81060ee <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 81060c4:	68fb      	ldr	r3, [r7, #12]
 81060c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81060ca:	2b00      	cmp	r3, #0
 81060cc:	d00f      	beq.n	81060ee <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 81060ce:	687b      	ldr	r3, [r7, #4]
 81060d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81060d4:	f043 0204 	orr.w	r2, r3, #4
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 81060de:	687b      	ldr	r3, [r7, #4]
 81060e0:	681b      	ldr	r3, [r3, #0]
 81060e2:	699a      	ldr	r2, [r3, #24]
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	681b      	ldr	r3, [r3, #0]
 81060e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 81060ec:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 81060ee:	68fb      	ldr	r3, [r7, #12]
 81060f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81060f4:	2b00      	cmp	r3, #0
 81060f6:	d00f      	beq.n	8106118 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81060fe:	f043 0201 	orr.w	r2, r3, #1
 8106102:	687b      	ldr	r3, [r7, #4]
 8106104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8106108:	687b      	ldr	r3, [r7, #4]
 810610a:	681b      	ldr	r3, [r3, #0]
 810610c:	699a      	ldr	r2, [r3, #24]
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	681b      	ldr	r3, [r3, #0]
 8106112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8106116:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8106118:	68fb      	ldr	r3, [r7, #12]
 810611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810611e:	2b00      	cmp	r3, #0
 8106120:	d00f      	beq.n	8106142 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106128:	f043 0208 	orr.w	r2, r3, #8
 810612c:	687b      	ldr	r3, [r7, #4]
 810612e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8106132:	687b      	ldr	r3, [r7, #4]
 8106134:	681b      	ldr	r3, [r3, #0]
 8106136:	699a      	ldr	r2, [r3, #24]
 8106138:	687b      	ldr	r3, [r7, #4]
 810613a:	681b      	ldr	r3, [r3, #0]
 810613c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8106140:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8106142:	687b      	ldr	r3, [r7, #4]
 8106144:	2200      	movs	r2, #0
 8106146:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 810614a:	687b      	ldr	r3, [r7, #4]
 810614c:	2200      	movs	r2, #0
 810614e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8106152:	bf00      	nop
 8106154:	3714      	adds	r7, #20
 8106156:	46bd      	mov	sp, r7
 8106158:	f85d 7b04 	ldr.w	r7, [sp], #4
 810615c:	4770      	bx	lr

0810615e <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 810615e:	b580      	push	{r7, lr}
 8106160:	b084      	sub	sp, #16
 8106162:	af00      	add	r7, sp, #0
 8106164:	60f8      	str	r0, [r7, #12]
 8106166:	60b9      	str	r1, [r7, #8]
 8106168:	603b      	str	r3, [r7, #0]
 810616a:	4613      	mov	r3, r2
 810616c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 810616e:	e010      	b.n	8106192 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8106170:	f7fc fe7c 	bl	8102e6c <HAL_GetTick>
 8106174:	4602      	mov	r2, r0
 8106176:	683b      	ldr	r3, [r7, #0]
 8106178:	1ad3      	subs	r3, r2, r3
 810617a:	69ba      	ldr	r2, [r7, #24]
 810617c:	429a      	cmp	r2, r3
 810617e:	d803      	bhi.n	8106188 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8106180:	69bb      	ldr	r3, [r7, #24]
 8106182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106186:	d102      	bne.n	810618e <SPI_WaitOnFlagUntilTimeout+0x30>
 8106188:	69bb      	ldr	r3, [r7, #24]
 810618a:	2b00      	cmp	r3, #0
 810618c:	d101      	bne.n	8106192 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 810618e:	2303      	movs	r3, #3
 8106190:	e00f      	b.n	81061b2 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8106192:	68fb      	ldr	r3, [r7, #12]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	695a      	ldr	r2, [r3, #20]
 8106198:	68bb      	ldr	r3, [r7, #8]
 810619a:	4013      	ands	r3, r2
 810619c:	68ba      	ldr	r2, [r7, #8]
 810619e:	429a      	cmp	r2, r3
 81061a0:	bf0c      	ite	eq
 81061a2:	2301      	moveq	r3, #1
 81061a4:	2300      	movne	r3, #0
 81061a6:	b2db      	uxtb	r3, r3
 81061a8:	461a      	mov	r2, r3
 81061aa:	79fb      	ldrb	r3, [r7, #7]
 81061ac:	429a      	cmp	r2, r3
 81061ae:	d0df      	beq.n	8106170 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81061b0:	2300      	movs	r3, #0
}
 81061b2:	4618      	mov	r0, r3
 81061b4:	3710      	adds	r7, #16
 81061b6:	46bd      	mov	sp, r7
 81061b8:	bd80      	pop	{r7, pc}

081061ba <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 81061ba:	b480      	push	{r7}
 81061bc:	b085      	sub	sp, #20
 81061be:	af00      	add	r7, sp, #0
 81061c0:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 81061c2:	687b      	ldr	r3, [r7, #4]
 81061c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81061c6:	095b      	lsrs	r3, r3, #5
 81061c8:	3301      	adds	r3, #1
 81061ca:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 81061cc:	687b      	ldr	r3, [r7, #4]
 81061ce:	68db      	ldr	r3, [r3, #12]
 81061d0:	3301      	adds	r3, #1
 81061d2:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 81061d4:	68bb      	ldr	r3, [r7, #8]
 81061d6:	3307      	adds	r3, #7
 81061d8:	08db      	lsrs	r3, r3, #3
 81061da:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 81061dc:	68bb      	ldr	r3, [r7, #8]
 81061de:	68fa      	ldr	r2, [r7, #12]
 81061e0:	fb02 f303 	mul.w	r3, r2, r3
}
 81061e4:	4618      	mov	r0, r3
 81061e6:	3714      	adds	r7, #20
 81061e8:	46bd      	mov	sp, r7
 81061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81061ee:	4770      	bx	lr

081061f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81061f0:	b580      	push	{r7, lr}
 81061f2:	b082      	sub	sp, #8
 81061f4:	af00      	add	r7, sp, #0
 81061f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	2b00      	cmp	r3, #0
 81061fc:	d101      	bne.n	8106202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81061fe:	2301      	movs	r3, #1
 8106200:	e042      	b.n	8106288 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8106202:	687b      	ldr	r3, [r7, #4]
 8106204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8106208:	2b00      	cmp	r3, #0
 810620a:	d106      	bne.n	810621a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810620c:	687b      	ldr	r3, [r7, #4]
 810620e:	2200      	movs	r2, #0
 8106210:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8106214:	6878      	ldr	r0, [r7, #4]
 8106216:	f7fc fbf5 	bl	8102a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	2224      	movs	r2, #36	; 0x24
 810621e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8106222:	687b      	ldr	r3, [r7, #4]
 8106224:	681b      	ldr	r3, [r3, #0]
 8106226:	681a      	ldr	r2, [r3, #0]
 8106228:	687b      	ldr	r3, [r7, #4]
 810622a:	681b      	ldr	r3, [r3, #0]
 810622c:	f022 0201 	bic.w	r2, r2, #1
 8106230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8106232:	6878      	ldr	r0, [r7, #4]
 8106234:	f000 f996 	bl	8106564 <UART_SetConfig>
 8106238:	4603      	mov	r3, r0
 810623a:	2b01      	cmp	r3, #1
 810623c:	d101      	bne.n	8106242 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 810623e:	2301      	movs	r3, #1
 8106240:	e022      	b.n	8106288 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106246:	2b00      	cmp	r3, #0
 8106248:	d002      	beq.n	8106250 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 810624a:	6878      	ldr	r0, [r7, #4]
 810624c:	f000 feea 	bl	8107024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8106250:	687b      	ldr	r3, [r7, #4]
 8106252:	681b      	ldr	r3, [r3, #0]
 8106254:	685a      	ldr	r2, [r3, #4]
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	681b      	ldr	r3, [r3, #0]
 810625a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 810625e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8106260:	687b      	ldr	r3, [r7, #4]
 8106262:	681b      	ldr	r3, [r3, #0]
 8106264:	689a      	ldr	r2, [r3, #8]
 8106266:	687b      	ldr	r3, [r7, #4]
 8106268:	681b      	ldr	r3, [r3, #0]
 810626a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 810626e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681b      	ldr	r3, [r3, #0]
 8106274:	681a      	ldr	r2, [r3, #0]
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	681b      	ldr	r3, [r3, #0]
 810627a:	f042 0201 	orr.w	r2, r2, #1
 810627e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8106280:	6878      	ldr	r0, [r7, #4]
 8106282:	f000 ff71 	bl	8107168 <UART_CheckIdleState>
 8106286:	4603      	mov	r3, r0
}
 8106288:	4618      	mov	r0, r3
 810628a:	3708      	adds	r7, #8
 810628c:	46bd      	mov	sp, r7
 810628e:	bd80      	pop	{r7, pc}

08106290 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8106290:	b580      	push	{r7, lr}
 8106292:	b08a      	sub	sp, #40	; 0x28
 8106294:	af02      	add	r7, sp, #8
 8106296:	60f8      	str	r0, [r7, #12]
 8106298:	60b9      	str	r1, [r7, #8]
 810629a:	603b      	str	r3, [r7, #0]
 810629c:	4613      	mov	r3, r2
 810629e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81062a0:	68fb      	ldr	r3, [r7, #12]
 81062a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81062a6:	2b20      	cmp	r3, #32
 81062a8:	f040 8083 	bne.w	81063b2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 81062ac:	68bb      	ldr	r3, [r7, #8]
 81062ae:	2b00      	cmp	r3, #0
 81062b0:	d002      	beq.n	81062b8 <HAL_UART_Transmit+0x28>
 81062b2:	88fb      	ldrh	r3, [r7, #6]
 81062b4:	2b00      	cmp	r3, #0
 81062b6:	d101      	bne.n	81062bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 81062b8:	2301      	movs	r3, #1
 81062ba:	e07b      	b.n	81063b4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 81062bc:	68fb      	ldr	r3, [r7, #12]
 81062be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81062c2:	2b01      	cmp	r3, #1
 81062c4:	d101      	bne.n	81062ca <HAL_UART_Transmit+0x3a>
 81062c6:	2302      	movs	r3, #2
 81062c8:	e074      	b.n	81063b4 <HAL_UART_Transmit+0x124>
 81062ca:	68fb      	ldr	r3, [r7, #12]
 81062cc:	2201      	movs	r2, #1
 81062ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81062d2:	68fb      	ldr	r3, [r7, #12]
 81062d4:	2200      	movs	r2, #0
 81062d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 81062da:	68fb      	ldr	r3, [r7, #12]
 81062dc:	2221      	movs	r2, #33	; 0x21
 81062de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 81062e2:	f7fc fdc3 	bl	8102e6c <HAL_GetTick>
 81062e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 81062e8:	68fb      	ldr	r3, [r7, #12]
 81062ea:	88fa      	ldrh	r2, [r7, #6]
 81062ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 81062f0:	68fb      	ldr	r3, [r7, #12]
 81062f2:	88fa      	ldrh	r2, [r7, #6]
 81062f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81062f8:	68fb      	ldr	r3, [r7, #12]
 81062fa:	689b      	ldr	r3, [r3, #8]
 81062fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106300:	d108      	bne.n	8106314 <HAL_UART_Transmit+0x84>
 8106302:	68fb      	ldr	r3, [r7, #12]
 8106304:	691b      	ldr	r3, [r3, #16]
 8106306:	2b00      	cmp	r3, #0
 8106308:	d104      	bne.n	8106314 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 810630a:	2300      	movs	r3, #0
 810630c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810630e:	68bb      	ldr	r3, [r7, #8]
 8106310:	61bb      	str	r3, [r7, #24]
 8106312:	e003      	b.n	810631c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8106314:	68bb      	ldr	r3, [r7, #8]
 8106316:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8106318:	2300      	movs	r3, #0
 810631a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 810631c:	68fb      	ldr	r3, [r7, #12]
 810631e:	2200      	movs	r2, #0
 8106320:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8106324:	e02c      	b.n	8106380 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8106326:	683b      	ldr	r3, [r7, #0]
 8106328:	9300      	str	r3, [sp, #0]
 810632a:	697b      	ldr	r3, [r7, #20]
 810632c:	2200      	movs	r2, #0
 810632e:	2180      	movs	r1, #128	; 0x80
 8106330:	68f8      	ldr	r0, [r7, #12]
 8106332:	f000 ff64 	bl	81071fe <UART_WaitOnFlagUntilTimeout>
 8106336:	4603      	mov	r3, r0
 8106338:	2b00      	cmp	r3, #0
 810633a:	d001      	beq.n	8106340 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 810633c:	2303      	movs	r3, #3
 810633e:	e039      	b.n	81063b4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8106340:	69fb      	ldr	r3, [r7, #28]
 8106342:	2b00      	cmp	r3, #0
 8106344:	d10b      	bne.n	810635e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8106346:	69bb      	ldr	r3, [r7, #24]
 8106348:	881b      	ldrh	r3, [r3, #0]
 810634a:	461a      	mov	r2, r3
 810634c:	68fb      	ldr	r3, [r7, #12]
 810634e:	681b      	ldr	r3, [r3, #0]
 8106350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8106354:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8106356:	69bb      	ldr	r3, [r7, #24]
 8106358:	3302      	adds	r3, #2
 810635a:	61bb      	str	r3, [r7, #24]
 810635c:	e007      	b.n	810636e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810635e:	69fb      	ldr	r3, [r7, #28]
 8106360:	781a      	ldrb	r2, [r3, #0]
 8106362:	68fb      	ldr	r3, [r7, #12]
 8106364:	681b      	ldr	r3, [r3, #0]
 8106366:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8106368:	69fb      	ldr	r3, [r7, #28]
 810636a:	3301      	adds	r3, #1
 810636c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810636e:	68fb      	ldr	r3, [r7, #12]
 8106370:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106374:	b29b      	uxth	r3, r3
 8106376:	3b01      	subs	r3, #1
 8106378:	b29a      	uxth	r2, r3
 810637a:	68fb      	ldr	r3, [r7, #12]
 810637c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8106380:	68fb      	ldr	r3, [r7, #12]
 8106382:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8106386:	b29b      	uxth	r3, r3
 8106388:	2b00      	cmp	r3, #0
 810638a:	d1cc      	bne.n	8106326 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810638c:	683b      	ldr	r3, [r7, #0]
 810638e:	9300      	str	r3, [sp, #0]
 8106390:	697b      	ldr	r3, [r7, #20]
 8106392:	2200      	movs	r2, #0
 8106394:	2140      	movs	r1, #64	; 0x40
 8106396:	68f8      	ldr	r0, [r7, #12]
 8106398:	f000 ff31 	bl	81071fe <UART_WaitOnFlagUntilTimeout>
 810639c:	4603      	mov	r3, r0
 810639e:	2b00      	cmp	r3, #0
 81063a0:	d001      	beq.n	81063a6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 81063a2:	2303      	movs	r3, #3
 81063a4:	e006      	b.n	81063b4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81063a6:	68fb      	ldr	r3, [r7, #12]
 81063a8:	2220      	movs	r2, #32
 81063aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 81063ae:	2300      	movs	r3, #0
 81063b0:	e000      	b.n	81063b4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 81063b2:	2302      	movs	r3, #2
  }
}
 81063b4:	4618      	mov	r0, r3
 81063b6:	3720      	adds	r7, #32
 81063b8:	46bd      	mov	sp, r7
 81063ba:	bd80      	pop	{r7, pc}

081063bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81063bc:	b580      	push	{r7, lr}
 81063be:	b08a      	sub	sp, #40	; 0x28
 81063c0:	af02      	add	r7, sp, #8
 81063c2:	60f8      	str	r0, [r7, #12]
 81063c4:	60b9      	str	r1, [r7, #8]
 81063c6:	603b      	str	r3, [r7, #0]
 81063c8:	4613      	mov	r3, r2
 81063ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 81063cc:	68fb      	ldr	r3, [r7, #12]
 81063ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81063d2:	2b20      	cmp	r3, #32
 81063d4:	f040 80c0 	bne.w	8106558 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 81063d8:	68bb      	ldr	r3, [r7, #8]
 81063da:	2b00      	cmp	r3, #0
 81063dc:	d002      	beq.n	81063e4 <HAL_UART_Receive+0x28>
 81063de:	88fb      	ldrh	r3, [r7, #6]
 81063e0:	2b00      	cmp	r3, #0
 81063e2:	d101      	bne.n	81063e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 81063e4:	2301      	movs	r3, #1
 81063e6:	e0b8      	b.n	810655a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 81063e8:	68fb      	ldr	r3, [r7, #12]
 81063ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81063ee:	2b01      	cmp	r3, #1
 81063f0:	d101      	bne.n	81063f6 <HAL_UART_Receive+0x3a>
 81063f2:	2302      	movs	r3, #2
 81063f4:	e0b1      	b.n	810655a <HAL_UART_Receive+0x19e>
 81063f6:	68fb      	ldr	r3, [r7, #12]
 81063f8:	2201      	movs	r2, #1
 81063fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 81063fe:	68fb      	ldr	r3, [r7, #12]
 8106400:	2200      	movs	r2, #0
 8106402:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8106406:	68fb      	ldr	r3, [r7, #12]
 8106408:	2222      	movs	r2, #34	; 0x22
 810640a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810640e:	68fb      	ldr	r3, [r7, #12]
 8106410:	2200      	movs	r2, #0
 8106412:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8106414:	f7fc fd2a 	bl	8102e6c <HAL_GetTick>
 8106418:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810641a:	68fb      	ldr	r3, [r7, #12]
 810641c:	88fa      	ldrh	r2, [r7, #6]
 810641e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8106422:	68fb      	ldr	r3, [r7, #12]
 8106424:	88fa      	ldrh	r2, [r7, #6]
 8106426:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810642a:	68fb      	ldr	r3, [r7, #12]
 810642c:	689b      	ldr	r3, [r3, #8]
 810642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106432:	d10e      	bne.n	8106452 <HAL_UART_Receive+0x96>
 8106434:	68fb      	ldr	r3, [r7, #12]
 8106436:	691b      	ldr	r3, [r3, #16]
 8106438:	2b00      	cmp	r3, #0
 810643a:	d105      	bne.n	8106448 <HAL_UART_Receive+0x8c>
 810643c:	68fb      	ldr	r3, [r7, #12]
 810643e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8106442:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106446:	e02d      	b.n	81064a4 <HAL_UART_Receive+0xe8>
 8106448:	68fb      	ldr	r3, [r7, #12]
 810644a:	22ff      	movs	r2, #255	; 0xff
 810644c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106450:	e028      	b.n	81064a4 <HAL_UART_Receive+0xe8>
 8106452:	68fb      	ldr	r3, [r7, #12]
 8106454:	689b      	ldr	r3, [r3, #8]
 8106456:	2b00      	cmp	r3, #0
 8106458:	d10d      	bne.n	8106476 <HAL_UART_Receive+0xba>
 810645a:	68fb      	ldr	r3, [r7, #12]
 810645c:	691b      	ldr	r3, [r3, #16]
 810645e:	2b00      	cmp	r3, #0
 8106460:	d104      	bne.n	810646c <HAL_UART_Receive+0xb0>
 8106462:	68fb      	ldr	r3, [r7, #12]
 8106464:	22ff      	movs	r2, #255	; 0xff
 8106466:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810646a:	e01b      	b.n	81064a4 <HAL_UART_Receive+0xe8>
 810646c:	68fb      	ldr	r3, [r7, #12]
 810646e:	227f      	movs	r2, #127	; 0x7f
 8106470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106474:	e016      	b.n	81064a4 <HAL_UART_Receive+0xe8>
 8106476:	68fb      	ldr	r3, [r7, #12]
 8106478:	689b      	ldr	r3, [r3, #8]
 810647a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810647e:	d10d      	bne.n	810649c <HAL_UART_Receive+0xe0>
 8106480:	68fb      	ldr	r3, [r7, #12]
 8106482:	691b      	ldr	r3, [r3, #16]
 8106484:	2b00      	cmp	r3, #0
 8106486:	d104      	bne.n	8106492 <HAL_UART_Receive+0xd6>
 8106488:	68fb      	ldr	r3, [r7, #12]
 810648a:	227f      	movs	r2, #127	; 0x7f
 810648c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8106490:	e008      	b.n	81064a4 <HAL_UART_Receive+0xe8>
 8106492:	68fb      	ldr	r3, [r7, #12]
 8106494:	223f      	movs	r2, #63	; 0x3f
 8106496:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810649a:	e003      	b.n	81064a4 <HAL_UART_Receive+0xe8>
 810649c:	68fb      	ldr	r3, [r7, #12]
 810649e:	2200      	movs	r2, #0
 81064a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 81064a4:	68fb      	ldr	r3, [r7, #12]
 81064a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 81064aa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81064ac:	68fb      	ldr	r3, [r7, #12]
 81064ae:	689b      	ldr	r3, [r3, #8]
 81064b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81064b4:	d108      	bne.n	81064c8 <HAL_UART_Receive+0x10c>
 81064b6:	68fb      	ldr	r3, [r7, #12]
 81064b8:	691b      	ldr	r3, [r3, #16]
 81064ba:	2b00      	cmp	r3, #0
 81064bc:	d104      	bne.n	81064c8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 81064be:	2300      	movs	r3, #0
 81064c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 81064c2:	68bb      	ldr	r3, [r7, #8]
 81064c4:	61bb      	str	r3, [r7, #24]
 81064c6:	e003      	b.n	81064d0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 81064c8:	68bb      	ldr	r3, [r7, #8]
 81064ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81064cc:	2300      	movs	r3, #0
 81064ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 81064d0:	68fb      	ldr	r3, [r7, #12]
 81064d2:	2200      	movs	r2, #0
 81064d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 81064d8:	e032      	b.n	8106540 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 81064da:	683b      	ldr	r3, [r7, #0]
 81064dc:	9300      	str	r3, [sp, #0]
 81064de:	697b      	ldr	r3, [r7, #20]
 81064e0:	2200      	movs	r2, #0
 81064e2:	2120      	movs	r1, #32
 81064e4:	68f8      	ldr	r0, [r7, #12]
 81064e6:	f000 fe8a 	bl	81071fe <UART_WaitOnFlagUntilTimeout>
 81064ea:	4603      	mov	r3, r0
 81064ec:	2b00      	cmp	r3, #0
 81064ee:	d001      	beq.n	81064f4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 81064f0:	2303      	movs	r3, #3
 81064f2:	e032      	b.n	810655a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 81064f4:	69fb      	ldr	r3, [r7, #28]
 81064f6:	2b00      	cmp	r3, #0
 81064f8:	d10c      	bne.n	8106514 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 81064fa:	68fb      	ldr	r3, [r7, #12]
 81064fc:	681b      	ldr	r3, [r3, #0]
 81064fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106500:	b29a      	uxth	r2, r3
 8106502:	8a7b      	ldrh	r3, [r7, #18]
 8106504:	4013      	ands	r3, r2
 8106506:	b29a      	uxth	r2, r3
 8106508:	69bb      	ldr	r3, [r7, #24]
 810650a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 810650c:	69bb      	ldr	r3, [r7, #24]
 810650e:	3302      	adds	r3, #2
 8106510:	61bb      	str	r3, [r7, #24]
 8106512:	e00c      	b.n	810652e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8106514:	68fb      	ldr	r3, [r7, #12]
 8106516:	681b      	ldr	r3, [r3, #0]
 8106518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810651a:	b2da      	uxtb	r2, r3
 810651c:	8a7b      	ldrh	r3, [r7, #18]
 810651e:	b2db      	uxtb	r3, r3
 8106520:	4013      	ands	r3, r2
 8106522:	b2da      	uxtb	r2, r3
 8106524:	69fb      	ldr	r3, [r7, #28]
 8106526:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8106528:	69fb      	ldr	r3, [r7, #28]
 810652a:	3301      	adds	r3, #1
 810652c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 810652e:	68fb      	ldr	r3, [r7, #12]
 8106530:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106534:	b29b      	uxth	r3, r3
 8106536:	3b01      	subs	r3, #1
 8106538:	b29a      	uxth	r2, r3
 810653a:	68fb      	ldr	r3, [r7, #12]
 810653c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8106540:	68fb      	ldr	r3, [r7, #12]
 8106542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106546:	b29b      	uxth	r3, r3
 8106548:	2b00      	cmp	r3, #0
 810654a:	d1c6      	bne.n	81064da <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810654c:	68fb      	ldr	r3, [r7, #12]
 810654e:	2220      	movs	r2, #32
 8106550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8106554:	2300      	movs	r3, #0
 8106556:	e000      	b.n	810655a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8106558:	2302      	movs	r3, #2
  }
}
 810655a:	4618      	mov	r0, r3
 810655c:	3720      	adds	r7, #32
 810655e:	46bd      	mov	sp, r7
 8106560:	bd80      	pop	{r7, pc}
	...

08106564 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8106564:	b5b0      	push	{r4, r5, r7, lr}
 8106566:	b08e      	sub	sp, #56	; 0x38
 8106568:	af00      	add	r7, sp, #0
 810656a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810656c:	2300      	movs	r3, #0
 810656e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8106572:	687b      	ldr	r3, [r7, #4]
 8106574:	689a      	ldr	r2, [r3, #8]
 8106576:	687b      	ldr	r3, [r7, #4]
 8106578:	691b      	ldr	r3, [r3, #16]
 810657a:	431a      	orrs	r2, r3
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	695b      	ldr	r3, [r3, #20]
 8106580:	431a      	orrs	r2, r3
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	69db      	ldr	r3, [r3, #28]
 8106586:	4313      	orrs	r3, r2
 8106588:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810658a:	687b      	ldr	r3, [r7, #4]
 810658c:	681b      	ldr	r3, [r3, #0]
 810658e:	681a      	ldr	r2, [r3, #0]
 8106590:	4bc0      	ldr	r3, [pc, #768]	; (8106894 <UART_SetConfig+0x330>)
 8106592:	4013      	ands	r3, r2
 8106594:	687a      	ldr	r2, [r7, #4]
 8106596:	6812      	ldr	r2, [r2, #0]
 8106598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 810659a:	430b      	orrs	r3, r1
 810659c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810659e:	687b      	ldr	r3, [r7, #4]
 81065a0:	681b      	ldr	r3, [r3, #0]
 81065a2:	685b      	ldr	r3, [r3, #4]
 81065a4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	68da      	ldr	r2, [r3, #12]
 81065ac:	687b      	ldr	r3, [r7, #4]
 81065ae:	681b      	ldr	r3, [r3, #0]
 81065b0:	430a      	orrs	r2, r1
 81065b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81065b4:	687b      	ldr	r3, [r7, #4]
 81065b6:	699b      	ldr	r3, [r3, #24]
 81065b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	681b      	ldr	r3, [r3, #0]
 81065be:	4ab6      	ldr	r2, [pc, #728]	; (8106898 <UART_SetConfig+0x334>)
 81065c0:	4293      	cmp	r3, r2
 81065c2:	d004      	beq.n	81065ce <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81065c4:	687b      	ldr	r3, [r7, #4]
 81065c6:	6a1b      	ldr	r3, [r3, #32]
 81065c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81065ca:	4313      	orrs	r3, r2
 81065cc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	681b      	ldr	r3, [r3, #0]
 81065d2:	689b      	ldr	r3, [r3, #8]
 81065d4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81065d8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81065dc:	687a      	ldr	r2, [r7, #4]
 81065de:	6812      	ldr	r2, [r2, #0]
 81065e0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 81065e2:	430b      	orrs	r3, r1
 81065e4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81065e6:	687b      	ldr	r3, [r7, #4]
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81065ec:	f023 010f 	bic.w	r1, r3, #15
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81065f4:	687b      	ldr	r3, [r7, #4]
 81065f6:	681b      	ldr	r3, [r3, #0]
 81065f8:	430a      	orrs	r2, r1
 81065fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81065fc:	687b      	ldr	r3, [r7, #4]
 81065fe:	681b      	ldr	r3, [r3, #0]
 8106600:	4aa6      	ldr	r2, [pc, #664]	; (810689c <UART_SetConfig+0x338>)
 8106602:	4293      	cmp	r3, r2
 8106604:	d176      	bne.n	81066f4 <UART_SetConfig+0x190>
 8106606:	4ba6      	ldr	r3, [pc, #664]	; (81068a0 <UART_SetConfig+0x33c>)
 8106608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810660a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810660e:	2b28      	cmp	r3, #40	; 0x28
 8106610:	d86c      	bhi.n	81066ec <UART_SetConfig+0x188>
 8106612:	a201      	add	r2, pc, #4	; (adr r2, 8106618 <UART_SetConfig+0xb4>)
 8106614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106618:	081066bd 	.word	0x081066bd
 810661c:	081066ed 	.word	0x081066ed
 8106620:	081066ed 	.word	0x081066ed
 8106624:	081066ed 	.word	0x081066ed
 8106628:	081066ed 	.word	0x081066ed
 810662c:	081066ed 	.word	0x081066ed
 8106630:	081066ed 	.word	0x081066ed
 8106634:	081066ed 	.word	0x081066ed
 8106638:	081066c5 	.word	0x081066c5
 810663c:	081066ed 	.word	0x081066ed
 8106640:	081066ed 	.word	0x081066ed
 8106644:	081066ed 	.word	0x081066ed
 8106648:	081066ed 	.word	0x081066ed
 810664c:	081066ed 	.word	0x081066ed
 8106650:	081066ed 	.word	0x081066ed
 8106654:	081066ed 	.word	0x081066ed
 8106658:	081066cd 	.word	0x081066cd
 810665c:	081066ed 	.word	0x081066ed
 8106660:	081066ed 	.word	0x081066ed
 8106664:	081066ed 	.word	0x081066ed
 8106668:	081066ed 	.word	0x081066ed
 810666c:	081066ed 	.word	0x081066ed
 8106670:	081066ed 	.word	0x081066ed
 8106674:	081066ed 	.word	0x081066ed
 8106678:	081066d5 	.word	0x081066d5
 810667c:	081066ed 	.word	0x081066ed
 8106680:	081066ed 	.word	0x081066ed
 8106684:	081066ed 	.word	0x081066ed
 8106688:	081066ed 	.word	0x081066ed
 810668c:	081066ed 	.word	0x081066ed
 8106690:	081066ed 	.word	0x081066ed
 8106694:	081066ed 	.word	0x081066ed
 8106698:	081066dd 	.word	0x081066dd
 810669c:	081066ed 	.word	0x081066ed
 81066a0:	081066ed 	.word	0x081066ed
 81066a4:	081066ed 	.word	0x081066ed
 81066a8:	081066ed 	.word	0x081066ed
 81066ac:	081066ed 	.word	0x081066ed
 81066b0:	081066ed 	.word	0x081066ed
 81066b4:	081066ed 	.word	0x081066ed
 81066b8:	081066e5 	.word	0x081066e5
 81066bc:	2301      	movs	r3, #1
 81066be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066c2:	e220      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81066c4:	2304      	movs	r3, #4
 81066c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066ca:	e21c      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81066cc:	2308      	movs	r3, #8
 81066ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066d2:	e218      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81066d4:	2310      	movs	r3, #16
 81066d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066da:	e214      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81066dc:	2320      	movs	r3, #32
 81066de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066e2:	e210      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81066e4:	2340      	movs	r3, #64	; 0x40
 81066e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066ea:	e20c      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81066ec:	2380      	movs	r3, #128	; 0x80
 81066ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81066f2:	e208      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	681b      	ldr	r3, [r3, #0]
 81066f8:	4a6a      	ldr	r2, [pc, #424]	; (81068a4 <UART_SetConfig+0x340>)
 81066fa:	4293      	cmp	r3, r2
 81066fc:	d130      	bne.n	8106760 <UART_SetConfig+0x1fc>
 81066fe:	4b68      	ldr	r3, [pc, #416]	; (81068a0 <UART_SetConfig+0x33c>)
 8106700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106702:	f003 0307 	and.w	r3, r3, #7
 8106706:	2b05      	cmp	r3, #5
 8106708:	d826      	bhi.n	8106758 <UART_SetConfig+0x1f4>
 810670a:	a201      	add	r2, pc, #4	; (adr r2, 8106710 <UART_SetConfig+0x1ac>)
 810670c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106710:	08106729 	.word	0x08106729
 8106714:	08106731 	.word	0x08106731
 8106718:	08106739 	.word	0x08106739
 810671c:	08106741 	.word	0x08106741
 8106720:	08106749 	.word	0x08106749
 8106724:	08106751 	.word	0x08106751
 8106728:	2300      	movs	r3, #0
 810672a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810672e:	e1ea      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106730:	2304      	movs	r3, #4
 8106732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106736:	e1e6      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106738:	2308      	movs	r3, #8
 810673a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810673e:	e1e2      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106740:	2310      	movs	r3, #16
 8106742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106746:	e1de      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106748:	2320      	movs	r3, #32
 810674a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810674e:	e1da      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106750:	2340      	movs	r3, #64	; 0x40
 8106752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106756:	e1d6      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106758:	2380      	movs	r3, #128	; 0x80
 810675a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810675e:	e1d2      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106760:	687b      	ldr	r3, [r7, #4]
 8106762:	681b      	ldr	r3, [r3, #0]
 8106764:	4a50      	ldr	r2, [pc, #320]	; (81068a8 <UART_SetConfig+0x344>)
 8106766:	4293      	cmp	r3, r2
 8106768:	d130      	bne.n	81067cc <UART_SetConfig+0x268>
 810676a:	4b4d      	ldr	r3, [pc, #308]	; (81068a0 <UART_SetConfig+0x33c>)
 810676c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810676e:	f003 0307 	and.w	r3, r3, #7
 8106772:	2b05      	cmp	r3, #5
 8106774:	d826      	bhi.n	81067c4 <UART_SetConfig+0x260>
 8106776:	a201      	add	r2, pc, #4	; (adr r2, 810677c <UART_SetConfig+0x218>)
 8106778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810677c:	08106795 	.word	0x08106795
 8106780:	0810679d 	.word	0x0810679d
 8106784:	081067a5 	.word	0x081067a5
 8106788:	081067ad 	.word	0x081067ad
 810678c:	081067b5 	.word	0x081067b5
 8106790:	081067bd 	.word	0x081067bd
 8106794:	2300      	movs	r3, #0
 8106796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810679a:	e1b4      	b.n	8106b06 <UART_SetConfig+0x5a2>
 810679c:	2304      	movs	r3, #4
 810679e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067a2:	e1b0      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81067a4:	2308      	movs	r3, #8
 81067a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067aa:	e1ac      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81067ac:	2310      	movs	r3, #16
 81067ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067b2:	e1a8      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81067b4:	2320      	movs	r3, #32
 81067b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067ba:	e1a4      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81067bc:	2340      	movs	r3, #64	; 0x40
 81067be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067c2:	e1a0      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81067c4:	2380      	movs	r3, #128	; 0x80
 81067c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81067ca:	e19c      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	681b      	ldr	r3, [r3, #0]
 81067d0:	4a36      	ldr	r2, [pc, #216]	; (81068ac <UART_SetConfig+0x348>)
 81067d2:	4293      	cmp	r3, r2
 81067d4:	d130      	bne.n	8106838 <UART_SetConfig+0x2d4>
 81067d6:	4b32      	ldr	r3, [pc, #200]	; (81068a0 <UART_SetConfig+0x33c>)
 81067d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81067da:	f003 0307 	and.w	r3, r3, #7
 81067de:	2b05      	cmp	r3, #5
 81067e0:	d826      	bhi.n	8106830 <UART_SetConfig+0x2cc>
 81067e2:	a201      	add	r2, pc, #4	; (adr r2, 81067e8 <UART_SetConfig+0x284>)
 81067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81067e8:	08106801 	.word	0x08106801
 81067ec:	08106809 	.word	0x08106809
 81067f0:	08106811 	.word	0x08106811
 81067f4:	08106819 	.word	0x08106819
 81067f8:	08106821 	.word	0x08106821
 81067fc:	08106829 	.word	0x08106829
 8106800:	2300      	movs	r3, #0
 8106802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106806:	e17e      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106808:	2304      	movs	r3, #4
 810680a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810680e:	e17a      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106810:	2308      	movs	r3, #8
 8106812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106816:	e176      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106818:	2310      	movs	r3, #16
 810681a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810681e:	e172      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106820:	2320      	movs	r3, #32
 8106822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106826:	e16e      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106828:	2340      	movs	r3, #64	; 0x40
 810682a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810682e:	e16a      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106830:	2380      	movs	r3, #128	; 0x80
 8106832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106836:	e166      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106838:	687b      	ldr	r3, [r7, #4]
 810683a:	681b      	ldr	r3, [r3, #0]
 810683c:	4a1c      	ldr	r2, [pc, #112]	; (81068b0 <UART_SetConfig+0x34c>)
 810683e:	4293      	cmp	r3, r2
 8106840:	d140      	bne.n	81068c4 <UART_SetConfig+0x360>
 8106842:	4b17      	ldr	r3, [pc, #92]	; (81068a0 <UART_SetConfig+0x33c>)
 8106844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106846:	f003 0307 	and.w	r3, r3, #7
 810684a:	2b05      	cmp	r3, #5
 810684c:	d836      	bhi.n	81068bc <UART_SetConfig+0x358>
 810684e:	a201      	add	r2, pc, #4	; (adr r2, 8106854 <UART_SetConfig+0x2f0>)
 8106850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106854:	0810686d 	.word	0x0810686d
 8106858:	08106875 	.word	0x08106875
 810685c:	0810687d 	.word	0x0810687d
 8106860:	08106885 	.word	0x08106885
 8106864:	0810688d 	.word	0x0810688d
 8106868:	081068b5 	.word	0x081068b5
 810686c:	2300      	movs	r3, #0
 810686e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106872:	e148      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106874:	2304      	movs	r3, #4
 8106876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810687a:	e144      	b.n	8106b06 <UART_SetConfig+0x5a2>
 810687c:	2308      	movs	r3, #8
 810687e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106882:	e140      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106884:	2310      	movs	r3, #16
 8106886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810688a:	e13c      	b.n	8106b06 <UART_SetConfig+0x5a2>
 810688c:	2320      	movs	r3, #32
 810688e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106892:	e138      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106894:	cfff69f3 	.word	0xcfff69f3
 8106898:	58000c00 	.word	0x58000c00
 810689c:	40011000 	.word	0x40011000
 81068a0:	58024400 	.word	0x58024400
 81068a4:	40004400 	.word	0x40004400
 81068a8:	40004800 	.word	0x40004800
 81068ac:	40004c00 	.word	0x40004c00
 81068b0:	40005000 	.word	0x40005000
 81068b4:	2340      	movs	r3, #64	; 0x40
 81068b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068ba:	e124      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81068bc:	2380      	movs	r3, #128	; 0x80
 81068be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81068c2:	e120      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81068c4:	687b      	ldr	r3, [r7, #4]
 81068c6:	681b      	ldr	r3, [r3, #0]
 81068c8:	4acc      	ldr	r2, [pc, #816]	; (8106bfc <UART_SetConfig+0x698>)
 81068ca:	4293      	cmp	r3, r2
 81068cc:	d176      	bne.n	81069bc <UART_SetConfig+0x458>
 81068ce:	4bcc      	ldr	r3, [pc, #816]	; (8106c00 <UART_SetConfig+0x69c>)
 81068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81068d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81068d6:	2b28      	cmp	r3, #40	; 0x28
 81068d8:	d86c      	bhi.n	81069b4 <UART_SetConfig+0x450>
 81068da:	a201      	add	r2, pc, #4	; (adr r2, 81068e0 <UART_SetConfig+0x37c>)
 81068dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81068e0:	08106985 	.word	0x08106985
 81068e4:	081069b5 	.word	0x081069b5
 81068e8:	081069b5 	.word	0x081069b5
 81068ec:	081069b5 	.word	0x081069b5
 81068f0:	081069b5 	.word	0x081069b5
 81068f4:	081069b5 	.word	0x081069b5
 81068f8:	081069b5 	.word	0x081069b5
 81068fc:	081069b5 	.word	0x081069b5
 8106900:	0810698d 	.word	0x0810698d
 8106904:	081069b5 	.word	0x081069b5
 8106908:	081069b5 	.word	0x081069b5
 810690c:	081069b5 	.word	0x081069b5
 8106910:	081069b5 	.word	0x081069b5
 8106914:	081069b5 	.word	0x081069b5
 8106918:	081069b5 	.word	0x081069b5
 810691c:	081069b5 	.word	0x081069b5
 8106920:	08106995 	.word	0x08106995
 8106924:	081069b5 	.word	0x081069b5
 8106928:	081069b5 	.word	0x081069b5
 810692c:	081069b5 	.word	0x081069b5
 8106930:	081069b5 	.word	0x081069b5
 8106934:	081069b5 	.word	0x081069b5
 8106938:	081069b5 	.word	0x081069b5
 810693c:	081069b5 	.word	0x081069b5
 8106940:	0810699d 	.word	0x0810699d
 8106944:	081069b5 	.word	0x081069b5
 8106948:	081069b5 	.word	0x081069b5
 810694c:	081069b5 	.word	0x081069b5
 8106950:	081069b5 	.word	0x081069b5
 8106954:	081069b5 	.word	0x081069b5
 8106958:	081069b5 	.word	0x081069b5
 810695c:	081069b5 	.word	0x081069b5
 8106960:	081069a5 	.word	0x081069a5
 8106964:	081069b5 	.word	0x081069b5
 8106968:	081069b5 	.word	0x081069b5
 810696c:	081069b5 	.word	0x081069b5
 8106970:	081069b5 	.word	0x081069b5
 8106974:	081069b5 	.word	0x081069b5
 8106978:	081069b5 	.word	0x081069b5
 810697c:	081069b5 	.word	0x081069b5
 8106980:	081069ad 	.word	0x081069ad
 8106984:	2301      	movs	r3, #1
 8106986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810698a:	e0bc      	b.n	8106b06 <UART_SetConfig+0x5a2>
 810698c:	2304      	movs	r3, #4
 810698e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106992:	e0b8      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106994:	2308      	movs	r3, #8
 8106996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810699a:	e0b4      	b.n	8106b06 <UART_SetConfig+0x5a2>
 810699c:	2310      	movs	r3, #16
 810699e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069a2:	e0b0      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81069a4:	2320      	movs	r3, #32
 81069a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069aa:	e0ac      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81069ac:	2340      	movs	r3, #64	; 0x40
 81069ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069b2:	e0a8      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81069b4:	2380      	movs	r3, #128	; 0x80
 81069b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069ba:	e0a4      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	681b      	ldr	r3, [r3, #0]
 81069c0:	4a90      	ldr	r2, [pc, #576]	; (8106c04 <UART_SetConfig+0x6a0>)
 81069c2:	4293      	cmp	r3, r2
 81069c4:	d130      	bne.n	8106a28 <UART_SetConfig+0x4c4>
 81069c6:	4b8e      	ldr	r3, [pc, #568]	; (8106c00 <UART_SetConfig+0x69c>)
 81069c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81069ca:	f003 0307 	and.w	r3, r3, #7
 81069ce:	2b05      	cmp	r3, #5
 81069d0:	d826      	bhi.n	8106a20 <UART_SetConfig+0x4bc>
 81069d2:	a201      	add	r2, pc, #4	; (adr r2, 81069d8 <UART_SetConfig+0x474>)
 81069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81069d8:	081069f1 	.word	0x081069f1
 81069dc:	081069f9 	.word	0x081069f9
 81069e0:	08106a01 	.word	0x08106a01
 81069e4:	08106a09 	.word	0x08106a09
 81069e8:	08106a11 	.word	0x08106a11
 81069ec:	08106a19 	.word	0x08106a19
 81069f0:	2300      	movs	r3, #0
 81069f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069f6:	e086      	b.n	8106b06 <UART_SetConfig+0x5a2>
 81069f8:	2304      	movs	r3, #4
 81069fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81069fe:	e082      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a00:	2308      	movs	r3, #8
 8106a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a06:	e07e      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a08:	2310      	movs	r3, #16
 8106a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a0e:	e07a      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a10:	2320      	movs	r3, #32
 8106a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a16:	e076      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a18:	2340      	movs	r3, #64	; 0x40
 8106a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a1e:	e072      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a20:	2380      	movs	r3, #128	; 0x80
 8106a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a26:	e06e      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a28:	687b      	ldr	r3, [r7, #4]
 8106a2a:	681b      	ldr	r3, [r3, #0]
 8106a2c:	4a76      	ldr	r2, [pc, #472]	; (8106c08 <UART_SetConfig+0x6a4>)
 8106a2e:	4293      	cmp	r3, r2
 8106a30:	d130      	bne.n	8106a94 <UART_SetConfig+0x530>
 8106a32:	4b73      	ldr	r3, [pc, #460]	; (8106c00 <UART_SetConfig+0x69c>)
 8106a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106a36:	f003 0307 	and.w	r3, r3, #7
 8106a3a:	2b05      	cmp	r3, #5
 8106a3c:	d826      	bhi.n	8106a8c <UART_SetConfig+0x528>
 8106a3e:	a201      	add	r2, pc, #4	; (adr r2, 8106a44 <UART_SetConfig+0x4e0>)
 8106a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a44:	08106a5d 	.word	0x08106a5d
 8106a48:	08106a65 	.word	0x08106a65
 8106a4c:	08106a6d 	.word	0x08106a6d
 8106a50:	08106a75 	.word	0x08106a75
 8106a54:	08106a7d 	.word	0x08106a7d
 8106a58:	08106a85 	.word	0x08106a85
 8106a5c:	2300      	movs	r3, #0
 8106a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a62:	e050      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a64:	2304      	movs	r3, #4
 8106a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a6a:	e04c      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a6c:	2308      	movs	r3, #8
 8106a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a72:	e048      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a74:	2310      	movs	r3, #16
 8106a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a7a:	e044      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a7c:	2320      	movs	r3, #32
 8106a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a82:	e040      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a84:	2340      	movs	r3, #64	; 0x40
 8106a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a8a:	e03c      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a8c:	2380      	movs	r3, #128	; 0x80
 8106a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106a92:	e038      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106a94:	687b      	ldr	r3, [r7, #4]
 8106a96:	681b      	ldr	r3, [r3, #0]
 8106a98:	4a5c      	ldr	r2, [pc, #368]	; (8106c0c <UART_SetConfig+0x6a8>)
 8106a9a:	4293      	cmp	r3, r2
 8106a9c:	d130      	bne.n	8106b00 <UART_SetConfig+0x59c>
 8106a9e:	4b58      	ldr	r3, [pc, #352]	; (8106c00 <UART_SetConfig+0x69c>)
 8106aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8106aa2:	f003 0307 	and.w	r3, r3, #7
 8106aa6:	2b05      	cmp	r3, #5
 8106aa8:	d826      	bhi.n	8106af8 <UART_SetConfig+0x594>
 8106aaa:	a201      	add	r2, pc, #4	; (adr r2, 8106ab0 <UART_SetConfig+0x54c>)
 8106aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106ab0:	08106ac9 	.word	0x08106ac9
 8106ab4:	08106ad1 	.word	0x08106ad1
 8106ab8:	08106ad9 	.word	0x08106ad9
 8106abc:	08106ae1 	.word	0x08106ae1
 8106ac0:	08106ae9 	.word	0x08106ae9
 8106ac4:	08106af1 	.word	0x08106af1
 8106ac8:	2302      	movs	r3, #2
 8106aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ace:	e01a      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106ad0:	2304      	movs	r3, #4
 8106ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ad6:	e016      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106ad8:	2308      	movs	r3, #8
 8106ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ade:	e012      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106ae0:	2310      	movs	r3, #16
 8106ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106ae6:	e00e      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106ae8:	2320      	movs	r3, #32
 8106aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106aee:	e00a      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106af0:	2340      	movs	r3, #64	; 0x40
 8106af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106af6:	e006      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106af8:	2380      	movs	r3, #128	; 0x80
 8106afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106afe:	e002      	b.n	8106b06 <UART_SetConfig+0x5a2>
 8106b00:	2380      	movs	r3, #128	; 0x80
 8106b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8106b06:	687b      	ldr	r3, [r7, #4]
 8106b08:	681b      	ldr	r3, [r3, #0]
 8106b0a:	4a40      	ldr	r2, [pc, #256]	; (8106c0c <UART_SetConfig+0x6a8>)
 8106b0c:	4293      	cmp	r3, r2
 8106b0e:	f040 80ef 	bne.w	8106cf0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8106b12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106b16:	2b20      	cmp	r3, #32
 8106b18:	dc46      	bgt.n	8106ba8 <UART_SetConfig+0x644>
 8106b1a:	2b02      	cmp	r3, #2
 8106b1c:	f2c0 8081 	blt.w	8106c22 <UART_SetConfig+0x6be>
 8106b20:	3b02      	subs	r3, #2
 8106b22:	2b1e      	cmp	r3, #30
 8106b24:	d87d      	bhi.n	8106c22 <UART_SetConfig+0x6be>
 8106b26:	a201      	add	r2, pc, #4	; (adr r2, 8106b2c <UART_SetConfig+0x5c8>)
 8106b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106b2c:	08106baf 	.word	0x08106baf
 8106b30:	08106c23 	.word	0x08106c23
 8106b34:	08106bb7 	.word	0x08106bb7
 8106b38:	08106c23 	.word	0x08106c23
 8106b3c:	08106c23 	.word	0x08106c23
 8106b40:	08106c23 	.word	0x08106c23
 8106b44:	08106bc7 	.word	0x08106bc7
 8106b48:	08106c23 	.word	0x08106c23
 8106b4c:	08106c23 	.word	0x08106c23
 8106b50:	08106c23 	.word	0x08106c23
 8106b54:	08106c23 	.word	0x08106c23
 8106b58:	08106c23 	.word	0x08106c23
 8106b5c:	08106c23 	.word	0x08106c23
 8106b60:	08106c23 	.word	0x08106c23
 8106b64:	08106bd7 	.word	0x08106bd7
 8106b68:	08106c23 	.word	0x08106c23
 8106b6c:	08106c23 	.word	0x08106c23
 8106b70:	08106c23 	.word	0x08106c23
 8106b74:	08106c23 	.word	0x08106c23
 8106b78:	08106c23 	.word	0x08106c23
 8106b7c:	08106c23 	.word	0x08106c23
 8106b80:	08106c23 	.word	0x08106c23
 8106b84:	08106c23 	.word	0x08106c23
 8106b88:	08106c23 	.word	0x08106c23
 8106b8c:	08106c23 	.word	0x08106c23
 8106b90:	08106c23 	.word	0x08106c23
 8106b94:	08106c23 	.word	0x08106c23
 8106b98:	08106c23 	.word	0x08106c23
 8106b9c:	08106c23 	.word	0x08106c23
 8106ba0:	08106c23 	.word	0x08106c23
 8106ba4:	08106c15 	.word	0x08106c15
 8106ba8:	2b40      	cmp	r3, #64	; 0x40
 8106baa:	d036      	beq.n	8106c1a <UART_SetConfig+0x6b6>
 8106bac:	e039      	b.n	8106c22 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8106bae:	f7fd fe47 	bl	8104840 <HAL_RCCEx_GetD3PCLK1Freq>
 8106bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106bb4:	e03b      	b.n	8106c2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106bb6:	f107 0314 	add.w	r3, r7, #20
 8106bba:	4618      	mov	r0, r3
 8106bbc:	f7fd fe56 	bl	810486c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106bc0:	69bb      	ldr	r3, [r7, #24]
 8106bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106bc4:	e033      	b.n	8106c2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106bc6:	f107 0308 	add.w	r3, r7, #8
 8106bca:	4618      	mov	r0, r3
 8106bcc:	f7fd ffa2 	bl	8104b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106bd0:	68fb      	ldr	r3, [r7, #12]
 8106bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106bd4:	e02b      	b.n	8106c2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106bd6:	4b0a      	ldr	r3, [pc, #40]	; (8106c00 <UART_SetConfig+0x69c>)
 8106bd8:	681b      	ldr	r3, [r3, #0]
 8106bda:	f003 0320 	and.w	r3, r3, #32
 8106bde:	2b00      	cmp	r3, #0
 8106be0:	d009      	beq.n	8106bf6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106be2:	4b07      	ldr	r3, [pc, #28]	; (8106c00 <UART_SetConfig+0x69c>)
 8106be4:	681b      	ldr	r3, [r3, #0]
 8106be6:	08db      	lsrs	r3, r3, #3
 8106be8:	f003 0303 	and.w	r3, r3, #3
 8106bec:	4a08      	ldr	r2, [pc, #32]	; (8106c10 <UART_SetConfig+0x6ac>)
 8106bee:	fa22 f303 	lsr.w	r3, r2, r3
 8106bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106bf4:	e01b      	b.n	8106c2e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8106bf6:	4b06      	ldr	r3, [pc, #24]	; (8106c10 <UART_SetConfig+0x6ac>)
 8106bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106bfa:	e018      	b.n	8106c2e <UART_SetConfig+0x6ca>
 8106bfc:	40011400 	.word	0x40011400
 8106c00:	58024400 	.word	0x58024400
 8106c04:	40007800 	.word	0x40007800
 8106c08:	40007c00 	.word	0x40007c00
 8106c0c:	58000c00 	.word	0x58000c00
 8106c10:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106c14:	4bc4      	ldr	r3, [pc, #784]	; (8106f28 <UART_SetConfig+0x9c4>)
 8106c16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c18:	e009      	b.n	8106c2e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106c20:	e005      	b.n	8106c2e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8106c22:	2300      	movs	r3, #0
 8106c24:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106c26:	2301      	movs	r3, #1
 8106c28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106c2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8106c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c30:	2b00      	cmp	r3, #0
 8106c32:	f000 81da 	beq.w	8106fea <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8106c36:	687b      	ldr	r3, [r7, #4]
 8106c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c3a:	4abc      	ldr	r2, [pc, #752]	; (8106f2c <UART_SetConfig+0x9c8>)
 8106c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106c40:	461a      	mov	r2, r3
 8106c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8106c48:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106c4a:	687b      	ldr	r3, [r7, #4]
 8106c4c:	685a      	ldr	r2, [r3, #4]
 8106c4e:	4613      	mov	r3, r2
 8106c50:	005b      	lsls	r3, r3, #1
 8106c52:	4413      	add	r3, r2
 8106c54:	6a3a      	ldr	r2, [r7, #32]
 8106c56:	429a      	cmp	r2, r3
 8106c58:	d305      	bcc.n	8106c66 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8106c5a:	687b      	ldr	r3, [r7, #4]
 8106c5c:	685b      	ldr	r3, [r3, #4]
 8106c5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106c60:	6a3a      	ldr	r2, [r7, #32]
 8106c62:	429a      	cmp	r2, r3
 8106c64:	d903      	bls.n	8106c6e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8106c66:	2301      	movs	r3, #1
 8106c68:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106c6c:	e1bd      	b.n	8106fea <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106c70:	4618      	mov	r0, r3
 8106c72:	f04f 0100 	mov.w	r1, #0
 8106c76:	687b      	ldr	r3, [r7, #4]
 8106c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106c7a:	4aac      	ldr	r2, [pc, #688]	; (8106f2c <UART_SetConfig+0x9c8>)
 8106c7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106c80:	b29a      	uxth	r2, r3
 8106c82:	f04f 0300 	mov.w	r3, #0
 8106c86:	f7fa f887 	bl	8100d98 <__aeabi_uldivmod>
 8106c8a:	4602      	mov	r2, r0
 8106c8c:	460b      	mov	r3, r1
 8106c8e:	4610      	mov	r0, r2
 8106c90:	4619      	mov	r1, r3
 8106c92:	f04f 0200 	mov.w	r2, #0
 8106c96:	f04f 0300 	mov.w	r3, #0
 8106c9a:	020b      	lsls	r3, r1, #8
 8106c9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8106ca0:	0202      	lsls	r2, r0, #8
 8106ca2:	6879      	ldr	r1, [r7, #4]
 8106ca4:	6849      	ldr	r1, [r1, #4]
 8106ca6:	0849      	lsrs	r1, r1, #1
 8106ca8:	4608      	mov	r0, r1
 8106caa:	f04f 0100 	mov.w	r1, #0
 8106cae:	1814      	adds	r4, r2, r0
 8106cb0:	eb43 0501 	adc.w	r5, r3, r1
 8106cb4:	687b      	ldr	r3, [r7, #4]
 8106cb6:	685b      	ldr	r3, [r3, #4]
 8106cb8:	461a      	mov	r2, r3
 8106cba:	f04f 0300 	mov.w	r3, #0
 8106cbe:	4620      	mov	r0, r4
 8106cc0:	4629      	mov	r1, r5
 8106cc2:	f7fa f869 	bl	8100d98 <__aeabi_uldivmod>
 8106cc6:	4602      	mov	r2, r0
 8106cc8:	460b      	mov	r3, r1
 8106cca:	4613      	mov	r3, r2
 8106ccc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8106cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8106cd4:	d308      	bcc.n	8106ce8 <UART_SetConfig+0x784>
 8106cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106cdc:	d204      	bcs.n	8106ce8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8106cde:	687b      	ldr	r3, [r7, #4]
 8106ce0:	681b      	ldr	r3, [r3, #0]
 8106ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8106ce4:	60da      	str	r2, [r3, #12]
 8106ce6:	e180      	b.n	8106fea <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8106ce8:	2301      	movs	r3, #1
 8106cea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106cee:	e17c      	b.n	8106fea <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8106cf0:	687b      	ldr	r3, [r7, #4]
 8106cf2:	69db      	ldr	r3, [r3, #28]
 8106cf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8106cf8:	f040 80be 	bne.w	8106e78 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8106cfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106d00:	2b20      	cmp	r3, #32
 8106d02:	dc49      	bgt.n	8106d98 <UART_SetConfig+0x834>
 8106d04:	2b00      	cmp	r3, #0
 8106d06:	db7c      	blt.n	8106e02 <UART_SetConfig+0x89e>
 8106d08:	2b20      	cmp	r3, #32
 8106d0a:	d87a      	bhi.n	8106e02 <UART_SetConfig+0x89e>
 8106d0c:	a201      	add	r2, pc, #4	; (adr r2, 8106d14 <UART_SetConfig+0x7b0>)
 8106d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106d12:	bf00      	nop
 8106d14:	08106d9f 	.word	0x08106d9f
 8106d18:	08106da7 	.word	0x08106da7
 8106d1c:	08106e03 	.word	0x08106e03
 8106d20:	08106e03 	.word	0x08106e03
 8106d24:	08106daf 	.word	0x08106daf
 8106d28:	08106e03 	.word	0x08106e03
 8106d2c:	08106e03 	.word	0x08106e03
 8106d30:	08106e03 	.word	0x08106e03
 8106d34:	08106dbf 	.word	0x08106dbf
 8106d38:	08106e03 	.word	0x08106e03
 8106d3c:	08106e03 	.word	0x08106e03
 8106d40:	08106e03 	.word	0x08106e03
 8106d44:	08106e03 	.word	0x08106e03
 8106d48:	08106e03 	.word	0x08106e03
 8106d4c:	08106e03 	.word	0x08106e03
 8106d50:	08106e03 	.word	0x08106e03
 8106d54:	08106dcf 	.word	0x08106dcf
 8106d58:	08106e03 	.word	0x08106e03
 8106d5c:	08106e03 	.word	0x08106e03
 8106d60:	08106e03 	.word	0x08106e03
 8106d64:	08106e03 	.word	0x08106e03
 8106d68:	08106e03 	.word	0x08106e03
 8106d6c:	08106e03 	.word	0x08106e03
 8106d70:	08106e03 	.word	0x08106e03
 8106d74:	08106e03 	.word	0x08106e03
 8106d78:	08106e03 	.word	0x08106e03
 8106d7c:	08106e03 	.word	0x08106e03
 8106d80:	08106e03 	.word	0x08106e03
 8106d84:	08106e03 	.word	0x08106e03
 8106d88:	08106e03 	.word	0x08106e03
 8106d8c:	08106e03 	.word	0x08106e03
 8106d90:	08106e03 	.word	0x08106e03
 8106d94:	08106df5 	.word	0x08106df5
 8106d98:	2b40      	cmp	r3, #64	; 0x40
 8106d9a:	d02e      	beq.n	8106dfa <UART_SetConfig+0x896>
 8106d9c:	e031      	b.n	8106e02 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106d9e:	f7fc fde3 	bl	8103968 <HAL_RCC_GetPCLK1Freq>
 8106da2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106da4:	e033      	b.n	8106e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106da6:	f7fc fdf5 	bl	8103994 <HAL_RCC_GetPCLK2Freq>
 8106daa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106dac:	e02f      	b.n	8106e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106dae:	f107 0314 	add.w	r3, r7, #20
 8106db2:	4618      	mov	r0, r3
 8106db4:	f7fd fd5a 	bl	810486c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106db8:	69bb      	ldr	r3, [r7, #24]
 8106dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106dbc:	e027      	b.n	8106e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106dbe:	f107 0308 	add.w	r3, r7, #8
 8106dc2:	4618      	mov	r0, r3
 8106dc4:	f7fd fea6 	bl	8104b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106dc8:	68fb      	ldr	r3, [r7, #12]
 8106dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106dcc:	e01f      	b.n	8106e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106dce:	4b58      	ldr	r3, [pc, #352]	; (8106f30 <UART_SetConfig+0x9cc>)
 8106dd0:	681b      	ldr	r3, [r3, #0]
 8106dd2:	f003 0320 	and.w	r3, r3, #32
 8106dd6:	2b00      	cmp	r3, #0
 8106dd8:	d009      	beq.n	8106dee <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106dda:	4b55      	ldr	r3, [pc, #340]	; (8106f30 <UART_SetConfig+0x9cc>)
 8106ddc:	681b      	ldr	r3, [r3, #0]
 8106dde:	08db      	lsrs	r3, r3, #3
 8106de0:	f003 0303 	and.w	r3, r3, #3
 8106de4:	4a53      	ldr	r2, [pc, #332]	; (8106f34 <UART_SetConfig+0x9d0>)
 8106de6:	fa22 f303 	lsr.w	r3, r2, r3
 8106dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106dec:	e00f      	b.n	8106e0e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8106dee:	4b51      	ldr	r3, [pc, #324]	; (8106f34 <UART_SetConfig+0x9d0>)
 8106df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106df2:	e00c      	b.n	8106e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106df4:	4b4c      	ldr	r3, [pc, #304]	; (8106f28 <UART_SetConfig+0x9c4>)
 8106df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106df8:	e009      	b.n	8106e0e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106e00:	e005      	b.n	8106e0e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8106e02:	2300      	movs	r3, #0
 8106e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106e06:	2301      	movs	r3, #1
 8106e08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8106e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e10:	2b00      	cmp	r3, #0
 8106e12:	f000 80ea 	beq.w	8106fea <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106e16:	687b      	ldr	r3, [r7, #4]
 8106e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106e1a:	4a44      	ldr	r2, [pc, #272]	; (8106f2c <UART_SetConfig+0x9c8>)
 8106e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106e20:	461a      	mov	r2, r3
 8106e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106e24:	fbb3 f3f2 	udiv	r3, r3, r2
 8106e28:	005a      	lsls	r2, r3, #1
 8106e2a:	687b      	ldr	r3, [r7, #4]
 8106e2c:	685b      	ldr	r3, [r3, #4]
 8106e2e:	085b      	lsrs	r3, r3, #1
 8106e30:	441a      	add	r2, r3
 8106e32:	687b      	ldr	r3, [r7, #4]
 8106e34:	685b      	ldr	r3, [r3, #4]
 8106e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8106e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e3e:	2b0f      	cmp	r3, #15
 8106e40:	d916      	bls.n	8106e70 <UART_SetConfig+0x90c>
 8106e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106e48:	d212      	bcs.n	8106e70 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8106e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e4c:	b29b      	uxth	r3, r3
 8106e4e:	f023 030f 	bic.w	r3, r3, #15
 8106e52:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106e56:	085b      	lsrs	r3, r3, #1
 8106e58:	b29b      	uxth	r3, r3
 8106e5a:	f003 0307 	and.w	r3, r3, #7
 8106e5e:	b29a      	uxth	r2, r3
 8106e60:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8106e62:	4313      	orrs	r3, r2
 8106e64:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8106e66:	687b      	ldr	r3, [r7, #4]
 8106e68:	681b      	ldr	r3, [r3, #0]
 8106e6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8106e6c:	60da      	str	r2, [r3, #12]
 8106e6e:	e0bc      	b.n	8106fea <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106e70:	2301      	movs	r3, #1
 8106e72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106e76:	e0b8      	b.n	8106fea <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8106e78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106e7c:	2b20      	cmp	r3, #32
 8106e7e:	dc4b      	bgt.n	8106f18 <UART_SetConfig+0x9b4>
 8106e80:	2b00      	cmp	r3, #0
 8106e82:	f2c0 8087 	blt.w	8106f94 <UART_SetConfig+0xa30>
 8106e86:	2b20      	cmp	r3, #32
 8106e88:	f200 8084 	bhi.w	8106f94 <UART_SetConfig+0xa30>
 8106e8c:	a201      	add	r2, pc, #4	; (adr r2, 8106e94 <UART_SetConfig+0x930>)
 8106e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e92:	bf00      	nop
 8106e94:	08106f1f 	.word	0x08106f1f
 8106e98:	08106f39 	.word	0x08106f39
 8106e9c:	08106f95 	.word	0x08106f95
 8106ea0:	08106f95 	.word	0x08106f95
 8106ea4:	08106f41 	.word	0x08106f41
 8106ea8:	08106f95 	.word	0x08106f95
 8106eac:	08106f95 	.word	0x08106f95
 8106eb0:	08106f95 	.word	0x08106f95
 8106eb4:	08106f51 	.word	0x08106f51
 8106eb8:	08106f95 	.word	0x08106f95
 8106ebc:	08106f95 	.word	0x08106f95
 8106ec0:	08106f95 	.word	0x08106f95
 8106ec4:	08106f95 	.word	0x08106f95
 8106ec8:	08106f95 	.word	0x08106f95
 8106ecc:	08106f95 	.word	0x08106f95
 8106ed0:	08106f95 	.word	0x08106f95
 8106ed4:	08106f61 	.word	0x08106f61
 8106ed8:	08106f95 	.word	0x08106f95
 8106edc:	08106f95 	.word	0x08106f95
 8106ee0:	08106f95 	.word	0x08106f95
 8106ee4:	08106f95 	.word	0x08106f95
 8106ee8:	08106f95 	.word	0x08106f95
 8106eec:	08106f95 	.word	0x08106f95
 8106ef0:	08106f95 	.word	0x08106f95
 8106ef4:	08106f95 	.word	0x08106f95
 8106ef8:	08106f95 	.word	0x08106f95
 8106efc:	08106f95 	.word	0x08106f95
 8106f00:	08106f95 	.word	0x08106f95
 8106f04:	08106f95 	.word	0x08106f95
 8106f08:	08106f95 	.word	0x08106f95
 8106f0c:	08106f95 	.word	0x08106f95
 8106f10:	08106f95 	.word	0x08106f95
 8106f14:	08106f87 	.word	0x08106f87
 8106f18:	2b40      	cmp	r3, #64	; 0x40
 8106f1a:	d037      	beq.n	8106f8c <UART_SetConfig+0xa28>
 8106f1c:	e03a      	b.n	8106f94 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106f1e:	f7fc fd23 	bl	8103968 <HAL_RCC_GetPCLK1Freq>
 8106f22:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106f24:	e03c      	b.n	8106fa0 <UART_SetConfig+0xa3c>
 8106f26:	bf00      	nop
 8106f28:	003d0900 	.word	0x003d0900
 8106f2c:	0810e118 	.word	0x0810e118
 8106f30:	58024400 	.word	0x58024400
 8106f34:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8106f38:	f7fc fd2c 	bl	8103994 <HAL_RCC_GetPCLK2Freq>
 8106f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106f3e:	e02f      	b.n	8106fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106f40:	f107 0314 	add.w	r3, r7, #20
 8106f44:	4618      	mov	r0, r3
 8106f46:	f7fd fc91 	bl	810486c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8106f4a:	69bb      	ldr	r3, [r7, #24]
 8106f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106f4e:	e027      	b.n	8106fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106f50:	f107 0308 	add.w	r3, r7, #8
 8106f54:	4618      	mov	r0, r3
 8106f56:	f7fd fddd 	bl	8104b14 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8106f5a:	68fb      	ldr	r3, [r7, #12]
 8106f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106f5e:	e01f      	b.n	8106fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106f60:	4b2c      	ldr	r3, [pc, #176]	; (8107014 <UART_SetConfig+0xab0>)
 8106f62:	681b      	ldr	r3, [r3, #0]
 8106f64:	f003 0320 	and.w	r3, r3, #32
 8106f68:	2b00      	cmp	r3, #0
 8106f6a:	d009      	beq.n	8106f80 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106f6c:	4b29      	ldr	r3, [pc, #164]	; (8107014 <UART_SetConfig+0xab0>)
 8106f6e:	681b      	ldr	r3, [r3, #0]
 8106f70:	08db      	lsrs	r3, r3, #3
 8106f72:	f003 0303 	and.w	r3, r3, #3
 8106f76:	4a28      	ldr	r2, [pc, #160]	; (8107018 <UART_SetConfig+0xab4>)
 8106f78:	fa22 f303 	lsr.w	r3, r2, r3
 8106f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106f7e:	e00f      	b.n	8106fa0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8106f80:	4b25      	ldr	r3, [pc, #148]	; (8107018 <UART_SetConfig+0xab4>)
 8106f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106f84:	e00c      	b.n	8106fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106f86:	4b25      	ldr	r3, [pc, #148]	; (810701c <UART_SetConfig+0xab8>)
 8106f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106f8a:	e009      	b.n	8106fa0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106f92:	e005      	b.n	8106fa0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8106f94:	2300      	movs	r3, #0
 8106f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8106f98:	2301      	movs	r3, #1
 8106f9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106f9e:	bf00      	nop
    }

    if (pclk != 0U)
 8106fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106fa2:	2b00      	cmp	r3, #0
 8106fa4:	d021      	beq.n	8106fea <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106fa6:	687b      	ldr	r3, [r7, #4]
 8106fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106faa:	4a1d      	ldr	r2, [pc, #116]	; (8107020 <UART_SetConfig+0xabc>)
 8106fac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106fb0:	461a      	mov	r2, r3
 8106fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106fb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8106fb8:	687b      	ldr	r3, [r7, #4]
 8106fba:	685b      	ldr	r3, [r3, #4]
 8106fbc:	085b      	lsrs	r3, r3, #1
 8106fbe:	441a      	add	r2, r3
 8106fc0:	687b      	ldr	r3, [r7, #4]
 8106fc2:	685b      	ldr	r3, [r3, #4]
 8106fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8106fc8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106fcc:	2b0f      	cmp	r3, #15
 8106fce:	d909      	bls.n	8106fe4 <UART_SetConfig+0xa80>
 8106fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106fd6:	d205      	bcs.n	8106fe4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8106fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106fda:	b29a      	uxth	r2, r3
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	681b      	ldr	r3, [r3, #0]
 8106fe0:	60da      	str	r2, [r3, #12]
 8106fe2:	e002      	b.n	8106fea <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106fe4:	2301      	movs	r3, #1
 8106fe6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	2201      	movs	r2, #1
 8106fee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8106ff2:	687b      	ldr	r3, [r7, #4]
 8106ff4:	2201      	movs	r2, #1
 8106ff6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8106ffa:	687b      	ldr	r3, [r7, #4]
 8106ffc:	2200      	movs	r2, #0
 8106ffe:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8107000:	687b      	ldr	r3, [r7, #4]
 8107002:	2200      	movs	r2, #0
 8107004:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8107006:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 810700a:	4618      	mov	r0, r3
 810700c:	3738      	adds	r7, #56	; 0x38
 810700e:	46bd      	mov	sp, r7
 8107010:	bdb0      	pop	{r4, r5, r7, pc}
 8107012:	bf00      	nop
 8107014:	58024400 	.word	0x58024400
 8107018:	03d09000 	.word	0x03d09000
 810701c:	003d0900 	.word	0x003d0900
 8107020:	0810e118 	.word	0x0810e118

08107024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8107024:	b480      	push	{r7}
 8107026:	b083      	sub	sp, #12
 8107028:	af00      	add	r7, sp, #0
 810702a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107030:	f003 0301 	and.w	r3, r3, #1
 8107034:	2b00      	cmp	r3, #0
 8107036:	d00a      	beq.n	810704e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8107038:	687b      	ldr	r3, [r7, #4]
 810703a:	681b      	ldr	r3, [r3, #0]
 810703c:	685b      	ldr	r3, [r3, #4]
 810703e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8107042:	687b      	ldr	r3, [r7, #4]
 8107044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8107046:	687b      	ldr	r3, [r7, #4]
 8107048:	681b      	ldr	r3, [r3, #0]
 810704a:	430a      	orrs	r2, r1
 810704c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107052:	f003 0302 	and.w	r3, r3, #2
 8107056:	2b00      	cmp	r3, #0
 8107058:	d00a      	beq.n	8107070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810705a:	687b      	ldr	r3, [r7, #4]
 810705c:	681b      	ldr	r3, [r3, #0]
 810705e:	685b      	ldr	r3, [r3, #4]
 8107060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8107064:	687b      	ldr	r3, [r7, #4]
 8107066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	681b      	ldr	r3, [r3, #0]
 810706c:	430a      	orrs	r2, r1
 810706e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107074:	f003 0304 	and.w	r3, r3, #4
 8107078:	2b00      	cmp	r3, #0
 810707a:	d00a      	beq.n	8107092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810707c:	687b      	ldr	r3, [r7, #4]
 810707e:	681b      	ldr	r3, [r3, #0]
 8107080:	685b      	ldr	r3, [r3, #4]
 8107082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8107086:	687b      	ldr	r3, [r7, #4]
 8107088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810708a:	687b      	ldr	r3, [r7, #4]
 810708c:	681b      	ldr	r3, [r3, #0]
 810708e:	430a      	orrs	r2, r1
 8107090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8107092:	687b      	ldr	r3, [r7, #4]
 8107094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107096:	f003 0308 	and.w	r3, r3, #8
 810709a:	2b00      	cmp	r3, #0
 810709c:	d00a      	beq.n	81070b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810709e:	687b      	ldr	r3, [r7, #4]
 81070a0:	681b      	ldr	r3, [r3, #0]
 81070a2:	685b      	ldr	r3, [r3, #4]
 81070a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 81070a8:	687b      	ldr	r3, [r7, #4]
 81070aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	681b      	ldr	r3, [r3, #0]
 81070b0:	430a      	orrs	r2, r1
 81070b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81070b4:	687b      	ldr	r3, [r7, #4]
 81070b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81070b8:	f003 0310 	and.w	r3, r3, #16
 81070bc:	2b00      	cmp	r3, #0
 81070be:	d00a      	beq.n	81070d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81070c0:	687b      	ldr	r3, [r7, #4]
 81070c2:	681b      	ldr	r3, [r3, #0]
 81070c4:	689b      	ldr	r3, [r3, #8]
 81070c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81070ca:	687b      	ldr	r3, [r7, #4]
 81070cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81070ce:	687b      	ldr	r3, [r7, #4]
 81070d0:	681b      	ldr	r3, [r3, #0]
 81070d2:	430a      	orrs	r2, r1
 81070d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81070d6:	687b      	ldr	r3, [r7, #4]
 81070d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81070da:	f003 0320 	and.w	r3, r3, #32
 81070de:	2b00      	cmp	r3, #0
 81070e0:	d00a      	beq.n	81070f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81070e2:	687b      	ldr	r3, [r7, #4]
 81070e4:	681b      	ldr	r3, [r3, #0]
 81070e6:	689b      	ldr	r3, [r3, #8]
 81070e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81070ec:	687b      	ldr	r3, [r7, #4]
 81070ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81070f0:	687b      	ldr	r3, [r7, #4]
 81070f2:	681b      	ldr	r3, [r3, #0]
 81070f4:	430a      	orrs	r2, r1
 81070f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81070f8:	687b      	ldr	r3, [r7, #4]
 81070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81070fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8107100:	2b00      	cmp	r3, #0
 8107102:	d01a      	beq.n	810713a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8107104:	687b      	ldr	r3, [r7, #4]
 8107106:	681b      	ldr	r3, [r3, #0]
 8107108:	685b      	ldr	r3, [r3, #4]
 810710a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810710e:	687b      	ldr	r3, [r7, #4]
 8107110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8107112:	687b      	ldr	r3, [r7, #4]
 8107114:	681b      	ldr	r3, [r3, #0]
 8107116:	430a      	orrs	r2, r1
 8107118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810711a:	687b      	ldr	r3, [r7, #4]
 810711c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810711e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107122:	d10a      	bne.n	810713a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8107124:	687b      	ldr	r3, [r7, #4]
 8107126:	681b      	ldr	r3, [r3, #0]
 8107128:	685b      	ldr	r3, [r3, #4]
 810712a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8107132:	687b      	ldr	r3, [r7, #4]
 8107134:	681b      	ldr	r3, [r3, #0]
 8107136:	430a      	orrs	r2, r1
 8107138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810713a:	687b      	ldr	r3, [r7, #4]
 810713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810713e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8107142:	2b00      	cmp	r3, #0
 8107144:	d00a      	beq.n	810715c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8107146:	687b      	ldr	r3, [r7, #4]
 8107148:	681b      	ldr	r3, [r3, #0]
 810714a:	685b      	ldr	r3, [r3, #4]
 810714c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8107154:	687b      	ldr	r3, [r7, #4]
 8107156:	681b      	ldr	r3, [r3, #0]
 8107158:	430a      	orrs	r2, r1
 810715a:	605a      	str	r2, [r3, #4]
  }
}
 810715c:	bf00      	nop
 810715e:	370c      	adds	r7, #12
 8107160:	46bd      	mov	sp, r7
 8107162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107166:	4770      	bx	lr

08107168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8107168:	b580      	push	{r7, lr}
 810716a:	b086      	sub	sp, #24
 810716c:	af02      	add	r7, sp, #8
 810716e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	2200      	movs	r2, #0
 8107174:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8107178:	f7fb fe78 	bl	8102e6c <HAL_GetTick>
 810717c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	681b      	ldr	r3, [r3, #0]
 8107182:	681b      	ldr	r3, [r3, #0]
 8107184:	f003 0308 	and.w	r3, r3, #8
 8107188:	2b08      	cmp	r3, #8
 810718a:	d10e      	bne.n	81071aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810718c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8107190:	9300      	str	r3, [sp, #0]
 8107192:	68fb      	ldr	r3, [r7, #12]
 8107194:	2200      	movs	r2, #0
 8107196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810719a:	6878      	ldr	r0, [r7, #4]
 810719c:	f000 f82f 	bl	81071fe <UART_WaitOnFlagUntilTimeout>
 81071a0:	4603      	mov	r3, r0
 81071a2:	2b00      	cmp	r3, #0
 81071a4:	d001      	beq.n	81071aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81071a6:	2303      	movs	r3, #3
 81071a8:	e025      	b.n	81071f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81071aa:	687b      	ldr	r3, [r7, #4]
 81071ac:	681b      	ldr	r3, [r3, #0]
 81071ae:	681b      	ldr	r3, [r3, #0]
 81071b0:	f003 0304 	and.w	r3, r3, #4
 81071b4:	2b04      	cmp	r3, #4
 81071b6:	d10e      	bne.n	81071d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81071b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81071bc:	9300      	str	r3, [sp, #0]
 81071be:	68fb      	ldr	r3, [r7, #12]
 81071c0:	2200      	movs	r2, #0
 81071c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81071c6:	6878      	ldr	r0, [r7, #4]
 81071c8:	f000 f819 	bl	81071fe <UART_WaitOnFlagUntilTimeout>
 81071cc:	4603      	mov	r3, r0
 81071ce:	2b00      	cmp	r3, #0
 81071d0:	d001      	beq.n	81071d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 81071d2:	2303      	movs	r3, #3
 81071d4:	e00f      	b.n	81071f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81071d6:	687b      	ldr	r3, [r7, #4]
 81071d8:	2220      	movs	r2, #32
 81071da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 81071de:	687b      	ldr	r3, [r7, #4]
 81071e0:	2220      	movs	r2, #32
 81071e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81071e6:	687b      	ldr	r3, [r7, #4]
 81071e8:	2200      	movs	r2, #0
 81071ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 81071ec:	687b      	ldr	r3, [r7, #4]
 81071ee:	2200      	movs	r2, #0
 81071f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81071f4:	2300      	movs	r3, #0
}
 81071f6:	4618      	mov	r0, r3
 81071f8:	3710      	adds	r7, #16
 81071fa:	46bd      	mov	sp, r7
 81071fc:	bd80      	pop	{r7, pc}

081071fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81071fe:	b580      	push	{r7, lr}
 8107200:	b09c      	sub	sp, #112	; 0x70
 8107202:	af00      	add	r7, sp, #0
 8107204:	60f8      	str	r0, [r7, #12]
 8107206:	60b9      	str	r1, [r7, #8]
 8107208:	603b      	str	r3, [r7, #0]
 810720a:	4613      	mov	r3, r2
 810720c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810720e:	e0a9      	b.n	8107364 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8107210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8107212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8107216:	f000 80a5 	beq.w	8107364 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810721a:	f7fb fe27 	bl	8102e6c <HAL_GetTick>
 810721e:	4602      	mov	r2, r0
 8107220:	683b      	ldr	r3, [r7, #0]
 8107222:	1ad3      	subs	r3, r2, r3
 8107224:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8107226:	429a      	cmp	r2, r3
 8107228:	d302      	bcc.n	8107230 <UART_WaitOnFlagUntilTimeout+0x32>
 810722a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810722c:	2b00      	cmp	r3, #0
 810722e:	d140      	bne.n	81072b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8107230:	68fb      	ldr	r3, [r7, #12]
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8107238:	e853 3f00 	ldrex	r3, [r3]
 810723c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810723e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8107240:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8107244:	667b      	str	r3, [r7, #100]	; 0x64
 8107246:	68fb      	ldr	r3, [r7, #12]
 8107248:	681b      	ldr	r3, [r3, #0]
 810724a:	461a      	mov	r2, r3
 810724c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810724e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8107250:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107252:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8107254:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8107256:	e841 2300 	strex	r3, r2, [r1]
 810725a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810725c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810725e:	2b00      	cmp	r3, #0
 8107260:	d1e6      	bne.n	8107230 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8107262:	68fb      	ldr	r3, [r7, #12]
 8107264:	681b      	ldr	r3, [r3, #0]
 8107266:	3308      	adds	r3, #8
 8107268:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810726a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810726c:	e853 3f00 	ldrex	r3, [r3]
 8107270:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8107272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8107274:	f023 0301 	bic.w	r3, r3, #1
 8107278:	663b      	str	r3, [r7, #96]	; 0x60
 810727a:	68fb      	ldr	r3, [r7, #12]
 810727c:	681b      	ldr	r3, [r3, #0]
 810727e:	3308      	adds	r3, #8
 8107280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8107282:	64ba      	str	r2, [r7, #72]	; 0x48
 8107284:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8107288:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810728a:	e841 2300 	strex	r3, r2, [r1]
 810728e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8107290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8107292:	2b00      	cmp	r3, #0
 8107294:	d1e5      	bne.n	8107262 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8107296:	68fb      	ldr	r3, [r7, #12]
 8107298:	2220      	movs	r2, #32
 810729a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 810729e:	68fb      	ldr	r3, [r7, #12]
 81072a0:	2220      	movs	r2, #32
 81072a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 81072a6:	68fb      	ldr	r3, [r7, #12]
 81072a8:	2200      	movs	r2, #0
 81072aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 81072ae:	2303      	movs	r3, #3
 81072b0:	e069      	b.n	8107386 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81072b2:	68fb      	ldr	r3, [r7, #12]
 81072b4:	681b      	ldr	r3, [r3, #0]
 81072b6:	681b      	ldr	r3, [r3, #0]
 81072b8:	f003 0304 	and.w	r3, r3, #4
 81072bc:	2b00      	cmp	r3, #0
 81072be:	d051      	beq.n	8107364 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81072c0:	68fb      	ldr	r3, [r7, #12]
 81072c2:	681b      	ldr	r3, [r3, #0]
 81072c4:	69db      	ldr	r3, [r3, #28]
 81072c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 81072ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81072ce:	d149      	bne.n	8107364 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81072d0:	68fb      	ldr	r3, [r7, #12]
 81072d2:	681b      	ldr	r3, [r3, #0]
 81072d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81072d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 81072da:	68fb      	ldr	r3, [r7, #12]
 81072dc:	681b      	ldr	r3, [r3, #0]
 81072de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81072e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81072e2:	e853 3f00 	ldrex	r3, [r3]
 81072e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81072ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 81072ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 81072f0:	68fb      	ldr	r3, [r7, #12]
 81072f2:	681b      	ldr	r3, [r3, #0]
 81072f4:	461a      	mov	r2, r3
 81072f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81072f8:	637b      	str	r3, [r7, #52]	; 0x34
 81072fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81072fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81072fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8107300:	e841 2300 	strex	r3, r2, [r1]
 8107304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8107306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8107308:	2b00      	cmp	r3, #0
 810730a:	d1e6      	bne.n	81072da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810730c:	68fb      	ldr	r3, [r7, #12]
 810730e:	681b      	ldr	r3, [r3, #0]
 8107310:	3308      	adds	r3, #8
 8107312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8107314:	697b      	ldr	r3, [r7, #20]
 8107316:	e853 3f00 	ldrex	r3, [r3]
 810731a:	613b      	str	r3, [r7, #16]
   return(result);
 810731c:	693b      	ldr	r3, [r7, #16]
 810731e:	f023 0301 	bic.w	r3, r3, #1
 8107322:	66bb      	str	r3, [r7, #104]	; 0x68
 8107324:	68fb      	ldr	r3, [r7, #12]
 8107326:	681b      	ldr	r3, [r3, #0]
 8107328:	3308      	adds	r3, #8
 810732a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 810732c:	623a      	str	r2, [r7, #32]
 810732e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8107330:	69f9      	ldr	r1, [r7, #28]
 8107332:	6a3a      	ldr	r2, [r7, #32]
 8107334:	e841 2300 	strex	r3, r2, [r1]
 8107338:	61bb      	str	r3, [r7, #24]
   return(result);
 810733a:	69bb      	ldr	r3, [r7, #24]
 810733c:	2b00      	cmp	r3, #0
 810733e:	d1e5      	bne.n	810730c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8107340:	68fb      	ldr	r3, [r7, #12]
 8107342:	2220      	movs	r2, #32
 8107344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8107348:	68fb      	ldr	r3, [r7, #12]
 810734a:	2220      	movs	r2, #32
 810734c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8107350:	68fb      	ldr	r3, [r7, #12]
 8107352:	2220      	movs	r2, #32
 8107354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8107358:	68fb      	ldr	r3, [r7, #12]
 810735a:	2200      	movs	r2, #0
 810735c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8107360:	2303      	movs	r3, #3
 8107362:	e010      	b.n	8107386 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8107364:	68fb      	ldr	r3, [r7, #12]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	69da      	ldr	r2, [r3, #28]
 810736a:	68bb      	ldr	r3, [r7, #8]
 810736c:	4013      	ands	r3, r2
 810736e:	68ba      	ldr	r2, [r7, #8]
 8107370:	429a      	cmp	r2, r3
 8107372:	bf0c      	ite	eq
 8107374:	2301      	moveq	r3, #1
 8107376:	2300      	movne	r3, #0
 8107378:	b2db      	uxtb	r3, r3
 810737a:	461a      	mov	r2, r3
 810737c:	79fb      	ldrb	r3, [r7, #7]
 810737e:	429a      	cmp	r2, r3
 8107380:	f43f af46 	beq.w	8107210 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8107384:	2300      	movs	r3, #0
}
 8107386:	4618      	mov	r0, r3
 8107388:	3770      	adds	r7, #112	; 0x70
 810738a:	46bd      	mov	sp, r7
 810738c:	bd80      	pop	{r7, pc}

0810738e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810738e:	b480      	push	{r7}
 8107390:	b085      	sub	sp, #20
 8107392:	af00      	add	r7, sp, #0
 8107394:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107396:	687b      	ldr	r3, [r7, #4]
 8107398:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810739c:	2b01      	cmp	r3, #1
 810739e:	d101      	bne.n	81073a4 <HAL_UARTEx_DisableFifoMode+0x16>
 81073a0:	2302      	movs	r3, #2
 81073a2:	e027      	b.n	81073f4 <HAL_UARTEx_DisableFifoMode+0x66>
 81073a4:	687b      	ldr	r3, [r7, #4]
 81073a6:	2201      	movs	r2, #1
 81073a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 81073ac:	687b      	ldr	r3, [r7, #4]
 81073ae:	2224      	movs	r2, #36	; 0x24
 81073b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81073b4:	687b      	ldr	r3, [r7, #4]
 81073b6:	681b      	ldr	r3, [r3, #0]
 81073b8:	681b      	ldr	r3, [r3, #0]
 81073ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81073bc:	687b      	ldr	r3, [r7, #4]
 81073be:	681b      	ldr	r3, [r3, #0]
 81073c0:	681a      	ldr	r2, [r3, #0]
 81073c2:	687b      	ldr	r3, [r7, #4]
 81073c4:	681b      	ldr	r3, [r3, #0]
 81073c6:	f022 0201 	bic.w	r2, r2, #1
 81073ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 81073cc:	68fb      	ldr	r3, [r7, #12]
 81073ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 81073d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 81073d4:	687b      	ldr	r3, [r7, #4]
 81073d6:	2200      	movs	r2, #0
 81073d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81073da:	687b      	ldr	r3, [r7, #4]
 81073dc:	681b      	ldr	r3, [r3, #0]
 81073de:	68fa      	ldr	r2, [r7, #12]
 81073e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81073e2:	687b      	ldr	r3, [r7, #4]
 81073e4:	2220      	movs	r2, #32
 81073e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81073ea:	687b      	ldr	r3, [r7, #4]
 81073ec:	2200      	movs	r2, #0
 81073ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81073f2:	2300      	movs	r3, #0
}
 81073f4:	4618      	mov	r0, r3
 81073f6:	3714      	adds	r7, #20
 81073f8:	46bd      	mov	sp, r7
 81073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073fe:	4770      	bx	lr

08107400 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8107400:	b580      	push	{r7, lr}
 8107402:	b084      	sub	sp, #16
 8107404:	af00      	add	r7, sp, #0
 8107406:	6078      	str	r0, [r7, #4]
 8107408:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810740a:	687b      	ldr	r3, [r7, #4]
 810740c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8107410:	2b01      	cmp	r3, #1
 8107412:	d101      	bne.n	8107418 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8107414:	2302      	movs	r3, #2
 8107416:	e02d      	b.n	8107474 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	2201      	movs	r2, #1
 810741c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8107420:	687b      	ldr	r3, [r7, #4]
 8107422:	2224      	movs	r2, #36	; 0x24
 8107424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	681b      	ldr	r3, [r3, #0]
 810742e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8107430:	687b      	ldr	r3, [r7, #4]
 8107432:	681b      	ldr	r3, [r3, #0]
 8107434:	681a      	ldr	r2, [r3, #0]
 8107436:	687b      	ldr	r3, [r7, #4]
 8107438:	681b      	ldr	r3, [r3, #0]
 810743a:	f022 0201 	bic.w	r2, r2, #1
 810743e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8107440:	687b      	ldr	r3, [r7, #4]
 8107442:	681b      	ldr	r3, [r3, #0]
 8107444:	689b      	ldr	r3, [r3, #8]
 8107446:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 810744a:	687b      	ldr	r3, [r7, #4]
 810744c:	681b      	ldr	r3, [r3, #0]
 810744e:	683a      	ldr	r2, [r7, #0]
 8107450:	430a      	orrs	r2, r1
 8107452:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8107454:	6878      	ldr	r0, [r7, #4]
 8107456:	f000 f84f 	bl	81074f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810745a:	687b      	ldr	r3, [r7, #4]
 810745c:	681b      	ldr	r3, [r3, #0]
 810745e:	68fa      	ldr	r2, [r7, #12]
 8107460:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8107462:	687b      	ldr	r3, [r7, #4]
 8107464:	2220      	movs	r2, #32
 8107466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810746a:	687b      	ldr	r3, [r7, #4]
 810746c:	2200      	movs	r2, #0
 810746e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8107472:	2300      	movs	r3, #0
}
 8107474:	4618      	mov	r0, r3
 8107476:	3710      	adds	r7, #16
 8107478:	46bd      	mov	sp, r7
 810747a:	bd80      	pop	{r7, pc}

0810747c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810747c:	b580      	push	{r7, lr}
 810747e:	b084      	sub	sp, #16
 8107480:	af00      	add	r7, sp, #0
 8107482:	6078      	str	r0, [r7, #4]
 8107484:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8107486:	687b      	ldr	r3, [r7, #4]
 8107488:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810748c:	2b01      	cmp	r3, #1
 810748e:	d101      	bne.n	8107494 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8107490:	2302      	movs	r3, #2
 8107492:	e02d      	b.n	81074f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8107494:	687b      	ldr	r3, [r7, #4]
 8107496:	2201      	movs	r2, #1
 8107498:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 810749c:	687b      	ldr	r3, [r7, #4]
 810749e:	2224      	movs	r2, #36	; 0x24
 81074a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	681b      	ldr	r3, [r3, #0]
 81074aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81074ac:	687b      	ldr	r3, [r7, #4]
 81074ae:	681b      	ldr	r3, [r3, #0]
 81074b0:	681a      	ldr	r2, [r3, #0]
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	681b      	ldr	r3, [r3, #0]
 81074b6:	f022 0201 	bic.w	r2, r2, #1
 81074ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 81074bc:	687b      	ldr	r3, [r7, #4]
 81074be:	681b      	ldr	r3, [r3, #0]
 81074c0:	689b      	ldr	r3, [r3, #8]
 81074c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 81074c6:	687b      	ldr	r3, [r7, #4]
 81074c8:	681b      	ldr	r3, [r3, #0]
 81074ca:	683a      	ldr	r2, [r7, #0]
 81074cc:	430a      	orrs	r2, r1
 81074ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81074d0:	6878      	ldr	r0, [r7, #4]
 81074d2:	f000 f811 	bl	81074f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81074d6:	687b      	ldr	r3, [r7, #4]
 81074d8:	681b      	ldr	r3, [r3, #0]
 81074da:	68fa      	ldr	r2, [r7, #12]
 81074dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81074de:	687b      	ldr	r3, [r7, #4]
 81074e0:	2220      	movs	r2, #32
 81074e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81074e6:	687b      	ldr	r3, [r7, #4]
 81074e8:	2200      	movs	r2, #0
 81074ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 81074ee:	2300      	movs	r3, #0
}
 81074f0:	4618      	mov	r0, r3
 81074f2:	3710      	adds	r7, #16
 81074f4:	46bd      	mov	sp, r7
 81074f6:	bd80      	pop	{r7, pc}

081074f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81074f8:	b480      	push	{r7}
 81074fa:	b085      	sub	sp, #20
 81074fc:	af00      	add	r7, sp, #0
 81074fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8107500:	687b      	ldr	r3, [r7, #4]
 8107502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8107504:	2b00      	cmp	r3, #0
 8107506:	d108      	bne.n	810751a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8107508:	687b      	ldr	r3, [r7, #4]
 810750a:	2201      	movs	r2, #1
 810750c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8107510:	687b      	ldr	r3, [r7, #4]
 8107512:	2201      	movs	r2, #1
 8107514:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8107518:	e031      	b.n	810757e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810751a:	2310      	movs	r3, #16
 810751c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810751e:	2310      	movs	r3, #16
 8107520:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8107522:	687b      	ldr	r3, [r7, #4]
 8107524:	681b      	ldr	r3, [r3, #0]
 8107526:	689b      	ldr	r3, [r3, #8]
 8107528:	0e5b      	lsrs	r3, r3, #25
 810752a:	b2db      	uxtb	r3, r3
 810752c:	f003 0307 	and.w	r3, r3, #7
 8107530:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8107532:	687b      	ldr	r3, [r7, #4]
 8107534:	681b      	ldr	r3, [r3, #0]
 8107536:	689b      	ldr	r3, [r3, #8]
 8107538:	0f5b      	lsrs	r3, r3, #29
 810753a:	b2db      	uxtb	r3, r3
 810753c:	f003 0307 	and.w	r3, r3, #7
 8107540:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107542:	7bbb      	ldrb	r3, [r7, #14]
 8107544:	7b3a      	ldrb	r2, [r7, #12]
 8107546:	4911      	ldr	r1, [pc, #68]	; (810758c <UARTEx_SetNbDataToProcess+0x94>)
 8107548:	5c8a      	ldrb	r2, [r1, r2]
 810754a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810754e:	7b3a      	ldrb	r2, [r7, #12]
 8107550:	490f      	ldr	r1, [pc, #60]	; (8107590 <UARTEx_SetNbDataToProcess+0x98>)
 8107552:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8107554:	fb93 f3f2 	sdiv	r3, r3, r2
 8107558:	b29a      	uxth	r2, r3
 810755a:	687b      	ldr	r3, [r7, #4]
 810755c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107560:	7bfb      	ldrb	r3, [r7, #15]
 8107562:	7b7a      	ldrb	r2, [r7, #13]
 8107564:	4909      	ldr	r1, [pc, #36]	; (810758c <UARTEx_SetNbDataToProcess+0x94>)
 8107566:	5c8a      	ldrb	r2, [r1, r2]
 8107568:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810756c:	7b7a      	ldrb	r2, [r7, #13]
 810756e:	4908      	ldr	r1, [pc, #32]	; (8107590 <UARTEx_SetNbDataToProcess+0x98>)
 8107570:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8107572:	fb93 f3f2 	sdiv	r3, r3, r2
 8107576:	b29a      	uxth	r2, r3
 8107578:	687b      	ldr	r3, [r7, #4]
 810757a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 810757e:	bf00      	nop
 8107580:	3714      	adds	r7, #20
 8107582:	46bd      	mov	sp, r7
 8107584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107588:	4770      	bx	lr
 810758a:	bf00      	nop
 810758c:	0810e130 	.word	0x0810e130
 8107590:	0810e138 	.word	0x0810e138

08107594 <__errno>:
 8107594:	4b01      	ldr	r3, [pc, #4]	; (810759c <__errno+0x8>)
 8107596:	6818      	ldr	r0, [r3, #0]
 8107598:	4770      	bx	lr
 810759a:	bf00      	nop
 810759c:	10000060 	.word	0x10000060

081075a0 <__sflush_r>:
 81075a0:	898a      	ldrh	r2, [r1, #12]
 81075a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81075a6:	4605      	mov	r5, r0
 81075a8:	0710      	lsls	r0, r2, #28
 81075aa:	460c      	mov	r4, r1
 81075ac:	d458      	bmi.n	8107660 <__sflush_r+0xc0>
 81075ae:	684b      	ldr	r3, [r1, #4]
 81075b0:	2b00      	cmp	r3, #0
 81075b2:	dc05      	bgt.n	81075c0 <__sflush_r+0x20>
 81075b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81075b6:	2b00      	cmp	r3, #0
 81075b8:	dc02      	bgt.n	81075c0 <__sflush_r+0x20>
 81075ba:	2000      	movs	r0, #0
 81075bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81075c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81075c2:	2e00      	cmp	r6, #0
 81075c4:	d0f9      	beq.n	81075ba <__sflush_r+0x1a>
 81075c6:	2300      	movs	r3, #0
 81075c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81075cc:	682f      	ldr	r7, [r5, #0]
 81075ce:	602b      	str	r3, [r5, #0]
 81075d0:	d032      	beq.n	8107638 <__sflush_r+0x98>
 81075d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81075d4:	89a3      	ldrh	r3, [r4, #12]
 81075d6:	075a      	lsls	r2, r3, #29
 81075d8:	d505      	bpl.n	81075e6 <__sflush_r+0x46>
 81075da:	6863      	ldr	r3, [r4, #4]
 81075dc:	1ac0      	subs	r0, r0, r3
 81075de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81075e0:	b10b      	cbz	r3, 81075e6 <__sflush_r+0x46>
 81075e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81075e4:	1ac0      	subs	r0, r0, r3
 81075e6:	2300      	movs	r3, #0
 81075e8:	4602      	mov	r2, r0
 81075ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81075ec:	6a21      	ldr	r1, [r4, #32]
 81075ee:	4628      	mov	r0, r5
 81075f0:	47b0      	blx	r6
 81075f2:	1c43      	adds	r3, r0, #1
 81075f4:	89a3      	ldrh	r3, [r4, #12]
 81075f6:	d106      	bne.n	8107606 <__sflush_r+0x66>
 81075f8:	6829      	ldr	r1, [r5, #0]
 81075fa:	291d      	cmp	r1, #29
 81075fc:	d82c      	bhi.n	8107658 <__sflush_r+0xb8>
 81075fe:	4a2a      	ldr	r2, [pc, #168]	; (81076a8 <__sflush_r+0x108>)
 8107600:	40ca      	lsrs	r2, r1
 8107602:	07d6      	lsls	r6, r2, #31
 8107604:	d528      	bpl.n	8107658 <__sflush_r+0xb8>
 8107606:	2200      	movs	r2, #0
 8107608:	6062      	str	r2, [r4, #4]
 810760a:	04d9      	lsls	r1, r3, #19
 810760c:	6922      	ldr	r2, [r4, #16]
 810760e:	6022      	str	r2, [r4, #0]
 8107610:	d504      	bpl.n	810761c <__sflush_r+0x7c>
 8107612:	1c42      	adds	r2, r0, #1
 8107614:	d101      	bne.n	810761a <__sflush_r+0x7a>
 8107616:	682b      	ldr	r3, [r5, #0]
 8107618:	b903      	cbnz	r3, 810761c <__sflush_r+0x7c>
 810761a:	6560      	str	r0, [r4, #84]	; 0x54
 810761c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810761e:	602f      	str	r7, [r5, #0]
 8107620:	2900      	cmp	r1, #0
 8107622:	d0ca      	beq.n	81075ba <__sflush_r+0x1a>
 8107624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107628:	4299      	cmp	r1, r3
 810762a:	d002      	beq.n	8107632 <__sflush_r+0x92>
 810762c:	4628      	mov	r0, r5
 810762e:	f000 f9af 	bl	8107990 <_free_r>
 8107632:	2000      	movs	r0, #0
 8107634:	6360      	str	r0, [r4, #52]	; 0x34
 8107636:	e7c1      	b.n	81075bc <__sflush_r+0x1c>
 8107638:	6a21      	ldr	r1, [r4, #32]
 810763a:	2301      	movs	r3, #1
 810763c:	4628      	mov	r0, r5
 810763e:	47b0      	blx	r6
 8107640:	1c41      	adds	r1, r0, #1
 8107642:	d1c7      	bne.n	81075d4 <__sflush_r+0x34>
 8107644:	682b      	ldr	r3, [r5, #0]
 8107646:	2b00      	cmp	r3, #0
 8107648:	d0c4      	beq.n	81075d4 <__sflush_r+0x34>
 810764a:	2b1d      	cmp	r3, #29
 810764c:	d001      	beq.n	8107652 <__sflush_r+0xb2>
 810764e:	2b16      	cmp	r3, #22
 8107650:	d101      	bne.n	8107656 <__sflush_r+0xb6>
 8107652:	602f      	str	r7, [r5, #0]
 8107654:	e7b1      	b.n	81075ba <__sflush_r+0x1a>
 8107656:	89a3      	ldrh	r3, [r4, #12]
 8107658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810765c:	81a3      	strh	r3, [r4, #12]
 810765e:	e7ad      	b.n	81075bc <__sflush_r+0x1c>
 8107660:	690f      	ldr	r7, [r1, #16]
 8107662:	2f00      	cmp	r7, #0
 8107664:	d0a9      	beq.n	81075ba <__sflush_r+0x1a>
 8107666:	0793      	lsls	r3, r2, #30
 8107668:	680e      	ldr	r6, [r1, #0]
 810766a:	bf08      	it	eq
 810766c:	694b      	ldreq	r3, [r1, #20]
 810766e:	600f      	str	r7, [r1, #0]
 8107670:	bf18      	it	ne
 8107672:	2300      	movne	r3, #0
 8107674:	eba6 0807 	sub.w	r8, r6, r7
 8107678:	608b      	str	r3, [r1, #8]
 810767a:	f1b8 0f00 	cmp.w	r8, #0
 810767e:	dd9c      	ble.n	81075ba <__sflush_r+0x1a>
 8107680:	6a21      	ldr	r1, [r4, #32]
 8107682:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8107684:	4643      	mov	r3, r8
 8107686:	463a      	mov	r2, r7
 8107688:	4628      	mov	r0, r5
 810768a:	47b0      	blx	r6
 810768c:	2800      	cmp	r0, #0
 810768e:	dc06      	bgt.n	810769e <__sflush_r+0xfe>
 8107690:	89a3      	ldrh	r3, [r4, #12]
 8107692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8107696:	81a3      	strh	r3, [r4, #12]
 8107698:	f04f 30ff 	mov.w	r0, #4294967295
 810769c:	e78e      	b.n	81075bc <__sflush_r+0x1c>
 810769e:	4407      	add	r7, r0
 81076a0:	eba8 0800 	sub.w	r8, r8, r0
 81076a4:	e7e9      	b.n	810767a <__sflush_r+0xda>
 81076a6:	bf00      	nop
 81076a8:	20400001 	.word	0x20400001

081076ac <_fflush_r>:
 81076ac:	b538      	push	{r3, r4, r5, lr}
 81076ae:	690b      	ldr	r3, [r1, #16]
 81076b0:	4605      	mov	r5, r0
 81076b2:	460c      	mov	r4, r1
 81076b4:	b913      	cbnz	r3, 81076bc <_fflush_r+0x10>
 81076b6:	2500      	movs	r5, #0
 81076b8:	4628      	mov	r0, r5
 81076ba:	bd38      	pop	{r3, r4, r5, pc}
 81076bc:	b118      	cbz	r0, 81076c6 <_fflush_r+0x1a>
 81076be:	6983      	ldr	r3, [r0, #24]
 81076c0:	b90b      	cbnz	r3, 81076c6 <_fflush_r+0x1a>
 81076c2:	f000 f887 	bl	81077d4 <__sinit>
 81076c6:	4b14      	ldr	r3, [pc, #80]	; (8107718 <_fflush_r+0x6c>)
 81076c8:	429c      	cmp	r4, r3
 81076ca:	d11b      	bne.n	8107704 <_fflush_r+0x58>
 81076cc:	686c      	ldr	r4, [r5, #4]
 81076ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81076d2:	2b00      	cmp	r3, #0
 81076d4:	d0ef      	beq.n	81076b6 <_fflush_r+0xa>
 81076d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81076d8:	07d0      	lsls	r0, r2, #31
 81076da:	d404      	bmi.n	81076e6 <_fflush_r+0x3a>
 81076dc:	0599      	lsls	r1, r3, #22
 81076de:	d402      	bmi.n	81076e6 <_fflush_r+0x3a>
 81076e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81076e2:	f000 f93a 	bl	810795a <__retarget_lock_acquire_recursive>
 81076e6:	4628      	mov	r0, r5
 81076e8:	4621      	mov	r1, r4
 81076ea:	f7ff ff59 	bl	81075a0 <__sflush_r>
 81076ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81076f0:	07da      	lsls	r2, r3, #31
 81076f2:	4605      	mov	r5, r0
 81076f4:	d4e0      	bmi.n	81076b8 <_fflush_r+0xc>
 81076f6:	89a3      	ldrh	r3, [r4, #12]
 81076f8:	059b      	lsls	r3, r3, #22
 81076fa:	d4dd      	bmi.n	81076b8 <_fflush_r+0xc>
 81076fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81076fe:	f000 f92d 	bl	810795c <__retarget_lock_release_recursive>
 8107702:	e7d9      	b.n	81076b8 <_fflush_r+0xc>
 8107704:	4b05      	ldr	r3, [pc, #20]	; (810771c <_fflush_r+0x70>)
 8107706:	429c      	cmp	r4, r3
 8107708:	d101      	bne.n	810770e <_fflush_r+0x62>
 810770a:	68ac      	ldr	r4, [r5, #8]
 810770c:	e7df      	b.n	81076ce <_fflush_r+0x22>
 810770e:	4b04      	ldr	r3, [pc, #16]	; (8107720 <_fflush_r+0x74>)
 8107710:	429c      	cmp	r4, r3
 8107712:	bf08      	it	eq
 8107714:	68ec      	ldreq	r4, [r5, #12]
 8107716:	e7da      	b.n	81076ce <_fflush_r+0x22>
 8107718:	0810e160 	.word	0x0810e160
 810771c:	0810e180 	.word	0x0810e180
 8107720:	0810e140 	.word	0x0810e140

08107724 <std>:
 8107724:	2300      	movs	r3, #0
 8107726:	b510      	push	{r4, lr}
 8107728:	4604      	mov	r4, r0
 810772a:	e9c0 3300 	strd	r3, r3, [r0]
 810772e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8107732:	6083      	str	r3, [r0, #8]
 8107734:	8181      	strh	r1, [r0, #12]
 8107736:	6643      	str	r3, [r0, #100]	; 0x64
 8107738:	81c2      	strh	r2, [r0, #14]
 810773a:	6183      	str	r3, [r0, #24]
 810773c:	4619      	mov	r1, r3
 810773e:	2208      	movs	r2, #8
 8107740:	305c      	adds	r0, #92	; 0x5c
 8107742:	f000 f91d 	bl	8107980 <memset>
 8107746:	4b05      	ldr	r3, [pc, #20]	; (810775c <std+0x38>)
 8107748:	6263      	str	r3, [r4, #36]	; 0x24
 810774a:	4b05      	ldr	r3, [pc, #20]	; (8107760 <std+0x3c>)
 810774c:	62a3      	str	r3, [r4, #40]	; 0x28
 810774e:	4b05      	ldr	r3, [pc, #20]	; (8107764 <std+0x40>)
 8107750:	62e3      	str	r3, [r4, #44]	; 0x2c
 8107752:	4b05      	ldr	r3, [pc, #20]	; (8107768 <std+0x44>)
 8107754:	6224      	str	r4, [r4, #32]
 8107756:	6323      	str	r3, [r4, #48]	; 0x30
 8107758:	bd10      	pop	{r4, pc}
 810775a:	bf00      	nop
 810775c:	08108aed 	.word	0x08108aed
 8107760:	08108b0f 	.word	0x08108b0f
 8107764:	08108b47 	.word	0x08108b47
 8107768:	08108b6b 	.word	0x08108b6b

0810776c <_cleanup_r>:
 810776c:	4901      	ldr	r1, [pc, #4]	; (8107774 <_cleanup_r+0x8>)
 810776e:	f000 b8af 	b.w	81078d0 <_fwalk_reent>
 8107772:	bf00      	nop
 8107774:	081076ad 	.word	0x081076ad

08107778 <__sfmoreglue>:
 8107778:	b570      	push	{r4, r5, r6, lr}
 810777a:	1e4a      	subs	r2, r1, #1
 810777c:	2568      	movs	r5, #104	; 0x68
 810777e:	4355      	muls	r5, r2
 8107780:	460e      	mov	r6, r1
 8107782:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8107786:	f000 f953 	bl	8107a30 <_malloc_r>
 810778a:	4604      	mov	r4, r0
 810778c:	b140      	cbz	r0, 81077a0 <__sfmoreglue+0x28>
 810778e:	2100      	movs	r1, #0
 8107790:	e9c0 1600 	strd	r1, r6, [r0]
 8107794:	300c      	adds	r0, #12
 8107796:	60a0      	str	r0, [r4, #8]
 8107798:	f105 0268 	add.w	r2, r5, #104	; 0x68
 810779c:	f000 f8f0 	bl	8107980 <memset>
 81077a0:	4620      	mov	r0, r4
 81077a2:	bd70      	pop	{r4, r5, r6, pc}

081077a4 <__sfp_lock_acquire>:
 81077a4:	4801      	ldr	r0, [pc, #4]	; (81077ac <__sfp_lock_acquire+0x8>)
 81077a6:	f000 b8d8 	b.w	810795a <__retarget_lock_acquire_recursive>
 81077aa:	bf00      	nop
 81077ac:	10000488 	.word	0x10000488

081077b0 <__sfp_lock_release>:
 81077b0:	4801      	ldr	r0, [pc, #4]	; (81077b8 <__sfp_lock_release+0x8>)
 81077b2:	f000 b8d3 	b.w	810795c <__retarget_lock_release_recursive>
 81077b6:	bf00      	nop
 81077b8:	10000488 	.word	0x10000488

081077bc <__sinit_lock_acquire>:
 81077bc:	4801      	ldr	r0, [pc, #4]	; (81077c4 <__sinit_lock_acquire+0x8>)
 81077be:	f000 b8cc 	b.w	810795a <__retarget_lock_acquire_recursive>
 81077c2:	bf00      	nop
 81077c4:	10000483 	.word	0x10000483

081077c8 <__sinit_lock_release>:
 81077c8:	4801      	ldr	r0, [pc, #4]	; (81077d0 <__sinit_lock_release+0x8>)
 81077ca:	f000 b8c7 	b.w	810795c <__retarget_lock_release_recursive>
 81077ce:	bf00      	nop
 81077d0:	10000483 	.word	0x10000483

081077d4 <__sinit>:
 81077d4:	b510      	push	{r4, lr}
 81077d6:	4604      	mov	r4, r0
 81077d8:	f7ff fff0 	bl	81077bc <__sinit_lock_acquire>
 81077dc:	69a3      	ldr	r3, [r4, #24]
 81077de:	b11b      	cbz	r3, 81077e8 <__sinit+0x14>
 81077e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81077e4:	f7ff bff0 	b.w	81077c8 <__sinit_lock_release>
 81077e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 81077ec:	6523      	str	r3, [r4, #80]	; 0x50
 81077ee:	4b13      	ldr	r3, [pc, #76]	; (810783c <__sinit+0x68>)
 81077f0:	4a13      	ldr	r2, [pc, #76]	; (8107840 <__sinit+0x6c>)
 81077f2:	681b      	ldr	r3, [r3, #0]
 81077f4:	62a2      	str	r2, [r4, #40]	; 0x28
 81077f6:	42a3      	cmp	r3, r4
 81077f8:	bf04      	itt	eq
 81077fa:	2301      	moveq	r3, #1
 81077fc:	61a3      	streq	r3, [r4, #24]
 81077fe:	4620      	mov	r0, r4
 8107800:	f000 f820 	bl	8107844 <__sfp>
 8107804:	6060      	str	r0, [r4, #4]
 8107806:	4620      	mov	r0, r4
 8107808:	f000 f81c 	bl	8107844 <__sfp>
 810780c:	60a0      	str	r0, [r4, #8]
 810780e:	4620      	mov	r0, r4
 8107810:	f000 f818 	bl	8107844 <__sfp>
 8107814:	2200      	movs	r2, #0
 8107816:	60e0      	str	r0, [r4, #12]
 8107818:	2104      	movs	r1, #4
 810781a:	6860      	ldr	r0, [r4, #4]
 810781c:	f7ff ff82 	bl	8107724 <std>
 8107820:	68a0      	ldr	r0, [r4, #8]
 8107822:	2201      	movs	r2, #1
 8107824:	2109      	movs	r1, #9
 8107826:	f7ff ff7d 	bl	8107724 <std>
 810782a:	68e0      	ldr	r0, [r4, #12]
 810782c:	2202      	movs	r2, #2
 810782e:	2112      	movs	r1, #18
 8107830:	f7ff ff78 	bl	8107724 <std>
 8107834:	2301      	movs	r3, #1
 8107836:	61a3      	str	r3, [r4, #24]
 8107838:	e7d2      	b.n	81077e0 <__sinit+0xc>
 810783a:	bf00      	nop
 810783c:	0810e1a0 	.word	0x0810e1a0
 8107840:	0810776d 	.word	0x0810776d

08107844 <__sfp>:
 8107844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107846:	4607      	mov	r7, r0
 8107848:	f7ff ffac 	bl	81077a4 <__sfp_lock_acquire>
 810784c:	4b1e      	ldr	r3, [pc, #120]	; (81078c8 <__sfp+0x84>)
 810784e:	681e      	ldr	r6, [r3, #0]
 8107850:	69b3      	ldr	r3, [r6, #24]
 8107852:	b913      	cbnz	r3, 810785a <__sfp+0x16>
 8107854:	4630      	mov	r0, r6
 8107856:	f7ff ffbd 	bl	81077d4 <__sinit>
 810785a:	3648      	adds	r6, #72	; 0x48
 810785c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8107860:	3b01      	subs	r3, #1
 8107862:	d503      	bpl.n	810786c <__sfp+0x28>
 8107864:	6833      	ldr	r3, [r6, #0]
 8107866:	b30b      	cbz	r3, 81078ac <__sfp+0x68>
 8107868:	6836      	ldr	r6, [r6, #0]
 810786a:	e7f7      	b.n	810785c <__sfp+0x18>
 810786c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8107870:	b9d5      	cbnz	r5, 81078a8 <__sfp+0x64>
 8107872:	4b16      	ldr	r3, [pc, #88]	; (81078cc <__sfp+0x88>)
 8107874:	60e3      	str	r3, [r4, #12]
 8107876:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810787a:	6665      	str	r5, [r4, #100]	; 0x64
 810787c:	f000 f86c 	bl	8107958 <__retarget_lock_init_recursive>
 8107880:	f7ff ff96 	bl	81077b0 <__sfp_lock_release>
 8107884:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8107888:	e9c4 5504 	strd	r5, r5, [r4, #16]
 810788c:	6025      	str	r5, [r4, #0]
 810788e:	61a5      	str	r5, [r4, #24]
 8107890:	2208      	movs	r2, #8
 8107892:	4629      	mov	r1, r5
 8107894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8107898:	f000 f872 	bl	8107980 <memset>
 810789c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 81078a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 81078a4:	4620      	mov	r0, r4
 81078a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81078a8:	3468      	adds	r4, #104	; 0x68
 81078aa:	e7d9      	b.n	8107860 <__sfp+0x1c>
 81078ac:	2104      	movs	r1, #4
 81078ae:	4638      	mov	r0, r7
 81078b0:	f7ff ff62 	bl	8107778 <__sfmoreglue>
 81078b4:	4604      	mov	r4, r0
 81078b6:	6030      	str	r0, [r6, #0]
 81078b8:	2800      	cmp	r0, #0
 81078ba:	d1d5      	bne.n	8107868 <__sfp+0x24>
 81078bc:	f7ff ff78 	bl	81077b0 <__sfp_lock_release>
 81078c0:	230c      	movs	r3, #12
 81078c2:	603b      	str	r3, [r7, #0]
 81078c4:	e7ee      	b.n	81078a4 <__sfp+0x60>
 81078c6:	bf00      	nop
 81078c8:	0810e1a0 	.word	0x0810e1a0
 81078cc:	ffff0001 	.word	0xffff0001

081078d0 <_fwalk_reent>:
 81078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81078d4:	4606      	mov	r6, r0
 81078d6:	4688      	mov	r8, r1
 81078d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 81078dc:	2700      	movs	r7, #0
 81078de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81078e2:	f1b9 0901 	subs.w	r9, r9, #1
 81078e6:	d505      	bpl.n	81078f4 <_fwalk_reent+0x24>
 81078e8:	6824      	ldr	r4, [r4, #0]
 81078ea:	2c00      	cmp	r4, #0
 81078ec:	d1f7      	bne.n	81078de <_fwalk_reent+0xe>
 81078ee:	4638      	mov	r0, r7
 81078f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81078f4:	89ab      	ldrh	r3, [r5, #12]
 81078f6:	2b01      	cmp	r3, #1
 81078f8:	d907      	bls.n	810790a <_fwalk_reent+0x3a>
 81078fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 81078fe:	3301      	adds	r3, #1
 8107900:	d003      	beq.n	810790a <_fwalk_reent+0x3a>
 8107902:	4629      	mov	r1, r5
 8107904:	4630      	mov	r0, r6
 8107906:	47c0      	blx	r8
 8107908:	4307      	orrs	r7, r0
 810790a:	3568      	adds	r5, #104	; 0x68
 810790c:	e7e9      	b.n	81078e2 <_fwalk_reent+0x12>
	...

08107910 <__libc_init_array>:
 8107910:	b570      	push	{r4, r5, r6, lr}
 8107912:	4d0d      	ldr	r5, [pc, #52]	; (8107948 <__libc_init_array+0x38>)
 8107914:	4c0d      	ldr	r4, [pc, #52]	; (810794c <__libc_init_array+0x3c>)
 8107916:	1b64      	subs	r4, r4, r5
 8107918:	10a4      	asrs	r4, r4, #2
 810791a:	2600      	movs	r6, #0
 810791c:	42a6      	cmp	r6, r4
 810791e:	d109      	bne.n	8107934 <__libc_init_array+0x24>
 8107920:	4d0b      	ldr	r5, [pc, #44]	; (8107950 <__libc_init_array+0x40>)
 8107922:	4c0c      	ldr	r4, [pc, #48]	; (8107954 <__libc_init_array+0x44>)
 8107924:	f006 fbca 	bl	810e0bc <_init>
 8107928:	1b64      	subs	r4, r4, r5
 810792a:	10a4      	asrs	r4, r4, #2
 810792c:	2600      	movs	r6, #0
 810792e:	42a6      	cmp	r6, r4
 8107930:	d105      	bne.n	810793e <__libc_init_array+0x2e>
 8107932:	bd70      	pop	{r4, r5, r6, pc}
 8107934:	f855 3b04 	ldr.w	r3, [r5], #4
 8107938:	4798      	blx	r3
 810793a:	3601      	adds	r6, #1
 810793c:	e7ee      	b.n	810791c <__libc_init_array+0xc>
 810793e:	f855 3b04 	ldr.w	r3, [r5], #4
 8107942:	4798      	blx	r3
 8107944:	3601      	adds	r6, #1
 8107946:	e7f2      	b.n	810792e <__libc_init_array+0x1e>
 8107948:	0810e818 	.word	0x0810e818
 810794c:	0810e818 	.word	0x0810e818
 8107950:	0810e818 	.word	0x0810e818
 8107954:	0810e81c 	.word	0x0810e81c

08107958 <__retarget_lock_init_recursive>:
 8107958:	4770      	bx	lr

0810795a <__retarget_lock_acquire_recursive>:
 810795a:	4770      	bx	lr

0810795c <__retarget_lock_release_recursive>:
 810795c:	4770      	bx	lr
	...

08107960 <malloc>:
 8107960:	4b02      	ldr	r3, [pc, #8]	; (810796c <malloc+0xc>)
 8107962:	4601      	mov	r1, r0
 8107964:	6818      	ldr	r0, [r3, #0]
 8107966:	f000 b863 	b.w	8107a30 <_malloc_r>
 810796a:	bf00      	nop
 810796c:	10000060 	.word	0x10000060

08107970 <free>:
 8107970:	4b02      	ldr	r3, [pc, #8]	; (810797c <free+0xc>)
 8107972:	4601      	mov	r1, r0
 8107974:	6818      	ldr	r0, [r3, #0]
 8107976:	f000 b80b 	b.w	8107990 <_free_r>
 810797a:	bf00      	nop
 810797c:	10000060 	.word	0x10000060

08107980 <memset>:
 8107980:	4402      	add	r2, r0
 8107982:	4603      	mov	r3, r0
 8107984:	4293      	cmp	r3, r2
 8107986:	d100      	bne.n	810798a <memset+0xa>
 8107988:	4770      	bx	lr
 810798a:	f803 1b01 	strb.w	r1, [r3], #1
 810798e:	e7f9      	b.n	8107984 <memset+0x4>

08107990 <_free_r>:
 8107990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8107992:	2900      	cmp	r1, #0
 8107994:	d048      	beq.n	8107a28 <_free_r+0x98>
 8107996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810799a:	9001      	str	r0, [sp, #4]
 810799c:	2b00      	cmp	r3, #0
 810799e:	f1a1 0404 	sub.w	r4, r1, #4
 81079a2:	bfb8      	it	lt
 81079a4:	18e4      	addlt	r4, r4, r3
 81079a6:	f003 fafd 	bl	810afa4 <__malloc_lock>
 81079aa:	4a20      	ldr	r2, [pc, #128]	; (8107a2c <_free_r+0x9c>)
 81079ac:	9801      	ldr	r0, [sp, #4]
 81079ae:	6813      	ldr	r3, [r2, #0]
 81079b0:	4615      	mov	r5, r2
 81079b2:	b933      	cbnz	r3, 81079c2 <_free_r+0x32>
 81079b4:	6063      	str	r3, [r4, #4]
 81079b6:	6014      	str	r4, [r2, #0]
 81079b8:	b003      	add	sp, #12
 81079ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81079be:	f003 baf7 	b.w	810afb0 <__malloc_unlock>
 81079c2:	42a3      	cmp	r3, r4
 81079c4:	d90b      	bls.n	81079de <_free_r+0x4e>
 81079c6:	6821      	ldr	r1, [r4, #0]
 81079c8:	1862      	adds	r2, r4, r1
 81079ca:	4293      	cmp	r3, r2
 81079cc:	bf04      	itt	eq
 81079ce:	681a      	ldreq	r2, [r3, #0]
 81079d0:	685b      	ldreq	r3, [r3, #4]
 81079d2:	6063      	str	r3, [r4, #4]
 81079d4:	bf04      	itt	eq
 81079d6:	1852      	addeq	r2, r2, r1
 81079d8:	6022      	streq	r2, [r4, #0]
 81079da:	602c      	str	r4, [r5, #0]
 81079dc:	e7ec      	b.n	81079b8 <_free_r+0x28>
 81079de:	461a      	mov	r2, r3
 81079e0:	685b      	ldr	r3, [r3, #4]
 81079e2:	b10b      	cbz	r3, 81079e8 <_free_r+0x58>
 81079e4:	42a3      	cmp	r3, r4
 81079e6:	d9fa      	bls.n	81079de <_free_r+0x4e>
 81079e8:	6811      	ldr	r1, [r2, #0]
 81079ea:	1855      	adds	r5, r2, r1
 81079ec:	42a5      	cmp	r5, r4
 81079ee:	d10b      	bne.n	8107a08 <_free_r+0x78>
 81079f0:	6824      	ldr	r4, [r4, #0]
 81079f2:	4421      	add	r1, r4
 81079f4:	1854      	adds	r4, r2, r1
 81079f6:	42a3      	cmp	r3, r4
 81079f8:	6011      	str	r1, [r2, #0]
 81079fa:	d1dd      	bne.n	81079b8 <_free_r+0x28>
 81079fc:	681c      	ldr	r4, [r3, #0]
 81079fe:	685b      	ldr	r3, [r3, #4]
 8107a00:	6053      	str	r3, [r2, #4]
 8107a02:	4421      	add	r1, r4
 8107a04:	6011      	str	r1, [r2, #0]
 8107a06:	e7d7      	b.n	81079b8 <_free_r+0x28>
 8107a08:	d902      	bls.n	8107a10 <_free_r+0x80>
 8107a0a:	230c      	movs	r3, #12
 8107a0c:	6003      	str	r3, [r0, #0]
 8107a0e:	e7d3      	b.n	81079b8 <_free_r+0x28>
 8107a10:	6825      	ldr	r5, [r4, #0]
 8107a12:	1961      	adds	r1, r4, r5
 8107a14:	428b      	cmp	r3, r1
 8107a16:	bf04      	itt	eq
 8107a18:	6819      	ldreq	r1, [r3, #0]
 8107a1a:	685b      	ldreq	r3, [r3, #4]
 8107a1c:	6063      	str	r3, [r4, #4]
 8107a1e:	bf04      	itt	eq
 8107a20:	1949      	addeq	r1, r1, r5
 8107a22:	6021      	streq	r1, [r4, #0]
 8107a24:	6054      	str	r4, [r2, #4]
 8107a26:	e7c7      	b.n	81079b8 <_free_r+0x28>
 8107a28:	b003      	add	sp, #12
 8107a2a:	bd30      	pop	{r4, r5, pc}
 8107a2c:	10000260 	.word	0x10000260

08107a30 <_malloc_r>:
 8107a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107a32:	1ccd      	adds	r5, r1, #3
 8107a34:	f025 0503 	bic.w	r5, r5, #3
 8107a38:	3508      	adds	r5, #8
 8107a3a:	2d0c      	cmp	r5, #12
 8107a3c:	bf38      	it	cc
 8107a3e:	250c      	movcc	r5, #12
 8107a40:	2d00      	cmp	r5, #0
 8107a42:	4606      	mov	r6, r0
 8107a44:	db01      	blt.n	8107a4a <_malloc_r+0x1a>
 8107a46:	42a9      	cmp	r1, r5
 8107a48:	d903      	bls.n	8107a52 <_malloc_r+0x22>
 8107a4a:	230c      	movs	r3, #12
 8107a4c:	6033      	str	r3, [r6, #0]
 8107a4e:	2000      	movs	r0, #0
 8107a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8107a52:	f003 faa7 	bl	810afa4 <__malloc_lock>
 8107a56:	4921      	ldr	r1, [pc, #132]	; (8107adc <_malloc_r+0xac>)
 8107a58:	680a      	ldr	r2, [r1, #0]
 8107a5a:	4614      	mov	r4, r2
 8107a5c:	b99c      	cbnz	r4, 8107a86 <_malloc_r+0x56>
 8107a5e:	4f20      	ldr	r7, [pc, #128]	; (8107ae0 <_malloc_r+0xb0>)
 8107a60:	683b      	ldr	r3, [r7, #0]
 8107a62:	b923      	cbnz	r3, 8107a6e <_malloc_r+0x3e>
 8107a64:	4621      	mov	r1, r4
 8107a66:	4630      	mov	r0, r6
 8107a68:	f000 ff44 	bl	81088f4 <_sbrk_r>
 8107a6c:	6038      	str	r0, [r7, #0]
 8107a6e:	4629      	mov	r1, r5
 8107a70:	4630      	mov	r0, r6
 8107a72:	f000 ff3f 	bl	81088f4 <_sbrk_r>
 8107a76:	1c43      	adds	r3, r0, #1
 8107a78:	d123      	bne.n	8107ac2 <_malloc_r+0x92>
 8107a7a:	230c      	movs	r3, #12
 8107a7c:	6033      	str	r3, [r6, #0]
 8107a7e:	4630      	mov	r0, r6
 8107a80:	f003 fa96 	bl	810afb0 <__malloc_unlock>
 8107a84:	e7e3      	b.n	8107a4e <_malloc_r+0x1e>
 8107a86:	6823      	ldr	r3, [r4, #0]
 8107a88:	1b5b      	subs	r3, r3, r5
 8107a8a:	d417      	bmi.n	8107abc <_malloc_r+0x8c>
 8107a8c:	2b0b      	cmp	r3, #11
 8107a8e:	d903      	bls.n	8107a98 <_malloc_r+0x68>
 8107a90:	6023      	str	r3, [r4, #0]
 8107a92:	441c      	add	r4, r3
 8107a94:	6025      	str	r5, [r4, #0]
 8107a96:	e004      	b.n	8107aa2 <_malloc_r+0x72>
 8107a98:	6863      	ldr	r3, [r4, #4]
 8107a9a:	42a2      	cmp	r2, r4
 8107a9c:	bf0c      	ite	eq
 8107a9e:	600b      	streq	r3, [r1, #0]
 8107aa0:	6053      	strne	r3, [r2, #4]
 8107aa2:	4630      	mov	r0, r6
 8107aa4:	f003 fa84 	bl	810afb0 <__malloc_unlock>
 8107aa8:	f104 000b 	add.w	r0, r4, #11
 8107aac:	1d23      	adds	r3, r4, #4
 8107aae:	f020 0007 	bic.w	r0, r0, #7
 8107ab2:	1ac2      	subs	r2, r0, r3
 8107ab4:	d0cc      	beq.n	8107a50 <_malloc_r+0x20>
 8107ab6:	1a1b      	subs	r3, r3, r0
 8107ab8:	50a3      	str	r3, [r4, r2]
 8107aba:	e7c9      	b.n	8107a50 <_malloc_r+0x20>
 8107abc:	4622      	mov	r2, r4
 8107abe:	6864      	ldr	r4, [r4, #4]
 8107ac0:	e7cc      	b.n	8107a5c <_malloc_r+0x2c>
 8107ac2:	1cc4      	adds	r4, r0, #3
 8107ac4:	f024 0403 	bic.w	r4, r4, #3
 8107ac8:	42a0      	cmp	r0, r4
 8107aca:	d0e3      	beq.n	8107a94 <_malloc_r+0x64>
 8107acc:	1a21      	subs	r1, r4, r0
 8107ace:	4630      	mov	r0, r6
 8107ad0:	f000 ff10 	bl	81088f4 <_sbrk_r>
 8107ad4:	3001      	adds	r0, #1
 8107ad6:	d1dd      	bne.n	8107a94 <_malloc_r+0x64>
 8107ad8:	e7cf      	b.n	8107a7a <_malloc_r+0x4a>
 8107ada:	bf00      	nop
 8107adc:	10000260 	.word	0x10000260
 8107ae0:	10000264 	.word	0x10000264

08107ae4 <__cvt>:
 8107ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107ae8:	ec55 4b10 	vmov	r4, r5, d0
 8107aec:	2d00      	cmp	r5, #0
 8107aee:	460e      	mov	r6, r1
 8107af0:	4619      	mov	r1, r3
 8107af2:	462b      	mov	r3, r5
 8107af4:	bfbb      	ittet	lt
 8107af6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8107afa:	461d      	movlt	r5, r3
 8107afc:	2300      	movge	r3, #0
 8107afe:	232d      	movlt	r3, #45	; 0x2d
 8107b00:	700b      	strb	r3, [r1, #0]
 8107b02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8107b04:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8107b08:	4691      	mov	r9, r2
 8107b0a:	f023 0820 	bic.w	r8, r3, #32
 8107b0e:	bfbc      	itt	lt
 8107b10:	4622      	movlt	r2, r4
 8107b12:	4614      	movlt	r4, r2
 8107b14:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107b18:	d005      	beq.n	8107b26 <__cvt+0x42>
 8107b1a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8107b1e:	d100      	bne.n	8107b22 <__cvt+0x3e>
 8107b20:	3601      	adds	r6, #1
 8107b22:	2102      	movs	r1, #2
 8107b24:	e000      	b.n	8107b28 <__cvt+0x44>
 8107b26:	2103      	movs	r1, #3
 8107b28:	ab03      	add	r3, sp, #12
 8107b2a:	9301      	str	r3, [sp, #4]
 8107b2c:	ab02      	add	r3, sp, #8
 8107b2e:	9300      	str	r3, [sp, #0]
 8107b30:	ec45 4b10 	vmov	d0, r4, r5
 8107b34:	4653      	mov	r3, sl
 8107b36:	4632      	mov	r2, r6
 8107b38:	f002 f83e 	bl	8109bb8 <_dtoa_r>
 8107b3c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8107b40:	4607      	mov	r7, r0
 8107b42:	d102      	bne.n	8107b4a <__cvt+0x66>
 8107b44:	f019 0f01 	tst.w	r9, #1
 8107b48:	d022      	beq.n	8107b90 <__cvt+0xac>
 8107b4a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107b4e:	eb07 0906 	add.w	r9, r7, r6
 8107b52:	d110      	bne.n	8107b76 <__cvt+0x92>
 8107b54:	783b      	ldrb	r3, [r7, #0]
 8107b56:	2b30      	cmp	r3, #48	; 0x30
 8107b58:	d10a      	bne.n	8107b70 <__cvt+0x8c>
 8107b5a:	2200      	movs	r2, #0
 8107b5c:	2300      	movs	r3, #0
 8107b5e:	4620      	mov	r0, r4
 8107b60:	4629      	mov	r1, r5
 8107b62:	f7f9 f839 	bl	8100bd8 <__aeabi_dcmpeq>
 8107b66:	b918      	cbnz	r0, 8107b70 <__cvt+0x8c>
 8107b68:	f1c6 0601 	rsb	r6, r6, #1
 8107b6c:	f8ca 6000 	str.w	r6, [sl]
 8107b70:	f8da 3000 	ldr.w	r3, [sl]
 8107b74:	4499      	add	r9, r3
 8107b76:	2200      	movs	r2, #0
 8107b78:	2300      	movs	r3, #0
 8107b7a:	4620      	mov	r0, r4
 8107b7c:	4629      	mov	r1, r5
 8107b7e:	f7f9 f82b 	bl	8100bd8 <__aeabi_dcmpeq>
 8107b82:	b108      	cbz	r0, 8107b88 <__cvt+0xa4>
 8107b84:	f8cd 900c 	str.w	r9, [sp, #12]
 8107b88:	2230      	movs	r2, #48	; 0x30
 8107b8a:	9b03      	ldr	r3, [sp, #12]
 8107b8c:	454b      	cmp	r3, r9
 8107b8e:	d307      	bcc.n	8107ba0 <__cvt+0xbc>
 8107b90:	9b03      	ldr	r3, [sp, #12]
 8107b92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107b94:	1bdb      	subs	r3, r3, r7
 8107b96:	4638      	mov	r0, r7
 8107b98:	6013      	str	r3, [r2, #0]
 8107b9a:	b004      	add	sp, #16
 8107b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107ba0:	1c59      	adds	r1, r3, #1
 8107ba2:	9103      	str	r1, [sp, #12]
 8107ba4:	701a      	strb	r2, [r3, #0]
 8107ba6:	e7f0      	b.n	8107b8a <__cvt+0xa6>

08107ba8 <__exponent>:
 8107ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107baa:	4603      	mov	r3, r0
 8107bac:	2900      	cmp	r1, #0
 8107bae:	bfb8      	it	lt
 8107bb0:	4249      	neglt	r1, r1
 8107bb2:	f803 2b02 	strb.w	r2, [r3], #2
 8107bb6:	bfb4      	ite	lt
 8107bb8:	222d      	movlt	r2, #45	; 0x2d
 8107bba:	222b      	movge	r2, #43	; 0x2b
 8107bbc:	2909      	cmp	r1, #9
 8107bbe:	7042      	strb	r2, [r0, #1]
 8107bc0:	dd2a      	ble.n	8107c18 <__exponent+0x70>
 8107bc2:	f10d 0407 	add.w	r4, sp, #7
 8107bc6:	46a4      	mov	ip, r4
 8107bc8:	270a      	movs	r7, #10
 8107bca:	46a6      	mov	lr, r4
 8107bcc:	460a      	mov	r2, r1
 8107bce:	fb91 f6f7 	sdiv	r6, r1, r7
 8107bd2:	fb07 1516 	mls	r5, r7, r6, r1
 8107bd6:	3530      	adds	r5, #48	; 0x30
 8107bd8:	2a63      	cmp	r2, #99	; 0x63
 8107bda:	f104 34ff 	add.w	r4, r4, #4294967295
 8107bde:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8107be2:	4631      	mov	r1, r6
 8107be4:	dcf1      	bgt.n	8107bca <__exponent+0x22>
 8107be6:	3130      	adds	r1, #48	; 0x30
 8107be8:	f1ae 0502 	sub.w	r5, lr, #2
 8107bec:	f804 1c01 	strb.w	r1, [r4, #-1]
 8107bf0:	1c44      	adds	r4, r0, #1
 8107bf2:	4629      	mov	r1, r5
 8107bf4:	4561      	cmp	r1, ip
 8107bf6:	d30a      	bcc.n	8107c0e <__exponent+0x66>
 8107bf8:	f10d 0209 	add.w	r2, sp, #9
 8107bfc:	eba2 020e 	sub.w	r2, r2, lr
 8107c00:	4565      	cmp	r5, ip
 8107c02:	bf88      	it	hi
 8107c04:	2200      	movhi	r2, #0
 8107c06:	4413      	add	r3, r2
 8107c08:	1a18      	subs	r0, r3, r0
 8107c0a:	b003      	add	sp, #12
 8107c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8107c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107c12:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107c16:	e7ed      	b.n	8107bf4 <__exponent+0x4c>
 8107c18:	2330      	movs	r3, #48	; 0x30
 8107c1a:	3130      	adds	r1, #48	; 0x30
 8107c1c:	7083      	strb	r3, [r0, #2]
 8107c1e:	70c1      	strb	r1, [r0, #3]
 8107c20:	1d03      	adds	r3, r0, #4
 8107c22:	e7f1      	b.n	8107c08 <__exponent+0x60>

08107c24 <_printf_float>:
 8107c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107c28:	ed2d 8b02 	vpush	{d8}
 8107c2c:	b08d      	sub	sp, #52	; 0x34
 8107c2e:	460c      	mov	r4, r1
 8107c30:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8107c34:	4616      	mov	r6, r2
 8107c36:	461f      	mov	r7, r3
 8107c38:	4605      	mov	r5, r0
 8107c3a:	f003 f919 	bl	810ae70 <_localeconv_r>
 8107c3e:	f8d0 a000 	ldr.w	sl, [r0]
 8107c42:	4650      	mov	r0, sl
 8107c44:	f7f8 fb4c 	bl	81002e0 <strlen>
 8107c48:	2300      	movs	r3, #0
 8107c4a:	930a      	str	r3, [sp, #40]	; 0x28
 8107c4c:	6823      	ldr	r3, [r4, #0]
 8107c4e:	9305      	str	r3, [sp, #20]
 8107c50:	f8d8 3000 	ldr.w	r3, [r8]
 8107c54:	f894 b018 	ldrb.w	fp, [r4, #24]
 8107c58:	3307      	adds	r3, #7
 8107c5a:	f023 0307 	bic.w	r3, r3, #7
 8107c5e:	f103 0208 	add.w	r2, r3, #8
 8107c62:	f8c8 2000 	str.w	r2, [r8]
 8107c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107c6a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8107c6e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8107c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8107c76:	9307      	str	r3, [sp, #28]
 8107c78:	f8cd 8018 	str.w	r8, [sp, #24]
 8107c7c:	ee08 0a10 	vmov	s16, r0
 8107c80:	4b9f      	ldr	r3, [pc, #636]	; (8107f00 <_printf_float+0x2dc>)
 8107c82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107c86:	f04f 32ff 	mov.w	r2, #4294967295
 8107c8a:	f7f8 ffd7 	bl	8100c3c <__aeabi_dcmpun>
 8107c8e:	bb88      	cbnz	r0, 8107cf4 <_printf_float+0xd0>
 8107c90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107c94:	4b9a      	ldr	r3, [pc, #616]	; (8107f00 <_printf_float+0x2dc>)
 8107c96:	f04f 32ff 	mov.w	r2, #4294967295
 8107c9a:	f7f8 ffb1 	bl	8100c00 <__aeabi_dcmple>
 8107c9e:	bb48      	cbnz	r0, 8107cf4 <_printf_float+0xd0>
 8107ca0:	2200      	movs	r2, #0
 8107ca2:	2300      	movs	r3, #0
 8107ca4:	4640      	mov	r0, r8
 8107ca6:	4649      	mov	r1, r9
 8107ca8:	f7f8 ffa0 	bl	8100bec <__aeabi_dcmplt>
 8107cac:	b110      	cbz	r0, 8107cb4 <_printf_float+0x90>
 8107cae:	232d      	movs	r3, #45	; 0x2d
 8107cb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107cb4:	4b93      	ldr	r3, [pc, #588]	; (8107f04 <_printf_float+0x2e0>)
 8107cb6:	4894      	ldr	r0, [pc, #592]	; (8107f08 <_printf_float+0x2e4>)
 8107cb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8107cbc:	bf94      	ite	ls
 8107cbe:	4698      	movls	r8, r3
 8107cc0:	4680      	movhi	r8, r0
 8107cc2:	2303      	movs	r3, #3
 8107cc4:	6123      	str	r3, [r4, #16]
 8107cc6:	9b05      	ldr	r3, [sp, #20]
 8107cc8:	f023 0204 	bic.w	r2, r3, #4
 8107ccc:	6022      	str	r2, [r4, #0]
 8107cce:	f04f 0900 	mov.w	r9, #0
 8107cd2:	9700      	str	r7, [sp, #0]
 8107cd4:	4633      	mov	r3, r6
 8107cd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8107cd8:	4621      	mov	r1, r4
 8107cda:	4628      	mov	r0, r5
 8107cdc:	f000 f9d8 	bl	8108090 <_printf_common>
 8107ce0:	3001      	adds	r0, #1
 8107ce2:	f040 8090 	bne.w	8107e06 <_printf_float+0x1e2>
 8107ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8107cea:	b00d      	add	sp, #52	; 0x34
 8107cec:	ecbd 8b02 	vpop	{d8}
 8107cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107cf4:	4642      	mov	r2, r8
 8107cf6:	464b      	mov	r3, r9
 8107cf8:	4640      	mov	r0, r8
 8107cfa:	4649      	mov	r1, r9
 8107cfc:	f7f8 ff9e 	bl	8100c3c <__aeabi_dcmpun>
 8107d00:	b140      	cbz	r0, 8107d14 <_printf_float+0xf0>
 8107d02:	464b      	mov	r3, r9
 8107d04:	2b00      	cmp	r3, #0
 8107d06:	bfbc      	itt	lt
 8107d08:	232d      	movlt	r3, #45	; 0x2d
 8107d0a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8107d0e:	487f      	ldr	r0, [pc, #508]	; (8107f0c <_printf_float+0x2e8>)
 8107d10:	4b7f      	ldr	r3, [pc, #508]	; (8107f10 <_printf_float+0x2ec>)
 8107d12:	e7d1      	b.n	8107cb8 <_printf_float+0x94>
 8107d14:	6863      	ldr	r3, [r4, #4]
 8107d16:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107d1a:	9206      	str	r2, [sp, #24]
 8107d1c:	1c5a      	adds	r2, r3, #1
 8107d1e:	d13f      	bne.n	8107da0 <_printf_float+0x17c>
 8107d20:	2306      	movs	r3, #6
 8107d22:	6063      	str	r3, [r4, #4]
 8107d24:	9b05      	ldr	r3, [sp, #20]
 8107d26:	6861      	ldr	r1, [r4, #4]
 8107d28:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8107d2c:	2300      	movs	r3, #0
 8107d2e:	9303      	str	r3, [sp, #12]
 8107d30:	ab0a      	add	r3, sp, #40	; 0x28
 8107d32:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107d36:	ab09      	add	r3, sp, #36	; 0x24
 8107d38:	ec49 8b10 	vmov	d0, r8, r9
 8107d3c:	9300      	str	r3, [sp, #0]
 8107d3e:	6022      	str	r2, [r4, #0]
 8107d40:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107d44:	4628      	mov	r0, r5
 8107d46:	f7ff fecd 	bl	8107ae4 <__cvt>
 8107d4a:	9b06      	ldr	r3, [sp, #24]
 8107d4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107d4e:	2b47      	cmp	r3, #71	; 0x47
 8107d50:	4680      	mov	r8, r0
 8107d52:	d108      	bne.n	8107d66 <_printf_float+0x142>
 8107d54:	1cc8      	adds	r0, r1, #3
 8107d56:	db02      	blt.n	8107d5e <_printf_float+0x13a>
 8107d58:	6863      	ldr	r3, [r4, #4]
 8107d5a:	4299      	cmp	r1, r3
 8107d5c:	dd41      	ble.n	8107de2 <_printf_float+0x1be>
 8107d5e:	f1ab 0b02 	sub.w	fp, fp, #2
 8107d62:	fa5f fb8b 	uxtb.w	fp, fp
 8107d66:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107d6a:	d820      	bhi.n	8107dae <_printf_float+0x18a>
 8107d6c:	3901      	subs	r1, #1
 8107d6e:	465a      	mov	r2, fp
 8107d70:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107d74:	9109      	str	r1, [sp, #36]	; 0x24
 8107d76:	f7ff ff17 	bl	8107ba8 <__exponent>
 8107d7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107d7c:	1813      	adds	r3, r2, r0
 8107d7e:	2a01      	cmp	r2, #1
 8107d80:	4681      	mov	r9, r0
 8107d82:	6123      	str	r3, [r4, #16]
 8107d84:	dc02      	bgt.n	8107d8c <_printf_float+0x168>
 8107d86:	6822      	ldr	r2, [r4, #0]
 8107d88:	07d2      	lsls	r2, r2, #31
 8107d8a:	d501      	bpl.n	8107d90 <_printf_float+0x16c>
 8107d8c:	3301      	adds	r3, #1
 8107d8e:	6123      	str	r3, [r4, #16]
 8107d90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107d94:	2b00      	cmp	r3, #0
 8107d96:	d09c      	beq.n	8107cd2 <_printf_float+0xae>
 8107d98:	232d      	movs	r3, #45	; 0x2d
 8107d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107d9e:	e798      	b.n	8107cd2 <_printf_float+0xae>
 8107da0:	9a06      	ldr	r2, [sp, #24]
 8107da2:	2a47      	cmp	r2, #71	; 0x47
 8107da4:	d1be      	bne.n	8107d24 <_printf_float+0x100>
 8107da6:	2b00      	cmp	r3, #0
 8107da8:	d1bc      	bne.n	8107d24 <_printf_float+0x100>
 8107daa:	2301      	movs	r3, #1
 8107dac:	e7b9      	b.n	8107d22 <_printf_float+0xfe>
 8107dae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8107db2:	d118      	bne.n	8107de6 <_printf_float+0x1c2>
 8107db4:	2900      	cmp	r1, #0
 8107db6:	6863      	ldr	r3, [r4, #4]
 8107db8:	dd0b      	ble.n	8107dd2 <_printf_float+0x1ae>
 8107dba:	6121      	str	r1, [r4, #16]
 8107dbc:	b913      	cbnz	r3, 8107dc4 <_printf_float+0x1a0>
 8107dbe:	6822      	ldr	r2, [r4, #0]
 8107dc0:	07d0      	lsls	r0, r2, #31
 8107dc2:	d502      	bpl.n	8107dca <_printf_float+0x1a6>
 8107dc4:	3301      	adds	r3, #1
 8107dc6:	440b      	add	r3, r1
 8107dc8:	6123      	str	r3, [r4, #16]
 8107dca:	65a1      	str	r1, [r4, #88]	; 0x58
 8107dcc:	f04f 0900 	mov.w	r9, #0
 8107dd0:	e7de      	b.n	8107d90 <_printf_float+0x16c>
 8107dd2:	b913      	cbnz	r3, 8107dda <_printf_float+0x1b6>
 8107dd4:	6822      	ldr	r2, [r4, #0]
 8107dd6:	07d2      	lsls	r2, r2, #31
 8107dd8:	d501      	bpl.n	8107dde <_printf_float+0x1ba>
 8107dda:	3302      	adds	r3, #2
 8107ddc:	e7f4      	b.n	8107dc8 <_printf_float+0x1a4>
 8107dde:	2301      	movs	r3, #1
 8107de0:	e7f2      	b.n	8107dc8 <_printf_float+0x1a4>
 8107de2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8107de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107de8:	4299      	cmp	r1, r3
 8107dea:	db05      	blt.n	8107df8 <_printf_float+0x1d4>
 8107dec:	6823      	ldr	r3, [r4, #0]
 8107dee:	6121      	str	r1, [r4, #16]
 8107df0:	07d8      	lsls	r0, r3, #31
 8107df2:	d5ea      	bpl.n	8107dca <_printf_float+0x1a6>
 8107df4:	1c4b      	adds	r3, r1, #1
 8107df6:	e7e7      	b.n	8107dc8 <_printf_float+0x1a4>
 8107df8:	2900      	cmp	r1, #0
 8107dfa:	bfd4      	ite	le
 8107dfc:	f1c1 0202 	rsble	r2, r1, #2
 8107e00:	2201      	movgt	r2, #1
 8107e02:	4413      	add	r3, r2
 8107e04:	e7e0      	b.n	8107dc8 <_printf_float+0x1a4>
 8107e06:	6823      	ldr	r3, [r4, #0]
 8107e08:	055a      	lsls	r2, r3, #21
 8107e0a:	d407      	bmi.n	8107e1c <_printf_float+0x1f8>
 8107e0c:	6923      	ldr	r3, [r4, #16]
 8107e0e:	4642      	mov	r2, r8
 8107e10:	4631      	mov	r1, r6
 8107e12:	4628      	mov	r0, r5
 8107e14:	47b8      	blx	r7
 8107e16:	3001      	adds	r0, #1
 8107e18:	d12c      	bne.n	8107e74 <_printf_float+0x250>
 8107e1a:	e764      	b.n	8107ce6 <_printf_float+0xc2>
 8107e1c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107e20:	f240 80e0 	bls.w	8107fe4 <_printf_float+0x3c0>
 8107e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107e28:	2200      	movs	r2, #0
 8107e2a:	2300      	movs	r3, #0
 8107e2c:	f7f8 fed4 	bl	8100bd8 <__aeabi_dcmpeq>
 8107e30:	2800      	cmp	r0, #0
 8107e32:	d034      	beq.n	8107e9e <_printf_float+0x27a>
 8107e34:	4a37      	ldr	r2, [pc, #220]	; (8107f14 <_printf_float+0x2f0>)
 8107e36:	2301      	movs	r3, #1
 8107e38:	4631      	mov	r1, r6
 8107e3a:	4628      	mov	r0, r5
 8107e3c:	47b8      	blx	r7
 8107e3e:	3001      	adds	r0, #1
 8107e40:	f43f af51 	beq.w	8107ce6 <_printf_float+0xc2>
 8107e44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107e48:	429a      	cmp	r2, r3
 8107e4a:	db02      	blt.n	8107e52 <_printf_float+0x22e>
 8107e4c:	6823      	ldr	r3, [r4, #0]
 8107e4e:	07d8      	lsls	r0, r3, #31
 8107e50:	d510      	bpl.n	8107e74 <_printf_float+0x250>
 8107e52:	ee18 3a10 	vmov	r3, s16
 8107e56:	4652      	mov	r2, sl
 8107e58:	4631      	mov	r1, r6
 8107e5a:	4628      	mov	r0, r5
 8107e5c:	47b8      	blx	r7
 8107e5e:	3001      	adds	r0, #1
 8107e60:	f43f af41 	beq.w	8107ce6 <_printf_float+0xc2>
 8107e64:	f04f 0800 	mov.w	r8, #0
 8107e68:	f104 091a 	add.w	r9, r4, #26
 8107e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107e6e:	3b01      	subs	r3, #1
 8107e70:	4543      	cmp	r3, r8
 8107e72:	dc09      	bgt.n	8107e88 <_printf_float+0x264>
 8107e74:	6823      	ldr	r3, [r4, #0]
 8107e76:	079b      	lsls	r3, r3, #30
 8107e78:	f100 8105 	bmi.w	8108086 <_printf_float+0x462>
 8107e7c:	68e0      	ldr	r0, [r4, #12]
 8107e7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8107e80:	4298      	cmp	r0, r3
 8107e82:	bfb8      	it	lt
 8107e84:	4618      	movlt	r0, r3
 8107e86:	e730      	b.n	8107cea <_printf_float+0xc6>
 8107e88:	2301      	movs	r3, #1
 8107e8a:	464a      	mov	r2, r9
 8107e8c:	4631      	mov	r1, r6
 8107e8e:	4628      	mov	r0, r5
 8107e90:	47b8      	blx	r7
 8107e92:	3001      	adds	r0, #1
 8107e94:	f43f af27 	beq.w	8107ce6 <_printf_float+0xc2>
 8107e98:	f108 0801 	add.w	r8, r8, #1
 8107e9c:	e7e6      	b.n	8107e6c <_printf_float+0x248>
 8107e9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107ea0:	2b00      	cmp	r3, #0
 8107ea2:	dc39      	bgt.n	8107f18 <_printf_float+0x2f4>
 8107ea4:	4a1b      	ldr	r2, [pc, #108]	; (8107f14 <_printf_float+0x2f0>)
 8107ea6:	2301      	movs	r3, #1
 8107ea8:	4631      	mov	r1, r6
 8107eaa:	4628      	mov	r0, r5
 8107eac:	47b8      	blx	r7
 8107eae:	3001      	adds	r0, #1
 8107eb0:	f43f af19 	beq.w	8107ce6 <_printf_float+0xc2>
 8107eb4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107eb8:	4313      	orrs	r3, r2
 8107eba:	d102      	bne.n	8107ec2 <_printf_float+0x29e>
 8107ebc:	6823      	ldr	r3, [r4, #0]
 8107ebe:	07d9      	lsls	r1, r3, #31
 8107ec0:	d5d8      	bpl.n	8107e74 <_printf_float+0x250>
 8107ec2:	ee18 3a10 	vmov	r3, s16
 8107ec6:	4652      	mov	r2, sl
 8107ec8:	4631      	mov	r1, r6
 8107eca:	4628      	mov	r0, r5
 8107ecc:	47b8      	blx	r7
 8107ece:	3001      	adds	r0, #1
 8107ed0:	f43f af09 	beq.w	8107ce6 <_printf_float+0xc2>
 8107ed4:	f04f 0900 	mov.w	r9, #0
 8107ed8:	f104 0a1a 	add.w	sl, r4, #26
 8107edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8107ede:	425b      	negs	r3, r3
 8107ee0:	454b      	cmp	r3, r9
 8107ee2:	dc01      	bgt.n	8107ee8 <_printf_float+0x2c4>
 8107ee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107ee6:	e792      	b.n	8107e0e <_printf_float+0x1ea>
 8107ee8:	2301      	movs	r3, #1
 8107eea:	4652      	mov	r2, sl
 8107eec:	4631      	mov	r1, r6
 8107eee:	4628      	mov	r0, r5
 8107ef0:	47b8      	blx	r7
 8107ef2:	3001      	adds	r0, #1
 8107ef4:	f43f aef7 	beq.w	8107ce6 <_printf_float+0xc2>
 8107ef8:	f109 0901 	add.w	r9, r9, #1
 8107efc:	e7ee      	b.n	8107edc <_printf_float+0x2b8>
 8107efe:	bf00      	nop
 8107f00:	7fefffff 	.word	0x7fefffff
 8107f04:	0810e1a4 	.word	0x0810e1a4
 8107f08:	0810e1a8 	.word	0x0810e1a8
 8107f0c:	0810e1b0 	.word	0x0810e1b0
 8107f10:	0810e1ac 	.word	0x0810e1ac
 8107f14:	0810e1b4 	.word	0x0810e1b4
 8107f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107f1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107f1c:	429a      	cmp	r2, r3
 8107f1e:	bfa8      	it	ge
 8107f20:	461a      	movge	r2, r3
 8107f22:	2a00      	cmp	r2, #0
 8107f24:	4691      	mov	r9, r2
 8107f26:	dc37      	bgt.n	8107f98 <_printf_float+0x374>
 8107f28:	f04f 0b00 	mov.w	fp, #0
 8107f2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107f30:	f104 021a 	add.w	r2, r4, #26
 8107f34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107f36:	9305      	str	r3, [sp, #20]
 8107f38:	eba3 0309 	sub.w	r3, r3, r9
 8107f3c:	455b      	cmp	r3, fp
 8107f3e:	dc33      	bgt.n	8107fa8 <_printf_float+0x384>
 8107f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107f44:	429a      	cmp	r2, r3
 8107f46:	db3b      	blt.n	8107fc0 <_printf_float+0x39c>
 8107f48:	6823      	ldr	r3, [r4, #0]
 8107f4a:	07da      	lsls	r2, r3, #31
 8107f4c:	d438      	bmi.n	8107fc0 <_printf_float+0x39c>
 8107f4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107f50:	9b05      	ldr	r3, [sp, #20]
 8107f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107f54:	1ad3      	subs	r3, r2, r3
 8107f56:	eba2 0901 	sub.w	r9, r2, r1
 8107f5a:	4599      	cmp	r9, r3
 8107f5c:	bfa8      	it	ge
 8107f5e:	4699      	movge	r9, r3
 8107f60:	f1b9 0f00 	cmp.w	r9, #0
 8107f64:	dc35      	bgt.n	8107fd2 <_printf_float+0x3ae>
 8107f66:	f04f 0800 	mov.w	r8, #0
 8107f6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107f6e:	f104 0a1a 	add.w	sl, r4, #26
 8107f72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107f76:	1a9b      	subs	r3, r3, r2
 8107f78:	eba3 0309 	sub.w	r3, r3, r9
 8107f7c:	4543      	cmp	r3, r8
 8107f7e:	f77f af79 	ble.w	8107e74 <_printf_float+0x250>
 8107f82:	2301      	movs	r3, #1
 8107f84:	4652      	mov	r2, sl
 8107f86:	4631      	mov	r1, r6
 8107f88:	4628      	mov	r0, r5
 8107f8a:	47b8      	blx	r7
 8107f8c:	3001      	adds	r0, #1
 8107f8e:	f43f aeaa 	beq.w	8107ce6 <_printf_float+0xc2>
 8107f92:	f108 0801 	add.w	r8, r8, #1
 8107f96:	e7ec      	b.n	8107f72 <_printf_float+0x34e>
 8107f98:	4613      	mov	r3, r2
 8107f9a:	4631      	mov	r1, r6
 8107f9c:	4642      	mov	r2, r8
 8107f9e:	4628      	mov	r0, r5
 8107fa0:	47b8      	blx	r7
 8107fa2:	3001      	adds	r0, #1
 8107fa4:	d1c0      	bne.n	8107f28 <_printf_float+0x304>
 8107fa6:	e69e      	b.n	8107ce6 <_printf_float+0xc2>
 8107fa8:	2301      	movs	r3, #1
 8107faa:	4631      	mov	r1, r6
 8107fac:	4628      	mov	r0, r5
 8107fae:	9205      	str	r2, [sp, #20]
 8107fb0:	47b8      	blx	r7
 8107fb2:	3001      	adds	r0, #1
 8107fb4:	f43f ae97 	beq.w	8107ce6 <_printf_float+0xc2>
 8107fb8:	9a05      	ldr	r2, [sp, #20]
 8107fba:	f10b 0b01 	add.w	fp, fp, #1
 8107fbe:	e7b9      	b.n	8107f34 <_printf_float+0x310>
 8107fc0:	ee18 3a10 	vmov	r3, s16
 8107fc4:	4652      	mov	r2, sl
 8107fc6:	4631      	mov	r1, r6
 8107fc8:	4628      	mov	r0, r5
 8107fca:	47b8      	blx	r7
 8107fcc:	3001      	adds	r0, #1
 8107fce:	d1be      	bne.n	8107f4e <_printf_float+0x32a>
 8107fd0:	e689      	b.n	8107ce6 <_printf_float+0xc2>
 8107fd2:	9a05      	ldr	r2, [sp, #20]
 8107fd4:	464b      	mov	r3, r9
 8107fd6:	4442      	add	r2, r8
 8107fd8:	4631      	mov	r1, r6
 8107fda:	4628      	mov	r0, r5
 8107fdc:	47b8      	blx	r7
 8107fde:	3001      	adds	r0, #1
 8107fe0:	d1c1      	bne.n	8107f66 <_printf_float+0x342>
 8107fe2:	e680      	b.n	8107ce6 <_printf_float+0xc2>
 8107fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107fe6:	2a01      	cmp	r2, #1
 8107fe8:	dc01      	bgt.n	8107fee <_printf_float+0x3ca>
 8107fea:	07db      	lsls	r3, r3, #31
 8107fec:	d538      	bpl.n	8108060 <_printf_float+0x43c>
 8107fee:	2301      	movs	r3, #1
 8107ff0:	4642      	mov	r2, r8
 8107ff2:	4631      	mov	r1, r6
 8107ff4:	4628      	mov	r0, r5
 8107ff6:	47b8      	blx	r7
 8107ff8:	3001      	adds	r0, #1
 8107ffa:	f43f ae74 	beq.w	8107ce6 <_printf_float+0xc2>
 8107ffe:	ee18 3a10 	vmov	r3, s16
 8108002:	4652      	mov	r2, sl
 8108004:	4631      	mov	r1, r6
 8108006:	4628      	mov	r0, r5
 8108008:	47b8      	blx	r7
 810800a:	3001      	adds	r0, #1
 810800c:	f43f ae6b 	beq.w	8107ce6 <_printf_float+0xc2>
 8108010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8108014:	2200      	movs	r2, #0
 8108016:	2300      	movs	r3, #0
 8108018:	f7f8 fdde 	bl	8100bd8 <__aeabi_dcmpeq>
 810801c:	b9d8      	cbnz	r0, 8108056 <_printf_float+0x432>
 810801e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108020:	f108 0201 	add.w	r2, r8, #1
 8108024:	3b01      	subs	r3, #1
 8108026:	4631      	mov	r1, r6
 8108028:	4628      	mov	r0, r5
 810802a:	47b8      	blx	r7
 810802c:	3001      	adds	r0, #1
 810802e:	d10e      	bne.n	810804e <_printf_float+0x42a>
 8108030:	e659      	b.n	8107ce6 <_printf_float+0xc2>
 8108032:	2301      	movs	r3, #1
 8108034:	4652      	mov	r2, sl
 8108036:	4631      	mov	r1, r6
 8108038:	4628      	mov	r0, r5
 810803a:	47b8      	blx	r7
 810803c:	3001      	adds	r0, #1
 810803e:	f43f ae52 	beq.w	8107ce6 <_printf_float+0xc2>
 8108042:	f108 0801 	add.w	r8, r8, #1
 8108046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8108048:	3b01      	subs	r3, #1
 810804a:	4543      	cmp	r3, r8
 810804c:	dcf1      	bgt.n	8108032 <_printf_float+0x40e>
 810804e:	464b      	mov	r3, r9
 8108050:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8108054:	e6dc      	b.n	8107e10 <_printf_float+0x1ec>
 8108056:	f04f 0800 	mov.w	r8, #0
 810805a:	f104 0a1a 	add.w	sl, r4, #26
 810805e:	e7f2      	b.n	8108046 <_printf_float+0x422>
 8108060:	2301      	movs	r3, #1
 8108062:	4642      	mov	r2, r8
 8108064:	e7df      	b.n	8108026 <_printf_float+0x402>
 8108066:	2301      	movs	r3, #1
 8108068:	464a      	mov	r2, r9
 810806a:	4631      	mov	r1, r6
 810806c:	4628      	mov	r0, r5
 810806e:	47b8      	blx	r7
 8108070:	3001      	adds	r0, #1
 8108072:	f43f ae38 	beq.w	8107ce6 <_printf_float+0xc2>
 8108076:	f108 0801 	add.w	r8, r8, #1
 810807a:	68e3      	ldr	r3, [r4, #12]
 810807c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810807e:	1a5b      	subs	r3, r3, r1
 8108080:	4543      	cmp	r3, r8
 8108082:	dcf0      	bgt.n	8108066 <_printf_float+0x442>
 8108084:	e6fa      	b.n	8107e7c <_printf_float+0x258>
 8108086:	f04f 0800 	mov.w	r8, #0
 810808a:	f104 0919 	add.w	r9, r4, #25
 810808e:	e7f4      	b.n	810807a <_printf_float+0x456>

08108090 <_printf_common>:
 8108090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108094:	4616      	mov	r6, r2
 8108096:	4699      	mov	r9, r3
 8108098:	688a      	ldr	r2, [r1, #8]
 810809a:	690b      	ldr	r3, [r1, #16]
 810809c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81080a0:	4293      	cmp	r3, r2
 81080a2:	bfb8      	it	lt
 81080a4:	4613      	movlt	r3, r2
 81080a6:	6033      	str	r3, [r6, #0]
 81080a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 81080ac:	4607      	mov	r7, r0
 81080ae:	460c      	mov	r4, r1
 81080b0:	b10a      	cbz	r2, 81080b6 <_printf_common+0x26>
 81080b2:	3301      	adds	r3, #1
 81080b4:	6033      	str	r3, [r6, #0]
 81080b6:	6823      	ldr	r3, [r4, #0]
 81080b8:	0699      	lsls	r1, r3, #26
 81080ba:	bf42      	ittt	mi
 81080bc:	6833      	ldrmi	r3, [r6, #0]
 81080be:	3302      	addmi	r3, #2
 81080c0:	6033      	strmi	r3, [r6, #0]
 81080c2:	6825      	ldr	r5, [r4, #0]
 81080c4:	f015 0506 	ands.w	r5, r5, #6
 81080c8:	d106      	bne.n	81080d8 <_printf_common+0x48>
 81080ca:	f104 0a19 	add.w	sl, r4, #25
 81080ce:	68e3      	ldr	r3, [r4, #12]
 81080d0:	6832      	ldr	r2, [r6, #0]
 81080d2:	1a9b      	subs	r3, r3, r2
 81080d4:	42ab      	cmp	r3, r5
 81080d6:	dc26      	bgt.n	8108126 <_printf_common+0x96>
 81080d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 81080dc:	1e13      	subs	r3, r2, #0
 81080de:	6822      	ldr	r2, [r4, #0]
 81080e0:	bf18      	it	ne
 81080e2:	2301      	movne	r3, #1
 81080e4:	0692      	lsls	r2, r2, #26
 81080e6:	d42b      	bmi.n	8108140 <_printf_common+0xb0>
 81080e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 81080ec:	4649      	mov	r1, r9
 81080ee:	4638      	mov	r0, r7
 81080f0:	47c0      	blx	r8
 81080f2:	3001      	adds	r0, #1
 81080f4:	d01e      	beq.n	8108134 <_printf_common+0xa4>
 81080f6:	6823      	ldr	r3, [r4, #0]
 81080f8:	68e5      	ldr	r5, [r4, #12]
 81080fa:	6832      	ldr	r2, [r6, #0]
 81080fc:	f003 0306 	and.w	r3, r3, #6
 8108100:	2b04      	cmp	r3, #4
 8108102:	bf08      	it	eq
 8108104:	1aad      	subeq	r5, r5, r2
 8108106:	68a3      	ldr	r3, [r4, #8]
 8108108:	6922      	ldr	r2, [r4, #16]
 810810a:	bf0c      	ite	eq
 810810c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8108110:	2500      	movne	r5, #0
 8108112:	4293      	cmp	r3, r2
 8108114:	bfc4      	itt	gt
 8108116:	1a9b      	subgt	r3, r3, r2
 8108118:	18ed      	addgt	r5, r5, r3
 810811a:	2600      	movs	r6, #0
 810811c:	341a      	adds	r4, #26
 810811e:	42b5      	cmp	r5, r6
 8108120:	d11a      	bne.n	8108158 <_printf_common+0xc8>
 8108122:	2000      	movs	r0, #0
 8108124:	e008      	b.n	8108138 <_printf_common+0xa8>
 8108126:	2301      	movs	r3, #1
 8108128:	4652      	mov	r2, sl
 810812a:	4649      	mov	r1, r9
 810812c:	4638      	mov	r0, r7
 810812e:	47c0      	blx	r8
 8108130:	3001      	adds	r0, #1
 8108132:	d103      	bne.n	810813c <_printf_common+0xac>
 8108134:	f04f 30ff 	mov.w	r0, #4294967295
 8108138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810813c:	3501      	adds	r5, #1
 810813e:	e7c6      	b.n	81080ce <_printf_common+0x3e>
 8108140:	18e1      	adds	r1, r4, r3
 8108142:	1c5a      	adds	r2, r3, #1
 8108144:	2030      	movs	r0, #48	; 0x30
 8108146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810814a:	4422      	add	r2, r4
 810814c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8108150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8108154:	3302      	adds	r3, #2
 8108156:	e7c7      	b.n	81080e8 <_printf_common+0x58>
 8108158:	2301      	movs	r3, #1
 810815a:	4622      	mov	r2, r4
 810815c:	4649      	mov	r1, r9
 810815e:	4638      	mov	r0, r7
 8108160:	47c0      	blx	r8
 8108162:	3001      	adds	r0, #1
 8108164:	d0e6      	beq.n	8108134 <_printf_common+0xa4>
 8108166:	3601      	adds	r6, #1
 8108168:	e7d9      	b.n	810811e <_printf_common+0x8e>
	...

0810816c <_printf_i>:
 810816c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8108170:	460c      	mov	r4, r1
 8108172:	4691      	mov	r9, r2
 8108174:	7e27      	ldrb	r7, [r4, #24]
 8108176:	990c      	ldr	r1, [sp, #48]	; 0x30
 8108178:	2f78      	cmp	r7, #120	; 0x78
 810817a:	4680      	mov	r8, r0
 810817c:	469a      	mov	sl, r3
 810817e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8108182:	d807      	bhi.n	8108194 <_printf_i+0x28>
 8108184:	2f62      	cmp	r7, #98	; 0x62
 8108186:	d80a      	bhi.n	810819e <_printf_i+0x32>
 8108188:	2f00      	cmp	r7, #0
 810818a:	f000 80d8 	beq.w	810833e <_printf_i+0x1d2>
 810818e:	2f58      	cmp	r7, #88	; 0x58
 8108190:	f000 80a3 	beq.w	81082da <_printf_i+0x16e>
 8108194:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8108198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810819c:	e03a      	b.n	8108214 <_printf_i+0xa8>
 810819e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81081a2:	2b15      	cmp	r3, #21
 81081a4:	d8f6      	bhi.n	8108194 <_printf_i+0x28>
 81081a6:	a001      	add	r0, pc, #4	; (adr r0, 81081ac <_printf_i+0x40>)
 81081a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 81081ac:	08108205 	.word	0x08108205
 81081b0:	08108219 	.word	0x08108219
 81081b4:	08108195 	.word	0x08108195
 81081b8:	08108195 	.word	0x08108195
 81081bc:	08108195 	.word	0x08108195
 81081c0:	08108195 	.word	0x08108195
 81081c4:	08108219 	.word	0x08108219
 81081c8:	08108195 	.word	0x08108195
 81081cc:	08108195 	.word	0x08108195
 81081d0:	08108195 	.word	0x08108195
 81081d4:	08108195 	.word	0x08108195
 81081d8:	08108325 	.word	0x08108325
 81081dc:	08108249 	.word	0x08108249
 81081e0:	08108307 	.word	0x08108307
 81081e4:	08108195 	.word	0x08108195
 81081e8:	08108195 	.word	0x08108195
 81081ec:	08108347 	.word	0x08108347
 81081f0:	08108195 	.word	0x08108195
 81081f4:	08108249 	.word	0x08108249
 81081f8:	08108195 	.word	0x08108195
 81081fc:	08108195 	.word	0x08108195
 8108200:	0810830f 	.word	0x0810830f
 8108204:	680b      	ldr	r3, [r1, #0]
 8108206:	1d1a      	adds	r2, r3, #4
 8108208:	681b      	ldr	r3, [r3, #0]
 810820a:	600a      	str	r2, [r1, #0]
 810820c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8108210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8108214:	2301      	movs	r3, #1
 8108216:	e0a3      	b.n	8108360 <_printf_i+0x1f4>
 8108218:	6825      	ldr	r5, [r4, #0]
 810821a:	6808      	ldr	r0, [r1, #0]
 810821c:	062e      	lsls	r6, r5, #24
 810821e:	f100 0304 	add.w	r3, r0, #4
 8108222:	d50a      	bpl.n	810823a <_printf_i+0xce>
 8108224:	6805      	ldr	r5, [r0, #0]
 8108226:	600b      	str	r3, [r1, #0]
 8108228:	2d00      	cmp	r5, #0
 810822a:	da03      	bge.n	8108234 <_printf_i+0xc8>
 810822c:	232d      	movs	r3, #45	; 0x2d
 810822e:	426d      	negs	r5, r5
 8108230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108234:	485e      	ldr	r0, [pc, #376]	; (81083b0 <_printf_i+0x244>)
 8108236:	230a      	movs	r3, #10
 8108238:	e019      	b.n	810826e <_printf_i+0x102>
 810823a:	f015 0f40 	tst.w	r5, #64	; 0x40
 810823e:	6805      	ldr	r5, [r0, #0]
 8108240:	600b      	str	r3, [r1, #0]
 8108242:	bf18      	it	ne
 8108244:	b22d      	sxthne	r5, r5
 8108246:	e7ef      	b.n	8108228 <_printf_i+0xbc>
 8108248:	680b      	ldr	r3, [r1, #0]
 810824a:	6825      	ldr	r5, [r4, #0]
 810824c:	1d18      	adds	r0, r3, #4
 810824e:	6008      	str	r0, [r1, #0]
 8108250:	0628      	lsls	r0, r5, #24
 8108252:	d501      	bpl.n	8108258 <_printf_i+0xec>
 8108254:	681d      	ldr	r5, [r3, #0]
 8108256:	e002      	b.n	810825e <_printf_i+0xf2>
 8108258:	0669      	lsls	r1, r5, #25
 810825a:	d5fb      	bpl.n	8108254 <_printf_i+0xe8>
 810825c:	881d      	ldrh	r5, [r3, #0]
 810825e:	4854      	ldr	r0, [pc, #336]	; (81083b0 <_printf_i+0x244>)
 8108260:	2f6f      	cmp	r7, #111	; 0x6f
 8108262:	bf0c      	ite	eq
 8108264:	2308      	moveq	r3, #8
 8108266:	230a      	movne	r3, #10
 8108268:	2100      	movs	r1, #0
 810826a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810826e:	6866      	ldr	r6, [r4, #4]
 8108270:	60a6      	str	r6, [r4, #8]
 8108272:	2e00      	cmp	r6, #0
 8108274:	bfa2      	ittt	ge
 8108276:	6821      	ldrge	r1, [r4, #0]
 8108278:	f021 0104 	bicge.w	r1, r1, #4
 810827c:	6021      	strge	r1, [r4, #0]
 810827e:	b90d      	cbnz	r5, 8108284 <_printf_i+0x118>
 8108280:	2e00      	cmp	r6, #0
 8108282:	d04d      	beq.n	8108320 <_printf_i+0x1b4>
 8108284:	4616      	mov	r6, r2
 8108286:	fbb5 f1f3 	udiv	r1, r5, r3
 810828a:	fb03 5711 	mls	r7, r3, r1, r5
 810828e:	5dc7      	ldrb	r7, [r0, r7]
 8108290:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8108294:	462f      	mov	r7, r5
 8108296:	42bb      	cmp	r3, r7
 8108298:	460d      	mov	r5, r1
 810829a:	d9f4      	bls.n	8108286 <_printf_i+0x11a>
 810829c:	2b08      	cmp	r3, #8
 810829e:	d10b      	bne.n	81082b8 <_printf_i+0x14c>
 81082a0:	6823      	ldr	r3, [r4, #0]
 81082a2:	07df      	lsls	r7, r3, #31
 81082a4:	d508      	bpl.n	81082b8 <_printf_i+0x14c>
 81082a6:	6923      	ldr	r3, [r4, #16]
 81082a8:	6861      	ldr	r1, [r4, #4]
 81082aa:	4299      	cmp	r1, r3
 81082ac:	bfde      	ittt	le
 81082ae:	2330      	movle	r3, #48	; 0x30
 81082b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 81082b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 81082b8:	1b92      	subs	r2, r2, r6
 81082ba:	6122      	str	r2, [r4, #16]
 81082bc:	f8cd a000 	str.w	sl, [sp]
 81082c0:	464b      	mov	r3, r9
 81082c2:	aa03      	add	r2, sp, #12
 81082c4:	4621      	mov	r1, r4
 81082c6:	4640      	mov	r0, r8
 81082c8:	f7ff fee2 	bl	8108090 <_printf_common>
 81082cc:	3001      	adds	r0, #1
 81082ce:	d14c      	bne.n	810836a <_printf_i+0x1fe>
 81082d0:	f04f 30ff 	mov.w	r0, #4294967295
 81082d4:	b004      	add	sp, #16
 81082d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81082da:	4835      	ldr	r0, [pc, #212]	; (81083b0 <_printf_i+0x244>)
 81082dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 81082e0:	6823      	ldr	r3, [r4, #0]
 81082e2:	680e      	ldr	r6, [r1, #0]
 81082e4:	061f      	lsls	r7, r3, #24
 81082e6:	f856 5b04 	ldr.w	r5, [r6], #4
 81082ea:	600e      	str	r6, [r1, #0]
 81082ec:	d514      	bpl.n	8108318 <_printf_i+0x1ac>
 81082ee:	07d9      	lsls	r1, r3, #31
 81082f0:	bf44      	itt	mi
 81082f2:	f043 0320 	orrmi.w	r3, r3, #32
 81082f6:	6023      	strmi	r3, [r4, #0]
 81082f8:	b91d      	cbnz	r5, 8108302 <_printf_i+0x196>
 81082fa:	6823      	ldr	r3, [r4, #0]
 81082fc:	f023 0320 	bic.w	r3, r3, #32
 8108300:	6023      	str	r3, [r4, #0]
 8108302:	2310      	movs	r3, #16
 8108304:	e7b0      	b.n	8108268 <_printf_i+0xfc>
 8108306:	6823      	ldr	r3, [r4, #0]
 8108308:	f043 0320 	orr.w	r3, r3, #32
 810830c:	6023      	str	r3, [r4, #0]
 810830e:	2378      	movs	r3, #120	; 0x78
 8108310:	4828      	ldr	r0, [pc, #160]	; (81083b4 <_printf_i+0x248>)
 8108312:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8108316:	e7e3      	b.n	81082e0 <_printf_i+0x174>
 8108318:	065e      	lsls	r6, r3, #25
 810831a:	bf48      	it	mi
 810831c:	b2ad      	uxthmi	r5, r5
 810831e:	e7e6      	b.n	81082ee <_printf_i+0x182>
 8108320:	4616      	mov	r6, r2
 8108322:	e7bb      	b.n	810829c <_printf_i+0x130>
 8108324:	680b      	ldr	r3, [r1, #0]
 8108326:	6826      	ldr	r6, [r4, #0]
 8108328:	6960      	ldr	r0, [r4, #20]
 810832a:	1d1d      	adds	r5, r3, #4
 810832c:	600d      	str	r5, [r1, #0]
 810832e:	0635      	lsls	r5, r6, #24
 8108330:	681b      	ldr	r3, [r3, #0]
 8108332:	d501      	bpl.n	8108338 <_printf_i+0x1cc>
 8108334:	6018      	str	r0, [r3, #0]
 8108336:	e002      	b.n	810833e <_printf_i+0x1d2>
 8108338:	0671      	lsls	r1, r6, #25
 810833a:	d5fb      	bpl.n	8108334 <_printf_i+0x1c8>
 810833c:	8018      	strh	r0, [r3, #0]
 810833e:	2300      	movs	r3, #0
 8108340:	6123      	str	r3, [r4, #16]
 8108342:	4616      	mov	r6, r2
 8108344:	e7ba      	b.n	81082bc <_printf_i+0x150>
 8108346:	680b      	ldr	r3, [r1, #0]
 8108348:	1d1a      	adds	r2, r3, #4
 810834a:	600a      	str	r2, [r1, #0]
 810834c:	681e      	ldr	r6, [r3, #0]
 810834e:	6862      	ldr	r2, [r4, #4]
 8108350:	2100      	movs	r1, #0
 8108352:	4630      	mov	r0, r6
 8108354:	f7f7 ffcc 	bl	81002f0 <memchr>
 8108358:	b108      	cbz	r0, 810835e <_printf_i+0x1f2>
 810835a:	1b80      	subs	r0, r0, r6
 810835c:	6060      	str	r0, [r4, #4]
 810835e:	6863      	ldr	r3, [r4, #4]
 8108360:	6123      	str	r3, [r4, #16]
 8108362:	2300      	movs	r3, #0
 8108364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8108368:	e7a8      	b.n	81082bc <_printf_i+0x150>
 810836a:	6923      	ldr	r3, [r4, #16]
 810836c:	4632      	mov	r2, r6
 810836e:	4649      	mov	r1, r9
 8108370:	4640      	mov	r0, r8
 8108372:	47d0      	blx	sl
 8108374:	3001      	adds	r0, #1
 8108376:	d0ab      	beq.n	81082d0 <_printf_i+0x164>
 8108378:	6823      	ldr	r3, [r4, #0]
 810837a:	079b      	lsls	r3, r3, #30
 810837c:	d413      	bmi.n	81083a6 <_printf_i+0x23a>
 810837e:	68e0      	ldr	r0, [r4, #12]
 8108380:	9b03      	ldr	r3, [sp, #12]
 8108382:	4298      	cmp	r0, r3
 8108384:	bfb8      	it	lt
 8108386:	4618      	movlt	r0, r3
 8108388:	e7a4      	b.n	81082d4 <_printf_i+0x168>
 810838a:	2301      	movs	r3, #1
 810838c:	4632      	mov	r2, r6
 810838e:	4649      	mov	r1, r9
 8108390:	4640      	mov	r0, r8
 8108392:	47d0      	blx	sl
 8108394:	3001      	adds	r0, #1
 8108396:	d09b      	beq.n	81082d0 <_printf_i+0x164>
 8108398:	3501      	adds	r5, #1
 810839a:	68e3      	ldr	r3, [r4, #12]
 810839c:	9903      	ldr	r1, [sp, #12]
 810839e:	1a5b      	subs	r3, r3, r1
 81083a0:	42ab      	cmp	r3, r5
 81083a2:	dcf2      	bgt.n	810838a <_printf_i+0x21e>
 81083a4:	e7eb      	b.n	810837e <_printf_i+0x212>
 81083a6:	2500      	movs	r5, #0
 81083a8:	f104 0619 	add.w	r6, r4, #25
 81083ac:	e7f5      	b.n	810839a <_printf_i+0x22e>
 81083ae:	bf00      	nop
 81083b0:	0810e1b6 	.word	0x0810e1b6
 81083b4:	0810e1c7 	.word	0x0810e1c7

081083b8 <_scanf_float>:
 81083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81083bc:	b087      	sub	sp, #28
 81083be:	4617      	mov	r7, r2
 81083c0:	9303      	str	r3, [sp, #12]
 81083c2:	688b      	ldr	r3, [r1, #8]
 81083c4:	1e5a      	subs	r2, r3, #1
 81083c6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 81083ca:	bf83      	ittte	hi
 81083cc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 81083d0:	195b      	addhi	r3, r3, r5
 81083d2:	9302      	strhi	r3, [sp, #8]
 81083d4:	2300      	movls	r3, #0
 81083d6:	bf86      	itte	hi
 81083d8:	f240 135d 	movwhi	r3, #349	; 0x15d
 81083dc:	608b      	strhi	r3, [r1, #8]
 81083de:	9302      	strls	r3, [sp, #8]
 81083e0:	680b      	ldr	r3, [r1, #0]
 81083e2:	468b      	mov	fp, r1
 81083e4:	2500      	movs	r5, #0
 81083e6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 81083ea:	f84b 3b1c 	str.w	r3, [fp], #28
 81083ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81083f2:	4680      	mov	r8, r0
 81083f4:	460c      	mov	r4, r1
 81083f6:	465e      	mov	r6, fp
 81083f8:	46aa      	mov	sl, r5
 81083fa:	46a9      	mov	r9, r5
 81083fc:	9501      	str	r5, [sp, #4]
 81083fe:	68a2      	ldr	r2, [r4, #8]
 8108400:	b152      	cbz	r2, 8108418 <_scanf_float+0x60>
 8108402:	683b      	ldr	r3, [r7, #0]
 8108404:	781b      	ldrb	r3, [r3, #0]
 8108406:	2b4e      	cmp	r3, #78	; 0x4e
 8108408:	d864      	bhi.n	81084d4 <_scanf_float+0x11c>
 810840a:	2b40      	cmp	r3, #64	; 0x40
 810840c:	d83c      	bhi.n	8108488 <_scanf_float+0xd0>
 810840e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8108412:	b2c8      	uxtb	r0, r1
 8108414:	280e      	cmp	r0, #14
 8108416:	d93a      	bls.n	810848e <_scanf_float+0xd6>
 8108418:	f1b9 0f00 	cmp.w	r9, #0
 810841c:	d003      	beq.n	8108426 <_scanf_float+0x6e>
 810841e:	6823      	ldr	r3, [r4, #0]
 8108420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8108424:	6023      	str	r3, [r4, #0]
 8108426:	f10a 3aff 	add.w	sl, sl, #4294967295
 810842a:	f1ba 0f01 	cmp.w	sl, #1
 810842e:	f200 8113 	bhi.w	8108658 <_scanf_float+0x2a0>
 8108432:	455e      	cmp	r6, fp
 8108434:	f200 8105 	bhi.w	8108642 <_scanf_float+0x28a>
 8108438:	2501      	movs	r5, #1
 810843a:	4628      	mov	r0, r5
 810843c:	b007      	add	sp, #28
 810843e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108442:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8108446:	2a0d      	cmp	r2, #13
 8108448:	d8e6      	bhi.n	8108418 <_scanf_float+0x60>
 810844a:	a101      	add	r1, pc, #4	; (adr r1, 8108450 <_scanf_float+0x98>)
 810844c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8108450:	0810858f 	.word	0x0810858f
 8108454:	08108419 	.word	0x08108419
 8108458:	08108419 	.word	0x08108419
 810845c:	08108419 	.word	0x08108419
 8108460:	081085ef 	.word	0x081085ef
 8108464:	081085c7 	.word	0x081085c7
 8108468:	08108419 	.word	0x08108419
 810846c:	08108419 	.word	0x08108419
 8108470:	0810859d 	.word	0x0810859d
 8108474:	08108419 	.word	0x08108419
 8108478:	08108419 	.word	0x08108419
 810847c:	08108419 	.word	0x08108419
 8108480:	08108419 	.word	0x08108419
 8108484:	08108555 	.word	0x08108555
 8108488:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810848c:	e7db      	b.n	8108446 <_scanf_float+0x8e>
 810848e:	290e      	cmp	r1, #14
 8108490:	d8c2      	bhi.n	8108418 <_scanf_float+0x60>
 8108492:	a001      	add	r0, pc, #4	; (adr r0, 8108498 <_scanf_float+0xe0>)
 8108494:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8108498:	08108547 	.word	0x08108547
 810849c:	08108419 	.word	0x08108419
 81084a0:	08108547 	.word	0x08108547
 81084a4:	081085db 	.word	0x081085db
 81084a8:	08108419 	.word	0x08108419
 81084ac:	081084f5 	.word	0x081084f5
 81084b0:	08108531 	.word	0x08108531
 81084b4:	08108531 	.word	0x08108531
 81084b8:	08108531 	.word	0x08108531
 81084bc:	08108531 	.word	0x08108531
 81084c0:	08108531 	.word	0x08108531
 81084c4:	08108531 	.word	0x08108531
 81084c8:	08108531 	.word	0x08108531
 81084cc:	08108531 	.word	0x08108531
 81084d0:	08108531 	.word	0x08108531
 81084d4:	2b6e      	cmp	r3, #110	; 0x6e
 81084d6:	d809      	bhi.n	81084ec <_scanf_float+0x134>
 81084d8:	2b60      	cmp	r3, #96	; 0x60
 81084da:	d8b2      	bhi.n	8108442 <_scanf_float+0x8a>
 81084dc:	2b54      	cmp	r3, #84	; 0x54
 81084de:	d077      	beq.n	81085d0 <_scanf_float+0x218>
 81084e0:	2b59      	cmp	r3, #89	; 0x59
 81084e2:	d199      	bne.n	8108418 <_scanf_float+0x60>
 81084e4:	2d07      	cmp	r5, #7
 81084e6:	d197      	bne.n	8108418 <_scanf_float+0x60>
 81084e8:	2508      	movs	r5, #8
 81084ea:	e029      	b.n	8108540 <_scanf_float+0x188>
 81084ec:	2b74      	cmp	r3, #116	; 0x74
 81084ee:	d06f      	beq.n	81085d0 <_scanf_float+0x218>
 81084f0:	2b79      	cmp	r3, #121	; 0x79
 81084f2:	e7f6      	b.n	81084e2 <_scanf_float+0x12a>
 81084f4:	6821      	ldr	r1, [r4, #0]
 81084f6:	05c8      	lsls	r0, r1, #23
 81084f8:	d51a      	bpl.n	8108530 <_scanf_float+0x178>
 81084fa:	9b02      	ldr	r3, [sp, #8]
 81084fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8108500:	6021      	str	r1, [r4, #0]
 8108502:	f109 0901 	add.w	r9, r9, #1
 8108506:	b11b      	cbz	r3, 8108510 <_scanf_float+0x158>
 8108508:	3b01      	subs	r3, #1
 810850a:	3201      	adds	r2, #1
 810850c:	9302      	str	r3, [sp, #8]
 810850e:	60a2      	str	r2, [r4, #8]
 8108510:	68a3      	ldr	r3, [r4, #8]
 8108512:	3b01      	subs	r3, #1
 8108514:	60a3      	str	r3, [r4, #8]
 8108516:	6923      	ldr	r3, [r4, #16]
 8108518:	3301      	adds	r3, #1
 810851a:	6123      	str	r3, [r4, #16]
 810851c:	687b      	ldr	r3, [r7, #4]
 810851e:	3b01      	subs	r3, #1
 8108520:	2b00      	cmp	r3, #0
 8108522:	607b      	str	r3, [r7, #4]
 8108524:	f340 8084 	ble.w	8108630 <_scanf_float+0x278>
 8108528:	683b      	ldr	r3, [r7, #0]
 810852a:	3301      	adds	r3, #1
 810852c:	603b      	str	r3, [r7, #0]
 810852e:	e766      	b.n	81083fe <_scanf_float+0x46>
 8108530:	eb1a 0f05 	cmn.w	sl, r5
 8108534:	f47f af70 	bne.w	8108418 <_scanf_float+0x60>
 8108538:	6822      	ldr	r2, [r4, #0]
 810853a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810853e:	6022      	str	r2, [r4, #0]
 8108540:	f806 3b01 	strb.w	r3, [r6], #1
 8108544:	e7e4      	b.n	8108510 <_scanf_float+0x158>
 8108546:	6822      	ldr	r2, [r4, #0]
 8108548:	0610      	lsls	r0, r2, #24
 810854a:	f57f af65 	bpl.w	8108418 <_scanf_float+0x60>
 810854e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8108552:	e7f4      	b.n	810853e <_scanf_float+0x186>
 8108554:	f1ba 0f00 	cmp.w	sl, #0
 8108558:	d10e      	bne.n	8108578 <_scanf_float+0x1c0>
 810855a:	f1b9 0f00 	cmp.w	r9, #0
 810855e:	d10e      	bne.n	810857e <_scanf_float+0x1c6>
 8108560:	6822      	ldr	r2, [r4, #0]
 8108562:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108566:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810856a:	d108      	bne.n	810857e <_scanf_float+0x1c6>
 810856c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108570:	6022      	str	r2, [r4, #0]
 8108572:	f04f 0a01 	mov.w	sl, #1
 8108576:	e7e3      	b.n	8108540 <_scanf_float+0x188>
 8108578:	f1ba 0f02 	cmp.w	sl, #2
 810857c:	d055      	beq.n	810862a <_scanf_float+0x272>
 810857e:	2d01      	cmp	r5, #1
 8108580:	d002      	beq.n	8108588 <_scanf_float+0x1d0>
 8108582:	2d04      	cmp	r5, #4
 8108584:	f47f af48 	bne.w	8108418 <_scanf_float+0x60>
 8108588:	3501      	adds	r5, #1
 810858a:	b2ed      	uxtb	r5, r5
 810858c:	e7d8      	b.n	8108540 <_scanf_float+0x188>
 810858e:	f1ba 0f01 	cmp.w	sl, #1
 8108592:	f47f af41 	bne.w	8108418 <_scanf_float+0x60>
 8108596:	f04f 0a02 	mov.w	sl, #2
 810859a:	e7d1      	b.n	8108540 <_scanf_float+0x188>
 810859c:	b97d      	cbnz	r5, 81085be <_scanf_float+0x206>
 810859e:	f1b9 0f00 	cmp.w	r9, #0
 81085a2:	f47f af3c 	bne.w	810841e <_scanf_float+0x66>
 81085a6:	6822      	ldr	r2, [r4, #0]
 81085a8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81085ac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81085b0:	f47f af39 	bne.w	8108426 <_scanf_float+0x6e>
 81085b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81085b8:	6022      	str	r2, [r4, #0]
 81085ba:	2501      	movs	r5, #1
 81085bc:	e7c0      	b.n	8108540 <_scanf_float+0x188>
 81085be:	2d03      	cmp	r5, #3
 81085c0:	d0e2      	beq.n	8108588 <_scanf_float+0x1d0>
 81085c2:	2d05      	cmp	r5, #5
 81085c4:	e7de      	b.n	8108584 <_scanf_float+0x1cc>
 81085c6:	2d02      	cmp	r5, #2
 81085c8:	f47f af26 	bne.w	8108418 <_scanf_float+0x60>
 81085cc:	2503      	movs	r5, #3
 81085ce:	e7b7      	b.n	8108540 <_scanf_float+0x188>
 81085d0:	2d06      	cmp	r5, #6
 81085d2:	f47f af21 	bne.w	8108418 <_scanf_float+0x60>
 81085d6:	2507      	movs	r5, #7
 81085d8:	e7b2      	b.n	8108540 <_scanf_float+0x188>
 81085da:	6822      	ldr	r2, [r4, #0]
 81085dc:	0591      	lsls	r1, r2, #22
 81085de:	f57f af1b 	bpl.w	8108418 <_scanf_float+0x60>
 81085e2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81085e6:	6022      	str	r2, [r4, #0]
 81085e8:	f8cd 9004 	str.w	r9, [sp, #4]
 81085ec:	e7a8      	b.n	8108540 <_scanf_float+0x188>
 81085ee:	6822      	ldr	r2, [r4, #0]
 81085f0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81085f4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81085f8:	d006      	beq.n	8108608 <_scanf_float+0x250>
 81085fa:	0550      	lsls	r0, r2, #21
 81085fc:	f57f af0c 	bpl.w	8108418 <_scanf_float+0x60>
 8108600:	f1b9 0f00 	cmp.w	r9, #0
 8108604:	f43f af0f 	beq.w	8108426 <_scanf_float+0x6e>
 8108608:	0591      	lsls	r1, r2, #22
 810860a:	bf58      	it	pl
 810860c:	9901      	ldrpl	r1, [sp, #4]
 810860e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8108612:	bf58      	it	pl
 8108614:	eba9 0101 	subpl.w	r1, r9, r1
 8108618:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810861c:	bf58      	it	pl
 810861e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8108622:	6022      	str	r2, [r4, #0]
 8108624:	f04f 0900 	mov.w	r9, #0
 8108628:	e78a      	b.n	8108540 <_scanf_float+0x188>
 810862a:	f04f 0a03 	mov.w	sl, #3
 810862e:	e787      	b.n	8108540 <_scanf_float+0x188>
 8108630:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8108634:	4639      	mov	r1, r7
 8108636:	4640      	mov	r0, r8
 8108638:	4798      	blx	r3
 810863a:	2800      	cmp	r0, #0
 810863c:	f43f aedf 	beq.w	81083fe <_scanf_float+0x46>
 8108640:	e6ea      	b.n	8108418 <_scanf_float+0x60>
 8108642:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108646:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810864a:	463a      	mov	r2, r7
 810864c:	4640      	mov	r0, r8
 810864e:	4798      	blx	r3
 8108650:	6923      	ldr	r3, [r4, #16]
 8108652:	3b01      	subs	r3, #1
 8108654:	6123      	str	r3, [r4, #16]
 8108656:	e6ec      	b.n	8108432 <_scanf_float+0x7a>
 8108658:	1e6b      	subs	r3, r5, #1
 810865a:	2b06      	cmp	r3, #6
 810865c:	d825      	bhi.n	81086aa <_scanf_float+0x2f2>
 810865e:	2d02      	cmp	r5, #2
 8108660:	d836      	bhi.n	81086d0 <_scanf_float+0x318>
 8108662:	455e      	cmp	r6, fp
 8108664:	f67f aee8 	bls.w	8108438 <_scanf_float+0x80>
 8108668:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810866c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108670:	463a      	mov	r2, r7
 8108672:	4640      	mov	r0, r8
 8108674:	4798      	blx	r3
 8108676:	6923      	ldr	r3, [r4, #16]
 8108678:	3b01      	subs	r3, #1
 810867a:	6123      	str	r3, [r4, #16]
 810867c:	e7f1      	b.n	8108662 <_scanf_float+0x2aa>
 810867e:	9802      	ldr	r0, [sp, #8]
 8108680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108684:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8108688:	9002      	str	r0, [sp, #8]
 810868a:	463a      	mov	r2, r7
 810868c:	4640      	mov	r0, r8
 810868e:	4798      	blx	r3
 8108690:	6923      	ldr	r3, [r4, #16]
 8108692:	3b01      	subs	r3, #1
 8108694:	6123      	str	r3, [r4, #16]
 8108696:	f10a 3aff 	add.w	sl, sl, #4294967295
 810869a:	fa5f fa8a 	uxtb.w	sl, sl
 810869e:	f1ba 0f02 	cmp.w	sl, #2
 81086a2:	d1ec      	bne.n	810867e <_scanf_float+0x2c6>
 81086a4:	3d03      	subs	r5, #3
 81086a6:	b2ed      	uxtb	r5, r5
 81086a8:	1b76      	subs	r6, r6, r5
 81086aa:	6823      	ldr	r3, [r4, #0]
 81086ac:	05da      	lsls	r2, r3, #23
 81086ae:	d52f      	bpl.n	8108710 <_scanf_float+0x358>
 81086b0:	055b      	lsls	r3, r3, #21
 81086b2:	d510      	bpl.n	81086d6 <_scanf_float+0x31e>
 81086b4:	455e      	cmp	r6, fp
 81086b6:	f67f aebf 	bls.w	8108438 <_scanf_float+0x80>
 81086ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81086be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81086c2:	463a      	mov	r2, r7
 81086c4:	4640      	mov	r0, r8
 81086c6:	4798      	blx	r3
 81086c8:	6923      	ldr	r3, [r4, #16]
 81086ca:	3b01      	subs	r3, #1
 81086cc:	6123      	str	r3, [r4, #16]
 81086ce:	e7f1      	b.n	81086b4 <_scanf_float+0x2fc>
 81086d0:	46aa      	mov	sl, r5
 81086d2:	9602      	str	r6, [sp, #8]
 81086d4:	e7df      	b.n	8108696 <_scanf_float+0x2de>
 81086d6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81086da:	6923      	ldr	r3, [r4, #16]
 81086dc:	2965      	cmp	r1, #101	; 0x65
 81086de:	f103 33ff 	add.w	r3, r3, #4294967295
 81086e2:	f106 35ff 	add.w	r5, r6, #4294967295
 81086e6:	6123      	str	r3, [r4, #16]
 81086e8:	d00c      	beq.n	8108704 <_scanf_float+0x34c>
 81086ea:	2945      	cmp	r1, #69	; 0x45
 81086ec:	d00a      	beq.n	8108704 <_scanf_float+0x34c>
 81086ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81086f2:	463a      	mov	r2, r7
 81086f4:	4640      	mov	r0, r8
 81086f6:	4798      	blx	r3
 81086f8:	6923      	ldr	r3, [r4, #16]
 81086fa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81086fe:	3b01      	subs	r3, #1
 8108700:	1eb5      	subs	r5, r6, #2
 8108702:	6123      	str	r3, [r4, #16]
 8108704:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108708:	463a      	mov	r2, r7
 810870a:	4640      	mov	r0, r8
 810870c:	4798      	blx	r3
 810870e:	462e      	mov	r6, r5
 8108710:	6825      	ldr	r5, [r4, #0]
 8108712:	f015 0510 	ands.w	r5, r5, #16
 8108716:	d158      	bne.n	81087ca <_scanf_float+0x412>
 8108718:	7035      	strb	r5, [r6, #0]
 810871a:	6823      	ldr	r3, [r4, #0]
 810871c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8108720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108724:	d11c      	bne.n	8108760 <_scanf_float+0x3a8>
 8108726:	9b01      	ldr	r3, [sp, #4]
 8108728:	454b      	cmp	r3, r9
 810872a:	eba3 0209 	sub.w	r2, r3, r9
 810872e:	d124      	bne.n	810877a <_scanf_float+0x3c2>
 8108730:	2200      	movs	r2, #0
 8108732:	4659      	mov	r1, fp
 8108734:	4640      	mov	r0, r8
 8108736:	f001 f845 	bl	81097c4 <_strtod_r>
 810873a:	9b03      	ldr	r3, [sp, #12]
 810873c:	6821      	ldr	r1, [r4, #0]
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	f011 0f02 	tst.w	r1, #2
 8108744:	ec57 6b10 	vmov	r6, r7, d0
 8108748:	f103 0204 	add.w	r2, r3, #4
 810874c:	d020      	beq.n	8108790 <_scanf_float+0x3d8>
 810874e:	9903      	ldr	r1, [sp, #12]
 8108750:	600a      	str	r2, [r1, #0]
 8108752:	681b      	ldr	r3, [r3, #0]
 8108754:	e9c3 6700 	strd	r6, r7, [r3]
 8108758:	68e3      	ldr	r3, [r4, #12]
 810875a:	3301      	adds	r3, #1
 810875c:	60e3      	str	r3, [r4, #12]
 810875e:	e66c      	b.n	810843a <_scanf_float+0x82>
 8108760:	9b04      	ldr	r3, [sp, #16]
 8108762:	2b00      	cmp	r3, #0
 8108764:	d0e4      	beq.n	8108730 <_scanf_float+0x378>
 8108766:	9905      	ldr	r1, [sp, #20]
 8108768:	230a      	movs	r3, #10
 810876a:	462a      	mov	r2, r5
 810876c:	3101      	adds	r1, #1
 810876e:	4640      	mov	r0, r8
 8108770:	f001 f8b2 	bl	81098d8 <_strtol_r>
 8108774:	9b04      	ldr	r3, [sp, #16]
 8108776:	9e05      	ldr	r6, [sp, #20]
 8108778:	1ac2      	subs	r2, r0, r3
 810877a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810877e:	429e      	cmp	r6, r3
 8108780:	bf28      	it	cs
 8108782:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8108786:	4912      	ldr	r1, [pc, #72]	; (81087d0 <_scanf_float+0x418>)
 8108788:	4630      	mov	r0, r6
 810878a:	f000 f98f 	bl	8108aac <siprintf>
 810878e:	e7cf      	b.n	8108730 <_scanf_float+0x378>
 8108790:	f011 0f04 	tst.w	r1, #4
 8108794:	9903      	ldr	r1, [sp, #12]
 8108796:	600a      	str	r2, [r1, #0]
 8108798:	d1db      	bne.n	8108752 <_scanf_float+0x39a>
 810879a:	f8d3 8000 	ldr.w	r8, [r3]
 810879e:	ee10 2a10 	vmov	r2, s0
 81087a2:	ee10 0a10 	vmov	r0, s0
 81087a6:	463b      	mov	r3, r7
 81087a8:	4639      	mov	r1, r7
 81087aa:	f7f8 fa47 	bl	8100c3c <__aeabi_dcmpun>
 81087ae:	b128      	cbz	r0, 81087bc <_scanf_float+0x404>
 81087b0:	4808      	ldr	r0, [pc, #32]	; (81087d4 <_scanf_float+0x41c>)
 81087b2:	f000 f975 	bl	8108aa0 <nanf>
 81087b6:	ed88 0a00 	vstr	s0, [r8]
 81087ba:	e7cd      	b.n	8108758 <_scanf_float+0x3a0>
 81087bc:	4630      	mov	r0, r6
 81087be:	4639      	mov	r1, r7
 81087c0:	f7f8 fa9a 	bl	8100cf8 <__aeabi_d2f>
 81087c4:	f8c8 0000 	str.w	r0, [r8]
 81087c8:	e7c6      	b.n	8108758 <_scanf_float+0x3a0>
 81087ca:	2500      	movs	r5, #0
 81087cc:	e635      	b.n	810843a <_scanf_float+0x82>
 81087ce:	bf00      	nop
 81087d0:	0810e1d8 	.word	0x0810e1d8
 81087d4:	0810e5f0 	.word	0x0810e5f0

081087d8 <iprintf>:
 81087d8:	b40f      	push	{r0, r1, r2, r3}
 81087da:	4b0a      	ldr	r3, [pc, #40]	; (8108804 <iprintf+0x2c>)
 81087dc:	b513      	push	{r0, r1, r4, lr}
 81087de:	681c      	ldr	r4, [r3, #0]
 81087e0:	b124      	cbz	r4, 81087ec <iprintf+0x14>
 81087e2:	69a3      	ldr	r3, [r4, #24]
 81087e4:	b913      	cbnz	r3, 81087ec <iprintf+0x14>
 81087e6:	4620      	mov	r0, r4
 81087e8:	f7fe fff4 	bl	81077d4 <__sinit>
 81087ec:	ab05      	add	r3, sp, #20
 81087ee:	9a04      	ldr	r2, [sp, #16]
 81087f0:	68a1      	ldr	r1, [r4, #8]
 81087f2:	9301      	str	r3, [sp, #4]
 81087f4:	4620      	mov	r0, r4
 81087f6:	f003 fa31 	bl	810bc5c <_vfiprintf_r>
 81087fa:	b002      	add	sp, #8
 81087fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8108800:	b004      	add	sp, #16
 8108802:	4770      	bx	lr
 8108804:	10000060 	.word	0x10000060

08108808 <_puts_r>:
 8108808:	b570      	push	{r4, r5, r6, lr}
 810880a:	460e      	mov	r6, r1
 810880c:	4605      	mov	r5, r0
 810880e:	b118      	cbz	r0, 8108818 <_puts_r+0x10>
 8108810:	6983      	ldr	r3, [r0, #24]
 8108812:	b90b      	cbnz	r3, 8108818 <_puts_r+0x10>
 8108814:	f7fe ffde 	bl	81077d4 <__sinit>
 8108818:	69ab      	ldr	r3, [r5, #24]
 810881a:	68ac      	ldr	r4, [r5, #8]
 810881c:	b913      	cbnz	r3, 8108824 <_puts_r+0x1c>
 810881e:	4628      	mov	r0, r5
 8108820:	f7fe ffd8 	bl	81077d4 <__sinit>
 8108824:	4b2c      	ldr	r3, [pc, #176]	; (81088d8 <_puts_r+0xd0>)
 8108826:	429c      	cmp	r4, r3
 8108828:	d120      	bne.n	810886c <_puts_r+0x64>
 810882a:	686c      	ldr	r4, [r5, #4]
 810882c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810882e:	07db      	lsls	r3, r3, #31
 8108830:	d405      	bmi.n	810883e <_puts_r+0x36>
 8108832:	89a3      	ldrh	r3, [r4, #12]
 8108834:	0598      	lsls	r0, r3, #22
 8108836:	d402      	bmi.n	810883e <_puts_r+0x36>
 8108838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810883a:	f7ff f88e 	bl	810795a <__retarget_lock_acquire_recursive>
 810883e:	89a3      	ldrh	r3, [r4, #12]
 8108840:	0719      	lsls	r1, r3, #28
 8108842:	d51d      	bpl.n	8108880 <_puts_r+0x78>
 8108844:	6923      	ldr	r3, [r4, #16]
 8108846:	b1db      	cbz	r3, 8108880 <_puts_r+0x78>
 8108848:	3e01      	subs	r6, #1
 810884a:	68a3      	ldr	r3, [r4, #8]
 810884c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8108850:	3b01      	subs	r3, #1
 8108852:	60a3      	str	r3, [r4, #8]
 8108854:	bb39      	cbnz	r1, 81088a6 <_puts_r+0x9e>
 8108856:	2b00      	cmp	r3, #0
 8108858:	da38      	bge.n	81088cc <_puts_r+0xc4>
 810885a:	4622      	mov	r2, r4
 810885c:	210a      	movs	r1, #10
 810885e:	4628      	mov	r0, r5
 8108860:	f001 f83c 	bl	81098dc <__swbuf_r>
 8108864:	3001      	adds	r0, #1
 8108866:	d011      	beq.n	810888c <_puts_r+0x84>
 8108868:	250a      	movs	r5, #10
 810886a:	e011      	b.n	8108890 <_puts_r+0x88>
 810886c:	4b1b      	ldr	r3, [pc, #108]	; (81088dc <_puts_r+0xd4>)
 810886e:	429c      	cmp	r4, r3
 8108870:	d101      	bne.n	8108876 <_puts_r+0x6e>
 8108872:	68ac      	ldr	r4, [r5, #8]
 8108874:	e7da      	b.n	810882c <_puts_r+0x24>
 8108876:	4b1a      	ldr	r3, [pc, #104]	; (81088e0 <_puts_r+0xd8>)
 8108878:	429c      	cmp	r4, r3
 810887a:	bf08      	it	eq
 810887c:	68ec      	ldreq	r4, [r5, #12]
 810887e:	e7d5      	b.n	810882c <_puts_r+0x24>
 8108880:	4621      	mov	r1, r4
 8108882:	4628      	mov	r0, r5
 8108884:	f001 f88e 	bl	81099a4 <__swsetup_r>
 8108888:	2800      	cmp	r0, #0
 810888a:	d0dd      	beq.n	8108848 <_puts_r+0x40>
 810888c:	f04f 35ff 	mov.w	r5, #4294967295
 8108890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8108892:	07da      	lsls	r2, r3, #31
 8108894:	d405      	bmi.n	81088a2 <_puts_r+0x9a>
 8108896:	89a3      	ldrh	r3, [r4, #12]
 8108898:	059b      	lsls	r3, r3, #22
 810889a:	d402      	bmi.n	81088a2 <_puts_r+0x9a>
 810889c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810889e:	f7ff f85d 	bl	810795c <__retarget_lock_release_recursive>
 81088a2:	4628      	mov	r0, r5
 81088a4:	bd70      	pop	{r4, r5, r6, pc}
 81088a6:	2b00      	cmp	r3, #0
 81088a8:	da04      	bge.n	81088b4 <_puts_r+0xac>
 81088aa:	69a2      	ldr	r2, [r4, #24]
 81088ac:	429a      	cmp	r2, r3
 81088ae:	dc06      	bgt.n	81088be <_puts_r+0xb6>
 81088b0:	290a      	cmp	r1, #10
 81088b2:	d004      	beq.n	81088be <_puts_r+0xb6>
 81088b4:	6823      	ldr	r3, [r4, #0]
 81088b6:	1c5a      	adds	r2, r3, #1
 81088b8:	6022      	str	r2, [r4, #0]
 81088ba:	7019      	strb	r1, [r3, #0]
 81088bc:	e7c5      	b.n	810884a <_puts_r+0x42>
 81088be:	4622      	mov	r2, r4
 81088c0:	4628      	mov	r0, r5
 81088c2:	f001 f80b 	bl	81098dc <__swbuf_r>
 81088c6:	3001      	adds	r0, #1
 81088c8:	d1bf      	bne.n	810884a <_puts_r+0x42>
 81088ca:	e7df      	b.n	810888c <_puts_r+0x84>
 81088cc:	6823      	ldr	r3, [r4, #0]
 81088ce:	250a      	movs	r5, #10
 81088d0:	1c5a      	adds	r2, r3, #1
 81088d2:	6022      	str	r2, [r4, #0]
 81088d4:	701d      	strb	r5, [r3, #0]
 81088d6:	e7db      	b.n	8108890 <_puts_r+0x88>
 81088d8:	0810e160 	.word	0x0810e160
 81088dc:	0810e180 	.word	0x0810e180
 81088e0:	0810e140 	.word	0x0810e140

081088e4 <puts>:
 81088e4:	4b02      	ldr	r3, [pc, #8]	; (81088f0 <puts+0xc>)
 81088e6:	4601      	mov	r1, r0
 81088e8:	6818      	ldr	r0, [r3, #0]
 81088ea:	f7ff bf8d 	b.w	8108808 <_puts_r>
 81088ee:	bf00      	nop
 81088f0:	10000060 	.word	0x10000060

081088f4 <_sbrk_r>:
 81088f4:	b538      	push	{r3, r4, r5, lr}
 81088f6:	4d06      	ldr	r5, [pc, #24]	; (8108910 <_sbrk_r+0x1c>)
 81088f8:	2300      	movs	r3, #0
 81088fa:	4604      	mov	r4, r0
 81088fc:	4608      	mov	r0, r1
 81088fe:	602b      	str	r3, [r5, #0]
 8108900:	f7fa f9ac 	bl	8102c5c <_sbrk>
 8108904:	1c43      	adds	r3, r0, #1
 8108906:	d102      	bne.n	810890e <_sbrk_r+0x1a>
 8108908:	682b      	ldr	r3, [r5, #0]
 810890a:	b103      	cbz	r3, 810890e <_sbrk_r+0x1a>
 810890c:	6023      	str	r3, [r4, #0]
 810890e:	bd38      	pop	{r3, r4, r5, pc}
 8108910:	1000048c 	.word	0x1000048c

08108914 <setvbuf>:
 8108914:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8108918:	461d      	mov	r5, r3
 810891a:	4b5d      	ldr	r3, [pc, #372]	; (8108a90 <setvbuf+0x17c>)
 810891c:	681f      	ldr	r7, [r3, #0]
 810891e:	4604      	mov	r4, r0
 8108920:	460e      	mov	r6, r1
 8108922:	4690      	mov	r8, r2
 8108924:	b127      	cbz	r7, 8108930 <setvbuf+0x1c>
 8108926:	69bb      	ldr	r3, [r7, #24]
 8108928:	b913      	cbnz	r3, 8108930 <setvbuf+0x1c>
 810892a:	4638      	mov	r0, r7
 810892c:	f7fe ff52 	bl	81077d4 <__sinit>
 8108930:	4b58      	ldr	r3, [pc, #352]	; (8108a94 <setvbuf+0x180>)
 8108932:	429c      	cmp	r4, r3
 8108934:	d167      	bne.n	8108a06 <setvbuf+0xf2>
 8108936:	687c      	ldr	r4, [r7, #4]
 8108938:	f1b8 0f02 	cmp.w	r8, #2
 810893c:	d006      	beq.n	810894c <setvbuf+0x38>
 810893e:	f1b8 0f01 	cmp.w	r8, #1
 8108942:	f200 809f 	bhi.w	8108a84 <setvbuf+0x170>
 8108946:	2d00      	cmp	r5, #0
 8108948:	f2c0 809c 	blt.w	8108a84 <setvbuf+0x170>
 810894c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810894e:	07db      	lsls	r3, r3, #31
 8108950:	d405      	bmi.n	810895e <setvbuf+0x4a>
 8108952:	89a3      	ldrh	r3, [r4, #12]
 8108954:	0598      	lsls	r0, r3, #22
 8108956:	d402      	bmi.n	810895e <setvbuf+0x4a>
 8108958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810895a:	f7fe fffe 	bl	810795a <__retarget_lock_acquire_recursive>
 810895e:	4621      	mov	r1, r4
 8108960:	4638      	mov	r0, r7
 8108962:	f7fe fea3 	bl	81076ac <_fflush_r>
 8108966:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108968:	b141      	cbz	r1, 810897c <setvbuf+0x68>
 810896a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810896e:	4299      	cmp	r1, r3
 8108970:	d002      	beq.n	8108978 <setvbuf+0x64>
 8108972:	4638      	mov	r0, r7
 8108974:	f7ff f80c 	bl	8107990 <_free_r>
 8108978:	2300      	movs	r3, #0
 810897a:	6363      	str	r3, [r4, #52]	; 0x34
 810897c:	2300      	movs	r3, #0
 810897e:	61a3      	str	r3, [r4, #24]
 8108980:	6063      	str	r3, [r4, #4]
 8108982:	89a3      	ldrh	r3, [r4, #12]
 8108984:	0619      	lsls	r1, r3, #24
 8108986:	d503      	bpl.n	8108990 <setvbuf+0x7c>
 8108988:	6921      	ldr	r1, [r4, #16]
 810898a:	4638      	mov	r0, r7
 810898c:	f7ff f800 	bl	8107990 <_free_r>
 8108990:	89a3      	ldrh	r3, [r4, #12]
 8108992:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8108996:	f023 0303 	bic.w	r3, r3, #3
 810899a:	f1b8 0f02 	cmp.w	r8, #2
 810899e:	81a3      	strh	r3, [r4, #12]
 81089a0:	d06c      	beq.n	8108a7c <setvbuf+0x168>
 81089a2:	ab01      	add	r3, sp, #4
 81089a4:	466a      	mov	r2, sp
 81089a6:	4621      	mov	r1, r4
 81089a8:	4638      	mov	r0, r7
 81089aa:	f002 fa77 	bl	810ae9c <__swhatbuf_r>
 81089ae:	89a3      	ldrh	r3, [r4, #12]
 81089b0:	4318      	orrs	r0, r3
 81089b2:	81a0      	strh	r0, [r4, #12]
 81089b4:	2d00      	cmp	r5, #0
 81089b6:	d130      	bne.n	8108a1a <setvbuf+0x106>
 81089b8:	9d00      	ldr	r5, [sp, #0]
 81089ba:	4628      	mov	r0, r5
 81089bc:	f7fe ffd0 	bl	8107960 <malloc>
 81089c0:	4606      	mov	r6, r0
 81089c2:	2800      	cmp	r0, #0
 81089c4:	d155      	bne.n	8108a72 <setvbuf+0x15e>
 81089c6:	f8dd 9000 	ldr.w	r9, [sp]
 81089ca:	45a9      	cmp	r9, r5
 81089cc:	d14a      	bne.n	8108a64 <setvbuf+0x150>
 81089ce:	f04f 35ff 	mov.w	r5, #4294967295
 81089d2:	2200      	movs	r2, #0
 81089d4:	60a2      	str	r2, [r4, #8]
 81089d6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 81089da:	6022      	str	r2, [r4, #0]
 81089dc:	6122      	str	r2, [r4, #16]
 81089de:	2201      	movs	r2, #1
 81089e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81089e4:	6162      	str	r2, [r4, #20]
 81089e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81089e8:	f043 0302 	orr.w	r3, r3, #2
 81089ec:	07d2      	lsls	r2, r2, #31
 81089ee:	81a3      	strh	r3, [r4, #12]
 81089f0:	d405      	bmi.n	81089fe <setvbuf+0xea>
 81089f2:	f413 7f00 	tst.w	r3, #512	; 0x200
 81089f6:	d102      	bne.n	81089fe <setvbuf+0xea>
 81089f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81089fa:	f7fe ffaf 	bl	810795c <__retarget_lock_release_recursive>
 81089fe:	4628      	mov	r0, r5
 8108a00:	b003      	add	sp, #12
 8108a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108a06:	4b24      	ldr	r3, [pc, #144]	; (8108a98 <setvbuf+0x184>)
 8108a08:	429c      	cmp	r4, r3
 8108a0a:	d101      	bne.n	8108a10 <setvbuf+0xfc>
 8108a0c:	68bc      	ldr	r4, [r7, #8]
 8108a0e:	e793      	b.n	8108938 <setvbuf+0x24>
 8108a10:	4b22      	ldr	r3, [pc, #136]	; (8108a9c <setvbuf+0x188>)
 8108a12:	429c      	cmp	r4, r3
 8108a14:	bf08      	it	eq
 8108a16:	68fc      	ldreq	r4, [r7, #12]
 8108a18:	e78e      	b.n	8108938 <setvbuf+0x24>
 8108a1a:	2e00      	cmp	r6, #0
 8108a1c:	d0cd      	beq.n	81089ba <setvbuf+0xa6>
 8108a1e:	69bb      	ldr	r3, [r7, #24]
 8108a20:	b913      	cbnz	r3, 8108a28 <setvbuf+0x114>
 8108a22:	4638      	mov	r0, r7
 8108a24:	f7fe fed6 	bl	81077d4 <__sinit>
 8108a28:	f1b8 0f01 	cmp.w	r8, #1
 8108a2c:	bf08      	it	eq
 8108a2e:	89a3      	ldrheq	r3, [r4, #12]
 8108a30:	6026      	str	r6, [r4, #0]
 8108a32:	bf04      	itt	eq
 8108a34:	f043 0301 	orreq.w	r3, r3, #1
 8108a38:	81a3      	strheq	r3, [r4, #12]
 8108a3a:	89a2      	ldrh	r2, [r4, #12]
 8108a3c:	f012 0308 	ands.w	r3, r2, #8
 8108a40:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8108a44:	d01c      	beq.n	8108a80 <setvbuf+0x16c>
 8108a46:	07d3      	lsls	r3, r2, #31
 8108a48:	bf41      	itttt	mi
 8108a4a:	2300      	movmi	r3, #0
 8108a4c:	426d      	negmi	r5, r5
 8108a4e:	60a3      	strmi	r3, [r4, #8]
 8108a50:	61a5      	strmi	r5, [r4, #24]
 8108a52:	bf58      	it	pl
 8108a54:	60a5      	strpl	r5, [r4, #8]
 8108a56:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8108a58:	f015 0501 	ands.w	r5, r5, #1
 8108a5c:	d115      	bne.n	8108a8a <setvbuf+0x176>
 8108a5e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8108a62:	e7c8      	b.n	81089f6 <setvbuf+0xe2>
 8108a64:	4648      	mov	r0, r9
 8108a66:	f7fe ff7b 	bl	8107960 <malloc>
 8108a6a:	4606      	mov	r6, r0
 8108a6c:	2800      	cmp	r0, #0
 8108a6e:	d0ae      	beq.n	81089ce <setvbuf+0xba>
 8108a70:	464d      	mov	r5, r9
 8108a72:	89a3      	ldrh	r3, [r4, #12]
 8108a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8108a78:	81a3      	strh	r3, [r4, #12]
 8108a7a:	e7d0      	b.n	8108a1e <setvbuf+0x10a>
 8108a7c:	2500      	movs	r5, #0
 8108a7e:	e7a8      	b.n	81089d2 <setvbuf+0xbe>
 8108a80:	60a3      	str	r3, [r4, #8]
 8108a82:	e7e8      	b.n	8108a56 <setvbuf+0x142>
 8108a84:	f04f 35ff 	mov.w	r5, #4294967295
 8108a88:	e7b9      	b.n	81089fe <setvbuf+0xea>
 8108a8a:	2500      	movs	r5, #0
 8108a8c:	e7b7      	b.n	81089fe <setvbuf+0xea>
 8108a8e:	bf00      	nop
 8108a90:	10000060 	.word	0x10000060
 8108a94:	0810e160 	.word	0x0810e160
 8108a98:	0810e180 	.word	0x0810e180
 8108a9c:	0810e140 	.word	0x0810e140

08108aa0 <nanf>:
 8108aa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8108aa8 <nanf+0x8>
 8108aa4:	4770      	bx	lr
 8108aa6:	bf00      	nop
 8108aa8:	7fc00000 	.word	0x7fc00000

08108aac <siprintf>:
 8108aac:	b40e      	push	{r1, r2, r3}
 8108aae:	b500      	push	{lr}
 8108ab0:	b09c      	sub	sp, #112	; 0x70
 8108ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8108ab4:	9002      	str	r0, [sp, #8]
 8108ab6:	9006      	str	r0, [sp, #24]
 8108ab8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8108abc:	4809      	ldr	r0, [pc, #36]	; (8108ae4 <siprintf+0x38>)
 8108abe:	9107      	str	r1, [sp, #28]
 8108ac0:	9104      	str	r1, [sp, #16]
 8108ac2:	4909      	ldr	r1, [pc, #36]	; (8108ae8 <siprintf+0x3c>)
 8108ac4:	f853 2b04 	ldr.w	r2, [r3], #4
 8108ac8:	9105      	str	r1, [sp, #20]
 8108aca:	6800      	ldr	r0, [r0, #0]
 8108acc:	9301      	str	r3, [sp, #4]
 8108ace:	a902      	add	r1, sp, #8
 8108ad0:	f002 ff9a 	bl	810ba08 <_svfiprintf_r>
 8108ad4:	9b02      	ldr	r3, [sp, #8]
 8108ad6:	2200      	movs	r2, #0
 8108ad8:	701a      	strb	r2, [r3, #0]
 8108ada:	b01c      	add	sp, #112	; 0x70
 8108adc:	f85d eb04 	ldr.w	lr, [sp], #4
 8108ae0:	b003      	add	sp, #12
 8108ae2:	4770      	bx	lr
 8108ae4:	10000060 	.word	0x10000060
 8108ae8:	ffff0208 	.word	0xffff0208

08108aec <__sread>:
 8108aec:	b510      	push	{r4, lr}
 8108aee:	460c      	mov	r4, r1
 8108af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108af4:	f003 f9e2 	bl	810bebc <_read_r>
 8108af8:	2800      	cmp	r0, #0
 8108afa:	bfab      	itete	ge
 8108afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8108afe:	89a3      	ldrhlt	r3, [r4, #12]
 8108b00:	181b      	addge	r3, r3, r0
 8108b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8108b06:	bfac      	ite	ge
 8108b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8108b0a:	81a3      	strhlt	r3, [r4, #12]
 8108b0c:	bd10      	pop	{r4, pc}

08108b0e <__swrite>:
 8108b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108b12:	461f      	mov	r7, r3
 8108b14:	898b      	ldrh	r3, [r1, #12]
 8108b16:	05db      	lsls	r3, r3, #23
 8108b18:	4605      	mov	r5, r0
 8108b1a:	460c      	mov	r4, r1
 8108b1c:	4616      	mov	r6, r2
 8108b1e:	d505      	bpl.n	8108b2c <__swrite+0x1e>
 8108b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108b24:	2302      	movs	r3, #2
 8108b26:	2200      	movs	r2, #0
 8108b28:	f002 f9a6 	bl	810ae78 <_lseek_r>
 8108b2c:	89a3      	ldrh	r3, [r4, #12]
 8108b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8108b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8108b36:	81a3      	strh	r3, [r4, #12]
 8108b38:	4632      	mov	r2, r6
 8108b3a:	463b      	mov	r3, r7
 8108b3c:	4628      	mov	r0, r5
 8108b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108b42:	f000 bf1d 	b.w	8109980 <_write_r>

08108b46 <__sseek>:
 8108b46:	b510      	push	{r4, lr}
 8108b48:	460c      	mov	r4, r1
 8108b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108b4e:	f002 f993 	bl	810ae78 <_lseek_r>
 8108b52:	1c43      	adds	r3, r0, #1
 8108b54:	89a3      	ldrh	r3, [r4, #12]
 8108b56:	bf15      	itete	ne
 8108b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8108b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8108b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8108b62:	81a3      	strheq	r3, [r4, #12]
 8108b64:	bf18      	it	ne
 8108b66:	81a3      	strhne	r3, [r4, #12]
 8108b68:	bd10      	pop	{r4, pc}

08108b6a <__sclose>:
 8108b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108b6e:	f000 bf87 	b.w	8109a80 <_close_r>

08108b72 <sulp>:
 8108b72:	b570      	push	{r4, r5, r6, lr}
 8108b74:	4604      	mov	r4, r0
 8108b76:	460d      	mov	r5, r1
 8108b78:	ec45 4b10 	vmov	d0, r4, r5
 8108b7c:	4616      	mov	r6, r2
 8108b7e:	f002 fd89 	bl	810b694 <__ulp>
 8108b82:	ec51 0b10 	vmov	r0, r1, d0
 8108b86:	b17e      	cbz	r6, 8108ba8 <sulp+0x36>
 8108b88:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8108b8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108b90:	2b00      	cmp	r3, #0
 8108b92:	dd09      	ble.n	8108ba8 <sulp+0x36>
 8108b94:	051b      	lsls	r3, r3, #20
 8108b96:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8108b9a:	2400      	movs	r4, #0
 8108b9c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8108ba0:	4622      	mov	r2, r4
 8108ba2:	462b      	mov	r3, r5
 8108ba4:	f7f7 fdb0 	bl	8100708 <__aeabi_dmul>
 8108ba8:	bd70      	pop	{r4, r5, r6, pc}
 8108baa:	0000      	movs	r0, r0
 8108bac:	0000      	movs	r0, r0
	...

08108bb0 <_strtod_l>:
 8108bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108bb4:	b0a3      	sub	sp, #140	; 0x8c
 8108bb6:	461f      	mov	r7, r3
 8108bb8:	2300      	movs	r3, #0
 8108bba:	931e      	str	r3, [sp, #120]	; 0x78
 8108bbc:	4ba4      	ldr	r3, [pc, #656]	; (8108e50 <_strtod_l+0x2a0>)
 8108bbe:	9219      	str	r2, [sp, #100]	; 0x64
 8108bc0:	681b      	ldr	r3, [r3, #0]
 8108bc2:	9307      	str	r3, [sp, #28]
 8108bc4:	4604      	mov	r4, r0
 8108bc6:	4618      	mov	r0, r3
 8108bc8:	4688      	mov	r8, r1
 8108bca:	f7f7 fb89 	bl	81002e0 <strlen>
 8108bce:	f04f 0a00 	mov.w	sl, #0
 8108bd2:	4605      	mov	r5, r0
 8108bd4:	f04f 0b00 	mov.w	fp, #0
 8108bd8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108bdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108bde:	781a      	ldrb	r2, [r3, #0]
 8108be0:	2a2b      	cmp	r2, #43	; 0x2b
 8108be2:	d04c      	beq.n	8108c7e <_strtod_l+0xce>
 8108be4:	d839      	bhi.n	8108c5a <_strtod_l+0xaa>
 8108be6:	2a0d      	cmp	r2, #13
 8108be8:	d832      	bhi.n	8108c50 <_strtod_l+0xa0>
 8108bea:	2a08      	cmp	r2, #8
 8108bec:	d832      	bhi.n	8108c54 <_strtod_l+0xa4>
 8108bee:	2a00      	cmp	r2, #0
 8108bf0:	d03c      	beq.n	8108c6c <_strtod_l+0xbc>
 8108bf2:	2300      	movs	r3, #0
 8108bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8108bf6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8108bf8:	7833      	ldrb	r3, [r6, #0]
 8108bfa:	2b30      	cmp	r3, #48	; 0x30
 8108bfc:	f040 80b4 	bne.w	8108d68 <_strtod_l+0x1b8>
 8108c00:	7873      	ldrb	r3, [r6, #1]
 8108c02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8108c06:	2b58      	cmp	r3, #88	; 0x58
 8108c08:	d16c      	bne.n	8108ce4 <_strtod_l+0x134>
 8108c0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108c0c:	9301      	str	r3, [sp, #4]
 8108c0e:	ab1e      	add	r3, sp, #120	; 0x78
 8108c10:	9702      	str	r7, [sp, #8]
 8108c12:	9300      	str	r3, [sp, #0]
 8108c14:	4a8f      	ldr	r2, [pc, #572]	; (8108e54 <_strtod_l+0x2a4>)
 8108c16:	ab1f      	add	r3, sp, #124	; 0x7c
 8108c18:	a91d      	add	r1, sp, #116	; 0x74
 8108c1a:	4620      	mov	r0, r4
 8108c1c:	f001 fe20 	bl	810a860 <__gethex>
 8108c20:	f010 0707 	ands.w	r7, r0, #7
 8108c24:	4605      	mov	r5, r0
 8108c26:	d005      	beq.n	8108c34 <_strtod_l+0x84>
 8108c28:	2f06      	cmp	r7, #6
 8108c2a:	d12a      	bne.n	8108c82 <_strtod_l+0xd2>
 8108c2c:	3601      	adds	r6, #1
 8108c2e:	2300      	movs	r3, #0
 8108c30:	961d      	str	r6, [sp, #116]	; 0x74
 8108c32:	930e      	str	r3, [sp, #56]	; 0x38
 8108c34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8108c36:	2b00      	cmp	r3, #0
 8108c38:	f040 8596 	bne.w	8109768 <_strtod_l+0xbb8>
 8108c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108c3e:	b1db      	cbz	r3, 8108c78 <_strtod_l+0xc8>
 8108c40:	4652      	mov	r2, sl
 8108c42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8108c46:	ec43 2b10 	vmov	d0, r2, r3
 8108c4a:	b023      	add	sp, #140	; 0x8c
 8108c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108c50:	2a20      	cmp	r2, #32
 8108c52:	d1ce      	bne.n	8108bf2 <_strtod_l+0x42>
 8108c54:	3301      	adds	r3, #1
 8108c56:	931d      	str	r3, [sp, #116]	; 0x74
 8108c58:	e7c0      	b.n	8108bdc <_strtod_l+0x2c>
 8108c5a:	2a2d      	cmp	r2, #45	; 0x2d
 8108c5c:	d1c9      	bne.n	8108bf2 <_strtod_l+0x42>
 8108c5e:	2201      	movs	r2, #1
 8108c60:	920e      	str	r2, [sp, #56]	; 0x38
 8108c62:	1c5a      	adds	r2, r3, #1
 8108c64:	921d      	str	r2, [sp, #116]	; 0x74
 8108c66:	785b      	ldrb	r3, [r3, #1]
 8108c68:	2b00      	cmp	r3, #0
 8108c6a:	d1c4      	bne.n	8108bf6 <_strtod_l+0x46>
 8108c6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8108c6e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108c72:	2b00      	cmp	r3, #0
 8108c74:	f040 8576 	bne.w	8109764 <_strtod_l+0xbb4>
 8108c78:	4652      	mov	r2, sl
 8108c7a:	465b      	mov	r3, fp
 8108c7c:	e7e3      	b.n	8108c46 <_strtod_l+0x96>
 8108c7e:	2200      	movs	r2, #0
 8108c80:	e7ee      	b.n	8108c60 <_strtod_l+0xb0>
 8108c82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8108c84:	b13a      	cbz	r2, 8108c96 <_strtod_l+0xe6>
 8108c86:	2135      	movs	r1, #53	; 0x35
 8108c88:	a820      	add	r0, sp, #128	; 0x80
 8108c8a:	f002 fe0e 	bl	810b8aa <__copybits>
 8108c8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108c90:	4620      	mov	r0, r4
 8108c92:	f002 f9d3 	bl	810b03c <_Bfree>
 8108c96:	3f01      	subs	r7, #1
 8108c98:	2f05      	cmp	r7, #5
 8108c9a:	d807      	bhi.n	8108cac <_strtod_l+0xfc>
 8108c9c:	e8df f007 	tbb	[pc, r7]
 8108ca0:	1d180b0e 	.word	0x1d180b0e
 8108ca4:	030e      	.short	0x030e
 8108ca6:	f04f 0b00 	mov.w	fp, #0
 8108caa:	46da      	mov	sl, fp
 8108cac:	0728      	lsls	r0, r5, #28
 8108cae:	d5c1      	bpl.n	8108c34 <_strtod_l+0x84>
 8108cb0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8108cb4:	e7be      	b.n	8108c34 <_strtod_l+0x84>
 8108cb6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8108cba:	e7f7      	b.n	8108cac <_strtod_l+0xfc>
 8108cbc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8108cc0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8108cc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8108cc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8108cca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8108cce:	e7ed      	b.n	8108cac <_strtod_l+0xfc>
 8108cd0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8108e58 <_strtod_l+0x2a8>
 8108cd4:	f04f 0a00 	mov.w	sl, #0
 8108cd8:	e7e8      	b.n	8108cac <_strtod_l+0xfc>
 8108cda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8108cde:	f04f 3aff 	mov.w	sl, #4294967295
 8108ce2:	e7e3      	b.n	8108cac <_strtod_l+0xfc>
 8108ce4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108ce6:	1c5a      	adds	r2, r3, #1
 8108ce8:	921d      	str	r2, [sp, #116]	; 0x74
 8108cea:	785b      	ldrb	r3, [r3, #1]
 8108cec:	2b30      	cmp	r3, #48	; 0x30
 8108cee:	d0f9      	beq.n	8108ce4 <_strtod_l+0x134>
 8108cf0:	2b00      	cmp	r3, #0
 8108cf2:	d09f      	beq.n	8108c34 <_strtod_l+0x84>
 8108cf4:	2301      	movs	r3, #1
 8108cf6:	f04f 0900 	mov.w	r9, #0
 8108cfa:	9304      	str	r3, [sp, #16]
 8108cfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108cfe:	930a      	str	r3, [sp, #40]	; 0x28
 8108d00:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8108d04:	464f      	mov	r7, r9
 8108d06:	220a      	movs	r2, #10
 8108d08:	981d      	ldr	r0, [sp, #116]	; 0x74
 8108d0a:	7806      	ldrb	r6, [r0, #0]
 8108d0c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8108d10:	b2d9      	uxtb	r1, r3
 8108d12:	2909      	cmp	r1, #9
 8108d14:	d92a      	bls.n	8108d6c <_strtod_l+0x1bc>
 8108d16:	9907      	ldr	r1, [sp, #28]
 8108d18:	462a      	mov	r2, r5
 8108d1a:	f003 f8e9 	bl	810bef0 <strncmp>
 8108d1e:	b398      	cbz	r0, 8108d88 <_strtod_l+0x1d8>
 8108d20:	2000      	movs	r0, #0
 8108d22:	4633      	mov	r3, r6
 8108d24:	463d      	mov	r5, r7
 8108d26:	9007      	str	r0, [sp, #28]
 8108d28:	4602      	mov	r2, r0
 8108d2a:	2b65      	cmp	r3, #101	; 0x65
 8108d2c:	d001      	beq.n	8108d32 <_strtod_l+0x182>
 8108d2e:	2b45      	cmp	r3, #69	; 0x45
 8108d30:	d118      	bne.n	8108d64 <_strtod_l+0x1b4>
 8108d32:	b91d      	cbnz	r5, 8108d3c <_strtod_l+0x18c>
 8108d34:	9b04      	ldr	r3, [sp, #16]
 8108d36:	4303      	orrs	r3, r0
 8108d38:	d098      	beq.n	8108c6c <_strtod_l+0xbc>
 8108d3a:	2500      	movs	r5, #0
 8108d3c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8108d40:	f108 0301 	add.w	r3, r8, #1
 8108d44:	931d      	str	r3, [sp, #116]	; 0x74
 8108d46:	f898 3001 	ldrb.w	r3, [r8, #1]
 8108d4a:	2b2b      	cmp	r3, #43	; 0x2b
 8108d4c:	d075      	beq.n	8108e3a <_strtod_l+0x28a>
 8108d4e:	2b2d      	cmp	r3, #45	; 0x2d
 8108d50:	d07b      	beq.n	8108e4a <_strtod_l+0x29a>
 8108d52:	f04f 0c00 	mov.w	ip, #0
 8108d56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8108d5a:	2909      	cmp	r1, #9
 8108d5c:	f240 8082 	bls.w	8108e64 <_strtod_l+0x2b4>
 8108d60:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8108d64:	2600      	movs	r6, #0
 8108d66:	e09d      	b.n	8108ea4 <_strtod_l+0x2f4>
 8108d68:	2300      	movs	r3, #0
 8108d6a:	e7c4      	b.n	8108cf6 <_strtod_l+0x146>
 8108d6c:	2f08      	cmp	r7, #8
 8108d6e:	bfd8      	it	le
 8108d70:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8108d72:	f100 0001 	add.w	r0, r0, #1
 8108d76:	bfda      	itte	le
 8108d78:	fb02 3301 	mlale	r3, r2, r1, r3
 8108d7c:	9309      	strle	r3, [sp, #36]	; 0x24
 8108d7e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8108d82:	3701      	adds	r7, #1
 8108d84:	901d      	str	r0, [sp, #116]	; 0x74
 8108d86:	e7bf      	b.n	8108d08 <_strtod_l+0x158>
 8108d88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108d8a:	195a      	adds	r2, r3, r5
 8108d8c:	921d      	str	r2, [sp, #116]	; 0x74
 8108d8e:	5d5b      	ldrb	r3, [r3, r5]
 8108d90:	2f00      	cmp	r7, #0
 8108d92:	d037      	beq.n	8108e04 <_strtod_l+0x254>
 8108d94:	9007      	str	r0, [sp, #28]
 8108d96:	463d      	mov	r5, r7
 8108d98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8108d9c:	2a09      	cmp	r2, #9
 8108d9e:	d912      	bls.n	8108dc6 <_strtod_l+0x216>
 8108da0:	2201      	movs	r2, #1
 8108da2:	e7c2      	b.n	8108d2a <_strtod_l+0x17a>
 8108da4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108da6:	1c5a      	adds	r2, r3, #1
 8108da8:	921d      	str	r2, [sp, #116]	; 0x74
 8108daa:	785b      	ldrb	r3, [r3, #1]
 8108dac:	3001      	adds	r0, #1
 8108dae:	2b30      	cmp	r3, #48	; 0x30
 8108db0:	d0f8      	beq.n	8108da4 <_strtod_l+0x1f4>
 8108db2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8108db6:	2a08      	cmp	r2, #8
 8108db8:	f200 84db 	bhi.w	8109772 <_strtod_l+0xbc2>
 8108dbc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8108dbe:	9007      	str	r0, [sp, #28]
 8108dc0:	2000      	movs	r0, #0
 8108dc2:	920a      	str	r2, [sp, #40]	; 0x28
 8108dc4:	4605      	mov	r5, r0
 8108dc6:	3b30      	subs	r3, #48	; 0x30
 8108dc8:	f100 0201 	add.w	r2, r0, #1
 8108dcc:	d014      	beq.n	8108df8 <_strtod_l+0x248>
 8108dce:	9907      	ldr	r1, [sp, #28]
 8108dd0:	4411      	add	r1, r2
 8108dd2:	9107      	str	r1, [sp, #28]
 8108dd4:	462a      	mov	r2, r5
 8108dd6:	eb00 0e05 	add.w	lr, r0, r5
 8108dda:	210a      	movs	r1, #10
 8108ddc:	4572      	cmp	r2, lr
 8108dde:	d113      	bne.n	8108e08 <_strtod_l+0x258>
 8108de0:	182a      	adds	r2, r5, r0
 8108de2:	2a08      	cmp	r2, #8
 8108de4:	f105 0501 	add.w	r5, r5, #1
 8108de8:	4405      	add	r5, r0
 8108dea:	dc1c      	bgt.n	8108e26 <_strtod_l+0x276>
 8108dec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108dee:	220a      	movs	r2, #10
 8108df0:	fb02 3301 	mla	r3, r2, r1, r3
 8108df4:	9309      	str	r3, [sp, #36]	; 0x24
 8108df6:	2200      	movs	r2, #0
 8108df8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108dfa:	1c59      	adds	r1, r3, #1
 8108dfc:	911d      	str	r1, [sp, #116]	; 0x74
 8108dfe:	785b      	ldrb	r3, [r3, #1]
 8108e00:	4610      	mov	r0, r2
 8108e02:	e7c9      	b.n	8108d98 <_strtod_l+0x1e8>
 8108e04:	4638      	mov	r0, r7
 8108e06:	e7d2      	b.n	8108dae <_strtod_l+0x1fe>
 8108e08:	2a08      	cmp	r2, #8
 8108e0a:	dc04      	bgt.n	8108e16 <_strtod_l+0x266>
 8108e0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8108e0e:	434e      	muls	r6, r1
 8108e10:	9609      	str	r6, [sp, #36]	; 0x24
 8108e12:	3201      	adds	r2, #1
 8108e14:	e7e2      	b.n	8108ddc <_strtod_l+0x22c>
 8108e16:	f102 0c01 	add.w	ip, r2, #1
 8108e1a:	f1bc 0f10 	cmp.w	ip, #16
 8108e1e:	bfd8      	it	le
 8108e20:	fb01 f909 	mulle.w	r9, r1, r9
 8108e24:	e7f5      	b.n	8108e12 <_strtod_l+0x262>
 8108e26:	2d10      	cmp	r5, #16
 8108e28:	bfdc      	itt	le
 8108e2a:	220a      	movle	r2, #10
 8108e2c:	fb02 3909 	mlale	r9, r2, r9, r3
 8108e30:	e7e1      	b.n	8108df6 <_strtod_l+0x246>
 8108e32:	2300      	movs	r3, #0
 8108e34:	9307      	str	r3, [sp, #28]
 8108e36:	2201      	movs	r2, #1
 8108e38:	e77c      	b.n	8108d34 <_strtod_l+0x184>
 8108e3a:	f04f 0c00 	mov.w	ip, #0
 8108e3e:	f108 0302 	add.w	r3, r8, #2
 8108e42:	931d      	str	r3, [sp, #116]	; 0x74
 8108e44:	f898 3002 	ldrb.w	r3, [r8, #2]
 8108e48:	e785      	b.n	8108d56 <_strtod_l+0x1a6>
 8108e4a:	f04f 0c01 	mov.w	ip, #1
 8108e4e:	e7f6      	b.n	8108e3e <_strtod_l+0x28e>
 8108e50:	0810e430 	.word	0x0810e430
 8108e54:	0810e1e0 	.word	0x0810e1e0
 8108e58:	7ff00000 	.word	0x7ff00000
 8108e5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108e5e:	1c59      	adds	r1, r3, #1
 8108e60:	911d      	str	r1, [sp, #116]	; 0x74
 8108e62:	785b      	ldrb	r3, [r3, #1]
 8108e64:	2b30      	cmp	r3, #48	; 0x30
 8108e66:	d0f9      	beq.n	8108e5c <_strtod_l+0x2ac>
 8108e68:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8108e6c:	2908      	cmp	r1, #8
 8108e6e:	f63f af79 	bhi.w	8108d64 <_strtod_l+0x1b4>
 8108e72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8108e76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108e78:	9308      	str	r3, [sp, #32]
 8108e7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108e7c:	1c59      	adds	r1, r3, #1
 8108e7e:	911d      	str	r1, [sp, #116]	; 0x74
 8108e80:	785b      	ldrb	r3, [r3, #1]
 8108e82:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8108e86:	2e09      	cmp	r6, #9
 8108e88:	d937      	bls.n	8108efa <_strtod_l+0x34a>
 8108e8a:	9e08      	ldr	r6, [sp, #32]
 8108e8c:	1b89      	subs	r1, r1, r6
 8108e8e:	2908      	cmp	r1, #8
 8108e90:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8108e94:	dc02      	bgt.n	8108e9c <_strtod_l+0x2ec>
 8108e96:	4576      	cmp	r6, lr
 8108e98:	bfa8      	it	ge
 8108e9a:	4676      	movge	r6, lr
 8108e9c:	f1bc 0f00 	cmp.w	ip, #0
 8108ea0:	d000      	beq.n	8108ea4 <_strtod_l+0x2f4>
 8108ea2:	4276      	negs	r6, r6
 8108ea4:	2d00      	cmp	r5, #0
 8108ea6:	d14f      	bne.n	8108f48 <_strtod_l+0x398>
 8108ea8:	9904      	ldr	r1, [sp, #16]
 8108eaa:	4301      	orrs	r1, r0
 8108eac:	f47f aec2 	bne.w	8108c34 <_strtod_l+0x84>
 8108eb0:	2a00      	cmp	r2, #0
 8108eb2:	f47f aedb 	bne.w	8108c6c <_strtod_l+0xbc>
 8108eb6:	2b69      	cmp	r3, #105	; 0x69
 8108eb8:	d027      	beq.n	8108f0a <_strtod_l+0x35a>
 8108eba:	dc24      	bgt.n	8108f06 <_strtod_l+0x356>
 8108ebc:	2b49      	cmp	r3, #73	; 0x49
 8108ebe:	d024      	beq.n	8108f0a <_strtod_l+0x35a>
 8108ec0:	2b4e      	cmp	r3, #78	; 0x4e
 8108ec2:	f47f aed3 	bne.w	8108c6c <_strtod_l+0xbc>
 8108ec6:	499e      	ldr	r1, [pc, #632]	; (8109140 <_strtod_l+0x590>)
 8108ec8:	a81d      	add	r0, sp, #116	; 0x74
 8108eca:	f001 ff21 	bl	810ad10 <__match>
 8108ece:	2800      	cmp	r0, #0
 8108ed0:	f43f aecc 	beq.w	8108c6c <_strtod_l+0xbc>
 8108ed4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108ed6:	781b      	ldrb	r3, [r3, #0]
 8108ed8:	2b28      	cmp	r3, #40	; 0x28
 8108eda:	d12d      	bne.n	8108f38 <_strtod_l+0x388>
 8108edc:	4999      	ldr	r1, [pc, #612]	; (8109144 <_strtod_l+0x594>)
 8108ede:	aa20      	add	r2, sp, #128	; 0x80
 8108ee0:	a81d      	add	r0, sp, #116	; 0x74
 8108ee2:	f001 ff29 	bl	810ad38 <__hexnan>
 8108ee6:	2805      	cmp	r0, #5
 8108ee8:	d126      	bne.n	8108f38 <_strtod_l+0x388>
 8108eea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108eec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8108ef0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8108ef4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8108ef8:	e69c      	b.n	8108c34 <_strtod_l+0x84>
 8108efa:	210a      	movs	r1, #10
 8108efc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8108f00:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8108f04:	e7b9      	b.n	8108e7a <_strtod_l+0x2ca>
 8108f06:	2b6e      	cmp	r3, #110	; 0x6e
 8108f08:	e7db      	b.n	8108ec2 <_strtod_l+0x312>
 8108f0a:	498f      	ldr	r1, [pc, #572]	; (8109148 <_strtod_l+0x598>)
 8108f0c:	a81d      	add	r0, sp, #116	; 0x74
 8108f0e:	f001 feff 	bl	810ad10 <__match>
 8108f12:	2800      	cmp	r0, #0
 8108f14:	f43f aeaa 	beq.w	8108c6c <_strtod_l+0xbc>
 8108f18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108f1a:	498c      	ldr	r1, [pc, #560]	; (810914c <_strtod_l+0x59c>)
 8108f1c:	3b01      	subs	r3, #1
 8108f1e:	a81d      	add	r0, sp, #116	; 0x74
 8108f20:	931d      	str	r3, [sp, #116]	; 0x74
 8108f22:	f001 fef5 	bl	810ad10 <__match>
 8108f26:	b910      	cbnz	r0, 8108f2e <_strtod_l+0x37e>
 8108f28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108f2a:	3301      	adds	r3, #1
 8108f2c:	931d      	str	r3, [sp, #116]	; 0x74
 8108f2e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 810915c <_strtod_l+0x5ac>
 8108f32:	f04f 0a00 	mov.w	sl, #0
 8108f36:	e67d      	b.n	8108c34 <_strtod_l+0x84>
 8108f38:	4885      	ldr	r0, [pc, #532]	; (8109150 <_strtod_l+0x5a0>)
 8108f3a:	f002 ffd1 	bl	810bee0 <nan>
 8108f3e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8108f42:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8108f46:	e675      	b.n	8108c34 <_strtod_l+0x84>
 8108f48:	9b07      	ldr	r3, [sp, #28]
 8108f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8108f4c:	1af3      	subs	r3, r6, r3
 8108f4e:	2f00      	cmp	r7, #0
 8108f50:	bf08      	it	eq
 8108f52:	462f      	moveq	r7, r5
 8108f54:	2d10      	cmp	r5, #16
 8108f56:	9308      	str	r3, [sp, #32]
 8108f58:	46a8      	mov	r8, r5
 8108f5a:	bfa8      	it	ge
 8108f5c:	f04f 0810 	movge.w	r8, #16
 8108f60:	f7f7 fb58 	bl	8100614 <__aeabi_ui2d>
 8108f64:	2d09      	cmp	r5, #9
 8108f66:	4682      	mov	sl, r0
 8108f68:	468b      	mov	fp, r1
 8108f6a:	dd13      	ble.n	8108f94 <_strtod_l+0x3e4>
 8108f6c:	4b79      	ldr	r3, [pc, #484]	; (8109154 <_strtod_l+0x5a4>)
 8108f6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8108f72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8108f76:	f7f7 fbc7 	bl	8100708 <__aeabi_dmul>
 8108f7a:	4682      	mov	sl, r0
 8108f7c:	4648      	mov	r0, r9
 8108f7e:	468b      	mov	fp, r1
 8108f80:	f7f7 fb48 	bl	8100614 <__aeabi_ui2d>
 8108f84:	4602      	mov	r2, r0
 8108f86:	460b      	mov	r3, r1
 8108f88:	4650      	mov	r0, sl
 8108f8a:	4659      	mov	r1, fp
 8108f8c:	f7f7 fa06 	bl	810039c <__adddf3>
 8108f90:	4682      	mov	sl, r0
 8108f92:	468b      	mov	fp, r1
 8108f94:	2d0f      	cmp	r5, #15
 8108f96:	dc38      	bgt.n	810900a <_strtod_l+0x45a>
 8108f98:	9b08      	ldr	r3, [sp, #32]
 8108f9a:	2b00      	cmp	r3, #0
 8108f9c:	f43f ae4a 	beq.w	8108c34 <_strtod_l+0x84>
 8108fa0:	dd24      	ble.n	8108fec <_strtod_l+0x43c>
 8108fa2:	2b16      	cmp	r3, #22
 8108fa4:	dc0b      	bgt.n	8108fbe <_strtod_l+0x40e>
 8108fa6:	4d6b      	ldr	r5, [pc, #428]	; (8109154 <_strtod_l+0x5a4>)
 8108fa8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8108fac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8108fb0:	4652      	mov	r2, sl
 8108fb2:	465b      	mov	r3, fp
 8108fb4:	f7f7 fba8 	bl	8100708 <__aeabi_dmul>
 8108fb8:	4682      	mov	sl, r0
 8108fba:	468b      	mov	fp, r1
 8108fbc:	e63a      	b.n	8108c34 <_strtod_l+0x84>
 8108fbe:	9a08      	ldr	r2, [sp, #32]
 8108fc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8108fc4:	4293      	cmp	r3, r2
 8108fc6:	db20      	blt.n	810900a <_strtod_l+0x45a>
 8108fc8:	4c62      	ldr	r4, [pc, #392]	; (8109154 <_strtod_l+0x5a4>)
 8108fca:	f1c5 050f 	rsb	r5, r5, #15
 8108fce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8108fd2:	4652      	mov	r2, sl
 8108fd4:	465b      	mov	r3, fp
 8108fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108fda:	f7f7 fb95 	bl	8100708 <__aeabi_dmul>
 8108fde:	9b08      	ldr	r3, [sp, #32]
 8108fe0:	1b5d      	subs	r5, r3, r5
 8108fe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8108fe6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8108fea:	e7e3      	b.n	8108fb4 <_strtod_l+0x404>
 8108fec:	9b08      	ldr	r3, [sp, #32]
 8108fee:	3316      	adds	r3, #22
 8108ff0:	db0b      	blt.n	810900a <_strtod_l+0x45a>
 8108ff2:	9b07      	ldr	r3, [sp, #28]
 8108ff4:	4a57      	ldr	r2, [pc, #348]	; (8109154 <_strtod_l+0x5a4>)
 8108ff6:	1b9e      	subs	r6, r3, r6
 8108ff8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8108ffc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109000:	4650      	mov	r0, sl
 8109002:	4659      	mov	r1, fp
 8109004:	f7f7 fcaa 	bl	810095c <__aeabi_ddiv>
 8109008:	e7d6      	b.n	8108fb8 <_strtod_l+0x408>
 810900a:	9b08      	ldr	r3, [sp, #32]
 810900c:	eba5 0808 	sub.w	r8, r5, r8
 8109010:	4498      	add	r8, r3
 8109012:	f1b8 0f00 	cmp.w	r8, #0
 8109016:	dd71      	ble.n	81090fc <_strtod_l+0x54c>
 8109018:	f018 030f 	ands.w	r3, r8, #15
 810901c:	d00a      	beq.n	8109034 <_strtod_l+0x484>
 810901e:	494d      	ldr	r1, [pc, #308]	; (8109154 <_strtod_l+0x5a4>)
 8109020:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109024:	4652      	mov	r2, sl
 8109026:	465b      	mov	r3, fp
 8109028:	e9d1 0100 	ldrd	r0, r1, [r1]
 810902c:	f7f7 fb6c 	bl	8100708 <__aeabi_dmul>
 8109030:	4682      	mov	sl, r0
 8109032:	468b      	mov	fp, r1
 8109034:	f038 080f 	bics.w	r8, r8, #15
 8109038:	d04d      	beq.n	81090d6 <_strtod_l+0x526>
 810903a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 810903e:	dd22      	ble.n	8109086 <_strtod_l+0x4d6>
 8109040:	2500      	movs	r5, #0
 8109042:	462e      	mov	r6, r5
 8109044:	9509      	str	r5, [sp, #36]	; 0x24
 8109046:	9507      	str	r5, [sp, #28]
 8109048:	2322      	movs	r3, #34	; 0x22
 810904a:	f8df b110 	ldr.w	fp, [pc, #272]	; 810915c <_strtod_l+0x5ac>
 810904e:	6023      	str	r3, [r4, #0]
 8109050:	f04f 0a00 	mov.w	sl, #0
 8109054:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109056:	2b00      	cmp	r3, #0
 8109058:	f43f adec 	beq.w	8108c34 <_strtod_l+0x84>
 810905c:	991e      	ldr	r1, [sp, #120]	; 0x78
 810905e:	4620      	mov	r0, r4
 8109060:	f001 ffec 	bl	810b03c <_Bfree>
 8109064:	9907      	ldr	r1, [sp, #28]
 8109066:	4620      	mov	r0, r4
 8109068:	f001 ffe8 	bl	810b03c <_Bfree>
 810906c:	4631      	mov	r1, r6
 810906e:	4620      	mov	r0, r4
 8109070:	f001 ffe4 	bl	810b03c <_Bfree>
 8109074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109076:	4620      	mov	r0, r4
 8109078:	f001 ffe0 	bl	810b03c <_Bfree>
 810907c:	4629      	mov	r1, r5
 810907e:	4620      	mov	r0, r4
 8109080:	f001 ffdc 	bl	810b03c <_Bfree>
 8109084:	e5d6      	b.n	8108c34 <_strtod_l+0x84>
 8109086:	2300      	movs	r3, #0
 8109088:	ea4f 1828 	mov.w	r8, r8, asr #4
 810908c:	4650      	mov	r0, sl
 810908e:	4659      	mov	r1, fp
 8109090:	4699      	mov	r9, r3
 8109092:	f1b8 0f01 	cmp.w	r8, #1
 8109096:	dc21      	bgt.n	81090dc <_strtod_l+0x52c>
 8109098:	b10b      	cbz	r3, 810909e <_strtod_l+0x4ee>
 810909a:	4682      	mov	sl, r0
 810909c:	468b      	mov	fp, r1
 810909e:	4b2e      	ldr	r3, [pc, #184]	; (8109158 <_strtod_l+0x5a8>)
 81090a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 81090a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 81090a8:	4652      	mov	r2, sl
 81090aa:	465b      	mov	r3, fp
 81090ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 81090b0:	f7f7 fb2a 	bl	8100708 <__aeabi_dmul>
 81090b4:	4b29      	ldr	r3, [pc, #164]	; (810915c <_strtod_l+0x5ac>)
 81090b6:	460a      	mov	r2, r1
 81090b8:	400b      	ands	r3, r1
 81090ba:	4929      	ldr	r1, [pc, #164]	; (8109160 <_strtod_l+0x5b0>)
 81090bc:	428b      	cmp	r3, r1
 81090be:	4682      	mov	sl, r0
 81090c0:	d8be      	bhi.n	8109040 <_strtod_l+0x490>
 81090c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 81090c6:	428b      	cmp	r3, r1
 81090c8:	bf86      	itte	hi
 81090ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8109164 <_strtod_l+0x5b4>
 81090ce:	f04f 3aff 	movhi.w	sl, #4294967295
 81090d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 81090d6:	2300      	movs	r3, #0
 81090d8:	9304      	str	r3, [sp, #16]
 81090da:	e081      	b.n	81091e0 <_strtod_l+0x630>
 81090dc:	f018 0f01 	tst.w	r8, #1
 81090e0:	d007      	beq.n	81090f2 <_strtod_l+0x542>
 81090e2:	4b1d      	ldr	r3, [pc, #116]	; (8109158 <_strtod_l+0x5a8>)
 81090e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 81090e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81090ec:	f7f7 fb0c 	bl	8100708 <__aeabi_dmul>
 81090f0:	2301      	movs	r3, #1
 81090f2:	f109 0901 	add.w	r9, r9, #1
 81090f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 81090fa:	e7ca      	b.n	8109092 <_strtod_l+0x4e2>
 81090fc:	d0eb      	beq.n	81090d6 <_strtod_l+0x526>
 81090fe:	f1c8 0800 	rsb	r8, r8, #0
 8109102:	f018 020f 	ands.w	r2, r8, #15
 8109106:	d00a      	beq.n	810911e <_strtod_l+0x56e>
 8109108:	4b12      	ldr	r3, [pc, #72]	; (8109154 <_strtod_l+0x5a4>)
 810910a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810910e:	4650      	mov	r0, sl
 8109110:	4659      	mov	r1, fp
 8109112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109116:	f7f7 fc21 	bl	810095c <__aeabi_ddiv>
 810911a:	4682      	mov	sl, r0
 810911c:	468b      	mov	fp, r1
 810911e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8109122:	d0d8      	beq.n	81090d6 <_strtod_l+0x526>
 8109124:	f1b8 0f1f 	cmp.w	r8, #31
 8109128:	dd1e      	ble.n	8109168 <_strtod_l+0x5b8>
 810912a:	2500      	movs	r5, #0
 810912c:	462e      	mov	r6, r5
 810912e:	9509      	str	r5, [sp, #36]	; 0x24
 8109130:	9507      	str	r5, [sp, #28]
 8109132:	2322      	movs	r3, #34	; 0x22
 8109134:	f04f 0a00 	mov.w	sl, #0
 8109138:	f04f 0b00 	mov.w	fp, #0
 810913c:	6023      	str	r3, [r4, #0]
 810913e:	e789      	b.n	8109054 <_strtod_l+0x4a4>
 8109140:	0810e1b1 	.word	0x0810e1b1
 8109144:	0810e1f4 	.word	0x0810e1f4
 8109148:	0810e1a9 	.word	0x0810e1a9
 810914c:	0810e334 	.word	0x0810e334
 8109150:	0810e5f0 	.word	0x0810e5f0
 8109154:	0810e4d0 	.word	0x0810e4d0
 8109158:	0810e4a8 	.word	0x0810e4a8
 810915c:	7ff00000 	.word	0x7ff00000
 8109160:	7ca00000 	.word	0x7ca00000
 8109164:	7fefffff 	.word	0x7fefffff
 8109168:	f018 0310 	ands.w	r3, r8, #16
 810916c:	bf18      	it	ne
 810916e:	236a      	movne	r3, #106	; 0x6a
 8109170:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8109528 <_strtod_l+0x978>
 8109174:	9304      	str	r3, [sp, #16]
 8109176:	4650      	mov	r0, sl
 8109178:	4659      	mov	r1, fp
 810917a:	2300      	movs	r3, #0
 810917c:	f018 0f01 	tst.w	r8, #1
 8109180:	d004      	beq.n	810918c <_strtod_l+0x5dc>
 8109182:	e9d9 2300 	ldrd	r2, r3, [r9]
 8109186:	f7f7 fabf 	bl	8100708 <__aeabi_dmul>
 810918a:	2301      	movs	r3, #1
 810918c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8109190:	f109 0908 	add.w	r9, r9, #8
 8109194:	d1f2      	bne.n	810917c <_strtod_l+0x5cc>
 8109196:	b10b      	cbz	r3, 810919c <_strtod_l+0x5ec>
 8109198:	4682      	mov	sl, r0
 810919a:	468b      	mov	fp, r1
 810919c:	9b04      	ldr	r3, [sp, #16]
 810919e:	b1bb      	cbz	r3, 81091d0 <_strtod_l+0x620>
 81091a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 81091a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81091a8:	2b00      	cmp	r3, #0
 81091aa:	4659      	mov	r1, fp
 81091ac:	dd10      	ble.n	81091d0 <_strtod_l+0x620>
 81091ae:	2b1f      	cmp	r3, #31
 81091b0:	f340 8128 	ble.w	8109404 <_strtod_l+0x854>
 81091b4:	2b34      	cmp	r3, #52	; 0x34
 81091b6:	bfde      	ittt	le
 81091b8:	3b20      	suble	r3, #32
 81091ba:	f04f 32ff 	movle.w	r2, #4294967295
 81091be:	fa02 f303 	lslle.w	r3, r2, r3
 81091c2:	f04f 0a00 	mov.w	sl, #0
 81091c6:	bfcc      	ite	gt
 81091c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 81091cc:	ea03 0b01 	andle.w	fp, r3, r1
 81091d0:	2200      	movs	r2, #0
 81091d2:	2300      	movs	r3, #0
 81091d4:	4650      	mov	r0, sl
 81091d6:	4659      	mov	r1, fp
 81091d8:	f7f7 fcfe 	bl	8100bd8 <__aeabi_dcmpeq>
 81091dc:	2800      	cmp	r0, #0
 81091de:	d1a4      	bne.n	810912a <_strtod_l+0x57a>
 81091e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81091e2:	9300      	str	r3, [sp, #0]
 81091e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 81091e6:	462b      	mov	r3, r5
 81091e8:	463a      	mov	r2, r7
 81091ea:	4620      	mov	r0, r4
 81091ec:	f001 ff92 	bl	810b114 <__s2b>
 81091f0:	9009      	str	r0, [sp, #36]	; 0x24
 81091f2:	2800      	cmp	r0, #0
 81091f4:	f43f af24 	beq.w	8109040 <_strtod_l+0x490>
 81091f8:	9b07      	ldr	r3, [sp, #28]
 81091fa:	1b9e      	subs	r6, r3, r6
 81091fc:	9b08      	ldr	r3, [sp, #32]
 81091fe:	2b00      	cmp	r3, #0
 8109200:	bfb4      	ite	lt
 8109202:	4633      	movlt	r3, r6
 8109204:	2300      	movge	r3, #0
 8109206:	9310      	str	r3, [sp, #64]	; 0x40
 8109208:	9b08      	ldr	r3, [sp, #32]
 810920a:	2500      	movs	r5, #0
 810920c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8109210:	9318      	str	r3, [sp, #96]	; 0x60
 8109212:	462e      	mov	r6, r5
 8109214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109216:	4620      	mov	r0, r4
 8109218:	6859      	ldr	r1, [r3, #4]
 810921a:	f001 fecf 	bl	810afbc <_Balloc>
 810921e:	9007      	str	r0, [sp, #28]
 8109220:	2800      	cmp	r0, #0
 8109222:	f43f af11 	beq.w	8109048 <_strtod_l+0x498>
 8109226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109228:	691a      	ldr	r2, [r3, #16]
 810922a:	3202      	adds	r2, #2
 810922c:	f103 010c 	add.w	r1, r3, #12
 8109230:	0092      	lsls	r2, r2, #2
 8109232:	300c      	adds	r0, #12
 8109234:	f001 fea8 	bl	810af88 <memcpy>
 8109238:	ec4b ab10 	vmov	d0, sl, fp
 810923c:	aa20      	add	r2, sp, #128	; 0x80
 810923e:	a91f      	add	r1, sp, #124	; 0x7c
 8109240:	4620      	mov	r0, r4
 8109242:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8109246:	f002 faa1 	bl	810b78c <__d2b>
 810924a:	901e      	str	r0, [sp, #120]	; 0x78
 810924c:	2800      	cmp	r0, #0
 810924e:	f43f aefb 	beq.w	8109048 <_strtod_l+0x498>
 8109252:	2101      	movs	r1, #1
 8109254:	4620      	mov	r0, r4
 8109256:	f001 fff7 	bl	810b248 <__i2b>
 810925a:	4606      	mov	r6, r0
 810925c:	2800      	cmp	r0, #0
 810925e:	f43f aef3 	beq.w	8109048 <_strtod_l+0x498>
 8109262:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8109264:	9904      	ldr	r1, [sp, #16]
 8109266:	2b00      	cmp	r3, #0
 8109268:	bfab      	itete	ge
 810926a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 810926c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 810926e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8109270:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8109274:	bfac      	ite	ge
 8109276:	eb03 0902 	addge.w	r9, r3, r2
 810927a:	1ad7      	sublt	r7, r2, r3
 810927c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 810927e:	eba3 0801 	sub.w	r8, r3, r1
 8109282:	4490      	add	r8, r2
 8109284:	4ba3      	ldr	r3, [pc, #652]	; (8109514 <_strtod_l+0x964>)
 8109286:	f108 38ff 	add.w	r8, r8, #4294967295
 810928a:	4598      	cmp	r8, r3
 810928c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8109290:	f280 80cc 	bge.w	810942c <_strtod_l+0x87c>
 8109294:	eba3 0308 	sub.w	r3, r3, r8
 8109298:	2b1f      	cmp	r3, #31
 810929a:	eba2 0203 	sub.w	r2, r2, r3
 810929e:	f04f 0101 	mov.w	r1, #1
 81092a2:	f300 80b6 	bgt.w	8109412 <_strtod_l+0x862>
 81092a6:	fa01 f303 	lsl.w	r3, r1, r3
 81092aa:	9311      	str	r3, [sp, #68]	; 0x44
 81092ac:	2300      	movs	r3, #0
 81092ae:	930c      	str	r3, [sp, #48]	; 0x30
 81092b0:	eb09 0802 	add.w	r8, r9, r2
 81092b4:	9b04      	ldr	r3, [sp, #16]
 81092b6:	45c1      	cmp	r9, r8
 81092b8:	4417      	add	r7, r2
 81092ba:	441f      	add	r7, r3
 81092bc:	464b      	mov	r3, r9
 81092be:	bfa8      	it	ge
 81092c0:	4643      	movge	r3, r8
 81092c2:	42bb      	cmp	r3, r7
 81092c4:	bfa8      	it	ge
 81092c6:	463b      	movge	r3, r7
 81092c8:	2b00      	cmp	r3, #0
 81092ca:	bfc2      	ittt	gt
 81092cc:	eba8 0803 	subgt.w	r8, r8, r3
 81092d0:	1aff      	subgt	r7, r7, r3
 81092d2:	eba9 0903 	subgt.w	r9, r9, r3
 81092d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 81092d8:	2b00      	cmp	r3, #0
 81092da:	dd17      	ble.n	810930c <_strtod_l+0x75c>
 81092dc:	4631      	mov	r1, r6
 81092de:	461a      	mov	r2, r3
 81092e0:	4620      	mov	r0, r4
 81092e2:	f002 f86d 	bl	810b3c0 <__pow5mult>
 81092e6:	4606      	mov	r6, r0
 81092e8:	2800      	cmp	r0, #0
 81092ea:	f43f aead 	beq.w	8109048 <_strtod_l+0x498>
 81092ee:	4601      	mov	r1, r0
 81092f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 81092f2:	4620      	mov	r0, r4
 81092f4:	f001 ffbe 	bl	810b274 <__multiply>
 81092f8:	900f      	str	r0, [sp, #60]	; 0x3c
 81092fa:	2800      	cmp	r0, #0
 81092fc:	f43f aea4 	beq.w	8109048 <_strtod_l+0x498>
 8109300:	991e      	ldr	r1, [sp, #120]	; 0x78
 8109302:	4620      	mov	r0, r4
 8109304:	f001 fe9a 	bl	810b03c <_Bfree>
 8109308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810930a:	931e      	str	r3, [sp, #120]	; 0x78
 810930c:	f1b8 0f00 	cmp.w	r8, #0
 8109310:	f300 8091 	bgt.w	8109436 <_strtod_l+0x886>
 8109314:	9b08      	ldr	r3, [sp, #32]
 8109316:	2b00      	cmp	r3, #0
 8109318:	dd08      	ble.n	810932c <_strtod_l+0x77c>
 810931a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810931c:	9907      	ldr	r1, [sp, #28]
 810931e:	4620      	mov	r0, r4
 8109320:	f002 f84e 	bl	810b3c0 <__pow5mult>
 8109324:	9007      	str	r0, [sp, #28]
 8109326:	2800      	cmp	r0, #0
 8109328:	f43f ae8e 	beq.w	8109048 <_strtod_l+0x498>
 810932c:	2f00      	cmp	r7, #0
 810932e:	dd08      	ble.n	8109342 <_strtod_l+0x792>
 8109330:	9907      	ldr	r1, [sp, #28]
 8109332:	463a      	mov	r2, r7
 8109334:	4620      	mov	r0, r4
 8109336:	f002 f89d 	bl	810b474 <__lshift>
 810933a:	9007      	str	r0, [sp, #28]
 810933c:	2800      	cmp	r0, #0
 810933e:	f43f ae83 	beq.w	8109048 <_strtod_l+0x498>
 8109342:	f1b9 0f00 	cmp.w	r9, #0
 8109346:	dd08      	ble.n	810935a <_strtod_l+0x7aa>
 8109348:	4631      	mov	r1, r6
 810934a:	464a      	mov	r2, r9
 810934c:	4620      	mov	r0, r4
 810934e:	f002 f891 	bl	810b474 <__lshift>
 8109352:	4606      	mov	r6, r0
 8109354:	2800      	cmp	r0, #0
 8109356:	f43f ae77 	beq.w	8109048 <_strtod_l+0x498>
 810935a:	9a07      	ldr	r2, [sp, #28]
 810935c:	991e      	ldr	r1, [sp, #120]	; 0x78
 810935e:	4620      	mov	r0, r4
 8109360:	f002 f910 	bl	810b584 <__mdiff>
 8109364:	4605      	mov	r5, r0
 8109366:	2800      	cmp	r0, #0
 8109368:	f43f ae6e 	beq.w	8109048 <_strtod_l+0x498>
 810936c:	68c3      	ldr	r3, [r0, #12]
 810936e:	930f      	str	r3, [sp, #60]	; 0x3c
 8109370:	2300      	movs	r3, #0
 8109372:	60c3      	str	r3, [r0, #12]
 8109374:	4631      	mov	r1, r6
 8109376:	f002 f8e9 	bl	810b54c <__mcmp>
 810937a:	2800      	cmp	r0, #0
 810937c:	da65      	bge.n	810944a <_strtod_l+0x89a>
 810937e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109380:	ea53 030a 	orrs.w	r3, r3, sl
 8109384:	f040 8087 	bne.w	8109496 <_strtod_l+0x8e6>
 8109388:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810938c:	2b00      	cmp	r3, #0
 810938e:	f040 8082 	bne.w	8109496 <_strtod_l+0x8e6>
 8109392:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109396:	0d1b      	lsrs	r3, r3, #20
 8109398:	051b      	lsls	r3, r3, #20
 810939a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810939e:	d97a      	bls.n	8109496 <_strtod_l+0x8e6>
 81093a0:	696b      	ldr	r3, [r5, #20]
 81093a2:	b913      	cbnz	r3, 81093aa <_strtod_l+0x7fa>
 81093a4:	692b      	ldr	r3, [r5, #16]
 81093a6:	2b01      	cmp	r3, #1
 81093a8:	dd75      	ble.n	8109496 <_strtod_l+0x8e6>
 81093aa:	4629      	mov	r1, r5
 81093ac:	2201      	movs	r2, #1
 81093ae:	4620      	mov	r0, r4
 81093b0:	f002 f860 	bl	810b474 <__lshift>
 81093b4:	4631      	mov	r1, r6
 81093b6:	4605      	mov	r5, r0
 81093b8:	f002 f8c8 	bl	810b54c <__mcmp>
 81093bc:	2800      	cmp	r0, #0
 81093be:	dd6a      	ble.n	8109496 <_strtod_l+0x8e6>
 81093c0:	9904      	ldr	r1, [sp, #16]
 81093c2:	4a55      	ldr	r2, [pc, #340]	; (8109518 <_strtod_l+0x968>)
 81093c4:	465b      	mov	r3, fp
 81093c6:	2900      	cmp	r1, #0
 81093c8:	f000 8085 	beq.w	81094d6 <_strtod_l+0x926>
 81093cc:	ea02 010b 	and.w	r1, r2, fp
 81093d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 81093d4:	dc7f      	bgt.n	81094d6 <_strtod_l+0x926>
 81093d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 81093da:	f77f aeaa 	ble.w	8109132 <_strtod_l+0x582>
 81093de:	4a4f      	ldr	r2, [pc, #316]	; (810951c <_strtod_l+0x96c>)
 81093e0:	2300      	movs	r3, #0
 81093e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 81093e6:	4650      	mov	r0, sl
 81093e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 81093ec:	4659      	mov	r1, fp
 81093ee:	f7f7 f98b 	bl	8100708 <__aeabi_dmul>
 81093f2:	460b      	mov	r3, r1
 81093f4:	4303      	orrs	r3, r0
 81093f6:	bf08      	it	eq
 81093f8:	2322      	moveq	r3, #34	; 0x22
 81093fa:	4682      	mov	sl, r0
 81093fc:	468b      	mov	fp, r1
 81093fe:	bf08      	it	eq
 8109400:	6023      	streq	r3, [r4, #0]
 8109402:	e62b      	b.n	810905c <_strtod_l+0x4ac>
 8109404:	f04f 32ff 	mov.w	r2, #4294967295
 8109408:	fa02 f303 	lsl.w	r3, r2, r3
 810940c:	ea03 0a0a 	and.w	sl, r3, sl
 8109410:	e6de      	b.n	81091d0 <_strtod_l+0x620>
 8109412:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8109416:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 810941a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 810941e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8109422:	fa01 f308 	lsl.w	r3, r1, r8
 8109426:	930c      	str	r3, [sp, #48]	; 0x30
 8109428:	9111      	str	r1, [sp, #68]	; 0x44
 810942a:	e741      	b.n	81092b0 <_strtod_l+0x700>
 810942c:	2300      	movs	r3, #0
 810942e:	930c      	str	r3, [sp, #48]	; 0x30
 8109430:	2301      	movs	r3, #1
 8109432:	9311      	str	r3, [sp, #68]	; 0x44
 8109434:	e73c      	b.n	81092b0 <_strtod_l+0x700>
 8109436:	991e      	ldr	r1, [sp, #120]	; 0x78
 8109438:	4642      	mov	r2, r8
 810943a:	4620      	mov	r0, r4
 810943c:	f002 f81a 	bl	810b474 <__lshift>
 8109440:	901e      	str	r0, [sp, #120]	; 0x78
 8109442:	2800      	cmp	r0, #0
 8109444:	f47f af66 	bne.w	8109314 <_strtod_l+0x764>
 8109448:	e5fe      	b.n	8109048 <_strtod_l+0x498>
 810944a:	465f      	mov	r7, fp
 810944c:	d16e      	bne.n	810952c <_strtod_l+0x97c>
 810944e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109450:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8109454:	b342      	cbz	r2, 81094a8 <_strtod_l+0x8f8>
 8109456:	4a32      	ldr	r2, [pc, #200]	; (8109520 <_strtod_l+0x970>)
 8109458:	4293      	cmp	r3, r2
 810945a:	d128      	bne.n	81094ae <_strtod_l+0x8fe>
 810945c:	9b04      	ldr	r3, [sp, #16]
 810945e:	4650      	mov	r0, sl
 8109460:	b1eb      	cbz	r3, 810949e <_strtod_l+0x8ee>
 8109462:	4a2d      	ldr	r2, [pc, #180]	; (8109518 <_strtod_l+0x968>)
 8109464:	403a      	ands	r2, r7
 8109466:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 810946a:	f04f 31ff 	mov.w	r1, #4294967295
 810946e:	d819      	bhi.n	81094a4 <_strtod_l+0x8f4>
 8109470:	0d12      	lsrs	r2, r2, #20
 8109472:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8109476:	fa01 f303 	lsl.w	r3, r1, r3
 810947a:	4298      	cmp	r0, r3
 810947c:	d117      	bne.n	81094ae <_strtod_l+0x8fe>
 810947e:	4b29      	ldr	r3, [pc, #164]	; (8109524 <_strtod_l+0x974>)
 8109480:	429f      	cmp	r7, r3
 8109482:	d102      	bne.n	810948a <_strtod_l+0x8da>
 8109484:	3001      	adds	r0, #1
 8109486:	f43f addf 	beq.w	8109048 <_strtod_l+0x498>
 810948a:	4b23      	ldr	r3, [pc, #140]	; (8109518 <_strtod_l+0x968>)
 810948c:	403b      	ands	r3, r7
 810948e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8109492:	f04f 0a00 	mov.w	sl, #0
 8109496:	9b04      	ldr	r3, [sp, #16]
 8109498:	2b00      	cmp	r3, #0
 810949a:	d1a0      	bne.n	81093de <_strtod_l+0x82e>
 810949c:	e5de      	b.n	810905c <_strtod_l+0x4ac>
 810949e:	f04f 33ff 	mov.w	r3, #4294967295
 81094a2:	e7ea      	b.n	810947a <_strtod_l+0x8ca>
 81094a4:	460b      	mov	r3, r1
 81094a6:	e7e8      	b.n	810947a <_strtod_l+0x8ca>
 81094a8:	ea53 030a 	orrs.w	r3, r3, sl
 81094ac:	d088      	beq.n	81093c0 <_strtod_l+0x810>
 81094ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81094b0:	b1db      	cbz	r3, 81094ea <_strtod_l+0x93a>
 81094b2:	423b      	tst	r3, r7
 81094b4:	d0ef      	beq.n	8109496 <_strtod_l+0x8e6>
 81094b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81094b8:	9a04      	ldr	r2, [sp, #16]
 81094ba:	4650      	mov	r0, sl
 81094bc:	4659      	mov	r1, fp
 81094be:	b1c3      	cbz	r3, 81094f2 <_strtod_l+0x942>
 81094c0:	f7ff fb57 	bl	8108b72 <sulp>
 81094c4:	4602      	mov	r2, r0
 81094c6:	460b      	mov	r3, r1
 81094c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81094cc:	f7f6 ff66 	bl	810039c <__adddf3>
 81094d0:	4682      	mov	sl, r0
 81094d2:	468b      	mov	fp, r1
 81094d4:	e7df      	b.n	8109496 <_strtod_l+0x8e6>
 81094d6:	4013      	ands	r3, r2
 81094d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 81094dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 81094e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 81094e4:	f04f 3aff 	mov.w	sl, #4294967295
 81094e8:	e7d5      	b.n	8109496 <_strtod_l+0x8e6>
 81094ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81094ec:	ea13 0f0a 	tst.w	r3, sl
 81094f0:	e7e0      	b.n	81094b4 <_strtod_l+0x904>
 81094f2:	f7ff fb3e 	bl	8108b72 <sulp>
 81094f6:	4602      	mov	r2, r0
 81094f8:	460b      	mov	r3, r1
 81094fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81094fe:	f7f6 ff4b 	bl	8100398 <__aeabi_dsub>
 8109502:	2200      	movs	r2, #0
 8109504:	2300      	movs	r3, #0
 8109506:	4682      	mov	sl, r0
 8109508:	468b      	mov	fp, r1
 810950a:	f7f7 fb65 	bl	8100bd8 <__aeabi_dcmpeq>
 810950e:	2800      	cmp	r0, #0
 8109510:	d0c1      	beq.n	8109496 <_strtod_l+0x8e6>
 8109512:	e60e      	b.n	8109132 <_strtod_l+0x582>
 8109514:	fffffc02 	.word	0xfffffc02
 8109518:	7ff00000 	.word	0x7ff00000
 810951c:	39500000 	.word	0x39500000
 8109520:	000fffff 	.word	0x000fffff
 8109524:	7fefffff 	.word	0x7fefffff
 8109528:	0810e208 	.word	0x0810e208
 810952c:	4631      	mov	r1, r6
 810952e:	4628      	mov	r0, r5
 8109530:	f002 f988 	bl	810b844 <__ratio>
 8109534:	ec59 8b10 	vmov	r8, r9, d0
 8109538:	ee10 0a10 	vmov	r0, s0
 810953c:	2200      	movs	r2, #0
 810953e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8109542:	4649      	mov	r1, r9
 8109544:	f7f7 fb5c 	bl	8100c00 <__aeabi_dcmple>
 8109548:	2800      	cmp	r0, #0
 810954a:	d07c      	beq.n	8109646 <_strtod_l+0xa96>
 810954c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810954e:	2b00      	cmp	r3, #0
 8109550:	d04c      	beq.n	81095ec <_strtod_l+0xa3c>
 8109552:	4b95      	ldr	r3, [pc, #596]	; (81097a8 <_strtod_l+0xbf8>)
 8109554:	2200      	movs	r2, #0
 8109556:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810955a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 81097a8 <_strtod_l+0xbf8>
 810955e:	f04f 0800 	mov.w	r8, #0
 8109562:	4b92      	ldr	r3, [pc, #584]	; (81097ac <_strtod_l+0xbfc>)
 8109564:	403b      	ands	r3, r7
 8109566:	9311      	str	r3, [sp, #68]	; 0x44
 8109568:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810956a:	4b91      	ldr	r3, [pc, #580]	; (81097b0 <_strtod_l+0xc00>)
 810956c:	429a      	cmp	r2, r3
 810956e:	f040 80b2 	bne.w	81096d6 <_strtod_l+0xb26>
 8109572:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810957a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 810957e:	ec4b ab10 	vmov	d0, sl, fp
 8109582:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8109586:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810958a:	f002 f883 	bl	810b694 <__ulp>
 810958e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109592:	ec53 2b10 	vmov	r2, r3, d0
 8109596:	f7f7 f8b7 	bl	8100708 <__aeabi_dmul>
 810959a:	4652      	mov	r2, sl
 810959c:	465b      	mov	r3, fp
 810959e:	f7f6 fefd 	bl	810039c <__adddf3>
 81095a2:	460b      	mov	r3, r1
 81095a4:	4981      	ldr	r1, [pc, #516]	; (81097ac <_strtod_l+0xbfc>)
 81095a6:	4a83      	ldr	r2, [pc, #524]	; (81097b4 <_strtod_l+0xc04>)
 81095a8:	4019      	ands	r1, r3
 81095aa:	4291      	cmp	r1, r2
 81095ac:	4682      	mov	sl, r0
 81095ae:	d95e      	bls.n	810966e <_strtod_l+0xabe>
 81095b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81095b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 81095b6:	4293      	cmp	r3, r2
 81095b8:	d103      	bne.n	81095c2 <_strtod_l+0xa12>
 81095ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81095bc:	3301      	adds	r3, #1
 81095be:	f43f ad43 	beq.w	8109048 <_strtod_l+0x498>
 81095c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 81097c0 <_strtod_l+0xc10>
 81095c6:	f04f 3aff 	mov.w	sl, #4294967295
 81095ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 81095cc:	4620      	mov	r0, r4
 81095ce:	f001 fd35 	bl	810b03c <_Bfree>
 81095d2:	9907      	ldr	r1, [sp, #28]
 81095d4:	4620      	mov	r0, r4
 81095d6:	f001 fd31 	bl	810b03c <_Bfree>
 81095da:	4631      	mov	r1, r6
 81095dc:	4620      	mov	r0, r4
 81095de:	f001 fd2d 	bl	810b03c <_Bfree>
 81095e2:	4629      	mov	r1, r5
 81095e4:	4620      	mov	r0, r4
 81095e6:	f001 fd29 	bl	810b03c <_Bfree>
 81095ea:	e613      	b.n	8109214 <_strtod_l+0x664>
 81095ec:	f1ba 0f00 	cmp.w	sl, #0
 81095f0:	d11b      	bne.n	810962a <_strtod_l+0xa7a>
 81095f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81095f6:	b9f3      	cbnz	r3, 8109636 <_strtod_l+0xa86>
 81095f8:	4b6b      	ldr	r3, [pc, #428]	; (81097a8 <_strtod_l+0xbf8>)
 81095fa:	2200      	movs	r2, #0
 81095fc:	4640      	mov	r0, r8
 81095fe:	4649      	mov	r1, r9
 8109600:	f7f7 faf4 	bl	8100bec <__aeabi_dcmplt>
 8109604:	b9d0      	cbnz	r0, 810963c <_strtod_l+0xa8c>
 8109606:	4640      	mov	r0, r8
 8109608:	4649      	mov	r1, r9
 810960a:	4b6b      	ldr	r3, [pc, #428]	; (81097b8 <_strtod_l+0xc08>)
 810960c:	2200      	movs	r2, #0
 810960e:	f7f7 f87b 	bl	8100708 <__aeabi_dmul>
 8109612:	4680      	mov	r8, r0
 8109614:	4689      	mov	r9, r1
 8109616:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810961a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 810961e:	931b      	str	r3, [sp, #108]	; 0x6c
 8109620:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8109624:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8109628:	e79b      	b.n	8109562 <_strtod_l+0x9b2>
 810962a:	f1ba 0f01 	cmp.w	sl, #1
 810962e:	d102      	bne.n	8109636 <_strtod_l+0xa86>
 8109630:	2f00      	cmp	r7, #0
 8109632:	f43f ad7e 	beq.w	8109132 <_strtod_l+0x582>
 8109636:	4b61      	ldr	r3, [pc, #388]	; (81097bc <_strtod_l+0xc0c>)
 8109638:	2200      	movs	r2, #0
 810963a:	e78c      	b.n	8109556 <_strtod_l+0x9a6>
 810963c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 81097b8 <_strtod_l+0xc08>
 8109640:	f04f 0800 	mov.w	r8, #0
 8109644:	e7e7      	b.n	8109616 <_strtod_l+0xa66>
 8109646:	4b5c      	ldr	r3, [pc, #368]	; (81097b8 <_strtod_l+0xc08>)
 8109648:	4640      	mov	r0, r8
 810964a:	4649      	mov	r1, r9
 810964c:	2200      	movs	r2, #0
 810964e:	f7f7 f85b 	bl	8100708 <__aeabi_dmul>
 8109652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109654:	4680      	mov	r8, r0
 8109656:	4689      	mov	r9, r1
 8109658:	b933      	cbnz	r3, 8109668 <_strtod_l+0xab8>
 810965a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810965e:	9012      	str	r0, [sp, #72]	; 0x48
 8109660:	9313      	str	r3, [sp, #76]	; 0x4c
 8109662:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8109666:	e7dd      	b.n	8109624 <_strtod_l+0xa74>
 8109668:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 810966c:	e7f9      	b.n	8109662 <_strtod_l+0xab2>
 810966e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8109672:	9b04      	ldr	r3, [sp, #16]
 8109674:	2b00      	cmp	r3, #0
 8109676:	d1a8      	bne.n	81095ca <_strtod_l+0xa1a>
 8109678:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810967c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 810967e:	0d1b      	lsrs	r3, r3, #20
 8109680:	051b      	lsls	r3, r3, #20
 8109682:	429a      	cmp	r2, r3
 8109684:	d1a1      	bne.n	81095ca <_strtod_l+0xa1a>
 8109686:	4640      	mov	r0, r8
 8109688:	4649      	mov	r1, r9
 810968a:	f7f7 fcf7 	bl	810107c <__aeabi_d2lz>
 810968e:	f7f7 f80d 	bl	81006ac <__aeabi_l2d>
 8109692:	4602      	mov	r2, r0
 8109694:	460b      	mov	r3, r1
 8109696:	4640      	mov	r0, r8
 8109698:	4649      	mov	r1, r9
 810969a:	f7f6 fe7d 	bl	8100398 <__aeabi_dsub>
 810969e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 81096a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81096a4:	ea43 030a 	orr.w	r3, r3, sl
 81096a8:	4313      	orrs	r3, r2
 81096aa:	4680      	mov	r8, r0
 81096ac:	4689      	mov	r9, r1
 81096ae:	d053      	beq.n	8109758 <_strtod_l+0xba8>
 81096b0:	a335      	add	r3, pc, #212	; (adr r3, 8109788 <_strtod_l+0xbd8>)
 81096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81096b6:	f7f7 fa99 	bl	8100bec <__aeabi_dcmplt>
 81096ba:	2800      	cmp	r0, #0
 81096bc:	f47f acce 	bne.w	810905c <_strtod_l+0x4ac>
 81096c0:	a333      	add	r3, pc, #204	; (adr r3, 8109790 <_strtod_l+0xbe0>)
 81096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81096c6:	4640      	mov	r0, r8
 81096c8:	4649      	mov	r1, r9
 81096ca:	f7f7 faad 	bl	8100c28 <__aeabi_dcmpgt>
 81096ce:	2800      	cmp	r0, #0
 81096d0:	f43f af7b 	beq.w	81095ca <_strtod_l+0xa1a>
 81096d4:	e4c2      	b.n	810905c <_strtod_l+0x4ac>
 81096d6:	9b04      	ldr	r3, [sp, #16]
 81096d8:	b333      	cbz	r3, 8109728 <_strtod_l+0xb78>
 81096da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81096dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 81096e0:	d822      	bhi.n	8109728 <_strtod_l+0xb78>
 81096e2:	a32d      	add	r3, pc, #180	; (adr r3, 8109798 <_strtod_l+0xbe8>)
 81096e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81096e8:	4640      	mov	r0, r8
 81096ea:	4649      	mov	r1, r9
 81096ec:	f7f7 fa88 	bl	8100c00 <__aeabi_dcmple>
 81096f0:	b1a0      	cbz	r0, 810971c <_strtod_l+0xb6c>
 81096f2:	4649      	mov	r1, r9
 81096f4:	4640      	mov	r0, r8
 81096f6:	f7f7 fadf 	bl	8100cb8 <__aeabi_d2uiz>
 81096fa:	2801      	cmp	r0, #1
 81096fc:	bf38      	it	cc
 81096fe:	2001      	movcc	r0, #1
 8109700:	f7f6 ff88 	bl	8100614 <__aeabi_ui2d>
 8109704:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109706:	4680      	mov	r8, r0
 8109708:	4689      	mov	r9, r1
 810970a:	bb13      	cbnz	r3, 8109752 <_strtod_l+0xba2>
 810970c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109710:	9014      	str	r0, [sp, #80]	; 0x50
 8109712:	9315      	str	r3, [sp, #84]	; 0x54
 8109714:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8109718:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 810971c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810971e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8109720:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8109724:	1a9b      	subs	r3, r3, r2
 8109726:	930d      	str	r3, [sp, #52]	; 0x34
 8109728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810972c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8109730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8109734:	f001 ffae 	bl	810b694 <__ulp>
 8109738:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810973c:	ec53 2b10 	vmov	r2, r3, d0
 8109740:	f7f6 ffe2 	bl	8100708 <__aeabi_dmul>
 8109744:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109748:	f7f6 fe28 	bl	810039c <__adddf3>
 810974c:	4682      	mov	sl, r0
 810974e:	468b      	mov	fp, r1
 8109750:	e78f      	b.n	8109672 <_strtod_l+0xac2>
 8109752:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8109756:	e7dd      	b.n	8109714 <_strtod_l+0xb64>
 8109758:	a311      	add	r3, pc, #68	; (adr r3, 81097a0 <_strtod_l+0xbf0>)
 810975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810975e:	f7f7 fa45 	bl	8100bec <__aeabi_dcmplt>
 8109762:	e7b4      	b.n	81096ce <_strtod_l+0xb1e>
 8109764:	2300      	movs	r3, #0
 8109766:	930e      	str	r3, [sp, #56]	; 0x38
 8109768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 810976a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810976c:	6013      	str	r3, [r2, #0]
 810976e:	f7ff ba65 	b.w	8108c3c <_strtod_l+0x8c>
 8109772:	2b65      	cmp	r3, #101	; 0x65
 8109774:	f43f ab5d 	beq.w	8108e32 <_strtod_l+0x282>
 8109778:	2b45      	cmp	r3, #69	; 0x45
 810977a:	f43f ab5a 	beq.w	8108e32 <_strtod_l+0x282>
 810977e:	2201      	movs	r2, #1
 8109780:	f7ff bb92 	b.w	8108ea8 <_strtod_l+0x2f8>
 8109784:	f3af 8000 	nop.w
 8109788:	94a03595 	.word	0x94a03595
 810978c:	3fdfffff 	.word	0x3fdfffff
 8109790:	35afe535 	.word	0x35afe535
 8109794:	3fe00000 	.word	0x3fe00000
 8109798:	ffc00000 	.word	0xffc00000
 810979c:	41dfffff 	.word	0x41dfffff
 81097a0:	94a03595 	.word	0x94a03595
 81097a4:	3fcfffff 	.word	0x3fcfffff
 81097a8:	3ff00000 	.word	0x3ff00000
 81097ac:	7ff00000 	.word	0x7ff00000
 81097b0:	7fe00000 	.word	0x7fe00000
 81097b4:	7c9fffff 	.word	0x7c9fffff
 81097b8:	3fe00000 	.word	0x3fe00000
 81097bc:	bff00000 	.word	0xbff00000
 81097c0:	7fefffff 	.word	0x7fefffff

081097c4 <_strtod_r>:
 81097c4:	4b01      	ldr	r3, [pc, #4]	; (81097cc <_strtod_r+0x8>)
 81097c6:	f7ff b9f3 	b.w	8108bb0 <_strtod_l>
 81097ca:	bf00      	nop
 81097cc:	100000c8 	.word	0x100000c8

081097d0 <_strtol_l.isra.0>:
 81097d0:	2b01      	cmp	r3, #1
 81097d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81097d6:	d001      	beq.n	81097dc <_strtol_l.isra.0+0xc>
 81097d8:	2b24      	cmp	r3, #36	; 0x24
 81097da:	d906      	bls.n	81097ea <_strtol_l.isra.0+0x1a>
 81097dc:	f7fd feda 	bl	8107594 <__errno>
 81097e0:	2316      	movs	r3, #22
 81097e2:	6003      	str	r3, [r0, #0]
 81097e4:	2000      	movs	r0, #0
 81097e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81097ea:	4f3a      	ldr	r7, [pc, #232]	; (81098d4 <_strtol_l.isra.0+0x104>)
 81097ec:	468e      	mov	lr, r1
 81097ee:	4676      	mov	r6, lr
 81097f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 81097f4:	5de5      	ldrb	r5, [r4, r7]
 81097f6:	f015 0508 	ands.w	r5, r5, #8
 81097fa:	d1f8      	bne.n	81097ee <_strtol_l.isra.0+0x1e>
 81097fc:	2c2d      	cmp	r4, #45	; 0x2d
 81097fe:	d134      	bne.n	810986a <_strtol_l.isra.0+0x9a>
 8109800:	f89e 4000 	ldrb.w	r4, [lr]
 8109804:	f04f 0801 	mov.w	r8, #1
 8109808:	f106 0e02 	add.w	lr, r6, #2
 810980c:	2b00      	cmp	r3, #0
 810980e:	d05c      	beq.n	81098ca <_strtol_l.isra.0+0xfa>
 8109810:	2b10      	cmp	r3, #16
 8109812:	d10c      	bne.n	810982e <_strtol_l.isra.0+0x5e>
 8109814:	2c30      	cmp	r4, #48	; 0x30
 8109816:	d10a      	bne.n	810982e <_strtol_l.isra.0+0x5e>
 8109818:	f89e 4000 	ldrb.w	r4, [lr]
 810981c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8109820:	2c58      	cmp	r4, #88	; 0x58
 8109822:	d14d      	bne.n	81098c0 <_strtol_l.isra.0+0xf0>
 8109824:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8109828:	2310      	movs	r3, #16
 810982a:	f10e 0e02 	add.w	lr, lr, #2
 810982e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8109832:	f10c 3cff 	add.w	ip, ip, #4294967295
 8109836:	2600      	movs	r6, #0
 8109838:	fbbc f9f3 	udiv	r9, ip, r3
 810983c:	4635      	mov	r5, r6
 810983e:	fb03 ca19 	mls	sl, r3, r9, ip
 8109842:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8109846:	2f09      	cmp	r7, #9
 8109848:	d818      	bhi.n	810987c <_strtol_l.isra.0+0xac>
 810984a:	463c      	mov	r4, r7
 810984c:	42a3      	cmp	r3, r4
 810984e:	dd24      	ble.n	810989a <_strtol_l.isra.0+0xca>
 8109850:	2e00      	cmp	r6, #0
 8109852:	db1f      	blt.n	8109894 <_strtol_l.isra.0+0xc4>
 8109854:	45a9      	cmp	r9, r5
 8109856:	d31d      	bcc.n	8109894 <_strtol_l.isra.0+0xc4>
 8109858:	d101      	bne.n	810985e <_strtol_l.isra.0+0x8e>
 810985a:	45a2      	cmp	sl, r4
 810985c:	db1a      	blt.n	8109894 <_strtol_l.isra.0+0xc4>
 810985e:	fb05 4503 	mla	r5, r5, r3, r4
 8109862:	2601      	movs	r6, #1
 8109864:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8109868:	e7eb      	b.n	8109842 <_strtol_l.isra.0+0x72>
 810986a:	2c2b      	cmp	r4, #43	; 0x2b
 810986c:	bf08      	it	eq
 810986e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8109872:	46a8      	mov	r8, r5
 8109874:	bf08      	it	eq
 8109876:	f106 0e02 	addeq.w	lr, r6, #2
 810987a:	e7c7      	b.n	810980c <_strtol_l.isra.0+0x3c>
 810987c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8109880:	2f19      	cmp	r7, #25
 8109882:	d801      	bhi.n	8109888 <_strtol_l.isra.0+0xb8>
 8109884:	3c37      	subs	r4, #55	; 0x37
 8109886:	e7e1      	b.n	810984c <_strtol_l.isra.0+0x7c>
 8109888:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 810988c:	2f19      	cmp	r7, #25
 810988e:	d804      	bhi.n	810989a <_strtol_l.isra.0+0xca>
 8109890:	3c57      	subs	r4, #87	; 0x57
 8109892:	e7db      	b.n	810984c <_strtol_l.isra.0+0x7c>
 8109894:	f04f 36ff 	mov.w	r6, #4294967295
 8109898:	e7e4      	b.n	8109864 <_strtol_l.isra.0+0x94>
 810989a:	2e00      	cmp	r6, #0
 810989c:	da05      	bge.n	81098aa <_strtol_l.isra.0+0xda>
 810989e:	2322      	movs	r3, #34	; 0x22
 81098a0:	6003      	str	r3, [r0, #0]
 81098a2:	4665      	mov	r5, ip
 81098a4:	b942      	cbnz	r2, 81098b8 <_strtol_l.isra.0+0xe8>
 81098a6:	4628      	mov	r0, r5
 81098a8:	e79d      	b.n	81097e6 <_strtol_l.isra.0+0x16>
 81098aa:	f1b8 0f00 	cmp.w	r8, #0
 81098ae:	d000      	beq.n	81098b2 <_strtol_l.isra.0+0xe2>
 81098b0:	426d      	negs	r5, r5
 81098b2:	2a00      	cmp	r2, #0
 81098b4:	d0f7      	beq.n	81098a6 <_strtol_l.isra.0+0xd6>
 81098b6:	b10e      	cbz	r6, 81098bc <_strtol_l.isra.0+0xec>
 81098b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 81098bc:	6011      	str	r1, [r2, #0]
 81098be:	e7f2      	b.n	81098a6 <_strtol_l.isra.0+0xd6>
 81098c0:	2430      	movs	r4, #48	; 0x30
 81098c2:	2b00      	cmp	r3, #0
 81098c4:	d1b3      	bne.n	810982e <_strtol_l.isra.0+0x5e>
 81098c6:	2308      	movs	r3, #8
 81098c8:	e7b1      	b.n	810982e <_strtol_l.isra.0+0x5e>
 81098ca:	2c30      	cmp	r4, #48	; 0x30
 81098cc:	d0a4      	beq.n	8109818 <_strtol_l.isra.0+0x48>
 81098ce:	230a      	movs	r3, #10
 81098d0:	e7ad      	b.n	810982e <_strtol_l.isra.0+0x5e>
 81098d2:	bf00      	nop
 81098d4:	0810e231 	.word	0x0810e231

081098d8 <_strtol_r>:
 81098d8:	f7ff bf7a 	b.w	81097d0 <_strtol_l.isra.0>

081098dc <__swbuf_r>:
 81098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81098de:	460e      	mov	r6, r1
 81098e0:	4614      	mov	r4, r2
 81098e2:	4605      	mov	r5, r0
 81098e4:	b118      	cbz	r0, 81098ee <__swbuf_r+0x12>
 81098e6:	6983      	ldr	r3, [r0, #24]
 81098e8:	b90b      	cbnz	r3, 81098ee <__swbuf_r+0x12>
 81098ea:	f7fd ff73 	bl	81077d4 <__sinit>
 81098ee:	4b21      	ldr	r3, [pc, #132]	; (8109974 <__swbuf_r+0x98>)
 81098f0:	429c      	cmp	r4, r3
 81098f2:	d12b      	bne.n	810994c <__swbuf_r+0x70>
 81098f4:	686c      	ldr	r4, [r5, #4]
 81098f6:	69a3      	ldr	r3, [r4, #24]
 81098f8:	60a3      	str	r3, [r4, #8]
 81098fa:	89a3      	ldrh	r3, [r4, #12]
 81098fc:	071a      	lsls	r2, r3, #28
 81098fe:	d52f      	bpl.n	8109960 <__swbuf_r+0x84>
 8109900:	6923      	ldr	r3, [r4, #16]
 8109902:	b36b      	cbz	r3, 8109960 <__swbuf_r+0x84>
 8109904:	6923      	ldr	r3, [r4, #16]
 8109906:	6820      	ldr	r0, [r4, #0]
 8109908:	1ac0      	subs	r0, r0, r3
 810990a:	6963      	ldr	r3, [r4, #20]
 810990c:	b2f6      	uxtb	r6, r6
 810990e:	4283      	cmp	r3, r0
 8109910:	4637      	mov	r7, r6
 8109912:	dc04      	bgt.n	810991e <__swbuf_r+0x42>
 8109914:	4621      	mov	r1, r4
 8109916:	4628      	mov	r0, r5
 8109918:	f7fd fec8 	bl	81076ac <_fflush_r>
 810991c:	bb30      	cbnz	r0, 810996c <__swbuf_r+0x90>
 810991e:	68a3      	ldr	r3, [r4, #8]
 8109920:	3b01      	subs	r3, #1
 8109922:	60a3      	str	r3, [r4, #8]
 8109924:	6823      	ldr	r3, [r4, #0]
 8109926:	1c5a      	adds	r2, r3, #1
 8109928:	6022      	str	r2, [r4, #0]
 810992a:	701e      	strb	r6, [r3, #0]
 810992c:	6963      	ldr	r3, [r4, #20]
 810992e:	3001      	adds	r0, #1
 8109930:	4283      	cmp	r3, r0
 8109932:	d004      	beq.n	810993e <__swbuf_r+0x62>
 8109934:	89a3      	ldrh	r3, [r4, #12]
 8109936:	07db      	lsls	r3, r3, #31
 8109938:	d506      	bpl.n	8109948 <__swbuf_r+0x6c>
 810993a:	2e0a      	cmp	r6, #10
 810993c:	d104      	bne.n	8109948 <__swbuf_r+0x6c>
 810993e:	4621      	mov	r1, r4
 8109940:	4628      	mov	r0, r5
 8109942:	f7fd feb3 	bl	81076ac <_fflush_r>
 8109946:	b988      	cbnz	r0, 810996c <__swbuf_r+0x90>
 8109948:	4638      	mov	r0, r7
 810994a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810994c:	4b0a      	ldr	r3, [pc, #40]	; (8109978 <__swbuf_r+0x9c>)
 810994e:	429c      	cmp	r4, r3
 8109950:	d101      	bne.n	8109956 <__swbuf_r+0x7a>
 8109952:	68ac      	ldr	r4, [r5, #8]
 8109954:	e7cf      	b.n	81098f6 <__swbuf_r+0x1a>
 8109956:	4b09      	ldr	r3, [pc, #36]	; (810997c <__swbuf_r+0xa0>)
 8109958:	429c      	cmp	r4, r3
 810995a:	bf08      	it	eq
 810995c:	68ec      	ldreq	r4, [r5, #12]
 810995e:	e7ca      	b.n	81098f6 <__swbuf_r+0x1a>
 8109960:	4621      	mov	r1, r4
 8109962:	4628      	mov	r0, r5
 8109964:	f000 f81e 	bl	81099a4 <__swsetup_r>
 8109968:	2800      	cmp	r0, #0
 810996a:	d0cb      	beq.n	8109904 <__swbuf_r+0x28>
 810996c:	f04f 37ff 	mov.w	r7, #4294967295
 8109970:	e7ea      	b.n	8109948 <__swbuf_r+0x6c>
 8109972:	bf00      	nop
 8109974:	0810e160 	.word	0x0810e160
 8109978:	0810e180 	.word	0x0810e180
 810997c:	0810e140 	.word	0x0810e140

08109980 <_write_r>:
 8109980:	b538      	push	{r3, r4, r5, lr}
 8109982:	4d07      	ldr	r5, [pc, #28]	; (81099a0 <_write_r+0x20>)
 8109984:	4604      	mov	r4, r0
 8109986:	4608      	mov	r0, r1
 8109988:	4611      	mov	r1, r2
 810998a:	2200      	movs	r2, #0
 810998c:	602a      	str	r2, [r5, #0]
 810998e:	461a      	mov	r2, r3
 8109990:	f7f9 f913 	bl	8102bba <_write>
 8109994:	1c43      	adds	r3, r0, #1
 8109996:	d102      	bne.n	810999e <_write_r+0x1e>
 8109998:	682b      	ldr	r3, [r5, #0]
 810999a:	b103      	cbz	r3, 810999e <_write_r+0x1e>
 810999c:	6023      	str	r3, [r4, #0]
 810999e:	bd38      	pop	{r3, r4, r5, pc}
 81099a0:	1000048c 	.word	0x1000048c

081099a4 <__swsetup_r>:
 81099a4:	4b32      	ldr	r3, [pc, #200]	; (8109a70 <__swsetup_r+0xcc>)
 81099a6:	b570      	push	{r4, r5, r6, lr}
 81099a8:	681d      	ldr	r5, [r3, #0]
 81099aa:	4606      	mov	r6, r0
 81099ac:	460c      	mov	r4, r1
 81099ae:	b125      	cbz	r5, 81099ba <__swsetup_r+0x16>
 81099b0:	69ab      	ldr	r3, [r5, #24]
 81099b2:	b913      	cbnz	r3, 81099ba <__swsetup_r+0x16>
 81099b4:	4628      	mov	r0, r5
 81099b6:	f7fd ff0d 	bl	81077d4 <__sinit>
 81099ba:	4b2e      	ldr	r3, [pc, #184]	; (8109a74 <__swsetup_r+0xd0>)
 81099bc:	429c      	cmp	r4, r3
 81099be:	d10f      	bne.n	81099e0 <__swsetup_r+0x3c>
 81099c0:	686c      	ldr	r4, [r5, #4]
 81099c2:	89a3      	ldrh	r3, [r4, #12]
 81099c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81099c8:	0719      	lsls	r1, r3, #28
 81099ca:	d42c      	bmi.n	8109a26 <__swsetup_r+0x82>
 81099cc:	06dd      	lsls	r5, r3, #27
 81099ce:	d411      	bmi.n	81099f4 <__swsetup_r+0x50>
 81099d0:	2309      	movs	r3, #9
 81099d2:	6033      	str	r3, [r6, #0]
 81099d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 81099d8:	81a3      	strh	r3, [r4, #12]
 81099da:	f04f 30ff 	mov.w	r0, #4294967295
 81099de:	e03e      	b.n	8109a5e <__swsetup_r+0xba>
 81099e0:	4b25      	ldr	r3, [pc, #148]	; (8109a78 <__swsetup_r+0xd4>)
 81099e2:	429c      	cmp	r4, r3
 81099e4:	d101      	bne.n	81099ea <__swsetup_r+0x46>
 81099e6:	68ac      	ldr	r4, [r5, #8]
 81099e8:	e7eb      	b.n	81099c2 <__swsetup_r+0x1e>
 81099ea:	4b24      	ldr	r3, [pc, #144]	; (8109a7c <__swsetup_r+0xd8>)
 81099ec:	429c      	cmp	r4, r3
 81099ee:	bf08      	it	eq
 81099f0:	68ec      	ldreq	r4, [r5, #12]
 81099f2:	e7e6      	b.n	81099c2 <__swsetup_r+0x1e>
 81099f4:	0758      	lsls	r0, r3, #29
 81099f6:	d512      	bpl.n	8109a1e <__swsetup_r+0x7a>
 81099f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81099fa:	b141      	cbz	r1, 8109a0e <__swsetup_r+0x6a>
 81099fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8109a00:	4299      	cmp	r1, r3
 8109a02:	d002      	beq.n	8109a0a <__swsetup_r+0x66>
 8109a04:	4630      	mov	r0, r6
 8109a06:	f7fd ffc3 	bl	8107990 <_free_r>
 8109a0a:	2300      	movs	r3, #0
 8109a0c:	6363      	str	r3, [r4, #52]	; 0x34
 8109a0e:	89a3      	ldrh	r3, [r4, #12]
 8109a10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8109a14:	81a3      	strh	r3, [r4, #12]
 8109a16:	2300      	movs	r3, #0
 8109a18:	6063      	str	r3, [r4, #4]
 8109a1a:	6923      	ldr	r3, [r4, #16]
 8109a1c:	6023      	str	r3, [r4, #0]
 8109a1e:	89a3      	ldrh	r3, [r4, #12]
 8109a20:	f043 0308 	orr.w	r3, r3, #8
 8109a24:	81a3      	strh	r3, [r4, #12]
 8109a26:	6923      	ldr	r3, [r4, #16]
 8109a28:	b94b      	cbnz	r3, 8109a3e <__swsetup_r+0x9a>
 8109a2a:	89a3      	ldrh	r3, [r4, #12]
 8109a2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8109a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8109a34:	d003      	beq.n	8109a3e <__swsetup_r+0x9a>
 8109a36:	4621      	mov	r1, r4
 8109a38:	4630      	mov	r0, r6
 8109a3a:	f001 fa53 	bl	810aee4 <__smakebuf_r>
 8109a3e:	89a0      	ldrh	r0, [r4, #12]
 8109a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8109a44:	f010 0301 	ands.w	r3, r0, #1
 8109a48:	d00a      	beq.n	8109a60 <__swsetup_r+0xbc>
 8109a4a:	2300      	movs	r3, #0
 8109a4c:	60a3      	str	r3, [r4, #8]
 8109a4e:	6963      	ldr	r3, [r4, #20]
 8109a50:	425b      	negs	r3, r3
 8109a52:	61a3      	str	r3, [r4, #24]
 8109a54:	6923      	ldr	r3, [r4, #16]
 8109a56:	b943      	cbnz	r3, 8109a6a <__swsetup_r+0xc6>
 8109a58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8109a5c:	d1ba      	bne.n	81099d4 <__swsetup_r+0x30>
 8109a5e:	bd70      	pop	{r4, r5, r6, pc}
 8109a60:	0781      	lsls	r1, r0, #30
 8109a62:	bf58      	it	pl
 8109a64:	6963      	ldrpl	r3, [r4, #20]
 8109a66:	60a3      	str	r3, [r4, #8]
 8109a68:	e7f4      	b.n	8109a54 <__swsetup_r+0xb0>
 8109a6a:	2000      	movs	r0, #0
 8109a6c:	e7f7      	b.n	8109a5e <__swsetup_r+0xba>
 8109a6e:	bf00      	nop
 8109a70:	10000060 	.word	0x10000060
 8109a74:	0810e160 	.word	0x0810e160
 8109a78:	0810e180 	.word	0x0810e180
 8109a7c:	0810e140 	.word	0x0810e140

08109a80 <_close_r>:
 8109a80:	b538      	push	{r3, r4, r5, lr}
 8109a82:	4d06      	ldr	r5, [pc, #24]	; (8109a9c <_close_r+0x1c>)
 8109a84:	2300      	movs	r3, #0
 8109a86:	4604      	mov	r4, r0
 8109a88:	4608      	mov	r0, r1
 8109a8a:	602b      	str	r3, [r5, #0]
 8109a8c:	f7f9 f8b1 	bl	8102bf2 <_close>
 8109a90:	1c43      	adds	r3, r0, #1
 8109a92:	d102      	bne.n	8109a9a <_close_r+0x1a>
 8109a94:	682b      	ldr	r3, [r5, #0]
 8109a96:	b103      	cbz	r3, 8109a9a <_close_r+0x1a>
 8109a98:	6023      	str	r3, [r4, #0]
 8109a9a:	bd38      	pop	{r3, r4, r5, pc}
 8109a9c:	1000048c 	.word	0x1000048c

08109aa0 <quorem>:
 8109aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109aa4:	6903      	ldr	r3, [r0, #16]
 8109aa6:	690c      	ldr	r4, [r1, #16]
 8109aa8:	42a3      	cmp	r3, r4
 8109aaa:	4607      	mov	r7, r0
 8109aac:	f2c0 8081 	blt.w	8109bb2 <quorem+0x112>
 8109ab0:	3c01      	subs	r4, #1
 8109ab2:	f101 0814 	add.w	r8, r1, #20
 8109ab6:	f100 0514 	add.w	r5, r0, #20
 8109aba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109abe:	9301      	str	r3, [sp, #4]
 8109ac0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8109ac4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109ac8:	3301      	adds	r3, #1
 8109aca:	429a      	cmp	r2, r3
 8109acc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8109ad0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8109ad4:	fbb2 f6f3 	udiv	r6, r2, r3
 8109ad8:	d331      	bcc.n	8109b3e <quorem+0x9e>
 8109ada:	f04f 0e00 	mov.w	lr, #0
 8109ade:	4640      	mov	r0, r8
 8109ae0:	46ac      	mov	ip, r5
 8109ae2:	46f2      	mov	sl, lr
 8109ae4:	f850 2b04 	ldr.w	r2, [r0], #4
 8109ae8:	b293      	uxth	r3, r2
 8109aea:	fb06 e303 	mla	r3, r6, r3, lr
 8109aee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8109af2:	b29b      	uxth	r3, r3
 8109af4:	ebaa 0303 	sub.w	r3, sl, r3
 8109af8:	0c12      	lsrs	r2, r2, #16
 8109afa:	f8dc a000 	ldr.w	sl, [ip]
 8109afe:	fb06 e202 	mla	r2, r6, r2, lr
 8109b02:	fa13 f38a 	uxtah	r3, r3, sl
 8109b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8109b0a:	fa1f fa82 	uxth.w	sl, r2
 8109b0e:	f8dc 2000 	ldr.w	r2, [ip]
 8109b12:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8109b16:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109b1a:	b29b      	uxth	r3, r3
 8109b1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109b20:	4581      	cmp	r9, r0
 8109b22:	f84c 3b04 	str.w	r3, [ip], #4
 8109b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8109b2a:	d2db      	bcs.n	8109ae4 <quorem+0x44>
 8109b2c:	f855 300b 	ldr.w	r3, [r5, fp]
 8109b30:	b92b      	cbnz	r3, 8109b3e <quorem+0x9e>
 8109b32:	9b01      	ldr	r3, [sp, #4]
 8109b34:	3b04      	subs	r3, #4
 8109b36:	429d      	cmp	r5, r3
 8109b38:	461a      	mov	r2, r3
 8109b3a:	d32e      	bcc.n	8109b9a <quorem+0xfa>
 8109b3c:	613c      	str	r4, [r7, #16]
 8109b3e:	4638      	mov	r0, r7
 8109b40:	f001 fd04 	bl	810b54c <__mcmp>
 8109b44:	2800      	cmp	r0, #0
 8109b46:	db24      	blt.n	8109b92 <quorem+0xf2>
 8109b48:	3601      	adds	r6, #1
 8109b4a:	4628      	mov	r0, r5
 8109b4c:	f04f 0c00 	mov.w	ip, #0
 8109b50:	f858 2b04 	ldr.w	r2, [r8], #4
 8109b54:	f8d0 e000 	ldr.w	lr, [r0]
 8109b58:	b293      	uxth	r3, r2
 8109b5a:	ebac 0303 	sub.w	r3, ip, r3
 8109b5e:	0c12      	lsrs	r2, r2, #16
 8109b60:	fa13 f38e 	uxtah	r3, r3, lr
 8109b64:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8109b68:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109b6c:	b29b      	uxth	r3, r3
 8109b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109b72:	45c1      	cmp	r9, r8
 8109b74:	f840 3b04 	str.w	r3, [r0], #4
 8109b78:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8109b7c:	d2e8      	bcs.n	8109b50 <quorem+0xb0>
 8109b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8109b82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8109b86:	b922      	cbnz	r2, 8109b92 <quorem+0xf2>
 8109b88:	3b04      	subs	r3, #4
 8109b8a:	429d      	cmp	r5, r3
 8109b8c:	461a      	mov	r2, r3
 8109b8e:	d30a      	bcc.n	8109ba6 <quorem+0x106>
 8109b90:	613c      	str	r4, [r7, #16]
 8109b92:	4630      	mov	r0, r6
 8109b94:	b003      	add	sp, #12
 8109b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109b9a:	6812      	ldr	r2, [r2, #0]
 8109b9c:	3b04      	subs	r3, #4
 8109b9e:	2a00      	cmp	r2, #0
 8109ba0:	d1cc      	bne.n	8109b3c <quorem+0x9c>
 8109ba2:	3c01      	subs	r4, #1
 8109ba4:	e7c7      	b.n	8109b36 <quorem+0x96>
 8109ba6:	6812      	ldr	r2, [r2, #0]
 8109ba8:	3b04      	subs	r3, #4
 8109baa:	2a00      	cmp	r2, #0
 8109bac:	d1f0      	bne.n	8109b90 <quorem+0xf0>
 8109bae:	3c01      	subs	r4, #1
 8109bb0:	e7eb      	b.n	8109b8a <quorem+0xea>
 8109bb2:	2000      	movs	r0, #0
 8109bb4:	e7ee      	b.n	8109b94 <quorem+0xf4>
	...

08109bb8 <_dtoa_r>:
 8109bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109bbc:	ed2d 8b02 	vpush	{d8}
 8109bc0:	ec57 6b10 	vmov	r6, r7, d0
 8109bc4:	b095      	sub	sp, #84	; 0x54
 8109bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8109bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8109bcc:	9105      	str	r1, [sp, #20]
 8109bce:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8109bd2:	4604      	mov	r4, r0
 8109bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8109bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8109bd8:	b975      	cbnz	r5, 8109bf8 <_dtoa_r+0x40>
 8109bda:	2010      	movs	r0, #16
 8109bdc:	f7fd fec0 	bl	8107960 <malloc>
 8109be0:	4602      	mov	r2, r0
 8109be2:	6260      	str	r0, [r4, #36]	; 0x24
 8109be4:	b920      	cbnz	r0, 8109bf0 <_dtoa_r+0x38>
 8109be6:	4bb2      	ldr	r3, [pc, #712]	; (8109eb0 <_dtoa_r+0x2f8>)
 8109be8:	21ea      	movs	r1, #234	; 0xea
 8109bea:	48b2      	ldr	r0, [pc, #712]	; (8109eb4 <_dtoa_r+0x2fc>)
 8109bec:	f002 f9a0 	bl	810bf30 <__assert_func>
 8109bf0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8109bf4:	6005      	str	r5, [r0, #0]
 8109bf6:	60c5      	str	r5, [r0, #12]
 8109bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109bfa:	6819      	ldr	r1, [r3, #0]
 8109bfc:	b151      	cbz	r1, 8109c14 <_dtoa_r+0x5c>
 8109bfe:	685a      	ldr	r2, [r3, #4]
 8109c00:	604a      	str	r2, [r1, #4]
 8109c02:	2301      	movs	r3, #1
 8109c04:	4093      	lsls	r3, r2
 8109c06:	608b      	str	r3, [r1, #8]
 8109c08:	4620      	mov	r0, r4
 8109c0a:	f001 fa17 	bl	810b03c <_Bfree>
 8109c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109c10:	2200      	movs	r2, #0
 8109c12:	601a      	str	r2, [r3, #0]
 8109c14:	1e3b      	subs	r3, r7, #0
 8109c16:	bfb9      	ittee	lt
 8109c18:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8109c1c:	9303      	strlt	r3, [sp, #12]
 8109c1e:	2300      	movge	r3, #0
 8109c20:	f8c8 3000 	strge.w	r3, [r8]
 8109c24:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8109c28:	4ba3      	ldr	r3, [pc, #652]	; (8109eb8 <_dtoa_r+0x300>)
 8109c2a:	bfbc      	itt	lt
 8109c2c:	2201      	movlt	r2, #1
 8109c2e:	f8c8 2000 	strlt.w	r2, [r8]
 8109c32:	ea33 0309 	bics.w	r3, r3, r9
 8109c36:	d11b      	bne.n	8109c70 <_dtoa_r+0xb8>
 8109c38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109c3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8109c3e:	6013      	str	r3, [r2, #0]
 8109c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109c44:	4333      	orrs	r3, r6
 8109c46:	f000 857a 	beq.w	810a73e <_dtoa_r+0xb86>
 8109c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109c4c:	b963      	cbnz	r3, 8109c68 <_dtoa_r+0xb0>
 8109c4e:	4b9b      	ldr	r3, [pc, #620]	; (8109ebc <_dtoa_r+0x304>)
 8109c50:	e024      	b.n	8109c9c <_dtoa_r+0xe4>
 8109c52:	4b9b      	ldr	r3, [pc, #620]	; (8109ec0 <_dtoa_r+0x308>)
 8109c54:	9300      	str	r3, [sp, #0]
 8109c56:	3308      	adds	r3, #8
 8109c58:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8109c5a:	6013      	str	r3, [r2, #0]
 8109c5c:	9800      	ldr	r0, [sp, #0]
 8109c5e:	b015      	add	sp, #84	; 0x54
 8109c60:	ecbd 8b02 	vpop	{d8}
 8109c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109c68:	4b94      	ldr	r3, [pc, #592]	; (8109ebc <_dtoa_r+0x304>)
 8109c6a:	9300      	str	r3, [sp, #0]
 8109c6c:	3303      	adds	r3, #3
 8109c6e:	e7f3      	b.n	8109c58 <_dtoa_r+0xa0>
 8109c70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109c74:	2200      	movs	r2, #0
 8109c76:	ec51 0b17 	vmov	r0, r1, d7
 8109c7a:	2300      	movs	r3, #0
 8109c7c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8109c80:	f7f6 ffaa 	bl	8100bd8 <__aeabi_dcmpeq>
 8109c84:	4680      	mov	r8, r0
 8109c86:	b158      	cbz	r0, 8109ca0 <_dtoa_r+0xe8>
 8109c88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109c8a:	2301      	movs	r3, #1
 8109c8c:	6013      	str	r3, [r2, #0]
 8109c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109c90:	2b00      	cmp	r3, #0
 8109c92:	f000 8551 	beq.w	810a738 <_dtoa_r+0xb80>
 8109c96:	488b      	ldr	r0, [pc, #556]	; (8109ec4 <_dtoa_r+0x30c>)
 8109c98:	6018      	str	r0, [r3, #0]
 8109c9a:	1e43      	subs	r3, r0, #1
 8109c9c:	9300      	str	r3, [sp, #0]
 8109c9e:	e7dd      	b.n	8109c5c <_dtoa_r+0xa4>
 8109ca0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8109ca4:	aa12      	add	r2, sp, #72	; 0x48
 8109ca6:	a913      	add	r1, sp, #76	; 0x4c
 8109ca8:	4620      	mov	r0, r4
 8109caa:	f001 fd6f 	bl	810b78c <__d2b>
 8109cae:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8109cb2:	4683      	mov	fp, r0
 8109cb4:	2d00      	cmp	r5, #0
 8109cb6:	d07c      	beq.n	8109db2 <_dtoa_r+0x1fa>
 8109cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109cba:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8109cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109cc2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8109cc6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8109cca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8109cce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8109cd2:	4b7d      	ldr	r3, [pc, #500]	; (8109ec8 <_dtoa_r+0x310>)
 8109cd4:	2200      	movs	r2, #0
 8109cd6:	4630      	mov	r0, r6
 8109cd8:	4639      	mov	r1, r7
 8109cda:	f7f6 fb5d 	bl	8100398 <__aeabi_dsub>
 8109cde:	a36e      	add	r3, pc, #440	; (adr r3, 8109e98 <_dtoa_r+0x2e0>)
 8109ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109ce4:	f7f6 fd10 	bl	8100708 <__aeabi_dmul>
 8109ce8:	a36d      	add	r3, pc, #436	; (adr r3, 8109ea0 <_dtoa_r+0x2e8>)
 8109cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109cee:	f7f6 fb55 	bl	810039c <__adddf3>
 8109cf2:	4606      	mov	r6, r0
 8109cf4:	4628      	mov	r0, r5
 8109cf6:	460f      	mov	r7, r1
 8109cf8:	f7f6 fc9c 	bl	8100634 <__aeabi_i2d>
 8109cfc:	a36a      	add	r3, pc, #424	; (adr r3, 8109ea8 <_dtoa_r+0x2f0>)
 8109cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d02:	f7f6 fd01 	bl	8100708 <__aeabi_dmul>
 8109d06:	4602      	mov	r2, r0
 8109d08:	460b      	mov	r3, r1
 8109d0a:	4630      	mov	r0, r6
 8109d0c:	4639      	mov	r1, r7
 8109d0e:	f7f6 fb45 	bl	810039c <__adddf3>
 8109d12:	4606      	mov	r6, r0
 8109d14:	460f      	mov	r7, r1
 8109d16:	f7f6 ffa7 	bl	8100c68 <__aeabi_d2iz>
 8109d1a:	2200      	movs	r2, #0
 8109d1c:	4682      	mov	sl, r0
 8109d1e:	2300      	movs	r3, #0
 8109d20:	4630      	mov	r0, r6
 8109d22:	4639      	mov	r1, r7
 8109d24:	f7f6 ff62 	bl	8100bec <__aeabi_dcmplt>
 8109d28:	b148      	cbz	r0, 8109d3e <_dtoa_r+0x186>
 8109d2a:	4650      	mov	r0, sl
 8109d2c:	f7f6 fc82 	bl	8100634 <__aeabi_i2d>
 8109d30:	4632      	mov	r2, r6
 8109d32:	463b      	mov	r3, r7
 8109d34:	f7f6 ff50 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d38:	b908      	cbnz	r0, 8109d3e <_dtoa_r+0x186>
 8109d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109d3e:	f1ba 0f16 	cmp.w	sl, #22
 8109d42:	d854      	bhi.n	8109dee <_dtoa_r+0x236>
 8109d44:	4b61      	ldr	r3, [pc, #388]	; (8109ecc <_dtoa_r+0x314>)
 8109d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8109d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109d4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109d52:	f7f6 ff4b 	bl	8100bec <__aeabi_dcmplt>
 8109d56:	2800      	cmp	r0, #0
 8109d58:	d04b      	beq.n	8109df2 <_dtoa_r+0x23a>
 8109d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109d5e:	2300      	movs	r3, #0
 8109d60:	930e      	str	r3, [sp, #56]	; 0x38
 8109d62:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109d64:	1b5d      	subs	r5, r3, r5
 8109d66:	1e6b      	subs	r3, r5, #1
 8109d68:	9304      	str	r3, [sp, #16]
 8109d6a:	bf43      	ittte	mi
 8109d6c:	2300      	movmi	r3, #0
 8109d6e:	f1c5 0801 	rsbmi	r8, r5, #1
 8109d72:	9304      	strmi	r3, [sp, #16]
 8109d74:	f04f 0800 	movpl.w	r8, #0
 8109d78:	f1ba 0f00 	cmp.w	sl, #0
 8109d7c:	db3b      	blt.n	8109df6 <_dtoa_r+0x23e>
 8109d7e:	9b04      	ldr	r3, [sp, #16]
 8109d80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8109d84:	4453      	add	r3, sl
 8109d86:	9304      	str	r3, [sp, #16]
 8109d88:	2300      	movs	r3, #0
 8109d8a:	9306      	str	r3, [sp, #24]
 8109d8c:	9b05      	ldr	r3, [sp, #20]
 8109d8e:	2b09      	cmp	r3, #9
 8109d90:	d869      	bhi.n	8109e66 <_dtoa_r+0x2ae>
 8109d92:	2b05      	cmp	r3, #5
 8109d94:	bfc4      	itt	gt
 8109d96:	3b04      	subgt	r3, #4
 8109d98:	9305      	strgt	r3, [sp, #20]
 8109d9a:	9b05      	ldr	r3, [sp, #20]
 8109d9c:	f1a3 0302 	sub.w	r3, r3, #2
 8109da0:	bfcc      	ite	gt
 8109da2:	2500      	movgt	r5, #0
 8109da4:	2501      	movle	r5, #1
 8109da6:	2b03      	cmp	r3, #3
 8109da8:	d869      	bhi.n	8109e7e <_dtoa_r+0x2c6>
 8109daa:	e8df f003 	tbb	[pc, r3]
 8109dae:	4e2c      	.short	0x4e2c
 8109db0:	5a4c      	.short	0x5a4c
 8109db2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8109db6:	441d      	add	r5, r3
 8109db8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8109dbc:	2b20      	cmp	r3, #32
 8109dbe:	bfc1      	itttt	gt
 8109dc0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8109dc4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8109dc8:	fa09 f303 	lslgt.w	r3, r9, r3
 8109dcc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8109dd0:	bfda      	itte	le
 8109dd2:	f1c3 0320 	rsble	r3, r3, #32
 8109dd6:	fa06 f003 	lslle.w	r0, r6, r3
 8109dda:	4318      	orrgt	r0, r3
 8109ddc:	f7f6 fc1a 	bl	8100614 <__aeabi_ui2d>
 8109de0:	2301      	movs	r3, #1
 8109de2:	4606      	mov	r6, r0
 8109de4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8109de8:	3d01      	subs	r5, #1
 8109dea:	9310      	str	r3, [sp, #64]	; 0x40
 8109dec:	e771      	b.n	8109cd2 <_dtoa_r+0x11a>
 8109dee:	2301      	movs	r3, #1
 8109df0:	e7b6      	b.n	8109d60 <_dtoa_r+0x1a8>
 8109df2:	900e      	str	r0, [sp, #56]	; 0x38
 8109df4:	e7b5      	b.n	8109d62 <_dtoa_r+0x1aa>
 8109df6:	f1ca 0300 	rsb	r3, sl, #0
 8109dfa:	9306      	str	r3, [sp, #24]
 8109dfc:	2300      	movs	r3, #0
 8109dfe:	eba8 080a 	sub.w	r8, r8, sl
 8109e02:	930d      	str	r3, [sp, #52]	; 0x34
 8109e04:	e7c2      	b.n	8109d8c <_dtoa_r+0x1d4>
 8109e06:	2300      	movs	r3, #0
 8109e08:	9308      	str	r3, [sp, #32]
 8109e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e0c:	2b00      	cmp	r3, #0
 8109e0e:	dc39      	bgt.n	8109e84 <_dtoa_r+0x2cc>
 8109e10:	f04f 0901 	mov.w	r9, #1
 8109e14:	f8cd 9004 	str.w	r9, [sp, #4]
 8109e18:	464b      	mov	r3, r9
 8109e1a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8109e1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8109e20:	2200      	movs	r2, #0
 8109e22:	6042      	str	r2, [r0, #4]
 8109e24:	2204      	movs	r2, #4
 8109e26:	f102 0614 	add.w	r6, r2, #20
 8109e2a:	429e      	cmp	r6, r3
 8109e2c:	6841      	ldr	r1, [r0, #4]
 8109e2e:	d92f      	bls.n	8109e90 <_dtoa_r+0x2d8>
 8109e30:	4620      	mov	r0, r4
 8109e32:	f001 f8c3 	bl	810afbc <_Balloc>
 8109e36:	9000      	str	r0, [sp, #0]
 8109e38:	2800      	cmp	r0, #0
 8109e3a:	d14b      	bne.n	8109ed4 <_dtoa_r+0x31c>
 8109e3c:	4b24      	ldr	r3, [pc, #144]	; (8109ed0 <_dtoa_r+0x318>)
 8109e3e:	4602      	mov	r2, r0
 8109e40:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8109e44:	e6d1      	b.n	8109bea <_dtoa_r+0x32>
 8109e46:	2301      	movs	r3, #1
 8109e48:	e7de      	b.n	8109e08 <_dtoa_r+0x250>
 8109e4a:	2300      	movs	r3, #0
 8109e4c:	9308      	str	r3, [sp, #32]
 8109e4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109e50:	eb0a 0903 	add.w	r9, sl, r3
 8109e54:	f109 0301 	add.w	r3, r9, #1
 8109e58:	2b01      	cmp	r3, #1
 8109e5a:	9301      	str	r3, [sp, #4]
 8109e5c:	bfb8      	it	lt
 8109e5e:	2301      	movlt	r3, #1
 8109e60:	e7dd      	b.n	8109e1e <_dtoa_r+0x266>
 8109e62:	2301      	movs	r3, #1
 8109e64:	e7f2      	b.n	8109e4c <_dtoa_r+0x294>
 8109e66:	2501      	movs	r5, #1
 8109e68:	2300      	movs	r3, #0
 8109e6a:	9305      	str	r3, [sp, #20]
 8109e6c:	9508      	str	r5, [sp, #32]
 8109e6e:	f04f 39ff 	mov.w	r9, #4294967295
 8109e72:	2200      	movs	r2, #0
 8109e74:	f8cd 9004 	str.w	r9, [sp, #4]
 8109e78:	2312      	movs	r3, #18
 8109e7a:	9209      	str	r2, [sp, #36]	; 0x24
 8109e7c:	e7cf      	b.n	8109e1e <_dtoa_r+0x266>
 8109e7e:	2301      	movs	r3, #1
 8109e80:	9308      	str	r3, [sp, #32]
 8109e82:	e7f4      	b.n	8109e6e <_dtoa_r+0x2b6>
 8109e84:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8109e88:	f8cd 9004 	str.w	r9, [sp, #4]
 8109e8c:	464b      	mov	r3, r9
 8109e8e:	e7c6      	b.n	8109e1e <_dtoa_r+0x266>
 8109e90:	3101      	adds	r1, #1
 8109e92:	6041      	str	r1, [r0, #4]
 8109e94:	0052      	lsls	r2, r2, #1
 8109e96:	e7c6      	b.n	8109e26 <_dtoa_r+0x26e>
 8109e98:	636f4361 	.word	0x636f4361
 8109e9c:	3fd287a7 	.word	0x3fd287a7
 8109ea0:	8b60c8b3 	.word	0x8b60c8b3
 8109ea4:	3fc68a28 	.word	0x3fc68a28
 8109ea8:	509f79fb 	.word	0x509f79fb
 8109eac:	3fd34413 	.word	0x3fd34413
 8109eb0:	0810e33e 	.word	0x0810e33e
 8109eb4:	0810e355 	.word	0x0810e355
 8109eb8:	7ff00000 	.word	0x7ff00000
 8109ebc:	0810e33a 	.word	0x0810e33a
 8109ec0:	0810e331 	.word	0x0810e331
 8109ec4:	0810e1b5 	.word	0x0810e1b5
 8109ec8:	3ff80000 	.word	0x3ff80000
 8109ecc:	0810e4d0 	.word	0x0810e4d0
 8109ed0:	0810e3b4 	.word	0x0810e3b4
 8109ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8109ed6:	9a00      	ldr	r2, [sp, #0]
 8109ed8:	601a      	str	r2, [r3, #0]
 8109eda:	9b01      	ldr	r3, [sp, #4]
 8109edc:	2b0e      	cmp	r3, #14
 8109ede:	f200 80ad 	bhi.w	810a03c <_dtoa_r+0x484>
 8109ee2:	2d00      	cmp	r5, #0
 8109ee4:	f000 80aa 	beq.w	810a03c <_dtoa_r+0x484>
 8109ee8:	f1ba 0f00 	cmp.w	sl, #0
 8109eec:	dd36      	ble.n	8109f5c <_dtoa_r+0x3a4>
 8109eee:	4ac3      	ldr	r2, [pc, #780]	; (810a1fc <_dtoa_r+0x644>)
 8109ef0:	f00a 030f 	and.w	r3, sl, #15
 8109ef4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8109ef8:	ed93 7b00 	vldr	d7, [r3]
 8109efc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8109f00:	ea4f 172a 	mov.w	r7, sl, asr #4
 8109f04:	eeb0 8a47 	vmov.f32	s16, s14
 8109f08:	eef0 8a67 	vmov.f32	s17, s15
 8109f0c:	d016      	beq.n	8109f3c <_dtoa_r+0x384>
 8109f0e:	4bbc      	ldr	r3, [pc, #752]	; (810a200 <_dtoa_r+0x648>)
 8109f10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109f14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8109f18:	f7f6 fd20 	bl	810095c <__aeabi_ddiv>
 8109f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109f20:	f007 070f 	and.w	r7, r7, #15
 8109f24:	2503      	movs	r5, #3
 8109f26:	4eb6      	ldr	r6, [pc, #728]	; (810a200 <_dtoa_r+0x648>)
 8109f28:	b957      	cbnz	r7, 8109f40 <_dtoa_r+0x388>
 8109f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8109f2e:	ec53 2b18 	vmov	r2, r3, d8
 8109f32:	f7f6 fd13 	bl	810095c <__aeabi_ddiv>
 8109f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109f3a:	e029      	b.n	8109f90 <_dtoa_r+0x3d8>
 8109f3c:	2502      	movs	r5, #2
 8109f3e:	e7f2      	b.n	8109f26 <_dtoa_r+0x36e>
 8109f40:	07f9      	lsls	r1, r7, #31
 8109f42:	d508      	bpl.n	8109f56 <_dtoa_r+0x39e>
 8109f44:	ec51 0b18 	vmov	r0, r1, d8
 8109f48:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109f4c:	f7f6 fbdc 	bl	8100708 <__aeabi_dmul>
 8109f50:	ec41 0b18 	vmov	d8, r0, r1
 8109f54:	3501      	adds	r5, #1
 8109f56:	107f      	asrs	r7, r7, #1
 8109f58:	3608      	adds	r6, #8
 8109f5a:	e7e5      	b.n	8109f28 <_dtoa_r+0x370>
 8109f5c:	f000 80a6 	beq.w	810a0ac <_dtoa_r+0x4f4>
 8109f60:	f1ca 0600 	rsb	r6, sl, #0
 8109f64:	4ba5      	ldr	r3, [pc, #660]	; (810a1fc <_dtoa_r+0x644>)
 8109f66:	4fa6      	ldr	r7, [pc, #664]	; (810a200 <_dtoa_r+0x648>)
 8109f68:	f006 020f 	and.w	r2, r6, #15
 8109f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109f74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109f78:	f7f6 fbc6 	bl	8100708 <__aeabi_dmul>
 8109f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109f80:	1136      	asrs	r6, r6, #4
 8109f82:	2300      	movs	r3, #0
 8109f84:	2502      	movs	r5, #2
 8109f86:	2e00      	cmp	r6, #0
 8109f88:	f040 8085 	bne.w	810a096 <_dtoa_r+0x4de>
 8109f8c:	2b00      	cmp	r3, #0
 8109f8e:	d1d2      	bne.n	8109f36 <_dtoa_r+0x37e>
 8109f90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109f92:	2b00      	cmp	r3, #0
 8109f94:	f000 808c 	beq.w	810a0b0 <_dtoa_r+0x4f8>
 8109f98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109f9c:	4b99      	ldr	r3, [pc, #612]	; (810a204 <_dtoa_r+0x64c>)
 8109f9e:	2200      	movs	r2, #0
 8109fa0:	4630      	mov	r0, r6
 8109fa2:	4639      	mov	r1, r7
 8109fa4:	f7f6 fe22 	bl	8100bec <__aeabi_dcmplt>
 8109fa8:	2800      	cmp	r0, #0
 8109faa:	f000 8081 	beq.w	810a0b0 <_dtoa_r+0x4f8>
 8109fae:	9b01      	ldr	r3, [sp, #4]
 8109fb0:	2b00      	cmp	r3, #0
 8109fb2:	d07d      	beq.n	810a0b0 <_dtoa_r+0x4f8>
 8109fb4:	f1b9 0f00 	cmp.w	r9, #0
 8109fb8:	dd3c      	ble.n	810a034 <_dtoa_r+0x47c>
 8109fba:	f10a 33ff 	add.w	r3, sl, #4294967295
 8109fbe:	9307      	str	r3, [sp, #28]
 8109fc0:	2200      	movs	r2, #0
 8109fc2:	4b91      	ldr	r3, [pc, #580]	; (810a208 <_dtoa_r+0x650>)
 8109fc4:	4630      	mov	r0, r6
 8109fc6:	4639      	mov	r1, r7
 8109fc8:	f7f6 fb9e 	bl	8100708 <__aeabi_dmul>
 8109fcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109fd0:	3501      	adds	r5, #1
 8109fd2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8109fd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109fda:	4628      	mov	r0, r5
 8109fdc:	f7f6 fb2a 	bl	8100634 <__aeabi_i2d>
 8109fe0:	4632      	mov	r2, r6
 8109fe2:	463b      	mov	r3, r7
 8109fe4:	f7f6 fb90 	bl	8100708 <__aeabi_dmul>
 8109fe8:	4b88      	ldr	r3, [pc, #544]	; (810a20c <_dtoa_r+0x654>)
 8109fea:	2200      	movs	r2, #0
 8109fec:	f7f6 f9d6 	bl	810039c <__adddf3>
 8109ff0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8109ff4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109ff8:	9303      	str	r3, [sp, #12]
 8109ffa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109ffc:	2b00      	cmp	r3, #0
 8109ffe:	d15c      	bne.n	810a0ba <_dtoa_r+0x502>
 810a000:	4b83      	ldr	r3, [pc, #524]	; (810a210 <_dtoa_r+0x658>)
 810a002:	2200      	movs	r2, #0
 810a004:	4630      	mov	r0, r6
 810a006:	4639      	mov	r1, r7
 810a008:	f7f6 f9c6 	bl	8100398 <__aeabi_dsub>
 810a00c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810a010:	4606      	mov	r6, r0
 810a012:	460f      	mov	r7, r1
 810a014:	f7f6 fe08 	bl	8100c28 <__aeabi_dcmpgt>
 810a018:	2800      	cmp	r0, #0
 810a01a:	f040 8296 	bne.w	810a54a <_dtoa_r+0x992>
 810a01e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810a022:	4630      	mov	r0, r6
 810a024:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810a028:	4639      	mov	r1, r7
 810a02a:	f7f6 fddf 	bl	8100bec <__aeabi_dcmplt>
 810a02e:	2800      	cmp	r0, #0
 810a030:	f040 8288 	bne.w	810a544 <_dtoa_r+0x98c>
 810a034:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810a038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810a03c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810a03e:	2b00      	cmp	r3, #0
 810a040:	f2c0 8158 	blt.w	810a2f4 <_dtoa_r+0x73c>
 810a044:	f1ba 0f0e 	cmp.w	sl, #14
 810a048:	f300 8154 	bgt.w	810a2f4 <_dtoa_r+0x73c>
 810a04c:	4b6b      	ldr	r3, [pc, #428]	; (810a1fc <_dtoa_r+0x644>)
 810a04e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 810a052:	e9d3 8900 	ldrd	r8, r9, [r3]
 810a056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a058:	2b00      	cmp	r3, #0
 810a05a:	f280 80e3 	bge.w	810a224 <_dtoa_r+0x66c>
 810a05e:	9b01      	ldr	r3, [sp, #4]
 810a060:	2b00      	cmp	r3, #0
 810a062:	f300 80df 	bgt.w	810a224 <_dtoa_r+0x66c>
 810a066:	f040 826d 	bne.w	810a544 <_dtoa_r+0x98c>
 810a06a:	4b69      	ldr	r3, [pc, #420]	; (810a210 <_dtoa_r+0x658>)
 810a06c:	2200      	movs	r2, #0
 810a06e:	4640      	mov	r0, r8
 810a070:	4649      	mov	r1, r9
 810a072:	f7f6 fb49 	bl	8100708 <__aeabi_dmul>
 810a076:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810a07a:	f7f6 fdcb 	bl	8100c14 <__aeabi_dcmpge>
 810a07e:	9e01      	ldr	r6, [sp, #4]
 810a080:	4637      	mov	r7, r6
 810a082:	2800      	cmp	r0, #0
 810a084:	f040 8243 	bne.w	810a50e <_dtoa_r+0x956>
 810a088:	9d00      	ldr	r5, [sp, #0]
 810a08a:	2331      	movs	r3, #49	; 0x31
 810a08c:	f805 3b01 	strb.w	r3, [r5], #1
 810a090:	f10a 0a01 	add.w	sl, sl, #1
 810a094:	e23f      	b.n	810a516 <_dtoa_r+0x95e>
 810a096:	07f2      	lsls	r2, r6, #31
 810a098:	d505      	bpl.n	810a0a6 <_dtoa_r+0x4ee>
 810a09a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a09e:	f7f6 fb33 	bl	8100708 <__aeabi_dmul>
 810a0a2:	3501      	adds	r5, #1
 810a0a4:	2301      	movs	r3, #1
 810a0a6:	1076      	asrs	r6, r6, #1
 810a0a8:	3708      	adds	r7, #8
 810a0aa:	e76c      	b.n	8109f86 <_dtoa_r+0x3ce>
 810a0ac:	2502      	movs	r5, #2
 810a0ae:	e76f      	b.n	8109f90 <_dtoa_r+0x3d8>
 810a0b0:	9b01      	ldr	r3, [sp, #4]
 810a0b2:	f8cd a01c 	str.w	sl, [sp, #28]
 810a0b6:	930c      	str	r3, [sp, #48]	; 0x30
 810a0b8:	e78d      	b.n	8109fd6 <_dtoa_r+0x41e>
 810a0ba:	9900      	ldr	r1, [sp, #0]
 810a0bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 810a0be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 810a0c0:	4b4e      	ldr	r3, [pc, #312]	; (810a1fc <_dtoa_r+0x644>)
 810a0c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 810a0c6:	4401      	add	r1, r0
 810a0c8:	9102      	str	r1, [sp, #8]
 810a0ca:	9908      	ldr	r1, [sp, #32]
 810a0cc:	eeb0 8a47 	vmov.f32	s16, s14
 810a0d0:	eef0 8a67 	vmov.f32	s17, s15
 810a0d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810a0d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810a0dc:	2900      	cmp	r1, #0
 810a0de:	d045      	beq.n	810a16c <_dtoa_r+0x5b4>
 810a0e0:	494c      	ldr	r1, [pc, #304]	; (810a214 <_dtoa_r+0x65c>)
 810a0e2:	2000      	movs	r0, #0
 810a0e4:	f7f6 fc3a 	bl	810095c <__aeabi_ddiv>
 810a0e8:	ec53 2b18 	vmov	r2, r3, d8
 810a0ec:	f7f6 f954 	bl	8100398 <__aeabi_dsub>
 810a0f0:	9d00      	ldr	r5, [sp, #0]
 810a0f2:	ec41 0b18 	vmov	d8, r0, r1
 810a0f6:	4639      	mov	r1, r7
 810a0f8:	4630      	mov	r0, r6
 810a0fa:	f7f6 fdb5 	bl	8100c68 <__aeabi_d2iz>
 810a0fe:	900c      	str	r0, [sp, #48]	; 0x30
 810a100:	f7f6 fa98 	bl	8100634 <__aeabi_i2d>
 810a104:	4602      	mov	r2, r0
 810a106:	460b      	mov	r3, r1
 810a108:	4630      	mov	r0, r6
 810a10a:	4639      	mov	r1, r7
 810a10c:	f7f6 f944 	bl	8100398 <__aeabi_dsub>
 810a110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810a112:	3330      	adds	r3, #48	; 0x30
 810a114:	f805 3b01 	strb.w	r3, [r5], #1
 810a118:	ec53 2b18 	vmov	r2, r3, d8
 810a11c:	4606      	mov	r6, r0
 810a11e:	460f      	mov	r7, r1
 810a120:	f7f6 fd64 	bl	8100bec <__aeabi_dcmplt>
 810a124:	2800      	cmp	r0, #0
 810a126:	d165      	bne.n	810a1f4 <_dtoa_r+0x63c>
 810a128:	4632      	mov	r2, r6
 810a12a:	463b      	mov	r3, r7
 810a12c:	4935      	ldr	r1, [pc, #212]	; (810a204 <_dtoa_r+0x64c>)
 810a12e:	2000      	movs	r0, #0
 810a130:	f7f6 f932 	bl	8100398 <__aeabi_dsub>
 810a134:	ec53 2b18 	vmov	r2, r3, d8
 810a138:	f7f6 fd58 	bl	8100bec <__aeabi_dcmplt>
 810a13c:	2800      	cmp	r0, #0
 810a13e:	f040 80b9 	bne.w	810a2b4 <_dtoa_r+0x6fc>
 810a142:	9b02      	ldr	r3, [sp, #8]
 810a144:	429d      	cmp	r5, r3
 810a146:	f43f af75 	beq.w	810a034 <_dtoa_r+0x47c>
 810a14a:	4b2f      	ldr	r3, [pc, #188]	; (810a208 <_dtoa_r+0x650>)
 810a14c:	ec51 0b18 	vmov	r0, r1, d8
 810a150:	2200      	movs	r2, #0
 810a152:	f7f6 fad9 	bl	8100708 <__aeabi_dmul>
 810a156:	4b2c      	ldr	r3, [pc, #176]	; (810a208 <_dtoa_r+0x650>)
 810a158:	ec41 0b18 	vmov	d8, r0, r1
 810a15c:	2200      	movs	r2, #0
 810a15e:	4630      	mov	r0, r6
 810a160:	4639      	mov	r1, r7
 810a162:	f7f6 fad1 	bl	8100708 <__aeabi_dmul>
 810a166:	4606      	mov	r6, r0
 810a168:	460f      	mov	r7, r1
 810a16a:	e7c4      	b.n	810a0f6 <_dtoa_r+0x53e>
 810a16c:	ec51 0b17 	vmov	r0, r1, d7
 810a170:	f7f6 faca 	bl	8100708 <__aeabi_dmul>
 810a174:	9b02      	ldr	r3, [sp, #8]
 810a176:	9d00      	ldr	r5, [sp, #0]
 810a178:	930c      	str	r3, [sp, #48]	; 0x30
 810a17a:	ec41 0b18 	vmov	d8, r0, r1
 810a17e:	4639      	mov	r1, r7
 810a180:	4630      	mov	r0, r6
 810a182:	f7f6 fd71 	bl	8100c68 <__aeabi_d2iz>
 810a186:	9011      	str	r0, [sp, #68]	; 0x44
 810a188:	f7f6 fa54 	bl	8100634 <__aeabi_i2d>
 810a18c:	4602      	mov	r2, r0
 810a18e:	460b      	mov	r3, r1
 810a190:	4630      	mov	r0, r6
 810a192:	4639      	mov	r1, r7
 810a194:	f7f6 f900 	bl	8100398 <__aeabi_dsub>
 810a198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810a19a:	3330      	adds	r3, #48	; 0x30
 810a19c:	f805 3b01 	strb.w	r3, [r5], #1
 810a1a0:	9b02      	ldr	r3, [sp, #8]
 810a1a2:	429d      	cmp	r5, r3
 810a1a4:	4606      	mov	r6, r0
 810a1a6:	460f      	mov	r7, r1
 810a1a8:	f04f 0200 	mov.w	r2, #0
 810a1ac:	d134      	bne.n	810a218 <_dtoa_r+0x660>
 810a1ae:	4b19      	ldr	r3, [pc, #100]	; (810a214 <_dtoa_r+0x65c>)
 810a1b0:	ec51 0b18 	vmov	r0, r1, d8
 810a1b4:	f7f6 f8f2 	bl	810039c <__adddf3>
 810a1b8:	4602      	mov	r2, r0
 810a1ba:	460b      	mov	r3, r1
 810a1bc:	4630      	mov	r0, r6
 810a1be:	4639      	mov	r1, r7
 810a1c0:	f7f6 fd32 	bl	8100c28 <__aeabi_dcmpgt>
 810a1c4:	2800      	cmp	r0, #0
 810a1c6:	d175      	bne.n	810a2b4 <_dtoa_r+0x6fc>
 810a1c8:	ec53 2b18 	vmov	r2, r3, d8
 810a1cc:	4911      	ldr	r1, [pc, #68]	; (810a214 <_dtoa_r+0x65c>)
 810a1ce:	2000      	movs	r0, #0
 810a1d0:	f7f6 f8e2 	bl	8100398 <__aeabi_dsub>
 810a1d4:	4602      	mov	r2, r0
 810a1d6:	460b      	mov	r3, r1
 810a1d8:	4630      	mov	r0, r6
 810a1da:	4639      	mov	r1, r7
 810a1dc:	f7f6 fd06 	bl	8100bec <__aeabi_dcmplt>
 810a1e0:	2800      	cmp	r0, #0
 810a1e2:	f43f af27 	beq.w	810a034 <_dtoa_r+0x47c>
 810a1e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a1e8:	1e6b      	subs	r3, r5, #1
 810a1ea:	930c      	str	r3, [sp, #48]	; 0x30
 810a1ec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810a1f0:	2b30      	cmp	r3, #48	; 0x30
 810a1f2:	d0f8      	beq.n	810a1e6 <_dtoa_r+0x62e>
 810a1f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810a1f8:	e04a      	b.n	810a290 <_dtoa_r+0x6d8>
 810a1fa:	bf00      	nop
 810a1fc:	0810e4d0 	.word	0x0810e4d0
 810a200:	0810e4a8 	.word	0x0810e4a8
 810a204:	3ff00000 	.word	0x3ff00000
 810a208:	40240000 	.word	0x40240000
 810a20c:	401c0000 	.word	0x401c0000
 810a210:	40140000 	.word	0x40140000
 810a214:	3fe00000 	.word	0x3fe00000
 810a218:	4baf      	ldr	r3, [pc, #700]	; (810a4d8 <_dtoa_r+0x920>)
 810a21a:	f7f6 fa75 	bl	8100708 <__aeabi_dmul>
 810a21e:	4606      	mov	r6, r0
 810a220:	460f      	mov	r7, r1
 810a222:	e7ac      	b.n	810a17e <_dtoa_r+0x5c6>
 810a224:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810a228:	9d00      	ldr	r5, [sp, #0]
 810a22a:	4642      	mov	r2, r8
 810a22c:	464b      	mov	r3, r9
 810a22e:	4630      	mov	r0, r6
 810a230:	4639      	mov	r1, r7
 810a232:	f7f6 fb93 	bl	810095c <__aeabi_ddiv>
 810a236:	f7f6 fd17 	bl	8100c68 <__aeabi_d2iz>
 810a23a:	9002      	str	r0, [sp, #8]
 810a23c:	f7f6 f9fa 	bl	8100634 <__aeabi_i2d>
 810a240:	4642      	mov	r2, r8
 810a242:	464b      	mov	r3, r9
 810a244:	f7f6 fa60 	bl	8100708 <__aeabi_dmul>
 810a248:	4602      	mov	r2, r0
 810a24a:	460b      	mov	r3, r1
 810a24c:	4630      	mov	r0, r6
 810a24e:	4639      	mov	r1, r7
 810a250:	f7f6 f8a2 	bl	8100398 <__aeabi_dsub>
 810a254:	9e02      	ldr	r6, [sp, #8]
 810a256:	9f01      	ldr	r7, [sp, #4]
 810a258:	3630      	adds	r6, #48	; 0x30
 810a25a:	f805 6b01 	strb.w	r6, [r5], #1
 810a25e:	9e00      	ldr	r6, [sp, #0]
 810a260:	1bae      	subs	r6, r5, r6
 810a262:	42b7      	cmp	r7, r6
 810a264:	4602      	mov	r2, r0
 810a266:	460b      	mov	r3, r1
 810a268:	d137      	bne.n	810a2da <_dtoa_r+0x722>
 810a26a:	f7f6 f897 	bl	810039c <__adddf3>
 810a26e:	4642      	mov	r2, r8
 810a270:	464b      	mov	r3, r9
 810a272:	4606      	mov	r6, r0
 810a274:	460f      	mov	r7, r1
 810a276:	f7f6 fcd7 	bl	8100c28 <__aeabi_dcmpgt>
 810a27a:	b9c8      	cbnz	r0, 810a2b0 <_dtoa_r+0x6f8>
 810a27c:	4642      	mov	r2, r8
 810a27e:	464b      	mov	r3, r9
 810a280:	4630      	mov	r0, r6
 810a282:	4639      	mov	r1, r7
 810a284:	f7f6 fca8 	bl	8100bd8 <__aeabi_dcmpeq>
 810a288:	b110      	cbz	r0, 810a290 <_dtoa_r+0x6d8>
 810a28a:	9b02      	ldr	r3, [sp, #8]
 810a28c:	07d9      	lsls	r1, r3, #31
 810a28e:	d40f      	bmi.n	810a2b0 <_dtoa_r+0x6f8>
 810a290:	4620      	mov	r0, r4
 810a292:	4659      	mov	r1, fp
 810a294:	f000 fed2 	bl	810b03c <_Bfree>
 810a298:	2300      	movs	r3, #0
 810a29a:	702b      	strb	r3, [r5, #0]
 810a29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810a29e:	f10a 0001 	add.w	r0, sl, #1
 810a2a2:	6018      	str	r0, [r3, #0]
 810a2a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a2a6:	2b00      	cmp	r3, #0
 810a2a8:	f43f acd8 	beq.w	8109c5c <_dtoa_r+0xa4>
 810a2ac:	601d      	str	r5, [r3, #0]
 810a2ae:	e4d5      	b.n	8109c5c <_dtoa_r+0xa4>
 810a2b0:	f8cd a01c 	str.w	sl, [sp, #28]
 810a2b4:	462b      	mov	r3, r5
 810a2b6:	461d      	mov	r5, r3
 810a2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a2bc:	2a39      	cmp	r2, #57	; 0x39
 810a2be:	d108      	bne.n	810a2d2 <_dtoa_r+0x71a>
 810a2c0:	9a00      	ldr	r2, [sp, #0]
 810a2c2:	429a      	cmp	r2, r3
 810a2c4:	d1f7      	bne.n	810a2b6 <_dtoa_r+0x6fe>
 810a2c6:	9a07      	ldr	r2, [sp, #28]
 810a2c8:	9900      	ldr	r1, [sp, #0]
 810a2ca:	3201      	adds	r2, #1
 810a2cc:	9207      	str	r2, [sp, #28]
 810a2ce:	2230      	movs	r2, #48	; 0x30
 810a2d0:	700a      	strb	r2, [r1, #0]
 810a2d2:	781a      	ldrb	r2, [r3, #0]
 810a2d4:	3201      	adds	r2, #1
 810a2d6:	701a      	strb	r2, [r3, #0]
 810a2d8:	e78c      	b.n	810a1f4 <_dtoa_r+0x63c>
 810a2da:	4b7f      	ldr	r3, [pc, #508]	; (810a4d8 <_dtoa_r+0x920>)
 810a2dc:	2200      	movs	r2, #0
 810a2de:	f7f6 fa13 	bl	8100708 <__aeabi_dmul>
 810a2e2:	2200      	movs	r2, #0
 810a2e4:	2300      	movs	r3, #0
 810a2e6:	4606      	mov	r6, r0
 810a2e8:	460f      	mov	r7, r1
 810a2ea:	f7f6 fc75 	bl	8100bd8 <__aeabi_dcmpeq>
 810a2ee:	2800      	cmp	r0, #0
 810a2f0:	d09b      	beq.n	810a22a <_dtoa_r+0x672>
 810a2f2:	e7cd      	b.n	810a290 <_dtoa_r+0x6d8>
 810a2f4:	9a08      	ldr	r2, [sp, #32]
 810a2f6:	2a00      	cmp	r2, #0
 810a2f8:	f000 80c4 	beq.w	810a484 <_dtoa_r+0x8cc>
 810a2fc:	9a05      	ldr	r2, [sp, #20]
 810a2fe:	2a01      	cmp	r2, #1
 810a300:	f300 80a8 	bgt.w	810a454 <_dtoa_r+0x89c>
 810a304:	9a10      	ldr	r2, [sp, #64]	; 0x40
 810a306:	2a00      	cmp	r2, #0
 810a308:	f000 80a0 	beq.w	810a44c <_dtoa_r+0x894>
 810a30c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810a310:	9e06      	ldr	r6, [sp, #24]
 810a312:	4645      	mov	r5, r8
 810a314:	9a04      	ldr	r2, [sp, #16]
 810a316:	2101      	movs	r1, #1
 810a318:	441a      	add	r2, r3
 810a31a:	4620      	mov	r0, r4
 810a31c:	4498      	add	r8, r3
 810a31e:	9204      	str	r2, [sp, #16]
 810a320:	f000 ff92 	bl	810b248 <__i2b>
 810a324:	4607      	mov	r7, r0
 810a326:	2d00      	cmp	r5, #0
 810a328:	dd0b      	ble.n	810a342 <_dtoa_r+0x78a>
 810a32a:	9b04      	ldr	r3, [sp, #16]
 810a32c:	2b00      	cmp	r3, #0
 810a32e:	dd08      	ble.n	810a342 <_dtoa_r+0x78a>
 810a330:	42ab      	cmp	r3, r5
 810a332:	9a04      	ldr	r2, [sp, #16]
 810a334:	bfa8      	it	ge
 810a336:	462b      	movge	r3, r5
 810a338:	eba8 0803 	sub.w	r8, r8, r3
 810a33c:	1aed      	subs	r5, r5, r3
 810a33e:	1ad3      	subs	r3, r2, r3
 810a340:	9304      	str	r3, [sp, #16]
 810a342:	9b06      	ldr	r3, [sp, #24]
 810a344:	b1fb      	cbz	r3, 810a386 <_dtoa_r+0x7ce>
 810a346:	9b08      	ldr	r3, [sp, #32]
 810a348:	2b00      	cmp	r3, #0
 810a34a:	f000 809f 	beq.w	810a48c <_dtoa_r+0x8d4>
 810a34e:	2e00      	cmp	r6, #0
 810a350:	dd11      	ble.n	810a376 <_dtoa_r+0x7be>
 810a352:	4639      	mov	r1, r7
 810a354:	4632      	mov	r2, r6
 810a356:	4620      	mov	r0, r4
 810a358:	f001 f832 	bl	810b3c0 <__pow5mult>
 810a35c:	465a      	mov	r2, fp
 810a35e:	4601      	mov	r1, r0
 810a360:	4607      	mov	r7, r0
 810a362:	4620      	mov	r0, r4
 810a364:	f000 ff86 	bl	810b274 <__multiply>
 810a368:	4659      	mov	r1, fp
 810a36a:	9007      	str	r0, [sp, #28]
 810a36c:	4620      	mov	r0, r4
 810a36e:	f000 fe65 	bl	810b03c <_Bfree>
 810a372:	9b07      	ldr	r3, [sp, #28]
 810a374:	469b      	mov	fp, r3
 810a376:	9b06      	ldr	r3, [sp, #24]
 810a378:	1b9a      	subs	r2, r3, r6
 810a37a:	d004      	beq.n	810a386 <_dtoa_r+0x7ce>
 810a37c:	4659      	mov	r1, fp
 810a37e:	4620      	mov	r0, r4
 810a380:	f001 f81e 	bl	810b3c0 <__pow5mult>
 810a384:	4683      	mov	fp, r0
 810a386:	2101      	movs	r1, #1
 810a388:	4620      	mov	r0, r4
 810a38a:	f000 ff5d 	bl	810b248 <__i2b>
 810a38e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a390:	2b00      	cmp	r3, #0
 810a392:	4606      	mov	r6, r0
 810a394:	dd7c      	ble.n	810a490 <_dtoa_r+0x8d8>
 810a396:	461a      	mov	r2, r3
 810a398:	4601      	mov	r1, r0
 810a39a:	4620      	mov	r0, r4
 810a39c:	f001 f810 	bl	810b3c0 <__pow5mult>
 810a3a0:	9b05      	ldr	r3, [sp, #20]
 810a3a2:	2b01      	cmp	r3, #1
 810a3a4:	4606      	mov	r6, r0
 810a3a6:	dd76      	ble.n	810a496 <_dtoa_r+0x8de>
 810a3a8:	2300      	movs	r3, #0
 810a3aa:	9306      	str	r3, [sp, #24]
 810a3ac:	6933      	ldr	r3, [r6, #16]
 810a3ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810a3b2:	6918      	ldr	r0, [r3, #16]
 810a3b4:	f000 fef8 	bl	810b1a8 <__hi0bits>
 810a3b8:	f1c0 0020 	rsb	r0, r0, #32
 810a3bc:	9b04      	ldr	r3, [sp, #16]
 810a3be:	4418      	add	r0, r3
 810a3c0:	f010 001f 	ands.w	r0, r0, #31
 810a3c4:	f000 8086 	beq.w	810a4d4 <_dtoa_r+0x91c>
 810a3c8:	f1c0 0320 	rsb	r3, r0, #32
 810a3cc:	2b04      	cmp	r3, #4
 810a3ce:	dd7f      	ble.n	810a4d0 <_dtoa_r+0x918>
 810a3d0:	f1c0 001c 	rsb	r0, r0, #28
 810a3d4:	9b04      	ldr	r3, [sp, #16]
 810a3d6:	4403      	add	r3, r0
 810a3d8:	4480      	add	r8, r0
 810a3da:	4405      	add	r5, r0
 810a3dc:	9304      	str	r3, [sp, #16]
 810a3de:	f1b8 0f00 	cmp.w	r8, #0
 810a3e2:	dd05      	ble.n	810a3f0 <_dtoa_r+0x838>
 810a3e4:	4659      	mov	r1, fp
 810a3e6:	4642      	mov	r2, r8
 810a3e8:	4620      	mov	r0, r4
 810a3ea:	f001 f843 	bl	810b474 <__lshift>
 810a3ee:	4683      	mov	fp, r0
 810a3f0:	9b04      	ldr	r3, [sp, #16]
 810a3f2:	2b00      	cmp	r3, #0
 810a3f4:	dd05      	ble.n	810a402 <_dtoa_r+0x84a>
 810a3f6:	4631      	mov	r1, r6
 810a3f8:	461a      	mov	r2, r3
 810a3fa:	4620      	mov	r0, r4
 810a3fc:	f001 f83a 	bl	810b474 <__lshift>
 810a400:	4606      	mov	r6, r0
 810a402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810a404:	2b00      	cmp	r3, #0
 810a406:	d069      	beq.n	810a4dc <_dtoa_r+0x924>
 810a408:	4631      	mov	r1, r6
 810a40a:	4658      	mov	r0, fp
 810a40c:	f001 f89e 	bl	810b54c <__mcmp>
 810a410:	2800      	cmp	r0, #0
 810a412:	da63      	bge.n	810a4dc <_dtoa_r+0x924>
 810a414:	2300      	movs	r3, #0
 810a416:	4659      	mov	r1, fp
 810a418:	220a      	movs	r2, #10
 810a41a:	4620      	mov	r0, r4
 810a41c:	f000 fe30 	bl	810b080 <__multadd>
 810a420:	9b08      	ldr	r3, [sp, #32]
 810a422:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a426:	4683      	mov	fp, r0
 810a428:	2b00      	cmp	r3, #0
 810a42a:	f000 818f 	beq.w	810a74c <_dtoa_r+0xb94>
 810a42e:	4639      	mov	r1, r7
 810a430:	2300      	movs	r3, #0
 810a432:	220a      	movs	r2, #10
 810a434:	4620      	mov	r0, r4
 810a436:	f000 fe23 	bl	810b080 <__multadd>
 810a43a:	f1b9 0f00 	cmp.w	r9, #0
 810a43e:	4607      	mov	r7, r0
 810a440:	f300 808e 	bgt.w	810a560 <_dtoa_r+0x9a8>
 810a444:	9b05      	ldr	r3, [sp, #20]
 810a446:	2b02      	cmp	r3, #2
 810a448:	dc50      	bgt.n	810a4ec <_dtoa_r+0x934>
 810a44a:	e089      	b.n	810a560 <_dtoa_r+0x9a8>
 810a44c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810a44e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810a452:	e75d      	b.n	810a310 <_dtoa_r+0x758>
 810a454:	9b01      	ldr	r3, [sp, #4]
 810a456:	1e5e      	subs	r6, r3, #1
 810a458:	9b06      	ldr	r3, [sp, #24]
 810a45a:	42b3      	cmp	r3, r6
 810a45c:	bfbf      	itttt	lt
 810a45e:	9b06      	ldrlt	r3, [sp, #24]
 810a460:	9606      	strlt	r6, [sp, #24]
 810a462:	1af2      	sublt	r2, r6, r3
 810a464:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 810a466:	bfb6      	itet	lt
 810a468:	189b      	addlt	r3, r3, r2
 810a46a:	1b9e      	subge	r6, r3, r6
 810a46c:	930d      	strlt	r3, [sp, #52]	; 0x34
 810a46e:	9b01      	ldr	r3, [sp, #4]
 810a470:	bfb8      	it	lt
 810a472:	2600      	movlt	r6, #0
 810a474:	2b00      	cmp	r3, #0
 810a476:	bfb5      	itete	lt
 810a478:	eba8 0503 	sublt.w	r5, r8, r3
 810a47c:	9b01      	ldrge	r3, [sp, #4]
 810a47e:	2300      	movlt	r3, #0
 810a480:	4645      	movge	r5, r8
 810a482:	e747      	b.n	810a314 <_dtoa_r+0x75c>
 810a484:	9e06      	ldr	r6, [sp, #24]
 810a486:	9f08      	ldr	r7, [sp, #32]
 810a488:	4645      	mov	r5, r8
 810a48a:	e74c      	b.n	810a326 <_dtoa_r+0x76e>
 810a48c:	9a06      	ldr	r2, [sp, #24]
 810a48e:	e775      	b.n	810a37c <_dtoa_r+0x7c4>
 810a490:	9b05      	ldr	r3, [sp, #20]
 810a492:	2b01      	cmp	r3, #1
 810a494:	dc18      	bgt.n	810a4c8 <_dtoa_r+0x910>
 810a496:	9b02      	ldr	r3, [sp, #8]
 810a498:	b9b3      	cbnz	r3, 810a4c8 <_dtoa_r+0x910>
 810a49a:	9b03      	ldr	r3, [sp, #12]
 810a49c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810a4a0:	b9a3      	cbnz	r3, 810a4cc <_dtoa_r+0x914>
 810a4a2:	9b03      	ldr	r3, [sp, #12]
 810a4a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810a4a8:	0d1b      	lsrs	r3, r3, #20
 810a4aa:	051b      	lsls	r3, r3, #20
 810a4ac:	b12b      	cbz	r3, 810a4ba <_dtoa_r+0x902>
 810a4ae:	9b04      	ldr	r3, [sp, #16]
 810a4b0:	3301      	adds	r3, #1
 810a4b2:	9304      	str	r3, [sp, #16]
 810a4b4:	f108 0801 	add.w	r8, r8, #1
 810a4b8:	2301      	movs	r3, #1
 810a4ba:	9306      	str	r3, [sp, #24]
 810a4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810a4be:	2b00      	cmp	r3, #0
 810a4c0:	f47f af74 	bne.w	810a3ac <_dtoa_r+0x7f4>
 810a4c4:	2001      	movs	r0, #1
 810a4c6:	e779      	b.n	810a3bc <_dtoa_r+0x804>
 810a4c8:	2300      	movs	r3, #0
 810a4ca:	e7f6      	b.n	810a4ba <_dtoa_r+0x902>
 810a4cc:	9b02      	ldr	r3, [sp, #8]
 810a4ce:	e7f4      	b.n	810a4ba <_dtoa_r+0x902>
 810a4d0:	d085      	beq.n	810a3de <_dtoa_r+0x826>
 810a4d2:	4618      	mov	r0, r3
 810a4d4:	301c      	adds	r0, #28
 810a4d6:	e77d      	b.n	810a3d4 <_dtoa_r+0x81c>
 810a4d8:	40240000 	.word	0x40240000
 810a4dc:	9b01      	ldr	r3, [sp, #4]
 810a4de:	2b00      	cmp	r3, #0
 810a4e0:	dc38      	bgt.n	810a554 <_dtoa_r+0x99c>
 810a4e2:	9b05      	ldr	r3, [sp, #20]
 810a4e4:	2b02      	cmp	r3, #2
 810a4e6:	dd35      	ble.n	810a554 <_dtoa_r+0x99c>
 810a4e8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810a4ec:	f1b9 0f00 	cmp.w	r9, #0
 810a4f0:	d10d      	bne.n	810a50e <_dtoa_r+0x956>
 810a4f2:	4631      	mov	r1, r6
 810a4f4:	464b      	mov	r3, r9
 810a4f6:	2205      	movs	r2, #5
 810a4f8:	4620      	mov	r0, r4
 810a4fa:	f000 fdc1 	bl	810b080 <__multadd>
 810a4fe:	4601      	mov	r1, r0
 810a500:	4606      	mov	r6, r0
 810a502:	4658      	mov	r0, fp
 810a504:	f001 f822 	bl	810b54c <__mcmp>
 810a508:	2800      	cmp	r0, #0
 810a50a:	f73f adbd 	bgt.w	810a088 <_dtoa_r+0x4d0>
 810a50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a510:	9d00      	ldr	r5, [sp, #0]
 810a512:	ea6f 0a03 	mvn.w	sl, r3
 810a516:	f04f 0800 	mov.w	r8, #0
 810a51a:	4631      	mov	r1, r6
 810a51c:	4620      	mov	r0, r4
 810a51e:	f000 fd8d 	bl	810b03c <_Bfree>
 810a522:	2f00      	cmp	r7, #0
 810a524:	f43f aeb4 	beq.w	810a290 <_dtoa_r+0x6d8>
 810a528:	f1b8 0f00 	cmp.w	r8, #0
 810a52c:	d005      	beq.n	810a53a <_dtoa_r+0x982>
 810a52e:	45b8      	cmp	r8, r7
 810a530:	d003      	beq.n	810a53a <_dtoa_r+0x982>
 810a532:	4641      	mov	r1, r8
 810a534:	4620      	mov	r0, r4
 810a536:	f000 fd81 	bl	810b03c <_Bfree>
 810a53a:	4639      	mov	r1, r7
 810a53c:	4620      	mov	r0, r4
 810a53e:	f000 fd7d 	bl	810b03c <_Bfree>
 810a542:	e6a5      	b.n	810a290 <_dtoa_r+0x6d8>
 810a544:	2600      	movs	r6, #0
 810a546:	4637      	mov	r7, r6
 810a548:	e7e1      	b.n	810a50e <_dtoa_r+0x956>
 810a54a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 810a54c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810a550:	4637      	mov	r7, r6
 810a552:	e599      	b.n	810a088 <_dtoa_r+0x4d0>
 810a554:	9b08      	ldr	r3, [sp, #32]
 810a556:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810a55a:	2b00      	cmp	r3, #0
 810a55c:	f000 80fd 	beq.w	810a75a <_dtoa_r+0xba2>
 810a560:	2d00      	cmp	r5, #0
 810a562:	dd05      	ble.n	810a570 <_dtoa_r+0x9b8>
 810a564:	4639      	mov	r1, r7
 810a566:	462a      	mov	r2, r5
 810a568:	4620      	mov	r0, r4
 810a56a:	f000 ff83 	bl	810b474 <__lshift>
 810a56e:	4607      	mov	r7, r0
 810a570:	9b06      	ldr	r3, [sp, #24]
 810a572:	2b00      	cmp	r3, #0
 810a574:	d05c      	beq.n	810a630 <_dtoa_r+0xa78>
 810a576:	6879      	ldr	r1, [r7, #4]
 810a578:	4620      	mov	r0, r4
 810a57a:	f000 fd1f 	bl	810afbc <_Balloc>
 810a57e:	4605      	mov	r5, r0
 810a580:	b928      	cbnz	r0, 810a58e <_dtoa_r+0x9d6>
 810a582:	4b80      	ldr	r3, [pc, #512]	; (810a784 <_dtoa_r+0xbcc>)
 810a584:	4602      	mov	r2, r0
 810a586:	f240 21ea 	movw	r1, #746	; 0x2ea
 810a58a:	f7ff bb2e 	b.w	8109bea <_dtoa_r+0x32>
 810a58e:	693a      	ldr	r2, [r7, #16]
 810a590:	3202      	adds	r2, #2
 810a592:	0092      	lsls	r2, r2, #2
 810a594:	f107 010c 	add.w	r1, r7, #12
 810a598:	300c      	adds	r0, #12
 810a59a:	f000 fcf5 	bl	810af88 <memcpy>
 810a59e:	2201      	movs	r2, #1
 810a5a0:	4629      	mov	r1, r5
 810a5a2:	4620      	mov	r0, r4
 810a5a4:	f000 ff66 	bl	810b474 <__lshift>
 810a5a8:	9b00      	ldr	r3, [sp, #0]
 810a5aa:	3301      	adds	r3, #1
 810a5ac:	9301      	str	r3, [sp, #4]
 810a5ae:	9b00      	ldr	r3, [sp, #0]
 810a5b0:	444b      	add	r3, r9
 810a5b2:	9307      	str	r3, [sp, #28]
 810a5b4:	9b02      	ldr	r3, [sp, #8]
 810a5b6:	f003 0301 	and.w	r3, r3, #1
 810a5ba:	46b8      	mov	r8, r7
 810a5bc:	9306      	str	r3, [sp, #24]
 810a5be:	4607      	mov	r7, r0
 810a5c0:	9b01      	ldr	r3, [sp, #4]
 810a5c2:	4631      	mov	r1, r6
 810a5c4:	3b01      	subs	r3, #1
 810a5c6:	4658      	mov	r0, fp
 810a5c8:	9302      	str	r3, [sp, #8]
 810a5ca:	f7ff fa69 	bl	8109aa0 <quorem>
 810a5ce:	4603      	mov	r3, r0
 810a5d0:	3330      	adds	r3, #48	; 0x30
 810a5d2:	9004      	str	r0, [sp, #16]
 810a5d4:	4641      	mov	r1, r8
 810a5d6:	4658      	mov	r0, fp
 810a5d8:	9308      	str	r3, [sp, #32]
 810a5da:	f000 ffb7 	bl	810b54c <__mcmp>
 810a5de:	463a      	mov	r2, r7
 810a5e0:	4681      	mov	r9, r0
 810a5e2:	4631      	mov	r1, r6
 810a5e4:	4620      	mov	r0, r4
 810a5e6:	f000 ffcd 	bl	810b584 <__mdiff>
 810a5ea:	68c2      	ldr	r2, [r0, #12]
 810a5ec:	9b08      	ldr	r3, [sp, #32]
 810a5ee:	4605      	mov	r5, r0
 810a5f0:	bb02      	cbnz	r2, 810a634 <_dtoa_r+0xa7c>
 810a5f2:	4601      	mov	r1, r0
 810a5f4:	4658      	mov	r0, fp
 810a5f6:	f000 ffa9 	bl	810b54c <__mcmp>
 810a5fa:	9b08      	ldr	r3, [sp, #32]
 810a5fc:	4602      	mov	r2, r0
 810a5fe:	4629      	mov	r1, r5
 810a600:	4620      	mov	r0, r4
 810a602:	e9cd 3208 	strd	r3, r2, [sp, #32]
 810a606:	f000 fd19 	bl	810b03c <_Bfree>
 810a60a:	9b05      	ldr	r3, [sp, #20]
 810a60c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a60e:	9d01      	ldr	r5, [sp, #4]
 810a610:	ea43 0102 	orr.w	r1, r3, r2
 810a614:	9b06      	ldr	r3, [sp, #24]
 810a616:	430b      	orrs	r3, r1
 810a618:	9b08      	ldr	r3, [sp, #32]
 810a61a:	d10d      	bne.n	810a638 <_dtoa_r+0xa80>
 810a61c:	2b39      	cmp	r3, #57	; 0x39
 810a61e:	d029      	beq.n	810a674 <_dtoa_r+0xabc>
 810a620:	f1b9 0f00 	cmp.w	r9, #0
 810a624:	dd01      	ble.n	810a62a <_dtoa_r+0xa72>
 810a626:	9b04      	ldr	r3, [sp, #16]
 810a628:	3331      	adds	r3, #49	; 0x31
 810a62a:	9a02      	ldr	r2, [sp, #8]
 810a62c:	7013      	strb	r3, [r2, #0]
 810a62e:	e774      	b.n	810a51a <_dtoa_r+0x962>
 810a630:	4638      	mov	r0, r7
 810a632:	e7b9      	b.n	810a5a8 <_dtoa_r+0x9f0>
 810a634:	2201      	movs	r2, #1
 810a636:	e7e2      	b.n	810a5fe <_dtoa_r+0xa46>
 810a638:	f1b9 0f00 	cmp.w	r9, #0
 810a63c:	db06      	blt.n	810a64c <_dtoa_r+0xa94>
 810a63e:	9905      	ldr	r1, [sp, #20]
 810a640:	ea41 0909 	orr.w	r9, r1, r9
 810a644:	9906      	ldr	r1, [sp, #24]
 810a646:	ea59 0101 	orrs.w	r1, r9, r1
 810a64a:	d120      	bne.n	810a68e <_dtoa_r+0xad6>
 810a64c:	2a00      	cmp	r2, #0
 810a64e:	ddec      	ble.n	810a62a <_dtoa_r+0xa72>
 810a650:	4659      	mov	r1, fp
 810a652:	2201      	movs	r2, #1
 810a654:	4620      	mov	r0, r4
 810a656:	9301      	str	r3, [sp, #4]
 810a658:	f000 ff0c 	bl	810b474 <__lshift>
 810a65c:	4631      	mov	r1, r6
 810a65e:	4683      	mov	fp, r0
 810a660:	f000 ff74 	bl	810b54c <__mcmp>
 810a664:	2800      	cmp	r0, #0
 810a666:	9b01      	ldr	r3, [sp, #4]
 810a668:	dc02      	bgt.n	810a670 <_dtoa_r+0xab8>
 810a66a:	d1de      	bne.n	810a62a <_dtoa_r+0xa72>
 810a66c:	07da      	lsls	r2, r3, #31
 810a66e:	d5dc      	bpl.n	810a62a <_dtoa_r+0xa72>
 810a670:	2b39      	cmp	r3, #57	; 0x39
 810a672:	d1d8      	bne.n	810a626 <_dtoa_r+0xa6e>
 810a674:	9a02      	ldr	r2, [sp, #8]
 810a676:	2339      	movs	r3, #57	; 0x39
 810a678:	7013      	strb	r3, [r2, #0]
 810a67a:	462b      	mov	r3, r5
 810a67c:	461d      	mov	r5, r3
 810a67e:	3b01      	subs	r3, #1
 810a680:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810a684:	2a39      	cmp	r2, #57	; 0x39
 810a686:	d050      	beq.n	810a72a <_dtoa_r+0xb72>
 810a688:	3201      	adds	r2, #1
 810a68a:	701a      	strb	r2, [r3, #0]
 810a68c:	e745      	b.n	810a51a <_dtoa_r+0x962>
 810a68e:	2a00      	cmp	r2, #0
 810a690:	dd03      	ble.n	810a69a <_dtoa_r+0xae2>
 810a692:	2b39      	cmp	r3, #57	; 0x39
 810a694:	d0ee      	beq.n	810a674 <_dtoa_r+0xabc>
 810a696:	3301      	adds	r3, #1
 810a698:	e7c7      	b.n	810a62a <_dtoa_r+0xa72>
 810a69a:	9a01      	ldr	r2, [sp, #4]
 810a69c:	9907      	ldr	r1, [sp, #28]
 810a69e:	f802 3c01 	strb.w	r3, [r2, #-1]
 810a6a2:	428a      	cmp	r2, r1
 810a6a4:	d02a      	beq.n	810a6fc <_dtoa_r+0xb44>
 810a6a6:	4659      	mov	r1, fp
 810a6a8:	2300      	movs	r3, #0
 810a6aa:	220a      	movs	r2, #10
 810a6ac:	4620      	mov	r0, r4
 810a6ae:	f000 fce7 	bl	810b080 <__multadd>
 810a6b2:	45b8      	cmp	r8, r7
 810a6b4:	4683      	mov	fp, r0
 810a6b6:	f04f 0300 	mov.w	r3, #0
 810a6ba:	f04f 020a 	mov.w	r2, #10
 810a6be:	4641      	mov	r1, r8
 810a6c0:	4620      	mov	r0, r4
 810a6c2:	d107      	bne.n	810a6d4 <_dtoa_r+0xb1c>
 810a6c4:	f000 fcdc 	bl	810b080 <__multadd>
 810a6c8:	4680      	mov	r8, r0
 810a6ca:	4607      	mov	r7, r0
 810a6cc:	9b01      	ldr	r3, [sp, #4]
 810a6ce:	3301      	adds	r3, #1
 810a6d0:	9301      	str	r3, [sp, #4]
 810a6d2:	e775      	b.n	810a5c0 <_dtoa_r+0xa08>
 810a6d4:	f000 fcd4 	bl	810b080 <__multadd>
 810a6d8:	4639      	mov	r1, r7
 810a6da:	4680      	mov	r8, r0
 810a6dc:	2300      	movs	r3, #0
 810a6de:	220a      	movs	r2, #10
 810a6e0:	4620      	mov	r0, r4
 810a6e2:	f000 fccd 	bl	810b080 <__multadd>
 810a6e6:	4607      	mov	r7, r0
 810a6e8:	e7f0      	b.n	810a6cc <_dtoa_r+0xb14>
 810a6ea:	f1b9 0f00 	cmp.w	r9, #0
 810a6ee:	9a00      	ldr	r2, [sp, #0]
 810a6f0:	bfcc      	ite	gt
 810a6f2:	464d      	movgt	r5, r9
 810a6f4:	2501      	movle	r5, #1
 810a6f6:	4415      	add	r5, r2
 810a6f8:	f04f 0800 	mov.w	r8, #0
 810a6fc:	4659      	mov	r1, fp
 810a6fe:	2201      	movs	r2, #1
 810a700:	4620      	mov	r0, r4
 810a702:	9301      	str	r3, [sp, #4]
 810a704:	f000 feb6 	bl	810b474 <__lshift>
 810a708:	4631      	mov	r1, r6
 810a70a:	4683      	mov	fp, r0
 810a70c:	f000 ff1e 	bl	810b54c <__mcmp>
 810a710:	2800      	cmp	r0, #0
 810a712:	dcb2      	bgt.n	810a67a <_dtoa_r+0xac2>
 810a714:	d102      	bne.n	810a71c <_dtoa_r+0xb64>
 810a716:	9b01      	ldr	r3, [sp, #4]
 810a718:	07db      	lsls	r3, r3, #31
 810a71a:	d4ae      	bmi.n	810a67a <_dtoa_r+0xac2>
 810a71c:	462b      	mov	r3, r5
 810a71e:	461d      	mov	r5, r3
 810a720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a724:	2a30      	cmp	r2, #48	; 0x30
 810a726:	d0fa      	beq.n	810a71e <_dtoa_r+0xb66>
 810a728:	e6f7      	b.n	810a51a <_dtoa_r+0x962>
 810a72a:	9a00      	ldr	r2, [sp, #0]
 810a72c:	429a      	cmp	r2, r3
 810a72e:	d1a5      	bne.n	810a67c <_dtoa_r+0xac4>
 810a730:	f10a 0a01 	add.w	sl, sl, #1
 810a734:	2331      	movs	r3, #49	; 0x31
 810a736:	e779      	b.n	810a62c <_dtoa_r+0xa74>
 810a738:	4b13      	ldr	r3, [pc, #76]	; (810a788 <_dtoa_r+0xbd0>)
 810a73a:	f7ff baaf 	b.w	8109c9c <_dtoa_r+0xe4>
 810a73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a740:	2b00      	cmp	r3, #0
 810a742:	f47f aa86 	bne.w	8109c52 <_dtoa_r+0x9a>
 810a746:	4b11      	ldr	r3, [pc, #68]	; (810a78c <_dtoa_r+0xbd4>)
 810a748:	f7ff baa8 	b.w	8109c9c <_dtoa_r+0xe4>
 810a74c:	f1b9 0f00 	cmp.w	r9, #0
 810a750:	dc03      	bgt.n	810a75a <_dtoa_r+0xba2>
 810a752:	9b05      	ldr	r3, [sp, #20]
 810a754:	2b02      	cmp	r3, #2
 810a756:	f73f aec9 	bgt.w	810a4ec <_dtoa_r+0x934>
 810a75a:	9d00      	ldr	r5, [sp, #0]
 810a75c:	4631      	mov	r1, r6
 810a75e:	4658      	mov	r0, fp
 810a760:	f7ff f99e 	bl	8109aa0 <quorem>
 810a764:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810a768:	f805 3b01 	strb.w	r3, [r5], #1
 810a76c:	9a00      	ldr	r2, [sp, #0]
 810a76e:	1aaa      	subs	r2, r5, r2
 810a770:	4591      	cmp	r9, r2
 810a772:	ddba      	ble.n	810a6ea <_dtoa_r+0xb32>
 810a774:	4659      	mov	r1, fp
 810a776:	2300      	movs	r3, #0
 810a778:	220a      	movs	r2, #10
 810a77a:	4620      	mov	r0, r4
 810a77c:	f000 fc80 	bl	810b080 <__multadd>
 810a780:	4683      	mov	fp, r0
 810a782:	e7eb      	b.n	810a75c <_dtoa_r+0xba4>
 810a784:	0810e3b4 	.word	0x0810e3b4
 810a788:	0810e1b4 	.word	0x0810e1b4
 810a78c:	0810e331 	.word	0x0810e331

0810a790 <rshift>:
 810a790:	6903      	ldr	r3, [r0, #16]
 810a792:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a796:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a79a:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a79e:	f100 0414 	add.w	r4, r0, #20
 810a7a2:	dd45      	ble.n	810a830 <rshift+0xa0>
 810a7a4:	f011 011f 	ands.w	r1, r1, #31
 810a7a8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a7ac:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a7b0:	d10c      	bne.n	810a7cc <rshift+0x3c>
 810a7b2:	f100 0710 	add.w	r7, r0, #16
 810a7b6:	4629      	mov	r1, r5
 810a7b8:	42b1      	cmp	r1, r6
 810a7ba:	d334      	bcc.n	810a826 <rshift+0x96>
 810a7bc:	1a9b      	subs	r3, r3, r2
 810a7be:	009b      	lsls	r3, r3, #2
 810a7c0:	1eea      	subs	r2, r5, #3
 810a7c2:	4296      	cmp	r6, r2
 810a7c4:	bf38      	it	cc
 810a7c6:	2300      	movcc	r3, #0
 810a7c8:	4423      	add	r3, r4
 810a7ca:	e015      	b.n	810a7f8 <rshift+0x68>
 810a7cc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a7d0:	f1c1 0820 	rsb	r8, r1, #32
 810a7d4:	40cf      	lsrs	r7, r1
 810a7d6:	f105 0e04 	add.w	lr, r5, #4
 810a7da:	46a1      	mov	r9, r4
 810a7dc:	4576      	cmp	r6, lr
 810a7de:	46f4      	mov	ip, lr
 810a7e0:	d815      	bhi.n	810a80e <rshift+0x7e>
 810a7e2:	1a9b      	subs	r3, r3, r2
 810a7e4:	009a      	lsls	r2, r3, #2
 810a7e6:	3a04      	subs	r2, #4
 810a7e8:	3501      	adds	r5, #1
 810a7ea:	42ae      	cmp	r6, r5
 810a7ec:	bf38      	it	cc
 810a7ee:	2200      	movcc	r2, #0
 810a7f0:	18a3      	adds	r3, r4, r2
 810a7f2:	50a7      	str	r7, [r4, r2]
 810a7f4:	b107      	cbz	r7, 810a7f8 <rshift+0x68>
 810a7f6:	3304      	adds	r3, #4
 810a7f8:	1b1a      	subs	r2, r3, r4
 810a7fa:	42a3      	cmp	r3, r4
 810a7fc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a800:	bf08      	it	eq
 810a802:	2300      	moveq	r3, #0
 810a804:	6102      	str	r2, [r0, #16]
 810a806:	bf08      	it	eq
 810a808:	6143      	streq	r3, [r0, #20]
 810a80a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a80e:	f8dc c000 	ldr.w	ip, [ip]
 810a812:	fa0c fc08 	lsl.w	ip, ip, r8
 810a816:	ea4c 0707 	orr.w	r7, ip, r7
 810a81a:	f849 7b04 	str.w	r7, [r9], #4
 810a81e:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a822:	40cf      	lsrs	r7, r1
 810a824:	e7da      	b.n	810a7dc <rshift+0x4c>
 810a826:	f851 cb04 	ldr.w	ip, [r1], #4
 810a82a:	f847 cf04 	str.w	ip, [r7, #4]!
 810a82e:	e7c3      	b.n	810a7b8 <rshift+0x28>
 810a830:	4623      	mov	r3, r4
 810a832:	e7e1      	b.n	810a7f8 <rshift+0x68>

0810a834 <__hexdig_fun>:
 810a834:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a838:	2b09      	cmp	r3, #9
 810a83a:	d802      	bhi.n	810a842 <__hexdig_fun+0xe>
 810a83c:	3820      	subs	r0, #32
 810a83e:	b2c0      	uxtb	r0, r0
 810a840:	4770      	bx	lr
 810a842:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a846:	2b05      	cmp	r3, #5
 810a848:	d801      	bhi.n	810a84e <__hexdig_fun+0x1a>
 810a84a:	3847      	subs	r0, #71	; 0x47
 810a84c:	e7f7      	b.n	810a83e <__hexdig_fun+0xa>
 810a84e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a852:	2b05      	cmp	r3, #5
 810a854:	d801      	bhi.n	810a85a <__hexdig_fun+0x26>
 810a856:	3827      	subs	r0, #39	; 0x27
 810a858:	e7f1      	b.n	810a83e <__hexdig_fun+0xa>
 810a85a:	2000      	movs	r0, #0
 810a85c:	4770      	bx	lr
	...

0810a860 <__gethex>:
 810a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a864:	ed2d 8b02 	vpush	{d8}
 810a868:	b089      	sub	sp, #36	; 0x24
 810a86a:	ee08 0a10 	vmov	s16, r0
 810a86e:	9304      	str	r3, [sp, #16]
 810a870:	4bbc      	ldr	r3, [pc, #752]	; (810ab64 <__gethex+0x304>)
 810a872:	681b      	ldr	r3, [r3, #0]
 810a874:	9301      	str	r3, [sp, #4]
 810a876:	4618      	mov	r0, r3
 810a878:	468b      	mov	fp, r1
 810a87a:	4690      	mov	r8, r2
 810a87c:	f7f5 fd30 	bl	81002e0 <strlen>
 810a880:	9b01      	ldr	r3, [sp, #4]
 810a882:	f8db 2000 	ldr.w	r2, [fp]
 810a886:	4403      	add	r3, r0
 810a888:	4682      	mov	sl, r0
 810a88a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810a88e:	9305      	str	r3, [sp, #20]
 810a890:	1c93      	adds	r3, r2, #2
 810a892:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a896:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a89a:	32fe      	adds	r2, #254	; 0xfe
 810a89c:	18d1      	adds	r1, r2, r3
 810a89e:	461f      	mov	r7, r3
 810a8a0:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a8a4:	9100      	str	r1, [sp, #0]
 810a8a6:	2830      	cmp	r0, #48	; 0x30
 810a8a8:	d0f8      	beq.n	810a89c <__gethex+0x3c>
 810a8aa:	f7ff ffc3 	bl	810a834 <__hexdig_fun>
 810a8ae:	4604      	mov	r4, r0
 810a8b0:	2800      	cmp	r0, #0
 810a8b2:	d13a      	bne.n	810a92a <__gethex+0xca>
 810a8b4:	9901      	ldr	r1, [sp, #4]
 810a8b6:	4652      	mov	r2, sl
 810a8b8:	4638      	mov	r0, r7
 810a8ba:	f001 fb19 	bl	810bef0 <strncmp>
 810a8be:	4605      	mov	r5, r0
 810a8c0:	2800      	cmp	r0, #0
 810a8c2:	d168      	bne.n	810a996 <__gethex+0x136>
 810a8c4:	f817 000a 	ldrb.w	r0, [r7, sl]
 810a8c8:	eb07 060a 	add.w	r6, r7, sl
 810a8cc:	f7ff ffb2 	bl	810a834 <__hexdig_fun>
 810a8d0:	2800      	cmp	r0, #0
 810a8d2:	d062      	beq.n	810a99a <__gethex+0x13a>
 810a8d4:	4633      	mov	r3, r6
 810a8d6:	7818      	ldrb	r0, [r3, #0]
 810a8d8:	2830      	cmp	r0, #48	; 0x30
 810a8da:	461f      	mov	r7, r3
 810a8dc:	f103 0301 	add.w	r3, r3, #1
 810a8e0:	d0f9      	beq.n	810a8d6 <__gethex+0x76>
 810a8e2:	f7ff ffa7 	bl	810a834 <__hexdig_fun>
 810a8e6:	2301      	movs	r3, #1
 810a8e8:	fab0 f480 	clz	r4, r0
 810a8ec:	0964      	lsrs	r4, r4, #5
 810a8ee:	4635      	mov	r5, r6
 810a8f0:	9300      	str	r3, [sp, #0]
 810a8f2:	463a      	mov	r2, r7
 810a8f4:	4616      	mov	r6, r2
 810a8f6:	3201      	adds	r2, #1
 810a8f8:	7830      	ldrb	r0, [r6, #0]
 810a8fa:	f7ff ff9b 	bl	810a834 <__hexdig_fun>
 810a8fe:	2800      	cmp	r0, #0
 810a900:	d1f8      	bne.n	810a8f4 <__gethex+0x94>
 810a902:	9901      	ldr	r1, [sp, #4]
 810a904:	4652      	mov	r2, sl
 810a906:	4630      	mov	r0, r6
 810a908:	f001 faf2 	bl	810bef0 <strncmp>
 810a90c:	b980      	cbnz	r0, 810a930 <__gethex+0xd0>
 810a90e:	b94d      	cbnz	r5, 810a924 <__gethex+0xc4>
 810a910:	eb06 050a 	add.w	r5, r6, sl
 810a914:	462a      	mov	r2, r5
 810a916:	4616      	mov	r6, r2
 810a918:	3201      	adds	r2, #1
 810a91a:	7830      	ldrb	r0, [r6, #0]
 810a91c:	f7ff ff8a 	bl	810a834 <__hexdig_fun>
 810a920:	2800      	cmp	r0, #0
 810a922:	d1f8      	bne.n	810a916 <__gethex+0xb6>
 810a924:	1bad      	subs	r5, r5, r6
 810a926:	00ad      	lsls	r5, r5, #2
 810a928:	e004      	b.n	810a934 <__gethex+0xd4>
 810a92a:	2400      	movs	r4, #0
 810a92c:	4625      	mov	r5, r4
 810a92e:	e7e0      	b.n	810a8f2 <__gethex+0x92>
 810a930:	2d00      	cmp	r5, #0
 810a932:	d1f7      	bne.n	810a924 <__gethex+0xc4>
 810a934:	7833      	ldrb	r3, [r6, #0]
 810a936:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a93a:	2b50      	cmp	r3, #80	; 0x50
 810a93c:	d13b      	bne.n	810a9b6 <__gethex+0x156>
 810a93e:	7873      	ldrb	r3, [r6, #1]
 810a940:	2b2b      	cmp	r3, #43	; 0x2b
 810a942:	d02c      	beq.n	810a99e <__gethex+0x13e>
 810a944:	2b2d      	cmp	r3, #45	; 0x2d
 810a946:	d02e      	beq.n	810a9a6 <__gethex+0x146>
 810a948:	1c71      	adds	r1, r6, #1
 810a94a:	f04f 0900 	mov.w	r9, #0
 810a94e:	7808      	ldrb	r0, [r1, #0]
 810a950:	f7ff ff70 	bl	810a834 <__hexdig_fun>
 810a954:	1e43      	subs	r3, r0, #1
 810a956:	b2db      	uxtb	r3, r3
 810a958:	2b18      	cmp	r3, #24
 810a95a:	d82c      	bhi.n	810a9b6 <__gethex+0x156>
 810a95c:	f1a0 0210 	sub.w	r2, r0, #16
 810a960:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810a964:	f7ff ff66 	bl	810a834 <__hexdig_fun>
 810a968:	1e43      	subs	r3, r0, #1
 810a96a:	b2db      	uxtb	r3, r3
 810a96c:	2b18      	cmp	r3, #24
 810a96e:	d91d      	bls.n	810a9ac <__gethex+0x14c>
 810a970:	f1b9 0f00 	cmp.w	r9, #0
 810a974:	d000      	beq.n	810a978 <__gethex+0x118>
 810a976:	4252      	negs	r2, r2
 810a978:	4415      	add	r5, r2
 810a97a:	f8cb 1000 	str.w	r1, [fp]
 810a97e:	b1e4      	cbz	r4, 810a9ba <__gethex+0x15a>
 810a980:	9b00      	ldr	r3, [sp, #0]
 810a982:	2b00      	cmp	r3, #0
 810a984:	bf14      	ite	ne
 810a986:	2700      	movne	r7, #0
 810a988:	2706      	moveq	r7, #6
 810a98a:	4638      	mov	r0, r7
 810a98c:	b009      	add	sp, #36	; 0x24
 810a98e:	ecbd 8b02 	vpop	{d8}
 810a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a996:	463e      	mov	r6, r7
 810a998:	4625      	mov	r5, r4
 810a99a:	2401      	movs	r4, #1
 810a99c:	e7ca      	b.n	810a934 <__gethex+0xd4>
 810a99e:	f04f 0900 	mov.w	r9, #0
 810a9a2:	1cb1      	adds	r1, r6, #2
 810a9a4:	e7d3      	b.n	810a94e <__gethex+0xee>
 810a9a6:	f04f 0901 	mov.w	r9, #1
 810a9aa:	e7fa      	b.n	810a9a2 <__gethex+0x142>
 810a9ac:	230a      	movs	r3, #10
 810a9ae:	fb03 0202 	mla	r2, r3, r2, r0
 810a9b2:	3a10      	subs	r2, #16
 810a9b4:	e7d4      	b.n	810a960 <__gethex+0x100>
 810a9b6:	4631      	mov	r1, r6
 810a9b8:	e7df      	b.n	810a97a <__gethex+0x11a>
 810a9ba:	1bf3      	subs	r3, r6, r7
 810a9bc:	3b01      	subs	r3, #1
 810a9be:	4621      	mov	r1, r4
 810a9c0:	2b07      	cmp	r3, #7
 810a9c2:	dc0b      	bgt.n	810a9dc <__gethex+0x17c>
 810a9c4:	ee18 0a10 	vmov	r0, s16
 810a9c8:	f000 faf8 	bl	810afbc <_Balloc>
 810a9cc:	4604      	mov	r4, r0
 810a9ce:	b940      	cbnz	r0, 810a9e2 <__gethex+0x182>
 810a9d0:	4b65      	ldr	r3, [pc, #404]	; (810ab68 <__gethex+0x308>)
 810a9d2:	4602      	mov	r2, r0
 810a9d4:	21de      	movs	r1, #222	; 0xde
 810a9d6:	4865      	ldr	r0, [pc, #404]	; (810ab6c <__gethex+0x30c>)
 810a9d8:	f001 faaa 	bl	810bf30 <__assert_func>
 810a9dc:	3101      	adds	r1, #1
 810a9de:	105b      	asrs	r3, r3, #1
 810a9e0:	e7ee      	b.n	810a9c0 <__gethex+0x160>
 810a9e2:	f100 0914 	add.w	r9, r0, #20
 810a9e6:	f04f 0b00 	mov.w	fp, #0
 810a9ea:	f1ca 0301 	rsb	r3, sl, #1
 810a9ee:	f8cd 9008 	str.w	r9, [sp, #8]
 810a9f2:	f8cd b000 	str.w	fp, [sp]
 810a9f6:	9306      	str	r3, [sp, #24]
 810a9f8:	42b7      	cmp	r7, r6
 810a9fa:	d340      	bcc.n	810aa7e <__gethex+0x21e>
 810a9fc:	9802      	ldr	r0, [sp, #8]
 810a9fe:	9b00      	ldr	r3, [sp, #0]
 810aa00:	f840 3b04 	str.w	r3, [r0], #4
 810aa04:	eba0 0009 	sub.w	r0, r0, r9
 810aa08:	1080      	asrs	r0, r0, #2
 810aa0a:	0146      	lsls	r6, r0, #5
 810aa0c:	6120      	str	r0, [r4, #16]
 810aa0e:	4618      	mov	r0, r3
 810aa10:	f000 fbca 	bl	810b1a8 <__hi0bits>
 810aa14:	1a30      	subs	r0, r6, r0
 810aa16:	f8d8 6000 	ldr.w	r6, [r8]
 810aa1a:	42b0      	cmp	r0, r6
 810aa1c:	dd63      	ble.n	810aae6 <__gethex+0x286>
 810aa1e:	1b87      	subs	r7, r0, r6
 810aa20:	4639      	mov	r1, r7
 810aa22:	4620      	mov	r0, r4
 810aa24:	f000 ff64 	bl	810b8f0 <__any_on>
 810aa28:	4682      	mov	sl, r0
 810aa2a:	b1a8      	cbz	r0, 810aa58 <__gethex+0x1f8>
 810aa2c:	1e7b      	subs	r3, r7, #1
 810aa2e:	1159      	asrs	r1, r3, #5
 810aa30:	f003 021f 	and.w	r2, r3, #31
 810aa34:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810aa38:	f04f 0a01 	mov.w	sl, #1
 810aa3c:	fa0a f202 	lsl.w	r2, sl, r2
 810aa40:	420a      	tst	r2, r1
 810aa42:	d009      	beq.n	810aa58 <__gethex+0x1f8>
 810aa44:	4553      	cmp	r3, sl
 810aa46:	dd05      	ble.n	810aa54 <__gethex+0x1f4>
 810aa48:	1eb9      	subs	r1, r7, #2
 810aa4a:	4620      	mov	r0, r4
 810aa4c:	f000 ff50 	bl	810b8f0 <__any_on>
 810aa50:	2800      	cmp	r0, #0
 810aa52:	d145      	bne.n	810aae0 <__gethex+0x280>
 810aa54:	f04f 0a02 	mov.w	sl, #2
 810aa58:	4639      	mov	r1, r7
 810aa5a:	4620      	mov	r0, r4
 810aa5c:	f7ff fe98 	bl	810a790 <rshift>
 810aa60:	443d      	add	r5, r7
 810aa62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810aa66:	42ab      	cmp	r3, r5
 810aa68:	da4c      	bge.n	810ab04 <__gethex+0x2a4>
 810aa6a:	ee18 0a10 	vmov	r0, s16
 810aa6e:	4621      	mov	r1, r4
 810aa70:	f000 fae4 	bl	810b03c <_Bfree>
 810aa74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810aa76:	2300      	movs	r3, #0
 810aa78:	6013      	str	r3, [r2, #0]
 810aa7a:	27a3      	movs	r7, #163	; 0xa3
 810aa7c:	e785      	b.n	810a98a <__gethex+0x12a>
 810aa7e:	1e73      	subs	r3, r6, #1
 810aa80:	9a05      	ldr	r2, [sp, #20]
 810aa82:	9303      	str	r3, [sp, #12]
 810aa84:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810aa88:	4293      	cmp	r3, r2
 810aa8a:	d019      	beq.n	810aac0 <__gethex+0x260>
 810aa8c:	f1bb 0f20 	cmp.w	fp, #32
 810aa90:	d107      	bne.n	810aaa2 <__gethex+0x242>
 810aa92:	9b02      	ldr	r3, [sp, #8]
 810aa94:	9a00      	ldr	r2, [sp, #0]
 810aa96:	f843 2b04 	str.w	r2, [r3], #4
 810aa9a:	9302      	str	r3, [sp, #8]
 810aa9c:	2300      	movs	r3, #0
 810aa9e:	9300      	str	r3, [sp, #0]
 810aaa0:	469b      	mov	fp, r3
 810aaa2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810aaa6:	f7ff fec5 	bl	810a834 <__hexdig_fun>
 810aaaa:	9b00      	ldr	r3, [sp, #0]
 810aaac:	f000 000f 	and.w	r0, r0, #15
 810aab0:	fa00 f00b 	lsl.w	r0, r0, fp
 810aab4:	4303      	orrs	r3, r0
 810aab6:	9300      	str	r3, [sp, #0]
 810aab8:	f10b 0b04 	add.w	fp, fp, #4
 810aabc:	9b03      	ldr	r3, [sp, #12]
 810aabe:	e00d      	b.n	810aadc <__gethex+0x27c>
 810aac0:	9b03      	ldr	r3, [sp, #12]
 810aac2:	9a06      	ldr	r2, [sp, #24]
 810aac4:	4413      	add	r3, r2
 810aac6:	42bb      	cmp	r3, r7
 810aac8:	d3e0      	bcc.n	810aa8c <__gethex+0x22c>
 810aaca:	4618      	mov	r0, r3
 810aacc:	9901      	ldr	r1, [sp, #4]
 810aace:	9307      	str	r3, [sp, #28]
 810aad0:	4652      	mov	r2, sl
 810aad2:	f001 fa0d 	bl	810bef0 <strncmp>
 810aad6:	9b07      	ldr	r3, [sp, #28]
 810aad8:	2800      	cmp	r0, #0
 810aada:	d1d7      	bne.n	810aa8c <__gethex+0x22c>
 810aadc:	461e      	mov	r6, r3
 810aade:	e78b      	b.n	810a9f8 <__gethex+0x198>
 810aae0:	f04f 0a03 	mov.w	sl, #3
 810aae4:	e7b8      	b.n	810aa58 <__gethex+0x1f8>
 810aae6:	da0a      	bge.n	810aafe <__gethex+0x29e>
 810aae8:	1a37      	subs	r7, r6, r0
 810aaea:	4621      	mov	r1, r4
 810aaec:	ee18 0a10 	vmov	r0, s16
 810aaf0:	463a      	mov	r2, r7
 810aaf2:	f000 fcbf 	bl	810b474 <__lshift>
 810aaf6:	1bed      	subs	r5, r5, r7
 810aaf8:	4604      	mov	r4, r0
 810aafa:	f100 0914 	add.w	r9, r0, #20
 810aafe:	f04f 0a00 	mov.w	sl, #0
 810ab02:	e7ae      	b.n	810aa62 <__gethex+0x202>
 810ab04:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810ab08:	42a8      	cmp	r0, r5
 810ab0a:	dd72      	ble.n	810abf2 <__gethex+0x392>
 810ab0c:	1b45      	subs	r5, r0, r5
 810ab0e:	42ae      	cmp	r6, r5
 810ab10:	dc36      	bgt.n	810ab80 <__gethex+0x320>
 810ab12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810ab16:	2b02      	cmp	r3, #2
 810ab18:	d02a      	beq.n	810ab70 <__gethex+0x310>
 810ab1a:	2b03      	cmp	r3, #3
 810ab1c:	d02c      	beq.n	810ab78 <__gethex+0x318>
 810ab1e:	2b01      	cmp	r3, #1
 810ab20:	d115      	bne.n	810ab4e <__gethex+0x2ee>
 810ab22:	42ae      	cmp	r6, r5
 810ab24:	d113      	bne.n	810ab4e <__gethex+0x2ee>
 810ab26:	2e01      	cmp	r6, #1
 810ab28:	d10b      	bne.n	810ab42 <__gethex+0x2e2>
 810ab2a:	9a04      	ldr	r2, [sp, #16]
 810ab2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810ab30:	6013      	str	r3, [r2, #0]
 810ab32:	2301      	movs	r3, #1
 810ab34:	6123      	str	r3, [r4, #16]
 810ab36:	f8c9 3000 	str.w	r3, [r9]
 810ab3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ab3c:	2762      	movs	r7, #98	; 0x62
 810ab3e:	601c      	str	r4, [r3, #0]
 810ab40:	e723      	b.n	810a98a <__gethex+0x12a>
 810ab42:	1e71      	subs	r1, r6, #1
 810ab44:	4620      	mov	r0, r4
 810ab46:	f000 fed3 	bl	810b8f0 <__any_on>
 810ab4a:	2800      	cmp	r0, #0
 810ab4c:	d1ed      	bne.n	810ab2a <__gethex+0x2ca>
 810ab4e:	ee18 0a10 	vmov	r0, s16
 810ab52:	4621      	mov	r1, r4
 810ab54:	f000 fa72 	bl	810b03c <_Bfree>
 810ab58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810ab5a:	2300      	movs	r3, #0
 810ab5c:	6013      	str	r3, [r2, #0]
 810ab5e:	2750      	movs	r7, #80	; 0x50
 810ab60:	e713      	b.n	810a98a <__gethex+0x12a>
 810ab62:	bf00      	nop
 810ab64:	0810e430 	.word	0x0810e430
 810ab68:	0810e3b4 	.word	0x0810e3b4
 810ab6c:	0810e3c5 	.word	0x0810e3c5
 810ab70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ab72:	2b00      	cmp	r3, #0
 810ab74:	d1eb      	bne.n	810ab4e <__gethex+0x2ee>
 810ab76:	e7d8      	b.n	810ab2a <__gethex+0x2ca>
 810ab78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ab7a:	2b00      	cmp	r3, #0
 810ab7c:	d1d5      	bne.n	810ab2a <__gethex+0x2ca>
 810ab7e:	e7e6      	b.n	810ab4e <__gethex+0x2ee>
 810ab80:	1e6f      	subs	r7, r5, #1
 810ab82:	f1ba 0f00 	cmp.w	sl, #0
 810ab86:	d131      	bne.n	810abec <__gethex+0x38c>
 810ab88:	b127      	cbz	r7, 810ab94 <__gethex+0x334>
 810ab8a:	4639      	mov	r1, r7
 810ab8c:	4620      	mov	r0, r4
 810ab8e:	f000 feaf 	bl	810b8f0 <__any_on>
 810ab92:	4682      	mov	sl, r0
 810ab94:	117b      	asrs	r3, r7, #5
 810ab96:	2101      	movs	r1, #1
 810ab98:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810ab9c:	f007 071f 	and.w	r7, r7, #31
 810aba0:	fa01 f707 	lsl.w	r7, r1, r7
 810aba4:	421f      	tst	r7, r3
 810aba6:	4629      	mov	r1, r5
 810aba8:	4620      	mov	r0, r4
 810abaa:	bf18      	it	ne
 810abac:	f04a 0a02 	orrne.w	sl, sl, #2
 810abb0:	1b76      	subs	r6, r6, r5
 810abb2:	f7ff fded 	bl	810a790 <rshift>
 810abb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810abba:	2702      	movs	r7, #2
 810abbc:	f1ba 0f00 	cmp.w	sl, #0
 810abc0:	d048      	beq.n	810ac54 <__gethex+0x3f4>
 810abc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810abc6:	2b02      	cmp	r3, #2
 810abc8:	d015      	beq.n	810abf6 <__gethex+0x396>
 810abca:	2b03      	cmp	r3, #3
 810abcc:	d017      	beq.n	810abfe <__gethex+0x39e>
 810abce:	2b01      	cmp	r3, #1
 810abd0:	d109      	bne.n	810abe6 <__gethex+0x386>
 810abd2:	f01a 0f02 	tst.w	sl, #2
 810abd6:	d006      	beq.n	810abe6 <__gethex+0x386>
 810abd8:	f8d9 0000 	ldr.w	r0, [r9]
 810abdc:	ea4a 0a00 	orr.w	sl, sl, r0
 810abe0:	f01a 0f01 	tst.w	sl, #1
 810abe4:	d10e      	bne.n	810ac04 <__gethex+0x3a4>
 810abe6:	f047 0710 	orr.w	r7, r7, #16
 810abea:	e033      	b.n	810ac54 <__gethex+0x3f4>
 810abec:	f04f 0a01 	mov.w	sl, #1
 810abf0:	e7d0      	b.n	810ab94 <__gethex+0x334>
 810abf2:	2701      	movs	r7, #1
 810abf4:	e7e2      	b.n	810abbc <__gethex+0x35c>
 810abf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810abf8:	f1c3 0301 	rsb	r3, r3, #1
 810abfc:	9315      	str	r3, [sp, #84]	; 0x54
 810abfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810ac00:	2b00      	cmp	r3, #0
 810ac02:	d0f0      	beq.n	810abe6 <__gethex+0x386>
 810ac04:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810ac08:	f104 0314 	add.w	r3, r4, #20
 810ac0c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810ac10:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810ac14:	f04f 0c00 	mov.w	ip, #0
 810ac18:	4618      	mov	r0, r3
 810ac1a:	f853 2b04 	ldr.w	r2, [r3], #4
 810ac1e:	f1b2 3fff 	cmp.w	r2, #4294967295
 810ac22:	d01c      	beq.n	810ac5e <__gethex+0x3fe>
 810ac24:	3201      	adds	r2, #1
 810ac26:	6002      	str	r2, [r0, #0]
 810ac28:	2f02      	cmp	r7, #2
 810ac2a:	f104 0314 	add.w	r3, r4, #20
 810ac2e:	d13f      	bne.n	810acb0 <__gethex+0x450>
 810ac30:	f8d8 2000 	ldr.w	r2, [r8]
 810ac34:	3a01      	subs	r2, #1
 810ac36:	42b2      	cmp	r2, r6
 810ac38:	d10a      	bne.n	810ac50 <__gethex+0x3f0>
 810ac3a:	1171      	asrs	r1, r6, #5
 810ac3c:	2201      	movs	r2, #1
 810ac3e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810ac42:	f006 061f 	and.w	r6, r6, #31
 810ac46:	fa02 f606 	lsl.w	r6, r2, r6
 810ac4a:	421e      	tst	r6, r3
 810ac4c:	bf18      	it	ne
 810ac4e:	4617      	movne	r7, r2
 810ac50:	f047 0720 	orr.w	r7, r7, #32
 810ac54:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810ac56:	601c      	str	r4, [r3, #0]
 810ac58:	9b04      	ldr	r3, [sp, #16]
 810ac5a:	601d      	str	r5, [r3, #0]
 810ac5c:	e695      	b.n	810a98a <__gethex+0x12a>
 810ac5e:	4299      	cmp	r1, r3
 810ac60:	f843 cc04 	str.w	ip, [r3, #-4]
 810ac64:	d8d8      	bhi.n	810ac18 <__gethex+0x3b8>
 810ac66:	68a3      	ldr	r3, [r4, #8]
 810ac68:	459b      	cmp	fp, r3
 810ac6a:	db19      	blt.n	810aca0 <__gethex+0x440>
 810ac6c:	6861      	ldr	r1, [r4, #4]
 810ac6e:	ee18 0a10 	vmov	r0, s16
 810ac72:	3101      	adds	r1, #1
 810ac74:	f000 f9a2 	bl	810afbc <_Balloc>
 810ac78:	4681      	mov	r9, r0
 810ac7a:	b918      	cbnz	r0, 810ac84 <__gethex+0x424>
 810ac7c:	4b1a      	ldr	r3, [pc, #104]	; (810ace8 <__gethex+0x488>)
 810ac7e:	4602      	mov	r2, r0
 810ac80:	2184      	movs	r1, #132	; 0x84
 810ac82:	e6a8      	b.n	810a9d6 <__gethex+0x176>
 810ac84:	6922      	ldr	r2, [r4, #16]
 810ac86:	3202      	adds	r2, #2
 810ac88:	f104 010c 	add.w	r1, r4, #12
 810ac8c:	0092      	lsls	r2, r2, #2
 810ac8e:	300c      	adds	r0, #12
 810ac90:	f000 f97a 	bl	810af88 <memcpy>
 810ac94:	4621      	mov	r1, r4
 810ac96:	ee18 0a10 	vmov	r0, s16
 810ac9a:	f000 f9cf 	bl	810b03c <_Bfree>
 810ac9e:	464c      	mov	r4, r9
 810aca0:	6923      	ldr	r3, [r4, #16]
 810aca2:	1c5a      	adds	r2, r3, #1
 810aca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810aca8:	6122      	str	r2, [r4, #16]
 810acaa:	2201      	movs	r2, #1
 810acac:	615a      	str	r2, [r3, #20]
 810acae:	e7bb      	b.n	810ac28 <__gethex+0x3c8>
 810acb0:	6922      	ldr	r2, [r4, #16]
 810acb2:	455a      	cmp	r2, fp
 810acb4:	dd0b      	ble.n	810acce <__gethex+0x46e>
 810acb6:	2101      	movs	r1, #1
 810acb8:	4620      	mov	r0, r4
 810acba:	f7ff fd69 	bl	810a790 <rshift>
 810acbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810acc2:	3501      	adds	r5, #1
 810acc4:	42ab      	cmp	r3, r5
 810acc6:	f6ff aed0 	blt.w	810aa6a <__gethex+0x20a>
 810acca:	2701      	movs	r7, #1
 810accc:	e7c0      	b.n	810ac50 <__gethex+0x3f0>
 810acce:	f016 061f 	ands.w	r6, r6, #31
 810acd2:	d0fa      	beq.n	810acca <__gethex+0x46a>
 810acd4:	449a      	add	sl, r3
 810acd6:	f1c6 0620 	rsb	r6, r6, #32
 810acda:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810acde:	f000 fa63 	bl	810b1a8 <__hi0bits>
 810ace2:	42b0      	cmp	r0, r6
 810ace4:	dbe7      	blt.n	810acb6 <__gethex+0x456>
 810ace6:	e7f0      	b.n	810acca <__gethex+0x46a>
 810ace8:	0810e3b4 	.word	0x0810e3b4

0810acec <L_shift>:
 810acec:	f1c2 0208 	rsb	r2, r2, #8
 810acf0:	0092      	lsls	r2, r2, #2
 810acf2:	b570      	push	{r4, r5, r6, lr}
 810acf4:	f1c2 0620 	rsb	r6, r2, #32
 810acf8:	6843      	ldr	r3, [r0, #4]
 810acfa:	6804      	ldr	r4, [r0, #0]
 810acfc:	fa03 f506 	lsl.w	r5, r3, r6
 810ad00:	432c      	orrs	r4, r5
 810ad02:	40d3      	lsrs	r3, r2
 810ad04:	6004      	str	r4, [r0, #0]
 810ad06:	f840 3f04 	str.w	r3, [r0, #4]!
 810ad0a:	4288      	cmp	r0, r1
 810ad0c:	d3f4      	bcc.n	810acf8 <L_shift+0xc>
 810ad0e:	bd70      	pop	{r4, r5, r6, pc}

0810ad10 <__match>:
 810ad10:	b530      	push	{r4, r5, lr}
 810ad12:	6803      	ldr	r3, [r0, #0]
 810ad14:	3301      	adds	r3, #1
 810ad16:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ad1a:	b914      	cbnz	r4, 810ad22 <__match+0x12>
 810ad1c:	6003      	str	r3, [r0, #0]
 810ad1e:	2001      	movs	r0, #1
 810ad20:	bd30      	pop	{r4, r5, pc}
 810ad22:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ad26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810ad2a:	2d19      	cmp	r5, #25
 810ad2c:	bf98      	it	ls
 810ad2e:	3220      	addls	r2, #32
 810ad30:	42a2      	cmp	r2, r4
 810ad32:	d0f0      	beq.n	810ad16 <__match+0x6>
 810ad34:	2000      	movs	r0, #0
 810ad36:	e7f3      	b.n	810ad20 <__match+0x10>

0810ad38 <__hexnan>:
 810ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad3c:	680b      	ldr	r3, [r1, #0]
 810ad3e:	6801      	ldr	r1, [r0, #0]
 810ad40:	115e      	asrs	r6, r3, #5
 810ad42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810ad46:	f013 031f 	ands.w	r3, r3, #31
 810ad4a:	b087      	sub	sp, #28
 810ad4c:	bf18      	it	ne
 810ad4e:	3604      	addne	r6, #4
 810ad50:	2500      	movs	r5, #0
 810ad52:	1f37      	subs	r7, r6, #4
 810ad54:	4682      	mov	sl, r0
 810ad56:	4690      	mov	r8, r2
 810ad58:	9301      	str	r3, [sp, #4]
 810ad5a:	f846 5c04 	str.w	r5, [r6, #-4]
 810ad5e:	46b9      	mov	r9, r7
 810ad60:	463c      	mov	r4, r7
 810ad62:	9502      	str	r5, [sp, #8]
 810ad64:	46ab      	mov	fp, r5
 810ad66:	784a      	ldrb	r2, [r1, #1]
 810ad68:	1c4b      	adds	r3, r1, #1
 810ad6a:	9303      	str	r3, [sp, #12]
 810ad6c:	b342      	cbz	r2, 810adc0 <__hexnan+0x88>
 810ad6e:	4610      	mov	r0, r2
 810ad70:	9105      	str	r1, [sp, #20]
 810ad72:	9204      	str	r2, [sp, #16]
 810ad74:	f7ff fd5e 	bl	810a834 <__hexdig_fun>
 810ad78:	2800      	cmp	r0, #0
 810ad7a:	d14f      	bne.n	810ae1c <__hexnan+0xe4>
 810ad7c:	9a04      	ldr	r2, [sp, #16]
 810ad7e:	9905      	ldr	r1, [sp, #20]
 810ad80:	2a20      	cmp	r2, #32
 810ad82:	d818      	bhi.n	810adb6 <__hexnan+0x7e>
 810ad84:	9b02      	ldr	r3, [sp, #8]
 810ad86:	459b      	cmp	fp, r3
 810ad88:	dd13      	ble.n	810adb2 <__hexnan+0x7a>
 810ad8a:	454c      	cmp	r4, r9
 810ad8c:	d206      	bcs.n	810ad9c <__hexnan+0x64>
 810ad8e:	2d07      	cmp	r5, #7
 810ad90:	dc04      	bgt.n	810ad9c <__hexnan+0x64>
 810ad92:	462a      	mov	r2, r5
 810ad94:	4649      	mov	r1, r9
 810ad96:	4620      	mov	r0, r4
 810ad98:	f7ff ffa8 	bl	810acec <L_shift>
 810ad9c:	4544      	cmp	r4, r8
 810ad9e:	d950      	bls.n	810ae42 <__hexnan+0x10a>
 810ada0:	2300      	movs	r3, #0
 810ada2:	f1a4 0904 	sub.w	r9, r4, #4
 810ada6:	f844 3c04 	str.w	r3, [r4, #-4]
 810adaa:	f8cd b008 	str.w	fp, [sp, #8]
 810adae:	464c      	mov	r4, r9
 810adb0:	461d      	mov	r5, r3
 810adb2:	9903      	ldr	r1, [sp, #12]
 810adb4:	e7d7      	b.n	810ad66 <__hexnan+0x2e>
 810adb6:	2a29      	cmp	r2, #41	; 0x29
 810adb8:	d156      	bne.n	810ae68 <__hexnan+0x130>
 810adba:	3102      	adds	r1, #2
 810adbc:	f8ca 1000 	str.w	r1, [sl]
 810adc0:	f1bb 0f00 	cmp.w	fp, #0
 810adc4:	d050      	beq.n	810ae68 <__hexnan+0x130>
 810adc6:	454c      	cmp	r4, r9
 810adc8:	d206      	bcs.n	810add8 <__hexnan+0xa0>
 810adca:	2d07      	cmp	r5, #7
 810adcc:	dc04      	bgt.n	810add8 <__hexnan+0xa0>
 810adce:	462a      	mov	r2, r5
 810add0:	4649      	mov	r1, r9
 810add2:	4620      	mov	r0, r4
 810add4:	f7ff ff8a 	bl	810acec <L_shift>
 810add8:	4544      	cmp	r4, r8
 810adda:	d934      	bls.n	810ae46 <__hexnan+0x10e>
 810addc:	f1a8 0204 	sub.w	r2, r8, #4
 810ade0:	4623      	mov	r3, r4
 810ade2:	f853 1b04 	ldr.w	r1, [r3], #4
 810ade6:	f842 1f04 	str.w	r1, [r2, #4]!
 810adea:	429f      	cmp	r7, r3
 810adec:	d2f9      	bcs.n	810ade2 <__hexnan+0xaa>
 810adee:	1b3b      	subs	r3, r7, r4
 810adf0:	f023 0303 	bic.w	r3, r3, #3
 810adf4:	3304      	adds	r3, #4
 810adf6:	3401      	adds	r4, #1
 810adf8:	3e03      	subs	r6, #3
 810adfa:	42b4      	cmp	r4, r6
 810adfc:	bf88      	it	hi
 810adfe:	2304      	movhi	r3, #4
 810ae00:	4443      	add	r3, r8
 810ae02:	2200      	movs	r2, #0
 810ae04:	f843 2b04 	str.w	r2, [r3], #4
 810ae08:	429f      	cmp	r7, r3
 810ae0a:	d2fb      	bcs.n	810ae04 <__hexnan+0xcc>
 810ae0c:	683b      	ldr	r3, [r7, #0]
 810ae0e:	b91b      	cbnz	r3, 810ae18 <__hexnan+0xe0>
 810ae10:	4547      	cmp	r7, r8
 810ae12:	d127      	bne.n	810ae64 <__hexnan+0x12c>
 810ae14:	2301      	movs	r3, #1
 810ae16:	603b      	str	r3, [r7, #0]
 810ae18:	2005      	movs	r0, #5
 810ae1a:	e026      	b.n	810ae6a <__hexnan+0x132>
 810ae1c:	3501      	adds	r5, #1
 810ae1e:	2d08      	cmp	r5, #8
 810ae20:	f10b 0b01 	add.w	fp, fp, #1
 810ae24:	dd06      	ble.n	810ae34 <__hexnan+0xfc>
 810ae26:	4544      	cmp	r4, r8
 810ae28:	d9c3      	bls.n	810adb2 <__hexnan+0x7a>
 810ae2a:	2300      	movs	r3, #0
 810ae2c:	f844 3c04 	str.w	r3, [r4, #-4]
 810ae30:	2501      	movs	r5, #1
 810ae32:	3c04      	subs	r4, #4
 810ae34:	6822      	ldr	r2, [r4, #0]
 810ae36:	f000 000f 	and.w	r0, r0, #15
 810ae3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810ae3e:	6022      	str	r2, [r4, #0]
 810ae40:	e7b7      	b.n	810adb2 <__hexnan+0x7a>
 810ae42:	2508      	movs	r5, #8
 810ae44:	e7b5      	b.n	810adb2 <__hexnan+0x7a>
 810ae46:	9b01      	ldr	r3, [sp, #4]
 810ae48:	2b00      	cmp	r3, #0
 810ae4a:	d0df      	beq.n	810ae0c <__hexnan+0xd4>
 810ae4c:	f04f 32ff 	mov.w	r2, #4294967295
 810ae50:	f1c3 0320 	rsb	r3, r3, #32
 810ae54:	fa22 f303 	lsr.w	r3, r2, r3
 810ae58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810ae5c:	401a      	ands	r2, r3
 810ae5e:	f846 2c04 	str.w	r2, [r6, #-4]
 810ae62:	e7d3      	b.n	810ae0c <__hexnan+0xd4>
 810ae64:	3f04      	subs	r7, #4
 810ae66:	e7d1      	b.n	810ae0c <__hexnan+0xd4>
 810ae68:	2004      	movs	r0, #4
 810ae6a:	b007      	add	sp, #28
 810ae6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ae70 <_localeconv_r>:
 810ae70:	4800      	ldr	r0, [pc, #0]	; (810ae74 <_localeconv_r+0x4>)
 810ae72:	4770      	bx	lr
 810ae74:	100001b8 	.word	0x100001b8

0810ae78 <_lseek_r>:
 810ae78:	b538      	push	{r3, r4, r5, lr}
 810ae7a:	4d07      	ldr	r5, [pc, #28]	; (810ae98 <_lseek_r+0x20>)
 810ae7c:	4604      	mov	r4, r0
 810ae7e:	4608      	mov	r0, r1
 810ae80:	4611      	mov	r1, r2
 810ae82:	2200      	movs	r2, #0
 810ae84:	602a      	str	r2, [r5, #0]
 810ae86:	461a      	mov	r2, r3
 810ae88:	f7f7 feda 	bl	8102c40 <_lseek>
 810ae8c:	1c43      	adds	r3, r0, #1
 810ae8e:	d102      	bne.n	810ae96 <_lseek_r+0x1e>
 810ae90:	682b      	ldr	r3, [r5, #0]
 810ae92:	b103      	cbz	r3, 810ae96 <_lseek_r+0x1e>
 810ae94:	6023      	str	r3, [r4, #0]
 810ae96:	bd38      	pop	{r3, r4, r5, pc}
 810ae98:	1000048c 	.word	0x1000048c

0810ae9c <__swhatbuf_r>:
 810ae9c:	b570      	push	{r4, r5, r6, lr}
 810ae9e:	460e      	mov	r6, r1
 810aea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810aea4:	2900      	cmp	r1, #0
 810aea6:	b096      	sub	sp, #88	; 0x58
 810aea8:	4614      	mov	r4, r2
 810aeaa:	461d      	mov	r5, r3
 810aeac:	da07      	bge.n	810aebe <__swhatbuf_r+0x22>
 810aeae:	2300      	movs	r3, #0
 810aeb0:	602b      	str	r3, [r5, #0]
 810aeb2:	89b3      	ldrh	r3, [r6, #12]
 810aeb4:	061a      	lsls	r2, r3, #24
 810aeb6:	d410      	bmi.n	810aeda <__swhatbuf_r+0x3e>
 810aeb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810aebc:	e00e      	b.n	810aedc <__swhatbuf_r+0x40>
 810aebe:	466a      	mov	r2, sp
 810aec0:	f001 f866 	bl	810bf90 <_fstat_r>
 810aec4:	2800      	cmp	r0, #0
 810aec6:	dbf2      	blt.n	810aeae <__swhatbuf_r+0x12>
 810aec8:	9a01      	ldr	r2, [sp, #4]
 810aeca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810aece:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810aed2:	425a      	negs	r2, r3
 810aed4:	415a      	adcs	r2, r3
 810aed6:	602a      	str	r2, [r5, #0]
 810aed8:	e7ee      	b.n	810aeb8 <__swhatbuf_r+0x1c>
 810aeda:	2340      	movs	r3, #64	; 0x40
 810aedc:	2000      	movs	r0, #0
 810aede:	6023      	str	r3, [r4, #0]
 810aee0:	b016      	add	sp, #88	; 0x58
 810aee2:	bd70      	pop	{r4, r5, r6, pc}

0810aee4 <__smakebuf_r>:
 810aee4:	898b      	ldrh	r3, [r1, #12]
 810aee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810aee8:	079d      	lsls	r5, r3, #30
 810aeea:	4606      	mov	r6, r0
 810aeec:	460c      	mov	r4, r1
 810aeee:	d507      	bpl.n	810af00 <__smakebuf_r+0x1c>
 810aef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810aef4:	6023      	str	r3, [r4, #0]
 810aef6:	6123      	str	r3, [r4, #16]
 810aef8:	2301      	movs	r3, #1
 810aefa:	6163      	str	r3, [r4, #20]
 810aefc:	b002      	add	sp, #8
 810aefe:	bd70      	pop	{r4, r5, r6, pc}
 810af00:	ab01      	add	r3, sp, #4
 810af02:	466a      	mov	r2, sp
 810af04:	f7ff ffca 	bl	810ae9c <__swhatbuf_r>
 810af08:	9900      	ldr	r1, [sp, #0]
 810af0a:	4605      	mov	r5, r0
 810af0c:	4630      	mov	r0, r6
 810af0e:	f7fc fd8f 	bl	8107a30 <_malloc_r>
 810af12:	b948      	cbnz	r0, 810af28 <__smakebuf_r+0x44>
 810af14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810af18:	059a      	lsls	r2, r3, #22
 810af1a:	d4ef      	bmi.n	810aefc <__smakebuf_r+0x18>
 810af1c:	f023 0303 	bic.w	r3, r3, #3
 810af20:	f043 0302 	orr.w	r3, r3, #2
 810af24:	81a3      	strh	r3, [r4, #12]
 810af26:	e7e3      	b.n	810aef0 <__smakebuf_r+0xc>
 810af28:	4b0d      	ldr	r3, [pc, #52]	; (810af60 <__smakebuf_r+0x7c>)
 810af2a:	62b3      	str	r3, [r6, #40]	; 0x28
 810af2c:	89a3      	ldrh	r3, [r4, #12]
 810af2e:	6020      	str	r0, [r4, #0]
 810af30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810af34:	81a3      	strh	r3, [r4, #12]
 810af36:	9b00      	ldr	r3, [sp, #0]
 810af38:	6163      	str	r3, [r4, #20]
 810af3a:	9b01      	ldr	r3, [sp, #4]
 810af3c:	6120      	str	r0, [r4, #16]
 810af3e:	b15b      	cbz	r3, 810af58 <__smakebuf_r+0x74>
 810af40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810af44:	4630      	mov	r0, r6
 810af46:	f001 f835 	bl	810bfb4 <_isatty_r>
 810af4a:	b128      	cbz	r0, 810af58 <__smakebuf_r+0x74>
 810af4c:	89a3      	ldrh	r3, [r4, #12]
 810af4e:	f023 0303 	bic.w	r3, r3, #3
 810af52:	f043 0301 	orr.w	r3, r3, #1
 810af56:	81a3      	strh	r3, [r4, #12]
 810af58:	89a0      	ldrh	r0, [r4, #12]
 810af5a:	4305      	orrs	r5, r0
 810af5c:	81a5      	strh	r5, [r4, #12]
 810af5e:	e7cd      	b.n	810aefc <__smakebuf_r+0x18>
 810af60:	0810776d 	.word	0x0810776d

0810af64 <__ascii_mbtowc>:
 810af64:	b082      	sub	sp, #8
 810af66:	b901      	cbnz	r1, 810af6a <__ascii_mbtowc+0x6>
 810af68:	a901      	add	r1, sp, #4
 810af6a:	b142      	cbz	r2, 810af7e <__ascii_mbtowc+0x1a>
 810af6c:	b14b      	cbz	r3, 810af82 <__ascii_mbtowc+0x1e>
 810af6e:	7813      	ldrb	r3, [r2, #0]
 810af70:	600b      	str	r3, [r1, #0]
 810af72:	7812      	ldrb	r2, [r2, #0]
 810af74:	1e10      	subs	r0, r2, #0
 810af76:	bf18      	it	ne
 810af78:	2001      	movne	r0, #1
 810af7a:	b002      	add	sp, #8
 810af7c:	4770      	bx	lr
 810af7e:	4610      	mov	r0, r2
 810af80:	e7fb      	b.n	810af7a <__ascii_mbtowc+0x16>
 810af82:	f06f 0001 	mvn.w	r0, #1
 810af86:	e7f8      	b.n	810af7a <__ascii_mbtowc+0x16>

0810af88 <memcpy>:
 810af88:	440a      	add	r2, r1
 810af8a:	4291      	cmp	r1, r2
 810af8c:	f100 33ff 	add.w	r3, r0, #4294967295
 810af90:	d100      	bne.n	810af94 <memcpy+0xc>
 810af92:	4770      	bx	lr
 810af94:	b510      	push	{r4, lr}
 810af96:	f811 4b01 	ldrb.w	r4, [r1], #1
 810af9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810af9e:	4291      	cmp	r1, r2
 810afa0:	d1f9      	bne.n	810af96 <memcpy+0xe>
 810afa2:	bd10      	pop	{r4, pc}

0810afa4 <__malloc_lock>:
 810afa4:	4801      	ldr	r0, [pc, #4]	; (810afac <__malloc_lock+0x8>)
 810afa6:	f7fc bcd8 	b.w	810795a <__retarget_lock_acquire_recursive>
 810afaa:	bf00      	nop
 810afac:	10000484 	.word	0x10000484

0810afb0 <__malloc_unlock>:
 810afb0:	4801      	ldr	r0, [pc, #4]	; (810afb8 <__malloc_unlock+0x8>)
 810afb2:	f7fc bcd3 	b.w	810795c <__retarget_lock_release_recursive>
 810afb6:	bf00      	nop
 810afb8:	10000484 	.word	0x10000484

0810afbc <_Balloc>:
 810afbc:	b570      	push	{r4, r5, r6, lr}
 810afbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810afc0:	4604      	mov	r4, r0
 810afc2:	460d      	mov	r5, r1
 810afc4:	b976      	cbnz	r6, 810afe4 <_Balloc+0x28>
 810afc6:	2010      	movs	r0, #16
 810afc8:	f7fc fcca 	bl	8107960 <malloc>
 810afcc:	4602      	mov	r2, r0
 810afce:	6260      	str	r0, [r4, #36]	; 0x24
 810afd0:	b920      	cbnz	r0, 810afdc <_Balloc+0x20>
 810afd2:	4b18      	ldr	r3, [pc, #96]	; (810b034 <_Balloc+0x78>)
 810afd4:	4818      	ldr	r0, [pc, #96]	; (810b038 <_Balloc+0x7c>)
 810afd6:	2166      	movs	r1, #102	; 0x66
 810afd8:	f000 ffaa 	bl	810bf30 <__assert_func>
 810afdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810afe0:	6006      	str	r6, [r0, #0]
 810afe2:	60c6      	str	r6, [r0, #12]
 810afe4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810afe6:	68f3      	ldr	r3, [r6, #12]
 810afe8:	b183      	cbz	r3, 810b00c <_Balloc+0x50>
 810afea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810afec:	68db      	ldr	r3, [r3, #12]
 810afee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810aff2:	b9b8      	cbnz	r0, 810b024 <_Balloc+0x68>
 810aff4:	2101      	movs	r1, #1
 810aff6:	fa01 f605 	lsl.w	r6, r1, r5
 810affa:	1d72      	adds	r2, r6, #5
 810affc:	0092      	lsls	r2, r2, #2
 810affe:	4620      	mov	r0, r4
 810b000:	f000 fc97 	bl	810b932 <_calloc_r>
 810b004:	b160      	cbz	r0, 810b020 <_Balloc+0x64>
 810b006:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810b00a:	e00e      	b.n	810b02a <_Balloc+0x6e>
 810b00c:	2221      	movs	r2, #33	; 0x21
 810b00e:	2104      	movs	r1, #4
 810b010:	4620      	mov	r0, r4
 810b012:	f000 fc8e 	bl	810b932 <_calloc_r>
 810b016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810b018:	60f0      	str	r0, [r6, #12]
 810b01a:	68db      	ldr	r3, [r3, #12]
 810b01c:	2b00      	cmp	r3, #0
 810b01e:	d1e4      	bne.n	810afea <_Balloc+0x2e>
 810b020:	2000      	movs	r0, #0
 810b022:	bd70      	pop	{r4, r5, r6, pc}
 810b024:	6802      	ldr	r2, [r0, #0]
 810b026:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810b02a:	2300      	movs	r3, #0
 810b02c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810b030:	e7f7      	b.n	810b022 <_Balloc+0x66>
 810b032:	bf00      	nop
 810b034:	0810e33e 	.word	0x0810e33e
 810b038:	0810e444 	.word	0x0810e444

0810b03c <_Bfree>:
 810b03c:	b570      	push	{r4, r5, r6, lr}
 810b03e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810b040:	4605      	mov	r5, r0
 810b042:	460c      	mov	r4, r1
 810b044:	b976      	cbnz	r6, 810b064 <_Bfree+0x28>
 810b046:	2010      	movs	r0, #16
 810b048:	f7fc fc8a 	bl	8107960 <malloc>
 810b04c:	4602      	mov	r2, r0
 810b04e:	6268      	str	r0, [r5, #36]	; 0x24
 810b050:	b920      	cbnz	r0, 810b05c <_Bfree+0x20>
 810b052:	4b09      	ldr	r3, [pc, #36]	; (810b078 <_Bfree+0x3c>)
 810b054:	4809      	ldr	r0, [pc, #36]	; (810b07c <_Bfree+0x40>)
 810b056:	218a      	movs	r1, #138	; 0x8a
 810b058:	f000 ff6a 	bl	810bf30 <__assert_func>
 810b05c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810b060:	6006      	str	r6, [r0, #0]
 810b062:	60c6      	str	r6, [r0, #12]
 810b064:	b13c      	cbz	r4, 810b076 <_Bfree+0x3a>
 810b066:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810b068:	6862      	ldr	r2, [r4, #4]
 810b06a:	68db      	ldr	r3, [r3, #12]
 810b06c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810b070:	6021      	str	r1, [r4, #0]
 810b072:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810b076:	bd70      	pop	{r4, r5, r6, pc}
 810b078:	0810e33e 	.word	0x0810e33e
 810b07c:	0810e444 	.word	0x0810e444

0810b080 <__multadd>:
 810b080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810b084:	690e      	ldr	r6, [r1, #16]
 810b086:	4607      	mov	r7, r0
 810b088:	4698      	mov	r8, r3
 810b08a:	460c      	mov	r4, r1
 810b08c:	f101 0014 	add.w	r0, r1, #20
 810b090:	2300      	movs	r3, #0
 810b092:	6805      	ldr	r5, [r0, #0]
 810b094:	b2a9      	uxth	r1, r5
 810b096:	fb02 8101 	mla	r1, r2, r1, r8
 810b09a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810b09e:	0c2d      	lsrs	r5, r5, #16
 810b0a0:	fb02 c505 	mla	r5, r2, r5, ip
 810b0a4:	b289      	uxth	r1, r1
 810b0a6:	3301      	adds	r3, #1
 810b0a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810b0ac:	429e      	cmp	r6, r3
 810b0ae:	f840 1b04 	str.w	r1, [r0], #4
 810b0b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810b0b6:	dcec      	bgt.n	810b092 <__multadd+0x12>
 810b0b8:	f1b8 0f00 	cmp.w	r8, #0
 810b0bc:	d022      	beq.n	810b104 <__multadd+0x84>
 810b0be:	68a3      	ldr	r3, [r4, #8]
 810b0c0:	42b3      	cmp	r3, r6
 810b0c2:	dc19      	bgt.n	810b0f8 <__multadd+0x78>
 810b0c4:	6861      	ldr	r1, [r4, #4]
 810b0c6:	4638      	mov	r0, r7
 810b0c8:	3101      	adds	r1, #1
 810b0ca:	f7ff ff77 	bl	810afbc <_Balloc>
 810b0ce:	4605      	mov	r5, r0
 810b0d0:	b928      	cbnz	r0, 810b0de <__multadd+0x5e>
 810b0d2:	4602      	mov	r2, r0
 810b0d4:	4b0d      	ldr	r3, [pc, #52]	; (810b10c <__multadd+0x8c>)
 810b0d6:	480e      	ldr	r0, [pc, #56]	; (810b110 <__multadd+0x90>)
 810b0d8:	21b5      	movs	r1, #181	; 0xb5
 810b0da:	f000 ff29 	bl	810bf30 <__assert_func>
 810b0de:	6922      	ldr	r2, [r4, #16]
 810b0e0:	3202      	adds	r2, #2
 810b0e2:	f104 010c 	add.w	r1, r4, #12
 810b0e6:	0092      	lsls	r2, r2, #2
 810b0e8:	300c      	adds	r0, #12
 810b0ea:	f7ff ff4d 	bl	810af88 <memcpy>
 810b0ee:	4621      	mov	r1, r4
 810b0f0:	4638      	mov	r0, r7
 810b0f2:	f7ff ffa3 	bl	810b03c <_Bfree>
 810b0f6:	462c      	mov	r4, r5
 810b0f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810b0fc:	3601      	adds	r6, #1
 810b0fe:	f8c3 8014 	str.w	r8, [r3, #20]
 810b102:	6126      	str	r6, [r4, #16]
 810b104:	4620      	mov	r0, r4
 810b106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b10a:	bf00      	nop
 810b10c:	0810e3b4 	.word	0x0810e3b4
 810b110:	0810e444 	.word	0x0810e444

0810b114 <__s2b>:
 810b114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b118:	460c      	mov	r4, r1
 810b11a:	4615      	mov	r5, r2
 810b11c:	461f      	mov	r7, r3
 810b11e:	2209      	movs	r2, #9
 810b120:	3308      	adds	r3, #8
 810b122:	4606      	mov	r6, r0
 810b124:	fb93 f3f2 	sdiv	r3, r3, r2
 810b128:	2100      	movs	r1, #0
 810b12a:	2201      	movs	r2, #1
 810b12c:	429a      	cmp	r2, r3
 810b12e:	db09      	blt.n	810b144 <__s2b+0x30>
 810b130:	4630      	mov	r0, r6
 810b132:	f7ff ff43 	bl	810afbc <_Balloc>
 810b136:	b940      	cbnz	r0, 810b14a <__s2b+0x36>
 810b138:	4602      	mov	r2, r0
 810b13a:	4b19      	ldr	r3, [pc, #100]	; (810b1a0 <__s2b+0x8c>)
 810b13c:	4819      	ldr	r0, [pc, #100]	; (810b1a4 <__s2b+0x90>)
 810b13e:	21ce      	movs	r1, #206	; 0xce
 810b140:	f000 fef6 	bl	810bf30 <__assert_func>
 810b144:	0052      	lsls	r2, r2, #1
 810b146:	3101      	adds	r1, #1
 810b148:	e7f0      	b.n	810b12c <__s2b+0x18>
 810b14a:	9b08      	ldr	r3, [sp, #32]
 810b14c:	6143      	str	r3, [r0, #20]
 810b14e:	2d09      	cmp	r5, #9
 810b150:	f04f 0301 	mov.w	r3, #1
 810b154:	6103      	str	r3, [r0, #16]
 810b156:	dd16      	ble.n	810b186 <__s2b+0x72>
 810b158:	f104 0909 	add.w	r9, r4, #9
 810b15c:	46c8      	mov	r8, r9
 810b15e:	442c      	add	r4, r5
 810b160:	f818 3b01 	ldrb.w	r3, [r8], #1
 810b164:	4601      	mov	r1, r0
 810b166:	3b30      	subs	r3, #48	; 0x30
 810b168:	220a      	movs	r2, #10
 810b16a:	4630      	mov	r0, r6
 810b16c:	f7ff ff88 	bl	810b080 <__multadd>
 810b170:	45a0      	cmp	r8, r4
 810b172:	d1f5      	bne.n	810b160 <__s2b+0x4c>
 810b174:	f1a5 0408 	sub.w	r4, r5, #8
 810b178:	444c      	add	r4, r9
 810b17a:	1b2d      	subs	r5, r5, r4
 810b17c:	1963      	adds	r3, r4, r5
 810b17e:	42bb      	cmp	r3, r7
 810b180:	db04      	blt.n	810b18c <__s2b+0x78>
 810b182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b186:	340a      	adds	r4, #10
 810b188:	2509      	movs	r5, #9
 810b18a:	e7f6      	b.n	810b17a <__s2b+0x66>
 810b18c:	f814 3b01 	ldrb.w	r3, [r4], #1
 810b190:	4601      	mov	r1, r0
 810b192:	3b30      	subs	r3, #48	; 0x30
 810b194:	220a      	movs	r2, #10
 810b196:	4630      	mov	r0, r6
 810b198:	f7ff ff72 	bl	810b080 <__multadd>
 810b19c:	e7ee      	b.n	810b17c <__s2b+0x68>
 810b19e:	bf00      	nop
 810b1a0:	0810e3b4 	.word	0x0810e3b4
 810b1a4:	0810e444 	.word	0x0810e444

0810b1a8 <__hi0bits>:
 810b1a8:	0c03      	lsrs	r3, r0, #16
 810b1aa:	041b      	lsls	r3, r3, #16
 810b1ac:	b9d3      	cbnz	r3, 810b1e4 <__hi0bits+0x3c>
 810b1ae:	0400      	lsls	r0, r0, #16
 810b1b0:	2310      	movs	r3, #16
 810b1b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810b1b6:	bf04      	itt	eq
 810b1b8:	0200      	lsleq	r0, r0, #8
 810b1ba:	3308      	addeq	r3, #8
 810b1bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810b1c0:	bf04      	itt	eq
 810b1c2:	0100      	lsleq	r0, r0, #4
 810b1c4:	3304      	addeq	r3, #4
 810b1c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810b1ca:	bf04      	itt	eq
 810b1cc:	0080      	lsleq	r0, r0, #2
 810b1ce:	3302      	addeq	r3, #2
 810b1d0:	2800      	cmp	r0, #0
 810b1d2:	db05      	blt.n	810b1e0 <__hi0bits+0x38>
 810b1d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810b1d8:	f103 0301 	add.w	r3, r3, #1
 810b1dc:	bf08      	it	eq
 810b1de:	2320      	moveq	r3, #32
 810b1e0:	4618      	mov	r0, r3
 810b1e2:	4770      	bx	lr
 810b1e4:	2300      	movs	r3, #0
 810b1e6:	e7e4      	b.n	810b1b2 <__hi0bits+0xa>

0810b1e8 <__lo0bits>:
 810b1e8:	6803      	ldr	r3, [r0, #0]
 810b1ea:	f013 0207 	ands.w	r2, r3, #7
 810b1ee:	4601      	mov	r1, r0
 810b1f0:	d00b      	beq.n	810b20a <__lo0bits+0x22>
 810b1f2:	07da      	lsls	r2, r3, #31
 810b1f4:	d424      	bmi.n	810b240 <__lo0bits+0x58>
 810b1f6:	0798      	lsls	r0, r3, #30
 810b1f8:	bf49      	itett	mi
 810b1fa:	085b      	lsrmi	r3, r3, #1
 810b1fc:	089b      	lsrpl	r3, r3, #2
 810b1fe:	2001      	movmi	r0, #1
 810b200:	600b      	strmi	r3, [r1, #0]
 810b202:	bf5c      	itt	pl
 810b204:	600b      	strpl	r3, [r1, #0]
 810b206:	2002      	movpl	r0, #2
 810b208:	4770      	bx	lr
 810b20a:	b298      	uxth	r0, r3
 810b20c:	b9b0      	cbnz	r0, 810b23c <__lo0bits+0x54>
 810b20e:	0c1b      	lsrs	r3, r3, #16
 810b210:	2010      	movs	r0, #16
 810b212:	f013 0fff 	tst.w	r3, #255	; 0xff
 810b216:	bf04      	itt	eq
 810b218:	0a1b      	lsreq	r3, r3, #8
 810b21a:	3008      	addeq	r0, #8
 810b21c:	071a      	lsls	r2, r3, #28
 810b21e:	bf04      	itt	eq
 810b220:	091b      	lsreq	r3, r3, #4
 810b222:	3004      	addeq	r0, #4
 810b224:	079a      	lsls	r2, r3, #30
 810b226:	bf04      	itt	eq
 810b228:	089b      	lsreq	r3, r3, #2
 810b22a:	3002      	addeq	r0, #2
 810b22c:	07da      	lsls	r2, r3, #31
 810b22e:	d403      	bmi.n	810b238 <__lo0bits+0x50>
 810b230:	085b      	lsrs	r3, r3, #1
 810b232:	f100 0001 	add.w	r0, r0, #1
 810b236:	d005      	beq.n	810b244 <__lo0bits+0x5c>
 810b238:	600b      	str	r3, [r1, #0]
 810b23a:	4770      	bx	lr
 810b23c:	4610      	mov	r0, r2
 810b23e:	e7e8      	b.n	810b212 <__lo0bits+0x2a>
 810b240:	2000      	movs	r0, #0
 810b242:	4770      	bx	lr
 810b244:	2020      	movs	r0, #32
 810b246:	4770      	bx	lr

0810b248 <__i2b>:
 810b248:	b510      	push	{r4, lr}
 810b24a:	460c      	mov	r4, r1
 810b24c:	2101      	movs	r1, #1
 810b24e:	f7ff feb5 	bl	810afbc <_Balloc>
 810b252:	4602      	mov	r2, r0
 810b254:	b928      	cbnz	r0, 810b262 <__i2b+0x1a>
 810b256:	4b05      	ldr	r3, [pc, #20]	; (810b26c <__i2b+0x24>)
 810b258:	4805      	ldr	r0, [pc, #20]	; (810b270 <__i2b+0x28>)
 810b25a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810b25e:	f000 fe67 	bl	810bf30 <__assert_func>
 810b262:	2301      	movs	r3, #1
 810b264:	6144      	str	r4, [r0, #20]
 810b266:	6103      	str	r3, [r0, #16]
 810b268:	bd10      	pop	{r4, pc}
 810b26a:	bf00      	nop
 810b26c:	0810e3b4 	.word	0x0810e3b4
 810b270:	0810e444 	.word	0x0810e444

0810b274 <__multiply>:
 810b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b278:	4614      	mov	r4, r2
 810b27a:	690a      	ldr	r2, [r1, #16]
 810b27c:	6923      	ldr	r3, [r4, #16]
 810b27e:	429a      	cmp	r2, r3
 810b280:	bfb8      	it	lt
 810b282:	460b      	movlt	r3, r1
 810b284:	460d      	mov	r5, r1
 810b286:	bfbc      	itt	lt
 810b288:	4625      	movlt	r5, r4
 810b28a:	461c      	movlt	r4, r3
 810b28c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810b290:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810b294:	68ab      	ldr	r3, [r5, #8]
 810b296:	6869      	ldr	r1, [r5, #4]
 810b298:	eb0a 0709 	add.w	r7, sl, r9
 810b29c:	42bb      	cmp	r3, r7
 810b29e:	b085      	sub	sp, #20
 810b2a0:	bfb8      	it	lt
 810b2a2:	3101      	addlt	r1, #1
 810b2a4:	f7ff fe8a 	bl	810afbc <_Balloc>
 810b2a8:	b930      	cbnz	r0, 810b2b8 <__multiply+0x44>
 810b2aa:	4602      	mov	r2, r0
 810b2ac:	4b42      	ldr	r3, [pc, #264]	; (810b3b8 <__multiply+0x144>)
 810b2ae:	4843      	ldr	r0, [pc, #268]	; (810b3bc <__multiply+0x148>)
 810b2b0:	f240 115d 	movw	r1, #349	; 0x15d
 810b2b4:	f000 fe3c 	bl	810bf30 <__assert_func>
 810b2b8:	f100 0614 	add.w	r6, r0, #20
 810b2bc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810b2c0:	4633      	mov	r3, r6
 810b2c2:	2200      	movs	r2, #0
 810b2c4:	4543      	cmp	r3, r8
 810b2c6:	d31e      	bcc.n	810b306 <__multiply+0x92>
 810b2c8:	f105 0c14 	add.w	ip, r5, #20
 810b2cc:	f104 0314 	add.w	r3, r4, #20
 810b2d0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810b2d4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810b2d8:	9202      	str	r2, [sp, #8]
 810b2da:	ebac 0205 	sub.w	r2, ip, r5
 810b2de:	3a15      	subs	r2, #21
 810b2e0:	f022 0203 	bic.w	r2, r2, #3
 810b2e4:	3204      	adds	r2, #4
 810b2e6:	f105 0115 	add.w	r1, r5, #21
 810b2ea:	458c      	cmp	ip, r1
 810b2ec:	bf38      	it	cc
 810b2ee:	2204      	movcc	r2, #4
 810b2f0:	9201      	str	r2, [sp, #4]
 810b2f2:	9a02      	ldr	r2, [sp, #8]
 810b2f4:	9303      	str	r3, [sp, #12]
 810b2f6:	429a      	cmp	r2, r3
 810b2f8:	d808      	bhi.n	810b30c <__multiply+0x98>
 810b2fa:	2f00      	cmp	r7, #0
 810b2fc:	dc55      	bgt.n	810b3aa <__multiply+0x136>
 810b2fe:	6107      	str	r7, [r0, #16]
 810b300:	b005      	add	sp, #20
 810b302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b306:	f843 2b04 	str.w	r2, [r3], #4
 810b30a:	e7db      	b.n	810b2c4 <__multiply+0x50>
 810b30c:	f8b3 a000 	ldrh.w	sl, [r3]
 810b310:	f1ba 0f00 	cmp.w	sl, #0
 810b314:	d020      	beq.n	810b358 <__multiply+0xe4>
 810b316:	f105 0e14 	add.w	lr, r5, #20
 810b31a:	46b1      	mov	r9, r6
 810b31c:	2200      	movs	r2, #0
 810b31e:	f85e 4b04 	ldr.w	r4, [lr], #4
 810b322:	f8d9 b000 	ldr.w	fp, [r9]
 810b326:	b2a1      	uxth	r1, r4
 810b328:	fa1f fb8b 	uxth.w	fp, fp
 810b32c:	fb0a b101 	mla	r1, sl, r1, fp
 810b330:	4411      	add	r1, r2
 810b332:	f8d9 2000 	ldr.w	r2, [r9]
 810b336:	0c24      	lsrs	r4, r4, #16
 810b338:	0c12      	lsrs	r2, r2, #16
 810b33a:	fb0a 2404 	mla	r4, sl, r4, r2
 810b33e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810b342:	b289      	uxth	r1, r1
 810b344:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810b348:	45f4      	cmp	ip, lr
 810b34a:	f849 1b04 	str.w	r1, [r9], #4
 810b34e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810b352:	d8e4      	bhi.n	810b31e <__multiply+0xaa>
 810b354:	9901      	ldr	r1, [sp, #4]
 810b356:	5072      	str	r2, [r6, r1]
 810b358:	9a03      	ldr	r2, [sp, #12]
 810b35a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810b35e:	3304      	adds	r3, #4
 810b360:	f1b9 0f00 	cmp.w	r9, #0
 810b364:	d01f      	beq.n	810b3a6 <__multiply+0x132>
 810b366:	6834      	ldr	r4, [r6, #0]
 810b368:	f105 0114 	add.w	r1, r5, #20
 810b36c:	46b6      	mov	lr, r6
 810b36e:	f04f 0a00 	mov.w	sl, #0
 810b372:	880a      	ldrh	r2, [r1, #0]
 810b374:	f8be b002 	ldrh.w	fp, [lr, #2]
 810b378:	fb09 b202 	mla	r2, r9, r2, fp
 810b37c:	4492      	add	sl, r2
 810b37e:	b2a4      	uxth	r4, r4
 810b380:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810b384:	f84e 4b04 	str.w	r4, [lr], #4
 810b388:	f851 4b04 	ldr.w	r4, [r1], #4
 810b38c:	f8be 2000 	ldrh.w	r2, [lr]
 810b390:	0c24      	lsrs	r4, r4, #16
 810b392:	fb09 2404 	mla	r4, r9, r4, r2
 810b396:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810b39a:	458c      	cmp	ip, r1
 810b39c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810b3a0:	d8e7      	bhi.n	810b372 <__multiply+0xfe>
 810b3a2:	9a01      	ldr	r2, [sp, #4]
 810b3a4:	50b4      	str	r4, [r6, r2]
 810b3a6:	3604      	adds	r6, #4
 810b3a8:	e7a3      	b.n	810b2f2 <__multiply+0x7e>
 810b3aa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810b3ae:	2b00      	cmp	r3, #0
 810b3b0:	d1a5      	bne.n	810b2fe <__multiply+0x8a>
 810b3b2:	3f01      	subs	r7, #1
 810b3b4:	e7a1      	b.n	810b2fa <__multiply+0x86>
 810b3b6:	bf00      	nop
 810b3b8:	0810e3b4 	.word	0x0810e3b4
 810b3bc:	0810e444 	.word	0x0810e444

0810b3c0 <__pow5mult>:
 810b3c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810b3c4:	4615      	mov	r5, r2
 810b3c6:	f012 0203 	ands.w	r2, r2, #3
 810b3ca:	4606      	mov	r6, r0
 810b3cc:	460f      	mov	r7, r1
 810b3ce:	d007      	beq.n	810b3e0 <__pow5mult+0x20>
 810b3d0:	4c25      	ldr	r4, [pc, #148]	; (810b468 <__pow5mult+0xa8>)
 810b3d2:	3a01      	subs	r2, #1
 810b3d4:	2300      	movs	r3, #0
 810b3d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810b3da:	f7ff fe51 	bl	810b080 <__multadd>
 810b3de:	4607      	mov	r7, r0
 810b3e0:	10ad      	asrs	r5, r5, #2
 810b3e2:	d03d      	beq.n	810b460 <__pow5mult+0xa0>
 810b3e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810b3e6:	b97c      	cbnz	r4, 810b408 <__pow5mult+0x48>
 810b3e8:	2010      	movs	r0, #16
 810b3ea:	f7fc fab9 	bl	8107960 <malloc>
 810b3ee:	4602      	mov	r2, r0
 810b3f0:	6270      	str	r0, [r6, #36]	; 0x24
 810b3f2:	b928      	cbnz	r0, 810b400 <__pow5mult+0x40>
 810b3f4:	4b1d      	ldr	r3, [pc, #116]	; (810b46c <__pow5mult+0xac>)
 810b3f6:	481e      	ldr	r0, [pc, #120]	; (810b470 <__pow5mult+0xb0>)
 810b3f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810b3fc:	f000 fd98 	bl	810bf30 <__assert_func>
 810b400:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810b404:	6004      	str	r4, [r0, #0]
 810b406:	60c4      	str	r4, [r0, #12]
 810b408:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810b40c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810b410:	b94c      	cbnz	r4, 810b426 <__pow5mult+0x66>
 810b412:	f240 2171 	movw	r1, #625	; 0x271
 810b416:	4630      	mov	r0, r6
 810b418:	f7ff ff16 	bl	810b248 <__i2b>
 810b41c:	2300      	movs	r3, #0
 810b41e:	f8c8 0008 	str.w	r0, [r8, #8]
 810b422:	4604      	mov	r4, r0
 810b424:	6003      	str	r3, [r0, #0]
 810b426:	f04f 0900 	mov.w	r9, #0
 810b42a:	07eb      	lsls	r3, r5, #31
 810b42c:	d50a      	bpl.n	810b444 <__pow5mult+0x84>
 810b42e:	4639      	mov	r1, r7
 810b430:	4622      	mov	r2, r4
 810b432:	4630      	mov	r0, r6
 810b434:	f7ff ff1e 	bl	810b274 <__multiply>
 810b438:	4639      	mov	r1, r7
 810b43a:	4680      	mov	r8, r0
 810b43c:	4630      	mov	r0, r6
 810b43e:	f7ff fdfd 	bl	810b03c <_Bfree>
 810b442:	4647      	mov	r7, r8
 810b444:	106d      	asrs	r5, r5, #1
 810b446:	d00b      	beq.n	810b460 <__pow5mult+0xa0>
 810b448:	6820      	ldr	r0, [r4, #0]
 810b44a:	b938      	cbnz	r0, 810b45c <__pow5mult+0x9c>
 810b44c:	4622      	mov	r2, r4
 810b44e:	4621      	mov	r1, r4
 810b450:	4630      	mov	r0, r6
 810b452:	f7ff ff0f 	bl	810b274 <__multiply>
 810b456:	6020      	str	r0, [r4, #0]
 810b458:	f8c0 9000 	str.w	r9, [r0]
 810b45c:	4604      	mov	r4, r0
 810b45e:	e7e4      	b.n	810b42a <__pow5mult+0x6a>
 810b460:	4638      	mov	r0, r7
 810b462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810b466:	bf00      	nop
 810b468:	0810e598 	.word	0x0810e598
 810b46c:	0810e33e 	.word	0x0810e33e
 810b470:	0810e444 	.word	0x0810e444

0810b474 <__lshift>:
 810b474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b478:	460c      	mov	r4, r1
 810b47a:	6849      	ldr	r1, [r1, #4]
 810b47c:	6923      	ldr	r3, [r4, #16]
 810b47e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810b482:	68a3      	ldr	r3, [r4, #8]
 810b484:	4607      	mov	r7, r0
 810b486:	4691      	mov	r9, r2
 810b488:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810b48c:	f108 0601 	add.w	r6, r8, #1
 810b490:	42b3      	cmp	r3, r6
 810b492:	db0b      	blt.n	810b4ac <__lshift+0x38>
 810b494:	4638      	mov	r0, r7
 810b496:	f7ff fd91 	bl	810afbc <_Balloc>
 810b49a:	4605      	mov	r5, r0
 810b49c:	b948      	cbnz	r0, 810b4b2 <__lshift+0x3e>
 810b49e:	4602      	mov	r2, r0
 810b4a0:	4b28      	ldr	r3, [pc, #160]	; (810b544 <__lshift+0xd0>)
 810b4a2:	4829      	ldr	r0, [pc, #164]	; (810b548 <__lshift+0xd4>)
 810b4a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 810b4a8:	f000 fd42 	bl	810bf30 <__assert_func>
 810b4ac:	3101      	adds	r1, #1
 810b4ae:	005b      	lsls	r3, r3, #1
 810b4b0:	e7ee      	b.n	810b490 <__lshift+0x1c>
 810b4b2:	2300      	movs	r3, #0
 810b4b4:	f100 0114 	add.w	r1, r0, #20
 810b4b8:	f100 0210 	add.w	r2, r0, #16
 810b4bc:	4618      	mov	r0, r3
 810b4be:	4553      	cmp	r3, sl
 810b4c0:	db33      	blt.n	810b52a <__lshift+0xb6>
 810b4c2:	6920      	ldr	r0, [r4, #16]
 810b4c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810b4c8:	f104 0314 	add.w	r3, r4, #20
 810b4cc:	f019 091f 	ands.w	r9, r9, #31
 810b4d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810b4d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810b4d8:	d02b      	beq.n	810b532 <__lshift+0xbe>
 810b4da:	f1c9 0e20 	rsb	lr, r9, #32
 810b4de:	468a      	mov	sl, r1
 810b4e0:	2200      	movs	r2, #0
 810b4e2:	6818      	ldr	r0, [r3, #0]
 810b4e4:	fa00 f009 	lsl.w	r0, r0, r9
 810b4e8:	4302      	orrs	r2, r0
 810b4ea:	f84a 2b04 	str.w	r2, [sl], #4
 810b4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 810b4f2:	459c      	cmp	ip, r3
 810b4f4:	fa22 f20e 	lsr.w	r2, r2, lr
 810b4f8:	d8f3      	bhi.n	810b4e2 <__lshift+0x6e>
 810b4fa:	ebac 0304 	sub.w	r3, ip, r4
 810b4fe:	3b15      	subs	r3, #21
 810b500:	f023 0303 	bic.w	r3, r3, #3
 810b504:	3304      	adds	r3, #4
 810b506:	f104 0015 	add.w	r0, r4, #21
 810b50a:	4584      	cmp	ip, r0
 810b50c:	bf38      	it	cc
 810b50e:	2304      	movcc	r3, #4
 810b510:	50ca      	str	r2, [r1, r3]
 810b512:	b10a      	cbz	r2, 810b518 <__lshift+0xa4>
 810b514:	f108 0602 	add.w	r6, r8, #2
 810b518:	3e01      	subs	r6, #1
 810b51a:	4638      	mov	r0, r7
 810b51c:	612e      	str	r6, [r5, #16]
 810b51e:	4621      	mov	r1, r4
 810b520:	f7ff fd8c 	bl	810b03c <_Bfree>
 810b524:	4628      	mov	r0, r5
 810b526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b52a:	f842 0f04 	str.w	r0, [r2, #4]!
 810b52e:	3301      	adds	r3, #1
 810b530:	e7c5      	b.n	810b4be <__lshift+0x4a>
 810b532:	3904      	subs	r1, #4
 810b534:	f853 2b04 	ldr.w	r2, [r3], #4
 810b538:	f841 2f04 	str.w	r2, [r1, #4]!
 810b53c:	459c      	cmp	ip, r3
 810b53e:	d8f9      	bhi.n	810b534 <__lshift+0xc0>
 810b540:	e7ea      	b.n	810b518 <__lshift+0xa4>
 810b542:	bf00      	nop
 810b544:	0810e3b4 	.word	0x0810e3b4
 810b548:	0810e444 	.word	0x0810e444

0810b54c <__mcmp>:
 810b54c:	b530      	push	{r4, r5, lr}
 810b54e:	6902      	ldr	r2, [r0, #16]
 810b550:	690c      	ldr	r4, [r1, #16]
 810b552:	1b12      	subs	r2, r2, r4
 810b554:	d10e      	bne.n	810b574 <__mcmp+0x28>
 810b556:	f100 0314 	add.w	r3, r0, #20
 810b55a:	3114      	adds	r1, #20
 810b55c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b560:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b564:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b568:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b56c:	42a5      	cmp	r5, r4
 810b56e:	d003      	beq.n	810b578 <__mcmp+0x2c>
 810b570:	d305      	bcc.n	810b57e <__mcmp+0x32>
 810b572:	2201      	movs	r2, #1
 810b574:	4610      	mov	r0, r2
 810b576:	bd30      	pop	{r4, r5, pc}
 810b578:	4283      	cmp	r3, r0
 810b57a:	d3f3      	bcc.n	810b564 <__mcmp+0x18>
 810b57c:	e7fa      	b.n	810b574 <__mcmp+0x28>
 810b57e:	f04f 32ff 	mov.w	r2, #4294967295
 810b582:	e7f7      	b.n	810b574 <__mcmp+0x28>

0810b584 <__mdiff>:
 810b584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b588:	460c      	mov	r4, r1
 810b58a:	4606      	mov	r6, r0
 810b58c:	4611      	mov	r1, r2
 810b58e:	4620      	mov	r0, r4
 810b590:	4617      	mov	r7, r2
 810b592:	f7ff ffdb 	bl	810b54c <__mcmp>
 810b596:	1e05      	subs	r5, r0, #0
 810b598:	d110      	bne.n	810b5bc <__mdiff+0x38>
 810b59a:	4629      	mov	r1, r5
 810b59c:	4630      	mov	r0, r6
 810b59e:	f7ff fd0d 	bl	810afbc <_Balloc>
 810b5a2:	b930      	cbnz	r0, 810b5b2 <__mdiff+0x2e>
 810b5a4:	4b39      	ldr	r3, [pc, #228]	; (810b68c <__mdiff+0x108>)
 810b5a6:	4602      	mov	r2, r0
 810b5a8:	f240 2132 	movw	r1, #562	; 0x232
 810b5ac:	4838      	ldr	r0, [pc, #224]	; (810b690 <__mdiff+0x10c>)
 810b5ae:	f000 fcbf 	bl	810bf30 <__assert_func>
 810b5b2:	2301      	movs	r3, #1
 810b5b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b5bc:	bfa4      	itt	ge
 810b5be:	463b      	movge	r3, r7
 810b5c0:	4627      	movge	r7, r4
 810b5c2:	4630      	mov	r0, r6
 810b5c4:	6879      	ldr	r1, [r7, #4]
 810b5c6:	bfa6      	itte	ge
 810b5c8:	461c      	movge	r4, r3
 810b5ca:	2500      	movge	r5, #0
 810b5cc:	2501      	movlt	r5, #1
 810b5ce:	f7ff fcf5 	bl	810afbc <_Balloc>
 810b5d2:	b920      	cbnz	r0, 810b5de <__mdiff+0x5a>
 810b5d4:	4b2d      	ldr	r3, [pc, #180]	; (810b68c <__mdiff+0x108>)
 810b5d6:	4602      	mov	r2, r0
 810b5d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 810b5dc:	e7e6      	b.n	810b5ac <__mdiff+0x28>
 810b5de:	693e      	ldr	r6, [r7, #16]
 810b5e0:	60c5      	str	r5, [r0, #12]
 810b5e2:	6925      	ldr	r5, [r4, #16]
 810b5e4:	f107 0114 	add.w	r1, r7, #20
 810b5e8:	f104 0914 	add.w	r9, r4, #20
 810b5ec:	f100 0e14 	add.w	lr, r0, #20
 810b5f0:	f107 0210 	add.w	r2, r7, #16
 810b5f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810b5f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810b5fc:	46f2      	mov	sl, lr
 810b5fe:	2700      	movs	r7, #0
 810b600:	f859 3b04 	ldr.w	r3, [r9], #4
 810b604:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b608:	fa1f f883 	uxth.w	r8, r3
 810b60c:	fa17 f78b 	uxtah	r7, r7, fp
 810b610:	0c1b      	lsrs	r3, r3, #16
 810b612:	eba7 0808 	sub.w	r8, r7, r8
 810b616:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b61a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b61e:	fa1f f888 	uxth.w	r8, r8
 810b622:	141f      	asrs	r7, r3, #16
 810b624:	454d      	cmp	r5, r9
 810b626:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b62a:	f84a 3b04 	str.w	r3, [sl], #4
 810b62e:	d8e7      	bhi.n	810b600 <__mdiff+0x7c>
 810b630:	1b2b      	subs	r3, r5, r4
 810b632:	3b15      	subs	r3, #21
 810b634:	f023 0303 	bic.w	r3, r3, #3
 810b638:	3304      	adds	r3, #4
 810b63a:	3415      	adds	r4, #21
 810b63c:	42a5      	cmp	r5, r4
 810b63e:	bf38      	it	cc
 810b640:	2304      	movcc	r3, #4
 810b642:	4419      	add	r1, r3
 810b644:	4473      	add	r3, lr
 810b646:	469e      	mov	lr, r3
 810b648:	460d      	mov	r5, r1
 810b64a:	4565      	cmp	r5, ip
 810b64c:	d30e      	bcc.n	810b66c <__mdiff+0xe8>
 810b64e:	f10c 0203 	add.w	r2, ip, #3
 810b652:	1a52      	subs	r2, r2, r1
 810b654:	f022 0203 	bic.w	r2, r2, #3
 810b658:	3903      	subs	r1, #3
 810b65a:	458c      	cmp	ip, r1
 810b65c:	bf38      	it	cc
 810b65e:	2200      	movcc	r2, #0
 810b660:	441a      	add	r2, r3
 810b662:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810b666:	b17b      	cbz	r3, 810b688 <__mdiff+0x104>
 810b668:	6106      	str	r6, [r0, #16]
 810b66a:	e7a5      	b.n	810b5b8 <__mdiff+0x34>
 810b66c:	f855 8b04 	ldr.w	r8, [r5], #4
 810b670:	fa17 f488 	uxtah	r4, r7, r8
 810b674:	1422      	asrs	r2, r4, #16
 810b676:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810b67a:	b2a4      	uxth	r4, r4
 810b67c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810b680:	f84e 4b04 	str.w	r4, [lr], #4
 810b684:	1417      	asrs	r7, r2, #16
 810b686:	e7e0      	b.n	810b64a <__mdiff+0xc6>
 810b688:	3e01      	subs	r6, #1
 810b68a:	e7ea      	b.n	810b662 <__mdiff+0xde>
 810b68c:	0810e3b4 	.word	0x0810e3b4
 810b690:	0810e444 	.word	0x0810e444

0810b694 <__ulp>:
 810b694:	b082      	sub	sp, #8
 810b696:	ed8d 0b00 	vstr	d0, [sp]
 810b69a:	9b01      	ldr	r3, [sp, #4]
 810b69c:	4912      	ldr	r1, [pc, #72]	; (810b6e8 <__ulp+0x54>)
 810b69e:	4019      	ands	r1, r3
 810b6a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810b6a4:	2900      	cmp	r1, #0
 810b6a6:	dd05      	ble.n	810b6b4 <__ulp+0x20>
 810b6a8:	2200      	movs	r2, #0
 810b6aa:	460b      	mov	r3, r1
 810b6ac:	ec43 2b10 	vmov	d0, r2, r3
 810b6b0:	b002      	add	sp, #8
 810b6b2:	4770      	bx	lr
 810b6b4:	4249      	negs	r1, r1
 810b6b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810b6ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 810b6be:	f04f 0200 	mov.w	r2, #0
 810b6c2:	f04f 0300 	mov.w	r3, #0
 810b6c6:	da04      	bge.n	810b6d2 <__ulp+0x3e>
 810b6c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810b6cc:	fa41 f300 	asr.w	r3, r1, r0
 810b6d0:	e7ec      	b.n	810b6ac <__ulp+0x18>
 810b6d2:	f1a0 0114 	sub.w	r1, r0, #20
 810b6d6:	291e      	cmp	r1, #30
 810b6d8:	bfda      	itte	le
 810b6da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810b6de:	fa20 f101 	lsrle.w	r1, r0, r1
 810b6e2:	2101      	movgt	r1, #1
 810b6e4:	460a      	mov	r2, r1
 810b6e6:	e7e1      	b.n	810b6ac <__ulp+0x18>
 810b6e8:	7ff00000 	.word	0x7ff00000

0810b6ec <__b2d>:
 810b6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b6ee:	6905      	ldr	r5, [r0, #16]
 810b6f0:	f100 0714 	add.w	r7, r0, #20
 810b6f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810b6f8:	1f2e      	subs	r6, r5, #4
 810b6fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810b6fe:	4620      	mov	r0, r4
 810b700:	f7ff fd52 	bl	810b1a8 <__hi0bits>
 810b704:	f1c0 0320 	rsb	r3, r0, #32
 810b708:	280a      	cmp	r0, #10
 810b70a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810b788 <__b2d+0x9c>
 810b70e:	600b      	str	r3, [r1, #0]
 810b710:	dc14      	bgt.n	810b73c <__b2d+0x50>
 810b712:	f1c0 0e0b 	rsb	lr, r0, #11
 810b716:	fa24 f10e 	lsr.w	r1, r4, lr
 810b71a:	42b7      	cmp	r7, r6
 810b71c:	ea41 030c 	orr.w	r3, r1, ip
 810b720:	bf34      	ite	cc
 810b722:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b726:	2100      	movcs	r1, #0
 810b728:	3015      	adds	r0, #21
 810b72a:	fa04 f000 	lsl.w	r0, r4, r0
 810b72e:	fa21 f10e 	lsr.w	r1, r1, lr
 810b732:	ea40 0201 	orr.w	r2, r0, r1
 810b736:	ec43 2b10 	vmov	d0, r2, r3
 810b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b73c:	42b7      	cmp	r7, r6
 810b73e:	bf3a      	itte	cc
 810b740:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b744:	f1a5 0608 	subcc.w	r6, r5, #8
 810b748:	2100      	movcs	r1, #0
 810b74a:	380b      	subs	r0, #11
 810b74c:	d017      	beq.n	810b77e <__b2d+0x92>
 810b74e:	f1c0 0c20 	rsb	ip, r0, #32
 810b752:	fa04 f500 	lsl.w	r5, r4, r0
 810b756:	42be      	cmp	r6, r7
 810b758:	fa21 f40c 	lsr.w	r4, r1, ip
 810b75c:	ea45 0504 	orr.w	r5, r5, r4
 810b760:	bf8c      	ite	hi
 810b762:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810b766:	2400      	movls	r4, #0
 810b768:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810b76c:	fa01 f000 	lsl.w	r0, r1, r0
 810b770:	fa24 f40c 	lsr.w	r4, r4, ip
 810b774:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b778:	ea40 0204 	orr.w	r2, r0, r4
 810b77c:	e7db      	b.n	810b736 <__b2d+0x4a>
 810b77e:	ea44 030c 	orr.w	r3, r4, ip
 810b782:	460a      	mov	r2, r1
 810b784:	e7d7      	b.n	810b736 <__b2d+0x4a>
 810b786:	bf00      	nop
 810b788:	3ff00000 	.word	0x3ff00000

0810b78c <__d2b>:
 810b78c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b790:	4689      	mov	r9, r1
 810b792:	2101      	movs	r1, #1
 810b794:	ec57 6b10 	vmov	r6, r7, d0
 810b798:	4690      	mov	r8, r2
 810b79a:	f7ff fc0f 	bl	810afbc <_Balloc>
 810b79e:	4604      	mov	r4, r0
 810b7a0:	b930      	cbnz	r0, 810b7b0 <__d2b+0x24>
 810b7a2:	4602      	mov	r2, r0
 810b7a4:	4b25      	ldr	r3, [pc, #148]	; (810b83c <__d2b+0xb0>)
 810b7a6:	4826      	ldr	r0, [pc, #152]	; (810b840 <__d2b+0xb4>)
 810b7a8:	f240 310a 	movw	r1, #778	; 0x30a
 810b7ac:	f000 fbc0 	bl	810bf30 <__assert_func>
 810b7b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810b7b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b7b8:	bb35      	cbnz	r5, 810b808 <__d2b+0x7c>
 810b7ba:	2e00      	cmp	r6, #0
 810b7bc:	9301      	str	r3, [sp, #4]
 810b7be:	d028      	beq.n	810b812 <__d2b+0x86>
 810b7c0:	4668      	mov	r0, sp
 810b7c2:	9600      	str	r6, [sp, #0]
 810b7c4:	f7ff fd10 	bl	810b1e8 <__lo0bits>
 810b7c8:	9900      	ldr	r1, [sp, #0]
 810b7ca:	b300      	cbz	r0, 810b80e <__d2b+0x82>
 810b7cc:	9a01      	ldr	r2, [sp, #4]
 810b7ce:	f1c0 0320 	rsb	r3, r0, #32
 810b7d2:	fa02 f303 	lsl.w	r3, r2, r3
 810b7d6:	430b      	orrs	r3, r1
 810b7d8:	40c2      	lsrs	r2, r0
 810b7da:	6163      	str	r3, [r4, #20]
 810b7dc:	9201      	str	r2, [sp, #4]
 810b7de:	9b01      	ldr	r3, [sp, #4]
 810b7e0:	61a3      	str	r3, [r4, #24]
 810b7e2:	2b00      	cmp	r3, #0
 810b7e4:	bf14      	ite	ne
 810b7e6:	2202      	movne	r2, #2
 810b7e8:	2201      	moveq	r2, #1
 810b7ea:	6122      	str	r2, [r4, #16]
 810b7ec:	b1d5      	cbz	r5, 810b824 <__d2b+0x98>
 810b7ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b7f2:	4405      	add	r5, r0
 810b7f4:	f8c9 5000 	str.w	r5, [r9]
 810b7f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b7fc:	f8c8 0000 	str.w	r0, [r8]
 810b800:	4620      	mov	r0, r4
 810b802:	b003      	add	sp, #12
 810b804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b80c:	e7d5      	b.n	810b7ba <__d2b+0x2e>
 810b80e:	6161      	str	r1, [r4, #20]
 810b810:	e7e5      	b.n	810b7de <__d2b+0x52>
 810b812:	a801      	add	r0, sp, #4
 810b814:	f7ff fce8 	bl	810b1e8 <__lo0bits>
 810b818:	9b01      	ldr	r3, [sp, #4]
 810b81a:	6163      	str	r3, [r4, #20]
 810b81c:	2201      	movs	r2, #1
 810b81e:	6122      	str	r2, [r4, #16]
 810b820:	3020      	adds	r0, #32
 810b822:	e7e3      	b.n	810b7ec <__d2b+0x60>
 810b824:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b828:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b82c:	f8c9 0000 	str.w	r0, [r9]
 810b830:	6918      	ldr	r0, [r3, #16]
 810b832:	f7ff fcb9 	bl	810b1a8 <__hi0bits>
 810b836:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b83a:	e7df      	b.n	810b7fc <__d2b+0x70>
 810b83c:	0810e3b4 	.word	0x0810e3b4
 810b840:	0810e444 	.word	0x0810e444

0810b844 <__ratio>:
 810b844:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b848:	4688      	mov	r8, r1
 810b84a:	4669      	mov	r1, sp
 810b84c:	4681      	mov	r9, r0
 810b84e:	f7ff ff4d 	bl	810b6ec <__b2d>
 810b852:	a901      	add	r1, sp, #4
 810b854:	4640      	mov	r0, r8
 810b856:	ec55 4b10 	vmov	r4, r5, d0
 810b85a:	f7ff ff47 	bl	810b6ec <__b2d>
 810b85e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b862:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b866:	eba3 0c02 	sub.w	ip, r3, r2
 810b86a:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b86e:	1a9b      	subs	r3, r3, r2
 810b870:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b874:	ec51 0b10 	vmov	r0, r1, d0
 810b878:	2b00      	cmp	r3, #0
 810b87a:	bfd6      	itet	le
 810b87c:	460a      	movle	r2, r1
 810b87e:	462a      	movgt	r2, r5
 810b880:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b884:	468b      	mov	fp, r1
 810b886:	462f      	mov	r7, r5
 810b888:	bfd4      	ite	le
 810b88a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b88e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b892:	4620      	mov	r0, r4
 810b894:	ee10 2a10 	vmov	r2, s0
 810b898:	465b      	mov	r3, fp
 810b89a:	4639      	mov	r1, r7
 810b89c:	f7f5 f85e 	bl	810095c <__aeabi_ddiv>
 810b8a0:	ec41 0b10 	vmov	d0, r0, r1
 810b8a4:	b003      	add	sp, #12
 810b8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b8aa <__copybits>:
 810b8aa:	3901      	subs	r1, #1
 810b8ac:	b570      	push	{r4, r5, r6, lr}
 810b8ae:	1149      	asrs	r1, r1, #5
 810b8b0:	6914      	ldr	r4, [r2, #16]
 810b8b2:	3101      	adds	r1, #1
 810b8b4:	f102 0314 	add.w	r3, r2, #20
 810b8b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b8bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b8c0:	1f05      	subs	r5, r0, #4
 810b8c2:	42a3      	cmp	r3, r4
 810b8c4:	d30c      	bcc.n	810b8e0 <__copybits+0x36>
 810b8c6:	1aa3      	subs	r3, r4, r2
 810b8c8:	3b11      	subs	r3, #17
 810b8ca:	f023 0303 	bic.w	r3, r3, #3
 810b8ce:	3211      	adds	r2, #17
 810b8d0:	42a2      	cmp	r2, r4
 810b8d2:	bf88      	it	hi
 810b8d4:	2300      	movhi	r3, #0
 810b8d6:	4418      	add	r0, r3
 810b8d8:	2300      	movs	r3, #0
 810b8da:	4288      	cmp	r0, r1
 810b8dc:	d305      	bcc.n	810b8ea <__copybits+0x40>
 810b8de:	bd70      	pop	{r4, r5, r6, pc}
 810b8e0:	f853 6b04 	ldr.w	r6, [r3], #4
 810b8e4:	f845 6f04 	str.w	r6, [r5, #4]!
 810b8e8:	e7eb      	b.n	810b8c2 <__copybits+0x18>
 810b8ea:	f840 3b04 	str.w	r3, [r0], #4
 810b8ee:	e7f4      	b.n	810b8da <__copybits+0x30>

0810b8f0 <__any_on>:
 810b8f0:	f100 0214 	add.w	r2, r0, #20
 810b8f4:	6900      	ldr	r0, [r0, #16]
 810b8f6:	114b      	asrs	r3, r1, #5
 810b8f8:	4298      	cmp	r0, r3
 810b8fa:	b510      	push	{r4, lr}
 810b8fc:	db11      	blt.n	810b922 <__any_on+0x32>
 810b8fe:	dd0a      	ble.n	810b916 <__any_on+0x26>
 810b900:	f011 011f 	ands.w	r1, r1, #31
 810b904:	d007      	beq.n	810b916 <__any_on+0x26>
 810b906:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810b90a:	fa24 f001 	lsr.w	r0, r4, r1
 810b90e:	fa00 f101 	lsl.w	r1, r0, r1
 810b912:	428c      	cmp	r4, r1
 810b914:	d10b      	bne.n	810b92e <__any_on+0x3e>
 810b916:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b91a:	4293      	cmp	r3, r2
 810b91c:	d803      	bhi.n	810b926 <__any_on+0x36>
 810b91e:	2000      	movs	r0, #0
 810b920:	bd10      	pop	{r4, pc}
 810b922:	4603      	mov	r3, r0
 810b924:	e7f7      	b.n	810b916 <__any_on+0x26>
 810b926:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b92a:	2900      	cmp	r1, #0
 810b92c:	d0f5      	beq.n	810b91a <__any_on+0x2a>
 810b92e:	2001      	movs	r0, #1
 810b930:	e7f6      	b.n	810b920 <__any_on+0x30>

0810b932 <_calloc_r>:
 810b932:	b513      	push	{r0, r1, r4, lr}
 810b934:	434a      	muls	r2, r1
 810b936:	4611      	mov	r1, r2
 810b938:	9201      	str	r2, [sp, #4]
 810b93a:	f7fc f879 	bl	8107a30 <_malloc_r>
 810b93e:	4604      	mov	r4, r0
 810b940:	b118      	cbz	r0, 810b94a <_calloc_r+0x18>
 810b942:	9a01      	ldr	r2, [sp, #4]
 810b944:	2100      	movs	r1, #0
 810b946:	f7fc f81b 	bl	8107980 <memset>
 810b94a:	4620      	mov	r0, r4
 810b94c:	b002      	add	sp, #8
 810b94e:	bd10      	pop	{r4, pc}

0810b950 <__ssputs_r>:
 810b950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b954:	688e      	ldr	r6, [r1, #8]
 810b956:	429e      	cmp	r6, r3
 810b958:	4682      	mov	sl, r0
 810b95a:	460c      	mov	r4, r1
 810b95c:	4690      	mov	r8, r2
 810b95e:	461f      	mov	r7, r3
 810b960:	d838      	bhi.n	810b9d4 <__ssputs_r+0x84>
 810b962:	898a      	ldrh	r2, [r1, #12]
 810b964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810b968:	d032      	beq.n	810b9d0 <__ssputs_r+0x80>
 810b96a:	6825      	ldr	r5, [r4, #0]
 810b96c:	6909      	ldr	r1, [r1, #16]
 810b96e:	eba5 0901 	sub.w	r9, r5, r1
 810b972:	6965      	ldr	r5, [r4, #20]
 810b974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b97c:	3301      	adds	r3, #1
 810b97e:	444b      	add	r3, r9
 810b980:	106d      	asrs	r5, r5, #1
 810b982:	429d      	cmp	r5, r3
 810b984:	bf38      	it	cc
 810b986:	461d      	movcc	r5, r3
 810b988:	0553      	lsls	r3, r2, #21
 810b98a:	d531      	bpl.n	810b9f0 <__ssputs_r+0xa0>
 810b98c:	4629      	mov	r1, r5
 810b98e:	f7fc f84f 	bl	8107a30 <_malloc_r>
 810b992:	4606      	mov	r6, r0
 810b994:	b950      	cbnz	r0, 810b9ac <__ssputs_r+0x5c>
 810b996:	230c      	movs	r3, #12
 810b998:	f8ca 3000 	str.w	r3, [sl]
 810b99c:	89a3      	ldrh	r3, [r4, #12]
 810b99e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b9a2:	81a3      	strh	r3, [r4, #12]
 810b9a4:	f04f 30ff 	mov.w	r0, #4294967295
 810b9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b9ac:	6921      	ldr	r1, [r4, #16]
 810b9ae:	464a      	mov	r2, r9
 810b9b0:	f7ff faea 	bl	810af88 <memcpy>
 810b9b4:	89a3      	ldrh	r3, [r4, #12]
 810b9b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810b9ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b9be:	81a3      	strh	r3, [r4, #12]
 810b9c0:	6126      	str	r6, [r4, #16]
 810b9c2:	6165      	str	r5, [r4, #20]
 810b9c4:	444e      	add	r6, r9
 810b9c6:	eba5 0509 	sub.w	r5, r5, r9
 810b9ca:	6026      	str	r6, [r4, #0]
 810b9cc:	60a5      	str	r5, [r4, #8]
 810b9ce:	463e      	mov	r6, r7
 810b9d0:	42be      	cmp	r6, r7
 810b9d2:	d900      	bls.n	810b9d6 <__ssputs_r+0x86>
 810b9d4:	463e      	mov	r6, r7
 810b9d6:	4632      	mov	r2, r6
 810b9d8:	6820      	ldr	r0, [r4, #0]
 810b9da:	4641      	mov	r1, r8
 810b9dc:	f000 fafa 	bl	810bfd4 <memmove>
 810b9e0:	68a3      	ldr	r3, [r4, #8]
 810b9e2:	6822      	ldr	r2, [r4, #0]
 810b9e4:	1b9b      	subs	r3, r3, r6
 810b9e6:	4432      	add	r2, r6
 810b9e8:	60a3      	str	r3, [r4, #8]
 810b9ea:	6022      	str	r2, [r4, #0]
 810b9ec:	2000      	movs	r0, #0
 810b9ee:	e7db      	b.n	810b9a8 <__ssputs_r+0x58>
 810b9f0:	462a      	mov	r2, r5
 810b9f2:	f000 fb09 	bl	810c008 <_realloc_r>
 810b9f6:	4606      	mov	r6, r0
 810b9f8:	2800      	cmp	r0, #0
 810b9fa:	d1e1      	bne.n	810b9c0 <__ssputs_r+0x70>
 810b9fc:	6921      	ldr	r1, [r4, #16]
 810b9fe:	4650      	mov	r0, sl
 810ba00:	f7fb ffc6 	bl	8107990 <_free_r>
 810ba04:	e7c7      	b.n	810b996 <__ssputs_r+0x46>
	...

0810ba08 <_svfiprintf_r>:
 810ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ba0c:	4698      	mov	r8, r3
 810ba0e:	898b      	ldrh	r3, [r1, #12]
 810ba10:	061b      	lsls	r3, r3, #24
 810ba12:	b09d      	sub	sp, #116	; 0x74
 810ba14:	4607      	mov	r7, r0
 810ba16:	460d      	mov	r5, r1
 810ba18:	4614      	mov	r4, r2
 810ba1a:	d50e      	bpl.n	810ba3a <_svfiprintf_r+0x32>
 810ba1c:	690b      	ldr	r3, [r1, #16]
 810ba1e:	b963      	cbnz	r3, 810ba3a <_svfiprintf_r+0x32>
 810ba20:	2140      	movs	r1, #64	; 0x40
 810ba22:	f7fc f805 	bl	8107a30 <_malloc_r>
 810ba26:	6028      	str	r0, [r5, #0]
 810ba28:	6128      	str	r0, [r5, #16]
 810ba2a:	b920      	cbnz	r0, 810ba36 <_svfiprintf_r+0x2e>
 810ba2c:	230c      	movs	r3, #12
 810ba2e:	603b      	str	r3, [r7, #0]
 810ba30:	f04f 30ff 	mov.w	r0, #4294967295
 810ba34:	e0d1      	b.n	810bbda <_svfiprintf_r+0x1d2>
 810ba36:	2340      	movs	r3, #64	; 0x40
 810ba38:	616b      	str	r3, [r5, #20]
 810ba3a:	2300      	movs	r3, #0
 810ba3c:	9309      	str	r3, [sp, #36]	; 0x24
 810ba3e:	2320      	movs	r3, #32
 810ba40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810ba44:	f8cd 800c 	str.w	r8, [sp, #12]
 810ba48:	2330      	movs	r3, #48	; 0x30
 810ba4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810bbf4 <_svfiprintf_r+0x1ec>
 810ba4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810ba52:	f04f 0901 	mov.w	r9, #1
 810ba56:	4623      	mov	r3, r4
 810ba58:	469a      	mov	sl, r3
 810ba5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ba5e:	b10a      	cbz	r2, 810ba64 <_svfiprintf_r+0x5c>
 810ba60:	2a25      	cmp	r2, #37	; 0x25
 810ba62:	d1f9      	bne.n	810ba58 <_svfiprintf_r+0x50>
 810ba64:	ebba 0b04 	subs.w	fp, sl, r4
 810ba68:	d00b      	beq.n	810ba82 <_svfiprintf_r+0x7a>
 810ba6a:	465b      	mov	r3, fp
 810ba6c:	4622      	mov	r2, r4
 810ba6e:	4629      	mov	r1, r5
 810ba70:	4638      	mov	r0, r7
 810ba72:	f7ff ff6d 	bl	810b950 <__ssputs_r>
 810ba76:	3001      	adds	r0, #1
 810ba78:	f000 80aa 	beq.w	810bbd0 <_svfiprintf_r+0x1c8>
 810ba7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810ba7e:	445a      	add	r2, fp
 810ba80:	9209      	str	r2, [sp, #36]	; 0x24
 810ba82:	f89a 3000 	ldrb.w	r3, [sl]
 810ba86:	2b00      	cmp	r3, #0
 810ba88:	f000 80a2 	beq.w	810bbd0 <_svfiprintf_r+0x1c8>
 810ba8c:	2300      	movs	r3, #0
 810ba8e:	f04f 32ff 	mov.w	r2, #4294967295
 810ba92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810ba96:	f10a 0a01 	add.w	sl, sl, #1
 810ba9a:	9304      	str	r3, [sp, #16]
 810ba9c:	9307      	str	r3, [sp, #28]
 810ba9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810baa2:	931a      	str	r3, [sp, #104]	; 0x68
 810baa4:	4654      	mov	r4, sl
 810baa6:	2205      	movs	r2, #5
 810baa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810baac:	4851      	ldr	r0, [pc, #324]	; (810bbf4 <_svfiprintf_r+0x1ec>)
 810baae:	f7f4 fc1f 	bl	81002f0 <memchr>
 810bab2:	9a04      	ldr	r2, [sp, #16]
 810bab4:	b9d8      	cbnz	r0, 810baee <_svfiprintf_r+0xe6>
 810bab6:	06d0      	lsls	r0, r2, #27
 810bab8:	bf44      	itt	mi
 810baba:	2320      	movmi	r3, #32
 810babc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bac0:	0711      	lsls	r1, r2, #28
 810bac2:	bf44      	itt	mi
 810bac4:	232b      	movmi	r3, #43	; 0x2b
 810bac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810baca:	f89a 3000 	ldrb.w	r3, [sl]
 810bace:	2b2a      	cmp	r3, #42	; 0x2a
 810bad0:	d015      	beq.n	810bafe <_svfiprintf_r+0xf6>
 810bad2:	9a07      	ldr	r2, [sp, #28]
 810bad4:	4654      	mov	r4, sl
 810bad6:	2000      	movs	r0, #0
 810bad8:	f04f 0c0a 	mov.w	ip, #10
 810badc:	4621      	mov	r1, r4
 810bade:	f811 3b01 	ldrb.w	r3, [r1], #1
 810bae2:	3b30      	subs	r3, #48	; 0x30
 810bae4:	2b09      	cmp	r3, #9
 810bae6:	d94e      	bls.n	810bb86 <_svfiprintf_r+0x17e>
 810bae8:	b1b0      	cbz	r0, 810bb18 <_svfiprintf_r+0x110>
 810baea:	9207      	str	r2, [sp, #28]
 810baec:	e014      	b.n	810bb18 <_svfiprintf_r+0x110>
 810baee:	eba0 0308 	sub.w	r3, r0, r8
 810baf2:	fa09 f303 	lsl.w	r3, r9, r3
 810baf6:	4313      	orrs	r3, r2
 810baf8:	9304      	str	r3, [sp, #16]
 810bafa:	46a2      	mov	sl, r4
 810bafc:	e7d2      	b.n	810baa4 <_svfiprintf_r+0x9c>
 810bafe:	9b03      	ldr	r3, [sp, #12]
 810bb00:	1d19      	adds	r1, r3, #4
 810bb02:	681b      	ldr	r3, [r3, #0]
 810bb04:	9103      	str	r1, [sp, #12]
 810bb06:	2b00      	cmp	r3, #0
 810bb08:	bfbb      	ittet	lt
 810bb0a:	425b      	neglt	r3, r3
 810bb0c:	f042 0202 	orrlt.w	r2, r2, #2
 810bb10:	9307      	strge	r3, [sp, #28]
 810bb12:	9307      	strlt	r3, [sp, #28]
 810bb14:	bfb8      	it	lt
 810bb16:	9204      	strlt	r2, [sp, #16]
 810bb18:	7823      	ldrb	r3, [r4, #0]
 810bb1a:	2b2e      	cmp	r3, #46	; 0x2e
 810bb1c:	d10c      	bne.n	810bb38 <_svfiprintf_r+0x130>
 810bb1e:	7863      	ldrb	r3, [r4, #1]
 810bb20:	2b2a      	cmp	r3, #42	; 0x2a
 810bb22:	d135      	bne.n	810bb90 <_svfiprintf_r+0x188>
 810bb24:	9b03      	ldr	r3, [sp, #12]
 810bb26:	1d1a      	adds	r2, r3, #4
 810bb28:	681b      	ldr	r3, [r3, #0]
 810bb2a:	9203      	str	r2, [sp, #12]
 810bb2c:	2b00      	cmp	r3, #0
 810bb2e:	bfb8      	it	lt
 810bb30:	f04f 33ff 	movlt.w	r3, #4294967295
 810bb34:	3402      	adds	r4, #2
 810bb36:	9305      	str	r3, [sp, #20]
 810bb38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810bc04 <_svfiprintf_r+0x1fc>
 810bb3c:	7821      	ldrb	r1, [r4, #0]
 810bb3e:	2203      	movs	r2, #3
 810bb40:	4650      	mov	r0, sl
 810bb42:	f7f4 fbd5 	bl	81002f0 <memchr>
 810bb46:	b140      	cbz	r0, 810bb5a <_svfiprintf_r+0x152>
 810bb48:	2340      	movs	r3, #64	; 0x40
 810bb4a:	eba0 000a 	sub.w	r0, r0, sl
 810bb4e:	fa03 f000 	lsl.w	r0, r3, r0
 810bb52:	9b04      	ldr	r3, [sp, #16]
 810bb54:	4303      	orrs	r3, r0
 810bb56:	3401      	adds	r4, #1
 810bb58:	9304      	str	r3, [sp, #16]
 810bb5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bb5e:	4826      	ldr	r0, [pc, #152]	; (810bbf8 <_svfiprintf_r+0x1f0>)
 810bb60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810bb64:	2206      	movs	r2, #6
 810bb66:	f7f4 fbc3 	bl	81002f0 <memchr>
 810bb6a:	2800      	cmp	r0, #0
 810bb6c:	d038      	beq.n	810bbe0 <_svfiprintf_r+0x1d8>
 810bb6e:	4b23      	ldr	r3, [pc, #140]	; (810bbfc <_svfiprintf_r+0x1f4>)
 810bb70:	bb1b      	cbnz	r3, 810bbba <_svfiprintf_r+0x1b2>
 810bb72:	9b03      	ldr	r3, [sp, #12]
 810bb74:	3307      	adds	r3, #7
 810bb76:	f023 0307 	bic.w	r3, r3, #7
 810bb7a:	3308      	adds	r3, #8
 810bb7c:	9303      	str	r3, [sp, #12]
 810bb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810bb80:	4433      	add	r3, r6
 810bb82:	9309      	str	r3, [sp, #36]	; 0x24
 810bb84:	e767      	b.n	810ba56 <_svfiprintf_r+0x4e>
 810bb86:	fb0c 3202 	mla	r2, ip, r2, r3
 810bb8a:	460c      	mov	r4, r1
 810bb8c:	2001      	movs	r0, #1
 810bb8e:	e7a5      	b.n	810badc <_svfiprintf_r+0xd4>
 810bb90:	2300      	movs	r3, #0
 810bb92:	3401      	adds	r4, #1
 810bb94:	9305      	str	r3, [sp, #20]
 810bb96:	4619      	mov	r1, r3
 810bb98:	f04f 0c0a 	mov.w	ip, #10
 810bb9c:	4620      	mov	r0, r4
 810bb9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 810bba2:	3a30      	subs	r2, #48	; 0x30
 810bba4:	2a09      	cmp	r2, #9
 810bba6:	d903      	bls.n	810bbb0 <_svfiprintf_r+0x1a8>
 810bba8:	2b00      	cmp	r3, #0
 810bbaa:	d0c5      	beq.n	810bb38 <_svfiprintf_r+0x130>
 810bbac:	9105      	str	r1, [sp, #20]
 810bbae:	e7c3      	b.n	810bb38 <_svfiprintf_r+0x130>
 810bbb0:	fb0c 2101 	mla	r1, ip, r1, r2
 810bbb4:	4604      	mov	r4, r0
 810bbb6:	2301      	movs	r3, #1
 810bbb8:	e7f0      	b.n	810bb9c <_svfiprintf_r+0x194>
 810bbba:	ab03      	add	r3, sp, #12
 810bbbc:	9300      	str	r3, [sp, #0]
 810bbbe:	462a      	mov	r2, r5
 810bbc0:	4b0f      	ldr	r3, [pc, #60]	; (810bc00 <_svfiprintf_r+0x1f8>)
 810bbc2:	a904      	add	r1, sp, #16
 810bbc4:	4638      	mov	r0, r7
 810bbc6:	f7fc f82d 	bl	8107c24 <_printf_float>
 810bbca:	1c42      	adds	r2, r0, #1
 810bbcc:	4606      	mov	r6, r0
 810bbce:	d1d6      	bne.n	810bb7e <_svfiprintf_r+0x176>
 810bbd0:	89ab      	ldrh	r3, [r5, #12]
 810bbd2:	065b      	lsls	r3, r3, #25
 810bbd4:	f53f af2c 	bmi.w	810ba30 <_svfiprintf_r+0x28>
 810bbd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 810bbda:	b01d      	add	sp, #116	; 0x74
 810bbdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bbe0:	ab03      	add	r3, sp, #12
 810bbe2:	9300      	str	r3, [sp, #0]
 810bbe4:	462a      	mov	r2, r5
 810bbe6:	4b06      	ldr	r3, [pc, #24]	; (810bc00 <_svfiprintf_r+0x1f8>)
 810bbe8:	a904      	add	r1, sp, #16
 810bbea:	4638      	mov	r0, r7
 810bbec:	f7fc fabe 	bl	810816c <_printf_i>
 810bbf0:	e7eb      	b.n	810bbca <_svfiprintf_r+0x1c2>
 810bbf2:	bf00      	nop
 810bbf4:	0810e5a4 	.word	0x0810e5a4
 810bbf8:	0810e5ae 	.word	0x0810e5ae
 810bbfc:	08107c25 	.word	0x08107c25
 810bc00:	0810b951 	.word	0x0810b951
 810bc04:	0810e5aa 	.word	0x0810e5aa

0810bc08 <__sfputc_r>:
 810bc08:	6893      	ldr	r3, [r2, #8]
 810bc0a:	3b01      	subs	r3, #1
 810bc0c:	2b00      	cmp	r3, #0
 810bc0e:	b410      	push	{r4}
 810bc10:	6093      	str	r3, [r2, #8]
 810bc12:	da08      	bge.n	810bc26 <__sfputc_r+0x1e>
 810bc14:	6994      	ldr	r4, [r2, #24]
 810bc16:	42a3      	cmp	r3, r4
 810bc18:	db01      	blt.n	810bc1e <__sfputc_r+0x16>
 810bc1a:	290a      	cmp	r1, #10
 810bc1c:	d103      	bne.n	810bc26 <__sfputc_r+0x1e>
 810bc1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bc22:	f7fd be5b 	b.w	81098dc <__swbuf_r>
 810bc26:	6813      	ldr	r3, [r2, #0]
 810bc28:	1c58      	adds	r0, r3, #1
 810bc2a:	6010      	str	r0, [r2, #0]
 810bc2c:	7019      	strb	r1, [r3, #0]
 810bc2e:	4608      	mov	r0, r1
 810bc30:	f85d 4b04 	ldr.w	r4, [sp], #4
 810bc34:	4770      	bx	lr

0810bc36 <__sfputs_r>:
 810bc36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bc38:	4606      	mov	r6, r0
 810bc3a:	460f      	mov	r7, r1
 810bc3c:	4614      	mov	r4, r2
 810bc3e:	18d5      	adds	r5, r2, r3
 810bc40:	42ac      	cmp	r4, r5
 810bc42:	d101      	bne.n	810bc48 <__sfputs_r+0x12>
 810bc44:	2000      	movs	r0, #0
 810bc46:	e007      	b.n	810bc58 <__sfputs_r+0x22>
 810bc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bc4c:	463a      	mov	r2, r7
 810bc4e:	4630      	mov	r0, r6
 810bc50:	f7ff ffda 	bl	810bc08 <__sfputc_r>
 810bc54:	1c43      	adds	r3, r0, #1
 810bc56:	d1f3      	bne.n	810bc40 <__sfputs_r+0xa>
 810bc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810bc5c <_vfiprintf_r>:
 810bc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bc60:	460d      	mov	r5, r1
 810bc62:	b09d      	sub	sp, #116	; 0x74
 810bc64:	4614      	mov	r4, r2
 810bc66:	4698      	mov	r8, r3
 810bc68:	4606      	mov	r6, r0
 810bc6a:	b118      	cbz	r0, 810bc74 <_vfiprintf_r+0x18>
 810bc6c:	6983      	ldr	r3, [r0, #24]
 810bc6e:	b90b      	cbnz	r3, 810bc74 <_vfiprintf_r+0x18>
 810bc70:	f7fb fdb0 	bl	81077d4 <__sinit>
 810bc74:	4b89      	ldr	r3, [pc, #548]	; (810be9c <_vfiprintf_r+0x240>)
 810bc76:	429d      	cmp	r5, r3
 810bc78:	d11b      	bne.n	810bcb2 <_vfiprintf_r+0x56>
 810bc7a:	6875      	ldr	r5, [r6, #4]
 810bc7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bc7e:	07d9      	lsls	r1, r3, #31
 810bc80:	d405      	bmi.n	810bc8e <_vfiprintf_r+0x32>
 810bc82:	89ab      	ldrh	r3, [r5, #12]
 810bc84:	059a      	lsls	r2, r3, #22
 810bc86:	d402      	bmi.n	810bc8e <_vfiprintf_r+0x32>
 810bc88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bc8a:	f7fb fe66 	bl	810795a <__retarget_lock_acquire_recursive>
 810bc8e:	89ab      	ldrh	r3, [r5, #12]
 810bc90:	071b      	lsls	r3, r3, #28
 810bc92:	d501      	bpl.n	810bc98 <_vfiprintf_r+0x3c>
 810bc94:	692b      	ldr	r3, [r5, #16]
 810bc96:	b9eb      	cbnz	r3, 810bcd4 <_vfiprintf_r+0x78>
 810bc98:	4629      	mov	r1, r5
 810bc9a:	4630      	mov	r0, r6
 810bc9c:	f7fd fe82 	bl	81099a4 <__swsetup_r>
 810bca0:	b1c0      	cbz	r0, 810bcd4 <_vfiprintf_r+0x78>
 810bca2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810bca4:	07dc      	lsls	r4, r3, #31
 810bca6:	d50e      	bpl.n	810bcc6 <_vfiprintf_r+0x6a>
 810bca8:	f04f 30ff 	mov.w	r0, #4294967295
 810bcac:	b01d      	add	sp, #116	; 0x74
 810bcae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bcb2:	4b7b      	ldr	r3, [pc, #492]	; (810bea0 <_vfiprintf_r+0x244>)
 810bcb4:	429d      	cmp	r5, r3
 810bcb6:	d101      	bne.n	810bcbc <_vfiprintf_r+0x60>
 810bcb8:	68b5      	ldr	r5, [r6, #8]
 810bcba:	e7df      	b.n	810bc7c <_vfiprintf_r+0x20>
 810bcbc:	4b79      	ldr	r3, [pc, #484]	; (810bea4 <_vfiprintf_r+0x248>)
 810bcbe:	429d      	cmp	r5, r3
 810bcc0:	bf08      	it	eq
 810bcc2:	68f5      	ldreq	r5, [r6, #12]
 810bcc4:	e7da      	b.n	810bc7c <_vfiprintf_r+0x20>
 810bcc6:	89ab      	ldrh	r3, [r5, #12]
 810bcc8:	0598      	lsls	r0, r3, #22
 810bcca:	d4ed      	bmi.n	810bca8 <_vfiprintf_r+0x4c>
 810bccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810bcce:	f7fb fe45 	bl	810795c <__retarget_lock_release_recursive>
 810bcd2:	e7e9      	b.n	810bca8 <_vfiprintf_r+0x4c>
 810bcd4:	2300      	movs	r3, #0
 810bcd6:	9309      	str	r3, [sp, #36]	; 0x24
 810bcd8:	2320      	movs	r3, #32
 810bcda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810bcde:	f8cd 800c 	str.w	r8, [sp, #12]
 810bce2:	2330      	movs	r3, #48	; 0x30
 810bce4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810bea8 <_vfiprintf_r+0x24c>
 810bce8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810bcec:	f04f 0901 	mov.w	r9, #1
 810bcf0:	4623      	mov	r3, r4
 810bcf2:	469a      	mov	sl, r3
 810bcf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 810bcf8:	b10a      	cbz	r2, 810bcfe <_vfiprintf_r+0xa2>
 810bcfa:	2a25      	cmp	r2, #37	; 0x25
 810bcfc:	d1f9      	bne.n	810bcf2 <_vfiprintf_r+0x96>
 810bcfe:	ebba 0b04 	subs.w	fp, sl, r4
 810bd02:	d00b      	beq.n	810bd1c <_vfiprintf_r+0xc0>
 810bd04:	465b      	mov	r3, fp
 810bd06:	4622      	mov	r2, r4
 810bd08:	4629      	mov	r1, r5
 810bd0a:	4630      	mov	r0, r6
 810bd0c:	f7ff ff93 	bl	810bc36 <__sfputs_r>
 810bd10:	3001      	adds	r0, #1
 810bd12:	f000 80aa 	beq.w	810be6a <_vfiprintf_r+0x20e>
 810bd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810bd18:	445a      	add	r2, fp
 810bd1a:	9209      	str	r2, [sp, #36]	; 0x24
 810bd1c:	f89a 3000 	ldrb.w	r3, [sl]
 810bd20:	2b00      	cmp	r3, #0
 810bd22:	f000 80a2 	beq.w	810be6a <_vfiprintf_r+0x20e>
 810bd26:	2300      	movs	r3, #0
 810bd28:	f04f 32ff 	mov.w	r2, #4294967295
 810bd2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810bd30:	f10a 0a01 	add.w	sl, sl, #1
 810bd34:	9304      	str	r3, [sp, #16]
 810bd36:	9307      	str	r3, [sp, #28]
 810bd38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810bd3c:	931a      	str	r3, [sp, #104]	; 0x68
 810bd3e:	4654      	mov	r4, sl
 810bd40:	2205      	movs	r2, #5
 810bd42:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bd46:	4858      	ldr	r0, [pc, #352]	; (810bea8 <_vfiprintf_r+0x24c>)
 810bd48:	f7f4 fad2 	bl	81002f0 <memchr>
 810bd4c:	9a04      	ldr	r2, [sp, #16]
 810bd4e:	b9d8      	cbnz	r0, 810bd88 <_vfiprintf_r+0x12c>
 810bd50:	06d1      	lsls	r1, r2, #27
 810bd52:	bf44      	itt	mi
 810bd54:	2320      	movmi	r3, #32
 810bd56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bd5a:	0713      	lsls	r3, r2, #28
 810bd5c:	bf44      	itt	mi
 810bd5e:	232b      	movmi	r3, #43	; 0x2b
 810bd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810bd64:	f89a 3000 	ldrb.w	r3, [sl]
 810bd68:	2b2a      	cmp	r3, #42	; 0x2a
 810bd6a:	d015      	beq.n	810bd98 <_vfiprintf_r+0x13c>
 810bd6c:	9a07      	ldr	r2, [sp, #28]
 810bd6e:	4654      	mov	r4, sl
 810bd70:	2000      	movs	r0, #0
 810bd72:	f04f 0c0a 	mov.w	ip, #10
 810bd76:	4621      	mov	r1, r4
 810bd78:	f811 3b01 	ldrb.w	r3, [r1], #1
 810bd7c:	3b30      	subs	r3, #48	; 0x30
 810bd7e:	2b09      	cmp	r3, #9
 810bd80:	d94e      	bls.n	810be20 <_vfiprintf_r+0x1c4>
 810bd82:	b1b0      	cbz	r0, 810bdb2 <_vfiprintf_r+0x156>
 810bd84:	9207      	str	r2, [sp, #28]
 810bd86:	e014      	b.n	810bdb2 <_vfiprintf_r+0x156>
 810bd88:	eba0 0308 	sub.w	r3, r0, r8
 810bd8c:	fa09 f303 	lsl.w	r3, r9, r3
 810bd90:	4313      	orrs	r3, r2
 810bd92:	9304      	str	r3, [sp, #16]
 810bd94:	46a2      	mov	sl, r4
 810bd96:	e7d2      	b.n	810bd3e <_vfiprintf_r+0xe2>
 810bd98:	9b03      	ldr	r3, [sp, #12]
 810bd9a:	1d19      	adds	r1, r3, #4
 810bd9c:	681b      	ldr	r3, [r3, #0]
 810bd9e:	9103      	str	r1, [sp, #12]
 810bda0:	2b00      	cmp	r3, #0
 810bda2:	bfbb      	ittet	lt
 810bda4:	425b      	neglt	r3, r3
 810bda6:	f042 0202 	orrlt.w	r2, r2, #2
 810bdaa:	9307      	strge	r3, [sp, #28]
 810bdac:	9307      	strlt	r3, [sp, #28]
 810bdae:	bfb8      	it	lt
 810bdb0:	9204      	strlt	r2, [sp, #16]
 810bdb2:	7823      	ldrb	r3, [r4, #0]
 810bdb4:	2b2e      	cmp	r3, #46	; 0x2e
 810bdb6:	d10c      	bne.n	810bdd2 <_vfiprintf_r+0x176>
 810bdb8:	7863      	ldrb	r3, [r4, #1]
 810bdba:	2b2a      	cmp	r3, #42	; 0x2a
 810bdbc:	d135      	bne.n	810be2a <_vfiprintf_r+0x1ce>
 810bdbe:	9b03      	ldr	r3, [sp, #12]
 810bdc0:	1d1a      	adds	r2, r3, #4
 810bdc2:	681b      	ldr	r3, [r3, #0]
 810bdc4:	9203      	str	r2, [sp, #12]
 810bdc6:	2b00      	cmp	r3, #0
 810bdc8:	bfb8      	it	lt
 810bdca:	f04f 33ff 	movlt.w	r3, #4294967295
 810bdce:	3402      	adds	r4, #2
 810bdd0:	9305      	str	r3, [sp, #20]
 810bdd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810beb8 <_vfiprintf_r+0x25c>
 810bdd6:	7821      	ldrb	r1, [r4, #0]
 810bdd8:	2203      	movs	r2, #3
 810bdda:	4650      	mov	r0, sl
 810bddc:	f7f4 fa88 	bl	81002f0 <memchr>
 810bde0:	b140      	cbz	r0, 810bdf4 <_vfiprintf_r+0x198>
 810bde2:	2340      	movs	r3, #64	; 0x40
 810bde4:	eba0 000a 	sub.w	r0, r0, sl
 810bde8:	fa03 f000 	lsl.w	r0, r3, r0
 810bdec:	9b04      	ldr	r3, [sp, #16]
 810bdee:	4303      	orrs	r3, r0
 810bdf0:	3401      	adds	r4, #1
 810bdf2:	9304      	str	r3, [sp, #16]
 810bdf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810bdf8:	482c      	ldr	r0, [pc, #176]	; (810beac <_vfiprintf_r+0x250>)
 810bdfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810bdfe:	2206      	movs	r2, #6
 810be00:	f7f4 fa76 	bl	81002f0 <memchr>
 810be04:	2800      	cmp	r0, #0
 810be06:	d03f      	beq.n	810be88 <_vfiprintf_r+0x22c>
 810be08:	4b29      	ldr	r3, [pc, #164]	; (810beb0 <_vfiprintf_r+0x254>)
 810be0a:	bb1b      	cbnz	r3, 810be54 <_vfiprintf_r+0x1f8>
 810be0c:	9b03      	ldr	r3, [sp, #12]
 810be0e:	3307      	adds	r3, #7
 810be10:	f023 0307 	bic.w	r3, r3, #7
 810be14:	3308      	adds	r3, #8
 810be16:	9303      	str	r3, [sp, #12]
 810be18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810be1a:	443b      	add	r3, r7
 810be1c:	9309      	str	r3, [sp, #36]	; 0x24
 810be1e:	e767      	b.n	810bcf0 <_vfiprintf_r+0x94>
 810be20:	fb0c 3202 	mla	r2, ip, r2, r3
 810be24:	460c      	mov	r4, r1
 810be26:	2001      	movs	r0, #1
 810be28:	e7a5      	b.n	810bd76 <_vfiprintf_r+0x11a>
 810be2a:	2300      	movs	r3, #0
 810be2c:	3401      	adds	r4, #1
 810be2e:	9305      	str	r3, [sp, #20]
 810be30:	4619      	mov	r1, r3
 810be32:	f04f 0c0a 	mov.w	ip, #10
 810be36:	4620      	mov	r0, r4
 810be38:	f810 2b01 	ldrb.w	r2, [r0], #1
 810be3c:	3a30      	subs	r2, #48	; 0x30
 810be3e:	2a09      	cmp	r2, #9
 810be40:	d903      	bls.n	810be4a <_vfiprintf_r+0x1ee>
 810be42:	2b00      	cmp	r3, #0
 810be44:	d0c5      	beq.n	810bdd2 <_vfiprintf_r+0x176>
 810be46:	9105      	str	r1, [sp, #20]
 810be48:	e7c3      	b.n	810bdd2 <_vfiprintf_r+0x176>
 810be4a:	fb0c 2101 	mla	r1, ip, r1, r2
 810be4e:	4604      	mov	r4, r0
 810be50:	2301      	movs	r3, #1
 810be52:	e7f0      	b.n	810be36 <_vfiprintf_r+0x1da>
 810be54:	ab03      	add	r3, sp, #12
 810be56:	9300      	str	r3, [sp, #0]
 810be58:	462a      	mov	r2, r5
 810be5a:	4b16      	ldr	r3, [pc, #88]	; (810beb4 <_vfiprintf_r+0x258>)
 810be5c:	a904      	add	r1, sp, #16
 810be5e:	4630      	mov	r0, r6
 810be60:	f7fb fee0 	bl	8107c24 <_printf_float>
 810be64:	4607      	mov	r7, r0
 810be66:	1c78      	adds	r0, r7, #1
 810be68:	d1d6      	bne.n	810be18 <_vfiprintf_r+0x1bc>
 810be6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810be6c:	07d9      	lsls	r1, r3, #31
 810be6e:	d405      	bmi.n	810be7c <_vfiprintf_r+0x220>
 810be70:	89ab      	ldrh	r3, [r5, #12]
 810be72:	059a      	lsls	r2, r3, #22
 810be74:	d402      	bmi.n	810be7c <_vfiprintf_r+0x220>
 810be76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810be78:	f7fb fd70 	bl	810795c <__retarget_lock_release_recursive>
 810be7c:	89ab      	ldrh	r3, [r5, #12]
 810be7e:	065b      	lsls	r3, r3, #25
 810be80:	f53f af12 	bmi.w	810bca8 <_vfiprintf_r+0x4c>
 810be84:	9809      	ldr	r0, [sp, #36]	; 0x24
 810be86:	e711      	b.n	810bcac <_vfiprintf_r+0x50>
 810be88:	ab03      	add	r3, sp, #12
 810be8a:	9300      	str	r3, [sp, #0]
 810be8c:	462a      	mov	r2, r5
 810be8e:	4b09      	ldr	r3, [pc, #36]	; (810beb4 <_vfiprintf_r+0x258>)
 810be90:	a904      	add	r1, sp, #16
 810be92:	4630      	mov	r0, r6
 810be94:	f7fc f96a 	bl	810816c <_printf_i>
 810be98:	e7e4      	b.n	810be64 <_vfiprintf_r+0x208>
 810be9a:	bf00      	nop
 810be9c:	0810e160 	.word	0x0810e160
 810bea0:	0810e180 	.word	0x0810e180
 810bea4:	0810e140 	.word	0x0810e140
 810bea8:	0810e5a4 	.word	0x0810e5a4
 810beac:	0810e5ae 	.word	0x0810e5ae
 810beb0:	08107c25 	.word	0x08107c25
 810beb4:	0810bc37 	.word	0x0810bc37
 810beb8:	0810e5aa 	.word	0x0810e5aa

0810bebc <_read_r>:
 810bebc:	b538      	push	{r3, r4, r5, lr}
 810bebe:	4d07      	ldr	r5, [pc, #28]	; (810bedc <_read_r+0x20>)
 810bec0:	4604      	mov	r4, r0
 810bec2:	4608      	mov	r0, r1
 810bec4:	4611      	mov	r1, r2
 810bec6:	2200      	movs	r2, #0
 810bec8:	602a      	str	r2, [r5, #0]
 810beca:	461a      	mov	r2, r3
 810becc:	f7f6 fe58 	bl	8102b80 <_read>
 810bed0:	1c43      	adds	r3, r0, #1
 810bed2:	d102      	bne.n	810beda <_read_r+0x1e>
 810bed4:	682b      	ldr	r3, [r5, #0]
 810bed6:	b103      	cbz	r3, 810beda <_read_r+0x1e>
 810bed8:	6023      	str	r3, [r4, #0]
 810beda:	bd38      	pop	{r3, r4, r5, pc}
 810bedc:	1000048c 	.word	0x1000048c

0810bee0 <nan>:
 810bee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810bee8 <nan+0x8>
 810bee4:	4770      	bx	lr
 810bee6:	bf00      	nop
 810bee8:	00000000 	.word	0x00000000
 810beec:	7ff80000 	.word	0x7ff80000

0810bef0 <strncmp>:
 810bef0:	b510      	push	{r4, lr}
 810bef2:	b16a      	cbz	r2, 810bf10 <strncmp+0x20>
 810bef4:	3901      	subs	r1, #1
 810bef6:	1884      	adds	r4, r0, r2
 810bef8:	f810 3b01 	ldrb.w	r3, [r0], #1
 810befc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810bf00:	4293      	cmp	r3, r2
 810bf02:	d103      	bne.n	810bf0c <strncmp+0x1c>
 810bf04:	42a0      	cmp	r0, r4
 810bf06:	d001      	beq.n	810bf0c <strncmp+0x1c>
 810bf08:	2b00      	cmp	r3, #0
 810bf0a:	d1f5      	bne.n	810bef8 <strncmp+0x8>
 810bf0c:	1a98      	subs	r0, r3, r2
 810bf0e:	bd10      	pop	{r4, pc}
 810bf10:	4610      	mov	r0, r2
 810bf12:	e7fc      	b.n	810bf0e <strncmp+0x1e>

0810bf14 <__ascii_wctomb>:
 810bf14:	b149      	cbz	r1, 810bf2a <__ascii_wctomb+0x16>
 810bf16:	2aff      	cmp	r2, #255	; 0xff
 810bf18:	bf85      	ittet	hi
 810bf1a:	238a      	movhi	r3, #138	; 0x8a
 810bf1c:	6003      	strhi	r3, [r0, #0]
 810bf1e:	700a      	strbls	r2, [r1, #0]
 810bf20:	f04f 30ff 	movhi.w	r0, #4294967295
 810bf24:	bf98      	it	ls
 810bf26:	2001      	movls	r0, #1
 810bf28:	4770      	bx	lr
 810bf2a:	4608      	mov	r0, r1
 810bf2c:	4770      	bx	lr
	...

0810bf30 <__assert_func>:
 810bf30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810bf32:	4614      	mov	r4, r2
 810bf34:	461a      	mov	r2, r3
 810bf36:	4b09      	ldr	r3, [pc, #36]	; (810bf5c <__assert_func+0x2c>)
 810bf38:	681b      	ldr	r3, [r3, #0]
 810bf3a:	4605      	mov	r5, r0
 810bf3c:	68d8      	ldr	r0, [r3, #12]
 810bf3e:	b14c      	cbz	r4, 810bf54 <__assert_func+0x24>
 810bf40:	4b07      	ldr	r3, [pc, #28]	; (810bf60 <__assert_func+0x30>)
 810bf42:	9100      	str	r1, [sp, #0]
 810bf44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810bf48:	4906      	ldr	r1, [pc, #24]	; (810bf64 <__assert_func+0x34>)
 810bf4a:	462b      	mov	r3, r5
 810bf4c:	f000 f80e 	bl	810bf6c <fiprintf>
 810bf50:	f000 f880 	bl	810c054 <abort>
 810bf54:	4b04      	ldr	r3, [pc, #16]	; (810bf68 <__assert_func+0x38>)
 810bf56:	461c      	mov	r4, r3
 810bf58:	e7f3      	b.n	810bf42 <__assert_func+0x12>
 810bf5a:	bf00      	nop
 810bf5c:	10000060 	.word	0x10000060
 810bf60:	0810e5b5 	.word	0x0810e5b5
 810bf64:	0810e5c2 	.word	0x0810e5c2
 810bf68:	0810e5f0 	.word	0x0810e5f0

0810bf6c <fiprintf>:
 810bf6c:	b40e      	push	{r1, r2, r3}
 810bf6e:	b503      	push	{r0, r1, lr}
 810bf70:	4601      	mov	r1, r0
 810bf72:	ab03      	add	r3, sp, #12
 810bf74:	4805      	ldr	r0, [pc, #20]	; (810bf8c <fiprintf+0x20>)
 810bf76:	f853 2b04 	ldr.w	r2, [r3], #4
 810bf7a:	6800      	ldr	r0, [r0, #0]
 810bf7c:	9301      	str	r3, [sp, #4]
 810bf7e:	f7ff fe6d 	bl	810bc5c <_vfiprintf_r>
 810bf82:	b002      	add	sp, #8
 810bf84:	f85d eb04 	ldr.w	lr, [sp], #4
 810bf88:	b003      	add	sp, #12
 810bf8a:	4770      	bx	lr
 810bf8c:	10000060 	.word	0x10000060

0810bf90 <_fstat_r>:
 810bf90:	b538      	push	{r3, r4, r5, lr}
 810bf92:	4d07      	ldr	r5, [pc, #28]	; (810bfb0 <_fstat_r+0x20>)
 810bf94:	2300      	movs	r3, #0
 810bf96:	4604      	mov	r4, r0
 810bf98:	4608      	mov	r0, r1
 810bf9a:	4611      	mov	r1, r2
 810bf9c:	602b      	str	r3, [r5, #0]
 810bf9e:	f7f6 fe34 	bl	8102c0a <_fstat>
 810bfa2:	1c43      	adds	r3, r0, #1
 810bfa4:	d102      	bne.n	810bfac <_fstat_r+0x1c>
 810bfa6:	682b      	ldr	r3, [r5, #0]
 810bfa8:	b103      	cbz	r3, 810bfac <_fstat_r+0x1c>
 810bfaa:	6023      	str	r3, [r4, #0]
 810bfac:	bd38      	pop	{r3, r4, r5, pc}
 810bfae:	bf00      	nop
 810bfb0:	1000048c 	.word	0x1000048c

0810bfb4 <_isatty_r>:
 810bfb4:	b538      	push	{r3, r4, r5, lr}
 810bfb6:	4d06      	ldr	r5, [pc, #24]	; (810bfd0 <_isatty_r+0x1c>)
 810bfb8:	2300      	movs	r3, #0
 810bfba:	4604      	mov	r4, r0
 810bfbc:	4608      	mov	r0, r1
 810bfbe:	602b      	str	r3, [r5, #0]
 810bfc0:	f7f6 fe33 	bl	8102c2a <_isatty>
 810bfc4:	1c43      	adds	r3, r0, #1
 810bfc6:	d102      	bne.n	810bfce <_isatty_r+0x1a>
 810bfc8:	682b      	ldr	r3, [r5, #0]
 810bfca:	b103      	cbz	r3, 810bfce <_isatty_r+0x1a>
 810bfcc:	6023      	str	r3, [r4, #0]
 810bfce:	bd38      	pop	{r3, r4, r5, pc}
 810bfd0:	1000048c 	.word	0x1000048c

0810bfd4 <memmove>:
 810bfd4:	4288      	cmp	r0, r1
 810bfd6:	b510      	push	{r4, lr}
 810bfd8:	eb01 0402 	add.w	r4, r1, r2
 810bfdc:	d902      	bls.n	810bfe4 <memmove+0x10>
 810bfde:	4284      	cmp	r4, r0
 810bfe0:	4623      	mov	r3, r4
 810bfe2:	d807      	bhi.n	810bff4 <memmove+0x20>
 810bfe4:	1e43      	subs	r3, r0, #1
 810bfe6:	42a1      	cmp	r1, r4
 810bfe8:	d008      	beq.n	810bffc <memmove+0x28>
 810bfea:	f811 2b01 	ldrb.w	r2, [r1], #1
 810bfee:	f803 2f01 	strb.w	r2, [r3, #1]!
 810bff2:	e7f8      	b.n	810bfe6 <memmove+0x12>
 810bff4:	4402      	add	r2, r0
 810bff6:	4601      	mov	r1, r0
 810bff8:	428a      	cmp	r2, r1
 810bffa:	d100      	bne.n	810bffe <memmove+0x2a>
 810bffc:	bd10      	pop	{r4, pc}
 810bffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810c002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810c006:	e7f7      	b.n	810bff8 <memmove+0x24>

0810c008 <_realloc_r>:
 810c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c00a:	4607      	mov	r7, r0
 810c00c:	4614      	mov	r4, r2
 810c00e:	460e      	mov	r6, r1
 810c010:	b921      	cbnz	r1, 810c01c <_realloc_r+0x14>
 810c012:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810c016:	4611      	mov	r1, r2
 810c018:	f7fb bd0a 	b.w	8107a30 <_malloc_r>
 810c01c:	b922      	cbnz	r2, 810c028 <_realloc_r+0x20>
 810c01e:	f7fb fcb7 	bl	8107990 <_free_r>
 810c022:	4625      	mov	r5, r4
 810c024:	4628      	mov	r0, r5
 810c026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810c028:	f000 f81b 	bl	810c062 <_malloc_usable_size_r>
 810c02c:	42a0      	cmp	r0, r4
 810c02e:	d20f      	bcs.n	810c050 <_realloc_r+0x48>
 810c030:	4621      	mov	r1, r4
 810c032:	4638      	mov	r0, r7
 810c034:	f7fb fcfc 	bl	8107a30 <_malloc_r>
 810c038:	4605      	mov	r5, r0
 810c03a:	2800      	cmp	r0, #0
 810c03c:	d0f2      	beq.n	810c024 <_realloc_r+0x1c>
 810c03e:	4631      	mov	r1, r6
 810c040:	4622      	mov	r2, r4
 810c042:	f7fe ffa1 	bl	810af88 <memcpy>
 810c046:	4631      	mov	r1, r6
 810c048:	4638      	mov	r0, r7
 810c04a:	f7fb fca1 	bl	8107990 <_free_r>
 810c04e:	e7e9      	b.n	810c024 <_realloc_r+0x1c>
 810c050:	4635      	mov	r5, r6
 810c052:	e7e7      	b.n	810c024 <_realloc_r+0x1c>

0810c054 <abort>:
 810c054:	b508      	push	{r3, lr}
 810c056:	2006      	movs	r0, #6
 810c058:	f000 f834 	bl	810c0c4 <raise>
 810c05c:	2001      	movs	r0, #1
 810c05e:	f7f6 fd85 	bl	8102b6c <_exit>

0810c062 <_malloc_usable_size_r>:
 810c062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810c066:	1f18      	subs	r0, r3, #4
 810c068:	2b00      	cmp	r3, #0
 810c06a:	bfbc      	itt	lt
 810c06c:	580b      	ldrlt	r3, [r1, r0]
 810c06e:	18c0      	addlt	r0, r0, r3
 810c070:	4770      	bx	lr

0810c072 <_raise_r>:
 810c072:	291f      	cmp	r1, #31
 810c074:	b538      	push	{r3, r4, r5, lr}
 810c076:	4604      	mov	r4, r0
 810c078:	460d      	mov	r5, r1
 810c07a:	d904      	bls.n	810c086 <_raise_r+0x14>
 810c07c:	2316      	movs	r3, #22
 810c07e:	6003      	str	r3, [r0, #0]
 810c080:	f04f 30ff 	mov.w	r0, #4294967295
 810c084:	bd38      	pop	{r3, r4, r5, pc}
 810c086:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810c088:	b112      	cbz	r2, 810c090 <_raise_r+0x1e>
 810c08a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810c08e:	b94b      	cbnz	r3, 810c0a4 <_raise_r+0x32>
 810c090:	4620      	mov	r0, r4
 810c092:	f000 f831 	bl	810c0f8 <_getpid_r>
 810c096:	462a      	mov	r2, r5
 810c098:	4601      	mov	r1, r0
 810c09a:	4620      	mov	r0, r4
 810c09c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810c0a0:	f000 b818 	b.w	810c0d4 <_kill_r>
 810c0a4:	2b01      	cmp	r3, #1
 810c0a6:	d00a      	beq.n	810c0be <_raise_r+0x4c>
 810c0a8:	1c59      	adds	r1, r3, #1
 810c0aa:	d103      	bne.n	810c0b4 <_raise_r+0x42>
 810c0ac:	2316      	movs	r3, #22
 810c0ae:	6003      	str	r3, [r0, #0]
 810c0b0:	2001      	movs	r0, #1
 810c0b2:	e7e7      	b.n	810c084 <_raise_r+0x12>
 810c0b4:	2400      	movs	r4, #0
 810c0b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810c0ba:	4628      	mov	r0, r5
 810c0bc:	4798      	blx	r3
 810c0be:	2000      	movs	r0, #0
 810c0c0:	e7e0      	b.n	810c084 <_raise_r+0x12>
	...

0810c0c4 <raise>:
 810c0c4:	4b02      	ldr	r3, [pc, #8]	; (810c0d0 <raise+0xc>)
 810c0c6:	4601      	mov	r1, r0
 810c0c8:	6818      	ldr	r0, [r3, #0]
 810c0ca:	f7ff bfd2 	b.w	810c072 <_raise_r>
 810c0ce:	bf00      	nop
 810c0d0:	10000060 	.word	0x10000060

0810c0d4 <_kill_r>:
 810c0d4:	b538      	push	{r3, r4, r5, lr}
 810c0d6:	4d07      	ldr	r5, [pc, #28]	; (810c0f4 <_kill_r+0x20>)
 810c0d8:	2300      	movs	r3, #0
 810c0da:	4604      	mov	r4, r0
 810c0dc:	4608      	mov	r0, r1
 810c0de:	4611      	mov	r1, r2
 810c0e0:	602b      	str	r3, [r5, #0]
 810c0e2:	f7f6 fd33 	bl	8102b4c <_kill>
 810c0e6:	1c43      	adds	r3, r0, #1
 810c0e8:	d102      	bne.n	810c0f0 <_kill_r+0x1c>
 810c0ea:	682b      	ldr	r3, [r5, #0]
 810c0ec:	b103      	cbz	r3, 810c0f0 <_kill_r+0x1c>
 810c0ee:	6023      	str	r3, [r4, #0]
 810c0f0:	bd38      	pop	{r3, r4, r5, pc}
 810c0f2:	bf00      	nop
 810c0f4:	1000048c 	.word	0x1000048c

0810c0f8 <_getpid_r>:
 810c0f8:	f7f6 bd20 	b.w	8102b3c <_getpid>
 810c0fc:	0000      	movs	r0, r0
	...

0810c100 <cos>:
 810c100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810c102:	ec53 2b10 	vmov	r2, r3, d0
 810c106:	4824      	ldr	r0, [pc, #144]	; (810c198 <cos+0x98>)
 810c108:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810c10c:	4281      	cmp	r1, r0
 810c10e:	dc06      	bgt.n	810c11e <cos+0x1e>
 810c110:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 810c190 <cos+0x90>
 810c114:	f001 f96c 	bl	810d3f0 <__kernel_cos>
 810c118:	ec51 0b10 	vmov	r0, r1, d0
 810c11c:	e007      	b.n	810c12e <cos+0x2e>
 810c11e:	481f      	ldr	r0, [pc, #124]	; (810c19c <cos+0x9c>)
 810c120:	4281      	cmp	r1, r0
 810c122:	dd09      	ble.n	810c138 <cos+0x38>
 810c124:	ee10 0a10 	vmov	r0, s0
 810c128:	4619      	mov	r1, r3
 810c12a:	f7f4 f935 	bl	8100398 <__aeabi_dsub>
 810c12e:	ec41 0b10 	vmov	d0, r0, r1
 810c132:	b005      	add	sp, #20
 810c134:	f85d fb04 	ldr.w	pc, [sp], #4
 810c138:	4668      	mov	r0, sp
 810c13a:	f000 fe99 	bl	810ce70 <__ieee754_rem_pio2>
 810c13e:	f000 0003 	and.w	r0, r0, #3
 810c142:	2801      	cmp	r0, #1
 810c144:	d007      	beq.n	810c156 <cos+0x56>
 810c146:	2802      	cmp	r0, #2
 810c148:	d012      	beq.n	810c170 <cos+0x70>
 810c14a:	b9c0      	cbnz	r0, 810c17e <cos+0x7e>
 810c14c:	ed9d 1b02 	vldr	d1, [sp, #8]
 810c150:	ed9d 0b00 	vldr	d0, [sp]
 810c154:	e7de      	b.n	810c114 <cos+0x14>
 810c156:	ed9d 1b02 	vldr	d1, [sp, #8]
 810c15a:	ed9d 0b00 	vldr	d0, [sp]
 810c15e:	f001 fd4f 	bl	810dc00 <__kernel_sin>
 810c162:	ec53 2b10 	vmov	r2, r3, d0
 810c166:	ee10 0a10 	vmov	r0, s0
 810c16a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810c16e:	e7de      	b.n	810c12e <cos+0x2e>
 810c170:	ed9d 1b02 	vldr	d1, [sp, #8]
 810c174:	ed9d 0b00 	vldr	d0, [sp]
 810c178:	f001 f93a 	bl	810d3f0 <__kernel_cos>
 810c17c:	e7f1      	b.n	810c162 <cos+0x62>
 810c17e:	ed9d 1b02 	vldr	d1, [sp, #8]
 810c182:	ed9d 0b00 	vldr	d0, [sp]
 810c186:	2001      	movs	r0, #1
 810c188:	f001 fd3a 	bl	810dc00 <__kernel_sin>
 810c18c:	e7c4      	b.n	810c118 <cos+0x18>
 810c18e:	bf00      	nop
	...
 810c198:	3fe921fb 	.word	0x3fe921fb
 810c19c:	7fefffff 	.word	0x7fefffff

0810c1a0 <fabs>:
 810c1a0:	ec51 0b10 	vmov	r0, r1, d0
 810c1a4:	ee10 2a10 	vmov	r2, s0
 810c1a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810c1ac:	ec43 2b10 	vmov	d0, r2, r3
 810c1b0:	4770      	bx	lr
 810c1b2:	0000      	movs	r0, r0
 810c1b4:	0000      	movs	r0, r0
	...

0810c1b8 <sin>:
 810c1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810c1ba:	ec53 2b10 	vmov	r2, r3, d0
 810c1be:	4826      	ldr	r0, [pc, #152]	; (810c258 <sin+0xa0>)
 810c1c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810c1c4:	4281      	cmp	r1, r0
 810c1c6:	dc07      	bgt.n	810c1d8 <sin+0x20>
 810c1c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 810c250 <sin+0x98>
 810c1cc:	2000      	movs	r0, #0
 810c1ce:	f001 fd17 	bl	810dc00 <__kernel_sin>
 810c1d2:	ec51 0b10 	vmov	r0, r1, d0
 810c1d6:	e007      	b.n	810c1e8 <sin+0x30>
 810c1d8:	4820      	ldr	r0, [pc, #128]	; (810c25c <sin+0xa4>)
 810c1da:	4281      	cmp	r1, r0
 810c1dc:	dd09      	ble.n	810c1f2 <sin+0x3a>
 810c1de:	ee10 0a10 	vmov	r0, s0
 810c1e2:	4619      	mov	r1, r3
 810c1e4:	f7f4 f8d8 	bl	8100398 <__aeabi_dsub>
 810c1e8:	ec41 0b10 	vmov	d0, r0, r1
 810c1ec:	b005      	add	sp, #20
 810c1ee:	f85d fb04 	ldr.w	pc, [sp], #4
 810c1f2:	4668      	mov	r0, sp
 810c1f4:	f000 fe3c 	bl	810ce70 <__ieee754_rem_pio2>
 810c1f8:	f000 0003 	and.w	r0, r0, #3
 810c1fc:	2801      	cmp	r0, #1
 810c1fe:	d008      	beq.n	810c212 <sin+0x5a>
 810c200:	2802      	cmp	r0, #2
 810c202:	d00d      	beq.n	810c220 <sin+0x68>
 810c204:	b9d0      	cbnz	r0, 810c23c <sin+0x84>
 810c206:	ed9d 1b02 	vldr	d1, [sp, #8]
 810c20a:	ed9d 0b00 	vldr	d0, [sp]
 810c20e:	2001      	movs	r0, #1
 810c210:	e7dd      	b.n	810c1ce <sin+0x16>
 810c212:	ed9d 1b02 	vldr	d1, [sp, #8]
 810c216:	ed9d 0b00 	vldr	d0, [sp]
 810c21a:	f001 f8e9 	bl	810d3f0 <__kernel_cos>
 810c21e:	e7d8      	b.n	810c1d2 <sin+0x1a>
 810c220:	ed9d 1b02 	vldr	d1, [sp, #8]
 810c224:	ed9d 0b00 	vldr	d0, [sp]
 810c228:	2001      	movs	r0, #1
 810c22a:	f001 fce9 	bl	810dc00 <__kernel_sin>
 810c22e:	ec53 2b10 	vmov	r2, r3, d0
 810c232:	ee10 0a10 	vmov	r0, s0
 810c236:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810c23a:	e7d5      	b.n	810c1e8 <sin+0x30>
 810c23c:	ed9d 1b02 	vldr	d1, [sp, #8]
 810c240:	ed9d 0b00 	vldr	d0, [sp]
 810c244:	f001 f8d4 	bl	810d3f0 <__kernel_cos>
 810c248:	e7f1      	b.n	810c22e <sin+0x76>
 810c24a:	bf00      	nop
 810c24c:	f3af 8000 	nop.w
	...
 810c258:	3fe921fb 	.word	0x3fe921fb
 810c25c:	7fefffff 	.word	0x7fefffff

0810c260 <pow>:
 810c260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c264:	ec59 8b10 	vmov	r8, r9, d0
 810c268:	ec57 6b11 	vmov	r6, r7, d1
 810c26c:	f000 f8dc 	bl	810c428 <__ieee754_pow>
 810c270:	4b4e      	ldr	r3, [pc, #312]	; (810c3ac <pow+0x14c>)
 810c272:	f993 3000 	ldrsb.w	r3, [r3]
 810c276:	3301      	adds	r3, #1
 810c278:	ec55 4b10 	vmov	r4, r5, d0
 810c27c:	d015      	beq.n	810c2aa <pow+0x4a>
 810c27e:	4632      	mov	r2, r6
 810c280:	463b      	mov	r3, r7
 810c282:	4630      	mov	r0, r6
 810c284:	4639      	mov	r1, r7
 810c286:	f7f4 fcd9 	bl	8100c3c <__aeabi_dcmpun>
 810c28a:	b970      	cbnz	r0, 810c2aa <pow+0x4a>
 810c28c:	4642      	mov	r2, r8
 810c28e:	464b      	mov	r3, r9
 810c290:	4640      	mov	r0, r8
 810c292:	4649      	mov	r1, r9
 810c294:	f7f4 fcd2 	bl	8100c3c <__aeabi_dcmpun>
 810c298:	2200      	movs	r2, #0
 810c29a:	2300      	movs	r3, #0
 810c29c:	b148      	cbz	r0, 810c2b2 <pow+0x52>
 810c29e:	4630      	mov	r0, r6
 810c2a0:	4639      	mov	r1, r7
 810c2a2:	f7f4 fc99 	bl	8100bd8 <__aeabi_dcmpeq>
 810c2a6:	2800      	cmp	r0, #0
 810c2a8:	d17d      	bne.n	810c3a6 <pow+0x146>
 810c2aa:	ec45 4b10 	vmov	d0, r4, r5
 810c2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c2b2:	4640      	mov	r0, r8
 810c2b4:	4649      	mov	r1, r9
 810c2b6:	f7f4 fc8f 	bl	8100bd8 <__aeabi_dcmpeq>
 810c2ba:	b1e0      	cbz	r0, 810c2f6 <pow+0x96>
 810c2bc:	2200      	movs	r2, #0
 810c2be:	2300      	movs	r3, #0
 810c2c0:	4630      	mov	r0, r6
 810c2c2:	4639      	mov	r1, r7
 810c2c4:	f7f4 fc88 	bl	8100bd8 <__aeabi_dcmpeq>
 810c2c8:	2800      	cmp	r0, #0
 810c2ca:	d16c      	bne.n	810c3a6 <pow+0x146>
 810c2cc:	ec47 6b10 	vmov	d0, r6, r7
 810c2d0:	f001 fd54 	bl	810dd7c <finite>
 810c2d4:	2800      	cmp	r0, #0
 810c2d6:	d0e8      	beq.n	810c2aa <pow+0x4a>
 810c2d8:	2200      	movs	r2, #0
 810c2da:	2300      	movs	r3, #0
 810c2dc:	4630      	mov	r0, r6
 810c2de:	4639      	mov	r1, r7
 810c2e0:	f7f4 fc84 	bl	8100bec <__aeabi_dcmplt>
 810c2e4:	2800      	cmp	r0, #0
 810c2e6:	d0e0      	beq.n	810c2aa <pow+0x4a>
 810c2e8:	f7fb f954 	bl	8107594 <__errno>
 810c2ec:	2321      	movs	r3, #33	; 0x21
 810c2ee:	6003      	str	r3, [r0, #0]
 810c2f0:	2400      	movs	r4, #0
 810c2f2:	4d2f      	ldr	r5, [pc, #188]	; (810c3b0 <pow+0x150>)
 810c2f4:	e7d9      	b.n	810c2aa <pow+0x4a>
 810c2f6:	ec45 4b10 	vmov	d0, r4, r5
 810c2fa:	f001 fd3f 	bl	810dd7c <finite>
 810c2fe:	bbb8      	cbnz	r0, 810c370 <pow+0x110>
 810c300:	ec49 8b10 	vmov	d0, r8, r9
 810c304:	f001 fd3a 	bl	810dd7c <finite>
 810c308:	b390      	cbz	r0, 810c370 <pow+0x110>
 810c30a:	ec47 6b10 	vmov	d0, r6, r7
 810c30e:	f001 fd35 	bl	810dd7c <finite>
 810c312:	b368      	cbz	r0, 810c370 <pow+0x110>
 810c314:	4622      	mov	r2, r4
 810c316:	462b      	mov	r3, r5
 810c318:	4620      	mov	r0, r4
 810c31a:	4629      	mov	r1, r5
 810c31c:	f7f4 fc8e 	bl	8100c3c <__aeabi_dcmpun>
 810c320:	b160      	cbz	r0, 810c33c <pow+0xdc>
 810c322:	f7fb f937 	bl	8107594 <__errno>
 810c326:	2321      	movs	r3, #33	; 0x21
 810c328:	6003      	str	r3, [r0, #0]
 810c32a:	2200      	movs	r2, #0
 810c32c:	2300      	movs	r3, #0
 810c32e:	4610      	mov	r0, r2
 810c330:	4619      	mov	r1, r3
 810c332:	f7f4 fb13 	bl	810095c <__aeabi_ddiv>
 810c336:	4604      	mov	r4, r0
 810c338:	460d      	mov	r5, r1
 810c33a:	e7b6      	b.n	810c2aa <pow+0x4a>
 810c33c:	f7fb f92a 	bl	8107594 <__errno>
 810c340:	2322      	movs	r3, #34	; 0x22
 810c342:	6003      	str	r3, [r0, #0]
 810c344:	2200      	movs	r2, #0
 810c346:	2300      	movs	r3, #0
 810c348:	4640      	mov	r0, r8
 810c34a:	4649      	mov	r1, r9
 810c34c:	f7f4 fc4e 	bl	8100bec <__aeabi_dcmplt>
 810c350:	2400      	movs	r4, #0
 810c352:	b158      	cbz	r0, 810c36c <pow+0x10c>
 810c354:	ec47 6b10 	vmov	d0, r6, r7
 810c358:	f001 fd9e 	bl	810de98 <rint>
 810c35c:	4632      	mov	r2, r6
 810c35e:	ec51 0b10 	vmov	r0, r1, d0
 810c362:	463b      	mov	r3, r7
 810c364:	f7f4 fc38 	bl	8100bd8 <__aeabi_dcmpeq>
 810c368:	2800      	cmp	r0, #0
 810c36a:	d0c2      	beq.n	810c2f2 <pow+0x92>
 810c36c:	4d11      	ldr	r5, [pc, #68]	; (810c3b4 <pow+0x154>)
 810c36e:	e79c      	b.n	810c2aa <pow+0x4a>
 810c370:	2200      	movs	r2, #0
 810c372:	2300      	movs	r3, #0
 810c374:	4620      	mov	r0, r4
 810c376:	4629      	mov	r1, r5
 810c378:	f7f4 fc2e 	bl	8100bd8 <__aeabi_dcmpeq>
 810c37c:	2800      	cmp	r0, #0
 810c37e:	d094      	beq.n	810c2aa <pow+0x4a>
 810c380:	ec49 8b10 	vmov	d0, r8, r9
 810c384:	f001 fcfa 	bl	810dd7c <finite>
 810c388:	2800      	cmp	r0, #0
 810c38a:	d08e      	beq.n	810c2aa <pow+0x4a>
 810c38c:	ec47 6b10 	vmov	d0, r6, r7
 810c390:	f001 fcf4 	bl	810dd7c <finite>
 810c394:	2800      	cmp	r0, #0
 810c396:	d088      	beq.n	810c2aa <pow+0x4a>
 810c398:	f7fb f8fc 	bl	8107594 <__errno>
 810c39c:	2322      	movs	r3, #34	; 0x22
 810c39e:	6003      	str	r3, [r0, #0]
 810c3a0:	2400      	movs	r4, #0
 810c3a2:	2500      	movs	r5, #0
 810c3a4:	e781      	b.n	810c2aa <pow+0x4a>
 810c3a6:	4d04      	ldr	r5, [pc, #16]	; (810c3b8 <pow+0x158>)
 810c3a8:	2400      	movs	r4, #0
 810c3aa:	e77e      	b.n	810c2aa <pow+0x4a>
 810c3ac:	10000234 	.word	0x10000234
 810c3b0:	fff00000 	.word	0xfff00000
 810c3b4:	7ff00000 	.word	0x7ff00000
 810c3b8:	3ff00000 	.word	0x3ff00000

0810c3bc <sqrt>:
 810c3bc:	b538      	push	{r3, r4, r5, lr}
 810c3be:	ed2d 8b02 	vpush	{d8}
 810c3c2:	ec55 4b10 	vmov	r4, r5, d0
 810c3c6:	f000 ff5d 	bl	810d284 <__ieee754_sqrt>
 810c3ca:	4b15      	ldr	r3, [pc, #84]	; (810c420 <sqrt+0x64>)
 810c3cc:	eeb0 8a40 	vmov.f32	s16, s0
 810c3d0:	eef0 8a60 	vmov.f32	s17, s1
 810c3d4:	f993 3000 	ldrsb.w	r3, [r3]
 810c3d8:	3301      	adds	r3, #1
 810c3da:	d019      	beq.n	810c410 <sqrt+0x54>
 810c3dc:	4622      	mov	r2, r4
 810c3de:	462b      	mov	r3, r5
 810c3e0:	4620      	mov	r0, r4
 810c3e2:	4629      	mov	r1, r5
 810c3e4:	f7f4 fc2a 	bl	8100c3c <__aeabi_dcmpun>
 810c3e8:	b990      	cbnz	r0, 810c410 <sqrt+0x54>
 810c3ea:	2200      	movs	r2, #0
 810c3ec:	2300      	movs	r3, #0
 810c3ee:	4620      	mov	r0, r4
 810c3f0:	4629      	mov	r1, r5
 810c3f2:	f7f4 fbfb 	bl	8100bec <__aeabi_dcmplt>
 810c3f6:	b158      	cbz	r0, 810c410 <sqrt+0x54>
 810c3f8:	f7fb f8cc 	bl	8107594 <__errno>
 810c3fc:	2321      	movs	r3, #33	; 0x21
 810c3fe:	6003      	str	r3, [r0, #0]
 810c400:	2200      	movs	r2, #0
 810c402:	2300      	movs	r3, #0
 810c404:	4610      	mov	r0, r2
 810c406:	4619      	mov	r1, r3
 810c408:	f7f4 faa8 	bl	810095c <__aeabi_ddiv>
 810c40c:	ec41 0b18 	vmov	d8, r0, r1
 810c410:	eeb0 0a48 	vmov.f32	s0, s16
 810c414:	eef0 0a68 	vmov.f32	s1, s17
 810c418:	ecbd 8b02 	vpop	{d8}
 810c41c:	bd38      	pop	{r3, r4, r5, pc}
 810c41e:	bf00      	nop
 810c420:	10000234 	.word	0x10000234
 810c424:	00000000 	.word	0x00000000

0810c428 <__ieee754_pow>:
 810c428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c42c:	ed2d 8b06 	vpush	{d8-d10}
 810c430:	b08d      	sub	sp, #52	; 0x34
 810c432:	ed8d 1b02 	vstr	d1, [sp, #8]
 810c436:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810c43a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810c43e:	ea56 0100 	orrs.w	r1, r6, r0
 810c442:	ec53 2b10 	vmov	r2, r3, d0
 810c446:	f000 84d1 	beq.w	810cdec <__ieee754_pow+0x9c4>
 810c44a:	497f      	ldr	r1, [pc, #508]	; (810c648 <__ieee754_pow+0x220>)
 810c44c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810c450:	428c      	cmp	r4, r1
 810c452:	ee10 8a10 	vmov	r8, s0
 810c456:	4699      	mov	r9, r3
 810c458:	dc09      	bgt.n	810c46e <__ieee754_pow+0x46>
 810c45a:	d103      	bne.n	810c464 <__ieee754_pow+0x3c>
 810c45c:	b97a      	cbnz	r2, 810c47e <__ieee754_pow+0x56>
 810c45e:	42a6      	cmp	r6, r4
 810c460:	dd02      	ble.n	810c468 <__ieee754_pow+0x40>
 810c462:	e00c      	b.n	810c47e <__ieee754_pow+0x56>
 810c464:	428e      	cmp	r6, r1
 810c466:	dc02      	bgt.n	810c46e <__ieee754_pow+0x46>
 810c468:	428e      	cmp	r6, r1
 810c46a:	d110      	bne.n	810c48e <__ieee754_pow+0x66>
 810c46c:	b178      	cbz	r0, 810c48e <__ieee754_pow+0x66>
 810c46e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810c472:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810c476:	ea54 0308 	orrs.w	r3, r4, r8
 810c47a:	f000 84b7 	beq.w	810cdec <__ieee754_pow+0x9c4>
 810c47e:	4873      	ldr	r0, [pc, #460]	; (810c64c <__ieee754_pow+0x224>)
 810c480:	b00d      	add	sp, #52	; 0x34
 810c482:	ecbd 8b06 	vpop	{d8-d10}
 810c486:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c48a:	f7ff bd29 	b.w	810bee0 <nan>
 810c48e:	f1b9 0f00 	cmp.w	r9, #0
 810c492:	da36      	bge.n	810c502 <__ieee754_pow+0xda>
 810c494:	496e      	ldr	r1, [pc, #440]	; (810c650 <__ieee754_pow+0x228>)
 810c496:	428e      	cmp	r6, r1
 810c498:	dc51      	bgt.n	810c53e <__ieee754_pow+0x116>
 810c49a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810c49e:	428e      	cmp	r6, r1
 810c4a0:	f340 84af 	ble.w	810ce02 <__ieee754_pow+0x9da>
 810c4a4:	1531      	asrs	r1, r6, #20
 810c4a6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810c4aa:	2914      	cmp	r1, #20
 810c4ac:	dd0f      	ble.n	810c4ce <__ieee754_pow+0xa6>
 810c4ae:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810c4b2:	fa20 fc01 	lsr.w	ip, r0, r1
 810c4b6:	fa0c f101 	lsl.w	r1, ip, r1
 810c4ba:	4281      	cmp	r1, r0
 810c4bc:	f040 84a1 	bne.w	810ce02 <__ieee754_pow+0x9da>
 810c4c0:	f00c 0c01 	and.w	ip, ip, #1
 810c4c4:	f1cc 0102 	rsb	r1, ip, #2
 810c4c8:	9100      	str	r1, [sp, #0]
 810c4ca:	b180      	cbz	r0, 810c4ee <__ieee754_pow+0xc6>
 810c4cc:	e059      	b.n	810c582 <__ieee754_pow+0x15a>
 810c4ce:	2800      	cmp	r0, #0
 810c4d0:	d155      	bne.n	810c57e <__ieee754_pow+0x156>
 810c4d2:	f1c1 0114 	rsb	r1, r1, #20
 810c4d6:	fa46 fc01 	asr.w	ip, r6, r1
 810c4da:	fa0c f101 	lsl.w	r1, ip, r1
 810c4de:	42b1      	cmp	r1, r6
 810c4e0:	f040 848c 	bne.w	810cdfc <__ieee754_pow+0x9d4>
 810c4e4:	f00c 0c01 	and.w	ip, ip, #1
 810c4e8:	f1cc 0102 	rsb	r1, ip, #2
 810c4ec:	9100      	str	r1, [sp, #0]
 810c4ee:	4959      	ldr	r1, [pc, #356]	; (810c654 <__ieee754_pow+0x22c>)
 810c4f0:	428e      	cmp	r6, r1
 810c4f2:	d12d      	bne.n	810c550 <__ieee754_pow+0x128>
 810c4f4:	2f00      	cmp	r7, #0
 810c4f6:	da79      	bge.n	810c5ec <__ieee754_pow+0x1c4>
 810c4f8:	4956      	ldr	r1, [pc, #344]	; (810c654 <__ieee754_pow+0x22c>)
 810c4fa:	2000      	movs	r0, #0
 810c4fc:	f7f4 fa2e 	bl	810095c <__aeabi_ddiv>
 810c500:	e016      	b.n	810c530 <__ieee754_pow+0x108>
 810c502:	2100      	movs	r1, #0
 810c504:	9100      	str	r1, [sp, #0]
 810c506:	2800      	cmp	r0, #0
 810c508:	d13b      	bne.n	810c582 <__ieee754_pow+0x15a>
 810c50a:	494f      	ldr	r1, [pc, #316]	; (810c648 <__ieee754_pow+0x220>)
 810c50c:	428e      	cmp	r6, r1
 810c50e:	d1ee      	bne.n	810c4ee <__ieee754_pow+0xc6>
 810c510:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810c514:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810c518:	ea53 0308 	orrs.w	r3, r3, r8
 810c51c:	f000 8466 	beq.w	810cdec <__ieee754_pow+0x9c4>
 810c520:	4b4d      	ldr	r3, [pc, #308]	; (810c658 <__ieee754_pow+0x230>)
 810c522:	429c      	cmp	r4, r3
 810c524:	dd0d      	ble.n	810c542 <__ieee754_pow+0x11a>
 810c526:	2f00      	cmp	r7, #0
 810c528:	f280 8464 	bge.w	810cdf4 <__ieee754_pow+0x9cc>
 810c52c:	2000      	movs	r0, #0
 810c52e:	2100      	movs	r1, #0
 810c530:	ec41 0b10 	vmov	d0, r0, r1
 810c534:	b00d      	add	sp, #52	; 0x34
 810c536:	ecbd 8b06 	vpop	{d8-d10}
 810c53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c53e:	2102      	movs	r1, #2
 810c540:	e7e0      	b.n	810c504 <__ieee754_pow+0xdc>
 810c542:	2f00      	cmp	r7, #0
 810c544:	daf2      	bge.n	810c52c <__ieee754_pow+0x104>
 810c546:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810c54a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810c54e:	e7ef      	b.n	810c530 <__ieee754_pow+0x108>
 810c550:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810c554:	d104      	bne.n	810c560 <__ieee754_pow+0x138>
 810c556:	4610      	mov	r0, r2
 810c558:	4619      	mov	r1, r3
 810c55a:	f7f4 f8d5 	bl	8100708 <__aeabi_dmul>
 810c55e:	e7e7      	b.n	810c530 <__ieee754_pow+0x108>
 810c560:	493e      	ldr	r1, [pc, #248]	; (810c65c <__ieee754_pow+0x234>)
 810c562:	428f      	cmp	r7, r1
 810c564:	d10d      	bne.n	810c582 <__ieee754_pow+0x15a>
 810c566:	f1b9 0f00 	cmp.w	r9, #0
 810c56a:	db0a      	blt.n	810c582 <__ieee754_pow+0x15a>
 810c56c:	ec43 2b10 	vmov	d0, r2, r3
 810c570:	b00d      	add	sp, #52	; 0x34
 810c572:	ecbd 8b06 	vpop	{d8-d10}
 810c576:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c57a:	f000 be83 	b.w	810d284 <__ieee754_sqrt>
 810c57e:	2100      	movs	r1, #0
 810c580:	9100      	str	r1, [sp, #0]
 810c582:	ec43 2b10 	vmov	d0, r2, r3
 810c586:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810c58a:	f7ff fe09 	bl	810c1a0 <fabs>
 810c58e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810c592:	ec51 0b10 	vmov	r0, r1, d0
 810c596:	f1b8 0f00 	cmp.w	r8, #0
 810c59a:	d12a      	bne.n	810c5f2 <__ieee754_pow+0x1ca>
 810c59c:	b12c      	cbz	r4, 810c5aa <__ieee754_pow+0x182>
 810c59e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810c654 <__ieee754_pow+0x22c>
 810c5a2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810c5a6:	45e6      	cmp	lr, ip
 810c5a8:	d123      	bne.n	810c5f2 <__ieee754_pow+0x1ca>
 810c5aa:	2f00      	cmp	r7, #0
 810c5ac:	da05      	bge.n	810c5ba <__ieee754_pow+0x192>
 810c5ae:	4602      	mov	r2, r0
 810c5b0:	460b      	mov	r3, r1
 810c5b2:	2000      	movs	r0, #0
 810c5b4:	4927      	ldr	r1, [pc, #156]	; (810c654 <__ieee754_pow+0x22c>)
 810c5b6:	f7f4 f9d1 	bl	810095c <__aeabi_ddiv>
 810c5ba:	f1b9 0f00 	cmp.w	r9, #0
 810c5be:	dab7      	bge.n	810c530 <__ieee754_pow+0x108>
 810c5c0:	9b00      	ldr	r3, [sp, #0]
 810c5c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810c5c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810c5ca:	4323      	orrs	r3, r4
 810c5cc:	d108      	bne.n	810c5e0 <__ieee754_pow+0x1b8>
 810c5ce:	4602      	mov	r2, r0
 810c5d0:	460b      	mov	r3, r1
 810c5d2:	4610      	mov	r0, r2
 810c5d4:	4619      	mov	r1, r3
 810c5d6:	f7f3 fedf 	bl	8100398 <__aeabi_dsub>
 810c5da:	4602      	mov	r2, r0
 810c5dc:	460b      	mov	r3, r1
 810c5de:	e78d      	b.n	810c4fc <__ieee754_pow+0xd4>
 810c5e0:	9b00      	ldr	r3, [sp, #0]
 810c5e2:	2b01      	cmp	r3, #1
 810c5e4:	d1a4      	bne.n	810c530 <__ieee754_pow+0x108>
 810c5e6:	4602      	mov	r2, r0
 810c5e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810c5ec:	4610      	mov	r0, r2
 810c5ee:	4619      	mov	r1, r3
 810c5f0:	e79e      	b.n	810c530 <__ieee754_pow+0x108>
 810c5f2:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810c5f6:	f10c 35ff 	add.w	r5, ip, #4294967295
 810c5fa:	950a      	str	r5, [sp, #40]	; 0x28
 810c5fc:	9d00      	ldr	r5, [sp, #0]
 810c5fe:	46ac      	mov	ip, r5
 810c600:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810c602:	ea5c 0505 	orrs.w	r5, ip, r5
 810c606:	d0e4      	beq.n	810c5d2 <__ieee754_pow+0x1aa>
 810c608:	4b15      	ldr	r3, [pc, #84]	; (810c660 <__ieee754_pow+0x238>)
 810c60a:	429e      	cmp	r6, r3
 810c60c:	f340 80fc 	ble.w	810c808 <__ieee754_pow+0x3e0>
 810c610:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810c614:	429e      	cmp	r6, r3
 810c616:	4b10      	ldr	r3, [pc, #64]	; (810c658 <__ieee754_pow+0x230>)
 810c618:	dd07      	ble.n	810c62a <__ieee754_pow+0x202>
 810c61a:	429c      	cmp	r4, r3
 810c61c:	dc0a      	bgt.n	810c634 <__ieee754_pow+0x20c>
 810c61e:	2f00      	cmp	r7, #0
 810c620:	da84      	bge.n	810c52c <__ieee754_pow+0x104>
 810c622:	a307      	add	r3, pc, #28	; (adr r3, 810c640 <__ieee754_pow+0x218>)
 810c624:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c628:	e795      	b.n	810c556 <__ieee754_pow+0x12e>
 810c62a:	429c      	cmp	r4, r3
 810c62c:	dbf7      	blt.n	810c61e <__ieee754_pow+0x1f6>
 810c62e:	4b09      	ldr	r3, [pc, #36]	; (810c654 <__ieee754_pow+0x22c>)
 810c630:	429c      	cmp	r4, r3
 810c632:	dd17      	ble.n	810c664 <__ieee754_pow+0x23c>
 810c634:	2f00      	cmp	r7, #0
 810c636:	dcf4      	bgt.n	810c622 <__ieee754_pow+0x1fa>
 810c638:	e778      	b.n	810c52c <__ieee754_pow+0x104>
 810c63a:	bf00      	nop
 810c63c:	f3af 8000 	nop.w
 810c640:	8800759c 	.word	0x8800759c
 810c644:	7e37e43c 	.word	0x7e37e43c
 810c648:	7ff00000 	.word	0x7ff00000
 810c64c:	0810e5f0 	.word	0x0810e5f0
 810c650:	433fffff 	.word	0x433fffff
 810c654:	3ff00000 	.word	0x3ff00000
 810c658:	3fefffff 	.word	0x3fefffff
 810c65c:	3fe00000 	.word	0x3fe00000
 810c660:	41e00000 	.word	0x41e00000
 810c664:	4b64      	ldr	r3, [pc, #400]	; (810c7f8 <__ieee754_pow+0x3d0>)
 810c666:	2200      	movs	r2, #0
 810c668:	f7f3 fe96 	bl	8100398 <__aeabi_dsub>
 810c66c:	a356      	add	r3, pc, #344	; (adr r3, 810c7c8 <__ieee754_pow+0x3a0>)
 810c66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c672:	4604      	mov	r4, r0
 810c674:	460d      	mov	r5, r1
 810c676:	f7f4 f847 	bl	8100708 <__aeabi_dmul>
 810c67a:	a355      	add	r3, pc, #340	; (adr r3, 810c7d0 <__ieee754_pow+0x3a8>)
 810c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c680:	4606      	mov	r6, r0
 810c682:	460f      	mov	r7, r1
 810c684:	4620      	mov	r0, r4
 810c686:	4629      	mov	r1, r5
 810c688:	f7f4 f83e 	bl	8100708 <__aeabi_dmul>
 810c68c:	4b5b      	ldr	r3, [pc, #364]	; (810c7fc <__ieee754_pow+0x3d4>)
 810c68e:	4682      	mov	sl, r0
 810c690:	468b      	mov	fp, r1
 810c692:	2200      	movs	r2, #0
 810c694:	4620      	mov	r0, r4
 810c696:	4629      	mov	r1, r5
 810c698:	f7f4 f836 	bl	8100708 <__aeabi_dmul>
 810c69c:	4602      	mov	r2, r0
 810c69e:	460b      	mov	r3, r1
 810c6a0:	a14d      	add	r1, pc, #308	; (adr r1, 810c7d8 <__ieee754_pow+0x3b0>)
 810c6a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c6a6:	f7f3 fe77 	bl	8100398 <__aeabi_dsub>
 810c6aa:	4622      	mov	r2, r4
 810c6ac:	462b      	mov	r3, r5
 810c6ae:	f7f4 f82b 	bl	8100708 <__aeabi_dmul>
 810c6b2:	4602      	mov	r2, r0
 810c6b4:	460b      	mov	r3, r1
 810c6b6:	2000      	movs	r0, #0
 810c6b8:	4951      	ldr	r1, [pc, #324]	; (810c800 <__ieee754_pow+0x3d8>)
 810c6ba:	f7f3 fe6d 	bl	8100398 <__aeabi_dsub>
 810c6be:	4622      	mov	r2, r4
 810c6c0:	4680      	mov	r8, r0
 810c6c2:	4689      	mov	r9, r1
 810c6c4:	462b      	mov	r3, r5
 810c6c6:	4620      	mov	r0, r4
 810c6c8:	4629      	mov	r1, r5
 810c6ca:	f7f4 f81d 	bl	8100708 <__aeabi_dmul>
 810c6ce:	4602      	mov	r2, r0
 810c6d0:	460b      	mov	r3, r1
 810c6d2:	4640      	mov	r0, r8
 810c6d4:	4649      	mov	r1, r9
 810c6d6:	f7f4 f817 	bl	8100708 <__aeabi_dmul>
 810c6da:	a341      	add	r3, pc, #260	; (adr r3, 810c7e0 <__ieee754_pow+0x3b8>)
 810c6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c6e0:	f7f4 f812 	bl	8100708 <__aeabi_dmul>
 810c6e4:	4602      	mov	r2, r0
 810c6e6:	460b      	mov	r3, r1
 810c6e8:	4650      	mov	r0, sl
 810c6ea:	4659      	mov	r1, fp
 810c6ec:	f7f3 fe54 	bl	8100398 <__aeabi_dsub>
 810c6f0:	4602      	mov	r2, r0
 810c6f2:	460b      	mov	r3, r1
 810c6f4:	4680      	mov	r8, r0
 810c6f6:	4689      	mov	r9, r1
 810c6f8:	4630      	mov	r0, r6
 810c6fa:	4639      	mov	r1, r7
 810c6fc:	f7f3 fe4e 	bl	810039c <__adddf3>
 810c700:	2400      	movs	r4, #0
 810c702:	4632      	mov	r2, r6
 810c704:	463b      	mov	r3, r7
 810c706:	4620      	mov	r0, r4
 810c708:	460d      	mov	r5, r1
 810c70a:	f7f3 fe45 	bl	8100398 <__aeabi_dsub>
 810c70e:	4602      	mov	r2, r0
 810c710:	460b      	mov	r3, r1
 810c712:	4640      	mov	r0, r8
 810c714:	4649      	mov	r1, r9
 810c716:	f7f3 fe3f 	bl	8100398 <__aeabi_dsub>
 810c71a:	9b00      	ldr	r3, [sp, #0]
 810c71c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c71e:	3b01      	subs	r3, #1
 810c720:	4313      	orrs	r3, r2
 810c722:	4682      	mov	sl, r0
 810c724:	468b      	mov	fp, r1
 810c726:	f040 81f1 	bne.w	810cb0c <__ieee754_pow+0x6e4>
 810c72a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810c7e8 <__ieee754_pow+0x3c0>
 810c72e:	eeb0 8a47 	vmov.f32	s16, s14
 810c732:	eef0 8a67 	vmov.f32	s17, s15
 810c736:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810c73a:	2600      	movs	r6, #0
 810c73c:	4632      	mov	r2, r6
 810c73e:	463b      	mov	r3, r7
 810c740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810c744:	f7f3 fe28 	bl	8100398 <__aeabi_dsub>
 810c748:	4622      	mov	r2, r4
 810c74a:	462b      	mov	r3, r5
 810c74c:	f7f3 ffdc 	bl	8100708 <__aeabi_dmul>
 810c750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810c754:	4680      	mov	r8, r0
 810c756:	4689      	mov	r9, r1
 810c758:	4650      	mov	r0, sl
 810c75a:	4659      	mov	r1, fp
 810c75c:	f7f3 ffd4 	bl	8100708 <__aeabi_dmul>
 810c760:	4602      	mov	r2, r0
 810c762:	460b      	mov	r3, r1
 810c764:	4640      	mov	r0, r8
 810c766:	4649      	mov	r1, r9
 810c768:	f7f3 fe18 	bl	810039c <__adddf3>
 810c76c:	4632      	mov	r2, r6
 810c76e:	463b      	mov	r3, r7
 810c770:	4680      	mov	r8, r0
 810c772:	4689      	mov	r9, r1
 810c774:	4620      	mov	r0, r4
 810c776:	4629      	mov	r1, r5
 810c778:	f7f3 ffc6 	bl	8100708 <__aeabi_dmul>
 810c77c:	460b      	mov	r3, r1
 810c77e:	4604      	mov	r4, r0
 810c780:	460d      	mov	r5, r1
 810c782:	4602      	mov	r2, r0
 810c784:	4649      	mov	r1, r9
 810c786:	4640      	mov	r0, r8
 810c788:	f7f3 fe08 	bl	810039c <__adddf3>
 810c78c:	4b1d      	ldr	r3, [pc, #116]	; (810c804 <__ieee754_pow+0x3dc>)
 810c78e:	4299      	cmp	r1, r3
 810c790:	ec45 4b19 	vmov	d9, r4, r5
 810c794:	4606      	mov	r6, r0
 810c796:	460f      	mov	r7, r1
 810c798:	468b      	mov	fp, r1
 810c79a:	f340 82fe 	ble.w	810cd9a <__ieee754_pow+0x972>
 810c79e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810c7a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810c7a6:	4303      	orrs	r3, r0
 810c7a8:	f000 81f0 	beq.w	810cb8c <__ieee754_pow+0x764>
 810c7ac:	a310      	add	r3, pc, #64	; (adr r3, 810c7f0 <__ieee754_pow+0x3c8>)
 810c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c7b2:	ec51 0b18 	vmov	r0, r1, d8
 810c7b6:	f7f3 ffa7 	bl	8100708 <__aeabi_dmul>
 810c7ba:	a30d      	add	r3, pc, #52	; (adr r3, 810c7f0 <__ieee754_pow+0x3c8>)
 810c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c7c0:	e6cb      	b.n	810c55a <__ieee754_pow+0x132>
 810c7c2:	bf00      	nop
 810c7c4:	f3af 8000 	nop.w
 810c7c8:	60000000 	.word	0x60000000
 810c7cc:	3ff71547 	.word	0x3ff71547
 810c7d0:	f85ddf44 	.word	0xf85ddf44
 810c7d4:	3e54ae0b 	.word	0x3e54ae0b
 810c7d8:	55555555 	.word	0x55555555
 810c7dc:	3fd55555 	.word	0x3fd55555
 810c7e0:	652b82fe 	.word	0x652b82fe
 810c7e4:	3ff71547 	.word	0x3ff71547
 810c7e8:	00000000 	.word	0x00000000
 810c7ec:	bff00000 	.word	0xbff00000
 810c7f0:	8800759c 	.word	0x8800759c
 810c7f4:	7e37e43c 	.word	0x7e37e43c
 810c7f8:	3ff00000 	.word	0x3ff00000
 810c7fc:	3fd00000 	.word	0x3fd00000
 810c800:	3fe00000 	.word	0x3fe00000
 810c804:	408fffff 	.word	0x408fffff
 810c808:	4bd7      	ldr	r3, [pc, #860]	; (810cb68 <__ieee754_pow+0x740>)
 810c80a:	ea03 0309 	and.w	r3, r3, r9
 810c80e:	2200      	movs	r2, #0
 810c810:	b92b      	cbnz	r3, 810c81e <__ieee754_pow+0x3f6>
 810c812:	4bd6      	ldr	r3, [pc, #856]	; (810cb6c <__ieee754_pow+0x744>)
 810c814:	f7f3 ff78 	bl	8100708 <__aeabi_dmul>
 810c818:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810c81c:	460c      	mov	r4, r1
 810c81e:	1523      	asrs	r3, r4, #20
 810c820:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810c824:	4413      	add	r3, r2
 810c826:	9309      	str	r3, [sp, #36]	; 0x24
 810c828:	4bd1      	ldr	r3, [pc, #836]	; (810cb70 <__ieee754_pow+0x748>)
 810c82a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810c82e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810c832:	429c      	cmp	r4, r3
 810c834:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810c838:	dd08      	ble.n	810c84c <__ieee754_pow+0x424>
 810c83a:	4bce      	ldr	r3, [pc, #824]	; (810cb74 <__ieee754_pow+0x74c>)
 810c83c:	429c      	cmp	r4, r3
 810c83e:	f340 8163 	ble.w	810cb08 <__ieee754_pow+0x6e0>
 810c842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c844:	3301      	adds	r3, #1
 810c846:	9309      	str	r3, [sp, #36]	; 0x24
 810c848:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810c84c:	2400      	movs	r4, #0
 810c84e:	00e3      	lsls	r3, r4, #3
 810c850:	930b      	str	r3, [sp, #44]	; 0x2c
 810c852:	4bc9      	ldr	r3, [pc, #804]	; (810cb78 <__ieee754_pow+0x750>)
 810c854:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810c858:	ed93 7b00 	vldr	d7, [r3]
 810c85c:	4629      	mov	r1, r5
 810c85e:	ec53 2b17 	vmov	r2, r3, d7
 810c862:	eeb0 8a47 	vmov.f32	s16, s14
 810c866:	eef0 8a67 	vmov.f32	s17, s15
 810c86a:	4682      	mov	sl, r0
 810c86c:	f7f3 fd94 	bl	8100398 <__aeabi_dsub>
 810c870:	4652      	mov	r2, sl
 810c872:	4606      	mov	r6, r0
 810c874:	460f      	mov	r7, r1
 810c876:	462b      	mov	r3, r5
 810c878:	ec51 0b18 	vmov	r0, r1, d8
 810c87c:	f7f3 fd8e 	bl	810039c <__adddf3>
 810c880:	4602      	mov	r2, r0
 810c882:	460b      	mov	r3, r1
 810c884:	2000      	movs	r0, #0
 810c886:	49bd      	ldr	r1, [pc, #756]	; (810cb7c <__ieee754_pow+0x754>)
 810c888:	f7f4 f868 	bl	810095c <__aeabi_ddiv>
 810c88c:	ec41 0b19 	vmov	d9, r0, r1
 810c890:	4602      	mov	r2, r0
 810c892:	460b      	mov	r3, r1
 810c894:	4630      	mov	r0, r6
 810c896:	4639      	mov	r1, r7
 810c898:	f7f3 ff36 	bl	8100708 <__aeabi_dmul>
 810c89c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810c8a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c8a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810c8a8:	2300      	movs	r3, #0
 810c8aa:	9304      	str	r3, [sp, #16]
 810c8ac:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810c8b0:	46ab      	mov	fp, r5
 810c8b2:	106d      	asrs	r5, r5, #1
 810c8b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810c8b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810c8bc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810c8c0:	2200      	movs	r2, #0
 810c8c2:	4640      	mov	r0, r8
 810c8c4:	4649      	mov	r1, r9
 810c8c6:	4614      	mov	r4, r2
 810c8c8:	461d      	mov	r5, r3
 810c8ca:	f7f3 ff1d 	bl	8100708 <__aeabi_dmul>
 810c8ce:	4602      	mov	r2, r0
 810c8d0:	460b      	mov	r3, r1
 810c8d2:	4630      	mov	r0, r6
 810c8d4:	4639      	mov	r1, r7
 810c8d6:	f7f3 fd5f 	bl	8100398 <__aeabi_dsub>
 810c8da:	ec53 2b18 	vmov	r2, r3, d8
 810c8de:	4606      	mov	r6, r0
 810c8e0:	460f      	mov	r7, r1
 810c8e2:	4620      	mov	r0, r4
 810c8e4:	4629      	mov	r1, r5
 810c8e6:	f7f3 fd57 	bl	8100398 <__aeabi_dsub>
 810c8ea:	4602      	mov	r2, r0
 810c8ec:	460b      	mov	r3, r1
 810c8ee:	4650      	mov	r0, sl
 810c8f0:	4659      	mov	r1, fp
 810c8f2:	f7f3 fd51 	bl	8100398 <__aeabi_dsub>
 810c8f6:	4642      	mov	r2, r8
 810c8f8:	464b      	mov	r3, r9
 810c8fa:	f7f3 ff05 	bl	8100708 <__aeabi_dmul>
 810c8fe:	4602      	mov	r2, r0
 810c900:	460b      	mov	r3, r1
 810c902:	4630      	mov	r0, r6
 810c904:	4639      	mov	r1, r7
 810c906:	f7f3 fd47 	bl	8100398 <__aeabi_dsub>
 810c90a:	ec53 2b19 	vmov	r2, r3, d9
 810c90e:	f7f3 fefb 	bl	8100708 <__aeabi_dmul>
 810c912:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c916:	ec41 0b18 	vmov	d8, r0, r1
 810c91a:	4610      	mov	r0, r2
 810c91c:	4619      	mov	r1, r3
 810c91e:	f7f3 fef3 	bl	8100708 <__aeabi_dmul>
 810c922:	a37d      	add	r3, pc, #500	; (adr r3, 810cb18 <__ieee754_pow+0x6f0>)
 810c924:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c928:	4604      	mov	r4, r0
 810c92a:	460d      	mov	r5, r1
 810c92c:	f7f3 feec 	bl	8100708 <__aeabi_dmul>
 810c930:	a37b      	add	r3, pc, #492	; (adr r3, 810cb20 <__ieee754_pow+0x6f8>)
 810c932:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c936:	f7f3 fd31 	bl	810039c <__adddf3>
 810c93a:	4622      	mov	r2, r4
 810c93c:	462b      	mov	r3, r5
 810c93e:	f7f3 fee3 	bl	8100708 <__aeabi_dmul>
 810c942:	a379      	add	r3, pc, #484	; (adr r3, 810cb28 <__ieee754_pow+0x700>)
 810c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c948:	f7f3 fd28 	bl	810039c <__adddf3>
 810c94c:	4622      	mov	r2, r4
 810c94e:	462b      	mov	r3, r5
 810c950:	f7f3 feda 	bl	8100708 <__aeabi_dmul>
 810c954:	a376      	add	r3, pc, #472	; (adr r3, 810cb30 <__ieee754_pow+0x708>)
 810c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c95a:	f7f3 fd1f 	bl	810039c <__adddf3>
 810c95e:	4622      	mov	r2, r4
 810c960:	462b      	mov	r3, r5
 810c962:	f7f3 fed1 	bl	8100708 <__aeabi_dmul>
 810c966:	a374      	add	r3, pc, #464	; (adr r3, 810cb38 <__ieee754_pow+0x710>)
 810c968:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c96c:	f7f3 fd16 	bl	810039c <__adddf3>
 810c970:	4622      	mov	r2, r4
 810c972:	462b      	mov	r3, r5
 810c974:	f7f3 fec8 	bl	8100708 <__aeabi_dmul>
 810c978:	a371      	add	r3, pc, #452	; (adr r3, 810cb40 <__ieee754_pow+0x718>)
 810c97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c97e:	f7f3 fd0d 	bl	810039c <__adddf3>
 810c982:	4622      	mov	r2, r4
 810c984:	4606      	mov	r6, r0
 810c986:	460f      	mov	r7, r1
 810c988:	462b      	mov	r3, r5
 810c98a:	4620      	mov	r0, r4
 810c98c:	4629      	mov	r1, r5
 810c98e:	f7f3 febb 	bl	8100708 <__aeabi_dmul>
 810c992:	4602      	mov	r2, r0
 810c994:	460b      	mov	r3, r1
 810c996:	4630      	mov	r0, r6
 810c998:	4639      	mov	r1, r7
 810c99a:	f7f3 feb5 	bl	8100708 <__aeabi_dmul>
 810c99e:	4642      	mov	r2, r8
 810c9a0:	4604      	mov	r4, r0
 810c9a2:	460d      	mov	r5, r1
 810c9a4:	464b      	mov	r3, r9
 810c9a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c9aa:	f7f3 fcf7 	bl	810039c <__adddf3>
 810c9ae:	ec53 2b18 	vmov	r2, r3, d8
 810c9b2:	f7f3 fea9 	bl	8100708 <__aeabi_dmul>
 810c9b6:	4622      	mov	r2, r4
 810c9b8:	462b      	mov	r3, r5
 810c9ba:	f7f3 fcef 	bl	810039c <__adddf3>
 810c9be:	4642      	mov	r2, r8
 810c9c0:	4682      	mov	sl, r0
 810c9c2:	468b      	mov	fp, r1
 810c9c4:	464b      	mov	r3, r9
 810c9c6:	4640      	mov	r0, r8
 810c9c8:	4649      	mov	r1, r9
 810c9ca:	f7f3 fe9d 	bl	8100708 <__aeabi_dmul>
 810c9ce:	4b6c      	ldr	r3, [pc, #432]	; (810cb80 <__ieee754_pow+0x758>)
 810c9d0:	2200      	movs	r2, #0
 810c9d2:	4606      	mov	r6, r0
 810c9d4:	460f      	mov	r7, r1
 810c9d6:	f7f3 fce1 	bl	810039c <__adddf3>
 810c9da:	4652      	mov	r2, sl
 810c9dc:	465b      	mov	r3, fp
 810c9de:	f7f3 fcdd 	bl	810039c <__adddf3>
 810c9e2:	9c04      	ldr	r4, [sp, #16]
 810c9e4:	460d      	mov	r5, r1
 810c9e6:	4622      	mov	r2, r4
 810c9e8:	460b      	mov	r3, r1
 810c9ea:	4640      	mov	r0, r8
 810c9ec:	4649      	mov	r1, r9
 810c9ee:	f7f3 fe8b 	bl	8100708 <__aeabi_dmul>
 810c9f2:	4b63      	ldr	r3, [pc, #396]	; (810cb80 <__ieee754_pow+0x758>)
 810c9f4:	4680      	mov	r8, r0
 810c9f6:	4689      	mov	r9, r1
 810c9f8:	2200      	movs	r2, #0
 810c9fa:	4620      	mov	r0, r4
 810c9fc:	4629      	mov	r1, r5
 810c9fe:	f7f3 fccb 	bl	8100398 <__aeabi_dsub>
 810ca02:	4632      	mov	r2, r6
 810ca04:	463b      	mov	r3, r7
 810ca06:	f7f3 fcc7 	bl	8100398 <__aeabi_dsub>
 810ca0a:	4602      	mov	r2, r0
 810ca0c:	460b      	mov	r3, r1
 810ca0e:	4650      	mov	r0, sl
 810ca10:	4659      	mov	r1, fp
 810ca12:	f7f3 fcc1 	bl	8100398 <__aeabi_dsub>
 810ca16:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810ca1a:	f7f3 fe75 	bl	8100708 <__aeabi_dmul>
 810ca1e:	4622      	mov	r2, r4
 810ca20:	4606      	mov	r6, r0
 810ca22:	460f      	mov	r7, r1
 810ca24:	462b      	mov	r3, r5
 810ca26:	ec51 0b18 	vmov	r0, r1, d8
 810ca2a:	f7f3 fe6d 	bl	8100708 <__aeabi_dmul>
 810ca2e:	4602      	mov	r2, r0
 810ca30:	460b      	mov	r3, r1
 810ca32:	4630      	mov	r0, r6
 810ca34:	4639      	mov	r1, r7
 810ca36:	f7f3 fcb1 	bl	810039c <__adddf3>
 810ca3a:	4606      	mov	r6, r0
 810ca3c:	460f      	mov	r7, r1
 810ca3e:	4602      	mov	r2, r0
 810ca40:	460b      	mov	r3, r1
 810ca42:	4640      	mov	r0, r8
 810ca44:	4649      	mov	r1, r9
 810ca46:	f7f3 fca9 	bl	810039c <__adddf3>
 810ca4a:	9c04      	ldr	r4, [sp, #16]
 810ca4c:	a33e      	add	r3, pc, #248	; (adr r3, 810cb48 <__ieee754_pow+0x720>)
 810ca4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca52:	4620      	mov	r0, r4
 810ca54:	460d      	mov	r5, r1
 810ca56:	f7f3 fe57 	bl	8100708 <__aeabi_dmul>
 810ca5a:	4642      	mov	r2, r8
 810ca5c:	ec41 0b18 	vmov	d8, r0, r1
 810ca60:	464b      	mov	r3, r9
 810ca62:	4620      	mov	r0, r4
 810ca64:	4629      	mov	r1, r5
 810ca66:	f7f3 fc97 	bl	8100398 <__aeabi_dsub>
 810ca6a:	4602      	mov	r2, r0
 810ca6c:	460b      	mov	r3, r1
 810ca6e:	4630      	mov	r0, r6
 810ca70:	4639      	mov	r1, r7
 810ca72:	f7f3 fc91 	bl	8100398 <__aeabi_dsub>
 810ca76:	a336      	add	r3, pc, #216	; (adr r3, 810cb50 <__ieee754_pow+0x728>)
 810ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca7c:	f7f3 fe44 	bl	8100708 <__aeabi_dmul>
 810ca80:	a335      	add	r3, pc, #212	; (adr r3, 810cb58 <__ieee754_pow+0x730>)
 810ca82:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ca86:	4606      	mov	r6, r0
 810ca88:	460f      	mov	r7, r1
 810ca8a:	4620      	mov	r0, r4
 810ca8c:	4629      	mov	r1, r5
 810ca8e:	f7f3 fe3b 	bl	8100708 <__aeabi_dmul>
 810ca92:	4602      	mov	r2, r0
 810ca94:	460b      	mov	r3, r1
 810ca96:	4630      	mov	r0, r6
 810ca98:	4639      	mov	r1, r7
 810ca9a:	f7f3 fc7f 	bl	810039c <__adddf3>
 810ca9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810caa0:	4b38      	ldr	r3, [pc, #224]	; (810cb84 <__ieee754_pow+0x75c>)
 810caa2:	4413      	add	r3, r2
 810caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810caa8:	f7f3 fc78 	bl	810039c <__adddf3>
 810caac:	4682      	mov	sl, r0
 810caae:	9809      	ldr	r0, [sp, #36]	; 0x24
 810cab0:	468b      	mov	fp, r1
 810cab2:	f7f3 fdbf 	bl	8100634 <__aeabi_i2d>
 810cab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810cab8:	4b33      	ldr	r3, [pc, #204]	; (810cb88 <__ieee754_pow+0x760>)
 810caba:	4413      	add	r3, r2
 810cabc:	e9d3 8900 	ldrd	r8, r9, [r3]
 810cac0:	4606      	mov	r6, r0
 810cac2:	460f      	mov	r7, r1
 810cac4:	4652      	mov	r2, sl
 810cac6:	465b      	mov	r3, fp
 810cac8:	ec51 0b18 	vmov	r0, r1, d8
 810cacc:	f7f3 fc66 	bl	810039c <__adddf3>
 810cad0:	4642      	mov	r2, r8
 810cad2:	464b      	mov	r3, r9
 810cad4:	f7f3 fc62 	bl	810039c <__adddf3>
 810cad8:	4632      	mov	r2, r6
 810cada:	463b      	mov	r3, r7
 810cadc:	f7f3 fc5e 	bl	810039c <__adddf3>
 810cae0:	9c04      	ldr	r4, [sp, #16]
 810cae2:	4632      	mov	r2, r6
 810cae4:	463b      	mov	r3, r7
 810cae6:	4620      	mov	r0, r4
 810cae8:	460d      	mov	r5, r1
 810caea:	f7f3 fc55 	bl	8100398 <__aeabi_dsub>
 810caee:	4642      	mov	r2, r8
 810caf0:	464b      	mov	r3, r9
 810caf2:	f7f3 fc51 	bl	8100398 <__aeabi_dsub>
 810caf6:	ec53 2b18 	vmov	r2, r3, d8
 810cafa:	f7f3 fc4d 	bl	8100398 <__aeabi_dsub>
 810cafe:	4602      	mov	r2, r0
 810cb00:	460b      	mov	r3, r1
 810cb02:	4650      	mov	r0, sl
 810cb04:	4659      	mov	r1, fp
 810cb06:	e606      	b.n	810c716 <__ieee754_pow+0x2ee>
 810cb08:	2401      	movs	r4, #1
 810cb0a:	e6a0      	b.n	810c84e <__ieee754_pow+0x426>
 810cb0c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810cb60 <__ieee754_pow+0x738>
 810cb10:	e60d      	b.n	810c72e <__ieee754_pow+0x306>
 810cb12:	bf00      	nop
 810cb14:	f3af 8000 	nop.w
 810cb18:	4a454eef 	.word	0x4a454eef
 810cb1c:	3fca7e28 	.word	0x3fca7e28
 810cb20:	93c9db65 	.word	0x93c9db65
 810cb24:	3fcd864a 	.word	0x3fcd864a
 810cb28:	a91d4101 	.word	0xa91d4101
 810cb2c:	3fd17460 	.word	0x3fd17460
 810cb30:	518f264d 	.word	0x518f264d
 810cb34:	3fd55555 	.word	0x3fd55555
 810cb38:	db6fabff 	.word	0xdb6fabff
 810cb3c:	3fdb6db6 	.word	0x3fdb6db6
 810cb40:	33333303 	.word	0x33333303
 810cb44:	3fe33333 	.word	0x3fe33333
 810cb48:	e0000000 	.word	0xe0000000
 810cb4c:	3feec709 	.word	0x3feec709
 810cb50:	dc3a03fd 	.word	0xdc3a03fd
 810cb54:	3feec709 	.word	0x3feec709
 810cb58:	145b01f5 	.word	0x145b01f5
 810cb5c:	be3e2fe0 	.word	0xbe3e2fe0
 810cb60:	00000000 	.word	0x00000000
 810cb64:	3ff00000 	.word	0x3ff00000
 810cb68:	7ff00000 	.word	0x7ff00000
 810cb6c:	43400000 	.word	0x43400000
 810cb70:	0003988e 	.word	0x0003988e
 810cb74:	000bb679 	.word	0x000bb679
 810cb78:	0810e5f8 	.word	0x0810e5f8
 810cb7c:	3ff00000 	.word	0x3ff00000
 810cb80:	40080000 	.word	0x40080000
 810cb84:	0810e618 	.word	0x0810e618
 810cb88:	0810e608 	.word	0x0810e608
 810cb8c:	a3b5      	add	r3, pc, #724	; (adr r3, 810ce64 <__ieee754_pow+0xa3c>)
 810cb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cb92:	4640      	mov	r0, r8
 810cb94:	4649      	mov	r1, r9
 810cb96:	f7f3 fc01 	bl	810039c <__adddf3>
 810cb9a:	4622      	mov	r2, r4
 810cb9c:	ec41 0b1a 	vmov	d10, r0, r1
 810cba0:	462b      	mov	r3, r5
 810cba2:	4630      	mov	r0, r6
 810cba4:	4639      	mov	r1, r7
 810cba6:	f7f3 fbf7 	bl	8100398 <__aeabi_dsub>
 810cbaa:	4602      	mov	r2, r0
 810cbac:	460b      	mov	r3, r1
 810cbae:	ec51 0b1a 	vmov	r0, r1, d10
 810cbb2:	f7f4 f839 	bl	8100c28 <__aeabi_dcmpgt>
 810cbb6:	2800      	cmp	r0, #0
 810cbb8:	f47f adf8 	bne.w	810c7ac <__ieee754_pow+0x384>
 810cbbc:	4aa4      	ldr	r2, [pc, #656]	; (810ce50 <__ieee754_pow+0xa28>)
 810cbbe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810cbc2:	4293      	cmp	r3, r2
 810cbc4:	f340 810b 	ble.w	810cdde <__ieee754_pow+0x9b6>
 810cbc8:	151b      	asrs	r3, r3, #20
 810cbca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810cbce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810cbd2:	fa4a f303 	asr.w	r3, sl, r3
 810cbd6:	445b      	add	r3, fp
 810cbd8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810cbdc:	4e9d      	ldr	r6, [pc, #628]	; (810ce54 <__ieee754_pow+0xa2c>)
 810cbde:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810cbe2:	4116      	asrs	r6, r2
 810cbe4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810cbe8:	2000      	movs	r0, #0
 810cbea:	ea23 0106 	bic.w	r1, r3, r6
 810cbee:	f1c2 0214 	rsb	r2, r2, #20
 810cbf2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810cbf6:	fa4a fa02 	asr.w	sl, sl, r2
 810cbfa:	f1bb 0f00 	cmp.w	fp, #0
 810cbfe:	4602      	mov	r2, r0
 810cc00:	460b      	mov	r3, r1
 810cc02:	4620      	mov	r0, r4
 810cc04:	4629      	mov	r1, r5
 810cc06:	bfb8      	it	lt
 810cc08:	f1ca 0a00 	rsblt	sl, sl, #0
 810cc0c:	f7f3 fbc4 	bl	8100398 <__aeabi_dsub>
 810cc10:	ec41 0b19 	vmov	d9, r0, r1
 810cc14:	4642      	mov	r2, r8
 810cc16:	464b      	mov	r3, r9
 810cc18:	ec51 0b19 	vmov	r0, r1, d9
 810cc1c:	f7f3 fbbe 	bl	810039c <__adddf3>
 810cc20:	2400      	movs	r4, #0
 810cc22:	a379      	add	r3, pc, #484	; (adr r3, 810ce08 <__ieee754_pow+0x9e0>)
 810cc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc28:	4620      	mov	r0, r4
 810cc2a:	460d      	mov	r5, r1
 810cc2c:	f7f3 fd6c 	bl	8100708 <__aeabi_dmul>
 810cc30:	ec53 2b19 	vmov	r2, r3, d9
 810cc34:	4606      	mov	r6, r0
 810cc36:	460f      	mov	r7, r1
 810cc38:	4620      	mov	r0, r4
 810cc3a:	4629      	mov	r1, r5
 810cc3c:	f7f3 fbac 	bl	8100398 <__aeabi_dsub>
 810cc40:	4602      	mov	r2, r0
 810cc42:	460b      	mov	r3, r1
 810cc44:	4640      	mov	r0, r8
 810cc46:	4649      	mov	r1, r9
 810cc48:	f7f3 fba6 	bl	8100398 <__aeabi_dsub>
 810cc4c:	a370      	add	r3, pc, #448	; (adr r3, 810ce10 <__ieee754_pow+0x9e8>)
 810cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc52:	f7f3 fd59 	bl	8100708 <__aeabi_dmul>
 810cc56:	a370      	add	r3, pc, #448	; (adr r3, 810ce18 <__ieee754_pow+0x9f0>)
 810cc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cc5c:	4680      	mov	r8, r0
 810cc5e:	4689      	mov	r9, r1
 810cc60:	4620      	mov	r0, r4
 810cc62:	4629      	mov	r1, r5
 810cc64:	f7f3 fd50 	bl	8100708 <__aeabi_dmul>
 810cc68:	4602      	mov	r2, r0
 810cc6a:	460b      	mov	r3, r1
 810cc6c:	4640      	mov	r0, r8
 810cc6e:	4649      	mov	r1, r9
 810cc70:	f7f3 fb94 	bl	810039c <__adddf3>
 810cc74:	4604      	mov	r4, r0
 810cc76:	460d      	mov	r5, r1
 810cc78:	4602      	mov	r2, r0
 810cc7a:	460b      	mov	r3, r1
 810cc7c:	4630      	mov	r0, r6
 810cc7e:	4639      	mov	r1, r7
 810cc80:	f7f3 fb8c 	bl	810039c <__adddf3>
 810cc84:	4632      	mov	r2, r6
 810cc86:	463b      	mov	r3, r7
 810cc88:	4680      	mov	r8, r0
 810cc8a:	4689      	mov	r9, r1
 810cc8c:	f7f3 fb84 	bl	8100398 <__aeabi_dsub>
 810cc90:	4602      	mov	r2, r0
 810cc92:	460b      	mov	r3, r1
 810cc94:	4620      	mov	r0, r4
 810cc96:	4629      	mov	r1, r5
 810cc98:	f7f3 fb7e 	bl	8100398 <__aeabi_dsub>
 810cc9c:	4642      	mov	r2, r8
 810cc9e:	4606      	mov	r6, r0
 810cca0:	460f      	mov	r7, r1
 810cca2:	464b      	mov	r3, r9
 810cca4:	4640      	mov	r0, r8
 810cca6:	4649      	mov	r1, r9
 810cca8:	f7f3 fd2e 	bl	8100708 <__aeabi_dmul>
 810ccac:	a35c      	add	r3, pc, #368	; (adr r3, 810ce20 <__ieee754_pow+0x9f8>)
 810ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccb2:	4604      	mov	r4, r0
 810ccb4:	460d      	mov	r5, r1
 810ccb6:	f7f3 fd27 	bl	8100708 <__aeabi_dmul>
 810ccba:	a35b      	add	r3, pc, #364	; (adr r3, 810ce28 <__ieee754_pow+0xa00>)
 810ccbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccc0:	f7f3 fb6a 	bl	8100398 <__aeabi_dsub>
 810ccc4:	4622      	mov	r2, r4
 810ccc6:	462b      	mov	r3, r5
 810ccc8:	f7f3 fd1e 	bl	8100708 <__aeabi_dmul>
 810cccc:	a358      	add	r3, pc, #352	; (adr r3, 810ce30 <__ieee754_pow+0xa08>)
 810ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccd2:	f7f3 fb63 	bl	810039c <__adddf3>
 810ccd6:	4622      	mov	r2, r4
 810ccd8:	462b      	mov	r3, r5
 810ccda:	f7f3 fd15 	bl	8100708 <__aeabi_dmul>
 810ccde:	a356      	add	r3, pc, #344	; (adr r3, 810ce38 <__ieee754_pow+0xa10>)
 810cce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cce4:	f7f3 fb58 	bl	8100398 <__aeabi_dsub>
 810cce8:	4622      	mov	r2, r4
 810ccea:	462b      	mov	r3, r5
 810ccec:	f7f3 fd0c 	bl	8100708 <__aeabi_dmul>
 810ccf0:	a353      	add	r3, pc, #332	; (adr r3, 810ce40 <__ieee754_pow+0xa18>)
 810ccf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ccf6:	f7f3 fb51 	bl	810039c <__adddf3>
 810ccfa:	4622      	mov	r2, r4
 810ccfc:	462b      	mov	r3, r5
 810ccfe:	f7f3 fd03 	bl	8100708 <__aeabi_dmul>
 810cd02:	4602      	mov	r2, r0
 810cd04:	460b      	mov	r3, r1
 810cd06:	4640      	mov	r0, r8
 810cd08:	4649      	mov	r1, r9
 810cd0a:	f7f3 fb45 	bl	8100398 <__aeabi_dsub>
 810cd0e:	4604      	mov	r4, r0
 810cd10:	460d      	mov	r5, r1
 810cd12:	4602      	mov	r2, r0
 810cd14:	460b      	mov	r3, r1
 810cd16:	4640      	mov	r0, r8
 810cd18:	4649      	mov	r1, r9
 810cd1a:	f7f3 fcf5 	bl	8100708 <__aeabi_dmul>
 810cd1e:	2200      	movs	r2, #0
 810cd20:	ec41 0b19 	vmov	d9, r0, r1
 810cd24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810cd28:	4620      	mov	r0, r4
 810cd2a:	4629      	mov	r1, r5
 810cd2c:	f7f3 fb34 	bl	8100398 <__aeabi_dsub>
 810cd30:	4602      	mov	r2, r0
 810cd32:	460b      	mov	r3, r1
 810cd34:	ec51 0b19 	vmov	r0, r1, d9
 810cd38:	f7f3 fe10 	bl	810095c <__aeabi_ddiv>
 810cd3c:	4632      	mov	r2, r6
 810cd3e:	4604      	mov	r4, r0
 810cd40:	460d      	mov	r5, r1
 810cd42:	463b      	mov	r3, r7
 810cd44:	4640      	mov	r0, r8
 810cd46:	4649      	mov	r1, r9
 810cd48:	f7f3 fcde 	bl	8100708 <__aeabi_dmul>
 810cd4c:	4632      	mov	r2, r6
 810cd4e:	463b      	mov	r3, r7
 810cd50:	f7f3 fb24 	bl	810039c <__adddf3>
 810cd54:	4602      	mov	r2, r0
 810cd56:	460b      	mov	r3, r1
 810cd58:	4620      	mov	r0, r4
 810cd5a:	4629      	mov	r1, r5
 810cd5c:	f7f3 fb1c 	bl	8100398 <__aeabi_dsub>
 810cd60:	4642      	mov	r2, r8
 810cd62:	464b      	mov	r3, r9
 810cd64:	f7f3 fb18 	bl	8100398 <__aeabi_dsub>
 810cd68:	460b      	mov	r3, r1
 810cd6a:	4602      	mov	r2, r0
 810cd6c:	493a      	ldr	r1, [pc, #232]	; (810ce58 <__ieee754_pow+0xa30>)
 810cd6e:	2000      	movs	r0, #0
 810cd70:	f7f3 fb12 	bl	8100398 <__aeabi_dsub>
 810cd74:	e9cd 0100 	strd	r0, r1, [sp]
 810cd78:	9b01      	ldr	r3, [sp, #4]
 810cd7a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810cd7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810cd82:	da2f      	bge.n	810cde4 <__ieee754_pow+0x9bc>
 810cd84:	4650      	mov	r0, sl
 810cd86:	ed9d 0b00 	vldr	d0, [sp]
 810cd8a:	f001 f911 	bl	810dfb0 <scalbn>
 810cd8e:	ec51 0b10 	vmov	r0, r1, d0
 810cd92:	ec53 2b18 	vmov	r2, r3, d8
 810cd96:	f7ff bbe0 	b.w	810c55a <__ieee754_pow+0x132>
 810cd9a:	4b30      	ldr	r3, [pc, #192]	; (810ce5c <__ieee754_pow+0xa34>)
 810cd9c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810cda0:	429e      	cmp	r6, r3
 810cda2:	f77f af0b 	ble.w	810cbbc <__ieee754_pow+0x794>
 810cda6:	4b2e      	ldr	r3, [pc, #184]	; (810ce60 <__ieee754_pow+0xa38>)
 810cda8:	440b      	add	r3, r1
 810cdaa:	4303      	orrs	r3, r0
 810cdac:	d00b      	beq.n	810cdc6 <__ieee754_pow+0x99e>
 810cdae:	a326      	add	r3, pc, #152	; (adr r3, 810ce48 <__ieee754_pow+0xa20>)
 810cdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cdb4:	ec51 0b18 	vmov	r0, r1, d8
 810cdb8:	f7f3 fca6 	bl	8100708 <__aeabi_dmul>
 810cdbc:	a322      	add	r3, pc, #136	; (adr r3, 810ce48 <__ieee754_pow+0xa20>)
 810cdbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cdc2:	f7ff bbca 	b.w	810c55a <__ieee754_pow+0x132>
 810cdc6:	4622      	mov	r2, r4
 810cdc8:	462b      	mov	r3, r5
 810cdca:	f7f3 fae5 	bl	8100398 <__aeabi_dsub>
 810cdce:	4642      	mov	r2, r8
 810cdd0:	464b      	mov	r3, r9
 810cdd2:	f7f3 ff1f 	bl	8100c14 <__aeabi_dcmpge>
 810cdd6:	2800      	cmp	r0, #0
 810cdd8:	f43f aef0 	beq.w	810cbbc <__ieee754_pow+0x794>
 810cddc:	e7e7      	b.n	810cdae <__ieee754_pow+0x986>
 810cdde:	f04f 0a00 	mov.w	sl, #0
 810cde2:	e717      	b.n	810cc14 <__ieee754_pow+0x7ec>
 810cde4:	e9dd 0100 	ldrd	r0, r1, [sp]
 810cde8:	4619      	mov	r1, r3
 810cdea:	e7d2      	b.n	810cd92 <__ieee754_pow+0x96a>
 810cdec:	491a      	ldr	r1, [pc, #104]	; (810ce58 <__ieee754_pow+0xa30>)
 810cdee:	2000      	movs	r0, #0
 810cdf0:	f7ff bb9e 	b.w	810c530 <__ieee754_pow+0x108>
 810cdf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810cdf8:	f7ff bb9a 	b.w	810c530 <__ieee754_pow+0x108>
 810cdfc:	9000      	str	r0, [sp, #0]
 810cdfe:	f7ff bb76 	b.w	810c4ee <__ieee754_pow+0xc6>
 810ce02:	2100      	movs	r1, #0
 810ce04:	f7ff bb60 	b.w	810c4c8 <__ieee754_pow+0xa0>
 810ce08:	00000000 	.word	0x00000000
 810ce0c:	3fe62e43 	.word	0x3fe62e43
 810ce10:	fefa39ef 	.word	0xfefa39ef
 810ce14:	3fe62e42 	.word	0x3fe62e42
 810ce18:	0ca86c39 	.word	0x0ca86c39
 810ce1c:	be205c61 	.word	0xbe205c61
 810ce20:	72bea4d0 	.word	0x72bea4d0
 810ce24:	3e663769 	.word	0x3e663769
 810ce28:	c5d26bf1 	.word	0xc5d26bf1
 810ce2c:	3ebbbd41 	.word	0x3ebbbd41
 810ce30:	af25de2c 	.word	0xaf25de2c
 810ce34:	3f11566a 	.word	0x3f11566a
 810ce38:	16bebd93 	.word	0x16bebd93
 810ce3c:	3f66c16c 	.word	0x3f66c16c
 810ce40:	5555553e 	.word	0x5555553e
 810ce44:	3fc55555 	.word	0x3fc55555
 810ce48:	c2f8f359 	.word	0xc2f8f359
 810ce4c:	01a56e1f 	.word	0x01a56e1f
 810ce50:	3fe00000 	.word	0x3fe00000
 810ce54:	000fffff 	.word	0x000fffff
 810ce58:	3ff00000 	.word	0x3ff00000
 810ce5c:	4090cbff 	.word	0x4090cbff
 810ce60:	3f6f3400 	.word	0x3f6f3400
 810ce64:	652b82fe 	.word	0x652b82fe
 810ce68:	3c971547 	.word	0x3c971547
 810ce6c:	00000000 	.word	0x00000000

0810ce70 <__ieee754_rem_pio2>:
 810ce70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ce74:	ed2d 8b02 	vpush	{d8}
 810ce78:	ec55 4b10 	vmov	r4, r5, d0
 810ce7c:	4bca      	ldr	r3, [pc, #808]	; (810d1a8 <__ieee754_rem_pio2+0x338>)
 810ce7e:	b08b      	sub	sp, #44	; 0x2c
 810ce80:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 810ce84:	4598      	cmp	r8, r3
 810ce86:	4682      	mov	sl, r0
 810ce88:	9502      	str	r5, [sp, #8]
 810ce8a:	dc08      	bgt.n	810ce9e <__ieee754_rem_pio2+0x2e>
 810ce8c:	2200      	movs	r2, #0
 810ce8e:	2300      	movs	r3, #0
 810ce90:	ed80 0b00 	vstr	d0, [r0]
 810ce94:	e9c0 2302 	strd	r2, r3, [r0, #8]
 810ce98:	f04f 0b00 	mov.w	fp, #0
 810ce9c:	e028      	b.n	810cef0 <__ieee754_rem_pio2+0x80>
 810ce9e:	4bc3      	ldr	r3, [pc, #780]	; (810d1ac <__ieee754_rem_pio2+0x33c>)
 810cea0:	4598      	cmp	r8, r3
 810cea2:	dc78      	bgt.n	810cf96 <__ieee754_rem_pio2+0x126>
 810cea4:	9b02      	ldr	r3, [sp, #8]
 810cea6:	4ec2      	ldr	r6, [pc, #776]	; (810d1b0 <__ieee754_rem_pio2+0x340>)
 810cea8:	2b00      	cmp	r3, #0
 810ceaa:	ee10 0a10 	vmov	r0, s0
 810ceae:	a3b0      	add	r3, pc, #704	; (adr r3, 810d170 <__ieee754_rem_pio2+0x300>)
 810ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ceb4:	4629      	mov	r1, r5
 810ceb6:	dd39      	ble.n	810cf2c <__ieee754_rem_pio2+0xbc>
 810ceb8:	f7f3 fa6e 	bl	8100398 <__aeabi_dsub>
 810cebc:	45b0      	cmp	r8, r6
 810cebe:	4604      	mov	r4, r0
 810cec0:	460d      	mov	r5, r1
 810cec2:	d01b      	beq.n	810cefc <__ieee754_rem_pio2+0x8c>
 810cec4:	a3ac      	add	r3, pc, #688	; (adr r3, 810d178 <__ieee754_rem_pio2+0x308>)
 810cec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ceca:	f7f3 fa65 	bl	8100398 <__aeabi_dsub>
 810cece:	4602      	mov	r2, r0
 810ced0:	460b      	mov	r3, r1
 810ced2:	e9ca 2300 	strd	r2, r3, [sl]
 810ced6:	4620      	mov	r0, r4
 810ced8:	4629      	mov	r1, r5
 810ceda:	f7f3 fa5d 	bl	8100398 <__aeabi_dsub>
 810cede:	a3a6      	add	r3, pc, #664	; (adr r3, 810d178 <__ieee754_rem_pio2+0x308>)
 810cee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cee4:	f7f3 fa58 	bl	8100398 <__aeabi_dsub>
 810cee8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810ceec:	f04f 0b01 	mov.w	fp, #1
 810cef0:	4658      	mov	r0, fp
 810cef2:	b00b      	add	sp, #44	; 0x2c
 810cef4:	ecbd 8b02 	vpop	{d8}
 810cef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810cefc:	a3a0      	add	r3, pc, #640	; (adr r3, 810d180 <__ieee754_rem_pio2+0x310>)
 810cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf02:	f7f3 fa49 	bl	8100398 <__aeabi_dsub>
 810cf06:	a3a0      	add	r3, pc, #640	; (adr r3, 810d188 <__ieee754_rem_pio2+0x318>)
 810cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf0c:	4604      	mov	r4, r0
 810cf0e:	460d      	mov	r5, r1
 810cf10:	f7f3 fa42 	bl	8100398 <__aeabi_dsub>
 810cf14:	4602      	mov	r2, r0
 810cf16:	460b      	mov	r3, r1
 810cf18:	e9ca 2300 	strd	r2, r3, [sl]
 810cf1c:	4620      	mov	r0, r4
 810cf1e:	4629      	mov	r1, r5
 810cf20:	f7f3 fa3a 	bl	8100398 <__aeabi_dsub>
 810cf24:	a398      	add	r3, pc, #608	; (adr r3, 810d188 <__ieee754_rem_pio2+0x318>)
 810cf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf2a:	e7db      	b.n	810cee4 <__ieee754_rem_pio2+0x74>
 810cf2c:	f7f3 fa36 	bl	810039c <__adddf3>
 810cf30:	45b0      	cmp	r8, r6
 810cf32:	4604      	mov	r4, r0
 810cf34:	460d      	mov	r5, r1
 810cf36:	d016      	beq.n	810cf66 <__ieee754_rem_pio2+0xf6>
 810cf38:	a38f      	add	r3, pc, #572	; (adr r3, 810d178 <__ieee754_rem_pio2+0x308>)
 810cf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf3e:	f7f3 fa2d 	bl	810039c <__adddf3>
 810cf42:	4602      	mov	r2, r0
 810cf44:	460b      	mov	r3, r1
 810cf46:	e9ca 2300 	strd	r2, r3, [sl]
 810cf4a:	4620      	mov	r0, r4
 810cf4c:	4629      	mov	r1, r5
 810cf4e:	f7f3 fa23 	bl	8100398 <__aeabi_dsub>
 810cf52:	a389      	add	r3, pc, #548	; (adr r3, 810d178 <__ieee754_rem_pio2+0x308>)
 810cf54:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf58:	f7f3 fa20 	bl	810039c <__adddf3>
 810cf5c:	f04f 3bff 	mov.w	fp, #4294967295
 810cf60:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810cf64:	e7c4      	b.n	810cef0 <__ieee754_rem_pio2+0x80>
 810cf66:	a386      	add	r3, pc, #536	; (adr r3, 810d180 <__ieee754_rem_pio2+0x310>)
 810cf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf6c:	f7f3 fa16 	bl	810039c <__adddf3>
 810cf70:	a385      	add	r3, pc, #532	; (adr r3, 810d188 <__ieee754_rem_pio2+0x318>)
 810cf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf76:	4604      	mov	r4, r0
 810cf78:	460d      	mov	r5, r1
 810cf7a:	f7f3 fa0f 	bl	810039c <__adddf3>
 810cf7e:	4602      	mov	r2, r0
 810cf80:	460b      	mov	r3, r1
 810cf82:	e9ca 2300 	strd	r2, r3, [sl]
 810cf86:	4620      	mov	r0, r4
 810cf88:	4629      	mov	r1, r5
 810cf8a:	f7f3 fa05 	bl	8100398 <__aeabi_dsub>
 810cf8e:	a37e      	add	r3, pc, #504	; (adr r3, 810d188 <__ieee754_rem_pio2+0x318>)
 810cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cf94:	e7e0      	b.n	810cf58 <__ieee754_rem_pio2+0xe8>
 810cf96:	4b87      	ldr	r3, [pc, #540]	; (810d1b4 <__ieee754_rem_pio2+0x344>)
 810cf98:	4598      	cmp	r8, r3
 810cf9a:	f300 80d9 	bgt.w	810d150 <__ieee754_rem_pio2+0x2e0>
 810cf9e:	f7ff f8ff 	bl	810c1a0 <fabs>
 810cfa2:	ec55 4b10 	vmov	r4, r5, d0
 810cfa6:	ee10 0a10 	vmov	r0, s0
 810cfaa:	a379      	add	r3, pc, #484	; (adr r3, 810d190 <__ieee754_rem_pio2+0x320>)
 810cfac:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfb0:	4629      	mov	r1, r5
 810cfb2:	f7f3 fba9 	bl	8100708 <__aeabi_dmul>
 810cfb6:	4b80      	ldr	r3, [pc, #512]	; (810d1b8 <__ieee754_rem_pio2+0x348>)
 810cfb8:	2200      	movs	r2, #0
 810cfba:	f7f3 f9ef 	bl	810039c <__adddf3>
 810cfbe:	f7f3 fe53 	bl	8100c68 <__aeabi_d2iz>
 810cfc2:	4683      	mov	fp, r0
 810cfc4:	f7f3 fb36 	bl	8100634 <__aeabi_i2d>
 810cfc8:	4602      	mov	r2, r0
 810cfca:	460b      	mov	r3, r1
 810cfcc:	ec43 2b18 	vmov	d8, r2, r3
 810cfd0:	a367      	add	r3, pc, #412	; (adr r3, 810d170 <__ieee754_rem_pio2+0x300>)
 810cfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfd6:	f7f3 fb97 	bl	8100708 <__aeabi_dmul>
 810cfda:	4602      	mov	r2, r0
 810cfdc:	460b      	mov	r3, r1
 810cfde:	4620      	mov	r0, r4
 810cfe0:	4629      	mov	r1, r5
 810cfe2:	f7f3 f9d9 	bl	8100398 <__aeabi_dsub>
 810cfe6:	a364      	add	r3, pc, #400	; (adr r3, 810d178 <__ieee754_rem_pio2+0x308>)
 810cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cfec:	4606      	mov	r6, r0
 810cfee:	460f      	mov	r7, r1
 810cff0:	ec51 0b18 	vmov	r0, r1, d8
 810cff4:	f7f3 fb88 	bl	8100708 <__aeabi_dmul>
 810cff8:	f1bb 0f1f 	cmp.w	fp, #31
 810cffc:	4604      	mov	r4, r0
 810cffe:	460d      	mov	r5, r1
 810d000:	dc0d      	bgt.n	810d01e <__ieee754_rem_pio2+0x1ae>
 810d002:	4b6e      	ldr	r3, [pc, #440]	; (810d1bc <__ieee754_rem_pio2+0x34c>)
 810d004:	f10b 32ff 	add.w	r2, fp, #4294967295
 810d008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d00c:	4543      	cmp	r3, r8
 810d00e:	d006      	beq.n	810d01e <__ieee754_rem_pio2+0x1ae>
 810d010:	4622      	mov	r2, r4
 810d012:	462b      	mov	r3, r5
 810d014:	4630      	mov	r0, r6
 810d016:	4639      	mov	r1, r7
 810d018:	f7f3 f9be 	bl	8100398 <__aeabi_dsub>
 810d01c:	e00f      	b.n	810d03e <__ieee754_rem_pio2+0x1ce>
 810d01e:	462b      	mov	r3, r5
 810d020:	4622      	mov	r2, r4
 810d022:	4630      	mov	r0, r6
 810d024:	4639      	mov	r1, r7
 810d026:	f7f3 f9b7 	bl	8100398 <__aeabi_dsub>
 810d02a:	ea4f 5328 	mov.w	r3, r8, asr #20
 810d02e:	9303      	str	r3, [sp, #12]
 810d030:	f3c1 530a 	ubfx	r3, r1, #20, #11
 810d034:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 810d038:	f1b8 0f10 	cmp.w	r8, #16
 810d03c:	dc02      	bgt.n	810d044 <__ieee754_rem_pio2+0x1d4>
 810d03e:	e9ca 0100 	strd	r0, r1, [sl]
 810d042:	e039      	b.n	810d0b8 <__ieee754_rem_pio2+0x248>
 810d044:	a34e      	add	r3, pc, #312	; (adr r3, 810d180 <__ieee754_rem_pio2+0x310>)
 810d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d04a:	ec51 0b18 	vmov	r0, r1, d8
 810d04e:	f7f3 fb5b 	bl	8100708 <__aeabi_dmul>
 810d052:	4604      	mov	r4, r0
 810d054:	460d      	mov	r5, r1
 810d056:	4602      	mov	r2, r0
 810d058:	460b      	mov	r3, r1
 810d05a:	4630      	mov	r0, r6
 810d05c:	4639      	mov	r1, r7
 810d05e:	f7f3 f99b 	bl	8100398 <__aeabi_dsub>
 810d062:	4602      	mov	r2, r0
 810d064:	460b      	mov	r3, r1
 810d066:	4680      	mov	r8, r0
 810d068:	4689      	mov	r9, r1
 810d06a:	4630      	mov	r0, r6
 810d06c:	4639      	mov	r1, r7
 810d06e:	f7f3 f993 	bl	8100398 <__aeabi_dsub>
 810d072:	4622      	mov	r2, r4
 810d074:	462b      	mov	r3, r5
 810d076:	f7f3 f98f 	bl	8100398 <__aeabi_dsub>
 810d07a:	a343      	add	r3, pc, #268	; (adr r3, 810d188 <__ieee754_rem_pio2+0x318>)
 810d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d080:	4604      	mov	r4, r0
 810d082:	460d      	mov	r5, r1
 810d084:	ec51 0b18 	vmov	r0, r1, d8
 810d088:	f7f3 fb3e 	bl	8100708 <__aeabi_dmul>
 810d08c:	4622      	mov	r2, r4
 810d08e:	462b      	mov	r3, r5
 810d090:	f7f3 f982 	bl	8100398 <__aeabi_dsub>
 810d094:	4602      	mov	r2, r0
 810d096:	460b      	mov	r3, r1
 810d098:	4604      	mov	r4, r0
 810d09a:	460d      	mov	r5, r1
 810d09c:	4640      	mov	r0, r8
 810d09e:	4649      	mov	r1, r9
 810d0a0:	f7f3 f97a 	bl	8100398 <__aeabi_dsub>
 810d0a4:	9a03      	ldr	r2, [sp, #12]
 810d0a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 810d0aa:	1ad3      	subs	r3, r2, r3
 810d0ac:	2b31      	cmp	r3, #49	; 0x31
 810d0ae:	dc24      	bgt.n	810d0fa <__ieee754_rem_pio2+0x28a>
 810d0b0:	e9ca 0100 	strd	r0, r1, [sl]
 810d0b4:	4646      	mov	r6, r8
 810d0b6:	464f      	mov	r7, r9
 810d0b8:	e9da 8900 	ldrd	r8, r9, [sl]
 810d0bc:	4630      	mov	r0, r6
 810d0be:	4642      	mov	r2, r8
 810d0c0:	464b      	mov	r3, r9
 810d0c2:	4639      	mov	r1, r7
 810d0c4:	f7f3 f968 	bl	8100398 <__aeabi_dsub>
 810d0c8:	462b      	mov	r3, r5
 810d0ca:	4622      	mov	r2, r4
 810d0cc:	f7f3 f964 	bl	8100398 <__aeabi_dsub>
 810d0d0:	9b02      	ldr	r3, [sp, #8]
 810d0d2:	2b00      	cmp	r3, #0
 810d0d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810d0d8:	f6bf af0a 	bge.w	810cef0 <__ieee754_rem_pio2+0x80>
 810d0dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810d0e0:	f8ca 3004 	str.w	r3, [sl, #4]
 810d0e4:	f8ca 8000 	str.w	r8, [sl]
 810d0e8:	f8ca 0008 	str.w	r0, [sl, #8]
 810d0ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d0f0:	f8ca 300c 	str.w	r3, [sl, #12]
 810d0f4:	f1cb 0b00 	rsb	fp, fp, #0
 810d0f8:	e6fa      	b.n	810cef0 <__ieee754_rem_pio2+0x80>
 810d0fa:	a327      	add	r3, pc, #156	; (adr r3, 810d198 <__ieee754_rem_pio2+0x328>)
 810d0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d100:	ec51 0b18 	vmov	r0, r1, d8
 810d104:	f7f3 fb00 	bl	8100708 <__aeabi_dmul>
 810d108:	4604      	mov	r4, r0
 810d10a:	460d      	mov	r5, r1
 810d10c:	4602      	mov	r2, r0
 810d10e:	460b      	mov	r3, r1
 810d110:	4640      	mov	r0, r8
 810d112:	4649      	mov	r1, r9
 810d114:	f7f3 f940 	bl	8100398 <__aeabi_dsub>
 810d118:	4602      	mov	r2, r0
 810d11a:	460b      	mov	r3, r1
 810d11c:	4606      	mov	r6, r0
 810d11e:	460f      	mov	r7, r1
 810d120:	4640      	mov	r0, r8
 810d122:	4649      	mov	r1, r9
 810d124:	f7f3 f938 	bl	8100398 <__aeabi_dsub>
 810d128:	4622      	mov	r2, r4
 810d12a:	462b      	mov	r3, r5
 810d12c:	f7f3 f934 	bl	8100398 <__aeabi_dsub>
 810d130:	a31b      	add	r3, pc, #108	; (adr r3, 810d1a0 <__ieee754_rem_pio2+0x330>)
 810d132:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d136:	4604      	mov	r4, r0
 810d138:	460d      	mov	r5, r1
 810d13a:	ec51 0b18 	vmov	r0, r1, d8
 810d13e:	f7f3 fae3 	bl	8100708 <__aeabi_dmul>
 810d142:	4622      	mov	r2, r4
 810d144:	462b      	mov	r3, r5
 810d146:	f7f3 f927 	bl	8100398 <__aeabi_dsub>
 810d14a:	4604      	mov	r4, r0
 810d14c:	460d      	mov	r5, r1
 810d14e:	e75f      	b.n	810d010 <__ieee754_rem_pio2+0x1a0>
 810d150:	4b1b      	ldr	r3, [pc, #108]	; (810d1c0 <__ieee754_rem_pio2+0x350>)
 810d152:	4598      	cmp	r8, r3
 810d154:	dd36      	ble.n	810d1c4 <__ieee754_rem_pio2+0x354>
 810d156:	ee10 2a10 	vmov	r2, s0
 810d15a:	462b      	mov	r3, r5
 810d15c:	4620      	mov	r0, r4
 810d15e:	4629      	mov	r1, r5
 810d160:	f7f3 f91a 	bl	8100398 <__aeabi_dsub>
 810d164:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810d168:	e9ca 0100 	strd	r0, r1, [sl]
 810d16c:	e694      	b.n	810ce98 <__ieee754_rem_pio2+0x28>
 810d16e:	bf00      	nop
 810d170:	54400000 	.word	0x54400000
 810d174:	3ff921fb 	.word	0x3ff921fb
 810d178:	1a626331 	.word	0x1a626331
 810d17c:	3dd0b461 	.word	0x3dd0b461
 810d180:	1a600000 	.word	0x1a600000
 810d184:	3dd0b461 	.word	0x3dd0b461
 810d188:	2e037073 	.word	0x2e037073
 810d18c:	3ba3198a 	.word	0x3ba3198a
 810d190:	6dc9c883 	.word	0x6dc9c883
 810d194:	3fe45f30 	.word	0x3fe45f30
 810d198:	2e000000 	.word	0x2e000000
 810d19c:	3ba3198a 	.word	0x3ba3198a
 810d1a0:	252049c1 	.word	0x252049c1
 810d1a4:	397b839a 	.word	0x397b839a
 810d1a8:	3fe921fb 	.word	0x3fe921fb
 810d1ac:	4002d97b 	.word	0x4002d97b
 810d1b0:	3ff921fb 	.word	0x3ff921fb
 810d1b4:	413921fb 	.word	0x413921fb
 810d1b8:	3fe00000 	.word	0x3fe00000
 810d1bc:	0810e628 	.word	0x0810e628
 810d1c0:	7fefffff 	.word	0x7fefffff
 810d1c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 810d1c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 810d1cc:	ee10 0a10 	vmov	r0, s0
 810d1d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 810d1d4:	ee10 6a10 	vmov	r6, s0
 810d1d8:	460f      	mov	r7, r1
 810d1da:	f7f3 fd45 	bl	8100c68 <__aeabi_d2iz>
 810d1de:	f7f3 fa29 	bl	8100634 <__aeabi_i2d>
 810d1e2:	4602      	mov	r2, r0
 810d1e4:	460b      	mov	r3, r1
 810d1e6:	4630      	mov	r0, r6
 810d1e8:	4639      	mov	r1, r7
 810d1ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810d1ee:	f7f3 f8d3 	bl	8100398 <__aeabi_dsub>
 810d1f2:	4b22      	ldr	r3, [pc, #136]	; (810d27c <__ieee754_rem_pio2+0x40c>)
 810d1f4:	2200      	movs	r2, #0
 810d1f6:	f7f3 fa87 	bl	8100708 <__aeabi_dmul>
 810d1fa:	460f      	mov	r7, r1
 810d1fc:	4606      	mov	r6, r0
 810d1fe:	f7f3 fd33 	bl	8100c68 <__aeabi_d2iz>
 810d202:	f7f3 fa17 	bl	8100634 <__aeabi_i2d>
 810d206:	4602      	mov	r2, r0
 810d208:	460b      	mov	r3, r1
 810d20a:	4630      	mov	r0, r6
 810d20c:	4639      	mov	r1, r7
 810d20e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 810d212:	f7f3 f8c1 	bl	8100398 <__aeabi_dsub>
 810d216:	4b19      	ldr	r3, [pc, #100]	; (810d27c <__ieee754_rem_pio2+0x40c>)
 810d218:	2200      	movs	r2, #0
 810d21a:	f7f3 fa75 	bl	8100708 <__aeabi_dmul>
 810d21e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 810d222:	ad04      	add	r5, sp, #16
 810d224:	f04f 0803 	mov.w	r8, #3
 810d228:	46a9      	mov	r9, r5
 810d22a:	2600      	movs	r6, #0
 810d22c:	2700      	movs	r7, #0
 810d22e:	4632      	mov	r2, r6
 810d230:	463b      	mov	r3, r7
 810d232:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 810d236:	46c3      	mov	fp, r8
 810d238:	3d08      	subs	r5, #8
 810d23a:	f108 38ff 	add.w	r8, r8, #4294967295
 810d23e:	f7f3 fccb 	bl	8100bd8 <__aeabi_dcmpeq>
 810d242:	2800      	cmp	r0, #0
 810d244:	d1f3      	bne.n	810d22e <__ieee754_rem_pio2+0x3be>
 810d246:	4b0e      	ldr	r3, [pc, #56]	; (810d280 <__ieee754_rem_pio2+0x410>)
 810d248:	9301      	str	r3, [sp, #4]
 810d24a:	2302      	movs	r3, #2
 810d24c:	9300      	str	r3, [sp, #0]
 810d24e:	4622      	mov	r2, r4
 810d250:	465b      	mov	r3, fp
 810d252:	4651      	mov	r1, sl
 810d254:	4648      	mov	r0, r9
 810d256:	f000 f993 	bl	810d580 <__kernel_rem_pio2>
 810d25a:	9b02      	ldr	r3, [sp, #8]
 810d25c:	2b00      	cmp	r3, #0
 810d25e:	4683      	mov	fp, r0
 810d260:	f6bf ae46 	bge.w	810cef0 <__ieee754_rem_pio2+0x80>
 810d264:	f8da 3004 	ldr.w	r3, [sl, #4]
 810d268:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810d26c:	f8ca 3004 	str.w	r3, [sl, #4]
 810d270:	f8da 300c 	ldr.w	r3, [sl, #12]
 810d274:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 810d278:	e73a      	b.n	810d0f0 <__ieee754_rem_pio2+0x280>
 810d27a:	bf00      	nop
 810d27c:	41700000 	.word	0x41700000
 810d280:	0810e6a8 	.word	0x0810e6a8

0810d284 <__ieee754_sqrt>:
 810d284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d288:	ec55 4b10 	vmov	r4, r5, d0
 810d28c:	4e56      	ldr	r6, [pc, #344]	; (810d3e8 <__ieee754_sqrt+0x164>)
 810d28e:	43ae      	bics	r6, r5
 810d290:	ee10 0a10 	vmov	r0, s0
 810d294:	ee10 3a10 	vmov	r3, s0
 810d298:	4629      	mov	r1, r5
 810d29a:	462a      	mov	r2, r5
 810d29c:	d110      	bne.n	810d2c0 <__ieee754_sqrt+0x3c>
 810d29e:	ee10 2a10 	vmov	r2, s0
 810d2a2:	462b      	mov	r3, r5
 810d2a4:	f7f3 fa30 	bl	8100708 <__aeabi_dmul>
 810d2a8:	4602      	mov	r2, r0
 810d2aa:	460b      	mov	r3, r1
 810d2ac:	4620      	mov	r0, r4
 810d2ae:	4629      	mov	r1, r5
 810d2b0:	f7f3 f874 	bl	810039c <__adddf3>
 810d2b4:	4604      	mov	r4, r0
 810d2b6:	460d      	mov	r5, r1
 810d2b8:	ec45 4b10 	vmov	d0, r4, r5
 810d2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d2c0:	2d00      	cmp	r5, #0
 810d2c2:	dc10      	bgt.n	810d2e6 <__ieee754_sqrt+0x62>
 810d2c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810d2c8:	4330      	orrs	r0, r6
 810d2ca:	d0f5      	beq.n	810d2b8 <__ieee754_sqrt+0x34>
 810d2cc:	b15d      	cbz	r5, 810d2e6 <__ieee754_sqrt+0x62>
 810d2ce:	ee10 2a10 	vmov	r2, s0
 810d2d2:	462b      	mov	r3, r5
 810d2d4:	ee10 0a10 	vmov	r0, s0
 810d2d8:	f7f3 f85e 	bl	8100398 <__aeabi_dsub>
 810d2dc:	4602      	mov	r2, r0
 810d2de:	460b      	mov	r3, r1
 810d2e0:	f7f3 fb3c 	bl	810095c <__aeabi_ddiv>
 810d2e4:	e7e6      	b.n	810d2b4 <__ieee754_sqrt+0x30>
 810d2e6:	1509      	asrs	r1, r1, #20
 810d2e8:	d076      	beq.n	810d3d8 <__ieee754_sqrt+0x154>
 810d2ea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810d2ee:	07ce      	lsls	r6, r1, #31
 810d2f0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810d2f4:	bf5e      	ittt	pl
 810d2f6:	0fda      	lsrpl	r2, r3, #31
 810d2f8:	005b      	lslpl	r3, r3, #1
 810d2fa:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810d2fe:	0fda      	lsrs	r2, r3, #31
 810d300:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810d304:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810d308:	2000      	movs	r0, #0
 810d30a:	106d      	asrs	r5, r5, #1
 810d30c:	005b      	lsls	r3, r3, #1
 810d30e:	f04f 0e16 	mov.w	lr, #22
 810d312:	4684      	mov	ip, r0
 810d314:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810d318:	eb0c 0401 	add.w	r4, ip, r1
 810d31c:	4294      	cmp	r4, r2
 810d31e:	bfde      	ittt	le
 810d320:	1b12      	suble	r2, r2, r4
 810d322:	eb04 0c01 	addle.w	ip, r4, r1
 810d326:	1840      	addle	r0, r0, r1
 810d328:	0052      	lsls	r2, r2, #1
 810d32a:	f1be 0e01 	subs.w	lr, lr, #1
 810d32e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d332:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810d336:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d33a:	d1ed      	bne.n	810d318 <__ieee754_sqrt+0x94>
 810d33c:	4671      	mov	r1, lr
 810d33e:	2720      	movs	r7, #32
 810d340:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810d344:	4562      	cmp	r2, ip
 810d346:	eb04 060e 	add.w	r6, r4, lr
 810d34a:	dc02      	bgt.n	810d352 <__ieee754_sqrt+0xce>
 810d34c:	d113      	bne.n	810d376 <__ieee754_sqrt+0xf2>
 810d34e:	429e      	cmp	r6, r3
 810d350:	d811      	bhi.n	810d376 <__ieee754_sqrt+0xf2>
 810d352:	2e00      	cmp	r6, #0
 810d354:	eb06 0e04 	add.w	lr, r6, r4
 810d358:	da43      	bge.n	810d3e2 <__ieee754_sqrt+0x15e>
 810d35a:	f1be 0f00 	cmp.w	lr, #0
 810d35e:	db40      	blt.n	810d3e2 <__ieee754_sqrt+0x15e>
 810d360:	f10c 0801 	add.w	r8, ip, #1
 810d364:	eba2 020c 	sub.w	r2, r2, ip
 810d368:	429e      	cmp	r6, r3
 810d36a:	bf88      	it	hi
 810d36c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810d370:	1b9b      	subs	r3, r3, r6
 810d372:	4421      	add	r1, r4
 810d374:	46c4      	mov	ip, r8
 810d376:	0052      	lsls	r2, r2, #1
 810d378:	3f01      	subs	r7, #1
 810d37a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810d37e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810d382:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810d386:	d1dd      	bne.n	810d344 <__ieee754_sqrt+0xc0>
 810d388:	4313      	orrs	r3, r2
 810d38a:	d006      	beq.n	810d39a <__ieee754_sqrt+0x116>
 810d38c:	1c4c      	adds	r4, r1, #1
 810d38e:	bf13      	iteet	ne
 810d390:	3101      	addne	r1, #1
 810d392:	3001      	addeq	r0, #1
 810d394:	4639      	moveq	r1, r7
 810d396:	f021 0101 	bicne.w	r1, r1, #1
 810d39a:	1043      	asrs	r3, r0, #1
 810d39c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810d3a0:	0849      	lsrs	r1, r1, #1
 810d3a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810d3a6:	07c2      	lsls	r2, r0, #31
 810d3a8:	bf48      	it	mi
 810d3aa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810d3ae:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810d3b2:	460c      	mov	r4, r1
 810d3b4:	463d      	mov	r5, r7
 810d3b6:	e77f      	b.n	810d2b8 <__ieee754_sqrt+0x34>
 810d3b8:	0ada      	lsrs	r2, r3, #11
 810d3ba:	3815      	subs	r0, #21
 810d3bc:	055b      	lsls	r3, r3, #21
 810d3be:	2a00      	cmp	r2, #0
 810d3c0:	d0fa      	beq.n	810d3b8 <__ieee754_sqrt+0x134>
 810d3c2:	02d7      	lsls	r7, r2, #11
 810d3c4:	d50a      	bpl.n	810d3dc <__ieee754_sqrt+0x158>
 810d3c6:	f1c1 0420 	rsb	r4, r1, #32
 810d3ca:	fa23 f404 	lsr.w	r4, r3, r4
 810d3ce:	1e4d      	subs	r5, r1, #1
 810d3d0:	408b      	lsls	r3, r1
 810d3d2:	4322      	orrs	r2, r4
 810d3d4:	1b41      	subs	r1, r0, r5
 810d3d6:	e788      	b.n	810d2ea <__ieee754_sqrt+0x66>
 810d3d8:	4608      	mov	r0, r1
 810d3da:	e7f0      	b.n	810d3be <__ieee754_sqrt+0x13a>
 810d3dc:	0052      	lsls	r2, r2, #1
 810d3de:	3101      	adds	r1, #1
 810d3e0:	e7ef      	b.n	810d3c2 <__ieee754_sqrt+0x13e>
 810d3e2:	46e0      	mov	r8, ip
 810d3e4:	e7be      	b.n	810d364 <__ieee754_sqrt+0xe0>
 810d3e6:	bf00      	nop
 810d3e8:	7ff00000 	.word	0x7ff00000
 810d3ec:	00000000 	.word	0x00000000

0810d3f0 <__kernel_cos>:
 810d3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d3f4:	ec57 6b10 	vmov	r6, r7, d0
 810d3f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 810d3fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 810d400:	ed8d 1b00 	vstr	d1, [sp]
 810d404:	da07      	bge.n	810d416 <__kernel_cos+0x26>
 810d406:	ee10 0a10 	vmov	r0, s0
 810d40a:	4639      	mov	r1, r7
 810d40c:	f7f3 fc2c 	bl	8100c68 <__aeabi_d2iz>
 810d410:	2800      	cmp	r0, #0
 810d412:	f000 8088 	beq.w	810d526 <__kernel_cos+0x136>
 810d416:	4632      	mov	r2, r6
 810d418:	463b      	mov	r3, r7
 810d41a:	4630      	mov	r0, r6
 810d41c:	4639      	mov	r1, r7
 810d41e:	f7f3 f973 	bl	8100708 <__aeabi_dmul>
 810d422:	4b51      	ldr	r3, [pc, #324]	; (810d568 <__kernel_cos+0x178>)
 810d424:	2200      	movs	r2, #0
 810d426:	4604      	mov	r4, r0
 810d428:	460d      	mov	r5, r1
 810d42a:	f7f3 f96d 	bl	8100708 <__aeabi_dmul>
 810d42e:	a340      	add	r3, pc, #256	; (adr r3, 810d530 <__kernel_cos+0x140>)
 810d430:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d434:	4682      	mov	sl, r0
 810d436:	468b      	mov	fp, r1
 810d438:	4620      	mov	r0, r4
 810d43a:	4629      	mov	r1, r5
 810d43c:	f7f3 f964 	bl	8100708 <__aeabi_dmul>
 810d440:	a33d      	add	r3, pc, #244	; (adr r3, 810d538 <__kernel_cos+0x148>)
 810d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d446:	f7f2 ffa9 	bl	810039c <__adddf3>
 810d44a:	4622      	mov	r2, r4
 810d44c:	462b      	mov	r3, r5
 810d44e:	f7f3 f95b 	bl	8100708 <__aeabi_dmul>
 810d452:	a33b      	add	r3, pc, #236	; (adr r3, 810d540 <__kernel_cos+0x150>)
 810d454:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d458:	f7f2 ff9e 	bl	8100398 <__aeabi_dsub>
 810d45c:	4622      	mov	r2, r4
 810d45e:	462b      	mov	r3, r5
 810d460:	f7f3 f952 	bl	8100708 <__aeabi_dmul>
 810d464:	a338      	add	r3, pc, #224	; (adr r3, 810d548 <__kernel_cos+0x158>)
 810d466:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d46a:	f7f2 ff97 	bl	810039c <__adddf3>
 810d46e:	4622      	mov	r2, r4
 810d470:	462b      	mov	r3, r5
 810d472:	f7f3 f949 	bl	8100708 <__aeabi_dmul>
 810d476:	a336      	add	r3, pc, #216	; (adr r3, 810d550 <__kernel_cos+0x160>)
 810d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d47c:	f7f2 ff8c 	bl	8100398 <__aeabi_dsub>
 810d480:	4622      	mov	r2, r4
 810d482:	462b      	mov	r3, r5
 810d484:	f7f3 f940 	bl	8100708 <__aeabi_dmul>
 810d488:	a333      	add	r3, pc, #204	; (adr r3, 810d558 <__kernel_cos+0x168>)
 810d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d48e:	f7f2 ff85 	bl	810039c <__adddf3>
 810d492:	4622      	mov	r2, r4
 810d494:	462b      	mov	r3, r5
 810d496:	f7f3 f937 	bl	8100708 <__aeabi_dmul>
 810d49a:	4622      	mov	r2, r4
 810d49c:	462b      	mov	r3, r5
 810d49e:	f7f3 f933 	bl	8100708 <__aeabi_dmul>
 810d4a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 810d4a6:	4604      	mov	r4, r0
 810d4a8:	460d      	mov	r5, r1
 810d4aa:	4630      	mov	r0, r6
 810d4ac:	4639      	mov	r1, r7
 810d4ae:	f7f3 f92b 	bl	8100708 <__aeabi_dmul>
 810d4b2:	460b      	mov	r3, r1
 810d4b4:	4602      	mov	r2, r0
 810d4b6:	4629      	mov	r1, r5
 810d4b8:	4620      	mov	r0, r4
 810d4ba:	f7f2 ff6d 	bl	8100398 <__aeabi_dsub>
 810d4be:	4b2b      	ldr	r3, [pc, #172]	; (810d56c <__kernel_cos+0x17c>)
 810d4c0:	4598      	cmp	r8, r3
 810d4c2:	4606      	mov	r6, r0
 810d4c4:	460f      	mov	r7, r1
 810d4c6:	dc10      	bgt.n	810d4ea <__kernel_cos+0xfa>
 810d4c8:	4602      	mov	r2, r0
 810d4ca:	460b      	mov	r3, r1
 810d4cc:	4650      	mov	r0, sl
 810d4ce:	4659      	mov	r1, fp
 810d4d0:	f7f2 ff62 	bl	8100398 <__aeabi_dsub>
 810d4d4:	460b      	mov	r3, r1
 810d4d6:	4926      	ldr	r1, [pc, #152]	; (810d570 <__kernel_cos+0x180>)
 810d4d8:	4602      	mov	r2, r0
 810d4da:	2000      	movs	r0, #0
 810d4dc:	f7f2 ff5c 	bl	8100398 <__aeabi_dsub>
 810d4e0:	ec41 0b10 	vmov	d0, r0, r1
 810d4e4:	b003      	add	sp, #12
 810d4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d4ea:	4b22      	ldr	r3, [pc, #136]	; (810d574 <__kernel_cos+0x184>)
 810d4ec:	4920      	ldr	r1, [pc, #128]	; (810d570 <__kernel_cos+0x180>)
 810d4ee:	4598      	cmp	r8, r3
 810d4f0:	bfcc      	ite	gt
 810d4f2:	4d21      	ldrgt	r5, [pc, #132]	; (810d578 <__kernel_cos+0x188>)
 810d4f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 810d4f8:	2400      	movs	r4, #0
 810d4fa:	4622      	mov	r2, r4
 810d4fc:	462b      	mov	r3, r5
 810d4fe:	2000      	movs	r0, #0
 810d500:	f7f2 ff4a 	bl	8100398 <__aeabi_dsub>
 810d504:	4622      	mov	r2, r4
 810d506:	4680      	mov	r8, r0
 810d508:	4689      	mov	r9, r1
 810d50a:	462b      	mov	r3, r5
 810d50c:	4650      	mov	r0, sl
 810d50e:	4659      	mov	r1, fp
 810d510:	f7f2 ff42 	bl	8100398 <__aeabi_dsub>
 810d514:	4632      	mov	r2, r6
 810d516:	463b      	mov	r3, r7
 810d518:	f7f2 ff3e 	bl	8100398 <__aeabi_dsub>
 810d51c:	4602      	mov	r2, r0
 810d51e:	460b      	mov	r3, r1
 810d520:	4640      	mov	r0, r8
 810d522:	4649      	mov	r1, r9
 810d524:	e7da      	b.n	810d4dc <__kernel_cos+0xec>
 810d526:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 810d560 <__kernel_cos+0x170>
 810d52a:	e7db      	b.n	810d4e4 <__kernel_cos+0xf4>
 810d52c:	f3af 8000 	nop.w
 810d530:	be8838d4 	.word	0xbe8838d4
 810d534:	bda8fae9 	.word	0xbda8fae9
 810d538:	bdb4b1c4 	.word	0xbdb4b1c4
 810d53c:	3e21ee9e 	.word	0x3e21ee9e
 810d540:	809c52ad 	.word	0x809c52ad
 810d544:	3e927e4f 	.word	0x3e927e4f
 810d548:	19cb1590 	.word	0x19cb1590
 810d54c:	3efa01a0 	.word	0x3efa01a0
 810d550:	16c15177 	.word	0x16c15177
 810d554:	3f56c16c 	.word	0x3f56c16c
 810d558:	5555554c 	.word	0x5555554c
 810d55c:	3fa55555 	.word	0x3fa55555
 810d560:	00000000 	.word	0x00000000
 810d564:	3ff00000 	.word	0x3ff00000
 810d568:	3fe00000 	.word	0x3fe00000
 810d56c:	3fd33332 	.word	0x3fd33332
 810d570:	3ff00000 	.word	0x3ff00000
 810d574:	3fe90000 	.word	0x3fe90000
 810d578:	3fd20000 	.word	0x3fd20000
 810d57c:	00000000 	.word	0x00000000

0810d580 <__kernel_rem_pio2>:
 810d580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d584:	ed2d 8b02 	vpush	{d8}
 810d588:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 810d58c:	f112 0f14 	cmn.w	r2, #20
 810d590:	9308      	str	r3, [sp, #32]
 810d592:	9101      	str	r1, [sp, #4]
 810d594:	4bc6      	ldr	r3, [pc, #792]	; (810d8b0 <__kernel_rem_pio2+0x330>)
 810d596:	99a4      	ldr	r1, [sp, #656]	; 0x290
 810d598:	9009      	str	r0, [sp, #36]	; 0x24
 810d59a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810d59e:	9304      	str	r3, [sp, #16]
 810d5a0:	9b08      	ldr	r3, [sp, #32]
 810d5a2:	f103 33ff 	add.w	r3, r3, #4294967295
 810d5a6:	bfa8      	it	ge
 810d5a8:	1ed4      	subge	r4, r2, #3
 810d5aa:	9306      	str	r3, [sp, #24]
 810d5ac:	bfb2      	itee	lt
 810d5ae:	2400      	movlt	r4, #0
 810d5b0:	2318      	movge	r3, #24
 810d5b2:	fb94 f4f3 	sdivge	r4, r4, r3
 810d5b6:	f06f 0317 	mvn.w	r3, #23
 810d5ba:	fb04 3303 	mla	r3, r4, r3, r3
 810d5be:	eb03 0a02 	add.w	sl, r3, r2
 810d5c2:	9b04      	ldr	r3, [sp, #16]
 810d5c4:	9a06      	ldr	r2, [sp, #24]
 810d5c6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 810d8a0 <__kernel_rem_pio2+0x320>
 810d5ca:	eb03 0802 	add.w	r8, r3, r2
 810d5ce:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 810d5d0:	1aa7      	subs	r7, r4, r2
 810d5d2:	ae20      	add	r6, sp, #128	; 0x80
 810d5d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 810d5d8:	2500      	movs	r5, #0
 810d5da:	4545      	cmp	r5, r8
 810d5dc:	dd18      	ble.n	810d610 <__kernel_rem_pio2+0x90>
 810d5de:	9b08      	ldr	r3, [sp, #32]
 810d5e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 810d5e4:	aa20      	add	r2, sp, #128	; 0x80
 810d5e6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 810d8a0 <__kernel_rem_pio2+0x320>
 810d5ea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 810d5ee:	f1c3 0301 	rsb	r3, r3, #1
 810d5f2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 810d5f6:	9307      	str	r3, [sp, #28]
 810d5f8:	9b07      	ldr	r3, [sp, #28]
 810d5fa:	9a04      	ldr	r2, [sp, #16]
 810d5fc:	4443      	add	r3, r8
 810d5fe:	429a      	cmp	r2, r3
 810d600:	db2f      	blt.n	810d662 <__kernel_rem_pio2+0xe2>
 810d602:	ed8d 8b02 	vstr	d8, [sp, #8]
 810d606:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 810d60a:	462f      	mov	r7, r5
 810d60c:	2600      	movs	r6, #0
 810d60e:	e01b      	b.n	810d648 <__kernel_rem_pio2+0xc8>
 810d610:	42ef      	cmn	r7, r5
 810d612:	d407      	bmi.n	810d624 <__kernel_rem_pio2+0xa4>
 810d614:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 810d618:	f7f3 f80c 	bl	8100634 <__aeabi_i2d>
 810d61c:	e8e6 0102 	strd	r0, r1, [r6], #8
 810d620:	3501      	adds	r5, #1
 810d622:	e7da      	b.n	810d5da <__kernel_rem_pio2+0x5a>
 810d624:	ec51 0b18 	vmov	r0, r1, d8
 810d628:	e7f8      	b.n	810d61c <__kernel_rem_pio2+0x9c>
 810d62a:	e9d7 2300 	ldrd	r2, r3, [r7]
 810d62e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 810d632:	f7f3 f869 	bl	8100708 <__aeabi_dmul>
 810d636:	4602      	mov	r2, r0
 810d638:	460b      	mov	r3, r1
 810d63a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810d63e:	f7f2 fead 	bl	810039c <__adddf3>
 810d642:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810d646:	3601      	adds	r6, #1
 810d648:	9b06      	ldr	r3, [sp, #24]
 810d64a:	429e      	cmp	r6, r3
 810d64c:	f1a7 0708 	sub.w	r7, r7, #8
 810d650:	ddeb      	ble.n	810d62a <__kernel_rem_pio2+0xaa>
 810d652:	ed9d 7b02 	vldr	d7, [sp, #8]
 810d656:	3508      	adds	r5, #8
 810d658:	ecab 7b02 	vstmia	fp!, {d7}
 810d65c:	f108 0801 	add.w	r8, r8, #1
 810d660:	e7ca      	b.n	810d5f8 <__kernel_rem_pio2+0x78>
 810d662:	9b04      	ldr	r3, [sp, #16]
 810d664:	aa0c      	add	r2, sp, #48	; 0x30
 810d666:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810d66a:	930b      	str	r3, [sp, #44]	; 0x2c
 810d66c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 810d66e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 810d672:	9c04      	ldr	r4, [sp, #16]
 810d674:	930a      	str	r3, [sp, #40]	; 0x28
 810d676:	ab98      	add	r3, sp, #608	; 0x260
 810d678:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810d67c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 810d680:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 810d684:	f8cd b008 	str.w	fp, [sp, #8]
 810d688:	4625      	mov	r5, r4
 810d68a:	2d00      	cmp	r5, #0
 810d68c:	dc78      	bgt.n	810d780 <__kernel_rem_pio2+0x200>
 810d68e:	ec47 6b10 	vmov	d0, r6, r7
 810d692:	4650      	mov	r0, sl
 810d694:	f000 fc8c 	bl	810dfb0 <scalbn>
 810d698:	ec57 6b10 	vmov	r6, r7, d0
 810d69c:	2200      	movs	r2, #0
 810d69e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 810d6a2:	ee10 0a10 	vmov	r0, s0
 810d6a6:	4639      	mov	r1, r7
 810d6a8:	f7f3 f82e 	bl	8100708 <__aeabi_dmul>
 810d6ac:	ec41 0b10 	vmov	d0, r0, r1
 810d6b0:	f000 fb72 	bl	810dd98 <floor>
 810d6b4:	4b7f      	ldr	r3, [pc, #508]	; (810d8b4 <__kernel_rem_pio2+0x334>)
 810d6b6:	ec51 0b10 	vmov	r0, r1, d0
 810d6ba:	2200      	movs	r2, #0
 810d6bc:	f7f3 f824 	bl	8100708 <__aeabi_dmul>
 810d6c0:	4602      	mov	r2, r0
 810d6c2:	460b      	mov	r3, r1
 810d6c4:	4630      	mov	r0, r6
 810d6c6:	4639      	mov	r1, r7
 810d6c8:	f7f2 fe66 	bl	8100398 <__aeabi_dsub>
 810d6cc:	460f      	mov	r7, r1
 810d6ce:	4606      	mov	r6, r0
 810d6d0:	f7f3 faca 	bl	8100c68 <__aeabi_d2iz>
 810d6d4:	9007      	str	r0, [sp, #28]
 810d6d6:	f7f2 ffad 	bl	8100634 <__aeabi_i2d>
 810d6da:	4602      	mov	r2, r0
 810d6dc:	460b      	mov	r3, r1
 810d6de:	4630      	mov	r0, r6
 810d6e0:	4639      	mov	r1, r7
 810d6e2:	f7f2 fe59 	bl	8100398 <__aeabi_dsub>
 810d6e6:	f1ba 0f00 	cmp.w	sl, #0
 810d6ea:	4606      	mov	r6, r0
 810d6ec:	460f      	mov	r7, r1
 810d6ee:	dd70      	ble.n	810d7d2 <__kernel_rem_pio2+0x252>
 810d6f0:	1e62      	subs	r2, r4, #1
 810d6f2:	ab0c      	add	r3, sp, #48	; 0x30
 810d6f4:	9d07      	ldr	r5, [sp, #28]
 810d6f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 810d6fa:	f1ca 0118 	rsb	r1, sl, #24
 810d6fe:	fa40 f301 	asr.w	r3, r0, r1
 810d702:	441d      	add	r5, r3
 810d704:	408b      	lsls	r3, r1
 810d706:	1ac0      	subs	r0, r0, r3
 810d708:	ab0c      	add	r3, sp, #48	; 0x30
 810d70a:	9507      	str	r5, [sp, #28]
 810d70c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 810d710:	f1ca 0317 	rsb	r3, sl, #23
 810d714:	fa40 f303 	asr.w	r3, r0, r3
 810d718:	9302      	str	r3, [sp, #8]
 810d71a:	9b02      	ldr	r3, [sp, #8]
 810d71c:	2b00      	cmp	r3, #0
 810d71e:	dd66      	ble.n	810d7ee <__kernel_rem_pio2+0x26e>
 810d720:	9b07      	ldr	r3, [sp, #28]
 810d722:	2200      	movs	r2, #0
 810d724:	3301      	adds	r3, #1
 810d726:	9307      	str	r3, [sp, #28]
 810d728:	4615      	mov	r5, r2
 810d72a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 810d72e:	4294      	cmp	r4, r2
 810d730:	f300 8099 	bgt.w	810d866 <__kernel_rem_pio2+0x2e6>
 810d734:	f1ba 0f00 	cmp.w	sl, #0
 810d738:	dd07      	ble.n	810d74a <__kernel_rem_pio2+0x1ca>
 810d73a:	f1ba 0f01 	cmp.w	sl, #1
 810d73e:	f000 80a5 	beq.w	810d88c <__kernel_rem_pio2+0x30c>
 810d742:	f1ba 0f02 	cmp.w	sl, #2
 810d746:	f000 80c1 	beq.w	810d8cc <__kernel_rem_pio2+0x34c>
 810d74a:	9b02      	ldr	r3, [sp, #8]
 810d74c:	2b02      	cmp	r3, #2
 810d74e:	d14e      	bne.n	810d7ee <__kernel_rem_pio2+0x26e>
 810d750:	4632      	mov	r2, r6
 810d752:	463b      	mov	r3, r7
 810d754:	4958      	ldr	r1, [pc, #352]	; (810d8b8 <__kernel_rem_pio2+0x338>)
 810d756:	2000      	movs	r0, #0
 810d758:	f7f2 fe1e 	bl	8100398 <__aeabi_dsub>
 810d75c:	4606      	mov	r6, r0
 810d75e:	460f      	mov	r7, r1
 810d760:	2d00      	cmp	r5, #0
 810d762:	d044      	beq.n	810d7ee <__kernel_rem_pio2+0x26e>
 810d764:	4650      	mov	r0, sl
 810d766:	ed9f 0b50 	vldr	d0, [pc, #320]	; 810d8a8 <__kernel_rem_pio2+0x328>
 810d76a:	f000 fc21 	bl	810dfb0 <scalbn>
 810d76e:	4630      	mov	r0, r6
 810d770:	4639      	mov	r1, r7
 810d772:	ec53 2b10 	vmov	r2, r3, d0
 810d776:	f7f2 fe0f 	bl	8100398 <__aeabi_dsub>
 810d77a:	4606      	mov	r6, r0
 810d77c:	460f      	mov	r7, r1
 810d77e:	e036      	b.n	810d7ee <__kernel_rem_pio2+0x26e>
 810d780:	4b4e      	ldr	r3, [pc, #312]	; (810d8bc <__kernel_rem_pio2+0x33c>)
 810d782:	2200      	movs	r2, #0
 810d784:	4630      	mov	r0, r6
 810d786:	4639      	mov	r1, r7
 810d788:	f7f2 ffbe 	bl	8100708 <__aeabi_dmul>
 810d78c:	f7f3 fa6c 	bl	8100c68 <__aeabi_d2iz>
 810d790:	f7f2 ff50 	bl	8100634 <__aeabi_i2d>
 810d794:	4b4a      	ldr	r3, [pc, #296]	; (810d8c0 <__kernel_rem_pio2+0x340>)
 810d796:	2200      	movs	r2, #0
 810d798:	4680      	mov	r8, r0
 810d79a:	4689      	mov	r9, r1
 810d79c:	f7f2 ffb4 	bl	8100708 <__aeabi_dmul>
 810d7a0:	4602      	mov	r2, r0
 810d7a2:	460b      	mov	r3, r1
 810d7a4:	4630      	mov	r0, r6
 810d7a6:	4639      	mov	r1, r7
 810d7a8:	f7f2 fdf6 	bl	8100398 <__aeabi_dsub>
 810d7ac:	f7f3 fa5c 	bl	8100c68 <__aeabi_d2iz>
 810d7b0:	9b02      	ldr	r3, [sp, #8]
 810d7b2:	f843 0b04 	str.w	r0, [r3], #4
 810d7b6:	3d01      	subs	r5, #1
 810d7b8:	9302      	str	r3, [sp, #8]
 810d7ba:	ab70      	add	r3, sp, #448	; 0x1c0
 810d7bc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d7c4:	4640      	mov	r0, r8
 810d7c6:	4649      	mov	r1, r9
 810d7c8:	f7f2 fde8 	bl	810039c <__adddf3>
 810d7cc:	4606      	mov	r6, r0
 810d7ce:	460f      	mov	r7, r1
 810d7d0:	e75b      	b.n	810d68a <__kernel_rem_pio2+0x10a>
 810d7d2:	d105      	bne.n	810d7e0 <__kernel_rem_pio2+0x260>
 810d7d4:	1e63      	subs	r3, r4, #1
 810d7d6:	aa0c      	add	r2, sp, #48	; 0x30
 810d7d8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 810d7dc:	15c3      	asrs	r3, r0, #23
 810d7de:	e79b      	b.n	810d718 <__kernel_rem_pio2+0x198>
 810d7e0:	4b38      	ldr	r3, [pc, #224]	; (810d8c4 <__kernel_rem_pio2+0x344>)
 810d7e2:	2200      	movs	r2, #0
 810d7e4:	f7f3 fa16 	bl	8100c14 <__aeabi_dcmpge>
 810d7e8:	2800      	cmp	r0, #0
 810d7ea:	d139      	bne.n	810d860 <__kernel_rem_pio2+0x2e0>
 810d7ec:	9002      	str	r0, [sp, #8]
 810d7ee:	2200      	movs	r2, #0
 810d7f0:	2300      	movs	r3, #0
 810d7f2:	4630      	mov	r0, r6
 810d7f4:	4639      	mov	r1, r7
 810d7f6:	f7f3 f9ef 	bl	8100bd8 <__aeabi_dcmpeq>
 810d7fa:	2800      	cmp	r0, #0
 810d7fc:	f000 80b4 	beq.w	810d968 <__kernel_rem_pio2+0x3e8>
 810d800:	f104 3bff 	add.w	fp, r4, #4294967295
 810d804:	465b      	mov	r3, fp
 810d806:	2200      	movs	r2, #0
 810d808:	9904      	ldr	r1, [sp, #16]
 810d80a:	428b      	cmp	r3, r1
 810d80c:	da65      	bge.n	810d8da <__kernel_rem_pio2+0x35a>
 810d80e:	2a00      	cmp	r2, #0
 810d810:	d07b      	beq.n	810d90a <__kernel_rem_pio2+0x38a>
 810d812:	ab0c      	add	r3, sp, #48	; 0x30
 810d814:	f1aa 0a18 	sub.w	sl, sl, #24
 810d818:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 810d81c:	2b00      	cmp	r3, #0
 810d81e:	f000 80a0 	beq.w	810d962 <__kernel_rem_pio2+0x3e2>
 810d822:	ed9f 0b21 	vldr	d0, [pc, #132]	; 810d8a8 <__kernel_rem_pio2+0x328>
 810d826:	4650      	mov	r0, sl
 810d828:	f000 fbc2 	bl	810dfb0 <scalbn>
 810d82c:	4f23      	ldr	r7, [pc, #140]	; (810d8bc <__kernel_rem_pio2+0x33c>)
 810d82e:	ec55 4b10 	vmov	r4, r5, d0
 810d832:	46d8      	mov	r8, fp
 810d834:	2600      	movs	r6, #0
 810d836:	f1b8 0f00 	cmp.w	r8, #0
 810d83a:	f280 80cf 	bge.w	810d9dc <__kernel_rem_pio2+0x45c>
 810d83e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 810d8a0 <__kernel_rem_pio2+0x320>
 810d842:	465f      	mov	r7, fp
 810d844:	f04f 0800 	mov.w	r8, #0
 810d848:	2f00      	cmp	r7, #0
 810d84a:	f2c0 80fd 	blt.w	810da48 <__kernel_rem_pio2+0x4c8>
 810d84e:	ab70      	add	r3, sp, #448	; 0x1c0
 810d850:	f8df a074 	ldr.w	sl, [pc, #116]	; 810d8c8 <__kernel_rem_pio2+0x348>
 810d854:	ec55 4b18 	vmov	r4, r5, d8
 810d858:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 810d85c:	2600      	movs	r6, #0
 810d85e:	e0e5      	b.n	810da2c <__kernel_rem_pio2+0x4ac>
 810d860:	2302      	movs	r3, #2
 810d862:	9302      	str	r3, [sp, #8]
 810d864:	e75c      	b.n	810d720 <__kernel_rem_pio2+0x1a0>
 810d866:	f8db 3000 	ldr.w	r3, [fp]
 810d86a:	b955      	cbnz	r5, 810d882 <__kernel_rem_pio2+0x302>
 810d86c:	b123      	cbz	r3, 810d878 <__kernel_rem_pio2+0x2f8>
 810d86e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 810d872:	f8cb 3000 	str.w	r3, [fp]
 810d876:	2301      	movs	r3, #1
 810d878:	3201      	adds	r2, #1
 810d87a:	f10b 0b04 	add.w	fp, fp, #4
 810d87e:	461d      	mov	r5, r3
 810d880:	e755      	b.n	810d72e <__kernel_rem_pio2+0x1ae>
 810d882:	1acb      	subs	r3, r1, r3
 810d884:	f8cb 3000 	str.w	r3, [fp]
 810d888:	462b      	mov	r3, r5
 810d88a:	e7f5      	b.n	810d878 <__kernel_rem_pio2+0x2f8>
 810d88c:	1e62      	subs	r2, r4, #1
 810d88e:	ab0c      	add	r3, sp, #48	; 0x30
 810d890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d894:	f3c3 0316 	ubfx	r3, r3, #0, #23
 810d898:	a90c      	add	r1, sp, #48	; 0x30
 810d89a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 810d89e:	e754      	b.n	810d74a <__kernel_rem_pio2+0x1ca>
	...
 810d8ac:	3ff00000 	.word	0x3ff00000
 810d8b0:	0810e7f0 	.word	0x0810e7f0
 810d8b4:	40200000 	.word	0x40200000
 810d8b8:	3ff00000 	.word	0x3ff00000
 810d8bc:	3e700000 	.word	0x3e700000
 810d8c0:	41700000 	.word	0x41700000
 810d8c4:	3fe00000 	.word	0x3fe00000
 810d8c8:	0810e7b0 	.word	0x0810e7b0
 810d8cc:	1e62      	subs	r2, r4, #1
 810d8ce:	ab0c      	add	r3, sp, #48	; 0x30
 810d8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d8d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 810d8d8:	e7de      	b.n	810d898 <__kernel_rem_pio2+0x318>
 810d8da:	a90c      	add	r1, sp, #48	; 0x30
 810d8dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 810d8e0:	3b01      	subs	r3, #1
 810d8e2:	430a      	orrs	r2, r1
 810d8e4:	e790      	b.n	810d808 <__kernel_rem_pio2+0x288>
 810d8e6:	3301      	adds	r3, #1
 810d8e8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 810d8ec:	2900      	cmp	r1, #0
 810d8ee:	d0fa      	beq.n	810d8e6 <__kernel_rem_pio2+0x366>
 810d8f0:	9a08      	ldr	r2, [sp, #32]
 810d8f2:	18e3      	adds	r3, r4, r3
 810d8f4:	18a6      	adds	r6, r4, r2
 810d8f6:	aa20      	add	r2, sp, #128	; 0x80
 810d8f8:	1c65      	adds	r5, r4, #1
 810d8fa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 810d8fe:	9302      	str	r3, [sp, #8]
 810d900:	9b02      	ldr	r3, [sp, #8]
 810d902:	42ab      	cmp	r3, r5
 810d904:	da04      	bge.n	810d910 <__kernel_rem_pio2+0x390>
 810d906:	461c      	mov	r4, r3
 810d908:	e6b5      	b.n	810d676 <__kernel_rem_pio2+0xf6>
 810d90a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d90c:	2301      	movs	r3, #1
 810d90e:	e7eb      	b.n	810d8e8 <__kernel_rem_pio2+0x368>
 810d910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810d912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810d916:	f7f2 fe8d 	bl	8100634 <__aeabi_i2d>
 810d91a:	e8e6 0102 	strd	r0, r1, [r6], #8
 810d91e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d920:	46b3      	mov	fp, r6
 810d922:	461c      	mov	r4, r3
 810d924:	2700      	movs	r7, #0
 810d926:	f04f 0800 	mov.w	r8, #0
 810d92a:	f04f 0900 	mov.w	r9, #0
 810d92e:	9b06      	ldr	r3, [sp, #24]
 810d930:	429f      	cmp	r7, r3
 810d932:	dd06      	ble.n	810d942 <__kernel_rem_pio2+0x3c2>
 810d934:	ab70      	add	r3, sp, #448	; 0x1c0
 810d936:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810d93a:	e9c3 8900 	strd	r8, r9, [r3]
 810d93e:	3501      	adds	r5, #1
 810d940:	e7de      	b.n	810d900 <__kernel_rem_pio2+0x380>
 810d942:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 810d946:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 810d94a:	f7f2 fedd 	bl	8100708 <__aeabi_dmul>
 810d94e:	4602      	mov	r2, r0
 810d950:	460b      	mov	r3, r1
 810d952:	4640      	mov	r0, r8
 810d954:	4649      	mov	r1, r9
 810d956:	f7f2 fd21 	bl	810039c <__adddf3>
 810d95a:	3701      	adds	r7, #1
 810d95c:	4680      	mov	r8, r0
 810d95e:	4689      	mov	r9, r1
 810d960:	e7e5      	b.n	810d92e <__kernel_rem_pio2+0x3ae>
 810d962:	f10b 3bff 	add.w	fp, fp, #4294967295
 810d966:	e754      	b.n	810d812 <__kernel_rem_pio2+0x292>
 810d968:	ec47 6b10 	vmov	d0, r6, r7
 810d96c:	f1ca 0000 	rsb	r0, sl, #0
 810d970:	f000 fb1e 	bl	810dfb0 <scalbn>
 810d974:	ec57 6b10 	vmov	r6, r7, d0
 810d978:	4b9f      	ldr	r3, [pc, #636]	; (810dbf8 <__kernel_rem_pio2+0x678>)
 810d97a:	ee10 0a10 	vmov	r0, s0
 810d97e:	2200      	movs	r2, #0
 810d980:	4639      	mov	r1, r7
 810d982:	f7f3 f947 	bl	8100c14 <__aeabi_dcmpge>
 810d986:	b300      	cbz	r0, 810d9ca <__kernel_rem_pio2+0x44a>
 810d988:	4b9c      	ldr	r3, [pc, #624]	; (810dbfc <__kernel_rem_pio2+0x67c>)
 810d98a:	2200      	movs	r2, #0
 810d98c:	4630      	mov	r0, r6
 810d98e:	4639      	mov	r1, r7
 810d990:	f7f2 feba 	bl	8100708 <__aeabi_dmul>
 810d994:	f7f3 f968 	bl	8100c68 <__aeabi_d2iz>
 810d998:	4605      	mov	r5, r0
 810d99a:	f7f2 fe4b 	bl	8100634 <__aeabi_i2d>
 810d99e:	4b96      	ldr	r3, [pc, #600]	; (810dbf8 <__kernel_rem_pio2+0x678>)
 810d9a0:	2200      	movs	r2, #0
 810d9a2:	f7f2 feb1 	bl	8100708 <__aeabi_dmul>
 810d9a6:	460b      	mov	r3, r1
 810d9a8:	4602      	mov	r2, r0
 810d9aa:	4639      	mov	r1, r7
 810d9ac:	4630      	mov	r0, r6
 810d9ae:	f7f2 fcf3 	bl	8100398 <__aeabi_dsub>
 810d9b2:	f7f3 f959 	bl	8100c68 <__aeabi_d2iz>
 810d9b6:	f104 0b01 	add.w	fp, r4, #1
 810d9ba:	ab0c      	add	r3, sp, #48	; 0x30
 810d9bc:	f10a 0a18 	add.w	sl, sl, #24
 810d9c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 810d9c4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 810d9c8:	e72b      	b.n	810d822 <__kernel_rem_pio2+0x2a2>
 810d9ca:	4630      	mov	r0, r6
 810d9cc:	4639      	mov	r1, r7
 810d9ce:	f7f3 f94b 	bl	8100c68 <__aeabi_d2iz>
 810d9d2:	ab0c      	add	r3, sp, #48	; 0x30
 810d9d4:	46a3      	mov	fp, r4
 810d9d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 810d9da:	e722      	b.n	810d822 <__kernel_rem_pio2+0x2a2>
 810d9dc:	ab70      	add	r3, sp, #448	; 0x1c0
 810d9de:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 810d9e2:	ab0c      	add	r3, sp, #48	; 0x30
 810d9e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 810d9e8:	f7f2 fe24 	bl	8100634 <__aeabi_i2d>
 810d9ec:	4622      	mov	r2, r4
 810d9ee:	462b      	mov	r3, r5
 810d9f0:	f7f2 fe8a 	bl	8100708 <__aeabi_dmul>
 810d9f4:	4632      	mov	r2, r6
 810d9f6:	e9c9 0100 	strd	r0, r1, [r9]
 810d9fa:	463b      	mov	r3, r7
 810d9fc:	4620      	mov	r0, r4
 810d9fe:	4629      	mov	r1, r5
 810da00:	f7f2 fe82 	bl	8100708 <__aeabi_dmul>
 810da04:	f108 38ff 	add.w	r8, r8, #4294967295
 810da08:	4604      	mov	r4, r0
 810da0a:	460d      	mov	r5, r1
 810da0c:	e713      	b.n	810d836 <__kernel_rem_pio2+0x2b6>
 810da0e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 810da12:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 810da16:	f7f2 fe77 	bl	8100708 <__aeabi_dmul>
 810da1a:	4602      	mov	r2, r0
 810da1c:	460b      	mov	r3, r1
 810da1e:	4620      	mov	r0, r4
 810da20:	4629      	mov	r1, r5
 810da22:	f7f2 fcbb 	bl	810039c <__adddf3>
 810da26:	3601      	adds	r6, #1
 810da28:	4604      	mov	r4, r0
 810da2a:	460d      	mov	r5, r1
 810da2c:	9b04      	ldr	r3, [sp, #16]
 810da2e:	429e      	cmp	r6, r3
 810da30:	dc01      	bgt.n	810da36 <__kernel_rem_pio2+0x4b6>
 810da32:	45b0      	cmp	r8, r6
 810da34:	daeb      	bge.n	810da0e <__kernel_rem_pio2+0x48e>
 810da36:	ab48      	add	r3, sp, #288	; 0x120
 810da38:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 810da3c:	e9c3 4500 	strd	r4, r5, [r3]
 810da40:	3f01      	subs	r7, #1
 810da42:	f108 0801 	add.w	r8, r8, #1
 810da46:	e6ff      	b.n	810d848 <__kernel_rem_pio2+0x2c8>
 810da48:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 810da4a:	2b02      	cmp	r3, #2
 810da4c:	dc0b      	bgt.n	810da66 <__kernel_rem_pio2+0x4e6>
 810da4e:	2b00      	cmp	r3, #0
 810da50:	dc6e      	bgt.n	810db30 <__kernel_rem_pio2+0x5b0>
 810da52:	d045      	beq.n	810dae0 <__kernel_rem_pio2+0x560>
 810da54:	9b07      	ldr	r3, [sp, #28]
 810da56:	f003 0007 	and.w	r0, r3, #7
 810da5a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 810da5e:	ecbd 8b02 	vpop	{d8}
 810da62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810da66:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 810da68:	2b03      	cmp	r3, #3
 810da6a:	d1f3      	bne.n	810da54 <__kernel_rem_pio2+0x4d4>
 810da6c:	ab48      	add	r3, sp, #288	; 0x120
 810da6e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 810da72:	46d0      	mov	r8, sl
 810da74:	46d9      	mov	r9, fp
 810da76:	f1b9 0f00 	cmp.w	r9, #0
 810da7a:	f1a8 0808 	sub.w	r8, r8, #8
 810da7e:	dc64      	bgt.n	810db4a <__kernel_rem_pio2+0x5ca>
 810da80:	465c      	mov	r4, fp
 810da82:	2c01      	cmp	r4, #1
 810da84:	f1aa 0a08 	sub.w	sl, sl, #8
 810da88:	dc7e      	bgt.n	810db88 <__kernel_rem_pio2+0x608>
 810da8a:	2000      	movs	r0, #0
 810da8c:	2100      	movs	r1, #0
 810da8e:	f1bb 0f01 	cmp.w	fp, #1
 810da92:	f300 8097 	bgt.w	810dbc4 <__kernel_rem_pio2+0x644>
 810da96:	9b02      	ldr	r3, [sp, #8]
 810da98:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 810da9c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 810daa0:	2b00      	cmp	r3, #0
 810daa2:	f040 8099 	bne.w	810dbd8 <__kernel_rem_pio2+0x658>
 810daa6:	9b01      	ldr	r3, [sp, #4]
 810daa8:	e9c3 5600 	strd	r5, r6, [r3]
 810daac:	e9c3 7802 	strd	r7, r8, [r3, #8]
 810dab0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 810dab4:	e7ce      	b.n	810da54 <__kernel_rem_pio2+0x4d4>
 810dab6:	ab48      	add	r3, sp, #288	; 0x120
 810dab8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810dabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dac0:	f7f2 fc6c 	bl	810039c <__adddf3>
 810dac4:	f10b 3bff 	add.w	fp, fp, #4294967295
 810dac8:	f1bb 0f00 	cmp.w	fp, #0
 810dacc:	daf3      	bge.n	810dab6 <__kernel_rem_pio2+0x536>
 810dace:	9b02      	ldr	r3, [sp, #8]
 810dad0:	b113      	cbz	r3, 810dad8 <__kernel_rem_pio2+0x558>
 810dad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810dad6:	4619      	mov	r1, r3
 810dad8:	9b01      	ldr	r3, [sp, #4]
 810dada:	e9c3 0100 	strd	r0, r1, [r3]
 810dade:	e7b9      	b.n	810da54 <__kernel_rem_pio2+0x4d4>
 810dae0:	2000      	movs	r0, #0
 810dae2:	2100      	movs	r1, #0
 810dae4:	e7f0      	b.n	810dac8 <__kernel_rem_pio2+0x548>
 810dae6:	ab48      	add	r3, sp, #288	; 0x120
 810dae8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810daf0:	f7f2 fc54 	bl	810039c <__adddf3>
 810daf4:	3c01      	subs	r4, #1
 810daf6:	2c00      	cmp	r4, #0
 810daf8:	daf5      	bge.n	810dae6 <__kernel_rem_pio2+0x566>
 810dafa:	9b02      	ldr	r3, [sp, #8]
 810dafc:	b1e3      	cbz	r3, 810db38 <__kernel_rem_pio2+0x5b8>
 810dafe:	4602      	mov	r2, r0
 810db00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810db04:	9c01      	ldr	r4, [sp, #4]
 810db06:	e9c4 2300 	strd	r2, r3, [r4]
 810db0a:	4602      	mov	r2, r0
 810db0c:	460b      	mov	r3, r1
 810db0e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 810db12:	f7f2 fc41 	bl	8100398 <__aeabi_dsub>
 810db16:	ad4a      	add	r5, sp, #296	; 0x128
 810db18:	2401      	movs	r4, #1
 810db1a:	45a3      	cmp	fp, r4
 810db1c:	da0f      	bge.n	810db3e <__kernel_rem_pio2+0x5be>
 810db1e:	9b02      	ldr	r3, [sp, #8]
 810db20:	b113      	cbz	r3, 810db28 <__kernel_rem_pio2+0x5a8>
 810db22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810db26:	4619      	mov	r1, r3
 810db28:	9b01      	ldr	r3, [sp, #4]
 810db2a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 810db2e:	e791      	b.n	810da54 <__kernel_rem_pio2+0x4d4>
 810db30:	465c      	mov	r4, fp
 810db32:	2000      	movs	r0, #0
 810db34:	2100      	movs	r1, #0
 810db36:	e7de      	b.n	810daf6 <__kernel_rem_pio2+0x576>
 810db38:	4602      	mov	r2, r0
 810db3a:	460b      	mov	r3, r1
 810db3c:	e7e2      	b.n	810db04 <__kernel_rem_pio2+0x584>
 810db3e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 810db42:	f7f2 fc2b 	bl	810039c <__adddf3>
 810db46:	3401      	adds	r4, #1
 810db48:	e7e7      	b.n	810db1a <__kernel_rem_pio2+0x59a>
 810db4a:	e9d8 4500 	ldrd	r4, r5, [r8]
 810db4e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 810db52:	4620      	mov	r0, r4
 810db54:	4632      	mov	r2, r6
 810db56:	463b      	mov	r3, r7
 810db58:	4629      	mov	r1, r5
 810db5a:	f7f2 fc1f 	bl	810039c <__adddf3>
 810db5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810db62:	4602      	mov	r2, r0
 810db64:	460b      	mov	r3, r1
 810db66:	4620      	mov	r0, r4
 810db68:	4629      	mov	r1, r5
 810db6a:	f7f2 fc15 	bl	8100398 <__aeabi_dsub>
 810db6e:	4632      	mov	r2, r6
 810db70:	463b      	mov	r3, r7
 810db72:	f7f2 fc13 	bl	810039c <__adddf3>
 810db76:	ed9d 7b04 	vldr	d7, [sp, #16]
 810db7a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 810db7e:	ed88 7b00 	vstr	d7, [r8]
 810db82:	f109 39ff 	add.w	r9, r9, #4294967295
 810db86:	e776      	b.n	810da76 <__kernel_rem_pio2+0x4f6>
 810db88:	e9da 8900 	ldrd	r8, r9, [sl]
 810db8c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 810db90:	4640      	mov	r0, r8
 810db92:	4632      	mov	r2, r6
 810db94:	463b      	mov	r3, r7
 810db96:	4649      	mov	r1, r9
 810db98:	f7f2 fc00 	bl	810039c <__adddf3>
 810db9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 810dba0:	4602      	mov	r2, r0
 810dba2:	460b      	mov	r3, r1
 810dba4:	4640      	mov	r0, r8
 810dba6:	4649      	mov	r1, r9
 810dba8:	f7f2 fbf6 	bl	8100398 <__aeabi_dsub>
 810dbac:	4632      	mov	r2, r6
 810dbae:	463b      	mov	r3, r7
 810dbb0:	f7f2 fbf4 	bl	810039c <__adddf3>
 810dbb4:	ed9d 7b04 	vldr	d7, [sp, #16]
 810dbb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 810dbbc:	ed8a 7b00 	vstr	d7, [sl]
 810dbc0:	3c01      	subs	r4, #1
 810dbc2:	e75e      	b.n	810da82 <__kernel_rem_pio2+0x502>
 810dbc4:	ab48      	add	r3, sp, #288	; 0x120
 810dbc6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810dbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dbce:	f7f2 fbe5 	bl	810039c <__adddf3>
 810dbd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 810dbd6:	e75a      	b.n	810da8e <__kernel_rem_pio2+0x50e>
 810dbd8:	9b01      	ldr	r3, [sp, #4]
 810dbda:	9a01      	ldr	r2, [sp, #4]
 810dbdc:	601d      	str	r5, [r3, #0]
 810dbde:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 810dbe2:	605c      	str	r4, [r3, #4]
 810dbe4:	609f      	str	r7, [r3, #8]
 810dbe6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 810dbea:	60d3      	str	r3, [r2, #12]
 810dbec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810dbf0:	6110      	str	r0, [r2, #16]
 810dbf2:	6153      	str	r3, [r2, #20]
 810dbf4:	e72e      	b.n	810da54 <__kernel_rem_pio2+0x4d4>
 810dbf6:	bf00      	nop
 810dbf8:	41700000 	.word	0x41700000
 810dbfc:	3e700000 	.word	0x3e700000

0810dc00 <__kernel_sin>:
 810dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dc04:	ed2d 8b04 	vpush	{d8-d9}
 810dc08:	eeb0 8a41 	vmov.f32	s16, s2
 810dc0c:	eef0 8a61 	vmov.f32	s17, s3
 810dc10:	ec55 4b10 	vmov	r4, r5, d0
 810dc14:	b083      	sub	sp, #12
 810dc16:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810dc1a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 810dc1e:	9001      	str	r0, [sp, #4]
 810dc20:	da06      	bge.n	810dc30 <__kernel_sin+0x30>
 810dc22:	ee10 0a10 	vmov	r0, s0
 810dc26:	4629      	mov	r1, r5
 810dc28:	f7f3 f81e 	bl	8100c68 <__aeabi_d2iz>
 810dc2c:	2800      	cmp	r0, #0
 810dc2e:	d051      	beq.n	810dcd4 <__kernel_sin+0xd4>
 810dc30:	4622      	mov	r2, r4
 810dc32:	462b      	mov	r3, r5
 810dc34:	4620      	mov	r0, r4
 810dc36:	4629      	mov	r1, r5
 810dc38:	f7f2 fd66 	bl	8100708 <__aeabi_dmul>
 810dc3c:	4682      	mov	sl, r0
 810dc3e:	468b      	mov	fp, r1
 810dc40:	4602      	mov	r2, r0
 810dc42:	460b      	mov	r3, r1
 810dc44:	4620      	mov	r0, r4
 810dc46:	4629      	mov	r1, r5
 810dc48:	f7f2 fd5e 	bl	8100708 <__aeabi_dmul>
 810dc4c:	a341      	add	r3, pc, #260	; (adr r3, 810dd54 <__kernel_sin+0x154>)
 810dc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc52:	4680      	mov	r8, r0
 810dc54:	4689      	mov	r9, r1
 810dc56:	4650      	mov	r0, sl
 810dc58:	4659      	mov	r1, fp
 810dc5a:	f7f2 fd55 	bl	8100708 <__aeabi_dmul>
 810dc5e:	a33f      	add	r3, pc, #252	; (adr r3, 810dd5c <__kernel_sin+0x15c>)
 810dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc64:	f7f2 fb98 	bl	8100398 <__aeabi_dsub>
 810dc68:	4652      	mov	r2, sl
 810dc6a:	465b      	mov	r3, fp
 810dc6c:	f7f2 fd4c 	bl	8100708 <__aeabi_dmul>
 810dc70:	a33c      	add	r3, pc, #240	; (adr r3, 810dd64 <__kernel_sin+0x164>)
 810dc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc76:	f7f2 fb91 	bl	810039c <__adddf3>
 810dc7a:	4652      	mov	r2, sl
 810dc7c:	465b      	mov	r3, fp
 810dc7e:	f7f2 fd43 	bl	8100708 <__aeabi_dmul>
 810dc82:	a33a      	add	r3, pc, #232	; (adr r3, 810dd6c <__kernel_sin+0x16c>)
 810dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc88:	f7f2 fb86 	bl	8100398 <__aeabi_dsub>
 810dc8c:	4652      	mov	r2, sl
 810dc8e:	465b      	mov	r3, fp
 810dc90:	f7f2 fd3a 	bl	8100708 <__aeabi_dmul>
 810dc94:	a337      	add	r3, pc, #220	; (adr r3, 810dd74 <__kernel_sin+0x174>)
 810dc96:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dc9a:	f7f2 fb7f 	bl	810039c <__adddf3>
 810dc9e:	9b01      	ldr	r3, [sp, #4]
 810dca0:	4606      	mov	r6, r0
 810dca2:	460f      	mov	r7, r1
 810dca4:	b9eb      	cbnz	r3, 810dce2 <__kernel_sin+0xe2>
 810dca6:	4602      	mov	r2, r0
 810dca8:	460b      	mov	r3, r1
 810dcaa:	4650      	mov	r0, sl
 810dcac:	4659      	mov	r1, fp
 810dcae:	f7f2 fd2b 	bl	8100708 <__aeabi_dmul>
 810dcb2:	a325      	add	r3, pc, #148	; (adr r3, 810dd48 <__kernel_sin+0x148>)
 810dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dcb8:	f7f2 fb6e 	bl	8100398 <__aeabi_dsub>
 810dcbc:	4642      	mov	r2, r8
 810dcbe:	464b      	mov	r3, r9
 810dcc0:	f7f2 fd22 	bl	8100708 <__aeabi_dmul>
 810dcc4:	4602      	mov	r2, r0
 810dcc6:	460b      	mov	r3, r1
 810dcc8:	4620      	mov	r0, r4
 810dcca:	4629      	mov	r1, r5
 810dccc:	f7f2 fb66 	bl	810039c <__adddf3>
 810dcd0:	4604      	mov	r4, r0
 810dcd2:	460d      	mov	r5, r1
 810dcd4:	ec45 4b10 	vmov	d0, r4, r5
 810dcd8:	b003      	add	sp, #12
 810dcda:	ecbd 8b04 	vpop	{d8-d9}
 810dcde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dce2:	4b1b      	ldr	r3, [pc, #108]	; (810dd50 <__kernel_sin+0x150>)
 810dce4:	ec51 0b18 	vmov	r0, r1, d8
 810dce8:	2200      	movs	r2, #0
 810dcea:	f7f2 fd0d 	bl	8100708 <__aeabi_dmul>
 810dcee:	4632      	mov	r2, r6
 810dcf0:	ec41 0b19 	vmov	d9, r0, r1
 810dcf4:	463b      	mov	r3, r7
 810dcf6:	4640      	mov	r0, r8
 810dcf8:	4649      	mov	r1, r9
 810dcfa:	f7f2 fd05 	bl	8100708 <__aeabi_dmul>
 810dcfe:	4602      	mov	r2, r0
 810dd00:	460b      	mov	r3, r1
 810dd02:	ec51 0b19 	vmov	r0, r1, d9
 810dd06:	f7f2 fb47 	bl	8100398 <__aeabi_dsub>
 810dd0a:	4652      	mov	r2, sl
 810dd0c:	465b      	mov	r3, fp
 810dd0e:	f7f2 fcfb 	bl	8100708 <__aeabi_dmul>
 810dd12:	ec53 2b18 	vmov	r2, r3, d8
 810dd16:	f7f2 fb3f 	bl	8100398 <__aeabi_dsub>
 810dd1a:	a30b      	add	r3, pc, #44	; (adr r3, 810dd48 <__kernel_sin+0x148>)
 810dd1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dd20:	4606      	mov	r6, r0
 810dd22:	460f      	mov	r7, r1
 810dd24:	4640      	mov	r0, r8
 810dd26:	4649      	mov	r1, r9
 810dd28:	f7f2 fcee 	bl	8100708 <__aeabi_dmul>
 810dd2c:	4602      	mov	r2, r0
 810dd2e:	460b      	mov	r3, r1
 810dd30:	4630      	mov	r0, r6
 810dd32:	4639      	mov	r1, r7
 810dd34:	f7f2 fb32 	bl	810039c <__adddf3>
 810dd38:	4602      	mov	r2, r0
 810dd3a:	460b      	mov	r3, r1
 810dd3c:	4620      	mov	r0, r4
 810dd3e:	4629      	mov	r1, r5
 810dd40:	f7f2 fb2a 	bl	8100398 <__aeabi_dsub>
 810dd44:	e7c4      	b.n	810dcd0 <__kernel_sin+0xd0>
 810dd46:	bf00      	nop
 810dd48:	55555549 	.word	0x55555549
 810dd4c:	3fc55555 	.word	0x3fc55555
 810dd50:	3fe00000 	.word	0x3fe00000
 810dd54:	5acfd57c 	.word	0x5acfd57c
 810dd58:	3de5d93a 	.word	0x3de5d93a
 810dd5c:	8a2b9ceb 	.word	0x8a2b9ceb
 810dd60:	3e5ae5e6 	.word	0x3e5ae5e6
 810dd64:	57b1fe7d 	.word	0x57b1fe7d
 810dd68:	3ec71de3 	.word	0x3ec71de3
 810dd6c:	19c161d5 	.word	0x19c161d5
 810dd70:	3f2a01a0 	.word	0x3f2a01a0
 810dd74:	1110f8a6 	.word	0x1110f8a6
 810dd78:	3f811111 	.word	0x3f811111

0810dd7c <finite>:
 810dd7c:	b082      	sub	sp, #8
 810dd7e:	ed8d 0b00 	vstr	d0, [sp]
 810dd82:	9801      	ldr	r0, [sp, #4]
 810dd84:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810dd88:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810dd8c:	0fc0      	lsrs	r0, r0, #31
 810dd8e:	b002      	add	sp, #8
 810dd90:	4770      	bx	lr
 810dd92:	0000      	movs	r0, r0
 810dd94:	0000      	movs	r0, r0
	...

0810dd98 <floor>:
 810dd98:	ec51 0b10 	vmov	r0, r1, d0
 810dd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810dda0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 810dda4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 810dda8:	2e13      	cmp	r6, #19
 810ddaa:	ee10 5a10 	vmov	r5, s0
 810ddae:	ee10 8a10 	vmov	r8, s0
 810ddb2:	460c      	mov	r4, r1
 810ddb4:	dc32      	bgt.n	810de1c <floor+0x84>
 810ddb6:	2e00      	cmp	r6, #0
 810ddb8:	da14      	bge.n	810dde4 <floor+0x4c>
 810ddba:	a333      	add	r3, pc, #204	; (adr r3, 810de88 <floor+0xf0>)
 810ddbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ddc0:	f7f2 faec 	bl	810039c <__adddf3>
 810ddc4:	2200      	movs	r2, #0
 810ddc6:	2300      	movs	r3, #0
 810ddc8:	f7f2 ff2e 	bl	8100c28 <__aeabi_dcmpgt>
 810ddcc:	b138      	cbz	r0, 810ddde <floor+0x46>
 810ddce:	2c00      	cmp	r4, #0
 810ddd0:	da57      	bge.n	810de82 <floor+0xea>
 810ddd2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 810ddd6:	431d      	orrs	r5, r3
 810ddd8:	d001      	beq.n	810ddde <floor+0x46>
 810ddda:	4c2d      	ldr	r4, [pc, #180]	; (810de90 <floor+0xf8>)
 810dddc:	2500      	movs	r5, #0
 810ddde:	4621      	mov	r1, r4
 810dde0:	4628      	mov	r0, r5
 810dde2:	e025      	b.n	810de30 <floor+0x98>
 810dde4:	4f2b      	ldr	r7, [pc, #172]	; (810de94 <floor+0xfc>)
 810dde6:	4137      	asrs	r7, r6
 810dde8:	ea01 0307 	and.w	r3, r1, r7
 810ddec:	4303      	orrs	r3, r0
 810ddee:	d01f      	beq.n	810de30 <floor+0x98>
 810ddf0:	a325      	add	r3, pc, #148	; (adr r3, 810de88 <floor+0xf0>)
 810ddf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810ddf6:	f7f2 fad1 	bl	810039c <__adddf3>
 810ddfa:	2200      	movs	r2, #0
 810ddfc:	2300      	movs	r3, #0
 810ddfe:	f7f2 ff13 	bl	8100c28 <__aeabi_dcmpgt>
 810de02:	2800      	cmp	r0, #0
 810de04:	d0eb      	beq.n	810ddde <floor+0x46>
 810de06:	2c00      	cmp	r4, #0
 810de08:	bfbe      	ittt	lt
 810de0a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 810de0e:	fa43 f606 	asrlt.w	r6, r3, r6
 810de12:	19a4      	addlt	r4, r4, r6
 810de14:	ea24 0407 	bic.w	r4, r4, r7
 810de18:	2500      	movs	r5, #0
 810de1a:	e7e0      	b.n	810ddde <floor+0x46>
 810de1c:	2e33      	cmp	r6, #51	; 0x33
 810de1e:	dd0b      	ble.n	810de38 <floor+0xa0>
 810de20:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810de24:	d104      	bne.n	810de30 <floor+0x98>
 810de26:	ee10 2a10 	vmov	r2, s0
 810de2a:	460b      	mov	r3, r1
 810de2c:	f7f2 fab6 	bl	810039c <__adddf3>
 810de30:	ec41 0b10 	vmov	d0, r0, r1
 810de34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810de38:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 810de3c:	f04f 33ff 	mov.w	r3, #4294967295
 810de40:	fa23 f707 	lsr.w	r7, r3, r7
 810de44:	4207      	tst	r7, r0
 810de46:	d0f3      	beq.n	810de30 <floor+0x98>
 810de48:	a30f      	add	r3, pc, #60	; (adr r3, 810de88 <floor+0xf0>)
 810de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810de4e:	f7f2 faa5 	bl	810039c <__adddf3>
 810de52:	2200      	movs	r2, #0
 810de54:	2300      	movs	r3, #0
 810de56:	f7f2 fee7 	bl	8100c28 <__aeabi_dcmpgt>
 810de5a:	2800      	cmp	r0, #0
 810de5c:	d0bf      	beq.n	810ddde <floor+0x46>
 810de5e:	2c00      	cmp	r4, #0
 810de60:	da02      	bge.n	810de68 <floor+0xd0>
 810de62:	2e14      	cmp	r6, #20
 810de64:	d103      	bne.n	810de6e <floor+0xd6>
 810de66:	3401      	adds	r4, #1
 810de68:	ea25 0507 	bic.w	r5, r5, r7
 810de6c:	e7b7      	b.n	810ddde <floor+0x46>
 810de6e:	2301      	movs	r3, #1
 810de70:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 810de74:	fa03 f606 	lsl.w	r6, r3, r6
 810de78:	4435      	add	r5, r6
 810de7a:	4545      	cmp	r5, r8
 810de7c:	bf38      	it	cc
 810de7e:	18e4      	addcc	r4, r4, r3
 810de80:	e7f2      	b.n	810de68 <floor+0xd0>
 810de82:	2500      	movs	r5, #0
 810de84:	462c      	mov	r4, r5
 810de86:	e7aa      	b.n	810ddde <floor+0x46>
 810de88:	8800759c 	.word	0x8800759c
 810de8c:	7e37e43c 	.word	0x7e37e43c
 810de90:	bff00000 	.word	0xbff00000
 810de94:	000fffff 	.word	0x000fffff

0810de98 <rint>:
 810de98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810de9a:	ec51 0b10 	vmov	r0, r1, d0
 810de9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810dea2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810dea6:	2e13      	cmp	r6, #19
 810dea8:	ee10 4a10 	vmov	r4, s0
 810deac:	460b      	mov	r3, r1
 810deae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810deb2:	dc58      	bgt.n	810df66 <rint+0xce>
 810deb4:	2e00      	cmp	r6, #0
 810deb6:	da2b      	bge.n	810df10 <rint+0x78>
 810deb8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810debc:	4302      	orrs	r2, r0
 810debe:	d023      	beq.n	810df08 <rint+0x70>
 810dec0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810dec4:	4302      	orrs	r2, r0
 810dec6:	4254      	negs	r4, r2
 810dec8:	4314      	orrs	r4, r2
 810deca:	0c4b      	lsrs	r3, r1, #17
 810decc:	0b24      	lsrs	r4, r4, #12
 810dece:	045b      	lsls	r3, r3, #17
 810ded0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810ded4:	ea44 0103 	orr.w	r1, r4, r3
 810ded8:	4b32      	ldr	r3, [pc, #200]	; (810dfa4 <rint+0x10c>)
 810deda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810dede:	e9d3 6700 	ldrd	r6, r7, [r3]
 810dee2:	4602      	mov	r2, r0
 810dee4:	460b      	mov	r3, r1
 810dee6:	4630      	mov	r0, r6
 810dee8:	4639      	mov	r1, r7
 810deea:	f7f2 fa57 	bl	810039c <__adddf3>
 810deee:	e9cd 0100 	strd	r0, r1, [sp]
 810def2:	463b      	mov	r3, r7
 810def4:	e9dd 0100 	ldrd	r0, r1, [sp]
 810def8:	4632      	mov	r2, r6
 810defa:	f7f2 fa4d 	bl	8100398 <__aeabi_dsub>
 810defe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810df02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810df06:	4639      	mov	r1, r7
 810df08:	ec41 0b10 	vmov	d0, r0, r1
 810df0c:	b003      	add	sp, #12
 810df0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810df10:	4a25      	ldr	r2, [pc, #148]	; (810dfa8 <rint+0x110>)
 810df12:	4132      	asrs	r2, r6
 810df14:	ea01 0702 	and.w	r7, r1, r2
 810df18:	4307      	orrs	r7, r0
 810df1a:	d0f5      	beq.n	810df08 <rint+0x70>
 810df1c:	0851      	lsrs	r1, r2, #1
 810df1e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810df22:	4314      	orrs	r4, r2
 810df24:	d00c      	beq.n	810df40 <rint+0xa8>
 810df26:	ea23 0201 	bic.w	r2, r3, r1
 810df2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810df2e:	2e13      	cmp	r6, #19
 810df30:	fa43 f606 	asr.w	r6, r3, r6
 810df34:	bf0c      	ite	eq
 810df36:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810df3a:	2400      	movne	r4, #0
 810df3c:	ea42 0306 	orr.w	r3, r2, r6
 810df40:	4918      	ldr	r1, [pc, #96]	; (810dfa4 <rint+0x10c>)
 810df42:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810df46:	4622      	mov	r2, r4
 810df48:	e9d5 4500 	ldrd	r4, r5, [r5]
 810df4c:	4620      	mov	r0, r4
 810df4e:	4629      	mov	r1, r5
 810df50:	f7f2 fa24 	bl	810039c <__adddf3>
 810df54:	e9cd 0100 	strd	r0, r1, [sp]
 810df58:	e9dd 0100 	ldrd	r0, r1, [sp]
 810df5c:	4622      	mov	r2, r4
 810df5e:	462b      	mov	r3, r5
 810df60:	f7f2 fa1a 	bl	8100398 <__aeabi_dsub>
 810df64:	e7d0      	b.n	810df08 <rint+0x70>
 810df66:	2e33      	cmp	r6, #51	; 0x33
 810df68:	dd07      	ble.n	810df7a <rint+0xe2>
 810df6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810df6e:	d1cb      	bne.n	810df08 <rint+0x70>
 810df70:	ee10 2a10 	vmov	r2, s0
 810df74:	f7f2 fa12 	bl	810039c <__adddf3>
 810df78:	e7c6      	b.n	810df08 <rint+0x70>
 810df7a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810df7e:	f04f 36ff 	mov.w	r6, #4294967295
 810df82:	40d6      	lsrs	r6, r2
 810df84:	4230      	tst	r0, r6
 810df86:	d0bf      	beq.n	810df08 <rint+0x70>
 810df88:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810df8c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810df90:	bf1f      	itttt	ne
 810df92:	ea24 0101 	bicne.w	r1, r4, r1
 810df96:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810df9a:	fa44 f202 	asrne.w	r2, r4, r2
 810df9e:	ea41 0402 	orrne.w	r4, r1, r2
 810dfa2:	e7cd      	b.n	810df40 <rint+0xa8>
 810dfa4:	0810e800 	.word	0x0810e800
 810dfa8:	000fffff 	.word	0x000fffff
 810dfac:	00000000 	.word	0x00000000

0810dfb0 <scalbn>:
 810dfb0:	b570      	push	{r4, r5, r6, lr}
 810dfb2:	ec55 4b10 	vmov	r4, r5, d0
 810dfb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810dfba:	4606      	mov	r6, r0
 810dfbc:	462b      	mov	r3, r5
 810dfbe:	b99a      	cbnz	r2, 810dfe8 <scalbn+0x38>
 810dfc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810dfc4:	4323      	orrs	r3, r4
 810dfc6:	d036      	beq.n	810e036 <scalbn+0x86>
 810dfc8:	4b39      	ldr	r3, [pc, #228]	; (810e0b0 <scalbn+0x100>)
 810dfca:	4629      	mov	r1, r5
 810dfcc:	ee10 0a10 	vmov	r0, s0
 810dfd0:	2200      	movs	r2, #0
 810dfd2:	f7f2 fb99 	bl	8100708 <__aeabi_dmul>
 810dfd6:	4b37      	ldr	r3, [pc, #220]	; (810e0b4 <scalbn+0x104>)
 810dfd8:	429e      	cmp	r6, r3
 810dfda:	4604      	mov	r4, r0
 810dfdc:	460d      	mov	r5, r1
 810dfde:	da10      	bge.n	810e002 <scalbn+0x52>
 810dfe0:	a32b      	add	r3, pc, #172	; (adr r3, 810e090 <scalbn+0xe0>)
 810dfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810dfe6:	e03a      	b.n	810e05e <scalbn+0xae>
 810dfe8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810dfec:	428a      	cmp	r2, r1
 810dfee:	d10c      	bne.n	810e00a <scalbn+0x5a>
 810dff0:	ee10 2a10 	vmov	r2, s0
 810dff4:	4620      	mov	r0, r4
 810dff6:	4629      	mov	r1, r5
 810dff8:	f7f2 f9d0 	bl	810039c <__adddf3>
 810dffc:	4604      	mov	r4, r0
 810dffe:	460d      	mov	r5, r1
 810e000:	e019      	b.n	810e036 <scalbn+0x86>
 810e002:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810e006:	460b      	mov	r3, r1
 810e008:	3a36      	subs	r2, #54	; 0x36
 810e00a:	4432      	add	r2, r6
 810e00c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810e010:	428a      	cmp	r2, r1
 810e012:	dd08      	ble.n	810e026 <scalbn+0x76>
 810e014:	2d00      	cmp	r5, #0
 810e016:	a120      	add	r1, pc, #128	; (adr r1, 810e098 <scalbn+0xe8>)
 810e018:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e01c:	da1c      	bge.n	810e058 <scalbn+0xa8>
 810e01e:	a120      	add	r1, pc, #128	; (adr r1, 810e0a0 <scalbn+0xf0>)
 810e020:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e024:	e018      	b.n	810e058 <scalbn+0xa8>
 810e026:	2a00      	cmp	r2, #0
 810e028:	dd08      	ble.n	810e03c <scalbn+0x8c>
 810e02a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e02e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810e036:	ec45 4b10 	vmov	d0, r4, r5
 810e03a:	bd70      	pop	{r4, r5, r6, pc}
 810e03c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810e040:	da19      	bge.n	810e076 <scalbn+0xc6>
 810e042:	f24c 3350 	movw	r3, #50000	; 0xc350
 810e046:	429e      	cmp	r6, r3
 810e048:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810e04c:	dd0a      	ble.n	810e064 <scalbn+0xb4>
 810e04e:	a112      	add	r1, pc, #72	; (adr r1, 810e098 <scalbn+0xe8>)
 810e050:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e054:	2b00      	cmp	r3, #0
 810e056:	d1e2      	bne.n	810e01e <scalbn+0x6e>
 810e058:	a30f      	add	r3, pc, #60	; (adr r3, 810e098 <scalbn+0xe8>)
 810e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810e05e:	f7f2 fb53 	bl	8100708 <__aeabi_dmul>
 810e062:	e7cb      	b.n	810dffc <scalbn+0x4c>
 810e064:	a10a      	add	r1, pc, #40	; (adr r1, 810e090 <scalbn+0xe0>)
 810e066:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e06a:	2b00      	cmp	r3, #0
 810e06c:	d0b8      	beq.n	810dfe0 <scalbn+0x30>
 810e06e:	a10e      	add	r1, pc, #56	; (adr r1, 810e0a8 <scalbn+0xf8>)
 810e070:	e9d1 0100 	ldrd	r0, r1, [r1]
 810e074:	e7b4      	b.n	810dfe0 <scalbn+0x30>
 810e076:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810e07a:	3236      	adds	r2, #54	; 0x36
 810e07c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810e080:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810e084:	4620      	mov	r0, r4
 810e086:	4b0c      	ldr	r3, [pc, #48]	; (810e0b8 <scalbn+0x108>)
 810e088:	2200      	movs	r2, #0
 810e08a:	e7e8      	b.n	810e05e <scalbn+0xae>
 810e08c:	f3af 8000 	nop.w
 810e090:	c2f8f359 	.word	0xc2f8f359
 810e094:	01a56e1f 	.word	0x01a56e1f
 810e098:	8800759c 	.word	0x8800759c
 810e09c:	7e37e43c 	.word	0x7e37e43c
 810e0a0:	8800759c 	.word	0x8800759c
 810e0a4:	fe37e43c 	.word	0xfe37e43c
 810e0a8:	c2f8f359 	.word	0xc2f8f359
 810e0ac:	81a56e1f 	.word	0x81a56e1f
 810e0b0:	43500000 	.word	0x43500000
 810e0b4:	ffff3cb0 	.word	0xffff3cb0
 810e0b8:	3c900000 	.word	0x3c900000

0810e0bc <_init>:
 810e0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e0be:	bf00      	nop
 810e0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e0c2:	bc08      	pop	{r3}
 810e0c4:	469e      	mov	lr, r3
 810e0c6:	4770      	bx	lr

0810e0c8 <_fini>:
 810e0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e0ca:	bf00      	nop
 810e0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e0ce:	bc08      	pop	{r3}
 810e0d0:	469e      	mov	lr, r3
 810e0d2:	4770      	bx	lr
