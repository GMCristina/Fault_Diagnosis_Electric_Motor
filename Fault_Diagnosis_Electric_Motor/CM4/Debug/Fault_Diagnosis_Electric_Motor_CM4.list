
Fault_Diagnosis_Electric_Motor_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c92c  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d58  0810cbd0  0810cbd0  0001cbd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d928  0810d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d930  0810d930  0001d930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810d934  0810d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000238  10000000  0810d938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001039c  10000238  0810db70  00020238  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100105d4  0810db70  000205d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 10 .debug_info   000227ab  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000377f  00000000  00000000  00042a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000eb8  00000000  00000000  00046198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d88  00000000  00000000  00047050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003c5e7  00000000  00000000  00047dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001424f  00000000  00000000  000843bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001873cd  00000000  00000000  0009860e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      000000c3  00000000  00000000  0021f9db  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005384  00000000  00000000  0021faa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0000016e  00000000  00000000  00224e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000238 	.word	0x10000238
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810cbb4 	.word	0x0810cbb4

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000023c 	.word	0x1000023c
 81002dc:	0810cbb4 	.word	0x0810cbb4

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a4 	b.w	81010f8 <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9d08      	ldr	r5, [sp, #32]
 8100e3a:	4604      	mov	r4, r0
 8100e3c:	468c      	mov	ip, r1
 8100e3e:	2b00      	cmp	r3, #0
 8100e40:	f040 8083 	bne.w	8100f4a <__udivmoddi4+0x116>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4617      	mov	r7, r2
 8100e48:	d947      	bls.n	8100eda <__udivmoddi4+0xa6>
 8100e4a:	fab2 f282 	clz	r2, r2
 8100e4e:	b142      	cbz	r2, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	f1c2 0020 	rsb	r0, r2, #32
 8100e54:	fa24 f000 	lsr.w	r0, r4, r0
 8100e58:	4091      	lsls	r1, r2
 8100e5a:	4097      	lsls	r7, r2
 8100e5c:	ea40 0c01 	orr.w	ip, r0, r1
 8100e60:	4094      	lsls	r4, r2
 8100e62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8100e66:	0c23      	lsrs	r3, r4, #16
 8100e68:	fbbc f6f8 	udiv	r6, ip, r8
 8100e6c:	fa1f fe87 	uxth.w	lr, r7
 8100e70:	fb08 c116 	mls	r1, r8, r6, ip
 8100e74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100e78:	fb06 f10e 	mul.w	r1, r6, lr
 8100e7c:	4299      	cmp	r1, r3
 8100e7e:	d909      	bls.n	8100e94 <__udivmoddi4+0x60>
 8100e80:	18fb      	adds	r3, r7, r3
 8100e82:	f106 30ff 	add.w	r0, r6, #4294967295
 8100e86:	f080 8119 	bcs.w	81010bc <__udivmoddi4+0x288>
 8100e8a:	4299      	cmp	r1, r3
 8100e8c:	f240 8116 	bls.w	81010bc <__udivmoddi4+0x288>
 8100e90:	3e02      	subs	r6, #2
 8100e92:	443b      	add	r3, r7
 8100e94:	1a5b      	subs	r3, r3, r1
 8100e96:	b2a4      	uxth	r4, r4
 8100e98:	fbb3 f0f8 	udiv	r0, r3, r8
 8100e9c:	fb08 3310 	mls	r3, r8, r0, r3
 8100ea0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100ea4:	fb00 fe0e 	mul.w	lr, r0, lr
 8100ea8:	45a6      	cmp	lr, r4
 8100eaa:	d909      	bls.n	8100ec0 <__udivmoddi4+0x8c>
 8100eac:	193c      	adds	r4, r7, r4
 8100eae:	f100 33ff 	add.w	r3, r0, #4294967295
 8100eb2:	f080 8105 	bcs.w	81010c0 <__udivmoddi4+0x28c>
 8100eb6:	45a6      	cmp	lr, r4
 8100eb8:	f240 8102 	bls.w	81010c0 <__udivmoddi4+0x28c>
 8100ebc:	3802      	subs	r0, #2
 8100ebe:	443c      	add	r4, r7
 8100ec0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100ec4:	eba4 040e 	sub.w	r4, r4, lr
 8100ec8:	2600      	movs	r6, #0
 8100eca:	b11d      	cbz	r5, 8100ed4 <__udivmoddi4+0xa0>
 8100ecc:	40d4      	lsrs	r4, r2
 8100ece:	2300      	movs	r3, #0
 8100ed0:	e9c5 4300 	strd	r4, r3, [r5]
 8100ed4:	4631      	mov	r1, r6
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	b902      	cbnz	r2, 8100ede <__udivmoddi4+0xaa>
 8100edc:	deff      	udf	#255	; 0xff
 8100ede:	fab2 f282 	clz	r2, r2
 8100ee2:	2a00      	cmp	r2, #0
 8100ee4:	d150      	bne.n	8100f88 <__udivmoddi4+0x154>
 8100ee6:	1bcb      	subs	r3, r1, r7
 8100ee8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100eec:	fa1f f887 	uxth.w	r8, r7
 8100ef0:	2601      	movs	r6, #1
 8100ef2:	fbb3 fcfe 	udiv	ip, r3, lr
 8100ef6:	0c21      	lsrs	r1, r4, #16
 8100ef8:	fb0e 331c 	mls	r3, lr, ip, r3
 8100efc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100f00:	fb08 f30c 	mul.w	r3, r8, ip
 8100f04:	428b      	cmp	r3, r1
 8100f06:	d907      	bls.n	8100f18 <__udivmoddi4+0xe4>
 8100f08:	1879      	adds	r1, r7, r1
 8100f0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8100f0e:	d202      	bcs.n	8100f16 <__udivmoddi4+0xe2>
 8100f10:	428b      	cmp	r3, r1
 8100f12:	f200 80e9 	bhi.w	81010e8 <__udivmoddi4+0x2b4>
 8100f16:	4684      	mov	ip, r0
 8100f18:	1ac9      	subs	r1, r1, r3
 8100f1a:	b2a3      	uxth	r3, r4
 8100f1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8100f20:	fb0e 1110 	mls	r1, lr, r0, r1
 8100f24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8100f28:	fb08 f800 	mul.w	r8, r8, r0
 8100f2c:	45a0      	cmp	r8, r4
 8100f2e:	d907      	bls.n	8100f40 <__udivmoddi4+0x10c>
 8100f30:	193c      	adds	r4, r7, r4
 8100f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8100f36:	d202      	bcs.n	8100f3e <__udivmoddi4+0x10a>
 8100f38:	45a0      	cmp	r8, r4
 8100f3a:	f200 80d9 	bhi.w	81010f0 <__udivmoddi4+0x2bc>
 8100f3e:	4618      	mov	r0, r3
 8100f40:	eba4 0408 	sub.w	r4, r4, r8
 8100f44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8100f48:	e7bf      	b.n	8100eca <__udivmoddi4+0x96>
 8100f4a:	428b      	cmp	r3, r1
 8100f4c:	d909      	bls.n	8100f62 <__udivmoddi4+0x12e>
 8100f4e:	2d00      	cmp	r5, #0
 8100f50:	f000 80b1 	beq.w	81010b6 <__udivmoddi4+0x282>
 8100f54:	2600      	movs	r6, #0
 8100f56:	e9c5 0100 	strd	r0, r1, [r5]
 8100f5a:	4630      	mov	r0, r6
 8100f5c:	4631      	mov	r1, r6
 8100f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100f62:	fab3 f683 	clz	r6, r3
 8100f66:	2e00      	cmp	r6, #0
 8100f68:	d14a      	bne.n	8101000 <__udivmoddi4+0x1cc>
 8100f6a:	428b      	cmp	r3, r1
 8100f6c:	d302      	bcc.n	8100f74 <__udivmoddi4+0x140>
 8100f6e:	4282      	cmp	r2, r0
 8100f70:	f200 80b8 	bhi.w	81010e4 <__udivmoddi4+0x2b0>
 8100f74:	1a84      	subs	r4, r0, r2
 8100f76:	eb61 0103 	sbc.w	r1, r1, r3
 8100f7a:	2001      	movs	r0, #1
 8100f7c:	468c      	mov	ip, r1
 8100f7e:	2d00      	cmp	r5, #0
 8100f80:	d0a8      	beq.n	8100ed4 <__udivmoddi4+0xa0>
 8100f82:	e9c5 4c00 	strd	r4, ip, [r5]
 8100f86:	e7a5      	b.n	8100ed4 <__udivmoddi4+0xa0>
 8100f88:	f1c2 0320 	rsb	r3, r2, #32
 8100f8c:	fa20 f603 	lsr.w	r6, r0, r3
 8100f90:	4097      	lsls	r7, r2
 8100f92:	fa01 f002 	lsl.w	r0, r1, r2
 8100f96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100f9a:	40d9      	lsrs	r1, r3
 8100f9c:	4330      	orrs	r0, r6
 8100f9e:	0c03      	lsrs	r3, r0, #16
 8100fa0:	fbb1 f6fe 	udiv	r6, r1, lr
 8100fa4:	fa1f f887 	uxth.w	r8, r7
 8100fa8:	fb0e 1116 	mls	r1, lr, r6, r1
 8100fac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100fb0:	fb06 f108 	mul.w	r1, r6, r8
 8100fb4:	4299      	cmp	r1, r3
 8100fb6:	fa04 f402 	lsl.w	r4, r4, r2
 8100fba:	d909      	bls.n	8100fd0 <__udivmoddi4+0x19c>
 8100fbc:	18fb      	adds	r3, r7, r3
 8100fbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8100fc2:	f080 808d 	bcs.w	81010e0 <__udivmoddi4+0x2ac>
 8100fc6:	4299      	cmp	r1, r3
 8100fc8:	f240 808a 	bls.w	81010e0 <__udivmoddi4+0x2ac>
 8100fcc:	3e02      	subs	r6, #2
 8100fce:	443b      	add	r3, r7
 8100fd0:	1a5b      	subs	r3, r3, r1
 8100fd2:	b281      	uxth	r1, r0
 8100fd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8100fd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8100fdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100fe0:	fb00 f308 	mul.w	r3, r0, r8
 8100fe4:	428b      	cmp	r3, r1
 8100fe6:	d907      	bls.n	8100ff8 <__udivmoddi4+0x1c4>
 8100fe8:	1879      	adds	r1, r7, r1
 8100fea:	f100 3cff 	add.w	ip, r0, #4294967295
 8100fee:	d273      	bcs.n	81010d8 <__udivmoddi4+0x2a4>
 8100ff0:	428b      	cmp	r3, r1
 8100ff2:	d971      	bls.n	81010d8 <__udivmoddi4+0x2a4>
 8100ff4:	3802      	subs	r0, #2
 8100ff6:	4439      	add	r1, r7
 8100ff8:	1acb      	subs	r3, r1, r3
 8100ffa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8100ffe:	e778      	b.n	8100ef2 <__udivmoddi4+0xbe>
 8101000:	f1c6 0c20 	rsb	ip, r6, #32
 8101004:	fa03 f406 	lsl.w	r4, r3, r6
 8101008:	fa22 f30c 	lsr.w	r3, r2, ip
 810100c:	431c      	orrs	r4, r3
 810100e:	fa20 f70c 	lsr.w	r7, r0, ip
 8101012:	fa01 f306 	lsl.w	r3, r1, r6
 8101016:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 810101a:	fa21 f10c 	lsr.w	r1, r1, ip
 810101e:	431f      	orrs	r7, r3
 8101020:	0c3b      	lsrs	r3, r7, #16
 8101022:	fbb1 f9fe 	udiv	r9, r1, lr
 8101026:	fa1f f884 	uxth.w	r8, r4
 810102a:	fb0e 1119 	mls	r1, lr, r9, r1
 810102e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8101032:	fb09 fa08 	mul.w	sl, r9, r8
 8101036:	458a      	cmp	sl, r1
 8101038:	fa02 f206 	lsl.w	r2, r2, r6
 810103c:	fa00 f306 	lsl.w	r3, r0, r6
 8101040:	d908      	bls.n	8101054 <__udivmoddi4+0x220>
 8101042:	1861      	adds	r1, r4, r1
 8101044:	f109 30ff 	add.w	r0, r9, #4294967295
 8101048:	d248      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 810104a:	458a      	cmp	sl, r1
 810104c:	d946      	bls.n	81010dc <__udivmoddi4+0x2a8>
 810104e:	f1a9 0902 	sub.w	r9, r9, #2
 8101052:	4421      	add	r1, r4
 8101054:	eba1 010a 	sub.w	r1, r1, sl
 8101058:	b2bf      	uxth	r7, r7
 810105a:	fbb1 f0fe 	udiv	r0, r1, lr
 810105e:	fb0e 1110 	mls	r1, lr, r0, r1
 8101062:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8101066:	fb00 f808 	mul.w	r8, r0, r8
 810106a:	45b8      	cmp	r8, r7
 810106c:	d907      	bls.n	810107e <__udivmoddi4+0x24a>
 810106e:	19e7      	adds	r7, r4, r7
 8101070:	f100 31ff 	add.w	r1, r0, #4294967295
 8101074:	d22e      	bcs.n	81010d4 <__udivmoddi4+0x2a0>
 8101076:	45b8      	cmp	r8, r7
 8101078:	d92c      	bls.n	81010d4 <__udivmoddi4+0x2a0>
 810107a:	3802      	subs	r0, #2
 810107c:	4427      	add	r7, r4
 810107e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8101082:	eba7 0708 	sub.w	r7, r7, r8
 8101086:	fba0 8902 	umull	r8, r9, r0, r2
 810108a:	454f      	cmp	r7, r9
 810108c:	46c6      	mov	lr, r8
 810108e:	4649      	mov	r1, r9
 8101090:	d31a      	bcc.n	81010c8 <__udivmoddi4+0x294>
 8101092:	d017      	beq.n	81010c4 <__udivmoddi4+0x290>
 8101094:	b15d      	cbz	r5, 81010ae <__udivmoddi4+0x27a>
 8101096:	ebb3 020e 	subs.w	r2, r3, lr
 810109a:	eb67 0701 	sbc.w	r7, r7, r1
 810109e:	fa07 fc0c 	lsl.w	ip, r7, ip
 81010a2:	40f2      	lsrs	r2, r6
 81010a4:	ea4c 0202 	orr.w	r2, ip, r2
 81010a8:	40f7      	lsrs	r7, r6
 81010aa:	e9c5 2700 	strd	r2, r7, [r5]
 81010ae:	2600      	movs	r6, #0
 81010b0:	4631      	mov	r1, r6
 81010b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81010b6:	462e      	mov	r6, r5
 81010b8:	4628      	mov	r0, r5
 81010ba:	e70b      	b.n	8100ed4 <__udivmoddi4+0xa0>
 81010bc:	4606      	mov	r6, r0
 81010be:	e6e9      	b.n	8100e94 <__udivmoddi4+0x60>
 81010c0:	4618      	mov	r0, r3
 81010c2:	e6fd      	b.n	8100ec0 <__udivmoddi4+0x8c>
 81010c4:	4543      	cmp	r3, r8
 81010c6:	d2e5      	bcs.n	8101094 <__udivmoddi4+0x260>
 81010c8:	ebb8 0e02 	subs.w	lr, r8, r2
 81010cc:	eb69 0104 	sbc.w	r1, r9, r4
 81010d0:	3801      	subs	r0, #1
 81010d2:	e7df      	b.n	8101094 <__udivmoddi4+0x260>
 81010d4:	4608      	mov	r0, r1
 81010d6:	e7d2      	b.n	810107e <__udivmoddi4+0x24a>
 81010d8:	4660      	mov	r0, ip
 81010da:	e78d      	b.n	8100ff8 <__udivmoddi4+0x1c4>
 81010dc:	4681      	mov	r9, r0
 81010de:	e7b9      	b.n	8101054 <__udivmoddi4+0x220>
 81010e0:	4666      	mov	r6, ip
 81010e2:	e775      	b.n	8100fd0 <__udivmoddi4+0x19c>
 81010e4:	4630      	mov	r0, r6
 81010e6:	e74a      	b.n	8100f7e <__udivmoddi4+0x14a>
 81010e8:	f1ac 0c02 	sub.w	ip, ip, #2
 81010ec:	4439      	add	r1, r7
 81010ee:	e713      	b.n	8100f18 <__udivmoddi4+0xe4>
 81010f0:	3802      	subs	r0, #2
 81010f2:	443c      	add	r4, r7
 81010f4:	e724      	b.n	8100f40 <__udivmoddi4+0x10c>
 81010f6:	bf00      	nop

081010f8 <__aeabi_idiv0>:
 81010f8:	4770      	bx	lr
 81010fa:	bf00      	nop

081010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81010fc:	b480      	push	{r7}
 81010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101100:	4b0b      	ldr	r3, [pc, #44]	; (8101130 <SystemInit+0x34>)
 8101102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8101106:	4a0a      	ldr	r2, [pc, #40]	; (8101130 <SystemInit+0x34>)
 8101108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101110:	4b07      	ldr	r3, [pc, #28]	; (8101130 <SystemInit+0x34>)
 8101112:	691b      	ldr	r3, [r3, #16]
 8101114:	4a06      	ldr	r2, [pc, #24]	; (8101130 <SystemInit+0x34>)
 8101116:	f043 0310 	orr.w	r3, r3, #16
 810111a:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810111c:	4b04      	ldr	r3, [pc, #16]	; (8101130 <SystemInit+0x34>)
 810111e:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8101122:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8101124:	bf00      	nop
 8101126:	46bd      	mov	sp, r7
 8101128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810112c:	4770      	bx	lr
 810112e:	bf00      	nop
 8101130:	e000ed00 	.word	0xe000ed00

08101134 <ADE9000_Setup>:
int32_t n_int = 0;

union DATA  ia[N_SAMPLE];
//va[N_SAMPLE],

void ADE9000_Setup(){
 8101134:	b580      	push	{r7, lr}
 8101136:	b082      	sub	sp, #8
 8101138:	af00      	add	r7, sp, #0
	uint32_t value_reg_32;
	uint16_t value_reg_16;

	// ADDR_PGA_GAIN
	value_reg_16 = 0x0000; //gain all channel 1
 810113a:	2300      	movs	r3, #0
 810113c:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_PGA_GAIN,value_reg_16);
 810113e:	88fb      	ldrh	r3, [r7, #6]
 8101140:	4619      	mov	r1, r3
 8101142:	f240 40b9 	movw	r0, #1209	; 0x4b9
 8101146:	f000 f8ed 	bl	8101324 <ADE9000_SPI_Write_16>

	//CONFIG2
	value_reg_16 = 	0x0C00;			//Default High pass corner frequency of 1.25Hz
 810114a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 810114e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG2,value_reg_16);
 8101150:	88fb      	ldrh	r3, [r7, #6]
 8101152:	4619      	mov	r1, r3
 8101154:	f240 40af 	movw	r0, #1199	; 0x4af
 8101158:	f000 f8e4 	bl	8101324 <ADE9000_SPI_Write_16>

	//CONFIG1
	//EXT_REF off
	value_reg_16 = 0x000000;
 810115c:	2300      	movs	r3, #0
 810115e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_CONFIG1,value_reg_16);
 8101160:	88fb      	ldrh	r3, [r7, #6]
 8101162:	4619      	mov	r1, r3
 8101164:	f240 4081 	movw	r0, #1153	; 0x481
 8101168:	f000 f8dc 	bl	8101324 <ADE9000_SPI_Write_16>

	//ACCMODE
	value_reg_16= 0x0000;			//3P4W Wye configuration
 810116c:	2300      	movs	r3, #0
 810116e:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_ACCMODE,value_reg_16);
 8101170:	88fb      	ldrh	r3, [r7, #6]
 8101172:	4619      	mov	r1, r3
 8101174:	f240 4092 	movw	r0, #1170	; 0x492
 8101178:	f000 f8d4 	bl	8101324 <ADE9000_SPI_Write_16>
	//value_reg_16 = 0x1020;//IN, sinc4, stop full, fixed rate, stop, tutti canali(0000)
	//value_reg_16 = 0x0029; //no IN, sinc4, stop full, fixed rate, stop, solo VA (1001)
	//value_reg_16 = 0x0021; //no IN, sinc4, stop full, fixed rate, stop, solo Ia e VA (0001)
	//value_reg_16 = 0x0221; //no IN, LPF, stop full, fixed rate, stop, solo Ia e VA (0001)

	value_reg_16 = 0x0000;
 810117c:	2300      	movs	r3, #0
 810117e:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_IN_EN<<12);
	value_reg_16 = value_reg_16 | (WF_SRC<<8);
 8101180:	88fb      	ldrh	r3, [r7, #6]
 8101182:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8101186:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_MODE<<6);
 8101188:	88fb      	ldrh	r3, [r7, #6]
 810118a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810118e:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | (WF_CAP_SEL<<5);
 8101190:	88fb      	ldrh	r3, [r7, #6]
 8101192:	f043 0320 	orr.w	r3, r3, #32
 8101196:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = value_reg_16 | BURST_CHAN;
 8101198:	88fb      	ldrh	r3, [r7, #6]
 810119a:	f043 0308 	orr.w	r3, r3, #8
 810119e:	80fb      	strh	r3, [r7, #6]

	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 81011a0:	88fb      	ldrh	r3, [r7, #6]
 81011a2:	4619      	mov	r1, r3
 81011a4:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 81011a8:	f000 f8bc 	bl	8101324 <ADE9000_SPI_Write_16>
	// 1 bit per pagina: pag15-pag0
	//fa PageFULL in STATUS0

	//value_reg_16 = 0x8000; //page 15
	//value_reg_16 = 0xFFFF; //all page
	value_reg_16 = 0x8080; //page 15, page 7 (metà)
 81011ac:	f248 0380 	movw	r3, #32896	; 0x8080
 81011b0:	80fb      	strh	r3, [r7, #6]
	//value_reg_16 = 0x0000; //no int
	ADE9000_SPI_Write_16(ADDR_WFB_PG_IRQEN,value_reg_16);
 81011b2:	88fb      	ldrh	r3, [r7, #6]
 81011b4:	4619      	mov	r1, r3
 81011b6:	f240 40a1 	movw	r0, #1185	; 0x4a1
 81011ba:	f000 f8b3 	bl	8101324 <ADE9000_SPI_Write_16>

	//ADDR_MASK0
	//IRQ0 per full page (bit 17)
	//quando una delle pagine settate è piena
	value_reg_32 = 0x00020000;
 81011be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 81011c2:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK0,value_reg_32);
 81011c4:	6839      	ldr	r1, [r7, #0]
 81011c6:	f240 4005 	movw	r0, #1029	; 0x405
 81011ca:	f000 f8df 	bl	810138c <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK0);
 81011ce:	f240 4005 	movw	r0, #1029	; 0x405
 81011d2:	f000 f86b 	bl	81012ac <ADE9000_SPI_Read_32>
 81011d6:	6038      	str	r0, [r7, #0]

	//ADDR_MASK1
	//disable all int
	value_reg_32 = 0x00000000;
 81011d8:	2300      	movs	r3, #0
 81011da:	603b      	str	r3, [r7, #0]
	ADE9000_SPI_Write_32(ADDR_MASK1,value_reg_32);
 81011dc:	6839      	ldr	r1, [r7, #0]
 81011de:	f240 4006 	movw	r0, #1030	; 0x406
 81011e2:	f000 f8d3 	bl	810138c <ADE9000_SPI_Write_32>
	value_reg_32 = ADE9000_SPI_Read_32(ADDR_MASK1);
 81011e6:	f240 4006 	movw	r0, #1030	; 0x406
 81011ea:	f000 f85f 	bl	81012ac <ADE9000_SPI_Read_32>
 81011ee:	6038      	str	r0, [r7, #0]

	//ADDR_RUN
	//Start ADE9000 measurement
	value_reg_16 = 0x0001;
 81011f0:	2301      	movs	r3, #1
 81011f2:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_RUN, value_reg_16);
 81011f4:	88fb      	ldrh	r3, [r7, #6]
 81011f6:	4619      	mov	r1, r3
 81011f8:	f44f 6090 	mov.w	r0, #1152	; 0x480
 81011fc:	f000 f892 	bl	8101324 <ADE9000_SPI_Write_16>
}
 8101200:	bf00      	nop
 8101202:	3708      	adds	r7, #8
 8101204:	46bd      	mov	sp, r7
 8101206:	bd80      	pop	{r7, pc}

08101208 <ADE9000_Power>:

//power-on sequence
void ADE9000_Power(void){
 8101208:	b580      	push	{r7, lr}
 810120a:	af00      	add	r7, sp, #0
	//PM1 pin
	//PM1 e PM0 for power mode (PM1=0 for normal mode)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 810120c:	2200      	movs	r2, #0
 810120e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8101212:	480c      	ldr	r0, [pc, #48]	; (8101244 <ADE9000_Power+0x3c>)
 8101214:	f001 fe30 	bl	8102e78 <HAL_GPIO_WritePin>

	//RESET pin (è !reset)
	//reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 8101218:	2200      	movs	r2, #0
 810121a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 810121e:	4809      	ldr	r0, [pc, #36]	; (8101244 <ADE9000_Power+0x3c>)
 8101220:	f001 fe2a 	bl	8102e78 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8101224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8101228:	f001 fb2e 	bl	8102888 <HAL_Delay>
    //no reset
    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
 810122c:	2201      	movs	r2, #1
 810122e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8101232:	4804      	ldr	r0, [pc, #16]	; (8101244 <ADE9000_Power+0x3c>)
 8101234:	f001 fe20 	bl	8102e78 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8101238:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 810123c:	f001 fb24 	bl	8102888 <HAL_Delay>
    } while ((value_reg_32 & 0x00010000)==0);
    //Clear IRQ1
    value_reg_32 = value_reg_32 & 0x00010000;
    ADE9000_SPI_Write_32(ADDR_STATUS1,value_reg_32);
    */
}
 8101240:	bf00      	nop
 8101242:	bd80      	pop	{r7, pc}
 8101244:	58021000 	.word	0x58021000

08101248 <ADE9000_SPI_Read_16>:

uint16_t ADE9000_SPI_Read_16(uint16_t Address){
 8101248:	b580      	push	{r7, lr}
 810124a:	b084      	sub	sp, #16
 810124c:	af00      	add	r7, sp, #0
 810124e:	4603      	mov	r3, r0
 8101250:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 8101252:	88fb      	ldrh	r3, [r7, #6]
 8101254:	011b      	lsls	r3, r3, #4
 8101256:	b29b      	uxth	r3, r3
 8101258:	3308      	adds	r3, #8
 810125a:	b29b      	uxth	r3, r3
 810125c:	813b      	strh	r3, [r7, #8]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 810125e:	2200      	movs	r2, #0
 8101260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101264:	480f      	ldr	r0, [pc, #60]	; (81012a4 <ADE9000_SPI_Read_16+0x5c>)
 8101266:	f001 fe07 	bl	8102e78 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 810126a:	f107 0108 	add.w	r1, r7, #8
 810126e:	2364      	movs	r3, #100	; 0x64
 8101270:	2201      	movs	r2, #1
 8101272:	480d      	ldr	r0, [pc, #52]	; (81012a8 <ADE9000_SPI_Read_16+0x60>)
 8101274:	f003 fd0e 	bl	8104c94 <HAL_SPI_Transmit>
 8101278:	4603      	mov	r3, r0
 810127a:	73fb      	strb	r3, [r7, #15]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 810127c:	f107 010c 	add.w	r1, r7, #12
 8101280:	2364      	movs	r3, #100	; 0x64
 8101282:	2201      	movs	r2, #1
 8101284:	4808      	ldr	r0, [pc, #32]	; (81012a8 <ADE9000_SPI_Read_16+0x60>)
 8101286:	f003 fef3 	bl	8105070 <HAL_SPI_Receive>
 810128a:	4603      	mov	r3, r0
 810128c:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 810128e:	2201      	movs	r2, #1
 8101290:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101294:	4803      	ldr	r0, [pc, #12]	; (81012a4 <ADE9000_SPI_Read_16+0x5c>)
 8101296:	f001 fdef 	bl	8102e78 <HAL_GPIO_WritePin>

	return data.data_16;
 810129a:	89bb      	ldrh	r3, [r7, #12]
}
 810129c:	4618      	mov	r0, r3
 810129e:	3710      	adds	r7, #16
 81012a0:	46bd      	mov	sp, r7
 81012a2:	bd80      	pop	{r7, pc}
 81012a4:	58021800 	.word	0x58021800
 81012a8:	1001047c 	.word	0x1001047c

081012ac <ADE9000_SPI_Read_32>:


uint32_t ADE9000_SPI_Read_32(uint16_t Address){
 81012ac:	b580      	push	{r7, lr}
 81012ae:	b086      	sub	sp, #24
 81012b0:	af00      	add	r7, sp, #0
 81012b2:	4603      	mov	r3, r0
 81012b4:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 81012b6:	88fb      	ldrh	r3, [r7, #6]
 81012b8:	011b      	lsls	r3, r3, #4
 81012ba:	b29b      	uxth	r3, r3
 81012bc:	3308      	adds	r3, #8
 81012be:	b29b      	uxth	r3, r3
 81012c0:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81012c2:	2200      	movs	r2, #0
 81012c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 81012c8:	4814      	ldr	r0, [pc, #80]	; (810131c <ADE9000_SPI_Read_32+0x70>)
 81012ca:	f001 fdd5 	bl	8102e78 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81012ce:	f107 010c 	add.w	r1, r7, #12
 81012d2:	2364      	movs	r3, #100	; 0x64
 81012d4:	2201      	movs	r2, #1
 81012d6:	4812      	ldr	r0, [pc, #72]	; (8101320 <ADE9000_SPI_Read_32+0x74>)
 81012d8:	f003 fcdc 	bl	8104c94 <HAL_SPI_Transmit>
 81012dc:	4603      	mov	r3, r0
 81012de:	75fb      	strb	r3, [r7, #23]

	//Receive data
	ret = HAL_SPI_Receive(&hspi1,data.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81012e0:	f107 0110 	add.w	r1, r7, #16
 81012e4:	3102      	adds	r1, #2
 81012e6:	2364      	movs	r3, #100	; 0x64
 81012e8:	2201      	movs	r2, #1
 81012ea:	480d      	ldr	r0, [pc, #52]	; (8101320 <ADE9000_SPI_Read_32+0x74>)
 81012ec:	f003 fec0 	bl	8105070 <HAL_SPI_Receive>
 81012f0:	4603      	mov	r3, r0
 81012f2:	75fb      	strb	r3, [r7, #23]
	ret = HAL_SPI_Receive(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81012f4:	f107 0110 	add.w	r1, r7, #16
 81012f8:	2364      	movs	r3, #100	; 0x64
 81012fa:	2201      	movs	r2, #1
 81012fc:	4808      	ldr	r0, [pc, #32]	; (8101320 <ADE9000_SPI_Read_32+0x74>)
 81012fe:	f003 feb7 	bl	8105070 <HAL_SPI_Receive>
 8101302:	4603      	mov	r3, r0
 8101304:	75fb      	strb	r3, [r7, #23]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101306:	2201      	movs	r2, #1
 8101308:	f44f 7100 	mov.w	r1, #512	; 0x200
 810130c:	4803      	ldr	r0, [pc, #12]	; (810131c <ADE9000_SPI_Read_32+0x70>)
 810130e:	f001 fdb3 	bl	8102e78 <HAL_GPIO_WritePin>

	return data.data_32;
 8101312:	693b      	ldr	r3, [r7, #16]
}
 8101314:	4618      	mov	r0, r3
 8101316:	3718      	adds	r7, #24
 8101318:	46bd      	mov	sp, r7
 810131a:	bd80      	pop	{r7, pc}
 810131c:	58021800 	.word	0x58021800
 8101320:	1001047c 	.word	0x1001047c

08101324 <ADE9000_SPI_Write_16>:

void ADE9000_SPI_Write_16(uint16_t Address, uint16_t Data){
 8101324:	b580      	push	{r7, lr}
 8101326:	b084      	sub	sp, #16
 8101328:	af00      	add	r7, sp, #0
 810132a:	4603      	mov	r3, r0
 810132c:	460a      	mov	r2, r1
 810132e:	80fb      	strh	r3, [r7, #6]
 8101330:	4613      	mov	r3, r2
 8101332:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8101334:	88fb      	ldrh	r3, [r7, #6]
 8101336:	011b      	lsls	r3, r3, #4
 8101338:	b29b      	uxth	r3, r3
 810133a:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 810133c:	2200      	movs	r2, #0
 810133e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101342:	4810      	ldr	r0, [pc, #64]	; (8101384 <ADE9000_SPI_Write_16+0x60>)
 8101344:	f001 fd98 	bl	8102e78 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101348:	f107 010c 	add.w	r1, r7, #12
 810134c:	2364      	movs	r3, #100	; 0x64
 810134e:	2201      	movs	r2, #1
 8101350:	480d      	ldr	r0, [pc, #52]	; (8101388 <ADE9000_SPI_Write_16+0x64>)
 8101352:	f003 fc9f 	bl	8104c94 <HAL_SPI_Transmit>
 8101356:	4603      	mov	r3, r0
 8101358:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_16 = Data;
 810135a:	88bb      	ldrh	r3, [r7, #4]
 810135c:	813b      	strh	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 810135e:	f107 0108 	add.w	r1, r7, #8
 8101362:	2364      	movs	r3, #100	; 0x64
 8101364:	2201      	movs	r2, #1
 8101366:	4808      	ldr	r0, [pc, #32]	; (8101388 <ADE9000_SPI_Write_16+0x64>)
 8101368:	f003 fc94 	bl	8104c94 <HAL_SPI_Transmit>
 810136c:	4603      	mov	r3, r0
 810136e:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 8101370:	2201      	movs	r2, #1
 8101372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101376:	4803      	ldr	r0, [pc, #12]	; (8101384 <ADE9000_SPI_Write_16+0x60>)
 8101378:	f001 fd7e 	bl	8102e78 <HAL_GPIO_WritePin>

}
 810137c:	bf00      	nop
 810137e:	3710      	adds	r7, #16
 8101380:	46bd      	mov	sp, r7
 8101382:	bd80      	pop	{r7, pc}
 8101384:	58021800 	.word	0x58021800
 8101388:	1001047c 	.word	0x1001047c

0810138c <ADE9000_SPI_Write_32>:

void ADE9000_SPI_Write_32(uint16_t Address, uint32_t Data){
 810138c:	b580      	push	{r7, lr}
 810138e:	b084      	sub	sp, #16
 8101390:	af00      	add	r7, sp, #0
 8101392:	4603      	mov	r3, r0
 8101394:	6039      	str	r1, [r7, #0]
 8101396:	80fb      	strh	r3, [r7, #6]
	union ADE_DATA_32 data;
	HAL_StatusTypeDef ret;

	//Address for write
	// addr|R/W(1/0)|000
	addr.data_16 = ((Address <<4) & 0xFFF0);
 8101398:	88fb      	ldrh	r3, [r7, #6]
 810139a:	011b      	lsls	r3, r3, #4
 810139c:	b29b      	uxth	r3, r3
 810139e:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 81013a0:	2200      	movs	r2, #0
 81013a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 81013a6:	4815      	ldr	r0, [pc, #84]	; (81013fc <ADE9000_SPI_Write_32+0x70>)
 81013a8:	f001 fd66 	bl	8102e78 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 81013ac:	f107 010c 	add.w	r1, r7, #12
 81013b0:	2364      	movs	r3, #100	; 0x64
 81013b2:	2201      	movs	r2, #1
 81013b4:	4812      	ldr	r0, [pc, #72]	; (8101400 <ADE9000_SPI_Write_32+0x74>)
 81013b6:	f003 fc6d 	bl	8104c94 <HAL_SPI_Transmit>
 81013ba:	4603      	mov	r3, r0
 81013bc:	73fb      	strb	r3, [r7, #15]

	//Send data
	data.data_32 = Data;
 81013be:	683b      	ldr	r3, [r7, #0]
 81013c0:	60bb      	str	r3, [r7, #8]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8 +2,SIZE_16,TIMEOUT_SPI);
 81013c2:	f107 0108 	add.w	r1, r7, #8
 81013c6:	3102      	adds	r1, #2
 81013c8:	2364      	movs	r3, #100	; 0x64
 81013ca:	2201      	movs	r2, #1
 81013cc:	480c      	ldr	r0, [pc, #48]	; (8101400 <ADE9000_SPI_Write_32+0x74>)
 81013ce:	f003 fc61 	bl	8104c94 <HAL_SPI_Transmit>
 81013d2:	4603      	mov	r3, r0
 81013d4:	73fb      	strb	r3, [r7, #15]
	ret = HAL_SPI_Transmit(&hspi1,data.data_8,SIZE_16,TIMEOUT_SPI);
 81013d6:	f107 0108 	add.w	r1, r7, #8
 81013da:	2364      	movs	r3, #100	; 0x64
 81013dc:	2201      	movs	r2, #1
 81013de:	4808      	ldr	r0, [pc, #32]	; (8101400 <ADE9000_SPI_Write_32+0x74>)
 81013e0:	f003 fc58 	bl	8104c94 <HAL_SPI_Transmit>
 81013e4:	4603      	mov	r3, r0
 81013e6:	73fb      	strb	r3, [r7, #15]

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81013e8:	2201      	movs	r2, #1
 81013ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 81013ee:	4803      	ldr	r0, [pc, #12]	; (81013fc <ADE9000_SPI_Write_32+0x70>)
 81013f0:	f001 fd42 	bl	8102e78 <HAL_GPIO_WritePin>

}
 81013f4:	bf00      	nop
 81013f6:	3710      	adds	r7, #16
 81013f8:	46bd      	mov	sp, r7
 81013fa:	bd80      	pop	{r7, pc}
 81013fc:	58021800 	.word	0x58021800
 8101400:	1001047c 	.word	0x1001047c

08101404 <Start_Waveform_Buffer>:


void Start_Waveform_Buffer() {
 8101404:	b580      	push	{r7, lr}
 8101406:	b082      	sub	sp, #8
 8101408:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 810140a:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810140e:	f7ff ff1b 	bl	8101248 <ADE9000_SPI_Read_16>
 8101412:	4603      	mov	r3, r0
 8101414:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16|0x0010);
 8101416:	88fb      	ldrh	r3, [r7, #6]
 8101418:	f043 0310 	orr.w	r3, r3, #16
 810141c:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 810141e:	88fb      	ldrh	r3, [r7, #6]
 8101420:	4619      	mov	r1, r3
 8101422:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101426:	f7ff ff7d 	bl	8101324 <ADE9000_SPI_Write_16>
}
 810142a:	bf00      	nop
 810142c:	3708      	adds	r7, #8
 810142e:	46bd      	mov	sp, r7
 8101430:	bd80      	pop	{r7, pc}

08101432 <Stop_Waveform_Buffer>:

void Stop_Waveform_Buffer(){
 8101432:	b580      	push	{r7, lr}
 8101434:	b082      	sub	sp, #8
 8101436:	af00      	add	r7, sp, #0
	uint16_t value_reg_16;
	value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_CFG);
 8101438:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 810143c:	f7ff ff04 	bl	8101248 <ADE9000_SPI_Read_16>
 8101440:	4603      	mov	r3, r0
 8101442:	80fb      	strh	r3, [r7, #6]
	value_reg_16 = (value_reg_16 & 0xFFEF);
 8101444:	88fb      	ldrh	r3, [r7, #6]
 8101446:	f023 0310 	bic.w	r3, r3, #16
 810144a:	80fb      	strh	r3, [r7, #6]
	ADE9000_SPI_Write_16(ADDR_WFB_CFG ,value_reg_16);
 810144c:	88fb      	ldrh	r3, [r7, #6]
 810144e:	4619      	mov	r1, r3
 8101450:	f44f 6094 	mov.w	r0, #1184	; 0x4a0
 8101454:	f7ff ff66 	bl	8101324 <ADE9000_SPI_Write_16>
}
 8101458:	bf00      	nop
 810145a:	3708      	adds	r7, #8
 810145c:	46bd      	mov	sp, r7
 810145e:	bd80      	pop	{r7, pc}

08101460 <ADE9000_SPI_Burst_Read_one_ch>:
	printf("ADDR_VLEVEL = %x \r\n",  data_32);


}

void ADE9000_SPI_Burst_Read_one_ch(uint16_t Address, uint16_t n, int32_t* data){
 8101460:	b580      	push	{r7, lr}
 8101462:	b086      	sub	sp, #24
 8101464:	af00      	add	r7, sp, #0
 8101466:	4603      	mov	r3, r0
 8101468:	603a      	str	r2, [r7, #0]
 810146a:	80fb      	strh	r3, [r7, #6]
 810146c:	460b      	mov	r3, r1
 810146e:	80bb      	strh	r3, [r7, #4]
	union ADE_DATA_16 addr;
	HAL_StatusTypeDef ret;

	//Address for read
	// addr|R/W(1/0)|000
	addr.data_16 = (((Address <<4) & 0xFFF0)+8);
 8101470:	88fb      	ldrh	r3, [r7, #6]
 8101472:	011b      	lsls	r3, r3, #4
 8101474:	b29b      	uxth	r3, r3
 8101476:	3308      	adds	r3, #8
 8101478:	b29b      	uxth	r3, r3
 810147a:	81bb      	strh	r3, [r7, #12]

	//CS on
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_RESET);
 810147c:	2200      	movs	r2, #0
 810147e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8101482:	481d      	ldr	r0, [pc, #116]	; (81014f8 <ADE9000_SPI_Burst_Read_one_ch+0x98>)
 8101484:	f001 fcf8 	bl	8102e78 <HAL_GPIO_WritePin>

	//Send address
	ret = HAL_SPI_Transmit(&hspi1,addr.data_8,SIZE_16,TIMEOUT_SPI);
 8101488:	f107 010c 	add.w	r1, r7, #12
 810148c:	2364      	movs	r3, #100	; 0x64
 810148e:	2201      	movs	r2, #1
 8101490:	481a      	ldr	r0, [pc, #104]	; (81014fc <ADE9000_SPI_Burst_Read_one_ch+0x9c>)
 8101492:	f003 fbff 	bl	8104c94 <HAL_SPI_Transmit>
 8101496:	4603      	mov	r3, r0
 8101498:	757b      	strb	r3, [r7, #21]

	for(uint16_t i=0; i<n; i++){
 810149a:	2300      	movs	r3, #0
 810149c:	82fb      	strh	r3, [r7, #22]
 810149e:	e01c      	b.n	81014da <ADE9000_SPI_Burst_Read_one_ch+0x7a>
		//Receive data
		ret = HAL_SPI_Receive(&hspi1,app.data_8 + 2,SIZE_16,TIMEOUT_SPI);
 81014a0:	f107 0110 	add.w	r1, r7, #16
 81014a4:	3102      	adds	r1, #2
 81014a6:	2364      	movs	r3, #100	; 0x64
 81014a8:	2201      	movs	r2, #1
 81014aa:	4814      	ldr	r0, [pc, #80]	; (81014fc <ADE9000_SPI_Burst_Read_one_ch+0x9c>)
 81014ac:	f003 fde0 	bl	8105070 <HAL_SPI_Receive>
 81014b0:	4603      	mov	r3, r0
 81014b2:	757b      	strb	r3, [r7, #21]
		ret = HAL_SPI_Receive(&hspi1,app.data_8,SIZE_16,TIMEOUT_SPI);
 81014b4:	f107 0110 	add.w	r1, r7, #16
 81014b8:	2364      	movs	r3, #100	; 0x64
 81014ba:	2201      	movs	r2, #1
 81014bc:	480f      	ldr	r0, [pc, #60]	; (81014fc <ADE9000_SPI_Burst_Read_one_ch+0x9c>)
 81014be:	f003 fdd7 	bl	8105070 <HAL_SPI_Receive>
 81014c2:	4603      	mov	r3, r0
 81014c4:	757b      	strb	r3, [r7, #21]
		*(data + i)= app.data_32;
 81014c6:	6939      	ldr	r1, [r7, #16]
 81014c8:	8afb      	ldrh	r3, [r7, #22]
 81014ca:	009b      	lsls	r3, r3, #2
 81014cc:	683a      	ldr	r2, [r7, #0]
 81014ce:	4413      	add	r3, r2
 81014d0:	460a      	mov	r2, r1
 81014d2:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0; i<n; i++){
 81014d4:	8afb      	ldrh	r3, [r7, #22]
 81014d6:	3301      	adds	r3, #1
 81014d8:	82fb      	strh	r3, [r7, #22]
 81014da:	8afa      	ldrh	r2, [r7, #22]
 81014dc:	88bb      	ldrh	r3, [r7, #4]
 81014de:	429a      	cmp	r2, r3
 81014e0:	d3de      	bcc.n	81014a0 <ADE9000_SPI_Burst_Read_one_ch+0x40>
	}

	//CS off
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_9, GPIO_PIN_SET);
 81014e2:	2201      	movs	r2, #1
 81014e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 81014e8:	4803      	ldr	r0, [pc, #12]	; (81014f8 <ADE9000_SPI_Burst_Read_one_ch+0x98>)
 81014ea:	f001 fcc5 	bl	8102e78 <HAL_GPIO_WritePin>
}
 81014ee:	bf00      	nop
 81014f0:	3718      	adds	r7, #24
 81014f2:	46bd      	mov	sp, r7
 81014f4:	bd80      	pop	{r7, pc}
 81014f6:	bf00      	nop
 81014f8:	58021800 	.word	0x58021800
 81014fc:	1001047c 	.word	0x1001047c

08101500 <ADE9000_Conv_ADC_I>:
	}
	printf("errori: %d\r\n",err);

}

void ADE9000_Conv_ADC_I(union DATA *data_i, uint32_t n) {
 8101500:	b590      	push	{r4, r7, lr}
 8101502:	b085      	sub	sp, #20
 8101504:	af00      	add	r7, sp, #0
 8101506:	6078      	str	r0, [r7, #4]
 8101508:	6039      	str	r1, [r7, #0]
	if (ACQUISITION_FREQ == 32000) {
		for (uint32_t i = 0; i < n; i++) {
			data_i[i].data_float = ((float) data_i[i].data_int * V_REF / FULL_SCALE_CODE_SINC4) / FDT_I;
		}
	} else if (ACQUISITION_FREQ == 8000) {
		for (uint32_t i = 0; i < n; i++) {
 810150a:	2300      	movs	r3, #0
 810150c:	60fb      	str	r3, [r7, #12]
 810150e:	e024      	b.n	810155a <ADE9000_Conv_ADC_I+0x5a>
			data_i[i].data_float = ((float) data_i[i].data_int * V_REF / FULL_SCALE_CODE_LPF) / FDT_I;
 8101510:	68fb      	ldr	r3, [r7, #12]
 8101512:	009b      	lsls	r3, r3, #2
 8101514:	687a      	ldr	r2, [r7, #4]
 8101516:	4413      	add	r3, r2
 8101518:	681b      	ldr	r3, [r3, #0]
 810151a:	ee07 3a90 	vmov	s15, r3
 810151e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8101522:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 81015a0 <ADE9000_Conv_ADC_I+0xa0>
 8101526:	eec7 6a87 	vdiv.f32	s13, s15, s14
 810152a:	ee16 0a90 	vmov	r0, s13
 810152e:	f7ff f893 	bl	8100658 <__aeabi_f2d>
 8101532:	a319      	add	r3, pc, #100	; (adr r3, 8101598 <ADE9000_Conv_ADC_I+0x98>)
 8101534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101538:	f7ff fa10 	bl	810095c <__aeabi_ddiv>
 810153c:	4602      	mov	r2, r0
 810153e:	460b      	mov	r3, r1
 8101540:	4610      	mov	r0, r2
 8101542:	4619      	mov	r1, r3
 8101544:	68fb      	ldr	r3, [r7, #12]
 8101546:	009b      	lsls	r3, r3, #2
 8101548:	687a      	ldr	r2, [r7, #4]
 810154a:	18d4      	adds	r4, r2, r3
 810154c:	f7ff fbd4 	bl	8100cf8 <__aeabi_d2f>
 8101550:	4603      	mov	r3, r0
 8101552:	6023      	str	r3, [r4, #0]
		for (uint32_t i = 0; i < n; i++) {
 8101554:	68fb      	ldr	r3, [r7, #12]
 8101556:	3301      	adds	r3, #1
 8101558:	60fb      	str	r3, [r7, #12]
 810155a:	68fa      	ldr	r2, [r7, #12]
 810155c:	683b      	ldr	r3, [r7, #0]
 810155e:	429a      	cmp	r2, r3
 8101560:	d3d6      	bcc.n	8101510 <ADE9000_Conv_ADC_I+0x10>
		}
	}

	for (uint32_t i = 0; i < n; i++) {
 8101562:	2300      	movs	r3, #0
 8101564:	60bb      	str	r3, [r7, #8]
 8101566:	e00c      	b.n	8101582 <ADE9000_Conv_ADC_I+0x82>
				data_i[i].data_float = (data_i[i].data_float - OFFSET_I)*GAIN_I;
 8101568:	68bb      	ldr	r3, [r7, #8]
 810156a:	009b      	lsls	r3, r3, #2
 810156c:	687a      	ldr	r2, [r7, #4]
 810156e:	441a      	add	r2, r3
 8101570:	68bb      	ldr	r3, [r7, #8]
 8101572:	009b      	lsls	r3, r3, #2
 8101574:	6879      	ldr	r1, [r7, #4]
 8101576:	440b      	add	r3, r1
 8101578:	6812      	ldr	r2, [r2, #0]
 810157a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < n; i++) {
 810157c:	68bb      	ldr	r3, [r7, #8]
 810157e:	3301      	adds	r3, #1
 8101580:	60bb      	str	r3, [r7, #8]
 8101582:	68ba      	ldr	r2, [r7, #8]
 8101584:	683b      	ldr	r3, [r7, #0]
 8101586:	429a      	cmp	r2, r3
 8101588:	d3ee      	bcc.n	8101568 <ADE9000_Conv_ADC_I+0x68>
	}


}
 810158a:	bf00      	nop
 810158c:	bf00      	nop
 810158e:	3714      	adds	r7, #20
 8101590:	46bd      	mov	sp, r7
 8101592:	bd90      	pop	{r4, r7, pc}
 8101594:	f3af 8000 	nop.w
 8101598:	19ce075f 	.word	0x19ce075f
 810159c:	3f7bda51 	.word	0x3f7bda51
 81015a0:	4c8e0fb0 	.word	0x4c8e0fb0

081015a4 <FD_Wavedec_sym>:
		}
	}
}


void FD_Wavedec_sym(float* dec, uint16_t* dec_dim, float* y){
 81015a4:	b480      	push	{r7}
 81015a6:	b08b      	sub	sp, #44	; 0x2c
 81015a8:	af00      	add	r7, sp, #0
 81015aa:	60f8      	str	r0, [r7, #12]
 81015ac:	60b9      	str	r1, [r7, #8]
 81015ae:	607a      	str	r2, [r7, #4]
	uint16_t dim_y = N_SAMPLE;
 81015b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81015b4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t dim_conv = dim_y + DIM_FILTER_WAVELET - 1;
 81015b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81015b8:	3309      	adds	r3, #9
 81015ba:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t dim_coeff = (int)dim_conv/2;
 81015bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81015be:	085b      	lsrs	r3, r3, #1
 81015c0:	847b      	strh	r3, [r7, #34]	; 0x22

	uint16_t index_border;

	uint16_t index_dec = 0;
 81015c2:	2300      	movs	r3, #0
 81015c4:	843b      	strh	r3, [r7, #32]

	for(int16_t k =0;k<N_DEC_WAVELET;k++){
 81015c6:	2300      	movs	r3, #0
 81015c8:	83fb      	strh	r3, [r7, #30]
 81015ca:	e00d      	b.n	81015e8 <FD_Wavedec_sym+0x44>
		dec[k]=0;
 81015cc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 81015d0:	009b      	lsls	r3, r3, #2
 81015d2:	68fa      	ldr	r2, [r7, #12]
 81015d4:	4413      	add	r3, r2
 81015d6:	f04f 0200 	mov.w	r2, #0
 81015da:	601a      	str	r2, [r3, #0]
	for(int16_t k =0;k<N_DEC_WAVELET;k++){
 81015dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 81015e0:	b29b      	uxth	r3, r3
 81015e2:	3301      	adds	r3, #1
 81015e4:	b29b      	uxth	r3, r3
 81015e6:	83fb      	strh	r3, [r7, #30]
 81015e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 81015ec:	f242 0250 	movw	r2, #8272	; 0x2050
 81015f0:	4293      	cmp	r3, r2
 81015f2:	ddeb      	ble.n	81015cc <FD_Wavedec_sym+0x28>
	}

	for(uint16_t k=0; k<N_LEVEL_WAVELET; k++){
 81015f4:	2300      	movs	r3, #0
 81015f6:	83bb      	strh	r3, [r7, #28]
 81015f8:	e18d      	b.n	8101916 <FD_Wavedec_sym+0x372>
		//DIM
		Wavelet_dec_dim[k]=dim_coeff;
 81015fa:	8bbb      	ldrh	r3, [r7, #28]
 81015fc:	49b0      	ldr	r1, [pc, #704]	; (81018c0 <FD_Wavedec_sym+0x31c>)
 81015fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8101600:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

		//DETT
		for (uint16_t i = 0; i < dim_conv; i++) {
 8101604:	2300      	movs	r3, #0
 8101606:	837b      	strh	r3, [r7, #26]
 8101608:	e0a0      	b.n	810174c <FD_Wavedec_sym+0x1a8>
			for (uint16_t j = 0; j < DIM_FILTER_WAVELET; j++) {
 810160a:	2300      	movs	r3, #0
 810160c:	833b      	strh	r3, [r7, #24]
 810160e:	e096      	b.n	810173e <FD_Wavedec_sym+0x19a>
				if ((i % 2) == 1) { //downsampling (solo pari matlab(da 1)=solo dispari in C (da 0))
 8101610:	8b7b      	ldrh	r3, [r7, #26]
 8101612:	f003 0301 	and.w	r3, r3, #1
 8101616:	b29b      	uxth	r3, r3
 8101618:	2b00      	cmp	r3, #0
 810161a:	f000 808d 	beq.w	8101738 <FD_Wavedec_sym+0x194>
					if((i-j)<0){ //gestire primi elementi
 810161e:	8b7a      	ldrh	r2, [r7, #26]
 8101620:	8b3b      	ldrh	r3, [r7, #24]
 8101622:	1ad3      	subs	r3, r2, r3
 8101624:	2b00      	cmp	r3, #0
 8101626:	da2a      	bge.n	810167e <FD_Wavedec_sym+0xda>
						index_border = -(i-j)-1;
 8101628:	8b3a      	ldrh	r2, [r7, #24]
 810162a:	8b7b      	ldrh	r3, [r7, #26]
 810162c:	1ad3      	subs	r3, r2, r3
 810162e:	b29b      	uxth	r3, r3
 8101630:	3b01      	subs	r3, #1
 8101632:	823b      	strh	r3, [r7, #16]
						dec[index_dec+i/2] = dec[index_dec+i/2] + y[index_border] * HiD[j];
 8101634:	8c3b      	ldrh	r3, [r7, #32]
 8101636:	8b7a      	ldrh	r2, [r7, #26]
 8101638:	0852      	lsrs	r2, r2, #1
 810163a:	b292      	uxth	r2, r2
 810163c:	4413      	add	r3, r2
 810163e:	009b      	lsls	r3, r3, #2
 8101640:	68fa      	ldr	r2, [r7, #12]
 8101642:	4413      	add	r3, r2
 8101644:	ed93 7a00 	vldr	s14, [r3]
 8101648:	8a3b      	ldrh	r3, [r7, #16]
 810164a:	009b      	lsls	r3, r3, #2
 810164c:	687a      	ldr	r2, [r7, #4]
 810164e:	4413      	add	r3, r2
 8101650:	edd3 6a00 	vldr	s13, [r3]
 8101654:	8b3b      	ldrh	r3, [r7, #24]
 8101656:	4a9b      	ldr	r2, [pc, #620]	; (81018c4 <FD_Wavedec_sym+0x320>)
 8101658:	009b      	lsls	r3, r3, #2
 810165a:	4413      	add	r3, r2
 810165c:	edd3 7a00 	vldr	s15, [r3]
 8101660:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101664:	8c3b      	ldrh	r3, [r7, #32]
 8101666:	8b7a      	ldrh	r2, [r7, #26]
 8101668:	0852      	lsrs	r2, r2, #1
 810166a:	b292      	uxth	r2, r2
 810166c:	4413      	add	r3, r2
 810166e:	009b      	lsls	r3, r3, #2
 8101670:	68fa      	ldr	r2, [r7, #12]
 8101672:	4413      	add	r3, r2
 8101674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101678:	edc3 7a00 	vstr	s15, [r3]
 810167c:	e05c      	b.n	8101738 <FD_Wavedec_sym+0x194>
					} else if((i-j)>=dim_y){ //gestire ultimi elementi
 810167e:	8b7a      	ldrh	r2, [r7, #26]
 8101680:	8b3b      	ldrh	r3, [r7, #24]
 8101682:	1ad2      	subs	r2, r2, r3
 8101684:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101686:	429a      	cmp	r2, r3
 8101688:	db30      	blt.n	81016ec <FD_Wavedec_sym+0x148>
						index_border = (dim_y-1)-((i-j)-dim_y);
 810168a:	8b3a      	ldrh	r2, [r7, #24]
 810168c:	8b7b      	ldrh	r3, [r7, #26]
 810168e:	1ad3      	subs	r3, r2, r3
 8101690:	b29a      	uxth	r2, r3
 8101692:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101694:	4413      	add	r3, r2
 8101696:	b29a      	uxth	r2, r3
 8101698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 810169a:	4413      	add	r3, r2
 810169c:	b29b      	uxth	r3, r3
 810169e:	3b01      	subs	r3, #1
 81016a0:	823b      	strh	r3, [r7, #16]
						dec[index_dec+i/2] = dec[index_dec+i/2] + y[index_border] * HiD[j];
 81016a2:	8c3b      	ldrh	r3, [r7, #32]
 81016a4:	8b7a      	ldrh	r2, [r7, #26]
 81016a6:	0852      	lsrs	r2, r2, #1
 81016a8:	b292      	uxth	r2, r2
 81016aa:	4413      	add	r3, r2
 81016ac:	009b      	lsls	r3, r3, #2
 81016ae:	68fa      	ldr	r2, [r7, #12]
 81016b0:	4413      	add	r3, r2
 81016b2:	ed93 7a00 	vldr	s14, [r3]
 81016b6:	8a3b      	ldrh	r3, [r7, #16]
 81016b8:	009b      	lsls	r3, r3, #2
 81016ba:	687a      	ldr	r2, [r7, #4]
 81016bc:	4413      	add	r3, r2
 81016be:	edd3 6a00 	vldr	s13, [r3]
 81016c2:	8b3b      	ldrh	r3, [r7, #24]
 81016c4:	4a7f      	ldr	r2, [pc, #508]	; (81018c4 <FD_Wavedec_sym+0x320>)
 81016c6:	009b      	lsls	r3, r3, #2
 81016c8:	4413      	add	r3, r2
 81016ca:	edd3 7a00 	vldr	s15, [r3]
 81016ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81016d2:	8c3b      	ldrh	r3, [r7, #32]
 81016d4:	8b7a      	ldrh	r2, [r7, #26]
 81016d6:	0852      	lsrs	r2, r2, #1
 81016d8:	b292      	uxth	r2, r2
 81016da:	4413      	add	r3, r2
 81016dc:	009b      	lsls	r3, r3, #2
 81016de:	68fa      	ldr	r2, [r7, #12]
 81016e0:	4413      	add	r3, r2
 81016e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 81016e6:	edc3 7a00 	vstr	s15, [r3]
 81016ea:	e025      	b.n	8101738 <FD_Wavedec_sym+0x194>
					} else {
						dec [index_dec+i/2] = dec[index_dec+i/2] + y[i-j] * HiD[j];
 81016ec:	8c3b      	ldrh	r3, [r7, #32]
 81016ee:	8b7a      	ldrh	r2, [r7, #26]
 81016f0:	0852      	lsrs	r2, r2, #1
 81016f2:	b292      	uxth	r2, r2
 81016f4:	4413      	add	r3, r2
 81016f6:	009b      	lsls	r3, r3, #2
 81016f8:	68fa      	ldr	r2, [r7, #12]
 81016fa:	4413      	add	r3, r2
 81016fc:	ed93 7a00 	vldr	s14, [r3]
 8101700:	8b7a      	ldrh	r2, [r7, #26]
 8101702:	8b3b      	ldrh	r3, [r7, #24]
 8101704:	1ad3      	subs	r3, r2, r3
 8101706:	009b      	lsls	r3, r3, #2
 8101708:	687a      	ldr	r2, [r7, #4]
 810170a:	4413      	add	r3, r2
 810170c:	edd3 6a00 	vldr	s13, [r3]
 8101710:	8b3b      	ldrh	r3, [r7, #24]
 8101712:	4a6c      	ldr	r2, [pc, #432]	; (81018c4 <FD_Wavedec_sym+0x320>)
 8101714:	009b      	lsls	r3, r3, #2
 8101716:	4413      	add	r3, r2
 8101718:	edd3 7a00 	vldr	s15, [r3]
 810171c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101720:	8c3b      	ldrh	r3, [r7, #32]
 8101722:	8b7a      	ldrh	r2, [r7, #26]
 8101724:	0852      	lsrs	r2, r2, #1
 8101726:	b292      	uxth	r2, r2
 8101728:	4413      	add	r3, r2
 810172a:	009b      	lsls	r3, r3, #2
 810172c:	68fa      	ldr	r2, [r7, #12]
 810172e:	4413      	add	r3, r2
 8101730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101734:	edc3 7a00 	vstr	s15, [r3]
			for (uint16_t j = 0; j < DIM_FILTER_WAVELET; j++) {
 8101738:	8b3b      	ldrh	r3, [r7, #24]
 810173a:	3301      	adds	r3, #1
 810173c:	833b      	strh	r3, [r7, #24]
 810173e:	8b3b      	ldrh	r3, [r7, #24]
 8101740:	2b09      	cmp	r3, #9
 8101742:	f67f af65 	bls.w	8101610 <FD_Wavedec_sym+0x6c>
		for (uint16_t i = 0; i < dim_conv; i++) {
 8101746:	8b7b      	ldrh	r3, [r7, #26]
 8101748:	3301      	adds	r3, #1
 810174a:	837b      	strh	r3, [r7, #26]
 810174c:	8b7a      	ldrh	r2, [r7, #26]
 810174e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8101750:	429a      	cmp	r2, r3
 8101752:	f4ff af5a 	bcc.w	810160a <FD_Wavedec_sym+0x66>
					}
				}
			}
		}
		//APPR
		index_dec = index_dec + dim_coeff;
 8101756:	8c3a      	ldrh	r2, [r7, #32]
 8101758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 810175a:	4413      	add	r3, r2
 810175c:	843b      	strh	r3, [r7, #32]
		for (uint16_t i = 0; i < dim_conv; i++) {
 810175e:	2300      	movs	r3, #0
 8101760:	82fb      	strh	r3, [r7, #22]
 8101762:	e0a0      	b.n	81018a6 <FD_Wavedec_sym+0x302>
			for (uint16_t j = 0; j < DIM_FILTER_WAVELET; j++) {
 8101764:	2300      	movs	r3, #0
 8101766:	82bb      	strh	r3, [r7, #20]
 8101768:	e096      	b.n	8101898 <FD_Wavedec_sym+0x2f4>
				if ((i % 2) == 1) { //downsampling (solo pari matlab(da 1)=solo dispari in C (da 0))
 810176a:	8afb      	ldrh	r3, [r7, #22]
 810176c:	f003 0301 	and.w	r3, r3, #1
 8101770:	b29b      	uxth	r3, r3
 8101772:	2b00      	cmp	r3, #0
 8101774:	f000 808d 	beq.w	8101892 <FD_Wavedec_sym+0x2ee>
					if((i-j)<0){ //gestire primi elementi
 8101778:	8afa      	ldrh	r2, [r7, #22]
 810177a:	8abb      	ldrh	r3, [r7, #20]
 810177c:	1ad3      	subs	r3, r2, r3
 810177e:	2b00      	cmp	r3, #0
 8101780:	da2a      	bge.n	81017d8 <FD_Wavedec_sym+0x234>
						index_border = -(i-j)-1;
 8101782:	8aba      	ldrh	r2, [r7, #20]
 8101784:	8afb      	ldrh	r3, [r7, #22]
 8101786:	1ad3      	subs	r3, r2, r3
 8101788:	b29b      	uxth	r3, r3
 810178a:	3b01      	subs	r3, #1
 810178c:	823b      	strh	r3, [r7, #16]
						dec[index_dec+i/2] = dec[index_dec+i/2] + y[index_border] * LoD[j];
 810178e:	8c3b      	ldrh	r3, [r7, #32]
 8101790:	8afa      	ldrh	r2, [r7, #22]
 8101792:	0852      	lsrs	r2, r2, #1
 8101794:	b292      	uxth	r2, r2
 8101796:	4413      	add	r3, r2
 8101798:	009b      	lsls	r3, r3, #2
 810179a:	68fa      	ldr	r2, [r7, #12]
 810179c:	4413      	add	r3, r2
 810179e:	ed93 7a00 	vldr	s14, [r3]
 81017a2:	8a3b      	ldrh	r3, [r7, #16]
 81017a4:	009b      	lsls	r3, r3, #2
 81017a6:	687a      	ldr	r2, [r7, #4]
 81017a8:	4413      	add	r3, r2
 81017aa:	edd3 6a00 	vldr	s13, [r3]
 81017ae:	8abb      	ldrh	r3, [r7, #20]
 81017b0:	4a45      	ldr	r2, [pc, #276]	; (81018c8 <FD_Wavedec_sym+0x324>)
 81017b2:	009b      	lsls	r3, r3, #2
 81017b4:	4413      	add	r3, r2
 81017b6:	edd3 7a00 	vldr	s15, [r3]
 81017ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81017be:	8c3b      	ldrh	r3, [r7, #32]
 81017c0:	8afa      	ldrh	r2, [r7, #22]
 81017c2:	0852      	lsrs	r2, r2, #1
 81017c4:	b292      	uxth	r2, r2
 81017c6:	4413      	add	r3, r2
 81017c8:	009b      	lsls	r3, r3, #2
 81017ca:	68fa      	ldr	r2, [r7, #12]
 81017cc:	4413      	add	r3, r2
 81017ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 81017d2:	edc3 7a00 	vstr	s15, [r3]
 81017d6:	e05c      	b.n	8101892 <FD_Wavedec_sym+0x2ee>
					} else if((i-j)>=dim_y){ //gestire ultimi elementi
 81017d8:	8afa      	ldrh	r2, [r7, #22]
 81017da:	8abb      	ldrh	r3, [r7, #20]
 81017dc:	1ad2      	subs	r2, r2, r3
 81017de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81017e0:	429a      	cmp	r2, r3
 81017e2:	db30      	blt.n	8101846 <FD_Wavedec_sym+0x2a2>
						index_border = (dim_y-1)-((i-j)-dim_y);
 81017e4:	8aba      	ldrh	r2, [r7, #20]
 81017e6:	8afb      	ldrh	r3, [r7, #22]
 81017e8:	1ad3      	subs	r3, r2, r3
 81017ea:	b29a      	uxth	r2, r3
 81017ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81017ee:	4413      	add	r3, r2
 81017f0:	b29a      	uxth	r2, r3
 81017f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 81017f4:	4413      	add	r3, r2
 81017f6:	b29b      	uxth	r3, r3
 81017f8:	3b01      	subs	r3, #1
 81017fa:	823b      	strh	r3, [r7, #16]
						dec[index_dec+i/2] = dec[index_dec+i/2] + y[index_border] * LoD[j];
 81017fc:	8c3b      	ldrh	r3, [r7, #32]
 81017fe:	8afa      	ldrh	r2, [r7, #22]
 8101800:	0852      	lsrs	r2, r2, #1
 8101802:	b292      	uxth	r2, r2
 8101804:	4413      	add	r3, r2
 8101806:	009b      	lsls	r3, r3, #2
 8101808:	68fa      	ldr	r2, [r7, #12]
 810180a:	4413      	add	r3, r2
 810180c:	ed93 7a00 	vldr	s14, [r3]
 8101810:	8a3b      	ldrh	r3, [r7, #16]
 8101812:	009b      	lsls	r3, r3, #2
 8101814:	687a      	ldr	r2, [r7, #4]
 8101816:	4413      	add	r3, r2
 8101818:	edd3 6a00 	vldr	s13, [r3]
 810181c:	8abb      	ldrh	r3, [r7, #20]
 810181e:	4a2a      	ldr	r2, [pc, #168]	; (81018c8 <FD_Wavedec_sym+0x324>)
 8101820:	009b      	lsls	r3, r3, #2
 8101822:	4413      	add	r3, r2
 8101824:	edd3 7a00 	vldr	s15, [r3]
 8101828:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810182c:	8c3b      	ldrh	r3, [r7, #32]
 810182e:	8afa      	ldrh	r2, [r7, #22]
 8101830:	0852      	lsrs	r2, r2, #1
 8101832:	b292      	uxth	r2, r2
 8101834:	4413      	add	r3, r2
 8101836:	009b      	lsls	r3, r3, #2
 8101838:	68fa      	ldr	r2, [r7, #12]
 810183a:	4413      	add	r3, r2
 810183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101840:	edc3 7a00 	vstr	s15, [r3]
 8101844:	e025      	b.n	8101892 <FD_Wavedec_sym+0x2ee>
					} else {
						dec [index_dec+i/2] = dec[index_dec+i/2] + y[i-j] * LoD[j];
 8101846:	8c3b      	ldrh	r3, [r7, #32]
 8101848:	8afa      	ldrh	r2, [r7, #22]
 810184a:	0852      	lsrs	r2, r2, #1
 810184c:	b292      	uxth	r2, r2
 810184e:	4413      	add	r3, r2
 8101850:	009b      	lsls	r3, r3, #2
 8101852:	68fa      	ldr	r2, [r7, #12]
 8101854:	4413      	add	r3, r2
 8101856:	ed93 7a00 	vldr	s14, [r3]
 810185a:	8afa      	ldrh	r2, [r7, #22]
 810185c:	8abb      	ldrh	r3, [r7, #20]
 810185e:	1ad3      	subs	r3, r2, r3
 8101860:	009b      	lsls	r3, r3, #2
 8101862:	687a      	ldr	r2, [r7, #4]
 8101864:	4413      	add	r3, r2
 8101866:	edd3 6a00 	vldr	s13, [r3]
 810186a:	8abb      	ldrh	r3, [r7, #20]
 810186c:	4a16      	ldr	r2, [pc, #88]	; (81018c8 <FD_Wavedec_sym+0x324>)
 810186e:	009b      	lsls	r3, r3, #2
 8101870:	4413      	add	r3, r2
 8101872:	edd3 7a00 	vldr	s15, [r3]
 8101876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810187a:	8c3b      	ldrh	r3, [r7, #32]
 810187c:	8afa      	ldrh	r2, [r7, #22]
 810187e:	0852      	lsrs	r2, r2, #1
 8101880:	b292      	uxth	r2, r2
 8101882:	4413      	add	r3, r2
 8101884:	009b      	lsls	r3, r3, #2
 8101886:	68fa      	ldr	r2, [r7, #12]
 8101888:	4413      	add	r3, r2
 810188a:	ee77 7a27 	vadd.f32	s15, s14, s15
 810188e:	edc3 7a00 	vstr	s15, [r3]
			for (uint16_t j = 0; j < DIM_FILTER_WAVELET; j++) {
 8101892:	8abb      	ldrh	r3, [r7, #20]
 8101894:	3301      	adds	r3, #1
 8101896:	82bb      	strh	r3, [r7, #20]
 8101898:	8abb      	ldrh	r3, [r7, #20]
 810189a:	2b09      	cmp	r3, #9
 810189c:	f67f af65 	bls.w	810176a <FD_Wavedec_sym+0x1c6>
		for (uint16_t i = 0; i < dim_conv; i++) {
 81018a0:	8afb      	ldrh	r3, [r7, #22]
 81018a2:	3301      	adds	r3, #1
 81018a4:	82fb      	strh	r3, [r7, #22]
 81018a6:	8afa      	ldrh	r2, [r7, #22]
 81018a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81018aa:	429a      	cmp	r2, r3
 81018ac:	f4ff af5a 	bcc.w	8101764 <FD_Wavedec_sym+0x1c0>
					}
				}
			}
		}

		if(!(k==N_LEVEL_WAVELET-1)){
 81018b0:	8bbb      	ldrh	r3, [r7, #28]
 81018b2:	2b09      	cmp	r3, #9
 81018b4:	d02c      	beq.n	8101910 <FD_Wavedec_sym+0x36c>
		dim_y = dim_coeff;
 81018b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 81018b8:	84fb      	strh	r3, [r7, #38]	; 0x26

		for(uint16_t i=0; i< dim_y;i++){
 81018ba:	2300      	movs	r3, #0
 81018bc:	827b      	strh	r3, [r7, #18]
 81018be:	e01d      	b.n	81018fc <FD_Wavedec_sym+0x358>
 81018c0:	10008290 	.word	0x10008290
 81018c4:	10000030 	.word	0x10000030
 81018c8:	10000008 	.word	0x10000008
			y[i] = dec[index_dec + i];
 81018cc:	8c3a      	ldrh	r2, [r7, #32]
 81018ce:	8a7b      	ldrh	r3, [r7, #18]
 81018d0:	4413      	add	r3, r2
 81018d2:	009b      	lsls	r3, r3, #2
 81018d4:	68fa      	ldr	r2, [r7, #12]
 81018d6:	441a      	add	r2, r3
 81018d8:	8a7b      	ldrh	r3, [r7, #18]
 81018da:	009b      	lsls	r3, r3, #2
 81018dc:	6879      	ldr	r1, [r7, #4]
 81018de:	440b      	add	r3, r1
 81018e0:	6812      	ldr	r2, [r2, #0]
 81018e2:	601a      	str	r2, [r3, #0]
			dec[index_dec+i]=0;
 81018e4:	8c3a      	ldrh	r2, [r7, #32]
 81018e6:	8a7b      	ldrh	r3, [r7, #18]
 81018e8:	4413      	add	r3, r2
 81018ea:	009b      	lsls	r3, r3, #2
 81018ec:	68fa      	ldr	r2, [r7, #12]
 81018ee:	4413      	add	r3, r2
 81018f0:	f04f 0200 	mov.w	r2, #0
 81018f4:	601a      	str	r2, [r3, #0]
		for(uint16_t i=0; i< dim_y;i++){
 81018f6:	8a7b      	ldrh	r3, [r7, #18]
 81018f8:	3301      	adds	r3, #1
 81018fa:	827b      	strh	r3, [r7, #18]
 81018fc:	8a7a      	ldrh	r2, [r7, #18]
 81018fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101900:	429a      	cmp	r2, r3
 8101902:	d3e3      	bcc.n	81018cc <FD_Wavedec_sym+0x328>
		}

		dim_conv = dim_y + DIM_FILTER_WAVELET - 1;
 8101904:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8101906:	3309      	adds	r3, #9
 8101908:	84bb      	strh	r3, [r7, #36]	; 0x24
		dim_coeff = (int)dim_conv/2;
 810190a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 810190c:	085b      	lsrs	r3, r3, #1
 810190e:	847b      	strh	r3, [r7, #34]	; 0x22
	for(uint16_t k=0; k<N_LEVEL_WAVELET; k++){
 8101910:	8bbb      	ldrh	r3, [r7, #28]
 8101912:	3301      	adds	r3, #1
 8101914:	83bb      	strh	r3, [r7, #28]
 8101916:	8bbb      	ldrh	r3, [r7, #28]
 8101918:	2b09      	cmp	r3, #9
 810191a:	f67f ae6e 	bls.w	81015fa <FD_Wavedec_sym+0x56>
		}
	}
}
 810191e:	bf00      	nop
 8101920:	bf00      	nop
 8101922:	372c      	adds	r7, #44	; 0x2c
 8101924:	46bd      	mov	sp, r7
 8101926:	f85d 7b04 	ldr.w	r7, [sp], #4
 810192a:	4770      	bx	lr
 810192c:	0000      	movs	r0, r0
	...

08101930 <FD_Wenergy>:

void FD_Wenergy(float* dec, uint16_t* dec_dim, float* Ea, float* Ed){
 8101930:	b5b0      	push	{r4, r5, r7, lr}
 8101932:	b08a      	sub	sp, #40	; 0x28
 8101934:	af00      	add	r7, sp, #0
 8101936:	60f8      	str	r0, [r7, #12]
 8101938:	60b9      	str	r1, [r7, #8]
 810193a:	607a      	str	r2, [r7, #4]
 810193c:	603b      	str	r3, [r7, #0]
	float tot=0;
 810193e:	f04f 0300 	mov.w	r3, #0
 8101942:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t index=0;
 8101944:	2300      	movs	r3, #0
 8101946:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t dim = 0;
 8101948:	2300      	movs	r3, #0
 810194a:	82bb      	strh	r3, [r7, #20]

	*Ea =0;
 810194c:	687b      	ldr	r3, [r7, #4]
 810194e:	f04f 0200 	mov.w	r2, #0
 8101952:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8101954:	2300      	movs	r3, #0
 8101956:	843b      	strh	r3, [r7, #32]
 8101958:	e009      	b.n	810196e <FD_Wenergy+0x3e>
		Ed[i]=0;
 810195a:	8c3b      	ldrh	r3, [r7, #32]
 810195c:	009b      	lsls	r3, r3, #2
 810195e:	683a      	ldr	r2, [r7, #0]
 8101960:	4413      	add	r3, r2
 8101962:	f04f 0200 	mov.w	r2, #0
 8101966:	601a      	str	r2, [r3, #0]
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8101968:	8c3b      	ldrh	r3, [r7, #32]
 810196a:	3301      	adds	r3, #1
 810196c:	843b      	strh	r3, [r7, #32]
 810196e:	8c3b      	ldrh	r3, [r7, #32]
 8101970:	2b09      	cmp	r3, #9
 8101972:	d9f2      	bls.n	810195a <FD_Wenergy+0x2a>
	}

	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8101974:	2300      	movs	r3, #0
 8101976:	83fb      	strh	r3, [r7, #30]
 8101978:	e044      	b.n	8101a04 <FD_Wenergy+0xd4>
		dim = dec_dim[i];
 810197a:	8bfb      	ldrh	r3, [r7, #30]
 810197c:	005b      	lsls	r3, r3, #1
 810197e:	68ba      	ldr	r2, [r7, #8]
 8101980:	4413      	add	r3, r2
 8101982:	881b      	ldrh	r3, [r3, #0]
 8101984:	82bb      	strh	r3, [r7, #20]
		for(uint16_t j=0;j<dim;j++){
 8101986:	2300      	movs	r3, #0
 8101988:	83bb      	strh	r3, [r7, #28]
 810198a:	e030      	b.n	81019ee <FD_Wenergy+0xbe>
			Ed[i]=Ed[i]+pow(dec[index+j],2);
 810198c:	8bfb      	ldrh	r3, [r7, #30]
 810198e:	009b      	lsls	r3, r3, #2
 8101990:	683a      	ldr	r2, [r7, #0]
 8101992:	4413      	add	r3, r2
 8101994:	681b      	ldr	r3, [r3, #0]
 8101996:	4618      	mov	r0, r3
 8101998:	f7fe fe5e 	bl	8100658 <__aeabi_f2d>
 810199c:	4604      	mov	r4, r0
 810199e:	460d      	mov	r5, r1
 81019a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 81019a2:	8bbb      	ldrh	r3, [r7, #28]
 81019a4:	4413      	add	r3, r2
 81019a6:	009b      	lsls	r3, r3, #2
 81019a8:	68fa      	ldr	r2, [r7, #12]
 81019aa:	4413      	add	r3, r2
 81019ac:	681b      	ldr	r3, [r3, #0]
 81019ae:	4618      	mov	r0, r3
 81019b0:	f7fe fe52 	bl	8100658 <__aeabi_f2d>
 81019b4:	4602      	mov	r2, r0
 81019b6:	460b      	mov	r3, r1
 81019b8:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8101b08 <FD_Wenergy+0x1d8>
 81019bc:	ec43 2b10 	vmov	d0, r2, r3
 81019c0:	f00a f922 	bl	810bc08 <pow>
 81019c4:	ec53 2b10 	vmov	r2, r3, d0
 81019c8:	4620      	mov	r0, r4
 81019ca:	4629      	mov	r1, r5
 81019cc:	f7fe fce6 	bl	810039c <__adddf3>
 81019d0:	4602      	mov	r2, r0
 81019d2:	460b      	mov	r3, r1
 81019d4:	4610      	mov	r0, r2
 81019d6:	4619      	mov	r1, r3
 81019d8:	8bfb      	ldrh	r3, [r7, #30]
 81019da:	009b      	lsls	r3, r3, #2
 81019dc:	683a      	ldr	r2, [r7, #0]
 81019de:	18d4      	adds	r4, r2, r3
 81019e0:	f7ff f98a 	bl	8100cf8 <__aeabi_d2f>
 81019e4:	4603      	mov	r3, r0
 81019e6:	6023      	str	r3, [r4, #0]
		for(uint16_t j=0;j<dim;j++){
 81019e8:	8bbb      	ldrh	r3, [r7, #28]
 81019ea:	3301      	adds	r3, #1
 81019ec:	83bb      	strh	r3, [r7, #28]
 81019ee:	8bba      	ldrh	r2, [r7, #28]
 81019f0:	8abb      	ldrh	r3, [r7, #20]
 81019f2:	429a      	cmp	r2, r3
 81019f4:	d3ca      	bcc.n	810198c <FD_Wenergy+0x5c>
		}
		index = index + dim;
 81019f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 81019f8:	8abb      	ldrh	r3, [r7, #20]
 81019fa:	4413      	add	r3, r2
 81019fc:	847b      	strh	r3, [r7, #34]	; 0x22
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 81019fe:	8bfb      	ldrh	r3, [r7, #30]
 8101a00:	3301      	adds	r3, #1
 8101a02:	83fb      	strh	r3, [r7, #30]
 8101a04:	8bfb      	ldrh	r3, [r7, #30]
 8101a06:	2b09      	cmp	r3, #9
 8101a08:	d9b7      	bls.n	810197a <FD_Wenergy+0x4a>
	}

	dim = dec_dim[N_LEVEL_WAVELET-1];
 8101a0a:	68bb      	ldr	r3, [r7, #8]
 8101a0c:	8a5b      	ldrh	r3, [r3, #18]
 8101a0e:	82bb      	strh	r3, [r7, #20]
	for(uint16_t j=0;j<dim;j++){
 8101a10:	2300      	movs	r3, #0
 8101a12:	837b      	strh	r3, [r7, #26]
 8101a14:	e02a      	b.n	8101a6c <FD_Wenergy+0x13c>
		*Ea=*Ea+pow(dec[index+j],2);
 8101a16:	687b      	ldr	r3, [r7, #4]
 8101a18:	681b      	ldr	r3, [r3, #0]
 8101a1a:	4618      	mov	r0, r3
 8101a1c:	f7fe fe1c 	bl	8100658 <__aeabi_f2d>
 8101a20:	4604      	mov	r4, r0
 8101a22:	460d      	mov	r5, r1
 8101a24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8101a26:	8b7b      	ldrh	r3, [r7, #26]
 8101a28:	4413      	add	r3, r2
 8101a2a:	009b      	lsls	r3, r3, #2
 8101a2c:	68fa      	ldr	r2, [r7, #12]
 8101a2e:	4413      	add	r3, r2
 8101a30:	681b      	ldr	r3, [r3, #0]
 8101a32:	4618      	mov	r0, r3
 8101a34:	f7fe fe10 	bl	8100658 <__aeabi_f2d>
 8101a38:	4602      	mov	r2, r0
 8101a3a:	460b      	mov	r3, r1
 8101a3c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8101b08 <FD_Wenergy+0x1d8>
 8101a40:	ec43 2b10 	vmov	d0, r2, r3
 8101a44:	f00a f8e0 	bl	810bc08 <pow>
 8101a48:	ec53 2b10 	vmov	r2, r3, d0
 8101a4c:	4620      	mov	r0, r4
 8101a4e:	4629      	mov	r1, r5
 8101a50:	f7fe fca4 	bl	810039c <__adddf3>
 8101a54:	4602      	mov	r2, r0
 8101a56:	460b      	mov	r3, r1
 8101a58:	4610      	mov	r0, r2
 8101a5a:	4619      	mov	r1, r3
 8101a5c:	f7ff f94c 	bl	8100cf8 <__aeabi_d2f>
 8101a60:	4602      	mov	r2, r0
 8101a62:	687b      	ldr	r3, [r7, #4]
 8101a64:	601a      	str	r2, [r3, #0]
	for(uint16_t j=0;j<dim;j++){
 8101a66:	8b7b      	ldrh	r3, [r7, #26]
 8101a68:	3301      	adds	r3, #1
 8101a6a:	837b      	strh	r3, [r7, #26]
 8101a6c:	8b7a      	ldrh	r2, [r7, #26]
 8101a6e:	8abb      	ldrh	r3, [r7, #20]
 8101a70:	429a      	cmp	r2, r3
 8101a72:	d3d0      	bcc.n	8101a16 <FD_Wenergy+0xe6>
	}

	tot = *Ea;
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	681b      	ldr	r3, [r3, #0]
 8101a78:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8101a7a:	2300      	movs	r3, #0
 8101a7c:	833b      	strh	r3, [r7, #24]
 8101a7e:	e00e      	b.n	8101a9e <FD_Wenergy+0x16e>
		tot = tot + Ed[i];
 8101a80:	8b3b      	ldrh	r3, [r7, #24]
 8101a82:	009b      	lsls	r3, r3, #2
 8101a84:	683a      	ldr	r2, [r7, #0]
 8101a86:	4413      	add	r3, r2
 8101a88:	edd3 7a00 	vldr	s15, [r3]
 8101a8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101a94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8101a98:	8b3b      	ldrh	r3, [r7, #24]
 8101a9a:	3301      	adds	r3, #1
 8101a9c:	833b      	strh	r3, [r7, #24]
 8101a9e:	8b3b      	ldrh	r3, [r7, #24]
 8101aa0:	2b09      	cmp	r3, #9
 8101aa2:	d9ed      	bls.n	8101a80 <FD_Wenergy+0x150>
	}

	*Ea = 100*(*Ea)/tot;
 8101aa4:	687b      	ldr	r3, [r7, #4]
 8101aa6:	edd3 7a00 	vldr	s15, [r3]
 8101aaa:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8101b10 <FD_Wenergy+0x1e0>
 8101aae:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101ab2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101ab6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8101ac0:	2300      	movs	r3, #0
 8101ac2:	82fb      	strh	r3, [r7, #22]
 8101ac4:	e016      	b.n	8101af4 <FD_Wenergy+0x1c4>
		Ed[i] = 100*Ed[i]/tot;
 8101ac6:	8afb      	ldrh	r3, [r7, #22]
 8101ac8:	009b      	lsls	r3, r3, #2
 8101aca:	683a      	ldr	r2, [r7, #0]
 8101acc:	4413      	add	r3, r2
 8101ace:	edd3 7a00 	vldr	s15, [r3]
 8101ad2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8101b10 <FD_Wenergy+0x1e0>
 8101ad6:	ee67 6a87 	vmul.f32	s13, s15, s14
 8101ada:	8afb      	ldrh	r3, [r7, #22]
 8101adc:	009b      	lsls	r3, r3, #2
 8101ade:	683a      	ldr	r2, [r7, #0]
 8101ae0:	4413      	add	r3, r2
 8101ae2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8101ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101aea:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i=0;i<N_LEVEL_WAVELET;i++){
 8101aee:	8afb      	ldrh	r3, [r7, #22]
 8101af0:	3301      	adds	r3, #1
 8101af2:	82fb      	strh	r3, [r7, #22]
 8101af4:	8afb      	ldrh	r3, [r7, #22]
 8101af6:	2b09      	cmp	r3, #9
 8101af8:	d9e5      	bls.n	8101ac6 <FD_Wenergy+0x196>
	}
}
 8101afa:	bf00      	nop
 8101afc:	bf00      	nop
 8101afe:	3728      	adds	r7, #40	; 0x28
 8101b00:	46bd      	mov	sp, r7
 8101b02:	bdb0      	pop	{r4, r5, r7, pc}
 8101b04:	f3af 8000 	nop.w
 8101b08:	00000000 	.word	0x00000000
 8101b0c:	40000000 	.word	0x40000000
 8101b10:	42c80000 	.word	0x42c80000

08101b14 <FD_Hilbert>:



void FD_Hilbert(float* y){
 8101b14:	b590      	push	{r4, r7, lr}
 8101b16:	b091      	sub	sp, #68	; 0x44
 8101b18:	af00      	add	r7, sp, #0
 8101b1a:	6078      	str	r0, [r7, #4]

	float* FFT_r = &Wavelet_dec[0];
 8101b1c:	4b92      	ldr	r3, [pc, #584]	; (8101d68 <FD_Hilbert+0x254>)
 8101b1e:	627b      	str	r3, [r7, #36]	; 0x24
	float* FFT_i = &Wavelet_dec[N_SAMPLE/2+1];
 8101b20:	4b92      	ldr	r3, [pc, #584]	; (8101d6c <FD_Hilbert+0x258>)
 8101b22:	623b      	str	r3, [r7, #32]


	float arg, sine, cosine, fat1, fat2;

	fat1 = 2*PI/N_SAMPLE;
 8101b24:	4b92      	ldr	r3, [pc, #584]	; (8101d70 <FD_Hilbert+0x25c>)
 8101b26:	61fb      	str	r3, [r7, #28]
	//FFT
	for(uint32_t n=0;n<=N_SAMPLE/2;n++){
 8101b28:	2300      	movs	r3, #0
 8101b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101b2c:	e060      	b.n	8101bf0 <FD_Hilbert+0xdc>
		fat2 = fat1*n;
 8101b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101b30:	ee07 3a90 	vmov	s15, r3
 8101b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b38:	ed97 7a07 	vldr	s14, [r7, #28]
 8101b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b40:	edc7 7a06 	vstr	s15, [r7, #24]
		for(uint32_t h=0;h<N_SAMPLE;h++){
 8101b44:	2300      	movs	r3, #0
 8101b46:	63bb      	str	r3, [r7, #56]	; 0x38
 8101b48:	e04b      	b.n	8101be2 <FD_Hilbert+0xce>
			arg = fat2*h;
 8101b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101b4c:	ee07 3a90 	vmov	s15, r3
 8101b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101b54:	ed97 7a06 	vldr	s14, [r7, #24]
 8101b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101b5c:	edc7 7a05 	vstr	s15, [r7, #20]
			cosine = arm_cos_f32(arg);
 8101b60:	ed97 0a05 	vldr	s0, [r7, #20]
 8101b64:	f005 fa5c 	bl	8107020 <arm_cos_f32>
 8101b68:	ed87 0a03 	vstr	s0, [r7, #12]
			sine = arm_sin_f32(arg);
 8101b6c:	ed97 0a05 	vldr	s0, [r7, #20]
 8101b70:	f005 fa12 	bl	8106f98 <arm_sin_f32>
 8101b74:	ed87 0a04 	vstr	s0, [r7, #16]
		       *(FFT_r + n) += y[h]*cosine;//cos(arg);
 8101b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101b7a:	009b      	lsls	r3, r3, #2
 8101b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b7e:	4413      	add	r3, r2
 8101b80:	ed93 7a00 	vldr	s14, [r3]
 8101b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101b86:	009b      	lsls	r3, r3, #2
 8101b88:	687a      	ldr	r2, [r7, #4]
 8101b8a:	4413      	add	r3, r2
 8101b8c:	edd3 6a00 	vldr	s13, [r3]
 8101b90:	edd7 7a03 	vldr	s15, [r7, #12]
 8101b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101b9a:	009b      	lsls	r3, r3, #2
 8101b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101b9e:	4413      	add	r3, r2
 8101ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101ba4:	edc3 7a00 	vstr	s15, [r3]
		       *(FFT_i + n) += -y[h]*sine;//sin(arg);
 8101ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101baa:	009b      	lsls	r3, r3, #2
 8101bac:	6a3a      	ldr	r2, [r7, #32]
 8101bae:	4413      	add	r3, r2
 8101bb0:	ed93 7a00 	vldr	s14, [r3]
 8101bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101bb6:	009b      	lsls	r3, r3, #2
 8101bb8:	687a      	ldr	r2, [r7, #4]
 8101bba:	4413      	add	r3, r2
 8101bbc:	edd3 7a00 	vldr	s15, [r3]
 8101bc0:	eef1 6a67 	vneg.f32	s13, s15
 8101bc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8101bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101bce:	009b      	lsls	r3, r3, #2
 8101bd0:	6a3a      	ldr	r2, [r7, #32]
 8101bd2:	4413      	add	r3, r2
 8101bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101bd8:	edc3 7a00 	vstr	s15, [r3]
		for(uint32_t h=0;h<N_SAMPLE;h++){
 8101bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101bde:	3301      	adds	r3, #1
 8101be0:	63bb      	str	r3, [r7, #56]	; 0x38
 8101be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101be8:	d3af      	bcc.n	8101b4a <FD_Hilbert+0x36>
	for(uint32_t n=0;n<=N_SAMPLE/2;n++){
 8101bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101bec:	3301      	adds	r3, #1
 8101bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101bf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101bf6:	d99a      	bls.n	8101b2e <FD_Hilbert+0x1a>
		}
	}
	//DELETE NEGATIVE
	for(uint32_t n=0;n<=N_SAMPLE/2;n++){
 8101bf8:	2300      	movs	r3, #0
 8101bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8101bfc:	e025      	b.n	8101c4a <FD_Hilbert+0x136>
		if (n>0 && n<N_SAMPLE/2){
 8101bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c00:	2b00      	cmp	r3, #0
 8101c02:	d01f      	beq.n	8101c44 <FD_Hilbert+0x130>
 8101c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101c0a:	d21b      	bcs.n	8101c44 <FD_Hilbert+0x130>
			*(FFT_r + n) = 2*(*(FFT_r + n));
 8101c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c0e:	009b      	lsls	r3, r3, #2
 8101c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101c12:	4413      	add	r3, r2
 8101c14:	edd3 7a00 	vldr	s15, [r3]
 8101c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c1a:	009b      	lsls	r3, r3, #2
 8101c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101c1e:	4413      	add	r3, r2
 8101c20:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101c24:	edc3 7a00 	vstr	s15, [r3]
			*(FFT_i + n) = 2*(*(FFT_i + n));
 8101c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c2a:	009b      	lsls	r3, r3, #2
 8101c2c:	6a3a      	ldr	r2, [r7, #32]
 8101c2e:	4413      	add	r3, r2
 8101c30:	edd3 7a00 	vldr	s15, [r3]
 8101c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c36:	009b      	lsls	r3, r3, #2
 8101c38:	6a3a      	ldr	r2, [r7, #32]
 8101c3a:	4413      	add	r3, r2
 8101c3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8101c40:	edc3 7a00 	vstr	s15, [r3]
	for(uint32_t n=0;n<=N_SAMPLE/2;n++){
 8101c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c46:	3301      	adds	r3, #1
 8101c48:	637b      	str	r3, [r7, #52]	; 0x34
 8101c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101c50:	d9d5      	bls.n	8101bfe <FD_Hilbert+0xea>
		}
	}
	//IFFT and envelope
	for(uint32_t n=0;n<N_SAMPLE;n++){
 8101c52:	2300      	movs	r3, #0
 8101c54:	633b      	str	r3, [r7, #48]	; 0x30
 8101c56:	e07d      	b.n	8101d54 <FD_Hilbert+0x240>
		fat2 = fat1*n;
 8101c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101c5a:	ee07 3a90 	vmov	s15, r3
 8101c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c62:	ed97 7a07 	vldr	s14, [r7, #28]
 8101c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c6a:	edc7 7a06 	vstr	s15, [r7, #24]
		float app_i = 0;
 8101c6e:	f04f 0300 	mov.w	r3, #0
 8101c72:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(uint32_t h=0;h<=N_SAMPLE/2;h++){
 8101c74:	2300      	movs	r3, #0
 8101c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8101c78:	e035      	b.n	8101ce6 <FD_Hilbert+0x1d2>
				arg = fat2*h;
 8101c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101c7c:	ee07 3a90 	vmov	s15, r3
 8101c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101c84:	ed97 7a06 	vldr	s14, [r7, #24]
 8101c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101c8c:	edc7 7a05 	vstr	s15, [r7, #20]
				sine = arm_sin_f32(arg);
 8101c90:	ed97 0a05 	vldr	s0, [r7, #20]
 8101c94:	f005 f980 	bl	8106f98 <arm_sin_f32>
 8101c98:	ed87 0a04 	vstr	s0, [r7, #16]
				cosine = arm_cos_f32(arg);
 8101c9c:	ed97 0a05 	vldr	s0, [r7, #20]
 8101ca0:	f005 f9be 	bl	8107020 <arm_cos_f32>
 8101ca4:	ed87 0a03 	vstr	s0, [r7, #12]
			      app_i += (*(FFT_r + h))*sine + (*(FFT_i + h))*cosine;
 8101ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101caa:	009b      	lsls	r3, r3, #2
 8101cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101cae:	4413      	add	r3, r2
 8101cb0:	ed93 7a00 	vldr	s14, [r3]
 8101cb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8101cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101cbe:	009b      	lsls	r3, r3, #2
 8101cc0:	6a3a      	ldr	r2, [r7, #32]
 8101cc2:	4413      	add	r3, r2
 8101cc4:	edd3 6a00 	vldr	s13, [r3]
 8101cc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8101ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101cd4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8101cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101cdc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			for(uint32_t h=0;h<=N_SAMPLE/2;h++){
 8101ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101ce2:	3301      	adds	r3, #1
 8101ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8101ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8101cec:	d9c5      	bls.n	8101c7a <FD_Hilbert+0x166>
			}
			app_i=app_i/N_SAMPLE;
 8101cee:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8101cf2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8101d74 <FD_Hilbert+0x260>
 8101cf6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8101cfa:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
			y[n] = sqrt(app_i*app_i + y[n]*y[n]);
 8101cfe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8101d02:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8101d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d08:	009b      	lsls	r3, r3, #2
 8101d0a:	687a      	ldr	r2, [r7, #4]
 8101d0c:	4413      	add	r3, r2
 8101d0e:	edd3 6a00 	vldr	s13, [r3]
 8101d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d14:	009b      	lsls	r3, r3, #2
 8101d16:	687a      	ldr	r2, [r7, #4]
 8101d18:	4413      	add	r3, r2
 8101d1a:	edd3 7a00 	vldr	s15, [r3]
 8101d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101d26:	ee17 0a90 	vmov	r0, s15
 8101d2a:	f7fe fc95 	bl	8100658 <__aeabi_f2d>
 8101d2e:	4602      	mov	r2, r0
 8101d30:	460b      	mov	r3, r1
 8101d32:	ec43 2b10 	vmov	d0, r2, r3
 8101d36:	f00a f815 	bl	810bd64 <sqrt>
 8101d3a:	ec51 0b10 	vmov	r0, r1, d0
 8101d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d40:	009b      	lsls	r3, r3, #2
 8101d42:	687a      	ldr	r2, [r7, #4]
 8101d44:	18d4      	adds	r4, r2, r3
 8101d46:	f7fe ffd7 	bl	8100cf8 <__aeabi_d2f>
 8101d4a:	4603      	mov	r3, r0
 8101d4c:	6023      	str	r3, [r4, #0]
	for(uint32_t n=0;n<N_SAMPLE;n++){
 8101d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d50:	3301      	adds	r3, #1
 8101d52:	633b      	str	r3, [r7, #48]	; 0x30
 8101d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101d5a:	f4ff af7d 	bcc.w	8101c58 <FD_Hilbert+0x144>
	}


}
 8101d5e:	bf00      	nop
 8101d60:	bf00      	nop
 8101d62:	3744      	adds	r7, #68	; 0x44
 8101d64:	46bd      	mov	sp, r7
 8101d66:	bd90      	pop	{r4, r7, pc}
 8101d68:	100082a8 	.word	0x100082a8
 8101d6c:	1000c2ac 	.word	0x1000c2ac
 8101d70:	3a490fdb 	.word	0x3a490fdb
 8101d74:	46000000 	.word	0x46000000

08101d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101d78:	b580      	push	{r7, lr}
 8101d7a:	b088      	sub	sp, #32
 8101d7c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101d7e:	4b7a      	ldr	r3, [pc, #488]	; (8101f68 <main+0x1f0>)
 8101d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d84:	4a78      	ldr	r2, [pc, #480]	; (8101f68 <main+0x1f0>)
 8101d86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101d8e:	4b76      	ldr	r3, [pc, #472]	; (8101f68 <main+0x1f0>)
 8101d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101d98:	607b      	str	r3, [r7, #4]
 8101d9a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101d9c:	2001      	movs	r0, #1
 8101d9e:	f001 f89f 	bl	8102ee0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101da2:	f001 f929 	bl	8102ff8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101da6:	2201      	movs	r2, #1
 8101da8:	2102      	movs	r1, #2
 8101daa:	2000      	movs	r0, #0
 8101dac:	f001 f8aa 	bl	8102f04 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101db0:	4b6e      	ldr	r3, [pc, #440]	; (8101f6c <main+0x1f4>)
 8101db2:	681b      	ldr	r3, [r3, #0]
 8101db4:	091b      	lsrs	r3, r3, #4
 8101db6:	f003 030f 	and.w	r3, r3, #15
 8101dba:	2b07      	cmp	r3, #7
 8101dbc:	d108      	bne.n	8101dd0 <main+0x58>
 8101dbe:	4b6c      	ldr	r3, [pc, #432]	; (8101f70 <main+0x1f8>)
 8101dc0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101dc4:	4a6a      	ldr	r2, [pc, #424]	; (8101f70 <main+0x1f8>)
 8101dc6:	f043 0301 	orr.w	r3, r3, #1
 8101dca:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101dce:	e007      	b.n	8101de0 <main+0x68>
 8101dd0:	4b67      	ldr	r3, [pc, #412]	; (8101f70 <main+0x1f8>)
 8101dd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101dd6:	4a66      	ldr	r2, [pc, #408]	; (8101f70 <main+0x1f8>)
 8101dd8:	f043 0301 	orr.w	r3, r3, #1
 8101ddc:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101de0:	f000 fc9e 	bl	8102720 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101de4:	f000 f97e 	bl	81020e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8101de8:	f000 f930 	bl	810204c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8101dec:	f000 f8d8 	bl	8101fa0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ADE9000_Power();
 8101df0:	f7ff fa0a 	bl	8101208 <ADE9000_Power>
  //arm_rfft_fast_instance_f32 S;
  //arm_rfft_fast_init_f32(&S,N_SAMPLE);
  //arm_rfft_fast_f32(&S, y_1,yf,0);


  setvbuf( stdin, NULL, _IONBF, 0 );
 8101df4:	4b5f      	ldr	r3, [pc, #380]	; (8101f74 <main+0x1fc>)
 8101df6:	681b      	ldr	r3, [r3, #0]
 8101df8:	6858      	ldr	r0, [r3, #4]
 8101dfa:	2300      	movs	r3, #0
 8101dfc:	2202      	movs	r2, #2
 8101dfe:	2100      	movs	r1, #0
 8101e00:	f006 fafe 	bl	8108400 <setvbuf>

  ADE9000_Setup();
 8101e04:	f7ff f996 	bl	8101134 <ADE9000_Setup>


  uint16_t index = 0;
 8101e08:	2300      	movs	r3, #0
 8101e0a:	83fb      	strh	r3, [r7, #30]
  uint32_t start;
  uint32_t value_reg_32 = 0x00020000;
 8101e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8101e10:	613b      	str	r3, [r7, #16]
  uint16_t value_reg_16;

  Start_Waveform_Buffer();
 8101e12:	f7ff faf7 	bl	8101404 <Start_Waveform_Buffer>

  while(index < N_SAMPLE){
 8101e16:	e057      	b.n	8101ec8 <main+0x150>
 		  while(flag_read == 0){}
 8101e18:	bf00      	nop
 8101e1a:	4b57      	ldr	r3, [pc, #348]	; (8101f78 <main+0x200>)
 8101e1c:	f993 3000 	ldrsb.w	r3, [r3]
 8101e20:	2b00      	cmp	r3, #0
 8101e22:	d0fa      	beq.n	8101e1a <main+0xa2>

 		  flag_read = 0;
 8101e24:	4b54      	ldr	r3, [pc, #336]	; (8101f78 <main+0x200>)
 8101e26:	2200      	movs	r2, #0
 8101e28:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8101e2a:	6939      	ldr	r1, [r7, #16]
 8101e2c:	f240 4002 	movw	r0, #1026	; 0x402
 8101e30:	f7ff faac 	bl	810138c <ADE9000_SPI_Write_32>

		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 8101e34:	f240 40a3 	movw	r0, #1187	; 0x4a3
 8101e38:	f7ff fa06 	bl	8101248 <ADE9000_SPI_Read_16>
 8101e3c:	4603      	mov	r3, r0
 8101e3e:	81fb      	strh	r3, [r7, #14]
		  value_reg_16 = (value_reg_16>>12)&0x0F;
 8101e40:	89fb      	ldrh	r3, [r7, #14]
 8101e42:	0b1b      	lsrs	r3, r3, #12
 8101e44:	81fb      	strh	r3, [r7, #14]
		  printf("pg: %i\r\n",value_reg_16);
 8101e46:	89fb      	ldrh	r3, [r7, #14]
 8101e48:	4619      	mov	r1, r3
 8101e4a:	484c      	ldr	r0, [pc, #304]	; (8101f7c <main+0x204>)
 8101e4c:	f006 fa3a 	bl	81082c4 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR;
 8101e50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8101e54:	60bb      	str	r3, [r7, #8]



 		 ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,&ia[index].data_int);
 8101e56:	68bb      	ldr	r3, [r7, #8]
 8101e58:	b298      	uxth	r0, r3
 8101e5a:	8bfb      	ldrh	r3, [r7, #30]
 8101e5c:	009b      	lsls	r3, r3, #2
 8101e5e:	4a48      	ldr	r2, [pc, #288]	; (8101f80 <main+0x208>)
 8101e60:	4413      	add	r3, r2
 8101e62:	461a      	mov	r2, r3
 8101e64:	2180      	movs	r1, #128	; 0x80
 8101e66:	f7ff fafb 	bl	8101460 <ADE9000_SPI_Burst_Read_one_ch>

 		  index += BURST_READ_N;
 8101e6a:	8bfb      	ldrh	r3, [r7, #30]
 8101e6c:	3380      	adds	r3, #128	; 0x80
 8101e6e:	83fb      	strh	r3, [r7, #30]

 		  while(flag_read == 0){}
 8101e70:	bf00      	nop
 8101e72:	4b41      	ldr	r3, [pc, #260]	; (8101f78 <main+0x200>)
 8101e74:	f993 3000 	ldrsb.w	r3, [r3]
 8101e78:	2b00      	cmp	r3, #0
 8101e7a:	d0fa      	beq.n	8101e72 <main+0xfa>


 		  flag_read = 0;
 8101e7c:	4b3e      	ldr	r3, [pc, #248]	; (8101f78 <main+0x200>)
 8101e7e:	2200      	movs	r2, #0
 8101e80:	701a      	strb	r2, [r3, #0]
 		  ADE9000_SPI_Write_32(ADDR_STATUS0,value_reg_32);
 8101e82:	6939      	ldr	r1, [r7, #16]
 8101e84:	f240 4002 	movw	r0, #1026	; 0x402
 8101e88:	f7ff fa80 	bl	810138c <ADE9000_SPI_Write_32>
 		  value_reg_16 = ADE9000_SPI_Read_16(ADDR_WFB_TRG_STAT);
 8101e8c:	f240 40a3 	movw	r0, #1187	; 0x4a3
 8101e90:	f7ff f9da 	bl	8101248 <ADE9000_SPI_Read_16>
 8101e94:	4603      	mov	r3, r0
 8101e96:	81fb      	strh	r3, [r7, #14]
 		  value_reg_16 = (value_reg_16>>12)&0x0F;
 8101e98:	89fb      	ldrh	r3, [r7, #14]
 8101e9a:	0b1b      	lsrs	r3, r3, #12
 8101e9c:	81fb      	strh	r3, [r7, #14]
 		  printf("pg: %i\r\n",value_reg_16);
 8101e9e:	89fb      	ldrh	r3, [r7, #14]
 8101ea0:	4619      	mov	r1, r3
 8101ea2:	4836      	ldr	r0, [pc, #216]	; (8101f7c <main+0x204>)
 8101ea4:	f006 fa0e 	bl	81082c4 <iprintf>
 		  start = WAVEFORM_BUFFER_START_ADDR + BURST_READ_N*8;
 8101ea8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8101eac:	60bb      	str	r3, [r7, #8]


 		 ADE9000_SPI_Burst_Read_one_ch(start,BURST_READ_N,&ia[index].data_int);
 8101eae:	68bb      	ldr	r3, [r7, #8]
 8101eb0:	b298      	uxth	r0, r3
 8101eb2:	8bfb      	ldrh	r3, [r7, #30]
 8101eb4:	009b      	lsls	r3, r3, #2
 8101eb6:	4a32      	ldr	r2, [pc, #200]	; (8101f80 <main+0x208>)
 8101eb8:	4413      	add	r3, r2
 8101eba:	461a      	mov	r2, r3
 8101ebc:	2180      	movs	r1, #128	; 0x80
 8101ebe:	f7ff facf 	bl	8101460 <ADE9000_SPI_Burst_Read_one_ch>

 		 index += BURST_READ_N;
 8101ec2:	8bfb      	ldrh	r3, [r7, #30]
 8101ec4:	3380      	adds	r3, #128	; 0x80
 8101ec6:	83fb      	strh	r3, [r7, #30]
  while(index < N_SAMPLE){
 8101ec8:	8bfb      	ldrh	r3, [r7, #30]
 8101eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101ece:	d3a3      	bcc.n	8101e18 <main+0xa0>


 }
  Stop_Waveform_Buffer();
 8101ed0:	f7ff faaf 	bl	8101432 <Stop_Waveform_Buffer>


  ADE9000_Conv_ADC_I(ia,N_SAMPLE);
 8101ed4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8101ed8:	4829      	ldr	r0, [pc, #164]	; (8101f80 <main+0x208>)
 8101eda:	f7ff fb11 	bl	8101500 <ADE9000_Conv_ADC_I>

  printf("IA\r\n");
 8101ede:	4829      	ldr	r0, [pc, #164]	; (8101f84 <main+0x20c>)
 8101ee0:	f006 fa76 	bl	81083d0 <puts>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8101ee4:	2300      	movs	r3, #0
 8101ee6:	61bb      	str	r3, [r7, #24]
 8101ee8:	e00f      	b.n	8101f0a <main+0x192>
	 printf("%f\r\n",ia[i].data_float);
 8101eea:	4a25      	ldr	r2, [pc, #148]	; (8101f80 <main+0x208>)
 8101eec:	69bb      	ldr	r3, [r7, #24]
 8101eee:	009b      	lsls	r3, r3, #2
 8101ef0:	4413      	add	r3, r2
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	4618      	mov	r0, r3
 8101ef6:	f7fe fbaf 	bl	8100658 <__aeabi_f2d>
 8101efa:	4602      	mov	r2, r0
 8101efc:	460b      	mov	r3, r1
 8101efe:	4822      	ldr	r0, [pc, #136]	; (8101f88 <main+0x210>)
 8101f00:	f006 f9e0 	bl	81082c4 <iprintf>
  for(uint32_t i = 0; i<N_SAMPLE; i++){
 8101f04:	69bb      	ldr	r3, [r7, #24]
 8101f06:	3301      	adds	r3, #1
 8101f08:	61bb      	str	r3, [r7, #24]
 8101f0a:	69bb      	ldr	r3, [r7, #24]
 8101f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8101f10:	d3eb      	bcc.n	8101eea <main+0x172>
  }

  FD_Hilbert(&ia[0].data_float);
 8101f12:	481b      	ldr	r0, [pc, #108]	; (8101f80 <main+0x208>)
 8101f14:	f7ff fdfe 	bl	8101b14 <FD_Hilbert>

  //FD_Wavedec_zpd(Wavelet_dec,Wavelet_dec_dim,&ia[0].data_float);
  FD_Wavedec_sym(Wavelet_dec,Wavelet_dec_dim,&ia[0].data_float);
 8101f18:	4a19      	ldr	r2, [pc, #100]	; (8101f80 <main+0x208>)
 8101f1a:	491c      	ldr	r1, [pc, #112]	; (8101f8c <main+0x214>)
 8101f1c:	481c      	ldr	r0, [pc, #112]	; (8101f90 <main+0x218>)
 8101f1e:	f7ff fb41 	bl	81015a4 <FD_Wavedec_sym>

  printf("Dec\r\n");
 8101f22:	481c      	ldr	r0, [pc, #112]	; (8101f94 <main+0x21c>)
 8101f24:	f006 fa54 	bl	81083d0 <puts>
  for(uint32_t i = 0; i<N_DEC_WAVELET; i++){
 8101f28:	2300      	movs	r3, #0
 8101f2a:	617b      	str	r3, [r7, #20]
 8101f2c:	e00f      	b.n	8101f4e <main+0x1d6>
	  printf("%f\r\n",Wavelet_dec[i]);
 8101f2e:	4a18      	ldr	r2, [pc, #96]	; (8101f90 <main+0x218>)
 8101f30:	697b      	ldr	r3, [r7, #20]
 8101f32:	009b      	lsls	r3, r3, #2
 8101f34:	4413      	add	r3, r2
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	4618      	mov	r0, r3
 8101f3a:	f7fe fb8d 	bl	8100658 <__aeabi_f2d>
 8101f3e:	4602      	mov	r2, r0
 8101f40:	460b      	mov	r3, r1
 8101f42:	4811      	ldr	r0, [pc, #68]	; (8101f88 <main+0x210>)
 8101f44:	f006 f9be 	bl	81082c4 <iprintf>
  for(uint32_t i = 0; i<N_DEC_WAVELET; i++){
 8101f48:	697b      	ldr	r3, [r7, #20]
 8101f4a:	3301      	adds	r3, #1
 8101f4c:	617b      	str	r3, [r7, #20]
 8101f4e:	697b      	ldr	r3, [r7, #20]
 8101f50:	f242 0250 	movw	r2, #8272	; 0x2050
 8101f54:	4293      	cmp	r3, r2
 8101f56:	d9ea      	bls.n	8101f2e <main+0x1b6>
  }

  FD_Wenergy(Wavelet_dec,Wavelet_dec_dim,&Ea,Ed);
 8101f58:	4b0f      	ldr	r3, [pc, #60]	; (8101f98 <main+0x220>)
 8101f5a:	4a10      	ldr	r2, [pc, #64]	; (8101f9c <main+0x224>)
 8101f5c:	490b      	ldr	r1, [pc, #44]	; (8101f8c <main+0x214>)
 8101f5e:	480c      	ldr	r0, [pc, #48]	; (8101f90 <main+0x218>)
 8101f60:	f7ff fce6 	bl	8101930 <FD_Wenergy>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101f64:	e7fe      	b.n	8101f64 <main+0x1ec>
 8101f66:	bf00      	nop
 8101f68:	58024400 	.word	0x58024400
 8101f6c:	e000ed00 	.word	0xe000ed00
 8101f70:	58026400 	.word	0x58026400
 8101f74:	10000060 	.word	0x10000060
 8101f78:	10000254 	.word	0x10000254
 8101f7c:	0810cbd0 	.word	0x0810cbd0
 8101f80:	10000268 	.word	0x10000268
 8101f84:	0810cbdc 	.word	0x0810cbdc
 8101f88:	0810cbe0 	.word	0x0810cbe0
 8101f8c:	10008290 	.word	0x10008290
 8101f90:	100082a8 	.word	0x100082a8
 8101f94:	0810cbe8 	.word	0x0810cbe8
 8101f98:	10008268 	.word	0x10008268
 8101f9c:	100082a4 	.word	0x100082a4

08101fa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8101fa0:	b580      	push	{r7, lr}
 8101fa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8101fa4:	4b27      	ldr	r3, [pc, #156]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fa6:	4a28      	ldr	r2, [pc, #160]	; (8102048 <MX_SPI1_Init+0xa8>)
 8101fa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8101faa:	4b26      	ldr	r3, [pc, #152]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8101fb0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8101fb2:	4b24      	ldr	r3, [pc, #144]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8101fb8:	4b22      	ldr	r3, [pc, #136]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fba:	220f      	movs	r2, #15
 8101fbc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8101fbe:	4b21      	ldr	r3, [pc, #132]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fc0:	2200      	movs	r2, #0
 8101fc2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8101fc4:	4b1f      	ldr	r3, [pc, #124]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fc6:	2200      	movs	r2, #0
 8101fc8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8101fca:	4b1e      	ldr	r3, [pc, #120]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fcc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8101fd0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8101fd2:	4b1c      	ldr	r3, [pc, #112]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fd4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8101fd8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101fda:	4b1a      	ldr	r3, [pc, #104]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fdc:	2200      	movs	r2, #0
 8101fde:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8101fe0:	4b18      	ldr	r3, [pc, #96]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fe2:	2200      	movs	r2, #0
 8101fe4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8101fe6:	4b17      	ldr	r3, [pc, #92]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fe8:	2200      	movs	r2, #0
 8101fea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8101fec:	4b15      	ldr	r3, [pc, #84]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101fee:	2200      	movs	r2, #0
 8101ff0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8101ff2:	4b14      	ldr	r3, [pc, #80]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101ff4:	2200      	movs	r2, #0
 8101ff6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101ff8:	4b12      	ldr	r3, [pc, #72]	; (8102044 <MX_SPI1_Init+0xa4>)
 8101ffa:	2200      	movs	r2, #0
 8101ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101ffe:	4b11      	ldr	r3, [pc, #68]	; (8102044 <MX_SPI1_Init+0xa4>)
 8102000:	2200      	movs	r2, #0
 8102002:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8102004:	4b0f      	ldr	r3, [pc, #60]	; (8102044 <MX_SPI1_Init+0xa4>)
 8102006:	2200      	movs	r2, #0
 8102008:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810200a:	4b0e      	ldr	r3, [pc, #56]	; (8102044 <MX_SPI1_Init+0xa4>)
 810200c:	2200      	movs	r2, #0
 810200e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8102010:	4b0c      	ldr	r3, [pc, #48]	; (8102044 <MX_SPI1_Init+0xa4>)
 8102012:	2200      	movs	r2, #0
 8102014:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8102016:	4b0b      	ldr	r3, [pc, #44]	; (8102044 <MX_SPI1_Init+0xa4>)
 8102018:	2200      	movs	r2, #0
 810201a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 810201c:	4b09      	ldr	r3, [pc, #36]	; (8102044 <MX_SPI1_Init+0xa4>)
 810201e:	2200      	movs	r2, #0
 8102020:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8102022:	4b08      	ldr	r3, [pc, #32]	; (8102044 <MX_SPI1_Init+0xa4>)
 8102024:	2200      	movs	r2, #0
 8102026:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8102028:	4b06      	ldr	r3, [pc, #24]	; (8102044 <MX_SPI1_Init+0xa4>)
 810202a:	2200      	movs	r2, #0
 810202c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 810202e:	4805      	ldr	r0, [pc, #20]	; (8102044 <MX_SPI1_Init+0xa4>)
 8102030:	f002 fd2a 	bl	8104a88 <HAL_SPI_Init>
 8102034:	4603      	mov	r3, r0
 8102036:	2b00      	cmp	r3, #0
 8102038:	d001      	beq.n	810203e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 810203a:	f000 f94b 	bl	81022d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 810203e:	bf00      	nop
 8102040:	bd80      	pop	{r7, pc}
 8102042:	bf00      	nop
 8102044:	1001047c 	.word	0x1001047c
 8102048:	40013000 	.word	0x40013000

0810204c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 810204c:	b580      	push	{r7, lr}
 810204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102050:	4b22      	ldr	r3, [pc, #136]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102052:	4a23      	ldr	r2, [pc, #140]	; (81020e0 <MX_USART3_UART_Init+0x94>)
 8102054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8102056:	4b21      	ldr	r3, [pc, #132]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 810205c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810205e:	4b1f      	ldr	r3, [pc, #124]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102060:	2200      	movs	r2, #0
 8102062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102064:	4b1d      	ldr	r3, [pc, #116]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102066:	2200      	movs	r2, #0
 8102068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810206a:	4b1c      	ldr	r3, [pc, #112]	; (81020dc <MX_USART3_UART_Init+0x90>)
 810206c:	2200      	movs	r2, #0
 810206e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102070:	4b1a      	ldr	r3, [pc, #104]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102072:	220c      	movs	r2, #12
 8102074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8102076:	4b19      	ldr	r3, [pc, #100]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102078:	2200      	movs	r2, #0
 810207a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 810207c:	4b17      	ldr	r3, [pc, #92]	; (81020dc <MX_USART3_UART_Init+0x90>)
 810207e:	2200      	movs	r2, #0
 8102080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102082:	4b16      	ldr	r3, [pc, #88]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102084:	2200      	movs	r2, #0
 8102086:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8102088:	4b14      	ldr	r3, [pc, #80]	; (81020dc <MX_USART3_UART_Init+0x90>)
 810208a:	2200      	movs	r2, #0
 810208c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810208e:	4b13      	ldr	r3, [pc, #76]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102090:	2200      	movs	r2, #0
 8102092:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102094:	4811      	ldr	r0, [pc, #68]	; (81020dc <MX_USART3_UART_Init+0x90>)
 8102096:	f003 fdad 	bl	8105bf4 <HAL_UART_Init>
 810209a:	4603      	mov	r3, r0
 810209c:	2b00      	cmp	r3, #0
 810209e:	d001      	beq.n	81020a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 81020a0:	f000 f918 	bl	81022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81020a4:	2100      	movs	r1, #0
 81020a6:	480d      	ldr	r0, [pc, #52]	; (81020dc <MX_USART3_UART_Init+0x90>)
 81020a8:	f004 feac 	bl	8106e04 <HAL_UARTEx_SetTxFifoThreshold>
 81020ac:	4603      	mov	r3, r0
 81020ae:	2b00      	cmp	r3, #0
 81020b0:	d001      	beq.n	81020b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 81020b2:	f000 f90f 	bl	81022d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81020b6:	2100      	movs	r1, #0
 81020b8:	4808      	ldr	r0, [pc, #32]	; (81020dc <MX_USART3_UART_Init+0x90>)
 81020ba:	f004 fee1 	bl	8106e80 <HAL_UARTEx_SetRxFifoThreshold>
 81020be:	4603      	mov	r3, r0
 81020c0:	2b00      	cmp	r3, #0
 81020c2:	d001      	beq.n	81020c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 81020c4:	f000 f906 	bl	81022d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 81020c8:	4804      	ldr	r0, [pc, #16]	; (81020dc <MX_USART3_UART_Init+0x90>)
 81020ca:	f004 fe62 	bl	8106d92 <HAL_UARTEx_DisableFifoMode>
 81020ce:	4603      	mov	r3, r0
 81020d0:	2b00      	cmp	r3, #0
 81020d2:	d001      	beq.n	81020d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81020d4:	f000 f8fe 	bl	81022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81020d8:	bf00      	nop
 81020da:	bd80      	pop	{r7, pc}
 81020dc:	100103ec 	.word	0x100103ec
 81020e0:	40004800 	.word	0x40004800

081020e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81020e4:	b580      	push	{r7, lr}
 81020e6:	b08a      	sub	sp, #40	; 0x28
 81020e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81020ea:	f107 0314 	add.w	r3, r7, #20
 81020ee:	2200      	movs	r2, #0
 81020f0:	601a      	str	r2, [r3, #0]
 81020f2:	605a      	str	r2, [r3, #4]
 81020f4:	609a      	str	r2, [r3, #8]
 81020f6:	60da      	str	r2, [r3, #12]
 81020f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81020fa:	4b4e      	ldr	r3, [pc, #312]	; (8102234 <MX_GPIO_Init+0x150>)
 81020fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102100:	4a4c      	ldr	r2, [pc, #304]	; (8102234 <MX_GPIO_Init+0x150>)
 8102102:	f043 0301 	orr.w	r3, r3, #1
 8102106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810210a:	4b4a      	ldr	r3, [pc, #296]	; (8102234 <MX_GPIO_Init+0x150>)
 810210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102110:	f003 0301 	and.w	r3, r3, #1
 8102114:	613b      	str	r3, [r7, #16]
 8102116:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102118:	4b46      	ldr	r3, [pc, #280]	; (8102234 <MX_GPIO_Init+0x150>)
 810211a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810211e:	4a45      	ldr	r2, [pc, #276]	; (8102234 <MX_GPIO_Init+0x150>)
 8102120:	f043 0310 	orr.w	r3, r3, #16
 8102124:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102128:	4b42      	ldr	r3, [pc, #264]	; (8102234 <MX_GPIO_Init+0x150>)
 810212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810212e:	f003 0310 	and.w	r3, r3, #16
 8102132:	60fb      	str	r3, [r7, #12]
 8102134:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8102136:	4b3f      	ldr	r3, [pc, #252]	; (8102234 <MX_GPIO_Init+0x150>)
 8102138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810213c:	4a3d      	ldr	r2, [pc, #244]	; (8102234 <MX_GPIO_Init+0x150>)
 810213e:	f043 0308 	orr.w	r3, r3, #8
 8102142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102146:	4b3b      	ldr	r3, [pc, #236]	; (8102234 <MX_GPIO_Init+0x150>)
 8102148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810214c:	f003 0308 	and.w	r3, r3, #8
 8102150:	60bb      	str	r3, [r7, #8]
 8102152:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8102154:	4b37      	ldr	r3, [pc, #220]	; (8102234 <MX_GPIO_Init+0x150>)
 8102156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810215a:	4a36      	ldr	r2, [pc, #216]	; (8102234 <MX_GPIO_Init+0x150>)
 810215c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8102160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102164:	4b33      	ldr	r3, [pc, #204]	; (8102234 <MX_GPIO_Init+0x150>)
 8102166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810216a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810216e:	607b      	str	r3, [r7, #4]
 8102170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102172:	4b30      	ldr	r3, [pc, #192]	; (8102234 <MX_GPIO_Init+0x150>)
 8102174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102178:	4a2e      	ldr	r2, [pc, #184]	; (8102234 <MX_GPIO_Init+0x150>)
 810217a:	f043 0302 	orr.w	r3, r3, #2
 810217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102182:	4b2c      	ldr	r3, [pc, #176]	; (8102234 <MX_GPIO_Init+0x150>)
 8102184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102188:	f003 0302 	and.w	r3, r3, #2
 810218c:	603b      	str	r3, [r7, #0]
 810218e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ADE9000_Reset_Pin|ADE9000_PM1_Pin, GPIO_PIN_RESET);
 8102190:	2200      	movs	r2, #0
 8102192:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8102196:	4828      	ldr	r0, [pc, #160]	; (8102238 <MX_GPIO_Init+0x154>)
 8102198:	f000 fe6e 	bl	8102e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADE9000_CS_GPIO_Port, ADE9000_CS_Pin, GPIO_PIN_SET);
 810219c:	2201      	movs	r2, #1
 810219e:	f44f 7100 	mov.w	r1, #512	; 0x200
 81021a2:	4826      	ldr	r0, [pc, #152]	; (810223c <MX_GPIO_Init+0x158>)
 81021a4:	f000 fe68 	bl	8102e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADE9000_Reset_Pin ADE9000_PM1_Pin */
  GPIO_InitStruct.Pin = ADE9000_Reset_Pin|ADE9000_PM1_Pin;
 81021a8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 81021ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021ae:	2301      	movs	r3, #1
 81021b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021b2:	2300      	movs	r3, #0
 81021b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021b6:	2300      	movs	r3, #0
 81021b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81021ba:	f107 0314 	add.w	r3, r7, #20
 81021be:	4619      	mov	r1, r3
 81021c0:	481d      	ldr	r0, [pc, #116]	; (8102238 <MX_GPIO_Init+0x154>)
 81021c2:	f000 fca9 	bl	8102b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ1_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ1_Pin;
 81021c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 81021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 81021cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 81021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021d2:	2300      	movs	r3, #0
 81021d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ1_GPIO_Port, &GPIO_InitStruct);
 81021d6:	f107 0314 	add.w	r3, r7, #20
 81021da:	4619      	mov	r1, r3
 81021dc:	4816      	ldr	r0, [pc, #88]	; (8102238 <MX_GPIO_Init+0x154>)
 81021de:	f000 fc9b 	bl	8102b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_CS_Pin */
  GPIO_InitStruct.Pin = ADE9000_CS_Pin;
 81021e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 81021e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81021e8:	2301      	movs	r3, #1
 81021ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021ec:	2300      	movs	r3, #0
 81021ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021f0:	2300      	movs	r3, #0
 81021f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADE9000_CS_GPIO_Port, &GPIO_InitStruct);
 81021f4:	f107 0314 	add.w	r3, r7, #20
 81021f8:	4619      	mov	r1, r3
 81021fa:	4810      	ldr	r0, [pc, #64]	; (810223c <MX_GPIO_Init+0x158>)
 81021fc:	f000 fc8c 	bl	8102b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADE9000_IRQ0_Pin */
  GPIO_InitStruct.Pin = ADE9000_IRQ0_Pin;
 8102200:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8102204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8102206:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 810220a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810220c:	2300      	movs	r3, #0
 810220e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ADE9000_IRQ0_GPIO_Port, &GPIO_InitStruct);
 8102210:	f107 0314 	add.w	r3, r7, #20
 8102214:	4619      	mov	r1, r3
 8102216:	4809      	ldr	r0, [pc, #36]	; (810223c <MX_GPIO_Init+0x158>)
 8102218:	f000 fc7e 	bl	8102b18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 810221c:	2200      	movs	r2, #0
 810221e:	2100      	movs	r1, #0
 8102220:	2028      	movs	r0, #40	; 0x28
 8102222:	f000 fc30 	bl	8102a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8102226:	2028      	movs	r0, #40	; 0x28
 8102228:	f000 fc47 	bl	8102aba <HAL_NVIC_EnableIRQ>

}
 810222c:	bf00      	nop
 810222e:	3728      	adds	r7, #40	; 0x28
 8102230:	46bd      	mov	sp, r7
 8102232:	bd80      	pop	{r7, pc}
 8102234:	58024400 	.word	0x58024400
 8102238:	58021000 	.word	0x58021000
 810223c:	58021800 	.word	0x58021800

08102240 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 8102240:	b580      	push	{r7, lr}
 8102242:	b082      	sub	sp, #8
 8102244:	af00      	add	r7, sp, #0
 8102246:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8102248:	1d39      	adds	r1, r7, #4
 810224a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 810224e:	2201      	movs	r2, #1
 8102250:	4803      	ldr	r0, [pc, #12]	; (8102260 <__io_putchar+0x20>)
 8102252:	f003 fd1f 	bl	8105c94 <HAL_UART_Transmit>
	return ch;
 8102256:	687b      	ldr	r3, [r7, #4]
}
 8102258:	4618      	mov	r0, r3
 810225a:	3708      	adds	r7, #8
 810225c:	46bd      	mov	sp, r7
 810225e:	bd80      	pop	{r7, pc}
 8102260:	100103ec 	.word	0x100103ec

08102264 <__io_getchar>:

int __io_getchar(void)
{
 8102264:	b580      	push	{r7, lr}
 8102266:	b082      	sub	sp, #8
 8102268:	af00      	add	r7, sp, #0

	uint8_t ch;
	// Clear the Overrun flag just before receiving the first character
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 810226a:	4b0b      	ldr	r3, [pc, #44]	; (8102298 <__io_getchar+0x34>)
 810226c:	681b      	ldr	r3, [r3, #0]
 810226e:	2208      	movs	r2, #8
 8102270:	621a      	str	r2, [r3, #32]

	HAL_UART_Receive(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8102272:	1df9      	adds	r1, r7, #7
 8102274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8102278:	2201      	movs	r2, #1
 810227a:	4807      	ldr	r0, [pc, #28]	; (8102298 <__io_getchar+0x34>)
 810227c:	f003 fda0 	bl	8105dc0 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8102280:	1df9      	adds	r1, r7, #7
 8102282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8102286:	2201      	movs	r2, #1
 8102288:	4803      	ldr	r0, [pc, #12]	; (8102298 <__io_getchar+0x34>)
 810228a:	f003 fd03 	bl	8105c94 <HAL_UART_Transmit>

	return ch;
 810228e:	79fb      	ldrb	r3, [r7, #7]
}
 8102290:	4618      	mov	r0, r3
 8102292:	3708      	adds	r7, #8
 8102294:	46bd      	mov	sp, r7
 8102296:	bd80      	pop	{r7, pc}
 8102298:	100103ec 	.word	0x100103ec

0810229c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 810229c:	b480      	push	{r7}
 810229e:	b083      	sub	sp, #12
 81022a0:	af00      	add	r7, sp, #0
 81022a2:	4603      	mov	r3, r0
 81022a4:	80fb      	strh	r3, [r7, #6]
	// If the interrupt source is pin IRQ0
	if (GPIO_Pin == ADE9000_IRQ0_Pin)
 81022a6:	88fb      	ldrh	r3, [r7, #6]
 81022a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81022ac:	d107      	bne.n	81022be <HAL_GPIO_EXTI_Callback+0x22>
	{
		//printf("IRQ0s\r\n");
		flag_read = 1;
 81022ae:	4b07      	ldr	r3, [pc, #28]	; (81022cc <HAL_GPIO_EXTI_Callback+0x30>)
 81022b0:	2201      	movs	r2, #1
 81022b2:	701a      	strb	r2, [r3, #0]
		n_int ++;
 81022b4:	4b06      	ldr	r3, [pc, #24]	; (81022d0 <HAL_GPIO_EXTI_Callback+0x34>)
 81022b6:	681b      	ldr	r3, [r3, #0]
 81022b8:	3301      	adds	r3, #1
 81022ba:	4a05      	ldr	r2, [pc, #20]	; (81022d0 <HAL_GPIO_EXTI_Callback+0x34>)
 81022bc:	6013      	str	r3, [r2, #0]
	}
	if (GPIO_Pin == ADE9000_IRQ1_Pin)
		{
			//printf("IRQ1\r\n");
		}
}
 81022be:	bf00      	nop
 81022c0:	370c      	adds	r7, #12
 81022c2:	46bd      	mov	sp, r7
 81022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c8:	4770      	bx	lr
 81022ca:	bf00      	nop
 81022cc:	10000254 	.word	0x10000254
 81022d0:	10000258 	.word	0x10000258

081022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81022d4:	b480      	push	{r7}
 81022d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81022d8:	b672      	cpsid	i
}
 81022da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81022dc:	e7fe      	b.n	81022dc <Error_Handler+0x8>
	...

081022e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81022e0:	b480      	push	{r7}
 81022e2:	b083      	sub	sp, #12
 81022e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81022e6:	4b0a      	ldr	r3, [pc, #40]	; (8102310 <HAL_MspInit+0x30>)
 81022e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81022ec:	4a08      	ldr	r2, [pc, #32]	; (8102310 <HAL_MspInit+0x30>)
 81022ee:	f043 0302 	orr.w	r3, r3, #2
 81022f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81022f6:	4b06      	ldr	r3, [pc, #24]	; (8102310 <HAL_MspInit+0x30>)
 81022f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81022fc:	f003 0302 	and.w	r3, r3, #2
 8102300:	607b      	str	r3, [r7, #4]
 8102302:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102304:	bf00      	nop
 8102306:	370c      	adds	r7, #12
 8102308:	46bd      	mov	sp, r7
 810230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810230e:	4770      	bx	lr
 8102310:	58024400 	.word	0x58024400

08102314 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8102314:	b580      	push	{r7, lr}
 8102316:	b08a      	sub	sp, #40	; 0x28
 8102318:	af00      	add	r7, sp, #0
 810231a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810231c:	f107 0314 	add.w	r3, r7, #20
 8102320:	2200      	movs	r2, #0
 8102322:	601a      	str	r2, [r3, #0]
 8102324:	605a      	str	r2, [r3, #4]
 8102326:	609a      	str	r2, [r3, #8]
 8102328:	60da      	str	r2, [r3, #12]
 810232a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	681b      	ldr	r3, [r3, #0]
 8102330:	4a31      	ldr	r2, [pc, #196]	; (81023f8 <HAL_SPI_MspInit+0xe4>)
 8102332:	4293      	cmp	r3, r2
 8102334:	d15c      	bne.n	81023f0 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8102336:	4b31      	ldr	r3, [pc, #196]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 8102338:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810233c:	4a2f      	ldr	r2, [pc, #188]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 810233e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8102342:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102346:	4b2d      	ldr	r3, [pc, #180]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 8102348:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 810234c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8102350:	613b      	str	r3, [r7, #16]
 8102352:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102354:	4b29      	ldr	r3, [pc, #164]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 8102356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810235a:	4a28      	ldr	r2, [pc, #160]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 810235c:	f043 0301 	orr.w	r3, r3, #1
 8102360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102364:	4b25      	ldr	r3, [pc, #148]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 8102366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810236a:	f003 0301 	and.w	r3, r3, #1
 810236e:	60fb      	str	r3, [r7, #12]
 8102370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102372:	4b22      	ldr	r3, [pc, #136]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 8102374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102378:	4a20      	ldr	r2, [pc, #128]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 810237a:	f043 0302 	orr.w	r3, r3, #2
 810237e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102382:	4b1e      	ldr	r3, [pc, #120]	; (81023fc <HAL_SPI_MspInit+0xe8>)
 8102384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102388:	f003 0302 	and.w	r3, r3, #2
 810238c:	60bb      	str	r3, [r7, #8]
 810238e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8102390:	2320      	movs	r3, #32
 8102392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102394:	2302      	movs	r3, #2
 8102396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8102398:	2302      	movs	r3, #2
 810239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810239c:	2303      	movs	r3, #3
 810239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81023a0:	2305      	movs	r3, #5
 81023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81023a4:	f107 0314 	add.w	r3, r7, #20
 81023a8:	4619      	mov	r1, r3
 81023aa:	4815      	ldr	r0, [pc, #84]	; (8102400 <HAL_SPI_MspInit+0xec>)
 81023ac:	f000 fbb4 	bl	8102b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 81023b0:	2340      	movs	r3, #64	; 0x40
 81023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023b4:	2302      	movs	r3, #2
 81023b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023b8:	2300      	movs	r3, #0
 81023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023bc:	2303      	movs	r3, #3
 81023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81023c0:	2305      	movs	r3, #5
 81023c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81023c4:	f107 0314 	add.w	r3, r7, #20
 81023c8:	4619      	mov	r1, r3
 81023ca:	480d      	ldr	r0, [pc, #52]	; (8102400 <HAL_SPI_MspInit+0xec>)
 81023cc:	f000 fba4 	bl	8102b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 81023d0:	2320      	movs	r3, #32
 81023d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023d4:	2302      	movs	r3, #2
 81023d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023d8:	2300      	movs	r3, #0
 81023da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023dc:	2303      	movs	r3, #3
 81023de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 81023e0:	2305      	movs	r3, #5
 81023e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81023e4:	f107 0314 	add.w	r3, r7, #20
 81023e8:	4619      	mov	r1, r3
 81023ea:	4806      	ldr	r0, [pc, #24]	; (8102404 <HAL_SPI_MspInit+0xf0>)
 81023ec:	f000 fb94 	bl	8102b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 81023f0:	bf00      	nop
 81023f2:	3728      	adds	r7, #40	; 0x28
 81023f4:	46bd      	mov	sp, r7
 81023f6:	bd80      	pop	{r7, pc}
 81023f8:	40013000 	.word	0x40013000
 81023fc:	58024400 	.word	0x58024400
 8102400:	58020000 	.word	0x58020000
 8102404:	58020400 	.word	0x58020400

08102408 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102408:	b580      	push	{r7, lr}
 810240a:	b0b8      	sub	sp, #224	; 0xe0
 810240c:	af00      	add	r7, sp, #0
 810240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102410:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8102414:	2200      	movs	r2, #0
 8102416:	601a      	str	r2, [r3, #0]
 8102418:	605a      	str	r2, [r3, #4]
 810241a:	609a      	str	r2, [r3, #8]
 810241c:	60da      	str	r2, [r3, #12]
 810241e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102420:	f107 0310 	add.w	r3, r7, #16
 8102424:	22bc      	movs	r2, #188	; 0xbc
 8102426:	2100      	movs	r1, #0
 8102428:	4618      	mov	r0, r3
 810242a:	f005 f81e 	bl	810746a <memset>
  if(huart->Instance==USART3)
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	681b      	ldr	r3, [r3, #0]
 8102432:	4a25      	ldr	r2, [pc, #148]	; (81024c8 <HAL_UART_MspInit+0xc0>)
 8102434:	4293      	cmp	r3, r2
 8102436:	d142      	bne.n	81024be <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8102438:	2302      	movs	r3, #2
 810243a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 810243c:	2300      	movs	r3, #0
 810243e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102442:	f107 0310 	add.w	r3, r7, #16
 8102446:	4618      	mov	r0, r3
 8102448:	f000 ffbc 	bl	81033c4 <HAL_RCCEx_PeriphCLKConfig>
 810244c:	4603      	mov	r3, r0
 810244e:	2b00      	cmp	r3, #0
 8102450:	d001      	beq.n	8102456 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8102452:	f7ff ff3f 	bl	81022d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8102456:	4b1d      	ldr	r3, [pc, #116]	; (81024cc <HAL_UART_MspInit+0xc4>)
 8102458:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810245c:	4a1b      	ldr	r2, [pc, #108]	; (81024cc <HAL_UART_MspInit+0xc4>)
 810245e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8102462:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102466:	4b19      	ldr	r3, [pc, #100]	; (81024cc <HAL_UART_MspInit+0xc4>)
 8102468:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810246c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8102470:	60fb      	str	r3, [r7, #12]
 8102472:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102474:	4b15      	ldr	r3, [pc, #84]	; (81024cc <HAL_UART_MspInit+0xc4>)
 8102476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810247a:	4a14      	ldr	r2, [pc, #80]	; (81024cc <HAL_UART_MspInit+0xc4>)
 810247c:	f043 0308 	orr.w	r3, r3, #8
 8102480:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102484:	4b11      	ldr	r3, [pc, #68]	; (81024cc <HAL_UART_MspInit+0xc4>)
 8102486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810248a:	f003 0308 	and.w	r3, r3, #8
 810248e:	60bb      	str	r3, [r7, #8]
 8102490:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8102492:	f44f 7340 	mov.w	r3, #768	; 0x300
 8102496:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810249a:	2302      	movs	r3, #2
 810249c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81024a0:	2300      	movs	r3, #0
 81024a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81024a6:	2300      	movs	r3, #0
 81024a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 81024ac:	2307      	movs	r3, #7
 81024ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81024b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 81024b6:	4619      	mov	r1, r3
 81024b8:	4805      	ldr	r0, [pc, #20]	; (81024d0 <HAL_UART_MspInit+0xc8>)
 81024ba:	f000 fb2d 	bl	8102b18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81024be:	bf00      	nop
 81024c0:	37e0      	adds	r7, #224	; 0xe0
 81024c2:	46bd      	mov	sp, r7
 81024c4:	bd80      	pop	{r7, pc}
 81024c6:	bf00      	nop
 81024c8:	40004800 	.word	0x40004800
 81024cc:	58024400 	.word	0x58024400
 81024d0:	58020c00 	.word	0x58020c00

081024d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81024d4:	b480      	push	{r7}
 81024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81024d8:	e7fe      	b.n	81024d8 <NMI_Handler+0x4>

081024da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81024da:	b480      	push	{r7}
 81024dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81024de:	e7fe      	b.n	81024de <HardFault_Handler+0x4>

081024e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81024e0:	b480      	push	{r7}
 81024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81024e4:	e7fe      	b.n	81024e4 <MemManage_Handler+0x4>

081024e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81024e6:	b480      	push	{r7}
 81024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81024ea:	e7fe      	b.n	81024ea <BusFault_Handler+0x4>

081024ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81024ec:	b480      	push	{r7}
 81024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81024f0:	e7fe      	b.n	81024f0 <UsageFault_Handler+0x4>

081024f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81024f2:	b480      	push	{r7}
 81024f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81024f6:	bf00      	nop
 81024f8:	46bd      	mov	sp, r7
 81024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024fe:	4770      	bx	lr

08102500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102500:	b480      	push	{r7}
 8102502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102504:	bf00      	nop
 8102506:	46bd      	mov	sp, r7
 8102508:	f85d 7b04 	ldr.w	r7, [sp], #4
 810250c:	4770      	bx	lr

0810250e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810250e:	b480      	push	{r7}
 8102510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102512:	bf00      	nop
 8102514:	46bd      	mov	sp, r7
 8102516:	f85d 7b04 	ldr.w	r7, [sp], #4
 810251a:	4770      	bx	lr

0810251c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810251c:	b580      	push	{r7, lr}
 810251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102520:	f000 f992 	bl	8102848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102524:	bf00      	nop
 8102526:	bd80      	pop	{r7, pc}

08102528 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8102528:	b580      	push	{r7, lr}
 810252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADE9000_IRQ1_Pin);
 810252c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8102530:	f000 fcbb 	bl	8102eaa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADE9000_PM1_Pin);
 8102534:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8102538:	f000 fcb7 	bl	8102eaa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 810253c:	bf00      	nop
 810253e:	bd80      	pop	{r7, pc}

08102540 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8102540:	b480      	push	{r7}
 8102542:	af00      	add	r7, sp, #0
	return 1;
 8102544:	2301      	movs	r3, #1
}
 8102546:	4618      	mov	r0, r3
 8102548:	46bd      	mov	sp, r7
 810254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810254e:	4770      	bx	lr

08102550 <_kill>:

int _kill(int pid, int sig)
{
 8102550:	b580      	push	{r7, lr}
 8102552:	b082      	sub	sp, #8
 8102554:	af00      	add	r7, sp, #0
 8102556:	6078      	str	r0, [r7, #4]
 8102558:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 810255a:	f004 fda1 	bl	81070a0 <__errno>
 810255e:	4603      	mov	r3, r0
 8102560:	2216      	movs	r2, #22
 8102562:	601a      	str	r2, [r3, #0]
	return -1;
 8102564:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102568:	4618      	mov	r0, r3
 810256a:	3708      	adds	r7, #8
 810256c:	46bd      	mov	sp, r7
 810256e:	bd80      	pop	{r7, pc}

08102570 <_exit>:

void _exit (int status)
{
 8102570:	b580      	push	{r7, lr}
 8102572:	b082      	sub	sp, #8
 8102574:	af00      	add	r7, sp, #0
 8102576:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8102578:	f04f 31ff 	mov.w	r1, #4294967295
 810257c:	6878      	ldr	r0, [r7, #4]
 810257e:	f7ff ffe7 	bl	8102550 <_kill>
	while (1) {}		/* Make sure we hang here */
 8102582:	e7fe      	b.n	8102582 <_exit+0x12>

08102584 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8102584:	b580      	push	{r7, lr}
 8102586:	b086      	sub	sp, #24
 8102588:	af00      	add	r7, sp, #0
 810258a:	60f8      	str	r0, [r7, #12]
 810258c:	60b9      	str	r1, [r7, #8]
 810258e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8102590:	2300      	movs	r3, #0
 8102592:	617b      	str	r3, [r7, #20]
 8102594:	e00a      	b.n	81025ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8102596:	f7ff fe65 	bl	8102264 <__io_getchar>
 810259a:	4601      	mov	r1, r0
 810259c:	68bb      	ldr	r3, [r7, #8]
 810259e:	1c5a      	adds	r2, r3, #1
 81025a0:	60ba      	str	r2, [r7, #8]
 81025a2:	b2ca      	uxtb	r2, r1
 81025a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81025a6:	697b      	ldr	r3, [r7, #20]
 81025a8:	3301      	adds	r3, #1
 81025aa:	617b      	str	r3, [r7, #20]
 81025ac:	697a      	ldr	r2, [r7, #20]
 81025ae:	687b      	ldr	r3, [r7, #4]
 81025b0:	429a      	cmp	r2, r3
 81025b2:	dbf0      	blt.n	8102596 <_read+0x12>
	}

return len;
 81025b4:	687b      	ldr	r3, [r7, #4]
}
 81025b6:	4618      	mov	r0, r3
 81025b8:	3718      	adds	r7, #24
 81025ba:	46bd      	mov	sp, r7
 81025bc:	bd80      	pop	{r7, pc}

081025be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81025be:	b580      	push	{r7, lr}
 81025c0:	b086      	sub	sp, #24
 81025c2:	af00      	add	r7, sp, #0
 81025c4:	60f8      	str	r0, [r7, #12]
 81025c6:	60b9      	str	r1, [r7, #8]
 81025c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81025ca:	2300      	movs	r3, #0
 81025cc:	617b      	str	r3, [r7, #20]
 81025ce:	e009      	b.n	81025e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 81025d0:	68bb      	ldr	r3, [r7, #8]
 81025d2:	1c5a      	adds	r2, r3, #1
 81025d4:	60ba      	str	r2, [r7, #8]
 81025d6:	781b      	ldrb	r3, [r3, #0]
 81025d8:	4618      	mov	r0, r3
 81025da:	f7ff fe31 	bl	8102240 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 81025de:	697b      	ldr	r3, [r7, #20]
 81025e0:	3301      	adds	r3, #1
 81025e2:	617b      	str	r3, [r7, #20]
 81025e4:	697a      	ldr	r2, [r7, #20]
 81025e6:	687b      	ldr	r3, [r7, #4]
 81025e8:	429a      	cmp	r2, r3
 81025ea:	dbf1      	blt.n	81025d0 <_write+0x12>
	}
	return len;
 81025ec:	687b      	ldr	r3, [r7, #4]
}
 81025ee:	4618      	mov	r0, r3
 81025f0:	3718      	adds	r7, #24
 81025f2:	46bd      	mov	sp, r7
 81025f4:	bd80      	pop	{r7, pc}

081025f6 <_close>:

int _close(int file)
{
 81025f6:	b480      	push	{r7}
 81025f8:	b083      	sub	sp, #12
 81025fa:	af00      	add	r7, sp, #0
 81025fc:	6078      	str	r0, [r7, #4]
	return -1;
 81025fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8102602:	4618      	mov	r0, r3
 8102604:	370c      	adds	r7, #12
 8102606:	46bd      	mov	sp, r7
 8102608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810260c:	4770      	bx	lr

0810260e <_fstat>:


int _fstat(int file, struct stat *st)
{
 810260e:	b480      	push	{r7}
 8102610:	b083      	sub	sp, #12
 8102612:	af00      	add	r7, sp, #0
 8102614:	6078      	str	r0, [r7, #4]
 8102616:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8102618:	683b      	ldr	r3, [r7, #0]
 810261a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810261e:	605a      	str	r2, [r3, #4]
	return 0;
 8102620:	2300      	movs	r3, #0
}
 8102622:	4618      	mov	r0, r3
 8102624:	370c      	adds	r7, #12
 8102626:	46bd      	mov	sp, r7
 8102628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810262c:	4770      	bx	lr

0810262e <_isatty>:

int _isatty(int file)
{
 810262e:	b480      	push	{r7}
 8102630:	b083      	sub	sp, #12
 8102632:	af00      	add	r7, sp, #0
 8102634:	6078      	str	r0, [r7, #4]
	return 1;
 8102636:	2301      	movs	r3, #1
}
 8102638:	4618      	mov	r0, r3
 810263a:	370c      	adds	r7, #12
 810263c:	46bd      	mov	sp, r7
 810263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102642:	4770      	bx	lr

08102644 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8102644:	b480      	push	{r7}
 8102646:	b085      	sub	sp, #20
 8102648:	af00      	add	r7, sp, #0
 810264a:	60f8      	str	r0, [r7, #12]
 810264c:	60b9      	str	r1, [r7, #8]
 810264e:	607a      	str	r2, [r7, #4]
	return 0;
 8102650:	2300      	movs	r3, #0
}
 8102652:	4618      	mov	r0, r3
 8102654:	3714      	adds	r7, #20
 8102656:	46bd      	mov	sp, r7
 8102658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810265c:	4770      	bx	lr
	...

08102660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102660:	b580      	push	{r7, lr}
 8102662:	b086      	sub	sp, #24
 8102664:	af00      	add	r7, sp, #0
 8102666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102668:	4a14      	ldr	r2, [pc, #80]	; (81026bc <_sbrk+0x5c>)
 810266a:	4b15      	ldr	r3, [pc, #84]	; (81026c0 <_sbrk+0x60>)
 810266c:	1ad3      	subs	r3, r2, r3
 810266e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102670:	697b      	ldr	r3, [r7, #20]
 8102672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102674:	4b13      	ldr	r3, [pc, #76]	; (81026c4 <_sbrk+0x64>)
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	2b00      	cmp	r3, #0
 810267a:	d102      	bne.n	8102682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810267c:	4b11      	ldr	r3, [pc, #68]	; (81026c4 <_sbrk+0x64>)
 810267e:	4a12      	ldr	r2, [pc, #72]	; (81026c8 <_sbrk+0x68>)
 8102680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102682:	4b10      	ldr	r3, [pc, #64]	; (81026c4 <_sbrk+0x64>)
 8102684:	681a      	ldr	r2, [r3, #0]
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	4413      	add	r3, r2
 810268a:	693a      	ldr	r2, [r7, #16]
 810268c:	429a      	cmp	r2, r3
 810268e:	d207      	bcs.n	81026a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8102690:	f004 fd06 	bl	81070a0 <__errno>
 8102694:	4603      	mov	r3, r0
 8102696:	220c      	movs	r2, #12
 8102698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 810269a:	f04f 33ff 	mov.w	r3, #4294967295
 810269e:	e009      	b.n	81026b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81026a0:	4b08      	ldr	r3, [pc, #32]	; (81026c4 <_sbrk+0x64>)
 81026a2:	681b      	ldr	r3, [r3, #0]
 81026a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81026a6:	4b07      	ldr	r3, [pc, #28]	; (81026c4 <_sbrk+0x64>)
 81026a8:	681a      	ldr	r2, [r3, #0]
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	4413      	add	r3, r2
 81026ae:	4a05      	ldr	r2, [pc, #20]	; (81026c4 <_sbrk+0x64>)
 81026b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81026b2:	68fb      	ldr	r3, [r7, #12]
}
 81026b4:	4618      	mov	r0, r3
 81026b6:	3718      	adds	r7, #24
 81026b8:	46bd      	mov	sp, r7
 81026ba:	bd80      	pop	{r7, pc}
 81026bc:	10048000 	.word	0x10048000
 81026c0:	00000400 	.word	0x00000400
 81026c4:	1000025c 	.word	0x1000025c
 81026c8:	100105d8 	.word	0x100105d8

081026cc <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack      /* set stack pointer */
 81026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102704 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81026d0:	f7fe fd14 	bl	81010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81026d4:	480c      	ldr	r0, [pc, #48]	; (8102708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81026d6:	490d      	ldr	r1, [pc, #52]	; (810270c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81026d8:	4a0d      	ldr	r2, [pc, #52]	; (8102710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81026dc:	e002      	b.n	81026e4 <LoopCopyDataInit>

081026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81026e2:	3304      	adds	r3, #4

081026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81026e8:	d3f9      	bcc.n	81026de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81026ea:	4a0a      	ldr	r2, [pc, #40]	; (8102714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81026ec:	4c0a      	ldr	r4, [pc, #40]	; (8102718 <LoopFillZerobss+0x22>)
  movs r3, #0
 81026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 81026f0:	e001      	b.n	81026f6 <LoopFillZerobss>

081026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81026f4:	3204      	adds	r2, #4

081026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81026f8:	d3fb      	bcc.n	81026f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81026fa:	f004 fe8f 	bl	810741c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81026fe:	f7ff fb3b 	bl	8101d78 <main>
  bx  lr
 8102702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102704:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102708:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810270c:	10000238 	.word	0x10000238
  ldr r2, =_sidata
 8102710:	0810d938 	.word	0x0810d938
  ldr r2, =_sbss
 8102714:	10000238 	.word	0x10000238
  ldr r4, =_ebss
 8102718:	100105d4 	.word	0x100105d4

0810271c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810271c:	e7fe      	b.n	810271c <ADC3_IRQHandler>
	...

08102720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102720:	b580      	push	{r7, lr}
 8102722:	b082      	sub	sp, #8
 8102724:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102726:	4b28      	ldr	r3, [pc, #160]	; (81027c8 <HAL_Init+0xa8>)
 8102728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810272c:	4a26      	ldr	r2, [pc, #152]	; (81027c8 <HAL_Init+0xa8>)
 810272e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102732:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102736:	4b24      	ldr	r3, [pc, #144]	; (81027c8 <HAL_Init+0xa8>)
 8102738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810273c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102740:	603b      	str	r3, [r7, #0]
 8102742:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102744:	4b21      	ldr	r3, [pc, #132]	; (81027cc <HAL_Init+0xac>)
 8102746:	681b      	ldr	r3, [r3, #0]
 8102748:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 810274c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102750:	4a1e      	ldr	r2, [pc, #120]	; (81027cc <HAL_Init+0xac>)
 8102752:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102756:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102758:	4b1c      	ldr	r3, [pc, #112]	; (81027cc <HAL_Init+0xac>)
 810275a:	681b      	ldr	r3, [r3, #0]
 810275c:	4a1b      	ldr	r2, [pc, #108]	; (81027cc <HAL_Init+0xac>)
 810275e:	f043 0301 	orr.w	r3, r3, #1
 8102762:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102764:	2003      	movs	r0, #3
 8102766:	f000 f983 	bl	8102a70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810276a:	f000 fc53 	bl	8103014 <HAL_RCC_GetSysClockFreq>
 810276e:	4602      	mov	r2, r0
 8102770:	4b15      	ldr	r3, [pc, #84]	; (81027c8 <HAL_Init+0xa8>)
 8102772:	699b      	ldr	r3, [r3, #24]
 8102774:	0a1b      	lsrs	r3, r3, #8
 8102776:	f003 030f 	and.w	r3, r3, #15
 810277a:	4915      	ldr	r1, [pc, #84]	; (81027d0 <HAL_Init+0xb0>)
 810277c:	5ccb      	ldrb	r3, [r1, r3]
 810277e:	f003 031f 	and.w	r3, r3, #31
 8102782:	fa22 f303 	lsr.w	r3, r2, r3
 8102786:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102788:	4b0f      	ldr	r3, [pc, #60]	; (81027c8 <HAL_Init+0xa8>)
 810278a:	699b      	ldr	r3, [r3, #24]
 810278c:	f003 030f 	and.w	r3, r3, #15
 8102790:	4a0f      	ldr	r2, [pc, #60]	; (81027d0 <HAL_Init+0xb0>)
 8102792:	5cd3      	ldrb	r3, [r2, r3]
 8102794:	f003 031f 	and.w	r3, r3, #31
 8102798:	687a      	ldr	r2, [r7, #4]
 810279a:	fa22 f303 	lsr.w	r3, r2, r3
 810279e:	4a0d      	ldr	r2, [pc, #52]	; (81027d4 <HAL_Init+0xb4>)
 81027a0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81027a2:	4b0c      	ldr	r3, [pc, #48]	; (81027d4 <HAL_Init+0xb4>)
 81027a4:	681b      	ldr	r3, [r3, #0]
 81027a6:	4a0c      	ldr	r2, [pc, #48]	; (81027d8 <HAL_Init+0xb8>)
 81027a8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81027aa:	2000      	movs	r0, #0
 81027ac:	f000 f816 	bl	81027dc <HAL_InitTick>
 81027b0:	4603      	mov	r3, r0
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d001      	beq.n	81027ba <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81027b6:	2301      	movs	r3, #1
 81027b8:	e002      	b.n	81027c0 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81027ba:	f7ff fd91 	bl	81022e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81027be:	2300      	movs	r3, #0
}
 81027c0:	4618      	mov	r0, r3
 81027c2:	3708      	adds	r7, #8
 81027c4:	46bd      	mov	sp, r7
 81027c6:	bd80      	pop	{r7, pc}
 81027c8:	58024400 	.word	0x58024400
 81027cc:	40024400 	.word	0x40024400
 81027d0:	0810cbf0 	.word	0x0810cbf0
 81027d4:	10000004 	.word	0x10000004
 81027d8:	10000000 	.word	0x10000000

081027dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81027dc:	b580      	push	{r7, lr}
 81027de:	b082      	sub	sp, #8
 81027e0:	af00      	add	r7, sp, #0
 81027e2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81027e4:	4b15      	ldr	r3, [pc, #84]	; (810283c <HAL_InitTick+0x60>)
 81027e6:	781b      	ldrb	r3, [r3, #0]
 81027e8:	2b00      	cmp	r3, #0
 81027ea:	d101      	bne.n	81027f0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81027ec:	2301      	movs	r3, #1
 81027ee:	e021      	b.n	8102834 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81027f0:	4b13      	ldr	r3, [pc, #76]	; (8102840 <HAL_InitTick+0x64>)
 81027f2:	681a      	ldr	r2, [r3, #0]
 81027f4:	4b11      	ldr	r3, [pc, #68]	; (810283c <HAL_InitTick+0x60>)
 81027f6:	781b      	ldrb	r3, [r3, #0]
 81027f8:	4619      	mov	r1, r3
 81027fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81027fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8102802:	fbb2 f3f3 	udiv	r3, r2, r3
 8102806:	4618      	mov	r0, r3
 8102808:	f000 f965 	bl	8102ad6 <HAL_SYSTICK_Config>
 810280c:	4603      	mov	r3, r0
 810280e:	2b00      	cmp	r3, #0
 8102810:	d001      	beq.n	8102816 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102812:	2301      	movs	r3, #1
 8102814:	e00e      	b.n	8102834 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102816:	687b      	ldr	r3, [r7, #4]
 8102818:	2b0f      	cmp	r3, #15
 810281a:	d80a      	bhi.n	8102832 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 810281c:	2200      	movs	r2, #0
 810281e:	6879      	ldr	r1, [r7, #4]
 8102820:	f04f 30ff 	mov.w	r0, #4294967295
 8102824:	f000 f92f 	bl	8102a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102828:	4a06      	ldr	r2, [pc, #24]	; (8102844 <HAL_InitTick+0x68>)
 810282a:	687b      	ldr	r3, [r7, #4]
 810282c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810282e:	2300      	movs	r3, #0
 8102830:	e000      	b.n	8102834 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102832:	2301      	movs	r3, #1
}
 8102834:	4618      	mov	r0, r3
 8102836:	3708      	adds	r7, #8
 8102838:	46bd      	mov	sp, r7
 810283a:	bd80      	pop	{r7, pc}
 810283c:	1000005c 	.word	0x1000005c
 8102840:	10000000 	.word	0x10000000
 8102844:	10000058 	.word	0x10000058

08102848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102848:	b480      	push	{r7}
 810284a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 810284c:	4b06      	ldr	r3, [pc, #24]	; (8102868 <HAL_IncTick+0x20>)
 810284e:	781b      	ldrb	r3, [r3, #0]
 8102850:	461a      	mov	r2, r3
 8102852:	4b06      	ldr	r3, [pc, #24]	; (810286c <HAL_IncTick+0x24>)
 8102854:	681b      	ldr	r3, [r3, #0]
 8102856:	4413      	add	r3, r2
 8102858:	4a04      	ldr	r2, [pc, #16]	; (810286c <HAL_IncTick+0x24>)
 810285a:	6013      	str	r3, [r2, #0]
}
 810285c:	bf00      	nop
 810285e:	46bd      	mov	sp, r7
 8102860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102864:	4770      	bx	lr
 8102866:	bf00      	nop
 8102868:	1000005c 	.word	0x1000005c
 810286c:	100105c0 	.word	0x100105c0

08102870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102870:	b480      	push	{r7}
 8102872:	af00      	add	r7, sp, #0
  return uwTick;
 8102874:	4b03      	ldr	r3, [pc, #12]	; (8102884 <HAL_GetTick+0x14>)
 8102876:	681b      	ldr	r3, [r3, #0]
}
 8102878:	4618      	mov	r0, r3
 810287a:	46bd      	mov	sp, r7
 810287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102880:	4770      	bx	lr
 8102882:	bf00      	nop
 8102884:	100105c0 	.word	0x100105c0

08102888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102888:	b580      	push	{r7, lr}
 810288a:	b084      	sub	sp, #16
 810288c:	af00      	add	r7, sp, #0
 810288e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102890:	f7ff ffee 	bl	8102870 <HAL_GetTick>
 8102894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102896:	687b      	ldr	r3, [r7, #4]
 8102898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 810289a:	68fb      	ldr	r3, [r7, #12]
 810289c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81028a0:	d005      	beq.n	81028ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81028a2:	4b0a      	ldr	r3, [pc, #40]	; (81028cc <HAL_Delay+0x44>)
 81028a4:	781b      	ldrb	r3, [r3, #0]
 81028a6:	461a      	mov	r2, r3
 81028a8:	68fb      	ldr	r3, [r7, #12]
 81028aa:	4413      	add	r3, r2
 81028ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81028ae:	bf00      	nop
 81028b0:	f7ff ffde 	bl	8102870 <HAL_GetTick>
 81028b4:	4602      	mov	r2, r0
 81028b6:	68bb      	ldr	r3, [r7, #8]
 81028b8:	1ad3      	subs	r3, r2, r3
 81028ba:	68fa      	ldr	r2, [r7, #12]
 81028bc:	429a      	cmp	r2, r3
 81028be:	d8f7      	bhi.n	81028b0 <HAL_Delay+0x28>
  {
  }
}
 81028c0:	bf00      	nop
 81028c2:	bf00      	nop
 81028c4:	3710      	adds	r7, #16
 81028c6:	46bd      	mov	sp, r7
 81028c8:	bd80      	pop	{r7, pc}
 81028ca:	bf00      	nop
 81028cc:	1000005c 	.word	0x1000005c

081028d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81028d0:	b480      	push	{r7}
 81028d2:	b085      	sub	sp, #20
 81028d4:	af00      	add	r7, sp, #0
 81028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81028d8:	687b      	ldr	r3, [r7, #4]
 81028da:	f003 0307 	and.w	r3, r3, #7
 81028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81028e0:	4b0c      	ldr	r3, [pc, #48]	; (8102914 <__NVIC_SetPriorityGrouping+0x44>)
 81028e2:	68db      	ldr	r3, [r3, #12]
 81028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81028e6:	68ba      	ldr	r2, [r7, #8]
 81028e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81028ec:	4013      	ands	r3, r2
 81028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81028f0:	68fb      	ldr	r3, [r7, #12]
 81028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81028f4:	68bb      	ldr	r3, [r7, #8]
 81028f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81028f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102902:	4a04      	ldr	r2, [pc, #16]	; (8102914 <__NVIC_SetPriorityGrouping+0x44>)
 8102904:	68bb      	ldr	r3, [r7, #8]
 8102906:	60d3      	str	r3, [r2, #12]
}
 8102908:	bf00      	nop
 810290a:	3714      	adds	r7, #20
 810290c:	46bd      	mov	sp, r7
 810290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102912:	4770      	bx	lr
 8102914:	e000ed00 	.word	0xe000ed00

08102918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8102918:	b480      	push	{r7}
 810291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810291c:	4b04      	ldr	r3, [pc, #16]	; (8102930 <__NVIC_GetPriorityGrouping+0x18>)
 810291e:	68db      	ldr	r3, [r3, #12]
 8102920:	0a1b      	lsrs	r3, r3, #8
 8102922:	f003 0307 	and.w	r3, r3, #7
}
 8102926:	4618      	mov	r0, r3
 8102928:	46bd      	mov	sp, r7
 810292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810292e:	4770      	bx	lr
 8102930:	e000ed00 	.word	0xe000ed00

08102934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102934:	b480      	push	{r7}
 8102936:	b083      	sub	sp, #12
 8102938:	af00      	add	r7, sp, #0
 810293a:	4603      	mov	r3, r0
 810293c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810293e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102942:	2b00      	cmp	r3, #0
 8102944:	db0b      	blt.n	810295e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102946:	88fb      	ldrh	r3, [r7, #6]
 8102948:	f003 021f 	and.w	r2, r3, #31
 810294c:	4907      	ldr	r1, [pc, #28]	; (810296c <__NVIC_EnableIRQ+0x38>)
 810294e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102952:	095b      	lsrs	r3, r3, #5
 8102954:	2001      	movs	r0, #1
 8102956:	fa00 f202 	lsl.w	r2, r0, r2
 810295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810295e:	bf00      	nop
 8102960:	370c      	adds	r7, #12
 8102962:	46bd      	mov	sp, r7
 8102964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102968:	4770      	bx	lr
 810296a:	bf00      	nop
 810296c:	e000e100 	.word	0xe000e100

08102970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102970:	b480      	push	{r7}
 8102972:	b083      	sub	sp, #12
 8102974:	af00      	add	r7, sp, #0
 8102976:	4603      	mov	r3, r0
 8102978:	6039      	str	r1, [r7, #0]
 810297a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810297c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102980:	2b00      	cmp	r3, #0
 8102982:	db0a      	blt.n	810299a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102984:	683b      	ldr	r3, [r7, #0]
 8102986:	b2da      	uxtb	r2, r3
 8102988:	490c      	ldr	r1, [pc, #48]	; (81029bc <__NVIC_SetPriority+0x4c>)
 810298a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810298e:	0112      	lsls	r2, r2, #4
 8102990:	b2d2      	uxtb	r2, r2
 8102992:	440b      	add	r3, r1
 8102994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8102998:	e00a      	b.n	81029b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810299a:	683b      	ldr	r3, [r7, #0]
 810299c:	b2da      	uxtb	r2, r3
 810299e:	4908      	ldr	r1, [pc, #32]	; (81029c0 <__NVIC_SetPriority+0x50>)
 81029a0:	88fb      	ldrh	r3, [r7, #6]
 81029a2:	f003 030f 	and.w	r3, r3, #15
 81029a6:	3b04      	subs	r3, #4
 81029a8:	0112      	lsls	r2, r2, #4
 81029aa:	b2d2      	uxtb	r2, r2
 81029ac:	440b      	add	r3, r1
 81029ae:	761a      	strb	r2, [r3, #24]
}
 81029b0:	bf00      	nop
 81029b2:	370c      	adds	r7, #12
 81029b4:	46bd      	mov	sp, r7
 81029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ba:	4770      	bx	lr
 81029bc:	e000e100 	.word	0xe000e100
 81029c0:	e000ed00 	.word	0xe000ed00

081029c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81029c4:	b480      	push	{r7}
 81029c6:	b089      	sub	sp, #36	; 0x24
 81029c8:	af00      	add	r7, sp, #0
 81029ca:	60f8      	str	r0, [r7, #12]
 81029cc:	60b9      	str	r1, [r7, #8]
 81029ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81029d0:	68fb      	ldr	r3, [r7, #12]
 81029d2:	f003 0307 	and.w	r3, r3, #7
 81029d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81029d8:	69fb      	ldr	r3, [r7, #28]
 81029da:	f1c3 0307 	rsb	r3, r3, #7
 81029de:	2b04      	cmp	r3, #4
 81029e0:	bf28      	it	cs
 81029e2:	2304      	movcs	r3, #4
 81029e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81029e6:	69fb      	ldr	r3, [r7, #28]
 81029e8:	3304      	adds	r3, #4
 81029ea:	2b06      	cmp	r3, #6
 81029ec:	d902      	bls.n	81029f4 <NVIC_EncodePriority+0x30>
 81029ee:	69fb      	ldr	r3, [r7, #28]
 81029f0:	3b03      	subs	r3, #3
 81029f2:	e000      	b.n	81029f6 <NVIC_EncodePriority+0x32>
 81029f4:	2300      	movs	r3, #0
 81029f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81029f8:	f04f 32ff 	mov.w	r2, #4294967295
 81029fc:	69bb      	ldr	r3, [r7, #24]
 81029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8102a02:	43da      	mvns	r2, r3
 8102a04:	68bb      	ldr	r3, [r7, #8]
 8102a06:	401a      	ands	r2, r3
 8102a08:	697b      	ldr	r3, [r7, #20]
 8102a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8102a10:	697b      	ldr	r3, [r7, #20]
 8102a12:	fa01 f303 	lsl.w	r3, r1, r3
 8102a16:	43d9      	mvns	r1, r3
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102a1c:	4313      	orrs	r3, r2
         );
}
 8102a1e:	4618      	mov	r0, r3
 8102a20:	3724      	adds	r7, #36	; 0x24
 8102a22:	46bd      	mov	sp, r7
 8102a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a28:	4770      	bx	lr
	...

08102a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8102a2c:	b580      	push	{r7, lr}
 8102a2e:	b082      	sub	sp, #8
 8102a30:	af00      	add	r7, sp, #0
 8102a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	3b01      	subs	r3, #1
 8102a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102a3c:	d301      	bcc.n	8102a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8102a3e:	2301      	movs	r3, #1
 8102a40:	e00f      	b.n	8102a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8102a42:	4a0a      	ldr	r2, [pc, #40]	; (8102a6c <SysTick_Config+0x40>)
 8102a44:	687b      	ldr	r3, [r7, #4]
 8102a46:	3b01      	subs	r3, #1
 8102a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8102a4a:	210f      	movs	r1, #15
 8102a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8102a50:	f7ff ff8e 	bl	8102970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8102a54:	4b05      	ldr	r3, [pc, #20]	; (8102a6c <SysTick_Config+0x40>)
 8102a56:	2200      	movs	r2, #0
 8102a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102a5a:	4b04      	ldr	r3, [pc, #16]	; (8102a6c <SysTick_Config+0x40>)
 8102a5c:	2207      	movs	r2, #7
 8102a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8102a60:	2300      	movs	r3, #0
}
 8102a62:	4618      	mov	r0, r3
 8102a64:	3708      	adds	r7, #8
 8102a66:	46bd      	mov	sp, r7
 8102a68:	bd80      	pop	{r7, pc}
 8102a6a:	bf00      	nop
 8102a6c:	e000e010 	.word	0xe000e010

08102a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102a70:	b580      	push	{r7, lr}
 8102a72:	b082      	sub	sp, #8
 8102a74:	af00      	add	r7, sp, #0
 8102a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102a78:	6878      	ldr	r0, [r7, #4]
 8102a7a:	f7ff ff29 	bl	81028d0 <__NVIC_SetPriorityGrouping>
}
 8102a7e:	bf00      	nop
 8102a80:	3708      	adds	r7, #8
 8102a82:	46bd      	mov	sp, r7
 8102a84:	bd80      	pop	{r7, pc}

08102a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102a86:	b580      	push	{r7, lr}
 8102a88:	b086      	sub	sp, #24
 8102a8a:	af00      	add	r7, sp, #0
 8102a8c:	4603      	mov	r3, r0
 8102a8e:	60b9      	str	r1, [r7, #8]
 8102a90:	607a      	str	r2, [r7, #4]
 8102a92:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102a94:	f7ff ff40 	bl	8102918 <__NVIC_GetPriorityGrouping>
 8102a98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102a9a:	687a      	ldr	r2, [r7, #4]
 8102a9c:	68b9      	ldr	r1, [r7, #8]
 8102a9e:	6978      	ldr	r0, [r7, #20]
 8102aa0:	f7ff ff90 	bl	81029c4 <NVIC_EncodePriority>
 8102aa4:	4602      	mov	r2, r0
 8102aa6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102aaa:	4611      	mov	r1, r2
 8102aac:	4618      	mov	r0, r3
 8102aae:	f7ff ff5f 	bl	8102970 <__NVIC_SetPriority>
}
 8102ab2:	bf00      	nop
 8102ab4:	3718      	adds	r7, #24
 8102ab6:	46bd      	mov	sp, r7
 8102ab8:	bd80      	pop	{r7, pc}

08102aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102aba:	b580      	push	{r7, lr}
 8102abc:	b082      	sub	sp, #8
 8102abe:	af00      	add	r7, sp, #0
 8102ac0:	4603      	mov	r3, r0
 8102ac2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102ac4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ac8:	4618      	mov	r0, r3
 8102aca:	f7ff ff33 	bl	8102934 <__NVIC_EnableIRQ>
}
 8102ace:	bf00      	nop
 8102ad0:	3708      	adds	r7, #8
 8102ad2:	46bd      	mov	sp, r7
 8102ad4:	bd80      	pop	{r7, pc}

08102ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102ad6:	b580      	push	{r7, lr}
 8102ad8:	b082      	sub	sp, #8
 8102ada:	af00      	add	r7, sp, #0
 8102adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102ade:	6878      	ldr	r0, [r7, #4]
 8102ae0:	f7ff ffa4 	bl	8102a2c <SysTick_Config>
 8102ae4:	4603      	mov	r3, r0
}
 8102ae6:	4618      	mov	r0, r3
 8102ae8:	3708      	adds	r7, #8
 8102aea:	46bd      	mov	sp, r7
 8102aec:	bd80      	pop	{r7, pc}
	...

08102af0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102af0:	b480      	push	{r7}
 8102af2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102af4:	4b07      	ldr	r3, [pc, #28]	; (8102b14 <HAL_GetCurrentCPUID+0x24>)
 8102af6:	681b      	ldr	r3, [r3, #0]
 8102af8:	091b      	lsrs	r3, r3, #4
 8102afa:	f003 030f 	and.w	r3, r3, #15
 8102afe:	2b07      	cmp	r3, #7
 8102b00:	d101      	bne.n	8102b06 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102b02:	2303      	movs	r3, #3
 8102b04:	e000      	b.n	8102b08 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102b06:	2301      	movs	r3, #1
  }
}
 8102b08:	4618      	mov	r0, r3
 8102b0a:	46bd      	mov	sp, r7
 8102b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b10:	4770      	bx	lr
 8102b12:	bf00      	nop
 8102b14:	e000ed00 	.word	0xe000ed00

08102b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102b18:	b480      	push	{r7}
 8102b1a:	b089      	sub	sp, #36	; 0x24
 8102b1c:	af00      	add	r7, sp, #0
 8102b1e:	6078      	str	r0, [r7, #4]
 8102b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102b22:	2300      	movs	r3, #0
 8102b24:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102b26:	4b89      	ldr	r3, [pc, #548]	; (8102d4c <HAL_GPIO_Init+0x234>)
 8102b28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102b2a:	e194      	b.n	8102e56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102b2c:	683b      	ldr	r3, [r7, #0]
 8102b2e:	681a      	ldr	r2, [r3, #0]
 8102b30:	2101      	movs	r1, #1
 8102b32:	69fb      	ldr	r3, [r7, #28]
 8102b34:	fa01 f303 	lsl.w	r3, r1, r3
 8102b38:	4013      	ands	r3, r2
 8102b3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102b3c:	693b      	ldr	r3, [r7, #16]
 8102b3e:	2b00      	cmp	r3, #0
 8102b40:	f000 8186 	beq.w	8102e50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102b44:	683b      	ldr	r3, [r7, #0]
 8102b46:	685b      	ldr	r3, [r3, #4]
 8102b48:	f003 0303 	and.w	r3, r3, #3
 8102b4c:	2b01      	cmp	r3, #1
 8102b4e:	d005      	beq.n	8102b5c <HAL_GPIO_Init+0x44>
 8102b50:	683b      	ldr	r3, [r7, #0]
 8102b52:	685b      	ldr	r3, [r3, #4]
 8102b54:	f003 0303 	and.w	r3, r3, #3
 8102b58:	2b02      	cmp	r3, #2
 8102b5a:	d130      	bne.n	8102bbe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102b5c:	687b      	ldr	r3, [r7, #4]
 8102b5e:	689b      	ldr	r3, [r3, #8]
 8102b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102b62:	69fb      	ldr	r3, [r7, #28]
 8102b64:	005b      	lsls	r3, r3, #1
 8102b66:	2203      	movs	r2, #3
 8102b68:	fa02 f303 	lsl.w	r3, r2, r3
 8102b6c:	43db      	mvns	r3, r3
 8102b6e:	69ba      	ldr	r2, [r7, #24]
 8102b70:	4013      	ands	r3, r2
 8102b72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102b74:	683b      	ldr	r3, [r7, #0]
 8102b76:	68da      	ldr	r2, [r3, #12]
 8102b78:	69fb      	ldr	r3, [r7, #28]
 8102b7a:	005b      	lsls	r3, r3, #1
 8102b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8102b80:	69ba      	ldr	r2, [r7, #24]
 8102b82:	4313      	orrs	r3, r2
 8102b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102b86:	687b      	ldr	r3, [r7, #4]
 8102b88:	69ba      	ldr	r2, [r7, #24]
 8102b8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102b8c:	687b      	ldr	r3, [r7, #4]
 8102b8e:	685b      	ldr	r3, [r3, #4]
 8102b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102b92:	2201      	movs	r2, #1
 8102b94:	69fb      	ldr	r3, [r7, #28]
 8102b96:	fa02 f303 	lsl.w	r3, r2, r3
 8102b9a:	43db      	mvns	r3, r3
 8102b9c:	69ba      	ldr	r2, [r7, #24]
 8102b9e:	4013      	ands	r3, r2
 8102ba0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102ba2:	683b      	ldr	r3, [r7, #0]
 8102ba4:	685b      	ldr	r3, [r3, #4]
 8102ba6:	091b      	lsrs	r3, r3, #4
 8102ba8:	f003 0201 	and.w	r2, r3, #1
 8102bac:	69fb      	ldr	r3, [r7, #28]
 8102bae:	fa02 f303 	lsl.w	r3, r2, r3
 8102bb2:	69ba      	ldr	r2, [r7, #24]
 8102bb4:	4313      	orrs	r3, r2
 8102bb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102bb8:	687b      	ldr	r3, [r7, #4]
 8102bba:	69ba      	ldr	r2, [r7, #24]
 8102bbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102bbe:	683b      	ldr	r3, [r7, #0]
 8102bc0:	685b      	ldr	r3, [r3, #4]
 8102bc2:	f003 0303 	and.w	r3, r3, #3
 8102bc6:	2b03      	cmp	r3, #3
 8102bc8:	d017      	beq.n	8102bfa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102bca:	687b      	ldr	r3, [r7, #4]
 8102bcc:	68db      	ldr	r3, [r3, #12]
 8102bce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102bd0:	69fb      	ldr	r3, [r7, #28]
 8102bd2:	005b      	lsls	r3, r3, #1
 8102bd4:	2203      	movs	r2, #3
 8102bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8102bda:	43db      	mvns	r3, r3
 8102bdc:	69ba      	ldr	r2, [r7, #24]
 8102bde:	4013      	ands	r3, r2
 8102be0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102be2:	683b      	ldr	r3, [r7, #0]
 8102be4:	689a      	ldr	r2, [r3, #8]
 8102be6:	69fb      	ldr	r3, [r7, #28]
 8102be8:	005b      	lsls	r3, r3, #1
 8102bea:	fa02 f303 	lsl.w	r3, r2, r3
 8102bee:	69ba      	ldr	r2, [r7, #24]
 8102bf0:	4313      	orrs	r3, r2
 8102bf2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	69ba      	ldr	r2, [r7, #24]
 8102bf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102bfa:	683b      	ldr	r3, [r7, #0]
 8102bfc:	685b      	ldr	r3, [r3, #4]
 8102bfe:	f003 0303 	and.w	r3, r3, #3
 8102c02:	2b02      	cmp	r3, #2
 8102c04:	d123      	bne.n	8102c4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102c06:	69fb      	ldr	r3, [r7, #28]
 8102c08:	08da      	lsrs	r2, r3, #3
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	3208      	adds	r2, #8
 8102c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102c14:	69fb      	ldr	r3, [r7, #28]
 8102c16:	f003 0307 	and.w	r3, r3, #7
 8102c1a:	009b      	lsls	r3, r3, #2
 8102c1c:	220f      	movs	r2, #15
 8102c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8102c22:	43db      	mvns	r3, r3
 8102c24:	69ba      	ldr	r2, [r7, #24]
 8102c26:	4013      	ands	r3, r2
 8102c28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102c2a:	683b      	ldr	r3, [r7, #0]
 8102c2c:	691a      	ldr	r2, [r3, #16]
 8102c2e:	69fb      	ldr	r3, [r7, #28]
 8102c30:	f003 0307 	and.w	r3, r3, #7
 8102c34:	009b      	lsls	r3, r3, #2
 8102c36:	fa02 f303 	lsl.w	r3, r2, r3
 8102c3a:	69ba      	ldr	r2, [r7, #24]
 8102c3c:	4313      	orrs	r3, r2
 8102c3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102c40:	69fb      	ldr	r3, [r7, #28]
 8102c42:	08da      	lsrs	r2, r3, #3
 8102c44:	687b      	ldr	r3, [r7, #4]
 8102c46:	3208      	adds	r2, #8
 8102c48:	69b9      	ldr	r1, [r7, #24]
 8102c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	681b      	ldr	r3, [r3, #0]
 8102c52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102c54:	69fb      	ldr	r3, [r7, #28]
 8102c56:	005b      	lsls	r3, r3, #1
 8102c58:	2203      	movs	r2, #3
 8102c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8102c5e:	43db      	mvns	r3, r3
 8102c60:	69ba      	ldr	r2, [r7, #24]
 8102c62:	4013      	ands	r3, r2
 8102c64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102c66:	683b      	ldr	r3, [r7, #0]
 8102c68:	685b      	ldr	r3, [r3, #4]
 8102c6a:	f003 0203 	and.w	r2, r3, #3
 8102c6e:	69fb      	ldr	r3, [r7, #28]
 8102c70:	005b      	lsls	r3, r3, #1
 8102c72:	fa02 f303 	lsl.w	r3, r2, r3
 8102c76:	69ba      	ldr	r2, [r7, #24]
 8102c78:	4313      	orrs	r3, r2
 8102c7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	69ba      	ldr	r2, [r7, #24]
 8102c80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102c82:	683b      	ldr	r3, [r7, #0]
 8102c84:	685b      	ldr	r3, [r3, #4]
 8102c86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102c8a:	2b00      	cmp	r3, #0
 8102c8c:	f000 80e0 	beq.w	8102e50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102c90:	4b2f      	ldr	r3, [pc, #188]	; (8102d50 <HAL_GPIO_Init+0x238>)
 8102c92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102c96:	4a2e      	ldr	r2, [pc, #184]	; (8102d50 <HAL_GPIO_Init+0x238>)
 8102c98:	f043 0302 	orr.w	r3, r3, #2
 8102c9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102ca0:	4b2b      	ldr	r3, [pc, #172]	; (8102d50 <HAL_GPIO_Init+0x238>)
 8102ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102ca6:	f003 0302 	and.w	r3, r3, #2
 8102caa:	60fb      	str	r3, [r7, #12]
 8102cac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102cae:	4a29      	ldr	r2, [pc, #164]	; (8102d54 <HAL_GPIO_Init+0x23c>)
 8102cb0:	69fb      	ldr	r3, [r7, #28]
 8102cb2:	089b      	lsrs	r3, r3, #2
 8102cb4:	3302      	adds	r3, #2
 8102cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102cbc:	69fb      	ldr	r3, [r7, #28]
 8102cbe:	f003 0303 	and.w	r3, r3, #3
 8102cc2:	009b      	lsls	r3, r3, #2
 8102cc4:	220f      	movs	r2, #15
 8102cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8102cca:	43db      	mvns	r3, r3
 8102ccc:	69ba      	ldr	r2, [r7, #24]
 8102cce:	4013      	ands	r3, r2
 8102cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102cd2:	687b      	ldr	r3, [r7, #4]
 8102cd4:	4a20      	ldr	r2, [pc, #128]	; (8102d58 <HAL_GPIO_Init+0x240>)
 8102cd6:	4293      	cmp	r3, r2
 8102cd8:	d052      	beq.n	8102d80 <HAL_GPIO_Init+0x268>
 8102cda:	687b      	ldr	r3, [r7, #4]
 8102cdc:	4a1f      	ldr	r2, [pc, #124]	; (8102d5c <HAL_GPIO_Init+0x244>)
 8102cde:	4293      	cmp	r3, r2
 8102ce0:	d031      	beq.n	8102d46 <HAL_GPIO_Init+0x22e>
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	4a1e      	ldr	r2, [pc, #120]	; (8102d60 <HAL_GPIO_Init+0x248>)
 8102ce6:	4293      	cmp	r3, r2
 8102ce8:	d02b      	beq.n	8102d42 <HAL_GPIO_Init+0x22a>
 8102cea:	687b      	ldr	r3, [r7, #4]
 8102cec:	4a1d      	ldr	r2, [pc, #116]	; (8102d64 <HAL_GPIO_Init+0x24c>)
 8102cee:	4293      	cmp	r3, r2
 8102cf0:	d025      	beq.n	8102d3e <HAL_GPIO_Init+0x226>
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	4a1c      	ldr	r2, [pc, #112]	; (8102d68 <HAL_GPIO_Init+0x250>)
 8102cf6:	4293      	cmp	r3, r2
 8102cf8:	d01f      	beq.n	8102d3a <HAL_GPIO_Init+0x222>
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	4a1b      	ldr	r2, [pc, #108]	; (8102d6c <HAL_GPIO_Init+0x254>)
 8102cfe:	4293      	cmp	r3, r2
 8102d00:	d019      	beq.n	8102d36 <HAL_GPIO_Init+0x21e>
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	4a1a      	ldr	r2, [pc, #104]	; (8102d70 <HAL_GPIO_Init+0x258>)
 8102d06:	4293      	cmp	r3, r2
 8102d08:	d013      	beq.n	8102d32 <HAL_GPIO_Init+0x21a>
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	4a19      	ldr	r2, [pc, #100]	; (8102d74 <HAL_GPIO_Init+0x25c>)
 8102d0e:	4293      	cmp	r3, r2
 8102d10:	d00d      	beq.n	8102d2e <HAL_GPIO_Init+0x216>
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	4a18      	ldr	r2, [pc, #96]	; (8102d78 <HAL_GPIO_Init+0x260>)
 8102d16:	4293      	cmp	r3, r2
 8102d18:	d007      	beq.n	8102d2a <HAL_GPIO_Init+0x212>
 8102d1a:	687b      	ldr	r3, [r7, #4]
 8102d1c:	4a17      	ldr	r2, [pc, #92]	; (8102d7c <HAL_GPIO_Init+0x264>)
 8102d1e:	4293      	cmp	r3, r2
 8102d20:	d101      	bne.n	8102d26 <HAL_GPIO_Init+0x20e>
 8102d22:	2309      	movs	r3, #9
 8102d24:	e02d      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d26:	230a      	movs	r3, #10
 8102d28:	e02b      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d2a:	2308      	movs	r3, #8
 8102d2c:	e029      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d2e:	2307      	movs	r3, #7
 8102d30:	e027      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d32:	2306      	movs	r3, #6
 8102d34:	e025      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d36:	2305      	movs	r3, #5
 8102d38:	e023      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d3a:	2304      	movs	r3, #4
 8102d3c:	e021      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d3e:	2303      	movs	r3, #3
 8102d40:	e01f      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d42:	2302      	movs	r3, #2
 8102d44:	e01d      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d46:	2301      	movs	r3, #1
 8102d48:	e01b      	b.n	8102d82 <HAL_GPIO_Init+0x26a>
 8102d4a:	bf00      	nop
 8102d4c:	580000c0 	.word	0x580000c0
 8102d50:	58024400 	.word	0x58024400
 8102d54:	58000400 	.word	0x58000400
 8102d58:	58020000 	.word	0x58020000
 8102d5c:	58020400 	.word	0x58020400
 8102d60:	58020800 	.word	0x58020800
 8102d64:	58020c00 	.word	0x58020c00
 8102d68:	58021000 	.word	0x58021000
 8102d6c:	58021400 	.word	0x58021400
 8102d70:	58021800 	.word	0x58021800
 8102d74:	58021c00 	.word	0x58021c00
 8102d78:	58022000 	.word	0x58022000
 8102d7c:	58022400 	.word	0x58022400
 8102d80:	2300      	movs	r3, #0
 8102d82:	69fa      	ldr	r2, [r7, #28]
 8102d84:	f002 0203 	and.w	r2, r2, #3
 8102d88:	0092      	lsls	r2, r2, #2
 8102d8a:	4093      	lsls	r3, r2
 8102d8c:	69ba      	ldr	r2, [r7, #24]
 8102d8e:	4313      	orrs	r3, r2
 8102d90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102d92:	4938      	ldr	r1, [pc, #224]	; (8102e74 <HAL_GPIO_Init+0x35c>)
 8102d94:	69fb      	ldr	r3, [r7, #28]
 8102d96:	089b      	lsrs	r3, r3, #2
 8102d98:	3302      	adds	r3, #2
 8102d9a:	69ba      	ldr	r2, [r7, #24]
 8102d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102da4:	681b      	ldr	r3, [r3, #0]
 8102da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102da8:	693b      	ldr	r3, [r7, #16]
 8102daa:	43db      	mvns	r3, r3
 8102dac:	69ba      	ldr	r2, [r7, #24]
 8102dae:	4013      	ands	r3, r2
 8102db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102db2:	683b      	ldr	r3, [r7, #0]
 8102db4:	685b      	ldr	r3, [r3, #4]
 8102db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8102dba:	2b00      	cmp	r3, #0
 8102dbc:	d003      	beq.n	8102dc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102dbe:	69ba      	ldr	r2, [r7, #24]
 8102dc0:	693b      	ldr	r3, [r7, #16]
 8102dc2:	4313      	orrs	r3, r2
 8102dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102dca:	69bb      	ldr	r3, [r7, #24]
 8102dcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102dd2:	685b      	ldr	r3, [r3, #4]
 8102dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102dd6:	693b      	ldr	r3, [r7, #16]
 8102dd8:	43db      	mvns	r3, r3
 8102dda:	69ba      	ldr	r2, [r7, #24]
 8102ddc:	4013      	ands	r3, r2
 8102dde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102de0:	683b      	ldr	r3, [r7, #0]
 8102de2:	685b      	ldr	r3, [r3, #4]
 8102de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102de8:	2b00      	cmp	r3, #0
 8102dea:	d003      	beq.n	8102df4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102dec:	69ba      	ldr	r2, [r7, #24]
 8102dee:	693b      	ldr	r3, [r7, #16]
 8102df0:	4313      	orrs	r3, r2
 8102df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102df8:	69bb      	ldr	r3, [r7, #24]
 8102dfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102dfc:	697b      	ldr	r3, [r7, #20]
 8102dfe:	685b      	ldr	r3, [r3, #4]
 8102e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102e02:	693b      	ldr	r3, [r7, #16]
 8102e04:	43db      	mvns	r3, r3
 8102e06:	69ba      	ldr	r2, [r7, #24]
 8102e08:	4013      	ands	r3, r2
 8102e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102e0c:	683b      	ldr	r3, [r7, #0]
 8102e0e:	685b      	ldr	r3, [r3, #4]
 8102e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102e14:	2b00      	cmp	r3, #0
 8102e16:	d003      	beq.n	8102e20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102e18:	69ba      	ldr	r2, [r7, #24]
 8102e1a:	693b      	ldr	r3, [r7, #16]
 8102e1c:	4313      	orrs	r3, r2
 8102e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102e20:	697b      	ldr	r3, [r7, #20]
 8102e22:	69ba      	ldr	r2, [r7, #24]
 8102e24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102e26:	697b      	ldr	r3, [r7, #20]
 8102e28:	681b      	ldr	r3, [r3, #0]
 8102e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102e2c:	693b      	ldr	r3, [r7, #16]
 8102e2e:	43db      	mvns	r3, r3
 8102e30:	69ba      	ldr	r2, [r7, #24]
 8102e32:	4013      	ands	r3, r2
 8102e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102e36:	683b      	ldr	r3, [r7, #0]
 8102e38:	685b      	ldr	r3, [r3, #4]
 8102e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8102e3e:	2b00      	cmp	r3, #0
 8102e40:	d003      	beq.n	8102e4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102e42:	69ba      	ldr	r2, [r7, #24]
 8102e44:	693b      	ldr	r3, [r7, #16]
 8102e46:	4313      	orrs	r3, r2
 8102e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102e4a:	697b      	ldr	r3, [r7, #20]
 8102e4c:	69ba      	ldr	r2, [r7, #24]
 8102e4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102e50:	69fb      	ldr	r3, [r7, #28]
 8102e52:	3301      	adds	r3, #1
 8102e54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102e56:	683b      	ldr	r3, [r7, #0]
 8102e58:	681a      	ldr	r2, [r3, #0]
 8102e5a:	69fb      	ldr	r3, [r7, #28]
 8102e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8102e60:	2b00      	cmp	r3, #0
 8102e62:	f47f ae63 	bne.w	8102b2c <HAL_GPIO_Init+0x14>
  }
}
 8102e66:	bf00      	nop
 8102e68:	bf00      	nop
 8102e6a:	3724      	adds	r7, #36	; 0x24
 8102e6c:	46bd      	mov	sp, r7
 8102e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e72:	4770      	bx	lr
 8102e74:	58000400 	.word	0x58000400

08102e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8102e78:	b480      	push	{r7}
 8102e7a:	b083      	sub	sp, #12
 8102e7c:	af00      	add	r7, sp, #0
 8102e7e:	6078      	str	r0, [r7, #4]
 8102e80:	460b      	mov	r3, r1
 8102e82:	807b      	strh	r3, [r7, #2]
 8102e84:	4613      	mov	r3, r2
 8102e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102e88:	787b      	ldrb	r3, [r7, #1]
 8102e8a:	2b00      	cmp	r3, #0
 8102e8c:	d003      	beq.n	8102e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8102e8e:	887a      	ldrh	r2, [r7, #2]
 8102e90:	687b      	ldr	r3, [r7, #4]
 8102e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102e94:	e003      	b.n	8102e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102e96:	887b      	ldrh	r3, [r7, #2]
 8102e98:	041a      	lsls	r2, r3, #16
 8102e9a:	687b      	ldr	r3, [r7, #4]
 8102e9c:	619a      	str	r2, [r3, #24]
}
 8102e9e:	bf00      	nop
 8102ea0:	370c      	adds	r7, #12
 8102ea2:	46bd      	mov	sp, r7
 8102ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ea8:	4770      	bx	lr

08102eaa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8102eaa:	b580      	push	{r7, lr}
 8102eac:	b082      	sub	sp, #8
 8102eae:	af00      	add	r7, sp, #0
 8102eb0:	4603      	mov	r3, r0
 8102eb2:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 8102eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102eb8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8102ebc:	88fb      	ldrh	r3, [r7, #6]
 8102ebe:	4013      	ands	r3, r2
 8102ec0:	2b00      	cmp	r3, #0
 8102ec2:	d008      	beq.n	8102ed6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 8102ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8102ec8:	88fb      	ldrh	r3, [r7, #6]
 8102eca:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8102ece:	88fb      	ldrh	r3, [r7, #6]
 8102ed0:	4618      	mov	r0, r3
 8102ed2:	f7ff f9e3 	bl	810229c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102ed6:	bf00      	nop
 8102ed8:	3708      	adds	r7, #8
 8102eda:	46bd      	mov	sp, r7
 8102edc:	bd80      	pop	{r7, pc}
	...

08102ee0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102ee0:	b480      	push	{r7}
 8102ee2:	b083      	sub	sp, #12
 8102ee4:	af00      	add	r7, sp, #0
 8102ee6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102ee8:	4b05      	ldr	r3, [pc, #20]	; (8102f00 <HAL_HSEM_ActivateNotification+0x20>)
 8102eea:	681a      	ldr	r2, [r3, #0]
 8102eec:	4904      	ldr	r1, [pc, #16]	; (8102f00 <HAL_HSEM_ActivateNotification+0x20>)
 8102eee:	687b      	ldr	r3, [r7, #4]
 8102ef0:	4313      	orrs	r3, r2
 8102ef2:	600b      	str	r3, [r1, #0]
#endif
}
 8102ef4:	bf00      	nop
 8102ef6:	370c      	adds	r7, #12
 8102ef8:	46bd      	mov	sp, r7
 8102efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102efe:	4770      	bx	lr
 8102f00:	58026510 	.word	0x58026510

08102f04 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102f04:	b580      	push	{r7, lr}
 8102f06:	b084      	sub	sp, #16
 8102f08:	af00      	add	r7, sp, #0
 8102f0a:	60f8      	str	r0, [r7, #12]
 8102f0c:	460b      	mov	r3, r1
 8102f0e:	607a      	str	r2, [r7, #4]
 8102f10:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8102f12:	4b37      	ldr	r3, [pc, #220]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	f023 0201 	bic.w	r2, r3, #1
 8102f1a:	4935      	ldr	r1, [pc, #212]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f1c:	68fb      	ldr	r3, [r7, #12]
 8102f1e:	4313      	orrs	r3, r2
 8102f20:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8102f22:	687b      	ldr	r3, [r7, #4]
 8102f24:	2b00      	cmp	r3, #0
 8102f26:	d123      	bne.n	8102f70 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102f28:	f7ff fde2 	bl	8102af0 <HAL_GetCurrentCPUID>
 8102f2c:	4603      	mov	r3, r0
 8102f2e:	2b03      	cmp	r3, #3
 8102f30:	d158      	bne.n	8102fe4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8102f32:	4b2f      	ldr	r3, [pc, #188]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f34:	691b      	ldr	r3, [r3, #16]
 8102f36:	4a2e      	ldr	r2, [pc, #184]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f38:	f023 0301 	bic.w	r3, r3, #1
 8102f3c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f3e:	4b2d      	ldr	r3, [pc, #180]	; (8102ff4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f40:	691b      	ldr	r3, [r3, #16]
 8102f42:	4a2c      	ldr	r2, [pc, #176]	; (8102ff4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f44:	f043 0304 	orr.w	r3, r3, #4
 8102f48:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102f4a:	f3bf 8f4f 	dsb	sy
}
 8102f4e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102f50:	f3bf 8f6f 	isb	sy
}
 8102f54:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102f56:	7afb      	ldrb	r3, [r7, #11]
 8102f58:	2b01      	cmp	r3, #1
 8102f5a:	d101      	bne.n	8102f60 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102f5c:	bf30      	wfi
 8102f5e:	e000      	b.n	8102f62 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102f60:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f62:	4b24      	ldr	r3, [pc, #144]	; (8102ff4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f64:	691b      	ldr	r3, [r3, #16]
 8102f66:	4a23      	ldr	r2, [pc, #140]	; (8102ff4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f68:	f023 0304 	bic.w	r3, r3, #4
 8102f6c:	6113      	str	r3, [r2, #16]
 8102f6e:	e03c      	b.n	8102fea <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8102f70:	687b      	ldr	r3, [r7, #4]
 8102f72:	2b01      	cmp	r3, #1
 8102f74:	d123      	bne.n	8102fbe <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8102f76:	f7ff fdbb 	bl	8102af0 <HAL_GetCurrentCPUID>
 8102f7a:	4603      	mov	r3, r0
 8102f7c:	2b01      	cmp	r3, #1
 8102f7e:	d133      	bne.n	8102fe8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8102f80:	4b1b      	ldr	r3, [pc, #108]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f82:	695b      	ldr	r3, [r3, #20]
 8102f84:	4a1a      	ldr	r2, [pc, #104]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102f86:	f023 0302 	bic.w	r3, r3, #2
 8102f8a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102f8c:	4b19      	ldr	r3, [pc, #100]	; (8102ff4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f8e:	691b      	ldr	r3, [r3, #16]
 8102f90:	4a18      	ldr	r2, [pc, #96]	; (8102ff4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102f92:	f043 0304 	orr.w	r3, r3, #4
 8102f96:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8102f98:	f3bf 8f4f 	dsb	sy
}
 8102f9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102f9e:	f3bf 8f6f 	isb	sy
}
 8102fa2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8102fa4:	7afb      	ldrb	r3, [r7, #11]
 8102fa6:	2b01      	cmp	r3, #1
 8102fa8:	d101      	bne.n	8102fae <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8102faa:	bf30      	wfi
 8102fac:	e000      	b.n	8102fb0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8102fae:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8102fb0:	4b10      	ldr	r3, [pc, #64]	; (8102ff4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fb2:	691b      	ldr	r3, [r3, #16]
 8102fb4:	4a0f      	ldr	r2, [pc, #60]	; (8102ff4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102fb6:	f023 0304 	bic.w	r3, r3, #4
 8102fba:	6113      	str	r3, [r2, #16]
 8102fbc:	e015      	b.n	8102fea <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102fbe:	f7ff fd97 	bl	8102af0 <HAL_GetCurrentCPUID>
 8102fc2:	4603      	mov	r3, r0
 8102fc4:	2b03      	cmp	r3, #3
 8102fc6:	d106      	bne.n	8102fd6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102fc8:	4b09      	ldr	r3, [pc, #36]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fca:	691b      	ldr	r3, [r3, #16]
 8102fcc:	4a08      	ldr	r2, [pc, #32]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fce:	f023 0304 	bic.w	r3, r3, #4
 8102fd2:	6113      	str	r3, [r2, #16]
 8102fd4:	e009      	b.n	8102fea <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102fd6:	4b06      	ldr	r3, [pc, #24]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fd8:	695b      	ldr	r3, [r3, #20]
 8102fda:	4a05      	ldr	r2, [pc, #20]	; (8102ff0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8102fdc:	f023 0304 	bic.w	r3, r3, #4
 8102fe0:	6153      	str	r3, [r2, #20]
 8102fe2:	e002      	b.n	8102fea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102fe4:	bf00      	nop
 8102fe6:	e000      	b.n	8102fea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102fe8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102fea:	3710      	adds	r7, #16
 8102fec:	46bd      	mov	sp, r7
 8102fee:	bd80      	pop	{r7, pc}
 8102ff0:	58024800 	.word	0x58024800
 8102ff4:	e000ed00 	.word	0xe000ed00

08102ff8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102ff8:	b580      	push	{r7, lr}
 8102ffa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102ffc:	f7ff fd78 	bl	8102af0 <HAL_GetCurrentCPUID>
 8103000:	4603      	mov	r3, r0
 8103002:	2b03      	cmp	r3, #3
 8103004:	d101      	bne.n	810300a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103006:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103008:	e001      	b.n	810300e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810300a:	bf40      	sev
    __WFE ();
 810300c:	bf20      	wfe
}
 810300e:	bf00      	nop
 8103010:	bd80      	pop	{r7, pc}
	...

08103014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103014:	b480      	push	{r7}
 8103016:	b089      	sub	sp, #36	; 0x24
 8103018:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810301a:	4bb3      	ldr	r3, [pc, #716]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810301c:	691b      	ldr	r3, [r3, #16]
 810301e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8103022:	2b18      	cmp	r3, #24
 8103024:	f200 8155 	bhi.w	81032d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8103028:	a201      	add	r2, pc, #4	; (adr r2, 8103030 <HAL_RCC_GetSysClockFreq+0x1c>)
 810302a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810302e:	bf00      	nop
 8103030:	08103095 	.word	0x08103095
 8103034:	081032d3 	.word	0x081032d3
 8103038:	081032d3 	.word	0x081032d3
 810303c:	081032d3 	.word	0x081032d3
 8103040:	081032d3 	.word	0x081032d3
 8103044:	081032d3 	.word	0x081032d3
 8103048:	081032d3 	.word	0x081032d3
 810304c:	081032d3 	.word	0x081032d3
 8103050:	081030bb 	.word	0x081030bb
 8103054:	081032d3 	.word	0x081032d3
 8103058:	081032d3 	.word	0x081032d3
 810305c:	081032d3 	.word	0x081032d3
 8103060:	081032d3 	.word	0x081032d3
 8103064:	081032d3 	.word	0x081032d3
 8103068:	081032d3 	.word	0x081032d3
 810306c:	081032d3 	.word	0x081032d3
 8103070:	081030c1 	.word	0x081030c1
 8103074:	081032d3 	.word	0x081032d3
 8103078:	081032d3 	.word	0x081032d3
 810307c:	081032d3 	.word	0x081032d3
 8103080:	081032d3 	.word	0x081032d3
 8103084:	081032d3 	.word	0x081032d3
 8103088:	081032d3 	.word	0x081032d3
 810308c:	081032d3 	.word	0x081032d3
 8103090:	081030c7 	.word	0x081030c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103094:	4b94      	ldr	r3, [pc, #592]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	f003 0320 	and.w	r3, r3, #32
 810309c:	2b00      	cmp	r3, #0
 810309e:	d009      	beq.n	81030b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81030a0:	4b91      	ldr	r3, [pc, #580]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030a2:	681b      	ldr	r3, [r3, #0]
 81030a4:	08db      	lsrs	r3, r3, #3
 81030a6:	f003 0303 	and.w	r3, r3, #3
 81030aa:	4a90      	ldr	r2, [pc, #576]	; (81032ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81030ac:	fa22 f303 	lsr.w	r3, r2, r3
 81030b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 81030b2:	e111      	b.n	81032d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81030b4:	4b8d      	ldr	r3, [pc, #564]	; (81032ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81030b6:	61bb      	str	r3, [r7, #24]
    break;
 81030b8:	e10e      	b.n	81032d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81030ba:	4b8d      	ldr	r3, [pc, #564]	; (81032f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81030bc:	61bb      	str	r3, [r7, #24]
    break;
 81030be:	e10b      	b.n	81032d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81030c0:	4b8c      	ldr	r3, [pc, #560]	; (81032f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81030c2:	61bb      	str	r3, [r7, #24]
    break;
 81030c4:	e108      	b.n	81032d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81030c6:	4b88      	ldr	r3, [pc, #544]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030ca:	f003 0303 	and.w	r3, r3, #3
 81030ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81030d0:	4b85      	ldr	r3, [pc, #532]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81030d4:	091b      	lsrs	r3, r3, #4
 81030d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81030da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81030dc:	4b82      	ldr	r3, [pc, #520]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81030e0:	f003 0301 	and.w	r3, r3, #1
 81030e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81030e6:	4b80      	ldr	r3, [pc, #512]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81030e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81030ea:	08db      	lsrs	r3, r3, #3
 81030ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81030f0:	68fa      	ldr	r2, [r7, #12]
 81030f2:	fb02 f303 	mul.w	r3, r2, r3
 81030f6:	ee07 3a90 	vmov	s15, r3
 81030fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81030fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103102:	693b      	ldr	r3, [r7, #16]
 8103104:	2b00      	cmp	r3, #0
 8103106:	f000 80e1 	beq.w	81032cc <HAL_RCC_GetSysClockFreq+0x2b8>
 810310a:	697b      	ldr	r3, [r7, #20]
 810310c:	2b02      	cmp	r3, #2
 810310e:	f000 8083 	beq.w	8103218 <HAL_RCC_GetSysClockFreq+0x204>
 8103112:	697b      	ldr	r3, [r7, #20]
 8103114:	2b02      	cmp	r3, #2
 8103116:	f200 80a1 	bhi.w	810325c <HAL_RCC_GetSysClockFreq+0x248>
 810311a:	697b      	ldr	r3, [r7, #20]
 810311c:	2b00      	cmp	r3, #0
 810311e:	d003      	beq.n	8103128 <HAL_RCC_GetSysClockFreq+0x114>
 8103120:	697b      	ldr	r3, [r7, #20]
 8103122:	2b01      	cmp	r3, #1
 8103124:	d056      	beq.n	81031d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103126:	e099      	b.n	810325c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103128:	4b6f      	ldr	r3, [pc, #444]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810312a:	681b      	ldr	r3, [r3, #0]
 810312c:	f003 0320 	and.w	r3, r3, #32
 8103130:	2b00      	cmp	r3, #0
 8103132:	d02d      	beq.n	8103190 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103134:	4b6c      	ldr	r3, [pc, #432]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103136:	681b      	ldr	r3, [r3, #0]
 8103138:	08db      	lsrs	r3, r3, #3
 810313a:	f003 0303 	and.w	r3, r3, #3
 810313e:	4a6b      	ldr	r2, [pc, #428]	; (81032ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103140:	fa22 f303 	lsr.w	r3, r2, r3
 8103144:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103146:	687b      	ldr	r3, [r7, #4]
 8103148:	ee07 3a90 	vmov	s15, r3
 810314c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103150:	693b      	ldr	r3, [r7, #16]
 8103152:	ee07 3a90 	vmov	s15, r3
 8103156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810315a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810315e:	4b62      	ldr	r3, [pc, #392]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103166:	ee07 3a90 	vmov	s15, r3
 810316a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810316e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103172:	eddf 5a61 	vldr	s11, [pc, #388]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810317a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810317e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103186:	ee67 7a27 	vmul.f32	s15, s14, s15
 810318a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810318e:	e087      	b.n	81032a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103190:	693b      	ldr	r3, [r7, #16]
 8103192:	ee07 3a90 	vmov	s15, r3
 8103196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810319a:	eddf 6a58 	vldr	s13, [pc, #352]	; 81032fc <HAL_RCC_GetSysClockFreq+0x2e8>
 810319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031a2:	4b51      	ldr	r3, [pc, #324]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031aa:	ee07 3a90 	vmov	s15, r3
 81031ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81031b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81031ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81031be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81031c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81031c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81031ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81031d2:	e065      	b.n	81032a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81031d4:	693b      	ldr	r3, [r7, #16]
 81031d6:	ee07 3a90 	vmov	s15, r3
 81031da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81031de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103300 <HAL_RCC_GetSysClockFreq+0x2ec>
 81031e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81031e6:	4b40      	ldr	r3, [pc, #256]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81031ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81031ee:	ee07 3a90 	vmov	s15, r3
 81031f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81031f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81031fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81031fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810320a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810320e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103216:	e043      	b.n	81032a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103218:	693b      	ldr	r3, [r7, #16]
 810321a:	ee07 3a90 	vmov	s15, r3
 810321e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103222:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103304 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810322a:	4b2f      	ldr	r3, [pc, #188]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810322e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103232:	ee07 3a90 	vmov	s15, r3
 8103236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810323a:	ed97 6a02 	vldr	s12, [r7, #8]
 810323e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810324a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810324e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810325a:	e021      	b.n	81032a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810325c:	693b      	ldr	r3, [r7, #16]
 810325e:	ee07 3a90 	vmov	s15, r3
 8103262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103266:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103300 <HAL_RCC_GetSysClockFreq+0x2ec>
 810326a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810326e:	4b1e      	ldr	r3, [pc, #120]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103276:	ee07 3a90 	vmov	s15, r3
 810327a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810327e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103282:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81032f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810328a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810328e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103296:	ee67 7a27 	vmul.f32	s15, s14, s15
 810329a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810329e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 81032a0:	4b11      	ldr	r3, [pc, #68]	; (81032e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81032a4:	0a5b      	lsrs	r3, r3, #9
 81032a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81032aa:	3301      	adds	r3, #1
 81032ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 81032ae:	683b      	ldr	r3, [r7, #0]
 81032b0:	ee07 3a90 	vmov	s15, r3
 81032b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81032b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81032bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81032c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81032c4:	ee17 3a90 	vmov	r3, s15
 81032c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81032ca:	e005      	b.n	81032d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81032cc:	2300      	movs	r3, #0
 81032ce:	61bb      	str	r3, [r7, #24]
    break;
 81032d0:	e002      	b.n	81032d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81032d2:	4b07      	ldr	r3, [pc, #28]	; (81032f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81032d4:	61bb      	str	r3, [r7, #24]
    break;
 81032d6:	bf00      	nop
  }

  return sysclockfreq;
 81032d8:	69bb      	ldr	r3, [r7, #24]
}
 81032da:	4618      	mov	r0, r3
 81032dc:	3724      	adds	r7, #36	; 0x24
 81032de:	46bd      	mov	sp, r7
 81032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032e4:	4770      	bx	lr
 81032e6:	bf00      	nop
 81032e8:	58024400 	.word	0x58024400
 81032ec:	03d09000 	.word	0x03d09000
 81032f0:	003d0900 	.word	0x003d0900
 81032f4:	007a1200 	.word	0x007a1200
 81032f8:	46000000 	.word	0x46000000
 81032fc:	4c742400 	.word	0x4c742400
 8103300:	4a742400 	.word	0x4a742400
 8103304:	4af42400 	.word	0x4af42400

08103308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103308:	b580      	push	{r7, lr}
 810330a:	b082      	sub	sp, #8
 810330c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810330e:	f7ff fe81 	bl	8103014 <HAL_RCC_GetSysClockFreq>
 8103312:	4602      	mov	r2, r0
 8103314:	4b11      	ldr	r3, [pc, #68]	; (810335c <HAL_RCC_GetHCLKFreq+0x54>)
 8103316:	699b      	ldr	r3, [r3, #24]
 8103318:	0a1b      	lsrs	r3, r3, #8
 810331a:	f003 030f 	and.w	r3, r3, #15
 810331e:	4910      	ldr	r1, [pc, #64]	; (8103360 <HAL_RCC_GetHCLKFreq+0x58>)
 8103320:	5ccb      	ldrb	r3, [r1, r3]
 8103322:	f003 031f 	and.w	r3, r3, #31
 8103326:	fa22 f303 	lsr.w	r3, r2, r3
 810332a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810332c:	4b0b      	ldr	r3, [pc, #44]	; (810335c <HAL_RCC_GetHCLKFreq+0x54>)
 810332e:	699b      	ldr	r3, [r3, #24]
 8103330:	f003 030f 	and.w	r3, r3, #15
 8103334:	4a0a      	ldr	r2, [pc, #40]	; (8103360 <HAL_RCC_GetHCLKFreq+0x58>)
 8103336:	5cd3      	ldrb	r3, [r2, r3]
 8103338:	f003 031f 	and.w	r3, r3, #31
 810333c:	687a      	ldr	r2, [r7, #4]
 810333e:	fa22 f303 	lsr.w	r3, r2, r3
 8103342:	4a08      	ldr	r2, [pc, #32]	; (8103364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103344:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103346:	4b07      	ldr	r3, [pc, #28]	; (8103364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103348:	681b      	ldr	r3, [r3, #0]
 810334a:	4a07      	ldr	r2, [pc, #28]	; (8103368 <HAL_RCC_GetHCLKFreq+0x60>)
 810334c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810334e:	4b05      	ldr	r3, [pc, #20]	; (8103364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103350:	681b      	ldr	r3, [r3, #0]
}
 8103352:	4618      	mov	r0, r3
 8103354:	3708      	adds	r7, #8
 8103356:	46bd      	mov	sp, r7
 8103358:	bd80      	pop	{r7, pc}
 810335a:	bf00      	nop
 810335c:	58024400 	.word	0x58024400
 8103360:	0810cbf0 	.word	0x0810cbf0
 8103364:	10000004 	.word	0x10000004
 8103368:	10000000 	.word	0x10000000

0810336c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810336c:	b580      	push	{r7, lr}
 810336e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103370:	f7ff ffca 	bl	8103308 <HAL_RCC_GetHCLKFreq>
 8103374:	4602      	mov	r2, r0
 8103376:	4b06      	ldr	r3, [pc, #24]	; (8103390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103378:	69db      	ldr	r3, [r3, #28]
 810337a:	091b      	lsrs	r3, r3, #4
 810337c:	f003 0307 	and.w	r3, r3, #7
 8103380:	4904      	ldr	r1, [pc, #16]	; (8103394 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103382:	5ccb      	ldrb	r3, [r1, r3]
 8103384:	f003 031f 	and.w	r3, r3, #31
 8103388:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810338c:	4618      	mov	r0, r3
 810338e:	bd80      	pop	{r7, pc}
 8103390:	58024400 	.word	0x58024400
 8103394:	0810cbf0 	.word	0x0810cbf0

08103398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8103398:	b580      	push	{r7, lr}
 810339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810339c:	f7ff ffb4 	bl	8103308 <HAL_RCC_GetHCLKFreq>
 81033a0:	4602      	mov	r2, r0
 81033a2:	4b06      	ldr	r3, [pc, #24]	; (81033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 81033a4:	69db      	ldr	r3, [r3, #28]
 81033a6:	0a1b      	lsrs	r3, r3, #8
 81033a8:	f003 0307 	and.w	r3, r3, #7
 81033ac:	4904      	ldr	r1, [pc, #16]	; (81033c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 81033ae:	5ccb      	ldrb	r3, [r1, r3]
 81033b0:	f003 031f 	and.w	r3, r3, #31
 81033b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81033b8:	4618      	mov	r0, r3
 81033ba:	bd80      	pop	{r7, pc}
 81033bc:	58024400 	.word	0x58024400
 81033c0:	0810cbf0 	.word	0x0810cbf0

081033c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81033c4:	b580      	push	{r7, lr}
 81033c6:	b086      	sub	sp, #24
 81033c8:	af00      	add	r7, sp, #0
 81033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81033cc:	2300      	movs	r3, #0
 81033ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81033d0:	2300      	movs	r3, #0
 81033d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	681b      	ldr	r3, [r3, #0]
 81033d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81033dc:	2b00      	cmp	r3, #0
 81033de:	d03f      	beq.n	8103460 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81033e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81033e8:	d02a      	beq.n	8103440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 81033ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81033ee:	d824      	bhi.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x76>
 81033f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81033f4:	d018      	beq.n	8103428 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81033f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81033fa:	d81e      	bhi.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x76>
 81033fc:	2b00      	cmp	r3, #0
 81033fe:	d003      	beq.n	8103408 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103404:	d007      	beq.n	8103416 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103406:	e018      	b.n	810343a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103408:	4bab      	ldr	r3, [pc, #684]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810340a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810340c:	4aaa      	ldr	r2, [pc, #680]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810340e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103414:	e015      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	3304      	adds	r3, #4
 810341a:	2102      	movs	r1, #2
 810341c:	4618      	mov	r0, r3
 810341e:	f001 f9cf 	bl	81047c0 <RCCEx_PLL2_Config>
 8103422:	4603      	mov	r3, r0
 8103424:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103426:	e00c      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103428:	687b      	ldr	r3, [r7, #4]
 810342a:	3324      	adds	r3, #36	; 0x24
 810342c:	2102      	movs	r1, #2
 810342e:	4618      	mov	r0, r3
 8103430:	f001 fa78 	bl	8104924 <RCCEx_PLL3_Config>
 8103434:	4603      	mov	r3, r0
 8103436:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103438:	e003      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810343a:	2301      	movs	r3, #1
 810343c:	75fb      	strb	r3, [r7, #23]
      break;
 810343e:	e000      	b.n	8103442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103442:	7dfb      	ldrb	r3, [r7, #23]
 8103444:	2b00      	cmp	r3, #0
 8103446:	d109      	bne.n	810345c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103448:	4b9b      	ldr	r3, [pc, #620]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810344c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103450:	687b      	ldr	r3, [r7, #4]
 8103452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103454:	4998      	ldr	r1, [pc, #608]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103456:	4313      	orrs	r3, r2
 8103458:	650b      	str	r3, [r1, #80]	; 0x50
 810345a:	e001      	b.n	8103460 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810345c:	7dfb      	ldrb	r3, [r7, #23]
 810345e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103460:	687b      	ldr	r3, [r7, #4]
 8103462:	681b      	ldr	r3, [r3, #0]
 8103464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103468:	2b00      	cmp	r3, #0
 810346a:	d03d      	beq.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 810346c:	687b      	ldr	r3, [r7, #4]
 810346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103470:	2b04      	cmp	r3, #4
 8103472:	d826      	bhi.n	81034c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103474:	a201      	add	r2, pc, #4	; (adr r2, 810347c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810347a:	bf00      	nop
 810347c:	08103491 	.word	0x08103491
 8103480:	0810349f 	.word	0x0810349f
 8103484:	081034b1 	.word	0x081034b1
 8103488:	081034c9 	.word	0x081034c9
 810348c:	081034c9 	.word	0x081034c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103490:	4b89      	ldr	r3, [pc, #548]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103494:	4a88      	ldr	r2, [pc, #544]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810349a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810349c:	e015      	b.n	81034ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810349e:	687b      	ldr	r3, [r7, #4]
 81034a0:	3304      	adds	r3, #4
 81034a2:	2100      	movs	r1, #0
 81034a4:	4618      	mov	r0, r3
 81034a6:	f001 f98b 	bl	81047c0 <RCCEx_PLL2_Config>
 81034aa:	4603      	mov	r3, r0
 81034ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81034ae:	e00c      	b.n	81034ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81034b0:	687b      	ldr	r3, [r7, #4]
 81034b2:	3324      	adds	r3, #36	; 0x24
 81034b4:	2100      	movs	r1, #0
 81034b6:	4618      	mov	r0, r3
 81034b8:	f001 fa34 	bl	8104924 <RCCEx_PLL3_Config>
 81034bc:	4603      	mov	r3, r0
 81034be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81034c0:	e003      	b.n	81034ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81034c2:	2301      	movs	r3, #1
 81034c4:	75fb      	strb	r3, [r7, #23]
      break;
 81034c6:	e000      	b.n	81034ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 81034c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81034ca:	7dfb      	ldrb	r3, [r7, #23]
 81034cc:	2b00      	cmp	r3, #0
 81034ce:	d109      	bne.n	81034e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81034d0:	4b79      	ldr	r3, [pc, #484]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81034d4:	f023 0207 	bic.w	r2, r3, #7
 81034d8:	687b      	ldr	r3, [r7, #4]
 81034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81034dc:	4976      	ldr	r1, [pc, #472]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81034de:	4313      	orrs	r3, r2
 81034e0:	650b      	str	r3, [r1, #80]	; 0x50
 81034e2:	e001      	b.n	81034e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034e4:	7dfb      	ldrb	r3, [r7, #23]
 81034e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81034e8:	687b      	ldr	r3, [r7, #4]
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	d042      	beq.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81034f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81034fc:	d02b      	beq.n	8103556 <HAL_RCCEx_PeriphCLKConfig+0x192>
 81034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103502:	d825      	bhi.n	8103550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103504:	2bc0      	cmp	r3, #192	; 0xc0
 8103506:	d028      	beq.n	810355a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103508:	2bc0      	cmp	r3, #192	; 0xc0
 810350a:	d821      	bhi.n	8103550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 810350c:	2b80      	cmp	r3, #128	; 0x80
 810350e:	d016      	beq.n	810353e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103510:	2b80      	cmp	r3, #128	; 0x80
 8103512:	d81d      	bhi.n	8103550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103514:	2b00      	cmp	r3, #0
 8103516:	d002      	beq.n	810351e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103518:	2b40      	cmp	r3, #64	; 0x40
 810351a:	d007      	beq.n	810352c <HAL_RCCEx_PeriphCLKConfig+0x168>
 810351c:	e018      	b.n	8103550 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810351e:	4b66      	ldr	r3, [pc, #408]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103522:	4a65      	ldr	r2, [pc, #404]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103528:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810352a:	e017      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810352c:	687b      	ldr	r3, [r7, #4]
 810352e:	3304      	adds	r3, #4
 8103530:	2100      	movs	r1, #0
 8103532:	4618      	mov	r0, r3
 8103534:	f001 f944 	bl	81047c0 <RCCEx_PLL2_Config>
 8103538:	4603      	mov	r3, r0
 810353a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810353c:	e00e      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 810353e:	687b      	ldr	r3, [r7, #4]
 8103540:	3324      	adds	r3, #36	; 0x24
 8103542:	2100      	movs	r1, #0
 8103544:	4618      	mov	r0, r3
 8103546:	f001 f9ed 	bl	8104924 <RCCEx_PLL3_Config>
 810354a:	4603      	mov	r3, r0
 810354c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 810354e:	e005      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103550:	2301      	movs	r3, #1
 8103552:	75fb      	strb	r3, [r7, #23]
      break;
 8103554:	e002      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103556:	bf00      	nop
 8103558:	e000      	b.n	810355c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 810355a:	bf00      	nop
    }

    if(ret == HAL_OK)
 810355c:	7dfb      	ldrb	r3, [r7, #23]
 810355e:	2b00      	cmp	r3, #0
 8103560:	d109      	bne.n	8103576 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103562:	4b55      	ldr	r3, [pc, #340]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103566:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 810356a:	687b      	ldr	r3, [r7, #4]
 810356c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810356e:	4952      	ldr	r1, [pc, #328]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103570:	4313      	orrs	r3, r2
 8103572:	650b      	str	r3, [r1, #80]	; 0x50
 8103574:	e001      	b.n	810357a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103576:	7dfb      	ldrb	r3, [r7, #23]
 8103578:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810357a:	687b      	ldr	r3, [r7, #4]
 810357c:	681b      	ldr	r3, [r3, #0]
 810357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103582:	2b00      	cmp	r3, #0
 8103584:	d049      	beq.n	810361a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103586:	687b      	ldr	r3, [r7, #4]
 8103588:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810358c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103590:	d030      	beq.n	81035f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103596:	d82a      	bhi.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103598:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810359c:	d02c      	beq.n	81035f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 810359e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81035a2:	d824      	bhi.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81035a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81035a8:	d018      	beq.n	81035dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 81035aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81035ae:	d81e      	bhi.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 81035b0:	2b00      	cmp	r3, #0
 81035b2:	d003      	beq.n	81035bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 81035b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81035b8:	d007      	beq.n	81035ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 81035ba:	e018      	b.n	81035ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81035bc:	4b3e      	ldr	r3, [pc, #248]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035c0:	4a3d      	ldr	r2, [pc, #244]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81035c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81035c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81035c8:	e017      	b.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	3304      	adds	r3, #4
 81035ce:	2100      	movs	r1, #0
 81035d0:	4618      	mov	r0, r3
 81035d2:	f001 f8f5 	bl	81047c0 <RCCEx_PLL2_Config>
 81035d6:	4603      	mov	r3, r0
 81035d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 81035da:	e00e      	b.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	3324      	adds	r3, #36	; 0x24
 81035e0:	2100      	movs	r1, #0
 81035e2:	4618      	mov	r0, r3
 81035e4:	f001 f99e 	bl	8104924 <RCCEx_PLL3_Config>
 81035e8:	4603      	mov	r3, r0
 81035ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 81035ec:	e005      	b.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 81035ee:	2301      	movs	r3, #1
 81035f0:	75fb      	strb	r3, [r7, #23]
      break;
 81035f2:	e002      	b.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81035f4:	bf00      	nop
 81035f6:	e000      	b.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 81035f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81035fa:	7dfb      	ldrb	r3, [r7, #23]
 81035fc:	2b00      	cmp	r3, #0
 81035fe:	d10a      	bne.n	8103616 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103600:	4b2d      	ldr	r3, [pc, #180]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103604:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810360e:	492a      	ldr	r1, [pc, #168]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103610:	4313      	orrs	r3, r2
 8103612:	658b      	str	r3, [r1, #88]	; 0x58
 8103614:	e001      	b.n	810361a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103616:	7dfb      	ldrb	r3, [r7, #23]
 8103618:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103622:	2b00      	cmp	r3, #0
 8103624:	d04c      	beq.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103626:	687b      	ldr	r3, [r7, #4]
 8103628:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810362c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103630:	d030      	beq.n	8103694 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103632:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103636:	d82a      	bhi.n	810368e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103638:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810363c:	d02c      	beq.n	8103698 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 810363e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103642:	d824      	bhi.n	810368e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103648:	d018      	beq.n	810367c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 810364a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810364e:	d81e      	bhi.n	810368e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103650:	2b00      	cmp	r3, #0
 8103652:	d003      	beq.n	810365c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103658:	d007      	beq.n	810366a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 810365a:	e018      	b.n	810368e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810365c:	4b16      	ldr	r3, [pc, #88]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 810365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103660:	4a15      	ldr	r2, [pc, #84]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103668:	e017      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	3304      	adds	r3, #4
 810366e:	2100      	movs	r1, #0
 8103670:	4618      	mov	r0, r3
 8103672:	f001 f8a5 	bl	81047c0 <RCCEx_PLL2_Config>
 8103676:	4603      	mov	r3, r0
 8103678:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 810367a:	e00e      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810367c:	687b      	ldr	r3, [r7, #4]
 810367e:	3324      	adds	r3, #36	; 0x24
 8103680:	2100      	movs	r1, #0
 8103682:	4618      	mov	r0, r3
 8103684:	f001 f94e 	bl	8104924 <RCCEx_PLL3_Config>
 8103688:	4603      	mov	r3, r0
 810368a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 810368c:	e005      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 810368e:	2301      	movs	r3, #1
 8103690:	75fb      	strb	r3, [r7, #23]
      break;
 8103692:	e002      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103694:	bf00      	nop
 8103696:	e000      	b.n	810369a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103698:	bf00      	nop
    }

    if(ret == HAL_OK)
 810369a:	7dfb      	ldrb	r3, [r7, #23]
 810369c:	2b00      	cmp	r3, #0
 810369e:	d10d      	bne.n	81036bc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81036a0:	4b05      	ldr	r3, [pc, #20]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81036a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81036ae:	4902      	ldr	r1, [pc, #8]	; (81036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 81036b0:	4313      	orrs	r3, r2
 81036b2:	658b      	str	r3, [r1, #88]	; 0x58
 81036b4:	e004      	b.n	81036c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 81036b6:	bf00      	nop
 81036b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81036bc:	7dfb      	ldrb	r3, [r7, #23]
 81036be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81036c0:	687b      	ldr	r3, [r7, #4]
 81036c2:	681b      	ldr	r3, [r3, #0]
 81036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81036c8:	2b00      	cmp	r3, #0
 81036ca:	d032      	beq.n	8103732 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 81036cc:	687b      	ldr	r3, [r7, #4]
 81036ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81036d0:	2b30      	cmp	r3, #48	; 0x30
 81036d2:	d01c      	beq.n	810370e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81036d4:	2b30      	cmp	r3, #48	; 0x30
 81036d6:	d817      	bhi.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81036d8:	2b20      	cmp	r3, #32
 81036da:	d00c      	beq.n	81036f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 81036dc:	2b20      	cmp	r3, #32
 81036de:	d813      	bhi.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0x344>
 81036e0:	2b00      	cmp	r3, #0
 81036e2:	d016      	beq.n	8103712 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 81036e4:	2b10      	cmp	r3, #16
 81036e6:	d10f      	bne.n	8103708 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81036e8:	4baf      	ldr	r3, [pc, #700]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81036ec:	4aae      	ldr	r2, [pc, #696]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81036ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81036f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 81036f4:	e00e      	b.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81036f6:	687b      	ldr	r3, [r7, #4]
 81036f8:	3304      	adds	r3, #4
 81036fa:	2102      	movs	r1, #2
 81036fc:	4618      	mov	r0, r3
 81036fe:	f001 f85f 	bl	81047c0 <RCCEx_PLL2_Config>
 8103702:	4603      	mov	r3, r0
 8103704:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103706:	e005      	b.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8103708:	2301      	movs	r3, #1
 810370a:	75fb      	strb	r3, [r7, #23]
      break;
 810370c:	e002      	b.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810370e:	bf00      	nop
 8103710:	e000      	b.n	8103714 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8103712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103714:	7dfb      	ldrb	r3, [r7, #23]
 8103716:	2b00      	cmp	r3, #0
 8103718:	d109      	bne.n	810372e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810371a:	4ba3      	ldr	r3, [pc, #652]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810371e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8103722:	687b      	ldr	r3, [r7, #4]
 8103724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103726:	49a0      	ldr	r1, [pc, #640]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103728:	4313      	orrs	r3, r2
 810372a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810372c:	e001      	b.n	8103732 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810372e:	7dfb      	ldrb	r3, [r7, #23]
 8103730:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103732:	687b      	ldr	r3, [r7, #4]
 8103734:	681b      	ldr	r3, [r3, #0]
 8103736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810373a:	2b00      	cmp	r3, #0
 810373c:	d047      	beq.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810373e:	687b      	ldr	r3, [r7, #4]
 8103740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103746:	d030      	beq.n	81037aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8103748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810374c:	d82a      	bhi.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810374e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103752:	d02c      	beq.n	81037ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8103754:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103758:	d824      	bhi.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810375a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810375e:	d018      	beq.n	8103792 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8103760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103764:	d81e      	bhi.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8103766:	2b00      	cmp	r3, #0
 8103768:	d003      	beq.n	8103772 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810376a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810376e:	d007      	beq.n	8103780 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8103770:	e018      	b.n	81037a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103772:	4b8d      	ldr	r3, [pc, #564]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103776:	4a8c      	ldr	r2, [pc, #560]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810377c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810377e:	e017      	b.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103780:	687b      	ldr	r3, [r7, #4]
 8103782:	3304      	adds	r3, #4
 8103784:	2100      	movs	r1, #0
 8103786:	4618      	mov	r0, r3
 8103788:	f001 f81a 	bl	81047c0 <RCCEx_PLL2_Config>
 810378c:	4603      	mov	r3, r0
 810378e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8103790:	e00e      	b.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103792:	687b      	ldr	r3, [r7, #4]
 8103794:	3324      	adds	r3, #36	; 0x24
 8103796:	2100      	movs	r1, #0
 8103798:	4618      	mov	r0, r3
 810379a:	f001 f8c3 	bl	8104924 <RCCEx_PLL3_Config>
 810379e:	4603      	mov	r3, r0
 81037a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81037a2:	e005      	b.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81037a4:	2301      	movs	r3, #1
 81037a6:	75fb      	strb	r3, [r7, #23]
      break;
 81037a8:	e002      	b.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81037aa:	bf00      	nop
 81037ac:	e000      	b.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81037ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81037b0:	7dfb      	ldrb	r3, [r7, #23]
 81037b2:	2b00      	cmp	r3, #0
 81037b4:	d109      	bne.n	81037ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81037b6:	4b7c      	ldr	r3, [pc, #496]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81037b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81037be:	687b      	ldr	r3, [r7, #4]
 81037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81037c2:	4979      	ldr	r1, [pc, #484]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81037c4:	4313      	orrs	r3, r2
 81037c6:	650b      	str	r3, [r1, #80]	; 0x50
 81037c8:	e001      	b.n	81037ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037ca:	7dfb      	ldrb	r3, [r7, #23]
 81037cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	681b      	ldr	r3, [r3, #0]
 81037d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81037d6:	2b00      	cmp	r3, #0
 81037d8:	d049      	beq.n	810386e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81037da:	687b      	ldr	r3, [r7, #4]
 81037dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81037de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81037e2:	d02e      	beq.n	8103842 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81037e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81037e8:	d828      	bhi.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x478>
 81037ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81037ee:	d02a      	beq.n	8103846 <HAL_RCCEx_PeriphCLKConfig+0x482>
 81037f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81037f4:	d822      	bhi.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x478>
 81037f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81037fa:	d026      	beq.n	810384a <HAL_RCCEx_PeriphCLKConfig+0x486>
 81037fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103800:	d81c      	bhi.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8103802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103806:	d010      	beq.n	810382a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8103808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810380c:	d816      	bhi.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x478>
 810380e:	2b00      	cmp	r3, #0
 8103810:	d01d      	beq.n	810384e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8103812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103816:	d111      	bne.n	810383c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103818:	687b      	ldr	r3, [r7, #4]
 810381a:	3304      	adds	r3, #4
 810381c:	2101      	movs	r1, #1
 810381e:	4618      	mov	r0, r3
 8103820:	f000 ffce 	bl	81047c0 <RCCEx_PLL2_Config>
 8103824:	4603      	mov	r3, r0
 8103826:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8103828:	e012      	b.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810382a:	687b      	ldr	r3, [r7, #4]
 810382c:	3324      	adds	r3, #36	; 0x24
 810382e:	2101      	movs	r1, #1
 8103830:	4618      	mov	r0, r3
 8103832:	f001 f877 	bl	8104924 <RCCEx_PLL3_Config>
 8103836:	4603      	mov	r3, r0
 8103838:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810383a:	e009      	b.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810383c:	2301      	movs	r3, #1
 810383e:	75fb      	strb	r3, [r7, #23]
      break;
 8103840:	e006      	b.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103842:	bf00      	nop
 8103844:	e004      	b.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8103846:	bf00      	nop
 8103848:	e002      	b.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810384a:	bf00      	nop
 810384c:	e000      	b.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810384e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103850:	7dfb      	ldrb	r3, [r7, #23]
 8103852:	2b00      	cmp	r3, #0
 8103854:	d109      	bne.n	810386a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103856:	4b54      	ldr	r3, [pc, #336]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810385a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810385e:	687b      	ldr	r3, [r7, #4]
 8103860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103862:	4951      	ldr	r1, [pc, #324]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103864:	4313      	orrs	r3, r2
 8103866:	650b      	str	r3, [r1, #80]	; 0x50
 8103868:	e001      	b.n	810386e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810386a:	7dfb      	ldrb	r3, [r7, #23]
 810386c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810386e:	687b      	ldr	r3, [r7, #4]
 8103870:	681b      	ldr	r3, [r3, #0]
 8103872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8103876:	2b00      	cmp	r3, #0
 8103878:	d04b      	beq.n	8103912 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103884:	d02e      	beq.n	81038e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8103886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810388a:	d828      	bhi.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103890:	d02a      	beq.n	81038e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8103892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103896:	d822      	bhi.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8103898:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810389c:	d026      	beq.n	81038ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 810389e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81038a2:	d81c      	bhi.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81038a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038a8:	d010      	beq.n	81038cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 81038aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81038ae:	d816      	bhi.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81038b0:	2b00      	cmp	r3, #0
 81038b2:	d01d      	beq.n	81038f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81038b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81038b8:	d111      	bne.n	81038de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	3304      	adds	r3, #4
 81038be:	2101      	movs	r1, #1
 81038c0:	4618      	mov	r0, r3
 81038c2:	f000 ff7d 	bl	81047c0 <RCCEx_PLL2_Config>
 81038c6:	4603      	mov	r3, r0
 81038c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81038ca:	e012      	b.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81038cc:	687b      	ldr	r3, [r7, #4]
 81038ce:	3324      	adds	r3, #36	; 0x24
 81038d0:	2101      	movs	r1, #1
 81038d2:	4618      	mov	r0, r3
 81038d4:	f001 f826 	bl	8104924 <RCCEx_PLL3_Config>
 81038d8:	4603      	mov	r3, r0
 81038da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81038dc:	e009      	b.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81038de:	2301      	movs	r3, #1
 81038e0:	75fb      	strb	r3, [r7, #23]
      break;
 81038e2:	e006      	b.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81038e4:	bf00      	nop
 81038e6:	e004      	b.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81038e8:	bf00      	nop
 81038ea:	e002      	b.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81038ec:	bf00      	nop
 81038ee:	e000      	b.n	81038f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81038f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81038f2:	7dfb      	ldrb	r3, [r7, #23]
 81038f4:	2b00      	cmp	r3, #0
 81038f6:	d10a      	bne.n	810390e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81038f8:	4b2b      	ldr	r3, [pc, #172]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81038fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81038fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103906:	4928      	ldr	r1, [pc, #160]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103908:	4313      	orrs	r3, r2
 810390a:	658b      	str	r3, [r1, #88]	; 0x58
 810390c:	e001      	b.n	8103912 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810390e:	7dfb      	ldrb	r3, [r7, #23]
 8103910:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103912:	687b      	ldr	r3, [r7, #4]
 8103914:	681b      	ldr	r3, [r3, #0]
 8103916:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810391a:	2b00      	cmp	r3, #0
 810391c:	d02f      	beq.n	810397e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810391e:	687b      	ldr	r3, [r7, #4]
 8103920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103926:	d00e      	beq.n	8103946 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8103928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810392c:	d814      	bhi.n	8103958 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810392e:	2b00      	cmp	r3, #0
 8103930:	d015      	beq.n	810395e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103932:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103936:	d10f      	bne.n	8103958 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103938:	4b1b      	ldr	r3, [pc, #108]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810393c:	4a1a      	ldr	r2, [pc, #104]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810393e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103942:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103944:	e00c      	b.n	8103960 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103946:	687b      	ldr	r3, [r7, #4]
 8103948:	3304      	adds	r3, #4
 810394a:	2101      	movs	r1, #1
 810394c:	4618      	mov	r0, r3
 810394e:	f000 ff37 	bl	81047c0 <RCCEx_PLL2_Config>
 8103952:	4603      	mov	r3, r0
 8103954:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8103956:	e003      	b.n	8103960 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103958:	2301      	movs	r3, #1
 810395a:	75fb      	strb	r3, [r7, #23]
      break;
 810395c:	e000      	b.n	8103960 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810395e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103960:	7dfb      	ldrb	r3, [r7, #23]
 8103962:	2b00      	cmp	r3, #0
 8103964:	d109      	bne.n	810397a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103966:	4b10      	ldr	r3, [pc, #64]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810396a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103972:	490d      	ldr	r1, [pc, #52]	; (81039a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103974:	4313      	orrs	r3, r2
 8103976:	650b      	str	r3, [r1, #80]	; 0x50
 8103978:	e001      	b.n	810397e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810397a:	7dfb      	ldrb	r3, [r7, #23]
 810397c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810397e:	687b      	ldr	r3, [r7, #4]
 8103980:	681b      	ldr	r3, [r3, #0]
 8103982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8103986:	2b00      	cmp	r3, #0
 8103988:	d033      	beq.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810398a:	687b      	ldr	r3, [r7, #4]
 810398c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810398e:	2b03      	cmp	r3, #3
 8103990:	d81c      	bhi.n	81039cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8103992:	a201      	add	r2, pc, #4	; (adr r2, 8103998 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8103994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103998:	081039d3 	.word	0x081039d3
 810399c:	081039ad 	.word	0x081039ad
 81039a0:	081039bb 	.word	0x081039bb
 81039a4:	081039d3 	.word	0x081039d3
 81039a8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039ac:	4bb9      	ldr	r3, [pc, #740]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81039b0:	4ab8      	ldr	r2, [pc, #736]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81039b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81039b8:	e00c      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81039ba:	687b      	ldr	r3, [r7, #4]
 81039bc:	3304      	adds	r3, #4
 81039be:	2102      	movs	r1, #2
 81039c0:	4618      	mov	r0, r3
 81039c2:	f000 fefd 	bl	81047c0 <RCCEx_PLL2_Config>
 81039c6:	4603      	mov	r3, r0
 81039c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81039ca:	e003      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81039cc:	2301      	movs	r3, #1
 81039ce:	75fb      	strb	r3, [r7, #23]
      break;
 81039d0:	e000      	b.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81039d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81039d4:	7dfb      	ldrb	r3, [r7, #23]
 81039d6:	2b00      	cmp	r3, #0
 81039d8:	d109      	bne.n	81039ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81039da:	4bae      	ldr	r3, [pc, #696]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81039de:	f023 0203 	bic.w	r2, r3, #3
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81039e6:	49ab      	ldr	r1, [pc, #684]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81039e8:	4313      	orrs	r3, r2
 81039ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 81039ec:	e001      	b.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039ee:	7dfb      	ldrb	r3, [r7, #23]
 81039f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81039f2:	687b      	ldr	r3, [r7, #4]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	f000 8088 	beq.w	8103b10 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103a00:	4ba5      	ldr	r3, [pc, #660]	; (8103c98 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103a02:	681b      	ldr	r3, [r3, #0]
 8103a04:	4aa4      	ldr	r2, [pc, #656]	; (8103c98 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103a0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103a0c:	f7fe ff30 	bl	8102870 <HAL_GetTick>
 8103a10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103a12:	e009      	b.n	8103a28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103a14:	f7fe ff2c 	bl	8102870 <HAL_GetTick>
 8103a18:	4602      	mov	r2, r0
 8103a1a:	693b      	ldr	r3, [r7, #16]
 8103a1c:	1ad3      	subs	r3, r2, r3
 8103a1e:	2b64      	cmp	r3, #100	; 0x64
 8103a20:	d902      	bls.n	8103a28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8103a22:	2303      	movs	r3, #3
 8103a24:	75fb      	strb	r3, [r7, #23]
        break;
 8103a26:	e005      	b.n	8103a34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103a28:	4b9b      	ldr	r3, [pc, #620]	; (8103c98 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8103a2a:	681b      	ldr	r3, [r3, #0]
 8103a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103a30:	2b00      	cmp	r3, #0
 8103a32:	d0ef      	beq.n	8103a14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8103a34:	7dfb      	ldrb	r3, [r7, #23]
 8103a36:	2b00      	cmp	r3, #0
 8103a38:	d168      	bne.n	8103b0c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103a3a:	4b96      	ldr	r3, [pc, #600]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103a3e:	687b      	ldr	r3, [r7, #4]
 8103a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103a44:	4053      	eors	r3, r2
 8103a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103a4a:	2b00      	cmp	r3, #0
 8103a4c:	d013      	beq.n	8103a76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103a4e:	4b91      	ldr	r3, [pc, #580]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103a56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103a58:	4b8e      	ldr	r3, [pc, #568]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a5c:	4a8d      	ldr	r2, [pc, #564]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103a62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103a64:	4b8b      	ldr	r3, [pc, #556]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103a68:	4a8a      	ldr	r2, [pc, #552]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103a6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103a70:	4a88      	ldr	r2, [pc, #544]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103a72:	68fb      	ldr	r3, [r7, #12]
 8103a74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103a76:	687b      	ldr	r3, [r7, #4]
 8103a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103a80:	d115      	bne.n	8103aae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103a82:	f7fe fef5 	bl	8102870 <HAL_GetTick>
 8103a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103a88:	e00b      	b.n	8103aa2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103a8a:	f7fe fef1 	bl	8102870 <HAL_GetTick>
 8103a8e:	4602      	mov	r2, r0
 8103a90:	693b      	ldr	r3, [r7, #16]
 8103a92:	1ad3      	subs	r3, r2, r3
 8103a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8103a98:	4293      	cmp	r3, r2
 8103a9a:	d902      	bls.n	8103aa2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8103a9c:	2303      	movs	r3, #3
 8103a9e:	75fb      	strb	r3, [r7, #23]
            break;
 8103aa0:	e005      	b.n	8103aae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103aa2:	4b7c      	ldr	r3, [pc, #496]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103aa6:	f003 0302 	and.w	r3, r3, #2
 8103aaa:	2b00      	cmp	r3, #0
 8103aac:	d0ed      	beq.n	8103a8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8103aae:	7dfb      	ldrb	r3, [r7, #23]
 8103ab0:	2b00      	cmp	r3, #0
 8103ab2:	d128      	bne.n	8103b06 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103ab4:	687b      	ldr	r3, [r7, #4]
 8103ab6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103ac2:	d10f      	bne.n	8103ae4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 8103ac4:	4b73      	ldr	r3, [pc, #460]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103ac6:	691b      	ldr	r3, [r3, #16]
 8103ac8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103ad2:	091b      	lsrs	r3, r3, #4
 8103ad4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103ad8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103adc:	496d      	ldr	r1, [pc, #436]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103ade:	4313      	orrs	r3, r2
 8103ae0:	610b      	str	r3, [r1, #16]
 8103ae2:	e005      	b.n	8103af0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8103ae4:	4b6b      	ldr	r3, [pc, #428]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103ae6:	691b      	ldr	r3, [r3, #16]
 8103ae8:	4a6a      	ldr	r2, [pc, #424]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8103aee:	6113      	str	r3, [r2, #16]
 8103af0:	4b68      	ldr	r3, [pc, #416]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103af2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103af4:	687b      	ldr	r3, [r7, #4]
 8103af6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103afa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103afe:	4965      	ldr	r1, [pc, #404]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103b00:	4313      	orrs	r3, r2
 8103b02:	670b      	str	r3, [r1, #112]	; 0x70
 8103b04:	e004      	b.n	8103b10 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8103b06:	7dfb      	ldrb	r3, [r7, #23]
 8103b08:	75bb      	strb	r3, [r7, #22]
 8103b0a:	e001      	b.n	8103b10 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b0c:	7dfb      	ldrb	r3, [r7, #23]
 8103b0e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103b10:	687b      	ldr	r3, [r7, #4]
 8103b12:	681b      	ldr	r3, [r3, #0]
 8103b14:	f003 0301 	and.w	r3, r3, #1
 8103b18:	2b00      	cmp	r3, #0
 8103b1a:	d07e      	beq.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8103b1c:	687b      	ldr	r3, [r7, #4]
 8103b1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103b20:	2b28      	cmp	r3, #40	; 0x28
 8103b22:	d867      	bhi.n	8103bf4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8103b24:	a201      	add	r2, pc, #4	; (adr r2, 8103b2c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8103b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b2a:	bf00      	nop
 8103b2c:	08103bfb 	.word	0x08103bfb
 8103b30:	08103bf5 	.word	0x08103bf5
 8103b34:	08103bf5 	.word	0x08103bf5
 8103b38:	08103bf5 	.word	0x08103bf5
 8103b3c:	08103bf5 	.word	0x08103bf5
 8103b40:	08103bf5 	.word	0x08103bf5
 8103b44:	08103bf5 	.word	0x08103bf5
 8103b48:	08103bf5 	.word	0x08103bf5
 8103b4c:	08103bd1 	.word	0x08103bd1
 8103b50:	08103bf5 	.word	0x08103bf5
 8103b54:	08103bf5 	.word	0x08103bf5
 8103b58:	08103bf5 	.word	0x08103bf5
 8103b5c:	08103bf5 	.word	0x08103bf5
 8103b60:	08103bf5 	.word	0x08103bf5
 8103b64:	08103bf5 	.word	0x08103bf5
 8103b68:	08103bf5 	.word	0x08103bf5
 8103b6c:	08103be3 	.word	0x08103be3
 8103b70:	08103bf5 	.word	0x08103bf5
 8103b74:	08103bf5 	.word	0x08103bf5
 8103b78:	08103bf5 	.word	0x08103bf5
 8103b7c:	08103bf5 	.word	0x08103bf5
 8103b80:	08103bf5 	.word	0x08103bf5
 8103b84:	08103bf5 	.word	0x08103bf5
 8103b88:	08103bf5 	.word	0x08103bf5
 8103b8c:	08103bfb 	.word	0x08103bfb
 8103b90:	08103bf5 	.word	0x08103bf5
 8103b94:	08103bf5 	.word	0x08103bf5
 8103b98:	08103bf5 	.word	0x08103bf5
 8103b9c:	08103bf5 	.word	0x08103bf5
 8103ba0:	08103bf5 	.word	0x08103bf5
 8103ba4:	08103bf5 	.word	0x08103bf5
 8103ba8:	08103bf5 	.word	0x08103bf5
 8103bac:	08103bfb 	.word	0x08103bfb
 8103bb0:	08103bf5 	.word	0x08103bf5
 8103bb4:	08103bf5 	.word	0x08103bf5
 8103bb8:	08103bf5 	.word	0x08103bf5
 8103bbc:	08103bf5 	.word	0x08103bf5
 8103bc0:	08103bf5 	.word	0x08103bf5
 8103bc4:	08103bf5 	.word	0x08103bf5
 8103bc8:	08103bf5 	.word	0x08103bf5
 8103bcc:	08103bfb 	.word	0x08103bfb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103bd0:	687b      	ldr	r3, [r7, #4]
 8103bd2:	3304      	adds	r3, #4
 8103bd4:	2101      	movs	r1, #1
 8103bd6:	4618      	mov	r0, r3
 8103bd8:	f000 fdf2 	bl	81047c0 <RCCEx_PLL2_Config>
 8103bdc:	4603      	mov	r3, r0
 8103bde:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103be0:	e00c      	b.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	3324      	adds	r3, #36	; 0x24
 8103be6:	2101      	movs	r1, #1
 8103be8:	4618      	mov	r0, r3
 8103bea:	f000 fe9b 	bl	8104924 <RCCEx_PLL3_Config>
 8103bee:	4603      	mov	r3, r0
 8103bf0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8103bf2:	e003      	b.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103bf4:	2301      	movs	r3, #1
 8103bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8103bf8:	e000      	b.n	8103bfc <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 8103bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103bfc:	7dfb      	ldrb	r3, [r7, #23]
 8103bfe:	2b00      	cmp	r3, #0
 8103c00:	d109      	bne.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8103c02:	4b24      	ldr	r3, [pc, #144]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c06:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8103c0e:	4921      	ldr	r1, [pc, #132]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103c10:	4313      	orrs	r3, r2
 8103c12:	654b      	str	r3, [r1, #84]	; 0x54
 8103c14:	e001      	b.n	8103c1a <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c16:	7dfb      	ldrb	r3, [r7, #23]
 8103c18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103c1a:	687b      	ldr	r3, [r7, #4]
 8103c1c:	681b      	ldr	r3, [r3, #0]
 8103c1e:	f003 0302 	and.w	r3, r3, #2
 8103c22:	2b00      	cmp	r3, #0
 8103c24:	d03c      	beq.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103c2a:	2b05      	cmp	r3, #5
 8103c2c:	d820      	bhi.n	8103c70 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8103c2e:	a201      	add	r2, pc, #4	; (adr r2, 8103c34 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8103c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103c34:	08103c77 	.word	0x08103c77
 8103c38:	08103c4d 	.word	0x08103c4d
 8103c3c:	08103c5f 	.word	0x08103c5f
 8103c40:	08103c77 	.word	0x08103c77
 8103c44:	08103c77 	.word	0x08103c77
 8103c48:	08103c77 	.word	0x08103c77
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103c4c:	687b      	ldr	r3, [r7, #4]
 8103c4e:	3304      	adds	r3, #4
 8103c50:	2101      	movs	r1, #1
 8103c52:	4618      	mov	r0, r3
 8103c54:	f000 fdb4 	bl	81047c0 <RCCEx_PLL2_Config>
 8103c58:	4603      	mov	r3, r0
 8103c5a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103c5c:	e00c      	b.n	8103c78 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	3324      	adds	r3, #36	; 0x24
 8103c62:	2101      	movs	r1, #1
 8103c64:	4618      	mov	r0, r3
 8103c66:	f000 fe5d 	bl	8104924 <RCCEx_PLL3_Config>
 8103c6a:	4603      	mov	r3, r0
 8103c6c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8103c6e:	e003      	b.n	8103c78 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103c70:	2301      	movs	r3, #1
 8103c72:	75fb      	strb	r3, [r7, #23]
      break;
 8103c74:	e000      	b.n	8103c78 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8103c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103c78:	7dfb      	ldrb	r3, [r7, #23]
 8103c7a:	2b00      	cmp	r3, #0
 8103c7c:	d10e      	bne.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8103c7e:	4b05      	ldr	r3, [pc, #20]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103c82:	f023 0207 	bic.w	r2, r3, #7
 8103c86:	687b      	ldr	r3, [r7, #4]
 8103c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8103c8a:	4902      	ldr	r1, [pc, #8]	; (8103c94 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8103c8c:	4313      	orrs	r3, r2
 8103c8e:	654b      	str	r3, [r1, #84]	; 0x54
 8103c90:	e006      	b.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8103c92:	bf00      	nop
 8103c94:	58024400 	.word	0x58024400
 8103c98:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c9c:	7dfb      	ldrb	r3, [r7, #23]
 8103c9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	f003 0304 	and.w	r3, r3, #4
 8103ca8:	2b00      	cmp	r3, #0
 8103caa:	d039      	beq.n	8103d20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103cb2:	2b05      	cmp	r3, #5
 8103cb4:	d820      	bhi.n	8103cf8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8103cb6:	a201      	add	r2, pc, #4	; (adr r2, 8103cbc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8103cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103cbc:	08103cff 	.word	0x08103cff
 8103cc0:	08103cd5 	.word	0x08103cd5
 8103cc4:	08103ce7 	.word	0x08103ce7
 8103cc8:	08103cff 	.word	0x08103cff
 8103ccc:	08103cff 	.word	0x08103cff
 8103cd0:	08103cff 	.word	0x08103cff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	3304      	adds	r3, #4
 8103cd8:	2101      	movs	r1, #1
 8103cda:	4618      	mov	r0, r3
 8103cdc:	f000 fd70 	bl	81047c0 <RCCEx_PLL2_Config>
 8103ce0:	4603      	mov	r3, r0
 8103ce2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103ce4:	e00c      	b.n	8103d00 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8103ce6:	687b      	ldr	r3, [r7, #4]
 8103ce8:	3324      	adds	r3, #36	; 0x24
 8103cea:	2101      	movs	r1, #1
 8103cec:	4618      	mov	r0, r3
 8103cee:	f000 fe19 	bl	8104924 <RCCEx_PLL3_Config>
 8103cf2:	4603      	mov	r3, r0
 8103cf4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8103cf6:	e003      	b.n	8103d00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103cf8:	2301      	movs	r3, #1
 8103cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8103cfc:	e000      	b.n	8103d00 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8103cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d00:	7dfb      	ldrb	r3, [r7, #23]
 8103d02:	2b00      	cmp	r3, #0
 8103d04:	d10a      	bne.n	8103d1c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103d06:	4bb7      	ldr	r3, [pc, #732]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103d0a:	f023 0207 	bic.w	r2, r3, #7
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8103d14:	49b3      	ldr	r1, [pc, #716]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103d16:	4313      	orrs	r3, r2
 8103d18:	658b      	str	r3, [r1, #88]	; 0x58
 8103d1a:	e001      	b.n	8103d20 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d1c:	7dfb      	ldrb	r3, [r7, #23]
 8103d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8103d20:	687b      	ldr	r3, [r7, #4]
 8103d22:	681b      	ldr	r3, [r3, #0]
 8103d24:	f003 0320 	and.w	r3, r3, #32
 8103d28:	2b00      	cmp	r3, #0
 8103d2a:	d04b      	beq.n	8103dc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8103d2c:	687b      	ldr	r3, [r7, #4]
 8103d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103d36:	d02e      	beq.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8103d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103d3c:	d828      	bhi.n	8103d90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103d42:	d02a      	beq.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8103d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103d48:	d822      	bhi.n	8103d90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103d4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103d4e:	d026      	beq.n	8103d9e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8103d50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103d54:	d81c      	bhi.n	8103d90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103d5a:	d010      	beq.n	8103d7e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8103d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103d60:	d816      	bhi.n	8103d90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8103d62:	2b00      	cmp	r3, #0
 8103d64:	d01d      	beq.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8103d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103d6a:	d111      	bne.n	8103d90 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	3304      	adds	r3, #4
 8103d70:	2100      	movs	r1, #0
 8103d72:	4618      	mov	r0, r3
 8103d74:	f000 fd24 	bl	81047c0 <RCCEx_PLL2_Config>
 8103d78:	4603      	mov	r3, r0
 8103d7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103d7c:	e012      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103d7e:	687b      	ldr	r3, [r7, #4]
 8103d80:	3324      	adds	r3, #36	; 0x24
 8103d82:	2102      	movs	r1, #2
 8103d84:	4618      	mov	r0, r3
 8103d86:	f000 fdcd 	bl	8104924 <RCCEx_PLL3_Config>
 8103d8a:	4603      	mov	r3, r0
 8103d8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8103d8e:	e009      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d90:	2301      	movs	r3, #1
 8103d92:	75fb      	strb	r3, [r7, #23]
      break;
 8103d94:	e006      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103d96:	bf00      	nop
 8103d98:	e004      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103d9a:	bf00      	nop
 8103d9c:	e002      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103d9e:	bf00      	nop
 8103da0:	e000      	b.n	8103da4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8103da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103da4:	7dfb      	ldrb	r3, [r7, #23]
 8103da6:	2b00      	cmp	r3, #0
 8103da8:	d10a      	bne.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103daa:	4b8e      	ldr	r3, [pc, #568]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103dae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103db8:	498a      	ldr	r1, [pc, #552]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103dba:	4313      	orrs	r3, r2
 8103dbc:	654b      	str	r3, [r1, #84]	; 0x54
 8103dbe:	e001      	b.n	8103dc4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dc0:	7dfb      	ldrb	r3, [r7, #23]
 8103dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103dc4:	687b      	ldr	r3, [r7, #4]
 8103dc6:	681b      	ldr	r3, [r3, #0]
 8103dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d04b      	beq.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103dd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103dda:	d02e      	beq.n	8103e3a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8103ddc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8103de0:	d828      	bhi.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103de6:	d02a      	beq.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8103de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103dec:	d822      	bhi.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103df2:	d026      	beq.n	8103e42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8103df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8103df8:	d81c      	bhi.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103dfe:	d010      	beq.n	8103e22 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8103e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8103e04:	d816      	bhi.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8103e06:	2b00      	cmp	r3, #0
 8103e08:	d01d      	beq.n	8103e46 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8103e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8103e0e:	d111      	bne.n	8103e34 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	3304      	adds	r3, #4
 8103e14:	2100      	movs	r1, #0
 8103e16:	4618      	mov	r0, r3
 8103e18:	f000 fcd2 	bl	81047c0 <RCCEx_PLL2_Config>
 8103e1c:	4603      	mov	r3, r0
 8103e1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103e20:	e012      	b.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	3324      	adds	r3, #36	; 0x24
 8103e26:	2102      	movs	r1, #2
 8103e28:	4618      	mov	r0, r3
 8103e2a:	f000 fd7b 	bl	8104924 <RCCEx_PLL3_Config>
 8103e2e:	4603      	mov	r3, r0
 8103e30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8103e32:	e009      	b.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e34:	2301      	movs	r3, #1
 8103e36:	75fb      	strb	r3, [r7, #23]
      break;
 8103e38:	e006      	b.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103e3a:	bf00      	nop
 8103e3c:	e004      	b.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103e3e:	bf00      	nop
 8103e40:	e002      	b.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103e42:	bf00      	nop
 8103e44:	e000      	b.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8103e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e48:	7dfb      	ldrb	r3, [r7, #23]
 8103e4a:	2b00      	cmp	r3, #0
 8103e4c:	d10a      	bne.n	8103e64 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8103e4e:	4b65      	ldr	r3, [pc, #404]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8103e56:	687b      	ldr	r3, [r7, #4]
 8103e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8103e5c:	4961      	ldr	r1, [pc, #388]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103e5e:	4313      	orrs	r3, r2
 8103e60:	658b      	str	r3, [r1, #88]	; 0x58
 8103e62:	e001      	b.n	8103e68 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e64:	7dfb      	ldrb	r3, [r7, #23]
 8103e66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103e68:	687b      	ldr	r3, [r7, #4]
 8103e6a:	681b      	ldr	r3, [r3, #0]
 8103e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103e70:	2b00      	cmp	r3, #0
 8103e72:	d04b      	beq.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103e7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103e7e:	d02e      	beq.n	8103ede <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8103e80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8103e84:	d828      	bhi.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103e8a:	d02a      	beq.n	8103ee2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8103e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8103e90:	d822      	bhi.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103e92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103e96:	d026      	beq.n	8103ee6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8103e98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8103e9c:	d81c      	bhi.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103ea2:	d010      	beq.n	8103ec6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8103ea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103ea8:	d816      	bhi.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8103eaa:	2b00      	cmp	r3, #0
 8103eac:	d01d      	beq.n	8103eea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8103eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103eb2:	d111      	bne.n	8103ed8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103eb4:	687b      	ldr	r3, [r7, #4]
 8103eb6:	3304      	adds	r3, #4
 8103eb8:	2100      	movs	r1, #0
 8103eba:	4618      	mov	r0, r3
 8103ebc:	f000 fc80 	bl	81047c0 <RCCEx_PLL2_Config>
 8103ec0:	4603      	mov	r3, r0
 8103ec2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103ec4:	e012      	b.n	8103eec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	3324      	adds	r3, #36	; 0x24
 8103eca:	2102      	movs	r1, #2
 8103ecc:	4618      	mov	r0, r3
 8103ece:	f000 fd29 	bl	8104924 <RCCEx_PLL3_Config>
 8103ed2:	4603      	mov	r3, r0
 8103ed4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8103ed6:	e009      	b.n	8103eec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103ed8:	2301      	movs	r3, #1
 8103eda:	75fb      	strb	r3, [r7, #23]
      break;
 8103edc:	e006      	b.n	8103eec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103ede:	bf00      	nop
 8103ee0:	e004      	b.n	8103eec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103ee2:	bf00      	nop
 8103ee4:	e002      	b.n	8103eec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103ee6:	bf00      	nop
 8103ee8:	e000      	b.n	8103eec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8103eea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103eec:	7dfb      	ldrb	r3, [r7, #23]
 8103eee:	2b00      	cmp	r3, #0
 8103ef0:	d10a      	bne.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103ef2:	4b3c      	ldr	r3, [pc, #240]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8103f00:	4938      	ldr	r1, [pc, #224]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103f02:	4313      	orrs	r3, r2
 8103f04:	658b      	str	r3, [r1, #88]	; 0x58
 8103f06:	e001      	b.n	8103f0c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f08:	7dfb      	ldrb	r3, [r7, #23]
 8103f0a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103f0c:	687b      	ldr	r3, [r7, #4]
 8103f0e:	681b      	ldr	r3, [r3, #0]
 8103f10:	f003 0308 	and.w	r3, r3, #8
 8103f14:	2b00      	cmp	r3, #0
 8103f16:	d01a      	beq.n	8103f4e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8103f18:	687b      	ldr	r3, [r7, #4]
 8103f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103f22:	d10a      	bne.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	3324      	adds	r3, #36	; 0x24
 8103f28:	2102      	movs	r1, #2
 8103f2a:	4618      	mov	r0, r3
 8103f2c:	f000 fcfa 	bl	8104924 <RCCEx_PLL3_Config>
 8103f30:	4603      	mov	r3, r0
 8103f32:	2b00      	cmp	r3, #0
 8103f34:	d001      	beq.n	8103f3a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8103f36:	2301      	movs	r3, #1
 8103f38:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103f3a:	4b2a      	ldr	r3, [pc, #168]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103f3e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8103f42:	687b      	ldr	r3, [r7, #4]
 8103f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103f48:	4926      	ldr	r1, [pc, #152]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103f4a:	4313      	orrs	r3, r2
 8103f4c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	f003 0310 	and.w	r3, r3, #16
 8103f56:	2b00      	cmp	r3, #0
 8103f58:	d01a      	beq.n	8103f90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103f64:	d10a      	bne.n	8103f7c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	3324      	adds	r3, #36	; 0x24
 8103f6a:	2102      	movs	r1, #2
 8103f6c:	4618      	mov	r0, r3
 8103f6e:	f000 fcd9 	bl	8104924 <RCCEx_PLL3_Config>
 8103f72:	4603      	mov	r3, r0
 8103f74:	2b00      	cmp	r3, #0
 8103f76:	d001      	beq.n	8103f7c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8103f78:	2301      	movs	r3, #1
 8103f7a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103f7c:	4b19      	ldr	r3, [pc, #100]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8103f84:	687b      	ldr	r3, [r7, #4]
 8103f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8103f8a:	4916      	ldr	r1, [pc, #88]	; (8103fe4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8103f8c:	4313      	orrs	r3, r2
 8103f8e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103f90:	687b      	ldr	r3, [r7, #4]
 8103f92:	681b      	ldr	r3, [r3, #0]
 8103f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8103f98:	2b00      	cmp	r3, #0
 8103f9a:	d036      	beq.n	810400a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103fa6:	d01f      	beq.n	8103fe8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8103fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103fac:	d817      	bhi.n	8103fde <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8103fae:	2b00      	cmp	r3, #0
 8103fb0:	d003      	beq.n	8103fba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8103fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103fb6:	d009      	beq.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8103fb8:	e011      	b.n	8103fde <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	3304      	adds	r3, #4
 8103fbe:	2100      	movs	r1, #0
 8103fc0:	4618      	mov	r0, r3
 8103fc2:	f000 fbfd 	bl	81047c0 <RCCEx_PLL2_Config>
 8103fc6:	4603      	mov	r3, r0
 8103fc8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103fca:	e00e      	b.n	8103fea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	3324      	adds	r3, #36	; 0x24
 8103fd0:	2102      	movs	r1, #2
 8103fd2:	4618      	mov	r0, r3
 8103fd4:	f000 fca6 	bl	8104924 <RCCEx_PLL3_Config>
 8103fd8:	4603      	mov	r3, r0
 8103fda:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8103fdc:	e005      	b.n	8103fea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103fde:	2301      	movs	r3, #1
 8103fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8103fe2:	e002      	b.n	8103fea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8103fe4:	58024400 	.word	0x58024400
      break;
 8103fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103fea:	7dfb      	ldrb	r3, [r7, #23]
 8103fec:	2b00      	cmp	r3, #0
 8103fee:	d10a      	bne.n	8104006 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8103ff0:	4b93      	ldr	r3, [pc, #588]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8103ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8103ff8:	687b      	ldr	r3, [r7, #4]
 8103ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8103ffe:	4990      	ldr	r1, [pc, #576]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104000:	4313      	orrs	r3, r2
 8104002:	658b      	str	r3, [r1, #88]	; 0x58
 8104004:	e001      	b.n	810400a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104006:	7dfb      	ldrb	r3, [r7, #23]
 8104008:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104012:	2b00      	cmp	r3, #0
 8104014:	d033      	beq.n	810407e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810401c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104020:	d01c      	beq.n	810405c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8104022:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104026:	d816      	bhi.n	8104056 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8104028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810402c:	d003      	beq.n	8104036 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810402e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104032:	d007      	beq.n	8104044 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8104034:	e00f      	b.n	8104056 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104036:	4b82      	ldr	r3, [pc, #520]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810403a:	4a81      	ldr	r2, [pc, #516]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810403c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104042:	e00c      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	3324      	adds	r3, #36	; 0x24
 8104048:	2101      	movs	r1, #1
 810404a:	4618      	mov	r0, r3
 810404c:	f000 fc6a 	bl	8104924 <RCCEx_PLL3_Config>
 8104050:	4603      	mov	r3, r0
 8104052:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104054:	e003      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104056:	2301      	movs	r3, #1
 8104058:	75fb      	strb	r3, [r7, #23]
      break;
 810405a:	e000      	b.n	810405e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810405c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810405e:	7dfb      	ldrb	r3, [r7, #23]
 8104060:	2b00      	cmp	r3, #0
 8104062:	d10a      	bne.n	810407a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104064:	4b76      	ldr	r3, [pc, #472]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810406c:	687b      	ldr	r3, [r7, #4]
 810406e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104072:	4973      	ldr	r1, [pc, #460]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104074:	4313      	orrs	r3, r2
 8104076:	654b      	str	r3, [r1, #84]	; 0x54
 8104078:	e001      	b.n	810407e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810407a:	7dfb      	ldrb	r3, [r7, #23]
 810407c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	681b      	ldr	r3, [r3, #0]
 8104082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104086:	2b00      	cmp	r3, #0
 8104088:	d029      	beq.n	81040de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810408a:	687b      	ldr	r3, [r7, #4]
 810408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810408e:	2b00      	cmp	r3, #0
 8104090:	d003      	beq.n	810409a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8104092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104096:	d007      	beq.n	81040a8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8104098:	e00f      	b.n	81040ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810409a:	4b69      	ldr	r3, [pc, #420]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810409e:	4a68      	ldr	r2, [pc, #416]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81040a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81040a6:	e00b      	b.n	81040c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81040a8:	687b      	ldr	r3, [r7, #4]
 81040aa:	3304      	adds	r3, #4
 81040ac:	2102      	movs	r1, #2
 81040ae:	4618      	mov	r0, r3
 81040b0:	f000 fb86 	bl	81047c0 <RCCEx_PLL2_Config>
 81040b4:	4603      	mov	r3, r0
 81040b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81040b8:	e002      	b.n	81040c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81040ba:	2301      	movs	r3, #1
 81040bc:	75fb      	strb	r3, [r7, #23]
      break;
 81040be:	bf00      	nop
    }

    if(ret == HAL_OK)
 81040c0:	7dfb      	ldrb	r3, [r7, #23]
 81040c2:	2b00      	cmp	r3, #0
 81040c4:	d109      	bne.n	81040da <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81040c6:	4b5e      	ldr	r3, [pc, #376]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81040ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81040d2:	495b      	ldr	r1, [pc, #364]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81040d4:	4313      	orrs	r3, r2
 81040d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81040d8:	e001      	b.n	81040de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040da:	7dfb      	ldrb	r3, [r7, #23]
 81040dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81040de:	687b      	ldr	r3, [r7, #4]
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81040e6:	2b00      	cmp	r3, #0
 81040e8:	d00a      	beq.n	8104100 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	3324      	adds	r3, #36	; 0x24
 81040ee:	2102      	movs	r1, #2
 81040f0:	4618      	mov	r0, r3
 81040f2:	f000 fc17 	bl	8104924 <RCCEx_PLL3_Config>
 81040f6:	4603      	mov	r3, r0
 81040f8:	2b00      	cmp	r3, #0
 81040fa:	d001      	beq.n	8104100 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81040fc:	2301      	movs	r3, #1
 81040fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104108:	2b00      	cmp	r3, #0
 810410a:	d030      	beq.n	810416e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 810410c:	687b      	ldr	r3, [r7, #4]
 810410e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104114:	d017      	beq.n	8104146 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8104116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810411a:	d811      	bhi.n	8104140 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 810411c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104120:	d013      	beq.n	810414a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104126:	d80b      	bhi.n	8104140 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104128:	2b00      	cmp	r3, #0
 810412a:	d010      	beq.n	810414e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 810412c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104130:	d106      	bne.n	8104140 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104132:	4b43      	ldr	r3, [pc, #268]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104136:	4a42      	ldr	r2, [pc, #264]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810413c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 810413e:	e007      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104140:	2301      	movs	r3, #1
 8104142:	75fb      	strb	r3, [r7, #23]
      break;
 8104144:	e004      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104146:	bf00      	nop
 8104148:	e002      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810414a:	bf00      	nop
 810414c:	e000      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 810414e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104150:	7dfb      	ldrb	r3, [r7, #23]
 8104152:	2b00      	cmp	r3, #0
 8104154:	d109      	bne.n	810416a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104156:	4b3a      	ldr	r3, [pc, #232]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810415a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104162:	4937      	ldr	r1, [pc, #220]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104164:	4313      	orrs	r3, r2
 8104166:	654b      	str	r3, [r1, #84]	; 0x54
 8104168:	e001      	b.n	810416e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810416a:	7dfb      	ldrb	r3, [r7, #23]
 810416c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	681b      	ldr	r3, [r3, #0]
 8104172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104176:	2b00      	cmp	r3, #0
 8104178:	d008      	beq.n	810418c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810417a:	4b31      	ldr	r3, [pc, #196]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810417c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810417e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104182:	687b      	ldr	r3, [r7, #4]
 8104184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104186:	492e      	ldr	r1, [pc, #184]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104188:	4313      	orrs	r3, r2
 810418a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 810418c:	687b      	ldr	r3, [r7, #4]
 810418e:	681b      	ldr	r3, [r3, #0]
 8104190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104194:	2b00      	cmp	r3, #0
 8104196:	d009      	beq.n	81041ac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104198:	4b29      	ldr	r3, [pc, #164]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810419a:	691b      	ldr	r3, [r3, #16]
 810419c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 81041a0:	687b      	ldr	r3, [r7, #4]
 81041a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81041a6:	4926      	ldr	r1, [pc, #152]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041a8:	4313      	orrs	r3, r2
 81041aa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81041ac:	687b      	ldr	r3, [r7, #4]
 81041ae:	681b      	ldr	r3, [r3, #0]
 81041b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81041b4:	2b00      	cmp	r3, #0
 81041b6:	d008      	beq.n	81041ca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81041b8:	4b21      	ldr	r3, [pc, #132]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81041bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81041c0:	687b      	ldr	r3, [r7, #4]
 81041c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81041c4:	491e      	ldr	r1, [pc, #120]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041c6:	4313      	orrs	r3, r2
 81041c8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81041ca:	687b      	ldr	r3, [r7, #4]
 81041cc:	681b      	ldr	r3, [r3, #0]
 81041ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 81041d2:	2b00      	cmp	r3, #0
 81041d4:	d00d      	beq.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81041d6:	4b1a      	ldr	r3, [pc, #104]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041d8:	691b      	ldr	r3, [r3, #16]
 81041da:	4a19      	ldr	r2, [pc, #100]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 81041e0:	6113      	str	r3, [r2, #16]
 81041e2:	4b17      	ldr	r3, [pc, #92]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041e4:	691a      	ldr	r2, [r3, #16]
 81041e6:	687b      	ldr	r3, [r7, #4]
 81041e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81041ec:	4914      	ldr	r1, [pc, #80]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041ee:	4313      	orrs	r3, r2
 81041f0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 81041f2:	687b      	ldr	r3, [r7, #4]
 81041f4:	681b      	ldr	r3, [r3, #0]
 81041f6:	2b00      	cmp	r3, #0
 81041f8:	da08      	bge.n	810420c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 81041fa:	4b11      	ldr	r3, [pc, #68]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81041fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104202:	687b      	ldr	r3, [r7, #4]
 8104204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104206:	490e      	ldr	r1, [pc, #56]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104208:	4313      	orrs	r3, r2
 810420a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 810420c:	687b      	ldr	r3, [r7, #4]
 810420e:	681b      	ldr	r3, [r3, #0]
 8104210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104214:	2b00      	cmp	r3, #0
 8104216:	d009      	beq.n	810422c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104218:	4b09      	ldr	r3, [pc, #36]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810421c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104220:	687b      	ldr	r3, [r7, #4]
 8104222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104226:	4906      	ldr	r1, [pc, #24]	; (8104240 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104228:	4313      	orrs	r3, r2
 810422a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 810422c:	7dbb      	ldrb	r3, [r7, #22]
 810422e:	2b00      	cmp	r3, #0
 8104230:	d101      	bne.n	8104236 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8104232:	2300      	movs	r3, #0
 8104234:	e000      	b.n	8104238 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8104236:	2301      	movs	r3, #1
}
 8104238:	4618      	mov	r0, r3
 810423a:	3718      	adds	r7, #24
 810423c:	46bd      	mov	sp, r7
 810423e:	bd80      	pop	{r7, pc}
 8104240:	58024400 	.word	0x58024400

08104244 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104244:	b580      	push	{r7, lr}
 8104246:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104248:	f7ff f85e 	bl	8103308 <HAL_RCC_GetHCLKFreq>
 810424c:	4602      	mov	r2, r0
 810424e:	4b06      	ldr	r3, [pc, #24]	; (8104268 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104250:	6a1b      	ldr	r3, [r3, #32]
 8104252:	091b      	lsrs	r3, r3, #4
 8104254:	f003 0307 	and.w	r3, r3, #7
 8104258:	4904      	ldr	r1, [pc, #16]	; (810426c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810425a:	5ccb      	ldrb	r3, [r1, r3]
 810425c:	f003 031f 	and.w	r3, r3, #31
 8104260:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104264:	4618      	mov	r0, r3
 8104266:	bd80      	pop	{r7, pc}
 8104268:	58024400 	.word	0x58024400
 810426c:	0810cbf0 	.word	0x0810cbf0

08104270 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8104270:	b480      	push	{r7}
 8104272:	b089      	sub	sp, #36	; 0x24
 8104274:	af00      	add	r7, sp, #0
 8104276:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104278:	4ba1      	ldr	r3, [pc, #644]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810427c:	f003 0303 	and.w	r3, r3, #3
 8104280:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8104282:	4b9f      	ldr	r3, [pc, #636]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104286:	0b1b      	lsrs	r3, r3, #12
 8104288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810428c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810428e:	4b9c      	ldr	r3, [pc, #624]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104292:	091b      	lsrs	r3, r3, #4
 8104294:	f003 0301 	and.w	r3, r3, #1
 8104298:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810429a:	4b99      	ldr	r3, [pc, #612]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810429e:	08db      	lsrs	r3, r3, #3
 81042a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81042a4:	693a      	ldr	r2, [r7, #16]
 81042a6:	fb02 f303 	mul.w	r3, r2, r3
 81042aa:	ee07 3a90 	vmov	s15, r3
 81042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81042b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81042b6:	697b      	ldr	r3, [r7, #20]
 81042b8:	2b00      	cmp	r3, #0
 81042ba:	f000 8111 	beq.w	81044e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81042be:	69bb      	ldr	r3, [r7, #24]
 81042c0:	2b02      	cmp	r3, #2
 81042c2:	f000 8083 	beq.w	81043cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81042c6:	69bb      	ldr	r3, [r7, #24]
 81042c8:	2b02      	cmp	r3, #2
 81042ca:	f200 80a1 	bhi.w	8104410 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81042ce:	69bb      	ldr	r3, [r7, #24]
 81042d0:	2b00      	cmp	r3, #0
 81042d2:	d003      	beq.n	81042dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81042d4:	69bb      	ldr	r3, [r7, #24]
 81042d6:	2b01      	cmp	r3, #1
 81042d8:	d056      	beq.n	8104388 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81042da:	e099      	b.n	8104410 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81042dc:	4b88      	ldr	r3, [pc, #544]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81042de:	681b      	ldr	r3, [r3, #0]
 81042e0:	f003 0320 	and.w	r3, r3, #32
 81042e4:	2b00      	cmp	r3, #0
 81042e6:	d02d      	beq.n	8104344 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81042e8:	4b85      	ldr	r3, [pc, #532]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	08db      	lsrs	r3, r3, #3
 81042ee:	f003 0303 	and.w	r3, r3, #3
 81042f2:	4a84      	ldr	r2, [pc, #528]	; (8104504 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81042f4:	fa22 f303 	lsr.w	r3, r2, r3
 81042f8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81042fa:	68bb      	ldr	r3, [r7, #8]
 81042fc:	ee07 3a90 	vmov	s15, r3
 8104300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104304:	697b      	ldr	r3, [r7, #20]
 8104306:	ee07 3a90 	vmov	s15, r3
 810430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810430e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104312:	4b7b      	ldr	r3, [pc, #492]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810431a:	ee07 3a90 	vmov	s15, r3
 810431e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104322:	ed97 6a03 	vldr	s12, [r7, #12]
 8104326:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810432a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810432e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810433a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810433e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8104342:	e087      	b.n	8104454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104344:	697b      	ldr	r3, [r7, #20]
 8104346:	ee07 3a90 	vmov	s15, r3
 810434a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810434e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 810450c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104356:	4b6a      	ldr	r3, [pc, #424]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810435a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810435e:	ee07 3a90 	vmov	s15, r3
 8104362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104366:	ed97 6a03 	vldr	s12, [r7, #12]
 810436a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810436e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104376:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810437a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810437e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104382:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104386:	e065      	b.n	8104454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104388:	697b      	ldr	r3, [r7, #20]
 810438a:	ee07 3a90 	vmov	s15, r3
 810438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104392:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104510 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810439a:	4b59      	ldr	r3, [pc, #356]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810439c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810439e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81043a2:	ee07 3a90 	vmov	s15, r3
 81043a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81043aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81043ae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81043b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81043b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81043ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81043be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81043c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81043c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81043ca:	e043      	b.n	8104454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81043cc:	697b      	ldr	r3, [r7, #20]
 81043ce:	ee07 3a90 	vmov	s15, r3
 81043d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81043d6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81043da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81043de:	4b48      	ldr	r3, [pc, #288]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81043e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81043e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81043e6:	ee07 3a90 	vmov	s15, r3
 81043ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81043ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81043f2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81043f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81043fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81043fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104402:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104406:	ee67 7a27 	vmul.f32	s15, s14, s15
 810440a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810440e:	e021      	b.n	8104454 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8104410:	697b      	ldr	r3, [r7, #20]
 8104412:	ee07 3a90 	vmov	s15, r3
 8104416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810441a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104510 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810441e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104422:	4b37      	ldr	r3, [pc, #220]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810442a:	ee07 3a90 	vmov	s15, r3
 810442e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104432:	ed97 6a03 	vldr	s12, [r7, #12]
 8104436:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104508 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810443a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810443e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810444a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810444e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104452:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8104454:	4b2a      	ldr	r3, [pc, #168]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104458:	0a5b      	lsrs	r3, r3, #9
 810445a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810445e:	ee07 3a90 	vmov	s15, r3
 8104462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104466:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810446a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810446e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810447a:	ee17 2a90 	vmov	r2, s15
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8104482:	4b1f      	ldr	r3, [pc, #124]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104486:	0c1b      	lsrs	r3, r3, #16
 8104488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810448c:	ee07 3a90 	vmov	s15, r3
 8104490:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104494:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104498:	ee37 7a87 	vadd.f32	s14, s15, s14
 810449c:	edd7 6a07 	vldr	s13, [r7, #28]
 81044a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81044a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81044a8:	ee17 2a90 	vmov	r2, s15
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 81044b0:	4b13      	ldr	r3, [pc, #76]	; (8104500 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81044b4:	0e1b      	lsrs	r3, r3, #24
 81044b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81044ba:	ee07 3a90 	vmov	s15, r3
 81044be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81044c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81044c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81044ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81044ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81044d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81044d6:	ee17 2a90 	vmov	r2, s15
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81044de:	e008      	b.n	81044f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	2200      	movs	r2, #0
 81044e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81044e6:	687b      	ldr	r3, [r7, #4]
 81044e8:	2200      	movs	r2, #0
 81044ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81044ec:	687b      	ldr	r3, [r7, #4]
 81044ee:	2200      	movs	r2, #0
 81044f0:	609a      	str	r2, [r3, #8]
}
 81044f2:	bf00      	nop
 81044f4:	3724      	adds	r7, #36	; 0x24
 81044f6:	46bd      	mov	sp, r7
 81044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81044fc:	4770      	bx	lr
 81044fe:	bf00      	nop
 8104500:	58024400 	.word	0x58024400
 8104504:	03d09000 	.word	0x03d09000
 8104508:	46000000 	.word	0x46000000
 810450c:	4c742400 	.word	0x4c742400
 8104510:	4a742400 	.word	0x4a742400
 8104514:	4af42400 	.word	0x4af42400

08104518 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8104518:	b480      	push	{r7}
 810451a:	b089      	sub	sp, #36	; 0x24
 810451c:	af00      	add	r7, sp, #0
 810451e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104520:	4ba1      	ldr	r3, [pc, #644]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104524:	f003 0303 	and.w	r3, r3, #3
 8104528:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 810452a:	4b9f      	ldr	r3, [pc, #636]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810452e:	0d1b      	lsrs	r3, r3, #20
 8104530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104534:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104536:	4b9c      	ldr	r3, [pc, #624]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810453a:	0a1b      	lsrs	r3, r3, #8
 810453c:	f003 0301 	and.w	r3, r3, #1
 8104540:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8104542:	4b99      	ldr	r3, [pc, #612]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104546:	08db      	lsrs	r3, r3, #3
 8104548:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810454c:	693a      	ldr	r2, [r7, #16]
 810454e:	fb02 f303 	mul.w	r3, r2, r3
 8104552:	ee07 3a90 	vmov	s15, r3
 8104556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810455a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810455e:	697b      	ldr	r3, [r7, #20]
 8104560:	2b00      	cmp	r3, #0
 8104562:	f000 8111 	beq.w	8104788 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104566:	69bb      	ldr	r3, [r7, #24]
 8104568:	2b02      	cmp	r3, #2
 810456a:	f000 8083 	beq.w	8104674 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810456e:	69bb      	ldr	r3, [r7, #24]
 8104570:	2b02      	cmp	r3, #2
 8104572:	f200 80a1 	bhi.w	81046b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104576:	69bb      	ldr	r3, [r7, #24]
 8104578:	2b00      	cmp	r3, #0
 810457a:	d003      	beq.n	8104584 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810457c:	69bb      	ldr	r3, [r7, #24]
 810457e:	2b01      	cmp	r3, #1
 8104580:	d056      	beq.n	8104630 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104582:	e099      	b.n	81046b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104584:	4b88      	ldr	r3, [pc, #544]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	f003 0320 	and.w	r3, r3, #32
 810458c:	2b00      	cmp	r3, #0
 810458e:	d02d      	beq.n	81045ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104590:	4b85      	ldr	r3, [pc, #532]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104592:	681b      	ldr	r3, [r3, #0]
 8104594:	08db      	lsrs	r3, r3, #3
 8104596:	f003 0303 	and.w	r3, r3, #3
 810459a:	4a84      	ldr	r2, [pc, #528]	; (81047ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810459c:	fa22 f303 	lsr.w	r3, r2, r3
 81045a0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81045a2:	68bb      	ldr	r3, [r7, #8]
 81045a4:	ee07 3a90 	vmov	s15, r3
 81045a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81045ac:	697b      	ldr	r3, [r7, #20]
 81045ae:	ee07 3a90 	vmov	s15, r3
 81045b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81045ba:	4b7b      	ldr	r3, [pc, #492]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81045be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81045c2:	ee07 3a90 	vmov	s15, r3
 81045c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81045ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81045ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 81047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81045d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81045d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81045da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81045de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81045e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81045e6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81045ea:	e087      	b.n	81046fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81045ec:	697b      	ldr	r3, [r7, #20]
 81045ee:	ee07 3a90 	vmov	s15, r3
 81045f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81045f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81047b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81045fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81045fe:	4b6a      	ldr	r3, [pc, #424]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104606:	ee07 3a90 	vmov	s15, r3
 810460a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810460e:	ed97 6a03 	vldr	s12, [r7, #12]
 8104612:	eddf 5a67 	vldr	s11, [pc, #412]	; 81047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810461a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810461e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104626:	ee67 7a27 	vmul.f32	s15, s14, s15
 810462a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810462e:	e065      	b.n	81046fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104630:	697b      	ldr	r3, [r7, #20]
 8104632:	ee07 3a90 	vmov	s15, r3
 8104636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810463a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810463e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104642:	4b59      	ldr	r3, [pc, #356]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810464a:	ee07 3a90 	vmov	s15, r3
 810464e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104652:	ed97 6a03 	vldr	s12, [r7, #12]
 8104656:	eddf 5a56 	vldr	s11, [pc, #344]	; 81047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810465a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810465e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104662:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104666:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810466a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810466e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8104672:	e043      	b.n	81046fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8104674:	697b      	ldr	r3, [r7, #20]
 8104676:	ee07 3a90 	vmov	s15, r3
 810467a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810467e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81047bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104682:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104686:	4b48      	ldr	r3, [pc, #288]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810468a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810468e:	ee07 3a90 	vmov	s15, r3
 8104692:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104696:	ed97 6a03 	vldr	s12, [r7, #12]
 810469a:	eddf 5a45 	vldr	s11, [pc, #276]	; 81047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810469e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81046aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81046b6:	e021      	b.n	81046fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81046b8:	697b      	ldr	r3, [r7, #20]
 81046ba:	ee07 3a90 	vmov	s15, r3
 81046be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81046c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81047b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81046c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81046ca:	4b37      	ldr	r3, [pc, #220]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81046d2:	ee07 3a90 	vmov	s15, r3
 81046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81046da:	ed97 6a03 	vldr	s12, [r7, #12]
 81046de:	eddf 5a34 	vldr	s11, [pc, #208]	; 81047b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81046e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81046e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81046ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81046ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81046f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81046fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81046fc:	4b2a      	ldr	r3, [pc, #168]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81046fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104700:	0a5b      	lsrs	r3, r3, #9
 8104702:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104706:	ee07 3a90 	vmov	s15, r3
 810470a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810470e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104712:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104716:	edd7 6a07 	vldr	s13, [r7, #28]
 810471a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810471e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104722:	ee17 2a90 	vmov	r2, s15
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 810472a:	4b1f      	ldr	r3, [pc, #124]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810472e:	0c1b      	lsrs	r3, r3, #16
 8104730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104734:	ee07 3a90 	vmov	s15, r3
 8104738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810473c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104740:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104744:	edd7 6a07 	vldr	s13, [r7, #28]
 8104748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810474c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104750:	ee17 2a90 	vmov	r2, s15
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8104758:	4b13      	ldr	r3, [pc, #76]	; (81047a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810475c:	0e1b      	lsrs	r3, r3, #24
 810475e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104762:	ee07 3a90 	vmov	s15, r3
 8104766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810476a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810476e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104772:	edd7 6a07 	vldr	s13, [r7, #28]
 8104776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810477a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810477e:	ee17 2a90 	vmov	r2, s15
 8104782:	687b      	ldr	r3, [r7, #4]
 8104784:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104786:	e008      	b.n	810479a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	2200      	movs	r2, #0
 810478c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810478e:	687b      	ldr	r3, [r7, #4]
 8104790:	2200      	movs	r2, #0
 8104792:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	2200      	movs	r2, #0
 8104798:	609a      	str	r2, [r3, #8]
}
 810479a:	bf00      	nop
 810479c:	3724      	adds	r7, #36	; 0x24
 810479e:	46bd      	mov	sp, r7
 81047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a4:	4770      	bx	lr
 81047a6:	bf00      	nop
 81047a8:	58024400 	.word	0x58024400
 81047ac:	03d09000 	.word	0x03d09000
 81047b0:	46000000 	.word	0x46000000
 81047b4:	4c742400 	.word	0x4c742400
 81047b8:	4a742400 	.word	0x4a742400
 81047bc:	4af42400 	.word	0x4af42400

081047c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81047c0:	b580      	push	{r7, lr}
 81047c2:	b084      	sub	sp, #16
 81047c4:	af00      	add	r7, sp, #0
 81047c6:	6078      	str	r0, [r7, #4]
 81047c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81047ca:	2300      	movs	r3, #0
 81047cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81047ce:	4b54      	ldr	r3, [pc, #336]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81047d2:	f003 0303 	and.w	r3, r3, #3
 81047d6:	2b03      	cmp	r3, #3
 81047d8:	d101      	bne.n	81047de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81047da:	2301      	movs	r3, #1
 81047dc:	e09b      	b.n	8104916 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81047de:	4b50      	ldr	r3, [pc, #320]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81047e0:	681b      	ldr	r3, [r3, #0]
 81047e2:	4a4f      	ldr	r2, [pc, #316]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81047e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81047e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81047ea:	f7fe f841 	bl	8102870 <HAL_GetTick>
 81047ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81047f0:	e008      	b.n	8104804 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81047f2:	f7fe f83d 	bl	8102870 <HAL_GetTick>
 81047f6:	4602      	mov	r2, r0
 81047f8:	68bb      	ldr	r3, [r7, #8]
 81047fa:	1ad3      	subs	r3, r2, r3
 81047fc:	2b02      	cmp	r3, #2
 81047fe:	d901      	bls.n	8104804 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104800:	2303      	movs	r3, #3
 8104802:	e088      	b.n	8104916 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104804:	4b46      	ldr	r3, [pc, #280]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810480c:	2b00      	cmp	r3, #0
 810480e:	d1f0      	bne.n	81047f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104810:	4b43      	ldr	r3, [pc, #268]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 8104812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104814:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	681b      	ldr	r3, [r3, #0]
 810481c:	031b      	lsls	r3, r3, #12
 810481e:	4940      	ldr	r1, [pc, #256]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 8104820:	4313      	orrs	r3, r2
 8104822:	628b      	str	r3, [r1, #40]	; 0x28
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	685b      	ldr	r3, [r3, #4]
 8104828:	3b01      	subs	r3, #1
 810482a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810482e:	687b      	ldr	r3, [r7, #4]
 8104830:	689b      	ldr	r3, [r3, #8]
 8104832:	3b01      	subs	r3, #1
 8104834:	025b      	lsls	r3, r3, #9
 8104836:	b29b      	uxth	r3, r3
 8104838:	431a      	orrs	r2, r3
 810483a:	687b      	ldr	r3, [r7, #4]
 810483c:	68db      	ldr	r3, [r3, #12]
 810483e:	3b01      	subs	r3, #1
 8104840:	041b      	lsls	r3, r3, #16
 8104842:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8104846:	431a      	orrs	r2, r3
 8104848:	687b      	ldr	r3, [r7, #4]
 810484a:	691b      	ldr	r3, [r3, #16]
 810484c:	3b01      	subs	r3, #1
 810484e:	061b      	lsls	r3, r3, #24
 8104850:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8104854:	4932      	ldr	r1, [pc, #200]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 8104856:	4313      	orrs	r3, r2
 8104858:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810485a:	4b31      	ldr	r3, [pc, #196]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 810485c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810485e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8104862:	687b      	ldr	r3, [r7, #4]
 8104864:	695b      	ldr	r3, [r3, #20]
 8104866:	492e      	ldr	r1, [pc, #184]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 8104868:	4313      	orrs	r3, r2
 810486a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810486c:	4b2c      	ldr	r3, [pc, #176]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 810486e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104870:	f023 0220 	bic.w	r2, r3, #32
 8104874:	687b      	ldr	r3, [r7, #4]
 8104876:	699b      	ldr	r3, [r3, #24]
 8104878:	4929      	ldr	r1, [pc, #164]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 810487a:	4313      	orrs	r3, r2
 810487c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810487e:	4b28      	ldr	r3, [pc, #160]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 8104880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104882:	4a27      	ldr	r2, [pc, #156]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 8104884:	f023 0310 	bic.w	r3, r3, #16
 8104888:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810488a:	4b25      	ldr	r3, [pc, #148]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 810488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810488e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8104892:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8104896:	687a      	ldr	r2, [r7, #4]
 8104898:	69d2      	ldr	r2, [r2, #28]
 810489a:	00d2      	lsls	r2, r2, #3
 810489c:	4920      	ldr	r1, [pc, #128]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 810489e:	4313      	orrs	r3, r2
 81048a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 81048a2:	4b1f      	ldr	r3, [pc, #124]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048a6:	4a1e      	ldr	r2, [pc, #120]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048a8:	f043 0310 	orr.w	r3, r3, #16
 81048ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 81048ae:	683b      	ldr	r3, [r7, #0]
 81048b0:	2b00      	cmp	r3, #0
 81048b2:	d106      	bne.n	81048c2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81048b4:	4b1a      	ldr	r3, [pc, #104]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048b8:	4a19      	ldr	r2, [pc, #100]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81048be:	62d3      	str	r3, [r2, #44]	; 0x2c
 81048c0:	e00f      	b.n	81048e2 <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 81048c2:	683b      	ldr	r3, [r7, #0]
 81048c4:	2b01      	cmp	r3, #1
 81048c6:	d106      	bne.n	81048d6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81048c8:	4b15      	ldr	r3, [pc, #84]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048cc:	4a14      	ldr	r2, [pc, #80]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81048d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81048d4:	e005      	b.n	81048e2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81048d6:	4b12      	ldr	r3, [pc, #72]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81048da:	4a11      	ldr	r2, [pc, #68]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81048e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81048e2:	4b0f      	ldr	r3, [pc, #60]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048e4:	681b      	ldr	r3, [r3, #0]
 81048e6:	4a0e      	ldr	r2, [pc, #56]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 81048e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81048ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81048ee:	f7fd ffbf 	bl	8102870 <HAL_GetTick>
 81048f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81048f4:	e008      	b.n	8104908 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 81048f6:	f7fd ffbb 	bl	8102870 <HAL_GetTick>
 81048fa:	4602      	mov	r2, r0
 81048fc:	68bb      	ldr	r3, [r7, #8]
 81048fe:	1ad3      	subs	r3, r2, r3
 8104900:	2b02      	cmp	r3, #2
 8104902:	d901      	bls.n	8104908 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104904:	2303      	movs	r3, #3
 8104906:	e006      	b.n	8104916 <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104908:	4b05      	ldr	r3, [pc, #20]	; (8104920 <RCCEx_PLL2_Config+0x160>)
 810490a:	681b      	ldr	r3, [r3, #0]
 810490c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104910:	2b00      	cmp	r3, #0
 8104912:	d0f0      	beq.n	81048f6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104914:	7bfb      	ldrb	r3, [r7, #15]
}
 8104916:	4618      	mov	r0, r3
 8104918:	3710      	adds	r7, #16
 810491a:	46bd      	mov	sp, r7
 810491c:	bd80      	pop	{r7, pc}
 810491e:	bf00      	nop
 8104920:	58024400 	.word	0x58024400

08104924 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104924:	b580      	push	{r7, lr}
 8104926:	b084      	sub	sp, #16
 8104928:	af00      	add	r7, sp, #0
 810492a:	6078      	str	r0, [r7, #4]
 810492c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810492e:	2300      	movs	r3, #0
 8104930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104932:	4b54      	ldr	r3, [pc, #336]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104936:	f003 0303 	and.w	r3, r3, #3
 810493a:	2b03      	cmp	r3, #3
 810493c:	d101      	bne.n	8104942 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810493e:	2301      	movs	r3, #1
 8104940:	e09b      	b.n	8104a7a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104942:	4b50      	ldr	r3, [pc, #320]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104944:	681b      	ldr	r3, [r3, #0]
 8104946:	4a4f      	ldr	r2, [pc, #316]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810494c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810494e:	f7fd ff8f 	bl	8102870 <HAL_GetTick>
 8104952:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104954:	e008      	b.n	8104968 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104956:	f7fd ff8b 	bl	8102870 <HAL_GetTick>
 810495a:	4602      	mov	r2, r0
 810495c:	68bb      	ldr	r3, [r7, #8]
 810495e:	1ad3      	subs	r3, r2, r3
 8104960:	2b02      	cmp	r3, #2
 8104962:	d901      	bls.n	8104968 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104964:	2303      	movs	r3, #3
 8104966:	e088      	b.n	8104a7a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104968:	4b46      	ldr	r3, [pc, #280]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 810496a:	681b      	ldr	r3, [r3, #0]
 810496c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104970:	2b00      	cmp	r3, #0
 8104972:	d1f0      	bne.n	8104956 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104974:	4b43      	ldr	r3, [pc, #268]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104978:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810497c:	687b      	ldr	r3, [r7, #4]
 810497e:	681b      	ldr	r3, [r3, #0]
 8104980:	051b      	lsls	r3, r3, #20
 8104982:	4940      	ldr	r1, [pc, #256]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104984:	4313      	orrs	r3, r2
 8104986:	628b      	str	r3, [r1, #40]	; 0x28
 8104988:	687b      	ldr	r3, [r7, #4]
 810498a:	685b      	ldr	r3, [r3, #4]
 810498c:	3b01      	subs	r3, #1
 810498e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	689b      	ldr	r3, [r3, #8]
 8104996:	3b01      	subs	r3, #1
 8104998:	025b      	lsls	r3, r3, #9
 810499a:	b29b      	uxth	r3, r3
 810499c:	431a      	orrs	r2, r3
 810499e:	687b      	ldr	r3, [r7, #4]
 81049a0:	68db      	ldr	r3, [r3, #12]
 81049a2:	3b01      	subs	r3, #1
 81049a4:	041b      	lsls	r3, r3, #16
 81049a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81049aa:	431a      	orrs	r2, r3
 81049ac:	687b      	ldr	r3, [r7, #4]
 81049ae:	691b      	ldr	r3, [r3, #16]
 81049b0:	3b01      	subs	r3, #1
 81049b2:	061b      	lsls	r3, r3, #24
 81049b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81049b8:	4932      	ldr	r1, [pc, #200]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 81049ba:	4313      	orrs	r3, r2
 81049bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81049be:	4b31      	ldr	r3, [pc, #196]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 81049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81049c6:	687b      	ldr	r3, [r7, #4]
 81049c8:	695b      	ldr	r3, [r3, #20]
 81049ca:	492e      	ldr	r1, [pc, #184]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 81049cc:	4313      	orrs	r3, r2
 81049ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81049d0:	4b2c      	ldr	r3, [pc, #176]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 81049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81049d8:	687b      	ldr	r3, [r7, #4]
 81049da:	699b      	ldr	r3, [r3, #24]
 81049dc:	4929      	ldr	r1, [pc, #164]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 81049de:	4313      	orrs	r3, r2
 81049e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81049e2:	4b28      	ldr	r3, [pc, #160]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 81049e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049e6:	4a27      	ldr	r2, [pc, #156]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 81049e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81049ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81049ee:	4b25      	ldr	r3, [pc, #148]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 81049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81049f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81049f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81049fa:	687a      	ldr	r2, [r7, #4]
 81049fc:	69d2      	ldr	r2, [r2, #28]
 81049fe:	00d2      	lsls	r2, r2, #3
 8104a00:	4920      	ldr	r1, [pc, #128]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a02:	4313      	orrs	r3, r2
 8104a04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104a06:	4b1f      	ldr	r3, [pc, #124]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a0a:	4a1e      	ldr	r2, [pc, #120]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8104a10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8104a12:	683b      	ldr	r3, [r7, #0]
 8104a14:	2b00      	cmp	r3, #0
 8104a16:	d106      	bne.n	8104a26 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104a18:	4b1a      	ldr	r3, [pc, #104]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a1c:	4a19      	ldr	r2, [pc, #100]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8104a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104a24:	e00f      	b.n	8104a46 <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8104a26:	683b      	ldr	r3, [r7, #0]
 8104a28:	2b01      	cmp	r3, #1
 8104a2a:	d106      	bne.n	8104a3a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104a2c:	4b15      	ldr	r3, [pc, #84]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a30:	4a14      	ldr	r2, [pc, #80]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8104a36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8104a38:	e005      	b.n	8104a46 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104a3a:	4b12      	ldr	r3, [pc, #72]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a3e:	4a11      	ldr	r2, [pc, #68]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8104a44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104a46:	4b0f      	ldr	r3, [pc, #60]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a48:	681b      	ldr	r3, [r3, #0]
 8104a4a:	4a0e      	ldr	r2, [pc, #56]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8104a50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104a52:	f7fd ff0d 	bl	8102870 <HAL_GetTick>
 8104a56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104a58:	e008      	b.n	8104a6c <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8104a5a:	f7fd ff09 	bl	8102870 <HAL_GetTick>
 8104a5e:	4602      	mov	r2, r0
 8104a60:	68bb      	ldr	r3, [r7, #8]
 8104a62:	1ad3      	subs	r3, r2, r3
 8104a64:	2b02      	cmp	r3, #2
 8104a66:	d901      	bls.n	8104a6c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104a68:	2303      	movs	r3, #3
 8104a6a:	e006      	b.n	8104a7a <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104a6c:	4b05      	ldr	r3, [pc, #20]	; (8104a84 <RCCEx_PLL3_Config+0x160>)
 8104a6e:	681b      	ldr	r3, [r3, #0]
 8104a70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104a74:	2b00      	cmp	r3, #0
 8104a76:	d0f0      	beq.n	8104a5a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8104a7a:	4618      	mov	r0, r3
 8104a7c:	3710      	adds	r7, #16
 8104a7e:	46bd      	mov	sp, r7
 8104a80:	bd80      	pop	{r7, pc}
 8104a82:	bf00      	nop
 8104a84:	58024400 	.word	0x58024400

08104a88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104a88:	b580      	push	{r7, lr}
 8104a8a:	b084      	sub	sp, #16
 8104a8c:	af00      	add	r7, sp, #0
 8104a8e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	2b00      	cmp	r3, #0
 8104a94:	d101      	bne.n	8104a9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8104a96:	2301      	movs	r3, #1
 8104a98:	e0f1      	b.n	8104c7e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	2200      	movs	r2, #0
 8104a9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	681b      	ldr	r3, [r3, #0]
 8104aa4:	4a78      	ldr	r2, [pc, #480]	; (8104c88 <HAL_SPI_Init+0x200>)
 8104aa6:	4293      	cmp	r3, r2
 8104aa8:	d00f      	beq.n	8104aca <HAL_SPI_Init+0x42>
 8104aaa:	687b      	ldr	r3, [r7, #4]
 8104aac:	681b      	ldr	r3, [r3, #0]
 8104aae:	4a77      	ldr	r2, [pc, #476]	; (8104c8c <HAL_SPI_Init+0x204>)
 8104ab0:	4293      	cmp	r3, r2
 8104ab2:	d00a      	beq.n	8104aca <HAL_SPI_Init+0x42>
 8104ab4:	687b      	ldr	r3, [r7, #4]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	4a75      	ldr	r2, [pc, #468]	; (8104c90 <HAL_SPI_Init+0x208>)
 8104aba:	4293      	cmp	r3, r2
 8104abc:	d005      	beq.n	8104aca <HAL_SPI_Init+0x42>
 8104abe:	687b      	ldr	r3, [r7, #4]
 8104ac0:	68db      	ldr	r3, [r3, #12]
 8104ac2:	2b0f      	cmp	r3, #15
 8104ac4:	d901      	bls.n	8104aca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8104ac6:	2301      	movs	r3, #1
 8104ac8:	e0d9      	b.n	8104c7e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8104aca:	6878      	ldr	r0, [r7, #4]
 8104acc:	f001 f877 	bl	8105bbe <SPI_GetPacketSize>
 8104ad0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104ad2:	687b      	ldr	r3, [r7, #4]
 8104ad4:	681b      	ldr	r3, [r3, #0]
 8104ad6:	4a6c      	ldr	r2, [pc, #432]	; (8104c88 <HAL_SPI_Init+0x200>)
 8104ad8:	4293      	cmp	r3, r2
 8104ada:	d00c      	beq.n	8104af6 <HAL_SPI_Init+0x6e>
 8104adc:	687b      	ldr	r3, [r7, #4]
 8104ade:	681b      	ldr	r3, [r3, #0]
 8104ae0:	4a6a      	ldr	r2, [pc, #424]	; (8104c8c <HAL_SPI_Init+0x204>)
 8104ae2:	4293      	cmp	r3, r2
 8104ae4:	d007      	beq.n	8104af6 <HAL_SPI_Init+0x6e>
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	681b      	ldr	r3, [r3, #0]
 8104aea:	4a69      	ldr	r2, [pc, #420]	; (8104c90 <HAL_SPI_Init+0x208>)
 8104aec:	4293      	cmp	r3, r2
 8104aee:	d002      	beq.n	8104af6 <HAL_SPI_Init+0x6e>
 8104af0:	68fb      	ldr	r3, [r7, #12]
 8104af2:	2b08      	cmp	r3, #8
 8104af4:	d811      	bhi.n	8104b1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104af6:	687b      	ldr	r3, [r7, #4]
 8104af8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8104afa:	4a63      	ldr	r2, [pc, #396]	; (8104c88 <HAL_SPI_Init+0x200>)
 8104afc:	4293      	cmp	r3, r2
 8104afe:	d009      	beq.n	8104b14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8104b00:	687b      	ldr	r3, [r7, #4]
 8104b02:	681b      	ldr	r3, [r3, #0]
 8104b04:	4a61      	ldr	r2, [pc, #388]	; (8104c8c <HAL_SPI_Init+0x204>)
 8104b06:	4293      	cmp	r3, r2
 8104b08:	d004      	beq.n	8104b14 <HAL_SPI_Init+0x8c>
 8104b0a:	687b      	ldr	r3, [r7, #4]
 8104b0c:	681b      	ldr	r3, [r3, #0]
 8104b0e:	4a60      	ldr	r2, [pc, #384]	; (8104c90 <HAL_SPI_Init+0x208>)
 8104b10:	4293      	cmp	r3, r2
 8104b12:	d104      	bne.n	8104b1e <HAL_SPI_Init+0x96>
 8104b14:	68fb      	ldr	r3, [r7, #12]
 8104b16:	2b10      	cmp	r3, #16
 8104b18:	d901      	bls.n	8104b1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8104b1a:	2301      	movs	r3, #1
 8104b1c:	e0af      	b.n	8104c7e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8104b1e:	687b      	ldr	r3, [r7, #4]
 8104b20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104b24:	b2db      	uxtb	r3, r3
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	d106      	bne.n	8104b38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	2200      	movs	r2, #0
 8104b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104b32:	6878      	ldr	r0, [r7, #4]
 8104b34:	f7fd fbee 	bl	8102314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104b38:	687b      	ldr	r3, [r7, #4]
 8104b3a:	2202      	movs	r2, #2
 8104b3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104b40:	687b      	ldr	r3, [r7, #4]
 8104b42:	681b      	ldr	r3, [r3, #0]
 8104b44:	681a      	ldr	r2, [r3, #0]
 8104b46:	687b      	ldr	r3, [r7, #4]
 8104b48:	681b      	ldr	r3, [r3, #0]
 8104b4a:	f022 0201 	bic.w	r2, r2, #1
 8104b4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8104b50:	687b      	ldr	r3, [r7, #4]
 8104b52:	681b      	ldr	r3, [r3, #0]
 8104b54:	689b      	ldr	r3, [r3, #8]
 8104b56:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8104b5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104b5c:	687b      	ldr	r3, [r7, #4]
 8104b5e:	699b      	ldr	r3, [r3, #24]
 8104b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104b64:	d119      	bne.n	8104b9a <HAL_SPI_Init+0x112>
 8104b66:	687b      	ldr	r3, [r7, #4]
 8104b68:	685b      	ldr	r3, [r3, #4]
 8104b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104b6e:	d103      	bne.n	8104b78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104b70:	687b      	ldr	r3, [r7, #4]
 8104b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104b74:	2b00      	cmp	r3, #0
 8104b76:	d008      	beq.n	8104b8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104b78:	687b      	ldr	r3, [r7, #4]
 8104b7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104b7c:	2b00      	cmp	r3, #0
 8104b7e:	d10c      	bne.n	8104b9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104b80:	687b      	ldr	r3, [r7, #4]
 8104b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104b84:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104b88:	d107      	bne.n	8104b9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8104b8a:	687b      	ldr	r3, [r7, #4]
 8104b8c:	681b      	ldr	r3, [r3, #0]
 8104b8e:	681a      	ldr	r2, [r3, #0]
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8104b98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	69da      	ldr	r2, [r3, #28]
 8104b9e:	687b      	ldr	r3, [r7, #4]
 8104ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104ba2:	431a      	orrs	r2, r3
 8104ba4:	68bb      	ldr	r3, [r7, #8]
 8104ba6:	431a      	orrs	r2, r3
 8104ba8:	687b      	ldr	r3, [r7, #4]
 8104baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104bac:	ea42 0103 	orr.w	r1, r2, r3
 8104bb0:	687b      	ldr	r3, [r7, #4]
 8104bb2:	68da      	ldr	r2, [r3, #12]
 8104bb4:	687b      	ldr	r3, [r7, #4]
 8104bb6:	681b      	ldr	r3, [r3, #0]
 8104bb8:	430a      	orrs	r2, r1
 8104bba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8104bbc:	687b      	ldr	r3, [r7, #4]
 8104bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8104bc0:	687b      	ldr	r3, [r7, #4]
 8104bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104bc4:	431a      	orrs	r2, r3
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104bca:	431a      	orrs	r2, r3
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	699b      	ldr	r3, [r3, #24]
 8104bd0:	431a      	orrs	r2, r3
 8104bd2:	687b      	ldr	r3, [r7, #4]
 8104bd4:	691b      	ldr	r3, [r3, #16]
 8104bd6:	431a      	orrs	r2, r3
 8104bd8:	687b      	ldr	r3, [r7, #4]
 8104bda:	695b      	ldr	r3, [r3, #20]
 8104bdc:	431a      	orrs	r2, r3
 8104bde:	687b      	ldr	r3, [r7, #4]
 8104be0:	6a1b      	ldr	r3, [r3, #32]
 8104be2:	431a      	orrs	r2, r3
 8104be4:	687b      	ldr	r3, [r7, #4]
 8104be6:	685b      	ldr	r3, [r3, #4]
 8104be8:	431a      	orrs	r2, r3
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104bee:	431a      	orrs	r2, r3
 8104bf0:	687b      	ldr	r3, [r7, #4]
 8104bf2:	689b      	ldr	r3, [r3, #8]
 8104bf4:	431a      	orrs	r2, r3
 8104bf6:	687b      	ldr	r3, [r7, #4]
 8104bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104bfa:	ea42 0103 	orr.w	r1, r2, r3
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8104c02:	687b      	ldr	r3, [r7, #4]
 8104c04:	681b      	ldr	r3, [r3, #0]
 8104c06:	430a      	orrs	r2, r1
 8104c08:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8104c0a:	687b      	ldr	r3, [r7, #4]
 8104c0c:	685b      	ldr	r3, [r3, #4]
 8104c0e:	2b00      	cmp	r3, #0
 8104c10:	d113      	bne.n	8104c3a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8104c12:	687b      	ldr	r3, [r7, #4]
 8104c14:	681b      	ldr	r3, [r3, #0]
 8104c16:	689b      	ldr	r3, [r3, #8]
 8104c18:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8104c1c:	687b      	ldr	r3, [r7, #4]
 8104c1e:	681b      	ldr	r3, [r3, #0]
 8104c20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104c24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8104c26:	687b      	ldr	r3, [r7, #4]
 8104c28:	681b      	ldr	r3, [r3, #0]
 8104c2a:	689b      	ldr	r3, [r3, #8]
 8104c2c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8104c30:	687b      	ldr	r3, [r7, #4]
 8104c32:	681b      	ldr	r3, [r3, #0]
 8104c34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8104c38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104c3a:	687b      	ldr	r3, [r7, #4]
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	681b      	ldr	r3, [r3, #0]
 8104c44:	f022 0201 	bic.w	r2, r2, #1
 8104c48:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104c4a:	687b      	ldr	r3, [r7, #4]
 8104c4c:	685b      	ldr	r3, [r3, #4]
 8104c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8104c52:	2b00      	cmp	r3, #0
 8104c54:	d00a      	beq.n	8104c6c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	68db      	ldr	r3, [r3, #12]
 8104c5c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8104c64:	687b      	ldr	r3, [r7, #4]
 8104c66:	681b      	ldr	r3, [r3, #0]
 8104c68:	430a      	orrs	r2, r1
 8104c6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104c6c:	687b      	ldr	r3, [r7, #4]
 8104c6e:	2200      	movs	r2, #0
 8104c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	2201      	movs	r2, #1
 8104c78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8104c7c:	2300      	movs	r3, #0
}
 8104c7e:	4618      	mov	r0, r3
 8104c80:	3710      	adds	r7, #16
 8104c82:	46bd      	mov	sp, r7
 8104c84:	bd80      	pop	{r7, pc}
 8104c86:	bf00      	nop
 8104c88:	40013000 	.word	0x40013000
 8104c8c:	40003800 	.word	0x40003800
 8104c90:	40003c00 	.word	0x40003c00

08104c94 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104c94:	b580      	push	{r7, lr}
 8104c96:	b08a      	sub	sp, #40	; 0x28
 8104c98:	af02      	add	r7, sp, #8
 8104c9a:	60f8      	str	r0, [r7, #12]
 8104c9c:	60b9      	str	r1, [r7, #8]
 8104c9e:	603b      	str	r3, [r7, #0]
 8104ca0:	4613      	mov	r3, r2
 8104ca2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8104ca4:	68fb      	ldr	r3, [r7, #12]
 8104ca6:	681b      	ldr	r3, [r3, #0]
 8104ca8:	3320      	adds	r3, #32
 8104caa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8104cac:	2300      	movs	r3, #0
 8104cae:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104cb0:	68fb      	ldr	r3, [r7, #12]
 8104cb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8104cb6:	2b01      	cmp	r3, #1
 8104cb8:	d101      	bne.n	8104cbe <HAL_SPI_Transmit+0x2a>
 8104cba:	2302      	movs	r3, #2
 8104cbc:	e1d4      	b.n	8105068 <HAL_SPI_Transmit+0x3d4>
 8104cbe:	68fb      	ldr	r3, [r7, #12]
 8104cc0:	2201      	movs	r2, #1
 8104cc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104cc6:	f7fd fdd3 	bl	8102870 <HAL_GetTick>
 8104cca:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8104ccc:	68fb      	ldr	r3, [r7, #12]
 8104cce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8104cd2:	b2db      	uxtb	r3, r3
 8104cd4:	2b01      	cmp	r3, #1
 8104cd6:	d007      	beq.n	8104ce8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8104cd8:	2302      	movs	r3, #2
 8104cda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8104cdc:	68fb      	ldr	r3, [r7, #12]
 8104cde:	2200      	movs	r2, #0
 8104ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104ce4:	7efb      	ldrb	r3, [r7, #27]
 8104ce6:	e1bf      	b.n	8105068 <HAL_SPI_Transmit+0x3d4>
  }

  if ((pData == NULL) || (Size == 0UL))
 8104ce8:	68bb      	ldr	r3, [r7, #8]
 8104cea:	2b00      	cmp	r3, #0
 8104cec:	d002      	beq.n	8104cf4 <HAL_SPI_Transmit+0x60>
 8104cee:	88fb      	ldrh	r3, [r7, #6]
 8104cf0:	2b00      	cmp	r3, #0
 8104cf2:	d107      	bne.n	8104d04 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8104cf4:	2301      	movs	r3, #1
 8104cf6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8104cf8:	68fb      	ldr	r3, [r7, #12]
 8104cfa:	2200      	movs	r2, #0
 8104cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8104d00:	7efb      	ldrb	r3, [r7, #27]
 8104d02:	e1b1      	b.n	8105068 <HAL_SPI_Transmit+0x3d4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8104d04:	68fb      	ldr	r3, [r7, #12]
 8104d06:	2203      	movs	r2, #3
 8104d08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104d0c:	68fb      	ldr	r3, [r7, #12]
 8104d0e:	2200      	movs	r2, #0
 8104d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8104d14:	68fb      	ldr	r3, [r7, #12]
 8104d16:	68ba      	ldr	r2, [r7, #8]
 8104d18:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8104d1a:	68fb      	ldr	r3, [r7, #12]
 8104d1c:	88fa      	ldrh	r2, [r7, #6]
 8104d1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8104d22:	68fb      	ldr	r3, [r7, #12]
 8104d24:	88fa      	ldrh	r2, [r7, #6]
 8104d26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8104d2a:	68fb      	ldr	r3, [r7, #12]
 8104d2c:	2200      	movs	r2, #0
 8104d2e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8104d30:	68fb      	ldr	r3, [r7, #12]
 8104d32:	2200      	movs	r2, #0
 8104d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8104d38:	68fb      	ldr	r3, [r7, #12]
 8104d3a:	2200      	movs	r2, #0
 8104d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8104d40:	68fb      	ldr	r3, [r7, #12]
 8104d42:	2200      	movs	r2, #0
 8104d44:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8104d46:	68fb      	ldr	r3, [r7, #12]
 8104d48:	2200      	movs	r2, #0
 8104d4a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104d4c:	68fb      	ldr	r3, [r7, #12]
 8104d4e:	689b      	ldr	r3, [r3, #8]
 8104d50:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8104d54:	d107      	bne.n	8104d66 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8104d56:	68fb      	ldr	r3, [r7, #12]
 8104d58:	681b      	ldr	r3, [r3, #0]
 8104d5a:	681a      	ldr	r2, [r3, #0]
 8104d5c:	68fb      	ldr	r3, [r7, #12]
 8104d5e:	681b      	ldr	r3, [r3, #0]
 8104d60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8104d64:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104d66:	68fb      	ldr	r3, [r7, #12]
 8104d68:	681b      	ldr	r3, [r3, #0]
 8104d6a:	685b      	ldr	r3, [r3, #4]
 8104d6c:	0c1b      	lsrs	r3, r3, #16
 8104d6e:	041b      	lsls	r3, r3, #16
 8104d70:	88f9      	ldrh	r1, [r7, #6]
 8104d72:	68fa      	ldr	r2, [r7, #12]
 8104d74:	6812      	ldr	r2, [r2, #0]
 8104d76:	430b      	orrs	r3, r1
 8104d78:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104d7a:	68fb      	ldr	r3, [r7, #12]
 8104d7c:	681b      	ldr	r3, [r3, #0]
 8104d7e:	681a      	ldr	r2, [r3, #0]
 8104d80:	68fb      	ldr	r3, [r7, #12]
 8104d82:	681b      	ldr	r3, [r3, #0]
 8104d84:	f042 0201 	orr.w	r2, r2, #1
 8104d88:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	685b      	ldr	r3, [r3, #4]
 8104d8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104d92:	d107      	bne.n	8104da4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104d94:	68fb      	ldr	r3, [r7, #12]
 8104d96:	681b      	ldr	r3, [r3, #0]
 8104d98:	681a      	ldr	r2, [r3, #0]
 8104d9a:	68fb      	ldr	r3, [r7, #12]
 8104d9c:	681b      	ldr	r3, [r3, #0]
 8104d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8104da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104da4:	68fb      	ldr	r3, [r7, #12]
 8104da6:	68db      	ldr	r3, [r3, #12]
 8104da8:	2b0f      	cmp	r3, #15
 8104daa:	d947      	bls.n	8104e3c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8104dac:	e03f      	b.n	8104e2e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104dae:	68fb      	ldr	r3, [r7, #12]
 8104db0:	681b      	ldr	r3, [r3, #0]
 8104db2:	695b      	ldr	r3, [r3, #20]
 8104db4:	f003 0302 	and.w	r3, r3, #2
 8104db8:	2b02      	cmp	r3, #2
 8104dba:	d114      	bne.n	8104de6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104dbc:	68fb      	ldr	r3, [r7, #12]
 8104dbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104dc0:	68fb      	ldr	r3, [r7, #12]
 8104dc2:	681b      	ldr	r3, [r3, #0]
 8104dc4:	6812      	ldr	r2, [r2, #0]
 8104dc6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8104dc8:	68fb      	ldr	r3, [r7, #12]
 8104dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104dcc:	1d1a      	adds	r2, r3, #4
 8104dce:	68fb      	ldr	r3, [r7, #12]
 8104dd0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8104dd2:	68fb      	ldr	r3, [r7, #12]
 8104dd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104dd8:	b29b      	uxth	r3, r3
 8104dda:	3b01      	subs	r3, #1
 8104ddc:	b29a      	uxth	r2, r3
 8104dde:	68fb      	ldr	r3, [r7, #12]
 8104de0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104de4:	e023      	b.n	8104e2e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104de6:	f7fd fd43 	bl	8102870 <HAL_GetTick>
 8104dea:	4602      	mov	r2, r0
 8104dec:	697b      	ldr	r3, [r7, #20]
 8104dee:	1ad3      	subs	r3, r2, r3
 8104df0:	683a      	ldr	r2, [r7, #0]
 8104df2:	429a      	cmp	r2, r3
 8104df4:	d803      	bhi.n	8104dfe <HAL_SPI_Transmit+0x16a>
 8104df6:	683b      	ldr	r3, [r7, #0]
 8104df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104dfc:	d102      	bne.n	8104e04 <HAL_SPI_Transmit+0x170>
 8104dfe:	683b      	ldr	r3, [r7, #0]
 8104e00:	2b00      	cmp	r3, #0
 8104e02:	d114      	bne.n	8104e2e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104e04:	68f8      	ldr	r0, [r7, #12]
 8104e06:	f000 fe0c 	bl	8105a22 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104e0a:	68fb      	ldr	r3, [r7, #12]
 8104e0c:	2200      	movs	r2, #0
 8104e0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104e12:	68fb      	ldr	r3, [r7, #12]
 8104e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104e18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104e1c:	68fb      	ldr	r3, [r7, #12]
 8104e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104e22:	68fb      	ldr	r3, [r7, #12]
 8104e24:	2201      	movs	r2, #1
 8104e26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104e2a:	2303      	movs	r3, #3
 8104e2c:	e11c      	b.n	8105068 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104e2e:	68fb      	ldr	r3, [r7, #12]
 8104e30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104e34:	b29b      	uxth	r3, r3
 8104e36:	2b00      	cmp	r3, #0
 8104e38:	d1b9      	bne.n	8104dae <HAL_SPI_Transmit+0x11a>
 8104e3a:	e0ef      	b.n	810501c <HAL_SPI_Transmit+0x388>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104e3c:	68fb      	ldr	r3, [r7, #12]
 8104e3e:	68db      	ldr	r3, [r3, #12]
 8104e40:	2b07      	cmp	r3, #7
 8104e42:	f240 80e4 	bls.w	810500e <HAL_SPI_Transmit+0x37a>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8104e46:	e05d      	b.n	8104f04 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104e48:	68fb      	ldr	r3, [r7, #12]
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	695b      	ldr	r3, [r3, #20]
 8104e4e:	f003 0302 	and.w	r3, r3, #2
 8104e52:	2b02      	cmp	r3, #2
 8104e54:	d132      	bne.n	8104ebc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104e56:	68fb      	ldr	r3, [r7, #12]
 8104e58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104e5c:	b29b      	uxth	r3, r3
 8104e5e:	2b01      	cmp	r3, #1
 8104e60:	d918      	bls.n	8104e94 <HAL_SPI_Transmit+0x200>
 8104e62:	68fb      	ldr	r3, [r7, #12]
 8104e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104e66:	2b00      	cmp	r3, #0
 8104e68:	d014      	beq.n	8104e94 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104e6a:	68fb      	ldr	r3, [r7, #12]
 8104e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104e6e:	68fb      	ldr	r3, [r7, #12]
 8104e70:	681b      	ldr	r3, [r3, #0]
 8104e72:	6812      	ldr	r2, [r2, #0]
 8104e74:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104e76:	68fb      	ldr	r3, [r7, #12]
 8104e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e7a:	1d1a      	adds	r2, r3, #4
 8104e7c:	68fb      	ldr	r3, [r7, #12]
 8104e7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104e80:	68fb      	ldr	r3, [r7, #12]
 8104e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104e86:	b29b      	uxth	r3, r3
 8104e88:	3b02      	subs	r3, #2
 8104e8a:	b29a      	uxth	r2, r3
 8104e8c:	68fb      	ldr	r3, [r7, #12]
 8104e8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104e92:	e037      	b.n	8104f04 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104e94:	68fb      	ldr	r3, [r7, #12]
 8104e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e98:	881a      	ldrh	r2, [r3, #0]
 8104e9a:	69fb      	ldr	r3, [r7, #28]
 8104e9c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104ea2:	1c9a      	adds	r2, r3, #2
 8104ea4:	68fb      	ldr	r3, [r7, #12]
 8104ea6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104ea8:	68fb      	ldr	r3, [r7, #12]
 8104eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104eae:	b29b      	uxth	r3, r3
 8104eb0:	3b01      	subs	r3, #1
 8104eb2:	b29a      	uxth	r2, r3
 8104eb4:	68fb      	ldr	r3, [r7, #12]
 8104eb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104eba:	e023      	b.n	8104f04 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104ebc:	f7fd fcd8 	bl	8102870 <HAL_GetTick>
 8104ec0:	4602      	mov	r2, r0
 8104ec2:	697b      	ldr	r3, [r7, #20]
 8104ec4:	1ad3      	subs	r3, r2, r3
 8104ec6:	683a      	ldr	r2, [r7, #0]
 8104ec8:	429a      	cmp	r2, r3
 8104eca:	d803      	bhi.n	8104ed4 <HAL_SPI_Transmit+0x240>
 8104ecc:	683b      	ldr	r3, [r7, #0]
 8104ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104ed2:	d102      	bne.n	8104eda <HAL_SPI_Transmit+0x246>
 8104ed4:	683b      	ldr	r3, [r7, #0]
 8104ed6:	2b00      	cmp	r3, #0
 8104ed8:	d114      	bne.n	8104f04 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104eda:	68f8      	ldr	r0, [r7, #12]
 8104edc:	f000 fda1 	bl	8105a22 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104ee0:	68fb      	ldr	r3, [r7, #12]
 8104ee2:	2200      	movs	r2, #0
 8104ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104ee8:	68fb      	ldr	r3, [r7, #12]
 8104eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104eee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104ef2:	68fb      	ldr	r3, [r7, #12]
 8104ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104ef8:	68fb      	ldr	r3, [r7, #12]
 8104efa:	2201      	movs	r2, #1
 8104efc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8104f00:	2303      	movs	r3, #3
 8104f02:	e0b1      	b.n	8105068 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 8104f04:	68fb      	ldr	r3, [r7, #12]
 8104f06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f0a:	b29b      	uxth	r3, r3
 8104f0c:	2b00      	cmp	r3, #0
 8104f0e:	d19b      	bne.n	8104e48 <HAL_SPI_Transmit+0x1b4>
 8104f10:	e084      	b.n	810501c <HAL_SPI_Transmit+0x388>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104f12:	68fb      	ldr	r3, [r7, #12]
 8104f14:	681b      	ldr	r3, [r3, #0]
 8104f16:	695b      	ldr	r3, [r3, #20]
 8104f18:	f003 0302 	and.w	r3, r3, #2
 8104f1c:	2b02      	cmp	r3, #2
 8104f1e:	d152      	bne.n	8104fc6 <HAL_SPI_Transmit+0x332>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8104f20:	68fb      	ldr	r3, [r7, #12]
 8104f22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f26:	b29b      	uxth	r3, r3
 8104f28:	2b03      	cmp	r3, #3
 8104f2a:	d918      	bls.n	8104f5e <HAL_SPI_Transmit+0x2ca>
 8104f2c:	68fb      	ldr	r3, [r7, #12]
 8104f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104f30:	2b40      	cmp	r3, #64	; 0x40
 8104f32:	d914      	bls.n	8104f5e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8104f34:	68fb      	ldr	r3, [r7, #12]
 8104f36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104f38:	68fb      	ldr	r3, [r7, #12]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	6812      	ldr	r2, [r2, #0]
 8104f3e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104f40:	68fb      	ldr	r3, [r7, #12]
 8104f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f44:	1d1a      	adds	r2, r3, #4
 8104f46:	68fb      	ldr	r3, [r7, #12]
 8104f48:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8104f4a:	68fb      	ldr	r3, [r7, #12]
 8104f4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f50:	b29b      	uxth	r3, r3
 8104f52:	3b04      	subs	r3, #4
 8104f54:	b29a      	uxth	r2, r3
 8104f56:	68fb      	ldr	r3, [r7, #12]
 8104f58:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104f5c:	e057      	b.n	810500e <HAL_SPI_Transmit+0x37a>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104f5e:	68fb      	ldr	r3, [r7, #12]
 8104f60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f64:	b29b      	uxth	r3, r3
 8104f66:	2b01      	cmp	r3, #1
 8104f68:	d917      	bls.n	8104f9a <HAL_SPI_Transmit+0x306>
 8104f6a:	68fb      	ldr	r3, [r7, #12]
 8104f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104f6e:	2b00      	cmp	r3, #0
 8104f70:	d013      	beq.n	8104f9a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8104f72:	68fb      	ldr	r3, [r7, #12]
 8104f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f76:	881a      	ldrh	r2, [r3, #0]
 8104f78:	69fb      	ldr	r3, [r7, #28]
 8104f7a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104f7c:	68fb      	ldr	r3, [r7, #12]
 8104f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104f80:	1c9a      	adds	r2, r3, #2
 8104f82:	68fb      	ldr	r3, [r7, #12]
 8104f84:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104f86:	68fb      	ldr	r3, [r7, #12]
 8104f88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104f8c:	b29b      	uxth	r3, r3
 8104f8e:	3b02      	subs	r3, #2
 8104f90:	b29a      	uxth	r2, r3
 8104f92:	68fb      	ldr	r3, [r7, #12]
 8104f94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104f98:	e039      	b.n	810500e <HAL_SPI_Transmit+0x37a>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8104f9a:	68fb      	ldr	r3, [r7, #12]
 8104f9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8104f9e:	68fb      	ldr	r3, [r7, #12]
 8104fa0:	681b      	ldr	r3, [r3, #0]
 8104fa2:	3320      	adds	r3, #32
 8104fa4:	7812      	ldrb	r2, [r2, #0]
 8104fa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104fa8:	68fb      	ldr	r3, [r7, #12]
 8104faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104fac:	1c5a      	adds	r2, r3, #1
 8104fae:	68fb      	ldr	r3, [r7, #12]
 8104fb0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8104fb2:	68fb      	ldr	r3, [r7, #12]
 8104fb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8104fb8:	b29b      	uxth	r3, r3
 8104fba:	3b01      	subs	r3, #1
 8104fbc:	b29a      	uxth	r2, r3
 8104fbe:	68fb      	ldr	r3, [r7, #12]
 8104fc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8104fc4:	e023      	b.n	810500e <HAL_SPI_Transmit+0x37a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104fc6:	f7fd fc53 	bl	8102870 <HAL_GetTick>
 8104fca:	4602      	mov	r2, r0
 8104fcc:	697b      	ldr	r3, [r7, #20]
 8104fce:	1ad3      	subs	r3, r2, r3
 8104fd0:	683a      	ldr	r2, [r7, #0]
 8104fd2:	429a      	cmp	r2, r3
 8104fd4:	d803      	bhi.n	8104fde <HAL_SPI_Transmit+0x34a>
 8104fd6:	683b      	ldr	r3, [r7, #0]
 8104fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104fdc:	d102      	bne.n	8104fe4 <HAL_SPI_Transmit+0x350>
 8104fde:	683b      	ldr	r3, [r7, #0]
 8104fe0:	2b00      	cmp	r3, #0
 8104fe2:	d114      	bne.n	810500e <HAL_SPI_Transmit+0x37a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104fe4:	68f8      	ldr	r0, [r7, #12]
 8104fe6:	f000 fd1c 	bl	8105a22 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104fea:	68fb      	ldr	r3, [r7, #12]
 8104fec:	2200      	movs	r2, #0
 8104fee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104ff2:	68fb      	ldr	r3, [r7, #12]
 8104ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104ff8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8104ffc:	68fb      	ldr	r3, [r7, #12]
 8104ffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105002:	68fb      	ldr	r3, [r7, #12]
 8105004:	2201      	movs	r2, #1
 8105006:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810500a:	2303      	movs	r3, #3
 810500c:	e02c      	b.n	8105068 <HAL_SPI_Transmit+0x3d4>
    while (hspi->TxXferCount > 0UL)
 810500e:	68fb      	ldr	r3, [r7, #12]
 8105010:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105014:	b29b      	uxth	r3, r3
 8105016:	2b00      	cmp	r3, #0
 8105018:	f47f af7b 	bne.w	8104f12 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 810501c:	683b      	ldr	r3, [r7, #0]
 810501e:	9300      	str	r3, [sp, #0]
 8105020:	697b      	ldr	r3, [r7, #20]
 8105022:	2200      	movs	r2, #0
 8105024:	2108      	movs	r1, #8
 8105026:	68f8      	ldr	r0, [r7, #12]
 8105028:	f000 fd9b 	bl	8105b62 <SPI_WaitOnFlagUntilTimeout>
 810502c:	4603      	mov	r3, r0
 810502e:	2b00      	cmp	r3, #0
 8105030:	d007      	beq.n	8105042 <HAL_SPI_Transmit+0x3ae>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8105032:	68fb      	ldr	r3, [r7, #12]
 8105034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105038:	f043 0220 	orr.w	r2, r3, #32
 810503c:	68fb      	ldr	r3, [r7, #12]
 810503e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105042:	68f8      	ldr	r0, [r7, #12]
 8105044:	f000 fced 	bl	8105a22 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105048:	68fb      	ldr	r3, [r7, #12]
 810504a:	2200      	movs	r2, #0
 810504c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105050:	68fb      	ldr	r3, [r7, #12]
 8105052:	2201      	movs	r2, #1
 8105054:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105058:	68fb      	ldr	r3, [r7, #12]
 810505a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810505e:	2b00      	cmp	r3, #0
 8105060:	d001      	beq.n	8105066 <HAL_SPI_Transmit+0x3d2>
  {
    return HAL_ERROR;
 8105062:	2301      	movs	r3, #1
 8105064:	e000      	b.n	8105068 <HAL_SPI_Transmit+0x3d4>
  }
  return errorcode;
 8105066:	7efb      	ldrb	r3, [r7, #27]
}
 8105068:	4618      	mov	r0, r3
 810506a:	3720      	adds	r7, #32
 810506c:	46bd      	mov	sp, r7
 810506e:	bd80      	pop	{r7, pc}

08105070 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105070:	b580      	push	{r7, lr}
 8105072:	b08a      	sub	sp, #40	; 0x28
 8105074:	af02      	add	r7, sp, #8
 8105076:	60f8      	str	r0, [r7, #12]
 8105078:	60b9      	str	r1, [r7, #8]
 810507a:	603b      	str	r3, [r7, #0]
 810507c:	4613      	mov	r3, r2
 810507e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8105080:	2300      	movs	r3, #0
 8105082:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8105084:	68fb      	ldr	r3, [r7, #12]
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	3330      	adds	r3, #48	; 0x30
 810508a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 810508c:	68fb      	ldr	r3, [r7, #12]
 810508e:	685b      	ldr	r3, [r3, #4]
 8105090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8105094:	d112      	bne.n	81050bc <HAL_SPI_Receive+0x4c>
 8105096:	68fb      	ldr	r3, [r7, #12]
 8105098:	689b      	ldr	r3, [r3, #8]
 810509a:	2b00      	cmp	r3, #0
 810509c:	d10e      	bne.n	81050bc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 810509e:	68fb      	ldr	r3, [r7, #12]
 81050a0:	2204      	movs	r2, #4
 81050a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 81050a6:	88fa      	ldrh	r2, [r7, #6]
 81050a8:	683b      	ldr	r3, [r7, #0]
 81050aa:	9300      	str	r3, [sp, #0]
 81050ac:	4613      	mov	r3, r2
 81050ae:	68ba      	ldr	r2, [r7, #8]
 81050b0:	68b9      	ldr	r1, [r7, #8]
 81050b2:	68f8      	ldr	r0, [r7, #12]
 81050b4:	f000 f9cc 	bl	8105450 <HAL_SPI_TransmitReceive>
 81050b8:	4603      	mov	r3, r0
 81050ba:	e1c5      	b.n	8105448 <HAL_SPI_Receive+0x3d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 81050bc:	68fb      	ldr	r3, [r7, #12]
 81050be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 81050c2:	2b01      	cmp	r3, #1
 81050c4:	d101      	bne.n	81050ca <HAL_SPI_Receive+0x5a>
 81050c6:	2302      	movs	r3, #2
 81050c8:	e1be      	b.n	8105448 <HAL_SPI_Receive+0x3d8>
 81050ca:	68fb      	ldr	r3, [r7, #12]
 81050cc:	2201      	movs	r2, #1
 81050ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81050d2:	f7fd fbcd 	bl	8102870 <HAL_GetTick>
 81050d6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 81050d8:	68fb      	ldr	r3, [r7, #12]
 81050da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 81050de:	b2db      	uxtb	r3, r3
 81050e0:	2b01      	cmp	r3, #1
 81050e2:	d007      	beq.n	81050f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 81050e4:	2302      	movs	r3, #2
 81050e6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 81050e8:	68fb      	ldr	r3, [r7, #12]
 81050ea:	2200      	movs	r2, #0
 81050ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81050f0:	7ffb      	ldrb	r3, [r7, #31]
 81050f2:	e1a9      	b.n	8105448 <HAL_SPI_Receive+0x3d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 81050f4:	68bb      	ldr	r3, [r7, #8]
 81050f6:	2b00      	cmp	r3, #0
 81050f8:	d002      	beq.n	8105100 <HAL_SPI_Receive+0x90>
 81050fa:	88fb      	ldrh	r3, [r7, #6]
 81050fc:	2b00      	cmp	r3, #0
 81050fe:	d107      	bne.n	8105110 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8105100:	2301      	movs	r3, #1
 8105102:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8105104:	68fb      	ldr	r3, [r7, #12]
 8105106:	2200      	movs	r2, #0
 8105108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 810510c:	7ffb      	ldrb	r3, [r7, #31]
 810510e:	e19b      	b.n	8105448 <HAL_SPI_Receive+0x3d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8105110:	68fb      	ldr	r3, [r7, #12]
 8105112:	2204      	movs	r2, #4
 8105114:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105118:	68fb      	ldr	r3, [r7, #12]
 810511a:	2200      	movs	r2, #0
 810511c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	68ba      	ldr	r2, [r7, #8]
 8105124:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8105126:	68fb      	ldr	r3, [r7, #12]
 8105128:	88fa      	ldrh	r2, [r7, #6]
 810512a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 810512e:	68fb      	ldr	r3, [r7, #12]
 8105130:	88fa      	ldrh	r2, [r7, #6]
 8105132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8105136:	68fb      	ldr	r3, [r7, #12]
 8105138:	2200      	movs	r2, #0
 810513a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 810513c:	68fb      	ldr	r3, [r7, #12]
 810513e:	2200      	movs	r2, #0
 8105140:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8105144:	68fb      	ldr	r3, [r7, #12]
 8105146:	2200      	movs	r2, #0
 8105148:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	2200      	movs	r2, #0
 8105150:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8105152:	68fb      	ldr	r3, [r7, #12]
 8105154:	2200      	movs	r2, #0
 8105156:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8105158:	68fb      	ldr	r3, [r7, #12]
 810515a:	689b      	ldr	r3, [r3, #8]
 810515c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8105160:	d107      	bne.n	8105172 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8105162:	68fb      	ldr	r3, [r7, #12]
 8105164:	681b      	ldr	r3, [r3, #0]
 8105166:	681a      	ldr	r2, [r3, #0]
 8105168:	68fb      	ldr	r3, [r7, #12]
 810516a:	681b      	ldr	r3, [r3, #0]
 810516c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8105170:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105172:	68fb      	ldr	r3, [r7, #12]
 8105174:	681b      	ldr	r3, [r3, #0]
 8105176:	685b      	ldr	r3, [r3, #4]
 8105178:	0c1b      	lsrs	r3, r3, #16
 810517a:	041b      	lsls	r3, r3, #16
 810517c:	88f9      	ldrh	r1, [r7, #6]
 810517e:	68fa      	ldr	r2, [r7, #12]
 8105180:	6812      	ldr	r2, [r2, #0]
 8105182:	430b      	orrs	r3, r1
 8105184:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8105186:	68fb      	ldr	r3, [r7, #12]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	681a      	ldr	r2, [r3, #0]
 810518c:	68fb      	ldr	r3, [r7, #12]
 810518e:	681b      	ldr	r3, [r3, #0]
 8105190:	f042 0201 	orr.w	r2, r2, #1
 8105194:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8105196:	68fb      	ldr	r3, [r7, #12]
 8105198:	685b      	ldr	r3, [r3, #4]
 810519a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810519e:	d107      	bne.n	81051b0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81051a0:	68fb      	ldr	r3, [r7, #12]
 81051a2:	681b      	ldr	r3, [r3, #0]
 81051a4:	681a      	ldr	r2, [r3, #0]
 81051a6:	68fb      	ldr	r3, [r7, #12]
 81051a8:	681b      	ldr	r3, [r3, #0]
 81051aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 81051ae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81051b0:	68fb      	ldr	r3, [r7, #12]
 81051b2:	68db      	ldr	r3, [r3, #12]
 81051b4:	2b0f      	cmp	r3, #15
 81051b6:	d948      	bls.n	810524a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 81051b8:	e040      	b.n	810523c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 81051ba:	68fb      	ldr	r3, [r7, #12]
 81051bc:	681b      	ldr	r3, [r3, #0]
 81051be:	695a      	ldr	r2, [r3, #20]
 81051c0:	f248 0308 	movw	r3, #32776	; 0x8008
 81051c4:	4013      	ands	r3, r2
 81051c6:	2b00      	cmp	r3, #0
 81051c8:	d014      	beq.n	81051f4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81051ca:	68fb      	ldr	r3, [r7, #12]
 81051cc:	681a      	ldr	r2, [r3, #0]
 81051ce:	68fb      	ldr	r3, [r7, #12]
 81051d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81051d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81051d4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81051d6:	68fb      	ldr	r3, [r7, #12]
 81051d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81051da:	1d1a      	adds	r2, r3, #4
 81051dc:	68fb      	ldr	r3, [r7, #12]
 81051de:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 81051e0:	68fb      	ldr	r3, [r7, #12]
 81051e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81051e6:	b29b      	uxth	r3, r3
 81051e8:	3b01      	subs	r3, #1
 81051ea:	b29a      	uxth	r2, r3
 81051ec:	68fb      	ldr	r3, [r7, #12]
 81051ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81051f2:	e023      	b.n	810523c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81051f4:	f7fd fb3c 	bl	8102870 <HAL_GetTick>
 81051f8:	4602      	mov	r2, r0
 81051fa:	697b      	ldr	r3, [r7, #20]
 81051fc:	1ad3      	subs	r3, r2, r3
 81051fe:	683a      	ldr	r2, [r7, #0]
 8105200:	429a      	cmp	r2, r3
 8105202:	d803      	bhi.n	810520c <HAL_SPI_Receive+0x19c>
 8105204:	683b      	ldr	r3, [r7, #0]
 8105206:	f1b3 3fff 	cmp.w	r3, #4294967295
 810520a:	d102      	bne.n	8105212 <HAL_SPI_Receive+0x1a2>
 810520c:	683b      	ldr	r3, [r7, #0]
 810520e:	2b00      	cmp	r3, #0
 8105210:	d114      	bne.n	810523c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8105212:	68f8      	ldr	r0, [r7, #12]
 8105214:	f000 fc05 	bl	8105a22 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8105218:	68fb      	ldr	r3, [r7, #12]
 810521a:	2200      	movs	r2, #0
 810521c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105220:	68fb      	ldr	r3, [r7, #12]
 8105222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105226:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 810522a:	68fb      	ldr	r3, [r7, #12]
 810522c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105230:	68fb      	ldr	r3, [r7, #12]
 8105232:	2201      	movs	r2, #1
 8105234:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105238:	2303      	movs	r3, #3
 810523a:	e105      	b.n	8105448 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810523c:	68fb      	ldr	r3, [r7, #12]
 810523e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105242:	b29b      	uxth	r3, r3
 8105244:	2b00      	cmp	r3, #0
 8105246:	d1b8      	bne.n	81051ba <HAL_SPI_Receive+0x14a>
 8105248:	e0eb      	b.n	8105422 <HAL_SPI_Receive+0x3b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 810524a:	68fb      	ldr	r3, [r7, #12]
 810524c:	68db      	ldr	r3, [r3, #12]
 810524e:	2b07      	cmp	r3, #7
 8105250:	f240 80e0 	bls.w	8105414 <HAL_SPI_Receive+0x3a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8105254:	e05b      	b.n	810530e <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8105256:	68fb      	ldr	r3, [r7, #12]
 8105258:	681b      	ldr	r3, [r3, #0]
 810525a:	695b      	ldr	r3, [r3, #20]
 810525c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105260:	2b00      	cmp	r3, #0
 8105262:	d030      	beq.n	81052c6 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8105264:	68fb      	ldr	r3, [r7, #12]
 8105266:	681b      	ldr	r3, [r3, #0]
 8105268:	695b      	ldr	r3, [r3, #20]
 810526a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810526e:	2b00      	cmp	r3, #0
 8105270:	d014      	beq.n	810529c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105272:	68fb      	ldr	r3, [r7, #12]
 8105274:	681a      	ldr	r2, [r3, #0]
 8105276:	68fb      	ldr	r3, [r7, #12]
 8105278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810527a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 810527c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 810527e:	68fb      	ldr	r3, [r7, #12]
 8105280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105282:	1d1a      	adds	r2, r3, #4
 8105284:	68fb      	ldr	r3, [r7, #12]
 8105286:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105288:	68fb      	ldr	r3, [r7, #12]
 810528a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810528e:	b29b      	uxth	r3, r3
 8105290:	3b02      	subs	r3, #2
 8105292:	b29a      	uxth	r2, r3
 8105294:	68fb      	ldr	r3, [r7, #12]
 8105296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810529a:	e038      	b.n	810530e <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810529c:	68fb      	ldr	r3, [r7, #12]
 810529e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81052a0:	69ba      	ldr	r2, [r7, #24]
 81052a2:	8812      	ldrh	r2, [r2, #0]
 81052a4:	b292      	uxth	r2, r2
 81052a6:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 81052a8:	68fb      	ldr	r3, [r7, #12]
 81052aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81052ac:	1c9a      	adds	r2, r3, #2
 81052ae:	68fb      	ldr	r3, [r7, #12]
 81052b0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81052b2:	68fb      	ldr	r3, [r7, #12]
 81052b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81052b8:	b29b      	uxth	r3, r3
 81052ba:	3b01      	subs	r3, #1
 81052bc:	b29a      	uxth	r2, r3
 81052be:	68fb      	ldr	r3, [r7, #12]
 81052c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81052c4:	e023      	b.n	810530e <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81052c6:	f7fd fad3 	bl	8102870 <HAL_GetTick>
 81052ca:	4602      	mov	r2, r0
 81052cc:	697b      	ldr	r3, [r7, #20]
 81052ce:	1ad3      	subs	r3, r2, r3
 81052d0:	683a      	ldr	r2, [r7, #0]
 81052d2:	429a      	cmp	r2, r3
 81052d4:	d803      	bhi.n	81052de <HAL_SPI_Receive+0x26e>
 81052d6:	683b      	ldr	r3, [r7, #0]
 81052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81052dc:	d102      	bne.n	81052e4 <HAL_SPI_Receive+0x274>
 81052de:	683b      	ldr	r3, [r7, #0]
 81052e0:	2b00      	cmp	r3, #0
 81052e2:	d114      	bne.n	810530e <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81052e4:	68f8      	ldr	r0, [r7, #12]
 81052e6:	f000 fb9c 	bl	8105a22 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81052ea:	68fb      	ldr	r3, [r7, #12]
 81052ec:	2200      	movs	r2, #0
 81052ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81052f2:	68fb      	ldr	r3, [r7, #12]
 81052f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81052f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81052fc:	68fb      	ldr	r3, [r7, #12]
 81052fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105302:	68fb      	ldr	r3, [r7, #12]
 8105304:	2201      	movs	r2, #1
 8105306:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 810530a:	2303      	movs	r3, #3
 810530c:	e09c      	b.n	8105448 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105314:	b29b      	uxth	r3, r3
 8105316:	2b00      	cmp	r3, #0
 8105318:	d19d      	bne.n	8105256 <HAL_SPI_Receive+0x1e6>
 810531a:	e082      	b.n	8105422 <HAL_SPI_Receive+0x3b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 810531c:	68fb      	ldr	r3, [r7, #12]
 810531e:	681b      	ldr	r3, [r3, #0]
 8105320:	695b      	ldr	r3, [r3, #20]
 8105322:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105326:	2b00      	cmp	r3, #0
 8105328:	d050      	beq.n	81053cc <HAL_SPI_Receive+0x35c>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810532a:	68fb      	ldr	r3, [r7, #12]
 810532c:	681b      	ldr	r3, [r3, #0]
 810532e:	695b      	ldr	r3, [r3, #20]
 8105330:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105334:	2b00      	cmp	r3, #0
 8105336:	d014      	beq.n	8105362 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105338:	68fb      	ldr	r3, [r7, #12]
 810533a:	681a      	ldr	r2, [r3, #0]
 810533c:	68fb      	ldr	r3, [r7, #12]
 810533e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105340:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105342:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105344:	68fb      	ldr	r3, [r7, #12]
 8105346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105348:	1d1a      	adds	r2, r3, #4
 810534a:	68fb      	ldr	r3, [r7, #12]
 810534c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 810534e:	68fb      	ldr	r3, [r7, #12]
 8105350:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105354:	b29b      	uxth	r3, r3
 8105356:	3b04      	subs	r3, #4
 8105358:	b29a      	uxth	r2, r3
 810535a:	68fb      	ldr	r3, [r7, #12]
 810535c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8105360:	e058      	b.n	8105414 <HAL_SPI_Receive+0x3a4>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8105362:	68fb      	ldr	r3, [r7, #12]
 8105364:	681b      	ldr	r3, [r3, #0]
 8105366:	695b      	ldr	r3, [r3, #20]
 8105368:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 810536c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105370:	d914      	bls.n	810539c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8105372:	68fb      	ldr	r3, [r7, #12]
 8105374:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105376:	69ba      	ldr	r2, [r7, #24]
 8105378:	8812      	ldrh	r2, [r2, #0]
 810537a:	b292      	uxth	r2, r2
 810537c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 810537e:	68fb      	ldr	r3, [r7, #12]
 8105380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105382:	1c9a      	adds	r2, r3, #2
 8105384:	68fb      	ldr	r3, [r7, #12]
 8105386:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105388:	68fb      	ldr	r3, [r7, #12]
 810538a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810538e:	b29b      	uxth	r3, r3
 8105390:	3b02      	subs	r3, #2
 8105392:	b29a      	uxth	r2, r3
 8105394:	68fb      	ldr	r3, [r7, #12]
 8105396:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 810539a:	e03b      	b.n	8105414 <HAL_SPI_Receive+0x3a4>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810539c:	68fb      	ldr	r3, [r7, #12]
 810539e:	681b      	ldr	r3, [r3, #0]
 81053a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 81053a4:	68fb      	ldr	r3, [r7, #12]
 81053a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81053a8:	7812      	ldrb	r2, [r2, #0]
 81053aa:	b2d2      	uxtb	r2, r2
 81053ac:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 81053ae:	68fb      	ldr	r3, [r7, #12]
 81053b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81053b2:	1c5a      	adds	r2, r3, #1
 81053b4:	68fb      	ldr	r3, [r7, #12]
 81053b6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 81053b8:	68fb      	ldr	r3, [r7, #12]
 81053ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81053be:	b29b      	uxth	r3, r3
 81053c0:	3b01      	subs	r3, #1
 81053c2:	b29a      	uxth	r2, r3
 81053c4:	68fb      	ldr	r3, [r7, #12]
 81053c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 81053ca:	e023      	b.n	8105414 <HAL_SPI_Receive+0x3a4>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81053cc:	f7fd fa50 	bl	8102870 <HAL_GetTick>
 81053d0:	4602      	mov	r2, r0
 81053d2:	697b      	ldr	r3, [r7, #20]
 81053d4:	1ad3      	subs	r3, r2, r3
 81053d6:	683a      	ldr	r2, [r7, #0]
 81053d8:	429a      	cmp	r2, r3
 81053da:	d803      	bhi.n	81053e4 <HAL_SPI_Receive+0x374>
 81053dc:	683b      	ldr	r3, [r7, #0]
 81053de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81053e2:	d102      	bne.n	81053ea <HAL_SPI_Receive+0x37a>
 81053e4:	683b      	ldr	r3, [r7, #0]
 81053e6:	2b00      	cmp	r3, #0
 81053e8:	d114      	bne.n	8105414 <HAL_SPI_Receive+0x3a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81053ea:	68f8      	ldr	r0, [r7, #12]
 81053ec:	f000 fb19 	bl	8105a22 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 81053f0:	68fb      	ldr	r3, [r7, #12]
 81053f2:	2200      	movs	r2, #0
 81053f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81053f8:	68fb      	ldr	r3, [r7, #12]
 81053fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81053fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105402:	68fb      	ldr	r3, [r7, #12]
 8105404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105408:	68fb      	ldr	r3, [r7, #12]
 810540a:	2201      	movs	r2, #1
 810540c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8105410:	2303      	movs	r3, #3
 8105412:	e019      	b.n	8105448 <HAL_SPI_Receive+0x3d8>
    while (hspi->RxXferCount > 0UL)
 8105414:	68fb      	ldr	r3, [r7, #12]
 8105416:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810541a:	b29b      	uxth	r3, r3
 810541c:	2b00      	cmp	r3, #0
 810541e:	f47f af7d 	bne.w	810531c <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105422:	68f8      	ldr	r0, [r7, #12]
 8105424:	f000 fafd 	bl	8105a22 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105428:	68fb      	ldr	r3, [r7, #12]
 810542a:	2200      	movs	r2, #0
 810542c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105430:	68fb      	ldr	r3, [r7, #12]
 8105432:	2201      	movs	r2, #1
 8105434:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105438:	68fb      	ldr	r3, [r7, #12]
 810543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810543e:	2b00      	cmp	r3, #0
 8105440:	d001      	beq.n	8105446 <HAL_SPI_Receive+0x3d6>
  {
    return HAL_ERROR;
 8105442:	2301      	movs	r3, #1
 8105444:	e000      	b.n	8105448 <HAL_SPI_Receive+0x3d8>
  }
  return errorcode;
 8105446:	7ffb      	ldrb	r3, [r7, #31]
}
 8105448:	4618      	mov	r0, r3
 810544a:	3720      	adds	r7, #32
 810544c:	46bd      	mov	sp, r7
 810544e:	bd80      	pop	{r7, pc}

08105450 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8105450:	b580      	push	{r7, lr}
 8105452:	b08e      	sub	sp, #56	; 0x38
 8105454:	af02      	add	r7, sp, #8
 8105456:	60f8      	str	r0, [r7, #12]
 8105458:	60b9      	str	r1, [r7, #8]
 810545a:	607a      	str	r2, [r7, #4]
 810545c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 810545e:	2300      	movs	r3, #0
 8105460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8105464:	68fb      	ldr	r3, [r7, #12]
 8105466:	681b      	ldr	r3, [r3, #0]
 8105468:	3320      	adds	r3, #32
 810546a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 810546c:	68fb      	ldr	r3, [r7, #12]
 810546e:	681b      	ldr	r3, [r3, #0]
 8105470:	3330      	adds	r3, #48	; 0x30
 8105472:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8105474:	68fb      	ldr	r3, [r7, #12]
 8105476:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 810547a:	2b01      	cmp	r3, #1
 810547c:	d101      	bne.n	8105482 <HAL_SPI_TransmitReceive+0x32>
 810547e:	2302      	movs	r3, #2
 8105480:	e2cb      	b.n	8105a1a <HAL_SPI_TransmitReceive+0x5ca>
 8105482:	68fb      	ldr	r3, [r7, #12]
 8105484:	2201      	movs	r2, #1
 8105486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 810548a:	f7fd f9f1 	bl	8102870 <HAL_GetTick>
 810548e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8105490:	887b      	ldrh	r3, [r7, #2]
 8105492:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8105494:	887b      	ldrh	r3, [r7, #2]
 8105496:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8105498:	68fb      	ldr	r3, [r7, #12]
 810549a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 810549e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 81054a0:	68fb      	ldr	r3, [r7, #12]
 81054a2:	685b      	ldr	r3, [r3, #4]
 81054a4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 81054a6:	7efb      	ldrb	r3, [r7, #27]
 81054a8:	2b01      	cmp	r3, #1
 81054aa:	d014      	beq.n	81054d6 <HAL_SPI_TransmitReceive+0x86>
 81054ac:	697b      	ldr	r3, [r7, #20]
 81054ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81054b2:	d106      	bne.n	81054c2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81054b4:	68fb      	ldr	r3, [r7, #12]
 81054b6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 81054b8:	2b00      	cmp	r3, #0
 81054ba:	d102      	bne.n	81054c2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 81054bc:	7efb      	ldrb	r3, [r7, #27]
 81054be:	2b04      	cmp	r3, #4
 81054c0:	d009      	beq.n	81054d6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 81054c2:	2302      	movs	r3, #2
 81054c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81054c8:	68fb      	ldr	r3, [r7, #12]
 81054ca:	2200      	movs	r2, #0
 81054cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81054d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81054d4:	e2a1      	b.n	8105a1a <HAL_SPI_TransmitReceive+0x5ca>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 81054d6:	68bb      	ldr	r3, [r7, #8]
 81054d8:	2b00      	cmp	r3, #0
 81054da:	d005      	beq.n	81054e8 <HAL_SPI_TransmitReceive+0x98>
 81054dc:	687b      	ldr	r3, [r7, #4]
 81054de:	2b00      	cmp	r3, #0
 81054e0:	d002      	beq.n	81054e8 <HAL_SPI_TransmitReceive+0x98>
 81054e2:	887b      	ldrh	r3, [r7, #2]
 81054e4:	2b00      	cmp	r3, #0
 81054e6:	d109      	bne.n	81054fc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 81054e8:	2301      	movs	r3, #1
 81054ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 81054ee:	68fb      	ldr	r3, [r7, #12]
 81054f0:	2200      	movs	r2, #0
 81054f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 81054f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81054fa:	e28e      	b.n	8105a1a <HAL_SPI_TransmitReceive+0x5ca>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81054fc:	68fb      	ldr	r3, [r7, #12]
 81054fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105502:	b2db      	uxtb	r3, r3
 8105504:	2b04      	cmp	r3, #4
 8105506:	d003      	beq.n	8105510 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8105508:	68fb      	ldr	r3, [r7, #12]
 810550a:	2205      	movs	r2, #5
 810550c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8105510:	68fb      	ldr	r3, [r7, #12]
 8105512:	2200      	movs	r2, #0
 8105514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8105518:	68fb      	ldr	r3, [r7, #12]
 810551a:	687a      	ldr	r2, [r7, #4]
 810551c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 810551e:	68fb      	ldr	r3, [r7, #12]
 8105520:	887a      	ldrh	r2, [r7, #2]
 8105522:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8105526:	68fb      	ldr	r3, [r7, #12]
 8105528:	887a      	ldrh	r2, [r7, #2]
 810552a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 810552e:	68fb      	ldr	r3, [r7, #12]
 8105530:	68ba      	ldr	r2, [r7, #8]
 8105532:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8105534:	68fb      	ldr	r3, [r7, #12]
 8105536:	887a      	ldrh	r2, [r7, #2]
 8105538:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 810553c:	68fb      	ldr	r3, [r7, #12]
 810553e:	887a      	ldrh	r2, [r7, #2]
 8105540:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8105544:	68fb      	ldr	r3, [r7, #12]
 8105546:	2200      	movs	r2, #0
 8105548:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 810554a:	68fb      	ldr	r3, [r7, #12]
 810554c:	2200      	movs	r2, #0
 810554e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8105550:	68fb      	ldr	r3, [r7, #12]
 8105552:	681b      	ldr	r3, [r3, #0]
 8105554:	685b      	ldr	r3, [r3, #4]
 8105556:	0c1b      	lsrs	r3, r3, #16
 8105558:	041b      	lsls	r3, r3, #16
 810555a:	8879      	ldrh	r1, [r7, #2]
 810555c:	68fa      	ldr	r2, [r7, #12]
 810555e:	6812      	ldr	r2, [r2, #0]
 8105560:	430b      	orrs	r3, r1
 8105562:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	681a      	ldr	r2, [r3, #0]
 810556a:	68fb      	ldr	r3, [r7, #12]
 810556c:	681b      	ldr	r3, [r3, #0]
 810556e:	f042 0201 	orr.w	r2, r2, #1
 8105572:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8105574:	68fb      	ldr	r3, [r7, #12]
 8105576:	685b      	ldr	r3, [r3, #4]
 8105578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810557c:	d107      	bne.n	810558e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 810557e:	68fb      	ldr	r3, [r7, #12]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	681a      	ldr	r2, [r3, #0]
 8105584:	68fb      	ldr	r3, [r7, #12]
 8105586:	681b      	ldr	r3, [r3, #0]
 8105588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 810558c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 810558e:	68fb      	ldr	r3, [r7, #12]
 8105590:	68db      	ldr	r3, [r3, #12]
 8105592:	2b0f      	cmp	r3, #15
 8105594:	d970      	bls.n	8105678 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105596:	e068      	b.n	810566a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8105598:	68fb      	ldr	r3, [r7, #12]
 810559a:	681b      	ldr	r3, [r3, #0]
 810559c:	695b      	ldr	r3, [r3, #20]
 810559e:	f003 0302 	and.w	r3, r3, #2
 81055a2:	2b02      	cmp	r3, #2
 81055a4:	d11a      	bne.n	81055dc <HAL_SPI_TransmitReceive+0x18c>
 81055a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81055a8:	2b00      	cmp	r3, #0
 81055aa:	d017      	beq.n	81055dc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81055ac:	68fb      	ldr	r3, [r7, #12]
 81055ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81055b0:	68fb      	ldr	r3, [r7, #12]
 81055b2:	681b      	ldr	r3, [r3, #0]
 81055b4:	6812      	ldr	r2, [r2, #0]
 81055b6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81055b8:	68fb      	ldr	r3, [r7, #12]
 81055ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81055bc:	1d1a      	adds	r2, r3, #4
 81055be:	68fb      	ldr	r3, [r7, #12]
 81055c0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 81055c2:	68fb      	ldr	r3, [r7, #12]
 81055c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81055c8:	b29b      	uxth	r3, r3
 81055ca:	3b01      	subs	r3, #1
 81055cc:	b29a      	uxth	r2, r3
 81055ce:	68fb      	ldr	r3, [r7, #12]
 81055d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 81055d4:	68fb      	ldr	r3, [r7, #12]
 81055d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81055da:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	681b      	ldr	r3, [r3, #0]
 81055e0:	695a      	ldr	r2, [r3, #20]
 81055e2:	f248 0308 	movw	r3, #32776	; 0x8008
 81055e6:	4013      	ands	r3, r2
 81055e8:	2b00      	cmp	r3, #0
 81055ea:	d01a      	beq.n	8105622 <HAL_SPI_TransmitReceive+0x1d2>
 81055ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81055ee:	2b00      	cmp	r3, #0
 81055f0:	d017      	beq.n	8105622 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81055f2:	68fb      	ldr	r3, [r7, #12]
 81055f4:	681a      	ldr	r2, [r3, #0]
 81055f6:	68fb      	ldr	r3, [r7, #12]
 81055f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81055fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81055fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 81055fe:	68fb      	ldr	r3, [r7, #12]
 8105600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105602:	1d1a      	adds	r2, r3, #4
 8105604:	68fb      	ldr	r3, [r7, #12]
 8105606:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810560e:	b29b      	uxth	r3, r3
 8105610:	3b01      	subs	r3, #1
 8105612:	b29a      	uxth	r2, r3
 8105614:	68fb      	ldr	r3, [r7, #12]
 8105616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 810561a:	68fb      	ldr	r3, [r7, #12]
 810561c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105620:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105622:	f7fd f925 	bl	8102870 <HAL_GetTick>
 8105626:	4602      	mov	r2, r0
 8105628:	69fb      	ldr	r3, [r7, #28]
 810562a:	1ad3      	subs	r3, r2, r3
 810562c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810562e:	429a      	cmp	r2, r3
 8105630:	d803      	bhi.n	810563a <HAL_SPI_TransmitReceive+0x1ea>
 8105632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105638:	d102      	bne.n	8105640 <HAL_SPI_TransmitReceive+0x1f0>
 810563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810563c:	2b00      	cmp	r3, #0
 810563e:	d114      	bne.n	810566a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105640:	68f8      	ldr	r0, [r7, #12]
 8105642:	f000 f9ee 	bl	8105a22 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105646:	68fb      	ldr	r3, [r7, #12]
 8105648:	2200      	movs	r2, #0
 810564a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 810564e:	68fb      	ldr	r3, [r7, #12]
 8105650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105654:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8105658:	68fb      	ldr	r3, [r7, #12]
 810565a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 810565e:	68fb      	ldr	r3, [r7, #12]
 8105660:	2201      	movs	r2, #1
 8105662:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8105666:	2303      	movs	r3, #3
 8105668:	e1d7      	b.n	8105a1a <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 810566a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810566c:	2b00      	cmp	r3, #0
 810566e:	d193      	bne.n	8105598 <HAL_SPI_TransmitReceive+0x148>
 8105670:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105672:	2b00      	cmp	r3, #0
 8105674:	d190      	bne.n	8105598 <HAL_SPI_TransmitReceive+0x148>
 8105676:	e1a9      	b.n	81059cc <HAL_SPI_TransmitReceive+0x57c>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8105678:	68fb      	ldr	r3, [r7, #12]
 810567a:	68db      	ldr	r3, [r3, #12]
 810567c:	2b07      	cmp	r3, #7
 810567e:	f240 819d 	bls.w	81059bc <HAL_SPI_TransmitReceive+0x56c>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8105682:	e0a6      	b.n	81057d2 <HAL_SPI_TransmitReceive+0x382>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8105684:	68fb      	ldr	r3, [r7, #12]
 8105686:	681b      	ldr	r3, [r3, #0]
 8105688:	695b      	ldr	r3, [r3, #20]
 810568a:	f003 0302 	and.w	r3, r3, #2
 810568e:	2b02      	cmp	r3, #2
 8105690:	d139      	bne.n	8105706 <HAL_SPI_TransmitReceive+0x2b6>
 8105692:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8105694:	2b00      	cmp	r3, #0
 8105696:	d036      	beq.n	8105706 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105698:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810569a:	2b01      	cmp	r3, #1
 810569c:	d91c      	bls.n	81056d8 <HAL_SPI_TransmitReceive+0x288>
 810569e:	68fb      	ldr	r3, [r7, #12]
 81056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81056a2:	2b00      	cmp	r3, #0
 81056a4:	d018      	beq.n	81056d8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 81056a6:	68fb      	ldr	r3, [r7, #12]
 81056a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 81056aa:	68fb      	ldr	r3, [r7, #12]
 81056ac:	681b      	ldr	r3, [r3, #0]
 81056ae:	6812      	ldr	r2, [r2, #0]
 81056b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 81056b2:	68fb      	ldr	r3, [r7, #12]
 81056b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056b6:	1d1a      	adds	r2, r3, #4
 81056b8:	68fb      	ldr	r3, [r7, #12]
 81056ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 81056bc:	68fb      	ldr	r3, [r7, #12]
 81056be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81056c2:	b29b      	uxth	r3, r3
 81056c4:	3b02      	subs	r3, #2
 81056c6:	b29a      	uxth	r2, r3
 81056c8:	68fb      	ldr	r3, [r7, #12]
 81056ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81056ce:	68fb      	ldr	r3, [r7, #12]
 81056d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81056d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 81056d6:	e016      	b.n	8105706 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 81056d8:	68fb      	ldr	r3, [r7, #12]
 81056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056dc:	881a      	ldrh	r2, [r3, #0]
 81056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81056e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81056e2:	68fb      	ldr	r3, [r7, #12]
 81056e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81056e6:	1c9a      	adds	r2, r3, #2
 81056e8:	68fb      	ldr	r3, [r7, #12]
 81056ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 81056ec:	68fb      	ldr	r3, [r7, #12]
 81056ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81056f2:	b29b      	uxth	r3, r3
 81056f4:	3b01      	subs	r3, #1
 81056f6:	b29a      	uxth	r2, r3
 81056f8:	68fb      	ldr	r3, [r7, #12]
 81056fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81056fe:	68fb      	ldr	r3, [r7, #12]
 8105700:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105704:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8105706:	68fb      	ldr	r3, [r7, #12]
 8105708:	681b      	ldr	r3, [r3, #0]
 810570a:	695b      	ldr	r3, [r3, #20]
 810570c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8105710:	2b00      	cmp	r3, #0
 8105712:	d03a      	beq.n	810578a <HAL_SPI_TransmitReceive+0x33a>
 8105714:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8105716:	2b00      	cmp	r3, #0
 8105718:	d037      	beq.n	810578a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 810571a:	68fb      	ldr	r3, [r7, #12]
 810571c:	681b      	ldr	r3, [r3, #0]
 810571e:	695b      	ldr	r3, [r3, #20]
 8105720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8105724:	2b00      	cmp	r3, #0
 8105726:	d018      	beq.n	810575a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8105728:	68fb      	ldr	r3, [r7, #12]
 810572a:	681a      	ldr	r2, [r3, #0]
 810572c:	68fb      	ldr	r3, [r7, #12]
 810572e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105730:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8105732:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8105734:	68fb      	ldr	r3, [r7, #12]
 8105736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105738:	1d1a      	adds	r2, r3, #4
 810573a:	68fb      	ldr	r3, [r7, #12]
 810573c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 810573e:	68fb      	ldr	r3, [r7, #12]
 8105740:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105744:	b29b      	uxth	r3, r3
 8105746:	3b02      	subs	r3, #2
 8105748:	b29a      	uxth	r2, r3
 810574a:	68fb      	ldr	r3, [r7, #12]
 810574c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105750:	68fb      	ldr	r3, [r7, #12]
 8105752:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105756:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8105758:	e017      	b.n	810578a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810575a:	68fb      	ldr	r3, [r7, #12]
 810575c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810575e:	6a3a      	ldr	r2, [r7, #32]
 8105760:	8812      	ldrh	r2, [r2, #0]
 8105762:	b292      	uxth	r2, r2
 8105764:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105766:	68fb      	ldr	r3, [r7, #12]
 8105768:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810576a:	1c9a      	adds	r2, r3, #2
 810576c:	68fb      	ldr	r3, [r7, #12]
 810576e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8105770:	68fb      	ldr	r3, [r7, #12]
 8105772:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105776:	b29b      	uxth	r3, r3
 8105778:	3b01      	subs	r3, #1
 810577a:	b29a      	uxth	r2, r3
 810577c:	68fb      	ldr	r3, [r7, #12]
 810577e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105782:	68fb      	ldr	r3, [r7, #12]
 8105784:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105788:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 810578a:	f7fd f871 	bl	8102870 <HAL_GetTick>
 810578e:	4602      	mov	r2, r0
 8105790:	69fb      	ldr	r3, [r7, #28]
 8105792:	1ad3      	subs	r3, r2, r3
 8105794:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105796:	429a      	cmp	r2, r3
 8105798:	d803      	bhi.n	81057a2 <HAL_SPI_TransmitReceive+0x352>
 810579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 81057a0:	d102      	bne.n	81057a8 <HAL_SPI_TransmitReceive+0x358>
 81057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81057a4:	2b00      	cmp	r3, #0
 81057a6:	d114      	bne.n	81057d2 <HAL_SPI_TransmitReceive+0x382>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 81057a8:	68f8      	ldr	r0, [r7, #12]
 81057aa:	f000 f93a 	bl	8105a22 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 81057ae:	68fb      	ldr	r3, [r7, #12]
 81057b0:	2200      	movs	r2, #0
 81057b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81057b6:	68fb      	ldr	r3, [r7, #12]
 81057b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81057bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81057c0:	68fb      	ldr	r3, [r7, #12]
 81057c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81057c6:	68fb      	ldr	r3, [r7, #12]
 81057c8:	2201      	movs	r2, #1
 81057ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81057ce:	2303      	movs	r3, #3
 81057d0:	e123      	b.n	8105a1a <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81057d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81057d4:	2b00      	cmp	r3, #0
 81057d6:	f47f af55 	bne.w	8105684 <HAL_SPI_TransmitReceive+0x234>
 81057da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81057dc:	2b00      	cmp	r3, #0
 81057de:	f47f af51 	bne.w	8105684 <HAL_SPI_TransmitReceive+0x234>
 81057e2:	e0f3      	b.n	81059cc <HAL_SPI_TransmitReceive+0x57c>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 81057e4:	68fb      	ldr	r3, [r7, #12]
 81057e6:	681b      	ldr	r3, [r3, #0]
 81057e8:	695b      	ldr	r3, [r3, #20]
 81057ea:	f003 0302 	and.w	r3, r3, #2
 81057ee:	2b02      	cmp	r3, #2
 81057f0:	d15a      	bne.n	81058a8 <HAL_SPI_TransmitReceive+0x458>
 81057f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81057f4:	2b00      	cmp	r3, #0
 81057f6:	d057      	beq.n	81058a8 <HAL_SPI_TransmitReceive+0x458>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 81057f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81057fa:	2b03      	cmp	r3, #3
 81057fc:	d91c      	bls.n	8105838 <HAL_SPI_TransmitReceive+0x3e8>
 81057fe:	68fb      	ldr	r3, [r7, #12]
 8105800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105802:	2b40      	cmp	r3, #64	; 0x40
 8105804:	d918      	bls.n	8105838 <HAL_SPI_TransmitReceive+0x3e8>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8105806:	68fb      	ldr	r3, [r7, #12]
 8105808:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810580a:	68fb      	ldr	r3, [r7, #12]
 810580c:	681b      	ldr	r3, [r3, #0]
 810580e:	6812      	ldr	r2, [r2, #0]
 8105810:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8105812:	68fb      	ldr	r3, [r7, #12]
 8105814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105816:	1d1a      	adds	r2, r3, #4
 8105818:	68fb      	ldr	r3, [r7, #12]
 810581a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 810581c:	68fb      	ldr	r3, [r7, #12]
 810581e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105822:	b29b      	uxth	r3, r3
 8105824:	3b04      	subs	r3, #4
 8105826:	b29a      	uxth	r2, r3
 8105828:	68fb      	ldr	r3, [r7, #12]
 810582a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810582e:	68fb      	ldr	r3, [r7, #12]
 8105830:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105834:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105836:	e037      	b.n	81058a8 <HAL_SPI_TransmitReceive+0x458>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8105838:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 810583a:	2b01      	cmp	r3, #1
 810583c:	d91b      	bls.n	8105876 <HAL_SPI_TransmitReceive+0x426>
 810583e:	68fb      	ldr	r3, [r7, #12]
 8105840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105842:	2b00      	cmp	r3, #0
 8105844:	d017      	beq.n	8105876 <HAL_SPI_TransmitReceive+0x426>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8105846:	68fb      	ldr	r3, [r7, #12]
 8105848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810584a:	881a      	ldrh	r2, [r3, #0]
 810584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810584e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8105850:	68fb      	ldr	r3, [r7, #12]
 8105852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105854:	1c9a      	adds	r2, r3, #2
 8105856:	68fb      	ldr	r3, [r7, #12]
 8105858:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 810585a:	68fb      	ldr	r3, [r7, #12]
 810585c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105860:	b29b      	uxth	r3, r3
 8105862:	3b02      	subs	r3, #2
 8105864:	b29a      	uxth	r2, r3
 8105866:	68fb      	ldr	r3, [r7, #12]
 8105868:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 810586c:	68fb      	ldr	r3, [r7, #12]
 810586e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105872:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8105874:	e018      	b.n	81058a8 <HAL_SPI_TransmitReceive+0x458>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8105876:	68fb      	ldr	r3, [r7, #12]
 8105878:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 810587a:	68fb      	ldr	r3, [r7, #12]
 810587c:	681b      	ldr	r3, [r3, #0]
 810587e:	3320      	adds	r3, #32
 8105880:	7812      	ldrb	r2, [r2, #0]
 8105882:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8105884:	68fb      	ldr	r3, [r7, #12]
 8105886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8105888:	1c5a      	adds	r2, r3, #1
 810588a:	68fb      	ldr	r3, [r7, #12]
 810588c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 810588e:	68fb      	ldr	r3, [r7, #12]
 8105890:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8105894:	b29b      	uxth	r3, r3
 8105896:	3b01      	subs	r3, #1
 8105898:	b29a      	uxth	r2, r3
 810589a:	68fb      	ldr	r3, [r7, #12]
 810589c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 81058a0:	68fb      	ldr	r3, [r7, #12]
 81058a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 81058a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 81058a8:	68fb      	ldr	r3, [r7, #12]
 81058aa:	681b      	ldr	r3, [r3, #0]
 81058ac:	695b      	ldr	r3, [r3, #20]
 81058ae:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 81058b2:	2b00      	cmp	r3, #0
 81058b4:	d05e      	beq.n	8105974 <HAL_SPI_TransmitReceive+0x524>
 81058b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81058b8:	2b00      	cmp	r3, #0
 81058ba:	d05b      	beq.n	8105974 <HAL_SPI_TransmitReceive+0x524>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 81058bc:	68fb      	ldr	r3, [r7, #12]
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	695b      	ldr	r3, [r3, #20]
 81058c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81058c6:	2b00      	cmp	r3, #0
 81058c8:	d018      	beq.n	81058fc <HAL_SPI_TransmitReceive+0x4ac>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 81058ca:	68fb      	ldr	r3, [r7, #12]
 81058cc:	681a      	ldr	r2, [r3, #0]
 81058ce:	68fb      	ldr	r3, [r7, #12]
 81058d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 81058d4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 81058d6:	68fb      	ldr	r3, [r7, #12]
 81058d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81058da:	1d1a      	adds	r2, r3, #4
 81058dc:	68fb      	ldr	r3, [r7, #12]
 81058de:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 81058e0:	68fb      	ldr	r3, [r7, #12]
 81058e2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81058e6:	b29b      	uxth	r3, r3
 81058e8:	3b04      	subs	r3, #4
 81058ea:	b29a      	uxth	r2, r3
 81058ec:	68fb      	ldr	r3, [r7, #12]
 81058ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 81058f2:	68fb      	ldr	r3, [r7, #12]
 81058f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 81058f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 81058fa:	e03b      	b.n	8105974 <HAL_SPI_TransmitReceive+0x524>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 81058fc:	68fb      	ldr	r3, [r7, #12]
 81058fe:	681b      	ldr	r3, [r3, #0]
 8105900:	695b      	ldr	r3, [r3, #20]
 8105902:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8105906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810590a:	d918      	bls.n	810593e <HAL_SPI_TransmitReceive+0x4ee>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 810590c:	68fb      	ldr	r3, [r7, #12]
 810590e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105910:	6a3a      	ldr	r2, [r7, #32]
 8105912:	8812      	ldrh	r2, [r2, #0]
 8105914:	b292      	uxth	r2, r2
 8105916:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8105918:	68fb      	ldr	r3, [r7, #12]
 810591a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810591c:	1c9a      	adds	r2, r3, #2
 810591e:	68fb      	ldr	r3, [r7, #12]
 8105920:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8105922:	68fb      	ldr	r3, [r7, #12]
 8105924:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105928:	b29b      	uxth	r3, r3
 810592a:	3b02      	subs	r3, #2
 810592c:	b29a      	uxth	r2, r3
 810592e:	68fb      	ldr	r3, [r7, #12]
 8105930:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8105934:	68fb      	ldr	r3, [r7, #12]
 8105936:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 810593a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 810593c:	e01a      	b.n	8105974 <HAL_SPI_TransmitReceive+0x524>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 810593e:	68fb      	ldr	r3, [r7, #12]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8105946:	68fb      	ldr	r3, [r7, #12]
 8105948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810594a:	7812      	ldrb	r2, [r2, #0]
 810594c:	b2d2      	uxtb	r2, r2
 810594e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8105950:	68fb      	ldr	r3, [r7, #12]
 8105952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105954:	1c5a      	adds	r2, r3, #1
 8105956:	68fb      	ldr	r3, [r7, #12]
 8105958:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 810595a:	68fb      	ldr	r3, [r7, #12]
 810595c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105960:	b29b      	uxth	r3, r3
 8105962:	3b01      	subs	r3, #1
 8105964:	b29a      	uxth	r2, r3
 8105966:	68fb      	ldr	r3, [r7, #12]
 8105968:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 810596c:	68fb      	ldr	r3, [r7, #12]
 810596e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8105972:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105974:	f7fc ff7c 	bl	8102870 <HAL_GetTick>
 8105978:	4602      	mov	r2, r0
 810597a:	69fb      	ldr	r3, [r7, #28]
 810597c:	1ad3      	subs	r3, r2, r3
 810597e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105980:	429a      	cmp	r2, r3
 8105982:	d803      	bhi.n	810598c <HAL_SPI_TransmitReceive+0x53c>
 8105984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105986:	f1b3 3fff 	cmp.w	r3, #4294967295
 810598a:	d102      	bne.n	8105992 <HAL_SPI_TransmitReceive+0x542>
 810598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810598e:	2b00      	cmp	r3, #0
 8105990:	d114      	bne.n	81059bc <HAL_SPI_TransmitReceive+0x56c>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8105992:	68f8      	ldr	r0, [r7, #12]
 8105994:	f000 f845 	bl	8105a22 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8105998:	68fb      	ldr	r3, [r7, #12]
 810599a:	2200      	movs	r2, #0
 810599c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81059a0:	68fb      	ldr	r3, [r7, #12]
 81059a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81059a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 81059aa:	68fb      	ldr	r3, [r7, #12]
 81059ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 81059b0:	68fb      	ldr	r3, [r7, #12]
 81059b2:	2201      	movs	r2, #1
 81059b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 81059b8:	2303      	movs	r3, #3
 81059ba:	e02e      	b.n	8105a1a <HAL_SPI_TransmitReceive+0x5ca>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 81059bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 81059be:	2b00      	cmp	r3, #0
 81059c0:	f47f af10 	bne.w	81057e4 <HAL_SPI_TransmitReceive+0x394>
 81059c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 81059c6:	2b00      	cmp	r3, #0
 81059c8:	f47f af0c 	bne.w	81057e4 <HAL_SPI_TransmitReceive+0x394>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 81059cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81059ce:	9300      	str	r3, [sp, #0]
 81059d0:	69fb      	ldr	r3, [r7, #28]
 81059d2:	2200      	movs	r2, #0
 81059d4:	2108      	movs	r1, #8
 81059d6:	68f8      	ldr	r0, [r7, #12]
 81059d8:	f000 f8c3 	bl	8105b62 <SPI_WaitOnFlagUntilTimeout>
 81059dc:	4603      	mov	r3, r0
 81059de:	2b00      	cmp	r3, #0
 81059e0:	d007      	beq.n	81059f2 <HAL_SPI_TransmitReceive+0x5a2>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 81059e2:	68fb      	ldr	r3, [r7, #12]
 81059e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 81059e8:	f043 0220 	orr.w	r2, r3, #32
 81059ec:	68fb      	ldr	r3, [r7, #12]
 81059ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 81059f2:	68f8      	ldr	r0, [r7, #12]
 81059f4:	f000 f815 	bl	8105a22 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 81059f8:	68fb      	ldr	r3, [r7, #12]
 81059fa:	2200      	movs	r2, #0
 81059fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8105a00:	68fb      	ldr	r3, [r7, #12]
 8105a02:	2201      	movs	r2, #1
 8105a04:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8105a08:	68fb      	ldr	r3, [r7, #12]
 8105a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d001      	beq.n	8105a16 <HAL_SPI_TransmitReceive+0x5c6>
  {
    return HAL_ERROR;
 8105a12:	2301      	movs	r3, #1
 8105a14:	e001      	b.n	8105a1a <HAL_SPI_TransmitReceive+0x5ca>
  }
  return errorcode;
 8105a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8105a1a:	4618      	mov	r0, r3
 8105a1c:	3730      	adds	r7, #48	; 0x30
 8105a1e:	46bd      	mov	sp, r7
 8105a20:	bd80      	pop	{r7, pc}

08105a22 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8105a22:	b480      	push	{r7}
 8105a24:	b085      	sub	sp, #20
 8105a26:	af00      	add	r7, sp, #0
 8105a28:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	681b      	ldr	r3, [r3, #0]
 8105a2e:	695b      	ldr	r3, [r3, #20]
 8105a30:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	681b      	ldr	r3, [r3, #0]
 8105a36:	699a      	ldr	r2, [r3, #24]
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	681b      	ldr	r3, [r3, #0]
 8105a3c:	f042 0208 	orr.w	r2, r2, #8
 8105a40:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105a42:	687b      	ldr	r3, [r7, #4]
 8105a44:	681b      	ldr	r3, [r3, #0]
 8105a46:	699a      	ldr	r2, [r3, #24]
 8105a48:	687b      	ldr	r3, [r7, #4]
 8105a4a:	681b      	ldr	r3, [r3, #0]
 8105a4c:	f042 0210 	orr.w	r2, r2, #16
 8105a50:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105a52:	687b      	ldr	r3, [r7, #4]
 8105a54:	681b      	ldr	r3, [r3, #0]
 8105a56:	681a      	ldr	r2, [r3, #0]
 8105a58:	687b      	ldr	r3, [r7, #4]
 8105a5a:	681b      	ldr	r3, [r3, #0]
 8105a5c:	f022 0201 	bic.w	r2, r2, #1
 8105a60:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8105a62:	687b      	ldr	r3, [r7, #4]
 8105a64:	681b      	ldr	r3, [r3, #0]
 8105a66:	691b      	ldr	r3, [r3, #16]
 8105a68:	687a      	ldr	r2, [r7, #4]
 8105a6a:	6812      	ldr	r2, [r2, #0]
 8105a6c:	f423 735b 	bic.w	r3, r3, #876	; 0x36c
 8105a70:	f023 0303 	bic.w	r3, r3, #3
 8105a74:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	689a      	ldr	r2, [r3, #8]
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8105a84:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8105a86:	687b      	ldr	r3, [r7, #4]
 8105a88:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105a8c:	b2db      	uxtb	r3, r3
 8105a8e:	2b04      	cmp	r3, #4
 8105a90:	d014      	beq.n	8105abc <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8105a92:	68fb      	ldr	r3, [r7, #12]
 8105a94:	f003 0320 	and.w	r3, r3, #32
 8105a98:	2b00      	cmp	r3, #0
 8105a9a:	d00f      	beq.n	8105abc <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8105a9c:	687b      	ldr	r3, [r7, #4]
 8105a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105aa2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8105aa6:	687b      	ldr	r3, [r7, #4]
 8105aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	681b      	ldr	r3, [r3, #0]
 8105ab0:	699a      	ldr	r2, [r3, #24]
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	f042 0220 	orr.w	r2, r2, #32
 8105aba:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8105abc:	687b      	ldr	r3, [r7, #4]
 8105abe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8105ac2:	b2db      	uxtb	r3, r3
 8105ac4:	2b03      	cmp	r3, #3
 8105ac6:	d014      	beq.n	8105af2 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8105ac8:	68fb      	ldr	r3, [r7, #12]
 8105aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105ace:	2b00      	cmp	r3, #0
 8105ad0:	d00f      	beq.n	8105af2 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105ad2:	687b      	ldr	r3, [r7, #4]
 8105ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105ad8:	f043 0204 	orr.w	r2, r3, #4
 8105adc:	687b      	ldr	r3, [r7, #4]
 8105ade:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8105ae2:	687b      	ldr	r3, [r7, #4]
 8105ae4:	681b      	ldr	r3, [r3, #0]
 8105ae6:	699a      	ldr	r2, [r3, #24]
 8105ae8:	687b      	ldr	r3, [r7, #4]
 8105aea:	681b      	ldr	r3, [r3, #0]
 8105aec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8105af0:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8105af2:	68fb      	ldr	r3, [r7, #12]
 8105af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8105af8:	2b00      	cmp	r3, #0
 8105afa:	d00f      	beq.n	8105b1c <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8105afc:	687b      	ldr	r3, [r7, #4]
 8105afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b02:	f043 0201 	orr.w	r2, r3, #1
 8105b06:	687b      	ldr	r3, [r7, #4]
 8105b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8105b0c:	687b      	ldr	r3, [r7, #4]
 8105b0e:	681b      	ldr	r3, [r3, #0]
 8105b10:	699a      	ldr	r2, [r3, #24]
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8105b1a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8105b1c:	68fb      	ldr	r3, [r7, #12]
 8105b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105b22:	2b00      	cmp	r3, #0
 8105b24:	d00f      	beq.n	8105b46 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8105b26:	687b      	ldr	r3, [r7, #4]
 8105b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b2c:	f043 0208 	orr.w	r2, r3, #8
 8105b30:	687b      	ldr	r3, [r7, #4]
 8105b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	699a      	ldr	r2, [r3, #24]
 8105b3c:	687b      	ldr	r3, [r7, #4]
 8105b3e:	681b      	ldr	r3, [r3, #0]
 8105b40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8105b44:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8105b46:	687b      	ldr	r3, [r7, #4]
 8105b48:	2200      	movs	r2, #0
 8105b4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	2200      	movs	r2, #0
 8105b52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8105b56:	bf00      	nop
 8105b58:	3714      	adds	r7, #20
 8105b5a:	46bd      	mov	sp, r7
 8105b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105b60:	4770      	bx	lr

08105b62 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8105b62:	b580      	push	{r7, lr}
 8105b64:	b084      	sub	sp, #16
 8105b66:	af00      	add	r7, sp, #0
 8105b68:	60f8      	str	r0, [r7, #12]
 8105b6a:	60b9      	str	r1, [r7, #8]
 8105b6c:	603b      	str	r3, [r7, #0]
 8105b6e:	4613      	mov	r3, r2
 8105b70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8105b72:	e010      	b.n	8105b96 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8105b74:	f7fc fe7c 	bl	8102870 <HAL_GetTick>
 8105b78:	4602      	mov	r2, r0
 8105b7a:	683b      	ldr	r3, [r7, #0]
 8105b7c:	1ad3      	subs	r3, r2, r3
 8105b7e:	69ba      	ldr	r2, [r7, #24]
 8105b80:	429a      	cmp	r2, r3
 8105b82:	d803      	bhi.n	8105b8c <SPI_WaitOnFlagUntilTimeout+0x2a>
 8105b84:	69bb      	ldr	r3, [r7, #24]
 8105b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105b8a:	d102      	bne.n	8105b92 <SPI_WaitOnFlagUntilTimeout+0x30>
 8105b8c:	69bb      	ldr	r3, [r7, #24]
 8105b8e:	2b00      	cmp	r3, #0
 8105b90:	d101      	bne.n	8105b96 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8105b92:	2303      	movs	r3, #3
 8105b94:	e00f      	b.n	8105bb6 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8105b96:	68fb      	ldr	r3, [r7, #12]
 8105b98:	681b      	ldr	r3, [r3, #0]
 8105b9a:	695a      	ldr	r2, [r3, #20]
 8105b9c:	68bb      	ldr	r3, [r7, #8]
 8105b9e:	4013      	ands	r3, r2
 8105ba0:	68ba      	ldr	r2, [r7, #8]
 8105ba2:	429a      	cmp	r2, r3
 8105ba4:	bf0c      	ite	eq
 8105ba6:	2301      	moveq	r3, #1
 8105ba8:	2300      	movne	r3, #0
 8105baa:	b2db      	uxtb	r3, r3
 8105bac:	461a      	mov	r2, r3
 8105bae:	79fb      	ldrb	r3, [r7, #7]
 8105bb0:	429a      	cmp	r2, r3
 8105bb2:	d0df      	beq.n	8105b74 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8105bb4:	2300      	movs	r3, #0
}
 8105bb6:	4618      	mov	r0, r3
 8105bb8:	3710      	adds	r7, #16
 8105bba:	46bd      	mov	sp, r7
 8105bbc:	bd80      	pop	{r7, pc}

08105bbe <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8105bbe:	b480      	push	{r7}
 8105bc0:	b085      	sub	sp, #20
 8105bc2:	af00      	add	r7, sp, #0
 8105bc4:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8105bc6:	687b      	ldr	r3, [r7, #4]
 8105bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105bca:	095b      	lsrs	r3, r3, #5
 8105bcc:	3301      	adds	r3, #1
 8105bce:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8105bd0:	687b      	ldr	r3, [r7, #4]
 8105bd2:	68db      	ldr	r3, [r3, #12]
 8105bd4:	3301      	adds	r3, #1
 8105bd6:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8105bd8:	68bb      	ldr	r3, [r7, #8]
 8105bda:	3307      	adds	r3, #7
 8105bdc:	08db      	lsrs	r3, r3, #3
 8105bde:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8105be0:	68bb      	ldr	r3, [r7, #8]
 8105be2:	68fa      	ldr	r2, [r7, #12]
 8105be4:	fb02 f303 	mul.w	r3, r2, r3
}
 8105be8:	4618      	mov	r0, r3
 8105bea:	3714      	adds	r7, #20
 8105bec:	46bd      	mov	sp, r7
 8105bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105bf2:	4770      	bx	lr

08105bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105bf4:	b580      	push	{r7, lr}
 8105bf6:	b082      	sub	sp, #8
 8105bf8:	af00      	add	r7, sp, #0
 8105bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105bfc:	687b      	ldr	r3, [r7, #4]
 8105bfe:	2b00      	cmp	r3, #0
 8105c00:	d101      	bne.n	8105c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105c02:	2301      	movs	r3, #1
 8105c04:	e042      	b.n	8105c8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105c0c:	2b00      	cmp	r3, #0
 8105c0e:	d106      	bne.n	8105c1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105c10:	687b      	ldr	r3, [r7, #4]
 8105c12:	2200      	movs	r2, #0
 8105c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8105c18:	6878      	ldr	r0, [r7, #4]
 8105c1a:	f7fc fbf5 	bl	8102408 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8105c1e:	687b      	ldr	r3, [r7, #4]
 8105c20:	2224      	movs	r2, #36	; 0x24
 8105c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8105c26:	687b      	ldr	r3, [r7, #4]
 8105c28:	681b      	ldr	r3, [r3, #0]
 8105c2a:	681a      	ldr	r2, [r3, #0]
 8105c2c:	687b      	ldr	r3, [r7, #4]
 8105c2e:	681b      	ldr	r3, [r3, #0]
 8105c30:	f022 0201 	bic.w	r2, r2, #1
 8105c34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105c36:	6878      	ldr	r0, [r7, #4]
 8105c38:	f000 f996 	bl	8105f68 <UART_SetConfig>
 8105c3c:	4603      	mov	r3, r0
 8105c3e:	2b01      	cmp	r3, #1
 8105c40:	d101      	bne.n	8105c46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8105c42:	2301      	movs	r3, #1
 8105c44:	e022      	b.n	8105c8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8105c46:	687b      	ldr	r3, [r7, #4]
 8105c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105c4a:	2b00      	cmp	r3, #0
 8105c4c:	d002      	beq.n	8105c54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8105c4e:	6878      	ldr	r0, [r7, #4]
 8105c50:	f000 feea 	bl	8106a28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8105c54:	687b      	ldr	r3, [r7, #4]
 8105c56:	681b      	ldr	r3, [r3, #0]
 8105c58:	685a      	ldr	r2, [r3, #4]
 8105c5a:	687b      	ldr	r3, [r7, #4]
 8105c5c:	681b      	ldr	r3, [r3, #0]
 8105c5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8105c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	681b      	ldr	r3, [r3, #0]
 8105c68:	689a      	ldr	r2, [r3, #8]
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	681b      	ldr	r3, [r3, #0]
 8105c6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8105c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8105c74:	687b      	ldr	r3, [r7, #4]
 8105c76:	681b      	ldr	r3, [r3, #0]
 8105c78:	681a      	ldr	r2, [r3, #0]
 8105c7a:	687b      	ldr	r3, [r7, #4]
 8105c7c:	681b      	ldr	r3, [r3, #0]
 8105c7e:	f042 0201 	orr.w	r2, r2, #1
 8105c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8105c84:	6878      	ldr	r0, [r7, #4]
 8105c86:	f000 ff71 	bl	8106b6c <UART_CheckIdleState>
 8105c8a:	4603      	mov	r3, r0
}
 8105c8c:	4618      	mov	r0, r3
 8105c8e:	3708      	adds	r7, #8
 8105c90:	46bd      	mov	sp, r7
 8105c92:	bd80      	pop	{r7, pc}

08105c94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105c94:	b580      	push	{r7, lr}
 8105c96:	b08a      	sub	sp, #40	; 0x28
 8105c98:	af02      	add	r7, sp, #8
 8105c9a:	60f8      	str	r0, [r7, #12]
 8105c9c:	60b9      	str	r1, [r7, #8]
 8105c9e:	603b      	str	r3, [r7, #0]
 8105ca0:	4613      	mov	r3, r2
 8105ca2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105ca4:	68fb      	ldr	r3, [r7, #12]
 8105ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105caa:	2b20      	cmp	r3, #32
 8105cac:	f040 8083 	bne.w	8105db6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8105cb0:	68bb      	ldr	r3, [r7, #8]
 8105cb2:	2b00      	cmp	r3, #0
 8105cb4:	d002      	beq.n	8105cbc <HAL_UART_Transmit+0x28>
 8105cb6:	88fb      	ldrh	r3, [r7, #6]
 8105cb8:	2b00      	cmp	r3, #0
 8105cba:	d101      	bne.n	8105cc0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8105cbc:	2301      	movs	r3, #1
 8105cbe:	e07b      	b.n	8105db8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8105cc0:	68fb      	ldr	r3, [r7, #12]
 8105cc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105cc6:	2b01      	cmp	r3, #1
 8105cc8:	d101      	bne.n	8105cce <HAL_UART_Transmit+0x3a>
 8105cca:	2302      	movs	r3, #2
 8105ccc:	e074      	b.n	8105db8 <HAL_UART_Transmit+0x124>
 8105cce:	68fb      	ldr	r3, [r7, #12]
 8105cd0:	2201      	movs	r2, #1
 8105cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105cd6:	68fb      	ldr	r3, [r7, #12]
 8105cd8:	2200      	movs	r2, #0
 8105cda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8105cde:	68fb      	ldr	r3, [r7, #12]
 8105ce0:	2221      	movs	r2, #33	; 0x21
 8105ce2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105ce6:	f7fc fdc3 	bl	8102870 <HAL_GetTick>
 8105cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8105cec:	68fb      	ldr	r3, [r7, #12]
 8105cee:	88fa      	ldrh	r2, [r7, #6]
 8105cf0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8105cf4:	68fb      	ldr	r3, [r7, #12]
 8105cf6:	88fa      	ldrh	r2, [r7, #6]
 8105cf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105cfc:	68fb      	ldr	r3, [r7, #12]
 8105cfe:	689b      	ldr	r3, [r3, #8]
 8105d00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105d04:	d108      	bne.n	8105d18 <HAL_UART_Transmit+0x84>
 8105d06:	68fb      	ldr	r3, [r7, #12]
 8105d08:	691b      	ldr	r3, [r3, #16]
 8105d0a:	2b00      	cmp	r3, #0
 8105d0c:	d104      	bne.n	8105d18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8105d0e:	2300      	movs	r3, #0
 8105d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8105d12:	68bb      	ldr	r3, [r7, #8]
 8105d14:	61bb      	str	r3, [r7, #24]
 8105d16:	e003      	b.n	8105d20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8105d18:	68bb      	ldr	r3, [r7, #8]
 8105d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105d1c:	2300      	movs	r3, #0
 8105d1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8105d20:	68fb      	ldr	r3, [r7, #12]
 8105d22:	2200      	movs	r2, #0
 8105d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8105d28:	e02c      	b.n	8105d84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8105d2a:	683b      	ldr	r3, [r7, #0]
 8105d2c:	9300      	str	r3, [sp, #0]
 8105d2e:	697b      	ldr	r3, [r7, #20]
 8105d30:	2200      	movs	r2, #0
 8105d32:	2180      	movs	r1, #128	; 0x80
 8105d34:	68f8      	ldr	r0, [r7, #12]
 8105d36:	f000 ff64 	bl	8106c02 <UART_WaitOnFlagUntilTimeout>
 8105d3a:	4603      	mov	r3, r0
 8105d3c:	2b00      	cmp	r3, #0
 8105d3e:	d001      	beq.n	8105d44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8105d40:	2303      	movs	r3, #3
 8105d42:	e039      	b.n	8105db8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8105d44:	69fb      	ldr	r3, [r7, #28]
 8105d46:	2b00      	cmp	r3, #0
 8105d48:	d10b      	bne.n	8105d62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8105d4a:	69bb      	ldr	r3, [r7, #24]
 8105d4c:	881b      	ldrh	r3, [r3, #0]
 8105d4e:	461a      	mov	r2, r3
 8105d50:	68fb      	ldr	r3, [r7, #12]
 8105d52:	681b      	ldr	r3, [r3, #0]
 8105d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8105d5a:	69bb      	ldr	r3, [r7, #24]
 8105d5c:	3302      	adds	r3, #2
 8105d5e:	61bb      	str	r3, [r7, #24]
 8105d60:	e007      	b.n	8105d72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8105d62:	69fb      	ldr	r3, [r7, #28]
 8105d64:	781a      	ldrb	r2, [r3, #0]
 8105d66:	68fb      	ldr	r3, [r7, #12]
 8105d68:	681b      	ldr	r3, [r3, #0]
 8105d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8105d6c:	69fb      	ldr	r3, [r7, #28]
 8105d6e:	3301      	adds	r3, #1
 8105d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8105d72:	68fb      	ldr	r3, [r7, #12]
 8105d74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105d78:	b29b      	uxth	r3, r3
 8105d7a:	3b01      	subs	r3, #1
 8105d7c:	b29a      	uxth	r2, r3
 8105d7e:	68fb      	ldr	r3, [r7, #12]
 8105d80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8105d84:	68fb      	ldr	r3, [r7, #12]
 8105d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8105d8a:	b29b      	uxth	r3, r3
 8105d8c:	2b00      	cmp	r3, #0
 8105d8e:	d1cc      	bne.n	8105d2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8105d90:	683b      	ldr	r3, [r7, #0]
 8105d92:	9300      	str	r3, [sp, #0]
 8105d94:	697b      	ldr	r3, [r7, #20]
 8105d96:	2200      	movs	r2, #0
 8105d98:	2140      	movs	r1, #64	; 0x40
 8105d9a:	68f8      	ldr	r0, [r7, #12]
 8105d9c:	f000 ff31 	bl	8106c02 <UART_WaitOnFlagUntilTimeout>
 8105da0:	4603      	mov	r3, r0
 8105da2:	2b00      	cmp	r3, #0
 8105da4:	d001      	beq.n	8105daa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8105da6:	2303      	movs	r3, #3
 8105da8:	e006      	b.n	8105db8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8105daa:	68fb      	ldr	r3, [r7, #12]
 8105dac:	2220      	movs	r2, #32
 8105dae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8105db2:	2300      	movs	r3, #0
 8105db4:	e000      	b.n	8105db8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8105db6:	2302      	movs	r3, #2
  }
}
 8105db8:	4618      	mov	r0, r3
 8105dba:	3720      	adds	r7, #32
 8105dbc:	46bd      	mov	sp, r7
 8105dbe:	bd80      	pop	{r7, pc}

08105dc0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105dc0:	b580      	push	{r7, lr}
 8105dc2:	b08a      	sub	sp, #40	; 0x28
 8105dc4:	af02      	add	r7, sp, #8
 8105dc6:	60f8      	str	r0, [r7, #12]
 8105dc8:	60b9      	str	r1, [r7, #8]
 8105dca:	603b      	str	r3, [r7, #0]
 8105dcc:	4613      	mov	r3, r2
 8105dce:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8105dd0:	68fb      	ldr	r3, [r7, #12]
 8105dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105dd6:	2b20      	cmp	r3, #32
 8105dd8:	f040 80c0 	bne.w	8105f5c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8105ddc:	68bb      	ldr	r3, [r7, #8]
 8105dde:	2b00      	cmp	r3, #0
 8105de0:	d002      	beq.n	8105de8 <HAL_UART_Receive+0x28>
 8105de2:	88fb      	ldrh	r3, [r7, #6]
 8105de4:	2b00      	cmp	r3, #0
 8105de6:	d101      	bne.n	8105dec <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8105de8:	2301      	movs	r3, #1
 8105dea:	e0b8      	b.n	8105f5e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8105dec:	68fb      	ldr	r3, [r7, #12]
 8105dee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8105df2:	2b01      	cmp	r3, #1
 8105df4:	d101      	bne.n	8105dfa <HAL_UART_Receive+0x3a>
 8105df6:	2302      	movs	r3, #2
 8105df8:	e0b1      	b.n	8105f5e <HAL_UART_Receive+0x19e>
 8105dfa:	68fb      	ldr	r3, [r7, #12]
 8105dfc:	2201      	movs	r2, #1
 8105dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105e02:	68fb      	ldr	r3, [r7, #12]
 8105e04:	2200      	movs	r2, #0
 8105e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8105e0a:	68fb      	ldr	r3, [r7, #12]
 8105e0c:	2222      	movs	r2, #34	; 0x22
 8105e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105e12:	68fb      	ldr	r3, [r7, #12]
 8105e14:	2200      	movs	r2, #0
 8105e16:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105e18:	f7fc fd2a 	bl	8102870 <HAL_GetTick>
 8105e1c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8105e1e:	68fb      	ldr	r3, [r7, #12]
 8105e20:	88fa      	ldrh	r2, [r7, #6]
 8105e22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8105e26:	68fb      	ldr	r3, [r7, #12]
 8105e28:	88fa      	ldrh	r2, [r7, #6]
 8105e2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8105e2e:	68fb      	ldr	r3, [r7, #12]
 8105e30:	689b      	ldr	r3, [r3, #8]
 8105e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105e36:	d10e      	bne.n	8105e56 <HAL_UART_Receive+0x96>
 8105e38:	68fb      	ldr	r3, [r7, #12]
 8105e3a:	691b      	ldr	r3, [r3, #16]
 8105e3c:	2b00      	cmp	r3, #0
 8105e3e:	d105      	bne.n	8105e4c <HAL_UART_Receive+0x8c>
 8105e40:	68fb      	ldr	r3, [r7, #12]
 8105e42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8105e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105e4a:	e02d      	b.n	8105ea8 <HAL_UART_Receive+0xe8>
 8105e4c:	68fb      	ldr	r3, [r7, #12]
 8105e4e:	22ff      	movs	r2, #255	; 0xff
 8105e50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105e54:	e028      	b.n	8105ea8 <HAL_UART_Receive+0xe8>
 8105e56:	68fb      	ldr	r3, [r7, #12]
 8105e58:	689b      	ldr	r3, [r3, #8]
 8105e5a:	2b00      	cmp	r3, #0
 8105e5c:	d10d      	bne.n	8105e7a <HAL_UART_Receive+0xba>
 8105e5e:	68fb      	ldr	r3, [r7, #12]
 8105e60:	691b      	ldr	r3, [r3, #16]
 8105e62:	2b00      	cmp	r3, #0
 8105e64:	d104      	bne.n	8105e70 <HAL_UART_Receive+0xb0>
 8105e66:	68fb      	ldr	r3, [r7, #12]
 8105e68:	22ff      	movs	r2, #255	; 0xff
 8105e6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105e6e:	e01b      	b.n	8105ea8 <HAL_UART_Receive+0xe8>
 8105e70:	68fb      	ldr	r3, [r7, #12]
 8105e72:	227f      	movs	r2, #127	; 0x7f
 8105e74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105e78:	e016      	b.n	8105ea8 <HAL_UART_Receive+0xe8>
 8105e7a:	68fb      	ldr	r3, [r7, #12]
 8105e7c:	689b      	ldr	r3, [r3, #8]
 8105e7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105e82:	d10d      	bne.n	8105ea0 <HAL_UART_Receive+0xe0>
 8105e84:	68fb      	ldr	r3, [r7, #12]
 8105e86:	691b      	ldr	r3, [r3, #16]
 8105e88:	2b00      	cmp	r3, #0
 8105e8a:	d104      	bne.n	8105e96 <HAL_UART_Receive+0xd6>
 8105e8c:	68fb      	ldr	r3, [r7, #12]
 8105e8e:	227f      	movs	r2, #127	; 0x7f
 8105e90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105e94:	e008      	b.n	8105ea8 <HAL_UART_Receive+0xe8>
 8105e96:	68fb      	ldr	r3, [r7, #12]
 8105e98:	223f      	movs	r2, #63	; 0x3f
 8105e9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105e9e:	e003      	b.n	8105ea8 <HAL_UART_Receive+0xe8>
 8105ea0:	68fb      	ldr	r3, [r7, #12]
 8105ea2:	2200      	movs	r2, #0
 8105ea4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8105ea8:	68fb      	ldr	r3, [r7, #12]
 8105eaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8105eae:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105eb0:	68fb      	ldr	r3, [r7, #12]
 8105eb2:	689b      	ldr	r3, [r3, #8]
 8105eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105eb8:	d108      	bne.n	8105ecc <HAL_UART_Receive+0x10c>
 8105eba:	68fb      	ldr	r3, [r7, #12]
 8105ebc:	691b      	ldr	r3, [r3, #16]
 8105ebe:	2b00      	cmp	r3, #0
 8105ec0:	d104      	bne.n	8105ecc <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8105ec2:	2300      	movs	r3, #0
 8105ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8105ec6:	68bb      	ldr	r3, [r7, #8]
 8105ec8:	61bb      	str	r3, [r7, #24]
 8105eca:	e003      	b.n	8105ed4 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8105ecc:	68bb      	ldr	r3, [r7, #8]
 8105ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105ed0:	2300      	movs	r3, #0
 8105ed2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8105ed4:	68fb      	ldr	r3, [r7, #12]
 8105ed6:	2200      	movs	r2, #0
 8105ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8105edc:	e032      	b.n	8105f44 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8105ede:	683b      	ldr	r3, [r7, #0]
 8105ee0:	9300      	str	r3, [sp, #0]
 8105ee2:	697b      	ldr	r3, [r7, #20]
 8105ee4:	2200      	movs	r2, #0
 8105ee6:	2120      	movs	r1, #32
 8105ee8:	68f8      	ldr	r0, [r7, #12]
 8105eea:	f000 fe8a 	bl	8106c02 <UART_WaitOnFlagUntilTimeout>
 8105eee:	4603      	mov	r3, r0
 8105ef0:	2b00      	cmp	r3, #0
 8105ef2:	d001      	beq.n	8105ef8 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8105ef4:	2303      	movs	r3, #3
 8105ef6:	e032      	b.n	8105f5e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8105ef8:	69fb      	ldr	r3, [r7, #28]
 8105efa:	2b00      	cmp	r3, #0
 8105efc:	d10c      	bne.n	8105f18 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8105efe:	68fb      	ldr	r3, [r7, #12]
 8105f00:	681b      	ldr	r3, [r3, #0]
 8105f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f04:	b29a      	uxth	r2, r3
 8105f06:	8a7b      	ldrh	r3, [r7, #18]
 8105f08:	4013      	ands	r3, r2
 8105f0a:	b29a      	uxth	r2, r3
 8105f0c:	69bb      	ldr	r3, [r7, #24]
 8105f0e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8105f10:	69bb      	ldr	r3, [r7, #24]
 8105f12:	3302      	adds	r3, #2
 8105f14:	61bb      	str	r3, [r7, #24]
 8105f16:	e00c      	b.n	8105f32 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8105f18:	68fb      	ldr	r3, [r7, #12]
 8105f1a:	681b      	ldr	r3, [r3, #0]
 8105f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f1e:	b2da      	uxtb	r2, r3
 8105f20:	8a7b      	ldrh	r3, [r7, #18]
 8105f22:	b2db      	uxtb	r3, r3
 8105f24:	4013      	ands	r3, r2
 8105f26:	b2da      	uxtb	r2, r3
 8105f28:	69fb      	ldr	r3, [r7, #28]
 8105f2a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8105f2c:	69fb      	ldr	r3, [r7, #28]
 8105f2e:	3301      	adds	r3, #1
 8105f30:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8105f32:	68fb      	ldr	r3, [r7, #12]
 8105f34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105f38:	b29b      	uxth	r3, r3
 8105f3a:	3b01      	subs	r3, #1
 8105f3c:	b29a      	uxth	r2, r3
 8105f3e:	68fb      	ldr	r3, [r7, #12]
 8105f40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8105f44:	68fb      	ldr	r3, [r7, #12]
 8105f46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105f4a:	b29b      	uxth	r3, r3
 8105f4c:	2b00      	cmp	r3, #0
 8105f4e:	d1c6      	bne.n	8105ede <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8105f50:	68fb      	ldr	r3, [r7, #12]
 8105f52:	2220      	movs	r2, #32
 8105f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8105f58:	2300      	movs	r3, #0
 8105f5a:	e000      	b.n	8105f5e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8105f5c:	2302      	movs	r3, #2
  }
}
 8105f5e:	4618      	mov	r0, r3
 8105f60:	3720      	adds	r7, #32
 8105f62:	46bd      	mov	sp, r7
 8105f64:	bd80      	pop	{r7, pc}
	...

08105f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8105f68:	b5b0      	push	{r4, r5, r7, lr}
 8105f6a:	b08e      	sub	sp, #56	; 0x38
 8105f6c:	af00      	add	r7, sp, #0
 8105f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8105f70:	2300      	movs	r3, #0
 8105f72:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	689a      	ldr	r2, [r3, #8]
 8105f7a:	687b      	ldr	r3, [r7, #4]
 8105f7c:	691b      	ldr	r3, [r3, #16]
 8105f7e:	431a      	orrs	r2, r3
 8105f80:	687b      	ldr	r3, [r7, #4]
 8105f82:	695b      	ldr	r3, [r3, #20]
 8105f84:	431a      	orrs	r2, r3
 8105f86:	687b      	ldr	r3, [r7, #4]
 8105f88:	69db      	ldr	r3, [r3, #28]
 8105f8a:	4313      	orrs	r3, r2
 8105f8c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8105f8e:	687b      	ldr	r3, [r7, #4]
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	681a      	ldr	r2, [r3, #0]
 8105f94:	4bc0      	ldr	r3, [pc, #768]	; (8106298 <UART_SetConfig+0x330>)
 8105f96:	4013      	ands	r3, r2
 8105f98:	687a      	ldr	r2, [r7, #4]
 8105f9a:	6812      	ldr	r2, [r2, #0]
 8105f9c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8105f9e:	430b      	orrs	r3, r1
 8105fa0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105fa2:	687b      	ldr	r3, [r7, #4]
 8105fa4:	681b      	ldr	r3, [r3, #0]
 8105fa6:	685b      	ldr	r3, [r3, #4]
 8105fa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105fac:	687b      	ldr	r3, [r7, #4]
 8105fae:	68da      	ldr	r2, [r3, #12]
 8105fb0:	687b      	ldr	r3, [r7, #4]
 8105fb2:	681b      	ldr	r3, [r3, #0]
 8105fb4:	430a      	orrs	r2, r1
 8105fb6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105fb8:	687b      	ldr	r3, [r7, #4]
 8105fba:	699b      	ldr	r3, [r3, #24]
 8105fbc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8105fbe:	687b      	ldr	r3, [r7, #4]
 8105fc0:	681b      	ldr	r3, [r3, #0]
 8105fc2:	4ab6      	ldr	r2, [pc, #728]	; (810629c <UART_SetConfig+0x334>)
 8105fc4:	4293      	cmp	r3, r2
 8105fc6:	d004      	beq.n	8105fd2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105fc8:	687b      	ldr	r3, [r7, #4]
 8105fca:	6a1b      	ldr	r3, [r3, #32]
 8105fcc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8105fce:	4313      	orrs	r3, r2
 8105fd0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	689b      	ldr	r3, [r3, #8]
 8105fd8:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8105fdc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8105fe0:	687a      	ldr	r2, [r7, #4]
 8105fe2:	6812      	ldr	r2, [r2, #0]
 8105fe4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8105fe6:	430b      	orrs	r3, r1
 8105fe8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	681b      	ldr	r3, [r3, #0]
 8105fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105ff0:	f023 010f 	bic.w	r1, r3, #15
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8105ff8:	687b      	ldr	r3, [r7, #4]
 8105ffa:	681b      	ldr	r3, [r3, #0]
 8105ffc:	430a      	orrs	r2, r1
 8105ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8106000:	687b      	ldr	r3, [r7, #4]
 8106002:	681b      	ldr	r3, [r3, #0]
 8106004:	4aa6      	ldr	r2, [pc, #664]	; (81062a0 <UART_SetConfig+0x338>)
 8106006:	4293      	cmp	r3, r2
 8106008:	d176      	bne.n	81060f8 <UART_SetConfig+0x190>
 810600a:	4ba6      	ldr	r3, [pc, #664]	; (81062a4 <UART_SetConfig+0x33c>)
 810600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810600e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8106012:	2b28      	cmp	r3, #40	; 0x28
 8106014:	d86c      	bhi.n	81060f0 <UART_SetConfig+0x188>
 8106016:	a201      	add	r2, pc, #4	; (adr r2, 810601c <UART_SetConfig+0xb4>)
 8106018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810601c:	081060c1 	.word	0x081060c1
 8106020:	081060f1 	.word	0x081060f1
 8106024:	081060f1 	.word	0x081060f1
 8106028:	081060f1 	.word	0x081060f1
 810602c:	081060f1 	.word	0x081060f1
 8106030:	081060f1 	.word	0x081060f1
 8106034:	081060f1 	.word	0x081060f1
 8106038:	081060f1 	.word	0x081060f1
 810603c:	081060c9 	.word	0x081060c9
 8106040:	081060f1 	.word	0x081060f1
 8106044:	081060f1 	.word	0x081060f1
 8106048:	081060f1 	.word	0x081060f1
 810604c:	081060f1 	.word	0x081060f1
 8106050:	081060f1 	.word	0x081060f1
 8106054:	081060f1 	.word	0x081060f1
 8106058:	081060f1 	.word	0x081060f1
 810605c:	081060d1 	.word	0x081060d1
 8106060:	081060f1 	.word	0x081060f1
 8106064:	081060f1 	.word	0x081060f1
 8106068:	081060f1 	.word	0x081060f1
 810606c:	081060f1 	.word	0x081060f1
 8106070:	081060f1 	.word	0x081060f1
 8106074:	081060f1 	.word	0x081060f1
 8106078:	081060f1 	.word	0x081060f1
 810607c:	081060d9 	.word	0x081060d9
 8106080:	081060f1 	.word	0x081060f1
 8106084:	081060f1 	.word	0x081060f1
 8106088:	081060f1 	.word	0x081060f1
 810608c:	081060f1 	.word	0x081060f1
 8106090:	081060f1 	.word	0x081060f1
 8106094:	081060f1 	.word	0x081060f1
 8106098:	081060f1 	.word	0x081060f1
 810609c:	081060e1 	.word	0x081060e1
 81060a0:	081060f1 	.word	0x081060f1
 81060a4:	081060f1 	.word	0x081060f1
 81060a8:	081060f1 	.word	0x081060f1
 81060ac:	081060f1 	.word	0x081060f1
 81060b0:	081060f1 	.word	0x081060f1
 81060b4:	081060f1 	.word	0x081060f1
 81060b8:	081060f1 	.word	0x081060f1
 81060bc:	081060e9 	.word	0x081060e9
 81060c0:	2301      	movs	r3, #1
 81060c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81060c6:	e220      	b.n	810650a <UART_SetConfig+0x5a2>
 81060c8:	2304      	movs	r3, #4
 81060ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81060ce:	e21c      	b.n	810650a <UART_SetConfig+0x5a2>
 81060d0:	2308      	movs	r3, #8
 81060d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81060d6:	e218      	b.n	810650a <UART_SetConfig+0x5a2>
 81060d8:	2310      	movs	r3, #16
 81060da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81060de:	e214      	b.n	810650a <UART_SetConfig+0x5a2>
 81060e0:	2320      	movs	r3, #32
 81060e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81060e6:	e210      	b.n	810650a <UART_SetConfig+0x5a2>
 81060e8:	2340      	movs	r3, #64	; 0x40
 81060ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81060ee:	e20c      	b.n	810650a <UART_SetConfig+0x5a2>
 81060f0:	2380      	movs	r3, #128	; 0x80
 81060f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81060f6:	e208      	b.n	810650a <UART_SetConfig+0x5a2>
 81060f8:	687b      	ldr	r3, [r7, #4]
 81060fa:	681b      	ldr	r3, [r3, #0]
 81060fc:	4a6a      	ldr	r2, [pc, #424]	; (81062a8 <UART_SetConfig+0x340>)
 81060fe:	4293      	cmp	r3, r2
 8106100:	d130      	bne.n	8106164 <UART_SetConfig+0x1fc>
 8106102:	4b68      	ldr	r3, [pc, #416]	; (81062a4 <UART_SetConfig+0x33c>)
 8106104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106106:	f003 0307 	and.w	r3, r3, #7
 810610a:	2b05      	cmp	r3, #5
 810610c:	d826      	bhi.n	810615c <UART_SetConfig+0x1f4>
 810610e:	a201      	add	r2, pc, #4	; (adr r2, 8106114 <UART_SetConfig+0x1ac>)
 8106110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106114:	0810612d 	.word	0x0810612d
 8106118:	08106135 	.word	0x08106135
 810611c:	0810613d 	.word	0x0810613d
 8106120:	08106145 	.word	0x08106145
 8106124:	0810614d 	.word	0x0810614d
 8106128:	08106155 	.word	0x08106155
 810612c:	2300      	movs	r3, #0
 810612e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106132:	e1ea      	b.n	810650a <UART_SetConfig+0x5a2>
 8106134:	2304      	movs	r3, #4
 8106136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810613a:	e1e6      	b.n	810650a <UART_SetConfig+0x5a2>
 810613c:	2308      	movs	r3, #8
 810613e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106142:	e1e2      	b.n	810650a <UART_SetConfig+0x5a2>
 8106144:	2310      	movs	r3, #16
 8106146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810614a:	e1de      	b.n	810650a <UART_SetConfig+0x5a2>
 810614c:	2320      	movs	r3, #32
 810614e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106152:	e1da      	b.n	810650a <UART_SetConfig+0x5a2>
 8106154:	2340      	movs	r3, #64	; 0x40
 8106156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810615a:	e1d6      	b.n	810650a <UART_SetConfig+0x5a2>
 810615c:	2380      	movs	r3, #128	; 0x80
 810615e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106162:	e1d2      	b.n	810650a <UART_SetConfig+0x5a2>
 8106164:	687b      	ldr	r3, [r7, #4]
 8106166:	681b      	ldr	r3, [r3, #0]
 8106168:	4a50      	ldr	r2, [pc, #320]	; (81062ac <UART_SetConfig+0x344>)
 810616a:	4293      	cmp	r3, r2
 810616c:	d130      	bne.n	81061d0 <UART_SetConfig+0x268>
 810616e:	4b4d      	ldr	r3, [pc, #308]	; (81062a4 <UART_SetConfig+0x33c>)
 8106170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8106172:	f003 0307 	and.w	r3, r3, #7
 8106176:	2b05      	cmp	r3, #5
 8106178:	d826      	bhi.n	81061c8 <UART_SetConfig+0x260>
 810617a:	a201      	add	r2, pc, #4	; (adr r2, 8106180 <UART_SetConfig+0x218>)
 810617c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106180:	08106199 	.word	0x08106199
 8106184:	081061a1 	.word	0x081061a1
 8106188:	081061a9 	.word	0x081061a9
 810618c:	081061b1 	.word	0x081061b1
 8106190:	081061b9 	.word	0x081061b9
 8106194:	081061c1 	.word	0x081061c1
 8106198:	2300      	movs	r3, #0
 810619a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810619e:	e1b4      	b.n	810650a <UART_SetConfig+0x5a2>
 81061a0:	2304      	movs	r3, #4
 81061a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81061a6:	e1b0      	b.n	810650a <UART_SetConfig+0x5a2>
 81061a8:	2308      	movs	r3, #8
 81061aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81061ae:	e1ac      	b.n	810650a <UART_SetConfig+0x5a2>
 81061b0:	2310      	movs	r3, #16
 81061b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81061b6:	e1a8      	b.n	810650a <UART_SetConfig+0x5a2>
 81061b8:	2320      	movs	r3, #32
 81061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81061be:	e1a4      	b.n	810650a <UART_SetConfig+0x5a2>
 81061c0:	2340      	movs	r3, #64	; 0x40
 81061c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81061c6:	e1a0      	b.n	810650a <UART_SetConfig+0x5a2>
 81061c8:	2380      	movs	r3, #128	; 0x80
 81061ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81061ce:	e19c      	b.n	810650a <UART_SetConfig+0x5a2>
 81061d0:	687b      	ldr	r3, [r7, #4]
 81061d2:	681b      	ldr	r3, [r3, #0]
 81061d4:	4a36      	ldr	r2, [pc, #216]	; (81062b0 <UART_SetConfig+0x348>)
 81061d6:	4293      	cmp	r3, r2
 81061d8:	d130      	bne.n	810623c <UART_SetConfig+0x2d4>
 81061da:	4b32      	ldr	r3, [pc, #200]	; (81062a4 <UART_SetConfig+0x33c>)
 81061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81061de:	f003 0307 	and.w	r3, r3, #7
 81061e2:	2b05      	cmp	r3, #5
 81061e4:	d826      	bhi.n	8106234 <UART_SetConfig+0x2cc>
 81061e6:	a201      	add	r2, pc, #4	; (adr r2, 81061ec <UART_SetConfig+0x284>)
 81061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81061ec:	08106205 	.word	0x08106205
 81061f0:	0810620d 	.word	0x0810620d
 81061f4:	08106215 	.word	0x08106215
 81061f8:	0810621d 	.word	0x0810621d
 81061fc:	08106225 	.word	0x08106225
 8106200:	0810622d 	.word	0x0810622d
 8106204:	2300      	movs	r3, #0
 8106206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810620a:	e17e      	b.n	810650a <UART_SetConfig+0x5a2>
 810620c:	2304      	movs	r3, #4
 810620e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106212:	e17a      	b.n	810650a <UART_SetConfig+0x5a2>
 8106214:	2308      	movs	r3, #8
 8106216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810621a:	e176      	b.n	810650a <UART_SetConfig+0x5a2>
 810621c:	2310      	movs	r3, #16
 810621e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106222:	e172      	b.n	810650a <UART_SetConfig+0x5a2>
 8106224:	2320      	movs	r3, #32
 8106226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810622a:	e16e      	b.n	810650a <UART_SetConfig+0x5a2>
 810622c:	2340      	movs	r3, #64	; 0x40
 810622e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106232:	e16a      	b.n	810650a <UART_SetConfig+0x5a2>
 8106234:	2380      	movs	r3, #128	; 0x80
 8106236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810623a:	e166      	b.n	810650a <UART_SetConfig+0x5a2>
 810623c:	687b      	ldr	r3, [r7, #4]
 810623e:	681b      	ldr	r3, [r3, #0]
 8106240:	4a1c      	ldr	r2, [pc, #112]	; (81062b4 <UART_SetConfig+0x34c>)
 8106242:	4293      	cmp	r3, r2
 8106244:	d140      	bne.n	81062c8 <UART_SetConfig+0x360>
 8106246:	4b17      	ldr	r3, [pc, #92]	; (81062a4 <UART_SetConfig+0x33c>)
 8106248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810624a:	f003 0307 	and.w	r3, r3, #7
 810624e:	2b05      	cmp	r3, #5
 8106250:	d836      	bhi.n	81062c0 <UART_SetConfig+0x358>
 8106252:	a201      	add	r2, pc, #4	; (adr r2, 8106258 <UART_SetConfig+0x2f0>)
 8106254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106258:	08106271 	.word	0x08106271
 810625c:	08106279 	.word	0x08106279
 8106260:	08106281 	.word	0x08106281
 8106264:	08106289 	.word	0x08106289
 8106268:	08106291 	.word	0x08106291
 810626c:	081062b9 	.word	0x081062b9
 8106270:	2300      	movs	r3, #0
 8106272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106276:	e148      	b.n	810650a <UART_SetConfig+0x5a2>
 8106278:	2304      	movs	r3, #4
 810627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810627e:	e144      	b.n	810650a <UART_SetConfig+0x5a2>
 8106280:	2308      	movs	r3, #8
 8106282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106286:	e140      	b.n	810650a <UART_SetConfig+0x5a2>
 8106288:	2310      	movs	r3, #16
 810628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810628e:	e13c      	b.n	810650a <UART_SetConfig+0x5a2>
 8106290:	2320      	movs	r3, #32
 8106292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106296:	e138      	b.n	810650a <UART_SetConfig+0x5a2>
 8106298:	cfff69f3 	.word	0xcfff69f3
 810629c:	58000c00 	.word	0x58000c00
 81062a0:	40011000 	.word	0x40011000
 81062a4:	58024400 	.word	0x58024400
 81062a8:	40004400 	.word	0x40004400
 81062ac:	40004800 	.word	0x40004800
 81062b0:	40004c00 	.word	0x40004c00
 81062b4:	40005000 	.word	0x40005000
 81062b8:	2340      	movs	r3, #64	; 0x40
 81062ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81062be:	e124      	b.n	810650a <UART_SetConfig+0x5a2>
 81062c0:	2380      	movs	r3, #128	; 0x80
 81062c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81062c6:	e120      	b.n	810650a <UART_SetConfig+0x5a2>
 81062c8:	687b      	ldr	r3, [r7, #4]
 81062ca:	681b      	ldr	r3, [r3, #0]
 81062cc:	4acc      	ldr	r2, [pc, #816]	; (8106600 <UART_SetConfig+0x698>)
 81062ce:	4293      	cmp	r3, r2
 81062d0:	d176      	bne.n	81063c0 <UART_SetConfig+0x458>
 81062d2:	4bcc      	ldr	r3, [pc, #816]	; (8106604 <UART_SetConfig+0x69c>)
 81062d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81062d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81062da:	2b28      	cmp	r3, #40	; 0x28
 81062dc:	d86c      	bhi.n	81063b8 <UART_SetConfig+0x450>
 81062de:	a201      	add	r2, pc, #4	; (adr r2, 81062e4 <UART_SetConfig+0x37c>)
 81062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81062e4:	08106389 	.word	0x08106389
 81062e8:	081063b9 	.word	0x081063b9
 81062ec:	081063b9 	.word	0x081063b9
 81062f0:	081063b9 	.word	0x081063b9
 81062f4:	081063b9 	.word	0x081063b9
 81062f8:	081063b9 	.word	0x081063b9
 81062fc:	081063b9 	.word	0x081063b9
 8106300:	081063b9 	.word	0x081063b9
 8106304:	08106391 	.word	0x08106391
 8106308:	081063b9 	.word	0x081063b9
 810630c:	081063b9 	.word	0x081063b9
 8106310:	081063b9 	.word	0x081063b9
 8106314:	081063b9 	.word	0x081063b9
 8106318:	081063b9 	.word	0x081063b9
 810631c:	081063b9 	.word	0x081063b9
 8106320:	081063b9 	.word	0x081063b9
 8106324:	08106399 	.word	0x08106399
 8106328:	081063b9 	.word	0x081063b9
 810632c:	081063b9 	.word	0x081063b9
 8106330:	081063b9 	.word	0x081063b9
 8106334:	081063b9 	.word	0x081063b9
 8106338:	081063b9 	.word	0x081063b9
 810633c:	081063b9 	.word	0x081063b9
 8106340:	081063b9 	.word	0x081063b9
 8106344:	081063a1 	.word	0x081063a1
 8106348:	081063b9 	.word	0x081063b9
 810634c:	081063b9 	.word	0x081063b9
 8106350:	081063b9 	.word	0x081063b9
 8106354:	081063b9 	.word	0x081063b9
 8106358:	081063b9 	.word	0x081063b9
 810635c:	081063b9 	.word	0x081063b9
 8106360:	081063b9 	.word	0x081063b9
 8106364:	081063a9 	.word	0x081063a9
 8106368:	081063b9 	.word	0x081063b9
 810636c:	081063b9 	.word	0x081063b9
 8106370:	081063b9 	.word	0x081063b9
 8106374:	081063b9 	.word	0x081063b9
 8106378:	081063b9 	.word	0x081063b9
 810637c:	081063b9 	.word	0x081063b9
 8106380:	081063b9 	.word	0x081063b9
 8106384:	081063b1 	.word	0x081063b1
 8106388:	2301      	movs	r3, #1
 810638a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810638e:	e0bc      	b.n	810650a <UART_SetConfig+0x5a2>
 8106390:	2304      	movs	r3, #4
 8106392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106396:	e0b8      	b.n	810650a <UART_SetConfig+0x5a2>
 8106398:	2308      	movs	r3, #8
 810639a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810639e:	e0b4      	b.n	810650a <UART_SetConfig+0x5a2>
 81063a0:	2310      	movs	r3, #16
 81063a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063a6:	e0b0      	b.n	810650a <UART_SetConfig+0x5a2>
 81063a8:	2320      	movs	r3, #32
 81063aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063ae:	e0ac      	b.n	810650a <UART_SetConfig+0x5a2>
 81063b0:	2340      	movs	r3, #64	; 0x40
 81063b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063b6:	e0a8      	b.n	810650a <UART_SetConfig+0x5a2>
 81063b8:	2380      	movs	r3, #128	; 0x80
 81063ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063be:	e0a4      	b.n	810650a <UART_SetConfig+0x5a2>
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	4a90      	ldr	r2, [pc, #576]	; (8106608 <UART_SetConfig+0x6a0>)
 81063c6:	4293      	cmp	r3, r2
 81063c8:	d130      	bne.n	810642c <UART_SetConfig+0x4c4>
 81063ca:	4b8e      	ldr	r3, [pc, #568]	; (8106604 <UART_SetConfig+0x69c>)
 81063cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81063ce:	f003 0307 	and.w	r3, r3, #7
 81063d2:	2b05      	cmp	r3, #5
 81063d4:	d826      	bhi.n	8106424 <UART_SetConfig+0x4bc>
 81063d6:	a201      	add	r2, pc, #4	; (adr r2, 81063dc <UART_SetConfig+0x474>)
 81063d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81063dc:	081063f5 	.word	0x081063f5
 81063e0:	081063fd 	.word	0x081063fd
 81063e4:	08106405 	.word	0x08106405
 81063e8:	0810640d 	.word	0x0810640d
 81063ec:	08106415 	.word	0x08106415
 81063f0:	0810641d 	.word	0x0810641d
 81063f4:	2300      	movs	r3, #0
 81063f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81063fa:	e086      	b.n	810650a <UART_SetConfig+0x5a2>
 81063fc:	2304      	movs	r3, #4
 81063fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106402:	e082      	b.n	810650a <UART_SetConfig+0x5a2>
 8106404:	2308      	movs	r3, #8
 8106406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810640a:	e07e      	b.n	810650a <UART_SetConfig+0x5a2>
 810640c:	2310      	movs	r3, #16
 810640e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106412:	e07a      	b.n	810650a <UART_SetConfig+0x5a2>
 8106414:	2320      	movs	r3, #32
 8106416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810641a:	e076      	b.n	810650a <UART_SetConfig+0x5a2>
 810641c:	2340      	movs	r3, #64	; 0x40
 810641e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106422:	e072      	b.n	810650a <UART_SetConfig+0x5a2>
 8106424:	2380      	movs	r3, #128	; 0x80
 8106426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810642a:	e06e      	b.n	810650a <UART_SetConfig+0x5a2>
 810642c:	687b      	ldr	r3, [r7, #4]
 810642e:	681b      	ldr	r3, [r3, #0]
 8106430:	4a76      	ldr	r2, [pc, #472]	; (810660c <UART_SetConfig+0x6a4>)
 8106432:	4293      	cmp	r3, r2
 8106434:	d130      	bne.n	8106498 <UART_SetConfig+0x530>
 8106436:	4b73      	ldr	r3, [pc, #460]	; (8106604 <UART_SetConfig+0x69c>)
 8106438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810643a:	f003 0307 	and.w	r3, r3, #7
 810643e:	2b05      	cmp	r3, #5
 8106440:	d826      	bhi.n	8106490 <UART_SetConfig+0x528>
 8106442:	a201      	add	r2, pc, #4	; (adr r2, 8106448 <UART_SetConfig+0x4e0>)
 8106444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106448:	08106461 	.word	0x08106461
 810644c:	08106469 	.word	0x08106469
 8106450:	08106471 	.word	0x08106471
 8106454:	08106479 	.word	0x08106479
 8106458:	08106481 	.word	0x08106481
 810645c:	08106489 	.word	0x08106489
 8106460:	2300      	movs	r3, #0
 8106462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106466:	e050      	b.n	810650a <UART_SetConfig+0x5a2>
 8106468:	2304      	movs	r3, #4
 810646a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810646e:	e04c      	b.n	810650a <UART_SetConfig+0x5a2>
 8106470:	2308      	movs	r3, #8
 8106472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106476:	e048      	b.n	810650a <UART_SetConfig+0x5a2>
 8106478:	2310      	movs	r3, #16
 810647a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810647e:	e044      	b.n	810650a <UART_SetConfig+0x5a2>
 8106480:	2320      	movs	r3, #32
 8106482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106486:	e040      	b.n	810650a <UART_SetConfig+0x5a2>
 8106488:	2340      	movs	r3, #64	; 0x40
 810648a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 810648e:	e03c      	b.n	810650a <UART_SetConfig+0x5a2>
 8106490:	2380      	movs	r3, #128	; 0x80
 8106492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106496:	e038      	b.n	810650a <UART_SetConfig+0x5a2>
 8106498:	687b      	ldr	r3, [r7, #4]
 810649a:	681b      	ldr	r3, [r3, #0]
 810649c:	4a5c      	ldr	r2, [pc, #368]	; (8106610 <UART_SetConfig+0x6a8>)
 810649e:	4293      	cmp	r3, r2
 81064a0:	d130      	bne.n	8106504 <UART_SetConfig+0x59c>
 81064a2:	4b58      	ldr	r3, [pc, #352]	; (8106604 <UART_SetConfig+0x69c>)
 81064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81064a6:	f003 0307 	and.w	r3, r3, #7
 81064aa:	2b05      	cmp	r3, #5
 81064ac:	d826      	bhi.n	81064fc <UART_SetConfig+0x594>
 81064ae:	a201      	add	r2, pc, #4	; (adr r2, 81064b4 <UART_SetConfig+0x54c>)
 81064b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064b4:	081064cd 	.word	0x081064cd
 81064b8:	081064d5 	.word	0x081064d5
 81064bc:	081064dd 	.word	0x081064dd
 81064c0:	081064e5 	.word	0x081064e5
 81064c4:	081064ed 	.word	0x081064ed
 81064c8:	081064f5 	.word	0x081064f5
 81064cc:	2302      	movs	r3, #2
 81064ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064d2:	e01a      	b.n	810650a <UART_SetConfig+0x5a2>
 81064d4:	2304      	movs	r3, #4
 81064d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064da:	e016      	b.n	810650a <UART_SetConfig+0x5a2>
 81064dc:	2308      	movs	r3, #8
 81064de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064e2:	e012      	b.n	810650a <UART_SetConfig+0x5a2>
 81064e4:	2310      	movs	r3, #16
 81064e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064ea:	e00e      	b.n	810650a <UART_SetConfig+0x5a2>
 81064ec:	2320      	movs	r3, #32
 81064ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064f2:	e00a      	b.n	810650a <UART_SetConfig+0x5a2>
 81064f4:	2340      	movs	r3, #64	; 0x40
 81064f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 81064fa:	e006      	b.n	810650a <UART_SetConfig+0x5a2>
 81064fc:	2380      	movs	r3, #128	; 0x80
 81064fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8106502:	e002      	b.n	810650a <UART_SetConfig+0x5a2>
 8106504:	2380      	movs	r3, #128	; 0x80
 8106506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810650a:	687b      	ldr	r3, [r7, #4]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	4a40      	ldr	r2, [pc, #256]	; (8106610 <UART_SetConfig+0x6a8>)
 8106510:	4293      	cmp	r3, r2
 8106512:	f040 80ef 	bne.w	81066f4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8106516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 810651a:	2b20      	cmp	r3, #32
 810651c:	dc46      	bgt.n	81065ac <UART_SetConfig+0x644>
 810651e:	2b02      	cmp	r3, #2
 8106520:	f2c0 8081 	blt.w	8106626 <UART_SetConfig+0x6be>
 8106524:	3b02      	subs	r3, #2
 8106526:	2b1e      	cmp	r3, #30
 8106528:	d87d      	bhi.n	8106626 <UART_SetConfig+0x6be>
 810652a:	a201      	add	r2, pc, #4	; (adr r2, 8106530 <UART_SetConfig+0x5c8>)
 810652c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106530:	081065b3 	.word	0x081065b3
 8106534:	08106627 	.word	0x08106627
 8106538:	081065bb 	.word	0x081065bb
 810653c:	08106627 	.word	0x08106627
 8106540:	08106627 	.word	0x08106627
 8106544:	08106627 	.word	0x08106627
 8106548:	081065cb 	.word	0x081065cb
 810654c:	08106627 	.word	0x08106627
 8106550:	08106627 	.word	0x08106627
 8106554:	08106627 	.word	0x08106627
 8106558:	08106627 	.word	0x08106627
 810655c:	08106627 	.word	0x08106627
 8106560:	08106627 	.word	0x08106627
 8106564:	08106627 	.word	0x08106627
 8106568:	081065db 	.word	0x081065db
 810656c:	08106627 	.word	0x08106627
 8106570:	08106627 	.word	0x08106627
 8106574:	08106627 	.word	0x08106627
 8106578:	08106627 	.word	0x08106627
 810657c:	08106627 	.word	0x08106627
 8106580:	08106627 	.word	0x08106627
 8106584:	08106627 	.word	0x08106627
 8106588:	08106627 	.word	0x08106627
 810658c:	08106627 	.word	0x08106627
 8106590:	08106627 	.word	0x08106627
 8106594:	08106627 	.word	0x08106627
 8106598:	08106627 	.word	0x08106627
 810659c:	08106627 	.word	0x08106627
 81065a0:	08106627 	.word	0x08106627
 81065a4:	08106627 	.word	0x08106627
 81065a8:	08106619 	.word	0x08106619
 81065ac:	2b40      	cmp	r3, #64	; 0x40
 81065ae:	d036      	beq.n	810661e <UART_SetConfig+0x6b6>
 81065b0:	e039      	b.n	8106626 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81065b2:	f7fd fe47 	bl	8104244 <HAL_RCCEx_GetD3PCLK1Freq>
 81065b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81065b8:	e03b      	b.n	8106632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81065ba:	f107 0314 	add.w	r3, r7, #20
 81065be:	4618      	mov	r0, r3
 81065c0:	f7fd fe56 	bl	8104270 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81065c4:	69bb      	ldr	r3, [r7, #24]
 81065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81065c8:	e033      	b.n	8106632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81065ca:	f107 0308 	add.w	r3, r7, #8
 81065ce:	4618      	mov	r0, r3
 81065d0:	f7fd ffa2 	bl	8104518 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81065d4:	68fb      	ldr	r3, [r7, #12]
 81065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81065d8:	e02b      	b.n	8106632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81065da:	4b0a      	ldr	r3, [pc, #40]	; (8106604 <UART_SetConfig+0x69c>)
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	f003 0320 	and.w	r3, r3, #32
 81065e2:	2b00      	cmp	r3, #0
 81065e4:	d009      	beq.n	81065fa <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81065e6:	4b07      	ldr	r3, [pc, #28]	; (8106604 <UART_SetConfig+0x69c>)
 81065e8:	681b      	ldr	r3, [r3, #0]
 81065ea:	08db      	lsrs	r3, r3, #3
 81065ec:	f003 0303 	and.w	r3, r3, #3
 81065f0:	4a08      	ldr	r2, [pc, #32]	; (8106614 <UART_SetConfig+0x6ac>)
 81065f2:	fa22 f303 	lsr.w	r3, r2, r3
 81065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81065f8:	e01b      	b.n	8106632 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 81065fa:	4b06      	ldr	r3, [pc, #24]	; (8106614 <UART_SetConfig+0x6ac>)
 81065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81065fe:	e018      	b.n	8106632 <UART_SetConfig+0x6ca>
 8106600:	40011400 	.word	0x40011400
 8106604:	58024400 	.word	0x58024400
 8106608:	40007800 	.word	0x40007800
 810660c:	40007c00 	.word	0x40007c00
 8106610:	58000c00 	.word	0x58000c00
 8106614:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8106618:	4bc4      	ldr	r3, [pc, #784]	; (810692c <UART_SetConfig+0x9c4>)
 810661a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810661c:	e009      	b.n	8106632 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810661e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106622:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106624:	e005      	b.n	8106632 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8106626:	2300      	movs	r3, #0
 8106628:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810662a:	2301      	movs	r3, #1
 810662c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8106632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106634:	2b00      	cmp	r3, #0
 8106636:	f000 81da 	beq.w	81069ee <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810663a:	687b      	ldr	r3, [r7, #4]
 810663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810663e:	4abc      	ldr	r2, [pc, #752]	; (8106930 <UART_SetConfig+0x9c8>)
 8106640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106644:	461a      	mov	r2, r3
 8106646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106648:	fbb3 f3f2 	udiv	r3, r3, r2
 810664c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	685a      	ldr	r2, [r3, #4]
 8106652:	4613      	mov	r3, r2
 8106654:	005b      	lsls	r3, r3, #1
 8106656:	4413      	add	r3, r2
 8106658:	6a3a      	ldr	r2, [r7, #32]
 810665a:	429a      	cmp	r2, r3
 810665c:	d305      	bcc.n	810666a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810665e:	687b      	ldr	r3, [r7, #4]
 8106660:	685b      	ldr	r3, [r3, #4]
 8106662:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8106664:	6a3a      	ldr	r2, [r7, #32]
 8106666:	429a      	cmp	r2, r3
 8106668:	d903      	bls.n	8106672 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 810666a:	2301      	movs	r3, #1
 810666c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8106670:	e1bd      	b.n	81069ee <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8106672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106674:	4618      	mov	r0, r3
 8106676:	f04f 0100 	mov.w	r1, #0
 810667a:	687b      	ldr	r3, [r7, #4]
 810667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810667e:	4aac      	ldr	r2, [pc, #688]	; (8106930 <UART_SetConfig+0x9c8>)
 8106680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106684:	b29a      	uxth	r2, r3
 8106686:	f04f 0300 	mov.w	r3, #0
 810668a:	f7fa fb85 	bl	8100d98 <__aeabi_uldivmod>
 810668e:	4602      	mov	r2, r0
 8106690:	460b      	mov	r3, r1
 8106692:	4610      	mov	r0, r2
 8106694:	4619      	mov	r1, r3
 8106696:	f04f 0200 	mov.w	r2, #0
 810669a:	f04f 0300 	mov.w	r3, #0
 810669e:	020b      	lsls	r3, r1, #8
 81066a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81066a4:	0202      	lsls	r2, r0, #8
 81066a6:	6879      	ldr	r1, [r7, #4]
 81066a8:	6849      	ldr	r1, [r1, #4]
 81066aa:	0849      	lsrs	r1, r1, #1
 81066ac:	4608      	mov	r0, r1
 81066ae:	f04f 0100 	mov.w	r1, #0
 81066b2:	1814      	adds	r4, r2, r0
 81066b4:	eb43 0501 	adc.w	r5, r3, r1
 81066b8:	687b      	ldr	r3, [r7, #4]
 81066ba:	685b      	ldr	r3, [r3, #4]
 81066bc:	461a      	mov	r2, r3
 81066be:	f04f 0300 	mov.w	r3, #0
 81066c2:	4620      	mov	r0, r4
 81066c4:	4629      	mov	r1, r5
 81066c6:	f7fa fb67 	bl	8100d98 <__aeabi_uldivmod>
 81066ca:	4602      	mov	r2, r0
 81066cc:	460b      	mov	r3, r1
 81066ce:	4613      	mov	r3, r2
 81066d0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81066d8:	d308      	bcc.n	81066ec <UART_SetConfig+0x784>
 81066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81066dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81066e0:	d204      	bcs.n	81066ec <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81066e8:	60da      	str	r2, [r3, #12]
 81066ea:	e180      	b.n	81069ee <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 81066ec:	2301      	movs	r3, #1
 81066ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 81066f2:	e17c      	b.n	81069ee <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81066f4:	687b      	ldr	r3, [r7, #4]
 81066f6:	69db      	ldr	r3, [r3, #28]
 81066f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81066fc:	f040 80be 	bne.w	810687c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8106700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106704:	2b20      	cmp	r3, #32
 8106706:	dc49      	bgt.n	810679c <UART_SetConfig+0x834>
 8106708:	2b00      	cmp	r3, #0
 810670a:	db7c      	blt.n	8106806 <UART_SetConfig+0x89e>
 810670c:	2b20      	cmp	r3, #32
 810670e:	d87a      	bhi.n	8106806 <UART_SetConfig+0x89e>
 8106710:	a201      	add	r2, pc, #4	; (adr r2, 8106718 <UART_SetConfig+0x7b0>)
 8106712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106716:	bf00      	nop
 8106718:	081067a3 	.word	0x081067a3
 810671c:	081067ab 	.word	0x081067ab
 8106720:	08106807 	.word	0x08106807
 8106724:	08106807 	.word	0x08106807
 8106728:	081067b3 	.word	0x081067b3
 810672c:	08106807 	.word	0x08106807
 8106730:	08106807 	.word	0x08106807
 8106734:	08106807 	.word	0x08106807
 8106738:	081067c3 	.word	0x081067c3
 810673c:	08106807 	.word	0x08106807
 8106740:	08106807 	.word	0x08106807
 8106744:	08106807 	.word	0x08106807
 8106748:	08106807 	.word	0x08106807
 810674c:	08106807 	.word	0x08106807
 8106750:	08106807 	.word	0x08106807
 8106754:	08106807 	.word	0x08106807
 8106758:	081067d3 	.word	0x081067d3
 810675c:	08106807 	.word	0x08106807
 8106760:	08106807 	.word	0x08106807
 8106764:	08106807 	.word	0x08106807
 8106768:	08106807 	.word	0x08106807
 810676c:	08106807 	.word	0x08106807
 8106770:	08106807 	.word	0x08106807
 8106774:	08106807 	.word	0x08106807
 8106778:	08106807 	.word	0x08106807
 810677c:	08106807 	.word	0x08106807
 8106780:	08106807 	.word	0x08106807
 8106784:	08106807 	.word	0x08106807
 8106788:	08106807 	.word	0x08106807
 810678c:	08106807 	.word	0x08106807
 8106790:	08106807 	.word	0x08106807
 8106794:	08106807 	.word	0x08106807
 8106798:	081067f9 	.word	0x081067f9
 810679c:	2b40      	cmp	r3, #64	; 0x40
 810679e:	d02e      	beq.n	81067fe <UART_SetConfig+0x896>
 81067a0:	e031      	b.n	8106806 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81067a2:	f7fc fde3 	bl	810336c <HAL_RCC_GetPCLK1Freq>
 81067a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81067a8:	e033      	b.n	8106812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81067aa:	f7fc fdf5 	bl	8103398 <HAL_RCC_GetPCLK2Freq>
 81067ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 81067b0:	e02f      	b.n	8106812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81067b2:	f107 0314 	add.w	r3, r7, #20
 81067b6:	4618      	mov	r0, r3
 81067b8:	f7fd fd5a 	bl	8104270 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81067bc:	69bb      	ldr	r3, [r7, #24]
 81067be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81067c0:	e027      	b.n	8106812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81067c2:	f107 0308 	add.w	r3, r7, #8
 81067c6:	4618      	mov	r0, r3
 81067c8:	f7fd fea6 	bl	8104518 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81067cc:	68fb      	ldr	r3, [r7, #12]
 81067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81067d0:	e01f      	b.n	8106812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81067d2:	4b58      	ldr	r3, [pc, #352]	; (8106934 <UART_SetConfig+0x9cc>)
 81067d4:	681b      	ldr	r3, [r3, #0]
 81067d6:	f003 0320 	and.w	r3, r3, #32
 81067da:	2b00      	cmp	r3, #0
 81067dc:	d009      	beq.n	81067f2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81067de:	4b55      	ldr	r3, [pc, #340]	; (8106934 <UART_SetConfig+0x9cc>)
 81067e0:	681b      	ldr	r3, [r3, #0]
 81067e2:	08db      	lsrs	r3, r3, #3
 81067e4:	f003 0303 	and.w	r3, r3, #3
 81067e8:	4a53      	ldr	r2, [pc, #332]	; (8106938 <UART_SetConfig+0x9d0>)
 81067ea:	fa22 f303 	lsr.w	r3, r2, r3
 81067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81067f0:	e00f      	b.n	8106812 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 81067f2:	4b51      	ldr	r3, [pc, #324]	; (8106938 <UART_SetConfig+0x9d0>)
 81067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81067f6:	e00c      	b.n	8106812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81067f8:	4b4c      	ldr	r3, [pc, #304]	; (810692c <UART_SetConfig+0x9c4>)
 81067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 81067fc:	e009      	b.n	8106812 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81067fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106802:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106804:	e005      	b.n	8106812 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8106806:	2300      	movs	r3, #0
 8106808:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810680a:	2301      	movs	r3, #1
 810680c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8106810:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8106812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106814:	2b00      	cmp	r3, #0
 8106816:	f000 80ea 	beq.w	81069ee <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810681a:	687b      	ldr	r3, [r7, #4]
 810681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810681e:	4a44      	ldr	r2, [pc, #272]	; (8106930 <UART_SetConfig+0x9c8>)
 8106820:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8106824:	461a      	mov	r2, r3
 8106826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106828:	fbb3 f3f2 	udiv	r3, r3, r2
 810682c:	005a      	lsls	r2, r3, #1
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	685b      	ldr	r3, [r3, #4]
 8106832:	085b      	lsrs	r3, r3, #1
 8106834:	441a      	add	r2, r3
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	685b      	ldr	r3, [r3, #4]
 810683a:	fbb2 f3f3 	udiv	r3, r2, r3
 810683e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8106840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106842:	2b0f      	cmp	r3, #15
 8106844:	d916      	bls.n	8106874 <UART_SetConfig+0x90c>
 8106846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810684c:	d212      	bcs.n	8106874 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106850:	b29b      	uxth	r3, r3
 8106852:	f023 030f 	bic.w	r3, r3, #15
 8106856:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8106858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810685a:	085b      	lsrs	r3, r3, #1
 810685c:	b29b      	uxth	r3, r3
 810685e:	f003 0307 	and.w	r3, r3, #7
 8106862:	b29a      	uxth	r2, r3
 8106864:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8106866:	4313      	orrs	r3, r2
 8106868:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 810686a:	687b      	ldr	r3, [r7, #4]
 810686c:	681b      	ldr	r3, [r3, #0]
 810686e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8106870:	60da      	str	r2, [r3, #12]
 8106872:	e0bc      	b.n	81069ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8106874:	2301      	movs	r3, #1
 8106876:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 810687a:	e0b8      	b.n	81069ee <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 810687c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8106880:	2b20      	cmp	r3, #32
 8106882:	dc4b      	bgt.n	810691c <UART_SetConfig+0x9b4>
 8106884:	2b00      	cmp	r3, #0
 8106886:	f2c0 8087 	blt.w	8106998 <UART_SetConfig+0xa30>
 810688a:	2b20      	cmp	r3, #32
 810688c:	f200 8084 	bhi.w	8106998 <UART_SetConfig+0xa30>
 8106890:	a201      	add	r2, pc, #4	; (adr r2, 8106898 <UART_SetConfig+0x930>)
 8106892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106896:	bf00      	nop
 8106898:	08106923 	.word	0x08106923
 810689c:	0810693d 	.word	0x0810693d
 81068a0:	08106999 	.word	0x08106999
 81068a4:	08106999 	.word	0x08106999
 81068a8:	08106945 	.word	0x08106945
 81068ac:	08106999 	.word	0x08106999
 81068b0:	08106999 	.word	0x08106999
 81068b4:	08106999 	.word	0x08106999
 81068b8:	08106955 	.word	0x08106955
 81068bc:	08106999 	.word	0x08106999
 81068c0:	08106999 	.word	0x08106999
 81068c4:	08106999 	.word	0x08106999
 81068c8:	08106999 	.word	0x08106999
 81068cc:	08106999 	.word	0x08106999
 81068d0:	08106999 	.word	0x08106999
 81068d4:	08106999 	.word	0x08106999
 81068d8:	08106965 	.word	0x08106965
 81068dc:	08106999 	.word	0x08106999
 81068e0:	08106999 	.word	0x08106999
 81068e4:	08106999 	.word	0x08106999
 81068e8:	08106999 	.word	0x08106999
 81068ec:	08106999 	.word	0x08106999
 81068f0:	08106999 	.word	0x08106999
 81068f4:	08106999 	.word	0x08106999
 81068f8:	08106999 	.word	0x08106999
 81068fc:	08106999 	.word	0x08106999
 8106900:	08106999 	.word	0x08106999
 8106904:	08106999 	.word	0x08106999
 8106908:	08106999 	.word	0x08106999
 810690c:	08106999 	.word	0x08106999
 8106910:	08106999 	.word	0x08106999
 8106914:	08106999 	.word	0x08106999
 8106918:	0810698b 	.word	0x0810698b
 810691c:	2b40      	cmp	r3, #64	; 0x40
 810691e:	d037      	beq.n	8106990 <UART_SetConfig+0xa28>
 8106920:	e03a      	b.n	8106998 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8106922:	f7fc fd23 	bl	810336c <HAL_RCC_GetPCLK1Freq>
 8106926:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106928:	e03c      	b.n	81069a4 <UART_SetConfig+0xa3c>
 810692a:	bf00      	nop
 810692c:	003d0900 	.word	0x003d0900
 8106930:	0810cc00 	.word	0x0810cc00
 8106934:	58024400 	.word	0x58024400
 8106938:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810693c:	f7fc fd2c 	bl	8103398 <HAL_RCC_GetPCLK2Freq>
 8106940:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8106942:	e02f      	b.n	81069a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106944:	f107 0314 	add.w	r3, r7, #20
 8106948:	4618      	mov	r0, r3
 810694a:	f7fd fc91 	bl	8104270 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810694e:	69bb      	ldr	r3, [r7, #24]
 8106950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106952:	e027      	b.n	81069a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106954:	f107 0308 	add.w	r3, r7, #8
 8106958:	4618      	mov	r0, r3
 810695a:	f7fd fddd 	bl	8104518 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810695e:	68fb      	ldr	r3, [r7, #12]
 8106960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106962:	e01f      	b.n	81069a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106964:	4b2c      	ldr	r3, [pc, #176]	; (8106a18 <UART_SetConfig+0xab0>)
 8106966:	681b      	ldr	r3, [r3, #0]
 8106968:	f003 0320 	and.w	r3, r3, #32
 810696c:	2b00      	cmp	r3, #0
 810696e:	d009      	beq.n	8106984 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8106970:	4b29      	ldr	r3, [pc, #164]	; (8106a18 <UART_SetConfig+0xab0>)
 8106972:	681b      	ldr	r3, [r3, #0]
 8106974:	08db      	lsrs	r3, r3, #3
 8106976:	f003 0303 	and.w	r3, r3, #3
 810697a:	4a28      	ldr	r2, [pc, #160]	; (8106a1c <UART_SetConfig+0xab4>)
 810697c:	fa22 f303 	lsr.w	r3, r2, r3
 8106980:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8106982:	e00f      	b.n	81069a4 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8106984:	4b25      	ldr	r3, [pc, #148]	; (8106a1c <UART_SetConfig+0xab4>)
 8106986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106988:	e00c      	b.n	81069a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810698a:	4b25      	ldr	r3, [pc, #148]	; (8106a20 <UART_SetConfig+0xab8>)
 810698c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 810698e:	e009      	b.n	81069a4 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8106990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8106994:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8106996:	e005      	b.n	81069a4 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8106998:	2300      	movs	r3, #0
 810699a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 810699c:	2301      	movs	r3, #1
 810699e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 81069a2:	bf00      	nop
    }

    if (pclk != 0U)
 81069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81069a6:	2b00      	cmp	r3, #0
 81069a8:	d021      	beq.n	81069ee <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81069aa:	687b      	ldr	r3, [r7, #4]
 81069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81069ae:	4a1d      	ldr	r2, [pc, #116]	; (8106a24 <UART_SetConfig+0xabc>)
 81069b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81069b4:	461a      	mov	r2, r3
 81069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81069b8:	fbb3 f2f2 	udiv	r2, r3, r2
 81069bc:	687b      	ldr	r3, [r7, #4]
 81069be:	685b      	ldr	r3, [r3, #4]
 81069c0:	085b      	lsrs	r3, r3, #1
 81069c2:	441a      	add	r2, r3
 81069c4:	687b      	ldr	r3, [r7, #4]
 81069c6:	685b      	ldr	r3, [r3, #4]
 81069c8:	fbb2 f3f3 	udiv	r3, r2, r3
 81069cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81069ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069d0:	2b0f      	cmp	r3, #15
 81069d2:	d909      	bls.n	81069e8 <UART_SetConfig+0xa80>
 81069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81069da:	d205      	bcs.n	81069e8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 81069dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81069de:	b29a      	uxth	r2, r3
 81069e0:	687b      	ldr	r3, [r7, #4]
 81069e2:	681b      	ldr	r3, [r3, #0]
 81069e4:	60da      	str	r2, [r3, #12]
 81069e6:	e002      	b.n	81069ee <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 81069e8:	2301      	movs	r3, #1
 81069ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 81069ee:	687b      	ldr	r3, [r7, #4]
 81069f0:	2201      	movs	r2, #1
 81069f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 81069f6:	687b      	ldr	r3, [r7, #4]
 81069f8:	2201      	movs	r2, #1
 81069fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 81069fe:	687b      	ldr	r3, [r7, #4]
 8106a00:	2200      	movs	r2, #0
 8106a02:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	2200      	movs	r2, #0
 8106a08:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8106a0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8106a0e:	4618      	mov	r0, r3
 8106a10:	3738      	adds	r7, #56	; 0x38
 8106a12:	46bd      	mov	sp, r7
 8106a14:	bdb0      	pop	{r4, r5, r7, pc}
 8106a16:	bf00      	nop
 8106a18:	58024400 	.word	0x58024400
 8106a1c:	03d09000 	.word	0x03d09000
 8106a20:	003d0900 	.word	0x003d0900
 8106a24:	0810cc00 	.word	0x0810cc00

08106a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106a28:	b480      	push	{r7}
 8106a2a:	b083      	sub	sp, #12
 8106a2c:	af00      	add	r7, sp, #0
 8106a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a34:	f003 0301 	and.w	r3, r3, #1
 8106a38:	2b00      	cmp	r3, #0
 8106a3a:	d00a      	beq.n	8106a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106a3c:	687b      	ldr	r3, [r7, #4]
 8106a3e:	681b      	ldr	r3, [r3, #0]
 8106a40:	685b      	ldr	r3, [r3, #4]
 8106a42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8106a46:	687b      	ldr	r3, [r7, #4]
 8106a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106a4a:	687b      	ldr	r3, [r7, #4]
 8106a4c:	681b      	ldr	r3, [r3, #0]
 8106a4e:	430a      	orrs	r2, r1
 8106a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8106a52:	687b      	ldr	r3, [r7, #4]
 8106a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a56:	f003 0302 	and.w	r3, r3, #2
 8106a5a:	2b00      	cmp	r3, #0
 8106a5c:	d00a      	beq.n	8106a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8106a5e:	687b      	ldr	r3, [r7, #4]
 8106a60:	681b      	ldr	r3, [r3, #0]
 8106a62:	685b      	ldr	r3, [r3, #4]
 8106a64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106a68:	687b      	ldr	r3, [r7, #4]
 8106a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	681b      	ldr	r3, [r3, #0]
 8106a70:	430a      	orrs	r2, r1
 8106a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106a74:	687b      	ldr	r3, [r7, #4]
 8106a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a78:	f003 0304 	and.w	r3, r3, #4
 8106a7c:	2b00      	cmp	r3, #0
 8106a7e:	d00a      	beq.n	8106a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8106a80:	687b      	ldr	r3, [r7, #4]
 8106a82:	681b      	ldr	r3, [r3, #0]
 8106a84:	685b      	ldr	r3, [r3, #4]
 8106a86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8106a8a:	687b      	ldr	r3, [r7, #4]
 8106a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8106a8e:	687b      	ldr	r3, [r7, #4]
 8106a90:	681b      	ldr	r3, [r3, #0]
 8106a92:	430a      	orrs	r2, r1
 8106a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106a96:	687b      	ldr	r3, [r7, #4]
 8106a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106a9a:	f003 0308 	and.w	r3, r3, #8
 8106a9e:	2b00      	cmp	r3, #0
 8106aa0:	d00a      	beq.n	8106ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8106aa2:	687b      	ldr	r3, [r7, #4]
 8106aa4:	681b      	ldr	r3, [r3, #0]
 8106aa6:	685b      	ldr	r3, [r3, #4]
 8106aa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8106aac:	687b      	ldr	r3, [r7, #4]
 8106aae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8106ab0:	687b      	ldr	r3, [r7, #4]
 8106ab2:	681b      	ldr	r3, [r3, #0]
 8106ab4:	430a      	orrs	r2, r1
 8106ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106ab8:	687b      	ldr	r3, [r7, #4]
 8106aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106abc:	f003 0310 	and.w	r3, r3, #16
 8106ac0:	2b00      	cmp	r3, #0
 8106ac2:	d00a      	beq.n	8106ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8106ac4:	687b      	ldr	r3, [r7, #4]
 8106ac6:	681b      	ldr	r3, [r3, #0]
 8106ac8:	689b      	ldr	r3, [r3, #8]
 8106aca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8106ace:	687b      	ldr	r3, [r7, #4]
 8106ad0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8106ad2:	687b      	ldr	r3, [r7, #4]
 8106ad4:	681b      	ldr	r3, [r3, #0]
 8106ad6:	430a      	orrs	r2, r1
 8106ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8106ada:	687b      	ldr	r3, [r7, #4]
 8106adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106ade:	f003 0320 	and.w	r3, r3, #32
 8106ae2:	2b00      	cmp	r3, #0
 8106ae4:	d00a      	beq.n	8106afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8106ae6:	687b      	ldr	r3, [r7, #4]
 8106ae8:	681b      	ldr	r3, [r3, #0]
 8106aea:	689b      	ldr	r3, [r3, #8]
 8106aec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8106af0:	687b      	ldr	r3, [r7, #4]
 8106af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8106af4:	687b      	ldr	r3, [r7, #4]
 8106af6:	681b      	ldr	r3, [r3, #0]
 8106af8:	430a      	orrs	r2, r1
 8106afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8106afc:	687b      	ldr	r3, [r7, #4]
 8106afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8106b04:	2b00      	cmp	r3, #0
 8106b06:	d01a      	beq.n	8106b3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	681b      	ldr	r3, [r3, #0]
 8106b0c:	685b      	ldr	r3, [r3, #4]
 8106b0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8106b12:	687b      	ldr	r3, [r7, #4]
 8106b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106b16:	687b      	ldr	r3, [r7, #4]
 8106b18:	681b      	ldr	r3, [r3, #0]
 8106b1a:	430a      	orrs	r2, r1
 8106b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8106b1e:	687b      	ldr	r3, [r7, #4]
 8106b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8106b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106b26:	d10a      	bne.n	8106b3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	681b      	ldr	r3, [r3, #0]
 8106b2c:	685b      	ldr	r3, [r3, #4]
 8106b2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8106b32:	687b      	ldr	r3, [r7, #4]
 8106b34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8106b36:	687b      	ldr	r3, [r7, #4]
 8106b38:	681b      	ldr	r3, [r3, #0]
 8106b3a:	430a      	orrs	r2, r1
 8106b3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8106b3e:	687b      	ldr	r3, [r7, #4]
 8106b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106b46:	2b00      	cmp	r3, #0
 8106b48:	d00a      	beq.n	8106b60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106b4a:	687b      	ldr	r3, [r7, #4]
 8106b4c:	681b      	ldr	r3, [r3, #0]
 8106b4e:	685b      	ldr	r3, [r3, #4]
 8106b50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8106b54:	687b      	ldr	r3, [r7, #4]
 8106b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	681b      	ldr	r3, [r3, #0]
 8106b5c:	430a      	orrs	r2, r1
 8106b5e:	605a      	str	r2, [r3, #4]
  }
}
 8106b60:	bf00      	nop
 8106b62:	370c      	adds	r7, #12
 8106b64:	46bd      	mov	sp, r7
 8106b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b6a:	4770      	bx	lr

08106b6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8106b6c:	b580      	push	{r7, lr}
 8106b6e:	b086      	sub	sp, #24
 8106b70:	af02      	add	r7, sp, #8
 8106b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106b74:	687b      	ldr	r3, [r7, #4]
 8106b76:	2200      	movs	r2, #0
 8106b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8106b7c:	f7fb fe78 	bl	8102870 <HAL_GetTick>
 8106b80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8106b82:	687b      	ldr	r3, [r7, #4]
 8106b84:	681b      	ldr	r3, [r3, #0]
 8106b86:	681b      	ldr	r3, [r3, #0]
 8106b88:	f003 0308 	and.w	r3, r3, #8
 8106b8c:	2b08      	cmp	r3, #8
 8106b8e:	d10e      	bne.n	8106bae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106b90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106b94:	9300      	str	r3, [sp, #0]
 8106b96:	68fb      	ldr	r3, [r7, #12]
 8106b98:	2200      	movs	r2, #0
 8106b9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8106b9e:	6878      	ldr	r0, [r7, #4]
 8106ba0:	f000 f82f 	bl	8106c02 <UART_WaitOnFlagUntilTimeout>
 8106ba4:	4603      	mov	r3, r0
 8106ba6:	2b00      	cmp	r3, #0
 8106ba8:	d001      	beq.n	8106bae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106baa:	2303      	movs	r3, #3
 8106bac:	e025      	b.n	8106bfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8106bae:	687b      	ldr	r3, [r7, #4]
 8106bb0:	681b      	ldr	r3, [r3, #0]
 8106bb2:	681b      	ldr	r3, [r3, #0]
 8106bb4:	f003 0304 	and.w	r3, r3, #4
 8106bb8:	2b04      	cmp	r3, #4
 8106bba:	d10e      	bne.n	8106bda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8106bbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106bc0:	9300      	str	r3, [sp, #0]
 8106bc2:	68fb      	ldr	r3, [r7, #12]
 8106bc4:	2200      	movs	r2, #0
 8106bc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8106bca:	6878      	ldr	r0, [r7, #4]
 8106bcc:	f000 f819 	bl	8106c02 <UART_WaitOnFlagUntilTimeout>
 8106bd0:	4603      	mov	r3, r0
 8106bd2:	2b00      	cmp	r3, #0
 8106bd4:	d001      	beq.n	8106bda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106bd6:	2303      	movs	r3, #3
 8106bd8:	e00f      	b.n	8106bfa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8106bda:	687b      	ldr	r3, [r7, #4]
 8106bdc:	2220      	movs	r2, #32
 8106bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8106be2:	687b      	ldr	r3, [r7, #4]
 8106be4:	2220      	movs	r2, #32
 8106be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8106bea:	687b      	ldr	r3, [r7, #4]
 8106bec:	2200      	movs	r2, #0
 8106bee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8106bf0:	687b      	ldr	r3, [r7, #4]
 8106bf2:	2200      	movs	r2, #0
 8106bf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106bf8:	2300      	movs	r3, #0
}
 8106bfa:	4618      	mov	r0, r3
 8106bfc:	3710      	adds	r7, #16
 8106bfe:	46bd      	mov	sp, r7
 8106c00:	bd80      	pop	{r7, pc}

08106c02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8106c02:	b580      	push	{r7, lr}
 8106c04:	b09c      	sub	sp, #112	; 0x70
 8106c06:	af00      	add	r7, sp, #0
 8106c08:	60f8      	str	r0, [r7, #12]
 8106c0a:	60b9      	str	r1, [r7, #8]
 8106c0c:	603b      	str	r3, [r7, #0]
 8106c0e:	4613      	mov	r3, r2
 8106c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106c12:	e0a9      	b.n	8106d68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8106c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106c1a:	f000 80a5 	beq.w	8106d68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106c1e:	f7fb fe27 	bl	8102870 <HAL_GetTick>
 8106c22:	4602      	mov	r2, r0
 8106c24:	683b      	ldr	r3, [r7, #0]
 8106c26:	1ad3      	subs	r3, r2, r3
 8106c28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8106c2a:	429a      	cmp	r2, r3
 8106c2c:	d302      	bcc.n	8106c34 <UART_WaitOnFlagUntilTimeout+0x32>
 8106c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8106c30:	2b00      	cmp	r3, #0
 8106c32:	d140      	bne.n	8106cb6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8106c34:	68fb      	ldr	r3, [r7, #12]
 8106c36:	681b      	ldr	r3, [r3, #0]
 8106c38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106c3c:	e853 3f00 	ldrex	r3, [r3]
 8106c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8106c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106c44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106c48:	667b      	str	r3, [r7, #100]	; 0x64
 8106c4a:	68fb      	ldr	r3, [r7, #12]
 8106c4c:	681b      	ldr	r3, [r3, #0]
 8106c4e:	461a      	mov	r2, r3
 8106c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8106c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8106c54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8106c58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8106c5a:	e841 2300 	strex	r3, r2, [r1]
 8106c5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8106c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106c62:	2b00      	cmp	r3, #0
 8106c64:	d1e6      	bne.n	8106c34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106c66:	68fb      	ldr	r3, [r7, #12]
 8106c68:	681b      	ldr	r3, [r3, #0]
 8106c6a:	3308      	adds	r3, #8
 8106c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8106c70:	e853 3f00 	ldrex	r3, [r3]
 8106c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8106c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8106c78:	f023 0301 	bic.w	r3, r3, #1
 8106c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8106c7e:	68fb      	ldr	r3, [r7, #12]
 8106c80:	681b      	ldr	r3, [r3, #0]
 8106c82:	3308      	adds	r3, #8
 8106c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8106c86:	64ba      	str	r2, [r7, #72]	; 0x48
 8106c88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8106c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106c8e:	e841 2300 	strex	r3, r2, [r1]
 8106c92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8106c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8106c96:	2b00      	cmp	r3, #0
 8106c98:	d1e5      	bne.n	8106c66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8106c9a:	68fb      	ldr	r3, [r7, #12]
 8106c9c:	2220      	movs	r2, #32
 8106c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8106ca2:	68fb      	ldr	r3, [r7, #12]
 8106ca4:	2220      	movs	r2, #32
 8106ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8106caa:	68fb      	ldr	r3, [r7, #12]
 8106cac:	2200      	movs	r2, #0
 8106cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8106cb2:	2303      	movs	r3, #3
 8106cb4:	e069      	b.n	8106d8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8106cb6:	68fb      	ldr	r3, [r7, #12]
 8106cb8:	681b      	ldr	r3, [r3, #0]
 8106cba:	681b      	ldr	r3, [r3, #0]
 8106cbc:	f003 0304 	and.w	r3, r3, #4
 8106cc0:	2b00      	cmp	r3, #0
 8106cc2:	d051      	beq.n	8106d68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8106cc4:	68fb      	ldr	r3, [r7, #12]
 8106cc6:	681b      	ldr	r3, [r3, #0]
 8106cc8:	69db      	ldr	r3, [r3, #28]
 8106cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8106cd2:	d149      	bne.n	8106d68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8106cd4:	68fb      	ldr	r3, [r7, #12]
 8106cd6:	681b      	ldr	r3, [r3, #0]
 8106cd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106cdc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8106cde:	68fb      	ldr	r3, [r7, #12]
 8106ce0:	681b      	ldr	r3, [r3, #0]
 8106ce2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106ce6:	e853 3f00 	ldrex	r3, [r3]
 8106cea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8106cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106cee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8106cf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8106cf4:	68fb      	ldr	r3, [r7, #12]
 8106cf6:	681b      	ldr	r3, [r3, #0]
 8106cf8:	461a      	mov	r2, r3
 8106cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8106cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8106cfe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106d00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8106d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8106d04:	e841 2300 	strex	r3, r2, [r1]
 8106d08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8106d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8106d0c:	2b00      	cmp	r3, #0
 8106d0e:	d1e6      	bne.n	8106cde <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106d10:	68fb      	ldr	r3, [r7, #12]
 8106d12:	681b      	ldr	r3, [r3, #0]
 8106d14:	3308      	adds	r3, #8
 8106d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106d18:	697b      	ldr	r3, [r7, #20]
 8106d1a:	e853 3f00 	ldrex	r3, [r3]
 8106d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8106d20:	693b      	ldr	r3, [r7, #16]
 8106d22:	f023 0301 	bic.w	r3, r3, #1
 8106d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8106d28:	68fb      	ldr	r3, [r7, #12]
 8106d2a:	681b      	ldr	r3, [r3, #0]
 8106d2c:	3308      	adds	r3, #8
 8106d2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8106d30:	623a      	str	r2, [r7, #32]
 8106d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106d34:	69f9      	ldr	r1, [r7, #28]
 8106d36:	6a3a      	ldr	r2, [r7, #32]
 8106d38:	e841 2300 	strex	r3, r2, [r1]
 8106d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8106d3e:	69bb      	ldr	r3, [r7, #24]
 8106d40:	2b00      	cmp	r3, #0
 8106d42:	d1e5      	bne.n	8106d10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8106d44:	68fb      	ldr	r3, [r7, #12]
 8106d46:	2220      	movs	r2, #32
 8106d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8106d4c:	68fb      	ldr	r3, [r7, #12]
 8106d4e:	2220      	movs	r2, #32
 8106d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8106d54:	68fb      	ldr	r3, [r7, #12]
 8106d56:	2220      	movs	r2, #32
 8106d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106d5c:	68fb      	ldr	r3, [r7, #12]
 8106d5e:	2200      	movs	r2, #0
 8106d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8106d64:	2303      	movs	r3, #3
 8106d66:	e010      	b.n	8106d8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106d68:	68fb      	ldr	r3, [r7, #12]
 8106d6a:	681b      	ldr	r3, [r3, #0]
 8106d6c:	69da      	ldr	r2, [r3, #28]
 8106d6e:	68bb      	ldr	r3, [r7, #8]
 8106d70:	4013      	ands	r3, r2
 8106d72:	68ba      	ldr	r2, [r7, #8]
 8106d74:	429a      	cmp	r2, r3
 8106d76:	bf0c      	ite	eq
 8106d78:	2301      	moveq	r3, #1
 8106d7a:	2300      	movne	r3, #0
 8106d7c:	b2db      	uxtb	r3, r3
 8106d7e:	461a      	mov	r2, r3
 8106d80:	79fb      	ldrb	r3, [r7, #7]
 8106d82:	429a      	cmp	r2, r3
 8106d84:	f43f af46 	beq.w	8106c14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106d88:	2300      	movs	r3, #0
}
 8106d8a:	4618      	mov	r0, r3
 8106d8c:	3770      	adds	r7, #112	; 0x70
 8106d8e:	46bd      	mov	sp, r7
 8106d90:	bd80      	pop	{r7, pc}

08106d92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8106d92:	b480      	push	{r7}
 8106d94:	b085      	sub	sp, #20
 8106d96:	af00      	add	r7, sp, #0
 8106d98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106d9a:	687b      	ldr	r3, [r7, #4]
 8106d9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106da0:	2b01      	cmp	r3, #1
 8106da2:	d101      	bne.n	8106da8 <HAL_UARTEx_DisableFifoMode+0x16>
 8106da4:	2302      	movs	r3, #2
 8106da6:	e027      	b.n	8106df8 <HAL_UARTEx_DisableFifoMode+0x66>
 8106da8:	687b      	ldr	r3, [r7, #4]
 8106daa:	2201      	movs	r2, #1
 8106dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106db0:	687b      	ldr	r3, [r7, #4]
 8106db2:	2224      	movs	r2, #36	; 0x24
 8106db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106db8:	687b      	ldr	r3, [r7, #4]
 8106dba:	681b      	ldr	r3, [r3, #0]
 8106dbc:	681b      	ldr	r3, [r3, #0]
 8106dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106dc0:	687b      	ldr	r3, [r7, #4]
 8106dc2:	681b      	ldr	r3, [r3, #0]
 8106dc4:	681a      	ldr	r2, [r3, #0]
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	681b      	ldr	r3, [r3, #0]
 8106dca:	f022 0201 	bic.w	r2, r2, #1
 8106dce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106dd0:	68fb      	ldr	r3, [r7, #12]
 8106dd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8106dd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106dd8:	687b      	ldr	r3, [r7, #4]
 8106dda:	2200      	movs	r2, #0
 8106ddc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106dde:	687b      	ldr	r3, [r7, #4]
 8106de0:	681b      	ldr	r3, [r3, #0]
 8106de2:	68fa      	ldr	r2, [r7, #12]
 8106de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106de6:	687b      	ldr	r3, [r7, #4]
 8106de8:	2220      	movs	r2, #32
 8106dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106dee:	687b      	ldr	r3, [r7, #4]
 8106df0:	2200      	movs	r2, #0
 8106df2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106df6:	2300      	movs	r3, #0
}
 8106df8:	4618      	mov	r0, r3
 8106dfa:	3714      	adds	r7, #20
 8106dfc:	46bd      	mov	sp, r7
 8106dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e02:	4770      	bx	lr

08106e04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106e04:	b580      	push	{r7, lr}
 8106e06:	b084      	sub	sp, #16
 8106e08:	af00      	add	r7, sp, #0
 8106e0a:	6078      	str	r0, [r7, #4]
 8106e0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106e0e:	687b      	ldr	r3, [r7, #4]
 8106e10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106e14:	2b01      	cmp	r3, #1
 8106e16:	d101      	bne.n	8106e1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8106e18:	2302      	movs	r3, #2
 8106e1a:	e02d      	b.n	8106e78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8106e1c:	687b      	ldr	r3, [r7, #4]
 8106e1e:	2201      	movs	r2, #1
 8106e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106e24:	687b      	ldr	r3, [r7, #4]
 8106e26:	2224      	movs	r2, #36	; 0x24
 8106e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106e2c:	687b      	ldr	r3, [r7, #4]
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	681b      	ldr	r3, [r3, #0]
 8106e32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106e34:	687b      	ldr	r3, [r7, #4]
 8106e36:	681b      	ldr	r3, [r3, #0]
 8106e38:	681a      	ldr	r2, [r3, #0]
 8106e3a:	687b      	ldr	r3, [r7, #4]
 8106e3c:	681b      	ldr	r3, [r3, #0]
 8106e3e:	f022 0201 	bic.w	r2, r2, #1
 8106e42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8106e44:	687b      	ldr	r3, [r7, #4]
 8106e46:	681b      	ldr	r3, [r3, #0]
 8106e48:	689b      	ldr	r3, [r3, #8]
 8106e4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8106e4e:	687b      	ldr	r3, [r7, #4]
 8106e50:	681b      	ldr	r3, [r3, #0]
 8106e52:	683a      	ldr	r2, [r7, #0]
 8106e54:	430a      	orrs	r2, r1
 8106e56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106e58:	6878      	ldr	r0, [r7, #4]
 8106e5a:	f000 f84f 	bl	8106efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106e5e:	687b      	ldr	r3, [r7, #4]
 8106e60:	681b      	ldr	r3, [r3, #0]
 8106e62:	68fa      	ldr	r2, [r7, #12]
 8106e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106e66:	687b      	ldr	r3, [r7, #4]
 8106e68:	2220      	movs	r2, #32
 8106e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106e6e:	687b      	ldr	r3, [r7, #4]
 8106e70:	2200      	movs	r2, #0
 8106e72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106e76:	2300      	movs	r3, #0
}
 8106e78:	4618      	mov	r0, r3
 8106e7a:	3710      	adds	r7, #16
 8106e7c:	46bd      	mov	sp, r7
 8106e7e:	bd80      	pop	{r7, pc}

08106e80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106e80:	b580      	push	{r7, lr}
 8106e82:	b084      	sub	sp, #16
 8106e84:	af00      	add	r7, sp, #0
 8106e86:	6078      	str	r0, [r7, #4]
 8106e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106e8a:	687b      	ldr	r3, [r7, #4]
 8106e8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8106e90:	2b01      	cmp	r3, #1
 8106e92:	d101      	bne.n	8106e98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8106e94:	2302      	movs	r3, #2
 8106e96:	e02d      	b.n	8106ef4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	2201      	movs	r2, #1
 8106e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8106ea0:	687b      	ldr	r3, [r7, #4]
 8106ea2:	2224      	movs	r2, #36	; 0x24
 8106ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106ea8:	687b      	ldr	r3, [r7, #4]
 8106eaa:	681b      	ldr	r3, [r3, #0]
 8106eac:	681b      	ldr	r3, [r3, #0]
 8106eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	681b      	ldr	r3, [r3, #0]
 8106eb4:	681a      	ldr	r2, [r3, #0]
 8106eb6:	687b      	ldr	r3, [r7, #4]
 8106eb8:	681b      	ldr	r3, [r3, #0]
 8106eba:	f022 0201 	bic.w	r2, r2, #1
 8106ebe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106ec0:	687b      	ldr	r3, [r7, #4]
 8106ec2:	681b      	ldr	r3, [r3, #0]
 8106ec4:	689b      	ldr	r3, [r3, #8]
 8106ec6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8106eca:	687b      	ldr	r3, [r7, #4]
 8106ecc:	681b      	ldr	r3, [r3, #0]
 8106ece:	683a      	ldr	r2, [r7, #0]
 8106ed0:	430a      	orrs	r2, r1
 8106ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106ed4:	6878      	ldr	r0, [r7, #4]
 8106ed6:	f000 f811 	bl	8106efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106eda:	687b      	ldr	r3, [r7, #4]
 8106edc:	681b      	ldr	r3, [r3, #0]
 8106ede:	68fa      	ldr	r2, [r7, #12]
 8106ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106ee2:	687b      	ldr	r3, [r7, #4]
 8106ee4:	2220      	movs	r2, #32
 8106ee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	2200      	movs	r2, #0
 8106eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8106ef2:	2300      	movs	r3, #0
}
 8106ef4:	4618      	mov	r0, r3
 8106ef6:	3710      	adds	r7, #16
 8106ef8:	46bd      	mov	sp, r7
 8106efa:	bd80      	pop	{r7, pc}

08106efc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8106efc:	b480      	push	{r7}
 8106efe:	b085      	sub	sp, #20
 8106f00:	af00      	add	r7, sp, #0
 8106f02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106f04:	687b      	ldr	r3, [r7, #4]
 8106f06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106f08:	2b00      	cmp	r3, #0
 8106f0a:	d108      	bne.n	8106f1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8106f0c:	687b      	ldr	r3, [r7, #4]
 8106f0e:	2201      	movs	r2, #1
 8106f10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	2201      	movs	r2, #1
 8106f18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106f1c:	e031      	b.n	8106f82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8106f1e:	2310      	movs	r3, #16
 8106f20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8106f22:	2310      	movs	r3, #16
 8106f24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	681b      	ldr	r3, [r3, #0]
 8106f2a:	689b      	ldr	r3, [r3, #8]
 8106f2c:	0e5b      	lsrs	r3, r3, #25
 8106f2e:	b2db      	uxtb	r3, r3
 8106f30:	f003 0307 	and.w	r3, r3, #7
 8106f34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106f36:	687b      	ldr	r3, [r7, #4]
 8106f38:	681b      	ldr	r3, [r3, #0]
 8106f3a:	689b      	ldr	r3, [r3, #8]
 8106f3c:	0f5b      	lsrs	r3, r3, #29
 8106f3e:	b2db      	uxtb	r3, r3
 8106f40:	f003 0307 	and.w	r3, r3, #7
 8106f44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106f46:	7bbb      	ldrb	r3, [r7, #14]
 8106f48:	7b3a      	ldrb	r2, [r7, #12]
 8106f4a:	4911      	ldr	r1, [pc, #68]	; (8106f90 <UARTEx_SetNbDataToProcess+0x94>)
 8106f4c:	5c8a      	ldrb	r2, [r1, r2]
 8106f4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8106f52:	7b3a      	ldrb	r2, [r7, #12]
 8106f54:	490f      	ldr	r1, [pc, #60]	; (8106f94 <UARTEx_SetNbDataToProcess+0x98>)
 8106f56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8106f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8106f5c:	b29a      	uxth	r2, r3
 8106f5e:	687b      	ldr	r3, [r7, #4]
 8106f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106f64:	7bfb      	ldrb	r3, [r7, #15]
 8106f66:	7b7a      	ldrb	r2, [r7, #13]
 8106f68:	4909      	ldr	r1, [pc, #36]	; (8106f90 <UARTEx_SetNbDataToProcess+0x94>)
 8106f6a:	5c8a      	ldrb	r2, [r1, r2]
 8106f6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106f70:	7b7a      	ldrb	r2, [r7, #13]
 8106f72:	4908      	ldr	r1, [pc, #32]	; (8106f94 <UARTEx_SetNbDataToProcess+0x98>)
 8106f74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106f76:	fb93 f3f2 	sdiv	r3, r3, r2
 8106f7a:	b29a      	uxth	r2, r3
 8106f7c:	687b      	ldr	r3, [r7, #4]
 8106f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8106f82:	bf00      	nop
 8106f84:	3714      	adds	r7, #20
 8106f86:	46bd      	mov	sp, r7
 8106f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106f8c:	4770      	bx	lr
 8106f8e:	bf00      	nop
 8106f90:	0810cc18 	.word	0x0810cc18
 8106f94:	0810cc20 	.word	0x0810cc20

08106f98 <arm_sin_f32>:
 8106f98:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8107014 <arm_sin_f32+0x7c>
 8106f9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8106fa0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8106fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106fa8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8106fac:	d42c      	bmi.n	8107008 <arm_sin_f32+0x70>
 8106fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8106fb2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8107018 <arm_sin_f32+0x80>
 8106fb6:	4a19      	ldr	r2, [pc, #100]	; (810701c <arm_sin_f32+0x84>)
 8106fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8106fbc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8106fc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8106fc4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8106fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8106fcc:	bfa8      	it	ge
 8106fce:	ee77 7ae6 	vsubge.f32	s15, s15, s13
 8106fd2:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8106fd6:	ee17 3a10 	vmov	r3, s14
 8106fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106fde:	ee07 3a10 	vmov	s14, r3
 8106fe2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8106fe6:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8106fea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8106fee:	edd1 6a01 	vldr	s13, [r1, #4]
 8106ff2:	ee30 7a67 	vsub.f32	s14, s0, s15
 8106ff6:	ed91 0a00 	vldr	s0, [r1]
 8106ffa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8106ffe:	ee27 0a00 	vmul.f32	s0, s14, s0
 8107002:	ee30 0a27 	vadd.f32	s0, s0, s15
 8107006:	4770      	bx	lr
 8107008:	ee17 3a90 	vmov	r3, s15
 810700c:	3b01      	subs	r3, #1
 810700e:	ee07 3a90 	vmov	s15, r3
 8107012:	e7cc      	b.n	8106fae <arm_sin_f32+0x16>
 8107014:	3e22f983 	.word	0x3e22f983
 8107018:	44000000 	.word	0x44000000
 810701c:	0810cc28 	.word	0x0810cc28

08107020 <arm_cos_f32>:
 8107020:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8107094 <arm_cos_f32+0x74>
 8107024:	ee20 0a27 	vmul.f32	s0, s0, s15
 8107028:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 810702c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8107030:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8107034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8107038:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 810703c:	d504      	bpl.n	8107048 <arm_cos_f32+0x28>
 810703e:	ee17 3a90 	vmov	r3, s15
 8107042:	3b01      	subs	r3, #1
 8107044:	ee07 3a90 	vmov	s15, r3
 8107048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810704c:	eddf 6a12 	vldr	s13, [pc, #72]	; 8107098 <arm_cos_f32+0x78>
 8107050:	4a12      	ldr	r2, [pc, #72]	; (810709c <arm_cos_f32+0x7c>)
 8107052:	ee30 0a67 	vsub.f32	s0, s0, s15
 8107056:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810705a:	ee20 0a26 	vmul.f32	s0, s0, s13
 810705e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8107062:	ee17 3a90 	vmov	r3, s15
 8107066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810706a:	ee07 3a90 	vmov	s15, r3
 810706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107072:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8107076:	ee70 7a67 	vsub.f32	s15, s0, s15
 810707a:	edd1 6a01 	vldr	s13, [r1, #4]
 810707e:	ed91 0a00 	vldr	s0, [r1]
 8107082:	ee37 7a67 	vsub.f32	s14, s14, s15
 8107086:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810708a:	ee27 0a00 	vmul.f32	s0, s14, s0
 810708e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8107092:	4770      	bx	lr
 8107094:	3e22f983 	.word	0x3e22f983
 8107098:	44000000 	.word	0x44000000
 810709c:	0810cc28 	.word	0x0810cc28

081070a0 <__errno>:
 81070a0:	4b01      	ldr	r3, [pc, #4]	; (81070a8 <__errno+0x8>)
 81070a2:	6818      	ldr	r0, [r3, #0]
 81070a4:	4770      	bx	lr
 81070a6:	bf00      	nop
 81070a8:	10000060 	.word	0x10000060

081070ac <__sflush_r>:
 81070ac:	898a      	ldrh	r2, [r1, #12]
 81070ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81070b2:	4605      	mov	r5, r0
 81070b4:	0710      	lsls	r0, r2, #28
 81070b6:	460c      	mov	r4, r1
 81070b8:	d458      	bmi.n	810716c <__sflush_r+0xc0>
 81070ba:	684b      	ldr	r3, [r1, #4]
 81070bc:	2b00      	cmp	r3, #0
 81070be:	dc05      	bgt.n	81070cc <__sflush_r+0x20>
 81070c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 81070c2:	2b00      	cmp	r3, #0
 81070c4:	dc02      	bgt.n	81070cc <__sflush_r+0x20>
 81070c6:	2000      	movs	r0, #0
 81070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81070cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81070ce:	2e00      	cmp	r6, #0
 81070d0:	d0f9      	beq.n	81070c6 <__sflush_r+0x1a>
 81070d2:	2300      	movs	r3, #0
 81070d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 81070d8:	682f      	ldr	r7, [r5, #0]
 81070da:	602b      	str	r3, [r5, #0]
 81070dc:	d032      	beq.n	8107144 <__sflush_r+0x98>
 81070de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 81070e0:	89a3      	ldrh	r3, [r4, #12]
 81070e2:	075a      	lsls	r2, r3, #29
 81070e4:	d505      	bpl.n	81070f2 <__sflush_r+0x46>
 81070e6:	6863      	ldr	r3, [r4, #4]
 81070e8:	1ac0      	subs	r0, r0, r3
 81070ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 81070ec:	b10b      	cbz	r3, 81070f2 <__sflush_r+0x46>
 81070ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 81070f0:	1ac0      	subs	r0, r0, r3
 81070f2:	2300      	movs	r3, #0
 81070f4:	4602      	mov	r2, r0
 81070f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 81070f8:	6a21      	ldr	r1, [r4, #32]
 81070fa:	4628      	mov	r0, r5
 81070fc:	47b0      	blx	r6
 81070fe:	1c43      	adds	r3, r0, #1
 8107100:	89a3      	ldrh	r3, [r4, #12]
 8107102:	d106      	bne.n	8107112 <__sflush_r+0x66>
 8107104:	6829      	ldr	r1, [r5, #0]
 8107106:	291d      	cmp	r1, #29
 8107108:	d82c      	bhi.n	8107164 <__sflush_r+0xb8>
 810710a:	4a2a      	ldr	r2, [pc, #168]	; (81071b4 <__sflush_r+0x108>)
 810710c:	40ca      	lsrs	r2, r1
 810710e:	07d6      	lsls	r6, r2, #31
 8107110:	d528      	bpl.n	8107164 <__sflush_r+0xb8>
 8107112:	2200      	movs	r2, #0
 8107114:	6062      	str	r2, [r4, #4]
 8107116:	04d9      	lsls	r1, r3, #19
 8107118:	6922      	ldr	r2, [r4, #16]
 810711a:	6022      	str	r2, [r4, #0]
 810711c:	d504      	bpl.n	8107128 <__sflush_r+0x7c>
 810711e:	1c42      	adds	r2, r0, #1
 8107120:	d101      	bne.n	8107126 <__sflush_r+0x7a>
 8107122:	682b      	ldr	r3, [r5, #0]
 8107124:	b903      	cbnz	r3, 8107128 <__sflush_r+0x7c>
 8107126:	6560      	str	r0, [r4, #84]	; 0x54
 8107128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810712a:	602f      	str	r7, [r5, #0]
 810712c:	2900      	cmp	r1, #0
 810712e:	d0ca      	beq.n	81070c6 <__sflush_r+0x1a>
 8107130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107134:	4299      	cmp	r1, r3
 8107136:	d002      	beq.n	810713e <__sflush_r+0x92>
 8107138:	4628      	mov	r0, r5
 810713a:	f000 f99f 	bl	810747c <_free_r>
 810713e:	2000      	movs	r0, #0
 8107140:	6360      	str	r0, [r4, #52]	; 0x34
 8107142:	e7c1      	b.n	81070c8 <__sflush_r+0x1c>
 8107144:	6a21      	ldr	r1, [r4, #32]
 8107146:	2301      	movs	r3, #1
 8107148:	4628      	mov	r0, r5
 810714a:	47b0      	blx	r6
 810714c:	1c41      	adds	r1, r0, #1
 810714e:	d1c7      	bne.n	81070e0 <__sflush_r+0x34>
 8107150:	682b      	ldr	r3, [r5, #0]
 8107152:	2b00      	cmp	r3, #0
 8107154:	d0c4      	beq.n	81070e0 <__sflush_r+0x34>
 8107156:	2b1d      	cmp	r3, #29
 8107158:	d001      	beq.n	810715e <__sflush_r+0xb2>
 810715a:	2b16      	cmp	r3, #22
 810715c:	d101      	bne.n	8107162 <__sflush_r+0xb6>
 810715e:	602f      	str	r7, [r5, #0]
 8107160:	e7b1      	b.n	81070c6 <__sflush_r+0x1a>
 8107162:	89a3      	ldrh	r3, [r4, #12]
 8107164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8107168:	81a3      	strh	r3, [r4, #12]
 810716a:	e7ad      	b.n	81070c8 <__sflush_r+0x1c>
 810716c:	690f      	ldr	r7, [r1, #16]
 810716e:	2f00      	cmp	r7, #0
 8107170:	d0a9      	beq.n	81070c6 <__sflush_r+0x1a>
 8107172:	0793      	lsls	r3, r2, #30
 8107174:	680e      	ldr	r6, [r1, #0]
 8107176:	bf08      	it	eq
 8107178:	694b      	ldreq	r3, [r1, #20]
 810717a:	600f      	str	r7, [r1, #0]
 810717c:	bf18      	it	ne
 810717e:	2300      	movne	r3, #0
 8107180:	eba6 0807 	sub.w	r8, r6, r7
 8107184:	608b      	str	r3, [r1, #8]
 8107186:	f1b8 0f00 	cmp.w	r8, #0
 810718a:	dd9c      	ble.n	81070c6 <__sflush_r+0x1a>
 810718c:	6a21      	ldr	r1, [r4, #32]
 810718e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8107190:	4643      	mov	r3, r8
 8107192:	463a      	mov	r2, r7
 8107194:	4628      	mov	r0, r5
 8107196:	47b0      	blx	r6
 8107198:	2800      	cmp	r0, #0
 810719a:	dc06      	bgt.n	81071aa <__sflush_r+0xfe>
 810719c:	89a3      	ldrh	r3, [r4, #12]
 810719e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 81071a2:	81a3      	strh	r3, [r4, #12]
 81071a4:	f04f 30ff 	mov.w	r0, #4294967295
 81071a8:	e78e      	b.n	81070c8 <__sflush_r+0x1c>
 81071aa:	4407      	add	r7, r0
 81071ac:	eba8 0800 	sub.w	r8, r8, r0
 81071b0:	e7e9      	b.n	8107186 <__sflush_r+0xda>
 81071b2:	bf00      	nop
 81071b4:	20400001 	.word	0x20400001

081071b8 <_fflush_r>:
 81071b8:	b538      	push	{r3, r4, r5, lr}
 81071ba:	690b      	ldr	r3, [r1, #16]
 81071bc:	4605      	mov	r5, r0
 81071be:	460c      	mov	r4, r1
 81071c0:	b913      	cbnz	r3, 81071c8 <_fflush_r+0x10>
 81071c2:	2500      	movs	r5, #0
 81071c4:	4628      	mov	r0, r5
 81071c6:	bd38      	pop	{r3, r4, r5, pc}
 81071c8:	b118      	cbz	r0, 81071d2 <_fflush_r+0x1a>
 81071ca:	6983      	ldr	r3, [r0, #24]
 81071cc:	b90b      	cbnz	r3, 81071d2 <_fflush_r+0x1a>
 81071ce:	f000 f887 	bl	81072e0 <__sinit>
 81071d2:	4b14      	ldr	r3, [pc, #80]	; (8107224 <_fflush_r+0x6c>)
 81071d4:	429c      	cmp	r4, r3
 81071d6:	d11b      	bne.n	8107210 <_fflush_r+0x58>
 81071d8:	686c      	ldr	r4, [r5, #4]
 81071da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81071de:	2b00      	cmp	r3, #0
 81071e0:	d0ef      	beq.n	81071c2 <_fflush_r+0xa>
 81071e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81071e4:	07d0      	lsls	r0, r2, #31
 81071e6:	d404      	bmi.n	81071f2 <_fflush_r+0x3a>
 81071e8:	0599      	lsls	r1, r3, #22
 81071ea:	d402      	bmi.n	81071f2 <_fflush_r+0x3a>
 81071ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81071ee:	f000 f93a 	bl	8107466 <__retarget_lock_acquire_recursive>
 81071f2:	4628      	mov	r0, r5
 81071f4:	4621      	mov	r1, r4
 81071f6:	f7ff ff59 	bl	81070ac <__sflush_r>
 81071fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81071fc:	07da      	lsls	r2, r3, #31
 81071fe:	4605      	mov	r5, r0
 8107200:	d4e0      	bmi.n	81071c4 <_fflush_r+0xc>
 8107202:	89a3      	ldrh	r3, [r4, #12]
 8107204:	059b      	lsls	r3, r3, #22
 8107206:	d4dd      	bmi.n	81071c4 <_fflush_r+0xc>
 8107208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810720a:	f000 f92d 	bl	8107468 <__retarget_lock_release_recursive>
 810720e:	e7d9      	b.n	81071c4 <_fflush_r+0xc>
 8107210:	4b05      	ldr	r3, [pc, #20]	; (8107228 <_fflush_r+0x70>)
 8107212:	429c      	cmp	r4, r3
 8107214:	d101      	bne.n	810721a <_fflush_r+0x62>
 8107216:	68ac      	ldr	r4, [r5, #8]
 8107218:	e7df      	b.n	81071da <_fflush_r+0x22>
 810721a:	4b04      	ldr	r3, [pc, #16]	; (810722c <_fflush_r+0x74>)
 810721c:	429c      	cmp	r4, r3
 810721e:	bf08      	it	eq
 8107220:	68ec      	ldreq	r4, [r5, #12]
 8107222:	e7da      	b.n	81071da <_fflush_r+0x22>
 8107224:	0810d44c 	.word	0x0810d44c
 8107228:	0810d46c 	.word	0x0810d46c
 810722c:	0810d42c 	.word	0x0810d42c

08107230 <std>:
 8107230:	2300      	movs	r3, #0
 8107232:	b510      	push	{r4, lr}
 8107234:	4604      	mov	r4, r0
 8107236:	e9c0 3300 	strd	r3, r3, [r0]
 810723a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810723e:	6083      	str	r3, [r0, #8]
 8107240:	8181      	strh	r1, [r0, #12]
 8107242:	6643      	str	r3, [r0, #100]	; 0x64
 8107244:	81c2      	strh	r2, [r0, #14]
 8107246:	6183      	str	r3, [r0, #24]
 8107248:	4619      	mov	r1, r3
 810724a:	2208      	movs	r2, #8
 810724c:	305c      	adds	r0, #92	; 0x5c
 810724e:	f000 f90c 	bl	810746a <memset>
 8107252:	4b05      	ldr	r3, [pc, #20]	; (8107268 <std+0x38>)
 8107254:	6263      	str	r3, [r4, #36]	; 0x24
 8107256:	4b05      	ldr	r3, [pc, #20]	; (810726c <std+0x3c>)
 8107258:	62a3      	str	r3, [r4, #40]	; 0x28
 810725a:	4b05      	ldr	r3, [pc, #20]	; (8107270 <std+0x40>)
 810725c:	62e3      	str	r3, [r4, #44]	; 0x2c
 810725e:	4b05      	ldr	r3, [pc, #20]	; (8107274 <std+0x44>)
 8107260:	6224      	str	r4, [r4, #32]
 8107262:	6323      	str	r3, [r4, #48]	; 0x30
 8107264:	bd10      	pop	{r4, pc}
 8107266:	bf00      	nop
 8107268:	081085d9 	.word	0x081085d9
 810726c:	081085fb 	.word	0x081085fb
 8107270:	08108633 	.word	0x08108633
 8107274:	08108657 	.word	0x08108657

08107278 <_cleanup_r>:
 8107278:	4901      	ldr	r1, [pc, #4]	; (8107280 <_cleanup_r+0x8>)
 810727a:	f000 b8af 	b.w	81073dc <_fwalk_reent>
 810727e:	bf00      	nop
 8107280:	081071b9 	.word	0x081071b9

08107284 <__sfmoreglue>:
 8107284:	b570      	push	{r4, r5, r6, lr}
 8107286:	1e4a      	subs	r2, r1, #1
 8107288:	2568      	movs	r5, #104	; 0x68
 810728a:	4355      	muls	r5, r2
 810728c:	460e      	mov	r6, r1
 810728e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8107292:	f000 f943 	bl	810751c <_malloc_r>
 8107296:	4604      	mov	r4, r0
 8107298:	b140      	cbz	r0, 81072ac <__sfmoreglue+0x28>
 810729a:	2100      	movs	r1, #0
 810729c:	e9c0 1600 	strd	r1, r6, [r0]
 81072a0:	300c      	adds	r0, #12
 81072a2:	60a0      	str	r0, [r4, #8]
 81072a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 81072a8:	f000 f8df 	bl	810746a <memset>
 81072ac:	4620      	mov	r0, r4
 81072ae:	bd70      	pop	{r4, r5, r6, pc}

081072b0 <__sfp_lock_acquire>:
 81072b0:	4801      	ldr	r0, [pc, #4]	; (81072b8 <__sfp_lock_acquire+0x8>)
 81072b2:	f000 b8d8 	b.w	8107466 <__retarget_lock_acquire_recursive>
 81072b6:	bf00      	nop
 81072b8:	100105cc 	.word	0x100105cc

081072bc <__sfp_lock_release>:
 81072bc:	4801      	ldr	r0, [pc, #4]	; (81072c4 <__sfp_lock_release+0x8>)
 81072be:	f000 b8d3 	b.w	8107468 <__retarget_lock_release_recursive>
 81072c2:	bf00      	nop
 81072c4:	100105cc 	.word	0x100105cc

081072c8 <__sinit_lock_acquire>:
 81072c8:	4801      	ldr	r0, [pc, #4]	; (81072d0 <__sinit_lock_acquire+0x8>)
 81072ca:	f000 b8cc 	b.w	8107466 <__retarget_lock_acquire_recursive>
 81072ce:	bf00      	nop
 81072d0:	100105c7 	.word	0x100105c7

081072d4 <__sinit_lock_release>:
 81072d4:	4801      	ldr	r0, [pc, #4]	; (81072dc <__sinit_lock_release+0x8>)
 81072d6:	f000 b8c7 	b.w	8107468 <__retarget_lock_release_recursive>
 81072da:	bf00      	nop
 81072dc:	100105c7 	.word	0x100105c7

081072e0 <__sinit>:
 81072e0:	b510      	push	{r4, lr}
 81072e2:	4604      	mov	r4, r0
 81072e4:	f7ff fff0 	bl	81072c8 <__sinit_lock_acquire>
 81072e8:	69a3      	ldr	r3, [r4, #24]
 81072ea:	b11b      	cbz	r3, 81072f4 <__sinit+0x14>
 81072ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81072f0:	f7ff bff0 	b.w	81072d4 <__sinit_lock_release>
 81072f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 81072f8:	6523      	str	r3, [r4, #80]	; 0x50
 81072fa:	4b13      	ldr	r3, [pc, #76]	; (8107348 <__sinit+0x68>)
 81072fc:	4a13      	ldr	r2, [pc, #76]	; (810734c <__sinit+0x6c>)
 81072fe:	681b      	ldr	r3, [r3, #0]
 8107300:	62a2      	str	r2, [r4, #40]	; 0x28
 8107302:	42a3      	cmp	r3, r4
 8107304:	bf04      	itt	eq
 8107306:	2301      	moveq	r3, #1
 8107308:	61a3      	streq	r3, [r4, #24]
 810730a:	4620      	mov	r0, r4
 810730c:	f000 f820 	bl	8107350 <__sfp>
 8107310:	6060      	str	r0, [r4, #4]
 8107312:	4620      	mov	r0, r4
 8107314:	f000 f81c 	bl	8107350 <__sfp>
 8107318:	60a0      	str	r0, [r4, #8]
 810731a:	4620      	mov	r0, r4
 810731c:	f000 f818 	bl	8107350 <__sfp>
 8107320:	2200      	movs	r2, #0
 8107322:	60e0      	str	r0, [r4, #12]
 8107324:	2104      	movs	r1, #4
 8107326:	6860      	ldr	r0, [r4, #4]
 8107328:	f7ff ff82 	bl	8107230 <std>
 810732c:	68a0      	ldr	r0, [r4, #8]
 810732e:	2201      	movs	r2, #1
 8107330:	2109      	movs	r1, #9
 8107332:	f7ff ff7d 	bl	8107230 <std>
 8107336:	68e0      	ldr	r0, [r4, #12]
 8107338:	2202      	movs	r2, #2
 810733a:	2112      	movs	r1, #18
 810733c:	f7ff ff78 	bl	8107230 <std>
 8107340:	2301      	movs	r3, #1
 8107342:	61a3      	str	r3, [r4, #24]
 8107344:	e7d2      	b.n	81072ec <__sinit+0xc>
 8107346:	bf00      	nop
 8107348:	0810d48c 	.word	0x0810d48c
 810734c:	08107279 	.word	0x08107279

08107350 <__sfp>:
 8107350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107352:	4607      	mov	r7, r0
 8107354:	f7ff ffac 	bl	81072b0 <__sfp_lock_acquire>
 8107358:	4b1e      	ldr	r3, [pc, #120]	; (81073d4 <__sfp+0x84>)
 810735a:	681e      	ldr	r6, [r3, #0]
 810735c:	69b3      	ldr	r3, [r6, #24]
 810735e:	b913      	cbnz	r3, 8107366 <__sfp+0x16>
 8107360:	4630      	mov	r0, r6
 8107362:	f7ff ffbd 	bl	81072e0 <__sinit>
 8107366:	3648      	adds	r6, #72	; 0x48
 8107368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 810736c:	3b01      	subs	r3, #1
 810736e:	d503      	bpl.n	8107378 <__sfp+0x28>
 8107370:	6833      	ldr	r3, [r6, #0]
 8107372:	b30b      	cbz	r3, 81073b8 <__sfp+0x68>
 8107374:	6836      	ldr	r6, [r6, #0]
 8107376:	e7f7      	b.n	8107368 <__sfp+0x18>
 8107378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 810737c:	b9d5      	cbnz	r5, 81073b4 <__sfp+0x64>
 810737e:	4b16      	ldr	r3, [pc, #88]	; (81073d8 <__sfp+0x88>)
 8107380:	60e3      	str	r3, [r4, #12]
 8107382:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8107386:	6665      	str	r5, [r4, #100]	; 0x64
 8107388:	f000 f86c 	bl	8107464 <__retarget_lock_init_recursive>
 810738c:	f7ff ff96 	bl	81072bc <__sfp_lock_release>
 8107390:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8107394:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8107398:	6025      	str	r5, [r4, #0]
 810739a:	61a5      	str	r5, [r4, #24]
 810739c:	2208      	movs	r2, #8
 810739e:	4629      	mov	r1, r5
 81073a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 81073a4:	f000 f861 	bl	810746a <memset>
 81073a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 81073ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 81073b0:	4620      	mov	r0, r4
 81073b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81073b4:	3468      	adds	r4, #104	; 0x68
 81073b6:	e7d9      	b.n	810736c <__sfp+0x1c>
 81073b8:	2104      	movs	r1, #4
 81073ba:	4638      	mov	r0, r7
 81073bc:	f7ff ff62 	bl	8107284 <__sfmoreglue>
 81073c0:	4604      	mov	r4, r0
 81073c2:	6030      	str	r0, [r6, #0]
 81073c4:	2800      	cmp	r0, #0
 81073c6:	d1d5      	bne.n	8107374 <__sfp+0x24>
 81073c8:	f7ff ff78 	bl	81072bc <__sfp_lock_release>
 81073cc:	230c      	movs	r3, #12
 81073ce:	603b      	str	r3, [r7, #0]
 81073d0:	e7ee      	b.n	81073b0 <__sfp+0x60>
 81073d2:	bf00      	nop
 81073d4:	0810d48c 	.word	0x0810d48c
 81073d8:	ffff0001 	.word	0xffff0001

081073dc <_fwalk_reent>:
 81073dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81073e0:	4606      	mov	r6, r0
 81073e2:	4688      	mov	r8, r1
 81073e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 81073e8:	2700      	movs	r7, #0
 81073ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 81073ee:	f1b9 0901 	subs.w	r9, r9, #1
 81073f2:	d505      	bpl.n	8107400 <_fwalk_reent+0x24>
 81073f4:	6824      	ldr	r4, [r4, #0]
 81073f6:	2c00      	cmp	r4, #0
 81073f8:	d1f7      	bne.n	81073ea <_fwalk_reent+0xe>
 81073fa:	4638      	mov	r0, r7
 81073fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107400:	89ab      	ldrh	r3, [r5, #12]
 8107402:	2b01      	cmp	r3, #1
 8107404:	d907      	bls.n	8107416 <_fwalk_reent+0x3a>
 8107406:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810740a:	3301      	adds	r3, #1
 810740c:	d003      	beq.n	8107416 <_fwalk_reent+0x3a>
 810740e:	4629      	mov	r1, r5
 8107410:	4630      	mov	r0, r6
 8107412:	47c0      	blx	r8
 8107414:	4307      	orrs	r7, r0
 8107416:	3568      	adds	r5, #104	; 0x68
 8107418:	e7e9      	b.n	81073ee <_fwalk_reent+0x12>
	...

0810741c <__libc_init_array>:
 810741c:	b570      	push	{r4, r5, r6, lr}
 810741e:	4d0d      	ldr	r5, [pc, #52]	; (8107454 <__libc_init_array+0x38>)
 8107420:	4c0d      	ldr	r4, [pc, #52]	; (8107458 <__libc_init_array+0x3c>)
 8107422:	1b64      	subs	r4, r4, r5
 8107424:	10a4      	asrs	r4, r4, #2
 8107426:	2600      	movs	r6, #0
 8107428:	42a6      	cmp	r6, r4
 810742a:	d109      	bne.n	8107440 <__libc_init_array+0x24>
 810742c:	4d0b      	ldr	r5, [pc, #44]	; (810745c <__libc_init_array+0x40>)
 810742e:	4c0c      	ldr	r4, [pc, #48]	; (8107460 <__libc_init_array+0x44>)
 8107430:	f005 fbc0 	bl	810cbb4 <_init>
 8107434:	1b64      	subs	r4, r4, r5
 8107436:	10a4      	asrs	r4, r4, #2
 8107438:	2600      	movs	r6, #0
 810743a:	42a6      	cmp	r6, r4
 810743c:	d105      	bne.n	810744a <__libc_init_array+0x2e>
 810743e:	bd70      	pop	{r4, r5, r6, pc}
 8107440:	f855 3b04 	ldr.w	r3, [r5], #4
 8107444:	4798      	blx	r3
 8107446:	3601      	adds	r6, #1
 8107448:	e7ee      	b.n	8107428 <__libc_init_array+0xc>
 810744a:	f855 3b04 	ldr.w	r3, [r5], #4
 810744e:	4798      	blx	r3
 8107450:	3601      	adds	r6, #1
 8107452:	e7f2      	b.n	810743a <__libc_init_array+0x1e>
 8107454:	0810d930 	.word	0x0810d930
 8107458:	0810d930 	.word	0x0810d930
 810745c:	0810d930 	.word	0x0810d930
 8107460:	0810d934 	.word	0x0810d934

08107464 <__retarget_lock_init_recursive>:
 8107464:	4770      	bx	lr

08107466 <__retarget_lock_acquire_recursive>:
 8107466:	4770      	bx	lr

08107468 <__retarget_lock_release_recursive>:
 8107468:	4770      	bx	lr

0810746a <memset>:
 810746a:	4402      	add	r2, r0
 810746c:	4603      	mov	r3, r0
 810746e:	4293      	cmp	r3, r2
 8107470:	d100      	bne.n	8107474 <memset+0xa>
 8107472:	4770      	bx	lr
 8107474:	f803 1b01 	strb.w	r1, [r3], #1
 8107478:	e7f9      	b.n	810746e <memset+0x4>
	...

0810747c <_free_r>:
 810747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810747e:	2900      	cmp	r1, #0
 8107480:	d048      	beq.n	8107514 <_free_r+0x98>
 8107482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107486:	9001      	str	r0, [sp, #4]
 8107488:	2b00      	cmp	r3, #0
 810748a:	f1a1 0404 	sub.w	r4, r1, #4
 810748e:	bfb8      	it	lt
 8107490:	18e4      	addlt	r4, r4, r3
 8107492:	f003 fb03 	bl	810aa9c <__malloc_lock>
 8107496:	4a20      	ldr	r2, [pc, #128]	; (8107518 <_free_r+0x9c>)
 8107498:	9801      	ldr	r0, [sp, #4]
 810749a:	6813      	ldr	r3, [r2, #0]
 810749c:	4615      	mov	r5, r2
 810749e:	b933      	cbnz	r3, 81074ae <_free_r+0x32>
 81074a0:	6063      	str	r3, [r4, #4]
 81074a2:	6014      	str	r4, [r2, #0]
 81074a4:	b003      	add	sp, #12
 81074a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81074aa:	f003 bafd 	b.w	810aaa8 <__malloc_unlock>
 81074ae:	42a3      	cmp	r3, r4
 81074b0:	d90b      	bls.n	81074ca <_free_r+0x4e>
 81074b2:	6821      	ldr	r1, [r4, #0]
 81074b4:	1862      	adds	r2, r4, r1
 81074b6:	4293      	cmp	r3, r2
 81074b8:	bf04      	itt	eq
 81074ba:	681a      	ldreq	r2, [r3, #0]
 81074bc:	685b      	ldreq	r3, [r3, #4]
 81074be:	6063      	str	r3, [r4, #4]
 81074c0:	bf04      	itt	eq
 81074c2:	1852      	addeq	r2, r2, r1
 81074c4:	6022      	streq	r2, [r4, #0]
 81074c6:	602c      	str	r4, [r5, #0]
 81074c8:	e7ec      	b.n	81074a4 <_free_r+0x28>
 81074ca:	461a      	mov	r2, r3
 81074cc:	685b      	ldr	r3, [r3, #4]
 81074ce:	b10b      	cbz	r3, 81074d4 <_free_r+0x58>
 81074d0:	42a3      	cmp	r3, r4
 81074d2:	d9fa      	bls.n	81074ca <_free_r+0x4e>
 81074d4:	6811      	ldr	r1, [r2, #0]
 81074d6:	1855      	adds	r5, r2, r1
 81074d8:	42a5      	cmp	r5, r4
 81074da:	d10b      	bne.n	81074f4 <_free_r+0x78>
 81074dc:	6824      	ldr	r4, [r4, #0]
 81074de:	4421      	add	r1, r4
 81074e0:	1854      	adds	r4, r2, r1
 81074e2:	42a3      	cmp	r3, r4
 81074e4:	6011      	str	r1, [r2, #0]
 81074e6:	d1dd      	bne.n	81074a4 <_free_r+0x28>
 81074e8:	681c      	ldr	r4, [r3, #0]
 81074ea:	685b      	ldr	r3, [r3, #4]
 81074ec:	6053      	str	r3, [r2, #4]
 81074ee:	4421      	add	r1, r4
 81074f0:	6011      	str	r1, [r2, #0]
 81074f2:	e7d7      	b.n	81074a4 <_free_r+0x28>
 81074f4:	d902      	bls.n	81074fc <_free_r+0x80>
 81074f6:	230c      	movs	r3, #12
 81074f8:	6003      	str	r3, [r0, #0]
 81074fa:	e7d3      	b.n	81074a4 <_free_r+0x28>
 81074fc:	6825      	ldr	r5, [r4, #0]
 81074fe:	1961      	adds	r1, r4, r5
 8107500:	428b      	cmp	r3, r1
 8107502:	bf04      	itt	eq
 8107504:	6819      	ldreq	r1, [r3, #0]
 8107506:	685b      	ldreq	r3, [r3, #4]
 8107508:	6063      	str	r3, [r4, #4]
 810750a:	bf04      	itt	eq
 810750c:	1949      	addeq	r1, r1, r5
 810750e:	6021      	streq	r1, [r4, #0]
 8107510:	6054      	str	r4, [r2, #4]
 8107512:	e7c7      	b.n	81074a4 <_free_r+0x28>
 8107514:	b003      	add	sp, #12
 8107516:	bd30      	pop	{r4, r5, pc}
 8107518:	10000260 	.word	0x10000260

0810751c <_malloc_r>:
 810751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810751e:	1ccd      	adds	r5, r1, #3
 8107520:	f025 0503 	bic.w	r5, r5, #3
 8107524:	3508      	adds	r5, #8
 8107526:	2d0c      	cmp	r5, #12
 8107528:	bf38      	it	cc
 810752a:	250c      	movcc	r5, #12
 810752c:	2d00      	cmp	r5, #0
 810752e:	4606      	mov	r6, r0
 8107530:	db01      	blt.n	8107536 <_malloc_r+0x1a>
 8107532:	42a9      	cmp	r1, r5
 8107534:	d903      	bls.n	810753e <_malloc_r+0x22>
 8107536:	230c      	movs	r3, #12
 8107538:	6033      	str	r3, [r6, #0]
 810753a:	2000      	movs	r0, #0
 810753c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810753e:	f003 faad 	bl	810aa9c <__malloc_lock>
 8107542:	4921      	ldr	r1, [pc, #132]	; (81075c8 <_malloc_r+0xac>)
 8107544:	680a      	ldr	r2, [r1, #0]
 8107546:	4614      	mov	r4, r2
 8107548:	b99c      	cbnz	r4, 8107572 <_malloc_r+0x56>
 810754a:	4f20      	ldr	r7, [pc, #128]	; (81075cc <_malloc_r+0xb0>)
 810754c:	683b      	ldr	r3, [r7, #0]
 810754e:	b923      	cbnz	r3, 810755a <_malloc_r+0x3e>
 8107550:	4621      	mov	r1, r4
 8107552:	4630      	mov	r0, r6
 8107554:	f000 ff44 	bl	81083e0 <_sbrk_r>
 8107558:	6038      	str	r0, [r7, #0]
 810755a:	4629      	mov	r1, r5
 810755c:	4630      	mov	r0, r6
 810755e:	f000 ff3f 	bl	81083e0 <_sbrk_r>
 8107562:	1c43      	adds	r3, r0, #1
 8107564:	d123      	bne.n	81075ae <_malloc_r+0x92>
 8107566:	230c      	movs	r3, #12
 8107568:	6033      	str	r3, [r6, #0]
 810756a:	4630      	mov	r0, r6
 810756c:	f003 fa9c 	bl	810aaa8 <__malloc_unlock>
 8107570:	e7e3      	b.n	810753a <_malloc_r+0x1e>
 8107572:	6823      	ldr	r3, [r4, #0]
 8107574:	1b5b      	subs	r3, r3, r5
 8107576:	d417      	bmi.n	81075a8 <_malloc_r+0x8c>
 8107578:	2b0b      	cmp	r3, #11
 810757a:	d903      	bls.n	8107584 <_malloc_r+0x68>
 810757c:	6023      	str	r3, [r4, #0]
 810757e:	441c      	add	r4, r3
 8107580:	6025      	str	r5, [r4, #0]
 8107582:	e004      	b.n	810758e <_malloc_r+0x72>
 8107584:	6863      	ldr	r3, [r4, #4]
 8107586:	42a2      	cmp	r2, r4
 8107588:	bf0c      	ite	eq
 810758a:	600b      	streq	r3, [r1, #0]
 810758c:	6053      	strne	r3, [r2, #4]
 810758e:	4630      	mov	r0, r6
 8107590:	f003 fa8a 	bl	810aaa8 <__malloc_unlock>
 8107594:	f104 000b 	add.w	r0, r4, #11
 8107598:	1d23      	adds	r3, r4, #4
 810759a:	f020 0007 	bic.w	r0, r0, #7
 810759e:	1ac2      	subs	r2, r0, r3
 81075a0:	d0cc      	beq.n	810753c <_malloc_r+0x20>
 81075a2:	1a1b      	subs	r3, r3, r0
 81075a4:	50a3      	str	r3, [r4, r2]
 81075a6:	e7c9      	b.n	810753c <_malloc_r+0x20>
 81075a8:	4622      	mov	r2, r4
 81075aa:	6864      	ldr	r4, [r4, #4]
 81075ac:	e7cc      	b.n	8107548 <_malloc_r+0x2c>
 81075ae:	1cc4      	adds	r4, r0, #3
 81075b0:	f024 0403 	bic.w	r4, r4, #3
 81075b4:	42a0      	cmp	r0, r4
 81075b6:	d0e3      	beq.n	8107580 <_malloc_r+0x64>
 81075b8:	1a21      	subs	r1, r4, r0
 81075ba:	4630      	mov	r0, r6
 81075bc:	f000 ff10 	bl	81083e0 <_sbrk_r>
 81075c0:	3001      	adds	r0, #1
 81075c2:	d1dd      	bne.n	8107580 <_malloc_r+0x64>
 81075c4:	e7cf      	b.n	8107566 <_malloc_r+0x4a>
 81075c6:	bf00      	nop
 81075c8:	10000260 	.word	0x10000260
 81075cc:	10000264 	.word	0x10000264

081075d0 <__cvt>:
 81075d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81075d4:	ec55 4b10 	vmov	r4, r5, d0
 81075d8:	2d00      	cmp	r5, #0
 81075da:	460e      	mov	r6, r1
 81075dc:	4619      	mov	r1, r3
 81075de:	462b      	mov	r3, r5
 81075e0:	bfbb      	ittet	lt
 81075e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 81075e6:	461d      	movlt	r5, r3
 81075e8:	2300      	movge	r3, #0
 81075ea:	232d      	movlt	r3, #45	; 0x2d
 81075ec:	700b      	strb	r3, [r1, #0]
 81075ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81075f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 81075f4:	4691      	mov	r9, r2
 81075f6:	f023 0820 	bic.w	r8, r3, #32
 81075fa:	bfbc      	itt	lt
 81075fc:	4622      	movlt	r2, r4
 81075fe:	4614      	movlt	r4, r2
 8107600:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8107604:	d005      	beq.n	8107612 <__cvt+0x42>
 8107606:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 810760a:	d100      	bne.n	810760e <__cvt+0x3e>
 810760c:	3601      	adds	r6, #1
 810760e:	2102      	movs	r1, #2
 8107610:	e000      	b.n	8107614 <__cvt+0x44>
 8107612:	2103      	movs	r1, #3
 8107614:	ab03      	add	r3, sp, #12
 8107616:	9301      	str	r3, [sp, #4]
 8107618:	ab02      	add	r3, sp, #8
 810761a:	9300      	str	r3, [sp, #0]
 810761c:	ec45 4b10 	vmov	d0, r4, r5
 8107620:	4653      	mov	r3, sl
 8107622:	4632      	mov	r2, r6
 8107624:	f002 f83c 	bl	81096a0 <_dtoa_r>
 8107628:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 810762c:	4607      	mov	r7, r0
 810762e:	d102      	bne.n	8107636 <__cvt+0x66>
 8107630:	f019 0f01 	tst.w	r9, #1
 8107634:	d022      	beq.n	810767c <__cvt+0xac>
 8107636:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 810763a:	eb07 0906 	add.w	r9, r7, r6
 810763e:	d110      	bne.n	8107662 <__cvt+0x92>
 8107640:	783b      	ldrb	r3, [r7, #0]
 8107642:	2b30      	cmp	r3, #48	; 0x30
 8107644:	d10a      	bne.n	810765c <__cvt+0x8c>
 8107646:	2200      	movs	r2, #0
 8107648:	2300      	movs	r3, #0
 810764a:	4620      	mov	r0, r4
 810764c:	4629      	mov	r1, r5
 810764e:	f7f9 fac3 	bl	8100bd8 <__aeabi_dcmpeq>
 8107652:	b918      	cbnz	r0, 810765c <__cvt+0x8c>
 8107654:	f1c6 0601 	rsb	r6, r6, #1
 8107658:	f8ca 6000 	str.w	r6, [sl]
 810765c:	f8da 3000 	ldr.w	r3, [sl]
 8107660:	4499      	add	r9, r3
 8107662:	2200      	movs	r2, #0
 8107664:	2300      	movs	r3, #0
 8107666:	4620      	mov	r0, r4
 8107668:	4629      	mov	r1, r5
 810766a:	f7f9 fab5 	bl	8100bd8 <__aeabi_dcmpeq>
 810766e:	b108      	cbz	r0, 8107674 <__cvt+0xa4>
 8107670:	f8cd 900c 	str.w	r9, [sp, #12]
 8107674:	2230      	movs	r2, #48	; 0x30
 8107676:	9b03      	ldr	r3, [sp, #12]
 8107678:	454b      	cmp	r3, r9
 810767a:	d307      	bcc.n	810768c <__cvt+0xbc>
 810767c:	9b03      	ldr	r3, [sp, #12]
 810767e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8107680:	1bdb      	subs	r3, r3, r7
 8107682:	4638      	mov	r0, r7
 8107684:	6013      	str	r3, [r2, #0]
 8107686:	b004      	add	sp, #16
 8107688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810768c:	1c59      	adds	r1, r3, #1
 810768e:	9103      	str	r1, [sp, #12]
 8107690:	701a      	strb	r2, [r3, #0]
 8107692:	e7f0      	b.n	8107676 <__cvt+0xa6>

08107694 <__exponent>:
 8107694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8107696:	4603      	mov	r3, r0
 8107698:	2900      	cmp	r1, #0
 810769a:	bfb8      	it	lt
 810769c:	4249      	neglt	r1, r1
 810769e:	f803 2b02 	strb.w	r2, [r3], #2
 81076a2:	bfb4      	ite	lt
 81076a4:	222d      	movlt	r2, #45	; 0x2d
 81076a6:	222b      	movge	r2, #43	; 0x2b
 81076a8:	2909      	cmp	r1, #9
 81076aa:	7042      	strb	r2, [r0, #1]
 81076ac:	dd2a      	ble.n	8107704 <__exponent+0x70>
 81076ae:	f10d 0407 	add.w	r4, sp, #7
 81076b2:	46a4      	mov	ip, r4
 81076b4:	270a      	movs	r7, #10
 81076b6:	46a6      	mov	lr, r4
 81076b8:	460a      	mov	r2, r1
 81076ba:	fb91 f6f7 	sdiv	r6, r1, r7
 81076be:	fb07 1516 	mls	r5, r7, r6, r1
 81076c2:	3530      	adds	r5, #48	; 0x30
 81076c4:	2a63      	cmp	r2, #99	; 0x63
 81076c6:	f104 34ff 	add.w	r4, r4, #4294967295
 81076ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 81076ce:	4631      	mov	r1, r6
 81076d0:	dcf1      	bgt.n	81076b6 <__exponent+0x22>
 81076d2:	3130      	adds	r1, #48	; 0x30
 81076d4:	f1ae 0502 	sub.w	r5, lr, #2
 81076d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 81076dc:	1c44      	adds	r4, r0, #1
 81076de:	4629      	mov	r1, r5
 81076e0:	4561      	cmp	r1, ip
 81076e2:	d30a      	bcc.n	81076fa <__exponent+0x66>
 81076e4:	f10d 0209 	add.w	r2, sp, #9
 81076e8:	eba2 020e 	sub.w	r2, r2, lr
 81076ec:	4565      	cmp	r5, ip
 81076ee:	bf88      	it	hi
 81076f0:	2200      	movhi	r2, #0
 81076f2:	4413      	add	r3, r2
 81076f4:	1a18      	subs	r0, r3, r0
 81076f6:	b003      	add	sp, #12
 81076f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81076fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 81076fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8107702:	e7ed      	b.n	81076e0 <__exponent+0x4c>
 8107704:	2330      	movs	r3, #48	; 0x30
 8107706:	3130      	adds	r1, #48	; 0x30
 8107708:	7083      	strb	r3, [r0, #2]
 810770a:	70c1      	strb	r1, [r0, #3]
 810770c:	1d03      	adds	r3, r0, #4
 810770e:	e7f1      	b.n	81076f4 <__exponent+0x60>

08107710 <_printf_float>:
 8107710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107714:	ed2d 8b02 	vpush	{d8}
 8107718:	b08d      	sub	sp, #52	; 0x34
 810771a:	460c      	mov	r4, r1
 810771c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8107720:	4616      	mov	r6, r2
 8107722:	461f      	mov	r7, r3
 8107724:	4605      	mov	r5, r0
 8107726:	f003 f917 	bl	810a958 <_localeconv_r>
 810772a:	f8d0 a000 	ldr.w	sl, [r0]
 810772e:	4650      	mov	r0, sl
 8107730:	f7f8 fdd6 	bl	81002e0 <strlen>
 8107734:	2300      	movs	r3, #0
 8107736:	930a      	str	r3, [sp, #40]	; 0x28
 8107738:	6823      	ldr	r3, [r4, #0]
 810773a:	9305      	str	r3, [sp, #20]
 810773c:	f8d8 3000 	ldr.w	r3, [r8]
 8107740:	f894 b018 	ldrb.w	fp, [r4, #24]
 8107744:	3307      	adds	r3, #7
 8107746:	f023 0307 	bic.w	r3, r3, #7
 810774a:	f103 0208 	add.w	r2, r3, #8
 810774e:	f8c8 2000 	str.w	r2, [r8]
 8107752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107756:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 810775a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 810775e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8107762:	9307      	str	r3, [sp, #28]
 8107764:	f8cd 8018 	str.w	r8, [sp, #24]
 8107768:	ee08 0a10 	vmov	s16, r0
 810776c:	4b9f      	ldr	r3, [pc, #636]	; (81079ec <_printf_float+0x2dc>)
 810776e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107772:	f04f 32ff 	mov.w	r2, #4294967295
 8107776:	f7f9 fa61 	bl	8100c3c <__aeabi_dcmpun>
 810777a:	bb88      	cbnz	r0, 81077e0 <_printf_float+0xd0>
 810777c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8107780:	4b9a      	ldr	r3, [pc, #616]	; (81079ec <_printf_float+0x2dc>)
 8107782:	f04f 32ff 	mov.w	r2, #4294967295
 8107786:	f7f9 fa3b 	bl	8100c00 <__aeabi_dcmple>
 810778a:	bb48      	cbnz	r0, 81077e0 <_printf_float+0xd0>
 810778c:	2200      	movs	r2, #0
 810778e:	2300      	movs	r3, #0
 8107790:	4640      	mov	r0, r8
 8107792:	4649      	mov	r1, r9
 8107794:	f7f9 fa2a 	bl	8100bec <__aeabi_dcmplt>
 8107798:	b110      	cbz	r0, 81077a0 <_printf_float+0x90>
 810779a:	232d      	movs	r3, #45	; 0x2d
 810779c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81077a0:	4b93      	ldr	r3, [pc, #588]	; (81079f0 <_printf_float+0x2e0>)
 81077a2:	4894      	ldr	r0, [pc, #592]	; (81079f4 <_printf_float+0x2e4>)
 81077a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 81077a8:	bf94      	ite	ls
 81077aa:	4698      	movls	r8, r3
 81077ac:	4680      	movhi	r8, r0
 81077ae:	2303      	movs	r3, #3
 81077b0:	6123      	str	r3, [r4, #16]
 81077b2:	9b05      	ldr	r3, [sp, #20]
 81077b4:	f023 0204 	bic.w	r2, r3, #4
 81077b8:	6022      	str	r2, [r4, #0]
 81077ba:	f04f 0900 	mov.w	r9, #0
 81077be:	9700      	str	r7, [sp, #0]
 81077c0:	4633      	mov	r3, r6
 81077c2:	aa0b      	add	r2, sp, #44	; 0x2c
 81077c4:	4621      	mov	r1, r4
 81077c6:	4628      	mov	r0, r5
 81077c8:	f000 f9d8 	bl	8107b7c <_printf_common>
 81077cc:	3001      	adds	r0, #1
 81077ce:	f040 8090 	bne.w	81078f2 <_printf_float+0x1e2>
 81077d2:	f04f 30ff 	mov.w	r0, #4294967295
 81077d6:	b00d      	add	sp, #52	; 0x34
 81077d8:	ecbd 8b02 	vpop	{d8}
 81077dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81077e0:	4642      	mov	r2, r8
 81077e2:	464b      	mov	r3, r9
 81077e4:	4640      	mov	r0, r8
 81077e6:	4649      	mov	r1, r9
 81077e8:	f7f9 fa28 	bl	8100c3c <__aeabi_dcmpun>
 81077ec:	b140      	cbz	r0, 8107800 <_printf_float+0xf0>
 81077ee:	464b      	mov	r3, r9
 81077f0:	2b00      	cmp	r3, #0
 81077f2:	bfbc      	itt	lt
 81077f4:	232d      	movlt	r3, #45	; 0x2d
 81077f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 81077fa:	487f      	ldr	r0, [pc, #508]	; (81079f8 <_printf_float+0x2e8>)
 81077fc:	4b7f      	ldr	r3, [pc, #508]	; (81079fc <_printf_float+0x2ec>)
 81077fe:	e7d1      	b.n	81077a4 <_printf_float+0x94>
 8107800:	6863      	ldr	r3, [r4, #4]
 8107802:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8107806:	9206      	str	r2, [sp, #24]
 8107808:	1c5a      	adds	r2, r3, #1
 810780a:	d13f      	bne.n	810788c <_printf_float+0x17c>
 810780c:	2306      	movs	r3, #6
 810780e:	6063      	str	r3, [r4, #4]
 8107810:	9b05      	ldr	r3, [sp, #20]
 8107812:	6861      	ldr	r1, [r4, #4]
 8107814:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8107818:	2300      	movs	r3, #0
 810781a:	9303      	str	r3, [sp, #12]
 810781c:	ab0a      	add	r3, sp, #40	; 0x28
 810781e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8107822:	ab09      	add	r3, sp, #36	; 0x24
 8107824:	ec49 8b10 	vmov	d0, r8, r9
 8107828:	9300      	str	r3, [sp, #0]
 810782a:	6022      	str	r2, [r4, #0]
 810782c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8107830:	4628      	mov	r0, r5
 8107832:	f7ff fecd 	bl	81075d0 <__cvt>
 8107836:	9b06      	ldr	r3, [sp, #24]
 8107838:	9909      	ldr	r1, [sp, #36]	; 0x24
 810783a:	2b47      	cmp	r3, #71	; 0x47
 810783c:	4680      	mov	r8, r0
 810783e:	d108      	bne.n	8107852 <_printf_float+0x142>
 8107840:	1cc8      	adds	r0, r1, #3
 8107842:	db02      	blt.n	810784a <_printf_float+0x13a>
 8107844:	6863      	ldr	r3, [r4, #4]
 8107846:	4299      	cmp	r1, r3
 8107848:	dd41      	ble.n	81078ce <_printf_float+0x1be>
 810784a:	f1ab 0b02 	sub.w	fp, fp, #2
 810784e:	fa5f fb8b 	uxtb.w	fp, fp
 8107852:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8107856:	d820      	bhi.n	810789a <_printf_float+0x18a>
 8107858:	3901      	subs	r1, #1
 810785a:	465a      	mov	r2, fp
 810785c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8107860:	9109      	str	r1, [sp, #36]	; 0x24
 8107862:	f7ff ff17 	bl	8107694 <__exponent>
 8107866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107868:	1813      	adds	r3, r2, r0
 810786a:	2a01      	cmp	r2, #1
 810786c:	4681      	mov	r9, r0
 810786e:	6123      	str	r3, [r4, #16]
 8107870:	dc02      	bgt.n	8107878 <_printf_float+0x168>
 8107872:	6822      	ldr	r2, [r4, #0]
 8107874:	07d2      	lsls	r2, r2, #31
 8107876:	d501      	bpl.n	810787c <_printf_float+0x16c>
 8107878:	3301      	adds	r3, #1
 810787a:	6123      	str	r3, [r4, #16]
 810787c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8107880:	2b00      	cmp	r3, #0
 8107882:	d09c      	beq.n	81077be <_printf_float+0xae>
 8107884:	232d      	movs	r3, #45	; 0x2d
 8107886:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810788a:	e798      	b.n	81077be <_printf_float+0xae>
 810788c:	9a06      	ldr	r2, [sp, #24]
 810788e:	2a47      	cmp	r2, #71	; 0x47
 8107890:	d1be      	bne.n	8107810 <_printf_float+0x100>
 8107892:	2b00      	cmp	r3, #0
 8107894:	d1bc      	bne.n	8107810 <_printf_float+0x100>
 8107896:	2301      	movs	r3, #1
 8107898:	e7b9      	b.n	810780e <_printf_float+0xfe>
 810789a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 810789e:	d118      	bne.n	81078d2 <_printf_float+0x1c2>
 81078a0:	2900      	cmp	r1, #0
 81078a2:	6863      	ldr	r3, [r4, #4]
 81078a4:	dd0b      	ble.n	81078be <_printf_float+0x1ae>
 81078a6:	6121      	str	r1, [r4, #16]
 81078a8:	b913      	cbnz	r3, 81078b0 <_printf_float+0x1a0>
 81078aa:	6822      	ldr	r2, [r4, #0]
 81078ac:	07d0      	lsls	r0, r2, #31
 81078ae:	d502      	bpl.n	81078b6 <_printf_float+0x1a6>
 81078b0:	3301      	adds	r3, #1
 81078b2:	440b      	add	r3, r1
 81078b4:	6123      	str	r3, [r4, #16]
 81078b6:	65a1      	str	r1, [r4, #88]	; 0x58
 81078b8:	f04f 0900 	mov.w	r9, #0
 81078bc:	e7de      	b.n	810787c <_printf_float+0x16c>
 81078be:	b913      	cbnz	r3, 81078c6 <_printf_float+0x1b6>
 81078c0:	6822      	ldr	r2, [r4, #0]
 81078c2:	07d2      	lsls	r2, r2, #31
 81078c4:	d501      	bpl.n	81078ca <_printf_float+0x1ba>
 81078c6:	3302      	adds	r3, #2
 81078c8:	e7f4      	b.n	81078b4 <_printf_float+0x1a4>
 81078ca:	2301      	movs	r3, #1
 81078cc:	e7f2      	b.n	81078b4 <_printf_float+0x1a4>
 81078ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 81078d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81078d4:	4299      	cmp	r1, r3
 81078d6:	db05      	blt.n	81078e4 <_printf_float+0x1d4>
 81078d8:	6823      	ldr	r3, [r4, #0]
 81078da:	6121      	str	r1, [r4, #16]
 81078dc:	07d8      	lsls	r0, r3, #31
 81078de:	d5ea      	bpl.n	81078b6 <_printf_float+0x1a6>
 81078e0:	1c4b      	adds	r3, r1, #1
 81078e2:	e7e7      	b.n	81078b4 <_printf_float+0x1a4>
 81078e4:	2900      	cmp	r1, #0
 81078e6:	bfd4      	ite	le
 81078e8:	f1c1 0202 	rsble	r2, r1, #2
 81078ec:	2201      	movgt	r2, #1
 81078ee:	4413      	add	r3, r2
 81078f0:	e7e0      	b.n	81078b4 <_printf_float+0x1a4>
 81078f2:	6823      	ldr	r3, [r4, #0]
 81078f4:	055a      	lsls	r2, r3, #21
 81078f6:	d407      	bmi.n	8107908 <_printf_float+0x1f8>
 81078f8:	6923      	ldr	r3, [r4, #16]
 81078fa:	4642      	mov	r2, r8
 81078fc:	4631      	mov	r1, r6
 81078fe:	4628      	mov	r0, r5
 8107900:	47b8      	blx	r7
 8107902:	3001      	adds	r0, #1
 8107904:	d12c      	bne.n	8107960 <_printf_float+0x250>
 8107906:	e764      	b.n	81077d2 <_printf_float+0xc2>
 8107908:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 810790c:	f240 80e0 	bls.w	8107ad0 <_printf_float+0x3c0>
 8107910:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107914:	2200      	movs	r2, #0
 8107916:	2300      	movs	r3, #0
 8107918:	f7f9 f95e 	bl	8100bd8 <__aeabi_dcmpeq>
 810791c:	2800      	cmp	r0, #0
 810791e:	d034      	beq.n	810798a <_printf_float+0x27a>
 8107920:	4a37      	ldr	r2, [pc, #220]	; (8107a00 <_printf_float+0x2f0>)
 8107922:	2301      	movs	r3, #1
 8107924:	4631      	mov	r1, r6
 8107926:	4628      	mov	r0, r5
 8107928:	47b8      	blx	r7
 810792a:	3001      	adds	r0, #1
 810792c:	f43f af51 	beq.w	81077d2 <_printf_float+0xc2>
 8107930:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107934:	429a      	cmp	r2, r3
 8107936:	db02      	blt.n	810793e <_printf_float+0x22e>
 8107938:	6823      	ldr	r3, [r4, #0]
 810793a:	07d8      	lsls	r0, r3, #31
 810793c:	d510      	bpl.n	8107960 <_printf_float+0x250>
 810793e:	ee18 3a10 	vmov	r3, s16
 8107942:	4652      	mov	r2, sl
 8107944:	4631      	mov	r1, r6
 8107946:	4628      	mov	r0, r5
 8107948:	47b8      	blx	r7
 810794a:	3001      	adds	r0, #1
 810794c:	f43f af41 	beq.w	81077d2 <_printf_float+0xc2>
 8107950:	f04f 0800 	mov.w	r8, #0
 8107954:	f104 091a 	add.w	r9, r4, #26
 8107958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810795a:	3b01      	subs	r3, #1
 810795c:	4543      	cmp	r3, r8
 810795e:	dc09      	bgt.n	8107974 <_printf_float+0x264>
 8107960:	6823      	ldr	r3, [r4, #0]
 8107962:	079b      	lsls	r3, r3, #30
 8107964:	f100 8105 	bmi.w	8107b72 <_printf_float+0x462>
 8107968:	68e0      	ldr	r0, [r4, #12]
 810796a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810796c:	4298      	cmp	r0, r3
 810796e:	bfb8      	it	lt
 8107970:	4618      	movlt	r0, r3
 8107972:	e730      	b.n	81077d6 <_printf_float+0xc6>
 8107974:	2301      	movs	r3, #1
 8107976:	464a      	mov	r2, r9
 8107978:	4631      	mov	r1, r6
 810797a:	4628      	mov	r0, r5
 810797c:	47b8      	blx	r7
 810797e:	3001      	adds	r0, #1
 8107980:	f43f af27 	beq.w	81077d2 <_printf_float+0xc2>
 8107984:	f108 0801 	add.w	r8, r8, #1
 8107988:	e7e6      	b.n	8107958 <_printf_float+0x248>
 810798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810798c:	2b00      	cmp	r3, #0
 810798e:	dc39      	bgt.n	8107a04 <_printf_float+0x2f4>
 8107990:	4a1b      	ldr	r2, [pc, #108]	; (8107a00 <_printf_float+0x2f0>)
 8107992:	2301      	movs	r3, #1
 8107994:	4631      	mov	r1, r6
 8107996:	4628      	mov	r0, r5
 8107998:	47b8      	blx	r7
 810799a:	3001      	adds	r0, #1
 810799c:	f43f af19 	beq.w	81077d2 <_printf_float+0xc2>
 81079a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81079a4:	4313      	orrs	r3, r2
 81079a6:	d102      	bne.n	81079ae <_printf_float+0x29e>
 81079a8:	6823      	ldr	r3, [r4, #0]
 81079aa:	07d9      	lsls	r1, r3, #31
 81079ac:	d5d8      	bpl.n	8107960 <_printf_float+0x250>
 81079ae:	ee18 3a10 	vmov	r3, s16
 81079b2:	4652      	mov	r2, sl
 81079b4:	4631      	mov	r1, r6
 81079b6:	4628      	mov	r0, r5
 81079b8:	47b8      	blx	r7
 81079ba:	3001      	adds	r0, #1
 81079bc:	f43f af09 	beq.w	81077d2 <_printf_float+0xc2>
 81079c0:	f04f 0900 	mov.w	r9, #0
 81079c4:	f104 0a1a 	add.w	sl, r4, #26
 81079c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81079ca:	425b      	negs	r3, r3
 81079cc:	454b      	cmp	r3, r9
 81079ce:	dc01      	bgt.n	81079d4 <_printf_float+0x2c4>
 81079d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81079d2:	e792      	b.n	81078fa <_printf_float+0x1ea>
 81079d4:	2301      	movs	r3, #1
 81079d6:	4652      	mov	r2, sl
 81079d8:	4631      	mov	r1, r6
 81079da:	4628      	mov	r0, r5
 81079dc:	47b8      	blx	r7
 81079de:	3001      	adds	r0, #1
 81079e0:	f43f aef7 	beq.w	81077d2 <_printf_float+0xc2>
 81079e4:	f109 0901 	add.w	r9, r9, #1
 81079e8:	e7ee      	b.n	81079c8 <_printf_float+0x2b8>
 81079ea:	bf00      	nop
 81079ec:	7fefffff 	.word	0x7fefffff
 81079f0:	0810d490 	.word	0x0810d490
 81079f4:	0810d494 	.word	0x0810d494
 81079f8:	0810d49c 	.word	0x0810d49c
 81079fc:	0810d498 	.word	0x0810d498
 8107a00:	0810d4a0 	.word	0x0810d4a0
 8107a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107a06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107a08:	429a      	cmp	r2, r3
 8107a0a:	bfa8      	it	ge
 8107a0c:	461a      	movge	r2, r3
 8107a0e:	2a00      	cmp	r2, #0
 8107a10:	4691      	mov	r9, r2
 8107a12:	dc37      	bgt.n	8107a84 <_printf_float+0x374>
 8107a14:	f04f 0b00 	mov.w	fp, #0
 8107a18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107a1c:	f104 021a 	add.w	r2, r4, #26
 8107a20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8107a22:	9305      	str	r3, [sp, #20]
 8107a24:	eba3 0309 	sub.w	r3, r3, r9
 8107a28:	455b      	cmp	r3, fp
 8107a2a:	dc33      	bgt.n	8107a94 <_printf_float+0x384>
 8107a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107a30:	429a      	cmp	r2, r3
 8107a32:	db3b      	blt.n	8107aac <_printf_float+0x39c>
 8107a34:	6823      	ldr	r3, [r4, #0]
 8107a36:	07da      	lsls	r2, r3, #31
 8107a38:	d438      	bmi.n	8107aac <_printf_float+0x39c>
 8107a3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107a3c:	9b05      	ldr	r3, [sp, #20]
 8107a3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107a40:	1ad3      	subs	r3, r2, r3
 8107a42:	eba2 0901 	sub.w	r9, r2, r1
 8107a46:	4599      	cmp	r9, r3
 8107a48:	bfa8      	it	ge
 8107a4a:	4699      	movge	r9, r3
 8107a4c:	f1b9 0f00 	cmp.w	r9, #0
 8107a50:	dc35      	bgt.n	8107abe <_printf_float+0x3ae>
 8107a52:	f04f 0800 	mov.w	r8, #0
 8107a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8107a5a:	f104 0a1a 	add.w	sl, r4, #26
 8107a5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8107a62:	1a9b      	subs	r3, r3, r2
 8107a64:	eba3 0309 	sub.w	r3, r3, r9
 8107a68:	4543      	cmp	r3, r8
 8107a6a:	f77f af79 	ble.w	8107960 <_printf_float+0x250>
 8107a6e:	2301      	movs	r3, #1
 8107a70:	4652      	mov	r2, sl
 8107a72:	4631      	mov	r1, r6
 8107a74:	4628      	mov	r0, r5
 8107a76:	47b8      	blx	r7
 8107a78:	3001      	adds	r0, #1
 8107a7a:	f43f aeaa 	beq.w	81077d2 <_printf_float+0xc2>
 8107a7e:	f108 0801 	add.w	r8, r8, #1
 8107a82:	e7ec      	b.n	8107a5e <_printf_float+0x34e>
 8107a84:	4613      	mov	r3, r2
 8107a86:	4631      	mov	r1, r6
 8107a88:	4642      	mov	r2, r8
 8107a8a:	4628      	mov	r0, r5
 8107a8c:	47b8      	blx	r7
 8107a8e:	3001      	adds	r0, #1
 8107a90:	d1c0      	bne.n	8107a14 <_printf_float+0x304>
 8107a92:	e69e      	b.n	81077d2 <_printf_float+0xc2>
 8107a94:	2301      	movs	r3, #1
 8107a96:	4631      	mov	r1, r6
 8107a98:	4628      	mov	r0, r5
 8107a9a:	9205      	str	r2, [sp, #20]
 8107a9c:	47b8      	blx	r7
 8107a9e:	3001      	adds	r0, #1
 8107aa0:	f43f ae97 	beq.w	81077d2 <_printf_float+0xc2>
 8107aa4:	9a05      	ldr	r2, [sp, #20]
 8107aa6:	f10b 0b01 	add.w	fp, fp, #1
 8107aaa:	e7b9      	b.n	8107a20 <_printf_float+0x310>
 8107aac:	ee18 3a10 	vmov	r3, s16
 8107ab0:	4652      	mov	r2, sl
 8107ab2:	4631      	mov	r1, r6
 8107ab4:	4628      	mov	r0, r5
 8107ab6:	47b8      	blx	r7
 8107ab8:	3001      	adds	r0, #1
 8107aba:	d1be      	bne.n	8107a3a <_printf_float+0x32a>
 8107abc:	e689      	b.n	81077d2 <_printf_float+0xc2>
 8107abe:	9a05      	ldr	r2, [sp, #20]
 8107ac0:	464b      	mov	r3, r9
 8107ac2:	4442      	add	r2, r8
 8107ac4:	4631      	mov	r1, r6
 8107ac6:	4628      	mov	r0, r5
 8107ac8:	47b8      	blx	r7
 8107aca:	3001      	adds	r0, #1
 8107acc:	d1c1      	bne.n	8107a52 <_printf_float+0x342>
 8107ace:	e680      	b.n	81077d2 <_printf_float+0xc2>
 8107ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8107ad2:	2a01      	cmp	r2, #1
 8107ad4:	dc01      	bgt.n	8107ada <_printf_float+0x3ca>
 8107ad6:	07db      	lsls	r3, r3, #31
 8107ad8:	d538      	bpl.n	8107b4c <_printf_float+0x43c>
 8107ada:	2301      	movs	r3, #1
 8107adc:	4642      	mov	r2, r8
 8107ade:	4631      	mov	r1, r6
 8107ae0:	4628      	mov	r0, r5
 8107ae2:	47b8      	blx	r7
 8107ae4:	3001      	adds	r0, #1
 8107ae6:	f43f ae74 	beq.w	81077d2 <_printf_float+0xc2>
 8107aea:	ee18 3a10 	vmov	r3, s16
 8107aee:	4652      	mov	r2, sl
 8107af0:	4631      	mov	r1, r6
 8107af2:	4628      	mov	r0, r5
 8107af4:	47b8      	blx	r7
 8107af6:	3001      	adds	r0, #1
 8107af8:	f43f ae6b 	beq.w	81077d2 <_printf_float+0xc2>
 8107afc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8107b00:	2200      	movs	r2, #0
 8107b02:	2300      	movs	r3, #0
 8107b04:	f7f9 f868 	bl	8100bd8 <__aeabi_dcmpeq>
 8107b08:	b9d8      	cbnz	r0, 8107b42 <_printf_float+0x432>
 8107b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107b0c:	f108 0201 	add.w	r2, r8, #1
 8107b10:	3b01      	subs	r3, #1
 8107b12:	4631      	mov	r1, r6
 8107b14:	4628      	mov	r0, r5
 8107b16:	47b8      	blx	r7
 8107b18:	3001      	adds	r0, #1
 8107b1a:	d10e      	bne.n	8107b3a <_printf_float+0x42a>
 8107b1c:	e659      	b.n	81077d2 <_printf_float+0xc2>
 8107b1e:	2301      	movs	r3, #1
 8107b20:	4652      	mov	r2, sl
 8107b22:	4631      	mov	r1, r6
 8107b24:	4628      	mov	r0, r5
 8107b26:	47b8      	blx	r7
 8107b28:	3001      	adds	r0, #1
 8107b2a:	f43f ae52 	beq.w	81077d2 <_printf_float+0xc2>
 8107b2e:	f108 0801 	add.w	r8, r8, #1
 8107b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107b34:	3b01      	subs	r3, #1
 8107b36:	4543      	cmp	r3, r8
 8107b38:	dcf1      	bgt.n	8107b1e <_printf_float+0x40e>
 8107b3a:	464b      	mov	r3, r9
 8107b3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8107b40:	e6dc      	b.n	81078fc <_printf_float+0x1ec>
 8107b42:	f04f 0800 	mov.w	r8, #0
 8107b46:	f104 0a1a 	add.w	sl, r4, #26
 8107b4a:	e7f2      	b.n	8107b32 <_printf_float+0x422>
 8107b4c:	2301      	movs	r3, #1
 8107b4e:	4642      	mov	r2, r8
 8107b50:	e7df      	b.n	8107b12 <_printf_float+0x402>
 8107b52:	2301      	movs	r3, #1
 8107b54:	464a      	mov	r2, r9
 8107b56:	4631      	mov	r1, r6
 8107b58:	4628      	mov	r0, r5
 8107b5a:	47b8      	blx	r7
 8107b5c:	3001      	adds	r0, #1
 8107b5e:	f43f ae38 	beq.w	81077d2 <_printf_float+0xc2>
 8107b62:	f108 0801 	add.w	r8, r8, #1
 8107b66:	68e3      	ldr	r3, [r4, #12]
 8107b68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8107b6a:	1a5b      	subs	r3, r3, r1
 8107b6c:	4543      	cmp	r3, r8
 8107b6e:	dcf0      	bgt.n	8107b52 <_printf_float+0x442>
 8107b70:	e6fa      	b.n	8107968 <_printf_float+0x258>
 8107b72:	f04f 0800 	mov.w	r8, #0
 8107b76:	f104 0919 	add.w	r9, r4, #25
 8107b7a:	e7f4      	b.n	8107b66 <_printf_float+0x456>

08107b7c <_printf_common>:
 8107b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8107b80:	4616      	mov	r6, r2
 8107b82:	4699      	mov	r9, r3
 8107b84:	688a      	ldr	r2, [r1, #8]
 8107b86:	690b      	ldr	r3, [r1, #16]
 8107b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8107b8c:	4293      	cmp	r3, r2
 8107b8e:	bfb8      	it	lt
 8107b90:	4613      	movlt	r3, r2
 8107b92:	6033      	str	r3, [r6, #0]
 8107b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8107b98:	4607      	mov	r7, r0
 8107b9a:	460c      	mov	r4, r1
 8107b9c:	b10a      	cbz	r2, 8107ba2 <_printf_common+0x26>
 8107b9e:	3301      	adds	r3, #1
 8107ba0:	6033      	str	r3, [r6, #0]
 8107ba2:	6823      	ldr	r3, [r4, #0]
 8107ba4:	0699      	lsls	r1, r3, #26
 8107ba6:	bf42      	ittt	mi
 8107ba8:	6833      	ldrmi	r3, [r6, #0]
 8107baa:	3302      	addmi	r3, #2
 8107bac:	6033      	strmi	r3, [r6, #0]
 8107bae:	6825      	ldr	r5, [r4, #0]
 8107bb0:	f015 0506 	ands.w	r5, r5, #6
 8107bb4:	d106      	bne.n	8107bc4 <_printf_common+0x48>
 8107bb6:	f104 0a19 	add.w	sl, r4, #25
 8107bba:	68e3      	ldr	r3, [r4, #12]
 8107bbc:	6832      	ldr	r2, [r6, #0]
 8107bbe:	1a9b      	subs	r3, r3, r2
 8107bc0:	42ab      	cmp	r3, r5
 8107bc2:	dc26      	bgt.n	8107c12 <_printf_common+0x96>
 8107bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8107bc8:	1e13      	subs	r3, r2, #0
 8107bca:	6822      	ldr	r2, [r4, #0]
 8107bcc:	bf18      	it	ne
 8107bce:	2301      	movne	r3, #1
 8107bd0:	0692      	lsls	r2, r2, #26
 8107bd2:	d42b      	bmi.n	8107c2c <_printf_common+0xb0>
 8107bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107bd8:	4649      	mov	r1, r9
 8107bda:	4638      	mov	r0, r7
 8107bdc:	47c0      	blx	r8
 8107bde:	3001      	adds	r0, #1
 8107be0:	d01e      	beq.n	8107c20 <_printf_common+0xa4>
 8107be2:	6823      	ldr	r3, [r4, #0]
 8107be4:	68e5      	ldr	r5, [r4, #12]
 8107be6:	6832      	ldr	r2, [r6, #0]
 8107be8:	f003 0306 	and.w	r3, r3, #6
 8107bec:	2b04      	cmp	r3, #4
 8107bee:	bf08      	it	eq
 8107bf0:	1aad      	subeq	r5, r5, r2
 8107bf2:	68a3      	ldr	r3, [r4, #8]
 8107bf4:	6922      	ldr	r2, [r4, #16]
 8107bf6:	bf0c      	ite	eq
 8107bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8107bfc:	2500      	movne	r5, #0
 8107bfe:	4293      	cmp	r3, r2
 8107c00:	bfc4      	itt	gt
 8107c02:	1a9b      	subgt	r3, r3, r2
 8107c04:	18ed      	addgt	r5, r5, r3
 8107c06:	2600      	movs	r6, #0
 8107c08:	341a      	adds	r4, #26
 8107c0a:	42b5      	cmp	r5, r6
 8107c0c:	d11a      	bne.n	8107c44 <_printf_common+0xc8>
 8107c0e:	2000      	movs	r0, #0
 8107c10:	e008      	b.n	8107c24 <_printf_common+0xa8>
 8107c12:	2301      	movs	r3, #1
 8107c14:	4652      	mov	r2, sl
 8107c16:	4649      	mov	r1, r9
 8107c18:	4638      	mov	r0, r7
 8107c1a:	47c0      	blx	r8
 8107c1c:	3001      	adds	r0, #1
 8107c1e:	d103      	bne.n	8107c28 <_printf_common+0xac>
 8107c20:	f04f 30ff 	mov.w	r0, #4294967295
 8107c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107c28:	3501      	adds	r5, #1
 8107c2a:	e7c6      	b.n	8107bba <_printf_common+0x3e>
 8107c2c:	18e1      	adds	r1, r4, r3
 8107c2e:	1c5a      	adds	r2, r3, #1
 8107c30:	2030      	movs	r0, #48	; 0x30
 8107c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8107c36:	4422      	add	r2, r4
 8107c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8107c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8107c40:	3302      	adds	r3, #2
 8107c42:	e7c7      	b.n	8107bd4 <_printf_common+0x58>
 8107c44:	2301      	movs	r3, #1
 8107c46:	4622      	mov	r2, r4
 8107c48:	4649      	mov	r1, r9
 8107c4a:	4638      	mov	r0, r7
 8107c4c:	47c0      	blx	r8
 8107c4e:	3001      	adds	r0, #1
 8107c50:	d0e6      	beq.n	8107c20 <_printf_common+0xa4>
 8107c52:	3601      	adds	r6, #1
 8107c54:	e7d9      	b.n	8107c0a <_printf_common+0x8e>
	...

08107c58 <_printf_i>:
 8107c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8107c5c:	460c      	mov	r4, r1
 8107c5e:	4691      	mov	r9, r2
 8107c60:	7e27      	ldrb	r7, [r4, #24]
 8107c62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8107c64:	2f78      	cmp	r7, #120	; 0x78
 8107c66:	4680      	mov	r8, r0
 8107c68:	469a      	mov	sl, r3
 8107c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8107c6e:	d807      	bhi.n	8107c80 <_printf_i+0x28>
 8107c70:	2f62      	cmp	r7, #98	; 0x62
 8107c72:	d80a      	bhi.n	8107c8a <_printf_i+0x32>
 8107c74:	2f00      	cmp	r7, #0
 8107c76:	f000 80d8 	beq.w	8107e2a <_printf_i+0x1d2>
 8107c7a:	2f58      	cmp	r7, #88	; 0x58
 8107c7c:	f000 80a3 	beq.w	8107dc6 <_printf_i+0x16e>
 8107c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8107c88:	e03a      	b.n	8107d00 <_printf_i+0xa8>
 8107c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8107c8e:	2b15      	cmp	r3, #21
 8107c90:	d8f6      	bhi.n	8107c80 <_printf_i+0x28>
 8107c92:	a001      	add	r0, pc, #4	; (adr r0, 8107c98 <_printf_i+0x40>)
 8107c94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8107c98:	08107cf1 	.word	0x08107cf1
 8107c9c:	08107d05 	.word	0x08107d05
 8107ca0:	08107c81 	.word	0x08107c81
 8107ca4:	08107c81 	.word	0x08107c81
 8107ca8:	08107c81 	.word	0x08107c81
 8107cac:	08107c81 	.word	0x08107c81
 8107cb0:	08107d05 	.word	0x08107d05
 8107cb4:	08107c81 	.word	0x08107c81
 8107cb8:	08107c81 	.word	0x08107c81
 8107cbc:	08107c81 	.word	0x08107c81
 8107cc0:	08107c81 	.word	0x08107c81
 8107cc4:	08107e11 	.word	0x08107e11
 8107cc8:	08107d35 	.word	0x08107d35
 8107ccc:	08107df3 	.word	0x08107df3
 8107cd0:	08107c81 	.word	0x08107c81
 8107cd4:	08107c81 	.word	0x08107c81
 8107cd8:	08107e33 	.word	0x08107e33
 8107cdc:	08107c81 	.word	0x08107c81
 8107ce0:	08107d35 	.word	0x08107d35
 8107ce4:	08107c81 	.word	0x08107c81
 8107ce8:	08107c81 	.word	0x08107c81
 8107cec:	08107dfb 	.word	0x08107dfb
 8107cf0:	680b      	ldr	r3, [r1, #0]
 8107cf2:	1d1a      	adds	r2, r3, #4
 8107cf4:	681b      	ldr	r3, [r3, #0]
 8107cf6:	600a      	str	r2, [r1, #0]
 8107cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8107cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8107d00:	2301      	movs	r3, #1
 8107d02:	e0a3      	b.n	8107e4c <_printf_i+0x1f4>
 8107d04:	6825      	ldr	r5, [r4, #0]
 8107d06:	6808      	ldr	r0, [r1, #0]
 8107d08:	062e      	lsls	r6, r5, #24
 8107d0a:	f100 0304 	add.w	r3, r0, #4
 8107d0e:	d50a      	bpl.n	8107d26 <_printf_i+0xce>
 8107d10:	6805      	ldr	r5, [r0, #0]
 8107d12:	600b      	str	r3, [r1, #0]
 8107d14:	2d00      	cmp	r5, #0
 8107d16:	da03      	bge.n	8107d20 <_printf_i+0xc8>
 8107d18:	232d      	movs	r3, #45	; 0x2d
 8107d1a:	426d      	negs	r5, r5
 8107d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107d20:	485e      	ldr	r0, [pc, #376]	; (8107e9c <_printf_i+0x244>)
 8107d22:	230a      	movs	r3, #10
 8107d24:	e019      	b.n	8107d5a <_printf_i+0x102>
 8107d26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8107d2a:	6805      	ldr	r5, [r0, #0]
 8107d2c:	600b      	str	r3, [r1, #0]
 8107d2e:	bf18      	it	ne
 8107d30:	b22d      	sxthne	r5, r5
 8107d32:	e7ef      	b.n	8107d14 <_printf_i+0xbc>
 8107d34:	680b      	ldr	r3, [r1, #0]
 8107d36:	6825      	ldr	r5, [r4, #0]
 8107d38:	1d18      	adds	r0, r3, #4
 8107d3a:	6008      	str	r0, [r1, #0]
 8107d3c:	0628      	lsls	r0, r5, #24
 8107d3e:	d501      	bpl.n	8107d44 <_printf_i+0xec>
 8107d40:	681d      	ldr	r5, [r3, #0]
 8107d42:	e002      	b.n	8107d4a <_printf_i+0xf2>
 8107d44:	0669      	lsls	r1, r5, #25
 8107d46:	d5fb      	bpl.n	8107d40 <_printf_i+0xe8>
 8107d48:	881d      	ldrh	r5, [r3, #0]
 8107d4a:	4854      	ldr	r0, [pc, #336]	; (8107e9c <_printf_i+0x244>)
 8107d4c:	2f6f      	cmp	r7, #111	; 0x6f
 8107d4e:	bf0c      	ite	eq
 8107d50:	2308      	moveq	r3, #8
 8107d52:	230a      	movne	r3, #10
 8107d54:	2100      	movs	r1, #0
 8107d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8107d5a:	6866      	ldr	r6, [r4, #4]
 8107d5c:	60a6      	str	r6, [r4, #8]
 8107d5e:	2e00      	cmp	r6, #0
 8107d60:	bfa2      	ittt	ge
 8107d62:	6821      	ldrge	r1, [r4, #0]
 8107d64:	f021 0104 	bicge.w	r1, r1, #4
 8107d68:	6021      	strge	r1, [r4, #0]
 8107d6a:	b90d      	cbnz	r5, 8107d70 <_printf_i+0x118>
 8107d6c:	2e00      	cmp	r6, #0
 8107d6e:	d04d      	beq.n	8107e0c <_printf_i+0x1b4>
 8107d70:	4616      	mov	r6, r2
 8107d72:	fbb5 f1f3 	udiv	r1, r5, r3
 8107d76:	fb03 5711 	mls	r7, r3, r1, r5
 8107d7a:	5dc7      	ldrb	r7, [r0, r7]
 8107d7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8107d80:	462f      	mov	r7, r5
 8107d82:	42bb      	cmp	r3, r7
 8107d84:	460d      	mov	r5, r1
 8107d86:	d9f4      	bls.n	8107d72 <_printf_i+0x11a>
 8107d88:	2b08      	cmp	r3, #8
 8107d8a:	d10b      	bne.n	8107da4 <_printf_i+0x14c>
 8107d8c:	6823      	ldr	r3, [r4, #0]
 8107d8e:	07df      	lsls	r7, r3, #31
 8107d90:	d508      	bpl.n	8107da4 <_printf_i+0x14c>
 8107d92:	6923      	ldr	r3, [r4, #16]
 8107d94:	6861      	ldr	r1, [r4, #4]
 8107d96:	4299      	cmp	r1, r3
 8107d98:	bfde      	ittt	le
 8107d9a:	2330      	movle	r3, #48	; 0x30
 8107d9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8107da0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8107da4:	1b92      	subs	r2, r2, r6
 8107da6:	6122      	str	r2, [r4, #16]
 8107da8:	f8cd a000 	str.w	sl, [sp]
 8107dac:	464b      	mov	r3, r9
 8107dae:	aa03      	add	r2, sp, #12
 8107db0:	4621      	mov	r1, r4
 8107db2:	4640      	mov	r0, r8
 8107db4:	f7ff fee2 	bl	8107b7c <_printf_common>
 8107db8:	3001      	adds	r0, #1
 8107dba:	d14c      	bne.n	8107e56 <_printf_i+0x1fe>
 8107dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8107dc0:	b004      	add	sp, #16
 8107dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8107dc6:	4835      	ldr	r0, [pc, #212]	; (8107e9c <_printf_i+0x244>)
 8107dc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8107dcc:	6823      	ldr	r3, [r4, #0]
 8107dce:	680e      	ldr	r6, [r1, #0]
 8107dd0:	061f      	lsls	r7, r3, #24
 8107dd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8107dd6:	600e      	str	r6, [r1, #0]
 8107dd8:	d514      	bpl.n	8107e04 <_printf_i+0x1ac>
 8107dda:	07d9      	lsls	r1, r3, #31
 8107ddc:	bf44      	itt	mi
 8107dde:	f043 0320 	orrmi.w	r3, r3, #32
 8107de2:	6023      	strmi	r3, [r4, #0]
 8107de4:	b91d      	cbnz	r5, 8107dee <_printf_i+0x196>
 8107de6:	6823      	ldr	r3, [r4, #0]
 8107de8:	f023 0320 	bic.w	r3, r3, #32
 8107dec:	6023      	str	r3, [r4, #0]
 8107dee:	2310      	movs	r3, #16
 8107df0:	e7b0      	b.n	8107d54 <_printf_i+0xfc>
 8107df2:	6823      	ldr	r3, [r4, #0]
 8107df4:	f043 0320 	orr.w	r3, r3, #32
 8107df8:	6023      	str	r3, [r4, #0]
 8107dfa:	2378      	movs	r3, #120	; 0x78
 8107dfc:	4828      	ldr	r0, [pc, #160]	; (8107ea0 <_printf_i+0x248>)
 8107dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8107e02:	e7e3      	b.n	8107dcc <_printf_i+0x174>
 8107e04:	065e      	lsls	r6, r3, #25
 8107e06:	bf48      	it	mi
 8107e08:	b2ad      	uxthmi	r5, r5
 8107e0a:	e7e6      	b.n	8107dda <_printf_i+0x182>
 8107e0c:	4616      	mov	r6, r2
 8107e0e:	e7bb      	b.n	8107d88 <_printf_i+0x130>
 8107e10:	680b      	ldr	r3, [r1, #0]
 8107e12:	6826      	ldr	r6, [r4, #0]
 8107e14:	6960      	ldr	r0, [r4, #20]
 8107e16:	1d1d      	adds	r5, r3, #4
 8107e18:	600d      	str	r5, [r1, #0]
 8107e1a:	0635      	lsls	r5, r6, #24
 8107e1c:	681b      	ldr	r3, [r3, #0]
 8107e1e:	d501      	bpl.n	8107e24 <_printf_i+0x1cc>
 8107e20:	6018      	str	r0, [r3, #0]
 8107e22:	e002      	b.n	8107e2a <_printf_i+0x1d2>
 8107e24:	0671      	lsls	r1, r6, #25
 8107e26:	d5fb      	bpl.n	8107e20 <_printf_i+0x1c8>
 8107e28:	8018      	strh	r0, [r3, #0]
 8107e2a:	2300      	movs	r3, #0
 8107e2c:	6123      	str	r3, [r4, #16]
 8107e2e:	4616      	mov	r6, r2
 8107e30:	e7ba      	b.n	8107da8 <_printf_i+0x150>
 8107e32:	680b      	ldr	r3, [r1, #0]
 8107e34:	1d1a      	adds	r2, r3, #4
 8107e36:	600a      	str	r2, [r1, #0]
 8107e38:	681e      	ldr	r6, [r3, #0]
 8107e3a:	6862      	ldr	r2, [r4, #4]
 8107e3c:	2100      	movs	r1, #0
 8107e3e:	4630      	mov	r0, r6
 8107e40:	f7f8 fa56 	bl	81002f0 <memchr>
 8107e44:	b108      	cbz	r0, 8107e4a <_printf_i+0x1f2>
 8107e46:	1b80      	subs	r0, r0, r6
 8107e48:	6060      	str	r0, [r4, #4]
 8107e4a:	6863      	ldr	r3, [r4, #4]
 8107e4c:	6123      	str	r3, [r4, #16]
 8107e4e:	2300      	movs	r3, #0
 8107e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8107e54:	e7a8      	b.n	8107da8 <_printf_i+0x150>
 8107e56:	6923      	ldr	r3, [r4, #16]
 8107e58:	4632      	mov	r2, r6
 8107e5a:	4649      	mov	r1, r9
 8107e5c:	4640      	mov	r0, r8
 8107e5e:	47d0      	blx	sl
 8107e60:	3001      	adds	r0, #1
 8107e62:	d0ab      	beq.n	8107dbc <_printf_i+0x164>
 8107e64:	6823      	ldr	r3, [r4, #0]
 8107e66:	079b      	lsls	r3, r3, #30
 8107e68:	d413      	bmi.n	8107e92 <_printf_i+0x23a>
 8107e6a:	68e0      	ldr	r0, [r4, #12]
 8107e6c:	9b03      	ldr	r3, [sp, #12]
 8107e6e:	4298      	cmp	r0, r3
 8107e70:	bfb8      	it	lt
 8107e72:	4618      	movlt	r0, r3
 8107e74:	e7a4      	b.n	8107dc0 <_printf_i+0x168>
 8107e76:	2301      	movs	r3, #1
 8107e78:	4632      	mov	r2, r6
 8107e7a:	4649      	mov	r1, r9
 8107e7c:	4640      	mov	r0, r8
 8107e7e:	47d0      	blx	sl
 8107e80:	3001      	adds	r0, #1
 8107e82:	d09b      	beq.n	8107dbc <_printf_i+0x164>
 8107e84:	3501      	adds	r5, #1
 8107e86:	68e3      	ldr	r3, [r4, #12]
 8107e88:	9903      	ldr	r1, [sp, #12]
 8107e8a:	1a5b      	subs	r3, r3, r1
 8107e8c:	42ab      	cmp	r3, r5
 8107e8e:	dcf2      	bgt.n	8107e76 <_printf_i+0x21e>
 8107e90:	e7eb      	b.n	8107e6a <_printf_i+0x212>
 8107e92:	2500      	movs	r5, #0
 8107e94:	f104 0619 	add.w	r6, r4, #25
 8107e98:	e7f5      	b.n	8107e86 <_printf_i+0x22e>
 8107e9a:	bf00      	nop
 8107e9c:	0810d4a2 	.word	0x0810d4a2
 8107ea0:	0810d4b3 	.word	0x0810d4b3

08107ea4 <_scanf_float>:
 8107ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107ea8:	b087      	sub	sp, #28
 8107eaa:	4617      	mov	r7, r2
 8107eac:	9303      	str	r3, [sp, #12]
 8107eae:	688b      	ldr	r3, [r1, #8]
 8107eb0:	1e5a      	subs	r2, r3, #1
 8107eb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8107eb6:	bf83      	ittte	hi
 8107eb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8107ebc:	195b      	addhi	r3, r3, r5
 8107ebe:	9302      	strhi	r3, [sp, #8]
 8107ec0:	2300      	movls	r3, #0
 8107ec2:	bf86      	itte	hi
 8107ec4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8107ec8:	608b      	strhi	r3, [r1, #8]
 8107eca:	9302      	strls	r3, [sp, #8]
 8107ecc:	680b      	ldr	r3, [r1, #0]
 8107ece:	468b      	mov	fp, r1
 8107ed0:	2500      	movs	r5, #0
 8107ed2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8107ed6:	f84b 3b1c 	str.w	r3, [fp], #28
 8107eda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8107ede:	4680      	mov	r8, r0
 8107ee0:	460c      	mov	r4, r1
 8107ee2:	465e      	mov	r6, fp
 8107ee4:	46aa      	mov	sl, r5
 8107ee6:	46a9      	mov	r9, r5
 8107ee8:	9501      	str	r5, [sp, #4]
 8107eea:	68a2      	ldr	r2, [r4, #8]
 8107eec:	b152      	cbz	r2, 8107f04 <_scanf_float+0x60>
 8107eee:	683b      	ldr	r3, [r7, #0]
 8107ef0:	781b      	ldrb	r3, [r3, #0]
 8107ef2:	2b4e      	cmp	r3, #78	; 0x4e
 8107ef4:	d864      	bhi.n	8107fc0 <_scanf_float+0x11c>
 8107ef6:	2b40      	cmp	r3, #64	; 0x40
 8107ef8:	d83c      	bhi.n	8107f74 <_scanf_float+0xd0>
 8107efa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8107efe:	b2c8      	uxtb	r0, r1
 8107f00:	280e      	cmp	r0, #14
 8107f02:	d93a      	bls.n	8107f7a <_scanf_float+0xd6>
 8107f04:	f1b9 0f00 	cmp.w	r9, #0
 8107f08:	d003      	beq.n	8107f12 <_scanf_float+0x6e>
 8107f0a:	6823      	ldr	r3, [r4, #0]
 8107f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107f10:	6023      	str	r3, [r4, #0]
 8107f12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8107f16:	f1ba 0f01 	cmp.w	sl, #1
 8107f1a:	f200 8113 	bhi.w	8108144 <_scanf_float+0x2a0>
 8107f1e:	455e      	cmp	r6, fp
 8107f20:	f200 8105 	bhi.w	810812e <_scanf_float+0x28a>
 8107f24:	2501      	movs	r5, #1
 8107f26:	4628      	mov	r0, r5
 8107f28:	b007      	add	sp, #28
 8107f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107f2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8107f32:	2a0d      	cmp	r2, #13
 8107f34:	d8e6      	bhi.n	8107f04 <_scanf_float+0x60>
 8107f36:	a101      	add	r1, pc, #4	; (adr r1, 8107f3c <_scanf_float+0x98>)
 8107f38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8107f3c:	0810807b 	.word	0x0810807b
 8107f40:	08107f05 	.word	0x08107f05
 8107f44:	08107f05 	.word	0x08107f05
 8107f48:	08107f05 	.word	0x08107f05
 8107f4c:	081080db 	.word	0x081080db
 8107f50:	081080b3 	.word	0x081080b3
 8107f54:	08107f05 	.word	0x08107f05
 8107f58:	08107f05 	.word	0x08107f05
 8107f5c:	08108089 	.word	0x08108089
 8107f60:	08107f05 	.word	0x08107f05
 8107f64:	08107f05 	.word	0x08107f05
 8107f68:	08107f05 	.word	0x08107f05
 8107f6c:	08107f05 	.word	0x08107f05
 8107f70:	08108041 	.word	0x08108041
 8107f74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8107f78:	e7db      	b.n	8107f32 <_scanf_float+0x8e>
 8107f7a:	290e      	cmp	r1, #14
 8107f7c:	d8c2      	bhi.n	8107f04 <_scanf_float+0x60>
 8107f7e:	a001      	add	r0, pc, #4	; (adr r0, 8107f84 <_scanf_float+0xe0>)
 8107f80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8107f84:	08108033 	.word	0x08108033
 8107f88:	08107f05 	.word	0x08107f05
 8107f8c:	08108033 	.word	0x08108033
 8107f90:	081080c7 	.word	0x081080c7
 8107f94:	08107f05 	.word	0x08107f05
 8107f98:	08107fe1 	.word	0x08107fe1
 8107f9c:	0810801d 	.word	0x0810801d
 8107fa0:	0810801d 	.word	0x0810801d
 8107fa4:	0810801d 	.word	0x0810801d
 8107fa8:	0810801d 	.word	0x0810801d
 8107fac:	0810801d 	.word	0x0810801d
 8107fb0:	0810801d 	.word	0x0810801d
 8107fb4:	0810801d 	.word	0x0810801d
 8107fb8:	0810801d 	.word	0x0810801d
 8107fbc:	0810801d 	.word	0x0810801d
 8107fc0:	2b6e      	cmp	r3, #110	; 0x6e
 8107fc2:	d809      	bhi.n	8107fd8 <_scanf_float+0x134>
 8107fc4:	2b60      	cmp	r3, #96	; 0x60
 8107fc6:	d8b2      	bhi.n	8107f2e <_scanf_float+0x8a>
 8107fc8:	2b54      	cmp	r3, #84	; 0x54
 8107fca:	d077      	beq.n	81080bc <_scanf_float+0x218>
 8107fcc:	2b59      	cmp	r3, #89	; 0x59
 8107fce:	d199      	bne.n	8107f04 <_scanf_float+0x60>
 8107fd0:	2d07      	cmp	r5, #7
 8107fd2:	d197      	bne.n	8107f04 <_scanf_float+0x60>
 8107fd4:	2508      	movs	r5, #8
 8107fd6:	e029      	b.n	810802c <_scanf_float+0x188>
 8107fd8:	2b74      	cmp	r3, #116	; 0x74
 8107fda:	d06f      	beq.n	81080bc <_scanf_float+0x218>
 8107fdc:	2b79      	cmp	r3, #121	; 0x79
 8107fde:	e7f6      	b.n	8107fce <_scanf_float+0x12a>
 8107fe0:	6821      	ldr	r1, [r4, #0]
 8107fe2:	05c8      	lsls	r0, r1, #23
 8107fe4:	d51a      	bpl.n	810801c <_scanf_float+0x178>
 8107fe6:	9b02      	ldr	r3, [sp, #8]
 8107fe8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8107fec:	6021      	str	r1, [r4, #0]
 8107fee:	f109 0901 	add.w	r9, r9, #1
 8107ff2:	b11b      	cbz	r3, 8107ffc <_scanf_float+0x158>
 8107ff4:	3b01      	subs	r3, #1
 8107ff6:	3201      	adds	r2, #1
 8107ff8:	9302      	str	r3, [sp, #8]
 8107ffa:	60a2      	str	r2, [r4, #8]
 8107ffc:	68a3      	ldr	r3, [r4, #8]
 8107ffe:	3b01      	subs	r3, #1
 8108000:	60a3      	str	r3, [r4, #8]
 8108002:	6923      	ldr	r3, [r4, #16]
 8108004:	3301      	adds	r3, #1
 8108006:	6123      	str	r3, [r4, #16]
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	3b01      	subs	r3, #1
 810800c:	2b00      	cmp	r3, #0
 810800e:	607b      	str	r3, [r7, #4]
 8108010:	f340 8084 	ble.w	810811c <_scanf_float+0x278>
 8108014:	683b      	ldr	r3, [r7, #0]
 8108016:	3301      	adds	r3, #1
 8108018:	603b      	str	r3, [r7, #0]
 810801a:	e766      	b.n	8107eea <_scanf_float+0x46>
 810801c:	eb1a 0f05 	cmn.w	sl, r5
 8108020:	f47f af70 	bne.w	8107f04 <_scanf_float+0x60>
 8108024:	6822      	ldr	r2, [r4, #0]
 8108026:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810802a:	6022      	str	r2, [r4, #0]
 810802c:	f806 3b01 	strb.w	r3, [r6], #1
 8108030:	e7e4      	b.n	8107ffc <_scanf_float+0x158>
 8108032:	6822      	ldr	r2, [r4, #0]
 8108034:	0610      	lsls	r0, r2, #24
 8108036:	f57f af65 	bpl.w	8107f04 <_scanf_float+0x60>
 810803a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810803e:	e7f4      	b.n	810802a <_scanf_float+0x186>
 8108040:	f1ba 0f00 	cmp.w	sl, #0
 8108044:	d10e      	bne.n	8108064 <_scanf_float+0x1c0>
 8108046:	f1b9 0f00 	cmp.w	r9, #0
 810804a:	d10e      	bne.n	810806a <_scanf_float+0x1c6>
 810804c:	6822      	ldr	r2, [r4, #0]
 810804e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108052:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8108056:	d108      	bne.n	810806a <_scanf_float+0x1c6>
 8108058:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810805c:	6022      	str	r2, [r4, #0]
 810805e:	f04f 0a01 	mov.w	sl, #1
 8108062:	e7e3      	b.n	810802c <_scanf_float+0x188>
 8108064:	f1ba 0f02 	cmp.w	sl, #2
 8108068:	d055      	beq.n	8108116 <_scanf_float+0x272>
 810806a:	2d01      	cmp	r5, #1
 810806c:	d002      	beq.n	8108074 <_scanf_float+0x1d0>
 810806e:	2d04      	cmp	r5, #4
 8108070:	f47f af48 	bne.w	8107f04 <_scanf_float+0x60>
 8108074:	3501      	adds	r5, #1
 8108076:	b2ed      	uxtb	r5, r5
 8108078:	e7d8      	b.n	810802c <_scanf_float+0x188>
 810807a:	f1ba 0f01 	cmp.w	sl, #1
 810807e:	f47f af41 	bne.w	8107f04 <_scanf_float+0x60>
 8108082:	f04f 0a02 	mov.w	sl, #2
 8108086:	e7d1      	b.n	810802c <_scanf_float+0x188>
 8108088:	b97d      	cbnz	r5, 81080aa <_scanf_float+0x206>
 810808a:	f1b9 0f00 	cmp.w	r9, #0
 810808e:	f47f af3c 	bne.w	8107f0a <_scanf_float+0x66>
 8108092:	6822      	ldr	r2, [r4, #0]
 8108094:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8108098:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810809c:	f47f af39 	bne.w	8107f12 <_scanf_float+0x6e>
 81080a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81080a4:	6022      	str	r2, [r4, #0]
 81080a6:	2501      	movs	r5, #1
 81080a8:	e7c0      	b.n	810802c <_scanf_float+0x188>
 81080aa:	2d03      	cmp	r5, #3
 81080ac:	d0e2      	beq.n	8108074 <_scanf_float+0x1d0>
 81080ae:	2d05      	cmp	r5, #5
 81080b0:	e7de      	b.n	8108070 <_scanf_float+0x1cc>
 81080b2:	2d02      	cmp	r5, #2
 81080b4:	f47f af26 	bne.w	8107f04 <_scanf_float+0x60>
 81080b8:	2503      	movs	r5, #3
 81080ba:	e7b7      	b.n	810802c <_scanf_float+0x188>
 81080bc:	2d06      	cmp	r5, #6
 81080be:	f47f af21 	bne.w	8107f04 <_scanf_float+0x60>
 81080c2:	2507      	movs	r5, #7
 81080c4:	e7b2      	b.n	810802c <_scanf_float+0x188>
 81080c6:	6822      	ldr	r2, [r4, #0]
 81080c8:	0591      	lsls	r1, r2, #22
 81080ca:	f57f af1b 	bpl.w	8107f04 <_scanf_float+0x60>
 81080ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 81080d2:	6022      	str	r2, [r4, #0]
 81080d4:	f8cd 9004 	str.w	r9, [sp, #4]
 81080d8:	e7a8      	b.n	810802c <_scanf_float+0x188>
 81080da:	6822      	ldr	r2, [r4, #0]
 81080dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 81080e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 81080e4:	d006      	beq.n	81080f4 <_scanf_float+0x250>
 81080e6:	0550      	lsls	r0, r2, #21
 81080e8:	f57f af0c 	bpl.w	8107f04 <_scanf_float+0x60>
 81080ec:	f1b9 0f00 	cmp.w	r9, #0
 81080f0:	f43f af0f 	beq.w	8107f12 <_scanf_float+0x6e>
 81080f4:	0591      	lsls	r1, r2, #22
 81080f6:	bf58      	it	pl
 81080f8:	9901      	ldrpl	r1, [sp, #4]
 81080fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81080fe:	bf58      	it	pl
 8108100:	eba9 0101 	subpl.w	r1, r9, r1
 8108104:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8108108:	bf58      	it	pl
 810810a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810810e:	6022      	str	r2, [r4, #0]
 8108110:	f04f 0900 	mov.w	r9, #0
 8108114:	e78a      	b.n	810802c <_scanf_float+0x188>
 8108116:	f04f 0a03 	mov.w	sl, #3
 810811a:	e787      	b.n	810802c <_scanf_float+0x188>
 810811c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8108120:	4639      	mov	r1, r7
 8108122:	4640      	mov	r0, r8
 8108124:	4798      	blx	r3
 8108126:	2800      	cmp	r0, #0
 8108128:	f43f aedf 	beq.w	8107eea <_scanf_float+0x46>
 810812c:	e6ea      	b.n	8107f04 <_scanf_float+0x60>
 810812e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108132:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8108136:	463a      	mov	r2, r7
 8108138:	4640      	mov	r0, r8
 810813a:	4798      	blx	r3
 810813c:	6923      	ldr	r3, [r4, #16]
 810813e:	3b01      	subs	r3, #1
 8108140:	6123      	str	r3, [r4, #16]
 8108142:	e6ec      	b.n	8107f1e <_scanf_float+0x7a>
 8108144:	1e6b      	subs	r3, r5, #1
 8108146:	2b06      	cmp	r3, #6
 8108148:	d825      	bhi.n	8108196 <_scanf_float+0x2f2>
 810814a:	2d02      	cmp	r5, #2
 810814c:	d836      	bhi.n	81081bc <_scanf_float+0x318>
 810814e:	455e      	cmp	r6, fp
 8108150:	f67f aee8 	bls.w	8107f24 <_scanf_float+0x80>
 8108154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108158:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810815c:	463a      	mov	r2, r7
 810815e:	4640      	mov	r0, r8
 8108160:	4798      	blx	r3
 8108162:	6923      	ldr	r3, [r4, #16]
 8108164:	3b01      	subs	r3, #1
 8108166:	6123      	str	r3, [r4, #16]
 8108168:	e7f1      	b.n	810814e <_scanf_float+0x2aa>
 810816a:	9802      	ldr	r0, [sp, #8]
 810816c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8108170:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8108174:	9002      	str	r0, [sp, #8]
 8108176:	463a      	mov	r2, r7
 8108178:	4640      	mov	r0, r8
 810817a:	4798      	blx	r3
 810817c:	6923      	ldr	r3, [r4, #16]
 810817e:	3b01      	subs	r3, #1
 8108180:	6123      	str	r3, [r4, #16]
 8108182:	f10a 3aff 	add.w	sl, sl, #4294967295
 8108186:	fa5f fa8a 	uxtb.w	sl, sl
 810818a:	f1ba 0f02 	cmp.w	sl, #2
 810818e:	d1ec      	bne.n	810816a <_scanf_float+0x2c6>
 8108190:	3d03      	subs	r5, #3
 8108192:	b2ed      	uxtb	r5, r5
 8108194:	1b76      	subs	r6, r6, r5
 8108196:	6823      	ldr	r3, [r4, #0]
 8108198:	05da      	lsls	r2, r3, #23
 810819a:	d52f      	bpl.n	81081fc <_scanf_float+0x358>
 810819c:	055b      	lsls	r3, r3, #21
 810819e:	d510      	bpl.n	81081c2 <_scanf_float+0x31e>
 81081a0:	455e      	cmp	r6, fp
 81081a2:	f67f aebf 	bls.w	8107f24 <_scanf_float+0x80>
 81081a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81081aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81081ae:	463a      	mov	r2, r7
 81081b0:	4640      	mov	r0, r8
 81081b2:	4798      	blx	r3
 81081b4:	6923      	ldr	r3, [r4, #16]
 81081b6:	3b01      	subs	r3, #1
 81081b8:	6123      	str	r3, [r4, #16]
 81081ba:	e7f1      	b.n	81081a0 <_scanf_float+0x2fc>
 81081bc:	46aa      	mov	sl, r5
 81081be:	9602      	str	r6, [sp, #8]
 81081c0:	e7df      	b.n	8108182 <_scanf_float+0x2de>
 81081c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81081c6:	6923      	ldr	r3, [r4, #16]
 81081c8:	2965      	cmp	r1, #101	; 0x65
 81081ca:	f103 33ff 	add.w	r3, r3, #4294967295
 81081ce:	f106 35ff 	add.w	r5, r6, #4294967295
 81081d2:	6123      	str	r3, [r4, #16]
 81081d4:	d00c      	beq.n	81081f0 <_scanf_float+0x34c>
 81081d6:	2945      	cmp	r1, #69	; 0x45
 81081d8:	d00a      	beq.n	81081f0 <_scanf_float+0x34c>
 81081da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81081de:	463a      	mov	r2, r7
 81081e0:	4640      	mov	r0, r8
 81081e2:	4798      	blx	r3
 81081e4:	6923      	ldr	r3, [r4, #16]
 81081e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81081ea:	3b01      	subs	r3, #1
 81081ec:	1eb5      	subs	r5, r6, #2
 81081ee:	6123      	str	r3, [r4, #16]
 81081f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81081f4:	463a      	mov	r2, r7
 81081f6:	4640      	mov	r0, r8
 81081f8:	4798      	blx	r3
 81081fa:	462e      	mov	r6, r5
 81081fc:	6825      	ldr	r5, [r4, #0]
 81081fe:	f015 0510 	ands.w	r5, r5, #16
 8108202:	d158      	bne.n	81082b6 <_scanf_float+0x412>
 8108204:	7035      	strb	r5, [r6, #0]
 8108206:	6823      	ldr	r3, [r4, #0]
 8108208:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810820c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8108210:	d11c      	bne.n	810824c <_scanf_float+0x3a8>
 8108212:	9b01      	ldr	r3, [sp, #4]
 8108214:	454b      	cmp	r3, r9
 8108216:	eba3 0209 	sub.w	r2, r3, r9
 810821a:	d124      	bne.n	8108266 <_scanf_float+0x3c2>
 810821c:	2200      	movs	r2, #0
 810821e:	4659      	mov	r1, fp
 8108220:	4640      	mov	r0, r8
 8108222:	f001 f843 	bl	81092ac <_strtod_r>
 8108226:	9b03      	ldr	r3, [sp, #12]
 8108228:	6821      	ldr	r1, [r4, #0]
 810822a:	681b      	ldr	r3, [r3, #0]
 810822c:	f011 0f02 	tst.w	r1, #2
 8108230:	ec57 6b10 	vmov	r6, r7, d0
 8108234:	f103 0204 	add.w	r2, r3, #4
 8108238:	d020      	beq.n	810827c <_scanf_float+0x3d8>
 810823a:	9903      	ldr	r1, [sp, #12]
 810823c:	600a      	str	r2, [r1, #0]
 810823e:	681b      	ldr	r3, [r3, #0]
 8108240:	e9c3 6700 	strd	r6, r7, [r3]
 8108244:	68e3      	ldr	r3, [r4, #12]
 8108246:	3301      	adds	r3, #1
 8108248:	60e3      	str	r3, [r4, #12]
 810824a:	e66c      	b.n	8107f26 <_scanf_float+0x82>
 810824c:	9b04      	ldr	r3, [sp, #16]
 810824e:	2b00      	cmp	r3, #0
 8108250:	d0e4      	beq.n	810821c <_scanf_float+0x378>
 8108252:	9905      	ldr	r1, [sp, #20]
 8108254:	230a      	movs	r3, #10
 8108256:	462a      	mov	r2, r5
 8108258:	3101      	adds	r1, #1
 810825a:	4640      	mov	r0, r8
 810825c:	f001 f8b0 	bl	81093c0 <_strtol_r>
 8108260:	9b04      	ldr	r3, [sp, #16]
 8108262:	9e05      	ldr	r6, [sp, #20]
 8108264:	1ac2      	subs	r2, r0, r3
 8108266:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810826a:	429e      	cmp	r6, r3
 810826c:	bf28      	it	cs
 810826e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8108272:	4912      	ldr	r1, [pc, #72]	; (81082bc <_scanf_float+0x418>)
 8108274:	4630      	mov	r0, r6
 8108276:	f000 f98f 	bl	8108598 <siprintf>
 810827a:	e7cf      	b.n	810821c <_scanf_float+0x378>
 810827c:	f011 0f04 	tst.w	r1, #4
 8108280:	9903      	ldr	r1, [sp, #12]
 8108282:	600a      	str	r2, [r1, #0]
 8108284:	d1db      	bne.n	810823e <_scanf_float+0x39a>
 8108286:	f8d3 8000 	ldr.w	r8, [r3]
 810828a:	ee10 2a10 	vmov	r2, s0
 810828e:	ee10 0a10 	vmov	r0, s0
 8108292:	463b      	mov	r3, r7
 8108294:	4639      	mov	r1, r7
 8108296:	f7f8 fcd1 	bl	8100c3c <__aeabi_dcmpun>
 810829a:	b128      	cbz	r0, 81082a8 <_scanf_float+0x404>
 810829c:	4808      	ldr	r0, [pc, #32]	; (81082c0 <_scanf_float+0x41c>)
 810829e:	f000 f975 	bl	810858c <nanf>
 81082a2:	ed88 0a00 	vstr	s0, [r8]
 81082a6:	e7cd      	b.n	8108244 <_scanf_float+0x3a0>
 81082a8:	4630      	mov	r0, r6
 81082aa:	4639      	mov	r1, r7
 81082ac:	f7f8 fd24 	bl	8100cf8 <__aeabi_d2f>
 81082b0:	f8c8 0000 	str.w	r0, [r8]
 81082b4:	e7c6      	b.n	8108244 <_scanf_float+0x3a0>
 81082b6:	2500      	movs	r5, #0
 81082b8:	e635      	b.n	8107f26 <_scanf_float+0x82>
 81082ba:	bf00      	nop
 81082bc:	0810d4c4 	.word	0x0810d4c4
 81082c0:	0810d8e0 	.word	0x0810d8e0

081082c4 <iprintf>:
 81082c4:	b40f      	push	{r0, r1, r2, r3}
 81082c6:	4b0a      	ldr	r3, [pc, #40]	; (81082f0 <iprintf+0x2c>)
 81082c8:	b513      	push	{r0, r1, r4, lr}
 81082ca:	681c      	ldr	r4, [r3, #0]
 81082cc:	b124      	cbz	r4, 81082d8 <iprintf+0x14>
 81082ce:	69a3      	ldr	r3, [r4, #24]
 81082d0:	b913      	cbnz	r3, 81082d8 <iprintf+0x14>
 81082d2:	4620      	mov	r0, r4
 81082d4:	f7ff f804 	bl	81072e0 <__sinit>
 81082d8:	ab05      	add	r3, sp, #20
 81082da:	9a04      	ldr	r2, [sp, #16]
 81082dc:	68a1      	ldr	r1, [r4, #8]
 81082de:	9301      	str	r3, [sp, #4]
 81082e0:	4620      	mov	r0, r4
 81082e2:	f003 fa37 	bl	810b754 <_vfiprintf_r>
 81082e6:	b002      	add	sp, #8
 81082e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81082ec:	b004      	add	sp, #16
 81082ee:	4770      	bx	lr
 81082f0:	10000060 	.word	0x10000060

081082f4 <_puts_r>:
 81082f4:	b570      	push	{r4, r5, r6, lr}
 81082f6:	460e      	mov	r6, r1
 81082f8:	4605      	mov	r5, r0
 81082fa:	b118      	cbz	r0, 8108304 <_puts_r+0x10>
 81082fc:	6983      	ldr	r3, [r0, #24]
 81082fe:	b90b      	cbnz	r3, 8108304 <_puts_r+0x10>
 8108300:	f7fe ffee 	bl	81072e0 <__sinit>
 8108304:	69ab      	ldr	r3, [r5, #24]
 8108306:	68ac      	ldr	r4, [r5, #8]
 8108308:	b913      	cbnz	r3, 8108310 <_puts_r+0x1c>
 810830a:	4628      	mov	r0, r5
 810830c:	f7fe ffe8 	bl	81072e0 <__sinit>
 8108310:	4b2c      	ldr	r3, [pc, #176]	; (81083c4 <_puts_r+0xd0>)
 8108312:	429c      	cmp	r4, r3
 8108314:	d120      	bne.n	8108358 <_puts_r+0x64>
 8108316:	686c      	ldr	r4, [r5, #4]
 8108318:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810831a:	07db      	lsls	r3, r3, #31
 810831c:	d405      	bmi.n	810832a <_puts_r+0x36>
 810831e:	89a3      	ldrh	r3, [r4, #12]
 8108320:	0598      	lsls	r0, r3, #22
 8108322:	d402      	bmi.n	810832a <_puts_r+0x36>
 8108324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108326:	f7ff f89e 	bl	8107466 <__retarget_lock_acquire_recursive>
 810832a:	89a3      	ldrh	r3, [r4, #12]
 810832c:	0719      	lsls	r1, r3, #28
 810832e:	d51d      	bpl.n	810836c <_puts_r+0x78>
 8108330:	6923      	ldr	r3, [r4, #16]
 8108332:	b1db      	cbz	r3, 810836c <_puts_r+0x78>
 8108334:	3e01      	subs	r6, #1
 8108336:	68a3      	ldr	r3, [r4, #8]
 8108338:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 810833c:	3b01      	subs	r3, #1
 810833e:	60a3      	str	r3, [r4, #8]
 8108340:	bb39      	cbnz	r1, 8108392 <_puts_r+0x9e>
 8108342:	2b00      	cmp	r3, #0
 8108344:	da38      	bge.n	81083b8 <_puts_r+0xc4>
 8108346:	4622      	mov	r2, r4
 8108348:	210a      	movs	r1, #10
 810834a:	4628      	mov	r0, r5
 810834c:	f001 f83a 	bl	81093c4 <__swbuf_r>
 8108350:	3001      	adds	r0, #1
 8108352:	d011      	beq.n	8108378 <_puts_r+0x84>
 8108354:	250a      	movs	r5, #10
 8108356:	e011      	b.n	810837c <_puts_r+0x88>
 8108358:	4b1b      	ldr	r3, [pc, #108]	; (81083c8 <_puts_r+0xd4>)
 810835a:	429c      	cmp	r4, r3
 810835c:	d101      	bne.n	8108362 <_puts_r+0x6e>
 810835e:	68ac      	ldr	r4, [r5, #8]
 8108360:	e7da      	b.n	8108318 <_puts_r+0x24>
 8108362:	4b1a      	ldr	r3, [pc, #104]	; (81083cc <_puts_r+0xd8>)
 8108364:	429c      	cmp	r4, r3
 8108366:	bf08      	it	eq
 8108368:	68ec      	ldreq	r4, [r5, #12]
 810836a:	e7d5      	b.n	8108318 <_puts_r+0x24>
 810836c:	4621      	mov	r1, r4
 810836e:	4628      	mov	r0, r5
 8108370:	f001 f88c 	bl	810948c <__swsetup_r>
 8108374:	2800      	cmp	r0, #0
 8108376:	d0dd      	beq.n	8108334 <_puts_r+0x40>
 8108378:	f04f 35ff 	mov.w	r5, #4294967295
 810837c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810837e:	07da      	lsls	r2, r3, #31
 8108380:	d405      	bmi.n	810838e <_puts_r+0x9a>
 8108382:	89a3      	ldrh	r3, [r4, #12]
 8108384:	059b      	lsls	r3, r3, #22
 8108386:	d402      	bmi.n	810838e <_puts_r+0x9a>
 8108388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810838a:	f7ff f86d 	bl	8107468 <__retarget_lock_release_recursive>
 810838e:	4628      	mov	r0, r5
 8108390:	bd70      	pop	{r4, r5, r6, pc}
 8108392:	2b00      	cmp	r3, #0
 8108394:	da04      	bge.n	81083a0 <_puts_r+0xac>
 8108396:	69a2      	ldr	r2, [r4, #24]
 8108398:	429a      	cmp	r2, r3
 810839a:	dc06      	bgt.n	81083aa <_puts_r+0xb6>
 810839c:	290a      	cmp	r1, #10
 810839e:	d004      	beq.n	81083aa <_puts_r+0xb6>
 81083a0:	6823      	ldr	r3, [r4, #0]
 81083a2:	1c5a      	adds	r2, r3, #1
 81083a4:	6022      	str	r2, [r4, #0]
 81083a6:	7019      	strb	r1, [r3, #0]
 81083a8:	e7c5      	b.n	8108336 <_puts_r+0x42>
 81083aa:	4622      	mov	r2, r4
 81083ac:	4628      	mov	r0, r5
 81083ae:	f001 f809 	bl	81093c4 <__swbuf_r>
 81083b2:	3001      	adds	r0, #1
 81083b4:	d1bf      	bne.n	8108336 <_puts_r+0x42>
 81083b6:	e7df      	b.n	8108378 <_puts_r+0x84>
 81083b8:	6823      	ldr	r3, [r4, #0]
 81083ba:	250a      	movs	r5, #10
 81083bc:	1c5a      	adds	r2, r3, #1
 81083be:	6022      	str	r2, [r4, #0]
 81083c0:	701d      	strb	r5, [r3, #0]
 81083c2:	e7db      	b.n	810837c <_puts_r+0x88>
 81083c4:	0810d44c 	.word	0x0810d44c
 81083c8:	0810d46c 	.word	0x0810d46c
 81083cc:	0810d42c 	.word	0x0810d42c

081083d0 <puts>:
 81083d0:	4b02      	ldr	r3, [pc, #8]	; (81083dc <puts+0xc>)
 81083d2:	4601      	mov	r1, r0
 81083d4:	6818      	ldr	r0, [r3, #0]
 81083d6:	f7ff bf8d 	b.w	81082f4 <_puts_r>
 81083da:	bf00      	nop
 81083dc:	10000060 	.word	0x10000060

081083e0 <_sbrk_r>:
 81083e0:	b538      	push	{r3, r4, r5, lr}
 81083e2:	4d06      	ldr	r5, [pc, #24]	; (81083fc <_sbrk_r+0x1c>)
 81083e4:	2300      	movs	r3, #0
 81083e6:	4604      	mov	r4, r0
 81083e8:	4608      	mov	r0, r1
 81083ea:	602b      	str	r3, [r5, #0]
 81083ec:	f7fa f938 	bl	8102660 <_sbrk>
 81083f0:	1c43      	adds	r3, r0, #1
 81083f2:	d102      	bne.n	81083fa <_sbrk_r+0x1a>
 81083f4:	682b      	ldr	r3, [r5, #0]
 81083f6:	b103      	cbz	r3, 81083fa <_sbrk_r+0x1a>
 81083f8:	6023      	str	r3, [r4, #0]
 81083fa:	bd38      	pop	{r3, r4, r5, pc}
 81083fc:	100105d0 	.word	0x100105d0

08108400 <setvbuf>:
 8108400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8108404:	461d      	mov	r5, r3
 8108406:	4b5d      	ldr	r3, [pc, #372]	; (810857c <setvbuf+0x17c>)
 8108408:	681f      	ldr	r7, [r3, #0]
 810840a:	4604      	mov	r4, r0
 810840c:	460e      	mov	r6, r1
 810840e:	4690      	mov	r8, r2
 8108410:	b127      	cbz	r7, 810841c <setvbuf+0x1c>
 8108412:	69bb      	ldr	r3, [r7, #24]
 8108414:	b913      	cbnz	r3, 810841c <setvbuf+0x1c>
 8108416:	4638      	mov	r0, r7
 8108418:	f7fe ff62 	bl	81072e0 <__sinit>
 810841c:	4b58      	ldr	r3, [pc, #352]	; (8108580 <setvbuf+0x180>)
 810841e:	429c      	cmp	r4, r3
 8108420:	d167      	bne.n	81084f2 <setvbuf+0xf2>
 8108422:	687c      	ldr	r4, [r7, #4]
 8108424:	f1b8 0f02 	cmp.w	r8, #2
 8108428:	d006      	beq.n	8108438 <setvbuf+0x38>
 810842a:	f1b8 0f01 	cmp.w	r8, #1
 810842e:	f200 809f 	bhi.w	8108570 <setvbuf+0x170>
 8108432:	2d00      	cmp	r5, #0
 8108434:	f2c0 809c 	blt.w	8108570 <setvbuf+0x170>
 8108438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810843a:	07db      	lsls	r3, r3, #31
 810843c:	d405      	bmi.n	810844a <setvbuf+0x4a>
 810843e:	89a3      	ldrh	r3, [r4, #12]
 8108440:	0598      	lsls	r0, r3, #22
 8108442:	d402      	bmi.n	810844a <setvbuf+0x4a>
 8108444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8108446:	f7ff f80e 	bl	8107466 <__retarget_lock_acquire_recursive>
 810844a:	4621      	mov	r1, r4
 810844c:	4638      	mov	r0, r7
 810844e:	f7fe feb3 	bl	81071b8 <_fflush_r>
 8108452:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8108454:	b141      	cbz	r1, 8108468 <setvbuf+0x68>
 8108456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810845a:	4299      	cmp	r1, r3
 810845c:	d002      	beq.n	8108464 <setvbuf+0x64>
 810845e:	4638      	mov	r0, r7
 8108460:	f7ff f80c 	bl	810747c <_free_r>
 8108464:	2300      	movs	r3, #0
 8108466:	6363      	str	r3, [r4, #52]	; 0x34
 8108468:	2300      	movs	r3, #0
 810846a:	61a3      	str	r3, [r4, #24]
 810846c:	6063      	str	r3, [r4, #4]
 810846e:	89a3      	ldrh	r3, [r4, #12]
 8108470:	0619      	lsls	r1, r3, #24
 8108472:	d503      	bpl.n	810847c <setvbuf+0x7c>
 8108474:	6921      	ldr	r1, [r4, #16]
 8108476:	4638      	mov	r0, r7
 8108478:	f7ff f800 	bl	810747c <_free_r>
 810847c:	89a3      	ldrh	r3, [r4, #12]
 810847e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8108482:	f023 0303 	bic.w	r3, r3, #3
 8108486:	f1b8 0f02 	cmp.w	r8, #2
 810848a:	81a3      	strh	r3, [r4, #12]
 810848c:	d06c      	beq.n	8108568 <setvbuf+0x168>
 810848e:	ab01      	add	r3, sp, #4
 8108490:	466a      	mov	r2, sp
 8108492:	4621      	mov	r1, r4
 8108494:	4638      	mov	r0, r7
 8108496:	f002 fa75 	bl	810a984 <__swhatbuf_r>
 810849a:	89a3      	ldrh	r3, [r4, #12]
 810849c:	4318      	orrs	r0, r3
 810849e:	81a0      	strh	r0, [r4, #12]
 81084a0:	2d00      	cmp	r5, #0
 81084a2:	d130      	bne.n	8108506 <setvbuf+0x106>
 81084a4:	9d00      	ldr	r5, [sp, #0]
 81084a6:	4628      	mov	r0, r5
 81084a8:	f002 fad0 	bl	810aa4c <malloc>
 81084ac:	4606      	mov	r6, r0
 81084ae:	2800      	cmp	r0, #0
 81084b0:	d155      	bne.n	810855e <setvbuf+0x15e>
 81084b2:	f8dd 9000 	ldr.w	r9, [sp]
 81084b6:	45a9      	cmp	r9, r5
 81084b8:	d14a      	bne.n	8108550 <setvbuf+0x150>
 81084ba:	f04f 35ff 	mov.w	r5, #4294967295
 81084be:	2200      	movs	r2, #0
 81084c0:	60a2      	str	r2, [r4, #8]
 81084c2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 81084c6:	6022      	str	r2, [r4, #0]
 81084c8:	6122      	str	r2, [r4, #16]
 81084ca:	2201      	movs	r2, #1
 81084cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81084d0:	6162      	str	r2, [r4, #20]
 81084d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 81084d4:	f043 0302 	orr.w	r3, r3, #2
 81084d8:	07d2      	lsls	r2, r2, #31
 81084da:	81a3      	strh	r3, [r4, #12]
 81084dc:	d405      	bmi.n	81084ea <setvbuf+0xea>
 81084de:	f413 7f00 	tst.w	r3, #512	; 0x200
 81084e2:	d102      	bne.n	81084ea <setvbuf+0xea>
 81084e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81084e6:	f7fe ffbf 	bl	8107468 <__retarget_lock_release_recursive>
 81084ea:	4628      	mov	r0, r5
 81084ec:	b003      	add	sp, #12
 81084ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81084f2:	4b24      	ldr	r3, [pc, #144]	; (8108584 <setvbuf+0x184>)
 81084f4:	429c      	cmp	r4, r3
 81084f6:	d101      	bne.n	81084fc <setvbuf+0xfc>
 81084f8:	68bc      	ldr	r4, [r7, #8]
 81084fa:	e793      	b.n	8108424 <setvbuf+0x24>
 81084fc:	4b22      	ldr	r3, [pc, #136]	; (8108588 <setvbuf+0x188>)
 81084fe:	429c      	cmp	r4, r3
 8108500:	bf08      	it	eq
 8108502:	68fc      	ldreq	r4, [r7, #12]
 8108504:	e78e      	b.n	8108424 <setvbuf+0x24>
 8108506:	2e00      	cmp	r6, #0
 8108508:	d0cd      	beq.n	81084a6 <setvbuf+0xa6>
 810850a:	69bb      	ldr	r3, [r7, #24]
 810850c:	b913      	cbnz	r3, 8108514 <setvbuf+0x114>
 810850e:	4638      	mov	r0, r7
 8108510:	f7fe fee6 	bl	81072e0 <__sinit>
 8108514:	f1b8 0f01 	cmp.w	r8, #1
 8108518:	bf08      	it	eq
 810851a:	89a3      	ldrheq	r3, [r4, #12]
 810851c:	6026      	str	r6, [r4, #0]
 810851e:	bf04      	itt	eq
 8108520:	f043 0301 	orreq.w	r3, r3, #1
 8108524:	81a3      	strheq	r3, [r4, #12]
 8108526:	89a2      	ldrh	r2, [r4, #12]
 8108528:	f012 0308 	ands.w	r3, r2, #8
 810852c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8108530:	d01c      	beq.n	810856c <setvbuf+0x16c>
 8108532:	07d3      	lsls	r3, r2, #31
 8108534:	bf41      	itttt	mi
 8108536:	2300      	movmi	r3, #0
 8108538:	426d      	negmi	r5, r5
 810853a:	60a3      	strmi	r3, [r4, #8]
 810853c:	61a5      	strmi	r5, [r4, #24]
 810853e:	bf58      	it	pl
 8108540:	60a5      	strpl	r5, [r4, #8]
 8108542:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8108544:	f015 0501 	ands.w	r5, r5, #1
 8108548:	d115      	bne.n	8108576 <setvbuf+0x176>
 810854a:	f412 7f00 	tst.w	r2, #512	; 0x200
 810854e:	e7c8      	b.n	81084e2 <setvbuf+0xe2>
 8108550:	4648      	mov	r0, r9
 8108552:	f002 fa7b 	bl	810aa4c <malloc>
 8108556:	4606      	mov	r6, r0
 8108558:	2800      	cmp	r0, #0
 810855a:	d0ae      	beq.n	81084ba <setvbuf+0xba>
 810855c:	464d      	mov	r5, r9
 810855e:	89a3      	ldrh	r3, [r4, #12]
 8108560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8108564:	81a3      	strh	r3, [r4, #12]
 8108566:	e7d0      	b.n	810850a <setvbuf+0x10a>
 8108568:	2500      	movs	r5, #0
 810856a:	e7a8      	b.n	81084be <setvbuf+0xbe>
 810856c:	60a3      	str	r3, [r4, #8]
 810856e:	e7e8      	b.n	8108542 <setvbuf+0x142>
 8108570:	f04f 35ff 	mov.w	r5, #4294967295
 8108574:	e7b9      	b.n	81084ea <setvbuf+0xea>
 8108576:	2500      	movs	r5, #0
 8108578:	e7b7      	b.n	81084ea <setvbuf+0xea>
 810857a:	bf00      	nop
 810857c:	10000060 	.word	0x10000060
 8108580:	0810d44c 	.word	0x0810d44c
 8108584:	0810d46c 	.word	0x0810d46c
 8108588:	0810d42c 	.word	0x0810d42c

0810858c <nanf>:
 810858c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8108594 <nanf+0x8>
 8108590:	4770      	bx	lr
 8108592:	bf00      	nop
 8108594:	7fc00000 	.word	0x7fc00000

08108598 <siprintf>:
 8108598:	b40e      	push	{r1, r2, r3}
 810859a:	b500      	push	{lr}
 810859c:	b09c      	sub	sp, #112	; 0x70
 810859e:	ab1d      	add	r3, sp, #116	; 0x74
 81085a0:	9002      	str	r0, [sp, #8]
 81085a2:	9006      	str	r0, [sp, #24]
 81085a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 81085a8:	4809      	ldr	r0, [pc, #36]	; (81085d0 <siprintf+0x38>)
 81085aa:	9107      	str	r1, [sp, #28]
 81085ac:	9104      	str	r1, [sp, #16]
 81085ae:	4909      	ldr	r1, [pc, #36]	; (81085d4 <siprintf+0x3c>)
 81085b0:	f853 2b04 	ldr.w	r2, [r3], #4
 81085b4:	9105      	str	r1, [sp, #20]
 81085b6:	6800      	ldr	r0, [r0, #0]
 81085b8:	9301      	str	r3, [sp, #4]
 81085ba:	a902      	add	r1, sp, #8
 81085bc:	f002 ffa0 	bl	810b500 <_svfiprintf_r>
 81085c0:	9b02      	ldr	r3, [sp, #8]
 81085c2:	2200      	movs	r2, #0
 81085c4:	701a      	strb	r2, [r3, #0]
 81085c6:	b01c      	add	sp, #112	; 0x70
 81085c8:	f85d eb04 	ldr.w	lr, [sp], #4
 81085cc:	b003      	add	sp, #12
 81085ce:	4770      	bx	lr
 81085d0:	10000060 	.word	0x10000060
 81085d4:	ffff0208 	.word	0xffff0208

081085d8 <__sread>:
 81085d8:	b510      	push	{r4, lr}
 81085da:	460c      	mov	r4, r1
 81085dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81085e0:	f003 f9e8 	bl	810b9b4 <_read_r>
 81085e4:	2800      	cmp	r0, #0
 81085e6:	bfab      	itete	ge
 81085e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81085ea:	89a3      	ldrhlt	r3, [r4, #12]
 81085ec:	181b      	addge	r3, r3, r0
 81085ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81085f2:	bfac      	ite	ge
 81085f4:	6563      	strge	r3, [r4, #84]	; 0x54
 81085f6:	81a3      	strhlt	r3, [r4, #12]
 81085f8:	bd10      	pop	{r4, pc}

081085fa <__swrite>:
 81085fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81085fe:	461f      	mov	r7, r3
 8108600:	898b      	ldrh	r3, [r1, #12]
 8108602:	05db      	lsls	r3, r3, #23
 8108604:	4605      	mov	r5, r0
 8108606:	460c      	mov	r4, r1
 8108608:	4616      	mov	r6, r2
 810860a:	d505      	bpl.n	8108618 <__swrite+0x1e>
 810860c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108610:	2302      	movs	r3, #2
 8108612:	2200      	movs	r2, #0
 8108614:	f002 f9a4 	bl	810a960 <_lseek_r>
 8108618:	89a3      	ldrh	r3, [r4, #12]
 810861a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810861e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8108622:	81a3      	strh	r3, [r4, #12]
 8108624:	4632      	mov	r2, r6
 8108626:	463b      	mov	r3, r7
 8108628:	4628      	mov	r0, r5
 810862a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810862e:	f000 bf1b 	b.w	8109468 <_write_r>

08108632 <__sseek>:
 8108632:	b510      	push	{r4, lr}
 8108634:	460c      	mov	r4, r1
 8108636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810863a:	f002 f991 	bl	810a960 <_lseek_r>
 810863e:	1c43      	adds	r3, r0, #1
 8108640:	89a3      	ldrh	r3, [r4, #12]
 8108642:	bf15      	itete	ne
 8108644:	6560      	strne	r0, [r4, #84]	; 0x54
 8108646:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810864a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810864e:	81a3      	strheq	r3, [r4, #12]
 8108650:	bf18      	it	ne
 8108652:	81a3      	strhne	r3, [r4, #12]
 8108654:	bd10      	pop	{r4, pc}

08108656 <__sclose>:
 8108656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810865a:	f000 bf85 	b.w	8109568 <_close_r>

0810865e <sulp>:
 810865e:	b570      	push	{r4, r5, r6, lr}
 8108660:	4604      	mov	r4, r0
 8108662:	460d      	mov	r5, r1
 8108664:	ec45 4b10 	vmov	d0, r4, r5
 8108668:	4616      	mov	r6, r2
 810866a:	f002 fd8f 	bl	810b18c <__ulp>
 810866e:	ec51 0b10 	vmov	r0, r1, d0
 8108672:	b17e      	cbz	r6, 8108694 <sulp+0x36>
 8108674:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8108678:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810867c:	2b00      	cmp	r3, #0
 810867e:	dd09      	ble.n	8108694 <sulp+0x36>
 8108680:	051b      	lsls	r3, r3, #20
 8108682:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8108686:	2400      	movs	r4, #0
 8108688:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810868c:	4622      	mov	r2, r4
 810868e:	462b      	mov	r3, r5
 8108690:	f7f8 f83a 	bl	8100708 <__aeabi_dmul>
 8108694:	bd70      	pop	{r4, r5, r6, pc}
	...

08108698 <_strtod_l>:
 8108698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810869c:	b0a3      	sub	sp, #140	; 0x8c
 810869e:	461f      	mov	r7, r3
 81086a0:	2300      	movs	r3, #0
 81086a2:	931e      	str	r3, [sp, #120]	; 0x78
 81086a4:	4ba4      	ldr	r3, [pc, #656]	; (8108938 <_strtod_l+0x2a0>)
 81086a6:	9219      	str	r2, [sp, #100]	; 0x64
 81086a8:	681b      	ldr	r3, [r3, #0]
 81086aa:	9307      	str	r3, [sp, #28]
 81086ac:	4604      	mov	r4, r0
 81086ae:	4618      	mov	r0, r3
 81086b0:	4688      	mov	r8, r1
 81086b2:	f7f7 fe15 	bl	81002e0 <strlen>
 81086b6:	f04f 0a00 	mov.w	sl, #0
 81086ba:	4605      	mov	r5, r0
 81086bc:	f04f 0b00 	mov.w	fp, #0
 81086c0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 81086c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81086c6:	781a      	ldrb	r2, [r3, #0]
 81086c8:	2a2b      	cmp	r2, #43	; 0x2b
 81086ca:	d04c      	beq.n	8108766 <_strtod_l+0xce>
 81086cc:	d839      	bhi.n	8108742 <_strtod_l+0xaa>
 81086ce:	2a0d      	cmp	r2, #13
 81086d0:	d832      	bhi.n	8108738 <_strtod_l+0xa0>
 81086d2:	2a08      	cmp	r2, #8
 81086d4:	d832      	bhi.n	810873c <_strtod_l+0xa4>
 81086d6:	2a00      	cmp	r2, #0
 81086d8:	d03c      	beq.n	8108754 <_strtod_l+0xbc>
 81086da:	2300      	movs	r3, #0
 81086dc:	930e      	str	r3, [sp, #56]	; 0x38
 81086de:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 81086e0:	7833      	ldrb	r3, [r6, #0]
 81086e2:	2b30      	cmp	r3, #48	; 0x30
 81086e4:	f040 80b4 	bne.w	8108850 <_strtod_l+0x1b8>
 81086e8:	7873      	ldrb	r3, [r6, #1]
 81086ea:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 81086ee:	2b58      	cmp	r3, #88	; 0x58
 81086f0:	d16c      	bne.n	81087cc <_strtod_l+0x134>
 81086f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 81086f4:	9301      	str	r3, [sp, #4]
 81086f6:	ab1e      	add	r3, sp, #120	; 0x78
 81086f8:	9702      	str	r7, [sp, #8]
 81086fa:	9300      	str	r3, [sp, #0]
 81086fc:	4a8f      	ldr	r2, [pc, #572]	; (810893c <_strtod_l+0x2a4>)
 81086fe:	ab1f      	add	r3, sp, #124	; 0x7c
 8108700:	a91d      	add	r1, sp, #116	; 0x74
 8108702:	4620      	mov	r0, r4
 8108704:	f001 fe20 	bl	810a348 <__gethex>
 8108708:	f010 0707 	ands.w	r7, r0, #7
 810870c:	4605      	mov	r5, r0
 810870e:	d005      	beq.n	810871c <_strtod_l+0x84>
 8108710:	2f06      	cmp	r7, #6
 8108712:	d12a      	bne.n	810876a <_strtod_l+0xd2>
 8108714:	3601      	adds	r6, #1
 8108716:	2300      	movs	r3, #0
 8108718:	961d      	str	r6, [sp, #116]	; 0x74
 810871a:	930e      	str	r3, [sp, #56]	; 0x38
 810871c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810871e:	2b00      	cmp	r3, #0
 8108720:	f040 8596 	bne.w	8109250 <_strtod_l+0xbb8>
 8108724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8108726:	b1db      	cbz	r3, 8108760 <_strtod_l+0xc8>
 8108728:	4652      	mov	r2, sl
 810872a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 810872e:	ec43 2b10 	vmov	d0, r2, r3
 8108732:	b023      	add	sp, #140	; 0x8c
 8108734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108738:	2a20      	cmp	r2, #32
 810873a:	d1ce      	bne.n	81086da <_strtod_l+0x42>
 810873c:	3301      	adds	r3, #1
 810873e:	931d      	str	r3, [sp, #116]	; 0x74
 8108740:	e7c0      	b.n	81086c4 <_strtod_l+0x2c>
 8108742:	2a2d      	cmp	r2, #45	; 0x2d
 8108744:	d1c9      	bne.n	81086da <_strtod_l+0x42>
 8108746:	2201      	movs	r2, #1
 8108748:	920e      	str	r2, [sp, #56]	; 0x38
 810874a:	1c5a      	adds	r2, r3, #1
 810874c:	921d      	str	r2, [sp, #116]	; 0x74
 810874e:	785b      	ldrb	r3, [r3, #1]
 8108750:	2b00      	cmp	r3, #0
 8108752:	d1c4      	bne.n	81086de <_strtod_l+0x46>
 8108754:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8108756:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810875a:	2b00      	cmp	r3, #0
 810875c:	f040 8576 	bne.w	810924c <_strtod_l+0xbb4>
 8108760:	4652      	mov	r2, sl
 8108762:	465b      	mov	r3, fp
 8108764:	e7e3      	b.n	810872e <_strtod_l+0x96>
 8108766:	2200      	movs	r2, #0
 8108768:	e7ee      	b.n	8108748 <_strtod_l+0xb0>
 810876a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 810876c:	b13a      	cbz	r2, 810877e <_strtod_l+0xe6>
 810876e:	2135      	movs	r1, #53	; 0x35
 8108770:	a820      	add	r0, sp, #128	; 0x80
 8108772:	f002 fe16 	bl	810b3a2 <__copybits>
 8108776:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108778:	4620      	mov	r0, r4
 810877a:	f002 f9db 	bl	810ab34 <_Bfree>
 810877e:	3f01      	subs	r7, #1
 8108780:	2f05      	cmp	r7, #5
 8108782:	d807      	bhi.n	8108794 <_strtod_l+0xfc>
 8108784:	e8df f007 	tbb	[pc, r7]
 8108788:	1d180b0e 	.word	0x1d180b0e
 810878c:	030e      	.short	0x030e
 810878e:	f04f 0b00 	mov.w	fp, #0
 8108792:	46da      	mov	sl, fp
 8108794:	0728      	lsls	r0, r5, #28
 8108796:	d5c1      	bpl.n	810871c <_strtod_l+0x84>
 8108798:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 810879c:	e7be      	b.n	810871c <_strtod_l+0x84>
 810879e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 81087a2:	e7f7      	b.n	8108794 <_strtod_l+0xfc>
 81087a4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 81087a8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 81087aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 81087ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 81087b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 81087b6:	e7ed      	b.n	8108794 <_strtod_l+0xfc>
 81087b8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8108940 <_strtod_l+0x2a8>
 81087bc:	f04f 0a00 	mov.w	sl, #0
 81087c0:	e7e8      	b.n	8108794 <_strtod_l+0xfc>
 81087c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 81087c6:	f04f 3aff 	mov.w	sl, #4294967295
 81087ca:	e7e3      	b.n	8108794 <_strtod_l+0xfc>
 81087cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81087ce:	1c5a      	adds	r2, r3, #1
 81087d0:	921d      	str	r2, [sp, #116]	; 0x74
 81087d2:	785b      	ldrb	r3, [r3, #1]
 81087d4:	2b30      	cmp	r3, #48	; 0x30
 81087d6:	d0f9      	beq.n	81087cc <_strtod_l+0x134>
 81087d8:	2b00      	cmp	r3, #0
 81087da:	d09f      	beq.n	810871c <_strtod_l+0x84>
 81087dc:	2301      	movs	r3, #1
 81087de:	f04f 0900 	mov.w	r9, #0
 81087e2:	9304      	str	r3, [sp, #16]
 81087e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81087e6:	930a      	str	r3, [sp, #40]	; 0x28
 81087e8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 81087ec:	464f      	mov	r7, r9
 81087ee:	220a      	movs	r2, #10
 81087f0:	981d      	ldr	r0, [sp, #116]	; 0x74
 81087f2:	7806      	ldrb	r6, [r0, #0]
 81087f4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 81087f8:	b2d9      	uxtb	r1, r3
 81087fa:	2909      	cmp	r1, #9
 81087fc:	d92a      	bls.n	8108854 <_strtod_l+0x1bc>
 81087fe:	9907      	ldr	r1, [sp, #28]
 8108800:	462a      	mov	r2, r5
 8108802:	f003 f8f1 	bl	810b9e8 <strncmp>
 8108806:	b398      	cbz	r0, 8108870 <_strtod_l+0x1d8>
 8108808:	2000      	movs	r0, #0
 810880a:	4633      	mov	r3, r6
 810880c:	463d      	mov	r5, r7
 810880e:	9007      	str	r0, [sp, #28]
 8108810:	4602      	mov	r2, r0
 8108812:	2b65      	cmp	r3, #101	; 0x65
 8108814:	d001      	beq.n	810881a <_strtod_l+0x182>
 8108816:	2b45      	cmp	r3, #69	; 0x45
 8108818:	d118      	bne.n	810884c <_strtod_l+0x1b4>
 810881a:	b91d      	cbnz	r5, 8108824 <_strtod_l+0x18c>
 810881c:	9b04      	ldr	r3, [sp, #16]
 810881e:	4303      	orrs	r3, r0
 8108820:	d098      	beq.n	8108754 <_strtod_l+0xbc>
 8108822:	2500      	movs	r5, #0
 8108824:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8108828:	f108 0301 	add.w	r3, r8, #1
 810882c:	931d      	str	r3, [sp, #116]	; 0x74
 810882e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8108832:	2b2b      	cmp	r3, #43	; 0x2b
 8108834:	d075      	beq.n	8108922 <_strtod_l+0x28a>
 8108836:	2b2d      	cmp	r3, #45	; 0x2d
 8108838:	d07b      	beq.n	8108932 <_strtod_l+0x29a>
 810883a:	f04f 0c00 	mov.w	ip, #0
 810883e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8108842:	2909      	cmp	r1, #9
 8108844:	f240 8082 	bls.w	810894c <_strtod_l+0x2b4>
 8108848:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 810884c:	2600      	movs	r6, #0
 810884e:	e09d      	b.n	810898c <_strtod_l+0x2f4>
 8108850:	2300      	movs	r3, #0
 8108852:	e7c4      	b.n	81087de <_strtod_l+0x146>
 8108854:	2f08      	cmp	r7, #8
 8108856:	bfd8      	it	le
 8108858:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810885a:	f100 0001 	add.w	r0, r0, #1
 810885e:	bfda      	itte	le
 8108860:	fb02 3301 	mlale	r3, r2, r1, r3
 8108864:	9309      	strle	r3, [sp, #36]	; 0x24
 8108866:	fb02 3909 	mlagt	r9, r2, r9, r3
 810886a:	3701      	adds	r7, #1
 810886c:	901d      	str	r0, [sp, #116]	; 0x74
 810886e:	e7bf      	b.n	81087f0 <_strtod_l+0x158>
 8108870:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108872:	195a      	adds	r2, r3, r5
 8108874:	921d      	str	r2, [sp, #116]	; 0x74
 8108876:	5d5b      	ldrb	r3, [r3, r5]
 8108878:	2f00      	cmp	r7, #0
 810887a:	d037      	beq.n	81088ec <_strtod_l+0x254>
 810887c:	9007      	str	r0, [sp, #28]
 810887e:	463d      	mov	r5, r7
 8108880:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8108884:	2a09      	cmp	r2, #9
 8108886:	d912      	bls.n	81088ae <_strtod_l+0x216>
 8108888:	2201      	movs	r2, #1
 810888a:	e7c2      	b.n	8108812 <_strtod_l+0x17a>
 810888c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 810888e:	1c5a      	adds	r2, r3, #1
 8108890:	921d      	str	r2, [sp, #116]	; 0x74
 8108892:	785b      	ldrb	r3, [r3, #1]
 8108894:	3001      	adds	r0, #1
 8108896:	2b30      	cmp	r3, #48	; 0x30
 8108898:	d0f8      	beq.n	810888c <_strtod_l+0x1f4>
 810889a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 810889e:	2a08      	cmp	r2, #8
 81088a0:	f200 84db 	bhi.w	810925a <_strtod_l+0xbc2>
 81088a4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 81088a6:	9007      	str	r0, [sp, #28]
 81088a8:	2000      	movs	r0, #0
 81088aa:	920a      	str	r2, [sp, #40]	; 0x28
 81088ac:	4605      	mov	r5, r0
 81088ae:	3b30      	subs	r3, #48	; 0x30
 81088b0:	f100 0201 	add.w	r2, r0, #1
 81088b4:	d014      	beq.n	81088e0 <_strtod_l+0x248>
 81088b6:	9907      	ldr	r1, [sp, #28]
 81088b8:	4411      	add	r1, r2
 81088ba:	9107      	str	r1, [sp, #28]
 81088bc:	462a      	mov	r2, r5
 81088be:	eb00 0e05 	add.w	lr, r0, r5
 81088c2:	210a      	movs	r1, #10
 81088c4:	4572      	cmp	r2, lr
 81088c6:	d113      	bne.n	81088f0 <_strtod_l+0x258>
 81088c8:	182a      	adds	r2, r5, r0
 81088ca:	2a08      	cmp	r2, #8
 81088cc:	f105 0501 	add.w	r5, r5, #1
 81088d0:	4405      	add	r5, r0
 81088d2:	dc1c      	bgt.n	810890e <_strtod_l+0x276>
 81088d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 81088d6:	220a      	movs	r2, #10
 81088d8:	fb02 3301 	mla	r3, r2, r1, r3
 81088dc:	9309      	str	r3, [sp, #36]	; 0x24
 81088de:	2200      	movs	r2, #0
 81088e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81088e2:	1c59      	adds	r1, r3, #1
 81088e4:	911d      	str	r1, [sp, #116]	; 0x74
 81088e6:	785b      	ldrb	r3, [r3, #1]
 81088e8:	4610      	mov	r0, r2
 81088ea:	e7c9      	b.n	8108880 <_strtod_l+0x1e8>
 81088ec:	4638      	mov	r0, r7
 81088ee:	e7d2      	b.n	8108896 <_strtod_l+0x1fe>
 81088f0:	2a08      	cmp	r2, #8
 81088f2:	dc04      	bgt.n	81088fe <_strtod_l+0x266>
 81088f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 81088f6:	434e      	muls	r6, r1
 81088f8:	9609      	str	r6, [sp, #36]	; 0x24
 81088fa:	3201      	adds	r2, #1
 81088fc:	e7e2      	b.n	81088c4 <_strtod_l+0x22c>
 81088fe:	f102 0c01 	add.w	ip, r2, #1
 8108902:	f1bc 0f10 	cmp.w	ip, #16
 8108906:	bfd8      	it	le
 8108908:	fb01 f909 	mulle.w	r9, r1, r9
 810890c:	e7f5      	b.n	81088fa <_strtod_l+0x262>
 810890e:	2d10      	cmp	r5, #16
 8108910:	bfdc      	itt	le
 8108912:	220a      	movle	r2, #10
 8108914:	fb02 3909 	mlale	r9, r2, r9, r3
 8108918:	e7e1      	b.n	81088de <_strtod_l+0x246>
 810891a:	2300      	movs	r3, #0
 810891c:	9307      	str	r3, [sp, #28]
 810891e:	2201      	movs	r2, #1
 8108920:	e77c      	b.n	810881c <_strtod_l+0x184>
 8108922:	f04f 0c00 	mov.w	ip, #0
 8108926:	f108 0302 	add.w	r3, r8, #2
 810892a:	931d      	str	r3, [sp, #116]	; 0x74
 810892c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8108930:	e785      	b.n	810883e <_strtod_l+0x1a6>
 8108932:	f04f 0c01 	mov.w	ip, #1
 8108936:	e7f6      	b.n	8108926 <_strtod_l+0x28e>
 8108938:	0810d720 	.word	0x0810d720
 810893c:	0810d4cc 	.word	0x0810d4cc
 8108940:	7ff00000 	.word	0x7ff00000
 8108944:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108946:	1c59      	adds	r1, r3, #1
 8108948:	911d      	str	r1, [sp, #116]	; 0x74
 810894a:	785b      	ldrb	r3, [r3, #1]
 810894c:	2b30      	cmp	r3, #48	; 0x30
 810894e:	d0f9      	beq.n	8108944 <_strtod_l+0x2ac>
 8108950:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8108954:	2908      	cmp	r1, #8
 8108956:	f63f af79 	bhi.w	810884c <_strtod_l+0x1b4>
 810895a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 810895e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108960:	9308      	str	r3, [sp, #32]
 8108962:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108964:	1c59      	adds	r1, r3, #1
 8108966:	911d      	str	r1, [sp, #116]	; 0x74
 8108968:	785b      	ldrb	r3, [r3, #1]
 810896a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 810896e:	2e09      	cmp	r6, #9
 8108970:	d937      	bls.n	81089e2 <_strtod_l+0x34a>
 8108972:	9e08      	ldr	r6, [sp, #32]
 8108974:	1b89      	subs	r1, r1, r6
 8108976:	2908      	cmp	r1, #8
 8108978:	f644 661f 	movw	r6, #19999	; 0x4e1f
 810897c:	dc02      	bgt.n	8108984 <_strtod_l+0x2ec>
 810897e:	4576      	cmp	r6, lr
 8108980:	bfa8      	it	ge
 8108982:	4676      	movge	r6, lr
 8108984:	f1bc 0f00 	cmp.w	ip, #0
 8108988:	d000      	beq.n	810898c <_strtod_l+0x2f4>
 810898a:	4276      	negs	r6, r6
 810898c:	2d00      	cmp	r5, #0
 810898e:	d14f      	bne.n	8108a30 <_strtod_l+0x398>
 8108990:	9904      	ldr	r1, [sp, #16]
 8108992:	4301      	orrs	r1, r0
 8108994:	f47f aec2 	bne.w	810871c <_strtod_l+0x84>
 8108998:	2a00      	cmp	r2, #0
 810899a:	f47f aedb 	bne.w	8108754 <_strtod_l+0xbc>
 810899e:	2b69      	cmp	r3, #105	; 0x69
 81089a0:	d027      	beq.n	81089f2 <_strtod_l+0x35a>
 81089a2:	dc24      	bgt.n	81089ee <_strtod_l+0x356>
 81089a4:	2b49      	cmp	r3, #73	; 0x49
 81089a6:	d024      	beq.n	81089f2 <_strtod_l+0x35a>
 81089a8:	2b4e      	cmp	r3, #78	; 0x4e
 81089aa:	f47f aed3 	bne.w	8108754 <_strtod_l+0xbc>
 81089ae:	499e      	ldr	r1, [pc, #632]	; (8108c28 <_strtod_l+0x590>)
 81089b0:	a81d      	add	r0, sp, #116	; 0x74
 81089b2:	f001 ff21 	bl	810a7f8 <__match>
 81089b6:	2800      	cmp	r0, #0
 81089b8:	f43f aecc 	beq.w	8108754 <_strtod_l+0xbc>
 81089bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 81089be:	781b      	ldrb	r3, [r3, #0]
 81089c0:	2b28      	cmp	r3, #40	; 0x28
 81089c2:	d12d      	bne.n	8108a20 <_strtod_l+0x388>
 81089c4:	4999      	ldr	r1, [pc, #612]	; (8108c2c <_strtod_l+0x594>)
 81089c6:	aa20      	add	r2, sp, #128	; 0x80
 81089c8:	a81d      	add	r0, sp, #116	; 0x74
 81089ca:	f001 ff29 	bl	810a820 <__hexnan>
 81089ce:	2805      	cmp	r0, #5
 81089d0:	d126      	bne.n	8108a20 <_strtod_l+0x388>
 81089d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 81089d4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 81089d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 81089dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 81089e0:	e69c      	b.n	810871c <_strtod_l+0x84>
 81089e2:	210a      	movs	r1, #10
 81089e4:	fb01 3e0e 	mla	lr, r1, lr, r3
 81089e8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 81089ec:	e7b9      	b.n	8108962 <_strtod_l+0x2ca>
 81089ee:	2b6e      	cmp	r3, #110	; 0x6e
 81089f0:	e7db      	b.n	81089aa <_strtod_l+0x312>
 81089f2:	498f      	ldr	r1, [pc, #572]	; (8108c30 <_strtod_l+0x598>)
 81089f4:	a81d      	add	r0, sp, #116	; 0x74
 81089f6:	f001 feff 	bl	810a7f8 <__match>
 81089fa:	2800      	cmp	r0, #0
 81089fc:	f43f aeaa 	beq.w	8108754 <_strtod_l+0xbc>
 8108a00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108a02:	498c      	ldr	r1, [pc, #560]	; (8108c34 <_strtod_l+0x59c>)
 8108a04:	3b01      	subs	r3, #1
 8108a06:	a81d      	add	r0, sp, #116	; 0x74
 8108a08:	931d      	str	r3, [sp, #116]	; 0x74
 8108a0a:	f001 fef5 	bl	810a7f8 <__match>
 8108a0e:	b910      	cbnz	r0, 8108a16 <_strtod_l+0x37e>
 8108a10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8108a12:	3301      	adds	r3, #1
 8108a14:	931d      	str	r3, [sp, #116]	; 0x74
 8108a16:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8108c44 <_strtod_l+0x5ac>
 8108a1a:	f04f 0a00 	mov.w	sl, #0
 8108a1e:	e67d      	b.n	810871c <_strtod_l+0x84>
 8108a20:	4885      	ldr	r0, [pc, #532]	; (8108c38 <_strtod_l+0x5a0>)
 8108a22:	f002 ffd9 	bl	810b9d8 <nan>
 8108a26:	ed8d 0b04 	vstr	d0, [sp, #16]
 8108a2a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8108a2e:	e675      	b.n	810871c <_strtod_l+0x84>
 8108a30:	9b07      	ldr	r3, [sp, #28]
 8108a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8108a34:	1af3      	subs	r3, r6, r3
 8108a36:	2f00      	cmp	r7, #0
 8108a38:	bf08      	it	eq
 8108a3a:	462f      	moveq	r7, r5
 8108a3c:	2d10      	cmp	r5, #16
 8108a3e:	9308      	str	r3, [sp, #32]
 8108a40:	46a8      	mov	r8, r5
 8108a42:	bfa8      	it	ge
 8108a44:	f04f 0810 	movge.w	r8, #16
 8108a48:	f7f7 fde4 	bl	8100614 <__aeabi_ui2d>
 8108a4c:	2d09      	cmp	r5, #9
 8108a4e:	4682      	mov	sl, r0
 8108a50:	468b      	mov	fp, r1
 8108a52:	dd13      	ble.n	8108a7c <_strtod_l+0x3e4>
 8108a54:	4b79      	ldr	r3, [pc, #484]	; (8108c3c <_strtod_l+0x5a4>)
 8108a56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8108a5a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8108a5e:	f7f7 fe53 	bl	8100708 <__aeabi_dmul>
 8108a62:	4682      	mov	sl, r0
 8108a64:	4648      	mov	r0, r9
 8108a66:	468b      	mov	fp, r1
 8108a68:	f7f7 fdd4 	bl	8100614 <__aeabi_ui2d>
 8108a6c:	4602      	mov	r2, r0
 8108a6e:	460b      	mov	r3, r1
 8108a70:	4650      	mov	r0, sl
 8108a72:	4659      	mov	r1, fp
 8108a74:	f7f7 fc92 	bl	810039c <__adddf3>
 8108a78:	4682      	mov	sl, r0
 8108a7a:	468b      	mov	fp, r1
 8108a7c:	2d0f      	cmp	r5, #15
 8108a7e:	dc38      	bgt.n	8108af2 <_strtod_l+0x45a>
 8108a80:	9b08      	ldr	r3, [sp, #32]
 8108a82:	2b00      	cmp	r3, #0
 8108a84:	f43f ae4a 	beq.w	810871c <_strtod_l+0x84>
 8108a88:	dd24      	ble.n	8108ad4 <_strtod_l+0x43c>
 8108a8a:	2b16      	cmp	r3, #22
 8108a8c:	dc0b      	bgt.n	8108aa6 <_strtod_l+0x40e>
 8108a8e:	4d6b      	ldr	r5, [pc, #428]	; (8108c3c <_strtod_l+0x5a4>)
 8108a90:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8108a94:	e9d5 0100 	ldrd	r0, r1, [r5]
 8108a98:	4652      	mov	r2, sl
 8108a9a:	465b      	mov	r3, fp
 8108a9c:	f7f7 fe34 	bl	8100708 <__aeabi_dmul>
 8108aa0:	4682      	mov	sl, r0
 8108aa2:	468b      	mov	fp, r1
 8108aa4:	e63a      	b.n	810871c <_strtod_l+0x84>
 8108aa6:	9a08      	ldr	r2, [sp, #32]
 8108aa8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8108aac:	4293      	cmp	r3, r2
 8108aae:	db20      	blt.n	8108af2 <_strtod_l+0x45a>
 8108ab0:	4c62      	ldr	r4, [pc, #392]	; (8108c3c <_strtod_l+0x5a4>)
 8108ab2:	f1c5 050f 	rsb	r5, r5, #15
 8108ab6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8108aba:	4652      	mov	r2, sl
 8108abc:	465b      	mov	r3, fp
 8108abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108ac2:	f7f7 fe21 	bl	8100708 <__aeabi_dmul>
 8108ac6:	9b08      	ldr	r3, [sp, #32]
 8108ac8:	1b5d      	subs	r5, r3, r5
 8108aca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8108ace:	e9d4 2300 	ldrd	r2, r3, [r4]
 8108ad2:	e7e3      	b.n	8108a9c <_strtod_l+0x404>
 8108ad4:	9b08      	ldr	r3, [sp, #32]
 8108ad6:	3316      	adds	r3, #22
 8108ad8:	db0b      	blt.n	8108af2 <_strtod_l+0x45a>
 8108ada:	9b07      	ldr	r3, [sp, #28]
 8108adc:	4a57      	ldr	r2, [pc, #348]	; (8108c3c <_strtod_l+0x5a4>)
 8108ade:	1b9e      	subs	r6, r3, r6
 8108ae0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8108ae4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8108ae8:	4650      	mov	r0, sl
 8108aea:	4659      	mov	r1, fp
 8108aec:	f7f7 ff36 	bl	810095c <__aeabi_ddiv>
 8108af0:	e7d6      	b.n	8108aa0 <_strtod_l+0x408>
 8108af2:	9b08      	ldr	r3, [sp, #32]
 8108af4:	eba5 0808 	sub.w	r8, r5, r8
 8108af8:	4498      	add	r8, r3
 8108afa:	f1b8 0f00 	cmp.w	r8, #0
 8108afe:	dd71      	ble.n	8108be4 <_strtod_l+0x54c>
 8108b00:	f018 030f 	ands.w	r3, r8, #15
 8108b04:	d00a      	beq.n	8108b1c <_strtod_l+0x484>
 8108b06:	494d      	ldr	r1, [pc, #308]	; (8108c3c <_strtod_l+0x5a4>)
 8108b08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8108b0c:	4652      	mov	r2, sl
 8108b0e:	465b      	mov	r3, fp
 8108b10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8108b14:	f7f7 fdf8 	bl	8100708 <__aeabi_dmul>
 8108b18:	4682      	mov	sl, r0
 8108b1a:	468b      	mov	fp, r1
 8108b1c:	f038 080f 	bics.w	r8, r8, #15
 8108b20:	d04d      	beq.n	8108bbe <_strtod_l+0x526>
 8108b22:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8108b26:	dd22      	ble.n	8108b6e <_strtod_l+0x4d6>
 8108b28:	2500      	movs	r5, #0
 8108b2a:	462e      	mov	r6, r5
 8108b2c:	9509      	str	r5, [sp, #36]	; 0x24
 8108b2e:	9507      	str	r5, [sp, #28]
 8108b30:	2322      	movs	r3, #34	; 0x22
 8108b32:	f8df b110 	ldr.w	fp, [pc, #272]	; 8108c44 <_strtod_l+0x5ac>
 8108b36:	6023      	str	r3, [r4, #0]
 8108b38:	f04f 0a00 	mov.w	sl, #0
 8108b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108b3e:	2b00      	cmp	r3, #0
 8108b40:	f43f adec 	beq.w	810871c <_strtod_l+0x84>
 8108b44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108b46:	4620      	mov	r0, r4
 8108b48:	f001 fff4 	bl	810ab34 <_Bfree>
 8108b4c:	9907      	ldr	r1, [sp, #28]
 8108b4e:	4620      	mov	r0, r4
 8108b50:	f001 fff0 	bl	810ab34 <_Bfree>
 8108b54:	4631      	mov	r1, r6
 8108b56:	4620      	mov	r0, r4
 8108b58:	f001 ffec 	bl	810ab34 <_Bfree>
 8108b5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8108b5e:	4620      	mov	r0, r4
 8108b60:	f001 ffe8 	bl	810ab34 <_Bfree>
 8108b64:	4629      	mov	r1, r5
 8108b66:	4620      	mov	r0, r4
 8108b68:	f001 ffe4 	bl	810ab34 <_Bfree>
 8108b6c:	e5d6      	b.n	810871c <_strtod_l+0x84>
 8108b6e:	2300      	movs	r3, #0
 8108b70:	ea4f 1828 	mov.w	r8, r8, asr #4
 8108b74:	4650      	mov	r0, sl
 8108b76:	4659      	mov	r1, fp
 8108b78:	4699      	mov	r9, r3
 8108b7a:	f1b8 0f01 	cmp.w	r8, #1
 8108b7e:	dc21      	bgt.n	8108bc4 <_strtod_l+0x52c>
 8108b80:	b10b      	cbz	r3, 8108b86 <_strtod_l+0x4ee>
 8108b82:	4682      	mov	sl, r0
 8108b84:	468b      	mov	fp, r1
 8108b86:	4b2e      	ldr	r3, [pc, #184]	; (8108c40 <_strtod_l+0x5a8>)
 8108b88:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8108b8c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8108b90:	4652      	mov	r2, sl
 8108b92:	465b      	mov	r3, fp
 8108b94:	e9d9 0100 	ldrd	r0, r1, [r9]
 8108b98:	f7f7 fdb6 	bl	8100708 <__aeabi_dmul>
 8108b9c:	4b29      	ldr	r3, [pc, #164]	; (8108c44 <_strtod_l+0x5ac>)
 8108b9e:	460a      	mov	r2, r1
 8108ba0:	400b      	ands	r3, r1
 8108ba2:	4929      	ldr	r1, [pc, #164]	; (8108c48 <_strtod_l+0x5b0>)
 8108ba4:	428b      	cmp	r3, r1
 8108ba6:	4682      	mov	sl, r0
 8108ba8:	d8be      	bhi.n	8108b28 <_strtod_l+0x490>
 8108baa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8108bae:	428b      	cmp	r3, r1
 8108bb0:	bf86      	itte	hi
 8108bb2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8108c4c <_strtod_l+0x5b4>
 8108bb6:	f04f 3aff 	movhi.w	sl, #4294967295
 8108bba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8108bbe:	2300      	movs	r3, #0
 8108bc0:	9304      	str	r3, [sp, #16]
 8108bc2:	e081      	b.n	8108cc8 <_strtod_l+0x630>
 8108bc4:	f018 0f01 	tst.w	r8, #1
 8108bc8:	d007      	beq.n	8108bda <_strtod_l+0x542>
 8108bca:	4b1d      	ldr	r3, [pc, #116]	; (8108c40 <_strtod_l+0x5a8>)
 8108bcc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8108bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108bd4:	f7f7 fd98 	bl	8100708 <__aeabi_dmul>
 8108bd8:	2301      	movs	r3, #1
 8108bda:	f109 0901 	add.w	r9, r9, #1
 8108bde:	ea4f 0868 	mov.w	r8, r8, asr #1
 8108be2:	e7ca      	b.n	8108b7a <_strtod_l+0x4e2>
 8108be4:	d0eb      	beq.n	8108bbe <_strtod_l+0x526>
 8108be6:	f1c8 0800 	rsb	r8, r8, #0
 8108bea:	f018 020f 	ands.w	r2, r8, #15
 8108bee:	d00a      	beq.n	8108c06 <_strtod_l+0x56e>
 8108bf0:	4b12      	ldr	r3, [pc, #72]	; (8108c3c <_strtod_l+0x5a4>)
 8108bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8108bf6:	4650      	mov	r0, sl
 8108bf8:	4659      	mov	r1, fp
 8108bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8108bfe:	f7f7 fead 	bl	810095c <__aeabi_ddiv>
 8108c02:	4682      	mov	sl, r0
 8108c04:	468b      	mov	fp, r1
 8108c06:	ea5f 1828 	movs.w	r8, r8, asr #4
 8108c0a:	d0d8      	beq.n	8108bbe <_strtod_l+0x526>
 8108c0c:	f1b8 0f1f 	cmp.w	r8, #31
 8108c10:	dd1e      	ble.n	8108c50 <_strtod_l+0x5b8>
 8108c12:	2500      	movs	r5, #0
 8108c14:	462e      	mov	r6, r5
 8108c16:	9509      	str	r5, [sp, #36]	; 0x24
 8108c18:	9507      	str	r5, [sp, #28]
 8108c1a:	2322      	movs	r3, #34	; 0x22
 8108c1c:	f04f 0a00 	mov.w	sl, #0
 8108c20:	f04f 0b00 	mov.w	fp, #0
 8108c24:	6023      	str	r3, [r4, #0]
 8108c26:	e789      	b.n	8108b3c <_strtod_l+0x4a4>
 8108c28:	0810d49d 	.word	0x0810d49d
 8108c2c:	0810d4e0 	.word	0x0810d4e0
 8108c30:	0810d495 	.word	0x0810d495
 8108c34:	0810d624 	.word	0x0810d624
 8108c38:	0810d8e0 	.word	0x0810d8e0
 8108c3c:	0810d7c0 	.word	0x0810d7c0
 8108c40:	0810d798 	.word	0x0810d798
 8108c44:	7ff00000 	.word	0x7ff00000
 8108c48:	7ca00000 	.word	0x7ca00000
 8108c4c:	7fefffff 	.word	0x7fefffff
 8108c50:	f018 0310 	ands.w	r3, r8, #16
 8108c54:	bf18      	it	ne
 8108c56:	236a      	movne	r3, #106	; 0x6a
 8108c58:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8109010 <_strtod_l+0x978>
 8108c5c:	9304      	str	r3, [sp, #16]
 8108c5e:	4650      	mov	r0, sl
 8108c60:	4659      	mov	r1, fp
 8108c62:	2300      	movs	r3, #0
 8108c64:	f018 0f01 	tst.w	r8, #1
 8108c68:	d004      	beq.n	8108c74 <_strtod_l+0x5dc>
 8108c6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8108c6e:	f7f7 fd4b 	bl	8100708 <__aeabi_dmul>
 8108c72:	2301      	movs	r3, #1
 8108c74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8108c78:	f109 0908 	add.w	r9, r9, #8
 8108c7c:	d1f2      	bne.n	8108c64 <_strtod_l+0x5cc>
 8108c7e:	b10b      	cbz	r3, 8108c84 <_strtod_l+0x5ec>
 8108c80:	4682      	mov	sl, r0
 8108c82:	468b      	mov	fp, r1
 8108c84:	9b04      	ldr	r3, [sp, #16]
 8108c86:	b1bb      	cbz	r3, 8108cb8 <_strtod_l+0x620>
 8108c88:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8108c8c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8108c90:	2b00      	cmp	r3, #0
 8108c92:	4659      	mov	r1, fp
 8108c94:	dd10      	ble.n	8108cb8 <_strtod_l+0x620>
 8108c96:	2b1f      	cmp	r3, #31
 8108c98:	f340 8128 	ble.w	8108eec <_strtod_l+0x854>
 8108c9c:	2b34      	cmp	r3, #52	; 0x34
 8108c9e:	bfde      	ittt	le
 8108ca0:	3b20      	suble	r3, #32
 8108ca2:	f04f 32ff 	movle.w	r2, #4294967295
 8108ca6:	fa02 f303 	lslle.w	r3, r2, r3
 8108caa:	f04f 0a00 	mov.w	sl, #0
 8108cae:	bfcc      	ite	gt
 8108cb0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8108cb4:	ea03 0b01 	andle.w	fp, r3, r1
 8108cb8:	2200      	movs	r2, #0
 8108cba:	2300      	movs	r3, #0
 8108cbc:	4650      	mov	r0, sl
 8108cbe:	4659      	mov	r1, fp
 8108cc0:	f7f7 ff8a 	bl	8100bd8 <__aeabi_dcmpeq>
 8108cc4:	2800      	cmp	r0, #0
 8108cc6:	d1a4      	bne.n	8108c12 <_strtod_l+0x57a>
 8108cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108cca:	9300      	str	r3, [sp, #0]
 8108ccc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8108cce:	462b      	mov	r3, r5
 8108cd0:	463a      	mov	r2, r7
 8108cd2:	4620      	mov	r0, r4
 8108cd4:	f001 ff9a 	bl	810ac0c <__s2b>
 8108cd8:	9009      	str	r0, [sp, #36]	; 0x24
 8108cda:	2800      	cmp	r0, #0
 8108cdc:	f43f af24 	beq.w	8108b28 <_strtod_l+0x490>
 8108ce0:	9b07      	ldr	r3, [sp, #28]
 8108ce2:	1b9e      	subs	r6, r3, r6
 8108ce4:	9b08      	ldr	r3, [sp, #32]
 8108ce6:	2b00      	cmp	r3, #0
 8108ce8:	bfb4      	ite	lt
 8108cea:	4633      	movlt	r3, r6
 8108cec:	2300      	movge	r3, #0
 8108cee:	9310      	str	r3, [sp, #64]	; 0x40
 8108cf0:	9b08      	ldr	r3, [sp, #32]
 8108cf2:	2500      	movs	r5, #0
 8108cf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8108cf8:	9318      	str	r3, [sp, #96]	; 0x60
 8108cfa:	462e      	mov	r6, r5
 8108cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108cfe:	4620      	mov	r0, r4
 8108d00:	6859      	ldr	r1, [r3, #4]
 8108d02:	f001 fed7 	bl	810aab4 <_Balloc>
 8108d06:	9007      	str	r0, [sp, #28]
 8108d08:	2800      	cmp	r0, #0
 8108d0a:	f43f af11 	beq.w	8108b30 <_strtod_l+0x498>
 8108d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108d10:	691a      	ldr	r2, [r3, #16]
 8108d12:	3202      	adds	r2, #2
 8108d14:	f103 010c 	add.w	r1, r3, #12
 8108d18:	0092      	lsls	r2, r2, #2
 8108d1a:	300c      	adds	r0, #12
 8108d1c:	f001 feb0 	bl	810aa80 <memcpy>
 8108d20:	ec4b ab10 	vmov	d0, sl, fp
 8108d24:	aa20      	add	r2, sp, #128	; 0x80
 8108d26:	a91f      	add	r1, sp, #124	; 0x7c
 8108d28:	4620      	mov	r0, r4
 8108d2a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8108d2e:	f002 faa9 	bl	810b284 <__d2b>
 8108d32:	901e      	str	r0, [sp, #120]	; 0x78
 8108d34:	2800      	cmp	r0, #0
 8108d36:	f43f aefb 	beq.w	8108b30 <_strtod_l+0x498>
 8108d3a:	2101      	movs	r1, #1
 8108d3c:	4620      	mov	r0, r4
 8108d3e:	f001 ffff 	bl	810ad40 <__i2b>
 8108d42:	4606      	mov	r6, r0
 8108d44:	2800      	cmp	r0, #0
 8108d46:	f43f aef3 	beq.w	8108b30 <_strtod_l+0x498>
 8108d4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8108d4c:	9904      	ldr	r1, [sp, #16]
 8108d4e:	2b00      	cmp	r3, #0
 8108d50:	bfab      	itete	ge
 8108d52:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8108d54:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8108d56:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8108d58:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8108d5c:	bfac      	ite	ge
 8108d5e:	eb03 0902 	addge.w	r9, r3, r2
 8108d62:	1ad7      	sublt	r7, r2, r3
 8108d64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8108d66:	eba3 0801 	sub.w	r8, r3, r1
 8108d6a:	4490      	add	r8, r2
 8108d6c:	4ba3      	ldr	r3, [pc, #652]	; (8108ffc <_strtod_l+0x964>)
 8108d6e:	f108 38ff 	add.w	r8, r8, #4294967295
 8108d72:	4598      	cmp	r8, r3
 8108d74:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8108d78:	f280 80cc 	bge.w	8108f14 <_strtod_l+0x87c>
 8108d7c:	eba3 0308 	sub.w	r3, r3, r8
 8108d80:	2b1f      	cmp	r3, #31
 8108d82:	eba2 0203 	sub.w	r2, r2, r3
 8108d86:	f04f 0101 	mov.w	r1, #1
 8108d8a:	f300 80b6 	bgt.w	8108efa <_strtod_l+0x862>
 8108d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8108d92:	9311      	str	r3, [sp, #68]	; 0x44
 8108d94:	2300      	movs	r3, #0
 8108d96:	930c      	str	r3, [sp, #48]	; 0x30
 8108d98:	eb09 0802 	add.w	r8, r9, r2
 8108d9c:	9b04      	ldr	r3, [sp, #16]
 8108d9e:	45c1      	cmp	r9, r8
 8108da0:	4417      	add	r7, r2
 8108da2:	441f      	add	r7, r3
 8108da4:	464b      	mov	r3, r9
 8108da6:	bfa8      	it	ge
 8108da8:	4643      	movge	r3, r8
 8108daa:	42bb      	cmp	r3, r7
 8108dac:	bfa8      	it	ge
 8108dae:	463b      	movge	r3, r7
 8108db0:	2b00      	cmp	r3, #0
 8108db2:	bfc2      	ittt	gt
 8108db4:	eba8 0803 	subgt.w	r8, r8, r3
 8108db8:	1aff      	subgt	r7, r7, r3
 8108dba:	eba9 0903 	subgt.w	r9, r9, r3
 8108dbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8108dc0:	2b00      	cmp	r3, #0
 8108dc2:	dd17      	ble.n	8108df4 <_strtod_l+0x75c>
 8108dc4:	4631      	mov	r1, r6
 8108dc6:	461a      	mov	r2, r3
 8108dc8:	4620      	mov	r0, r4
 8108dca:	f002 f875 	bl	810aeb8 <__pow5mult>
 8108dce:	4606      	mov	r6, r0
 8108dd0:	2800      	cmp	r0, #0
 8108dd2:	f43f aead 	beq.w	8108b30 <_strtod_l+0x498>
 8108dd6:	4601      	mov	r1, r0
 8108dd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8108dda:	4620      	mov	r0, r4
 8108ddc:	f001 ffc6 	bl	810ad6c <__multiply>
 8108de0:	900f      	str	r0, [sp, #60]	; 0x3c
 8108de2:	2800      	cmp	r0, #0
 8108de4:	f43f aea4 	beq.w	8108b30 <_strtod_l+0x498>
 8108de8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108dea:	4620      	mov	r0, r4
 8108dec:	f001 fea2 	bl	810ab34 <_Bfree>
 8108df0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108df2:	931e      	str	r3, [sp, #120]	; 0x78
 8108df4:	f1b8 0f00 	cmp.w	r8, #0
 8108df8:	f300 8091 	bgt.w	8108f1e <_strtod_l+0x886>
 8108dfc:	9b08      	ldr	r3, [sp, #32]
 8108dfe:	2b00      	cmp	r3, #0
 8108e00:	dd08      	ble.n	8108e14 <_strtod_l+0x77c>
 8108e02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8108e04:	9907      	ldr	r1, [sp, #28]
 8108e06:	4620      	mov	r0, r4
 8108e08:	f002 f856 	bl	810aeb8 <__pow5mult>
 8108e0c:	9007      	str	r0, [sp, #28]
 8108e0e:	2800      	cmp	r0, #0
 8108e10:	f43f ae8e 	beq.w	8108b30 <_strtod_l+0x498>
 8108e14:	2f00      	cmp	r7, #0
 8108e16:	dd08      	ble.n	8108e2a <_strtod_l+0x792>
 8108e18:	9907      	ldr	r1, [sp, #28]
 8108e1a:	463a      	mov	r2, r7
 8108e1c:	4620      	mov	r0, r4
 8108e1e:	f002 f8a5 	bl	810af6c <__lshift>
 8108e22:	9007      	str	r0, [sp, #28]
 8108e24:	2800      	cmp	r0, #0
 8108e26:	f43f ae83 	beq.w	8108b30 <_strtod_l+0x498>
 8108e2a:	f1b9 0f00 	cmp.w	r9, #0
 8108e2e:	dd08      	ble.n	8108e42 <_strtod_l+0x7aa>
 8108e30:	4631      	mov	r1, r6
 8108e32:	464a      	mov	r2, r9
 8108e34:	4620      	mov	r0, r4
 8108e36:	f002 f899 	bl	810af6c <__lshift>
 8108e3a:	4606      	mov	r6, r0
 8108e3c:	2800      	cmp	r0, #0
 8108e3e:	f43f ae77 	beq.w	8108b30 <_strtod_l+0x498>
 8108e42:	9a07      	ldr	r2, [sp, #28]
 8108e44:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108e46:	4620      	mov	r0, r4
 8108e48:	f002 f918 	bl	810b07c <__mdiff>
 8108e4c:	4605      	mov	r5, r0
 8108e4e:	2800      	cmp	r0, #0
 8108e50:	f43f ae6e 	beq.w	8108b30 <_strtod_l+0x498>
 8108e54:	68c3      	ldr	r3, [r0, #12]
 8108e56:	930f      	str	r3, [sp, #60]	; 0x3c
 8108e58:	2300      	movs	r3, #0
 8108e5a:	60c3      	str	r3, [r0, #12]
 8108e5c:	4631      	mov	r1, r6
 8108e5e:	f002 f8f1 	bl	810b044 <__mcmp>
 8108e62:	2800      	cmp	r0, #0
 8108e64:	da65      	bge.n	8108f32 <_strtod_l+0x89a>
 8108e66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108e68:	ea53 030a 	orrs.w	r3, r3, sl
 8108e6c:	f040 8087 	bne.w	8108f7e <_strtod_l+0x8e6>
 8108e70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108e74:	2b00      	cmp	r3, #0
 8108e76:	f040 8082 	bne.w	8108f7e <_strtod_l+0x8e6>
 8108e7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8108e7e:	0d1b      	lsrs	r3, r3, #20
 8108e80:	051b      	lsls	r3, r3, #20
 8108e82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8108e86:	d97a      	bls.n	8108f7e <_strtod_l+0x8e6>
 8108e88:	696b      	ldr	r3, [r5, #20]
 8108e8a:	b913      	cbnz	r3, 8108e92 <_strtod_l+0x7fa>
 8108e8c:	692b      	ldr	r3, [r5, #16]
 8108e8e:	2b01      	cmp	r3, #1
 8108e90:	dd75      	ble.n	8108f7e <_strtod_l+0x8e6>
 8108e92:	4629      	mov	r1, r5
 8108e94:	2201      	movs	r2, #1
 8108e96:	4620      	mov	r0, r4
 8108e98:	f002 f868 	bl	810af6c <__lshift>
 8108e9c:	4631      	mov	r1, r6
 8108e9e:	4605      	mov	r5, r0
 8108ea0:	f002 f8d0 	bl	810b044 <__mcmp>
 8108ea4:	2800      	cmp	r0, #0
 8108ea6:	dd6a      	ble.n	8108f7e <_strtod_l+0x8e6>
 8108ea8:	9904      	ldr	r1, [sp, #16]
 8108eaa:	4a55      	ldr	r2, [pc, #340]	; (8109000 <_strtod_l+0x968>)
 8108eac:	465b      	mov	r3, fp
 8108eae:	2900      	cmp	r1, #0
 8108eb0:	f000 8085 	beq.w	8108fbe <_strtod_l+0x926>
 8108eb4:	ea02 010b 	and.w	r1, r2, fp
 8108eb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8108ebc:	dc7f      	bgt.n	8108fbe <_strtod_l+0x926>
 8108ebe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8108ec2:	f77f aeaa 	ble.w	8108c1a <_strtod_l+0x582>
 8108ec6:	4a4f      	ldr	r2, [pc, #316]	; (8109004 <_strtod_l+0x96c>)
 8108ec8:	2300      	movs	r3, #0
 8108eca:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8108ece:	4650      	mov	r0, sl
 8108ed0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8108ed4:	4659      	mov	r1, fp
 8108ed6:	f7f7 fc17 	bl	8100708 <__aeabi_dmul>
 8108eda:	460b      	mov	r3, r1
 8108edc:	4303      	orrs	r3, r0
 8108ede:	bf08      	it	eq
 8108ee0:	2322      	moveq	r3, #34	; 0x22
 8108ee2:	4682      	mov	sl, r0
 8108ee4:	468b      	mov	fp, r1
 8108ee6:	bf08      	it	eq
 8108ee8:	6023      	streq	r3, [r4, #0]
 8108eea:	e62b      	b.n	8108b44 <_strtod_l+0x4ac>
 8108eec:	f04f 32ff 	mov.w	r2, #4294967295
 8108ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8108ef4:	ea03 0a0a 	and.w	sl, r3, sl
 8108ef8:	e6de      	b.n	8108cb8 <_strtod_l+0x620>
 8108efa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8108efe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8108f02:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8108f06:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8108f0a:	fa01 f308 	lsl.w	r3, r1, r8
 8108f0e:	930c      	str	r3, [sp, #48]	; 0x30
 8108f10:	9111      	str	r1, [sp, #68]	; 0x44
 8108f12:	e741      	b.n	8108d98 <_strtod_l+0x700>
 8108f14:	2300      	movs	r3, #0
 8108f16:	930c      	str	r3, [sp, #48]	; 0x30
 8108f18:	2301      	movs	r3, #1
 8108f1a:	9311      	str	r3, [sp, #68]	; 0x44
 8108f1c:	e73c      	b.n	8108d98 <_strtod_l+0x700>
 8108f1e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8108f20:	4642      	mov	r2, r8
 8108f22:	4620      	mov	r0, r4
 8108f24:	f002 f822 	bl	810af6c <__lshift>
 8108f28:	901e      	str	r0, [sp, #120]	; 0x78
 8108f2a:	2800      	cmp	r0, #0
 8108f2c:	f47f af66 	bne.w	8108dfc <_strtod_l+0x764>
 8108f30:	e5fe      	b.n	8108b30 <_strtod_l+0x498>
 8108f32:	465f      	mov	r7, fp
 8108f34:	d16e      	bne.n	8109014 <_strtod_l+0x97c>
 8108f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8108f38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8108f3c:	b342      	cbz	r2, 8108f90 <_strtod_l+0x8f8>
 8108f3e:	4a32      	ldr	r2, [pc, #200]	; (8109008 <_strtod_l+0x970>)
 8108f40:	4293      	cmp	r3, r2
 8108f42:	d128      	bne.n	8108f96 <_strtod_l+0x8fe>
 8108f44:	9b04      	ldr	r3, [sp, #16]
 8108f46:	4650      	mov	r0, sl
 8108f48:	b1eb      	cbz	r3, 8108f86 <_strtod_l+0x8ee>
 8108f4a:	4a2d      	ldr	r2, [pc, #180]	; (8109000 <_strtod_l+0x968>)
 8108f4c:	403a      	ands	r2, r7
 8108f4e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8108f52:	f04f 31ff 	mov.w	r1, #4294967295
 8108f56:	d819      	bhi.n	8108f8c <_strtod_l+0x8f4>
 8108f58:	0d12      	lsrs	r2, r2, #20
 8108f5a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8108f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8108f62:	4298      	cmp	r0, r3
 8108f64:	d117      	bne.n	8108f96 <_strtod_l+0x8fe>
 8108f66:	4b29      	ldr	r3, [pc, #164]	; (810900c <_strtod_l+0x974>)
 8108f68:	429f      	cmp	r7, r3
 8108f6a:	d102      	bne.n	8108f72 <_strtod_l+0x8da>
 8108f6c:	3001      	adds	r0, #1
 8108f6e:	f43f addf 	beq.w	8108b30 <_strtod_l+0x498>
 8108f72:	4b23      	ldr	r3, [pc, #140]	; (8109000 <_strtod_l+0x968>)
 8108f74:	403b      	ands	r3, r7
 8108f76:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8108f7a:	f04f 0a00 	mov.w	sl, #0
 8108f7e:	9b04      	ldr	r3, [sp, #16]
 8108f80:	2b00      	cmp	r3, #0
 8108f82:	d1a0      	bne.n	8108ec6 <_strtod_l+0x82e>
 8108f84:	e5de      	b.n	8108b44 <_strtod_l+0x4ac>
 8108f86:	f04f 33ff 	mov.w	r3, #4294967295
 8108f8a:	e7ea      	b.n	8108f62 <_strtod_l+0x8ca>
 8108f8c:	460b      	mov	r3, r1
 8108f8e:	e7e8      	b.n	8108f62 <_strtod_l+0x8ca>
 8108f90:	ea53 030a 	orrs.w	r3, r3, sl
 8108f94:	d088      	beq.n	8108ea8 <_strtod_l+0x810>
 8108f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8108f98:	b1db      	cbz	r3, 8108fd2 <_strtod_l+0x93a>
 8108f9a:	423b      	tst	r3, r7
 8108f9c:	d0ef      	beq.n	8108f7e <_strtod_l+0x8e6>
 8108f9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8108fa0:	9a04      	ldr	r2, [sp, #16]
 8108fa2:	4650      	mov	r0, sl
 8108fa4:	4659      	mov	r1, fp
 8108fa6:	b1c3      	cbz	r3, 8108fda <_strtod_l+0x942>
 8108fa8:	f7ff fb59 	bl	810865e <sulp>
 8108fac:	4602      	mov	r2, r0
 8108fae:	460b      	mov	r3, r1
 8108fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108fb4:	f7f7 f9f2 	bl	810039c <__adddf3>
 8108fb8:	4682      	mov	sl, r0
 8108fba:	468b      	mov	fp, r1
 8108fbc:	e7df      	b.n	8108f7e <_strtod_l+0x8e6>
 8108fbe:	4013      	ands	r3, r2
 8108fc0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8108fc4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8108fc8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8108fcc:	f04f 3aff 	mov.w	sl, #4294967295
 8108fd0:	e7d5      	b.n	8108f7e <_strtod_l+0x8e6>
 8108fd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8108fd4:	ea13 0f0a 	tst.w	r3, sl
 8108fd8:	e7e0      	b.n	8108f9c <_strtod_l+0x904>
 8108fda:	f7ff fb40 	bl	810865e <sulp>
 8108fde:	4602      	mov	r2, r0
 8108fe0:	460b      	mov	r3, r1
 8108fe2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8108fe6:	f7f7 f9d7 	bl	8100398 <__aeabi_dsub>
 8108fea:	2200      	movs	r2, #0
 8108fec:	2300      	movs	r3, #0
 8108fee:	4682      	mov	sl, r0
 8108ff0:	468b      	mov	fp, r1
 8108ff2:	f7f7 fdf1 	bl	8100bd8 <__aeabi_dcmpeq>
 8108ff6:	2800      	cmp	r0, #0
 8108ff8:	d0c1      	beq.n	8108f7e <_strtod_l+0x8e6>
 8108ffa:	e60e      	b.n	8108c1a <_strtod_l+0x582>
 8108ffc:	fffffc02 	.word	0xfffffc02
 8109000:	7ff00000 	.word	0x7ff00000
 8109004:	39500000 	.word	0x39500000
 8109008:	000fffff 	.word	0x000fffff
 810900c:	7fefffff 	.word	0x7fefffff
 8109010:	0810d4f8 	.word	0x0810d4f8
 8109014:	4631      	mov	r1, r6
 8109016:	4628      	mov	r0, r5
 8109018:	f002 f990 	bl	810b33c <__ratio>
 810901c:	ec59 8b10 	vmov	r8, r9, d0
 8109020:	ee10 0a10 	vmov	r0, s0
 8109024:	2200      	movs	r2, #0
 8109026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810902a:	4649      	mov	r1, r9
 810902c:	f7f7 fde8 	bl	8100c00 <__aeabi_dcmple>
 8109030:	2800      	cmp	r0, #0
 8109032:	d07c      	beq.n	810912e <_strtod_l+0xa96>
 8109034:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109036:	2b00      	cmp	r3, #0
 8109038:	d04c      	beq.n	81090d4 <_strtod_l+0xa3c>
 810903a:	4b95      	ldr	r3, [pc, #596]	; (8109290 <_strtod_l+0xbf8>)
 810903c:	2200      	movs	r2, #0
 810903e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8109042:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8109290 <_strtod_l+0xbf8>
 8109046:	f04f 0800 	mov.w	r8, #0
 810904a:	4b92      	ldr	r3, [pc, #584]	; (8109294 <_strtod_l+0xbfc>)
 810904c:	403b      	ands	r3, r7
 810904e:	9311      	str	r3, [sp, #68]	; 0x44
 8109050:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8109052:	4b91      	ldr	r3, [pc, #580]	; (8109298 <_strtod_l+0xc00>)
 8109054:	429a      	cmp	r2, r3
 8109056:	f040 80b2 	bne.w	81091be <_strtod_l+0xb26>
 810905a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 810905e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109062:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8109066:	ec4b ab10 	vmov	d0, sl, fp
 810906a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 810906e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8109072:	f002 f88b 	bl	810b18c <__ulp>
 8109076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 810907a:	ec53 2b10 	vmov	r2, r3, d0
 810907e:	f7f7 fb43 	bl	8100708 <__aeabi_dmul>
 8109082:	4652      	mov	r2, sl
 8109084:	465b      	mov	r3, fp
 8109086:	f7f7 f989 	bl	810039c <__adddf3>
 810908a:	460b      	mov	r3, r1
 810908c:	4981      	ldr	r1, [pc, #516]	; (8109294 <_strtod_l+0xbfc>)
 810908e:	4a83      	ldr	r2, [pc, #524]	; (810929c <_strtod_l+0xc04>)
 8109090:	4019      	ands	r1, r3
 8109092:	4291      	cmp	r1, r2
 8109094:	4682      	mov	sl, r0
 8109096:	d95e      	bls.n	8109156 <_strtod_l+0xabe>
 8109098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810909a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 810909e:	4293      	cmp	r3, r2
 81090a0:	d103      	bne.n	81090aa <_strtod_l+0xa12>
 81090a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81090a4:	3301      	adds	r3, #1
 81090a6:	f43f ad43 	beq.w	8108b30 <_strtod_l+0x498>
 81090aa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 81092a8 <_strtod_l+0xc10>
 81090ae:	f04f 3aff 	mov.w	sl, #4294967295
 81090b2:	991e      	ldr	r1, [sp, #120]	; 0x78
 81090b4:	4620      	mov	r0, r4
 81090b6:	f001 fd3d 	bl	810ab34 <_Bfree>
 81090ba:	9907      	ldr	r1, [sp, #28]
 81090bc:	4620      	mov	r0, r4
 81090be:	f001 fd39 	bl	810ab34 <_Bfree>
 81090c2:	4631      	mov	r1, r6
 81090c4:	4620      	mov	r0, r4
 81090c6:	f001 fd35 	bl	810ab34 <_Bfree>
 81090ca:	4629      	mov	r1, r5
 81090cc:	4620      	mov	r0, r4
 81090ce:	f001 fd31 	bl	810ab34 <_Bfree>
 81090d2:	e613      	b.n	8108cfc <_strtod_l+0x664>
 81090d4:	f1ba 0f00 	cmp.w	sl, #0
 81090d8:	d11b      	bne.n	8109112 <_strtod_l+0xa7a>
 81090da:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81090de:	b9f3      	cbnz	r3, 810911e <_strtod_l+0xa86>
 81090e0:	4b6b      	ldr	r3, [pc, #428]	; (8109290 <_strtod_l+0xbf8>)
 81090e2:	2200      	movs	r2, #0
 81090e4:	4640      	mov	r0, r8
 81090e6:	4649      	mov	r1, r9
 81090e8:	f7f7 fd80 	bl	8100bec <__aeabi_dcmplt>
 81090ec:	b9d0      	cbnz	r0, 8109124 <_strtod_l+0xa8c>
 81090ee:	4640      	mov	r0, r8
 81090f0:	4649      	mov	r1, r9
 81090f2:	4b6b      	ldr	r3, [pc, #428]	; (81092a0 <_strtod_l+0xc08>)
 81090f4:	2200      	movs	r2, #0
 81090f6:	f7f7 fb07 	bl	8100708 <__aeabi_dmul>
 81090fa:	4680      	mov	r8, r0
 81090fc:	4689      	mov	r9, r1
 81090fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109102:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8109106:	931b      	str	r3, [sp, #108]	; 0x6c
 8109108:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 810910c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8109110:	e79b      	b.n	810904a <_strtod_l+0x9b2>
 8109112:	f1ba 0f01 	cmp.w	sl, #1
 8109116:	d102      	bne.n	810911e <_strtod_l+0xa86>
 8109118:	2f00      	cmp	r7, #0
 810911a:	f43f ad7e 	beq.w	8108c1a <_strtod_l+0x582>
 810911e:	4b61      	ldr	r3, [pc, #388]	; (81092a4 <_strtod_l+0xc0c>)
 8109120:	2200      	movs	r2, #0
 8109122:	e78c      	b.n	810903e <_strtod_l+0x9a6>
 8109124:	f8df 9178 	ldr.w	r9, [pc, #376]	; 81092a0 <_strtod_l+0xc08>
 8109128:	f04f 0800 	mov.w	r8, #0
 810912c:	e7e7      	b.n	81090fe <_strtod_l+0xa66>
 810912e:	4b5c      	ldr	r3, [pc, #368]	; (81092a0 <_strtod_l+0xc08>)
 8109130:	4640      	mov	r0, r8
 8109132:	4649      	mov	r1, r9
 8109134:	2200      	movs	r2, #0
 8109136:	f7f7 fae7 	bl	8100708 <__aeabi_dmul>
 810913a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810913c:	4680      	mov	r8, r0
 810913e:	4689      	mov	r9, r1
 8109140:	b933      	cbnz	r3, 8109150 <_strtod_l+0xab8>
 8109142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109146:	9012      	str	r0, [sp, #72]	; 0x48
 8109148:	9313      	str	r3, [sp, #76]	; 0x4c
 810914a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 810914e:	e7dd      	b.n	810910c <_strtod_l+0xa74>
 8109150:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8109154:	e7f9      	b.n	810914a <_strtod_l+0xab2>
 8109156:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 810915a:	9b04      	ldr	r3, [sp, #16]
 810915c:	2b00      	cmp	r3, #0
 810915e:	d1a8      	bne.n	81090b2 <_strtod_l+0xa1a>
 8109160:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8109164:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8109166:	0d1b      	lsrs	r3, r3, #20
 8109168:	051b      	lsls	r3, r3, #20
 810916a:	429a      	cmp	r2, r3
 810916c:	d1a1      	bne.n	81090b2 <_strtod_l+0xa1a>
 810916e:	4640      	mov	r0, r8
 8109170:	4649      	mov	r1, r9
 8109172:	f7f7 fe29 	bl	8100dc8 <__aeabi_d2lz>
 8109176:	f7f7 fa99 	bl	81006ac <__aeabi_l2d>
 810917a:	4602      	mov	r2, r0
 810917c:	460b      	mov	r3, r1
 810917e:	4640      	mov	r0, r8
 8109180:	4649      	mov	r1, r9
 8109182:	f7f7 f909 	bl	8100398 <__aeabi_dsub>
 8109186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810918c:	ea43 030a 	orr.w	r3, r3, sl
 8109190:	4313      	orrs	r3, r2
 8109192:	4680      	mov	r8, r0
 8109194:	4689      	mov	r9, r1
 8109196:	d053      	beq.n	8109240 <_strtod_l+0xba8>
 8109198:	a335      	add	r3, pc, #212	; (adr r3, 8109270 <_strtod_l+0xbd8>)
 810919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810919e:	f7f7 fd25 	bl	8100bec <__aeabi_dcmplt>
 81091a2:	2800      	cmp	r0, #0
 81091a4:	f47f acce 	bne.w	8108b44 <_strtod_l+0x4ac>
 81091a8:	a333      	add	r3, pc, #204	; (adr r3, 8109278 <_strtod_l+0xbe0>)
 81091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091ae:	4640      	mov	r0, r8
 81091b0:	4649      	mov	r1, r9
 81091b2:	f7f7 fd39 	bl	8100c28 <__aeabi_dcmpgt>
 81091b6:	2800      	cmp	r0, #0
 81091b8:	f43f af7b 	beq.w	81090b2 <_strtod_l+0xa1a>
 81091bc:	e4c2      	b.n	8108b44 <_strtod_l+0x4ac>
 81091be:	9b04      	ldr	r3, [sp, #16]
 81091c0:	b333      	cbz	r3, 8109210 <_strtod_l+0xb78>
 81091c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 81091c4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 81091c8:	d822      	bhi.n	8109210 <_strtod_l+0xb78>
 81091ca:	a32d      	add	r3, pc, #180	; (adr r3, 8109280 <_strtod_l+0xbe8>)
 81091cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81091d0:	4640      	mov	r0, r8
 81091d2:	4649      	mov	r1, r9
 81091d4:	f7f7 fd14 	bl	8100c00 <__aeabi_dcmple>
 81091d8:	b1a0      	cbz	r0, 8109204 <_strtod_l+0xb6c>
 81091da:	4649      	mov	r1, r9
 81091dc:	4640      	mov	r0, r8
 81091de:	f7f7 fd6b 	bl	8100cb8 <__aeabi_d2uiz>
 81091e2:	2801      	cmp	r0, #1
 81091e4:	bf38      	it	cc
 81091e6:	2001      	movcc	r0, #1
 81091e8:	f7f7 fa14 	bl	8100614 <__aeabi_ui2d>
 81091ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81091ee:	4680      	mov	r8, r0
 81091f0:	4689      	mov	r9, r1
 81091f2:	bb13      	cbnz	r3, 810923a <_strtod_l+0xba2>
 81091f4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 81091f8:	9014      	str	r0, [sp, #80]	; 0x50
 81091fa:	9315      	str	r3, [sp, #84]	; 0x54
 81091fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8109200:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8109204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109206:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8109208:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810920c:	1a9b      	subs	r3, r3, r2
 810920e:	930d      	str	r3, [sp, #52]	; 0x34
 8109210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109214:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8109218:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 810921c:	f001 ffb6 	bl	810b18c <__ulp>
 8109220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8109224:	ec53 2b10 	vmov	r2, r3, d0
 8109228:	f7f7 fa6e 	bl	8100708 <__aeabi_dmul>
 810922c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109230:	f7f7 f8b4 	bl	810039c <__adddf3>
 8109234:	4682      	mov	sl, r0
 8109236:	468b      	mov	fp, r1
 8109238:	e78f      	b.n	810915a <_strtod_l+0xac2>
 810923a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 810923e:	e7dd      	b.n	81091fc <_strtod_l+0xb64>
 8109240:	a311      	add	r3, pc, #68	; (adr r3, 8109288 <_strtod_l+0xbf0>)
 8109242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109246:	f7f7 fcd1 	bl	8100bec <__aeabi_dcmplt>
 810924a:	e7b4      	b.n	81091b6 <_strtod_l+0xb1e>
 810924c:	2300      	movs	r3, #0
 810924e:	930e      	str	r3, [sp, #56]	; 0x38
 8109250:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8109252:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8109254:	6013      	str	r3, [r2, #0]
 8109256:	f7ff ba65 	b.w	8108724 <_strtod_l+0x8c>
 810925a:	2b65      	cmp	r3, #101	; 0x65
 810925c:	f43f ab5d 	beq.w	810891a <_strtod_l+0x282>
 8109260:	2b45      	cmp	r3, #69	; 0x45
 8109262:	f43f ab5a 	beq.w	810891a <_strtod_l+0x282>
 8109266:	2201      	movs	r2, #1
 8109268:	f7ff bb92 	b.w	8108990 <_strtod_l+0x2f8>
 810926c:	f3af 8000 	nop.w
 8109270:	94a03595 	.word	0x94a03595
 8109274:	3fdfffff 	.word	0x3fdfffff
 8109278:	35afe535 	.word	0x35afe535
 810927c:	3fe00000 	.word	0x3fe00000
 8109280:	ffc00000 	.word	0xffc00000
 8109284:	41dfffff 	.word	0x41dfffff
 8109288:	94a03595 	.word	0x94a03595
 810928c:	3fcfffff 	.word	0x3fcfffff
 8109290:	3ff00000 	.word	0x3ff00000
 8109294:	7ff00000 	.word	0x7ff00000
 8109298:	7fe00000 	.word	0x7fe00000
 810929c:	7c9fffff 	.word	0x7c9fffff
 81092a0:	3fe00000 	.word	0x3fe00000
 81092a4:	bff00000 	.word	0xbff00000
 81092a8:	7fefffff 	.word	0x7fefffff

081092ac <_strtod_r>:
 81092ac:	4b01      	ldr	r3, [pc, #4]	; (81092b4 <_strtod_r+0x8>)
 81092ae:	f7ff b9f3 	b.w	8108698 <_strtod_l>
 81092b2:	bf00      	nop
 81092b4:	100000c8 	.word	0x100000c8

081092b8 <_strtol_l.isra.0>:
 81092b8:	2b01      	cmp	r3, #1
 81092ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81092be:	d001      	beq.n	81092c4 <_strtol_l.isra.0+0xc>
 81092c0:	2b24      	cmp	r3, #36	; 0x24
 81092c2:	d906      	bls.n	81092d2 <_strtol_l.isra.0+0x1a>
 81092c4:	f7fd feec 	bl	81070a0 <__errno>
 81092c8:	2316      	movs	r3, #22
 81092ca:	6003      	str	r3, [r0, #0]
 81092cc:	2000      	movs	r0, #0
 81092ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81092d2:	4f3a      	ldr	r7, [pc, #232]	; (81093bc <_strtol_l.isra.0+0x104>)
 81092d4:	468e      	mov	lr, r1
 81092d6:	4676      	mov	r6, lr
 81092d8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 81092dc:	5de5      	ldrb	r5, [r4, r7]
 81092de:	f015 0508 	ands.w	r5, r5, #8
 81092e2:	d1f8      	bne.n	81092d6 <_strtol_l.isra.0+0x1e>
 81092e4:	2c2d      	cmp	r4, #45	; 0x2d
 81092e6:	d134      	bne.n	8109352 <_strtol_l.isra.0+0x9a>
 81092e8:	f89e 4000 	ldrb.w	r4, [lr]
 81092ec:	f04f 0801 	mov.w	r8, #1
 81092f0:	f106 0e02 	add.w	lr, r6, #2
 81092f4:	2b00      	cmp	r3, #0
 81092f6:	d05c      	beq.n	81093b2 <_strtol_l.isra.0+0xfa>
 81092f8:	2b10      	cmp	r3, #16
 81092fa:	d10c      	bne.n	8109316 <_strtol_l.isra.0+0x5e>
 81092fc:	2c30      	cmp	r4, #48	; 0x30
 81092fe:	d10a      	bne.n	8109316 <_strtol_l.isra.0+0x5e>
 8109300:	f89e 4000 	ldrb.w	r4, [lr]
 8109304:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8109308:	2c58      	cmp	r4, #88	; 0x58
 810930a:	d14d      	bne.n	81093a8 <_strtol_l.isra.0+0xf0>
 810930c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8109310:	2310      	movs	r3, #16
 8109312:	f10e 0e02 	add.w	lr, lr, #2
 8109316:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 810931a:	f10c 3cff 	add.w	ip, ip, #4294967295
 810931e:	2600      	movs	r6, #0
 8109320:	fbbc f9f3 	udiv	r9, ip, r3
 8109324:	4635      	mov	r5, r6
 8109326:	fb03 ca19 	mls	sl, r3, r9, ip
 810932a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 810932e:	2f09      	cmp	r7, #9
 8109330:	d818      	bhi.n	8109364 <_strtol_l.isra.0+0xac>
 8109332:	463c      	mov	r4, r7
 8109334:	42a3      	cmp	r3, r4
 8109336:	dd24      	ble.n	8109382 <_strtol_l.isra.0+0xca>
 8109338:	2e00      	cmp	r6, #0
 810933a:	db1f      	blt.n	810937c <_strtol_l.isra.0+0xc4>
 810933c:	45a9      	cmp	r9, r5
 810933e:	d31d      	bcc.n	810937c <_strtol_l.isra.0+0xc4>
 8109340:	d101      	bne.n	8109346 <_strtol_l.isra.0+0x8e>
 8109342:	45a2      	cmp	sl, r4
 8109344:	db1a      	blt.n	810937c <_strtol_l.isra.0+0xc4>
 8109346:	fb05 4503 	mla	r5, r5, r3, r4
 810934a:	2601      	movs	r6, #1
 810934c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8109350:	e7eb      	b.n	810932a <_strtol_l.isra.0+0x72>
 8109352:	2c2b      	cmp	r4, #43	; 0x2b
 8109354:	bf08      	it	eq
 8109356:	f89e 4000 	ldrbeq.w	r4, [lr]
 810935a:	46a8      	mov	r8, r5
 810935c:	bf08      	it	eq
 810935e:	f106 0e02 	addeq.w	lr, r6, #2
 8109362:	e7c7      	b.n	81092f4 <_strtol_l.isra.0+0x3c>
 8109364:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8109368:	2f19      	cmp	r7, #25
 810936a:	d801      	bhi.n	8109370 <_strtol_l.isra.0+0xb8>
 810936c:	3c37      	subs	r4, #55	; 0x37
 810936e:	e7e1      	b.n	8109334 <_strtol_l.isra.0+0x7c>
 8109370:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8109374:	2f19      	cmp	r7, #25
 8109376:	d804      	bhi.n	8109382 <_strtol_l.isra.0+0xca>
 8109378:	3c57      	subs	r4, #87	; 0x57
 810937a:	e7db      	b.n	8109334 <_strtol_l.isra.0+0x7c>
 810937c:	f04f 36ff 	mov.w	r6, #4294967295
 8109380:	e7e4      	b.n	810934c <_strtol_l.isra.0+0x94>
 8109382:	2e00      	cmp	r6, #0
 8109384:	da05      	bge.n	8109392 <_strtol_l.isra.0+0xda>
 8109386:	2322      	movs	r3, #34	; 0x22
 8109388:	6003      	str	r3, [r0, #0]
 810938a:	4665      	mov	r5, ip
 810938c:	b942      	cbnz	r2, 81093a0 <_strtol_l.isra.0+0xe8>
 810938e:	4628      	mov	r0, r5
 8109390:	e79d      	b.n	81092ce <_strtol_l.isra.0+0x16>
 8109392:	f1b8 0f00 	cmp.w	r8, #0
 8109396:	d000      	beq.n	810939a <_strtol_l.isra.0+0xe2>
 8109398:	426d      	negs	r5, r5
 810939a:	2a00      	cmp	r2, #0
 810939c:	d0f7      	beq.n	810938e <_strtol_l.isra.0+0xd6>
 810939e:	b10e      	cbz	r6, 81093a4 <_strtol_l.isra.0+0xec>
 81093a0:	f10e 31ff 	add.w	r1, lr, #4294967295
 81093a4:	6011      	str	r1, [r2, #0]
 81093a6:	e7f2      	b.n	810938e <_strtol_l.isra.0+0xd6>
 81093a8:	2430      	movs	r4, #48	; 0x30
 81093aa:	2b00      	cmp	r3, #0
 81093ac:	d1b3      	bne.n	8109316 <_strtol_l.isra.0+0x5e>
 81093ae:	2308      	movs	r3, #8
 81093b0:	e7b1      	b.n	8109316 <_strtol_l.isra.0+0x5e>
 81093b2:	2c30      	cmp	r4, #48	; 0x30
 81093b4:	d0a4      	beq.n	8109300 <_strtol_l.isra.0+0x48>
 81093b6:	230a      	movs	r3, #10
 81093b8:	e7ad      	b.n	8109316 <_strtol_l.isra.0+0x5e>
 81093ba:	bf00      	nop
 81093bc:	0810d521 	.word	0x0810d521

081093c0 <_strtol_r>:
 81093c0:	f7ff bf7a 	b.w	81092b8 <_strtol_l.isra.0>

081093c4 <__swbuf_r>:
 81093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81093c6:	460e      	mov	r6, r1
 81093c8:	4614      	mov	r4, r2
 81093ca:	4605      	mov	r5, r0
 81093cc:	b118      	cbz	r0, 81093d6 <__swbuf_r+0x12>
 81093ce:	6983      	ldr	r3, [r0, #24]
 81093d0:	b90b      	cbnz	r3, 81093d6 <__swbuf_r+0x12>
 81093d2:	f7fd ff85 	bl	81072e0 <__sinit>
 81093d6:	4b21      	ldr	r3, [pc, #132]	; (810945c <__swbuf_r+0x98>)
 81093d8:	429c      	cmp	r4, r3
 81093da:	d12b      	bne.n	8109434 <__swbuf_r+0x70>
 81093dc:	686c      	ldr	r4, [r5, #4]
 81093de:	69a3      	ldr	r3, [r4, #24]
 81093e0:	60a3      	str	r3, [r4, #8]
 81093e2:	89a3      	ldrh	r3, [r4, #12]
 81093e4:	071a      	lsls	r2, r3, #28
 81093e6:	d52f      	bpl.n	8109448 <__swbuf_r+0x84>
 81093e8:	6923      	ldr	r3, [r4, #16]
 81093ea:	b36b      	cbz	r3, 8109448 <__swbuf_r+0x84>
 81093ec:	6923      	ldr	r3, [r4, #16]
 81093ee:	6820      	ldr	r0, [r4, #0]
 81093f0:	1ac0      	subs	r0, r0, r3
 81093f2:	6963      	ldr	r3, [r4, #20]
 81093f4:	b2f6      	uxtb	r6, r6
 81093f6:	4283      	cmp	r3, r0
 81093f8:	4637      	mov	r7, r6
 81093fa:	dc04      	bgt.n	8109406 <__swbuf_r+0x42>
 81093fc:	4621      	mov	r1, r4
 81093fe:	4628      	mov	r0, r5
 8109400:	f7fd feda 	bl	81071b8 <_fflush_r>
 8109404:	bb30      	cbnz	r0, 8109454 <__swbuf_r+0x90>
 8109406:	68a3      	ldr	r3, [r4, #8]
 8109408:	3b01      	subs	r3, #1
 810940a:	60a3      	str	r3, [r4, #8]
 810940c:	6823      	ldr	r3, [r4, #0]
 810940e:	1c5a      	adds	r2, r3, #1
 8109410:	6022      	str	r2, [r4, #0]
 8109412:	701e      	strb	r6, [r3, #0]
 8109414:	6963      	ldr	r3, [r4, #20]
 8109416:	3001      	adds	r0, #1
 8109418:	4283      	cmp	r3, r0
 810941a:	d004      	beq.n	8109426 <__swbuf_r+0x62>
 810941c:	89a3      	ldrh	r3, [r4, #12]
 810941e:	07db      	lsls	r3, r3, #31
 8109420:	d506      	bpl.n	8109430 <__swbuf_r+0x6c>
 8109422:	2e0a      	cmp	r6, #10
 8109424:	d104      	bne.n	8109430 <__swbuf_r+0x6c>
 8109426:	4621      	mov	r1, r4
 8109428:	4628      	mov	r0, r5
 810942a:	f7fd fec5 	bl	81071b8 <_fflush_r>
 810942e:	b988      	cbnz	r0, 8109454 <__swbuf_r+0x90>
 8109430:	4638      	mov	r0, r7
 8109432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8109434:	4b0a      	ldr	r3, [pc, #40]	; (8109460 <__swbuf_r+0x9c>)
 8109436:	429c      	cmp	r4, r3
 8109438:	d101      	bne.n	810943e <__swbuf_r+0x7a>
 810943a:	68ac      	ldr	r4, [r5, #8]
 810943c:	e7cf      	b.n	81093de <__swbuf_r+0x1a>
 810943e:	4b09      	ldr	r3, [pc, #36]	; (8109464 <__swbuf_r+0xa0>)
 8109440:	429c      	cmp	r4, r3
 8109442:	bf08      	it	eq
 8109444:	68ec      	ldreq	r4, [r5, #12]
 8109446:	e7ca      	b.n	81093de <__swbuf_r+0x1a>
 8109448:	4621      	mov	r1, r4
 810944a:	4628      	mov	r0, r5
 810944c:	f000 f81e 	bl	810948c <__swsetup_r>
 8109450:	2800      	cmp	r0, #0
 8109452:	d0cb      	beq.n	81093ec <__swbuf_r+0x28>
 8109454:	f04f 37ff 	mov.w	r7, #4294967295
 8109458:	e7ea      	b.n	8109430 <__swbuf_r+0x6c>
 810945a:	bf00      	nop
 810945c:	0810d44c 	.word	0x0810d44c
 8109460:	0810d46c 	.word	0x0810d46c
 8109464:	0810d42c 	.word	0x0810d42c

08109468 <_write_r>:
 8109468:	b538      	push	{r3, r4, r5, lr}
 810946a:	4d07      	ldr	r5, [pc, #28]	; (8109488 <_write_r+0x20>)
 810946c:	4604      	mov	r4, r0
 810946e:	4608      	mov	r0, r1
 8109470:	4611      	mov	r1, r2
 8109472:	2200      	movs	r2, #0
 8109474:	602a      	str	r2, [r5, #0]
 8109476:	461a      	mov	r2, r3
 8109478:	f7f9 f8a1 	bl	81025be <_write>
 810947c:	1c43      	adds	r3, r0, #1
 810947e:	d102      	bne.n	8109486 <_write_r+0x1e>
 8109480:	682b      	ldr	r3, [r5, #0]
 8109482:	b103      	cbz	r3, 8109486 <_write_r+0x1e>
 8109484:	6023      	str	r3, [r4, #0]
 8109486:	bd38      	pop	{r3, r4, r5, pc}
 8109488:	100105d0 	.word	0x100105d0

0810948c <__swsetup_r>:
 810948c:	4b32      	ldr	r3, [pc, #200]	; (8109558 <__swsetup_r+0xcc>)
 810948e:	b570      	push	{r4, r5, r6, lr}
 8109490:	681d      	ldr	r5, [r3, #0]
 8109492:	4606      	mov	r6, r0
 8109494:	460c      	mov	r4, r1
 8109496:	b125      	cbz	r5, 81094a2 <__swsetup_r+0x16>
 8109498:	69ab      	ldr	r3, [r5, #24]
 810949a:	b913      	cbnz	r3, 81094a2 <__swsetup_r+0x16>
 810949c:	4628      	mov	r0, r5
 810949e:	f7fd ff1f 	bl	81072e0 <__sinit>
 81094a2:	4b2e      	ldr	r3, [pc, #184]	; (810955c <__swsetup_r+0xd0>)
 81094a4:	429c      	cmp	r4, r3
 81094a6:	d10f      	bne.n	81094c8 <__swsetup_r+0x3c>
 81094a8:	686c      	ldr	r4, [r5, #4]
 81094aa:	89a3      	ldrh	r3, [r4, #12]
 81094ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81094b0:	0719      	lsls	r1, r3, #28
 81094b2:	d42c      	bmi.n	810950e <__swsetup_r+0x82>
 81094b4:	06dd      	lsls	r5, r3, #27
 81094b6:	d411      	bmi.n	81094dc <__swsetup_r+0x50>
 81094b8:	2309      	movs	r3, #9
 81094ba:	6033      	str	r3, [r6, #0]
 81094bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 81094c0:	81a3      	strh	r3, [r4, #12]
 81094c2:	f04f 30ff 	mov.w	r0, #4294967295
 81094c6:	e03e      	b.n	8109546 <__swsetup_r+0xba>
 81094c8:	4b25      	ldr	r3, [pc, #148]	; (8109560 <__swsetup_r+0xd4>)
 81094ca:	429c      	cmp	r4, r3
 81094cc:	d101      	bne.n	81094d2 <__swsetup_r+0x46>
 81094ce:	68ac      	ldr	r4, [r5, #8]
 81094d0:	e7eb      	b.n	81094aa <__swsetup_r+0x1e>
 81094d2:	4b24      	ldr	r3, [pc, #144]	; (8109564 <__swsetup_r+0xd8>)
 81094d4:	429c      	cmp	r4, r3
 81094d6:	bf08      	it	eq
 81094d8:	68ec      	ldreq	r4, [r5, #12]
 81094da:	e7e6      	b.n	81094aa <__swsetup_r+0x1e>
 81094dc:	0758      	lsls	r0, r3, #29
 81094de:	d512      	bpl.n	8109506 <__swsetup_r+0x7a>
 81094e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 81094e2:	b141      	cbz	r1, 81094f6 <__swsetup_r+0x6a>
 81094e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 81094e8:	4299      	cmp	r1, r3
 81094ea:	d002      	beq.n	81094f2 <__swsetup_r+0x66>
 81094ec:	4630      	mov	r0, r6
 81094ee:	f7fd ffc5 	bl	810747c <_free_r>
 81094f2:	2300      	movs	r3, #0
 81094f4:	6363      	str	r3, [r4, #52]	; 0x34
 81094f6:	89a3      	ldrh	r3, [r4, #12]
 81094f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 81094fc:	81a3      	strh	r3, [r4, #12]
 81094fe:	2300      	movs	r3, #0
 8109500:	6063      	str	r3, [r4, #4]
 8109502:	6923      	ldr	r3, [r4, #16]
 8109504:	6023      	str	r3, [r4, #0]
 8109506:	89a3      	ldrh	r3, [r4, #12]
 8109508:	f043 0308 	orr.w	r3, r3, #8
 810950c:	81a3      	strh	r3, [r4, #12]
 810950e:	6923      	ldr	r3, [r4, #16]
 8109510:	b94b      	cbnz	r3, 8109526 <__swsetup_r+0x9a>
 8109512:	89a3      	ldrh	r3, [r4, #12]
 8109514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8109518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810951c:	d003      	beq.n	8109526 <__swsetup_r+0x9a>
 810951e:	4621      	mov	r1, r4
 8109520:	4630      	mov	r0, r6
 8109522:	f001 fa53 	bl	810a9cc <__smakebuf_r>
 8109526:	89a0      	ldrh	r0, [r4, #12]
 8109528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810952c:	f010 0301 	ands.w	r3, r0, #1
 8109530:	d00a      	beq.n	8109548 <__swsetup_r+0xbc>
 8109532:	2300      	movs	r3, #0
 8109534:	60a3      	str	r3, [r4, #8]
 8109536:	6963      	ldr	r3, [r4, #20]
 8109538:	425b      	negs	r3, r3
 810953a:	61a3      	str	r3, [r4, #24]
 810953c:	6923      	ldr	r3, [r4, #16]
 810953e:	b943      	cbnz	r3, 8109552 <__swsetup_r+0xc6>
 8109540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8109544:	d1ba      	bne.n	81094bc <__swsetup_r+0x30>
 8109546:	bd70      	pop	{r4, r5, r6, pc}
 8109548:	0781      	lsls	r1, r0, #30
 810954a:	bf58      	it	pl
 810954c:	6963      	ldrpl	r3, [r4, #20]
 810954e:	60a3      	str	r3, [r4, #8]
 8109550:	e7f4      	b.n	810953c <__swsetup_r+0xb0>
 8109552:	2000      	movs	r0, #0
 8109554:	e7f7      	b.n	8109546 <__swsetup_r+0xba>
 8109556:	bf00      	nop
 8109558:	10000060 	.word	0x10000060
 810955c:	0810d44c 	.word	0x0810d44c
 8109560:	0810d46c 	.word	0x0810d46c
 8109564:	0810d42c 	.word	0x0810d42c

08109568 <_close_r>:
 8109568:	b538      	push	{r3, r4, r5, lr}
 810956a:	4d06      	ldr	r5, [pc, #24]	; (8109584 <_close_r+0x1c>)
 810956c:	2300      	movs	r3, #0
 810956e:	4604      	mov	r4, r0
 8109570:	4608      	mov	r0, r1
 8109572:	602b      	str	r3, [r5, #0]
 8109574:	f7f9 f83f 	bl	81025f6 <_close>
 8109578:	1c43      	adds	r3, r0, #1
 810957a:	d102      	bne.n	8109582 <_close_r+0x1a>
 810957c:	682b      	ldr	r3, [r5, #0]
 810957e:	b103      	cbz	r3, 8109582 <_close_r+0x1a>
 8109580:	6023      	str	r3, [r4, #0]
 8109582:	bd38      	pop	{r3, r4, r5, pc}
 8109584:	100105d0 	.word	0x100105d0

08109588 <quorem>:
 8109588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810958c:	6903      	ldr	r3, [r0, #16]
 810958e:	690c      	ldr	r4, [r1, #16]
 8109590:	42a3      	cmp	r3, r4
 8109592:	4607      	mov	r7, r0
 8109594:	f2c0 8081 	blt.w	810969a <quorem+0x112>
 8109598:	3c01      	subs	r4, #1
 810959a:	f101 0814 	add.w	r8, r1, #20
 810959e:	f100 0514 	add.w	r5, r0, #20
 81095a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81095a6:	9301      	str	r3, [sp, #4]
 81095a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81095ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81095b0:	3301      	adds	r3, #1
 81095b2:	429a      	cmp	r2, r3
 81095b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81095b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81095bc:	fbb2 f6f3 	udiv	r6, r2, r3
 81095c0:	d331      	bcc.n	8109626 <quorem+0x9e>
 81095c2:	f04f 0e00 	mov.w	lr, #0
 81095c6:	4640      	mov	r0, r8
 81095c8:	46ac      	mov	ip, r5
 81095ca:	46f2      	mov	sl, lr
 81095cc:	f850 2b04 	ldr.w	r2, [r0], #4
 81095d0:	b293      	uxth	r3, r2
 81095d2:	fb06 e303 	mla	r3, r6, r3, lr
 81095d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 81095da:	b29b      	uxth	r3, r3
 81095dc:	ebaa 0303 	sub.w	r3, sl, r3
 81095e0:	0c12      	lsrs	r2, r2, #16
 81095e2:	f8dc a000 	ldr.w	sl, [ip]
 81095e6:	fb06 e202 	mla	r2, r6, r2, lr
 81095ea:	fa13 f38a 	uxtah	r3, r3, sl
 81095ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81095f2:	fa1f fa82 	uxth.w	sl, r2
 81095f6:	f8dc 2000 	ldr.w	r2, [ip]
 81095fa:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 81095fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109602:	b29b      	uxth	r3, r3
 8109604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8109608:	4581      	cmp	r9, r0
 810960a:	f84c 3b04 	str.w	r3, [ip], #4
 810960e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8109612:	d2db      	bcs.n	81095cc <quorem+0x44>
 8109614:	f855 300b 	ldr.w	r3, [r5, fp]
 8109618:	b92b      	cbnz	r3, 8109626 <quorem+0x9e>
 810961a:	9b01      	ldr	r3, [sp, #4]
 810961c:	3b04      	subs	r3, #4
 810961e:	429d      	cmp	r5, r3
 8109620:	461a      	mov	r2, r3
 8109622:	d32e      	bcc.n	8109682 <quorem+0xfa>
 8109624:	613c      	str	r4, [r7, #16]
 8109626:	4638      	mov	r0, r7
 8109628:	f001 fd0c 	bl	810b044 <__mcmp>
 810962c:	2800      	cmp	r0, #0
 810962e:	db24      	blt.n	810967a <quorem+0xf2>
 8109630:	3601      	adds	r6, #1
 8109632:	4628      	mov	r0, r5
 8109634:	f04f 0c00 	mov.w	ip, #0
 8109638:	f858 2b04 	ldr.w	r2, [r8], #4
 810963c:	f8d0 e000 	ldr.w	lr, [r0]
 8109640:	b293      	uxth	r3, r2
 8109642:	ebac 0303 	sub.w	r3, ip, r3
 8109646:	0c12      	lsrs	r2, r2, #16
 8109648:	fa13 f38e 	uxtah	r3, r3, lr
 810964c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8109650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8109654:	b29b      	uxth	r3, r3
 8109656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810965a:	45c1      	cmp	r9, r8
 810965c:	f840 3b04 	str.w	r3, [r0], #4
 8109660:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8109664:	d2e8      	bcs.n	8109638 <quorem+0xb0>
 8109666:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810966a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810966e:	b922      	cbnz	r2, 810967a <quorem+0xf2>
 8109670:	3b04      	subs	r3, #4
 8109672:	429d      	cmp	r5, r3
 8109674:	461a      	mov	r2, r3
 8109676:	d30a      	bcc.n	810968e <quorem+0x106>
 8109678:	613c      	str	r4, [r7, #16]
 810967a:	4630      	mov	r0, r6
 810967c:	b003      	add	sp, #12
 810967e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109682:	6812      	ldr	r2, [r2, #0]
 8109684:	3b04      	subs	r3, #4
 8109686:	2a00      	cmp	r2, #0
 8109688:	d1cc      	bne.n	8109624 <quorem+0x9c>
 810968a:	3c01      	subs	r4, #1
 810968c:	e7c7      	b.n	810961e <quorem+0x96>
 810968e:	6812      	ldr	r2, [r2, #0]
 8109690:	3b04      	subs	r3, #4
 8109692:	2a00      	cmp	r2, #0
 8109694:	d1f0      	bne.n	8109678 <quorem+0xf0>
 8109696:	3c01      	subs	r4, #1
 8109698:	e7eb      	b.n	8109672 <quorem+0xea>
 810969a:	2000      	movs	r0, #0
 810969c:	e7ee      	b.n	810967c <quorem+0xf4>
	...

081096a0 <_dtoa_r>:
 81096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81096a4:	ed2d 8b02 	vpush	{d8}
 81096a8:	ec57 6b10 	vmov	r6, r7, d0
 81096ac:	b095      	sub	sp, #84	; 0x54
 81096ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 81096b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 81096b4:	9105      	str	r1, [sp, #20]
 81096b6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 81096ba:	4604      	mov	r4, r0
 81096bc:	9209      	str	r2, [sp, #36]	; 0x24
 81096be:	930f      	str	r3, [sp, #60]	; 0x3c
 81096c0:	b975      	cbnz	r5, 81096e0 <_dtoa_r+0x40>
 81096c2:	2010      	movs	r0, #16
 81096c4:	f001 f9c2 	bl	810aa4c <malloc>
 81096c8:	4602      	mov	r2, r0
 81096ca:	6260      	str	r0, [r4, #36]	; 0x24
 81096cc:	b920      	cbnz	r0, 81096d8 <_dtoa_r+0x38>
 81096ce:	4bb2      	ldr	r3, [pc, #712]	; (8109998 <_dtoa_r+0x2f8>)
 81096d0:	21ea      	movs	r1, #234	; 0xea
 81096d2:	48b2      	ldr	r0, [pc, #712]	; (810999c <_dtoa_r+0x2fc>)
 81096d4:	f002 f9a8 	bl	810ba28 <__assert_func>
 81096d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81096dc:	6005      	str	r5, [r0, #0]
 81096de:	60c5      	str	r5, [r0, #12]
 81096e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81096e2:	6819      	ldr	r1, [r3, #0]
 81096e4:	b151      	cbz	r1, 81096fc <_dtoa_r+0x5c>
 81096e6:	685a      	ldr	r2, [r3, #4]
 81096e8:	604a      	str	r2, [r1, #4]
 81096ea:	2301      	movs	r3, #1
 81096ec:	4093      	lsls	r3, r2
 81096ee:	608b      	str	r3, [r1, #8]
 81096f0:	4620      	mov	r0, r4
 81096f2:	f001 fa1f 	bl	810ab34 <_Bfree>
 81096f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81096f8:	2200      	movs	r2, #0
 81096fa:	601a      	str	r2, [r3, #0]
 81096fc:	1e3b      	subs	r3, r7, #0
 81096fe:	bfb9      	ittee	lt
 8109700:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8109704:	9303      	strlt	r3, [sp, #12]
 8109706:	2300      	movge	r3, #0
 8109708:	f8c8 3000 	strge.w	r3, [r8]
 810970c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8109710:	4ba3      	ldr	r3, [pc, #652]	; (81099a0 <_dtoa_r+0x300>)
 8109712:	bfbc      	itt	lt
 8109714:	2201      	movlt	r2, #1
 8109716:	f8c8 2000 	strlt.w	r2, [r8]
 810971a:	ea33 0309 	bics.w	r3, r3, r9
 810971e:	d11b      	bne.n	8109758 <_dtoa_r+0xb8>
 8109720:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109722:	f242 730f 	movw	r3, #9999	; 0x270f
 8109726:	6013      	str	r3, [r2, #0]
 8109728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810972c:	4333      	orrs	r3, r6
 810972e:	f000 857a 	beq.w	810a226 <_dtoa_r+0xb86>
 8109732:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109734:	b963      	cbnz	r3, 8109750 <_dtoa_r+0xb0>
 8109736:	4b9b      	ldr	r3, [pc, #620]	; (81099a4 <_dtoa_r+0x304>)
 8109738:	e024      	b.n	8109784 <_dtoa_r+0xe4>
 810973a:	4b9b      	ldr	r3, [pc, #620]	; (81099a8 <_dtoa_r+0x308>)
 810973c:	9300      	str	r3, [sp, #0]
 810973e:	3308      	adds	r3, #8
 8109740:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8109742:	6013      	str	r3, [r2, #0]
 8109744:	9800      	ldr	r0, [sp, #0]
 8109746:	b015      	add	sp, #84	; 0x54
 8109748:	ecbd 8b02 	vpop	{d8}
 810974c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109750:	4b94      	ldr	r3, [pc, #592]	; (81099a4 <_dtoa_r+0x304>)
 8109752:	9300      	str	r3, [sp, #0]
 8109754:	3303      	adds	r3, #3
 8109756:	e7f3      	b.n	8109740 <_dtoa_r+0xa0>
 8109758:	ed9d 7b02 	vldr	d7, [sp, #8]
 810975c:	2200      	movs	r2, #0
 810975e:	ec51 0b17 	vmov	r0, r1, d7
 8109762:	2300      	movs	r3, #0
 8109764:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8109768:	f7f7 fa36 	bl	8100bd8 <__aeabi_dcmpeq>
 810976c:	4680      	mov	r8, r0
 810976e:	b158      	cbz	r0, 8109788 <_dtoa_r+0xe8>
 8109770:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8109772:	2301      	movs	r3, #1
 8109774:	6013      	str	r3, [r2, #0]
 8109776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109778:	2b00      	cmp	r3, #0
 810977a:	f000 8551 	beq.w	810a220 <_dtoa_r+0xb80>
 810977e:	488b      	ldr	r0, [pc, #556]	; (81099ac <_dtoa_r+0x30c>)
 8109780:	6018      	str	r0, [r3, #0]
 8109782:	1e43      	subs	r3, r0, #1
 8109784:	9300      	str	r3, [sp, #0]
 8109786:	e7dd      	b.n	8109744 <_dtoa_r+0xa4>
 8109788:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 810978c:	aa12      	add	r2, sp, #72	; 0x48
 810978e:	a913      	add	r1, sp, #76	; 0x4c
 8109790:	4620      	mov	r0, r4
 8109792:	f001 fd77 	bl	810b284 <__d2b>
 8109796:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810979a:	4683      	mov	fp, r0
 810979c:	2d00      	cmp	r5, #0
 810979e:	d07c      	beq.n	810989a <_dtoa_r+0x1fa>
 81097a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81097a2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 81097a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81097aa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 81097ae:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 81097b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 81097b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 81097ba:	4b7d      	ldr	r3, [pc, #500]	; (81099b0 <_dtoa_r+0x310>)
 81097bc:	2200      	movs	r2, #0
 81097be:	4630      	mov	r0, r6
 81097c0:	4639      	mov	r1, r7
 81097c2:	f7f6 fde9 	bl	8100398 <__aeabi_dsub>
 81097c6:	a36e      	add	r3, pc, #440	; (adr r3, 8109980 <_dtoa_r+0x2e0>)
 81097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097cc:	f7f6 ff9c 	bl	8100708 <__aeabi_dmul>
 81097d0:	a36d      	add	r3, pc, #436	; (adr r3, 8109988 <_dtoa_r+0x2e8>)
 81097d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097d6:	f7f6 fde1 	bl	810039c <__adddf3>
 81097da:	4606      	mov	r6, r0
 81097dc:	4628      	mov	r0, r5
 81097de:	460f      	mov	r7, r1
 81097e0:	f7f6 ff28 	bl	8100634 <__aeabi_i2d>
 81097e4:	a36a      	add	r3, pc, #424	; (adr r3, 8109990 <_dtoa_r+0x2f0>)
 81097e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81097ea:	f7f6 ff8d 	bl	8100708 <__aeabi_dmul>
 81097ee:	4602      	mov	r2, r0
 81097f0:	460b      	mov	r3, r1
 81097f2:	4630      	mov	r0, r6
 81097f4:	4639      	mov	r1, r7
 81097f6:	f7f6 fdd1 	bl	810039c <__adddf3>
 81097fa:	4606      	mov	r6, r0
 81097fc:	460f      	mov	r7, r1
 81097fe:	f7f7 fa33 	bl	8100c68 <__aeabi_d2iz>
 8109802:	2200      	movs	r2, #0
 8109804:	4682      	mov	sl, r0
 8109806:	2300      	movs	r3, #0
 8109808:	4630      	mov	r0, r6
 810980a:	4639      	mov	r1, r7
 810980c:	f7f7 f9ee 	bl	8100bec <__aeabi_dcmplt>
 8109810:	b148      	cbz	r0, 8109826 <_dtoa_r+0x186>
 8109812:	4650      	mov	r0, sl
 8109814:	f7f6 ff0e 	bl	8100634 <__aeabi_i2d>
 8109818:	4632      	mov	r2, r6
 810981a:	463b      	mov	r3, r7
 810981c:	f7f7 f9dc 	bl	8100bd8 <__aeabi_dcmpeq>
 8109820:	b908      	cbnz	r0, 8109826 <_dtoa_r+0x186>
 8109822:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109826:	f1ba 0f16 	cmp.w	sl, #22
 810982a:	d854      	bhi.n	81098d6 <_dtoa_r+0x236>
 810982c:	4b61      	ldr	r3, [pc, #388]	; (81099b4 <_dtoa_r+0x314>)
 810982e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8109832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 810983a:	f7f7 f9d7 	bl	8100bec <__aeabi_dcmplt>
 810983e:	2800      	cmp	r0, #0
 8109840:	d04b      	beq.n	81098da <_dtoa_r+0x23a>
 8109842:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109846:	2300      	movs	r3, #0
 8109848:	930e      	str	r3, [sp, #56]	; 0x38
 810984a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 810984c:	1b5d      	subs	r5, r3, r5
 810984e:	1e6b      	subs	r3, r5, #1
 8109850:	9304      	str	r3, [sp, #16]
 8109852:	bf43      	ittte	mi
 8109854:	2300      	movmi	r3, #0
 8109856:	f1c5 0801 	rsbmi	r8, r5, #1
 810985a:	9304      	strmi	r3, [sp, #16]
 810985c:	f04f 0800 	movpl.w	r8, #0
 8109860:	f1ba 0f00 	cmp.w	sl, #0
 8109864:	db3b      	blt.n	81098de <_dtoa_r+0x23e>
 8109866:	9b04      	ldr	r3, [sp, #16]
 8109868:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 810986c:	4453      	add	r3, sl
 810986e:	9304      	str	r3, [sp, #16]
 8109870:	2300      	movs	r3, #0
 8109872:	9306      	str	r3, [sp, #24]
 8109874:	9b05      	ldr	r3, [sp, #20]
 8109876:	2b09      	cmp	r3, #9
 8109878:	d869      	bhi.n	810994e <_dtoa_r+0x2ae>
 810987a:	2b05      	cmp	r3, #5
 810987c:	bfc4      	itt	gt
 810987e:	3b04      	subgt	r3, #4
 8109880:	9305      	strgt	r3, [sp, #20]
 8109882:	9b05      	ldr	r3, [sp, #20]
 8109884:	f1a3 0302 	sub.w	r3, r3, #2
 8109888:	bfcc      	ite	gt
 810988a:	2500      	movgt	r5, #0
 810988c:	2501      	movle	r5, #1
 810988e:	2b03      	cmp	r3, #3
 8109890:	d869      	bhi.n	8109966 <_dtoa_r+0x2c6>
 8109892:	e8df f003 	tbb	[pc, r3]
 8109896:	4e2c      	.short	0x4e2c
 8109898:	5a4c      	.short	0x5a4c
 810989a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 810989e:	441d      	add	r5, r3
 81098a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 81098a4:	2b20      	cmp	r3, #32
 81098a6:	bfc1      	itttt	gt
 81098a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 81098ac:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 81098b0:	fa09 f303 	lslgt.w	r3, r9, r3
 81098b4:	fa26 f000 	lsrgt.w	r0, r6, r0
 81098b8:	bfda      	itte	le
 81098ba:	f1c3 0320 	rsble	r3, r3, #32
 81098be:	fa06 f003 	lslle.w	r0, r6, r3
 81098c2:	4318      	orrgt	r0, r3
 81098c4:	f7f6 fea6 	bl	8100614 <__aeabi_ui2d>
 81098c8:	2301      	movs	r3, #1
 81098ca:	4606      	mov	r6, r0
 81098cc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 81098d0:	3d01      	subs	r5, #1
 81098d2:	9310      	str	r3, [sp, #64]	; 0x40
 81098d4:	e771      	b.n	81097ba <_dtoa_r+0x11a>
 81098d6:	2301      	movs	r3, #1
 81098d8:	e7b6      	b.n	8109848 <_dtoa_r+0x1a8>
 81098da:	900e      	str	r0, [sp, #56]	; 0x38
 81098dc:	e7b5      	b.n	810984a <_dtoa_r+0x1aa>
 81098de:	f1ca 0300 	rsb	r3, sl, #0
 81098e2:	9306      	str	r3, [sp, #24]
 81098e4:	2300      	movs	r3, #0
 81098e6:	eba8 080a 	sub.w	r8, r8, sl
 81098ea:	930d      	str	r3, [sp, #52]	; 0x34
 81098ec:	e7c2      	b.n	8109874 <_dtoa_r+0x1d4>
 81098ee:	2300      	movs	r3, #0
 81098f0:	9308      	str	r3, [sp, #32]
 81098f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81098f4:	2b00      	cmp	r3, #0
 81098f6:	dc39      	bgt.n	810996c <_dtoa_r+0x2cc>
 81098f8:	f04f 0901 	mov.w	r9, #1
 81098fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8109900:	464b      	mov	r3, r9
 8109902:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8109906:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8109908:	2200      	movs	r2, #0
 810990a:	6042      	str	r2, [r0, #4]
 810990c:	2204      	movs	r2, #4
 810990e:	f102 0614 	add.w	r6, r2, #20
 8109912:	429e      	cmp	r6, r3
 8109914:	6841      	ldr	r1, [r0, #4]
 8109916:	d92f      	bls.n	8109978 <_dtoa_r+0x2d8>
 8109918:	4620      	mov	r0, r4
 810991a:	f001 f8cb 	bl	810aab4 <_Balloc>
 810991e:	9000      	str	r0, [sp, #0]
 8109920:	2800      	cmp	r0, #0
 8109922:	d14b      	bne.n	81099bc <_dtoa_r+0x31c>
 8109924:	4b24      	ldr	r3, [pc, #144]	; (81099b8 <_dtoa_r+0x318>)
 8109926:	4602      	mov	r2, r0
 8109928:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 810992c:	e6d1      	b.n	81096d2 <_dtoa_r+0x32>
 810992e:	2301      	movs	r3, #1
 8109930:	e7de      	b.n	81098f0 <_dtoa_r+0x250>
 8109932:	2300      	movs	r3, #0
 8109934:	9308      	str	r3, [sp, #32]
 8109936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109938:	eb0a 0903 	add.w	r9, sl, r3
 810993c:	f109 0301 	add.w	r3, r9, #1
 8109940:	2b01      	cmp	r3, #1
 8109942:	9301      	str	r3, [sp, #4]
 8109944:	bfb8      	it	lt
 8109946:	2301      	movlt	r3, #1
 8109948:	e7dd      	b.n	8109906 <_dtoa_r+0x266>
 810994a:	2301      	movs	r3, #1
 810994c:	e7f2      	b.n	8109934 <_dtoa_r+0x294>
 810994e:	2501      	movs	r5, #1
 8109950:	2300      	movs	r3, #0
 8109952:	9305      	str	r3, [sp, #20]
 8109954:	9508      	str	r5, [sp, #32]
 8109956:	f04f 39ff 	mov.w	r9, #4294967295
 810995a:	2200      	movs	r2, #0
 810995c:	f8cd 9004 	str.w	r9, [sp, #4]
 8109960:	2312      	movs	r3, #18
 8109962:	9209      	str	r2, [sp, #36]	; 0x24
 8109964:	e7cf      	b.n	8109906 <_dtoa_r+0x266>
 8109966:	2301      	movs	r3, #1
 8109968:	9308      	str	r3, [sp, #32]
 810996a:	e7f4      	b.n	8109956 <_dtoa_r+0x2b6>
 810996c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8109970:	f8cd 9004 	str.w	r9, [sp, #4]
 8109974:	464b      	mov	r3, r9
 8109976:	e7c6      	b.n	8109906 <_dtoa_r+0x266>
 8109978:	3101      	adds	r1, #1
 810997a:	6041      	str	r1, [r0, #4]
 810997c:	0052      	lsls	r2, r2, #1
 810997e:	e7c6      	b.n	810990e <_dtoa_r+0x26e>
 8109980:	636f4361 	.word	0x636f4361
 8109984:	3fd287a7 	.word	0x3fd287a7
 8109988:	8b60c8b3 	.word	0x8b60c8b3
 810998c:	3fc68a28 	.word	0x3fc68a28
 8109990:	509f79fb 	.word	0x509f79fb
 8109994:	3fd34413 	.word	0x3fd34413
 8109998:	0810d62e 	.word	0x0810d62e
 810999c:	0810d645 	.word	0x0810d645
 81099a0:	7ff00000 	.word	0x7ff00000
 81099a4:	0810d62a 	.word	0x0810d62a
 81099a8:	0810d621 	.word	0x0810d621
 81099ac:	0810d4a1 	.word	0x0810d4a1
 81099b0:	3ff80000 	.word	0x3ff80000
 81099b4:	0810d7c0 	.word	0x0810d7c0
 81099b8:	0810d6a4 	.word	0x0810d6a4
 81099bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 81099be:	9a00      	ldr	r2, [sp, #0]
 81099c0:	601a      	str	r2, [r3, #0]
 81099c2:	9b01      	ldr	r3, [sp, #4]
 81099c4:	2b0e      	cmp	r3, #14
 81099c6:	f200 80ad 	bhi.w	8109b24 <_dtoa_r+0x484>
 81099ca:	2d00      	cmp	r5, #0
 81099cc:	f000 80aa 	beq.w	8109b24 <_dtoa_r+0x484>
 81099d0:	f1ba 0f00 	cmp.w	sl, #0
 81099d4:	dd36      	ble.n	8109a44 <_dtoa_r+0x3a4>
 81099d6:	4ac3      	ldr	r2, [pc, #780]	; (8109ce4 <_dtoa_r+0x644>)
 81099d8:	f00a 030f 	and.w	r3, sl, #15
 81099dc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 81099e0:	ed93 7b00 	vldr	d7, [r3]
 81099e4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 81099e8:	ea4f 172a 	mov.w	r7, sl, asr #4
 81099ec:	eeb0 8a47 	vmov.f32	s16, s14
 81099f0:	eef0 8a67 	vmov.f32	s17, s15
 81099f4:	d016      	beq.n	8109a24 <_dtoa_r+0x384>
 81099f6:	4bbc      	ldr	r3, [pc, #752]	; (8109ce8 <_dtoa_r+0x648>)
 81099f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 81099fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8109a00:	f7f6 ffac 	bl	810095c <__aeabi_ddiv>
 8109a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109a08:	f007 070f 	and.w	r7, r7, #15
 8109a0c:	2503      	movs	r5, #3
 8109a0e:	4eb6      	ldr	r6, [pc, #728]	; (8109ce8 <_dtoa_r+0x648>)
 8109a10:	b957      	cbnz	r7, 8109a28 <_dtoa_r+0x388>
 8109a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8109a16:	ec53 2b18 	vmov	r2, r3, d8
 8109a1a:	f7f6 ff9f 	bl	810095c <__aeabi_ddiv>
 8109a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109a22:	e029      	b.n	8109a78 <_dtoa_r+0x3d8>
 8109a24:	2502      	movs	r5, #2
 8109a26:	e7f2      	b.n	8109a0e <_dtoa_r+0x36e>
 8109a28:	07f9      	lsls	r1, r7, #31
 8109a2a:	d508      	bpl.n	8109a3e <_dtoa_r+0x39e>
 8109a2c:	ec51 0b18 	vmov	r0, r1, d8
 8109a30:	e9d6 2300 	ldrd	r2, r3, [r6]
 8109a34:	f7f6 fe68 	bl	8100708 <__aeabi_dmul>
 8109a38:	ec41 0b18 	vmov	d8, r0, r1
 8109a3c:	3501      	adds	r5, #1
 8109a3e:	107f      	asrs	r7, r7, #1
 8109a40:	3608      	adds	r6, #8
 8109a42:	e7e5      	b.n	8109a10 <_dtoa_r+0x370>
 8109a44:	f000 80a6 	beq.w	8109b94 <_dtoa_r+0x4f4>
 8109a48:	f1ca 0600 	rsb	r6, sl, #0
 8109a4c:	4ba5      	ldr	r3, [pc, #660]	; (8109ce4 <_dtoa_r+0x644>)
 8109a4e:	4fa6      	ldr	r7, [pc, #664]	; (8109ce8 <_dtoa_r+0x648>)
 8109a50:	f006 020f 	and.w	r2, r6, #15
 8109a54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109a5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8109a60:	f7f6 fe52 	bl	8100708 <__aeabi_dmul>
 8109a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109a68:	1136      	asrs	r6, r6, #4
 8109a6a:	2300      	movs	r3, #0
 8109a6c:	2502      	movs	r5, #2
 8109a6e:	2e00      	cmp	r6, #0
 8109a70:	f040 8085 	bne.w	8109b7e <_dtoa_r+0x4de>
 8109a74:	2b00      	cmp	r3, #0
 8109a76:	d1d2      	bne.n	8109a1e <_dtoa_r+0x37e>
 8109a78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109a7a:	2b00      	cmp	r3, #0
 8109a7c:	f000 808c 	beq.w	8109b98 <_dtoa_r+0x4f8>
 8109a80:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109a84:	4b99      	ldr	r3, [pc, #612]	; (8109cec <_dtoa_r+0x64c>)
 8109a86:	2200      	movs	r2, #0
 8109a88:	4630      	mov	r0, r6
 8109a8a:	4639      	mov	r1, r7
 8109a8c:	f7f7 f8ae 	bl	8100bec <__aeabi_dcmplt>
 8109a90:	2800      	cmp	r0, #0
 8109a92:	f000 8081 	beq.w	8109b98 <_dtoa_r+0x4f8>
 8109a96:	9b01      	ldr	r3, [sp, #4]
 8109a98:	2b00      	cmp	r3, #0
 8109a9a:	d07d      	beq.n	8109b98 <_dtoa_r+0x4f8>
 8109a9c:	f1b9 0f00 	cmp.w	r9, #0
 8109aa0:	dd3c      	ble.n	8109b1c <_dtoa_r+0x47c>
 8109aa2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8109aa6:	9307      	str	r3, [sp, #28]
 8109aa8:	2200      	movs	r2, #0
 8109aaa:	4b91      	ldr	r3, [pc, #580]	; (8109cf0 <_dtoa_r+0x650>)
 8109aac:	4630      	mov	r0, r6
 8109aae:	4639      	mov	r1, r7
 8109ab0:	f7f6 fe2a 	bl	8100708 <__aeabi_dmul>
 8109ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109ab8:	3501      	adds	r5, #1
 8109aba:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8109abe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109ac2:	4628      	mov	r0, r5
 8109ac4:	f7f6 fdb6 	bl	8100634 <__aeabi_i2d>
 8109ac8:	4632      	mov	r2, r6
 8109aca:	463b      	mov	r3, r7
 8109acc:	f7f6 fe1c 	bl	8100708 <__aeabi_dmul>
 8109ad0:	4b88      	ldr	r3, [pc, #544]	; (8109cf4 <_dtoa_r+0x654>)
 8109ad2:	2200      	movs	r2, #0
 8109ad4:	f7f6 fc62 	bl	810039c <__adddf3>
 8109ad8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8109adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8109ae0:	9303      	str	r3, [sp, #12]
 8109ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109ae4:	2b00      	cmp	r3, #0
 8109ae6:	d15c      	bne.n	8109ba2 <_dtoa_r+0x502>
 8109ae8:	4b83      	ldr	r3, [pc, #524]	; (8109cf8 <_dtoa_r+0x658>)
 8109aea:	2200      	movs	r2, #0
 8109aec:	4630      	mov	r0, r6
 8109aee:	4639      	mov	r1, r7
 8109af0:	f7f6 fc52 	bl	8100398 <__aeabi_dsub>
 8109af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109af8:	4606      	mov	r6, r0
 8109afa:	460f      	mov	r7, r1
 8109afc:	f7f7 f894 	bl	8100c28 <__aeabi_dcmpgt>
 8109b00:	2800      	cmp	r0, #0
 8109b02:	f040 8296 	bne.w	810a032 <_dtoa_r+0x992>
 8109b06:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8109b0a:	4630      	mov	r0, r6
 8109b0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109b10:	4639      	mov	r1, r7
 8109b12:	f7f7 f86b 	bl	8100bec <__aeabi_dcmplt>
 8109b16:	2800      	cmp	r0, #0
 8109b18:	f040 8288 	bne.w	810a02c <_dtoa_r+0x98c>
 8109b1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8109b20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8109b24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109b26:	2b00      	cmp	r3, #0
 8109b28:	f2c0 8158 	blt.w	8109ddc <_dtoa_r+0x73c>
 8109b2c:	f1ba 0f0e 	cmp.w	sl, #14
 8109b30:	f300 8154 	bgt.w	8109ddc <_dtoa_r+0x73c>
 8109b34:	4b6b      	ldr	r3, [pc, #428]	; (8109ce4 <_dtoa_r+0x644>)
 8109b36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8109b3a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109b3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109b40:	2b00      	cmp	r3, #0
 8109b42:	f280 80e3 	bge.w	8109d0c <_dtoa_r+0x66c>
 8109b46:	9b01      	ldr	r3, [sp, #4]
 8109b48:	2b00      	cmp	r3, #0
 8109b4a:	f300 80df 	bgt.w	8109d0c <_dtoa_r+0x66c>
 8109b4e:	f040 826d 	bne.w	810a02c <_dtoa_r+0x98c>
 8109b52:	4b69      	ldr	r3, [pc, #420]	; (8109cf8 <_dtoa_r+0x658>)
 8109b54:	2200      	movs	r2, #0
 8109b56:	4640      	mov	r0, r8
 8109b58:	4649      	mov	r1, r9
 8109b5a:	f7f6 fdd5 	bl	8100708 <__aeabi_dmul>
 8109b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8109b62:	f7f7 f857 	bl	8100c14 <__aeabi_dcmpge>
 8109b66:	9e01      	ldr	r6, [sp, #4]
 8109b68:	4637      	mov	r7, r6
 8109b6a:	2800      	cmp	r0, #0
 8109b6c:	f040 8243 	bne.w	8109ff6 <_dtoa_r+0x956>
 8109b70:	9d00      	ldr	r5, [sp, #0]
 8109b72:	2331      	movs	r3, #49	; 0x31
 8109b74:	f805 3b01 	strb.w	r3, [r5], #1
 8109b78:	f10a 0a01 	add.w	sl, sl, #1
 8109b7c:	e23f      	b.n	8109ffe <_dtoa_r+0x95e>
 8109b7e:	07f2      	lsls	r2, r6, #31
 8109b80:	d505      	bpl.n	8109b8e <_dtoa_r+0x4ee>
 8109b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109b86:	f7f6 fdbf 	bl	8100708 <__aeabi_dmul>
 8109b8a:	3501      	adds	r5, #1
 8109b8c:	2301      	movs	r3, #1
 8109b8e:	1076      	asrs	r6, r6, #1
 8109b90:	3708      	adds	r7, #8
 8109b92:	e76c      	b.n	8109a6e <_dtoa_r+0x3ce>
 8109b94:	2502      	movs	r5, #2
 8109b96:	e76f      	b.n	8109a78 <_dtoa_r+0x3d8>
 8109b98:	9b01      	ldr	r3, [sp, #4]
 8109b9a:	f8cd a01c 	str.w	sl, [sp, #28]
 8109b9e:	930c      	str	r3, [sp, #48]	; 0x30
 8109ba0:	e78d      	b.n	8109abe <_dtoa_r+0x41e>
 8109ba2:	9900      	ldr	r1, [sp, #0]
 8109ba4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8109ba6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8109ba8:	4b4e      	ldr	r3, [pc, #312]	; (8109ce4 <_dtoa_r+0x644>)
 8109baa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8109bae:	4401      	add	r1, r0
 8109bb0:	9102      	str	r1, [sp, #8]
 8109bb2:	9908      	ldr	r1, [sp, #32]
 8109bb4:	eeb0 8a47 	vmov.f32	s16, s14
 8109bb8:	eef0 8a67 	vmov.f32	s17, s15
 8109bbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8109bc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8109bc4:	2900      	cmp	r1, #0
 8109bc6:	d045      	beq.n	8109c54 <_dtoa_r+0x5b4>
 8109bc8:	494c      	ldr	r1, [pc, #304]	; (8109cfc <_dtoa_r+0x65c>)
 8109bca:	2000      	movs	r0, #0
 8109bcc:	f7f6 fec6 	bl	810095c <__aeabi_ddiv>
 8109bd0:	ec53 2b18 	vmov	r2, r3, d8
 8109bd4:	f7f6 fbe0 	bl	8100398 <__aeabi_dsub>
 8109bd8:	9d00      	ldr	r5, [sp, #0]
 8109bda:	ec41 0b18 	vmov	d8, r0, r1
 8109bde:	4639      	mov	r1, r7
 8109be0:	4630      	mov	r0, r6
 8109be2:	f7f7 f841 	bl	8100c68 <__aeabi_d2iz>
 8109be6:	900c      	str	r0, [sp, #48]	; 0x30
 8109be8:	f7f6 fd24 	bl	8100634 <__aeabi_i2d>
 8109bec:	4602      	mov	r2, r0
 8109bee:	460b      	mov	r3, r1
 8109bf0:	4630      	mov	r0, r6
 8109bf2:	4639      	mov	r1, r7
 8109bf4:	f7f6 fbd0 	bl	8100398 <__aeabi_dsub>
 8109bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109bfa:	3330      	adds	r3, #48	; 0x30
 8109bfc:	f805 3b01 	strb.w	r3, [r5], #1
 8109c00:	ec53 2b18 	vmov	r2, r3, d8
 8109c04:	4606      	mov	r6, r0
 8109c06:	460f      	mov	r7, r1
 8109c08:	f7f6 fff0 	bl	8100bec <__aeabi_dcmplt>
 8109c0c:	2800      	cmp	r0, #0
 8109c0e:	d165      	bne.n	8109cdc <_dtoa_r+0x63c>
 8109c10:	4632      	mov	r2, r6
 8109c12:	463b      	mov	r3, r7
 8109c14:	4935      	ldr	r1, [pc, #212]	; (8109cec <_dtoa_r+0x64c>)
 8109c16:	2000      	movs	r0, #0
 8109c18:	f7f6 fbbe 	bl	8100398 <__aeabi_dsub>
 8109c1c:	ec53 2b18 	vmov	r2, r3, d8
 8109c20:	f7f6 ffe4 	bl	8100bec <__aeabi_dcmplt>
 8109c24:	2800      	cmp	r0, #0
 8109c26:	f040 80b9 	bne.w	8109d9c <_dtoa_r+0x6fc>
 8109c2a:	9b02      	ldr	r3, [sp, #8]
 8109c2c:	429d      	cmp	r5, r3
 8109c2e:	f43f af75 	beq.w	8109b1c <_dtoa_r+0x47c>
 8109c32:	4b2f      	ldr	r3, [pc, #188]	; (8109cf0 <_dtoa_r+0x650>)
 8109c34:	ec51 0b18 	vmov	r0, r1, d8
 8109c38:	2200      	movs	r2, #0
 8109c3a:	f7f6 fd65 	bl	8100708 <__aeabi_dmul>
 8109c3e:	4b2c      	ldr	r3, [pc, #176]	; (8109cf0 <_dtoa_r+0x650>)
 8109c40:	ec41 0b18 	vmov	d8, r0, r1
 8109c44:	2200      	movs	r2, #0
 8109c46:	4630      	mov	r0, r6
 8109c48:	4639      	mov	r1, r7
 8109c4a:	f7f6 fd5d 	bl	8100708 <__aeabi_dmul>
 8109c4e:	4606      	mov	r6, r0
 8109c50:	460f      	mov	r7, r1
 8109c52:	e7c4      	b.n	8109bde <_dtoa_r+0x53e>
 8109c54:	ec51 0b17 	vmov	r0, r1, d7
 8109c58:	f7f6 fd56 	bl	8100708 <__aeabi_dmul>
 8109c5c:	9b02      	ldr	r3, [sp, #8]
 8109c5e:	9d00      	ldr	r5, [sp, #0]
 8109c60:	930c      	str	r3, [sp, #48]	; 0x30
 8109c62:	ec41 0b18 	vmov	d8, r0, r1
 8109c66:	4639      	mov	r1, r7
 8109c68:	4630      	mov	r0, r6
 8109c6a:	f7f6 fffd 	bl	8100c68 <__aeabi_d2iz>
 8109c6e:	9011      	str	r0, [sp, #68]	; 0x44
 8109c70:	f7f6 fce0 	bl	8100634 <__aeabi_i2d>
 8109c74:	4602      	mov	r2, r0
 8109c76:	460b      	mov	r3, r1
 8109c78:	4630      	mov	r0, r6
 8109c7a:	4639      	mov	r1, r7
 8109c7c:	f7f6 fb8c 	bl	8100398 <__aeabi_dsub>
 8109c80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8109c82:	3330      	adds	r3, #48	; 0x30
 8109c84:	f805 3b01 	strb.w	r3, [r5], #1
 8109c88:	9b02      	ldr	r3, [sp, #8]
 8109c8a:	429d      	cmp	r5, r3
 8109c8c:	4606      	mov	r6, r0
 8109c8e:	460f      	mov	r7, r1
 8109c90:	f04f 0200 	mov.w	r2, #0
 8109c94:	d134      	bne.n	8109d00 <_dtoa_r+0x660>
 8109c96:	4b19      	ldr	r3, [pc, #100]	; (8109cfc <_dtoa_r+0x65c>)
 8109c98:	ec51 0b18 	vmov	r0, r1, d8
 8109c9c:	f7f6 fb7e 	bl	810039c <__adddf3>
 8109ca0:	4602      	mov	r2, r0
 8109ca2:	460b      	mov	r3, r1
 8109ca4:	4630      	mov	r0, r6
 8109ca6:	4639      	mov	r1, r7
 8109ca8:	f7f6 ffbe 	bl	8100c28 <__aeabi_dcmpgt>
 8109cac:	2800      	cmp	r0, #0
 8109cae:	d175      	bne.n	8109d9c <_dtoa_r+0x6fc>
 8109cb0:	ec53 2b18 	vmov	r2, r3, d8
 8109cb4:	4911      	ldr	r1, [pc, #68]	; (8109cfc <_dtoa_r+0x65c>)
 8109cb6:	2000      	movs	r0, #0
 8109cb8:	f7f6 fb6e 	bl	8100398 <__aeabi_dsub>
 8109cbc:	4602      	mov	r2, r0
 8109cbe:	460b      	mov	r3, r1
 8109cc0:	4630      	mov	r0, r6
 8109cc2:	4639      	mov	r1, r7
 8109cc4:	f7f6 ff92 	bl	8100bec <__aeabi_dcmplt>
 8109cc8:	2800      	cmp	r0, #0
 8109cca:	f43f af27 	beq.w	8109b1c <_dtoa_r+0x47c>
 8109cce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8109cd0:	1e6b      	subs	r3, r5, #1
 8109cd2:	930c      	str	r3, [sp, #48]	; 0x30
 8109cd4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8109cd8:	2b30      	cmp	r3, #48	; 0x30
 8109cda:	d0f8      	beq.n	8109cce <_dtoa_r+0x62e>
 8109cdc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8109ce0:	e04a      	b.n	8109d78 <_dtoa_r+0x6d8>
 8109ce2:	bf00      	nop
 8109ce4:	0810d7c0 	.word	0x0810d7c0
 8109ce8:	0810d798 	.word	0x0810d798
 8109cec:	3ff00000 	.word	0x3ff00000
 8109cf0:	40240000 	.word	0x40240000
 8109cf4:	401c0000 	.word	0x401c0000
 8109cf8:	40140000 	.word	0x40140000
 8109cfc:	3fe00000 	.word	0x3fe00000
 8109d00:	4baf      	ldr	r3, [pc, #700]	; (8109fc0 <_dtoa_r+0x920>)
 8109d02:	f7f6 fd01 	bl	8100708 <__aeabi_dmul>
 8109d06:	4606      	mov	r6, r0
 8109d08:	460f      	mov	r7, r1
 8109d0a:	e7ac      	b.n	8109c66 <_dtoa_r+0x5c6>
 8109d0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8109d10:	9d00      	ldr	r5, [sp, #0]
 8109d12:	4642      	mov	r2, r8
 8109d14:	464b      	mov	r3, r9
 8109d16:	4630      	mov	r0, r6
 8109d18:	4639      	mov	r1, r7
 8109d1a:	f7f6 fe1f 	bl	810095c <__aeabi_ddiv>
 8109d1e:	f7f6 ffa3 	bl	8100c68 <__aeabi_d2iz>
 8109d22:	9002      	str	r0, [sp, #8]
 8109d24:	f7f6 fc86 	bl	8100634 <__aeabi_i2d>
 8109d28:	4642      	mov	r2, r8
 8109d2a:	464b      	mov	r3, r9
 8109d2c:	f7f6 fcec 	bl	8100708 <__aeabi_dmul>
 8109d30:	4602      	mov	r2, r0
 8109d32:	460b      	mov	r3, r1
 8109d34:	4630      	mov	r0, r6
 8109d36:	4639      	mov	r1, r7
 8109d38:	f7f6 fb2e 	bl	8100398 <__aeabi_dsub>
 8109d3c:	9e02      	ldr	r6, [sp, #8]
 8109d3e:	9f01      	ldr	r7, [sp, #4]
 8109d40:	3630      	adds	r6, #48	; 0x30
 8109d42:	f805 6b01 	strb.w	r6, [r5], #1
 8109d46:	9e00      	ldr	r6, [sp, #0]
 8109d48:	1bae      	subs	r6, r5, r6
 8109d4a:	42b7      	cmp	r7, r6
 8109d4c:	4602      	mov	r2, r0
 8109d4e:	460b      	mov	r3, r1
 8109d50:	d137      	bne.n	8109dc2 <_dtoa_r+0x722>
 8109d52:	f7f6 fb23 	bl	810039c <__adddf3>
 8109d56:	4642      	mov	r2, r8
 8109d58:	464b      	mov	r3, r9
 8109d5a:	4606      	mov	r6, r0
 8109d5c:	460f      	mov	r7, r1
 8109d5e:	f7f6 ff63 	bl	8100c28 <__aeabi_dcmpgt>
 8109d62:	b9c8      	cbnz	r0, 8109d98 <_dtoa_r+0x6f8>
 8109d64:	4642      	mov	r2, r8
 8109d66:	464b      	mov	r3, r9
 8109d68:	4630      	mov	r0, r6
 8109d6a:	4639      	mov	r1, r7
 8109d6c:	f7f6 ff34 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d70:	b110      	cbz	r0, 8109d78 <_dtoa_r+0x6d8>
 8109d72:	9b02      	ldr	r3, [sp, #8]
 8109d74:	07d9      	lsls	r1, r3, #31
 8109d76:	d40f      	bmi.n	8109d98 <_dtoa_r+0x6f8>
 8109d78:	4620      	mov	r0, r4
 8109d7a:	4659      	mov	r1, fp
 8109d7c:	f000 feda 	bl	810ab34 <_Bfree>
 8109d80:	2300      	movs	r3, #0
 8109d82:	702b      	strb	r3, [r5, #0]
 8109d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109d86:	f10a 0001 	add.w	r0, sl, #1
 8109d8a:	6018      	str	r0, [r3, #0]
 8109d8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8109d8e:	2b00      	cmp	r3, #0
 8109d90:	f43f acd8 	beq.w	8109744 <_dtoa_r+0xa4>
 8109d94:	601d      	str	r5, [r3, #0]
 8109d96:	e4d5      	b.n	8109744 <_dtoa_r+0xa4>
 8109d98:	f8cd a01c 	str.w	sl, [sp, #28]
 8109d9c:	462b      	mov	r3, r5
 8109d9e:	461d      	mov	r5, r3
 8109da0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8109da4:	2a39      	cmp	r2, #57	; 0x39
 8109da6:	d108      	bne.n	8109dba <_dtoa_r+0x71a>
 8109da8:	9a00      	ldr	r2, [sp, #0]
 8109daa:	429a      	cmp	r2, r3
 8109dac:	d1f7      	bne.n	8109d9e <_dtoa_r+0x6fe>
 8109dae:	9a07      	ldr	r2, [sp, #28]
 8109db0:	9900      	ldr	r1, [sp, #0]
 8109db2:	3201      	adds	r2, #1
 8109db4:	9207      	str	r2, [sp, #28]
 8109db6:	2230      	movs	r2, #48	; 0x30
 8109db8:	700a      	strb	r2, [r1, #0]
 8109dba:	781a      	ldrb	r2, [r3, #0]
 8109dbc:	3201      	adds	r2, #1
 8109dbe:	701a      	strb	r2, [r3, #0]
 8109dc0:	e78c      	b.n	8109cdc <_dtoa_r+0x63c>
 8109dc2:	4b7f      	ldr	r3, [pc, #508]	; (8109fc0 <_dtoa_r+0x920>)
 8109dc4:	2200      	movs	r2, #0
 8109dc6:	f7f6 fc9f 	bl	8100708 <__aeabi_dmul>
 8109dca:	2200      	movs	r2, #0
 8109dcc:	2300      	movs	r3, #0
 8109dce:	4606      	mov	r6, r0
 8109dd0:	460f      	mov	r7, r1
 8109dd2:	f7f6 ff01 	bl	8100bd8 <__aeabi_dcmpeq>
 8109dd6:	2800      	cmp	r0, #0
 8109dd8:	d09b      	beq.n	8109d12 <_dtoa_r+0x672>
 8109dda:	e7cd      	b.n	8109d78 <_dtoa_r+0x6d8>
 8109ddc:	9a08      	ldr	r2, [sp, #32]
 8109dde:	2a00      	cmp	r2, #0
 8109de0:	f000 80c4 	beq.w	8109f6c <_dtoa_r+0x8cc>
 8109de4:	9a05      	ldr	r2, [sp, #20]
 8109de6:	2a01      	cmp	r2, #1
 8109de8:	f300 80a8 	bgt.w	8109f3c <_dtoa_r+0x89c>
 8109dec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8109dee:	2a00      	cmp	r2, #0
 8109df0:	f000 80a0 	beq.w	8109f34 <_dtoa_r+0x894>
 8109df4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8109df8:	9e06      	ldr	r6, [sp, #24]
 8109dfa:	4645      	mov	r5, r8
 8109dfc:	9a04      	ldr	r2, [sp, #16]
 8109dfe:	2101      	movs	r1, #1
 8109e00:	441a      	add	r2, r3
 8109e02:	4620      	mov	r0, r4
 8109e04:	4498      	add	r8, r3
 8109e06:	9204      	str	r2, [sp, #16]
 8109e08:	f000 ff9a 	bl	810ad40 <__i2b>
 8109e0c:	4607      	mov	r7, r0
 8109e0e:	2d00      	cmp	r5, #0
 8109e10:	dd0b      	ble.n	8109e2a <_dtoa_r+0x78a>
 8109e12:	9b04      	ldr	r3, [sp, #16]
 8109e14:	2b00      	cmp	r3, #0
 8109e16:	dd08      	ble.n	8109e2a <_dtoa_r+0x78a>
 8109e18:	42ab      	cmp	r3, r5
 8109e1a:	9a04      	ldr	r2, [sp, #16]
 8109e1c:	bfa8      	it	ge
 8109e1e:	462b      	movge	r3, r5
 8109e20:	eba8 0803 	sub.w	r8, r8, r3
 8109e24:	1aed      	subs	r5, r5, r3
 8109e26:	1ad3      	subs	r3, r2, r3
 8109e28:	9304      	str	r3, [sp, #16]
 8109e2a:	9b06      	ldr	r3, [sp, #24]
 8109e2c:	b1fb      	cbz	r3, 8109e6e <_dtoa_r+0x7ce>
 8109e2e:	9b08      	ldr	r3, [sp, #32]
 8109e30:	2b00      	cmp	r3, #0
 8109e32:	f000 809f 	beq.w	8109f74 <_dtoa_r+0x8d4>
 8109e36:	2e00      	cmp	r6, #0
 8109e38:	dd11      	ble.n	8109e5e <_dtoa_r+0x7be>
 8109e3a:	4639      	mov	r1, r7
 8109e3c:	4632      	mov	r2, r6
 8109e3e:	4620      	mov	r0, r4
 8109e40:	f001 f83a 	bl	810aeb8 <__pow5mult>
 8109e44:	465a      	mov	r2, fp
 8109e46:	4601      	mov	r1, r0
 8109e48:	4607      	mov	r7, r0
 8109e4a:	4620      	mov	r0, r4
 8109e4c:	f000 ff8e 	bl	810ad6c <__multiply>
 8109e50:	4659      	mov	r1, fp
 8109e52:	9007      	str	r0, [sp, #28]
 8109e54:	4620      	mov	r0, r4
 8109e56:	f000 fe6d 	bl	810ab34 <_Bfree>
 8109e5a:	9b07      	ldr	r3, [sp, #28]
 8109e5c:	469b      	mov	fp, r3
 8109e5e:	9b06      	ldr	r3, [sp, #24]
 8109e60:	1b9a      	subs	r2, r3, r6
 8109e62:	d004      	beq.n	8109e6e <_dtoa_r+0x7ce>
 8109e64:	4659      	mov	r1, fp
 8109e66:	4620      	mov	r0, r4
 8109e68:	f001 f826 	bl	810aeb8 <__pow5mult>
 8109e6c:	4683      	mov	fp, r0
 8109e6e:	2101      	movs	r1, #1
 8109e70:	4620      	mov	r0, r4
 8109e72:	f000 ff65 	bl	810ad40 <__i2b>
 8109e76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109e78:	2b00      	cmp	r3, #0
 8109e7a:	4606      	mov	r6, r0
 8109e7c:	dd7c      	ble.n	8109f78 <_dtoa_r+0x8d8>
 8109e7e:	461a      	mov	r2, r3
 8109e80:	4601      	mov	r1, r0
 8109e82:	4620      	mov	r0, r4
 8109e84:	f001 f818 	bl	810aeb8 <__pow5mult>
 8109e88:	9b05      	ldr	r3, [sp, #20]
 8109e8a:	2b01      	cmp	r3, #1
 8109e8c:	4606      	mov	r6, r0
 8109e8e:	dd76      	ble.n	8109f7e <_dtoa_r+0x8de>
 8109e90:	2300      	movs	r3, #0
 8109e92:	9306      	str	r3, [sp, #24]
 8109e94:	6933      	ldr	r3, [r6, #16]
 8109e96:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8109e9a:	6918      	ldr	r0, [r3, #16]
 8109e9c:	f000 ff00 	bl	810aca0 <__hi0bits>
 8109ea0:	f1c0 0020 	rsb	r0, r0, #32
 8109ea4:	9b04      	ldr	r3, [sp, #16]
 8109ea6:	4418      	add	r0, r3
 8109ea8:	f010 001f 	ands.w	r0, r0, #31
 8109eac:	f000 8086 	beq.w	8109fbc <_dtoa_r+0x91c>
 8109eb0:	f1c0 0320 	rsb	r3, r0, #32
 8109eb4:	2b04      	cmp	r3, #4
 8109eb6:	dd7f      	ble.n	8109fb8 <_dtoa_r+0x918>
 8109eb8:	f1c0 001c 	rsb	r0, r0, #28
 8109ebc:	9b04      	ldr	r3, [sp, #16]
 8109ebe:	4403      	add	r3, r0
 8109ec0:	4480      	add	r8, r0
 8109ec2:	4405      	add	r5, r0
 8109ec4:	9304      	str	r3, [sp, #16]
 8109ec6:	f1b8 0f00 	cmp.w	r8, #0
 8109eca:	dd05      	ble.n	8109ed8 <_dtoa_r+0x838>
 8109ecc:	4659      	mov	r1, fp
 8109ece:	4642      	mov	r2, r8
 8109ed0:	4620      	mov	r0, r4
 8109ed2:	f001 f84b 	bl	810af6c <__lshift>
 8109ed6:	4683      	mov	fp, r0
 8109ed8:	9b04      	ldr	r3, [sp, #16]
 8109eda:	2b00      	cmp	r3, #0
 8109edc:	dd05      	ble.n	8109eea <_dtoa_r+0x84a>
 8109ede:	4631      	mov	r1, r6
 8109ee0:	461a      	mov	r2, r3
 8109ee2:	4620      	mov	r0, r4
 8109ee4:	f001 f842 	bl	810af6c <__lshift>
 8109ee8:	4606      	mov	r6, r0
 8109eea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109eec:	2b00      	cmp	r3, #0
 8109eee:	d069      	beq.n	8109fc4 <_dtoa_r+0x924>
 8109ef0:	4631      	mov	r1, r6
 8109ef2:	4658      	mov	r0, fp
 8109ef4:	f001 f8a6 	bl	810b044 <__mcmp>
 8109ef8:	2800      	cmp	r0, #0
 8109efa:	da63      	bge.n	8109fc4 <_dtoa_r+0x924>
 8109efc:	2300      	movs	r3, #0
 8109efe:	4659      	mov	r1, fp
 8109f00:	220a      	movs	r2, #10
 8109f02:	4620      	mov	r0, r4
 8109f04:	f000 fe38 	bl	810ab78 <__multadd>
 8109f08:	9b08      	ldr	r3, [sp, #32]
 8109f0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8109f0e:	4683      	mov	fp, r0
 8109f10:	2b00      	cmp	r3, #0
 8109f12:	f000 818f 	beq.w	810a234 <_dtoa_r+0xb94>
 8109f16:	4639      	mov	r1, r7
 8109f18:	2300      	movs	r3, #0
 8109f1a:	220a      	movs	r2, #10
 8109f1c:	4620      	mov	r0, r4
 8109f1e:	f000 fe2b 	bl	810ab78 <__multadd>
 8109f22:	f1b9 0f00 	cmp.w	r9, #0
 8109f26:	4607      	mov	r7, r0
 8109f28:	f300 808e 	bgt.w	810a048 <_dtoa_r+0x9a8>
 8109f2c:	9b05      	ldr	r3, [sp, #20]
 8109f2e:	2b02      	cmp	r3, #2
 8109f30:	dc50      	bgt.n	8109fd4 <_dtoa_r+0x934>
 8109f32:	e089      	b.n	810a048 <_dtoa_r+0x9a8>
 8109f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8109f36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8109f3a:	e75d      	b.n	8109df8 <_dtoa_r+0x758>
 8109f3c:	9b01      	ldr	r3, [sp, #4]
 8109f3e:	1e5e      	subs	r6, r3, #1
 8109f40:	9b06      	ldr	r3, [sp, #24]
 8109f42:	42b3      	cmp	r3, r6
 8109f44:	bfbf      	itttt	lt
 8109f46:	9b06      	ldrlt	r3, [sp, #24]
 8109f48:	9606      	strlt	r6, [sp, #24]
 8109f4a:	1af2      	sublt	r2, r6, r3
 8109f4c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8109f4e:	bfb6      	itet	lt
 8109f50:	189b      	addlt	r3, r3, r2
 8109f52:	1b9e      	subge	r6, r3, r6
 8109f54:	930d      	strlt	r3, [sp, #52]	; 0x34
 8109f56:	9b01      	ldr	r3, [sp, #4]
 8109f58:	bfb8      	it	lt
 8109f5a:	2600      	movlt	r6, #0
 8109f5c:	2b00      	cmp	r3, #0
 8109f5e:	bfb5      	itete	lt
 8109f60:	eba8 0503 	sublt.w	r5, r8, r3
 8109f64:	9b01      	ldrge	r3, [sp, #4]
 8109f66:	2300      	movlt	r3, #0
 8109f68:	4645      	movge	r5, r8
 8109f6a:	e747      	b.n	8109dfc <_dtoa_r+0x75c>
 8109f6c:	9e06      	ldr	r6, [sp, #24]
 8109f6e:	9f08      	ldr	r7, [sp, #32]
 8109f70:	4645      	mov	r5, r8
 8109f72:	e74c      	b.n	8109e0e <_dtoa_r+0x76e>
 8109f74:	9a06      	ldr	r2, [sp, #24]
 8109f76:	e775      	b.n	8109e64 <_dtoa_r+0x7c4>
 8109f78:	9b05      	ldr	r3, [sp, #20]
 8109f7a:	2b01      	cmp	r3, #1
 8109f7c:	dc18      	bgt.n	8109fb0 <_dtoa_r+0x910>
 8109f7e:	9b02      	ldr	r3, [sp, #8]
 8109f80:	b9b3      	cbnz	r3, 8109fb0 <_dtoa_r+0x910>
 8109f82:	9b03      	ldr	r3, [sp, #12]
 8109f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8109f88:	b9a3      	cbnz	r3, 8109fb4 <_dtoa_r+0x914>
 8109f8a:	9b03      	ldr	r3, [sp, #12]
 8109f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8109f90:	0d1b      	lsrs	r3, r3, #20
 8109f92:	051b      	lsls	r3, r3, #20
 8109f94:	b12b      	cbz	r3, 8109fa2 <_dtoa_r+0x902>
 8109f96:	9b04      	ldr	r3, [sp, #16]
 8109f98:	3301      	adds	r3, #1
 8109f9a:	9304      	str	r3, [sp, #16]
 8109f9c:	f108 0801 	add.w	r8, r8, #1
 8109fa0:	2301      	movs	r3, #1
 8109fa2:	9306      	str	r3, [sp, #24]
 8109fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109fa6:	2b00      	cmp	r3, #0
 8109fa8:	f47f af74 	bne.w	8109e94 <_dtoa_r+0x7f4>
 8109fac:	2001      	movs	r0, #1
 8109fae:	e779      	b.n	8109ea4 <_dtoa_r+0x804>
 8109fb0:	2300      	movs	r3, #0
 8109fb2:	e7f6      	b.n	8109fa2 <_dtoa_r+0x902>
 8109fb4:	9b02      	ldr	r3, [sp, #8]
 8109fb6:	e7f4      	b.n	8109fa2 <_dtoa_r+0x902>
 8109fb8:	d085      	beq.n	8109ec6 <_dtoa_r+0x826>
 8109fba:	4618      	mov	r0, r3
 8109fbc:	301c      	adds	r0, #28
 8109fbe:	e77d      	b.n	8109ebc <_dtoa_r+0x81c>
 8109fc0:	40240000 	.word	0x40240000
 8109fc4:	9b01      	ldr	r3, [sp, #4]
 8109fc6:	2b00      	cmp	r3, #0
 8109fc8:	dc38      	bgt.n	810a03c <_dtoa_r+0x99c>
 8109fca:	9b05      	ldr	r3, [sp, #20]
 8109fcc:	2b02      	cmp	r3, #2
 8109fce:	dd35      	ble.n	810a03c <_dtoa_r+0x99c>
 8109fd0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8109fd4:	f1b9 0f00 	cmp.w	r9, #0
 8109fd8:	d10d      	bne.n	8109ff6 <_dtoa_r+0x956>
 8109fda:	4631      	mov	r1, r6
 8109fdc:	464b      	mov	r3, r9
 8109fde:	2205      	movs	r2, #5
 8109fe0:	4620      	mov	r0, r4
 8109fe2:	f000 fdc9 	bl	810ab78 <__multadd>
 8109fe6:	4601      	mov	r1, r0
 8109fe8:	4606      	mov	r6, r0
 8109fea:	4658      	mov	r0, fp
 8109fec:	f001 f82a 	bl	810b044 <__mcmp>
 8109ff0:	2800      	cmp	r0, #0
 8109ff2:	f73f adbd 	bgt.w	8109b70 <_dtoa_r+0x4d0>
 8109ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109ff8:	9d00      	ldr	r5, [sp, #0]
 8109ffa:	ea6f 0a03 	mvn.w	sl, r3
 8109ffe:	f04f 0800 	mov.w	r8, #0
 810a002:	4631      	mov	r1, r6
 810a004:	4620      	mov	r0, r4
 810a006:	f000 fd95 	bl	810ab34 <_Bfree>
 810a00a:	2f00      	cmp	r7, #0
 810a00c:	f43f aeb4 	beq.w	8109d78 <_dtoa_r+0x6d8>
 810a010:	f1b8 0f00 	cmp.w	r8, #0
 810a014:	d005      	beq.n	810a022 <_dtoa_r+0x982>
 810a016:	45b8      	cmp	r8, r7
 810a018:	d003      	beq.n	810a022 <_dtoa_r+0x982>
 810a01a:	4641      	mov	r1, r8
 810a01c:	4620      	mov	r0, r4
 810a01e:	f000 fd89 	bl	810ab34 <_Bfree>
 810a022:	4639      	mov	r1, r7
 810a024:	4620      	mov	r0, r4
 810a026:	f000 fd85 	bl	810ab34 <_Bfree>
 810a02a:	e6a5      	b.n	8109d78 <_dtoa_r+0x6d8>
 810a02c:	2600      	movs	r6, #0
 810a02e:	4637      	mov	r7, r6
 810a030:	e7e1      	b.n	8109ff6 <_dtoa_r+0x956>
 810a032:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 810a034:	f8dd a01c 	ldr.w	sl, [sp, #28]
 810a038:	4637      	mov	r7, r6
 810a03a:	e599      	b.n	8109b70 <_dtoa_r+0x4d0>
 810a03c:	9b08      	ldr	r3, [sp, #32]
 810a03e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 810a042:	2b00      	cmp	r3, #0
 810a044:	f000 80fd 	beq.w	810a242 <_dtoa_r+0xba2>
 810a048:	2d00      	cmp	r5, #0
 810a04a:	dd05      	ble.n	810a058 <_dtoa_r+0x9b8>
 810a04c:	4639      	mov	r1, r7
 810a04e:	462a      	mov	r2, r5
 810a050:	4620      	mov	r0, r4
 810a052:	f000 ff8b 	bl	810af6c <__lshift>
 810a056:	4607      	mov	r7, r0
 810a058:	9b06      	ldr	r3, [sp, #24]
 810a05a:	2b00      	cmp	r3, #0
 810a05c:	d05c      	beq.n	810a118 <_dtoa_r+0xa78>
 810a05e:	6879      	ldr	r1, [r7, #4]
 810a060:	4620      	mov	r0, r4
 810a062:	f000 fd27 	bl	810aab4 <_Balloc>
 810a066:	4605      	mov	r5, r0
 810a068:	b928      	cbnz	r0, 810a076 <_dtoa_r+0x9d6>
 810a06a:	4b80      	ldr	r3, [pc, #512]	; (810a26c <_dtoa_r+0xbcc>)
 810a06c:	4602      	mov	r2, r0
 810a06e:	f240 21ea 	movw	r1, #746	; 0x2ea
 810a072:	f7ff bb2e 	b.w	81096d2 <_dtoa_r+0x32>
 810a076:	693a      	ldr	r2, [r7, #16]
 810a078:	3202      	adds	r2, #2
 810a07a:	0092      	lsls	r2, r2, #2
 810a07c:	f107 010c 	add.w	r1, r7, #12
 810a080:	300c      	adds	r0, #12
 810a082:	f000 fcfd 	bl	810aa80 <memcpy>
 810a086:	2201      	movs	r2, #1
 810a088:	4629      	mov	r1, r5
 810a08a:	4620      	mov	r0, r4
 810a08c:	f000 ff6e 	bl	810af6c <__lshift>
 810a090:	9b00      	ldr	r3, [sp, #0]
 810a092:	3301      	adds	r3, #1
 810a094:	9301      	str	r3, [sp, #4]
 810a096:	9b00      	ldr	r3, [sp, #0]
 810a098:	444b      	add	r3, r9
 810a09a:	9307      	str	r3, [sp, #28]
 810a09c:	9b02      	ldr	r3, [sp, #8]
 810a09e:	f003 0301 	and.w	r3, r3, #1
 810a0a2:	46b8      	mov	r8, r7
 810a0a4:	9306      	str	r3, [sp, #24]
 810a0a6:	4607      	mov	r7, r0
 810a0a8:	9b01      	ldr	r3, [sp, #4]
 810a0aa:	4631      	mov	r1, r6
 810a0ac:	3b01      	subs	r3, #1
 810a0ae:	4658      	mov	r0, fp
 810a0b0:	9302      	str	r3, [sp, #8]
 810a0b2:	f7ff fa69 	bl	8109588 <quorem>
 810a0b6:	4603      	mov	r3, r0
 810a0b8:	3330      	adds	r3, #48	; 0x30
 810a0ba:	9004      	str	r0, [sp, #16]
 810a0bc:	4641      	mov	r1, r8
 810a0be:	4658      	mov	r0, fp
 810a0c0:	9308      	str	r3, [sp, #32]
 810a0c2:	f000 ffbf 	bl	810b044 <__mcmp>
 810a0c6:	463a      	mov	r2, r7
 810a0c8:	4681      	mov	r9, r0
 810a0ca:	4631      	mov	r1, r6
 810a0cc:	4620      	mov	r0, r4
 810a0ce:	f000 ffd5 	bl	810b07c <__mdiff>
 810a0d2:	68c2      	ldr	r2, [r0, #12]
 810a0d4:	9b08      	ldr	r3, [sp, #32]
 810a0d6:	4605      	mov	r5, r0
 810a0d8:	bb02      	cbnz	r2, 810a11c <_dtoa_r+0xa7c>
 810a0da:	4601      	mov	r1, r0
 810a0dc:	4658      	mov	r0, fp
 810a0de:	f000 ffb1 	bl	810b044 <__mcmp>
 810a0e2:	9b08      	ldr	r3, [sp, #32]
 810a0e4:	4602      	mov	r2, r0
 810a0e6:	4629      	mov	r1, r5
 810a0e8:	4620      	mov	r0, r4
 810a0ea:	e9cd 3208 	strd	r3, r2, [sp, #32]
 810a0ee:	f000 fd21 	bl	810ab34 <_Bfree>
 810a0f2:	9b05      	ldr	r3, [sp, #20]
 810a0f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a0f6:	9d01      	ldr	r5, [sp, #4]
 810a0f8:	ea43 0102 	orr.w	r1, r3, r2
 810a0fc:	9b06      	ldr	r3, [sp, #24]
 810a0fe:	430b      	orrs	r3, r1
 810a100:	9b08      	ldr	r3, [sp, #32]
 810a102:	d10d      	bne.n	810a120 <_dtoa_r+0xa80>
 810a104:	2b39      	cmp	r3, #57	; 0x39
 810a106:	d029      	beq.n	810a15c <_dtoa_r+0xabc>
 810a108:	f1b9 0f00 	cmp.w	r9, #0
 810a10c:	dd01      	ble.n	810a112 <_dtoa_r+0xa72>
 810a10e:	9b04      	ldr	r3, [sp, #16]
 810a110:	3331      	adds	r3, #49	; 0x31
 810a112:	9a02      	ldr	r2, [sp, #8]
 810a114:	7013      	strb	r3, [r2, #0]
 810a116:	e774      	b.n	810a002 <_dtoa_r+0x962>
 810a118:	4638      	mov	r0, r7
 810a11a:	e7b9      	b.n	810a090 <_dtoa_r+0x9f0>
 810a11c:	2201      	movs	r2, #1
 810a11e:	e7e2      	b.n	810a0e6 <_dtoa_r+0xa46>
 810a120:	f1b9 0f00 	cmp.w	r9, #0
 810a124:	db06      	blt.n	810a134 <_dtoa_r+0xa94>
 810a126:	9905      	ldr	r1, [sp, #20]
 810a128:	ea41 0909 	orr.w	r9, r1, r9
 810a12c:	9906      	ldr	r1, [sp, #24]
 810a12e:	ea59 0101 	orrs.w	r1, r9, r1
 810a132:	d120      	bne.n	810a176 <_dtoa_r+0xad6>
 810a134:	2a00      	cmp	r2, #0
 810a136:	ddec      	ble.n	810a112 <_dtoa_r+0xa72>
 810a138:	4659      	mov	r1, fp
 810a13a:	2201      	movs	r2, #1
 810a13c:	4620      	mov	r0, r4
 810a13e:	9301      	str	r3, [sp, #4]
 810a140:	f000 ff14 	bl	810af6c <__lshift>
 810a144:	4631      	mov	r1, r6
 810a146:	4683      	mov	fp, r0
 810a148:	f000 ff7c 	bl	810b044 <__mcmp>
 810a14c:	2800      	cmp	r0, #0
 810a14e:	9b01      	ldr	r3, [sp, #4]
 810a150:	dc02      	bgt.n	810a158 <_dtoa_r+0xab8>
 810a152:	d1de      	bne.n	810a112 <_dtoa_r+0xa72>
 810a154:	07da      	lsls	r2, r3, #31
 810a156:	d5dc      	bpl.n	810a112 <_dtoa_r+0xa72>
 810a158:	2b39      	cmp	r3, #57	; 0x39
 810a15a:	d1d8      	bne.n	810a10e <_dtoa_r+0xa6e>
 810a15c:	9a02      	ldr	r2, [sp, #8]
 810a15e:	2339      	movs	r3, #57	; 0x39
 810a160:	7013      	strb	r3, [r2, #0]
 810a162:	462b      	mov	r3, r5
 810a164:	461d      	mov	r5, r3
 810a166:	3b01      	subs	r3, #1
 810a168:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810a16c:	2a39      	cmp	r2, #57	; 0x39
 810a16e:	d050      	beq.n	810a212 <_dtoa_r+0xb72>
 810a170:	3201      	adds	r2, #1
 810a172:	701a      	strb	r2, [r3, #0]
 810a174:	e745      	b.n	810a002 <_dtoa_r+0x962>
 810a176:	2a00      	cmp	r2, #0
 810a178:	dd03      	ble.n	810a182 <_dtoa_r+0xae2>
 810a17a:	2b39      	cmp	r3, #57	; 0x39
 810a17c:	d0ee      	beq.n	810a15c <_dtoa_r+0xabc>
 810a17e:	3301      	adds	r3, #1
 810a180:	e7c7      	b.n	810a112 <_dtoa_r+0xa72>
 810a182:	9a01      	ldr	r2, [sp, #4]
 810a184:	9907      	ldr	r1, [sp, #28]
 810a186:	f802 3c01 	strb.w	r3, [r2, #-1]
 810a18a:	428a      	cmp	r2, r1
 810a18c:	d02a      	beq.n	810a1e4 <_dtoa_r+0xb44>
 810a18e:	4659      	mov	r1, fp
 810a190:	2300      	movs	r3, #0
 810a192:	220a      	movs	r2, #10
 810a194:	4620      	mov	r0, r4
 810a196:	f000 fcef 	bl	810ab78 <__multadd>
 810a19a:	45b8      	cmp	r8, r7
 810a19c:	4683      	mov	fp, r0
 810a19e:	f04f 0300 	mov.w	r3, #0
 810a1a2:	f04f 020a 	mov.w	r2, #10
 810a1a6:	4641      	mov	r1, r8
 810a1a8:	4620      	mov	r0, r4
 810a1aa:	d107      	bne.n	810a1bc <_dtoa_r+0xb1c>
 810a1ac:	f000 fce4 	bl	810ab78 <__multadd>
 810a1b0:	4680      	mov	r8, r0
 810a1b2:	4607      	mov	r7, r0
 810a1b4:	9b01      	ldr	r3, [sp, #4]
 810a1b6:	3301      	adds	r3, #1
 810a1b8:	9301      	str	r3, [sp, #4]
 810a1ba:	e775      	b.n	810a0a8 <_dtoa_r+0xa08>
 810a1bc:	f000 fcdc 	bl	810ab78 <__multadd>
 810a1c0:	4639      	mov	r1, r7
 810a1c2:	4680      	mov	r8, r0
 810a1c4:	2300      	movs	r3, #0
 810a1c6:	220a      	movs	r2, #10
 810a1c8:	4620      	mov	r0, r4
 810a1ca:	f000 fcd5 	bl	810ab78 <__multadd>
 810a1ce:	4607      	mov	r7, r0
 810a1d0:	e7f0      	b.n	810a1b4 <_dtoa_r+0xb14>
 810a1d2:	f1b9 0f00 	cmp.w	r9, #0
 810a1d6:	9a00      	ldr	r2, [sp, #0]
 810a1d8:	bfcc      	ite	gt
 810a1da:	464d      	movgt	r5, r9
 810a1dc:	2501      	movle	r5, #1
 810a1de:	4415      	add	r5, r2
 810a1e0:	f04f 0800 	mov.w	r8, #0
 810a1e4:	4659      	mov	r1, fp
 810a1e6:	2201      	movs	r2, #1
 810a1e8:	4620      	mov	r0, r4
 810a1ea:	9301      	str	r3, [sp, #4]
 810a1ec:	f000 febe 	bl	810af6c <__lshift>
 810a1f0:	4631      	mov	r1, r6
 810a1f2:	4683      	mov	fp, r0
 810a1f4:	f000 ff26 	bl	810b044 <__mcmp>
 810a1f8:	2800      	cmp	r0, #0
 810a1fa:	dcb2      	bgt.n	810a162 <_dtoa_r+0xac2>
 810a1fc:	d102      	bne.n	810a204 <_dtoa_r+0xb64>
 810a1fe:	9b01      	ldr	r3, [sp, #4]
 810a200:	07db      	lsls	r3, r3, #31
 810a202:	d4ae      	bmi.n	810a162 <_dtoa_r+0xac2>
 810a204:	462b      	mov	r3, r5
 810a206:	461d      	mov	r5, r3
 810a208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810a20c:	2a30      	cmp	r2, #48	; 0x30
 810a20e:	d0fa      	beq.n	810a206 <_dtoa_r+0xb66>
 810a210:	e6f7      	b.n	810a002 <_dtoa_r+0x962>
 810a212:	9a00      	ldr	r2, [sp, #0]
 810a214:	429a      	cmp	r2, r3
 810a216:	d1a5      	bne.n	810a164 <_dtoa_r+0xac4>
 810a218:	f10a 0a01 	add.w	sl, sl, #1
 810a21c:	2331      	movs	r3, #49	; 0x31
 810a21e:	e779      	b.n	810a114 <_dtoa_r+0xa74>
 810a220:	4b13      	ldr	r3, [pc, #76]	; (810a270 <_dtoa_r+0xbd0>)
 810a222:	f7ff baaf 	b.w	8109784 <_dtoa_r+0xe4>
 810a226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810a228:	2b00      	cmp	r3, #0
 810a22a:	f47f aa86 	bne.w	810973a <_dtoa_r+0x9a>
 810a22e:	4b11      	ldr	r3, [pc, #68]	; (810a274 <_dtoa_r+0xbd4>)
 810a230:	f7ff baa8 	b.w	8109784 <_dtoa_r+0xe4>
 810a234:	f1b9 0f00 	cmp.w	r9, #0
 810a238:	dc03      	bgt.n	810a242 <_dtoa_r+0xba2>
 810a23a:	9b05      	ldr	r3, [sp, #20]
 810a23c:	2b02      	cmp	r3, #2
 810a23e:	f73f aec9 	bgt.w	8109fd4 <_dtoa_r+0x934>
 810a242:	9d00      	ldr	r5, [sp, #0]
 810a244:	4631      	mov	r1, r6
 810a246:	4658      	mov	r0, fp
 810a248:	f7ff f99e 	bl	8109588 <quorem>
 810a24c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 810a250:	f805 3b01 	strb.w	r3, [r5], #1
 810a254:	9a00      	ldr	r2, [sp, #0]
 810a256:	1aaa      	subs	r2, r5, r2
 810a258:	4591      	cmp	r9, r2
 810a25a:	ddba      	ble.n	810a1d2 <_dtoa_r+0xb32>
 810a25c:	4659      	mov	r1, fp
 810a25e:	2300      	movs	r3, #0
 810a260:	220a      	movs	r2, #10
 810a262:	4620      	mov	r0, r4
 810a264:	f000 fc88 	bl	810ab78 <__multadd>
 810a268:	4683      	mov	fp, r0
 810a26a:	e7eb      	b.n	810a244 <_dtoa_r+0xba4>
 810a26c:	0810d6a4 	.word	0x0810d6a4
 810a270:	0810d4a0 	.word	0x0810d4a0
 810a274:	0810d621 	.word	0x0810d621

0810a278 <rshift>:
 810a278:	6903      	ldr	r3, [r0, #16]
 810a27a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a27e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a282:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a286:	f100 0414 	add.w	r4, r0, #20
 810a28a:	dd45      	ble.n	810a318 <rshift+0xa0>
 810a28c:	f011 011f 	ands.w	r1, r1, #31
 810a290:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a294:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a298:	d10c      	bne.n	810a2b4 <rshift+0x3c>
 810a29a:	f100 0710 	add.w	r7, r0, #16
 810a29e:	4629      	mov	r1, r5
 810a2a0:	42b1      	cmp	r1, r6
 810a2a2:	d334      	bcc.n	810a30e <rshift+0x96>
 810a2a4:	1a9b      	subs	r3, r3, r2
 810a2a6:	009b      	lsls	r3, r3, #2
 810a2a8:	1eea      	subs	r2, r5, #3
 810a2aa:	4296      	cmp	r6, r2
 810a2ac:	bf38      	it	cc
 810a2ae:	2300      	movcc	r3, #0
 810a2b0:	4423      	add	r3, r4
 810a2b2:	e015      	b.n	810a2e0 <rshift+0x68>
 810a2b4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a2b8:	f1c1 0820 	rsb	r8, r1, #32
 810a2bc:	40cf      	lsrs	r7, r1
 810a2be:	f105 0e04 	add.w	lr, r5, #4
 810a2c2:	46a1      	mov	r9, r4
 810a2c4:	4576      	cmp	r6, lr
 810a2c6:	46f4      	mov	ip, lr
 810a2c8:	d815      	bhi.n	810a2f6 <rshift+0x7e>
 810a2ca:	1a9b      	subs	r3, r3, r2
 810a2cc:	009a      	lsls	r2, r3, #2
 810a2ce:	3a04      	subs	r2, #4
 810a2d0:	3501      	adds	r5, #1
 810a2d2:	42ae      	cmp	r6, r5
 810a2d4:	bf38      	it	cc
 810a2d6:	2200      	movcc	r2, #0
 810a2d8:	18a3      	adds	r3, r4, r2
 810a2da:	50a7      	str	r7, [r4, r2]
 810a2dc:	b107      	cbz	r7, 810a2e0 <rshift+0x68>
 810a2de:	3304      	adds	r3, #4
 810a2e0:	1b1a      	subs	r2, r3, r4
 810a2e2:	42a3      	cmp	r3, r4
 810a2e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a2e8:	bf08      	it	eq
 810a2ea:	2300      	moveq	r3, #0
 810a2ec:	6102      	str	r2, [r0, #16]
 810a2ee:	bf08      	it	eq
 810a2f0:	6143      	streq	r3, [r0, #20]
 810a2f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a2f6:	f8dc c000 	ldr.w	ip, [ip]
 810a2fa:	fa0c fc08 	lsl.w	ip, ip, r8
 810a2fe:	ea4c 0707 	orr.w	r7, ip, r7
 810a302:	f849 7b04 	str.w	r7, [r9], #4
 810a306:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a30a:	40cf      	lsrs	r7, r1
 810a30c:	e7da      	b.n	810a2c4 <rshift+0x4c>
 810a30e:	f851 cb04 	ldr.w	ip, [r1], #4
 810a312:	f847 cf04 	str.w	ip, [r7, #4]!
 810a316:	e7c3      	b.n	810a2a0 <rshift+0x28>
 810a318:	4623      	mov	r3, r4
 810a31a:	e7e1      	b.n	810a2e0 <rshift+0x68>

0810a31c <__hexdig_fun>:
 810a31c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a320:	2b09      	cmp	r3, #9
 810a322:	d802      	bhi.n	810a32a <__hexdig_fun+0xe>
 810a324:	3820      	subs	r0, #32
 810a326:	b2c0      	uxtb	r0, r0
 810a328:	4770      	bx	lr
 810a32a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a32e:	2b05      	cmp	r3, #5
 810a330:	d801      	bhi.n	810a336 <__hexdig_fun+0x1a>
 810a332:	3847      	subs	r0, #71	; 0x47
 810a334:	e7f7      	b.n	810a326 <__hexdig_fun+0xa>
 810a336:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a33a:	2b05      	cmp	r3, #5
 810a33c:	d801      	bhi.n	810a342 <__hexdig_fun+0x26>
 810a33e:	3827      	subs	r0, #39	; 0x27
 810a340:	e7f1      	b.n	810a326 <__hexdig_fun+0xa>
 810a342:	2000      	movs	r0, #0
 810a344:	4770      	bx	lr
	...

0810a348 <__gethex>:
 810a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a34c:	ed2d 8b02 	vpush	{d8}
 810a350:	b089      	sub	sp, #36	; 0x24
 810a352:	ee08 0a10 	vmov	s16, r0
 810a356:	9304      	str	r3, [sp, #16]
 810a358:	4bbc      	ldr	r3, [pc, #752]	; (810a64c <__gethex+0x304>)
 810a35a:	681b      	ldr	r3, [r3, #0]
 810a35c:	9301      	str	r3, [sp, #4]
 810a35e:	4618      	mov	r0, r3
 810a360:	468b      	mov	fp, r1
 810a362:	4690      	mov	r8, r2
 810a364:	f7f5 ffbc 	bl	81002e0 <strlen>
 810a368:	9b01      	ldr	r3, [sp, #4]
 810a36a:	f8db 2000 	ldr.w	r2, [fp]
 810a36e:	4403      	add	r3, r0
 810a370:	4682      	mov	sl, r0
 810a372:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 810a376:	9305      	str	r3, [sp, #20]
 810a378:	1c93      	adds	r3, r2, #2
 810a37a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a37e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a382:	32fe      	adds	r2, #254	; 0xfe
 810a384:	18d1      	adds	r1, r2, r3
 810a386:	461f      	mov	r7, r3
 810a388:	f813 0b01 	ldrb.w	r0, [r3], #1
 810a38c:	9100      	str	r1, [sp, #0]
 810a38e:	2830      	cmp	r0, #48	; 0x30
 810a390:	d0f8      	beq.n	810a384 <__gethex+0x3c>
 810a392:	f7ff ffc3 	bl	810a31c <__hexdig_fun>
 810a396:	4604      	mov	r4, r0
 810a398:	2800      	cmp	r0, #0
 810a39a:	d13a      	bne.n	810a412 <__gethex+0xca>
 810a39c:	9901      	ldr	r1, [sp, #4]
 810a39e:	4652      	mov	r2, sl
 810a3a0:	4638      	mov	r0, r7
 810a3a2:	f001 fb21 	bl	810b9e8 <strncmp>
 810a3a6:	4605      	mov	r5, r0
 810a3a8:	2800      	cmp	r0, #0
 810a3aa:	d168      	bne.n	810a47e <__gethex+0x136>
 810a3ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 810a3b0:	eb07 060a 	add.w	r6, r7, sl
 810a3b4:	f7ff ffb2 	bl	810a31c <__hexdig_fun>
 810a3b8:	2800      	cmp	r0, #0
 810a3ba:	d062      	beq.n	810a482 <__gethex+0x13a>
 810a3bc:	4633      	mov	r3, r6
 810a3be:	7818      	ldrb	r0, [r3, #0]
 810a3c0:	2830      	cmp	r0, #48	; 0x30
 810a3c2:	461f      	mov	r7, r3
 810a3c4:	f103 0301 	add.w	r3, r3, #1
 810a3c8:	d0f9      	beq.n	810a3be <__gethex+0x76>
 810a3ca:	f7ff ffa7 	bl	810a31c <__hexdig_fun>
 810a3ce:	2301      	movs	r3, #1
 810a3d0:	fab0 f480 	clz	r4, r0
 810a3d4:	0964      	lsrs	r4, r4, #5
 810a3d6:	4635      	mov	r5, r6
 810a3d8:	9300      	str	r3, [sp, #0]
 810a3da:	463a      	mov	r2, r7
 810a3dc:	4616      	mov	r6, r2
 810a3de:	3201      	adds	r2, #1
 810a3e0:	7830      	ldrb	r0, [r6, #0]
 810a3e2:	f7ff ff9b 	bl	810a31c <__hexdig_fun>
 810a3e6:	2800      	cmp	r0, #0
 810a3e8:	d1f8      	bne.n	810a3dc <__gethex+0x94>
 810a3ea:	9901      	ldr	r1, [sp, #4]
 810a3ec:	4652      	mov	r2, sl
 810a3ee:	4630      	mov	r0, r6
 810a3f0:	f001 fafa 	bl	810b9e8 <strncmp>
 810a3f4:	b980      	cbnz	r0, 810a418 <__gethex+0xd0>
 810a3f6:	b94d      	cbnz	r5, 810a40c <__gethex+0xc4>
 810a3f8:	eb06 050a 	add.w	r5, r6, sl
 810a3fc:	462a      	mov	r2, r5
 810a3fe:	4616      	mov	r6, r2
 810a400:	3201      	adds	r2, #1
 810a402:	7830      	ldrb	r0, [r6, #0]
 810a404:	f7ff ff8a 	bl	810a31c <__hexdig_fun>
 810a408:	2800      	cmp	r0, #0
 810a40a:	d1f8      	bne.n	810a3fe <__gethex+0xb6>
 810a40c:	1bad      	subs	r5, r5, r6
 810a40e:	00ad      	lsls	r5, r5, #2
 810a410:	e004      	b.n	810a41c <__gethex+0xd4>
 810a412:	2400      	movs	r4, #0
 810a414:	4625      	mov	r5, r4
 810a416:	e7e0      	b.n	810a3da <__gethex+0x92>
 810a418:	2d00      	cmp	r5, #0
 810a41a:	d1f7      	bne.n	810a40c <__gethex+0xc4>
 810a41c:	7833      	ldrb	r3, [r6, #0]
 810a41e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a422:	2b50      	cmp	r3, #80	; 0x50
 810a424:	d13b      	bne.n	810a49e <__gethex+0x156>
 810a426:	7873      	ldrb	r3, [r6, #1]
 810a428:	2b2b      	cmp	r3, #43	; 0x2b
 810a42a:	d02c      	beq.n	810a486 <__gethex+0x13e>
 810a42c:	2b2d      	cmp	r3, #45	; 0x2d
 810a42e:	d02e      	beq.n	810a48e <__gethex+0x146>
 810a430:	1c71      	adds	r1, r6, #1
 810a432:	f04f 0900 	mov.w	r9, #0
 810a436:	7808      	ldrb	r0, [r1, #0]
 810a438:	f7ff ff70 	bl	810a31c <__hexdig_fun>
 810a43c:	1e43      	subs	r3, r0, #1
 810a43e:	b2db      	uxtb	r3, r3
 810a440:	2b18      	cmp	r3, #24
 810a442:	d82c      	bhi.n	810a49e <__gethex+0x156>
 810a444:	f1a0 0210 	sub.w	r2, r0, #16
 810a448:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810a44c:	f7ff ff66 	bl	810a31c <__hexdig_fun>
 810a450:	1e43      	subs	r3, r0, #1
 810a452:	b2db      	uxtb	r3, r3
 810a454:	2b18      	cmp	r3, #24
 810a456:	d91d      	bls.n	810a494 <__gethex+0x14c>
 810a458:	f1b9 0f00 	cmp.w	r9, #0
 810a45c:	d000      	beq.n	810a460 <__gethex+0x118>
 810a45e:	4252      	negs	r2, r2
 810a460:	4415      	add	r5, r2
 810a462:	f8cb 1000 	str.w	r1, [fp]
 810a466:	b1e4      	cbz	r4, 810a4a2 <__gethex+0x15a>
 810a468:	9b00      	ldr	r3, [sp, #0]
 810a46a:	2b00      	cmp	r3, #0
 810a46c:	bf14      	ite	ne
 810a46e:	2700      	movne	r7, #0
 810a470:	2706      	moveq	r7, #6
 810a472:	4638      	mov	r0, r7
 810a474:	b009      	add	sp, #36	; 0x24
 810a476:	ecbd 8b02 	vpop	{d8}
 810a47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a47e:	463e      	mov	r6, r7
 810a480:	4625      	mov	r5, r4
 810a482:	2401      	movs	r4, #1
 810a484:	e7ca      	b.n	810a41c <__gethex+0xd4>
 810a486:	f04f 0900 	mov.w	r9, #0
 810a48a:	1cb1      	adds	r1, r6, #2
 810a48c:	e7d3      	b.n	810a436 <__gethex+0xee>
 810a48e:	f04f 0901 	mov.w	r9, #1
 810a492:	e7fa      	b.n	810a48a <__gethex+0x142>
 810a494:	230a      	movs	r3, #10
 810a496:	fb03 0202 	mla	r2, r3, r2, r0
 810a49a:	3a10      	subs	r2, #16
 810a49c:	e7d4      	b.n	810a448 <__gethex+0x100>
 810a49e:	4631      	mov	r1, r6
 810a4a0:	e7df      	b.n	810a462 <__gethex+0x11a>
 810a4a2:	1bf3      	subs	r3, r6, r7
 810a4a4:	3b01      	subs	r3, #1
 810a4a6:	4621      	mov	r1, r4
 810a4a8:	2b07      	cmp	r3, #7
 810a4aa:	dc0b      	bgt.n	810a4c4 <__gethex+0x17c>
 810a4ac:	ee18 0a10 	vmov	r0, s16
 810a4b0:	f000 fb00 	bl	810aab4 <_Balloc>
 810a4b4:	4604      	mov	r4, r0
 810a4b6:	b940      	cbnz	r0, 810a4ca <__gethex+0x182>
 810a4b8:	4b65      	ldr	r3, [pc, #404]	; (810a650 <__gethex+0x308>)
 810a4ba:	4602      	mov	r2, r0
 810a4bc:	21de      	movs	r1, #222	; 0xde
 810a4be:	4865      	ldr	r0, [pc, #404]	; (810a654 <__gethex+0x30c>)
 810a4c0:	f001 fab2 	bl	810ba28 <__assert_func>
 810a4c4:	3101      	adds	r1, #1
 810a4c6:	105b      	asrs	r3, r3, #1
 810a4c8:	e7ee      	b.n	810a4a8 <__gethex+0x160>
 810a4ca:	f100 0914 	add.w	r9, r0, #20
 810a4ce:	f04f 0b00 	mov.w	fp, #0
 810a4d2:	f1ca 0301 	rsb	r3, sl, #1
 810a4d6:	f8cd 9008 	str.w	r9, [sp, #8]
 810a4da:	f8cd b000 	str.w	fp, [sp]
 810a4de:	9306      	str	r3, [sp, #24]
 810a4e0:	42b7      	cmp	r7, r6
 810a4e2:	d340      	bcc.n	810a566 <__gethex+0x21e>
 810a4e4:	9802      	ldr	r0, [sp, #8]
 810a4e6:	9b00      	ldr	r3, [sp, #0]
 810a4e8:	f840 3b04 	str.w	r3, [r0], #4
 810a4ec:	eba0 0009 	sub.w	r0, r0, r9
 810a4f0:	1080      	asrs	r0, r0, #2
 810a4f2:	0146      	lsls	r6, r0, #5
 810a4f4:	6120      	str	r0, [r4, #16]
 810a4f6:	4618      	mov	r0, r3
 810a4f8:	f000 fbd2 	bl	810aca0 <__hi0bits>
 810a4fc:	1a30      	subs	r0, r6, r0
 810a4fe:	f8d8 6000 	ldr.w	r6, [r8]
 810a502:	42b0      	cmp	r0, r6
 810a504:	dd63      	ble.n	810a5ce <__gethex+0x286>
 810a506:	1b87      	subs	r7, r0, r6
 810a508:	4639      	mov	r1, r7
 810a50a:	4620      	mov	r0, r4
 810a50c:	f000 ff6c 	bl	810b3e8 <__any_on>
 810a510:	4682      	mov	sl, r0
 810a512:	b1a8      	cbz	r0, 810a540 <__gethex+0x1f8>
 810a514:	1e7b      	subs	r3, r7, #1
 810a516:	1159      	asrs	r1, r3, #5
 810a518:	f003 021f 	and.w	r2, r3, #31
 810a51c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 810a520:	f04f 0a01 	mov.w	sl, #1
 810a524:	fa0a f202 	lsl.w	r2, sl, r2
 810a528:	420a      	tst	r2, r1
 810a52a:	d009      	beq.n	810a540 <__gethex+0x1f8>
 810a52c:	4553      	cmp	r3, sl
 810a52e:	dd05      	ble.n	810a53c <__gethex+0x1f4>
 810a530:	1eb9      	subs	r1, r7, #2
 810a532:	4620      	mov	r0, r4
 810a534:	f000 ff58 	bl	810b3e8 <__any_on>
 810a538:	2800      	cmp	r0, #0
 810a53a:	d145      	bne.n	810a5c8 <__gethex+0x280>
 810a53c:	f04f 0a02 	mov.w	sl, #2
 810a540:	4639      	mov	r1, r7
 810a542:	4620      	mov	r0, r4
 810a544:	f7ff fe98 	bl	810a278 <rshift>
 810a548:	443d      	add	r5, r7
 810a54a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a54e:	42ab      	cmp	r3, r5
 810a550:	da4c      	bge.n	810a5ec <__gethex+0x2a4>
 810a552:	ee18 0a10 	vmov	r0, s16
 810a556:	4621      	mov	r1, r4
 810a558:	f000 faec 	bl	810ab34 <_Bfree>
 810a55c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a55e:	2300      	movs	r3, #0
 810a560:	6013      	str	r3, [r2, #0]
 810a562:	27a3      	movs	r7, #163	; 0xa3
 810a564:	e785      	b.n	810a472 <__gethex+0x12a>
 810a566:	1e73      	subs	r3, r6, #1
 810a568:	9a05      	ldr	r2, [sp, #20]
 810a56a:	9303      	str	r3, [sp, #12]
 810a56c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810a570:	4293      	cmp	r3, r2
 810a572:	d019      	beq.n	810a5a8 <__gethex+0x260>
 810a574:	f1bb 0f20 	cmp.w	fp, #32
 810a578:	d107      	bne.n	810a58a <__gethex+0x242>
 810a57a:	9b02      	ldr	r3, [sp, #8]
 810a57c:	9a00      	ldr	r2, [sp, #0]
 810a57e:	f843 2b04 	str.w	r2, [r3], #4
 810a582:	9302      	str	r3, [sp, #8]
 810a584:	2300      	movs	r3, #0
 810a586:	9300      	str	r3, [sp, #0]
 810a588:	469b      	mov	fp, r3
 810a58a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 810a58e:	f7ff fec5 	bl	810a31c <__hexdig_fun>
 810a592:	9b00      	ldr	r3, [sp, #0]
 810a594:	f000 000f 	and.w	r0, r0, #15
 810a598:	fa00 f00b 	lsl.w	r0, r0, fp
 810a59c:	4303      	orrs	r3, r0
 810a59e:	9300      	str	r3, [sp, #0]
 810a5a0:	f10b 0b04 	add.w	fp, fp, #4
 810a5a4:	9b03      	ldr	r3, [sp, #12]
 810a5a6:	e00d      	b.n	810a5c4 <__gethex+0x27c>
 810a5a8:	9b03      	ldr	r3, [sp, #12]
 810a5aa:	9a06      	ldr	r2, [sp, #24]
 810a5ac:	4413      	add	r3, r2
 810a5ae:	42bb      	cmp	r3, r7
 810a5b0:	d3e0      	bcc.n	810a574 <__gethex+0x22c>
 810a5b2:	4618      	mov	r0, r3
 810a5b4:	9901      	ldr	r1, [sp, #4]
 810a5b6:	9307      	str	r3, [sp, #28]
 810a5b8:	4652      	mov	r2, sl
 810a5ba:	f001 fa15 	bl	810b9e8 <strncmp>
 810a5be:	9b07      	ldr	r3, [sp, #28]
 810a5c0:	2800      	cmp	r0, #0
 810a5c2:	d1d7      	bne.n	810a574 <__gethex+0x22c>
 810a5c4:	461e      	mov	r6, r3
 810a5c6:	e78b      	b.n	810a4e0 <__gethex+0x198>
 810a5c8:	f04f 0a03 	mov.w	sl, #3
 810a5cc:	e7b8      	b.n	810a540 <__gethex+0x1f8>
 810a5ce:	da0a      	bge.n	810a5e6 <__gethex+0x29e>
 810a5d0:	1a37      	subs	r7, r6, r0
 810a5d2:	4621      	mov	r1, r4
 810a5d4:	ee18 0a10 	vmov	r0, s16
 810a5d8:	463a      	mov	r2, r7
 810a5da:	f000 fcc7 	bl	810af6c <__lshift>
 810a5de:	1bed      	subs	r5, r5, r7
 810a5e0:	4604      	mov	r4, r0
 810a5e2:	f100 0914 	add.w	r9, r0, #20
 810a5e6:	f04f 0a00 	mov.w	sl, #0
 810a5ea:	e7ae      	b.n	810a54a <__gethex+0x202>
 810a5ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 810a5f0:	42a8      	cmp	r0, r5
 810a5f2:	dd72      	ble.n	810a6da <__gethex+0x392>
 810a5f4:	1b45      	subs	r5, r0, r5
 810a5f6:	42ae      	cmp	r6, r5
 810a5f8:	dc36      	bgt.n	810a668 <__gethex+0x320>
 810a5fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a5fe:	2b02      	cmp	r3, #2
 810a600:	d02a      	beq.n	810a658 <__gethex+0x310>
 810a602:	2b03      	cmp	r3, #3
 810a604:	d02c      	beq.n	810a660 <__gethex+0x318>
 810a606:	2b01      	cmp	r3, #1
 810a608:	d115      	bne.n	810a636 <__gethex+0x2ee>
 810a60a:	42ae      	cmp	r6, r5
 810a60c:	d113      	bne.n	810a636 <__gethex+0x2ee>
 810a60e:	2e01      	cmp	r6, #1
 810a610:	d10b      	bne.n	810a62a <__gethex+0x2e2>
 810a612:	9a04      	ldr	r2, [sp, #16]
 810a614:	f8d8 3004 	ldr.w	r3, [r8, #4]
 810a618:	6013      	str	r3, [r2, #0]
 810a61a:	2301      	movs	r3, #1
 810a61c:	6123      	str	r3, [r4, #16]
 810a61e:	f8c9 3000 	str.w	r3, [r9]
 810a622:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a624:	2762      	movs	r7, #98	; 0x62
 810a626:	601c      	str	r4, [r3, #0]
 810a628:	e723      	b.n	810a472 <__gethex+0x12a>
 810a62a:	1e71      	subs	r1, r6, #1
 810a62c:	4620      	mov	r0, r4
 810a62e:	f000 fedb 	bl	810b3e8 <__any_on>
 810a632:	2800      	cmp	r0, #0
 810a634:	d1ed      	bne.n	810a612 <__gethex+0x2ca>
 810a636:	ee18 0a10 	vmov	r0, s16
 810a63a:	4621      	mov	r1, r4
 810a63c:	f000 fa7a 	bl	810ab34 <_Bfree>
 810a640:	9a14      	ldr	r2, [sp, #80]	; 0x50
 810a642:	2300      	movs	r3, #0
 810a644:	6013      	str	r3, [r2, #0]
 810a646:	2750      	movs	r7, #80	; 0x50
 810a648:	e713      	b.n	810a472 <__gethex+0x12a>
 810a64a:	bf00      	nop
 810a64c:	0810d720 	.word	0x0810d720
 810a650:	0810d6a4 	.word	0x0810d6a4
 810a654:	0810d6b5 	.word	0x0810d6b5
 810a658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a65a:	2b00      	cmp	r3, #0
 810a65c:	d1eb      	bne.n	810a636 <__gethex+0x2ee>
 810a65e:	e7d8      	b.n	810a612 <__gethex+0x2ca>
 810a660:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a662:	2b00      	cmp	r3, #0
 810a664:	d1d5      	bne.n	810a612 <__gethex+0x2ca>
 810a666:	e7e6      	b.n	810a636 <__gethex+0x2ee>
 810a668:	1e6f      	subs	r7, r5, #1
 810a66a:	f1ba 0f00 	cmp.w	sl, #0
 810a66e:	d131      	bne.n	810a6d4 <__gethex+0x38c>
 810a670:	b127      	cbz	r7, 810a67c <__gethex+0x334>
 810a672:	4639      	mov	r1, r7
 810a674:	4620      	mov	r0, r4
 810a676:	f000 feb7 	bl	810b3e8 <__any_on>
 810a67a:	4682      	mov	sl, r0
 810a67c:	117b      	asrs	r3, r7, #5
 810a67e:	2101      	movs	r1, #1
 810a680:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 810a684:	f007 071f 	and.w	r7, r7, #31
 810a688:	fa01 f707 	lsl.w	r7, r1, r7
 810a68c:	421f      	tst	r7, r3
 810a68e:	4629      	mov	r1, r5
 810a690:	4620      	mov	r0, r4
 810a692:	bf18      	it	ne
 810a694:	f04a 0a02 	orrne.w	sl, sl, #2
 810a698:	1b76      	subs	r6, r6, r5
 810a69a:	f7ff fded 	bl	810a278 <rshift>
 810a69e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 810a6a2:	2702      	movs	r7, #2
 810a6a4:	f1ba 0f00 	cmp.w	sl, #0
 810a6a8:	d048      	beq.n	810a73c <__gethex+0x3f4>
 810a6aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 810a6ae:	2b02      	cmp	r3, #2
 810a6b0:	d015      	beq.n	810a6de <__gethex+0x396>
 810a6b2:	2b03      	cmp	r3, #3
 810a6b4:	d017      	beq.n	810a6e6 <__gethex+0x39e>
 810a6b6:	2b01      	cmp	r3, #1
 810a6b8:	d109      	bne.n	810a6ce <__gethex+0x386>
 810a6ba:	f01a 0f02 	tst.w	sl, #2
 810a6be:	d006      	beq.n	810a6ce <__gethex+0x386>
 810a6c0:	f8d9 0000 	ldr.w	r0, [r9]
 810a6c4:	ea4a 0a00 	orr.w	sl, sl, r0
 810a6c8:	f01a 0f01 	tst.w	sl, #1
 810a6cc:	d10e      	bne.n	810a6ec <__gethex+0x3a4>
 810a6ce:	f047 0710 	orr.w	r7, r7, #16
 810a6d2:	e033      	b.n	810a73c <__gethex+0x3f4>
 810a6d4:	f04f 0a01 	mov.w	sl, #1
 810a6d8:	e7d0      	b.n	810a67c <__gethex+0x334>
 810a6da:	2701      	movs	r7, #1
 810a6dc:	e7e2      	b.n	810a6a4 <__gethex+0x35c>
 810a6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a6e0:	f1c3 0301 	rsb	r3, r3, #1
 810a6e4:	9315      	str	r3, [sp, #84]	; 0x54
 810a6e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810a6e8:	2b00      	cmp	r3, #0
 810a6ea:	d0f0      	beq.n	810a6ce <__gethex+0x386>
 810a6ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810a6f0:	f104 0314 	add.w	r3, r4, #20
 810a6f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810a6f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810a6fc:	f04f 0c00 	mov.w	ip, #0
 810a700:	4618      	mov	r0, r3
 810a702:	f853 2b04 	ldr.w	r2, [r3], #4
 810a706:	f1b2 3fff 	cmp.w	r2, #4294967295
 810a70a:	d01c      	beq.n	810a746 <__gethex+0x3fe>
 810a70c:	3201      	adds	r2, #1
 810a70e:	6002      	str	r2, [r0, #0]
 810a710:	2f02      	cmp	r7, #2
 810a712:	f104 0314 	add.w	r3, r4, #20
 810a716:	d13f      	bne.n	810a798 <__gethex+0x450>
 810a718:	f8d8 2000 	ldr.w	r2, [r8]
 810a71c:	3a01      	subs	r2, #1
 810a71e:	42b2      	cmp	r2, r6
 810a720:	d10a      	bne.n	810a738 <__gethex+0x3f0>
 810a722:	1171      	asrs	r1, r6, #5
 810a724:	2201      	movs	r2, #1
 810a726:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810a72a:	f006 061f 	and.w	r6, r6, #31
 810a72e:	fa02 f606 	lsl.w	r6, r2, r6
 810a732:	421e      	tst	r6, r3
 810a734:	bf18      	it	ne
 810a736:	4617      	movne	r7, r2
 810a738:	f047 0720 	orr.w	r7, r7, #32
 810a73c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 810a73e:	601c      	str	r4, [r3, #0]
 810a740:	9b04      	ldr	r3, [sp, #16]
 810a742:	601d      	str	r5, [r3, #0]
 810a744:	e695      	b.n	810a472 <__gethex+0x12a>
 810a746:	4299      	cmp	r1, r3
 810a748:	f843 cc04 	str.w	ip, [r3, #-4]
 810a74c:	d8d8      	bhi.n	810a700 <__gethex+0x3b8>
 810a74e:	68a3      	ldr	r3, [r4, #8]
 810a750:	459b      	cmp	fp, r3
 810a752:	db19      	blt.n	810a788 <__gethex+0x440>
 810a754:	6861      	ldr	r1, [r4, #4]
 810a756:	ee18 0a10 	vmov	r0, s16
 810a75a:	3101      	adds	r1, #1
 810a75c:	f000 f9aa 	bl	810aab4 <_Balloc>
 810a760:	4681      	mov	r9, r0
 810a762:	b918      	cbnz	r0, 810a76c <__gethex+0x424>
 810a764:	4b1a      	ldr	r3, [pc, #104]	; (810a7d0 <__gethex+0x488>)
 810a766:	4602      	mov	r2, r0
 810a768:	2184      	movs	r1, #132	; 0x84
 810a76a:	e6a8      	b.n	810a4be <__gethex+0x176>
 810a76c:	6922      	ldr	r2, [r4, #16]
 810a76e:	3202      	adds	r2, #2
 810a770:	f104 010c 	add.w	r1, r4, #12
 810a774:	0092      	lsls	r2, r2, #2
 810a776:	300c      	adds	r0, #12
 810a778:	f000 f982 	bl	810aa80 <memcpy>
 810a77c:	4621      	mov	r1, r4
 810a77e:	ee18 0a10 	vmov	r0, s16
 810a782:	f000 f9d7 	bl	810ab34 <_Bfree>
 810a786:	464c      	mov	r4, r9
 810a788:	6923      	ldr	r3, [r4, #16]
 810a78a:	1c5a      	adds	r2, r3, #1
 810a78c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810a790:	6122      	str	r2, [r4, #16]
 810a792:	2201      	movs	r2, #1
 810a794:	615a      	str	r2, [r3, #20]
 810a796:	e7bb      	b.n	810a710 <__gethex+0x3c8>
 810a798:	6922      	ldr	r2, [r4, #16]
 810a79a:	455a      	cmp	r2, fp
 810a79c:	dd0b      	ble.n	810a7b6 <__gethex+0x46e>
 810a79e:	2101      	movs	r1, #1
 810a7a0:	4620      	mov	r0, r4
 810a7a2:	f7ff fd69 	bl	810a278 <rshift>
 810a7a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810a7aa:	3501      	adds	r5, #1
 810a7ac:	42ab      	cmp	r3, r5
 810a7ae:	f6ff aed0 	blt.w	810a552 <__gethex+0x20a>
 810a7b2:	2701      	movs	r7, #1
 810a7b4:	e7c0      	b.n	810a738 <__gethex+0x3f0>
 810a7b6:	f016 061f 	ands.w	r6, r6, #31
 810a7ba:	d0fa      	beq.n	810a7b2 <__gethex+0x46a>
 810a7bc:	449a      	add	sl, r3
 810a7be:	f1c6 0620 	rsb	r6, r6, #32
 810a7c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 810a7c6:	f000 fa6b 	bl	810aca0 <__hi0bits>
 810a7ca:	42b0      	cmp	r0, r6
 810a7cc:	dbe7      	blt.n	810a79e <__gethex+0x456>
 810a7ce:	e7f0      	b.n	810a7b2 <__gethex+0x46a>
 810a7d0:	0810d6a4 	.word	0x0810d6a4

0810a7d4 <L_shift>:
 810a7d4:	f1c2 0208 	rsb	r2, r2, #8
 810a7d8:	0092      	lsls	r2, r2, #2
 810a7da:	b570      	push	{r4, r5, r6, lr}
 810a7dc:	f1c2 0620 	rsb	r6, r2, #32
 810a7e0:	6843      	ldr	r3, [r0, #4]
 810a7e2:	6804      	ldr	r4, [r0, #0]
 810a7e4:	fa03 f506 	lsl.w	r5, r3, r6
 810a7e8:	432c      	orrs	r4, r5
 810a7ea:	40d3      	lsrs	r3, r2
 810a7ec:	6004      	str	r4, [r0, #0]
 810a7ee:	f840 3f04 	str.w	r3, [r0, #4]!
 810a7f2:	4288      	cmp	r0, r1
 810a7f4:	d3f4      	bcc.n	810a7e0 <L_shift+0xc>
 810a7f6:	bd70      	pop	{r4, r5, r6, pc}

0810a7f8 <__match>:
 810a7f8:	b530      	push	{r4, r5, lr}
 810a7fa:	6803      	ldr	r3, [r0, #0]
 810a7fc:	3301      	adds	r3, #1
 810a7fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a802:	b914      	cbnz	r4, 810a80a <__match+0x12>
 810a804:	6003      	str	r3, [r0, #0]
 810a806:	2001      	movs	r0, #1
 810a808:	bd30      	pop	{r4, r5, pc}
 810a80a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a80e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810a812:	2d19      	cmp	r5, #25
 810a814:	bf98      	it	ls
 810a816:	3220      	addls	r2, #32
 810a818:	42a2      	cmp	r2, r4
 810a81a:	d0f0      	beq.n	810a7fe <__match+0x6>
 810a81c:	2000      	movs	r0, #0
 810a81e:	e7f3      	b.n	810a808 <__match+0x10>

0810a820 <__hexnan>:
 810a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a824:	680b      	ldr	r3, [r1, #0]
 810a826:	6801      	ldr	r1, [r0, #0]
 810a828:	115e      	asrs	r6, r3, #5
 810a82a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810a82e:	f013 031f 	ands.w	r3, r3, #31
 810a832:	b087      	sub	sp, #28
 810a834:	bf18      	it	ne
 810a836:	3604      	addne	r6, #4
 810a838:	2500      	movs	r5, #0
 810a83a:	1f37      	subs	r7, r6, #4
 810a83c:	4682      	mov	sl, r0
 810a83e:	4690      	mov	r8, r2
 810a840:	9301      	str	r3, [sp, #4]
 810a842:	f846 5c04 	str.w	r5, [r6, #-4]
 810a846:	46b9      	mov	r9, r7
 810a848:	463c      	mov	r4, r7
 810a84a:	9502      	str	r5, [sp, #8]
 810a84c:	46ab      	mov	fp, r5
 810a84e:	784a      	ldrb	r2, [r1, #1]
 810a850:	1c4b      	adds	r3, r1, #1
 810a852:	9303      	str	r3, [sp, #12]
 810a854:	b342      	cbz	r2, 810a8a8 <__hexnan+0x88>
 810a856:	4610      	mov	r0, r2
 810a858:	9105      	str	r1, [sp, #20]
 810a85a:	9204      	str	r2, [sp, #16]
 810a85c:	f7ff fd5e 	bl	810a31c <__hexdig_fun>
 810a860:	2800      	cmp	r0, #0
 810a862:	d14f      	bne.n	810a904 <__hexnan+0xe4>
 810a864:	9a04      	ldr	r2, [sp, #16]
 810a866:	9905      	ldr	r1, [sp, #20]
 810a868:	2a20      	cmp	r2, #32
 810a86a:	d818      	bhi.n	810a89e <__hexnan+0x7e>
 810a86c:	9b02      	ldr	r3, [sp, #8]
 810a86e:	459b      	cmp	fp, r3
 810a870:	dd13      	ble.n	810a89a <__hexnan+0x7a>
 810a872:	454c      	cmp	r4, r9
 810a874:	d206      	bcs.n	810a884 <__hexnan+0x64>
 810a876:	2d07      	cmp	r5, #7
 810a878:	dc04      	bgt.n	810a884 <__hexnan+0x64>
 810a87a:	462a      	mov	r2, r5
 810a87c:	4649      	mov	r1, r9
 810a87e:	4620      	mov	r0, r4
 810a880:	f7ff ffa8 	bl	810a7d4 <L_shift>
 810a884:	4544      	cmp	r4, r8
 810a886:	d950      	bls.n	810a92a <__hexnan+0x10a>
 810a888:	2300      	movs	r3, #0
 810a88a:	f1a4 0904 	sub.w	r9, r4, #4
 810a88e:	f844 3c04 	str.w	r3, [r4, #-4]
 810a892:	f8cd b008 	str.w	fp, [sp, #8]
 810a896:	464c      	mov	r4, r9
 810a898:	461d      	mov	r5, r3
 810a89a:	9903      	ldr	r1, [sp, #12]
 810a89c:	e7d7      	b.n	810a84e <__hexnan+0x2e>
 810a89e:	2a29      	cmp	r2, #41	; 0x29
 810a8a0:	d156      	bne.n	810a950 <__hexnan+0x130>
 810a8a2:	3102      	adds	r1, #2
 810a8a4:	f8ca 1000 	str.w	r1, [sl]
 810a8a8:	f1bb 0f00 	cmp.w	fp, #0
 810a8ac:	d050      	beq.n	810a950 <__hexnan+0x130>
 810a8ae:	454c      	cmp	r4, r9
 810a8b0:	d206      	bcs.n	810a8c0 <__hexnan+0xa0>
 810a8b2:	2d07      	cmp	r5, #7
 810a8b4:	dc04      	bgt.n	810a8c0 <__hexnan+0xa0>
 810a8b6:	462a      	mov	r2, r5
 810a8b8:	4649      	mov	r1, r9
 810a8ba:	4620      	mov	r0, r4
 810a8bc:	f7ff ff8a 	bl	810a7d4 <L_shift>
 810a8c0:	4544      	cmp	r4, r8
 810a8c2:	d934      	bls.n	810a92e <__hexnan+0x10e>
 810a8c4:	f1a8 0204 	sub.w	r2, r8, #4
 810a8c8:	4623      	mov	r3, r4
 810a8ca:	f853 1b04 	ldr.w	r1, [r3], #4
 810a8ce:	f842 1f04 	str.w	r1, [r2, #4]!
 810a8d2:	429f      	cmp	r7, r3
 810a8d4:	d2f9      	bcs.n	810a8ca <__hexnan+0xaa>
 810a8d6:	1b3b      	subs	r3, r7, r4
 810a8d8:	f023 0303 	bic.w	r3, r3, #3
 810a8dc:	3304      	adds	r3, #4
 810a8de:	3401      	adds	r4, #1
 810a8e0:	3e03      	subs	r6, #3
 810a8e2:	42b4      	cmp	r4, r6
 810a8e4:	bf88      	it	hi
 810a8e6:	2304      	movhi	r3, #4
 810a8e8:	4443      	add	r3, r8
 810a8ea:	2200      	movs	r2, #0
 810a8ec:	f843 2b04 	str.w	r2, [r3], #4
 810a8f0:	429f      	cmp	r7, r3
 810a8f2:	d2fb      	bcs.n	810a8ec <__hexnan+0xcc>
 810a8f4:	683b      	ldr	r3, [r7, #0]
 810a8f6:	b91b      	cbnz	r3, 810a900 <__hexnan+0xe0>
 810a8f8:	4547      	cmp	r7, r8
 810a8fa:	d127      	bne.n	810a94c <__hexnan+0x12c>
 810a8fc:	2301      	movs	r3, #1
 810a8fe:	603b      	str	r3, [r7, #0]
 810a900:	2005      	movs	r0, #5
 810a902:	e026      	b.n	810a952 <__hexnan+0x132>
 810a904:	3501      	adds	r5, #1
 810a906:	2d08      	cmp	r5, #8
 810a908:	f10b 0b01 	add.w	fp, fp, #1
 810a90c:	dd06      	ble.n	810a91c <__hexnan+0xfc>
 810a90e:	4544      	cmp	r4, r8
 810a910:	d9c3      	bls.n	810a89a <__hexnan+0x7a>
 810a912:	2300      	movs	r3, #0
 810a914:	f844 3c04 	str.w	r3, [r4, #-4]
 810a918:	2501      	movs	r5, #1
 810a91a:	3c04      	subs	r4, #4
 810a91c:	6822      	ldr	r2, [r4, #0]
 810a91e:	f000 000f 	and.w	r0, r0, #15
 810a922:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 810a926:	6022      	str	r2, [r4, #0]
 810a928:	e7b7      	b.n	810a89a <__hexnan+0x7a>
 810a92a:	2508      	movs	r5, #8
 810a92c:	e7b5      	b.n	810a89a <__hexnan+0x7a>
 810a92e:	9b01      	ldr	r3, [sp, #4]
 810a930:	2b00      	cmp	r3, #0
 810a932:	d0df      	beq.n	810a8f4 <__hexnan+0xd4>
 810a934:	f04f 32ff 	mov.w	r2, #4294967295
 810a938:	f1c3 0320 	rsb	r3, r3, #32
 810a93c:	fa22 f303 	lsr.w	r3, r2, r3
 810a940:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810a944:	401a      	ands	r2, r3
 810a946:	f846 2c04 	str.w	r2, [r6, #-4]
 810a94a:	e7d3      	b.n	810a8f4 <__hexnan+0xd4>
 810a94c:	3f04      	subs	r7, #4
 810a94e:	e7d1      	b.n	810a8f4 <__hexnan+0xd4>
 810a950:	2004      	movs	r0, #4
 810a952:	b007      	add	sp, #28
 810a954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810a958 <_localeconv_r>:
 810a958:	4800      	ldr	r0, [pc, #0]	; (810a95c <_localeconv_r+0x4>)
 810a95a:	4770      	bx	lr
 810a95c:	100001b8 	.word	0x100001b8

0810a960 <_lseek_r>:
 810a960:	b538      	push	{r3, r4, r5, lr}
 810a962:	4d07      	ldr	r5, [pc, #28]	; (810a980 <_lseek_r+0x20>)
 810a964:	4604      	mov	r4, r0
 810a966:	4608      	mov	r0, r1
 810a968:	4611      	mov	r1, r2
 810a96a:	2200      	movs	r2, #0
 810a96c:	602a      	str	r2, [r5, #0]
 810a96e:	461a      	mov	r2, r3
 810a970:	f7f7 fe68 	bl	8102644 <_lseek>
 810a974:	1c43      	adds	r3, r0, #1
 810a976:	d102      	bne.n	810a97e <_lseek_r+0x1e>
 810a978:	682b      	ldr	r3, [r5, #0]
 810a97a:	b103      	cbz	r3, 810a97e <_lseek_r+0x1e>
 810a97c:	6023      	str	r3, [r4, #0]
 810a97e:	bd38      	pop	{r3, r4, r5, pc}
 810a980:	100105d0 	.word	0x100105d0

0810a984 <__swhatbuf_r>:
 810a984:	b570      	push	{r4, r5, r6, lr}
 810a986:	460e      	mov	r6, r1
 810a988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a98c:	2900      	cmp	r1, #0
 810a98e:	b096      	sub	sp, #88	; 0x58
 810a990:	4614      	mov	r4, r2
 810a992:	461d      	mov	r5, r3
 810a994:	da07      	bge.n	810a9a6 <__swhatbuf_r+0x22>
 810a996:	2300      	movs	r3, #0
 810a998:	602b      	str	r3, [r5, #0]
 810a99a:	89b3      	ldrh	r3, [r6, #12]
 810a99c:	061a      	lsls	r2, r3, #24
 810a99e:	d410      	bmi.n	810a9c2 <__swhatbuf_r+0x3e>
 810a9a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a9a4:	e00e      	b.n	810a9c4 <__swhatbuf_r+0x40>
 810a9a6:	466a      	mov	r2, sp
 810a9a8:	f001 f86e 	bl	810ba88 <_fstat_r>
 810a9ac:	2800      	cmp	r0, #0
 810a9ae:	dbf2      	blt.n	810a996 <__swhatbuf_r+0x12>
 810a9b0:	9a01      	ldr	r2, [sp, #4]
 810a9b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 810a9b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 810a9ba:	425a      	negs	r2, r3
 810a9bc:	415a      	adcs	r2, r3
 810a9be:	602a      	str	r2, [r5, #0]
 810a9c0:	e7ee      	b.n	810a9a0 <__swhatbuf_r+0x1c>
 810a9c2:	2340      	movs	r3, #64	; 0x40
 810a9c4:	2000      	movs	r0, #0
 810a9c6:	6023      	str	r3, [r4, #0]
 810a9c8:	b016      	add	sp, #88	; 0x58
 810a9ca:	bd70      	pop	{r4, r5, r6, pc}

0810a9cc <__smakebuf_r>:
 810a9cc:	898b      	ldrh	r3, [r1, #12]
 810a9ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810a9d0:	079d      	lsls	r5, r3, #30
 810a9d2:	4606      	mov	r6, r0
 810a9d4:	460c      	mov	r4, r1
 810a9d6:	d507      	bpl.n	810a9e8 <__smakebuf_r+0x1c>
 810a9d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810a9dc:	6023      	str	r3, [r4, #0]
 810a9de:	6123      	str	r3, [r4, #16]
 810a9e0:	2301      	movs	r3, #1
 810a9e2:	6163      	str	r3, [r4, #20]
 810a9e4:	b002      	add	sp, #8
 810a9e6:	bd70      	pop	{r4, r5, r6, pc}
 810a9e8:	ab01      	add	r3, sp, #4
 810a9ea:	466a      	mov	r2, sp
 810a9ec:	f7ff ffca 	bl	810a984 <__swhatbuf_r>
 810a9f0:	9900      	ldr	r1, [sp, #0]
 810a9f2:	4605      	mov	r5, r0
 810a9f4:	4630      	mov	r0, r6
 810a9f6:	f7fc fd91 	bl	810751c <_malloc_r>
 810a9fa:	b948      	cbnz	r0, 810aa10 <__smakebuf_r+0x44>
 810a9fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810aa00:	059a      	lsls	r2, r3, #22
 810aa02:	d4ef      	bmi.n	810a9e4 <__smakebuf_r+0x18>
 810aa04:	f023 0303 	bic.w	r3, r3, #3
 810aa08:	f043 0302 	orr.w	r3, r3, #2
 810aa0c:	81a3      	strh	r3, [r4, #12]
 810aa0e:	e7e3      	b.n	810a9d8 <__smakebuf_r+0xc>
 810aa10:	4b0d      	ldr	r3, [pc, #52]	; (810aa48 <__smakebuf_r+0x7c>)
 810aa12:	62b3      	str	r3, [r6, #40]	; 0x28
 810aa14:	89a3      	ldrh	r3, [r4, #12]
 810aa16:	6020      	str	r0, [r4, #0]
 810aa18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810aa1c:	81a3      	strh	r3, [r4, #12]
 810aa1e:	9b00      	ldr	r3, [sp, #0]
 810aa20:	6163      	str	r3, [r4, #20]
 810aa22:	9b01      	ldr	r3, [sp, #4]
 810aa24:	6120      	str	r0, [r4, #16]
 810aa26:	b15b      	cbz	r3, 810aa40 <__smakebuf_r+0x74>
 810aa28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810aa2c:	4630      	mov	r0, r6
 810aa2e:	f001 f83d 	bl	810baac <_isatty_r>
 810aa32:	b128      	cbz	r0, 810aa40 <__smakebuf_r+0x74>
 810aa34:	89a3      	ldrh	r3, [r4, #12]
 810aa36:	f023 0303 	bic.w	r3, r3, #3
 810aa3a:	f043 0301 	orr.w	r3, r3, #1
 810aa3e:	81a3      	strh	r3, [r4, #12]
 810aa40:	89a0      	ldrh	r0, [r4, #12]
 810aa42:	4305      	orrs	r5, r0
 810aa44:	81a5      	strh	r5, [r4, #12]
 810aa46:	e7cd      	b.n	810a9e4 <__smakebuf_r+0x18>
 810aa48:	08107279 	.word	0x08107279

0810aa4c <malloc>:
 810aa4c:	4b02      	ldr	r3, [pc, #8]	; (810aa58 <malloc+0xc>)
 810aa4e:	4601      	mov	r1, r0
 810aa50:	6818      	ldr	r0, [r3, #0]
 810aa52:	f7fc bd63 	b.w	810751c <_malloc_r>
 810aa56:	bf00      	nop
 810aa58:	10000060 	.word	0x10000060

0810aa5c <__ascii_mbtowc>:
 810aa5c:	b082      	sub	sp, #8
 810aa5e:	b901      	cbnz	r1, 810aa62 <__ascii_mbtowc+0x6>
 810aa60:	a901      	add	r1, sp, #4
 810aa62:	b142      	cbz	r2, 810aa76 <__ascii_mbtowc+0x1a>
 810aa64:	b14b      	cbz	r3, 810aa7a <__ascii_mbtowc+0x1e>
 810aa66:	7813      	ldrb	r3, [r2, #0]
 810aa68:	600b      	str	r3, [r1, #0]
 810aa6a:	7812      	ldrb	r2, [r2, #0]
 810aa6c:	1e10      	subs	r0, r2, #0
 810aa6e:	bf18      	it	ne
 810aa70:	2001      	movne	r0, #1
 810aa72:	b002      	add	sp, #8
 810aa74:	4770      	bx	lr
 810aa76:	4610      	mov	r0, r2
 810aa78:	e7fb      	b.n	810aa72 <__ascii_mbtowc+0x16>
 810aa7a:	f06f 0001 	mvn.w	r0, #1
 810aa7e:	e7f8      	b.n	810aa72 <__ascii_mbtowc+0x16>

0810aa80 <memcpy>:
 810aa80:	440a      	add	r2, r1
 810aa82:	4291      	cmp	r1, r2
 810aa84:	f100 33ff 	add.w	r3, r0, #4294967295
 810aa88:	d100      	bne.n	810aa8c <memcpy+0xc>
 810aa8a:	4770      	bx	lr
 810aa8c:	b510      	push	{r4, lr}
 810aa8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810aa92:	f803 4f01 	strb.w	r4, [r3, #1]!
 810aa96:	4291      	cmp	r1, r2
 810aa98:	d1f9      	bne.n	810aa8e <memcpy+0xe>
 810aa9a:	bd10      	pop	{r4, pc}

0810aa9c <__malloc_lock>:
 810aa9c:	4801      	ldr	r0, [pc, #4]	; (810aaa4 <__malloc_lock+0x8>)
 810aa9e:	f7fc bce2 	b.w	8107466 <__retarget_lock_acquire_recursive>
 810aaa2:	bf00      	nop
 810aaa4:	100105c8 	.word	0x100105c8

0810aaa8 <__malloc_unlock>:
 810aaa8:	4801      	ldr	r0, [pc, #4]	; (810aab0 <__malloc_unlock+0x8>)
 810aaaa:	f7fc bcdd 	b.w	8107468 <__retarget_lock_release_recursive>
 810aaae:	bf00      	nop
 810aab0:	100105c8 	.word	0x100105c8

0810aab4 <_Balloc>:
 810aab4:	b570      	push	{r4, r5, r6, lr}
 810aab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810aab8:	4604      	mov	r4, r0
 810aaba:	460d      	mov	r5, r1
 810aabc:	b976      	cbnz	r6, 810aadc <_Balloc+0x28>
 810aabe:	2010      	movs	r0, #16
 810aac0:	f7ff ffc4 	bl	810aa4c <malloc>
 810aac4:	4602      	mov	r2, r0
 810aac6:	6260      	str	r0, [r4, #36]	; 0x24
 810aac8:	b920      	cbnz	r0, 810aad4 <_Balloc+0x20>
 810aaca:	4b18      	ldr	r3, [pc, #96]	; (810ab2c <_Balloc+0x78>)
 810aacc:	4818      	ldr	r0, [pc, #96]	; (810ab30 <_Balloc+0x7c>)
 810aace:	2166      	movs	r1, #102	; 0x66
 810aad0:	f000 ffaa 	bl	810ba28 <__assert_func>
 810aad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810aad8:	6006      	str	r6, [r0, #0]
 810aada:	60c6      	str	r6, [r0, #12]
 810aadc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 810aade:	68f3      	ldr	r3, [r6, #12]
 810aae0:	b183      	cbz	r3, 810ab04 <_Balloc+0x50>
 810aae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810aae4:	68db      	ldr	r3, [r3, #12]
 810aae6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810aaea:	b9b8      	cbnz	r0, 810ab1c <_Balloc+0x68>
 810aaec:	2101      	movs	r1, #1
 810aaee:	fa01 f605 	lsl.w	r6, r1, r5
 810aaf2:	1d72      	adds	r2, r6, #5
 810aaf4:	0092      	lsls	r2, r2, #2
 810aaf6:	4620      	mov	r0, r4
 810aaf8:	f000 fc97 	bl	810b42a <_calloc_r>
 810aafc:	b160      	cbz	r0, 810ab18 <_Balloc+0x64>
 810aafe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810ab02:	e00e      	b.n	810ab22 <_Balloc+0x6e>
 810ab04:	2221      	movs	r2, #33	; 0x21
 810ab06:	2104      	movs	r1, #4
 810ab08:	4620      	mov	r0, r4
 810ab0a:	f000 fc8e 	bl	810b42a <_calloc_r>
 810ab0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 810ab10:	60f0      	str	r0, [r6, #12]
 810ab12:	68db      	ldr	r3, [r3, #12]
 810ab14:	2b00      	cmp	r3, #0
 810ab16:	d1e4      	bne.n	810aae2 <_Balloc+0x2e>
 810ab18:	2000      	movs	r0, #0
 810ab1a:	bd70      	pop	{r4, r5, r6, pc}
 810ab1c:	6802      	ldr	r2, [r0, #0]
 810ab1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810ab22:	2300      	movs	r3, #0
 810ab24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810ab28:	e7f7      	b.n	810ab1a <_Balloc+0x66>
 810ab2a:	bf00      	nop
 810ab2c:	0810d62e 	.word	0x0810d62e
 810ab30:	0810d734 	.word	0x0810d734

0810ab34 <_Bfree>:
 810ab34:	b570      	push	{r4, r5, r6, lr}
 810ab36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 810ab38:	4605      	mov	r5, r0
 810ab3a:	460c      	mov	r4, r1
 810ab3c:	b976      	cbnz	r6, 810ab5c <_Bfree+0x28>
 810ab3e:	2010      	movs	r0, #16
 810ab40:	f7ff ff84 	bl	810aa4c <malloc>
 810ab44:	4602      	mov	r2, r0
 810ab46:	6268      	str	r0, [r5, #36]	; 0x24
 810ab48:	b920      	cbnz	r0, 810ab54 <_Bfree+0x20>
 810ab4a:	4b09      	ldr	r3, [pc, #36]	; (810ab70 <_Bfree+0x3c>)
 810ab4c:	4809      	ldr	r0, [pc, #36]	; (810ab74 <_Bfree+0x40>)
 810ab4e:	218a      	movs	r1, #138	; 0x8a
 810ab50:	f000 ff6a 	bl	810ba28 <__assert_func>
 810ab54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810ab58:	6006      	str	r6, [r0, #0]
 810ab5a:	60c6      	str	r6, [r0, #12]
 810ab5c:	b13c      	cbz	r4, 810ab6e <_Bfree+0x3a>
 810ab5e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 810ab60:	6862      	ldr	r2, [r4, #4]
 810ab62:	68db      	ldr	r3, [r3, #12]
 810ab64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810ab68:	6021      	str	r1, [r4, #0]
 810ab6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810ab6e:	bd70      	pop	{r4, r5, r6, pc}
 810ab70:	0810d62e 	.word	0x0810d62e
 810ab74:	0810d734 	.word	0x0810d734

0810ab78 <__multadd>:
 810ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ab7c:	690e      	ldr	r6, [r1, #16]
 810ab7e:	4607      	mov	r7, r0
 810ab80:	4698      	mov	r8, r3
 810ab82:	460c      	mov	r4, r1
 810ab84:	f101 0014 	add.w	r0, r1, #20
 810ab88:	2300      	movs	r3, #0
 810ab8a:	6805      	ldr	r5, [r0, #0]
 810ab8c:	b2a9      	uxth	r1, r5
 810ab8e:	fb02 8101 	mla	r1, r2, r1, r8
 810ab92:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 810ab96:	0c2d      	lsrs	r5, r5, #16
 810ab98:	fb02 c505 	mla	r5, r2, r5, ip
 810ab9c:	b289      	uxth	r1, r1
 810ab9e:	3301      	adds	r3, #1
 810aba0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 810aba4:	429e      	cmp	r6, r3
 810aba6:	f840 1b04 	str.w	r1, [r0], #4
 810abaa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 810abae:	dcec      	bgt.n	810ab8a <__multadd+0x12>
 810abb0:	f1b8 0f00 	cmp.w	r8, #0
 810abb4:	d022      	beq.n	810abfc <__multadd+0x84>
 810abb6:	68a3      	ldr	r3, [r4, #8]
 810abb8:	42b3      	cmp	r3, r6
 810abba:	dc19      	bgt.n	810abf0 <__multadd+0x78>
 810abbc:	6861      	ldr	r1, [r4, #4]
 810abbe:	4638      	mov	r0, r7
 810abc0:	3101      	adds	r1, #1
 810abc2:	f7ff ff77 	bl	810aab4 <_Balloc>
 810abc6:	4605      	mov	r5, r0
 810abc8:	b928      	cbnz	r0, 810abd6 <__multadd+0x5e>
 810abca:	4602      	mov	r2, r0
 810abcc:	4b0d      	ldr	r3, [pc, #52]	; (810ac04 <__multadd+0x8c>)
 810abce:	480e      	ldr	r0, [pc, #56]	; (810ac08 <__multadd+0x90>)
 810abd0:	21b5      	movs	r1, #181	; 0xb5
 810abd2:	f000 ff29 	bl	810ba28 <__assert_func>
 810abd6:	6922      	ldr	r2, [r4, #16]
 810abd8:	3202      	adds	r2, #2
 810abda:	f104 010c 	add.w	r1, r4, #12
 810abde:	0092      	lsls	r2, r2, #2
 810abe0:	300c      	adds	r0, #12
 810abe2:	f7ff ff4d 	bl	810aa80 <memcpy>
 810abe6:	4621      	mov	r1, r4
 810abe8:	4638      	mov	r0, r7
 810abea:	f7ff ffa3 	bl	810ab34 <_Bfree>
 810abee:	462c      	mov	r4, r5
 810abf0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 810abf4:	3601      	adds	r6, #1
 810abf6:	f8c3 8014 	str.w	r8, [r3, #20]
 810abfa:	6126      	str	r6, [r4, #16]
 810abfc:	4620      	mov	r0, r4
 810abfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ac02:	bf00      	nop
 810ac04:	0810d6a4 	.word	0x0810d6a4
 810ac08:	0810d734 	.word	0x0810d734

0810ac0c <__s2b>:
 810ac0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810ac10:	460c      	mov	r4, r1
 810ac12:	4615      	mov	r5, r2
 810ac14:	461f      	mov	r7, r3
 810ac16:	2209      	movs	r2, #9
 810ac18:	3308      	adds	r3, #8
 810ac1a:	4606      	mov	r6, r0
 810ac1c:	fb93 f3f2 	sdiv	r3, r3, r2
 810ac20:	2100      	movs	r1, #0
 810ac22:	2201      	movs	r2, #1
 810ac24:	429a      	cmp	r2, r3
 810ac26:	db09      	blt.n	810ac3c <__s2b+0x30>
 810ac28:	4630      	mov	r0, r6
 810ac2a:	f7ff ff43 	bl	810aab4 <_Balloc>
 810ac2e:	b940      	cbnz	r0, 810ac42 <__s2b+0x36>
 810ac30:	4602      	mov	r2, r0
 810ac32:	4b19      	ldr	r3, [pc, #100]	; (810ac98 <__s2b+0x8c>)
 810ac34:	4819      	ldr	r0, [pc, #100]	; (810ac9c <__s2b+0x90>)
 810ac36:	21ce      	movs	r1, #206	; 0xce
 810ac38:	f000 fef6 	bl	810ba28 <__assert_func>
 810ac3c:	0052      	lsls	r2, r2, #1
 810ac3e:	3101      	adds	r1, #1
 810ac40:	e7f0      	b.n	810ac24 <__s2b+0x18>
 810ac42:	9b08      	ldr	r3, [sp, #32]
 810ac44:	6143      	str	r3, [r0, #20]
 810ac46:	2d09      	cmp	r5, #9
 810ac48:	f04f 0301 	mov.w	r3, #1
 810ac4c:	6103      	str	r3, [r0, #16]
 810ac4e:	dd16      	ble.n	810ac7e <__s2b+0x72>
 810ac50:	f104 0909 	add.w	r9, r4, #9
 810ac54:	46c8      	mov	r8, r9
 810ac56:	442c      	add	r4, r5
 810ac58:	f818 3b01 	ldrb.w	r3, [r8], #1
 810ac5c:	4601      	mov	r1, r0
 810ac5e:	3b30      	subs	r3, #48	; 0x30
 810ac60:	220a      	movs	r2, #10
 810ac62:	4630      	mov	r0, r6
 810ac64:	f7ff ff88 	bl	810ab78 <__multadd>
 810ac68:	45a0      	cmp	r8, r4
 810ac6a:	d1f5      	bne.n	810ac58 <__s2b+0x4c>
 810ac6c:	f1a5 0408 	sub.w	r4, r5, #8
 810ac70:	444c      	add	r4, r9
 810ac72:	1b2d      	subs	r5, r5, r4
 810ac74:	1963      	adds	r3, r4, r5
 810ac76:	42bb      	cmp	r3, r7
 810ac78:	db04      	blt.n	810ac84 <__s2b+0x78>
 810ac7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810ac7e:	340a      	adds	r4, #10
 810ac80:	2509      	movs	r5, #9
 810ac82:	e7f6      	b.n	810ac72 <__s2b+0x66>
 810ac84:	f814 3b01 	ldrb.w	r3, [r4], #1
 810ac88:	4601      	mov	r1, r0
 810ac8a:	3b30      	subs	r3, #48	; 0x30
 810ac8c:	220a      	movs	r2, #10
 810ac8e:	4630      	mov	r0, r6
 810ac90:	f7ff ff72 	bl	810ab78 <__multadd>
 810ac94:	e7ee      	b.n	810ac74 <__s2b+0x68>
 810ac96:	bf00      	nop
 810ac98:	0810d6a4 	.word	0x0810d6a4
 810ac9c:	0810d734 	.word	0x0810d734

0810aca0 <__hi0bits>:
 810aca0:	0c03      	lsrs	r3, r0, #16
 810aca2:	041b      	lsls	r3, r3, #16
 810aca4:	b9d3      	cbnz	r3, 810acdc <__hi0bits+0x3c>
 810aca6:	0400      	lsls	r0, r0, #16
 810aca8:	2310      	movs	r3, #16
 810acaa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810acae:	bf04      	itt	eq
 810acb0:	0200      	lsleq	r0, r0, #8
 810acb2:	3308      	addeq	r3, #8
 810acb4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810acb8:	bf04      	itt	eq
 810acba:	0100      	lsleq	r0, r0, #4
 810acbc:	3304      	addeq	r3, #4
 810acbe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810acc2:	bf04      	itt	eq
 810acc4:	0080      	lsleq	r0, r0, #2
 810acc6:	3302      	addeq	r3, #2
 810acc8:	2800      	cmp	r0, #0
 810acca:	db05      	blt.n	810acd8 <__hi0bits+0x38>
 810accc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810acd0:	f103 0301 	add.w	r3, r3, #1
 810acd4:	bf08      	it	eq
 810acd6:	2320      	moveq	r3, #32
 810acd8:	4618      	mov	r0, r3
 810acda:	4770      	bx	lr
 810acdc:	2300      	movs	r3, #0
 810acde:	e7e4      	b.n	810acaa <__hi0bits+0xa>

0810ace0 <__lo0bits>:
 810ace0:	6803      	ldr	r3, [r0, #0]
 810ace2:	f013 0207 	ands.w	r2, r3, #7
 810ace6:	4601      	mov	r1, r0
 810ace8:	d00b      	beq.n	810ad02 <__lo0bits+0x22>
 810acea:	07da      	lsls	r2, r3, #31
 810acec:	d424      	bmi.n	810ad38 <__lo0bits+0x58>
 810acee:	0798      	lsls	r0, r3, #30
 810acf0:	bf49      	itett	mi
 810acf2:	085b      	lsrmi	r3, r3, #1
 810acf4:	089b      	lsrpl	r3, r3, #2
 810acf6:	2001      	movmi	r0, #1
 810acf8:	600b      	strmi	r3, [r1, #0]
 810acfa:	bf5c      	itt	pl
 810acfc:	600b      	strpl	r3, [r1, #0]
 810acfe:	2002      	movpl	r0, #2
 810ad00:	4770      	bx	lr
 810ad02:	b298      	uxth	r0, r3
 810ad04:	b9b0      	cbnz	r0, 810ad34 <__lo0bits+0x54>
 810ad06:	0c1b      	lsrs	r3, r3, #16
 810ad08:	2010      	movs	r0, #16
 810ad0a:	f013 0fff 	tst.w	r3, #255	; 0xff
 810ad0e:	bf04      	itt	eq
 810ad10:	0a1b      	lsreq	r3, r3, #8
 810ad12:	3008      	addeq	r0, #8
 810ad14:	071a      	lsls	r2, r3, #28
 810ad16:	bf04      	itt	eq
 810ad18:	091b      	lsreq	r3, r3, #4
 810ad1a:	3004      	addeq	r0, #4
 810ad1c:	079a      	lsls	r2, r3, #30
 810ad1e:	bf04      	itt	eq
 810ad20:	089b      	lsreq	r3, r3, #2
 810ad22:	3002      	addeq	r0, #2
 810ad24:	07da      	lsls	r2, r3, #31
 810ad26:	d403      	bmi.n	810ad30 <__lo0bits+0x50>
 810ad28:	085b      	lsrs	r3, r3, #1
 810ad2a:	f100 0001 	add.w	r0, r0, #1
 810ad2e:	d005      	beq.n	810ad3c <__lo0bits+0x5c>
 810ad30:	600b      	str	r3, [r1, #0]
 810ad32:	4770      	bx	lr
 810ad34:	4610      	mov	r0, r2
 810ad36:	e7e8      	b.n	810ad0a <__lo0bits+0x2a>
 810ad38:	2000      	movs	r0, #0
 810ad3a:	4770      	bx	lr
 810ad3c:	2020      	movs	r0, #32
 810ad3e:	4770      	bx	lr

0810ad40 <__i2b>:
 810ad40:	b510      	push	{r4, lr}
 810ad42:	460c      	mov	r4, r1
 810ad44:	2101      	movs	r1, #1
 810ad46:	f7ff feb5 	bl	810aab4 <_Balloc>
 810ad4a:	4602      	mov	r2, r0
 810ad4c:	b928      	cbnz	r0, 810ad5a <__i2b+0x1a>
 810ad4e:	4b05      	ldr	r3, [pc, #20]	; (810ad64 <__i2b+0x24>)
 810ad50:	4805      	ldr	r0, [pc, #20]	; (810ad68 <__i2b+0x28>)
 810ad52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 810ad56:	f000 fe67 	bl	810ba28 <__assert_func>
 810ad5a:	2301      	movs	r3, #1
 810ad5c:	6144      	str	r4, [r0, #20]
 810ad5e:	6103      	str	r3, [r0, #16]
 810ad60:	bd10      	pop	{r4, pc}
 810ad62:	bf00      	nop
 810ad64:	0810d6a4 	.word	0x0810d6a4
 810ad68:	0810d734 	.word	0x0810d734

0810ad6c <__multiply>:
 810ad6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad70:	4614      	mov	r4, r2
 810ad72:	690a      	ldr	r2, [r1, #16]
 810ad74:	6923      	ldr	r3, [r4, #16]
 810ad76:	429a      	cmp	r2, r3
 810ad78:	bfb8      	it	lt
 810ad7a:	460b      	movlt	r3, r1
 810ad7c:	460d      	mov	r5, r1
 810ad7e:	bfbc      	itt	lt
 810ad80:	4625      	movlt	r5, r4
 810ad82:	461c      	movlt	r4, r3
 810ad84:	f8d5 a010 	ldr.w	sl, [r5, #16]
 810ad88:	f8d4 9010 	ldr.w	r9, [r4, #16]
 810ad8c:	68ab      	ldr	r3, [r5, #8]
 810ad8e:	6869      	ldr	r1, [r5, #4]
 810ad90:	eb0a 0709 	add.w	r7, sl, r9
 810ad94:	42bb      	cmp	r3, r7
 810ad96:	b085      	sub	sp, #20
 810ad98:	bfb8      	it	lt
 810ad9a:	3101      	addlt	r1, #1
 810ad9c:	f7ff fe8a 	bl	810aab4 <_Balloc>
 810ada0:	b930      	cbnz	r0, 810adb0 <__multiply+0x44>
 810ada2:	4602      	mov	r2, r0
 810ada4:	4b42      	ldr	r3, [pc, #264]	; (810aeb0 <__multiply+0x144>)
 810ada6:	4843      	ldr	r0, [pc, #268]	; (810aeb4 <__multiply+0x148>)
 810ada8:	f240 115d 	movw	r1, #349	; 0x15d
 810adac:	f000 fe3c 	bl	810ba28 <__assert_func>
 810adb0:	f100 0614 	add.w	r6, r0, #20
 810adb4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 810adb8:	4633      	mov	r3, r6
 810adba:	2200      	movs	r2, #0
 810adbc:	4543      	cmp	r3, r8
 810adbe:	d31e      	bcc.n	810adfe <__multiply+0x92>
 810adc0:	f105 0c14 	add.w	ip, r5, #20
 810adc4:	f104 0314 	add.w	r3, r4, #20
 810adc8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 810adcc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 810add0:	9202      	str	r2, [sp, #8]
 810add2:	ebac 0205 	sub.w	r2, ip, r5
 810add6:	3a15      	subs	r2, #21
 810add8:	f022 0203 	bic.w	r2, r2, #3
 810addc:	3204      	adds	r2, #4
 810adde:	f105 0115 	add.w	r1, r5, #21
 810ade2:	458c      	cmp	ip, r1
 810ade4:	bf38      	it	cc
 810ade6:	2204      	movcc	r2, #4
 810ade8:	9201      	str	r2, [sp, #4]
 810adea:	9a02      	ldr	r2, [sp, #8]
 810adec:	9303      	str	r3, [sp, #12]
 810adee:	429a      	cmp	r2, r3
 810adf0:	d808      	bhi.n	810ae04 <__multiply+0x98>
 810adf2:	2f00      	cmp	r7, #0
 810adf4:	dc55      	bgt.n	810aea2 <__multiply+0x136>
 810adf6:	6107      	str	r7, [r0, #16]
 810adf8:	b005      	add	sp, #20
 810adfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810adfe:	f843 2b04 	str.w	r2, [r3], #4
 810ae02:	e7db      	b.n	810adbc <__multiply+0x50>
 810ae04:	f8b3 a000 	ldrh.w	sl, [r3]
 810ae08:	f1ba 0f00 	cmp.w	sl, #0
 810ae0c:	d020      	beq.n	810ae50 <__multiply+0xe4>
 810ae0e:	f105 0e14 	add.w	lr, r5, #20
 810ae12:	46b1      	mov	r9, r6
 810ae14:	2200      	movs	r2, #0
 810ae16:	f85e 4b04 	ldr.w	r4, [lr], #4
 810ae1a:	f8d9 b000 	ldr.w	fp, [r9]
 810ae1e:	b2a1      	uxth	r1, r4
 810ae20:	fa1f fb8b 	uxth.w	fp, fp
 810ae24:	fb0a b101 	mla	r1, sl, r1, fp
 810ae28:	4411      	add	r1, r2
 810ae2a:	f8d9 2000 	ldr.w	r2, [r9]
 810ae2e:	0c24      	lsrs	r4, r4, #16
 810ae30:	0c12      	lsrs	r2, r2, #16
 810ae32:	fb0a 2404 	mla	r4, sl, r4, r2
 810ae36:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 810ae3a:	b289      	uxth	r1, r1
 810ae3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 810ae40:	45f4      	cmp	ip, lr
 810ae42:	f849 1b04 	str.w	r1, [r9], #4
 810ae46:	ea4f 4214 	mov.w	r2, r4, lsr #16
 810ae4a:	d8e4      	bhi.n	810ae16 <__multiply+0xaa>
 810ae4c:	9901      	ldr	r1, [sp, #4]
 810ae4e:	5072      	str	r2, [r6, r1]
 810ae50:	9a03      	ldr	r2, [sp, #12]
 810ae52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810ae56:	3304      	adds	r3, #4
 810ae58:	f1b9 0f00 	cmp.w	r9, #0
 810ae5c:	d01f      	beq.n	810ae9e <__multiply+0x132>
 810ae5e:	6834      	ldr	r4, [r6, #0]
 810ae60:	f105 0114 	add.w	r1, r5, #20
 810ae64:	46b6      	mov	lr, r6
 810ae66:	f04f 0a00 	mov.w	sl, #0
 810ae6a:	880a      	ldrh	r2, [r1, #0]
 810ae6c:	f8be b002 	ldrh.w	fp, [lr, #2]
 810ae70:	fb09 b202 	mla	r2, r9, r2, fp
 810ae74:	4492      	add	sl, r2
 810ae76:	b2a4      	uxth	r4, r4
 810ae78:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 810ae7c:	f84e 4b04 	str.w	r4, [lr], #4
 810ae80:	f851 4b04 	ldr.w	r4, [r1], #4
 810ae84:	f8be 2000 	ldrh.w	r2, [lr]
 810ae88:	0c24      	lsrs	r4, r4, #16
 810ae8a:	fb09 2404 	mla	r4, r9, r4, r2
 810ae8e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 810ae92:	458c      	cmp	ip, r1
 810ae94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 810ae98:	d8e7      	bhi.n	810ae6a <__multiply+0xfe>
 810ae9a:	9a01      	ldr	r2, [sp, #4]
 810ae9c:	50b4      	str	r4, [r6, r2]
 810ae9e:	3604      	adds	r6, #4
 810aea0:	e7a3      	b.n	810adea <__multiply+0x7e>
 810aea2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810aea6:	2b00      	cmp	r3, #0
 810aea8:	d1a5      	bne.n	810adf6 <__multiply+0x8a>
 810aeaa:	3f01      	subs	r7, #1
 810aeac:	e7a1      	b.n	810adf2 <__multiply+0x86>
 810aeae:	bf00      	nop
 810aeb0:	0810d6a4 	.word	0x0810d6a4
 810aeb4:	0810d734 	.word	0x0810d734

0810aeb8 <__pow5mult>:
 810aeb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810aebc:	4615      	mov	r5, r2
 810aebe:	f012 0203 	ands.w	r2, r2, #3
 810aec2:	4606      	mov	r6, r0
 810aec4:	460f      	mov	r7, r1
 810aec6:	d007      	beq.n	810aed8 <__pow5mult+0x20>
 810aec8:	4c25      	ldr	r4, [pc, #148]	; (810af60 <__pow5mult+0xa8>)
 810aeca:	3a01      	subs	r2, #1
 810aecc:	2300      	movs	r3, #0
 810aece:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810aed2:	f7ff fe51 	bl	810ab78 <__multadd>
 810aed6:	4607      	mov	r7, r0
 810aed8:	10ad      	asrs	r5, r5, #2
 810aeda:	d03d      	beq.n	810af58 <__pow5mult+0xa0>
 810aedc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 810aede:	b97c      	cbnz	r4, 810af00 <__pow5mult+0x48>
 810aee0:	2010      	movs	r0, #16
 810aee2:	f7ff fdb3 	bl	810aa4c <malloc>
 810aee6:	4602      	mov	r2, r0
 810aee8:	6270      	str	r0, [r6, #36]	; 0x24
 810aeea:	b928      	cbnz	r0, 810aef8 <__pow5mult+0x40>
 810aeec:	4b1d      	ldr	r3, [pc, #116]	; (810af64 <__pow5mult+0xac>)
 810aeee:	481e      	ldr	r0, [pc, #120]	; (810af68 <__pow5mult+0xb0>)
 810aef0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 810aef4:	f000 fd98 	bl	810ba28 <__assert_func>
 810aef8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810aefc:	6004      	str	r4, [r0, #0]
 810aefe:	60c4      	str	r4, [r0, #12]
 810af00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 810af04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810af08:	b94c      	cbnz	r4, 810af1e <__pow5mult+0x66>
 810af0a:	f240 2171 	movw	r1, #625	; 0x271
 810af0e:	4630      	mov	r0, r6
 810af10:	f7ff ff16 	bl	810ad40 <__i2b>
 810af14:	2300      	movs	r3, #0
 810af16:	f8c8 0008 	str.w	r0, [r8, #8]
 810af1a:	4604      	mov	r4, r0
 810af1c:	6003      	str	r3, [r0, #0]
 810af1e:	f04f 0900 	mov.w	r9, #0
 810af22:	07eb      	lsls	r3, r5, #31
 810af24:	d50a      	bpl.n	810af3c <__pow5mult+0x84>
 810af26:	4639      	mov	r1, r7
 810af28:	4622      	mov	r2, r4
 810af2a:	4630      	mov	r0, r6
 810af2c:	f7ff ff1e 	bl	810ad6c <__multiply>
 810af30:	4639      	mov	r1, r7
 810af32:	4680      	mov	r8, r0
 810af34:	4630      	mov	r0, r6
 810af36:	f7ff fdfd 	bl	810ab34 <_Bfree>
 810af3a:	4647      	mov	r7, r8
 810af3c:	106d      	asrs	r5, r5, #1
 810af3e:	d00b      	beq.n	810af58 <__pow5mult+0xa0>
 810af40:	6820      	ldr	r0, [r4, #0]
 810af42:	b938      	cbnz	r0, 810af54 <__pow5mult+0x9c>
 810af44:	4622      	mov	r2, r4
 810af46:	4621      	mov	r1, r4
 810af48:	4630      	mov	r0, r6
 810af4a:	f7ff ff0f 	bl	810ad6c <__multiply>
 810af4e:	6020      	str	r0, [r4, #0]
 810af50:	f8c0 9000 	str.w	r9, [r0]
 810af54:	4604      	mov	r4, r0
 810af56:	e7e4      	b.n	810af22 <__pow5mult+0x6a>
 810af58:	4638      	mov	r0, r7
 810af5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810af5e:	bf00      	nop
 810af60:	0810d888 	.word	0x0810d888
 810af64:	0810d62e 	.word	0x0810d62e
 810af68:	0810d734 	.word	0x0810d734

0810af6c <__lshift>:
 810af6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810af70:	460c      	mov	r4, r1
 810af72:	6849      	ldr	r1, [r1, #4]
 810af74:	6923      	ldr	r3, [r4, #16]
 810af76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810af7a:	68a3      	ldr	r3, [r4, #8]
 810af7c:	4607      	mov	r7, r0
 810af7e:	4691      	mov	r9, r2
 810af80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810af84:	f108 0601 	add.w	r6, r8, #1
 810af88:	42b3      	cmp	r3, r6
 810af8a:	db0b      	blt.n	810afa4 <__lshift+0x38>
 810af8c:	4638      	mov	r0, r7
 810af8e:	f7ff fd91 	bl	810aab4 <_Balloc>
 810af92:	4605      	mov	r5, r0
 810af94:	b948      	cbnz	r0, 810afaa <__lshift+0x3e>
 810af96:	4602      	mov	r2, r0
 810af98:	4b28      	ldr	r3, [pc, #160]	; (810b03c <__lshift+0xd0>)
 810af9a:	4829      	ldr	r0, [pc, #164]	; (810b040 <__lshift+0xd4>)
 810af9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 810afa0:	f000 fd42 	bl	810ba28 <__assert_func>
 810afa4:	3101      	adds	r1, #1
 810afa6:	005b      	lsls	r3, r3, #1
 810afa8:	e7ee      	b.n	810af88 <__lshift+0x1c>
 810afaa:	2300      	movs	r3, #0
 810afac:	f100 0114 	add.w	r1, r0, #20
 810afb0:	f100 0210 	add.w	r2, r0, #16
 810afb4:	4618      	mov	r0, r3
 810afb6:	4553      	cmp	r3, sl
 810afb8:	db33      	blt.n	810b022 <__lshift+0xb6>
 810afba:	6920      	ldr	r0, [r4, #16]
 810afbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810afc0:	f104 0314 	add.w	r3, r4, #20
 810afc4:	f019 091f 	ands.w	r9, r9, #31
 810afc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810afcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810afd0:	d02b      	beq.n	810b02a <__lshift+0xbe>
 810afd2:	f1c9 0e20 	rsb	lr, r9, #32
 810afd6:	468a      	mov	sl, r1
 810afd8:	2200      	movs	r2, #0
 810afda:	6818      	ldr	r0, [r3, #0]
 810afdc:	fa00 f009 	lsl.w	r0, r0, r9
 810afe0:	4302      	orrs	r2, r0
 810afe2:	f84a 2b04 	str.w	r2, [sl], #4
 810afe6:	f853 2b04 	ldr.w	r2, [r3], #4
 810afea:	459c      	cmp	ip, r3
 810afec:	fa22 f20e 	lsr.w	r2, r2, lr
 810aff0:	d8f3      	bhi.n	810afda <__lshift+0x6e>
 810aff2:	ebac 0304 	sub.w	r3, ip, r4
 810aff6:	3b15      	subs	r3, #21
 810aff8:	f023 0303 	bic.w	r3, r3, #3
 810affc:	3304      	adds	r3, #4
 810affe:	f104 0015 	add.w	r0, r4, #21
 810b002:	4584      	cmp	ip, r0
 810b004:	bf38      	it	cc
 810b006:	2304      	movcc	r3, #4
 810b008:	50ca      	str	r2, [r1, r3]
 810b00a:	b10a      	cbz	r2, 810b010 <__lshift+0xa4>
 810b00c:	f108 0602 	add.w	r6, r8, #2
 810b010:	3e01      	subs	r6, #1
 810b012:	4638      	mov	r0, r7
 810b014:	612e      	str	r6, [r5, #16]
 810b016:	4621      	mov	r1, r4
 810b018:	f7ff fd8c 	bl	810ab34 <_Bfree>
 810b01c:	4628      	mov	r0, r5
 810b01e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b022:	f842 0f04 	str.w	r0, [r2, #4]!
 810b026:	3301      	adds	r3, #1
 810b028:	e7c5      	b.n	810afb6 <__lshift+0x4a>
 810b02a:	3904      	subs	r1, #4
 810b02c:	f853 2b04 	ldr.w	r2, [r3], #4
 810b030:	f841 2f04 	str.w	r2, [r1, #4]!
 810b034:	459c      	cmp	ip, r3
 810b036:	d8f9      	bhi.n	810b02c <__lshift+0xc0>
 810b038:	e7ea      	b.n	810b010 <__lshift+0xa4>
 810b03a:	bf00      	nop
 810b03c:	0810d6a4 	.word	0x0810d6a4
 810b040:	0810d734 	.word	0x0810d734

0810b044 <__mcmp>:
 810b044:	b530      	push	{r4, r5, lr}
 810b046:	6902      	ldr	r2, [r0, #16]
 810b048:	690c      	ldr	r4, [r1, #16]
 810b04a:	1b12      	subs	r2, r2, r4
 810b04c:	d10e      	bne.n	810b06c <__mcmp+0x28>
 810b04e:	f100 0314 	add.w	r3, r0, #20
 810b052:	3114      	adds	r1, #20
 810b054:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810b058:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810b05c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810b060:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810b064:	42a5      	cmp	r5, r4
 810b066:	d003      	beq.n	810b070 <__mcmp+0x2c>
 810b068:	d305      	bcc.n	810b076 <__mcmp+0x32>
 810b06a:	2201      	movs	r2, #1
 810b06c:	4610      	mov	r0, r2
 810b06e:	bd30      	pop	{r4, r5, pc}
 810b070:	4283      	cmp	r3, r0
 810b072:	d3f3      	bcc.n	810b05c <__mcmp+0x18>
 810b074:	e7fa      	b.n	810b06c <__mcmp+0x28>
 810b076:	f04f 32ff 	mov.w	r2, #4294967295
 810b07a:	e7f7      	b.n	810b06c <__mcmp+0x28>

0810b07c <__mdiff>:
 810b07c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b080:	460c      	mov	r4, r1
 810b082:	4606      	mov	r6, r0
 810b084:	4611      	mov	r1, r2
 810b086:	4620      	mov	r0, r4
 810b088:	4617      	mov	r7, r2
 810b08a:	f7ff ffdb 	bl	810b044 <__mcmp>
 810b08e:	1e05      	subs	r5, r0, #0
 810b090:	d110      	bne.n	810b0b4 <__mdiff+0x38>
 810b092:	4629      	mov	r1, r5
 810b094:	4630      	mov	r0, r6
 810b096:	f7ff fd0d 	bl	810aab4 <_Balloc>
 810b09a:	b930      	cbnz	r0, 810b0aa <__mdiff+0x2e>
 810b09c:	4b39      	ldr	r3, [pc, #228]	; (810b184 <__mdiff+0x108>)
 810b09e:	4602      	mov	r2, r0
 810b0a0:	f240 2132 	movw	r1, #562	; 0x232
 810b0a4:	4838      	ldr	r0, [pc, #224]	; (810b188 <__mdiff+0x10c>)
 810b0a6:	f000 fcbf 	bl	810ba28 <__assert_func>
 810b0aa:	2301      	movs	r3, #1
 810b0ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810b0b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b0b4:	bfa4      	itt	ge
 810b0b6:	463b      	movge	r3, r7
 810b0b8:	4627      	movge	r7, r4
 810b0ba:	4630      	mov	r0, r6
 810b0bc:	6879      	ldr	r1, [r7, #4]
 810b0be:	bfa6      	itte	ge
 810b0c0:	461c      	movge	r4, r3
 810b0c2:	2500      	movge	r5, #0
 810b0c4:	2501      	movlt	r5, #1
 810b0c6:	f7ff fcf5 	bl	810aab4 <_Balloc>
 810b0ca:	b920      	cbnz	r0, 810b0d6 <__mdiff+0x5a>
 810b0cc:	4b2d      	ldr	r3, [pc, #180]	; (810b184 <__mdiff+0x108>)
 810b0ce:	4602      	mov	r2, r0
 810b0d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 810b0d4:	e7e6      	b.n	810b0a4 <__mdiff+0x28>
 810b0d6:	693e      	ldr	r6, [r7, #16]
 810b0d8:	60c5      	str	r5, [r0, #12]
 810b0da:	6925      	ldr	r5, [r4, #16]
 810b0dc:	f107 0114 	add.w	r1, r7, #20
 810b0e0:	f104 0914 	add.w	r9, r4, #20
 810b0e4:	f100 0e14 	add.w	lr, r0, #20
 810b0e8:	f107 0210 	add.w	r2, r7, #16
 810b0ec:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 810b0f0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 810b0f4:	46f2      	mov	sl, lr
 810b0f6:	2700      	movs	r7, #0
 810b0f8:	f859 3b04 	ldr.w	r3, [r9], #4
 810b0fc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810b100:	fa1f f883 	uxth.w	r8, r3
 810b104:	fa17 f78b 	uxtah	r7, r7, fp
 810b108:	0c1b      	lsrs	r3, r3, #16
 810b10a:	eba7 0808 	sub.w	r8, r7, r8
 810b10e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810b112:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810b116:	fa1f f888 	uxth.w	r8, r8
 810b11a:	141f      	asrs	r7, r3, #16
 810b11c:	454d      	cmp	r5, r9
 810b11e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810b122:	f84a 3b04 	str.w	r3, [sl], #4
 810b126:	d8e7      	bhi.n	810b0f8 <__mdiff+0x7c>
 810b128:	1b2b      	subs	r3, r5, r4
 810b12a:	3b15      	subs	r3, #21
 810b12c:	f023 0303 	bic.w	r3, r3, #3
 810b130:	3304      	adds	r3, #4
 810b132:	3415      	adds	r4, #21
 810b134:	42a5      	cmp	r5, r4
 810b136:	bf38      	it	cc
 810b138:	2304      	movcc	r3, #4
 810b13a:	4419      	add	r1, r3
 810b13c:	4473      	add	r3, lr
 810b13e:	469e      	mov	lr, r3
 810b140:	460d      	mov	r5, r1
 810b142:	4565      	cmp	r5, ip
 810b144:	d30e      	bcc.n	810b164 <__mdiff+0xe8>
 810b146:	f10c 0203 	add.w	r2, ip, #3
 810b14a:	1a52      	subs	r2, r2, r1
 810b14c:	f022 0203 	bic.w	r2, r2, #3
 810b150:	3903      	subs	r1, #3
 810b152:	458c      	cmp	ip, r1
 810b154:	bf38      	it	cc
 810b156:	2200      	movcc	r2, #0
 810b158:	441a      	add	r2, r3
 810b15a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 810b15e:	b17b      	cbz	r3, 810b180 <__mdiff+0x104>
 810b160:	6106      	str	r6, [r0, #16]
 810b162:	e7a5      	b.n	810b0b0 <__mdiff+0x34>
 810b164:	f855 8b04 	ldr.w	r8, [r5], #4
 810b168:	fa17 f488 	uxtah	r4, r7, r8
 810b16c:	1422      	asrs	r2, r4, #16
 810b16e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 810b172:	b2a4      	uxth	r4, r4
 810b174:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810b178:	f84e 4b04 	str.w	r4, [lr], #4
 810b17c:	1417      	asrs	r7, r2, #16
 810b17e:	e7e0      	b.n	810b142 <__mdiff+0xc6>
 810b180:	3e01      	subs	r6, #1
 810b182:	e7ea      	b.n	810b15a <__mdiff+0xde>
 810b184:	0810d6a4 	.word	0x0810d6a4
 810b188:	0810d734 	.word	0x0810d734

0810b18c <__ulp>:
 810b18c:	b082      	sub	sp, #8
 810b18e:	ed8d 0b00 	vstr	d0, [sp]
 810b192:	9b01      	ldr	r3, [sp, #4]
 810b194:	4912      	ldr	r1, [pc, #72]	; (810b1e0 <__ulp+0x54>)
 810b196:	4019      	ands	r1, r3
 810b198:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 810b19c:	2900      	cmp	r1, #0
 810b19e:	dd05      	ble.n	810b1ac <__ulp+0x20>
 810b1a0:	2200      	movs	r2, #0
 810b1a2:	460b      	mov	r3, r1
 810b1a4:	ec43 2b10 	vmov	d0, r2, r3
 810b1a8:	b002      	add	sp, #8
 810b1aa:	4770      	bx	lr
 810b1ac:	4249      	negs	r1, r1
 810b1ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 810b1b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 810b1b6:	f04f 0200 	mov.w	r2, #0
 810b1ba:	f04f 0300 	mov.w	r3, #0
 810b1be:	da04      	bge.n	810b1ca <__ulp+0x3e>
 810b1c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 810b1c4:	fa41 f300 	asr.w	r3, r1, r0
 810b1c8:	e7ec      	b.n	810b1a4 <__ulp+0x18>
 810b1ca:	f1a0 0114 	sub.w	r1, r0, #20
 810b1ce:	291e      	cmp	r1, #30
 810b1d0:	bfda      	itte	le
 810b1d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 810b1d6:	fa20 f101 	lsrle.w	r1, r0, r1
 810b1da:	2101      	movgt	r1, #1
 810b1dc:	460a      	mov	r2, r1
 810b1de:	e7e1      	b.n	810b1a4 <__ulp+0x18>
 810b1e0:	7ff00000 	.word	0x7ff00000

0810b1e4 <__b2d>:
 810b1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b1e6:	6905      	ldr	r5, [r0, #16]
 810b1e8:	f100 0714 	add.w	r7, r0, #20
 810b1ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 810b1f0:	1f2e      	subs	r6, r5, #4
 810b1f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 810b1f6:	4620      	mov	r0, r4
 810b1f8:	f7ff fd52 	bl	810aca0 <__hi0bits>
 810b1fc:	f1c0 0320 	rsb	r3, r0, #32
 810b200:	280a      	cmp	r0, #10
 810b202:	f8df c07c 	ldr.w	ip, [pc, #124]	; 810b280 <__b2d+0x9c>
 810b206:	600b      	str	r3, [r1, #0]
 810b208:	dc14      	bgt.n	810b234 <__b2d+0x50>
 810b20a:	f1c0 0e0b 	rsb	lr, r0, #11
 810b20e:	fa24 f10e 	lsr.w	r1, r4, lr
 810b212:	42b7      	cmp	r7, r6
 810b214:	ea41 030c 	orr.w	r3, r1, ip
 810b218:	bf34      	ite	cc
 810b21a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b21e:	2100      	movcs	r1, #0
 810b220:	3015      	adds	r0, #21
 810b222:	fa04 f000 	lsl.w	r0, r4, r0
 810b226:	fa21 f10e 	lsr.w	r1, r1, lr
 810b22a:	ea40 0201 	orr.w	r2, r0, r1
 810b22e:	ec43 2b10 	vmov	d0, r2, r3
 810b232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810b234:	42b7      	cmp	r7, r6
 810b236:	bf3a      	itte	cc
 810b238:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 810b23c:	f1a5 0608 	subcc.w	r6, r5, #8
 810b240:	2100      	movcs	r1, #0
 810b242:	380b      	subs	r0, #11
 810b244:	d017      	beq.n	810b276 <__b2d+0x92>
 810b246:	f1c0 0c20 	rsb	ip, r0, #32
 810b24a:	fa04 f500 	lsl.w	r5, r4, r0
 810b24e:	42be      	cmp	r6, r7
 810b250:	fa21 f40c 	lsr.w	r4, r1, ip
 810b254:	ea45 0504 	orr.w	r5, r5, r4
 810b258:	bf8c      	ite	hi
 810b25a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 810b25e:	2400      	movls	r4, #0
 810b260:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 810b264:	fa01 f000 	lsl.w	r0, r1, r0
 810b268:	fa24 f40c 	lsr.w	r4, r4, ip
 810b26c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810b270:	ea40 0204 	orr.w	r2, r0, r4
 810b274:	e7db      	b.n	810b22e <__b2d+0x4a>
 810b276:	ea44 030c 	orr.w	r3, r4, ip
 810b27a:	460a      	mov	r2, r1
 810b27c:	e7d7      	b.n	810b22e <__b2d+0x4a>
 810b27e:	bf00      	nop
 810b280:	3ff00000 	.word	0x3ff00000

0810b284 <__d2b>:
 810b284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810b288:	4689      	mov	r9, r1
 810b28a:	2101      	movs	r1, #1
 810b28c:	ec57 6b10 	vmov	r6, r7, d0
 810b290:	4690      	mov	r8, r2
 810b292:	f7ff fc0f 	bl	810aab4 <_Balloc>
 810b296:	4604      	mov	r4, r0
 810b298:	b930      	cbnz	r0, 810b2a8 <__d2b+0x24>
 810b29a:	4602      	mov	r2, r0
 810b29c:	4b25      	ldr	r3, [pc, #148]	; (810b334 <__d2b+0xb0>)
 810b29e:	4826      	ldr	r0, [pc, #152]	; (810b338 <__d2b+0xb4>)
 810b2a0:	f240 310a 	movw	r1, #778	; 0x30a
 810b2a4:	f000 fbc0 	bl	810ba28 <__assert_func>
 810b2a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 810b2ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 810b2b0:	bb35      	cbnz	r5, 810b300 <__d2b+0x7c>
 810b2b2:	2e00      	cmp	r6, #0
 810b2b4:	9301      	str	r3, [sp, #4]
 810b2b6:	d028      	beq.n	810b30a <__d2b+0x86>
 810b2b8:	4668      	mov	r0, sp
 810b2ba:	9600      	str	r6, [sp, #0]
 810b2bc:	f7ff fd10 	bl	810ace0 <__lo0bits>
 810b2c0:	9900      	ldr	r1, [sp, #0]
 810b2c2:	b300      	cbz	r0, 810b306 <__d2b+0x82>
 810b2c4:	9a01      	ldr	r2, [sp, #4]
 810b2c6:	f1c0 0320 	rsb	r3, r0, #32
 810b2ca:	fa02 f303 	lsl.w	r3, r2, r3
 810b2ce:	430b      	orrs	r3, r1
 810b2d0:	40c2      	lsrs	r2, r0
 810b2d2:	6163      	str	r3, [r4, #20]
 810b2d4:	9201      	str	r2, [sp, #4]
 810b2d6:	9b01      	ldr	r3, [sp, #4]
 810b2d8:	61a3      	str	r3, [r4, #24]
 810b2da:	2b00      	cmp	r3, #0
 810b2dc:	bf14      	ite	ne
 810b2de:	2202      	movne	r2, #2
 810b2e0:	2201      	moveq	r2, #1
 810b2e2:	6122      	str	r2, [r4, #16]
 810b2e4:	b1d5      	cbz	r5, 810b31c <__d2b+0x98>
 810b2e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810b2ea:	4405      	add	r5, r0
 810b2ec:	f8c9 5000 	str.w	r5, [r9]
 810b2f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810b2f4:	f8c8 0000 	str.w	r0, [r8]
 810b2f8:	4620      	mov	r0, r4
 810b2fa:	b003      	add	sp, #12
 810b2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810b300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810b304:	e7d5      	b.n	810b2b2 <__d2b+0x2e>
 810b306:	6161      	str	r1, [r4, #20]
 810b308:	e7e5      	b.n	810b2d6 <__d2b+0x52>
 810b30a:	a801      	add	r0, sp, #4
 810b30c:	f7ff fce8 	bl	810ace0 <__lo0bits>
 810b310:	9b01      	ldr	r3, [sp, #4]
 810b312:	6163      	str	r3, [r4, #20]
 810b314:	2201      	movs	r2, #1
 810b316:	6122      	str	r2, [r4, #16]
 810b318:	3020      	adds	r0, #32
 810b31a:	e7e3      	b.n	810b2e4 <__d2b+0x60>
 810b31c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810b320:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810b324:	f8c9 0000 	str.w	r0, [r9]
 810b328:	6918      	ldr	r0, [r3, #16]
 810b32a:	f7ff fcb9 	bl	810aca0 <__hi0bits>
 810b32e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810b332:	e7df      	b.n	810b2f4 <__d2b+0x70>
 810b334:	0810d6a4 	.word	0x0810d6a4
 810b338:	0810d734 	.word	0x0810d734

0810b33c <__ratio>:
 810b33c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b340:	4688      	mov	r8, r1
 810b342:	4669      	mov	r1, sp
 810b344:	4681      	mov	r9, r0
 810b346:	f7ff ff4d 	bl	810b1e4 <__b2d>
 810b34a:	a901      	add	r1, sp, #4
 810b34c:	4640      	mov	r0, r8
 810b34e:	ec55 4b10 	vmov	r4, r5, d0
 810b352:	f7ff ff47 	bl	810b1e4 <__b2d>
 810b356:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810b35a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810b35e:	eba3 0c02 	sub.w	ip, r3, r2
 810b362:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b366:	1a9b      	subs	r3, r3, r2
 810b368:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810b36c:	ec51 0b10 	vmov	r0, r1, d0
 810b370:	2b00      	cmp	r3, #0
 810b372:	bfd6      	itet	le
 810b374:	460a      	movle	r2, r1
 810b376:	462a      	movgt	r2, r5
 810b378:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810b37c:	468b      	mov	fp, r1
 810b37e:	462f      	mov	r7, r5
 810b380:	bfd4      	ite	le
 810b382:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810b386:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810b38a:	4620      	mov	r0, r4
 810b38c:	ee10 2a10 	vmov	r2, s0
 810b390:	465b      	mov	r3, fp
 810b392:	4639      	mov	r1, r7
 810b394:	f7f5 fae2 	bl	810095c <__aeabi_ddiv>
 810b398:	ec41 0b10 	vmov	d0, r0, r1
 810b39c:	b003      	add	sp, #12
 810b39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810b3a2 <__copybits>:
 810b3a2:	3901      	subs	r1, #1
 810b3a4:	b570      	push	{r4, r5, r6, lr}
 810b3a6:	1149      	asrs	r1, r1, #5
 810b3a8:	6914      	ldr	r4, [r2, #16]
 810b3aa:	3101      	adds	r1, #1
 810b3ac:	f102 0314 	add.w	r3, r2, #20
 810b3b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810b3b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810b3b8:	1f05      	subs	r5, r0, #4
 810b3ba:	42a3      	cmp	r3, r4
 810b3bc:	d30c      	bcc.n	810b3d8 <__copybits+0x36>
 810b3be:	1aa3      	subs	r3, r4, r2
 810b3c0:	3b11      	subs	r3, #17
 810b3c2:	f023 0303 	bic.w	r3, r3, #3
 810b3c6:	3211      	adds	r2, #17
 810b3c8:	42a2      	cmp	r2, r4
 810b3ca:	bf88      	it	hi
 810b3cc:	2300      	movhi	r3, #0
 810b3ce:	4418      	add	r0, r3
 810b3d0:	2300      	movs	r3, #0
 810b3d2:	4288      	cmp	r0, r1
 810b3d4:	d305      	bcc.n	810b3e2 <__copybits+0x40>
 810b3d6:	bd70      	pop	{r4, r5, r6, pc}
 810b3d8:	f853 6b04 	ldr.w	r6, [r3], #4
 810b3dc:	f845 6f04 	str.w	r6, [r5, #4]!
 810b3e0:	e7eb      	b.n	810b3ba <__copybits+0x18>
 810b3e2:	f840 3b04 	str.w	r3, [r0], #4
 810b3e6:	e7f4      	b.n	810b3d2 <__copybits+0x30>

0810b3e8 <__any_on>:
 810b3e8:	f100 0214 	add.w	r2, r0, #20
 810b3ec:	6900      	ldr	r0, [r0, #16]
 810b3ee:	114b      	asrs	r3, r1, #5
 810b3f0:	4298      	cmp	r0, r3
 810b3f2:	b510      	push	{r4, lr}
 810b3f4:	db11      	blt.n	810b41a <__any_on+0x32>
 810b3f6:	dd0a      	ble.n	810b40e <__any_on+0x26>
 810b3f8:	f011 011f 	ands.w	r1, r1, #31
 810b3fc:	d007      	beq.n	810b40e <__any_on+0x26>
 810b3fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810b402:	fa24 f001 	lsr.w	r0, r4, r1
 810b406:	fa00 f101 	lsl.w	r1, r0, r1
 810b40a:	428c      	cmp	r4, r1
 810b40c:	d10b      	bne.n	810b426 <__any_on+0x3e>
 810b40e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b412:	4293      	cmp	r3, r2
 810b414:	d803      	bhi.n	810b41e <__any_on+0x36>
 810b416:	2000      	movs	r0, #0
 810b418:	bd10      	pop	{r4, pc}
 810b41a:	4603      	mov	r3, r0
 810b41c:	e7f7      	b.n	810b40e <__any_on+0x26>
 810b41e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810b422:	2900      	cmp	r1, #0
 810b424:	d0f5      	beq.n	810b412 <__any_on+0x2a>
 810b426:	2001      	movs	r0, #1
 810b428:	e7f6      	b.n	810b418 <__any_on+0x30>

0810b42a <_calloc_r>:
 810b42a:	b513      	push	{r0, r1, r4, lr}
 810b42c:	434a      	muls	r2, r1
 810b42e:	4611      	mov	r1, r2
 810b430:	9201      	str	r2, [sp, #4]
 810b432:	f7fc f873 	bl	810751c <_malloc_r>
 810b436:	4604      	mov	r4, r0
 810b438:	b118      	cbz	r0, 810b442 <_calloc_r+0x18>
 810b43a:	9a01      	ldr	r2, [sp, #4]
 810b43c:	2100      	movs	r1, #0
 810b43e:	f7fc f814 	bl	810746a <memset>
 810b442:	4620      	mov	r0, r4
 810b444:	b002      	add	sp, #8
 810b446:	bd10      	pop	{r4, pc}

0810b448 <__ssputs_r>:
 810b448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810b44c:	688e      	ldr	r6, [r1, #8]
 810b44e:	429e      	cmp	r6, r3
 810b450:	4682      	mov	sl, r0
 810b452:	460c      	mov	r4, r1
 810b454:	4690      	mov	r8, r2
 810b456:	461f      	mov	r7, r3
 810b458:	d838      	bhi.n	810b4cc <__ssputs_r+0x84>
 810b45a:	898a      	ldrh	r2, [r1, #12]
 810b45c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810b460:	d032      	beq.n	810b4c8 <__ssputs_r+0x80>
 810b462:	6825      	ldr	r5, [r4, #0]
 810b464:	6909      	ldr	r1, [r1, #16]
 810b466:	eba5 0901 	sub.w	r9, r5, r1
 810b46a:	6965      	ldr	r5, [r4, #20]
 810b46c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810b470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810b474:	3301      	adds	r3, #1
 810b476:	444b      	add	r3, r9
 810b478:	106d      	asrs	r5, r5, #1
 810b47a:	429d      	cmp	r5, r3
 810b47c:	bf38      	it	cc
 810b47e:	461d      	movcc	r5, r3
 810b480:	0553      	lsls	r3, r2, #21
 810b482:	d531      	bpl.n	810b4e8 <__ssputs_r+0xa0>
 810b484:	4629      	mov	r1, r5
 810b486:	f7fc f849 	bl	810751c <_malloc_r>
 810b48a:	4606      	mov	r6, r0
 810b48c:	b950      	cbnz	r0, 810b4a4 <__ssputs_r+0x5c>
 810b48e:	230c      	movs	r3, #12
 810b490:	f8ca 3000 	str.w	r3, [sl]
 810b494:	89a3      	ldrh	r3, [r4, #12]
 810b496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810b49a:	81a3      	strh	r3, [r4, #12]
 810b49c:	f04f 30ff 	mov.w	r0, #4294967295
 810b4a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810b4a4:	6921      	ldr	r1, [r4, #16]
 810b4a6:	464a      	mov	r2, r9
 810b4a8:	f7ff faea 	bl	810aa80 <memcpy>
 810b4ac:	89a3      	ldrh	r3, [r4, #12]
 810b4ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810b4b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810b4b6:	81a3      	strh	r3, [r4, #12]
 810b4b8:	6126      	str	r6, [r4, #16]
 810b4ba:	6165      	str	r5, [r4, #20]
 810b4bc:	444e      	add	r6, r9
 810b4be:	eba5 0509 	sub.w	r5, r5, r9
 810b4c2:	6026      	str	r6, [r4, #0]
 810b4c4:	60a5      	str	r5, [r4, #8]
 810b4c6:	463e      	mov	r6, r7
 810b4c8:	42be      	cmp	r6, r7
 810b4ca:	d900      	bls.n	810b4ce <__ssputs_r+0x86>
 810b4cc:	463e      	mov	r6, r7
 810b4ce:	4632      	mov	r2, r6
 810b4d0:	6820      	ldr	r0, [r4, #0]
 810b4d2:	4641      	mov	r1, r8
 810b4d4:	f000 fafa 	bl	810bacc <memmove>
 810b4d8:	68a3      	ldr	r3, [r4, #8]
 810b4da:	6822      	ldr	r2, [r4, #0]
 810b4dc:	1b9b      	subs	r3, r3, r6
 810b4de:	4432      	add	r2, r6
 810b4e0:	60a3      	str	r3, [r4, #8]
 810b4e2:	6022      	str	r2, [r4, #0]
 810b4e4:	2000      	movs	r0, #0
 810b4e6:	e7db      	b.n	810b4a0 <__ssputs_r+0x58>
 810b4e8:	462a      	mov	r2, r5
 810b4ea:	f000 fb09 	bl	810bb00 <_realloc_r>
 810b4ee:	4606      	mov	r6, r0
 810b4f0:	2800      	cmp	r0, #0
 810b4f2:	d1e1      	bne.n	810b4b8 <__ssputs_r+0x70>
 810b4f4:	6921      	ldr	r1, [r4, #16]
 810b4f6:	4650      	mov	r0, sl
 810b4f8:	f7fb ffc0 	bl	810747c <_free_r>
 810b4fc:	e7c7      	b.n	810b48e <__ssputs_r+0x46>
	...

0810b500 <_svfiprintf_r>:
 810b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b504:	4698      	mov	r8, r3
 810b506:	898b      	ldrh	r3, [r1, #12]
 810b508:	061b      	lsls	r3, r3, #24
 810b50a:	b09d      	sub	sp, #116	; 0x74
 810b50c:	4607      	mov	r7, r0
 810b50e:	460d      	mov	r5, r1
 810b510:	4614      	mov	r4, r2
 810b512:	d50e      	bpl.n	810b532 <_svfiprintf_r+0x32>
 810b514:	690b      	ldr	r3, [r1, #16]
 810b516:	b963      	cbnz	r3, 810b532 <_svfiprintf_r+0x32>
 810b518:	2140      	movs	r1, #64	; 0x40
 810b51a:	f7fb ffff 	bl	810751c <_malloc_r>
 810b51e:	6028      	str	r0, [r5, #0]
 810b520:	6128      	str	r0, [r5, #16]
 810b522:	b920      	cbnz	r0, 810b52e <_svfiprintf_r+0x2e>
 810b524:	230c      	movs	r3, #12
 810b526:	603b      	str	r3, [r7, #0]
 810b528:	f04f 30ff 	mov.w	r0, #4294967295
 810b52c:	e0d1      	b.n	810b6d2 <_svfiprintf_r+0x1d2>
 810b52e:	2340      	movs	r3, #64	; 0x40
 810b530:	616b      	str	r3, [r5, #20]
 810b532:	2300      	movs	r3, #0
 810b534:	9309      	str	r3, [sp, #36]	; 0x24
 810b536:	2320      	movs	r3, #32
 810b538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b53c:	f8cd 800c 	str.w	r8, [sp, #12]
 810b540:	2330      	movs	r3, #48	; 0x30
 810b542:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 810b6ec <_svfiprintf_r+0x1ec>
 810b546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810b54a:	f04f 0901 	mov.w	r9, #1
 810b54e:	4623      	mov	r3, r4
 810b550:	469a      	mov	sl, r3
 810b552:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b556:	b10a      	cbz	r2, 810b55c <_svfiprintf_r+0x5c>
 810b558:	2a25      	cmp	r2, #37	; 0x25
 810b55a:	d1f9      	bne.n	810b550 <_svfiprintf_r+0x50>
 810b55c:	ebba 0b04 	subs.w	fp, sl, r4
 810b560:	d00b      	beq.n	810b57a <_svfiprintf_r+0x7a>
 810b562:	465b      	mov	r3, fp
 810b564:	4622      	mov	r2, r4
 810b566:	4629      	mov	r1, r5
 810b568:	4638      	mov	r0, r7
 810b56a:	f7ff ff6d 	bl	810b448 <__ssputs_r>
 810b56e:	3001      	adds	r0, #1
 810b570:	f000 80aa 	beq.w	810b6c8 <_svfiprintf_r+0x1c8>
 810b574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b576:	445a      	add	r2, fp
 810b578:	9209      	str	r2, [sp, #36]	; 0x24
 810b57a:	f89a 3000 	ldrb.w	r3, [sl]
 810b57e:	2b00      	cmp	r3, #0
 810b580:	f000 80a2 	beq.w	810b6c8 <_svfiprintf_r+0x1c8>
 810b584:	2300      	movs	r3, #0
 810b586:	f04f 32ff 	mov.w	r2, #4294967295
 810b58a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b58e:	f10a 0a01 	add.w	sl, sl, #1
 810b592:	9304      	str	r3, [sp, #16]
 810b594:	9307      	str	r3, [sp, #28]
 810b596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810b59a:	931a      	str	r3, [sp, #104]	; 0x68
 810b59c:	4654      	mov	r4, sl
 810b59e:	2205      	movs	r2, #5
 810b5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b5a4:	4851      	ldr	r0, [pc, #324]	; (810b6ec <_svfiprintf_r+0x1ec>)
 810b5a6:	f7f4 fea3 	bl	81002f0 <memchr>
 810b5aa:	9a04      	ldr	r2, [sp, #16]
 810b5ac:	b9d8      	cbnz	r0, 810b5e6 <_svfiprintf_r+0xe6>
 810b5ae:	06d0      	lsls	r0, r2, #27
 810b5b0:	bf44      	itt	mi
 810b5b2:	2320      	movmi	r3, #32
 810b5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b5b8:	0711      	lsls	r1, r2, #28
 810b5ba:	bf44      	itt	mi
 810b5bc:	232b      	movmi	r3, #43	; 0x2b
 810b5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b5c2:	f89a 3000 	ldrb.w	r3, [sl]
 810b5c6:	2b2a      	cmp	r3, #42	; 0x2a
 810b5c8:	d015      	beq.n	810b5f6 <_svfiprintf_r+0xf6>
 810b5ca:	9a07      	ldr	r2, [sp, #28]
 810b5cc:	4654      	mov	r4, sl
 810b5ce:	2000      	movs	r0, #0
 810b5d0:	f04f 0c0a 	mov.w	ip, #10
 810b5d4:	4621      	mov	r1, r4
 810b5d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b5da:	3b30      	subs	r3, #48	; 0x30
 810b5dc:	2b09      	cmp	r3, #9
 810b5de:	d94e      	bls.n	810b67e <_svfiprintf_r+0x17e>
 810b5e0:	b1b0      	cbz	r0, 810b610 <_svfiprintf_r+0x110>
 810b5e2:	9207      	str	r2, [sp, #28]
 810b5e4:	e014      	b.n	810b610 <_svfiprintf_r+0x110>
 810b5e6:	eba0 0308 	sub.w	r3, r0, r8
 810b5ea:	fa09 f303 	lsl.w	r3, r9, r3
 810b5ee:	4313      	orrs	r3, r2
 810b5f0:	9304      	str	r3, [sp, #16]
 810b5f2:	46a2      	mov	sl, r4
 810b5f4:	e7d2      	b.n	810b59c <_svfiprintf_r+0x9c>
 810b5f6:	9b03      	ldr	r3, [sp, #12]
 810b5f8:	1d19      	adds	r1, r3, #4
 810b5fa:	681b      	ldr	r3, [r3, #0]
 810b5fc:	9103      	str	r1, [sp, #12]
 810b5fe:	2b00      	cmp	r3, #0
 810b600:	bfbb      	ittet	lt
 810b602:	425b      	neglt	r3, r3
 810b604:	f042 0202 	orrlt.w	r2, r2, #2
 810b608:	9307      	strge	r3, [sp, #28]
 810b60a:	9307      	strlt	r3, [sp, #28]
 810b60c:	bfb8      	it	lt
 810b60e:	9204      	strlt	r2, [sp, #16]
 810b610:	7823      	ldrb	r3, [r4, #0]
 810b612:	2b2e      	cmp	r3, #46	; 0x2e
 810b614:	d10c      	bne.n	810b630 <_svfiprintf_r+0x130>
 810b616:	7863      	ldrb	r3, [r4, #1]
 810b618:	2b2a      	cmp	r3, #42	; 0x2a
 810b61a:	d135      	bne.n	810b688 <_svfiprintf_r+0x188>
 810b61c:	9b03      	ldr	r3, [sp, #12]
 810b61e:	1d1a      	adds	r2, r3, #4
 810b620:	681b      	ldr	r3, [r3, #0]
 810b622:	9203      	str	r2, [sp, #12]
 810b624:	2b00      	cmp	r3, #0
 810b626:	bfb8      	it	lt
 810b628:	f04f 33ff 	movlt.w	r3, #4294967295
 810b62c:	3402      	adds	r4, #2
 810b62e:	9305      	str	r3, [sp, #20]
 810b630:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 810b6fc <_svfiprintf_r+0x1fc>
 810b634:	7821      	ldrb	r1, [r4, #0]
 810b636:	2203      	movs	r2, #3
 810b638:	4650      	mov	r0, sl
 810b63a:	f7f4 fe59 	bl	81002f0 <memchr>
 810b63e:	b140      	cbz	r0, 810b652 <_svfiprintf_r+0x152>
 810b640:	2340      	movs	r3, #64	; 0x40
 810b642:	eba0 000a 	sub.w	r0, r0, sl
 810b646:	fa03 f000 	lsl.w	r0, r3, r0
 810b64a:	9b04      	ldr	r3, [sp, #16]
 810b64c:	4303      	orrs	r3, r0
 810b64e:	3401      	adds	r4, #1
 810b650:	9304      	str	r3, [sp, #16]
 810b652:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b656:	4826      	ldr	r0, [pc, #152]	; (810b6f0 <_svfiprintf_r+0x1f0>)
 810b658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b65c:	2206      	movs	r2, #6
 810b65e:	f7f4 fe47 	bl	81002f0 <memchr>
 810b662:	2800      	cmp	r0, #0
 810b664:	d038      	beq.n	810b6d8 <_svfiprintf_r+0x1d8>
 810b666:	4b23      	ldr	r3, [pc, #140]	; (810b6f4 <_svfiprintf_r+0x1f4>)
 810b668:	bb1b      	cbnz	r3, 810b6b2 <_svfiprintf_r+0x1b2>
 810b66a:	9b03      	ldr	r3, [sp, #12]
 810b66c:	3307      	adds	r3, #7
 810b66e:	f023 0307 	bic.w	r3, r3, #7
 810b672:	3308      	adds	r3, #8
 810b674:	9303      	str	r3, [sp, #12]
 810b676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b678:	4433      	add	r3, r6
 810b67a:	9309      	str	r3, [sp, #36]	; 0x24
 810b67c:	e767      	b.n	810b54e <_svfiprintf_r+0x4e>
 810b67e:	fb0c 3202 	mla	r2, ip, r2, r3
 810b682:	460c      	mov	r4, r1
 810b684:	2001      	movs	r0, #1
 810b686:	e7a5      	b.n	810b5d4 <_svfiprintf_r+0xd4>
 810b688:	2300      	movs	r3, #0
 810b68a:	3401      	adds	r4, #1
 810b68c:	9305      	str	r3, [sp, #20]
 810b68e:	4619      	mov	r1, r3
 810b690:	f04f 0c0a 	mov.w	ip, #10
 810b694:	4620      	mov	r0, r4
 810b696:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b69a:	3a30      	subs	r2, #48	; 0x30
 810b69c:	2a09      	cmp	r2, #9
 810b69e:	d903      	bls.n	810b6a8 <_svfiprintf_r+0x1a8>
 810b6a0:	2b00      	cmp	r3, #0
 810b6a2:	d0c5      	beq.n	810b630 <_svfiprintf_r+0x130>
 810b6a4:	9105      	str	r1, [sp, #20]
 810b6a6:	e7c3      	b.n	810b630 <_svfiprintf_r+0x130>
 810b6a8:	fb0c 2101 	mla	r1, ip, r1, r2
 810b6ac:	4604      	mov	r4, r0
 810b6ae:	2301      	movs	r3, #1
 810b6b0:	e7f0      	b.n	810b694 <_svfiprintf_r+0x194>
 810b6b2:	ab03      	add	r3, sp, #12
 810b6b4:	9300      	str	r3, [sp, #0]
 810b6b6:	462a      	mov	r2, r5
 810b6b8:	4b0f      	ldr	r3, [pc, #60]	; (810b6f8 <_svfiprintf_r+0x1f8>)
 810b6ba:	a904      	add	r1, sp, #16
 810b6bc:	4638      	mov	r0, r7
 810b6be:	f7fc f827 	bl	8107710 <_printf_float>
 810b6c2:	1c42      	adds	r2, r0, #1
 810b6c4:	4606      	mov	r6, r0
 810b6c6:	d1d6      	bne.n	810b676 <_svfiprintf_r+0x176>
 810b6c8:	89ab      	ldrh	r3, [r5, #12]
 810b6ca:	065b      	lsls	r3, r3, #25
 810b6cc:	f53f af2c 	bmi.w	810b528 <_svfiprintf_r+0x28>
 810b6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b6d2:	b01d      	add	sp, #116	; 0x74
 810b6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b6d8:	ab03      	add	r3, sp, #12
 810b6da:	9300      	str	r3, [sp, #0]
 810b6dc:	462a      	mov	r2, r5
 810b6de:	4b06      	ldr	r3, [pc, #24]	; (810b6f8 <_svfiprintf_r+0x1f8>)
 810b6e0:	a904      	add	r1, sp, #16
 810b6e2:	4638      	mov	r0, r7
 810b6e4:	f7fc fab8 	bl	8107c58 <_printf_i>
 810b6e8:	e7eb      	b.n	810b6c2 <_svfiprintf_r+0x1c2>
 810b6ea:	bf00      	nop
 810b6ec:	0810d894 	.word	0x0810d894
 810b6f0:	0810d89e 	.word	0x0810d89e
 810b6f4:	08107711 	.word	0x08107711
 810b6f8:	0810b449 	.word	0x0810b449
 810b6fc:	0810d89a 	.word	0x0810d89a

0810b700 <__sfputc_r>:
 810b700:	6893      	ldr	r3, [r2, #8]
 810b702:	3b01      	subs	r3, #1
 810b704:	2b00      	cmp	r3, #0
 810b706:	b410      	push	{r4}
 810b708:	6093      	str	r3, [r2, #8]
 810b70a:	da08      	bge.n	810b71e <__sfputc_r+0x1e>
 810b70c:	6994      	ldr	r4, [r2, #24]
 810b70e:	42a3      	cmp	r3, r4
 810b710:	db01      	blt.n	810b716 <__sfputc_r+0x16>
 810b712:	290a      	cmp	r1, #10
 810b714:	d103      	bne.n	810b71e <__sfputc_r+0x1e>
 810b716:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b71a:	f7fd be53 	b.w	81093c4 <__swbuf_r>
 810b71e:	6813      	ldr	r3, [r2, #0]
 810b720:	1c58      	adds	r0, r3, #1
 810b722:	6010      	str	r0, [r2, #0]
 810b724:	7019      	strb	r1, [r3, #0]
 810b726:	4608      	mov	r0, r1
 810b728:	f85d 4b04 	ldr.w	r4, [sp], #4
 810b72c:	4770      	bx	lr

0810b72e <__sfputs_r>:
 810b72e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810b730:	4606      	mov	r6, r0
 810b732:	460f      	mov	r7, r1
 810b734:	4614      	mov	r4, r2
 810b736:	18d5      	adds	r5, r2, r3
 810b738:	42ac      	cmp	r4, r5
 810b73a:	d101      	bne.n	810b740 <__sfputs_r+0x12>
 810b73c:	2000      	movs	r0, #0
 810b73e:	e007      	b.n	810b750 <__sfputs_r+0x22>
 810b740:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b744:	463a      	mov	r2, r7
 810b746:	4630      	mov	r0, r6
 810b748:	f7ff ffda 	bl	810b700 <__sfputc_r>
 810b74c:	1c43      	adds	r3, r0, #1
 810b74e:	d1f3      	bne.n	810b738 <__sfputs_r+0xa>
 810b750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810b754 <_vfiprintf_r>:
 810b754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b758:	460d      	mov	r5, r1
 810b75a:	b09d      	sub	sp, #116	; 0x74
 810b75c:	4614      	mov	r4, r2
 810b75e:	4698      	mov	r8, r3
 810b760:	4606      	mov	r6, r0
 810b762:	b118      	cbz	r0, 810b76c <_vfiprintf_r+0x18>
 810b764:	6983      	ldr	r3, [r0, #24]
 810b766:	b90b      	cbnz	r3, 810b76c <_vfiprintf_r+0x18>
 810b768:	f7fb fdba 	bl	81072e0 <__sinit>
 810b76c:	4b89      	ldr	r3, [pc, #548]	; (810b994 <_vfiprintf_r+0x240>)
 810b76e:	429d      	cmp	r5, r3
 810b770:	d11b      	bne.n	810b7aa <_vfiprintf_r+0x56>
 810b772:	6875      	ldr	r5, [r6, #4]
 810b774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810b776:	07d9      	lsls	r1, r3, #31
 810b778:	d405      	bmi.n	810b786 <_vfiprintf_r+0x32>
 810b77a:	89ab      	ldrh	r3, [r5, #12]
 810b77c:	059a      	lsls	r2, r3, #22
 810b77e:	d402      	bmi.n	810b786 <_vfiprintf_r+0x32>
 810b780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810b782:	f7fb fe70 	bl	8107466 <__retarget_lock_acquire_recursive>
 810b786:	89ab      	ldrh	r3, [r5, #12]
 810b788:	071b      	lsls	r3, r3, #28
 810b78a:	d501      	bpl.n	810b790 <_vfiprintf_r+0x3c>
 810b78c:	692b      	ldr	r3, [r5, #16]
 810b78e:	b9eb      	cbnz	r3, 810b7cc <_vfiprintf_r+0x78>
 810b790:	4629      	mov	r1, r5
 810b792:	4630      	mov	r0, r6
 810b794:	f7fd fe7a 	bl	810948c <__swsetup_r>
 810b798:	b1c0      	cbz	r0, 810b7cc <_vfiprintf_r+0x78>
 810b79a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810b79c:	07dc      	lsls	r4, r3, #31
 810b79e:	d50e      	bpl.n	810b7be <_vfiprintf_r+0x6a>
 810b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 810b7a4:	b01d      	add	sp, #116	; 0x74
 810b7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b7aa:	4b7b      	ldr	r3, [pc, #492]	; (810b998 <_vfiprintf_r+0x244>)
 810b7ac:	429d      	cmp	r5, r3
 810b7ae:	d101      	bne.n	810b7b4 <_vfiprintf_r+0x60>
 810b7b0:	68b5      	ldr	r5, [r6, #8]
 810b7b2:	e7df      	b.n	810b774 <_vfiprintf_r+0x20>
 810b7b4:	4b79      	ldr	r3, [pc, #484]	; (810b99c <_vfiprintf_r+0x248>)
 810b7b6:	429d      	cmp	r5, r3
 810b7b8:	bf08      	it	eq
 810b7ba:	68f5      	ldreq	r5, [r6, #12]
 810b7bc:	e7da      	b.n	810b774 <_vfiprintf_r+0x20>
 810b7be:	89ab      	ldrh	r3, [r5, #12]
 810b7c0:	0598      	lsls	r0, r3, #22
 810b7c2:	d4ed      	bmi.n	810b7a0 <_vfiprintf_r+0x4c>
 810b7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810b7c6:	f7fb fe4f 	bl	8107468 <__retarget_lock_release_recursive>
 810b7ca:	e7e9      	b.n	810b7a0 <_vfiprintf_r+0x4c>
 810b7cc:	2300      	movs	r3, #0
 810b7ce:	9309      	str	r3, [sp, #36]	; 0x24
 810b7d0:	2320      	movs	r3, #32
 810b7d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810b7d6:	f8cd 800c 	str.w	r8, [sp, #12]
 810b7da:	2330      	movs	r3, #48	; 0x30
 810b7dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 810b9a0 <_vfiprintf_r+0x24c>
 810b7e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810b7e4:	f04f 0901 	mov.w	r9, #1
 810b7e8:	4623      	mov	r3, r4
 810b7ea:	469a      	mov	sl, r3
 810b7ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 810b7f0:	b10a      	cbz	r2, 810b7f6 <_vfiprintf_r+0xa2>
 810b7f2:	2a25      	cmp	r2, #37	; 0x25
 810b7f4:	d1f9      	bne.n	810b7ea <_vfiprintf_r+0x96>
 810b7f6:	ebba 0b04 	subs.w	fp, sl, r4
 810b7fa:	d00b      	beq.n	810b814 <_vfiprintf_r+0xc0>
 810b7fc:	465b      	mov	r3, fp
 810b7fe:	4622      	mov	r2, r4
 810b800:	4629      	mov	r1, r5
 810b802:	4630      	mov	r0, r6
 810b804:	f7ff ff93 	bl	810b72e <__sfputs_r>
 810b808:	3001      	adds	r0, #1
 810b80a:	f000 80aa 	beq.w	810b962 <_vfiprintf_r+0x20e>
 810b80e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b810:	445a      	add	r2, fp
 810b812:	9209      	str	r2, [sp, #36]	; 0x24
 810b814:	f89a 3000 	ldrb.w	r3, [sl]
 810b818:	2b00      	cmp	r3, #0
 810b81a:	f000 80a2 	beq.w	810b962 <_vfiprintf_r+0x20e>
 810b81e:	2300      	movs	r3, #0
 810b820:	f04f 32ff 	mov.w	r2, #4294967295
 810b824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810b828:	f10a 0a01 	add.w	sl, sl, #1
 810b82c:	9304      	str	r3, [sp, #16]
 810b82e:	9307      	str	r3, [sp, #28]
 810b830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810b834:	931a      	str	r3, [sp, #104]	; 0x68
 810b836:	4654      	mov	r4, sl
 810b838:	2205      	movs	r2, #5
 810b83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b83e:	4858      	ldr	r0, [pc, #352]	; (810b9a0 <_vfiprintf_r+0x24c>)
 810b840:	f7f4 fd56 	bl	81002f0 <memchr>
 810b844:	9a04      	ldr	r2, [sp, #16]
 810b846:	b9d8      	cbnz	r0, 810b880 <_vfiprintf_r+0x12c>
 810b848:	06d1      	lsls	r1, r2, #27
 810b84a:	bf44      	itt	mi
 810b84c:	2320      	movmi	r3, #32
 810b84e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b852:	0713      	lsls	r3, r2, #28
 810b854:	bf44      	itt	mi
 810b856:	232b      	movmi	r3, #43	; 0x2b
 810b858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810b85c:	f89a 3000 	ldrb.w	r3, [sl]
 810b860:	2b2a      	cmp	r3, #42	; 0x2a
 810b862:	d015      	beq.n	810b890 <_vfiprintf_r+0x13c>
 810b864:	9a07      	ldr	r2, [sp, #28]
 810b866:	4654      	mov	r4, sl
 810b868:	2000      	movs	r0, #0
 810b86a:	f04f 0c0a 	mov.w	ip, #10
 810b86e:	4621      	mov	r1, r4
 810b870:	f811 3b01 	ldrb.w	r3, [r1], #1
 810b874:	3b30      	subs	r3, #48	; 0x30
 810b876:	2b09      	cmp	r3, #9
 810b878:	d94e      	bls.n	810b918 <_vfiprintf_r+0x1c4>
 810b87a:	b1b0      	cbz	r0, 810b8aa <_vfiprintf_r+0x156>
 810b87c:	9207      	str	r2, [sp, #28]
 810b87e:	e014      	b.n	810b8aa <_vfiprintf_r+0x156>
 810b880:	eba0 0308 	sub.w	r3, r0, r8
 810b884:	fa09 f303 	lsl.w	r3, r9, r3
 810b888:	4313      	orrs	r3, r2
 810b88a:	9304      	str	r3, [sp, #16]
 810b88c:	46a2      	mov	sl, r4
 810b88e:	e7d2      	b.n	810b836 <_vfiprintf_r+0xe2>
 810b890:	9b03      	ldr	r3, [sp, #12]
 810b892:	1d19      	adds	r1, r3, #4
 810b894:	681b      	ldr	r3, [r3, #0]
 810b896:	9103      	str	r1, [sp, #12]
 810b898:	2b00      	cmp	r3, #0
 810b89a:	bfbb      	ittet	lt
 810b89c:	425b      	neglt	r3, r3
 810b89e:	f042 0202 	orrlt.w	r2, r2, #2
 810b8a2:	9307      	strge	r3, [sp, #28]
 810b8a4:	9307      	strlt	r3, [sp, #28]
 810b8a6:	bfb8      	it	lt
 810b8a8:	9204      	strlt	r2, [sp, #16]
 810b8aa:	7823      	ldrb	r3, [r4, #0]
 810b8ac:	2b2e      	cmp	r3, #46	; 0x2e
 810b8ae:	d10c      	bne.n	810b8ca <_vfiprintf_r+0x176>
 810b8b0:	7863      	ldrb	r3, [r4, #1]
 810b8b2:	2b2a      	cmp	r3, #42	; 0x2a
 810b8b4:	d135      	bne.n	810b922 <_vfiprintf_r+0x1ce>
 810b8b6:	9b03      	ldr	r3, [sp, #12]
 810b8b8:	1d1a      	adds	r2, r3, #4
 810b8ba:	681b      	ldr	r3, [r3, #0]
 810b8bc:	9203      	str	r2, [sp, #12]
 810b8be:	2b00      	cmp	r3, #0
 810b8c0:	bfb8      	it	lt
 810b8c2:	f04f 33ff 	movlt.w	r3, #4294967295
 810b8c6:	3402      	adds	r4, #2
 810b8c8:	9305      	str	r3, [sp, #20]
 810b8ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 810b9b0 <_vfiprintf_r+0x25c>
 810b8ce:	7821      	ldrb	r1, [r4, #0]
 810b8d0:	2203      	movs	r2, #3
 810b8d2:	4650      	mov	r0, sl
 810b8d4:	f7f4 fd0c 	bl	81002f0 <memchr>
 810b8d8:	b140      	cbz	r0, 810b8ec <_vfiprintf_r+0x198>
 810b8da:	2340      	movs	r3, #64	; 0x40
 810b8dc:	eba0 000a 	sub.w	r0, r0, sl
 810b8e0:	fa03 f000 	lsl.w	r0, r3, r0
 810b8e4:	9b04      	ldr	r3, [sp, #16]
 810b8e6:	4303      	orrs	r3, r0
 810b8e8:	3401      	adds	r4, #1
 810b8ea:	9304      	str	r3, [sp, #16]
 810b8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 810b8f0:	482c      	ldr	r0, [pc, #176]	; (810b9a4 <_vfiprintf_r+0x250>)
 810b8f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810b8f6:	2206      	movs	r2, #6
 810b8f8:	f7f4 fcfa 	bl	81002f0 <memchr>
 810b8fc:	2800      	cmp	r0, #0
 810b8fe:	d03f      	beq.n	810b980 <_vfiprintf_r+0x22c>
 810b900:	4b29      	ldr	r3, [pc, #164]	; (810b9a8 <_vfiprintf_r+0x254>)
 810b902:	bb1b      	cbnz	r3, 810b94c <_vfiprintf_r+0x1f8>
 810b904:	9b03      	ldr	r3, [sp, #12]
 810b906:	3307      	adds	r3, #7
 810b908:	f023 0307 	bic.w	r3, r3, #7
 810b90c:	3308      	adds	r3, #8
 810b90e:	9303      	str	r3, [sp, #12]
 810b910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b912:	443b      	add	r3, r7
 810b914:	9309      	str	r3, [sp, #36]	; 0x24
 810b916:	e767      	b.n	810b7e8 <_vfiprintf_r+0x94>
 810b918:	fb0c 3202 	mla	r2, ip, r2, r3
 810b91c:	460c      	mov	r4, r1
 810b91e:	2001      	movs	r0, #1
 810b920:	e7a5      	b.n	810b86e <_vfiprintf_r+0x11a>
 810b922:	2300      	movs	r3, #0
 810b924:	3401      	adds	r4, #1
 810b926:	9305      	str	r3, [sp, #20]
 810b928:	4619      	mov	r1, r3
 810b92a:	f04f 0c0a 	mov.w	ip, #10
 810b92e:	4620      	mov	r0, r4
 810b930:	f810 2b01 	ldrb.w	r2, [r0], #1
 810b934:	3a30      	subs	r2, #48	; 0x30
 810b936:	2a09      	cmp	r2, #9
 810b938:	d903      	bls.n	810b942 <_vfiprintf_r+0x1ee>
 810b93a:	2b00      	cmp	r3, #0
 810b93c:	d0c5      	beq.n	810b8ca <_vfiprintf_r+0x176>
 810b93e:	9105      	str	r1, [sp, #20]
 810b940:	e7c3      	b.n	810b8ca <_vfiprintf_r+0x176>
 810b942:	fb0c 2101 	mla	r1, ip, r1, r2
 810b946:	4604      	mov	r4, r0
 810b948:	2301      	movs	r3, #1
 810b94a:	e7f0      	b.n	810b92e <_vfiprintf_r+0x1da>
 810b94c:	ab03      	add	r3, sp, #12
 810b94e:	9300      	str	r3, [sp, #0]
 810b950:	462a      	mov	r2, r5
 810b952:	4b16      	ldr	r3, [pc, #88]	; (810b9ac <_vfiprintf_r+0x258>)
 810b954:	a904      	add	r1, sp, #16
 810b956:	4630      	mov	r0, r6
 810b958:	f7fb feda 	bl	8107710 <_printf_float>
 810b95c:	4607      	mov	r7, r0
 810b95e:	1c78      	adds	r0, r7, #1
 810b960:	d1d6      	bne.n	810b910 <_vfiprintf_r+0x1bc>
 810b962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810b964:	07d9      	lsls	r1, r3, #31
 810b966:	d405      	bmi.n	810b974 <_vfiprintf_r+0x220>
 810b968:	89ab      	ldrh	r3, [r5, #12]
 810b96a:	059a      	lsls	r2, r3, #22
 810b96c:	d402      	bmi.n	810b974 <_vfiprintf_r+0x220>
 810b96e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810b970:	f7fb fd7a 	bl	8107468 <__retarget_lock_release_recursive>
 810b974:	89ab      	ldrh	r3, [r5, #12]
 810b976:	065b      	lsls	r3, r3, #25
 810b978:	f53f af12 	bmi.w	810b7a0 <_vfiprintf_r+0x4c>
 810b97c:	9809      	ldr	r0, [sp, #36]	; 0x24
 810b97e:	e711      	b.n	810b7a4 <_vfiprintf_r+0x50>
 810b980:	ab03      	add	r3, sp, #12
 810b982:	9300      	str	r3, [sp, #0]
 810b984:	462a      	mov	r2, r5
 810b986:	4b09      	ldr	r3, [pc, #36]	; (810b9ac <_vfiprintf_r+0x258>)
 810b988:	a904      	add	r1, sp, #16
 810b98a:	4630      	mov	r0, r6
 810b98c:	f7fc f964 	bl	8107c58 <_printf_i>
 810b990:	e7e4      	b.n	810b95c <_vfiprintf_r+0x208>
 810b992:	bf00      	nop
 810b994:	0810d44c 	.word	0x0810d44c
 810b998:	0810d46c 	.word	0x0810d46c
 810b99c:	0810d42c 	.word	0x0810d42c
 810b9a0:	0810d894 	.word	0x0810d894
 810b9a4:	0810d89e 	.word	0x0810d89e
 810b9a8:	08107711 	.word	0x08107711
 810b9ac:	0810b72f 	.word	0x0810b72f
 810b9b0:	0810d89a 	.word	0x0810d89a

0810b9b4 <_read_r>:
 810b9b4:	b538      	push	{r3, r4, r5, lr}
 810b9b6:	4d07      	ldr	r5, [pc, #28]	; (810b9d4 <_read_r+0x20>)
 810b9b8:	4604      	mov	r4, r0
 810b9ba:	4608      	mov	r0, r1
 810b9bc:	4611      	mov	r1, r2
 810b9be:	2200      	movs	r2, #0
 810b9c0:	602a      	str	r2, [r5, #0]
 810b9c2:	461a      	mov	r2, r3
 810b9c4:	f7f6 fdde 	bl	8102584 <_read>
 810b9c8:	1c43      	adds	r3, r0, #1
 810b9ca:	d102      	bne.n	810b9d2 <_read_r+0x1e>
 810b9cc:	682b      	ldr	r3, [r5, #0]
 810b9ce:	b103      	cbz	r3, 810b9d2 <_read_r+0x1e>
 810b9d0:	6023      	str	r3, [r4, #0]
 810b9d2:	bd38      	pop	{r3, r4, r5, pc}
 810b9d4:	100105d0 	.word	0x100105d0

0810b9d8 <nan>:
 810b9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810b9e0 <nan+0x8>
 810b9dc:	4770      	bx	lr
 810b9de:	bf00      	nop
 810b9e0:	00000000 	.word	0x00000000
 810b9e4:	7ff80000 	.word	0x7ff80000

0810b9e8 <strncmp>:
 810b9e8:	b510      	push	{r4, lr}
 810b9ea:	b16a      	cbz	r2, 810ba08 <strncmp+0x20>
 810b9ec:	3901      	subs	r1, #1
 810b9ee:	1884      	adds	r4, r0, r2
 810b9f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b9f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 810b9f8:	4293      	cmp	r3, r2
 810b9fa:	d103      	bne.n	810ba04 <strncmp+0x1c>
 810b9fc:	42a0      	cmp	r0, r4
 810b9fe:	d001      	beq.n	810ba04 <strncmp+0x1c>
 810ba00:	2b00      	cmp	r3, #0
 810ba02:	d1f5      	bne.n	810b9f0 <strncmp+0x8>
 810ba04:	1a98      	subs	r0, r3, r2
 810ba06:	bd10      	pop	{r4, pc}
 810ba08:	4610      	mov	r0, r2
 810ba0a:	e7fc      	b.n	810ba06 <strncmp+0x1e>

0810ba0c <__ascii_wctomb>:
 810ba0c:	b149      	cbz	r1, 810ba22 <__ascii_wctomb+0x16>
 810ba0e:	2aff      	cmp	r2, #255	; 0xff
 810ba10:	bf85      	ittet	hi
 810ba12:	238a      	movhi	r3, #138	; 0x8a
 810ba14:	6003      	strhi	r3, [r0, #0]
 810ba16:	700a      	strbls	r2, [r1, #0]
 810ba18:	f04f 30ff 	movhi.w	r0, #4294967295
 810ba1c:	bf98      	it	ls
 810ba1e:	2001      	movls	r0, #1
 810ba20:	4770      	bx	lr
 810ba22:	4608      	mov	r0, r1
 810ba24:	4770      	bx	lr
	...

0810ba28 <__assert_func>:
 810ba28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810ba2a:	4614      	mov	r4, r2
 810ba2c:	461a      	mov	r2, r3
 810ba2e:	4b09      	ldr	r3, [pc, #36]	; (810ba54 <__assert_func+0x2c>)
 810ba30:	681b      	ldr	r3, [r3, #0]
 810ba32:	4605      	mov	r5, r0
 810ba34:	68d8      	ldr	r0, [r3, #12]
 810ba36:	b14c      	cbz	r4, 810ba4c <__assert_func+0x24>
 810ba38:	4b07      	ldr	r3, [pc, #28]	; (810ba58 <__assert_func+0x30>)
 810ba3a:	9100      	str	r1, [sp, #0]
 810ba3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810ba40:	4906      	ldr	r1, [pc, #24]	; (810ba5c <__assert_func+0x34>)
 810ba42:	462b      	mov	r3, r5
 810ba44:	f000 f80e 	bl	810ba64 <fiprintf>
 810ba48:	f000 f880 	bl	810bb4c <abort>
 810ba4c:	4b04      	ldr	r3, [pc, #16]	; (810ba60 <__assert_func+0x38>)
 810ba4e:	461c      	mov	r4, r3
 810ba50:	e7f3      	b.n	810ba3a <__assert_func+0x12>
 810ba52:	bf00      	nop
 810ba54:	10000060 	.word	0x10000060
 810ba58:	0810d8a5 	.word	0x0810d8a5
 810ba5c:	0810d8b2 	.word	0x0810d8b2
 810ba60:	0810d8e0 	.word	0x0810d8e0

0810ba64 <fiprintf>:
 810ba64:	b40e      	push	{r1, r2, r3}
 810ba66:	b503      	push	{r0, r1, lr}
 810ba68:	4601      	mov	r1, r0
 810ba6a:	ab03      	add	r3, sp, #12
 810ba6c:	4805      	ldr	r0, [pc, #20]	; (810ba84 <fiprintf+0x20>)
 810ba6e:	f853 2b04 	ldr.w	r2, [r3], #4
 810ba72:	6800      	ldr	r0, [r0, #0]
 810ba74:	9301      	str	r3, [sp, #4]
 810ba76:	f7ff fe6d 	bl	810b754 <_vfiprintf_r>
 810ba7a:	b002      	add	sp, #8
 810ba7c:	f85d eb04 	ldr.w	lr, [sp], #4
 810ba80:	b003      	add	sp, #12
 810ba82:	4770      	bx	lr
 810ba84:	10000060 	.word	0x10000060

0810ba88 <_fstat_r>:
 810ba88:	b538      	push	{r3, r4, r5, lr}
 810ba8a:	4d07      	ldr	r5, [pc, #28]	; (810baa8 <_fstat_r+0x20>)
 810ba8c:	2300      	movs	r3, #0
 810ba8e:	4604      	mov	r4, r0
 810ba90:	4608      	mov	r0, r1
 810ba92:	4611      	mov	r1, r2
 810ba94:	602b      	str	r3, [r5, #0]
 810ba96:	f7f6 fdba 	bl	810260e <_fstat>
 810ba9a:	1c43      	adds	r3, r0, #1
 810ba9c:	d102      	bne.n	810baa4 <_fstat_r+0x1c>
 810ba9e:	682b      	ldr	r3, [r5, #0]
 810baa0:	b103      	cbz	r3, 810baa4 <_fstat_r+0x1c>
 810baa2:	6023      	str	r3, [r4, #0]
 810baa4:	bd38      	pop	{r3, r4, r5, pc}
 810baa6:	bf00      	nop
 810baa8:	100105d0 	.word	0x100105d0

0810baac <_isatty_r>:
 810baac:	b538      	push	{r3, r4, r5, lr}
 810baae:	4d06      	ldr	r5, [pc, #24]	; (810bac8 <_isatty_r+0x1c>)
 810bab0:	2300      	movs	r3, #0
 810bab2:	4604      	mov	r4, r0
 810bab4:	4608      	mov	r0, r1
 810bab6:	602b      	str	r3, [r5, #0]
 810bab8:	f7f6 fdb9 	bl	810262e <_isatty>
 810babc:	1c43      	adds	r3, r0, #1
 810babe:	d102      	bne.n	810bac6 <_isatty_r+0x1a>
 810bac0:	682b      	ldr	r3, [r5, #0]
 810bac2:	b103      	cbz	r3, 810bac6 <_isatty_r+0x1a>
 810bac4:	6023      	str	r3, [r4, #0]
 810bac6:	bd38      	pop	{r3, r4, r5, pc}
 810bac8:	100105d0 	.word	0x100105d0

0810bacc <memmove>:
 810bacc:	4288      	cmp	r0, r1
 810bace:	b510      	push	{r4, lr}
 810bad0:	eb01 0402 	add.w	r4, r1, r2
 810bad4:	d902      	bls.n	810badc <memmove+0x10>
 810bad6:	4284      	cmp	r4, r0
 810bad8:	4623      	mov	r3, r4
 810bada:	d807      	bhi.n	810baec <memmove+0x20>
 810badc:	1e43      	subs	r3, r0, #1
 810bade:	42a1      	cmp	r1, r4
 810bae0:	d008      	beq.n	810baf4 <memmove+0x28>
 810bae2:	f811 2b01 	ldrb.w	r2, [r1], #1
 810bae6:	f803 2f01 	strb.w	r2, [r3, #1]!
 810baea:	e7f8      	b.n	810bade <memmove+0x12>
 810baec:	4402      	add	r2, r0
 810baee:	4601      	mov	r1, r0
 810baf0:	428a      	cmp	r2, r1
 810baf2:	d100      	bne.n	810baf6 <memmove+0x2a>
 810baf4:	bd10      	pop	{r4, pc}
 810baf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810bafa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810bafe:	e7f7      	b.n	810baf0 <memmove+0x24>

0810bb00 <_realloc_r>:
 810bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810bb02:	4607      	mov	r7, r0
 810bb04:	4614      	mov	r4, r2
 810bb06:	460e      	mov	r6, r1
 810bb08:	b921      	cbnz	r1, 810bb14 <_realloc_r+0x14>
 810bb0a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 810bb0e:	4611      	mov	r1, r2
 810bb10:	f7fb bd04 	b.w	810751c <_malloc_r>
 810bb14:	b922      	cbnz	r2, 810bb20 <_realloc_r+0x20>
 810bb16:	f7fb fcb1 	bl	810747c <_free_r>
 810bb1a:	4625      	mov	r5, r4
 810bb1c:	4628      	mov	r0, r5
 810bb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810bb20:	f000 f81b 	bl	810bb5a <_malloc_usable_size_r>
 810bb24:	42a0      	cmp	r0, r4
 810bb26:	d20f      	bcs.n	810bb48 <_realloc_r+0x48>
 810bb28:	4621      	mov	r1, r4
 810bb2a:	4638      	mov	r0, r7
 810bb2c:	f7fb fcf6 	bl	810751c <_malloc_r>
 810bb30:	4605      	mov	r5, r0
 810bb32:	2800      	cmp	r0, #0
 810bb34:	d0f2      	beq.n	810bb1c <_realloc_r+0x1c>
 810bb36:	4631      	mov	r1, r6
 810bb38:	4622      	mov	r2, r4
 810bb3a:	f7fe ffa1 	bl	810aa80 <memcpy>
 810bb3e:	4631      	mov	r1, r6
 810bb40:	4638      	mov	r0, r7
 810bb42:	f7fb fc9b 	bl	810747c <_free_r>
 810bb46:	e7e9      	b.n	810bb1c <_realloc_r+0x1c>
 810bb48:	4635      	mov	r5, r6
 810bb4a:	e7e7      	b.n	810bb1c <_realloc_r+0x1c>

0810bb4c <abort>:
 810bb4c:	b508      	push	{r3, lr}
 810bb4e:	2006      	movs	r0, #6
 810bb50:	f000 f834 	bl	810bbbc <raise>
 810bb54:	2001      	movs	r0, #1
 810bb56:	f7f6 fd0b 	bl	8102570 <_exit>

0810bb5a <_malloc_usable_size_r>:
 810bb5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810bb5e:	1f18      	subs	r0, r3, #4
 810bb60:	2b00      	cmp	r3, #0
 810bb62:	bfbc      	itt	lt
 810bb64:	580b      	ldrlt	r3, [r1, r0]
 810bb66:	18c0      	addlt	r0, r0, r3
 810bb68:	4770      	bx	lr

0810bb6a <_raise_r>:
 810bb6a:	291f      	cmp	r1, #31
 810bb6c:	b538      	push	{r3, r4, r5, lr}
 810bb6e:	4604      	mov	r4, r0
 810bb70:	460d      	mov	r5, r1
 810bb72:	d904      	bls.n	810bb7e <_raise_r+0x14>
 810bb74:	2316      	movs	r3, #22
 810bb76:	6003      	str	r3, [r0, #0]
 810bb78:	f04f 30ff 	mov.w	r0, #4294967295
 810bb7c:	bd38      	pop	{r3, r4, r5, pc}
 810bb7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810bb80:	b112      	cbz	r2, 810bb88 <_raise_r+0x1e>
 810bb82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810bb86:	b94b      	cbnz	r3, 810bb9c <_raise_r+0x32>
 810bb88:	4620      	mov	r0, r4
 810bb8a:	f000 f831 	bl	810bbf0 <_getpid_r>
 810bb8e:	462a      	mov	r2, r5
 810bb90:	4601      	mov	r1, r0
 810bb92:	4620      	mov	r0, r4
 810bb94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810bb98:	f000 b818 	b.w	810bbcc <_kill_r>
 810bb9c:	2b01      	cmp	r3, #1
 810bb9e:	d00a      	beq.n	810bbb6 <_raise_r+0x4c>
 810bba0:	1c59      	adds	r1, r3, #1
 810bba2:	d103      	bne.n	810bbac <_raise_r+0x42>
 810bba4:	2316      	movs	r3, #22
 810bba6:	6003      	str	r3, [r0, #0]
 810bba8:	2001      	movs	r0, #1
 810bbaa:	e7e7      	b.n	810bb7c <_raise_r+0x12>
 810bbac:	2400      	movs	r4, #0
 810bbae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810bbb2:	4628      	mov	r0, r5
 810bbb4:	4798      	blx	r3
 810bbb6:	2000      	movs	r0, #0
 810bbb8:	e7e0      	b.n	810bb7c <_raise_r+0x12>
	...

0810bbbc <raise>:
 810bbbc:	4b02      	ldr	r3, [pc, #8]	; (810bbc8 <raise+0xc>)
 810bbbe:	4601      	mov	r1, r0
 810bbc0:	6818      	ldr	r0, [r3, #0]
 810bbc2:	f7ff bfd2 	b.w	810bb6a <_raise_r>
 810bbc6:	bf00      	nop
 810bbc8:	10000060 	.word	0x10000060

0810bbcc <_kill_r>:
 810bbcc:	b538      	push	{r3, r4, r5, lr}
 810bbce:	4d07      	ldr	r5, [pc, #28]	; (810bbec <_kill_r+0x20>)
 810bbd0:	2300      	movs	r3, #0
 810bbd2:	4604      	mov	r4, r0
 810bbd4:	4608      	mov	r0, r1
 810bbd6:	4611      	mov	r1, r2
 810bbd8:	602b      	str	r3, [r5, #0]
 810bbda:	f7f6 fcb9 	bl	8102550 <_kill>
 810bbde:	1c43      	adds	r3, r0, #1
 810bbe0:	d102      	bne.n	810bbe8 <_kill_r+0x1c>
 810bbe2:	682b      	ldr	r3, [r5, #0]
 810bbe4:	b103      	cbz	r3, 810bbe8 <_kill_r+0x1c>
 810bbe6:	6023      	str	r3, [r4, #0]
 810bbe8:	bd38      	pop	{r3, r4, r5, pc}
 810bbea:	bf00      	nop
 810bbec:	100105d0 	.word	0x100105d0

0810bbf0 <_getpid_r>:
 810bbf0:	f7f6 bca6 	b.w	8102540 <_getpid>

0810bbf4 <fabs>:
 810bbf4:	ec51 0b10 	vmov	r0, r1, d0
 810bbf8:	ee10 2a10 	vmov	r2, s0
 810bbfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810bc00:	ec43 2b10 	vmov	d0, r2, r3
 810bc04:	4770      	bx	lr
	...

0810bc08 <pow>:
 810bc08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bc0c:	ec59 8b10 	vmov	r8, r9, d0
 810bc10:	ec57 6b11 	vmov	r6, r7, d1
 810bc14:	f000 f8dc 	bl	810bdd0 <__ieee754_pow>
 810bc18:	4b4e      	ldr	r3, [pc, #312]	; (810bd54 <pow+0x14c>)
 810bc1a:	f993 3000 	ldrsb.w	r3, [r3]
 810bc1e:	3301      	adds	r3, #1
 810bc20:	ec55 4b10 	vmov	r4, r5, d0
 810bc24:	d015      	beq.n	810bc52 <pow+0x4a>
 810bc26:	4632      	mov	r2, r6
 810bc28:	463b      	mov	r3, r7
 810bc2a:	4630      	mov	r0, r6
 810bc2c:	4639      	mov	r1, r7
 810bc2e:	f7f5 f805 	bl	8100c3c <__aeabi_dcmpun>
 810bc32:	b970      	cbnz	r0, 810bc52 <pow+0x4a>
 810bc34:	4642      	mov	r2, r8
 810bc36:	464b      	mov	r3, r9
 810bc38:	4640      	mov	r0, r8
 810bc3a:	4649      	mov	r1, r9
 810bc3c:	f7f4 fffe 	bl	8100c3c <__aeabi_dcmpun>
 810bc40:	2200      	movs	r2, #0
 810bc42:	2300      	movs	r3, #0
 810bc44:	b148      	cbz	r0, 810bc5a <pow+0x52>
 810bc46:	4630      	mov	r0, r6
 810bc48:	4639      	mov	r1, r7
 810bc4a:	f7f4 ffc5 	bl	8100bd8 <__aeabi_dcmpeq>
 810bc4e:	2800      	cmp	r0, #0
 810bc50:	d17d      	bne.n	810bd4e <pow+0x146>
 810bc52:	ec45 4b10 	vmov	d0, r4, r5
 810bc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bc5a:	4640      	mov	r0, r8
 810bc5c:	4649      	mov	r1, r9
 810bc5e:	f7f4 ffbb 	bl	8100bd8 <__aeabi_dcmpeq>
 810bc62:	b1e0      	cbz	r0, 810bc9e <pow+0x96>
 810bc64:	2200      	movs	r2, #0
 810bc66:	2300      	movs	r3, #0
 810bc68:	4630      	mov	r0, r6
 810bc6a:	4639      	mov	r1, r7
 810bc6c:	f7f4 ffb4 	bl	8100bd8 <__aeabi_dcmpeq>
 810bc70:	2800      	cmp	r0, #0
 810bc72:	d16c      	bne.n	810bd4e <pow+0x146>
 810bc74:	ec47 6b10 	vmov	d0, r6, r7
 810bc78:	f000 fe80 	bl	810c97c <finite>
 810bc7c:	2800      	cmp	r0, #0
 810bc7e:	d0e8      	beq.n	810bc52 <pow+0x4a>
 810bc80:	2200      	movs	r2, #0
 810bc82:	2300      	movs	r3, #0
 810bc84:	4630      	mov	r0, r6
 810bc86:	4639      	mov	r1, r7
 810bc88:	f7f4 ffb0 	bl	8100bec <__aeabi_dcmplt>
 810bc8c:	2800      	cmp	r0, #0
 810bc8e:	d0e0      	beq.n	810bc52 <pow+0x4a>
 810bc90:	f7fb fa06 	bl	81070a0 <__errno>
 810bc94:	2321      	movs	r3, #33	; 0x21
 810bc96:	6003      	str	r3, [r0, #0]
 810bc98:	2400      	movs	r4, #0
 810bc9a:	4d2f      	ldr	r5, [pc, #188]	; (810bd58 <pow+0x150>)
 810bc9c:	e7d9      	b.n	810bc52 <pow+0x4a>
 810bc9e:	ec45 4b10 	vmov	d0, r4, r5
 810bca2:	f000 fe6b 	bl	810c97c <finite>
 810bca6:	bbb8      	cbnz	r0, 810bd18 <pow+0x110>
 810bca8:	ec49 8b10 	vmov	d0, r8, r9
 810bcac:	f000 fe66 	bl	810c97c <finite>
 810bcb0:	b390      	cbz	r0, 810bd18 <pow+0x110>
 810bcb2:	ec47 6b10 	vmov	d0, r6, r7
 810bcb6:	f000 fe61 	bl	810c97c <finite>
 810bcba:	b368      	cbz	r0, 810bd18 <pow+0x110>
 810bcbc:	4622      	mov	r2, r4
 810bcbe:	462b      	mov	r3, r5
 810bcc0:	4620      	mov	r0, r4
 810bcc2:	4629      	mov	r1, r5
 810bcc4:	f7f4 ffba 	bl	8100c3c <__aeabi_dcmpun>
 810bcc8:	b160      	cbz	r0, 810bce4 <pow+0xdc>
 810bcca:	f7fb f9e9 	bl	81070a0 <__errno>
 810bcce:	2321      	movs	r3, #33	; 0x21
 810bcd0:	6003      	str	r3, [r0, #0]
 810bcd2:	2200      	movs	r2, #0
 810bcd4:	2300      	movs	r3, #0
 810bcd6:	4610      	mov	r0, r2
 810bcd8:	4619      	mov	r1, r3
 810bcda:	f7f4 fe3f 	bl	810095c <__aeabi_ddiv>
 810bcde:	4604      	mov	r4, r0
 810bce0:	460d      	mov	r5, r1
 810bce2:	e7b6      	b.n	810bc52 <pow+0x4a>
 810bce4:	f7fb f9dc 	bl	81070a0 <__errno>
 810bce8:	2322      	movs	r3, #34	; 0x22
 810bcea:	6003      	str	r3, [r0, #0]
 810bcec:	2200      	movs	r2, #0
 810bcee:	2300      	movs	r3, #0
 810bcf0:	4640      	mov	r0, r8
 810bcf2:	4649      	mov	r1, r9
 810bcf4:	f7f4 ff7a 	bl	8100bec <__aeabi_dcmplt>
 810bcf8:	2400      	movs	r4, #0
 810bcfa:	b158      	cbz	r0, 810bd14 <pow+0x10c>
 810bcfc:	ec47 6b10 	vmov	d0, r6, r7
 810bd00:	f000 fe48 	bl	810c994 <rint>
 810bd04:	4632      	mov	r2, r6
 810bd06:	ec51 0b10 	vmov	r0, r1, d0
 810bd0a:	463b      	mov	r3, r7
 810bd0c:	f7f4 ff64 	bl	8100bd8 <__aeabi_dcmpeq>
 810bd10:	2800      	cmp	r0, #0
 810bd12:	d0c2      	beq.n	810bc9a <pow+0x92>
 810bd14:	4d11      	ldr	r5, [pc, #68]	; (810bd5c <pow+0x154>)
 810bd16:	e79c      	b.n	810bc52 <pow+0x4a>
 810bd18:	2200      	movs	r2, #0
 810bd1a:	2300      	movs	r3, #0
 810bd1c:	4620      	mov	r0, r4
 810bd1e:	4629      	mov	r1, r5
 810bd20:	f7f4 ff5a 	bl	8100bd8 <__aeabi_dcmpeq>
 810bd24:	2800      	cmp	r0, #0
 810bd26:	d094      	beq.n	810bc52 <pow+0x4a>
 810bd28:	ec49 8b10 	vmov	d0, r8, r9
 810bd2c:	f000 fe26 	bl	810c97c <finite>
 810bd30:	2800      	cmp	r0, #0
 810bd32:	d08e      	beq.n	810bc52 <pow+0x4a>
 810bd34:	ec47 6b10 	vmov	d0, r6, r7
 810bd38:	f000 fe20 	bl	810c97c <finite>
 810bd3c:	2800      	cmp	r0, #0
 810bd3e:	d088      	beq.n	810bc52 <pow+0x4a>
 810bd40:	f7fb f9ae 	bl	81070a0 <__errno>
 810bd44:	2322      	movs	r3, #34	; 0x22
 810bd46:	6003      	str	r3, [r0, #0]
 810bd48:	2400      	movs	r4, #0
 810bd4a:	2500      	movs	r5, #0
 810bd4c:	e781      	b.n	810bc52 <pow+0x4a>
 810bd4e:	4d04      	ldr	r5, [pc, #16]	; (810bd60 <pow+0x158>)
 810bd50:	2400      	movs	r4, #0
 810bd52:	e77e      	b.n	810bc52 <pow+0x4a>
 810bd54:	10000234 	.word	0x10000234
 810bd58:	fff00000 	.word	0xfff00000
 810bd5c:	7ff00000 	.word	0x7ff00000
 810bd60:	3ff00000 	.word	0x3ff00000

0810bd64 <sqrt>:
 810bd64:	b538      	push	{r3, r4, r5, lr}
 810bd66:	ed2d 8b02 	vpush	{d8}
 810bd6a:	ec55 4b10 	vmov	r4, r5, d0
 810bd6e:	f000 fd51 	bl	810c814 <__ieee754_sqrt>
 810bd72:	4b15      	ldr	r3, [pc, #84]	; (810bdc8 <sqrt+0x64>)
 810bd74:	eeb0 8a40 	vmov.f32	s16, s0
 810bd78:	eef0 8a60 	vmov.f32	s17, s1
 810bd7c:	f993 3000 	ldrsb.w	r3, [r3]
 810bd80:	3301      	adds	r3, #1
 810bd82:	d019      	beq.n	810bdb8 <sqrt+0x54>
 810bd84:	4622      	mov	r2, r4
 810bd86:	462b      	mov	r3, r5
 810bd88:	4620      	mov	r0, r4
 810bd8a:	4629      	mov	r1, r5
 810bd8c:	f7f4 ff56 	bl	8100c3c <__aeabi_dcmpun>
 810bd90:	b990      	cbnz	r0, 810bdb8 <sqrt+0x54>
 810bd92:	2200      	movs	r2, #0
 810bd94:	2300      	movs	r3, #0
 810bd96:	4620      	mov	r0, r4
 810bd98:	4629      	mov	r1, r5
 810bd9a:	f7f4 ff27 	bl	8100bec <__aeabi_dcmplt>
 810bd9e:	b158      	cbz	r0, 810bdb8 <sqrt+0x54>
 810bda0:	f7fb f97e 	bl	81070a0 <__errno>
 810bda4:	2321      	movs	r3, #33	; 0x21
 810bda6:	6003      	str	r3, [r0, #0]
 810bda8:	2200      	movs	r2, #0
 810bdaa:	2300      	movs	r3, #0
 810bdac:	4610      	mov	r0, r2
 810bdae:	4619      	mov	r1, r3
 810bdb0:	f7f4 fdd4 	bl	810095c <__aeabi_ddiv>
 810bdb4:	ec41 0b18 	vmov	d8, r0, r1
 810bdb8:	eeb0 0a48 	vmov.f32	s0, s16
 810bdbc:	eef0 0a68 	vmov.f32	s1, s17
 810bdc0:	ecbd 8b02 	vpop	{d8}
 810bdc4:	bd38      	pop	{r3, r4, r5, pc}
 810bdc6:	bf00      	nop
 810bdc8:	10000234 	.word	0x10000234
 810bdcc:	00000000 	.word	0x00000000

0810bdd0 <__ieee754_pow>:
 810bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bdd4:	ed2d 8b06 	vpush	{d8-d10}
 810bdd8:	b08d      	sub	sp, #52	; 0x34
 810bdda:	ed8d 1b02 	vstr	d1, [sp, #8]
 810bdde:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 810bde2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 810bde6:	ea56 0100 	orrs.w	r1, r6, r0
 810bdea:	ec53 2b10 	vmov	r2, r3, d0
 810bdee:	f000 84d1 	beq.w	810c794 <__ieee754_pow+0x9c4>
 810bdf2:	497f      	ldr	r1, [pc, #508]	; (810bff0 <__ieee754_pow+0x220>)
 810bdf4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 810bdf8:	428c      	cmp	r4, r1
 810bdfa:	ee10 8a10 	vmov	r8, s0
 810bdfe:	4699      	mov	r9, r3
 810be00:	dc09      	bgt.n	810be16 <__ieee754_pow+0x46>
 810be02:	d103      	bne.n	810be0c <__ieee754_pow+0x3c>
 810be04:	b97a      	cbnz	r2, 810be26 <__ieee754_pow+0x56>
 810be06:	42a6      	cmp	r6, r4
 810be08:	dd02      	ble.n	810be10 <__ieee754_pow+0x40>
 810be0a:	e00c      	b.n	810be26 <__ieee754_pow+0x56>
 810be0c:	428e      	cmp	r6, r1
 810be0e:	dc02      	bgt.n	810be16 <__ieee754_pow+0x46>
 810be10:	428e      	cmp	r6, r1
 810be12:	d110      	bne.n	810be36 <__ieee754_pow+0x66>
 810be14:	b178      	cbz	r0, 810be36 <__ieee754_pow+0x66>
 810be16:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810be1a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810be1e:	ea54 0308 	orrs.w	r3, r4, r8
 810be22:	f000 84b7 	beq.w	810c794 <__ieee754_pow+0x9c4>
 810be26:	4873      	ldr	r0, [pc, #460]	; (810bff4 <__ieee754_pow+0x224>)
 810be28:	b00d      	add	sp, #52	; 0x34
 810be2a:	ecbd 8b06 	vpop	{d8-d10}
 810be2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810be32:	f7ff bdd1 	b.w	810b9d8 <nan>
 810be36:	f1b9 0f00 	cmp.w	r9, #0
 810be3a:	da36      	bge.n	810beaa <__ieee754_pow+0xda>
 810be3c:	496e      	ldr	r1, [pc, #440]	; (810bff8 <__ieee754_pow+0x228>)
 810be3e:	428e      	cmp	r6, r1
 810be40:	dc51      	bgt.n	810bee6 <__ieee754_pow+0x116>
 810be42:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 810be46:	428e      	cmp	r6, r1
 810be48:	f340 84af 	ble.w	810c7aa <__ieee754_pow+0x9da>
 810be4c:	1531      	asrs	r1, r6, #20
 810be4e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 810be52:	2914      	cmp	r1, #20
 810be54:	dd0f      	ble.n	810be76 <__ieee754_pow+0xa6>
 810be56:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 810be5a:	fa20 fc01 	lsr.w	ip, r0, r1
 810be5e:	fa0c f101 	lsl.w	r1, ip, r1
 810be62:	4281      	cmp	r1, r0
 810be64:	f040 84a1 	bne.w	810c7aa <__ieee754_pow+0x9da>
 810be68:	f00c 0c01 	and.w	ip, ip, #1
 810be6c:	f1cc 0102 	rsb	r1, ip, #2
 810be70:	9100      	str	r1, [sp, #0]
 810be72:	b180      	cbz	r0, 810be96 <__ieee754_pow+0xc6>
 810be74:	e059      	b.n	810bf2a <__ieee754_pow+0x15a>
 810be76:	2800      	cmp	r0, #0
 810be78:	d155      	bne.n	810bf26 <__ieee754_pow+0x156>
 810be7a:	f1c1 0114 	rsb	r1, r1, #20
 810be7e:	fa46 fc01 	asr.w	ip, r6, r1
 810be82:	fa0c f101 	lsl.w	r1, ip, r1
 810be86:	42b1      	cmp	r1, r6
 810be88:	f040 848c 	bne.w	810c7a4 <__ieee754_pow+0x9d4>
 810be8c:	f00c 0c01 	and.w	ip, ip, #1
 810be90:	f1cc 0102 	rsb	r1, ip, #2
 810be94:	9100      	str	r1, [sp, #0]
 810be96:	4959      	ldr	r1, [pc, #356]	; (810bffc <__ieee754_pow+0x22c>)
 810be98:	428e      	cmp	r6, r1
 810be9a:	d12d      	bne.n	810bef8 <__ieee754_pow+0x128>
 810be9c:	2f00      	cmp	r7, #0
 810be9e:	da79      	bge.n	810bf94 <__ieee754_pow+0x1c4>
 810bea0:	4956      	ldr	r1, [pc, #344]	; (810bffc <__ieee754_pow+0x22c>)
 810bea2:	2000      	movs	r0, #0
 810bea4:	f7f4 fd5a 	bl	810095c <__aeabi_ddiv>
 810bea8:	e016      	b.n	810bed8 <__ieee754_pow+0x108>
 810beaa:	2100      	movs	r1, #0
 810beac:	9100      	str	r1, [sp, #0]
 810beae:	2800      	cmp	r0, #0
 810beb0:	d13b      	bne.n	810bf2a <__ieee754_pow+0x15a>
 810beb2:	494f      	ldr	r1, [pc, #316]	; (810bff0 <__ieee754_pow+0x220>)
 810beb4:	428e      	cmp	r6, r1
 810beb6:	d1ee      	bne.n	810be96 <__ieee754_pow+0xc6>
 810beb8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 810bebc:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 810bec0:	ea53 0308 	orrs.w	r3, r3, r8
 810bec4:	f000 8466 	beq.w	810c794 <__ieee754_pow+0x9c4>
 810bec8:	4b4d      	ldr	r3, [pc, #308]	; (810c000 <__ieee754_pow+0x230>)
 810beca:	429c      	cmp	r4, r3
 810becc:	dd0d      	ble.n	810beea <__ieee754_pow+0x11a>
 810bece:	2f00      	cmp	r7, #0
 810bed0:	f280 8464 	bge.w	810c79c <__ieee754_pow+0x9cc>
 810bed4:	2000      	movs	r0, #0
 810bed6:	2100      	movs	r1, #0
 810bed8:	ec41 0b10 	vmov	d0, r0, r1
 810bedc:	b00d      	add	sp, #52	; 0x34
 810bede:	ecbd 8b06 	vpop	{d8-d10}
 810bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bee6:	2102      	movs	r1, #2
 810bee8:	e7e0      	b.n	810beac <__ieee754_pow+0xdc>
 810beea:	2f00      	cmp	r7, #0
 810beec:	daf2      	bge.n	810bed4 <__ieee754_pow+0x104>
 810beee:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 810bef2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 810bef6:	e7ef      	b.n	810bed8 <__ieee754_pow+0x108>
 810bef8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 810befc:	d104      	bne.n	810bf08 <__ieee754_pow+0x138>
 810befe:	4610      	mov	r0, r2
 810bf00:	4619      	mov	r1, r3
 810bf02:	f7f4 fc01 	bl	8100708 <__aeabi_dmul>
 810bf06:	e7e7      	b.n	810bed8 <__ieee754_pow+0x108>
 810bf08:	493e      	ldr	r1, [pc, #248]	; (810c004 <__ieee754_pow+0x234>)
 810bf0a:	428f      	cmp	r7, r1
 810bf0c:	d10d      	bne.n	810bf2a <__ieee754_pow+0x15a>
 810bf0e:	f1b9 0f00 	cmp.w	r9, #0
 810bf12:	db0a      	blt.n	810bf2a <__ieee754_pow+0x15a>
 810bf14:	ec43 2b10 	vmov	d0, r2, r3
 810bf18:	b00d      	add	sp, #52	; 0x34
 810bf1a:	ecbd 8b06 	vpop	{d8-d10}
 810bf1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bf22:	f000 bc77 	b.w	810c814 <__ieee754_sqrt>
 810bf26:	2100      	movs	r1, #0
 810bf28:	9100      	str	r1, [sp, #0]
 810bf2a:	ec43 2b10 	vmov	d0, r2, r3
 810bf2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810bf32:	f7ff fe5f 	bl	810bbf4 <fabs>
 810bf36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810bf3a:	ec51 0b10 	vmov	r0, r1, d0
 810bf3e:	f1b8 0f00 	cmp.w	r8, #0
 810bf42:	d12a      	bne.n	810bf9a <__ieee754_pow+0x1ca>
 810bf44:	b12c      	cbz	r4, 810bf52 <__ieee754_pow+0x182>
 810bf46:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 810bffc <__ieee754_pow+0x22c>
 810bf4a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 810bf4e:	45e6      	cmp	lr, ip
 810bf50:	d123      	bne.n	810bf9a <__ieee754_pow+0x1ca>
 810bf52:	2f00      	cmp	r7, #0
 810bf54:	da05      	bge.n	810bf62 <__ieee754_pow+0x192>
 810bf56:	4602      	mov	r2, r0
 810bf58:	460b      	mov	r3, r1
 810bf5a:	2000      	movs	r0, #0
 810bf5c:	4927      	ldr	r1, [pc, #156]	; (810bffc <__ieee754_pow+0x22c>)
 810bf5e:	f7f4 fcfd 	bl	810095c <__aeabi_ddiv>
 810bf62:	f1b9 0f00 	cmp.w	r9, #0
 810bf66:	dab7      	bge.n	810bed8 <__ieee754_pow+0x108>
 810bf68:	9b00      	ldr	r3, [sp, #0]
 810bf6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 810bf6e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 810bf72:	4323      	orrs	r3, r4
 810bf74:	d108      	bne.n	810bf88 <__ieee754_pow+0x1b8>
 810bf76:	4602      	mov	r2, r0
 810bf78:	460b      	mov	r3, r1
 810bf7a:	4610      	mov	r0, r2
 810bf7c:	4619      	mov	r1, r3
 810bf7e:	f7f4 fa0b 	bl	8100398 <__aeabi_dsub>
 810bf82:	4602      	mov	r2, r0
 810bf84:	460b      	mov	r3, r1
 810bf86:	e78d      	b.n	810bea4 <__ieee754_pow+0xd4>
 810bf88:	9b00      	ldr	r3, [sp, #0]
 810bf8a:	2b01      	cmp	r3, #1
 810bf8c:	d1a4      	bne.n	810bed8 <__ieee754_pow+0x108>
 810bf8e:	4602      	mov	r2, r0
 810bf90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810bf94:	4610      	mov	r0, r2
 810bf96:	4619      	mov	r1, r3
 810bf98:	e79e      	b.n	810bed8 <__ieee754_pow+0x108>
 810bf9a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 810bf9e:	f10c 35ff 	add.w	r5, ip, #4294967295
 810bfa2:	950a      	str	r5, [sp, #40]	; 0x28
 810bfa4:	9d00      	ldr	r5, [sp, #0]
 810bfa6:	46ac      	mov	ip, r5
 810bfa8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 810bfaa:	ea5c 0505 	orrs.w	r5, ip, r5
 810bfae:	d0e4      	beq.n	810bf7a <__ieee754_pow+0x1aa>
 810bfb0:	4b15      	ldr	r3, [pc, #84]	; (810c008 <__ieee754_pow+0x238>)
 810bfb2:	429e      	cmp	r6, r3
 810bfb4:	f340 80fc 	ble.w	810c1b0 <__ieee754_pow+0x3e0>
 810bfb8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 810bfbc:	429e      	cmp	r6, r3
 810bfbe:	4b10      	ldr	r3, [pc, #64]	; (810c000 <__ieee754_pow+0x230>)
 810bfc0:	dd07      	ble.n	810bfd2 <__ieee754_pow+0x202>
 810bfc2:	429c      	cmp	r4, r3
 810bfc4:	dc0a      	bgt.n	810bfdc <__ieee754_pow+0x20c>
 810bfc6:	2f00      	cmp	r7, #0
 810bfc8:	da84      	bge.n	810bed4 <__ieee754_pow+0x104>
 810bfca:	a307      	add	r3, pc, #28	; (adr r3, 810bfe8 <__ieee754_pow+0x218>)
 810bfcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810bfd0:	e795      	b.n	810befe <__ieee754_pow+0x12e>
 810bfd2:	429c      	cmp	r4, r3
 810bfd4:	dbf7      	blt.n	810bfc6 <__ieee754_pow+0x1f6>
 810bfd6:	4b09      	ldr	r3, [pc, #36]	; (810bffc <__ieee754_pow+0x22c>)
 810bfd8:	429c      	cmp	r4, r3
 810bfda:	dd17      	ble.n	810c00c <__ieee754_pow+0x23c>
 810bfdc:	2f00      	cmp	r7, #0
 810bfde:	dcf4      	bgt.n	810bfca <__ieee754_pow+0x1fa>
 810bfe0:	e778      	b.n	810bed4 <__ieee754_pow+0x104>
 810bfe2:	bf00      	nop
 810bfe4:	f3af 8000 	nop.w
 810bfe8:	8800759c 	.word	0x8800759c
 810bfec:	7e37e43c 	.word	0x7e37e43c
 810bff0:	7ff00000 	.word	0x7ff00000
 810bff4:	0810d8e0 	.word	0x0810d8e0
 810bff8:	433fffff 	.word	0x433fffff
 810bffc:	3ff00000 	.word	0x3ff00000
 810c000:	3fefffff 	.word	0x3fefffff
 810c004:	3fe00000 	.word	0x3fe00000
 810c008:	41e00000 	.word	0x41e00000
 810c00c:	4b64      	ldr	r3, [pc, #400]	; (810c1a0 <__ieee754_pow+0x3d0>)
 810c00e:	2200      	movs	r2, #0
 810c010:	f7f4 f9c2 	bl	8100398 <__aeabi_dsub>
 810c014:	a356      	add	r3, pc, #344	; (adr r3, 810c170 <__ieee754_pow+0x3a0>)
 810c016:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c01a:	4604      	mov	r4, r0
 810c01c:	460d      	mov	r5, r1
 810c01e:	f7f4 fb73 	bl	8100708 <__aeabi_dmul>
 810c022:	a355      	add	r3, pc, #340	; (adr r3, 810c178 <__ieee754_pow+0x3a8>)
 810c024:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c028:	4606      	mov	r6, r0
 810c02a:	460f      	mov	r7, r1
 810c02c:	4620      	mov	r0, r4
 810c02e:	4629      	mov	r1, r5
 810c030:	f7f4 fb6a 	bl	8100708 <__aeabi_dmul>
 810c034:	4b5b      	ldr	r3, [pc, #364]	; (810c1a4 <__ieee754_pow+0x3d4>)
 810c036:	4682      	mov	sl, r0
 810c038:	468b      	mov	fp, r1
 810c03a:	2200      	movs	r2, #0
 810c03c:	4620      	mov	r0, r4
 810c03e:	4629      	mov	r1, r5
 810c040:	f7f4 fb62 	bl	8100708 <__aeabi_dmul>
 810c044:	4602      	mov	r2, r0
 810c046:	460b      	mov	r3, r1
 810c048:	a14d      	add	r1, pc, #308	; (adr r1, 810c180 <__ieee754_pow+0x3b0>)
 810c04a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c04e:	f7f4 f9a3 	bl	8100398 <__aeabi_dsub>
 810c052:	4622      	mov	r2, r4
 810c054:	462b      	mov	r3, r5
 810c056:	f7f4 fb57 	bl	8100708 <__aeabi_dmul>
 810c05a:	4602      	mov	r2, r0
 810c05c:	460b      	mov	r3, r1
 810c05e:	2000      	movs	r0, #0
 810c060:	4951      	ldr	r1, [pc, #324]	; (810c1a8 <__ieee754_pow+0x3d8>)
 810c062:	f7f4 f999 	bl	8100398 <__aeabi_dsub>
 810c066:	4622      	mov	r2, r4
 810c068:	4680      	mov	r8, r0
 810c06a:	4689      	mov	r9, r1
 810c06c:	462b      	mov	r3, r5
 810c06e:	4620      	mov	r0, r4
 810c070:	4629      	mov	r1, r5
 810c072:	f7f4 fb49 	bl	8100708 <__aeabi_dmul>
 810c076:	4602      	mov	r2, r0
 810c078:	460b      	mov	r3, r1
 810c07a:	4640      	mov	r0, r8
 810c07c:	4649      	mov	r1, r9
 810c07e:	f7f4 fb43 	bl	8100708 <__aeabi_dmul>
 810c082:	a341      	add	r3, pc, #260	; (adr r3, 810c188 <__ieee754_pow+0x3b8>)
 810c084:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c088:	f7f4 fb3e 	bl	8100708 <__aeabi_dmul>
 810c08c:	4602      	mov	r2, r0
 810c08e:	460b      	mov	r3, r1
 810c090:	4650      	mov	r0, sl
 810c092:	4659      	mov	r1, fp
 810c094:	f7f4 f980 	bl	8100398 <__aeabi_dsub>
 810c098:	4602      	mov	r2, r0
 810c09a:	460b      	mov	r3, r1
 810c09c:	4680      	mov	r8, r0
 810c09e:	4689      	mov	r9, r1
 810c0a0:	4630      	mov	r0, r6
 810c0a2:	4639      	mov	r1, r7
 810c0a4:	f7f4 f97a 	bl	810039c <__adddf3>
 810c0a8:	2400      	movs	r4, #0
 810c0aa:	4632      	mov	r2, r6
 810c0ac:	463b      	mov	r3, r7
 810c0ae:	4620      	mov	r0, r4
 810c0b0:	460d      	mov	r5, r1
 810c0b2:	f7f4 f971 	bl	8100398 <__aeabi_dsub>
 810c0b6:	4602      	mov	r2, r0
 810c0b8:	460b      	mov	r3, r1
 810c0ba:	4640      	mov	r0, r8
 810c0bc:	4649      	mov	r1, r9
 810c0be:	f7f4 f96b 	bl	8100398 <__aeabi_dsub>
 810c0c2:	9b00      	ldr	r3, [sp, #0]
 810c0c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810c0c6:	3b01      	subs	r3, #1
 810c0c8:	4313      	orrs	r3, r2
 810c0ca:	4682      	mov	sl, r0
 810c0cc:	468b      	mov	fp, r1
 810c0ce:	f040 81f1 	bne.w	810c4b4 <__ieee754_pow+0x6e4>
 810c0d2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 810c190 <__ieee754_pow+0x3c0>
 810c0d6:	eeb0 8a47 	vmov.f32	s16, s14
 810c0da:	eef0 8a67 	vmov.f32	s17, s15
 810c0de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810c0e2:	2600      	movs	r6, #0
 810c0e4:	4632      	mov	r2, r6
 810c0e6:	463b      	mov	r3, r7
 810c0e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810c0ec:	f7f4 f954 	bl	8100398 <__aeabi_dsub>
 810c0f0:	4622      	mov	r2, r4
 810c0f2:	462b      	mov	r3, r5
 810c0f4:	f7f4 fb08 	bl	8100708 <__aeabi_dmul>
 810c0f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810c0fc:	4680      	mov	r8, r0
 810c0fe:	4689      	mov	r9, r1
 810c100:	4650      	mov	r0, sl
 810c102:	4659      	mov	r1, fp
 810c104:	f7f4 fb00 	bl	8100708 <__aeabi_dmul>
 810c108:	4602      	mov	r2, r0
 810c10a:	460b      	mov	r3, r1
 810c10c:	4640      	mov	r0, r8
 810c10e:	4649      	mov	r1, r9
 810c110:	f7f4 f944 	bl	810039c <__adddf3>
 810c114:	4632      	mov	r2, r6
 810c116:	463b      	mov	r3, r7
 810c118:	4680      	mov	r8, r0
 810c11a:	4689      	mov	r9, r1
 810c11c:	4620      	mov	r0, r4
 810c11e:	4629      	mov	r1, r5
 810c120:	f7f4 faf2 	bl	8100708 <__aeabi_dmul>
 810c124:	460b      	mov	r3, r1
 810c126:	4604      	mov	r4, r0
 810c128:	460d      	mov	r5, r1
 810c12a:	4602      	mov	r2, r0
 810c12c:	4649      	mov	r1, r9
 810c12e:	4640      	mov	r0, r8
 810c130:	f7f4 f934 	bl	810039c <__adddf3>
 810c134:	4b1d      	ldr	r3, [pc, #116]	; (810c1ac <__ieee754_pow+0x3dc>)
 810c136:	4299      	cmp	r1, r3
 810c138:	ec45 4b19 	vmov	d9, r4, r5
 810c13c:	4606      	mov	r6, r0
 810c13e:	460f      	mov	r7, r1
 810c140:	468b      	mov	fp, r1
 810c142:	f340 82fe 	ble.w	810c742 <__ieee754_pow+0x972>
 810c146:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 810c14a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 810c14e:	4303      	orrs	r3, r0
 810c150:	f000 81f0 	beq.w	810c534 <__ieee754_pow+0x764>
 810c154:	a310      	add	r3, pc, #64	; (adr r3, 810c198 <__ieee754_pow+0x3c8>)
 810c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c15a:	ec51 0b18 	vmov	r0, r1, d8
 810c15e:	f7f4 fad3 	bl	8100708 <__aeabi_dmul>
 810c162:	a30d      	add	r3, pc, #52	; (adr r3, 810c198 <__ieee754_pow+0x3c8>)
 810c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c168:	e6cb      	b.n	810bf02 <__ieee754_pow+0x132>
 810c16a:	bf00      	nop
 810c16c:	f3af 8000 	nop.w
 810c170:	60000000 	.word	0x60000000
 810c174:	3ff71547 	.word	0x3ff71547
 810c178:	f85ddf44 	.word	0xf85ddf44
 810c17c:	3e54ae0b 	.word	0x3e54ae0b
 810c180:	55555555 	.word	0x55555555
 810c184:	3fd55555 	.word	0x3fd55555
 810c188:	652b82fe 	.word	0x652b82fe
 810c18c:	3ff71547 	.word	0x3ff71547
 810c190:	00000000 	.word	0x00000000
 810c194:	bff00000 	.word	0xbff00000
 810c198:	8800759c 	.word	0x8800759c
 810c19c:	7e37e43c 	.word	0x7e37e43c
 810c1a0:	3ff00000 	.word	0x3ff00000
 810c1a4:	3fd00000 	.word	0x3fd00000
 810c1a8:	3fe00000 	.word	0x3fe00000
 810c1ac:	408fffff 	.word	0x408fffff
 810c1b0:	4bd7      	ldr	r3, [pc, #860]	; (810c510 <__ieee754_pow+0x740>)
 810c1b2:	ea03 0309 	and.w	r3, r3, r9
 810c1b6:	2200      	movs	r2, #0
 810c1b8:	b92b      	cbnz	r3, 810c1c6 <__ieee754_pow+0x3f6>
 810c1ba:	4bd6      	ldr	r3, [pc, #856]	; (810c514 <__ieee754_pow+0x744>)
 810c1bc:	f7f4 faa4 	bl	8100708 <__aeabi_dmul>
 810c1c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 810c1c4:	460c      	mov	r4, r1
 810c1c6:	1523      	asrs	r3, r4, #20
 810c1c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 810c1cc:	4413      	add	r3, r2
 810c1ce:	9309      	str	r3, [sp, #36]	; 0x24
 810c1d0:	4bd1      	ldr	r3, [pc, #836]	; (810c518 <__ieee754_pow+0x748>)
 810c1d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 810c1d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 810c1da:	429c      	cmp	r4, r3
 810c1dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810c1e0:	dd08      	ble.n	810c1f4 <__ieee754_pow+0x424>
 810c1e2:	4bce      	ldr	r3, [pc, #824]	; (810c51c <__ieee754_pow+0x74c>)
 810c1e4:	429c      	cmp	r4, r3
 810c1e6:	f340 8163 	ble.w	810c4b0 <__ieee754_pow+0x6e0>
 810c1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810c1ec:	3301      	adds	r3, #1
 810c1ee:	9309      	str	r3, [sp, #36]	; 0x24
 810c1f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 810c1f4:	2400      	movs	r4, #0
 810c1f6:	00e3      	lsls	r3, r4, #3
 810c1f8:	930b      	str	r3, [sp, #44]	; 0x2c
 810c1fa:	4bc9      	ldr	r3, [pc, #804]	; (810c520 <__ieee754_pow+0x750>)
 810c1fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810c200:	ed93 7b00 	vldr	d7, [r3]
 810c204:	4629      	mov	r1, r5
 810c206:	ec53 2b17 	vmov	r2, r3, d7
 810c20a:	eeb0 8a47 	vmov.f32	s16, s14
 810c20e:	eef0 8a67 	vmov.f32	s17, s15
 810c212:	4682      	mov	sl, r0
 810c214:	f7f4 f8c0 	bl	8100398 <__aeabi_dsub>
 810c218:	4652      	mov	r2, sl
 810c21a:	4606      	mov	r6, r0
 810c21c:	460f      	mov	r7, r1
 810c21e:	462b      	mov	r3, r5
 810c220:	ec51 0b18 	vmov	r0, r1, d8
 810c224:	f7f4 f8ba 	bl	810039c <__adddf3>
 810c228:	4602      	mov	r2, r0
 810c22a:	460b      	mov	r3, r1
 810c22c:	2000      	movs	r0, #0
 810c22e:	49bd      	ldr	r1, [pc, #756]	; (810c524 <__ieee754_pow+0x754>)
 810c230:	f7f4 fb94 	bl	810095c <__aeabi_ddiv>
 810c234:	ec41 0b19 	vmov	d9, r0, r1
 810c238:	4602      	mov	r2, r0
 810c23a:	460b      	mov	r3, r1
 810c23c:	4630      	mov	r0, r6
 810c23e:	4639      	mov	r1, r7
 810c240:	f7f4 fa62 	bl	8100708 <__aeabi_dmul>
 810c244:	e9cd 0106 	strd	r0, r1, [sp, #24]
 810c248:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c24c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810c250:	2300      	movs	r3, #0
 810c252:	9304      	str	r3, [sp, #16]
 810c254:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 810c258:	46ab      	mov	fp, r5
 810c25a:	106d      	asrs	r5, r5, #1
 810c25c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 810c260:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 810c264:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 810c268:	2200      	movs	r2, #0
 810c26a:	4640      	mov	r0, r8
 810c26c:	4649      	mov	r1, r9
 810c26e:	4614      	mov	r4, r2
 810c270:	461d      	mov	r5, r3
 810c272:	f7f4 fa49 	bl	8100708 <__aeabi_dmul>
 810c276:	4602      	mov	r2, r0
 810c278:	460b      	mov	r3, r1
 810c27a:	4630      	mov	r0, r6
 810c27c:	4639      	mov	r1, r7
 810c27e:	f7f4 f88b 	bl	8100398 <__aeabi_dsub>
 810c282:	ec53 2b18 	vmov	r2, r3, d8
 810c286:	4606      	mov	r6, r0
 810c288:	460f      	mov	r7, r1
 810c28a:	4620      	mov	r0, r4
 810c28c:	4629      	mov	r1, r5
 810c28e:	f7f4 f883 	bl	8100398 <__aeabi_dsub>
 810c292:	4602      	mov	r2, r0
 810c294:	460b      	mov	r3, r1
 810c296:	4650      	mov	r0, sl
 810c298:	4659      	mov	r1, fp
 810c29a:	f7f4 f87d 	bl	8100398 <__aeabi_dsub>
 810c29e:	4642      	mov	r2, r8
 810c2a0:	464b      	mov	r3, r9
 810c2a2:	f7f4 fa31 	bl	8100708 <__aeabi_dmul>
 810c2a6:	4602      	mov	r2, r0
 810c2a8:	460b      	mov	r3, r1
 810c2aa:	4630      	mov	r0, r6
 810c2ac:	4639      	mov	r1, r7
 810c2ae:	f7f4 f873 	bl	8100398 <__aeabi_dsub>
 810c2b2:	ec53 2b19 	vmov	r2, r3, d9
 810c2b6:	f7f4 fa27 	bl	8100708 <__aeabi_dmul>
 810c2ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c2be:	ec41 0b18 	vmov	d8, r0, r1
 810c2c2:	4610      	mov	r0, r2
 810c2c4:	4619      	mov	r1, r3
 810c2c6:	f7f4 fa1f 	bl	8100708 <__aeabi_dmul>
 810c2ca:	a37d      	add	r3, pc, #500	; (adr r3, 810c4c0 <__ieee754_pow+0x6f0>)
 810c2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c2d0:	4604      	mov	r4, r0
 810c2d2:	460d      	mov	r5, r1
 810c2d4:	f7f4 fa18 	bl	8100708 <__aeabi_dmul>
 810c2d8:	a37b      	add	r3, pc, #492	; (adr r3, 810c4c8 <__ieee754_pow+0x6f8>)
 810c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c2de:	f7f4 f85d 	bl	810039c <__adddf3>
 810c2e2:	4622      	mov	r2, r4
 810c2e4:	462b      	mov	r3, r5
 810c2e6:	f7f4 fa0f 	bl	8100708 <__aeabi_dmul>
 810c2ea:	a379      	add	r3, pc, #484	; (adr r3, 810c4d0 <__ieee754_pow+0x700>)
 810c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c2f0:	f7f4 f854 	bl	810039c <__adddf3>
 810c2f4:	4622      	mov	r2, r4
 810c2f6:	462b      	mov	r3, r5
 810c2f8:	f7f4 fa06 	bl	8100708 <__aeabi_dmul>
 810c2fc:	a376      	add	r3, pc, #472	; (adr r3, 810c4d8 <__ieee754_pow+0x708>)
 810c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c302:	f7f4 f84b 	bl	810039c <__adddf3>
 810c306:	4622      	mov	r2, r4
 810c308:	462b      	mov	r3, r5
 810c30a:	f7f4 f9fd 	bl	8100708 <__aeabi_dmul>
 810c30e:	a374      	add	r3, pc, #464	; (adr r3, 810c4e0 <__ieee754_pow+0x710>)
 810c310:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c314:	f7f4 f842 	bl	810039c <__adddf3>
 810c318:	4622      	mov	r2, r4
 810c31a:	462b      	mov	r3, r5
 810c31c:	f7f4 f9f4 	bl	8100708 <__aeabi_dmul>
 810c320:	a371      	add	r3, pc, #452	; (adr r3, 810c4e8 <__ieee754_pow+0x718>)
 810c322:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c326:	f7f4 f839 	bl	810039c <__adddf3>
 810c32a:	4622      	mov	r2, r4
 810c32c:	4606      	mov	r6, r0
 810c32e:	460f      	mov	r7, r1
 810c330:	462b      	mov	r3, r5
 810c332:	4620      	mov	r0, r4
 810c334:	4629      	mov	r1, r5
 810c336:	f7f4 f9e7 	bl	8100708 <__aeabi_dmul>
 810c33a:	4602      	mov	r2, r0
 810c33c:	460b      	mov	r3, r1
 810c33e:	4630      	mov	r0, r6
 810c340:	4639      	mov	r1, r7
 810c342:	f7f4 f9e1 	bl	8100708 <__aeabi_dmul>
 810c346:	4642      	mov	r2, r8
 810c348:	4604      	mov	r4, r0
 810c34a:	460d      	mov	r5, r1
 810c34c:	464b      	mov	r3, r9
 810c34e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810c352:	f7f4 f823 	bl	810039c <__adddf3>
 810c356:	ec53 2b18 	vmov	r2, r3, d8
 810c35a:	f7f4 f9d5 	bl	8100708 <__aeabi_dmul>
 810c35e:	4622      	mov	r2, r4
 810c360:	462b      	mov	r3, r5
 810c362:	f7f4 f81b 	bl	810039c <__adddf3>
 810c366:	4642      	mov	r2, r8
 810c368:	4682      	mov	sl, r0
 810c36a:	468b      	mov	fp, r1
 810c36c:	464b      	mov	r3, r9
 810c36e:	4640      	mov	r0, r8
 810c370:	4649      	mov	r1, r9
 810c372:	f7f4 f9c9 	bl	8100708 <__aeabi_dmul>
 810c376:	4b6c      	ldr	r3, [pc, #432]	; (810c528 <__ieee754_pow+0x758>)
 810c378:	2200      	movs	r2, #0
 810c37a:	4606      	mov	r6, r0
 810c37c:	460f      	mov	r7, r1
 810c37e:	f7f4 f80d 	bl	810039c <__adddf3>
 810c382:	4652      	mov	r2, sl
 810c384:	465b      	mov	r3, fp
 810c386:	f7f4 f809 	bl	810039c <__adddf3>
 810c38a:	9c04      	ldr	r4, [sp, #16]
 810c38c:	460d      	mov	r5, r1
 810c38e:	4622      	mov	r2, r4
 810c390:	460b      	mov	r3, r1
 810c392:	4640      	mov	r0, r8
 810c394:	4649      	mov	r1, r9
 810c396:	f7f4 f9b7 	bl	8100708 <__aeabi_dmul>
 810c39a:	4b63      	ldr	r3, [pc, #396]	; (810c528 <__ieee754_pow+0x758>)
 810c39c:	4680      	mov	r8, r0
 810c39e:	4689      	mov	r9, r1
 810c3a0:	2200      	movs	r2, #0
 810c3a2:	4620      	mov	r0, r4
 810c3a4:	4629      	mov	r1, r5
 810c3a6:	f7f3 fff7 	bl	8100398 <__aeabi_dsub>
 810c3aa:	4632      	mov	r2, r6
 810c3ac:	463b      	mov	r3, r7
 810c3ae:	f7f3 fff3 	bl	8100398 <__aeabi_dsub>
 810c3b2:	4602      	mov	r2, r0
 810c3b4:	460b      	mov	r3, r1
 810c3b6:	4650      	mov	r0, sl
 810c3b8:	4659      	mov	r1, fp
 810c3ba:	f7f3 ffed 	bl	8100398 <__aeabi_dsub>
 810c3be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810c3c2:	f7f4 f9a1 	bl	8100708 <__aeabi_dmul>
 810c3c6:	4622      	mov	r2, r4
 810c3c8:	4606      	mov	r6, r0
 810c3ca:	460f      	mov	r7, r1
 810c3cc:	462b      	mov	r3, r5
 810c3ce:	ec51 0b18 	vmov	r0, r1, d8
 810c3d2:	f7f4 f999 	bl	8100708 <__aeabi_dmul>
 810c3d6:	4602      	mov	r2, r0
 810c3d8:	460b      	mov	r3, r1
 810c3da:	4630      	mov	r0, r6
 810c3dc:	4639      	mov	r1, r7
 810c3de:	f7f3 ffdd 	bl	810039c <__adddf3>
 810c3e2:	4606      	mov	r6, r0
 810c3e4:	460f      	mov	r7, r1
 810c3e6:	4602      	mov	r2, r0
 810c3e8:	460b      	mov	r3, r1
 810c3ea:	4640      	mov	r0, r8
 810c3ec:	4649      	mov	r1, r9
 810c3ee:	f7f3 ffd5 	bl	810039c <__adddf3>
 810c3f2:	9c04      	ldr	r4, [sp, #16]
 810c3f4:	a33e      	add	r3, pc, #248	; (adr r3, 810c4f0 <__ieee754_pow+0x720>)
 810c3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c3fa:	4620      	mov	r0, r4
 810c3fc:	460d      	mov	r5, r1
 810c3fe:	f7f4 f983 	bl	8100708 <__aeabi_dmul>
 810c402:	4642      	mov	r2, r8
 810c404:	ec41 0b18 	vmov	d8, r0, r1
 810c408:	464b      	mov	r3, r9
 810c40a:	4620      	mov	r0, r4
 810c40c:	4629      	mov	r1, r5
 810c40e:	f7f3 ffc3 	bl	8100398 <__aeabi_dsub>
 810c412:	4602      	mov	r2, r0
 810c414:	460b      	mov	r3, r1
 810c416:	4630      	mov	r0, r6
 810c418:	4639      	mov	r1, r7
 810c41a:	f7f3 ffbd 	bl	8100398 <__aeabi_dsub>
 810c41e:	a336      	add	r3, pc, #216	; (adr r3, 810c4f8 <__ieee754_pow+0x728>)
 810c420:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c424:	f7f4 f970 	bl	8100708 <__aeabi_dmul>
 810c428:	a335      	add	r3, pc, #212	; (adr r3, 810c500 <__ieee754_pow+0x730>)
 810c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c42e:	4606      	mov	r6, r0
 810c430:	460f      	mov	r7, r1
 810c432:	4620      	mov	r0, r4
 810c434:	4629      	mov	r1, r5
 810c436:	f7f4 f967 	bl	8100708 <__aeabi_dmul>
 810c43a:	4602      	mov	r2, r0
 810c43c:	460b      	mov	r3, r1
 810c43e:	4630      	mov	r0, r6
 810c440:	4639      	mov	r1, r7
 810c442:	f7f3 ffab 	bl	810039c <__adddf3>
 810c446:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c448:	4b38      	ldr	r3, [pc, #224]	; (810c52c <__ieee754_pow+0x75c>)
 810c44a:	4413      	add	r3, r2
 810c44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c450:	f7f3 ffa4 	bl	810039c <__adddf3>
 810c454:	4682      	mov	sl, r0
 810c456:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c458:	468b      	mov	fp, r1
 810c45a:	f7f4 f8eb 	bl	8100634 <__aeabi_i2d>
 810c45e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810c460:	4b33      	ldr	r3, [pc, #204]	; (810c530 <__ieee754_pow+0x760>)
 810c462:	4413      	add	r3, r2
 810c464:	e9d3 8900 	ldrd	r8, r9, [r3]
 810c468:	4606      	mov	r6, r0
 810c46a:	460f      	mov	r7, r1
 810c46c:	4652      	mov	r2, sl
 810c46e:	465b      	mov	r3, fp
 810c470:	ec51 0b18 	vmov	r0, r1, d8
 810c474:	f7f3 ff92 	bl	810039c <__adddf3>
 810c478:	4642      	mov	r2, r8
 810c47a:	464b      	mov	r3, r9
 810c47c:	f7f3 ff8e 	bl	810039c <__adddf3>
 810c480:	4632      	mov	r2, r6
 810c482:	463b      	mov	r3, r7
 810c484:	f7f3 ff8a 	bl	810039c <__adddf3>
 810c488:	9c04      	ldr	r4, [sp, #16]
 810c48a:	4632      	mov	r2, r6
 810c48c:	463b      	mov	r3, r7
 810c48e:	4620      	mov	r0, r4
 810c490:	460d      	mov	r5, r1
 810c492:	f7f3 ff81 	bl	8100398 <__aeabi_dsub>
 810c496:	4642      	mov	r2, r8
 810c498:	464b      	mov	r3, r9
 810c49a:	f7f3 ff7d 	bl	8100398 <__aeabi_dsub>
 810c49e:	ec53 2b18 	vmov	r2, r3, d8
 810c4a2:	f7f3 ff79 	bl	8100398 <__aeabi_dsub>
 810c4a6:	4602      	mov	r2, r0
 810c4a8:	460b      	mov	r3, r1
 810c4aa:	4650      	mov	r0, sl
 810c4ac:	4659      	mov	r1, fp
 810c4ae:	e606      	b.n	810c0be <__ieee754_pow+0x2ee>
 810c4b0:	2401      	movs	r4, #1
 810c4b2:	e6a0      	b.n	810c1f6 <__ieee754_pow+0x426>
 810c4b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 810c508 <__ieee754_pow+0x738>
 810c4b8:	e60d      	b.n	810c0d6 <__ieee754_pow+0x306>
 810c4ba:	bf00      	nop
 810c4bc:	f3af 8000 	nop.w
 810c4c0:	4a454eef 	.word	0x4a454eef
 810c4c4:	3fca7e28 	.word	0x3fca7e28
 810c4c8:	93c9db65 	.word	0x93c9db65
 810c4cc:	3fcd864a 	.word	0x3fcd864a
 810c4d0:	a91d4101 	.word	0xa91d4101
 810c4d4:	3fd17460 	.word	0x3fd17460
 810c4d8:	518f264d 	.word	0x518f264d
 810c4dc:	3fd55555 	.word	0x3fd55555
 810c4e0:	db6fabff 	.word	0xdb6fabff
 810c4e4:	3fdb6db6 	.word	0x3fdb6db6
 810c4e8:	33333303 	.word	0x33333303
 810c4ec:	3fe33333 	.word	0x3fe33333
 810c4f0:	e0000000 	.word	0xe0000000
 810c4f4:	3feec709 	.word	0x3feec709
 810c4f8:	dc3a03fd 	.word	0xdc3a03fd
 810c4fc:	3feec709 	.word	0x3feec709
 810c500:	145b01f5 	.word	0x145b01f5
 810c504:	be3e2fe0 	.word	0xbe3e2fe0
 810c508:	00000000 	.word	0x00000000
 810c50c:	3ff00000 	.word	0x3ff00000
 810c510:	7ff00000 	.word	0x7ff00000
 810c514:	43400000 	.word	0x43400000
 810c518:	0003988e 	.word	0x0003988e
 810c51c:	000bb679 	.word	0x000bb679
 810c520:	0810d8e8 	.word	0x0810d8e8
 810c524:	3ff00000 	.word	0x3ff00000
 810c528:	40080000 	.word	0x40080000
 810c52c:	0810d908 	.word	0x0810d908
 810c530:	0810d8f8 	.word	0x0810d8f8
 810c534:	a3b5      	add	r3, pc, #724	; (adr r3, 810c80c <__ieee754_pow+0xa3c>)
 810c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c53a:	4640      	mov	r0, r8
 810c53c:	4649      	mov	r1, r9
 810c53e:	f7f3 ff2d 	bl	810039c <__adddf3>
 810c542:	4622      	mov	r2, r4
 810c544:	ec41 0b1a 	vmov	d10, r0, r1
 810c548:	462b      	mov	r3, r5
 810c54a:	4630      	mov	r0, r6
 810c54c:	4639      	mov	r1, r7
 810c54e:	f7f3 ff23 	bl	8100398 <__aeabi_dsub>
 810c552:	4602      	mov	r2, r0
 810c554:	460b      	mov	r3, r1
 810c556:	ec51 0b1a 	vmov	r0, r1, d10
 810c55a:	f7f4 fb65 	bl	8100c28 <__aeabi_dcmpgt>
 810c55e:	2800      	cmp	r0, #0
 810c560:	f47f adf8 	bne.w	810c154 <__ieee754_pow+0x384>
 810c564:	4aa4      	ldr	r2, [pc, #656]	; (810c7f8 <__ieee754_pow+0xa28>)
 810c566:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 810c56a:	4293      	cmp	r3, r2
 810c56c:	f340 810b 	ble.w	810c786 <__ieee754_pow+0x9b6>
 810c570:	151b      	asrs	r3, r3, #20
 810c572:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 810c576:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 810c57a:	fa4a f303 	asr.w	r3, sl, r3
 810c57e:	445b      	add	r3, fp
 810c580:	f3c3 520a 	ubfx	r2, r3, #20, #11
 810c584:	4e9d      	ldr	r6, [pc, #628]	; (810c7fc <__ieee754_pow+0xa2c>)
 810c586:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 810c58a:	4116      	asrs	r6, r2
 810c58c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 810c590:	2000      	movs	r0, #0
 810c592:	ea23 0106 	bic.w	r1, r3, r6
 810c596:	f1c2 0214 	rsb	r2, r2, #20
 810c59a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 810c59e:	fa4a fa02 	asr.w	sl, sl, r2
 810c5a2:	f1bb 0f00 	cmp.w	fp, #0
 810c5a6:	4602      	mov	r2, r0
 810c5a8:	460b      	mov	r3, r1
 810c5aa:	4620      	mov	r0, r4
 810c5ac:	4629      	mov	r1, r5
 810c5ae:	bfb8      	it	lt
 810c5b0:	f1ca 0a00 	rsblt	sl, sl, #0
 810c5b4:	f7f3 fef0 	bl	8100398 <__aeabi_dsub>
 810c5b8:	ec41 0b19 	vmov	d9, r0, r1
 810c5bc:	4642      	mov	r2, r8
 810c5be:	464b      	mov	r3, r9
 810c5c0:	ec51 0b19 	vmov	r0, r1, d9
 810c5c4:	f7f3 feea 	bl	810039c <__adddf3>
 810c5c8:	2400      	movs	r4, #0
 810c5ca:	a379      	add	r3, pc, #484	; (adr r3, 810c7b0 <__ieee754_pow+0x9e0>)
 810c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c5d0:	4620      	mov	r0, r4
 810c5d2:	460d      	mov	r5, r1
 810c5d4:	f7f4 f898 	bl	8100708 <__aeabi_dmul>
 810c5d8:	ec53 2b19 	vmov	r2, r3, d9
 810c5dc:	4606      	mov	r6, r0
 810c5de:	460f      	mov	r7, r1
 810c5e0:	4620      	mov	r0, r4
 810c5e2:	4629      	mov	r1, r5
 810c5e4:	f7f3 fed8 	bl	8100398 <__aeabi_dsub>
 810c5e8:	4602      	mov	r2, r0
 810c5ea:	460b      	mov	r3, r1
 810c5ec:	4640      	mov	r0, r8
 810c5ee:	4649      	mov	r1, r9
 810c5f0:	f7f3 fed2 	bl	8100398 <__aeabi_dsub>
 810c5f4:	a370      	add	r3, pc, #448	; (adr r3, 810c7b8 <__ieee754_pow+0x9e8>)
 810c5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c5fa:	f7f4 f885 	bl	8100708 <__aeabi_dmul>
 810c5fe:	a370      	add	r3, pc, #448	; (adr r3, 810c7c0 <__ieee754_pow+0x9f0>)
 810c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c604:	4680      	mov	r8, r0
 810c606:	4689      	mov	r9, r1
 810c608:	4620      	mov	r0, r4
 810c60a:	4629      	mov	r1, r5
 810c60c:	f7f4 f87c 	bl	8100708 <__aeabi_dmul>
 810c610:	4602      	mov	r2, r0
 810c612:	460b      	mov	r3, r1
 810c614:	4640      	mov	r0, r8
 810c616:	4649      	mov	r1, r9
 810c618:	f7f3 fec0 	bl	810039c <__adddf3>
 810c61c:	4604      	mov	r4, r0
 810c61e:	460d      	mov	r5, r1
 810c620:	4602      	mov	r2, r0
 810c622:	460b      	mov	r3, r1
 810c624:	4630      	mov	r0, r6
 810c626:	4639      	mov	r1, r7
 810c628:	f7f3 feb8 	bl	810039c <__adddf3>
 810c62c:	4632      	mov	r2, r6
 810c62e:	463b      	mov	r3, r7
 810c630:	4680      	mov	r8, r0
 810c632:	4689      	mov	r9, r1
 810c634:	f7f3 feb0 	bl	8100398 <__aeabi_dsub>
 810c638:	4602      	mov	r2, r0
 810c63a:	460b      	mov	r3, r1
 810c63c:	4620      	mov	r0, r4
 810c63e:	4629      	mov	r1, r5
 810c640:	f7f3 feaa 	bl	8100398 <__aeabi_dsub>
 810c644:	4642      	mov	r2, r8
 810c646:	4606      	mov	r6, r0
 810c648:	460f      	mov	r7, r1
 810c64a:	464b      	mov	r3, r9
 810c64c:	4640      	mov	r0, r8
 810c64e:	4649      	mov	r1, r9
 810c650:	f7f4 f85a 	bl	8100708 <__aeabi_dmul>
 810c654:	a35c      	add	r3, pc, #368	; (adr r3, 810c7c8 <__ieee754_pow+0x9f8>)
 810c656:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c65a:	4604      	mov	r4, r0
 810c65c:	460d      	mov	r5, r1
 810c65e:	f7f4 f853 	bl	8100708 <__aeabi_dmul>
 810c662:	a35b      	add	r3, pc, #364	; (adr r3, 810c7d0 <__ieee754_pow+0xa00>)
 810c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c668:	f7f3 fe96 	bl	8100398 <__aeabi_dsub>
 810c66c:	4622      	mov	r2, r4
 810c66e:	462b      	mov	r3, r5
 810c670:	f7f4 f84a 	bl	8100708 <__aeabi_dmul>
 810c674:	a358      	add	r3, pc, #352	; (adr r3, 810c7d8 <__ieee754_pow+0xa08>)
 810c676:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c67a:	f7f3 fe8f 	bl	810039c <__adddf3>
 810c67e:	4622      	mov	r2, r4
 810c680:	462b      	mov	r3, r5
 810c682:	f7f4 f841 	bl	8100708 <__aeabi_dmul>
 810c686:	a356      	add	r3, pc, #344	; (adr r3, 810c7e0 <__ieee754_pow+0xa10>)
 810c688:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c68c:	f7f3 fe84 	bl	8100398 <__aeabi_dsub>
 810c690:	4622      	mov	r2, r4
 810c692:	462b      	mov	r3, r5
 810c694:	f7f4 f838 	bl	8100708 <__aeabi_dmul>
 810c698:	a353      	add	r3, pc, #332	; (adr r3, 810c7e8 <__ieee754_pow+0xa18>)
 810c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c69e:	f7f3 fe7d 	bl	810039c <__adddf3>
 810c6a2:	4622      	mov	r2, r4
 810c6a4:	462b      	mov	r3, r5
 810c6a6:	f7f4 f82f 	bl	8100708 <__aeabi_dmul>
 810c6aa:	4602      	mov	r2, r0
 810c6ac:	460b      	mov	r3, r1
 810c6ae:	4640      	mov	r0, r8
 810c6b0:	4649      	mov	r1, r9
 810c6b2:	f7f3 fe71 	bl	8100398 <__aeabi_dsub>
 810c6b6:	4604      	mov	r4, r0
 810c6b8:	460d      	mov	r5, r1
 810c6ba:	4602      	mov	r2, r0
 810c6bc:	460b      	mov	r3, r1
 810c6be:	4640      	mov	r0, r8
 810c6c0:	4649      	mov	r1, r9
 810c6c2:	f7f4 f821 	bl	8100708 <__aeabi_dmul>
 810c6c6:	2200      	movs	r2, #0
 810c6c8:	ec41 0b19 	vmov	d9, r0, r1
 810c6cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810c6d0:	4620      	mov	r0, r4
 810c6d2:	4629      	mov	r1, r5
 810c6d4:	f7f3 fe60 	bl	8100398 <__aeabi_dsub>
 810c6d8:	4602      	mov	r2, r0
 810c6da:	460b      	mov	r3, r1
 810c6dc:	ec51 0b19 	vmov	r0, r1, d9
 810c6e0:	f7f4 f93c 	bl	810095c <__aeabi_ddiv>
 810c6e4:	4632      	mov	r2, r6
 810c6e6:	4604      	mov	r4, r0
 810c6e8:	460d      	mov	r5, r1
 810c6ea:	463b      	mov	r3, r7
 810c6ec:	4640      	mov	r0, r8
 810c6ee:	4649      	mov	r1, r9
 810c6f0:	f7f4 f80a 	bl	8100708 <__aeabi_dmul>
 810c6f4:	4632      	mov	r2, r6
 810c6f6:	463b      	mov	r3, r7
 810c6f8:	f7f3 fe50 	bl	810039c <__adddf3>
 810c6fc:	4602      	mov	r2, r0
 810c6fe:	460b      	mov	r3, r1
 810c700:	4620      	mov	r0, r4
 810c702:	4629      	mov	r1, r5
 810c704:	f7f3 fe48 	bl	8100398 <__aeabi_dsub>
 810c708:	4642      	mov	r2, r8
 810c70a:	464b      	mov	r3, r9
 810c70c:	f7f3 fe44 	bl	8100398 <__aeabi_dsub>
 810c710:	460b      	mov	r3, r1
 810c712:	4602      	mov	r2, r0
 810c714:	493a      	ldr	r1, [pc, #232]	; (810c800 <__ieee754_pow+0xa30>)
 810c716:	2000      	movs	r0, #0
 810c718:	f7f3 fe3e 	bl	8100398 <__aeabi_dsub>
 810c71c:	e9cd 0100 	strd	r0, r1, [sp]
 810c720:	9b01      	ldr	r3, [sp, #4]
 810c722:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 810c726:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810c72a:	da2f      	bge.n	810c78c <__ieee754_pow+0x9bc>
 810c72c:	4650      	mov	r0, sl
 810c72e:	ed9d 0b00 	vldr	d0, [sp]
 810c732:	f000 f9b9 	bl	810caa8 <scalbn>
 810c736:	ec51 0b10 	vmov	r0, r1, d0
 810c73a:	ec53 2b18 	vmov	r2, r3, d8
 810c73e:	f7ff bbe0 	b.w	810bf02 <__ieee754_pow+0x132>
 810c742:	4b30      	ldr	r3, [pc, #192]	; (810c804 <__ieee754_pow+0xa34>)
 810c744:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 810c748:	429e      	cmp	r6, r3
 810c74a:	f77f af0b 	ble.w	810c564 <__ieee754_pow+0x794>
 810c74e:	4b2e      	ldr	r3, [pc, #184]	; (810c808 <__ieee754_pow+0xa38>)
 810c750:	440b      	add	r3, r1
 810c752:	4303      	orrs	r3, r0
 810c754:	d00b      	beq.n	810c76e <__ieee754_pow+0x99e>
 810c756:	a326      	add	r3, pc, #152	; (adr r3, 810c7f0 <__ieee754_pow+0xa20>)
 810c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c75c:	ec51 0b18 	vmov	r0, r1, d8
 810c760:	f7f3 ffd2 	bl	8100708 <__aeabi_dmul>
 810c764:	a322      	add	r3, pc, #136	; (adr r3, 810c7f0 <__ieee754_pow+0xa20>)
 810c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810c76a:	f7ff bbca 	b.w	810bf02 <__ieee754_pow+0x132>
 810c76e:	4622      	mov	r2, r4
 810c770:	462b      	mov	r3, r5
 810c772:	f7f3 fe11 	bl	8100398 <__aeabi_dsub>
 810c776:	4642      	mov	r2, r8
 810c778:	464b      	mov	r3, r9
 810c77a:	f7f4 fa4b 	bl	8100c14 <__aeabi_dcmpge>
 810c77e:	2800      	cmp	r0, #0
 810c780:	f43f aef0 	beq.w	810c564 <__ieee754_pow+0x794>
 810c784:	e7e7      	b.n	810c756 <__ieee754_pow+0x986>
 810c786:	f04f 0a00 	mov.w	sl, #0
 810c78a:	e717      	b.n	810c5bc <__ieee754_pow+0x7ec>
 810c78c:	e9dd 0100 	ldrd	r0, r1, [sp]
 810c790:	4619      	mov	r1, r3
 810c792:	e7d2      	b.n	810c73a <__ieee754_pow+0x96a>
 810c794:	491a      	ldr	r1, [pc, #104]	; (810c800 <__ieee754_pow+0xa30>)
 810c796:	2000      	movs	r0, #0
 810c798:	f7ff bb9e 	b.w	810bed8 <__ieee754_pow+0x108>
 810c79c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810c7a0:	f7ff bb9a 	b.w	810bed8 <__ieee754_pow+0x108>
 810c7a4:	9000      	str	r0, [sp, #0]
 810c7a6:	f7ff bb76 	b.w	810be96 <__ieee754_pow+0xc6>
 810c7aa:	2100      	movs	r1, #0
 810c7ac:	f7ff bb60 	b.w	810be70 <__ieee754_pow+0xa0>
 810c7b0:	00000000 	.word	0x00000000
 810c7b4:	3fe62e43 	.word	0x3fe62e43
 810c7b8:	fefa39ef 	.word	0xfefa39ef
 810c7bc:	3fe62e42 	.word	0x3fe62e42
 810c7c0:	0ca86c39 	.word	0x0ca86c39
 810c7c4:	be205c61 	.word	0xbe205c61
 810c7c8:	72bea4d0 	.word	0x72bea4d0
 810c7cc:	3e663769 	.word	0x3e663769
 810c7d0:	c5d26bf1 	.word	0xc5d26bf1
 810c7d4:	3ebbbd41 	.word	0x3ebbbd41
 810c7d8:	af25de2c 	.word	0xaf25de2c
 810c7dc:	3f11566a 	.word	0x3f11566a
 810c7e0:	16bebd93 	.word	0x16bebd93
 810c7e4:	3f66c16c 	.word	0x3f66c16c
 810c7e8:	5555553e 	.word	0x5555553e
 810c7ec:	3fc55555 	.word	0x3fc55555
 810c7f0:	c2f8f359 	.word	0xc2f8f359
 810c7f4:	01a56e1f 	.word	0x01a56e1f
 810c7f8:	3fe00000 	.word	0x3fe00000
 810c7fc:	000fffff 	.word	0x000fffff
 810c800:	3ff00000 	.word	0x3ff00000
 810c804:	4090cbff 	.word	0x4090cbff
 810c808:	3f6f3400 	.word	0x3f6f3400
 810c80c:	652b82fe 	.word	0x652b82fe
 810c810:	3c971547 	.word	0x3c971547

0810c814 <__ieee754_sqrt>:
 810c814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c818:	ec55 4b10 	vmov	r4, r5, d0
 810c81c:	4e56      	ldr	r6, [pc, #344]	; (810c978 <__ieee754_sqrt+0x164>)
 810c81e:	43ae      	bics	r6, r5
 810c820:	ee10 0a10 	vmov	r0, s0
 810c824:	ee10 3a10 	vmov	r3, s0
 810c828:	4629      	mov	r1, r5
 810c82a:	462a      	mov	r2, r5
 810c82c:	d110      	bne.n	810c850 <__ieee754_sqrt+0x3c>
 810c82e:	ee10 2a10 	vmov	r2, s0
 810c832:	462b      	mov	r3, r5
 810c834:	f7f3 ff68 	bl	8100708 <__aeabi_dmul>
 810c838:	4602      	mov	r2, r0
 810c83a:	460b      	mov	r3, r1
 810c83c:	4620      	mov	r0, r4
 810c83e:	4629      	mov	r1, r5
 810c840:	f7f3 fdac 	bl	810039c <__adddf3>
 810c844:	4604      	mov	r4, r0
 810c846:	460d      	mov	r5, r1
 810c848:	ec45 4b10 	vmov	d0, r4, r5
 810c84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c850:	2d00      	cmp	r5, #0
 810c852:	dc10      	bgt.n	810c876 <__ieee754_sqrt+0x62>
 810c854:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810c858:	4330      	orrs	r0, r6
 810c85a:	d0f5      	beq.n	810c848 <__ieee754_sqrt+0x34>
 810c85c:	b15d      	cbz	r5, 810c876 <__ieee754_sqrt+0x62>
 810c85e:	ee10 2a10 	vmov	r2, s0
 810c862:	462b      	mov	r3, r5
 810c864:	ee10 0a10 	vmov	r0, s0
 810c868:	f7f3 fd96 	bl	8100398 <__aeabi_dsub>
 810c86c:	4602      	mov	r2, r0
 810c86e:	460b      	mov	r3, r1
 810c870:	f7f4 f874 	bl	810095c <__aeabi_ddiv>
 810c874:	e7e6      	b.n	810c844 <__ieee754_sqrt+0x30>
 810c876:	1509      	asrs	r1, r1, #20
 810c878:	d076      	beq.n	810c968 <__ieee754_sqrt+0x154>
 810c87a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 810c87e:	07ce      	lsls	r6, r1, #31
 810c880:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 810c884:	bf5e      	ittt	pl
 810c886:	0fda      	lsrpl	r2, r3, #31
 810c888:	005b      	lslpl	r3, r3, #1
 810c88a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 810c88e:	0fda      	lsrs	r2, r3, #31
 810c890:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 810c894:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 810c898:	2000      	movs	r0, #0
 810c89a:	106d      	asrs	r5, r5, #1
 810c89c:	005b      	lsls	r3, r3, #1
 810c89e:	f04f 0e16 	mov.w	lr, #22
 810c8a2:	4684      	mov	ip, r0
 810c8a4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810c8a8:	eb0c 0401 	add.w	r4, ip, r1
 810c8ac:	4294      	cmp	r4, r2
 810c8ae:	bfde      	ittt	le
 810c8b0:	1b12      	suble	r2, r2, r4
 810c8b2:	eb04 0c01 	addle.w	ip, r4, r1
 810c8b6:	1840      	addle	r0, r0, r1
 810c8b8:	0052      	lsls	r2, r2, #1
 810c8ba:	f1be 0e01 	subs.w	lr, lr, #1
 810c8be:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810c8c2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810c8c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810c8ca:	d1ed      	bne.n	810c8a8 <__ieee754_sqrt+0x94>
 810c8cc:	4671      	mov	r1, lr
 810c8ce:	2720      	movs	r7, #32
 810c8d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 810c8d4:	4562      	cmp	r2, ip
 810c8d6:	eb04 060e 	add.w	r6, r4, lr
 810c8da:	dc02      	bgt.n	810c8e2 <__ieee754_sqrt+0xce>
 810c8dc:	d113      	bne.n	810c906 <__ieee754_sqrt+0xf2>
 810c8de:	429e      	cmp	r6, r3
 810c8e0:	d811      	bhi.n	810c906 <__ieee754_sqrt+0xf2>
 810c8e2:	2e00      	cmp	r6, #0
 810c8e4:	eb06 0e04 	add.w	lr, r6, r4
 810c8e8:	da43      	bge.n	810c972 <__ieee754_sqrt+0x15e>
 810c8ea:	f1be 0f00 	cmp.w	lr, #0
 810c8ee:	db40      	blt.n	810c972 <__ieee754_sqrt+0x15e>
 810c8f0:	f10c 0801 	add.w	r8, ip, #1
 810c8f4:	eba2 020c 	sub.w	r2, r2, ip
 810c8f8:	429e      	cmp	r6, r3
 810c8fa:	bf88      	it	hi
 810c8fc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 810c900:	1b9b      	subs	r3, r3, r6
 810c902:	4421      	add	r1, r4
 810c904:	46c4      	mov	ip, r8
 810c906:	0052      	lsls	r2, r2, #1
 810c908:	3f01      	subs	r7, #1
 810c90a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 810c90e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 810c912:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810c916:	d1dd      	bne.n	810c8d4 <__ieee754_sqrt+0xc0>
 810c918:	4313      	orrs	r3, r2
 810c91a:	d006      	beq.n	810c92a <__ieee754_sqrt+0x116>
 810c91c:	1c4c      	adds	r4, r1, #1
 810c91e:	bf13      	iteet	ne
 810c920:	3101      	addne	r1, #1
 810c922:	3001      	addeq	r0, #1
 810c924:	4639      	moveq	r1, r7
 810c926:	f021 0101 	bicne.w	r1, r1, #1
 810c92a:	1043      	asrs	r3, r0, #1
 810c92c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 810c930:	0849      	lsrs	r1, r1, #1
 810c932:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 810c936:	07c2      	lsls	r2, r0, #31
 810c938:	bf48      	it	mi
 810c93a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 810c93e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 810c942:	460c      	mov	r4, r1
 810c944:	463d      	mov	r5, r7
 810c946:	e77f      	b.n	810c848 <__ieee754_sqrt+0x34>
 810c948:	0ada      	lsrs	r2, r3, #11
 810c94a:	3815      	subs	r0, #21
 810c94c:	055b      	lsls	r3, r3, #21
 810c94e:	2a00      	cmp	r2, #0
 810c950:	d0fa      	beq.n	810c948 <__ieee754_sqrt+0x134>
 810c952:	02d7      	lsls	r7, r2, #11
 810c954:	d50a      	bpl.n	810c96c <__ieee754_sqrt+0x158>
 810c956:	f1c1 0420 	rsb	r4, r1, #32
 810c95a:	fa23 f404 	lsr.w	r4, r3, r4
 810c95e:	1e4d      	subs	r5, r1, #1
 810c960:	408b      	lsls	r3, r1
 810c962:	4322      	orrs	r2, r4
 810c964:	1b41      	subs	r1, r0, r5
 810c966:	e788      	b.n	810c87a <__ieee754_sqrt+0x66>
 810c968:	4608      	mov	r0, r1
 810c96a:	e7f0      	b.n	810c94e <__ieee754_sqrt+0x13a>
 810c96c:	0052      	lsls	r2, r2, #1
 810c96e:	3101      	adds	r1, #1
 810c970:	e7ef      	b.n	810c952 <__ieee754_sqrt+0x13e>
 810c972:	46e0      	mov	r8, ip
 810c974:	e7be      	b.n	810c8f4 <__ieee754_sqrt+0xe0>
 810c976:	bf00      	nop
 810c978:	7ff00000 	.word	0x7ff00000

0810c97c <finite>:
 810c97c:	b082      	sub	sp, #8
 810c97e:	ed8d 0b00 	vstr	d0, [sp]
 810c982:	9801      	ldr	r0, [sp, #4]
 810c984:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 810c988:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 810c98c:	0fc0      	lsrs	r0, r0, #31
 810c98e:	b002      	add	sp, #8
 810c990:	4770      	bx	lr
	...

0810c994 <rint>:
 810c994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810c996:	ec51 0b10 	vmov	r0, r1, d0
 810c99a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810c99e:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 810c9a2:	2e13      	cmp	r6, #19
 810c9a4:	ee10 4a10 	vmov	r4, s0
 810c9a8:	460b      	mov	r3, r1
 810c9aa:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 810c9ae:	dc58      	bgt.n	810ca62 <rint+0xce>
 810c9b0:	2e00      	cmp	r6, #0
 810c9b2:	da2b      	bge.n	810ca0c <rint+0x78>
 810c9b4:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 810c9b8:	4302      	orrs	r2, r0
 810c9ba:	d023      	beq.n	810ca04 <rint+0x70>
 810c9bc:	f3c1 0213 	ubfx	r2, r1, #0, #20
 810c9c0:	4302      	orrs	r2, r0
 810c9c2:	4254      	negs	r4, r2
 810c9c4:	4314      	orrs	r4, r2
 810c9c6:	0c4b      	lsrs	r3, r1, #17
 810c9c8:	0b24      	lsrs	r4, r4, #12
 810c9ca:	045b      	lsls	r3, r3, #17
 810c9cc:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 810c9d0:	ea44 0103 	orr.w	r1, r4, r3
 810c9d4:	4b32      	ldr	r3, [pc, #200]	; (810caa0 <rint+0x10c>)
 810c9d6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810c9da:	e9d3 6700 	ldrd	r6, r7, [r3]
 810c9de:	4602      	mov	r2, r0
 810c9e0:	460b      	mov	r3, r1
 810c9e2:	4630      	mov	r0, r6
 810c9e4:	4639      	mov	r1, r7
 810c9e6:	f7f3 fcd9 	bl	810039c <__adddf3>
 810c9ea:	e9cd 0100 	strd	r0, r1, [sp]
 810c9ee:	463b      	mov	r3, r7
 810c9f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 810c9f4:	4632      	mov	r2, r6
 810c9f6:	f7f3 fccf 	bl	8100398 <__aeabi_dsub>
 810c9fa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 810c9fe:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 810ca02:	4639      	mov	r1, r7
 810ca04:	ec41 0b10 	vmov	d0, r0, r1
 810ca08:	b003      	add	sp, #12
 810ca0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810ca0c:	4a25      	ldr	r2, [pc, #148]	; (810caa4 <rint+0x110>)
 810ca0e:	4132      	asrs	r2, r6
 810ca10:	ea01 0702 	and.w	r7, r1, r2
 810ca14:	4307      	orrs	r7, r0
 810ca16:	d0f5      	beq.n	810ca04 <rint+0x70>
 810ca18:	0851      	lsrs	r1, r2, #1
 810ca1a:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 810ca1e:	4314      	orrs	r4, r2
 810ca20:	d00c      	beq.n	810ca3c <rint+0xa8>
 810ca22:	ea23 0201 	bic.w	r2, r3, r1
 810ca26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 810ca2a:	2e13      	cmp	r6, #19
 810ca2c:	fa43 f606 	asr.w	r6, r3, r6
 810ca30:	bf0c      	ite	eq
 810ca32:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 810ca36:	2400      	movne	r4, #0
 810ca38:	ea42 0306 	orr.w	r3, r2, r6
 810ca3c:	4918      	ldr	r1, [pc, #96]	; (810caa0 <rint+0x10c>)
 810ca3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 810ca42:	4622      	mov	r2, r4
 810ca44:	e9d5 4500 	ldrd	r4, r5, [r5]
 810ca48:	4620      	mov	r0, r4
 810ca4a:	4629      	mov	r1, r5
 810ca4c:	f7f3 fca6 	bl	810039c <__adddf3>
 810ca50:	e9cd 0100 	strd	r0, r1, [sp]
 810ca54:	e9dd 0100 	ldrd	r0, r1, [sp]
 810ca58:	4622      	mov	r2, r4
 810ca5a:	462b      	mov	r3, r5
 810ca5c:	f7f3 fc9c 	bl	8100398 <__aeabi_dsub>
 810ca60:	e7d0      	b.n	810ca04 <rint+0x70>
 810ca62:	2e33      	cmp	r6, #51	; 0x33
 810ca64:	dd07      	ble.n	810ca76 <rint+0xe2>
 810ca66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 810ca6a:	d1cb      	bne.n	810ca04 <rint+0x70>
 810ca6c:	ee10 2a10 	vmov	r2, s0
 810ca70:	f7f3 fc94 	bl	810039c <__adddf3>
 810ca74:	e7c6      	b.n	810ca04 <rint+0x70>
 810ca76:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 810ca7a:	f04f 36ff 	mov.w	r6, #4294967295
 810ca7e:	40d6      	lsrs	r6, r2
 810ca80:	4230      	tst	r0, r6
 810ca82:	d0bf      	beq.n	810ca04 <rint+0x70>
 810ca84:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 810ca88:	ea4f 0156 	mov.w	r1, r6, lsr #1
 810ca8c:	bf1f      	itttt	ne
 810ca8e:	ea24 0101 	bicne.w	r1, r4, r1
 810ca92:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 810ca96:	fa44 f202 	asrne.w	r2, r4, r2
 810ca9a:	ea41 0402 	orrne.w	r4, r1, r2
 810ca9e:	e7cd      	b.n	810ca3c <rint+0xa8>
 810caa0:	0810d918 	.word	0x0810d918
 810caa4:	000fffff 	.word	0x000fffff

0810caa8 <scalbn>:
 810caa8:	b570      	push	{r4, r5, r6, lr}
 810caaa:	ec55 4b10 	vmov	r4, r5, d0
 810caae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 810cab2:	4606      	mov	r6, r0
 810cab4:	462b      	mov	r3, r5
 810cab6:	b99a      	cbnz	r2, 810cae0 <scalbn+0x38>
 810cab8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 810cabc:	4323      	orrs	r3, r4
 810cabe:	d036      	beq.n	810cb2e <scalbn+0x86>
 810cac0:	4b39      	ldr	r3, [pc, #228]	; (810cba8 <scalbn+0x100>)
 810cac2:	4629      	mov	r1, r5
 810cac4:	ee10 0a10 	vmov	r0, s0
 810cac8:	2200      	movs	r2, #0
 810caca:	f7f3 fe1d 	bl	8100708 <__aeabi_dmul>
 810cace:	4b37      	ldr	r3, [pc, #220]	; (810cbac <scalbn+0x104>)
 810cad0:	429e      	cmp	r6, r3
 810cad2:	4604      	mov	r4, r0
 810cad4:	460d      	mov	r5, r1
 810cad6:	da10      	bge.n	810cafa <scalbn+0x52>
 810cad8:	a32b      	add	r3, pc, #172	; (adr r3, 810cb88 <scalbn+0xe0>)
 810cada:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cade:	e03a      	b.n	810cb56 <scalbn+0xae>
 810cae0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 810cae4:	428a      	cmp	r2, r1
 810cae6:	d10c      	bne.n	810cb02 <scalbn+0x5a>
 810cae8:	ee10 2a10 	vmov	r2, s0
 810caec:	4620      	mov	r0, r4
 810caee:	4629      	mov	r1, r5
 810caf0:	f7f3 fc54 	bl	810039c <__adddf3>
 810caf4:	4604      	mov	r4, r0
 810caf6:	460d      	mov	r5, r1
 810caf8:	e019      	b.n	810cb2e <scalbn+0x86>
 810cafa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 810cafe:	460b      	mov	r3, r1
 810cb00:	3a36      	subs	r2, #54	; 0x36
 810cb02:	4432      	add	r2, r6
 810cb04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 810cb08:	428a      	cmp	r2, r1
 810cb0a:	dd08      	ble.n	810cb1e <scalbn+0x76>
 810cb0c:	2d00      	cmp	r5, #0
 810cb0e:	a120      	add	r1, pc, #128	; (adr r1, 810cb90 <scalbn+0xe8>)
 810cb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cb14:	da1c      	bge.n	810cb50 <scalbn+0xa8>
 810cb16:	a120      	add	r1, pc, #128	; (adr r1, 810cb98 <scalbn+0xf0>)
 810cb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cb1c:	e018      	b.n	810cb50 <scalbn+0xa8>
 810cb1e:	2a00      	cmp	r2, #0
 810cb20:	dd08      	ble.n	810cb34 <scalbn+0x8c>
 810cb22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810cb26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810cb2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 810cb2e:	ec45 4b10 	vmov	d0, r4, r5
 810cb32:	bd70      	pop	{r4, r5, r6, pc}
 810cb34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 810cb38:	da19      	bge.n	810cb6e <scalbn+0xc6>
 810cb3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 810cb3e:	429e      	cmp	r6, r3
 810cb40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 810cb44:	dd0a      	ble.n	810cb5c <scalbn+0xb4>
 810cb46:	a112      	add	r1, pc, #72	; (adr r1, 810cb90 <scalbn+0xe8>)
 810cb48:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cb4c:	2b00      	cmp	r3, #0
 810cb4e:	d1e2      	bne.n	810cb16 <scalbn+0x6e>
 810cb50:	a30f      	add	r3, pc, #60	; (adr r3, 810cb90 <scalbn+0xe8>)
 810cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cb56:	f7f3 fdd7 	bl	8100708 <__aeabi_dmul>
 810cb5a:	e7cb      	b.n	810caf4 <scalbn+0x4c>
 810cb5c:	a10a      	add	r1, pc, #40	; (adr r1, 810cb88 <scalbn+0xe0>)
 810cb5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cb62:	2b00      	cmp	r3, #0
 810cb64:	d0b8      	beq.n	810cad8 <scalbn+0x30>
 810cb66:	a10e      	add	r1, pc, #56	; (adr r1, 810cba0 <scalbn+0xf8>)
 810cb68:	e9d1 0100 	ldrd	r0, r1, [r1]
 810cb6c:	e7b4      	b.n	810cad8 <scalbn+0x30>
 810cb6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 810cb72:	3236      	adds	r2, #54	; 0x36
 810cb74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 810cb78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 810cb7c:	4620      	mov	r0, r4
 810cb7e:	4b0c      	ldr	r3, [pc, #48]	; (810cbb0 <scalbn+0x108>)
 810cb80:	2200      	movs	r2, #0
 810cb82:	e7e8      	b.n	810cb56 <scalbn+0xae>
 810cb84:	f3af 8000 	nop.w
 810cb88:	c2f8f359 	.word	0xc2f8f359
 810cb8c:	01a56e1f 	.word	0x01a56e1f
 810cb90:	8800759c 	.word	0x8800759c
 810cb94:	7e37e43c 	.word	0x7e37e43c
 810cb98:	8800759c 	.word	0x8800759c
 810cb9c:	fe37e43c 	.word	0xfe37e43c
 810cba0:	c2f8f359 	.word	0xc2f8f359
 810cba4:	81a56e1f 	.word	0x81a56e1f
 810cba8:	43500000 	.word	0x43500000
 810cbac:	ffff3cb0 	.word	0xffff3cb0
 810cbb0:	3c900000 	.word	0x3c900000

0810cbb4 <_init>:
 810cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cbb6:	bf00      	nop
 810cbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cbba:	bc08      	pop	{r3}
 810cbbc:	469e      	mov	lr, r3
 810cbbe:	4770      	bx	lr

0810cbc0 <_fini>:
 810cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810cbc2:	bf00      	nop
 810cbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810cbc6:	bc08      	pop	{r3}
 810cbc8:	469e      	mov	lr, r3
 810cbca:	4770      	bx	lr
