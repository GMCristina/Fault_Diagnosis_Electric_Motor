
Fault_Diagnosis_Electric_Motor_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000421c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c4  080044c4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  080044c4  080044c4  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044c4  080044c4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080044cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080044dc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800453c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000057c  240000d0  0800459c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400064c  0800459c  0002064c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c8ad  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002de2  00000000  00000000  0003c9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d30  00000000  00000000  0003f790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000c38  00000000  00000000  000404c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a157  00000000  00000000  000410f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fbfb  00000000  00000000  0007b24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018077d  00000000  00000000  0008ae4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0020b5c7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003694  00000000  00000000  0020b61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800449c 	.word	0x0800449c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800449c 	.word	0x0800449c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/

//Modify for use only M4 core
#ifdef DEBUG
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET));
 8000412:	bf00      	nop
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <main+0x84>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1f9      	bne.n	8000414 <main+0x8>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000420:	f000 fb7c 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000424:	f000 f836 	bl	8000494 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000428:	f000 f8bc 	bl	80005a4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <main+0x84>)
 800042e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000432:	4a17      	ldr	r2, [pc, #92]	; (8000490 <main+0x84>)
 8000434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <main+0x84>)
 800043e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800044a:	2000      	movs	r0, #0
 800044c:	f001 fae6 	bl	8001a1c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000450:	2100      	movs	r1, #0
 8000452:	2000      	movs	r0, #0
 8000454:	f001 fafc 	bl	8001a50 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800045c:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800045e:	bf00      	nop
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <main+0x84>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000468:	2b00      	cmp	r3, #0
 800046a:	d104      	bne.n	8000476 <main+0x6a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	1e5a      	subs	r2, r3, #1
 8000470:	607a      	str	r2, [r7, #4]
 8000472:	2b00      	cmp	r3, #0
 8000474:	dcf4      	bgt.n	8000460 <main+0x54>
if ( timeout < 0 )
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	da01      	bge.n	8000480 <main+0x74>
{
Error_Handler();
 800047c:	f000 f982 	bl	8000784 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f000 f92a 	bl	80006d8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000484:	f000 f8aa 	bl	80005dc <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000488:	f000 f8f4 	bl	8000674 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048c:	e7fe      	b.n	800048c <main+0x80>
 800048e:	bf00      	nop
 8000490:	58024400 	.word	0x58024400

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09c      	sub	sp, #112	; 0x70
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049e:	224c      	movs	r2, #76	; 0x4c
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 fff2 	bl	800448c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2220      	movs	r2, #32
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f003 ffec 	bl	800448c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004b4:	2004      	movs	r0, #4
 80004b6:	f001 fc27 	bl	8001d08 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004ba:	2300      	movs	r3, #0
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	4b36      	ldr	r3, [pc, #216]	; (8000598 <SystemClock_Config+0x104>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a35      	ldr	r2, [pc, #212]	; (8000598 <SystemClock_Config+0x104>)
 80004c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b33      	ldr	r3, [pc, #204]	; (8000598 <SystemClock_Config+0x104>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4b31      	ldr	r3, [pc, #196]	; (800059c <SystemClock_Config+0x108>)
 80004d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d8:	4a30      	ldr	r2, [pc, #192]	; (800059c <SystemClock_Config+0x108>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <SystemClock_Config+0x108>)
 80004e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004ec:	bf00      	nop
 80004ee:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <SystemClock_Config+0x104>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004fa:	d1f8      	bne.n	80004ee <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80004fc:	4b28      	ldr	r3, [pc, #160]	; (80005a0 <SystemClock_Config+0x10c>)
 80004fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000500:	f023 0303 	bic.w	r3, r3, #3
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <SystemClock_Config+0x10c>)
 8000506:	f043 0302 	orr.w	r3, r3, #2
 800050a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800050c:	2303      	movs	r3, #3
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000516:	2301      	movs	r3, #1
 8000518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800051a:	2340      	movs	r3, #64	; 0x40
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051e:	2302      	movs	r3, #2
 8000520:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000522:	2302      	movs	r3, #2
 8000524:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000526:	2301      	movs	r3, #1
 8000528:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800052a:	2378      	movs	r3, #120	; 0x78
 800052c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800052e:	2302      	movs	r3, #2
 8000530:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000532:	2302      	movs	r3, #2
 8000534:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000536:	2301      	movs	r3, #1
 8000538:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800053a:	230c      	movs	r3, #12
 800053c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800053e:	2300      	movs	r3, #0
 8000540:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fc46 	bl	8001ddc <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000556:	f000 f915 	bl	8000784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	233f      	movs	r3, #63	; 0x3f
 800055c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2303      	movs	r3, #3
 8000560:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000566:	2308      	movs	r3, #8
 8000568:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800056a:	2340      	movs	r3, #64	; 0x40
 800056c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800056e:	2340      	movs	r3, #64	; 0x40
 8000570:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000576:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000578:	2340      	movs	r3, #64	; 0x40
 800057a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2104      	movs	r1, #4
 8000580:	4618      	mov	r0, r3
 8000582:	f002 f857 	bl	8002634 <HAL_RCC_ClockConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800058c:	f000 f8fa 	bl	8000784 <Error_Handler>
  }
}
 8000590:	bf00      	nop
 8000592:	3770      	adds	r7, #112	; 0x70
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	58024800 	.word	0x58024800
 800059c:	58000400 	.word	0x58000400
 80005a0:	58024400 	.word	0x58024400

080005a4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b0b0      	sub	sp, #192	; 0xc0
 80005a8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	22bc      	movs	r2, #188	; 0xbc
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 ff6b 	bl	800448c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80005b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80005ba:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80005bc:	2300      	movs	r3, #0
 80005be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fb96 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80005ce:	f000 f8d9 	bl	8000784 <Error_Handler>
  }
}
 80005d2:	bf00      	nop
 80005d4:	37c0      	adds	r7, #192	; 0xc0
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	; (800065c <MX_ETH_Init+0x80>)
 80005e2:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <MX_ETH_Init+0x84>)
 80005e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005e6:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_ETH_Init+0x88>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_ETH_Init+0x88>)
 80005ee:	2280      	movs	r2, #128	; 0x80
 80005f0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <MX_ETH_Init+0x88>)
 80005f4:	22e1      	movs	r2, #225	; 0xe1
 80005f6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ETH_Init+0x88>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80005fe:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_ETH_Init+0x88>)
 8000600:	2200      	movs	r2, #0
 8000602:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_ETH_Init+0x88>)
 8000606:	2200      	movs	r2, #0
 8000608:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_ETH_Init+0x80>)
 800060c:	4a15      	ldr	r2, [pc, #84]	; (8000664 <MX_ETH_Init+0x88>)
 800060e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_ETH_Init+0x80>)
 8000612:	2201      	movs	r2, #1
 8000614:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_ETH_Init+0x80>)
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <MX_ETH_Init+0x8c>)
 800061a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_ETH_Init+0x80>)
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <MX_ETH_Init+0x90>)
 8000620:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000622:	4b0e      	ldr	r3, [pc, #56]	; (800065c <MX_ETH_Init+0x80>)
 8000624:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000628:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800062a:	480c      	ldr	r0, [pc, #48]	; (800065c <MX_ETH_Init+0x80>)
 800062c:	f000 fc30 	bl	8000e90 <HAL_ETH_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000636:	f000 f8a5 	bl	8000784 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800063a:	2234      	movs	r2, #52	; 0x34
 800063c:	2100      	movs	r1, #0
 800063e:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_ETH_Init+0x94>)
 8000640:	f003 ff24 	bl	800448c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_ETH_Init+0x94>)
 8000646:	2221      	movs	r2, #33	; 0x21
 8000648:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_ETH_Init+0x94>)
 800064c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000650:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000652:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_ETH_Init+0x94>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2400058c 	.word	0x2400058c
 8000660:	40028000 	.word	0x40028000
 8000664:	240000ec 	.word	0x240000ec
 8000668:	24000070 	.word	0x24000070
 800066c:	24000010 	.word	0x24000010
 8000670:	24000614 	.word	0x24000614

08000674 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000678:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800067c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000680:	2209      	movs	r2, #9
 8000682:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000686:	2202      	movs	r2, #2
 8000688:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800068a:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000690:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000692:	2202      	movs	r2, #2
 8000694:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006bc:	f001 f9dc 	bl	8001a78 <HAL_PCD_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80006c6:	f000 f85d 	bl	8000784 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	24000184 	.word	0x24000184
 80006d4:	40080000 	.word	0x40080000

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b087      	sub	sp, #28
 80006dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b28      	ldr	r3, [pc, #160]	; (8000780 <MX_GPIO_Init+0xa8>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	4a26      	ldr	r2, [pc, #152]	; (8000780 <MX_GPIO_Init+0xa8>)
 80006e6:	f043 0304 	orr.w	r3, r3, #4
 80006ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <MX_GPIO_Init+0xa8>)
 80006f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fc:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_GPIO_Init+0xa8>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	4a1f      	ldr	r2, [pc, #124]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_GPIO_Init+0xa8>)
 800070e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_GPIO_Init+0xa8>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <MX_GPIO_Init+0xa8>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_GPIO_Init+0xa8>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_GPIO_Init+0xa8>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075c:	4a08      	ldr	r2, [pc, #32]	; (8000780 <MX_GPIO_Init+0xa8>)
 800075e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_GPIO_Init+0xa8>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

}
 8000774:	bf00      	nop
 8000776:	371c      	adds	r7, #28
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	58024400 	.word	0x58024400

08000784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
}
 800078a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078c:	e7fe      	b.n	800078c <Error_Handler+0x8>
	...

08000790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_MspInit+0x30>)
 8000798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800079c:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x30>)
 800079e:	f043 0302 	orr.w	r3, r3, #2
 80007a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x30>)
 80007a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007ac:	f003 0302 	and.w	r3, r3, #2
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	58024400 	.word	0x58024400

080007c4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a59      	ldr	r2, [pc, #356]	; (8000948 <HAL_ETH_MspInit+0x184>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	f040 80ab 	bne.w	800093e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80007e8:	4b58      	ldr	r3, [pc, #352]	; (800094c <HAL_ETH_MspInit+0x188>)
 80007ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ee:	4a57      	ldr	r2, [pc, #348]	; (800094c <HAL_ETH_MspInit+0x188>)
 80007f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80007f8:	4b54      	ldr	r3, [pc, #336]	; (800094c <HAL_ETH_MspInit+0x188>)
 80007fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000802:	623b      	str	r3, [r7, #32]
 8000804:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000806:	4b51      	ldr	r3, [pc, #324]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000808:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800080c:	4a4f      	ldr	r2, [pc, #316]	; (800094c <HAL_ETH_MspInit+0x188>)
 800080e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000812:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000816:	4b4d      	ldr	r3, [pc, #308]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000818:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800081c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000824:	4b49      	ldr	r3, [pc, #292]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000826:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800082a:	4a48      	ldr	r2, [pc, #288]	; (800094c <HAL_ETH_MspInit+0x188>)
 800082c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000830:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000834:	4b45      	ldr	r3, [pc, #276]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000836:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800083a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b42      	ldr	r3, [pc, #264]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000848:	4a40      	ldr	r2, [pc, #256]	; (800094c <HAL_ETH_MspInit+0x188>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000852:	4b3e      	ldr	r3, [pc, #248]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b3a      	ldr	r3, [pc, #232]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000866:	4a39      	ldr	r2, [pc, #228]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000870:	4b36      	ldr	r3, [pc, #216]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b33      	ldr	r3, [pc, #204]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000884:	4a31      	ldr	r2, [pc, #196]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800088e:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_ETH_MspInit+0x188>)
 8000890:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000894:	f003 0302 	and.w	r3, r3, #2
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800089c:	4b2b      	ldr	r3, [pc, #172]	; (800094c <HAL_ETH_MspInit+0x188>)
 800089e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a2:	4a2a      	ldr	r2, [pc, #168]	; (800094c <HAL_ETH_MspInit+0x188>)
 80008a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <HAL_ETH_MspInit+0x188>)
 80008ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008ba:	2332      	movs	r3, #50	; 0x32
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ca:	230b      	movs	r3, #11
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	4619      	mov	r1, r3
 80008d4:	481e      	ldr	r0, [pc, #120]	; (8000950 <HAL_ETH_MspInit+0x18c>)
 80008d6:	f000 fef1 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008da:	2386      	movs	r3, #134	; 0x86
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008ea:	230b      	movs	r3, #11
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4817      	ldr	r0, [pc, #92]	; (8000954 <HAL_ETH_MspInit+0x190>)
 80008f6:	f000 fee1 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800090c:	230b      	movs	r3, #11
 800090e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	4810      	ldr	r0, [pc, #64]	; (8000958 <HAL_ETH_MspInit+0x194>)
 8000918:	f000 fed0 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800091c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800092e:	230b      	movs	r3, #11
 8000930:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4808      	ldr	r0, [pc, #32]	; (800095c <HAL_ETH_MspInit+0x198>)
 800093a:	f000 febf 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800093e:	bf00      	nop
 8000940:	3738      	adds	r7, #56	; 0x38
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40028000 	.word	0x40028000
 800094c:	58024400 	.word	0x58024400
 8000950:	58020800 	.word	0x58020800
 8000954:	58020000 	.word	0x58020000
 8000958:	58020400 	.word	0x58020400
 800095c:	58021800 	.word	0x58021800

08000960 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b0b8      	sub	sp, #224	; 0xe0
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000978:	f107 0310 	add.w	r3, r7, #16
 800097c:	22bc      	movs	r2, #188	; 0xbc
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f003 fd83 	bl	800448c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a37      	ldr	r2, [pc, #220]	; (8000a68 <HAL_PCD_MspInit+0x108>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d166      	bne.n	8000a5e <HAL_PCD_MspInit+0xfe>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000990:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000994:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000996:	2301      	movs	r3, #1
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800099a:	2312      	movs	r3, #18
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80009a2:	2303      	movs	r3, #3
 80009a4:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80009aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 80009b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009b4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80009b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80009ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	4618      	mov	r0, r3
 80009c4:	f002 f996 	bl	8002cf4 <HAL_RCCEx_PeriphCLKConfig>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80009ce:	f7ff fed9 	bl	8000784 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80009d2:	f001 f9f3 	bl	8001dbc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <HAL_PCD_MspInit+0x10c>)
 80009d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009dc:	4a23      	ldr	r2, [pc, #140]	; (8000a6c <HAL_PCD_MspInit+0x10c>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e6:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <HAL_PCD_MspInit+0x10c>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009f4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80009f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000a0e:	230a      	movs	r3, #10
 8000a10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4815      	ldr	r0, [pc, #84]	; (8000a70 <HAL_PCD_MspInit+0x110>)
 8000a1c:	f000 fe4e 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480d      	ldr	r0, [pc, #52]	; (8000a70 <HAL_PCD_MspInit+0x110>)
 8000a3c:	f000 fe3e 	bl	80016bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_PCD_MspInit+0x10c>)
 8000a42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_PCD_MspInit+0x10c>)
 8000a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_PCD_MspInit+0x10c>)
 8000a52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a5e:	bf00      	nop
 8000a60:	37e0      	adds	r7, #224	; 0xe0
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40080000 	.word	0x40080000
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	58020000 	.word	0x58020000

08000a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <NMI_Handler+0x4>

08000a7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a7e:	e7fe      	b.n	8000a7e <HardFault_Handler+0x4>

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac0:	f000 f89e 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000acc:	f7ff fc04 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f003 fca5 	bl	8004444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fc87 	bl	800040c <main>
  bx  lr
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b08:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b0c:	080044cc 	.word	0x080044cc
  ldr r2, =_sbss
 8000b10:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000b14:	2400064c 	.word	0x2400064c

08000b18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC3_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 f982 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b28:	f001 ff3a 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_Init+0x68>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	f003 030f 	and.w	r3, r3, #15
 8000b38:	4913      	ldr	r1, [pc, #76]	; (8000b88 <HAL_Init+0x6c>)
 8000b3a:	5ccb      	ldrb	r3, [r1, r3]
 8000b3c:	f003 031f 	and.w	r3, r3, #31
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_Init+0x68>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_Init+0x6c>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <HAL_Init+0x70>)
 8000b5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_Init+0x74>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 f814 	bl	8000b94 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e002      	b.n	8000b7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b76:	f7ff fe0b 	bl	8000790 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58024400 	.word	0x58024400
 8000b88:	080044b4 	.word	0x080044b4
 8000b8c:	24000004 	.word	0x24000004
 8000b90:	24000000 	.word	0x24000000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_InitTick+0x60>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e021      	b.n	8000bec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_InitTick+0x64>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_InitTick+0x60>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f959 	bl	8000e76 <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f931 	bl	8000e42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x68>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2400000c 	.word	0x2400000c
 8000bf8:	24000000 	.word	0x24000000
 8000bfc:	24000008 	.word	0x24000008

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2400000c 	.word	0x2400000c
 8000c24:	24000648 	.word	0x24000648

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	24000648 	.word	0x24000648

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffde 	bl	8000c28 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2400000c 	.word	0x2400000c

08000c88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetREVID+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	0c1b      	lsrs	r3, r3, #16
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	5c001000 	.word	0x5c001000

08000ca0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000cb0:	4904      	ldr	r1, [pc, #16]	; (8000cc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	604b      	str	r3, [r1, #4]
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	58000400 	.word	0x58000400

08000cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <__NVIC_SetPriorityGrouping+0x44>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00
 8000d0c:	05fa0000 	.word	0x05fa0000

08000d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <__NVIC_GetPriorityGrouping+0x18>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	0a1b      	lsrs	r3, r3, #8
 8000d1a:	f003 0307 	and.w	r3, r3, #7
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	db0a      	blt.n	8000d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2da      	uxtb	r2, r3
 8000d44:	490c      	ldr	r1, [pc, #48]	; (8000d78 <__NVIC_SetPriority+0x4c>)
 8000d46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d4a:	0112      	lsls	r2, r2, #4
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	440b      	add	r3, r1
 8000d50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d54:	e00a      	b.n	8000d6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4908      	ldr	r1, [pc, #32]	; (8000d7c <__NVIC_SetPriority+0x50>)
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	f003 030f 	and.w	r3, r3, #15
 8000d62:	3b04      	subs	r3, #4
 8000d64:	0112      	lsls	r2, r2, #4
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	440b      	add	r3, r1
 8000d6a:	761a      	strb	r2, [r3, #24]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43da      	mvns	r2, r3
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43d9      	mvns	r1, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	4313      	orrs	r3, r2
         );
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3724      	adds	r7, #36	; 0x24
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df8:	d301      	bcc.n	8000dfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e00f      	b.n	8000e1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <SysTick_Config+0x40>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e06:	210f      	movs	r1, #15
 8000e08:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0c:	f7ff ff8e 	bl	8000d2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <SysTick_Config+0x40>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e16:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <SysTick_Config+0x40>)
 8000e18:	2207      	movs	r2, #7
 8000e1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff47 	bl	8000cc8 <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff5e 	bl	8000d10 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff90 	bl	8000d80 <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5f 	bl	8000d2c <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffb2 	bl	8000de8 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e0c6      	b.n	8001030 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fc8a 	bl	80007c4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2223      	movs	r2, #35	; 0x23
 8000eb4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b60      	ldr	r3, [pc, #384]	; (8001038 <HAL_ETH_Init+0x1a8>)
 8000eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ebc:	4a5e      	ldr	r2, [pc, #376]	; (8001038 <HAL_ETH_Init+0x1a8>)
 8000ebe:	f043 0302 	orr.w	r3, r3, #2
 8000ec2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ec6:	4b5c      	ldr	r3, [pc, #368]	; (8001038 <HAL_ETH_Init+0x1a8>)
 8000ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7a1b      	ldrb	r3, [r3, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff fedf 	bl	8000ca0 <HAL_SYSCFG_ETHInterfaceSelect>
 8000ee2:	e003      	b.n	8000eec <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000ee4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000ee8:	f7ff feda 	bl	8000ca0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f042 0201 	orr.w	r2, r2, #1
 8000efe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f04:	f7ff fe90 	bl	8000c28 <HAL_GetTick>
 8000f08:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000f0a:	e00f      	b.n	8000f2c <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000f0c:	f7ff fe8c 	bl	8000c28 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f1a:	d907      	bls.n	8000f2c <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2204      	movs	r2, #4
 8000f20:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	22e0      	movs	r2, #224	; 0xe0
 8000f26:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e081      	b.n	8001030 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1e6      	bne.n	8000f0c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fac0 	bl	80014c4 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000f44:	f001 fea6 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a3c      	ldr	r2, [pc, #240]	; (800103c <HAL_ETH_Init+0x1ac>)
 8000f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f50:	0c9a      	lsrs	r2, r3, #18
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3a01      	subs	r2, #1
 8000f58:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f000 fa13 	bl	8001388 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f78:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000f7c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	22e0      	movs	r2, #224	; 0xe0
 8000f94:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e04a      	b.n	8001030 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f241 1308 	movw	r3, #4360	; 0x1108
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_ETH_Init+0x1b0>)
 8000fa8:	4013      	ands	r3, r2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6952      	ldr	r2, [r2, #20]
 8000fae:	0052      	lsls	r2, r2, #1
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	6809      	ldr	r1, [r1, #0]
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	f241 1308 	movw	r3, #4360	; 0x1108
 8000fba:	440b      	add	r3, r1
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 fad8 	bl	8001574 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fb1c 	bl	8001602 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	3305      	adds	r3, #5
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	021a      	lsls	r2, r3, #8
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	3303      	adds	r3, #3
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	061a      	lsls	r2, r3, #24
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	3301      	adds	r3, #1
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001008:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001016:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001018:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2210      	movs	r2, #16
 8001026:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2210      	movs	r2, #16
 800102c:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	58024400 	.word	0x58024400
 800103c:	431bde83 	.word	0x431bde83
 8001040:	ffff8001 	.word	0xffff8001

08001044 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001056:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800105e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	7b1b      	ldrb	r3, [r3, #12]
 8001064:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001066:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	7b5b      	ldrb	r3, [r3, #13]
 800106c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800106e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	7b9b      	ldrb	r3, [r3, #14]
 8001074:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001076:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	7bdb      	ldrb	r3, [r3, #15]
 800107c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800107e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	7c12      	ldrb	r2, [r2, #16]
 8001084:	2a00      	cmp	r2, #0
 8001086:	d102      	bne.n	800108e <ETH_SetMACConfig+0x4a>
 8001088:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800108c:	e000      	b.n	8001090 <ETH_SetMACConfig+0x4c>
 800108e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001090:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	7c52      	ldrb	r2, [r2, #17]
 8001096:	2a00      	cmp	r2, #0
 8001098:	d102      	bne.n	80010a0 <ETH_SetMACConfig+0x5c>
 800109a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800109e:	e000      	b.n	80010a2 <ETH_SetMACConfig+0x5e>
 80010a0:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80010a2:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	7c9b      	ldrb	r3, [r3, #18]
 80010a8:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80010aa:	431a      	orrs	r2, r3
                                macconf->Speed |
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80010b0:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80010b6:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	7f1b      	ldrb	r3, [r3, #28]
 80010bc:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80010be:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	7f5b      	ldrb	r3, [r3, #29]
 80010c4:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80010c6:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	7f92      	ldrb	r2, [r2, #30]
 80010cc:	2a00      	cmp	r2, #0
 80010ce:	d102      	bne.n	80010d6 <ETH_SetMACConfig+0x92>
 80010d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d4:	e000      	b.n	80010d8 <ETH_SetMACConfig+0x94>
 80010d6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80010d8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	7fdb      	ldrb	r3, [r3, #31]
 80010de:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80010e0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80010e8:	2a00      	cmp	r2, #0
 80010ea:	d102      	bne.n	80010f2 <ETH_SetMACConfig+0xae>
 80010ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f0:	e000      	b.n	80010f4 <ETH_SetMACConfig+0xb0>
 80010f2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80010f4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80010fa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001102:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001104:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800110a:	4313      	orrs	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b56      	ldr	r3, [pc, #344]	; (8001270 <ETH_SetMACConfig+0x22c>)
 8001116:	4013      	ands	r3, r2
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6812      	ldr	r2, [r2, #0]
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	430b      	orrs	r3, r1
 8001120:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800112e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001130:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001138:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800113a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001142:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001144:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800114c:	2a00      	cmp	r2, #0
 800114e:	d102      	bne.n	8001156 <ETH_SetMACConfig+0x112>
 8001150:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001154:	e000      	b.n	8001158 <ETH_SetMACConfig+0x114>
 8001156:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001158:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	4b42      	ldr	r3, [pc, #264]	; (8001274 <ETH_SetMACConfig+0x230>)
 800116a:	4013      	ands	r3, r2
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	68f9      	ldr	r1, [r7, #12]
 8001172:	430b      	orrs	r3, r1
 8001174:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800117c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001182:	4313      	orrs	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <ETH_SetMACConfig+0x234>)
 800118e:	4013      	ands	r3, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6812      	ldr	r2, [r2, #0]
 8001194:	68f9      	ldr	r1, [r7, #12]
 8001196:	430b      	orrs	r3, r1
 8001198:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011a0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80011a6:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80011a8:	683a      	ldr	r2, [r7, #0]
 80011aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80011ae:	2a00      	cmp	r2, #0
 80011b0:	d101      	bne.n	80011b6 <ETH_SetMACConfig+0x172>
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	e000      	b.n	80011b8 <ETH_SetMACConfig+0x174>
 80011b6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80011b8:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011ca:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80011ce:	4013      	ands	r3, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	68f9      	ldr	r1, [r7, #12]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80011e0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80011e8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011f6:	f023 0103 	bic.w	r1, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	430a      	orrs	r2, r1
 8001202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800120e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800122a:	2a00      	cmp	r2, #0
 800122c:	d101      	bne.n	8001232 <ETH_SetMACConfig+0x1ee>
 800122e:	2240      	movs	r2, #64	; 0x40
 8001230:	e000      	b.n	8001234 <ETH_SetMACConfig+0x1f0>
 8001232:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001234:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800123c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800123e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001246:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001248:	4313      	orrs	r3, r2
 800124a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001254:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	430a      	orrs	r2, r1
 8001260:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	00048083 	.word	0x00048083
 8001274:	c0f88000 	.word	0xc0f88000
 8001278:	fffffef0 	.word	0xfffffef0

0800127c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b38      	ldr	r3, [pc, #224]	; (8001374 <ETH_SetDMAConfig+0xf8>)
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	6812      	ldr	r2, [r2, #0]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	6809      	ldr	r1, [r1, #0]
 800129c:	431a      	orrs	r2, r3
 800129e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80012a2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	791b      	ldrb	r3, [r3, #4]
 80012a8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80012ae:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	7b1b      	ldrb	r3, [r3, #12]
 80012b4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f241 0304 	movw	r3, #4100	; 0x1004
 80012c2:	4413      	add	r3, r2
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b2c      	ldr	r3, [pc, #176]	; (8001378 <ETH_SetDMAConfig+0xfc>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	6811      	ldr	r1, [r2, #0]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	431a      	orrs	r2, r3
 80012d2:	f241 0304 	movw	r3, #4100	; 0x1004
 80012d6:	440b      	add	r3, r1
 80012d8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	7b5b      	ldrb	r3, [r3, #13]
 80012de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b22      	ldr	r3, [pc, #136]	; (800137c <ETH_SetDMAConfig+0x100>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6811      	ldr	r1, [r2, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	431a      	orrs	r2, r3
 80012fe:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001302:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	7d1b      	ldrb	r3, [r3, #20]
 800130c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800130e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	7f5b      	ldrb	r3, [r3, #29]
 8001314:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001316:	4313      	orrs	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	f241 1304 	movw	r3, #4356	; 0x1104
 8001322:	4413      	add	r3, r2
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <ETH_SetDMAConfig+0x104>)
 8001328:	4013      	ands	r3, r2
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	6811      	ldr	r1, [r2, #0]
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	431a      	orrs	r2, r3
 8001332:	f241 1304 	movw	r3, #4356	; 0x1104
 8001336:	440b      	add	r3, r1
 8001338:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	7f1b      	ldrb	r3, [r3, #28]
 800133e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001344:	4313      	orrs	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	f241 1308 	movw	r3, #4360	; 0x1108
 8001350:	4413      	add	r3, r2
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <ETH_SetDMAConfig+0x108>)
 8001356:	4013      	ands	r3, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6811      	ldr	r1, [r2, #0]
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	431a      	orrs	r2, r3
 8001360:	f241 1308 	movw	r3, #4360	; 0x1108
 8001364:	440b      	add	r3, r1
 8001366:	601a      	str	r2, [r3, #0]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	ffff87fd 	.word	0xffff87fd
 8001378:	ffff2ffe 	.word	0xffff2ffe
 800137c:	fffec000 	.word	0xfffec000
 8001380:	ffc0efef 	.word	0xffc0efef
 8001384:	7fc0ffff 	.word	0x7fc0ffff

08001388 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b0a4      	sub	sp, #144	; 0x90
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001390:	2301      	movs	r3, #1
 8001392:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001396:	2300      	movs	r3, #0
 8001398:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80013a6:	2301      	movs	r3, #1
 80013a8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80013be:	2301      	movs	r3, #1
 80013c0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80013c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80013e0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80013e4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001402:	2300      	movs	r3, #0
 8001404:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001406:	2300      	movs	r3, #0
 8001408:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800140a:	2300      	movs	r3, #0
 800140c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800141a:	2301      	movs	r3, #1
 800141c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001420:	2320      	movs	r3, #32
 8001422:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001426:	2301      	movs	r3, #1
 8001428:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001432:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001438:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800143c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800145c:	2301      	movs	r3, #1
 800145e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001462:	2300      	movs	r3, #0
 8001464:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001466:	2301      	movs	r3, #1
 8001468:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800146c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001470:	4619      	mov	r1, r3
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fde6 	bl	8001044 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001478:	2301      	movs	r3, #1
 800147a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800147c:	2301      	movs	r3, #1
 800147e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001492:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001496:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800149c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014a0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80014a8:	f44f 7306 	mov.w	r3, #536	; 0x218
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	4619      	mov	r1, r3
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff fee1 	bl	800127c <ETH_SetDMAConfig>
}
 80014ba:	bf00      	nop
 80014bc:	3790      	adds	r7, #144	; 0x90
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014de:	f001 fbd9 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 80014e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d908      	bls.n	80014fe <ETH_MAC_MDIO_ClkConfig+0x3a>
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d804      	bhi.n	80014fe <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	e027      	b.n	800154e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	4a18      	ldr	r2, [pc, #96]	; (8001564 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d908      	bls.n	8001518 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d204      	bcs.n	8001518 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e01a      	b.n	800154e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4a13      	ldr	r2, [pc, #76]	; (8001568 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d303      	bcc.n	8001528 <ETH_MAC_MDIO_ClkConfig+0x64>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d911      	bls.n	800154c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	4a10      	ldr	r2, [pc, #64]	; (800156c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d908      	bls.n	8001542 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d804      	bhi.n	8001542 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e005      	b.n	800154e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	e000      	b.n	800154e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800154c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	01312cff 	.word	0x01312cff
 8001564:	02160ebf 	.word	0x02160ebf
 8001568:	03938700 	.word	0x03938700
 800156c:	05f5e0ff 	.word	0x05f5e0ff
 8001570:	08f0d17f 	.word	0x08f0d17f

08001574 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e01d      	b.n	80015be <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68d9      	ldr	r1, [r3, #12]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	3206      	adds	r2, #6
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3301      	adds	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d9de      	bls.n	8001582 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2200      	movs	r2, #0
 80015c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	f241 132c 	movw	r3, #4396	; 0x112c
 80015d2:	4413      	add	r3, r2
 80015d4:	2203      	movs	r2, #3
 80015d6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68d9      	ldr	r1, [r3, #12]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	f241 1314 	movw	r3, #4372	; 0x1114
 80015e4:	4413      	add	r3, r2
 80015e6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80015f4:	601a      	str	r2, [r3, #0]
}
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001602:	b480      	push	{r7}
 8001604:	b085      	sub	sp, #20
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e024      	b.n	800165a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6919      	ldr	r1, [r3, #16]
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3310      	adds	r3, #16
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d9d7      	bls.n	8001610 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f241 1330 	movw	r3, #4400	; 0x1130
 8001686:	4413      	add	r3, r2
 8001688:	2203      	movs	r2, #3
 800168a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6919      	ldr	r1, [r3, #16]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	f241 131c 	movw	r3, #4380	; 0x111c
 8001698:	4413      	add	r3, r2
 800169a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	f241 1328 	movw	r3, #4392	; 0x1128
 80016ac:	4413      	add	r3, r2
 80016ae:	6019      	str	r1, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_GPIO_Init+0x234>)
 80016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016ce:	e194      	b.n	80019fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8186 	beq.w	80019f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d005      	beq.n	8001700 <HAL_GPIO_Init+0x44>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d130      	bne.n	8001762 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	4013      	ands	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001736:	2201      	movs	r2, #1
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b03      	cmp	r3, #3
 800176c:	d017      	beq.n	800179e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d123      	bne.n	80017f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	69b9      	ldr	r1, [r7, #24]
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4013      	ands	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0203 	and.w	r2, r3, #3
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80e0 	beq.w	80019f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_GPIO_Init+0x238>)
 8001836:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800183a:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <HAL_GPIO_Init+0x238>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001844:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <HAL_GPIO_Init+0x238>)
 8001846:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001852:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <HAL_GPIO_Init+0x23c>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a20      	ldr	r2, [pc, #128]	; (80018fc <HAL_GPIO_Init+0x240>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d052      	beq.n	8001924 <HAL_GPIO_Init+0x268>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_GPIO_Init+0x244>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d031      	beq.n	80018ea <HAL_GPIO_Init+0x22e>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a1e      	ldr	r2, [pc, #120]	; (8001904 <HAL_GPIO_Init+0x248>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d02b      	beq.n	80018e6 <HAL_GPIO_Init+0x22a>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a1d      	ldr	r2, [pc, #116]	; (8001908 <HAL_GPIO_Init+0x24c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d025      	beq.n	80018e2 <HAL_GPIO_Init+0x226>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a1c      	ldr	r2, [pc, #112]	; (800190c <HAL_GPIO_Init+0x250>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d01f      	beq.n	80018de <HAL_GPIO_Init+0x222>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_GPIO_Init+0x254>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d019      	beq.n	80018da <HAL_GPIO_Init+0x21e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_GPIO_Init+0x258>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_Init+0x21a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <HAL_GPIO_Init+0x25c>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_Init+0x216>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_GPIO_Init+0x260>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_Init+0x212>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a17      	ldr	r2, [pc, #92]	; (8001920 <HAL_GPIO_Init+0x264>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_Init+0x20e>
 80018c6:	2309      	movs	r3, #9
 80018c8:	e02d      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018ca:	230a      	movs	r3, #10
 80018cc:	e02b      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018ce:	2308      	movs	r3, #8
 80018d0:	e029      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e027      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018d6:	2306      	movs	r3, #6
 80018d8:	e025      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018da:	2305      	movs	r3, #5
 80018dc:	e023      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018de:	2304      	movs	r3, #4
 80018e0:	e021      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018e2:	2303      	movs	r3, #3
 80018e4:	e01f      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e01d      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e01b      	b.n	8001926 <HAL_GPIO_Init+0x26a>
 80018ee:	bf00      	nop
 80018f0:	58000080 	.word	0x58000080
 80018f4:	58024400 	.word	0x58024400
 80018f8:	58000400 	.word	0x58000400
 80018fc:	58020000 	.word	0x58020000
 8001900:	58020400 	.word	0x58020400
 8001904:	58020800 	.word	0x58020800
 8001908:	58020c00 	.word	0x58020c00
 800190c:	58021000 	.word	0x58021000
 8001910:	58021400 	.word	0x58021400
 8001914:	58021800 	.word	0x58021800
 8001918:	58021c00 	.word	0x58021c00
 800191c:	58022000 	.word	0x58022000
 8001920:	58022400 	.word	0x58022400
 8001924:	2300      	movs	r3, #0
 8001926:	69fa      	ldr	r2, [r7, #28]
 8001928:	f002 0203 	and.w	r2, r2, #3
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	4093      	lsls	r3, r2
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4313      	orrs	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001936:	4938      	ldr	r1, [pc, #224]	; (8001a18 <HAL_GPIO_Init+0x35c>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800196a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001998:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	3301      	adds	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f47f ae63 	bne.w	80016d0 <HAL_GPIO_Init+0x14>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	3724      	adds	r7, #36	; 0x24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	58000400 	.word	0x58000400

08001a1c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a24:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_HSEM_FastTake+0x2c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3320      	adds	r3, #32
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <HAL_HSEM_FastTake+0x30>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e000      	b.n	8001a3a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	58026400 	.word	0x58026400
 8001a4c:	80000300 	.word	0x80000300

08001a50 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a5a:	4906      	ldr	r1, [pc, #24]	; (8001a74 <HAL_HSEM_Release+0x24>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	58026400 	.word	0x58026400

08001a78 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7a:	b08f      	sub	sp, #60	; 0x3c
 8001a7c:	af0a      	add	r7, sp, #40	; 0x28
 8001a7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e116      	b.n	8001cb8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d106      	bne.n	8001aaa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7fe ff5b 	bl	8000960 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d102      	bne.n	8001ac4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fa25 	bl	8003f18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	687e      	ldr	r6, [r7, #4]
 8001ad6:	466d      	mov	r5, sp
 8001ad8:	f106 0410 	add.w	r4, r6, #16
 8001adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ae8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aec:	1d33      	adds	r3, r6, #4
 8001aee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001af0:	6838      	ldr	r0, [r7, #0]
 8001af2:	f002 f9a3 	bl	8003e3c <USB_CoreInit>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0d7      	b.n	8001cb8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fa13 	bl	8003f3a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]
 8001b18:	e04a      	b.n	8001bb0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	6879      	ldr	r1, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	333d      	adds	r3, #61	; 0x3d
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b2e:	7bfa      	ldrb	r2, [r7, #15]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	440b      	add	r3, r1
 8001b3c:	333c      	adds	r3, #60	; 0x3c
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	b298      	uxth	r0, r3
 8001b48:	6879      	ldr	r1, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	1a9b      	subs	r3, r3, r2
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	440b      	add	r3, r1
 8001b54:	3342      	adds	r3, #66	; 0x42
 8001b56:	4602      	mov	r2, r0
 8001b58:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b5a:	7bfa      	ldrb	r2, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	1a9b      	subs	r3, r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	333f      	adds	r3, #63	; 0x3f
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	3344      	adds	r3, #68	; 0x44
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b82:	7bfa      	ldrb	r2, [r7, #15]
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	1a9b      	subs	r3, r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	3348      	adds	r3, #72	; 0x48
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	3350      	adds	r3, #80	; 0x50
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	3301      	adds	r3, #1
 8001bae:	73fb      	strb	r3, [r7, #15]
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d3af      	bcc.n	8001b1a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73fb      	strb	r3, [r7, #15]
 8001bbe:	e044      	b.n	8001c4a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	1a9b      	subs	r3, r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	1a9b      	subs	r3, r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	1a9b      	subs	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	1a9b      	subs	r3, r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	3301      	adds	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d3b5      	bcc.n	8001bc0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	687e      	ldr	r6, [r7, #4]
 8001c5c:	466d      	mov	r5, sp
 8001c5e:	f106 0410 	add.w	r4, r6, #16
 8001c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c72:	1d33      	adds	r3, r6, #4
 8001c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c76:	6838      	ldr	r0, [r7, #0]
 8001c78:	f002 f9ac 	bl	8003fd4 <USB_DevInit>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2202      	movs	r2, #2
 8001c86:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e014      	b.n	8001cb8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f80a 	bl	8001cc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fb66 	bl	8004382 <USB_DevDisconnect>

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <HAL_PCDEx_ActivateLPM+0x44>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	10000003 	.word	0x10000003

08001d08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d10:	4b29      	ldr	r3, [pc, #164]	; (8001db8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	2b06      	cmp	r3, #6
 8001d1a:	d00a      	beq.n	8001d32 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d001      	beq.n	8001d2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e040      	b.n	8001db0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e03e      	b.n	8001db0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001d3a:	491f      	ldr	r1, [pc, #124]	; (8001db8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d42:	f7fe ff71 	bl	8000c28 <HAL_GetTick>
 8001d46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d48:	e009      	b.n	8001d5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d4a:	f7fe ff6d 	bl	8000c28 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d58:	d901      	bls.n	8001d5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e028      	b.n	8001db0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b1e      	cmp	r3, #30
 8001d70:	d008      	beq.n	8001d84 <HAL_PWREx_ConfigSupply+0x7c>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b2e      	cmp	r3, #46	; 0x2e
 8001d76:	d005      	beq.n	8001d84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b1d      	cmp	r3, #29
 8001d7c:	d002      	beq.n	8001d84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b2d      	cmp	r3, #45	; 0x2d
 8001d82:	d114      	bne.n	8001dae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001d84:	f7fe ff50 	bl	8000c28 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d8a:	e009      	b.n	8001da0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d8c:	f7fe ff4c 	bl	8000c28 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d9a:	d901      	bls.n	8001da0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e007      	b.n	8001db0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dac:	d1ee      	bne.n	8001d8c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	58024800 	.word	0x58024800

08001dbc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	58024800 	.word	0x58024800

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f000 bc1c 	b.w	8002628 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 8087 	beq.w	8001f0c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfe:	4b9e      	ldr	r3, [pc, #632]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e08:	4b9b      	ldr	r3, [pc, #620]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d007      	beq.n	8001e24 <HAL_RCC_OscConfig+0x48>
 8001e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e16:	2b18      	cmp	r3, #24
 8001e18:	d110      	bne.n	8001e3c <HAL_RCC_OscConfig+0x60>
 8001e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d10b      	bne.n	8001e3c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e24:	4b94      	ldr	r3, [pc, #592]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d06c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x12e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d168      	bne.n	8001f0a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e3f5      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d106      	bne.n	8001e54 <HAL_RCC_OscConfig+0x78>
 8001e46:	4b8c      	ldr	r3, [pc, #560]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a8b      	ldr	r2, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e02e      	b.n	8001eb2 <HAL_RCC_OscConfig+0xd6>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x9a>
 8001e5c:	4b86      	ldr	r3, [pc, #536]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a85      	ldr	r2, [pc, #532]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b83      	ldr	r3, [pc, #524]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a82      	ldr	r2, [pc, #520]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e01d      	b.n	8001eb2 <HAL_RCC_OscConfig+0xd6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7e:	d10c      	bne.n	8001e9a <HAL_RCC_OscConfig+0xbe>
 8001e80:	4b7d      	ldr	r3, [pc, #500]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a7c      	ldr	r2, [pc, #496]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]
 8001e8c:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a79      	ldr	r2, [pc, #484]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	e00b      	b.n	8001eb2 <HAL_RCC_OscConfig+0xd6>
 8001e9a:	4b77      	ldr	r3, [pc, #476]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a76      	ldr	r2, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b74      	ldr	r3, [pc, #464]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a73      	ldr	r2, [pc, #460]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d013      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7fe feb5 	bl	8000c28 <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec2:	f7fe feb1 	bl	8000c28 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b64      	cmp	r3, #100	; 0x64
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e3a9      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ed4:	4b68      	ldr	r3, [pc, #416]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0xe6>
 8001ee0:	e014      	b.n	8001f0c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7fe fea1 	bl	8000c28 <HAL_GetTick>
 8001ee6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eea:	f7fe fe9d 	bl	8000c28 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b64      	cmp	r3, #100	; 0x64
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e395      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x10e>
 8001f08:	e000      	b.n	8001f0c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80ca 	beq.w	80020ae <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1a:	4b57      	ldr	r3, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f24:	4b54      	ldr	r3, [pc, #336]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f2a:	6a3b      	ldr	r3, [r7, #32]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_RCC_OscConfig+0x164>
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	2b18      	cmp	r3, #24
 8001f34:	d156      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x208>
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d151      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f40:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_OscConfig+0x17c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e367      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f58:	4b47      	ldr	r3, [pc, #284]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0219 	bic.w	r2, r3, #25
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4944      	ldr	r1, [pc, #272]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f6a:	f7fe fe5d 	bl	8000c28 <HAL_GetTick>
 8001f6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f72:	f7fe fe59 	bl	8000c28 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e351      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f84:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	f7fe fe7a 	bl	8000c88 <HAL_GetREVID>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d817      	bhi.n	8001fce <HAL_RCC_OscConfig+0x1f2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d108      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1dc>
 8001fa6:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001fae:	4a32      	ldr	r2, [pc, #200]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001fb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fb6:	e07a      	b.n	80020ae <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb8:	4b2f      	ldr	r3, [pc, #188]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	031b      	lsls	r3, r3, #12
 8001fc6:	492c      	ldr	r1, [pc, #176]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fcc:	e06f      	b.n	80020ae <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	061b      	lsls	r3, r3, #24
 8001fdc:	4926      	ldr	r1, [pc, #152]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe2:	e064      	b.n	80020ae <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d047      	beq.n	800207c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fec:	4b22      	ldr	r3, [pc, #136]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f023 0219 	bic.w	r2, r3, #25
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	491f      	ldr	r1, [pc, #124]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffe:	f7fe fe13 	bl	8000c28 <HAL_GetTick>
 8002002:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002004:	e008      	b.n	8002018 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002006:	f7fe fe0f 	bl	8000c28 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e307      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0f0      	beq.n	8002006 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002024:	f7fe fe30 	bl	8000c88 <HAL_GetREVID>
 8002028:	4603      	mov	r3, r0
 800202a:	f241 0203 	movw	r2, #4099	; 0x1003
 800202e:	4293      	cmp	r3, r2
 8002030:	d817      	bhi.n	8002062 <HAL_RCC_OscConfig+0x286>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b40      	cmp	r3, #64	; 0x40
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x270>
 800203a:	4b0f      	ldr	r3, [pc, #60]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8002044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002048:	6053      	str	r3, [r2, #4]
 800204a:	e030      	b.n	80020ae <HAL_RCC_OscConfig+0x2d2>
 800204c:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	031b      	lsls	r3, r3, #12
 800205a:	4907      	ldr	r1, [pc, #28]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 800205c:	4313      	orrs	r3, r2
 800205e:	604b      	str	r3, [r1, #4]
 8002060:	e025      	b.n	80020ae <HAL_RCC_OscConfig+0x2d2>
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	061b      	lsls	r3, r3, #24
 8002070:	4901      	ldr	r1, [pc, #4]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
 8002076:	e01a      	b.n	80020ae <HAL_RCC_OscConfig+0x2d2>
 8002078:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800207c:	4b9e      	ldr	r3, [pc, #632]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a9d      	ldr	r2, [pc, #628]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7fe fdce 	bl	8000c28 <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7fe fdca 	bl	8000c28 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e2c2      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020a2:	4b95      	ldr	r3, [pc, #596]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0310 	and.w	r3, r3, #16
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80a9 	beq.w	800220e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020bc:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020c6:	4b8c      	ldr	r3, [pc, #560]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d007      	beq.n	80020e2 <HAL_RCC_OscConfig+0x306>
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b18      	cmp	r3, #24
 80020d6:	d13a      	bne.n	800214e <HAL_RCC_OscConfig+0x372>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d135      	bne.n	800214e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020e2:	4b85      	ldr	r3, [pc, #532]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x31e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	2b80      	cmp	r3, #128	; 0x80
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e296      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020fa:	f7fe fdc5 	bl	8000c88 <HAL_GetREVID>
 80020fe:	4603      	mov	r3, r0
 8002100:	f241 0203 	movw	r2, #4099	; 0x1003
 8002104:	4293      	cmp	r3, r2
 8002106:	d817      	bhi.n	8002138 <HAL_RCC_OscConfig+0x35c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	2b20      	cmp	r3, #32
 800210e:	d108      	bne.n	8002122 <HAL_RCC_OscConfig+0x346>
 8002110:	4b79      	ldr	r3, [pc, #484]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002118:	4a77      	ldr	r2, [pc, #476]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800211a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800211e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002120:	e075      	b.n	800220e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002122:	4b75      	ldr	r3, [pc, #468]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	069b      	lsls	r3, r3, #26
 8002130:	4971      	ldr	r1, [pc, #452]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002136:	e06a      	b.n	800220e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002138:	4b6f      	ldr	r3, [pc, #444]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	496c      	ldr	r1, [pc, #432]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002148:	4313      	orrs	r3, r2
 800214a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800214c:	e05f      	b.n	800220e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d042      	beq.n	80021dc <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002156:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a67      	ldr	r2, [pc, #412]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7fe fd61 	bl	8000c28 <HAL_GetTick>
 8002166:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800216a:	f7fe fd5d 	bl	8000c28 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e255      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800217c:	4b5e      	ldr	r3, [pc, #376]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002188:	f7fe fd7e 	bl	8000c88 <HAL_GetREVID>
 800218c:	4603      	mov	r3, r0
 800218e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002192:	4293      	cmp	r3, r2
 8002194:	d817      	bhi.n	80021c6 <HAL_RCC_OscConfig+0x3ea>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	2b20      	cmp	r3, #32
 800219c:	d108      	bne.n	80021b0 <HAL_RCC_OscConfig+0x3d4>
 800219e:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80021a6:	4a54      	ldr	r2, [pc, #336]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80021a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021ac:	6053      	str	r3, [r2, #4]
 80021ae:	e02e      	b.n	800220e <HAL_RCC_OscConfig+0x432>
 80021b0:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	069b      	lsls	r3, r3, #26
 80021be:	494e      	ldr	r1, [pc, #312]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
 80021c4:	e023      	b.n	800220e <HAL_RCC_OscConfig+0x432>
 80021c6:	4b4c      	ldr	r3, [pc, #304]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	061b      	lsls	r3, r3, #24
 80021d4:	4948      	ldr	r1, [pc, #288]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60cb      	str	r3, [r1, #12]
 80021da:	e018      	b.n	800220e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021dc:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80021e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7fe fd1e 	bl	8000c28 <HAL_GetTick>
 80021ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021f0:	f7fe fd1a 	bl	8000c28 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e212      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d036      	beq.n	8002288 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d019      	beq.n	8002256 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002226:	4a34      	ldr	r2, [pc, #208]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7fe fcfb 	bl	8000c28 <HAL_GetTick>
 8002232:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe fcf7 	bl	8000c28 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e1ef      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002248:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800224a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x45a>
 8002254:	e018      	b.n	8002288 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002256:	4b28      	ldr	r3, [pc, #160]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 8002258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800225a:	4a27      	ldr	r2, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002262:	f7fe fce1 	bl	8000c28 <HAL_GetTick>
 8002266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226a:	f7fe fcdd 	bl	8000c28 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e1d5      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800227c:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800227e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0320 	and.w	r3, r3, #32
 8002290:	2b00      	cmp	r3, #0
 8002292:	d039      	beq.n	8002308 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d019      	beq.n	80022d0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a15      	ldr	r2, [pc, #84]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80022a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022a8:	f7fe fcbe 	bl	8000c28 <HAL_GetTick>
 80022ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022b0:	f7fe fcba 	bl	8000c28 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e1b2      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d0f0      	beq.n	80022b0 <HAL_RCC_OscConfig+0x4d4>
 80022ce:	e01b      	b.n	8002308 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022d0:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_RCC_OscConfig+0x51c>)
 80022d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022dc:	f7fe fca4 	bl	8000c28 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022e2:	e00b      	b.n	80022fc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022e4:	f7fe fca0 	bl	8000c28 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d904      	bls.n	80022fc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e198      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
 80022f6:	bf00      	nop
 80022f8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022fc:	4ba3      	ldr	r3, [pc, #652]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1ed      	bne.n	80022e4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 8081 	beq.w	8002418 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002316:	4b9e      	ldr	r3, [pc, #632]	; (8002590 <HAL_RCC_OscConfig+0x7b4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a9d      	ldr	r2, [pc, #628]	; (8002590 <HAL_RCC_OscConfig+0x7b4>)
 800231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002320:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002322:	f7fe fc81 	bl	8000c28 <HAL_GetTick>
 8002326:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800232a:	f7fe fc7d 	bl	8000c28 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e175      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800233c:	4b94      	ldr	r3, [pc, #592]	; (8002590 <HAL_RCC_OscConfig+0x7b4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d106      	bne.n	800235e <HAL_RCC_OscConfig+0x582>
 8002350:	4b8e      	ldr	r3, [pc, #568]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a8d      	ldr	r2, [pc, #564]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
 800235c:	e02d      	b.n	80023ba <HAL_RCC_OscConfig+0x5de>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0x5a4>
 8002366:	4b89      	ldr	r3, [pc, #548]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236a:	4a88      	ldr	r2, [pc, #544]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800236c:	f023 0301 	bic.w	r3, r3, #1
 8002370:	6713      	str	r3, [r2, #112]	; 0x70
 8002372:	4b86      	ldr	r3, [pc, #536]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	4a85      	ldr	r2, [pc, #532]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002378:	f023 0304 	bic.w	r3, r3, #4
 800237c:	6713      	str	r3, [r2, #112]	; 0x70
 800237e:	e01c      	b.n	80023ba <HAL_RCC_OscConfig+0x5de>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5c6>
 8002388:	4b80      	ldr	r3, [pc, #512]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238c:	4a7f      	ldr	r2, [pc, #508]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800238e:	f043 0304 	orr.w	r3, r3, #4
 8002392:	6713      	str	r3, [r2, #112]	; 0x70
 8002394:	4b7d      	ldr	r3, [pc, #500]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002398:	4a7c      	ldr	r2, [pc, #496]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	6713      	str	r3, [r2, #112]	; 0x70
 80023a0:	e00b      	b.n	80023ba <HAL_RCC_OscConfig+0x5de>
 80023a2:	4b7a      	ldr	r3, [pc, #488]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a79      	ldr	r2, [pc, #484]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80023a8:	f023 0301 	bic.w	r3, r3, #1
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70
 80023ae:	4b77      	ldr	r3, [pc, #476]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80023b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b2:	4a76      	ldr	r2, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80023b4:	f023 0304 	bic.w	r3, r3, #4
 80023b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d015      	beq.n	80023ee <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c2:	f7fe fc31 	bl	8000c28 <HAL_GetTick>
 80023c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c8:	e00a      	b.n	80023e0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023ca:	f7fe fc2d 	bl	8000c28 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d8:	4293      	cmp	r3, r2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e123      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023e0:	4b6a      	ldr	r3, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80023e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ee      	beq.n	80023ca <HAL_RCC_OscConfig+0x5ee>
 80023ec:	e014      	b.n	8002418 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7fe fc1b 	bl	8000c28 <HAL_GetTick>
 80023f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f6:	f7fe fc17 	bl	8000c28 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	f241 3288 	movw	r2, #5000	; 0x1388
 8002404:	4293      	cmp	r3, r2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e10d      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800240c:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ee      	bne.n	80023f6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8102 	beq.w	8002626 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002422:	4b5a      	ldr	r3, [pc, #360]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800242a:	2b18      	cmp	r3, #24
 800242c:	f000 80bd 	beq.w	80025aa <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	2b02      	cmp	r3, #2
 8002436:	f040 8095 	bne.w	8002564 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b54      	ldr	r3, [pc, #336]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a53      	ldr	r2, [pc, #332]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002440:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7fe fbef 	bl	8000c28 <HAL_GetTick>
 800244a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244e:	f7fe fbeb 	bl	8000c28 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0e3      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002460:	4b4a      	ldr	r3, [pc, #296]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800246e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002470:	4b48      	ldr	r3, [pc, #288]	; (8002594 <HAL_RCC_OscConfig+0x7b8>)
 8002472:	4013      	ands	r3, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	430a      	orrs	r2, r1
 8002480:	4942      	ldr	r1, [pc, #264]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	628b      	str	r3, [r1, #40]	; 0x28
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	3b01      	subs	r3, #1
 800248c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	3b01      	subs	r3, #1
 8002496:	025b      	lsls	r3, r3, #9
 8002498:	b29b      	uxth	r3, r3
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	3b01      	subs	r3, #1
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	3b01      	subs	r3, #1
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80024b6:	4935      	ldr	r1, [pc, #212]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80024bc:	4b33      	ldr	r3, [pc, #204]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	4a32      	ldr	r2, [pc, #200]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024c8:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <HAL_RCC_OscConfig+0x7bc>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024d4:	00d2      	lsls	r2, r2, #3
 80024d6:	492d      	ldr	r1, [pc, #180]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f023 020c 	bic.w	r2, r3, #12
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	4928      	ldr	r1, [pc, #160]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024ee:	4b27      	ldr	r3, [pc, #156]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f023 0202 	bic.w	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4924      	ldr	r1, [pc, #144]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002500:	4b22      	ldr	r3, [pc, #136]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	4a21      	ldr	r2, [pc, #132]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800250c:	4b1f      	ldr	r3, [pc, #124]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	4a1e      	ldr	r2, [pc, #120]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002518:	4b1c      	ldr	r3, [pc, #112]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	4a1b      	ldr	r2, [pc, #108]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800251e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002522:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002524:	4b19      	ldr	r3, [pc, #100]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	4a18      	ldr	r2, [pc, #96]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	4b16      	ldr	r3, [pc, #88]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a15      	ldr	r2, [pc, #84]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800253a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fb74 	bl	8000c28 <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fb70 	bl	8000c28 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e068      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002556:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x768>
 8002562:	e060      	b.n	8002626 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a08      	ldr	r2, [pc, #32]	; (800258c <HAL_RCC_OscConfig+0x7b0>)
 800256a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800256e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fb5a 	bl	8000c28 <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002576:	e011      	b.n	800259c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7fe fb56 	bl	8000c28 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d90a      	bls.n	800259c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e04e      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
 800258a:	bf00      	nop
 800258c:	58024400 	.word	0x58024400
 8002590:	58024800 	.word	0x58024800
 8002594:	fffffc0c 	.word	0xfffffc0c
 8002598:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800259c:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_RCC_OscConfig+0x854>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e7      	bne.n	8002578 <HAL_RCC_OscConfig+0x79c>
 80025a8:	e03d      	b.n	8002626 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025aa:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCC_OscConfig+0x854>)
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_RCC_OscConfig+0x854>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d031      	beq.n	8002622 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f003 0203 	and.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d12a      	bne.n	8002622 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	091b      	lsrs	r3, r3, #4
 80025d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d122      	bne.n	8002622 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d11a      	bne.n	8002622 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	0a5b      	lsrs	r3, r3, #9
 80025f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d111      	bne.n	8002622 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d108      	bne.n	8002622 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	0e1b      	lsrs	r3, r3, #24
 8002614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800261e:	429a      	cmp	r2, r3
 8002620:	d001      	beq.n	8002626 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3730      	adds	r7, #48	; 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	58024400 	.word	0x58024400

08002634 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e19c      	b.n	8002982 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002648:	4b8a      	ldr	r3, [pc, #552]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 030f 	and.w	r3, r3, #15
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d910      	bls.n	8002678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002656:	4b87      	ldr	r3, [pc, #540]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 020f 	bic.w	r2, r3, #15
 800265e:	4985      	ldr	r1, [pc, #532]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b83      	ldr	r3, [pc, #524]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e184      	b.n	8002982 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d010      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002690:	429a      	cmp	r2, r3
 8002692:	d908      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002694:	4b78      	ldr	r3, [pc, #480]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	4975      	ldr	r1, [pc, #468]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	4b70      	ldr	r3, [pc, #448]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026be:	429a      	cmp	r2, r3
 80026c0:	d908      	bls.n	80026d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026c2:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	496a      	ldr	r1, [pc, #424]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d010      	beq.n	8002702 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	4b64      	ldr	r3, [pc, #400]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d908      	bls.n	8002702 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026f0:	4b61      	ldr	r3, [pc, #388]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	495e      	ldr	r1, [pc, #376]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0320 	and.w	r3, r3, #32
 800270a:	2b00      	cmp	r3, #0
 800270c:	d010      	beq.n	8002730 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800271a:	429a      	cmp	r2, r3
 800271c:	d908      	bls.n	8002730 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800271e:	4b56      	ldr	r3, [pc, #344]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4953      	ldr	r1, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800272c:	4313      	orrs	r3, r2
 800272e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d010      	beq.n	800275e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	4b4d      	ldr	r3, [pc, #308]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	429a      	cmp	r2, r3
 800274a:	d908      	bls.n	800275e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800274c:	4b4a      	ldr	r3, [pc, #296]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f023 020f 	bic.w	r2, r3, #15
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4947      	ldr	r1, [pc, #284]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800275a:	4313      	orrs	r3, r2
 800275c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d055      	beq.n	8002816 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800276a:	4b43      	ldr	r3, [pc, #268]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4940      	ldr	r1, [pc, #256]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002778:	4313      	orrs	r3, r2
 800277a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b02      	cmp	r3, #2
 8002782:	d107      	bne.n	8002794 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002784:	4b3c      	ldr	r3, [pc, #240]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d121      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0f6      	b.n	8002982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b03      	cmp	r3, #3
 800279a:	d107      	bne.n	80027ac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d115      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0ea      	b.n	8002982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027b4:	4b30      	ldr	r3, [pc, #192]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d109      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0de      	b.n	8002982 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d6      	b.n	8002982 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f023 0207 	bic.w	r2, r3, #7
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4925      	ldr	r1, [pc, #148]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7fe fa1f 	bl	8000c28 <HAL_GetTick>
 80027ea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ee:	f7fe fa1b 	bl	8000c28 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0be      	b.n	8002982 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002804:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	429a      	cmp	r2, r3
 8002814:	d1eb      	bne.n	80027ee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d010      	beq.n	8002844 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	429a      	cmp	r2, r3
 8002830:	d208      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f023 020f 	bic.w	r2, r3, #15
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	490e      	ldr	r1, [pc, #56]	; (8002878 <HAL_RCC_ClockConfig+0x244>)
 8002840:	4313      	orrs	r3, r2
 8002842:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d214      	bcs.n	800287c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f023 020f 	bic.w	r2, r3, #15
 800285a:	4906      	ldr	r1, [pc, #24]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <HAL_RCC_ClockConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e086      	b.n	8002982 <HAL_RCC_ClockConfig+0x34e>
 8002874:	52002000 	.word	0x52002000
 8002878:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	4b3f      	ldr	r3, [pc, #252]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002894:	429a      	cmp	r2, r3
 8002896:	d208      	bcs.n	80028aa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002898:	4b3c      	ldr	r3, [pc, #240]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	4939      	ldr	r1, [pc, #228]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d010      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d208      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	492e      	ldr	r1, [pc, #184]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d010      	beq.n	8002906 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d208      	bcs.n	8002906 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	4922      	ldr	r1, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 8002902:	4313      	orrs	r3, r2
 8002904:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b00      	cmp	r3, #0
 8002910:	d010      	beq.n	8002934 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800291e:	429a      	cmp	r2, r3
 8002920:	d208      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002922:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4917      	ldr	r1, [pc, #92]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 8002930:	4313      	orrs	r3, r2
 8002932:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002934:	f000 f834 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b14      	ldr	r3, [pc, #80]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	4912      	ldr	r1, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x35c>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
 8002950:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <HAL_RCC_ClockConfig+0x358>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_RCC_ClockConfig+0x35c>)
 800295c:	5cd3      	ldrb	r3, [r2, r3]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x360>)
 800296a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800296c:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_RCC_ClockConfig+0x364>)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002972:	4b0a      	ldr	r3, [pc, #40]	; (800299c <HAL_RCC_ClockConfig+0x368>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe f90c 	bl	8000b94 <HAL_InitTick>
 800297c:	4603      	mov	r3, r0
 800297e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002980:	7bfb      	ldrb	r3, [r7, #15]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	58024400 	.word	0x58024400
 8002990:	080044b4 	.word	0x080044b4
 8002994:	24000004 	.word	0x24000004
 8002998:	24000000 	.word	0x24000000
 800299c:	24000008 	.word	0x24000008

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a6:	4bb3      	ldr	r3, [pc, #716]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ae:	2b18      	cmp	r3, #24
 80029b0:	f200 8155 	bhi.w	8002c5e <HAL_RCC_GetSysClockFreq+0x2be>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	08002a21 	.word	0x08002a21
 80029c0:	08002c5f 	.word	0x08002c5f
 80029c4:	08002c5f 	.word	0x08002c5f
 80029c8:	08002c5f 	.word	0x08002c5f
 80029cc:	08002c5f 	.word	0x08002c5f
 80029d0:	08002c5f 	.word	0x08002c5f
 80029d4:	08002c5f 	.word	0x08002c5f
 80029d8:	08002c5f 	.word	0x08002c5f
 80029dc:	08002a47 	.word	0x08002a47
 80029e0:	08002c5f 	.word	0x08002c5f
 80029e4:	08002c5f 	.word	0x08002c5f
 80029e8:	08002c5f 	.word	0x08002c5f
 80029ec:	08002c5f 	.word	0x08002c5f
 80029f0:	08002c5f 	.word	0x08002c5f
 80029f4:	08002c5f 	.word	0x08002c5f
 80029f8:	08002c5f 	.word	0x08002c5f
 80029fc:	08002a4d 	.word	0x08002a4d
 8002a00:	08002c5f 	.word	0x08002c5f
 8002a04:	08002c5f 	.word	0x08002c5f
 8002a08:	08002c5f 	.word	0x08002c5f
 8002a0c:	08002c5f 	.word	0x08002c5f
 8002a10:	08002c5f 	.word	0x08002c5f
 8002a14:	08002c5f 	.word	0x08002c5f
 8002a18:	08002c5f 	.word	0x08002c5f
 8002a1c:	08002a53 	.word	0x08002a53
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a20:	4b94      	ldr	r3, [pc, #592]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0320 	and.w	r3, r3, #32
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a2c:	4b91      	ldr	r3, [pc, #580]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	4a90      	ldr	r2, [pc, #576]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002a3e:	e111      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a40:	4b8d      	ldr	r3, [pc, #564]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a42:	61bb      	str	r3, [r7, #24]
    break;
 8002a44:	e10e      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a46:	4b8d      	ldr	r3, [pc, #564]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a48:	61bb      	str	r3, [r7, #24]
    break;
 8002a4a:	e10b      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a4c:	4b8c      	ldr	r3, [pc, #560]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a4e:	61bb      	str	r3, [r7, #24]
    break;
 8002a50:	e108      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a52:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a5c:	4b85      	ldr	r3, [pc, #532]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a66:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a68:	4b82      	ldr	r3, [pc, #520]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a72:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a76:	08db      	lsrs	r3, r3, #3
 8002a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80e1 	beq.w	8002c58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	f000 8083 	beq.w	8002ba4 <HAL_RCC_GetSysClockFreq+0x204>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	f200 80a1 	bhi.w	8002be8 <HAL_RCC_GetSysClockFreq+0x248>
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x114>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d056      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ab2:	e099      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ab4:	4b6f      	ldr	r3, [pc, #444]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d02d      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002ac0:	4b6c      	ldr	r3, [pc, #432]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	08db      	lsrs	r3, r3, #3
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	4a6b      	ldr	r2, [pc, #428]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ad0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aea:	4b62      	ldr	r3, [pc, #392]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002afe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b1a:	e087      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b2e:	4b51      	ldr	r3, [pc, #324]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b5e:	e065      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b72:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ba2:	e043      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bb6:	4b2f      	ldr	r3, [pc, #188]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002be6:	e021      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	ee07 3a90 	vmov	s15, r3
 8002bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c2a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c30:	0a5b      	lsrs	r3, r3, #9
 8002c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c36:	3301      	adds	r3, #1
 8002c38:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	ee07 3a90 	vmov	s15, r3
 8002c40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c44:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c50:	ee17 3a90 	vmov	r3, s15
 8002c54:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002c56:	e005      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]
    break;
 8002c5c:	e002      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c60:	61bb      	str	r3, [r7, #24]
    break;
 8002c62:	bf00      	nop
  }

  return sysclockfreq;
 8002c64:	69bb      	ldr	r3, [r7, #24]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	58024400 	.word	0x58024400
 8002c78:	03d09000 	.word	0x03d09000
 8002c7c:	003d0900 	.word	0x003d0900
 8002c80:	007a1200 	.word	0x007a1200
 8002c84:	46000000 	.word	0x46000000
 8002c88:	4c742400 	.word	0x4c742400
 8002c8c:	4a742400 	.word	0x4a742400
 8002c90:	4af42400 	.word	0x4af42400

08002c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c9a:	f7ff fe81 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	490f      	ldr	r1, [pc, #60]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cac:	5ccb      	ldrb	r3, [r1, r3]
 8002cae:	f003 031f 	and.w	r3, r3, #31
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cc2:	5cd3      	ldrb	r3, [r2, r3]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <HAL_RCC_GetHCLKFreq+0x58>)
 8002cd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cd2:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <HAL_RCC_GetHCLKFreq+0x58>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	58024400 	.word	0x58024400
 8002ce8:	080044b4 	.word	0x080044b4
 8002cec:	24000004 	.word	0x24000004
 8002cf0:	24000000 	.word	0x24000000

08002cf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d00:	2300      	movs	r3, #0
 8002d02:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d03f      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d18:	d02a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d1e:	d824      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d24:	d018      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d2a:	d81e      	bhi.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d34:	d007      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d36:	e018      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d38:	4bab      	ldr	r3, [pc, #684]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	4aaa      	ldr	r2, [pc, #680]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d44:	e015      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3304      	adds	r3, #4
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 ff11 	bl	8003b74 <RCCEx_PLL2_Config>
 8002d52:	4603      	mov	r3, r0
 8002d54:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d56:	e00c      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3324      	adds	r3, #36	; 0x24
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 ffba 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d68:	e003      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002d6e:	e000      	b.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d78:	4b9b      	ldr	r3, [pc, #620]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d84:	4998      	ldr	r1, [pc, #608]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	650b      	str	r3, [r1, #80]	; 0x50
 8002d8a:	e001      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d03d      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d826      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002dc1 	.word	0x08002dc1
 8002db0:	08002dcf 	.word	0x08002dcf
 8002db4:	08002de1 	.word	0x08002de1
 8002db8:	08002df9 	.word	0x08002df9
 8002dbc:	08002df9 	.word	0x08002df9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b89      	ldr	r3, [pc, #548]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	4a88      	ldr	r2, [pc, #544]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dcc:	e015      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fecd 	bl	8003b74 <RCCEx_PLL2_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002dde:	e00c      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 ff76 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002df0:	e003      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
      break;
 8002df6:	e000      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d109      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e00:	4b79      	ldr	r3, [pc, #484]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e04:	f023 0207 	bic.w	r2, r3, #7
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	4976      	ldr	r1, [pc, #472]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	650b      	str	r3, [r1, #80]	; 0x50
 8002e12:	e001      	b.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
 8002e16:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d042      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e2c:	d02b      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e32:	d825      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e34:	2bc0      	cmp	r3, #192	; 0xc0
 8002e36:	d028      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e38:	2bc0      	cmp	r3, #192	; 0xc0
 8002e3a:	d821      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e3c:	2b80      	cmp	r3, #128	; 0x80
 8002e3e:	d016      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002e40:	2b80      	cmp	r3, #128	; 0x80
 8002e42:	d81d      	bhi.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e48:	2b40      	cmp	r3, #64	; 0x40
 8002e4a:	d007      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002e4c:	e018      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e4e:	4b66      	ldr	r3, [pc, #408]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	4a65      	ldr	r2, [pc, #404]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e5a:	e017      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	2100      	movs	r1, #0
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 fe86 	bl	8003b74 <RCCEx_PLL2_Config>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e6c:	e00e      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3324      	adds	r3, #36	; 0x24
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 ff2f 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e7e:	e005      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	75fb      	strb	r3, [r7, #23]
      break;
 8002e84:	e002      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e86:	bf00      	nop
 8002e88:	e000      	b.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8c:	7dfb      	ldrb	r3, [r7, #23]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e92:	4b55      	ldr	r3, [pc, #340]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e96:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	4952      	ldr	r1, [pc, #328]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	650b      	str	r3, [r1, #80]	; 0x50
 8002ea4:	e001      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea6:	7dfb      	ldrb	r3, [r7, #23]
 8002ea8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d049      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ebc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec0:	d030      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ec6:	d82a      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ec8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ecc:	d02c      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ece:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ed2:	d824      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed8:	d018      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ede:	d81e      	bhi.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002ee4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ee8:	d007      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002eea:	e018      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eec:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ef8:	e017      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 fe37 	bl	8003b74 <RCCEx_PLL2_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f0a:	e00e      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3324      	adds	r3, #36	; 0x24
 8002f10:	2100      	movs	r1, #0
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fee0 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f1c:	e005      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
      break;
 8002f22:	e002      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002f24:	bf00      	nop
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10a      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f30:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f34:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f3e:	492a      	ldr	r1, [pc, #168]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	658b      	str	r3, [r1, #88]	; 0x58
 8002f44:	e001      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d04c      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f60:	d030      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002f62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f66:	d82a      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f6c:	d02c      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002f6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f72:	d824      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f78:	d018      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002f7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f7e:	d81e      	bhi.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f88:	d007      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002f8a:	e018      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f8c:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f98:	e017      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fde7 	bl	8003b74 <RCCEx_PLL2_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002faa:	e00e      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3324      	adds	r3, #36	; 0x24
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fe90 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fbc:	e005      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002fc4:	bf00      	nop
 8002fc6:	e000      	b.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10d      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fde:	4902      	ldr	r1, [pc, #8]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	658b      	str	r3, [r1, #88]	; 0x58
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002fe6:	bf00      	nop
 8002fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d032      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003000:	2b30      	cmp	r3, #48	; 0x30
 8003002:	d01c      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003004:	2b30      	cmp	r3, #48	; 0x30
 8003006:	d817      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d00c      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800300c:	2b20      	cmp	r3, #32
 800300e:	d813      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d016      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003014:	2b10      	cmp	r3, #16
 8003016:	d10f      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003018:	4baf      	ldr	r3, [pc, #700]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	4aae      	ldr	r2, [pc, #696]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800301e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003022:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003024:	e00e      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3304      	adds	r3, #4
 800302a:	2102      	movs	r1, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fda1 	bl	8003b74 <RCCEx_PLL2_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003036:	e005      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e002      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d109      	bne.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800304a:	4ba3      	ldr	r3, [pc, #652]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003056:	49a0      	ldr	r1, [pc, #640]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800305c:	e001      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305e:	7dfb      	ldrb	r3, [r7, #23]
 8003060:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d047      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003076:	d030      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003078:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800307c:	d82a      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800307e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003082:	d02c      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8003084:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003088:	d824      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800308a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800308e:	d018      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003090:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003094:	d81e      	bhi.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800309a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800309e:	d007      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80030a0:	e018      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030a2:	4b8d      	ldr	r3, [pc, #564]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	4a8c      	ldr	r2, [pc, #560]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030ae:	e017      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3304      	adds	r3, #4
 80030b4:	2100      	movs	r1, #0
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fd5c 	bl	8003b74 <RCCEx_PLL2_Config>
 80030bc:	4603      	mov	r3, r0
 80030be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030c0:	e00e      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3324      	adds	r3, #36	; 0x24
 80030c6:	2100      	movs	r1, #0
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fe05 	bl	8003cd8 <RCCEx_PLL3_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030d2:	e005      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	75fb      	strb	r3, [r7, #23]
      break;
 80030d8:	e002      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80030da:	bf00      	nop
 80030dc:	e000      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80030de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030e0:	7dfb      	ldrb	r3, [r7, #23]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d109      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030e6:	4b7c      	ldr	r3, [pc, #496]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ea:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f2:	4979      	ldr	r1, [pc, #484]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	650b      	str	r3, [r1, #80]	; 0x50
 80030f8:	e001      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d049      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800310e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003112:	d02e      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003118:	d828      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800311a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800311e:	d02a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003120:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003124:	d822      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003126:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800312a:	d026      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800312c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003130:	d81c      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003136:	d010      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800313c:	d816      	bhi.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01d      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d111      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3304      	adds	r3, #4
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f000 fd10 	bl	8003b74 <RCCEx_PLL2_Config>
 8003154:	4603      	mov	r3, r0
 8003156:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003158:	e012      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3324      	adds	r3, #36	; 0x24
 800315e:	2101      	movs	r1, #1
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fdb9 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003166:	4603      	mov	r3, r0
 8003168:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800316a:	e009      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	75fb      	strb	r3, [r7, #23]
      break;
 8003170:	e006      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003172:	bf00      	nop
 8003174:	e004      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003176:	bf00      	nop
 8003178:	e002      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800317a:	bf00      	nop
 800317c:	e000      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800317e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d109      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003192:	4951      	ldr	r1, [pc, #324]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003194:	4313      	orrs	r3, r2
 8003196:	650b      	str	r3, [r1, #80]	; 0x50
 8003198:	e001      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800319a:	7dfb      	ldrb	r3, [r7, #23]
 800319c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d04b      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031b4:	d02e      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80031b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031ba:	d828      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c0:	d02a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80031c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c6:	d822      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031cc:	d026      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x528>
 80031ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031d2:	d81c      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d8:	d010      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80031da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031de:	d816      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d01d      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80031e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031e8:	d111      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fcbf 	bl	8003b74 <RCCEx_PLL2_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031fa:	e012      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3324      	adds	r3, #36	; 0x24
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f000 fd68 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800320c:	e009      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
      break;
 8003212:	e006      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003214:	bf00      	nop
 8003216:	e004      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003218:	bf00      	nop
 800321a:	e002      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800321c:	bf00      	nop
 800321e:	e000      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003220:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003222:	7dfb      	ldrb	r3, [r7, #23]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003236:	4928      	ldr	r1, [pc, #160]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003238:	4313      	orrs	r3, r2
 800323a:	658b      	str	r3, [r1, #88]	; 0x58
 800323c:	e001      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
 8003240:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d02f      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003252:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003256:	d00e      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003258:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800325c:	d814      	bhi.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d015      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003266:	d10f      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	4b1b      	ldr	r3, [pc, #108]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	4a1a      	ldr	r2, [pc, #104]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800326e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003272:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003274:	e00c      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3304      	adds	r3, #4
 800327a:	2101      	movs	r1, #1
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fc79 	bl	8003b74 <RCCEx_PLL2_Config>
 8003282:	4603      	mov	r3, r0
 8003284:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	75fb      	strb	r3, [r7, #23]
      break;
 800328c:	e000      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800328e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003290:	7dfb      	ldrb	r3, [r7, #23]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d109      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003296:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800329a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	490d      	ldr	r1, [pc, #52]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	650b      	str	r3, [r1, #80]	; 0x50
 80032a8:	e001      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d033      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d81c      	bhi.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x608>
 80032c2:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	08003303 	.word	0x08003303
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032eb 	.word	0x080032eb
 80032d4:	08003303 	.word	0x08003303
 80032d8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032dc:	4bb8      	ldr	r3, [pc, #736]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	4ab7      	ldr	r2, [pc, #732]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032e8:	e00c      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	3304      	adds	r3, #4
 80032ee:	2102      	movs	r1, #2
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fc3f 	bl	8003b74 <RCCEx_PLL2_Config>
 80032f6:	4603      	mov	r3, r0
 80032f8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032fa:	e003      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003300:	e000      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003302:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003304:	7dfb      	ldrb	r3, [r7, #23]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800330a:	4bad      	ldr	r3, [pc, #692]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	f023 0203 	bic.w	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	49aa      	ldr	r1, [pc, #680]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003318:	4313      	orrs	r3, r2
 800331a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800331c:	e001      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
 8003320:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8086 	beq.w	800343c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003330:	4ba4      	ldr	r3, [pc, #656]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4aa3      	ldr	r2, [pc, #652]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800333c:	f7fd fc74 	bl	8000c28 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003342:	e009      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003344:	f7fd fc70 	bl	8000c28 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d902      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	75fb      	strb	r3, [r7, #23]
        break;
 8003356:	e005      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003358:	4b9a      	ldr	r3, [pc, #616]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0ef      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d166      	bne.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800336a:	4b95      	ldr	r3, [pc, #596]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800336c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003374:	4053      	eors	r3, r2
 8003376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800337e:	4b90      	ldr	r3, [pc, #576]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003386:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003388:	4b8d      	ldr	r3, [pc, #564]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a8c      	ldr	r2, [pc, #560]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003394:	4b8a      	ldr	r3, [pc, #552]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a89      	ldr	r2, [pc, #548]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033a0:	4a87      	ldr	r2, [pc, #540]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033b0:	d115      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fd fc39 	bl	8000c28 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033b8:	e00b      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ba:	f7fd fc35 	bl	8000c28 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d902      	bls.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	75fb      	strb	r3, [r7, #23]
            break;
 80033d0:	e005      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d2:	4b7b      	ldr	r3, [pc, #492]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0ed      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80033de:	7dfb      	ldrb	r3, [r7, #23]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d126      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033f2:	d10d      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80033f4:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033f6:	691b      	ldr	r3, [r3, #16]
 80033f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003402:	0919      	lsrs	r1, r3, #4
 8003404:	4b70      	ldr	r3, [pc, #448]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003406:	400b      	ands	r3, r1
 8003408:	496d      	ldr	r1, [pc, #436]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	610b      	str	r3, [r1, #16]
 800340e:	e005      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003410:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	4a6a      	ldr	r2, [pc, #424]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003416:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800341a:	6113      	str	r3, [r2, #16]
 800341c:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800341e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342a:	4965      	ldr	r1, [pc, #404]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	670b      	str	r3, [r1, #112]	; 0x70
 8003430:	e004      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	75bb      	strb	r3, [r7, #22]
 8003436:	e001      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d07e      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344c:	2b28      	cmp	r3, #40	; 0x28
 800344e:	d867      	bhi.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	08003527 	.word	0x08003527
 800345c:	08003521 	.word	0x08003521
 8003460:	08003521 	.word	0x08003521
 8003464:	08003521 	.word	0x08003521
 8003468:	08003521 	.word	0x08003521
 800346c:	08003521 	.word	0x08003521
 8003470:	08003521 	.word	0x08003521
 8003474:	08003521 	.word	0x08003521
 8003478:	080034fd 	.word	0x080034fd
 800347c:	08003521 	.word	0x08003521
 8003480:	08003521 	.word	0x08003521
 8003484:	08003521 	.word	0x08003521
 8003488:	08003521 	.word	0x08003521
 800348c:	08003521 	.word	0x08003521
 8003490:	08003521 	.word	0x08003521
 8003494:	08003521 	.word	0x08003521
 8003498:	0800350f 	.word	0x0800350f
 800349c:	08003521 	.word	0x08003521
 80034a0:	08003521 	.word	0x08003521
 80034a4:	08003521 	.word	0x08003521
 80034a8:	08003521 	.word	0x08003521
 80034ac:	08003521 	.word	0x08003521
 80034b0:	08003521 	.word	0x08003521
 80034b4:	08003521 	.word	0x08003521
 80034b8:	08003527 	.word	0x08003527
 80034bc:	08003521 	.word	0x08003521
 80034c0:	08003521 	.word	0x08003521
 80034c4:	08003521 	.word	0x08003521
 80034c8:	08003521 	.word	0x08003521
 80034cc:	08003521 	.word	0x08003521
 80034d0:	08003521 	.word	0x08003521
 80034d4:	08003521 	.word	0x08003521
 80034d8:	08003527 	.word	0x08003527
 80034dc:	08003521 	.word	0x08003521
 80034e0:	08003521 	.word	0x08003521
 80034e4:	08003521 	.word	0x08003521
 80034e8:	08003521 	.word	0x08003521
 80034ec:	08003521 	.word	0x08003521
 80034f0:	08003521 	.word	0x08003521
 80034f4:	08003521 	.word	0x08003521
 80034f8:	08003527 	.word	0x08003527
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	2101      	movs	r1, #1
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fb36 	bl	8003b74 <RCCEx_PLL2_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800350c:	e00c      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3324      	adds	r3, #36	; 0x24
 8003512:	2101      	movs	r1, #1
 8003514:	4618      	mov	r0, r3
 8003516:	f000 fbdf 	bl	8003cd8 <RCCEx_PLL3_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800351e:	e003      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	75fb      	strb	r3, [r7, #23]
      break;
 8003524:	e000      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353a:	4921      	ldr	r1, [pc, #132]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	654b      	str	r3, [r1, #84]	; 0x54
 8003540:	e001      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d03e      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003556:	2b05      	cmp	r3, #5
 8003558:	d820      	bhi.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800355a:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800355c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003560:	080035a3 	.word	0x080035a3
 8003564:	08003579 	.word	0x08003579
 8003568:	0800358b 	.word	0x0800358b
 800356c:	080035a3 	.word	0x080035a3
 8003570:	080035a3 	.word	0x080035a3
 8003574:	080035a3 	.word	0x080035a3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	2101      	movs	r1, #1
 800357e:	4618      	mov	r0, r3
 8003580:	f000 faf8 	bl	8003b74 <RCCEx_PLL2_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003588:	e00c      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3324      	adds	r3, #36	; 0x24
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fba1 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800359a:	e003      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
      break;
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80035a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d110      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ae:	f023 0207 	bic.w	r2, r3, #7
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b6:	4902      	ldr	r1, [pc, #8]	; (80035c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	654b      	str	r3, [r1, #84]	; 0x54
 80035bc:	e008      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80035be:	bf00      	nop
 80035c0:	58024400 	.word	0x58024400
 80035c4:	58024800 	.word	0x58024800
 80035c8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
 80035ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d039      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e2:	2b05      	cmp	r3, #5
 80035e4:	d820      	bhi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80035e6:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80035e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ec:	0800362f 	.word	0x0800362f
 80035f0:	08003605 	.word	0x08003605
 80035f4:	08003617 	.word	0x08003617
 80035f8:	0800362f 	.word	0x0800362f
 80035fc:	0800362f 	.word	0x0800362f
 8003600:	0800362f 	.word	0x0800362f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2101      	movs	r1, #1
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fab2 	bl	8003b74 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003614:	e00c      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3324      	adds	r3, #36	; 0x24
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fb5b 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003626:	e003      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	75fb      	strb	r3, [r7, #23]
      break;
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800362e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003630:	7dfb      	ldrb	r3, [r7, #23]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003636:	4bb7      	ldr	r3, [pc, #732]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f023 0207 	bic.w	r2, r3, #7
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	49b3      	ldr	r1, [pc, #716]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003646:	4313      	orrs	r3, r2
 8003648:	658b      	str	r3, [r1, #88]	; 0x58
 800364a:	e001      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364c:	7dfb      	ldrb	r3, [r7, #23]
 800364e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d04b      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003666:	d02e      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366c:	d828      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d02a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003678:	d822      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800367a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800367e:	d026      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003680:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003684:	d81c      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368a:	d010      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800368c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003690:	d816      	bhi.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01d      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800369a:	d111      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3304      	adds	r3, #4
 80036a0:	2100      	movs	r1, #0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 fa66 	bl	8003b74 <RCCEx_PLL2_Config>
 80036a8:	4603      	mov	r3, r0
 80036aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036ac:	e012      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3324      	adds	r3, #36	; 0x24
 80036b2:	2102      	movs	r1, #2
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 fb0f 	bl	8003cd8 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036be:	e009      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	75fb      	strb	r3, [r7, #23]
      break;
 80036c4:	e006      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80036c6:	bf00      	nop
 80036c8:	e004      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80036ca:	bf00      	nop
 80036cc:	e002      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80036ce:	bf00      	nop
 80036d0:	e000      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80036d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036da:	4b8e      	ldr	r3, [pc, #568]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036e8:	498a      	ldr	r1, [pc, #552]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	654b      	str	r3, [r1, #84]	; 0x54
 80036ee:	e001      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f0:	7dfb      	ldrb	r3, [r7, #23]
 80036f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d04b      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003706:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800370a:	d02e      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800370c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003710:	d828      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003716:	d02a      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800371c:	d822      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800371e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003722:	d026      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003728:	d81c      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800372a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372e:	d010      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003734:	d816      	bhi.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01d      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d111      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	2100      	movs	r1, #0
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fa14 	bl	8003b74 <RCCEx_PLL2_Config>
 800374c:	4603      	mov	r3, r0
 800374e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003750:	e012      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3324      	adds	r3, #36	; 0x24
 8003756:	2102      	movs	r1, #2
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fabd 	bl	8003cd8 <RCCEx_PLL3_Config>
 800375e:	4603      	mov	r3, r0
 8003760:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003762:	e009      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	75fb      	strb	r3, [r7, #23]
      break;
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800376a:	bf00      	nop
 800376c:	e004      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003778:	7dfb      	ldrb	r3, [r7, #23]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800377e:	4b65      	ldr	r3, [pc, #404]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800378c:	4961      	ldr	r1, [pc, #388]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800378e:	4313      	orrs	r3, r2
 8003790:	658b      	str	r3, [r1, #88]	; 0x58
 8003792:	e001      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	7dfb      	ldrb	r3, [r7, #23]
 8003796:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d04b      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037aa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037ae:	d02e      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80037b0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037b4:	d828      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d02a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80037bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c0:	d822      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037c2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037c6:	d026      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80037c8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037cc:	d81c      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d2:	d010      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80037d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037d8:	d816      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01d      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	d111      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	2100      	movs	r1, #0
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f9c2 	bl	8003b74 <RCCEx_PLL2_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80037f4:	e012      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3324      	adds	r3, #36	; 0x24
 80037fa:	2102      	movs	r1, #2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fa6b 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003802:	4603      	mov	r3, r0
 8003804:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003806:	e009      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	75fb      	strb	r3, [r7, #23]
      break;
 800380c:	e006      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800381a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10a      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003822:	4b3c      	ldr	r3, [pc, #240]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003830:	4938      	ldr	r1, [pc, #224]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003832:	4313      	orrs	r3, r2
 8003834:	658b      	str	r3, [r1, #88]	; 0x58
 8003836:	e001      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003852:	d10a      	bne.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3324      	adds	r3, #36	; 0x24
 8003858:	2102      	movs	r1, #2
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fa3c 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003878:	4926      	ldr	r1, [pc, #152]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800387a:	4313      	orrs	r3, r2
 800387c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d01a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003894:	d10a      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3324      	adds	r3, #36	; 0x24
 800389a:	2102      	movs	r1, #2
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fa1b 	bl	8003cd8 <RCCEx_PLL3_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038ac:	4b19      	ldr	r3, [pc, #100]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038ba:	4916      	ldr	r1, [pc, #88]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d036      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038d6:	d01f      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80038d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038dc:	d817      	bhi.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80038e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e6:	d009      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80038e8:	e011      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 f93f 	bl	8003b74 <RCCEx_PLL2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80038fa:	e00e      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3324      	adds	r3, #36	; 0x24
 8003900:	2102      	movs	r1, #2
 8003902:	4618      	mov	r0, r3
 8003904:	f000 f9e8 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800390c:	e005      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
      break;
 8003912:	e002      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003914:	58024400 	.word	0x58024400
      break;
 8003918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800391a:	7dfb      	ldrb	r3, [r7, #23]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10a      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003920:	4b93      	ldr	r3, [pc, #588]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800392e:	4990      	ldr	r1, [pc, #576]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003930:	4313      	orrs	r3, r2
 8003932:	658b      	str	r3, [r1, #88]	; 0x58
 8003934:	e001      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d033      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800394c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003950:	d01c      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003952:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003956:	d816      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003958:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800395c:	d003      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800395e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003962:	d007      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003964:	e00f      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003966:	4b82      	ldr	r3, [pc, #520]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	4a81      	ldr	r2, [pc, #516]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800396c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003970:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003972:	e00c      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3324      	adds	r3, #36	; 0x24
 8003978:	2101      	movs	r1, #1
 800397a:	4618      	mov	r0, r3
 800397c:	f000 f9ac 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003984:	e003      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      break;
 800398a:	e000      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800398c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003994:	4b76      	ldr	r3, [pc, #472]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a2:	4973      	ldr	r1, [pc, #460]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	654b      	str	r3, [r1, #84]	; 0x54
 80039a8:	e001      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039aa:	7dfb      	ldrb	r3, [r7, #23]
 80039ac:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d029      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d003      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80039c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c6:	d007      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80039c8:	e00f      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039ca:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	4a68      	ldr	r2, [pc, #416]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80039d6:	e00b      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3304      	adds	r3, #4
 80039dc:	2102      	movs	r1, #2
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f8c8 	bl	8003b74 <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80039e8:	e002      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75fb      	strb	r3, [r7, #23]
      break;
 80039ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039f6:	4b5e      	ldr	r3, [pc, #376]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	495b      	ldr	r1, [pc, #364]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a08:	e001      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3324      	adds	r3, #36	; 0x24
 8003a1e:	2102      	movs	r1, #2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 f959 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d030      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a44:	d017      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003a46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4a:	d811      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a50:	d013      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	d80b      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d010      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a60:	d106      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a62:	4b43      	ldr	r3, [pc, #268]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	4a42      	ldr	r2, [pc, #264]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003a6e:	e007      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
      break;
 8003a74:	e004      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d109      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a86:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a92:	4937      	ldr	r1, [pc, #220]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	654b      	str	r3, [r1, #84]	; 0x54
 8003a98:	e001      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	7dfb      	ldrb	r3, [r7, #23]
 8003a9c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003aaa:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	492e      	ldr	r1, [pc, #184]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d009      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ac8:	4b29      	ldr	r3, [pc, #164]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ad6:	4926      	ldr	r1, [pc, #152]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ae8:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af4:	491e      	ldr	r1, [pc, #120]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00d      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b06:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b10:	6113      	str	r3, [r2, #16]
 8003b12:	4b17      	ldr	r3, [pc, #92]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b1c:	4914      	ldr	r1, [pc, #80]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da08      	bge.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b2a:	4b11      	ldr	r3, [pc, #68]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b36:	490e      	ldr	r1, [pc, #56]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b56:	4906      	ldr	r1, [pc, #24]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003b5c:	7dbb      	ldrb	r3, [r7, #22]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003b62:	2300      	movs	r3, #0
 8003b64:	e000      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3718      	adds	r7, #24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	58024400 	.word	0x58024400

08003b74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b82:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d101      	bne.n	8003b92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e099      	b.n	8003cc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b92:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a4e      	ldr	r2, [pc, #312]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003b98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9e:	f7fd f843 	bl	8000c28 <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ba6:	f7fd f83f 	bl	8000c28 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e086      	b.n	8003cc6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bb8:	4b45      	ldr	r3, [pc, #276]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bc4:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	031b      	lsls	r3, r3, #12
 8003bd2:	493f      	ldr	r1, [pc, #252]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	628b      	str	r3, [r1, #40]	; 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	025b      	lsls	r3, r3, #9
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c08:	4931      	ldr	r1, [pc, #196]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	492d      	ldr	r1, [pc, #180]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f023 0220 	bic.w	r2, r3, #32
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	4928      	ldr	r1, [pc, #160]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c32:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c38:	f023 0310 	bic.w	r3, r3, #16
 8003c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <RCCEx_PLL2_Config+0x160>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	69d2      	ldr	r2, [r2, #28]
 8003c4a:	00d2      	lsls	r2, r2, #3
 8003c4c:	4920      	ldr	r1, [pc, #128]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c52:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c58:	f043 0310 	orr.w	r3, r3, #16
 8003c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c64:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c70:	e00f      	b.n	8003c92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c84:	e005      	b.n	8003c92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9e:	f7fc ffc3 	bl	8000c28 <HAL_GetTick>
 8003ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ca6:	f7fc ffbf 	bl	8000c28 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e006      	b.n	8003cc6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	ffff0007 	.word	0xffff0007

08003cd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ce6:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d101      	bne.n	8003cf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e099      	b.n	8003e2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cf6:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4e      	ldr	r2, [pc, #312]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d02:	f7fc ff91 	bl	8000c28 <HAL_GetTick>
 8003d06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d08:	e008      	b.n	8003d1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d0a:	f7fc ff8d 	bl	8000c28 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e086      	b.n	8003e2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d1c:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d28:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	051b      	lsls	r3, r3, #20
 8003d36:	493f      	ldr	r1, [pc, #252]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	025b      	lsls	r3, r3, #9
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d6c:	4931      	ldr	r1, [pc, #196]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	492d      	ldr	r1, [pc, #180]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4928      	ldr	r1, [pc, #160]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <RCCEx_PLL3_Config+0x160>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	69d2      	ldr	r2, [r2, #28]
 8003dae:	00d2      	lsls	r2, r2, #3
 8003db0:	4920      	ldr	r1, [pc, #128]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dd4:	e00f      	b.n	8003df6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ddc:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003de2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de8:	e005      	b.n	8003df6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e02:	f7fc ff11 	bl	8000c28 <HAL_GetTick>
 8003e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e08:	e008      	b.n	8003e1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e0a:	f7fc ff0d 	bl	8000c28 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e006      	b.n	8003e2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	58024400 	.word	0x58024400
 8003e38:	ffff0007 	.word	0xffff0007

08003e3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	f107 001c 	add.w	r0, r7, #28
 8003e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d120      	bne.n	8003e96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	4b2a      	ldr	r3, [pc, #168]	; (8003f10 <USB_CoreInit+0xd4>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d105      	bne.n	8003e8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 faa8 	bl	80043e0 <USB_CoreReset>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
 8003e94:	e01a      	b.n	8003ecc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa9c 	bl	80043e0 <USB_CoreReset>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	639a      	str	r2, [r3, #56]	; 0x38
 8003ebe:	e005      	b.n	8003ecc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d116      	bne.n	8003f00 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <USB_CoreInit+0xd8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f043 0206 	orr.w	r2, r3, #6
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3710      	adds	r7, #16
 8003f06:	46bd      	mov	sp, r7
 8003f08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f0c:	b004      	add	sp, #16
 8003f0e:	4770      	bx	lr
 8003f10:	ffbdffbf 	.word	0xffbdffbf
 8003f14:	03ee0000 	.word	0x03ee0000

08003f18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f023 0201 	bic.w	r2, r3, #1
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d115      	bne.n	8003f88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f68:	2001      	movs	r0, #1
 8003f6a:	f7fc fe69 	bl	8000c40 <HAL_Delay>
      ms++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	3301      	adds	r3, #1
 8003f72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fa25 	bl	80043c4 <USB_GetMode>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d01e      	beq.n	8003fbe <USB_SetCurrentMode+0x84>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b31      	cmp	r3, #49	; 0x31
 8003f84:	d9f0      	bls.n	8003f68 <USB_SetCurrentMode+0x2e>
 8003f86:	e01a      	b.n	8003fbe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d115      	bne.n	8003fba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f7fc fe50 	bl	8000c40 <HAL_Delay>
      ms++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa0c 	bl	80043c4 <USB_GetMode>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <USB_SetCurrentMode+0x84>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b31      	cmp	r3, #49	; 0x31
 8003fb6:	d9f0      	bls.n	8003f9a <USB_SetCurrentMode+0x60>
 8003fb8:	e001      	b.n	8003fbe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e005      	b.n	8003fca <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b32      	cmp	r3, #50	; 0x32
 8003fc2:	d101      	bne.n	8003fc8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b086      	sub	sp, #24
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003fee:	2300      	movs	r3, #0
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e009      	b.n	8004008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	3340      	adds	r3, #64	; 0x40
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	2200      	movs	r2, #0
 8004000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	3301      	adds	r3, #1
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	2b0e      	cmp	r3, #14
 800400c:	d9f2      	bls.n	8003ff4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800400e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d11c      	bne.n	800404e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004022:	f043 0302 	orr.w	r3, r3, #2
 8004026:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	e005      	b.n	800405a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004060:	461a      	mov	r2, r3
 8004062:	2300      	movs	r3, #0
 8004064:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406c:	4619      	mov	r1, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004074:	461a      	mov	r2, r3
 8004076:	680b      	ldr	r3, [r1, #0]
 8004078:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800407c:	2b01      	cmp	r3, #1
 800407e:	d10c      	bne.n	800409a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d104      	bne.n	8004090 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004086:	2100      	movs	r1, #0
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f961 	bl	8004350 <USB_SetDevSpeed>
 800408e:	e008      	b.n	80040a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004090:	2101      	movs	r1, #1
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f95c 	bl	8004350 <USB_SetDevSpeed>
 8004098:	e003      	b.n	80040a2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800409a:	2103      	movs	r1, #3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f957 	bl	8004350 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040a2:	2110      	movs	r1, #16
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8f3 	bl	8004290 <USB_FlushTxFifo>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f91d 	bl	80042f4 <USB_FlushRxFifo>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ca:	461a      	mov	r2, r3
 80040cc:	2300      	movs	r3, #0
 80040ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d6:	461a      	mov	r2, r3
 80040d8:	2300      	movs	r3, #0
 80040da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040e8:	2300      	movs	r3, #0
 80040ea:	613b      	str	r3, [r7, #16]
 80040ec:	e043      	b.n	8004176 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	015a      	lsls	r2, r3, #5
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4413      	add	r3, r2
 80040f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004104:	d118      	bne.n	8004138 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10a      	bne.n	8004122 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	461a      	mov	r2, r3
 800411a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e013      	b.n	800414a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	015a      	lsls	r2, r3, #5
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4413      	add	r3, r2
 800412a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412e:	461a      	mov	r2, r3
 8004130:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004134:	6013      	str	r3, [r2, #0]
 8004136:	e008      	b.n	800414a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004144:	461a      	mov	r2, r3
 8004146:	2300      	movs	r3, #0
 8004148:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	015a      	lsls	r2, r3, #5
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4413      	add	r3, r2
 8004152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004156:	461a      	mov	r2, r3
 8004158:	2300      	movs	r3, #0
 800415a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4413      	add	r3, r2
 8004164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004168:	461a      	mov	r2, r3
 800416a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800416e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	3301      	adds	r3, #1
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	429a      	cmp	r2, r3
 800417c:	d3b7      	bcc.n	80040ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800417e:	2300      	movs	r3, #0
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e043      	b.n	800420c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800419a:	d118      	bne.n	80041ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	461a      	mov	r2, r3
 80041b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e013      	b.n	80041e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c4:	461a      	mov	r2, r3
 80041c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	e008      	b.n	80041e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	461a      	mov	r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	461a      	mov	r2, r3
 80041ee:	2300      	movs	r3, #0
 80041f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004204:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	3301      	adds	r3, #1
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d3b7      	bcc.n	8004184 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004222:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004226:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004234:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f043 0210 	orr.w	r2, r3, #16
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	699a      	ldr	r2, [r3, #24]
 800424c:	4b0e      	ldr	r3, [pc, #56]	; (8004288 <USB_DevInit+0x2b4>)
 800424e:	4313      	orrs	r3, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f043 0208 	orr.w	r2, r3, #8
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004268:	2b01      	cmp	r3, #1
 800426a:	d105      	bne.n	8004278 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <USB_DevInit+0x2b8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004278:	7dfb      	ldrb	r3, [r7, #23]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004284:	b004      	add	sp, #16
 8004286:	4770      	bx	lr
 8004288:	803c3800 	.word	0x803c3800
 800428c:	40000004 	.word	0x40000004

08004290 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	3301      	adds	r3, #1
 80042a2:	60fb      	str	r3, [r7, #12]
 80042a4:	4a12      	ldr	r2, [pc, #72]	; (80042f0 <USB_FlushTxFifo+0x60>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e01a      	b.n	80042e4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	daf3      	bge.n	800429e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	f043 0220 	orr.w	r2, r3, #32
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	4a08      	ldr	r2, [pc, #32]	; (80042f0 <USB_FlushTxFifo+0x60>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d901      	bls.n	80042d6 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e006      	b.n	80042e4 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b20      	cmp	r3, #32
 80042e0:	d0f1      	beq.n	80042c6 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	00030d40 	.word	0x00030d40

080042f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	3301      	adds	r3, #1
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	4a11      	ldr	r2, [pc, #68]	; (800434c <USB_FlushRxFifo+0x58>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e017      	b.n	8004340 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	daf3      	bge.n	8004300 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2210      	movs	r2, #16
 8004320:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3301      	adds	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	4a08      	ldr	r2, [pc, #32]	; (800434c <USB_FlushRxFifo+0x58>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e006      	b.n	8004340 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b10      	cmp	r3, #16
 800433c:	d0f1      	beq.n	8004322 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	00030d40 	.word	0x00030d40

08004350 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	460b      	mov	r3, r1
 800435a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	68f9      	ldr	r1, [r7, #12]
 800436c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3714      	adds	r7, #20
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004382:	b480      	push	{r7}
 8004384:	b085      	sub	sp, #20
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800439c:	f023 0303 	bic.w	r3, r3, #3
 80043a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b0:	f043 0302 	orr.w	r3, r3, #2
 80043b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0301 	and.w	r3, r3, #1
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3301      	adds	r3, #1
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	4a13      	ldr	r2, [pc, #76]	; (8004440 <USB_CoreReset+0x60>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e01a      	b.n	8004432 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	daf3      	bge.n	80043ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f043 0201 	orr.w	r2, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3301      	adds	r3, #1
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <USB_CoreReset+0x60>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d901      	bls.n	8004424 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e006      	b.n	8004432 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b01      	cmp	r3, #1
 800442e:	d0f1      	beq.n	8004414 <USB_CoreReset+0x34>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	00030d40 	.word	0x00030d40

08004444 <__libc_init_array>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	4d0d      	ldr	r5, [pc, #52]	; (800447c <__libc_init_array+0x38>)
 8004448:	4c0d      	ldr	r4, [pc, #52]	; (8004480 <__libc_init_array+0x3c>)
 800444a:	1b64      	subs	r4, r4, r5
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	2600      	movs	r6, #0
 8004450:	42a6      	cmp	r6, r4
 8004452:	d109      	bne.n	8004468 <__libc_init_array+0x24>
 8004454:	4d0b      	ldr	r5, [pc, #44]	; (8004484 <__libc_init_array+0x40>)
 8004456:	4c0c      	ldr	r4, [pc, #48]	; (8004488 <__libc_init_array+0x44>)
 8004458:	f000 f820 	bl	800449c <_init>
 800445c:	1b64      	subs	r4, r4, r5
 800445e:	10a4      	asrs	r4, r4, #2
 8004460:	2600      	movs	r6, #0
 8004462:	42a6      	cmp	r6, r4
 8004464:	d105      	bne.n	8004472 <__libc_init_array+0x2e>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	f855 3b04 	ldr.w	r3, [r5], #4
 800446c:	4798      	blx	r3
 800446e:	3601      	adds	r6, #1
 8004470:	e7ee      	b.n	8004450 <__libc_init_array+0xc>
 8004472:	f855 3b04 	ldr.w	r3, [r5], #4
 8004476:	4798      	blx	r3
 8004478:	3601      	adds	r6, #1
 800447a:	e7f2      	b.n	8004462 <__libc_init_array+0x1e>
 800447c:	080044c4 	.word	0x080044c4
 8004480:	080044c4 	.word	0x080044c4
 8004484:	080044c4 	.word	0x080044c4
 8004488:	080044c8 	.word	0x080044c8

0800448c <memset>:
 800448c:	4402      	add	r2, r0
 800448e:	4603      	mov	r3, r0
 8004490:	4293      	cmp	r3, r2
 8004492:	d100      	bne.n	8004496 <memset+0xa>
 8004494:	4770      	bx	lr
 8004496:	f803 1b01 	strb.w	r1, [r3], #1
 800449a:	e7f9      	b.n	8004490 <memset+0x4>

0800449c <_init>:
 800449c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449e:	bf00      	nop
 80044a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044a2:	bc08      	pop	{r3}
 80044a4:	469e      	mov	lr, r3
 80044a6:	4770      	bx	lr

080044a8 <_fini>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	bf00      	nop
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr
