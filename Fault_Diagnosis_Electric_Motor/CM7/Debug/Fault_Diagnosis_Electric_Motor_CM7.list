
Fault_Diagnosis_Electric_Motor_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041e4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800448c  0800448c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800448c  0800448c  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800448c  0800448c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080044a4  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08004504  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000057c  240000d0  08004564  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400064c  08004564  0002064c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c89a  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002de2  00000000  00000000  0003c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d30  00000000  00000000  0003f780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000c38  00000000  00000000  000404b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003a157  00000000  00000000  000410e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000fbe9  00000000  00000000  0007b23f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00180727  00000000  00000000  0008ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  0020b54f  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00003690  00000000  00000000  0020b5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004464 	.word	0x08004464

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08004464 	.word	0x08004464

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/

//Modify for use only M4 core
#ifdef DEBUG
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET));
 8000412:	bf00      	nop
 8000414:	4b1e      	ldr	r3, [pc, #120]	; (8000490 <main+0x84>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d1f9      	bne.n	8000414 <main+0x8>

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000420:	f000 fb60 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000424:	f000 f836 	bl	8000494 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000428:	f000 f8b8 	bl	800059c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800042c:	4b18      	ldr	r3, [pc, #96]	; (8000490 <main+0x84>)
 800042e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000432:	4a17      	ldr	r2, [pc, #92]	; (8000490 <main+0x84>)
 8000434:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000438:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <main+0x84>)
 800043e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800044a:	2000      	movs	r0, #0
 800044c:	f001 faca 	bl	80019e4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000450:	2100      	movs	r1, #0
 8000452:	2000      	movs	r0, #0
 8000454:	f001 fae0 	bl	8001a18 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800045c:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800045e:	bf00      	nop
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <main+0x84>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000468:	2b00      	cmp	r3, #0
 800046a:	d104      	bne.n	8000476 <main+0x6a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	1e5a      	subs	r2, r3, #1
 8000470:	607a      	str	r2, [r7, #4]
 8000472:	2b00      	cmp	r3, #0
 8000474:	dcf4      	bgt.n	8000460 <main+0x54>
if ( timeout < 0 )
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	da01      	bge.n	8000480 <main+0x74>
{
Error_Handler();
 800047c:	f000 f996 	bl	80007ac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000480:	f000 f93e 	bl	8000700 <MX_GPIO_Init>
  MX_ETH_Init();
 8000484:	f000 f8be 	bl	8000604 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000488:	f000 f908 	bl	800069c <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048c:	e7fe      	b.n	800048c <main+0x80>
 800048e:	bf00      	nop
 8000490:	58024400 	.word	0x58024400

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b09c      	sub	sp, #112	; 0x70
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049e:	224c      	movs	r2, #76	; 0x4c
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f003 ffd6 	bl	8004454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2220      	movs	r2, #32
 80004ac:	2100      	movs	r1, #0
 80004ae:	4618      	mov	r0, r3
 80004b0:	f003 ffd0 	bl	8004454 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80004b4:	2004      	movs	r0, #4
 80004b6:	f001 fc0b 	bl	8001cd0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80004ba:	2300      	movs	r3, #0
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	4b34      	ldr	r3, [pc, #208]	; (8000590 <SystemClock_Config+0xfc>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a33      	ldr	r2, [pc, #204]	; (8000590 <SystemClock_Config+0xfc>)
 80004c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b31      	ldr	r3, [pc, #196]	; (8000590 <SystemClock_Config+0xfc>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	4b2f      	ldr	r3, [pc, #188]	; (8000594 <SystemClock_Config+0x100>)
 80004d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d8:	4a2e      	ldr	r2, [pc, #184]	; (8000594 <SystemClock_Config+0x100>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004e0:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <SystemClock_Config+0x100>)
 80004e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	603b      	str	r3, [r7, #0]
 80004ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004ec:	bf00      	nop
 80004ee:	4b28      	ldr	r3, [pc, #160]	; (8000590 <SystemClock_Config+0xfc>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004fa:	d1f8      	bne.n	80004ee <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80004fc:	4b26      	ldr	r3, [pc, #152]	; (8000598 <SystemClock_Config+0x104>)
 80004fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000500:	f023 0303 	bic.w	r3, r3, #3
 8000504:	4a24      	ldr	r2, [pc, #144]	; (8000598 <SystemClock_Config+0x104>)
 8000506:	f043 0302 	orr.w	r3, r3, #2
 800050a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800050c:	2301      	movs	r3, #1
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000514:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000516:	2302      	movs	r3, #2
 8000518:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051a:	2302      	movs	r3, #2
 800051c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800051e:	2301      	movs	r3, #1
 8000520:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000522:	2378      	movs	r3, #120	; 0x78
 8000524:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000526:	2302      	movs	r3, #2
 8000528:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800052a:	2302      	movs	r3, #2
 800052c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 1;
 800052e:	2301      	movs	r3, #1
 8000530:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000532:	230c      	movs	r3, #12
 8000534:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000536:	2300      	movs	r3, #0
 8000538:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000542:	4618      	mov	r0, r3
 8000544:	f001 fc2e 	bl	8001da4 <HAL_RCC_OscConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800054e:	f000 f92d 	bl	80007ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000552:	233f      	movs	r3, #63	; 0x3f
 8000554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000556:	2303      	movs	r3, #3
 8000558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800055e:	2308      	movs	r3, #8
 8000560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000562:	2340      	movs	r3, #64	; 0x40
 8000564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000566:	2340      	movs	r3, #64	; 0x40
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800056a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800056e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000570:	2340      	movs	r3, #64	; 0x40
 8000572:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2104      	movs	r1, #4
 8000578:	4618      	mov	r0, r3
 800057a:	f002 f83f 	bl	80025fc <HAL_RCC_ClockConfig>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000584:	f000 f912 	bl	80007ac <Error_Handler>
  }
}
 8000588:	bf00      	nop
 800058a:	3770      	adds	r7, #112	; 0x70
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	58024800 	.word	0x58024800
 8000594:	58000400 	.word	0x58000400
 8000598:	58024400 	.word	0x58024400

0800059c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0b0      	sub	sp, #192	; 0xc0
 80005a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	22bc      	movs	r2, #188	; 0xbc
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 ff53 	bl	8004454 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI1;
 80005ae:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80005b2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 18;
 80005b8:	2312      	movs	r3, #18
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80005bc:	2302      	movs	r3, #2
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80005c0:	2303      	movs	r3, #3
 80005c2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80005c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80005ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 80005d4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80005d8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80005da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005de:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80005e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80005e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fb66 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 80005f6:	f000 f8d9 	bl	80007ac <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	37c0      	adds	r7, #192	; 0xc0
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ETH_Init+0x80>)
 800060a:	4a1f      	ldr	r2, [pc, #124]	; (8000688 <MX_ETH_Init+0x84>)
 800060c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_ETH_Init+0x88>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ETH_Init+0x88>)
 8000616:	2280      	movs	r2, #128	; 0x80
 8000618:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_ETH_Init+0x88>)
 800061c:	22e1      	movs	r2, #225	; 0xe1
 800061e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_ETH_Init+0x88>)
 8000622:	2200      	movs	r2, #0
 8000624:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_ETH_Init+0x88>)
 8000628:	2200      	movs	r2, #0
 800062a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800062c:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_ETH_Init+0x88>)
 800062e:	2200      	movs	r2, #0
 8000630:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ETH_Init+0x80>)
 8000634:	4a15      	ldr	r2, [pc, #84]	; (800068c <MX_ETH_Init+0x88>)
 8000636:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ETH_Init+0x80>)
 800063a:	2201      	movs	r2, #1
 800063c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ETH_Init+0x80>)
 8000640:	4a13      	ldr	r2, [pc, #76]	; (8000690 <MX_ETH_Init+0x8c>)
 8000642:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ETH_Init+0x80>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_ETH_Init+0x90>)
 8000648:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_ETH_Init+0x80>)
 800064c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000650:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000652:	480c      	ldr	r0, [pc, #48]	; (8000684 <MX_ETH_Init+0x80>)
 8000654:	f000 fc00 	bl	8000e58 <HAL_ETH_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800065e:	f000 f8a5 	bl	80007ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <MX_ETH_Init+0x94>)
 8000668:	f003 fef4 	bl	8004454 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_ETH_Init+0x94>)
 800066e:	2221      	movs	r2, #33	; 0x21
 8000670:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_ETH_Init+0x94>)
 8000674:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000678:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_ETH_Init+0x94>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2400058c 	.word	0x2400058c
 8000688:	40028000 	.word	0x40028000
 800068c:	240000ec 	.word	0x240000ec
 8000690:	24000070 	.word	0x24000070
 8000694:	24000010 	.word	0x24000010
 8000698:	24000614 	.word	0x24000614

0800069c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <MX_USB_OTG_FS_PCD_Init+0x60>)
 80006a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006a8:	2209      	movs	r2, #9
 80006aa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006ae:	2202      	movs	r2, #2
 80006b0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006ba:	2202      	movs	r2, #2
 80006bc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80006e4:	f001 f9ac 	bl	8001a40 <HAL_PCD_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80006ee:	f000 f85d 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24000184 	.word	0x24000184
 80006fc:	40080000 	.word	0x40080000

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b087      	sub	sp, #28
 8000704:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070c:	4a26      	ldr	r2, [pc, #152]	; (80007a8 <MX_GPIO_Init+0xa8>)
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000716:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000724:	4b20      	ldr	r3, [pc, #128]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xa8>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000734:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <MX_GPIO_Init+0xa8>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000768:	f043 0302 	orr.w	r3, r3, #2
 800076c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000770:	4b0d      	ldr	r3, [pc, #52]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000784:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0xa8>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

}
 800079c:	bf00      	nop
 800079e:	371c      	adds	r7, #28
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	58024400 	.word	0x58024400

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <HAL_MspInit+0x30>)
 80007c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007c4:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x30>)
 80007c6:	f043 0302 	orr.w	r3, r3, #2
 80007ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x30>)
 80007d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007dc:	bf00      	nop
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	58024400 	.word	0x58024400

080007ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08e      	sub	sp, #56	; 0x38
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a59      	ldr	r2, [pc, #356]	; (8000970 <HAL_ETH_MspInit+0x184>)
 800080a:	4293      	cmp	r3, r2
 800080c:	f040 80ab 	bne.w	8000966 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000810:	4b58      	ldr	r3, [pc, #352]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000816:	4a57      	ldr	r2, [pc, #348]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800081c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000820:	4b54      	ldr	r3, [pc, #336]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000822:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082a:	623b      	str	r3, [r7, #32]
 800082c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800082e:	4b51      	ldr	r3, [pc, #324]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000834:	4a4f      	ldr	r2, [pc, #316]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800083a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800083e:	4b4d      	ldr	r3, [pc, #308]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000848:	61fb      	str	r3, [r7, #28]
 800084a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800084c:	4b49      	ldr	r3, [pc, #292]	; (8000974 <HAL_ETH_MspInit+0x188>)
 800084e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000852:	4a48      	ldr	r2, [pc, #288]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000858:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800085c:	4b45      	ldr	r3, [pc, #276]	; (8000974 <HAL_ETH_MspInit+0x188>)
 800085e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b42      	ldr	r3, [pc, #264]	; (8000974 <HAL_ETH_MspInit+0x188>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000870:	4a40      	ldr	r2, [pc, #256]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800087a:	4b3e      	ldr	r3, [pc, #248]	; (8000974 <HAL_ETH_MspInit+0x188>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	617b      	str	r3, [r7, #20]
 8000886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <HAL_ETH_MspInit+0x188>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800088e:	4a39      	ldr	r2, [pc, #228]	; (8000974 <HAL_ETH_MspInit+0x188>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000898:	4b36      	ldr	r3, [pc, #216]	; (8000974 <HAL_ETH_MspInit+0x188>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b33      	ldr	r3, [pc, #204]	; (8000974 <HAL_ETH_MspInit+0x188>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ac:	4a31      	ldr	r2, [pc, #196]	; (8000974 <HAL_ETH_MspInit+0x188>)
 80008ae:	f043 0302 	orr.w	r3, r3, #2
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <HAL_ETH_MspInit+0x188>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008bc:	f003 0302 	and.w	r3, r3, #2
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <HAL_ETH_MspInit+0x188>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ca:	4a2a      	ldr	r2, [pc, #168]	; (8000974 <HAL_ETH_MspInit+0x188>)
 80008cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <HAL_ETH_MspInit+0x188>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80008e2:	2332      	movs	r3, #50	; 0x32
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008f2:	230b      	movs	r3, #11
 80008f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fa:	4619      	mov	r1, r3
 80008fc:	481e      	ldr	r0, [pc, #120]	; (8000978 <HAL_ETH_MspInit+0x18c>)
 80008fe:	f000 fec1 	bl	8001684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000902:	2386      	movs	r3, #134	; 0x86
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000912:	230b      	movs	r3, #11
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	4619      	mov	r1, r3
 800091c:	4817      	ldr	r0, [pc, #92]	; (800097c <HAL_ETH_MspInit+0x190>)
 800091e:	f000 feb1 	bl	8001684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000934:	230b      	movs	r3, #11
 8000936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093c:	4619      	mov	r1, r3
 800093e:	4810      	ldr	r0, [pc, #64]	; (8000980 <HAL_ETH_MspInit+0x194>)
 8000940:	f000 fea0 	bl	8001684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000944:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000956:	230b      	movs	r3, #11
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	4808      	ldr	r0, [pc, #32]	; (8000984 <HAL_ETH_MspInit+0x198>)
 8000962:	f000 fe8f 	bl	8001684 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40028000 	.word	0x40028000
 8000974:	58024400 	.word	0x58024400
 8000978:	58020800 	.word	0x58020800
 800097c:	58020000 	.word	0x58020000
 8000980:	58020400 	.word	0x58020400
 8000984:	58021800 	.word	0x58021800

08000988 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	; 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <HAL_PCD_MspInit+0xa8>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d13d      	bne.n	8000a26 <HAL_PCD_MspInit+0x9e>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80009aa:	f001 f9eb 	bl	8001d84 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <HAL_PCD_MspInit+0xac>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <HAL_PCD_MspInit+0xac>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <HAL_PCD_MspInit+0xac>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80009cc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009de:	230a      	movs	r3, #10
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4813      	ldr	r0, [pc, #76]	; (8000a38 <HAL_PCD_MspInit+0xb0>)
 80009ea:	f000 fe4b 	bl	8001684 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	480d      	ldr	r0, [pc, #52]	; (8000a38 <HAL_PCD_MspInit+0xb0>)
 8000a04:	f000 fe3e 	bl	8001684 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_PCD_MspInit+0xac>)
 8000a0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <HAL_PCD_MspInit+0xac>)
 8000a10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_PCD_MspInit+0xac>)
 8000a1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a26:	bf00      	nop
 8000a28:	3728      	adds	r7, #40	; 0x28
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40080000 	.word	0x40080000
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58020000 	.word	0x58020000

08000a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <NMI_Handler+0x4>

08000a42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a46:	e7fe      	b.n	8000a46 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <MemManage_Handler+0x4>

08000a4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <BusFault_Handler+0x4>

08000a54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <UsageFault_Handler+0x4>

08000a5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f89e 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a94:	f7ff fc20 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	; (8000acc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ad4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	; (8000adc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000abe:	f003 fca5 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fca3 	bl	800040c <main>
  bx  lr
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000acc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ad0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ad4:	08004494 	.word	0x08004494
  ldr r2, =_sbss
 8000ad8:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000adc:	2400064c 	.word	0x2400064c

08000ae0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC3_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aea:	2003      	movs	r0, #3
 8000aec:	f000 f982 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000af0:	f001 ff3a 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8000af4:	4602      	mov	r2, r0
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <HAL_Init+0x68>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	0a1b      	lsrs	r3, r3, #8
 8000afc:	f003 030f 	and.w	r3, r3, #15
 8000b00:	4913      	ldr	r1, [pc, #76]	; (8000b50 <HAL_Init+0x6c>)
 8000b02:	5ccb      	ldrb	r3, [r1, r3]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_Init+0x68>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	4a0e      	ldr	r2, [pc, #56]	; (8000b50 <HAL_Init+0x6c>)
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	f003 031f 	and.w	r3, r3, #31
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	fa22 f303 	lsr.w	r3, r2, r3
 8000b24:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <HAL_Init+0x70>)
 8000b26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_Init+0x74>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 f814 	bl	8000b5c <HAL_InitTick>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e002      	b.n	8000b44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3e:	f7ff fe3b 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b42:	2300      	movs	r3, #0
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400
 8000b50:	0800447c 	.word	0x0800447c
 8000b54:	24000004 	.word	0x24000004
 8000b58:	24000000 	.word	0x24000000

08000b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_InitTick+0x60>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d101      	bne.n	8000b70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e021      	b.n	8000bb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b70:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <HAL_InitTick+0x64>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_InitTick+0x60>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f959 	bl	8000e3e <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f931 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x68>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2400000c 	.word	0x2400000c
 8000bc0:	24000000 	.word	0x24000000
 8000bc4:	24000008 	.word	0x24000008

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2400000c 	.word	0x2400000c
 8000bec:	24000648 	.word	0x24000648

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	24000648 	.word	0x24000648

08000c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c10:	f7ff ffee 	bl	8000bf0 <HAL_GetTick>
 8000c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c20:	d005      	beq.n	8000c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_Delay+0x44>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2e:	bf00      	nop
 8000c30:	f7ff ffde 	bl	8000bf0 <HAL_GetTick>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d8f7      	bhi.n	8000c30 <HAL_Delay+0x28>
  {
  }
}
 8000c40:	bf00      	nop
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2400000c 	.word	0x2400000c

08000c50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c54:	4b03      	ldr	r3, [pc, #12]	; (8000c64 <HAL_GetREVID+0x14>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	0c1b      	lsrs	r3, r3, #16
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	5c001000 	.word	0x5c001000

08000c68 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	604b      	str	r3, [r1, #4]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	58000400 	.word	0x58000400

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000ed00 	.word	0xe000ed00
 8000cd4:	05fa0000 	.word	0x05fa0000

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	88fb      	ldrh	r3, [r7, #6]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff47 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e18:	f7ff ff5e 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	68b9      	ldr	r1, [r7, #8]
 8000e22:	6978      	ldr	r0, [r7, #20]
 8000e24:	f7ff ff90 	bl	8000d48 <NVIC_EncodePriority>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff5f 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e36:	bf00      	nop
 8000e38:	3718      	adds	r7, #24
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffb2 	bl	8000db0 <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e0c6      	b.n	8000ff8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d102      	bne.n	8000e78 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fcba 	bl	80007ec <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2223      	movs	r2, #35	; 0x23
 8000e7c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e7e:	4b60      	ldr	r3, [pc, #384]	; (8001000 <HAL_ETH_Init+0x1a8>)
 8000e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e84:	4a5e      	ldr	r2, [pc, #376]	; (8001000 <HAL_ETH_Init+0x1a8>)
 8000e86:	f043 0302 	orr.w	r3, r3, #2
 8000e8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e8e:	4b5c      	ldr	r3, [pc, #368]	; (8001000 <HAL_ETH_Init+0x1a8>)
 8000e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e94:	f003 0302 	and.w	r3, r3, #2
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d103      	bne.n	8000eac <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fedf 	bl	8000c68 <HAL_SYSCFG_ETHInterfaceSelect>
 8000eaa:	e003      	b.n	8000eb4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8000eac:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000eb0:	f7ff feda 	bl	8000c68 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ecc:	f7ff fe90 	bl	8000bf0 <HAL_GetTick>
 8000ed0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000ed2:	e00f      	b.n	8000ef4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8000ed4:	f7ff fe8c 	bl	8000bf0 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ee2:	d907      	bls.n	8000ef4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	22e0      	movs	r2, #224	; 0xe0
 8000eee:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e081      	b.n	8000ff8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1e6      	bne.n	8000ed4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f000 fac0 	bl	800148c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8000f0c:	f001 fea6 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a3c      	ldr	r2, [pc, #240]	; (8001004 <HAL_ETH_Init+0x1ac>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	0c9a      	lsrs	r2, r3, #18
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	3a01      	subs	r2, #1
 8000f20:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 fa13 	bl	8001350 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f40:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8000f44:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d007      	beq.n	8000f62 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	22e0      	movs	r2, #224	; 0xe0
 8000f5c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e04a      	b.n	8000ff8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	f241 1308 	movw	r3, #4360	; 0x1108
 8000f6a:	4413      	add	r3, r2
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_ETH_Init+0x1b0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	6952      	ldr	r2, [r2, #20]
 8000f76:	0052      	lsls	r2, r2, #1
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	6809      	ldr	r1, [r1, #0]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	f241 1308 	movw	r3, #4360	; 0x1108
 8000f82:	440b      	add	r3, r1
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 fad8 	bl	800153c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f000 fb1c 	bl	80015ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	3305      	adds	r3, #5
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	021a      	lsls	r2, r3, #8
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	3303      	adds	r3, #3
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	061a      	lsls	r2, r3, #24
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	041b      	lsls	r3, r3, #16
 8000fc4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000fd0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8000fde:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8000fe0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2210      	movs	r2, #16
 8000fee:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2210      	movs	r2, #16
 8000ff4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58024400 	.word	0x58024400
 8001004:	431bde83 	.word	0x431bde83
 8001008:	ffff8001 	.word	0xffff8001

0800100c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800101e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001026:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	7b1b      	ldrb	r3, [r3, #12]
 800102c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800102e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	7b5b      	ldrb	r3, [r3, #13]
 8001034:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001036:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	7b9b      	ldrb	r3, [r3, #14]
 800103c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800103e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	7bdb      	ldrb	r3, [r3, #15]
 8001044:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001046:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	7c12      	ldrb	r2, [r2, #16]
 800104c:	2a00      	cmp	r2, #0
 800104e:	d102      	bne.n	8001056 <ETH_SetMACConfig+0x4a>
 8001050:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001054:	e000      	b.n	8001058 <ETH_SetMACConfig+0x4c>
 8001056:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001058:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	7c52      	ldrb	r2, [r2, #17]
 800105e:	2a00      	cmp	r2, #0
 8001060:	d102      	bne.n	8001068 <ETH_SetMACConfig+0x5c>
 8001062:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001066:	e000      	b.n	800106a <ETH_SetMACConfig+0x5e>
 8001068:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800106a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	7c9b      	ldrb	r3, [r3, #18]
 8001070:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001072:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001078:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800107e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	7f1b      	ldrb	r3, [r3, #28]
 8001084:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001086:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	7f5b      	ldrb	r3, [r3, #29]
 800108c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800108e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001090:	683a      	ldr	r2, [r7, #0]
 8001092:	7f92      	ldrb	r2, [r2, #30]
 8001094:	2a00      	cmp	r2, #0
 8001096:	d102      	bne.n	800109e <ETH_SetMACConfig+0x92>
 8001098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800109c:	e000      	b.n	80010a0 <ETH_SetMACConfig+0x94>
 800109e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80010a0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	7fdb      	ldrb	r3, [r3, #31]
 80010a6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80010a8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80010aa:	683a      	ldr	r2, [r7, #0]
 80010ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80010b0:	2a00      	cmp	r2, #0
 80010b2:	d102      	bne.n	80010ba <ETH_SetMACConfig+0xae>
 80010b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b8:	e000      	b.n	80010bc <ETH_SetMACConfig+0xb0>
 80010ba:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80010bc:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80010c2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010ca:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80010cc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80010d2:	4313      	orrs	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b56      	ldr	r3, [pc, #344]	; (8001238 <ETH_SetMACConfig+0x22c>)
 80010de:	4013      	ands	r3, r2
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	6812      	ldr	r2, [r2, #0]
 80010e4:	68f9      	ldr	r1, [r7, #12]
 80010e6:	430b      	orrs	r3, r1
 80010e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80010f8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001100:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001102:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800110a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800110c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800110e:	683a      	ldr	r2, [r7, #0]
 8001110:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001114:	2a00      	cmp	r2, #0
 8001116:	d102      	bne.n	800111e <ETH_SetMACConfig+0x112>
 8001118:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800111c:	e000      	b.n	8001120 <ETH_SetMACConfig+0x114>
 800111e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001120:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001126:	4313      	orrs	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4b42      	ldr	r3, [pc, #264]	; (800123c <ETH_SetMACConfig+0x230>)
 8001132:	4013      	ands	r3, r2
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	68f9      	ldr	r1, [r7, #12]
 800113a:	430b      	orrs	r3, r1
 800113c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001144:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800114a:	4313      	orrs	r3, r2
 800114c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <ETH_SetMACConfig+0x234>)
 8001156:	4013      	ands	r3, r2
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	68f9      	ldr	r1, [r7, #12]
 800115e:	430b      	orrs	r3, r1
 8001160:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001168:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800116e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001176:	2a00      	cmp	r2, #0
 8001178:	d101      	bne.n	800117e <ETH_SetMACConfig+0x172>
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	e000      	b.n	8001180 <ETH_SetMACConfig+0x174>
 800117e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001180:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001186:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001188:	4313      	orrs	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001192:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001196:	4013      	ands	r3, r2
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	6812      	ldr	r2, [r2, #0]
 800119c:	68f9      	ldr	r1, [r7, #12]
 800119e:	430b      	orrs	r3, r1
 80011a0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80011a8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80011b0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011be:	f023 0103 	bic.w	r1, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80011d6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d101      	bne.n	80011fa <ETH_SetMACConfig+0x1ee>
 80011f6:	2240      	movs	r2, #64	; 0x40
 80011f8:	e000      	b.n	80011fc <ETH_SetMACConfig+0x1f0>
 80011fa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80011fc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001204:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001206:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800120e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001210:	4313      	orrs	r3, r2
 8001212:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800121c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	430a      	orrs	r2, r1
 8001228:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	00048083 	.word	0x00048083
 800123c:	c0f88000 	.word	0xc0f88000
 8001240:	fffffef0 	.word	0xfffffef0

08001244 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <ETH_SetDMAConfig+0xf8>)
 800125a:	4013      	ands	r3, r2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	6809      	ldr	r1, [r1, #0]
 8001264:	431a      	orrs	r2, r3
 8001266:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800126a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	791b      	ldrb	r3, [r3, #4]
 8001270:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001276:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	7b1b      	ldrb	r3, [r3, #12]
 800127c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800127e:	4313      	orrs	r3, r2
 8001280:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	f241 0304 	movw	r3, #4100	; 0x1004
 800128a:	4413      	add	r3, r2
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <ETH_SetDMAConfig+0xfc>)
 8001290:	4013      	ands	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6811      	ldr	r1, [r2, #0]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	431a      	orrs	r2, r3
 800129a:	f241 0304 	movw	r3, #4100	; 0x1004
 800129e:	440b      	add	r3, r1
 80012a0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	7b5b      	ldrb	r3, [r3, #13]
 80012a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80012ac:	4313      	orrs	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <ETH_SetDMAConfig+0x100>)
 80012bc:	4013      	ands	r3, r2
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	6811      	ldr	r1, [r2, #0]
 80012c2:	68fa      	ldr	r2, [r7, #12]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80012ca:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	7d1b      	ldrb	r3, [r3, #20]
 80012d4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80012d6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	7f5b      	ldrb	r3, [r3, #29]
 80012dc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	f241 1304 	movw	r3, #4356	; 0x1104
 80012ea:	4413      	add	r3, r2
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <ETH_SetDMAConfig+0x104>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	6811      	ldr	r1, [r2, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	f241 1304 	movw	r3, #4356	; 0x1104
 80012fe:	440b      	add	r3, r1
 8001300:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	7f1b      	ldrb	r3, [r3, #28]
 8001306:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	f241 1308 	movw	r3, #4360	; 0x1108
 8001318:	4413      	add	r3, r2
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <ETH_SetDMAConfig+0x108>)
 800131e:	4013      	ands	r3, r2
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	6811      	ldr	r1, [r2, #0]
 8001324:	68fa      	ldr	r2, [r7, #12]
 8001326:	431a      	orrs	r2, r3
 8001328:	f241 1308 	movw	r3, #4360	; 0x1108
 800132c:	440b      	add	r3, r1
 800132e:	601a      	str	r2, [r3, #0]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	ffff87fd 	.word	0xffff87fd
 8001340:	ffff2ffe 	.word	0xffff2ffe
 8001344:	fffec000 	.word	0xfffec000
 8001348:	ffc0efef 	.word	0xffc0efef
 800134c:	7fc0ffff 	.word	0x7fc0ffff

08001350 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0a4      	sub	sp, #144	; 0x90
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001358:	2301      	movs	r3, #1
 800135a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800135e:	2300      	movs	r3, #0
 8001360:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800136e:	2301      	movs	r3, #1
 8001370:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001374:	2301      	movs	r3, #1
 8001376:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001386:	2301      	movs	r3, #1
 8001388:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800138c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001390:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001398:	2300      	movs	r3, #0
 800139a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80013a8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80013ac:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80013ca:	2300      	movs	r3, #0
 80013cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80013d2:	2300      	movs	r3, #0
 80013d4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80013e8:	2320      	movs	r3, #32
 80013ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80013fa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001400:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001404:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001424:	2301      	movs	r3, #1
 8001426:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800142a:	2300      	movs	r3, #0
 800142c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001438:	4619      	mov	r1, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fde6 	bl	800100c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001440:	2301      	movs	r3, #1
 8001442:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001444:	2301      	movs	r3, #1
 8001446:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800145a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800145e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001464:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001468:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001470:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fee1 	bl	8001244 <ETH_SetDMAConfig>
}
 8001482:	bf00      	nop
 8001484:	3790      	adds	r7, #144	; 0x90
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800149c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014a4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014a6:	f001 fbd9 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 80014aa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d908      	bls.n	80014c6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d804      	bhi.n	80014c6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	e027      	b.n	8001516 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	4a18      	ldr	r2, [pc, #96]	; (800152c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d908      	bls.n	80014e0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	4a17      	ldr	r2, [pc, #92]	; (8001530 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d204      	bcs.n	80014e0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e01a      	b.n	8001516 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d303      	bcc.n	80014f0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4a12      	ldr	r2, [pc, #72]	; (8001534 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d911      	bls.n	8001514 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	4a10      	ldr	r2, [pc, #64]	; (8001534 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d908      	bls.n	800150a <ETH_MAC_MDIO_ClkConfig+0x7e>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4a0f      	ldr	r2, [pc, #60]	; (8001538 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d804      	bhi.n	800150a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e005      	b.n	8001516 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	e000      	b.n	8001516 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8001514:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	01312cff 	.word	0x01312cff
 800152c:	02160ebf 	.word	0x02160ebf
 8001530:	03938700 	.word	0x03938700
 8001534:	05f5e0ff 	.word	0x05f5e0ff
 8001538:	08f0d17f 	.word	0x08f0d17f

0800153c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	e01d      	b.n	8001586 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68d9      	ldr	r1, [r3, #12]
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	440b      	add	r3, r1
 800155a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	3206      	adds	r2, #6
 800157c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3301      	adds	r3, #1
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2b03      	cmp	r3, #3
 800158a:	d9de      	bls.n	800154a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	f241 132c 	movw	r3, #4396	; 0x112c
 800159a:	4413      	add	r3, r2
 800159c:	2203      	movs	r2, #3
 800159e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68d9      	ldr	r1, [r3, #12]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	f241 1314 	movw	r3, #4372	; 0x1114
 80015ac:	4413      	add	r3, r2
 80015ae:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80015bc:	601a      	str	r2, [r3, #0]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	e024      	b.n	8001622 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6919      	ldr	r1, [r3, #16]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4613      	mov	r3, r2
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800160e:	68ba      	ldr	r2, [r7, #8]
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3310      	adds	r3, #16
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3301      	adds	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b03      	cmp	r3, #3
 8001626:	d9d7      	bls.n	80015d8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	f241 1330 	movw	r3, #4400	; 0x1130
 800164e:	4413      	add	r3, r2
 8001650:	2203      	movs	r2, #3
 8001652:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6919      	ldr	r1, [r3, #16]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	f241 131c 	movw	r3, #4380	; 0x111c
 8001660:	4413      	add	r3, r2
 8001662:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	f241 1328 	movw	r3, #4392	; 0x1128
 8001674:	4413      	add	r3, r2
 8001676:	6019      	str	r1, [r3, #0]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001692:	4b89      	ldr	r3, [pc, #548]	; (80018b8 <HAL_GPIO_Init+0x234>)
 8001694:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001696:	e194      	b.n	80019c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	f000 8186 	beq.w	80019bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d005      	beq.n	80016c8 <HAL_GPIO_Init+0x44>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f003 0303 	and.w	r3, r3, #3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d130      	bne.n	800172a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	2203      	movs	r2, #3
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68da      	ldr	r2, [r3, #12]
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016fe:	2201      	movs	r2, #1
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	091b      	lsrs	r3, r3, #4
 8001714:	f003 0201 	and.w	r2, r3, #1
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b03      	cmp	r3, #3
 8001734:	d017      	beq.n	8001766 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800173c:	69fb      	ldr	r3, [r7, #28]
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	2203      	movs	r2, #3
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d123      	bne.n	80017ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800177e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	220f      	movs	r2, #15
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	691a      	ldr	r2, [r3, #16]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	69b9      	ldr	r1, [r7, #24]
 80017b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0203 	and.w	r2, r3, #3
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f000 80e0 	beq.w	80019bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fc:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <HAL_GPIO_Init+0x238>)
 80017fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001802:	4a2e      	ldr	r2, [pc, #184]	; (80018bc <HAL_GPIO_Init+0x238>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800180c:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <HAL_GPIO_Init+0x238>)
 800180e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181a:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <HAL_GPIO_Init+0x23c>)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a20      	ldr	r2, [pc, #128]	; (80018c4 <HAL_GPIO_Init+0x240>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d052      	beq.n	80018ec <HAL_GPIO_Init+0x268>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a1f      	ldr	r2, [pc, #124]	; (80018c8 <HAL_GPIO_Init+0x244>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d031      	beq.n	80018b2 <HAL_GPIO_Init+0x22e>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <HAL_GPIO_Init+0x248>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d02b      	beq.n	80018ae <HAL_GPIO_Init+0x22a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_GPIO_Init+0x24c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d025      	beq.n	80018aa <HAL_GPIO_Init+0x226>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <HAL_GPIO_Init+0x250>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d01f      	beq.n	80018a6 <HAL_GPIO_Init+0x222>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1b      	ldr	r2, [pc, #108]	; (80018d8 <HAL_GPIO_Init+0x254>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d019      	beq.n	80018a2 <HAL_GPIO_Init+0x21e>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_GPIO_Init+0x258>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_GPIO_Init+0x21a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <HAL_GPIO_Init+0x25c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d00d      	beq.n	800189a <HAL_GPIO_Init+0x216>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a18      	ldr	r2, [pc, #96]	; (80018e4 <HAL_GPIO_Init+0x260>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d007      	beq.n	8001896 <HAL_GPIO_Init+0x212>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <HAL_GPIO_Init+0x264>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d101      	bne.n	8001892 <HAL_GPIO_Init+0x20e>
 800188e:	2309      	movs	r3, #9
 8001890:	e02d      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 8001892:	230a      	movs	r3, #10
 8001894:	e02b      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 8001896:	2308      	movs	r3, #8
 8001898:	e029      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 800189a:	2307      	movs	r3, #7
 800189c:	e027      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 800189e:	2306      	movs	r3, #6
 80018a0:	e025      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e023      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e021      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e01f      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e01d      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e01b      	b.n	80018ee <HAL_GPIO_Init+0x26a>
 80018b6:	bf00      	nop
 80018b8:	58000080 	.word	0x58000080
 80018bc:	58024400 	.word	0x58024400
 80018c0:	58000400 	.word	0x58000400
 80018c4:	58020000 	.word	0x58020000
 80018c8:	58020400 	.word	0x58020400
 80018cc:	58020800 	.word	0x58020800
 80018d0:	58020c00 	.word	0x58020c00
 80018d4:	58021000 	.word	0x58021000
 80018d8:	58021400 	.word	0x58021400
 80018dc:	58021800 	.word	0x58021800
 80018e0:	58021c00 	.word	0x58021c00
 80018e4:	58022000 	.word	0x58022000
 80018e8:	58022400 	.word	0x58022400
 80018ec:	2300      	movs	r3, #0
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	f002 0203 	and.w	r2, r2, #3
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	4093      	lsls	r3, r2
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018fe:	4938      	ldr	r1, [pc, #224]	; (80019e0 <HAL_GPIO_Init+0x35c>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3301      	adds	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f47f ae63 	bne.w	8001698 <HAL_GPIO_Init+0x14>
  }
}
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	3724      	adds	r7, #36	; 0x24
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	58000400 	.word	0x58000400

080019e4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <HAL_HSEM_FastTake+0x2c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3320      	adds	r3, #32
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_HSEM_FastTake+0x30>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d101      	bne.n	8001a00 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	e000      	b.n	8001a02 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	58026400 	.word	0x58026400
 8001a14:	80000300 	.word	0x80000300

08001a18 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a22:	4906      	ldr	r1, [pc, #24]	; (8001a3c <HAL_HSEM_Release+0x24>)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	58026400 	.word	0x58026400

08001a40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a42:	b08f      	sub	sp, #60	; 0x3c
 8001a44:	af0a      	add	r7, sp, #40	; 0x28
 8001a46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e116      	b.n	8001c80 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d106      	bne.n	8001a72 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7fe ff8b 	bl	8000988 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2203      	movs	r2, #3
 8001a76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f002 fa25 	bl	8003ee0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	687e      	ldr	r6, [r7, #4]
 8001a9e:	466d      	mov	r5, sp
 8001aa0:	f106 0410 	add.w	r4, r6, #16
 8001aa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ab0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ab4:	1d33      	adds	r3, r6, #4
 8001ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ab8:	6838      	ldr	r0, [r7, #0]
 8001aba:	f002 f9a3 	bl	8003e04 <USB_CoreInit>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d005      	beq.n	8001ad0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0d7      	b.n	8001c80 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 fa13 	bl	8003f02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e04a      	b.n	8001b78 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	333d      	adds	r3, #61	; 0x3d
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	1a9b      	subs	r3, r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	333c      	adds	r3, #60	; 0x3c
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	b298      	uxth	r0, r3
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	1a9b      	subs	r3, r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3342      	adds	r3, #66	; 0x42
 8001b1e:	4602      	mov	r2, r0
 8001b20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	1a9b      	subs	r3, r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	333f      	adds	r3, #63	; 0x3f
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	1a9b      	subs	r3, r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	3344      	adds	r3, #68	; 0x44
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	1a9b      	subs	r3, r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	3348      	adds	r3, #72	; 0x48
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	1a9b      	subs	r3, r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3350      	adds	r3, #80	; 0x50
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3af      	bcc.n	8001ae2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e044      	b.n	8001c12 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	1a9b      	subs	r3, r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	1a9b      	subs	r3, r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	1a9b      	subs	r3, r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3b5      	bcc.n	8001b88 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	687e      	ldr	r6, [r7, #4]
 8001c24:	466d      	mov	r5, sp
 8001c26:	f106 0410 	add.w	r4, r6, #16
 8001c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c3a:	1d33      	adds	r3, r6, #4
 8001c3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c3e:	6838      	ldr	r0, [r7, #0]
 8001c40:	f002 f9ac 	bl	8003f9c <USB_DevInit>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e014      	b.n	8001c80 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f80a 	bl	8001c88 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f002 fb66 	bl	800434a <USB_DevDisconnect>

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c88 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <HAL_PCDEx_ActivateLPM+0x44>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	10000003 	.word	0x10000003

08001cd0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d00a      	beq.n	8001cfa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d001      	beq.n	8001cf6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e040      	b.n	8001d78 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e03e      	b.n	8001d78 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001d02:	491f      	ldr	r1, [pc, #124]	; (8001d80 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d0a:	f7fe ff71 	bl	8000bf0 <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d10:	e009      	b.n	8001d26 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d12:	f7fe ff6d 	bl	8000bf0 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d20:	d901      	bls.n	8001d26 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e028      	b.n	8001d78 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d32:	d1ee      	bne.n	8001d12 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b1e      	cmp	r3, #30
 8001d38:	d008      	beq.n	8001d4c <HAL_PWREx_ConfigSupply+0x7c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d3e:	d005      	beq.n	8001d4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b1d      	cmp	r3, #29
 8001d44:	d002      	beq.n	8001d4c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b2d      	cmp	r3, #45	; 0x2d
 8001d4a:	d114      	bne.n	8001d76 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001d4c:	f7fe ff50 	bl	8000bf0 <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d52:	e009      	b.n	8001d68 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d54:	f7fe ff4c 	bl	8000bf0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d62:	d901      	bls.n	8001d68 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e007      	b.n	8001d78 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d1ee      	bne.n	8001d54 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	58024800 	.word	0x58024800

08001d84 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d92:	60d3      	str	r3, [r2, #12]
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	58024800 	.word	0x58024800

08001da4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08c      	sub	sp, #48	; 0x30
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f000 bc1c 	b.w	80025f0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 8087 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc6:	4b9e      	ldr	r3, [pc, #632]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001dc8:	691b      	ldr	r3, [r3, #16]
 8001dca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dd0:	4b9b      	ldr	r3, [pc, #620]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d007      	beq.n	8001dec <HAL_RCC_OscConfig+0x48>
 8001ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dde:	2b18      	cmp	r3, #24
 8001de0:	d110      	bne.n	8001e04 <HAL_RCC_OscConfig+0x60>
 8001de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d10b      	bne.n	8001e04 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	4b94      	ldr	r3, [pc, #592]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d06c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d168      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e3f5      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e0c:	d106      	bne.n	8001e1c <HAL_RCC_OscConfig+0x78>
 8001e0e:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a8b      	ldr	r2, [pc, #556]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e18:	6013      	str	r3, [r2, #0]
 8001e1a:	e02e      	b.n	8001e7a <HAL_RCC_OscConfig+0xd6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x9a>
 8001e24:	4b86      	ldr	r3, [pc, #536]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a85      	ldr	r2, [pc, #532]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b83      	ldr	r3, [pc, #524]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a82      	ldr	r2, [pc, #520]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e01d      	b.n	8001e7a <HAL_RCC_OscConfig+0xd6>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0xbe>
 8001e48:	4b7d      	ldr	r3, [pc, #500]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a7c      	ldr	r2, [pc, #496]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a79      	ldr	r2, [pc, #484]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e00b      	b.n	8001e7a <HAL_RCC_OscConfig+0xd6>
 8001e62:	4b77      	ldr	r3, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a76      	ldr	r2, [pc, #472]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	6013      	str	r3, [r2, #0]
 8001e6e:	4b74      	ldr	r3, [pc, #464]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a73      	ldr	r2, [pc, #460]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d013      	beq.n	8001eaa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7fe feb5 	bl	8000bf0 <HAL_GetTick>
 8001e86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e8a:	f7fe feb1 	bl	8000bf0 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b64      	cmp	r3, #100	; 0x64
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e3a9      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e9c:	4b68      	ldr	r3, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0f0      	beq.n	8001e8a <HAL_RCC_OscConfig+0xe6>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fea1 	bl	8000bf0 <HAL_GetTick>
 8001eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb2:	f7fe fe9d 	bl	8000bf0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b64      	cmp	r3, #100	; 0x64
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e395      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ec4:	4b5e      	ldr	r3, [pc, #376]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x10e>
 8001ed0:	e000      	b.n	8001ed4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80ca 	beq.w	8002076 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eec:	4b54      	ldr	r3, [pc, #336]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ef2:	6a3b      	ldr	r3, [r7, #32]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_RCC_OscConfig+0x164>
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	2b18      	cmp	r3, #24
 8001efc:	d156      	bne.n	8001fac <HAL_RCC_OscConfig+0x208>
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d151      	bne.n	8001fac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f08:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_OscConfig+0x17c>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e367      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f20:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f023 0219 	bic.w	r2, r3, #25
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4944      	ldr	r1, [pc, #272]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f32:	f7fe fe5d 	bl	8000bf0 <HAL_GetTick>
 8001f36:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7fe fe59 	bl	8000bf0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e351      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f4c:	4b3c      	ldr	r3, [pc, #240]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0304 	and.w	r3, r3, #4
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	f7fe fe7a 	bl	8000c50 <HAL_GetREVID>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d817      	bhi.n	8001f96 <HAL_RCC_OscConfig+0x1f2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b40      	cmp	r3, #64	; 0x40
 8001f6c:	d108      	bne.n	8001f80 <HAL_RCC_OscConfig+0x1dc>
 8001f6e:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f76:	4a32      	ldr	r2, [pc, #200]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f7e:	e07a      	b.n	8002076 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f80:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	031b      	lsls	r3, r3, #12
 8001f8e:	492c      	ldr	r1, [pc, #176]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f94:	e06f      	b.n	8002076 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f96:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	061b      	lsls	r3, r3, #24
 8001fa4:	4926      	ldr	r1, [pc, #152]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001faa:	e064      	b.n	8002076 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d047      	beq.n	8002044 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001fb4:	4b22      	ldr	r3, [pc, #136]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0219 	bic.w	r2, r3, #25
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	491f      	ldr	r1, [pc, #124]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7fe fe13 	bl	8000bf0 <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fce:	f7fe fe0f 	bl	8000bf0 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e307      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fec:	f7fe fe30 	bl	8000c50 <HAL_GetREVID>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d817      	bhi.n	800202a <HAL_RCC_OscConfig+0x286>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b40      	cmp	r3, #64	; 0x40
 8002000:	d108      	bne.n	8002014 <HAL_RCC_OscConfig+0x270>
 8002002:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800200a:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	6053      	str	r3, [r2, #4]
 8002012:	e030      	b.n	8002076 <HAL_RCC_OscConfig+0x2d2>
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	031b      	lsls	r3, r3, #12
 8002022:	4907      	ldr	r1, [pc, #28]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 8002024:	4313      	orrs	r3, r2
 8002026:	604b      	str	r3, [r1, #4]
 8002028:	e025      	b.n	8002076 <HAL_RCC_OscConfig+0x2d2>
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	061b      	lsls	r3, r3, #24
 8002038:	4901      	ldr	r1, [pc, #4]	; (8002040 <HAL_RCC_OscConfig+0x29c>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
 800203e:	e01a      	b.n	8002076 <HAL_RCC_OscConfig+0x2d2>
 8002040:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002044:	4b9e      	ldr	r3, [pc, #632]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a9d      	ldr	r2, [pc, #628]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fdce 	bl	8000bf0 <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7fe fdca 	bl	8000bf0 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e2c2      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800206a:	4b95      	ldr	r3, [pc, #596]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80a9 	beq.w	80021d6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002084:	4b8e      	ldr	r3, [pc, #568]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800208c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800208e:	4b8c      	ldr	r3, [pc, #560]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b08      	cmp	r3, #8
 8002098:	d007      	beq.n	80020aa <HAL_RCC_OscConfig+0x306>
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	2b18      	cmp	r3, #24
 800209e:	d13a      	bne.n	8002116 <HAL_RCC_OscConfig+0x372>
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d135      	bne.n	8002116 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020aa:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x31e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	2b80      	cmp	r3, #128	; 0x80
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e296      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020c2:	f7fe fdc5 	bl	8000c50 <HAL_GetREVID>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d817      	bhi.n	8002100 <HAL_RCC_OscConfig+0x35c>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	2b20      	cmp	r3, #32
 80020d6:	d108      	bne.n	80020ea <HAL_RCC_OscConfig+0x346>
 80020d8:	4b79      	ldr	r3, [pc, #484]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80020e0:	4a77      	ldr	r2, [pc, #476]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80020e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020e6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020e8:	e075      	b.n	80021d6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020ea:	4b75      	ldr	r3, [pc, #468]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	069b      	lsls	r3, r3, #26
 80020f8:	4971      	ldr	r1, [pc, #452]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020fe:	e06a      	b.n	80021d6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002100:	4b6f      	ldr	r3, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a1b      	ldr	r3, [r3, #32]
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	496c      	ldr	r1, [pc, #432]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002110:	4313      	orrs	r3, r2
 8002112:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002114:	e05f      	b.n	80021d6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d042      	beq.n	80021a4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800211e:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a67      	ldr	r2, [pc, #412]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212a:	f7fe fd61 	bl	8000bf0 <HAL_GetTick>
 800212e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002132:	f7fe fd5d 	bl	8000bf0 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e255      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002144:	4b5e      	ldr	r3, [pc, #376]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002150:	f7fe fd7e 	bl	8000c50 <HAL_GetREVID>
 8002154:	4603      	mov	r3, r0
 8002156:	f241 0203 	movw	r2, #4099	; 0x1003
 800215a:	4293      	cmp	r3, r2
 800215c:	d817      	bhi.n	800218e <HAL_RCC_OscConfig+0x3ea>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	2b20      	cmp	r3, #32
 8002164:	d108      	bne.n	8002178 <HAL_RCC_OscConfig+0x3d4>
 8002166:	4b56      	ldr	r3, [pc, #344]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800216e:	4a54      	ldr	r2, [pc, #336]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002174:	6053      	str	r3, [r2, #4]
 8002176:	e02e      	b.n	80021d6 <HAL_RCC_OscConfig+0x432>
 8002178:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	069b      	lsls	r3, r3, #26
 8002186:	494e      	ldr	r1, [pc, #312]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e023      	b.n	80021d6 <HAL_RCC_OscConfig+0x432>
 800218e:	4b4c      	ldr	r3, [pc, #304]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	061b      	lsls	r3, r3, #24
 800219c:	4948      	ldr	r1, [pc, #288]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	60cb      	str	r3, [r1, #12]
 80021a2:	e018      	b.n	80021d6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021a4:	4b46      	ldr	r3, [pc, #280]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a45      	ldr	r2, [pc, #276]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80021aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7fe fd1e 	bl	8000bf0 <HAL_GetTick>
 80021b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021b8:	f7fe fd1a 	bl	8000bf0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e212      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021ca:	4b3d      	ldr	r3, [pc, #244]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d036      	beq.n	8002250 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d019      	beq.n	800221e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ea:	4b35      	ldr	r3, [pc, #212]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80021ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021ee:	4a34      	ldr	r2, [pc, #208]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f6:	f7fe fcfb 	bl	8000bf0 <HAL_GetTick>
 80021fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021fe:	f7fe fcf7 	bl	8000bf0 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e1ef      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x45a>
 800221c:	e018      	b.n	8002250 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002222:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7fe fce1 	bl	8000bf0 <HAL_GetTick>
 800222e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002232:	f7fe fcdd 	bl	8000bf0 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1d5      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002244:	4b1e      	ldr	r3, [pc, #120]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1f0      	bne.n	8002232 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b00      	cmp	r3, #0
 800225a:	d039      	beq.n	80022d0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d019      	beq.n	8002298 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a15      	ldr	r2, [pc, #84]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 800226a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800226e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002270:	f7fe fcbe 	bl	8000bf0 <HAL_GetTick>
 8002274:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002278:	f7fe fcba 	bl	8000bf0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e1b2      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800228a:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x4d4>
 8002296:	e01b      	b.n	80022d0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002298:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_RCC_OscConfig+0x51c>)
 800229e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80022a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022a4:	f7fe fca4 	bl	8000bf0 <HAL_GetTick>
 80022a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80022ac:	f7fe fca0 	bl	8000bf0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d904      	bls.n	80022c4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e198      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
 80022be:	bf00      	nop
 80022c0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022c4:	4ba3      	ldr	r3, [pc, #652]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ed      	bne.n	80022ac <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0304 	and.w	r3, r3, #4
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8081 	beq.w	80023e0 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022de:	4b9e      	ldr	r3, [pc, #632]	; (8002558 <HAL_RCC_OscConfig+0x7b4>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a9d      	ldr	r2, [pc, #628]	; (8002558 <HAL_RCC_OscConfig+0x7b4>)
 80022e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022ea:	f7fe fc81 	bl	8000bf0 <HAL_GetTick>
 80022ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80022f2:	f7fe fc7d 	bl	8000bf0 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b64      	cmp	r3, #100	; 0x64
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e175      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002304:	4b94      	ldr	r3, [pc, #592]	; (8002558 <HAL_RCC_OscConfig+0x7b4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f0      	beq.n	80022f2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x582>
 8002318:	4b8e      	ldr	r3, [pc, #568]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800231a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231c:	4a8d      	ldr	r2, [pc, #564]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	6713      	str	r3, [r2, #112]	; 0x70
 8002324:	e02d      	b.n	8002382 <HAL_RCC_OscConfig+0x5de>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x5a4>
 800232e:	4b89      	ldr	r3, [pc, #548]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002332:	4a88      	ldr	r2, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002334:	f023 0301 	bic.w	r3, r3, #1
 8002338:	6713      	str	r3, [r2, #112]	; 0x70
 800233a:	4b86      	ldr	r3, [pc, #536]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a85      	ldr	r2, [pc, #532]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002340:	f023 0304 	bic.w	r3, r3, #4
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	e01c      	b.n	8002382 <HAL_RCC_OscConfig+0x5de>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b05      	cmp	r3, #5
 800234e:	d10c      	bne.n	800236a <HAL_RCC_OscConfig+0x5c6>
 8002350:	4b80      	ldr	r3, [pc, #512]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002354:	4a7f      	ldr	r2, [pc, #508]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002356:	f043 0304 	orr.w	r3, r3, #4
 800235a:	6713      	str	r3, [r2, #112]	; 0x70
 800235c:	4b7d      	ldr	r3, [pc, #500]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a7c      	ldr	r2, [pc, #496]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	e00b      	b.n	8002382 <HAL_RCC_OscConfig+0x5de>
 800236a:	4b7a      	ldr	r3, [pc, #488]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800236c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800236e:	4a79      	ldr	r2, [pc, #484]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6713      	str	r3, [r2, #112]	; 0x70
 8002376:	4b77      	ldr	r3, [pc, #476]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237a:	4a76      	ldr	r2, [pc, #472]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d015      	beq.n	80023b6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238a:	f7fe fc31 	bl	8000bf0 <HAL_GetTick>
 800238e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe fc2d 	bl	8000bf0 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e123      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023a8:	4b6a      	ldr	r3, [pc, #424]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ee      	beq.n	8002392 <HAL_RCC_OscConfig+0x5ee>
 80023b4:	e014      	b.n	80023e0 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b6:	f7fe fc1b 	bl	8000bf0 <HAL_GetTick>
 80023ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fc17 	bl	8000bf0 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e10d      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023d4:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80023d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ee      	bne.n	80023be <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f000 8102 	beq.w	80025ee <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023ea:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f2:	2b18      	cmp	r3, #24
 80023f4:	f000 80bd 	beq.w	8002572 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	f040 8095 	bne.w	800252c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a53      	ldr	r2, [pc, #332]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002408:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800240c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7fe fbef 	bl	8000bf0 <HAL_GetTick>
 8002412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002416:	f7fe fbeb 	bl	8000bf0 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0e3      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002428:	4b4a      	ldr	r3, [pc, #296]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f0      	bne.n	8002416 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b47      	ldr	r3, [pc, #284]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002438:	4b48      	ldr	r3, [pc, #288]	; (800255c <HAL_RCC_OscConfig+0x7b8>)
 800243a:	4013      	ands	r3, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	430a      	orrs	r2, r1
 8002448:	4942      	ldr	r1, [pc, #264]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	628b      	str	r3, [r1, #40]	; 0x28
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	3b01      	subs	r3, #1
 8002454:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245c:	3b01      	subs	r3, #1
 800245e:	025b      	lsls	r3, r3, #9
 8002460:	b29b      	uxth	r3, r3
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	3b01      	subs	r3, #1
 800246a:	041b      	lsls	r3, r3, #16
 800246c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002470:	431a      	orrs	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	3b01      	subs	r3, #1
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800247e:	4935      	ldr	r1, [pc, #212]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002480:	4313      	orrs	r3, r2
 8002482:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002484:	4b33      	ldr	r3, [pc, #204]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	4a32      	ldr	r2, [pc, #200]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002494:	4b32      	ldr	r3, [pc, #200]	; (8002560 <HAL_RCC_OscConfig+0x7bc>)
 8002496:	4013      	ands	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800249c:	00d2      	lsls	r2, r2, #3
 800249e:	492d      	ldr	r1, [pc, #180]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	f023 020c 	bic.w	r2, r3, #12
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4928      	ldr	r1, [pc, #160]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024b6:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	f023 0202 	bic.w	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4924      	ldr	r1, [pc, #144]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	4a21      	ldr	r2, [pc, #132]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d4:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d8:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024e0:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	4a1b      	ldr	r2, [pc, #108]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a15      	ldr	r2, [pc, #84]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe fb74 	bl	8000bf0 <HAL_GetTick>
 8002508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800250c:	f7fe fb70 	bl	8000bf0 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e068      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800251e:	4b0d      	ldr	r3, [pc, #52]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x768>
 800252a:	e060      	b.n	80025ee <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a08      	ldr	r2, [pc, #32]	; (8002554 <HAL_RCC_OscConfig+0x7b0>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fb5a 	bl	8000bf0 <HAL_GetTick>
 800253c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800253e:	e011      	b.n	8002564 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fb56 	bl	8000bf0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d90a      	bls.n	8002564 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04e      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
 8002552:	bf00      	nop
 8002554:	58024400 	.word	0x58024400
 8002558:	58024800 	.word	0x58024800
 800255c:	fffffc0c 	.word	0xfffffc0c
 8002560:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCC_OscConfig+0x854>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1e7      	bne.n	8002540 <HAL_RCC_OscConfig+0x79c>
 8002570:	e03d      	b.n	80025ee <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002572:	4b21      	ldr	r3, [pc, #132]	; (80025f8 <HAL_RCC_OscConfig+0x854>)
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCC_OscConfig+0x854>)
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002582:	2b01      	cmp	r3, #1
 8002584:	d031      	beq.n	80025ea <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f003 0203 	and.w	r2, r3, #3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002590:	429a      	cmp	r2, r3
 8002592:	d12a      	bne.n	80025ea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d122      	bne.n	80025ea <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d11a      	bne.n	80025ea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	0a5b      	lsrs	r3, r3, #9
 80025b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025c0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d111      	bne.n	80025ea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d108      	bne.n	80025ea <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	0e1b      	lsrs	r3, r3, #24
 80025dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d001      	beq.n	80025ee <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3730      	adds	r7, #48	; 0x30
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	58024400 	.word	0x58024400

080025fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e19c      	b.n	800294a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b8a      	ldr	r3, [pc, #552]	; (800283c <HAL_RCC_ClockConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b87      	ldr	r3, [pc, #540]	; (800283c <HAL_RCC_ClockConfig+0x240>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 020f 	bic.w	r2, r3, #15
 8002626:	4985      	ldr	r1, [pc, #532]	; (800283c <HAL_RCC_ClockConfig+0x240>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b83      	ldr	r3, [pc, #524]	; (800283c <HAL_RCC_ClockConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e184      	b.n	800294a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d010      	beq.n	800266e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691a      	ldr	r2, [r3, #16]
 8002650:	4b7b      	ldr	r3, [pc, #492]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002658:	429a      	cmp	r2, r3
 800265a:	d908      	bls.n	800266e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800265c:	4b78      	ldr	r3, [pc, #480]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	4975      	ldr	r1, [pc, #468]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 800266a:	4313      	orrs	r3, r2
 800266c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d010      	beq.n	800269c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	4b70      	ldr	r3, [pc, #448]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002686:	429a      	cmp	r2, r3
 8002688:	d908      	bls.n	800269c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800268a:	4b6d      	ldr	r3, [pc, #436]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	496a      	ldr	r1, [pc, #424]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002698:	4313      	orrs	r3, r2
 800269a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d010      	beq.n	80026ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699a      	ldr	r2, [r3, #24]
 80026ac:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d908      	bls.n	80026ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026b8:	4b61      	ldr	r3, [pc, #388]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	495e      	ldr	r1, [pc, #376]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	4b59      	ldr	r3, [pc, #356]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d908      	bls.n	80026f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80026e6:	4b56      	ldr	r3, [pc, #344]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	4953      	ldr	r1, [pc, #332]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	429a      	cmp	r2, r3
 8002712:	d908      	bls.n	8002726 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002714:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f023 020f 	bic.w	r2, r3, #15
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4947      	ldr	r1, [pc, #284]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002722:	4313      	orrs	r3, r2
 8002724:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d055      	beq.n	80027de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002732:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	4940      	ldr	r1, [pc, #256]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002740:	4313      	orrs	r3, r2
 8002742:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b02      	cmp	r3, #2
 800274a:	d107      	bne.n	800275c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800274c:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d121      	bne.n	800279c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0f6      	b.n	800294a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b03      	cmp	r3, #3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d115      	bne.n	800279c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0ea      	b.n	800294a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d107      	bne.n	800278c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800277c:	4b30      	ldr	r3, [pc, #192]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0de      	b.n	800294a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0304 	and.w	r3, r3, #4
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0d6      	b.n	800294a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800279c:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	f023 0207 	bic.w	r2, r3, #7
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4925      	ldr	r1, [pc, #148]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fe fa1f 	bl	8000bf0 <HAL_GetTick>
 80027b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b4:	e00a      	b.n	80027cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b6:	f7fe fa1b 	bl	8000bf0 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e0be      	b.n	800294a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	429a      	cmp	r2, r3
 80027dc:	d1eb      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d208      	bcs.n	800280c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	f023 020f 	bic.w	r2, r3, #15
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	490e      	ldr	r1, [pc, #56]	; (8002840 <HAL_RCC_ClockConfig+0x244>)
 8002808:	4313      	orrs	r3, r2
 800280a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <HAL_RCC_ClockConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d214      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_RCC_ClockConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 020f 	bic.w	r2, r3, #15
 8002822:	4906      	ldr	r1, [pc, #24]	; (800283c <HAL_RCC_ClockConfig+0x240>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_RCC_ClockConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e086      	b.n	800294a <HAL_RCC_ClockConfig+0x34e>
 800283c:	52002000 	.word	0x52002000
 8002840:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d010      	beq.n	8002872 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691a      	ldr	r2, [r3, #16]
 8002854:	4b3f      	ldr	r3, [pc, #252]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800285c:	429a      	cmp	r2, r3
 800285e:	d208      	bcs.n	8002872 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002860:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	4939      	ldr	r1, [pc, #228]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 800286e:	4313      	orrs	r3, r2
 8002870:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d010      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	4b34      	ldr	r3, [pc, #208]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800288a:	429a      	cmp	r2, r3
 800288c:	d208      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800288e:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	492e      	ldr	r1, [pc, #184]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 800289c:	4313      	orrs	r3, r2
 800289e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d010      	beq.n	80028ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d208      	bcs.n	80028ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028bc:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	4922      	ldr	r1, [pc, #136]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d010      	beq.n	80028fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69da      	ldr	r2, [r3, #28]
 80028de:	4b1d      	ldr	r3, [pc, #116]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d208      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80028ea:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	4917      	ldr	r1, [pc, #92]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028fc:	f000 f834 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002900:	4602      	mov	r2, r0
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	4912      	ldr	r1, [pc, #72]	; (8002958 <HAL_RCC_ClockConfig+0x35c>)
 800290e:	5ccb      	ldrb	r3, [r1, r3]
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	fa22 f303 	lsr.w	r3, r2, r3
 8002918:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_RCC_ClockConfig+0x358>)
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <HAL_RCC_ClockConfig+0x35c>)
 8002924:	5cd3      	ldrb	r3, [r2, r3]
 8002926:	f003 031f 	and.w	r3, r3, #31
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <HAL_RCC_ClockConfig+0x360>)
 8002932:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002934:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <HAL_RCC_ClockConfig+0x364>)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_RCC_ClockConfig+0x368>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fe f90c 	bl	8000b5c <HAL_InitTick>
 8002944:	4603      	mov	r3, r0
 8002946:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	58024400 	.word	0x58024400
 8002958:	0800447c 	.word	0x0800447c
 800295c:	24000004 	.word	0x24000004
 8002960:	24000000 	.word	0x24000000
 8002964:	24000008 	.word	0x24000008

08002968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002968:	b480      	push	{r7}
 800296a:	b089      	sub	sp, #36	; 0x24
 800296c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296e:	4bb3      	ldr	r3, [pc, #716]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002976:	2b18      	cmp	r3, #24
 8002978:	f200 8155 	bhi.w	8002c26 <HAL_RCC_GetSysClockFreq+0x2be>
 800297c:	a201      	add	r2, pc, #4	; (adr r2, 8002984 <HAL_RCC_GetSysClockFreq+0x1c>)
 800297e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002982:	bf00      	nop
 8002984:	080029e9 	.word	0x080029e9
 8002988:	08002c27 	.word	0x08002c27
 800298c:	08002c27 	.word	0x08002c27
 8002990:	08002c27 	.word	0x08002c27
 8002994:	08002c27 	.word	0x08002c27
 8002998:	08002c27 	.word	0x08002c27
 800299c:	08002c27 	.word	0x08002c27
 80029a0:	08002c27 	.word	0x08002c27
 80029a4:	08002a0f 	.word	0x08002a0f
 80029a8:	08002c27 	.word	0x08002c27
 80029ac:	08002c27 	.word	0x08002c27
 80029b0:	08002c27 	.word	0x08002c27
 80029b4:	08002c27 	.word	0x08002c27
 80029b8:	08002c27 	.word	0x08002c27
 80029bc:	08002c27 	.word	0x08002c27
 80029c0:	08002c27 	.word	0x08002c27
 80029c4:	08002a15 	.word	0x08002a15
 80029c8:	08002c27 	.word	0x08002c27
 80029cc:	08002c27 	.word	0x08002c27
 80029d0:	08002c27 	.word	0x08002c27
 80029d4:	08002c27 	.word	0x08002c27
 80029d8:	08002c27 	.word	0x08002c27
 80029dc:	08002c27 	.word	0x08002c27
 80029e0:	08002c27 	.word	0x08002c27
 80029e4:	08002a1b 	.word	0x08002a1b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029e8:	4b94      	ldr	r3, [pc, #592]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d009      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80029f4:	4b91      	ldr	r3, [pc, #580]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	4a90      	ldr	r2, [pc, #576]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002a06:	e111      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a08:	4b8d      	ldr	r3, [pc, #564]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a0a:	61bb      	str	r3, [r7, #24]
    break;
 8002a0c:	e10e      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002a0e:	4b8d      	ldr	r3, [pc, #564]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a10:	61bb      	str	r3, [r7, #24]
    break;
 8002a12:	e10b      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002a14:	4b8c      	ldr	r3, [pc, #560]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a16:	61bb      	str	r3, [r7, #24]
    break;
 8002a18:	e108      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a1a:	4b88      	ldr	r3, [pc, #544]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002a24:	4b85      	ldr	r3, [pc, #532]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a2e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a30:	4b82      	ldr	r3, [pc, #520]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002a3a:	4b80      	ldr	r3, [pc, #512]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3e:	08db      	lsrs	r3, r3, #3
 8002a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fb02 f303 	mul.w	r3, r2, r3
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a52:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80e1 	beq.w	8002c20 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	f000 8083 	beq.w	8002b6c <HAL_RCC_GetSysClockFreq+0x204>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	f200 80a1 	bhi.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x248>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x114>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d056      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a7a:	e099      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a7c:	4b6f      	ldr	r3, [pc, #444]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0320 	and.w	r3, r3, #32
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02d      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a88:	4b6c      	ldr	r3, [pc, #432]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	08db      	lsrs	r3, r3, #3
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	4a6b      	ldr	r2, [pc, #428]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	ee07 3a90 	vmov	s15, r3
 8002aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ab2:	4b62      	ldr	r3, [pc, #392]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ac6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ade:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002ae2:	e087      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002c50 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002af6:	4b51      	ldr	r3, [pc, #324]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b26:	e065      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002c54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b3a:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b6a:	e043      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002c58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b7e:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b86:	ee07 3a90 	vmov	s15, r3
 8002b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bae:	e021      	b.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002c54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bca:	ee07 3a90 	vmov	s15, r3
 8002bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bd6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002c4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bf2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	0a5b      	lsrs	r3, r3, #9
 8002bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bfe:	3301      	adds	r3, #1
 8002c00:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	ee07 3a90 	vmov	s15, r3
 8002c08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c18:	ee17 3a90 	vmov	r3, s15
 8002c1c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002c1e:	e005      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61bb      	str	r3, [r7, #24]
    break;
 8002c24:	e002      	b.n	8002c2c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c28:	61bb      	str	r3, [r7, #24]
    break;
 8002c2a:	bf00      	nop
  }

  return sysclockfreq;
 8002c2c:	69bb      	ldr	r3, [r7, #24]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3724      	adds	r7, #36	; 0x24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	58024400 	.word	0x58024400
 8002c40:	03d09000 	.word	0x03d09000
 8002c44:	003d0900 	.word	0x003d0900
 8002c48:	007a1200 	.word	0x007a1200
 8002c4c:	46000000 	.word	0x46000000
 8002c50:	4c742400 	.word	0x4c742400
 8002c54:	4a742400 	.word	0x4a742400
 8002c58:	4af42400 	.word	0x4af42400

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c62:	f7ff fe81 	bl	8002968 <HAL_RCC_GetSysClockFreq>
 8002c66:	4602      	mov	r2, r0
 8002c68:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_RCC_GetHCLKFreq+0x50>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	490f      	ldr	r1, [pc, #60]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c74:	5ccb      	ldrb	r3, [r1, r3]
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_RCC_GetHCLKFreq+0x50>)
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	f003 030f 	and.w	r3, r3, #15
 8002c88:	4a09      	ldr	r2, [pc, #36]	; (8002cb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	f003 031f 	and.w	r3, r3, #31
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	4a07      	ldr	r2, [pc, #28]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3708      	adds	r7, #8
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	58024400 	.word	0x58024400
 8002cb0:	0800447c 	.word	0x0800447c
 8002cb4:	24000004 	.word	0x24000004
 8002cb8:	24000000 	.word	0x24000000

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d03f      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ce0:	d02a      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ce2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ce6:	d824      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cec:	d018      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002cee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cf2:	d81e      	bhi.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cfc:	d007      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002cfe:	e018      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d00:	4bab      	ldr	r3, [pc, #684]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	4aaa      	ldr	r2, [pc, #680]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d0c:	e015      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2102      	movs	r1, #2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 ff11 	bl	8003b3c <RCCEx_PLL2_Config>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d1e:	e00c      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3324      	adds	r3, #36	; 0x24
 8002d24:	2102      	movs	r1, #2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 ffba 	bl	8003ca0 <RCCEx_PLL3_Config>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d30:	e003      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	75fb      	strb	r3, [r7, #23]
      break;
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d3a:	7dfb      	ldrb	r3, [r7, #23]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d109      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d40:	4b9b      	ldr	r3, [pc, #620]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d4c:	4998      	ldr	r1, [pc, #608]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	650b      	str	r3, [r1, #80]	; 0x50
 8002d52:	e001      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	7dfb      	ldrb	r3, [r7, #23]
 8002d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d03d      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d826      	bhi.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002d6c:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d72:	bf00      	nop
 8002d74:	08002d89 	.word	0x08002d89
 8002d78:	08002d97 	.word	0x08002d97
 8002d7c:	08002da9 	.word	0x08002da9
 8002d80:	08002dc1 	.word	0x08002dc1
 8002d84:	08002dc1 	.word	0x08002dc1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d88:	4b89      	ldr	r3, [pc, #548]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	4a88      	ldr	r2, [pc, #544]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002d94:	e015      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fecd 	bl	8003b3c <RCCEx_PLL2_Config>
 8002da2:	4603      	mov	r3, r0
 8002da4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002da6:	e00c      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3324      	adds	r3, #36	; 0x24
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 ff76 	bl	8003ca0 <RCCEx_PLL3_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002db8:	e003      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dc2:	7dfb      	ldrb	r3, [r7, #23]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d109      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dc8:	4b79      	ldr	r3, [pc, #484]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dcc:	f023 0207 	bic.w	r2, r3, #7
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	4976      	ldr	r1, [pc, #472]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	650b      	str	r3, [r1, #80]	; 0x50
 8002dda:	e001      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d042      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df4:	d02b      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfa:	d825      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002dfc:	2bc0      	cmp	r3, #192	; 0xc0
 8002dfe:	d028      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e00:	2bc0      	cmp	r3, #192	; 0xc0
 8002e02:	d821      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d016      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002e08:	2b80      	cmp	r3, #128	; 0x80
 8002e0a:	d81d      	bhi.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d002      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d007      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002e14:	e018      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e16:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	4a65      	ldr	r2, [pc, #404]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e22:	e017      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fe86 	bl	8003b3c <RCCEx_PLL2_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e34:	e00e      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3324      	adds	r3, #36	; 0x24
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 ff2f 	bl	8003ca0 <RCCEx_PLL3_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e46:	e005      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4c:	e002      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e54:	7dfb      	ldrb	r3, [r7, #23]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e5a:	4b55      	ldr	r3, [pc, #340]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	4952      	ldr	r1, [pc, #328]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	650b      	str	r3, [r1, #80]	; 0x50
 8002e6c:	e001      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
 8002e70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d049      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002e84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e88:	d030      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002e8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e8e:	d82a      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e94:	d02c      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002e96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002e9a:	d824      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea0:	d018      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002ea2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea6:	d81e      	bhi.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002eac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eb0:	d007      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002eb2:	e018      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eb4:	4b3e      	ldr	r3, [pc, #248]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ec0:	e017      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fe37 	bl	8003b3c <RCCEx_PLL2_Config>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002ed2:	e00e      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3324      	adds	r3, #36	; 0x24
 8002ed8:	2100      	movs	r1, #0
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fee0 	bl	8003ca0 <RCCEx_PLL3_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002ee4:	e005      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8002eea:	e002      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f06:	492a      	ldr	r1, [pc, #168]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	658b      	str	r3, [r1, #88]	; 0x58
 8002f0c:	e001      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0e:	7dfb      	ldrb	r3, [r7, #23]
 8002f10:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d04c      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f28:	d030      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f2e:	d82a      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f34:	d02c      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002f36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f3a:	d824      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f40:	d018      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002f42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f46:	d81e      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f50:	d007      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002f52:	e018      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f60:	e017      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fde7 	bl	8003b3c <RCCEx_PLL2_Config>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f72:	e00e      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3324      	adds	r3, #36	; 0x24
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fe90 	bl	8003ca0 <RCCEx_PLL3_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f84:	e005      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002f8c:	bf00      	nop
 8002f8e:	e000      	b.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f92:	7dfb      	ldrb	r3, [r7, #23]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10d      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fa6:	4902      	ldr	r1, [pc, #8]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	658b      	str	r3, [r1, #88]	; 0x58
 8002fac:	e004      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002fae:	bf00      	nop
 8002fb0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d032      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc8:	2b30      	cmp	r3, #48	; 0x30
 8002fca:	d01c      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002fcc:	2b30      	cmp	r3, #48	; 0x30
 8002fce:	d817      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002fd0:	2b20      	cmp	r3, #32
 8002fd2:	d00c      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002fd4:	2b20      	cmp	r3, #32
 8002fd6:	d813      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d016      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d10f      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe0:	4baf      	ldr	r3, [pc, #700]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe4:	4aae      	ldr	r2, [pc, #696]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8002fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002fec:	e00e      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3304      	adds	r3, #4
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fda1 	bl	8003b3c <RCCEx_PLL2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ffe:	e005      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
      break;
 8003004:	e002      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003006:	bf00      	nop
 8003008:	e000      	b.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800300a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003012:	4ba3      	ldr	r3, [pc, #652]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003016:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	49a0      	ldr	r1, [pc, #640]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003020:	4313      	orrs	r3, r2
 8003022:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003024:	e001      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d047      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303e:	d030      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003040:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003044:	d82a      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003046:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800304a:	d02c      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800304c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003050:	d824      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003056:	d018      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800305c:	d81e      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8003062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003066:	d007      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003068:	e018      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800306a:	4b8d      	ldr	r3, [pc, #564]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	4a8c      	ldr	r2, [pc, #560]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003074:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003076:	e017      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fd5c 	bl	8003b3c <RCCEx_PLL2_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003088:	e00e      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3324      	adds	r3, #36	; 0x24
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fe05 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003096:	4603      	mov	r3, r0
 8003098:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800309a:	e005      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	e002      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80030a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030ae:	4b7c      	ldr	r3, [pc, #496]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	4979      	ldr	r1, [pc, #484]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	650b      	str	r3, [r1, #80]	; 0x50
 80030c0:	e001      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c2:	7dfb      	ldrb	r3, [r7, #23]
 80030c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d049      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030da:	d02e      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d828      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80030e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030e6:	d02a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80030e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030ec:	d822      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80030ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f2:	d026      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80030f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80030f8:	d81c      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80030fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030fe:	d010      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003104:	d816      	bhi.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d01d      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800310a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800310e:	d111      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3304      	adds	r3, #4
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fd10 	bl	8003b3c <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003120:	e012      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3324      	adds	r3, #36	; 0x24
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fdb9 	bl	8003ca0 <RCCEx_PLL3_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003132:	e009      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	75fb      	strb	r3, [r7, #23]
      break;
 8003138:	e006      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800313a:	bf00      	nop
 800313c:	e004      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800313e:	bf00      	nop
 8003140:	e002      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003142:	bf00      	nop
 8003144:	e000      	b.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003148:	7dfb      	ldrb	r3, [r7, #23]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800314e:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	4951      	ldr	r1, [pc, #324]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800315c:	4313      	orrs	r3, r2
 800315e:	650b      	str	r3, [r1, #80]	; 0x50
 8003160:	e001      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	7dfb      	ldrb	r3, [r7, #23]
 8003164:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d04b      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800317c:	d02e      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x520>
 800317e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003182:	d828      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d02a      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800318a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800318e:	d822      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003190:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003194:	d026      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800319a:	d81c      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800319c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a0:	d010      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80031a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031a6:	d816      	bhi.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d01d      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80031ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031b0:	d111      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2101      	movs	r1, #1
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fcbf 	bl	8003b3c <RCCEx_PLL2_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031c2:	e012      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3324      	adds	r3, #36	; 0x24
 80031c8:	2101      	movs	r1, #1
 80031ca:	4618      	mov	r0, r3
 80031cc:	f000 fd68 	bl	8003ca0 <RCCEx_PLL3_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80031d4:	e009      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	75fb      	strb	r3, [r7, #23]
      break;
 80031da:	e006      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80031dc:	bf00      	nop
 80031de:	e004      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80031e0:	bf00      	nop
 80031e2:	e002      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80031e4:	bf00      	nop
 80031e6:	e000      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80031e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031fe:	4928      	ldr	r1, [pc, #160]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003200:	4313      	orrs	r3, r2
 8003202:	658b      	str	r3, [r1, #88]	; 0x58
 8003204:	e001      	b.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d02f      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800321e:	d00e      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003224:	d814      	bhi.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d015      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800322a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800322e:	d10f      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003234:	4a1a      	ldr	r2, [pc, #104]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800323c:	e00c      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3304      	adds	r3, #4
 8003242:	2101      	movs	r1, #1
 8003244:	4618      	mov	r0, r3
 8003246:	f000 fc79 	bl	8003b3c <RCCEx_PLL2_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800324e:	e003      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	75fb      	strb	r3, [r7, #23]
      break;
 8003254:	e000      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003258:	7dfb      	ldrb	r3, [r7, #23]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326a:	490d      	ldr	r1, [pc, #52]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800326c:	4313      	orrs	r3, r2
 800326e:	650b      	str	r3, [r1, #80]	; 0x50
 8003270:	e001      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003272:	7dfb      	ldrb	r3, [r7, #23]
 8003274:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d033      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	2b03      	cmp	r3, #3
 8003288:	d81c      	bhi.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800328a:	a201      	add	r2, pc, #4	; (adr r2, 8003290 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032cb 	.word	0x080032cb
 8003294:	080032a5 	.word	0x080032a5
 8003298:	080032b3 	.word	0x080032b3
 800329c:	080032cb 	.word	0x080032cb
 80032a0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a4:	4bb8      	ldr	r3, [pc, #736]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4ab7      	ldr	r2, [pc, #732]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032b0:	e00c      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2102      	movs	r1, #2
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fc3f 	bl	8003b3c <RCCEx_PLL2_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80032c2:	e003      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	75fb      	strb	r3, [r7, #23]
      break;
 80032c8:	e000      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80032ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80032d2:	4bad      	ldr	r3, [pc, #692]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	f023 0203 	bic.w	r2, r3, #3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	49aa      	ldr	r1, [pc, #680]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80032e4:	e001      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8086 	beq.w	8003404 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f8:	4ba4      	ldr	r3, [pc, #656]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4aa3      	ldr	r2, [pc, #652]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003304:	f7fd fc74 	bl	8000bf0 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800330a:	e009      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fd fc70 	bl	8000bf0 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d902      	bls.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	75fb      	strb	r3, [r7, #23]
        break;
 800331e:	e005      	b.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003320:	4b9a      	ldr	r3, [pc, #616]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ef      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d166      	bne.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003332:	4b95      	ldr	r3, [pc, #596]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800333c:	4053      	eors	r3, r2
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	2b00      	cmp	r3, #0
 8003344:	d013      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003346:	4b90      	ldr	r3, [pc, #576]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003350:	4b8d      	ldr	r3, [pc, #564]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a8c      	ldr	r2, [pc, #560]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800335c:	4b8a      	ldr	r3, [pc, #552]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a89      	ldr	r2, [pc, #548]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003368:	4a87      	ldr	r2, [pc, #540]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003378:	d115      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd fc39 	bl	8000bf0 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003380:	e00b      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd fc35 	bl	8000bf0 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d902      	bls.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	75fb      	strb	r3, [r7, #23]
            break;
 8003398:	e005      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800339a:	4b7b      	ldr	r3, [pc, #492]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ed      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d126      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ba:	d10d      	bne.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80033bc:	4b72      	ldr	r3, [pc, #456]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033ca:	0919      	lsrs	r1, r3, #4
 80033cc:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80033ce:	400b      	ands	r3, r1
 80033d0:	496d      	ldr	r1, [pc, #436]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	610b      	str	r3, [r1, #16]
 80033d6:	e005      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80033d8:	4b6b      	ldr	r3, [pc, #428]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	4a6a      	ldr	r2, [pc, #424]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80033e2:	6113      	str	r3, [r2, #16]
 80033e4:	4b68      	ldr	r3, [pc, #416]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f2:	4965      	ldr	r1, [pc, #404]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	670b      	str	r3, [r1, #112]	; 0x70
 80033f8:	e004      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033fa:	7dfb      	ldrb	r3, [r7, #23]
 80033fc:	75bb      	strb	r3, [r7, #22]
 80033fe:	e001      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0301 	and.w	r3, r3, #1
 800340c:	2b00      	cmp	r3, #0
 800340e:	d07e      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003414:	2b28      	cmp	r3, #40	; 0x28
 8003416:	d867      	bhi.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	080034ef 	.word	0x080034ef
 8003424:	080034e9 	.word	0x080034e9
 8003428:	080034e9 	.word	0x080034e9
 800342c:	080034e9 	.word	0x080034e9
 8003430:	080034e9 	.word	0x080034e9
 8003434:	080034e9 	.word	0x080034e9
 8003438:	080034e9 	.word	0x080034e9
 800343c:	080034e9 	.word	0x080034e9
 8003440:	080034c5 	.word	0x080034c5
 8003444:	080034e9 	.word	0x080034e9
 8003448:	080034e9 	.word	0x080034e9
 800344c:	080034e9 	.word	0x080034e9
 8003450:	080034e9 	.word	0x080034e9
 8003454:	080034e9 	.word	0x080034e9
 8003458:	080034e9 	.word	0x080034e9
 800345c:	080034e9 	.word	0x080034e9
 8003460:	080034d7 	.word	0x080034d7
 8003464:	080034e9 	.word	0x080034e9
 8003468:	080034e9 	.word	0x080034e9
 800346c:	080034e9 	.word	0x080034e9
 8003470:	080034e9 	.word	0x080034e9
 8003474:	080034e9 	.word	0x080034e9
 8003478:	080034e9 	.word	0x080034e9
 800347c:	080034e9 	.word	0x080034e9
 8003480:	080034ef 	.word	0x080034ef
 8003484:	080034e9 	.word	0x080034e9
 8003488:	080034e9 	.word	0x080034e9
 800348c:	080034e9 	.word	0x080034e9
 8003490:	080034e9 	.word	0x080034e9
 8003494:	080034e9 	.word	0x080034e9
 8003498:	080034e9 	.word	0x080034e9
 800349c:	080034e9 	.word	0x080034e9
 80034a0:	080034ef 	.word	0x080034ef
 80034a4:	080034e9 	.word	0x080034e9
 80034a8:	080034e9 	.word	0x080034e9
 80034ac:	080034e9 	.word	0x080034e9
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	080034e9 	.word	0x080034e9
 80034b8:	080034e9 	.word	0x080034e9
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034ef 	.word	0x080034ef
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	2101      	movs	r1, #1
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fb36 	bl	8003b3c <RCCEx_PLL2_Config>
 80034d0:	4603      	mov	r3, r0
 80034d2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80034d4:	e00c      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3324      	adds	r3, #36	; 0x24
 80034da:	2101      	movs	r1, #1
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fbdf 	bl	8003ca0 <RCCEx_PLL3_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80034e6:	e003      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	75fb      	strb	r3, [r7, #23]
      break;
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80034ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034f0:	7dfb      	ldrb	r3, [r7, #23]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d109      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80034f6:	4b24      	ldr	r3, [pc, #144]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003502:	4921      	ldr	r1, [pc, #132]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	654b      	str	r3, [r1, #84]	; 0x54
 8003508:	e001      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d03e      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	2b05      	cmp	r3, #5
 8003520:	d820      	bhi.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	0800356b 	.word	0x0800356b
 800352c:	08003541 	.word	0x08003541
 8003530:	08003553 	.word	0x08003553
 8003534:	0800356b 	.word	0x0800356b
 8003538:	0800356b 	.word	0x0800356b
 800353c:	0800356b 	.word	0x0800356b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f000 faf8 	bl	8003b3c <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003550:	e00c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3324      	adds	r3, #36	; 0x24
 8003556:	2101      	movs	r1, #1
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fba1 	bl	8003ca0 <RCCEx_PLL3_Config>
 800355e:	4603      	mov	r3, r0
 8003560:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003562:	e003      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	75fb      	strb	r3, [r7, #23]
      break;
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800356a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d110      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003572:	4b05      	ldr	r3, [pc, #20]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f023 0207 	bic.w	r2, r3, #7
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357e:	4902      	ldr	r1, [pc, #8]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	654b      	str	r3, [r1, #84]	; 0x54
 8003584:	e008      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003586:	bf00      	nop
 8003588:	58024400 	.word	0x58024400
 800358c:	58024800 	.word	0x58024800
 8003590:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003594:	7dfb      	ldrb	r3, [r7, #23]
 8003596:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d039      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035aa:	2b05      	cmp	r3, #5
 80035ac:	d820      	bhi.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80035ae:	a201      	add	r2, pc, #4	; (adr r2, 80035b4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80035b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b4:	080035f7 	.word	0x080035f7
 80035b8:	080035cd 	.word	0x080035cd
 80035bc:	080035df 	.word	0x080035df
 80035c0:	080035f7 	.word	0x080035f7
 80035c4:	080035f7 	.word	0x080035f7
 80035c8:	080035f7 	.word	0x080035f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3304      	adds	r3, #4
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 fab2 	bl	8003b3c <RCCEx_PLL2_Config>
 80035d8:	4603      	mov	r3, r0
 80035da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80035dc:	e00c      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3324      	adds	r3, #36	; 0x24
 80035e2:	2101      	movs	r1, #1
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fb5b 	bl	8003ca0 <RCCEx_PLL3_Config>
 80035ea:	4603      	mov	r3, r0
 80035ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80035ee:	e003      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	75fb      	strb	r3, [r7, #23]
      break;
 80035f4:	e000      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80035f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035fe:	4bb7      	ldr	r3, [pc, #732]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	f023 0207 	bic.w	r2, r3, #7
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	49b3      	ldr	r1, [pc, #716]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800360e:	4313      	orrs	r3, r2
 8003610:	658b      	str	r3, [r1, #88]	; 0x58
 8003612:	e001      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
 8003616:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d04b      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800362a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800362e:	d02e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003634:	d828      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363a:	d02a      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800363c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003640:	d822      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003642:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003646:	d026      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003648:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800364c:	d81c      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800364e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003652:	d010      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003658:	d816      	bhi.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d01d      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800365e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003662:	d111      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3304      	adds	r3, #4
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fa66 	bl	8003b3c <RCCEx_PLL2_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003674:	e012      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3324      	adds	r3, #36	; 0x24
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fb0f 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003686:	e009      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	75fb      	strb	r3, [r7, #23]
      break;
 800368c:	e006      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800368e:	bf00      	nop
 8003690:	e004      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800369a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036a2:	4b8e      	ldr	r3, [pc, #568]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b0:	498a      	ldr	r1, [pc, #552]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	654b      	str	r3, [r1, #84]	; 0x54
 80036b6:	e001      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b8:	7dfb      	ldrb	r3, [r7, #23]
 80036ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d04b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80036d2:	d02e      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80036d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80036d8:	d828      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80036da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036de:	d02a      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e4:	d822      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80036e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036ea:	d026      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80036ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036f0:	d81c      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80036f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036f6:	d010      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80036f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036fc:	d816      	bhi.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d01d      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003706:	d111      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fa14 	bl	8003b3c <RCCEx_PLL2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003718:	e012      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3324      	adds	r3, #36	; 0x24
 800371e:	2102      	movs	r1, #2
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fabd 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003726:	4603      	mov	r3, r0
 8003728:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800372a:	e009      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	75fb      	strb	r3, [r7, #23]
      break;
 8003730:	e006      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003732:	bf00      	nop
 8003734:	e004      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003736:	bf00      	nop
 8003738:	e002      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800373e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10a      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003754:	4961      	ldr	r1, [pc, #388]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003756:	4313      	orrs	r3, r2
 8003758:	658b      	str	r3, [r1, #88]	; 0x58
 800375a:	e001      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375c:	7dfb      	ldrb	r3, [r7, #23]
 800375e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003768:	2b00      	cmp	r3, #0
 800376a:	d04b      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003772:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003776:	d02e      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003778:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800377c:	d828      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800377e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003782:	d02a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003788:	d822      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800378a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800378e:	d026      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003790:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003794:	d81c      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003796:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379a:	d010      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037a0:	d816      	bhi.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d01d      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	d111      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3304      	adds	r3, #4
 80037b0:	2100      	movs	r1, #0
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f9c2 	bl	8003b3c <RCCEx_PLL2_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80037bc:	e012      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	3324      	adds	r3, #36	; 0x24
 80037c2:	2102      	movs	r1, #2
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fa6b 	bl	8003ca0 <RCCEx_PLL3_Config>
 80037ca:	4603      	mov	r3, r0
 80037cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80037ce:	e009      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	75fb      	strb	r3, [r7, #23]
      break;
 80037d4:	e006      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80037d6:	bf00      	nop
 80037d8:	e004      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80037da:	bf00      	nop
 80037dc:	e002      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80037de:	bf00      	nop
 80037e0:	e000      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80037e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e4:	7dfb      	ldrb	r3, [r7, #23]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80037ea:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037f8:	4938      	ldr	r1, [pc, #224]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	658b      	str	r3, [r1, #88]	; 0x58
 80037fe:	e001      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003800:	7dfb      	ldrb	r3, [r7, #23]
 8003802:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	d10a      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3324      	adds	r3, #36	; 0x24
 8003820:	2102      	movs	r1, #2
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fa3c 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003836:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003840:	4926      	ldr	r1, [pc, #152]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003842:	4313      	orrs	r3, r2
 8003844:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385c:	d10a      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3324      	adds	r3, #36	; 0x24
 8003862:	2102      	movs	r1, #2
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fa1b 	bl	8003ca0 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	4916      	ldr	r1, [pc, #88]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003884:	4313      	orrs	r3, r2
 8003886:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d036      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800389a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800389e:	d01f      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80038a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038a4:	d817      	bhi.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80038aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ae:	d009      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80038b0:	e011      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	2100      	movs	r1, #0
 80038b8:	4618      	mov	r0, r3
 80038ba:	f000 f93f 	bl	8003b3c <RCCEx_PLL2_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80038c2:	e00e      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3324      	adds	r3, #36	; 0x24
 80038c8:	2102      	movs	r1, #2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f9e8 	bl	8003ca0 <RCCEx_PLL3_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80038d4:	e005      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	75fb      	strb	r3, [r7, #23]
      break;
 80038da:	e002      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80038dc:	58024400 	.word	0x58024400
      break;
 80038e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10a      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038e8:	4b93      	ldr	r3, [pc, #588]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038f6:	4990      	ldr	r1, [pc, #576]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	658b      	str	r3, [r1, #88]	; 0x58
 80038fc:	e001      	b.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d033      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003914:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003918:	d01c      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800391a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800391e:	d816      	bhi.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003924:	d003      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800392a:	d007      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800392c:	e00f      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392e:	4b82      	ldr	r3, [pc, #520]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003932:	4a81      	ldr	r2, [pc, #516]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800393a:	e00c      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3324      	adds	r3, #36	; 0x24
 8003940:	2101      	movs	r1, #1
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f9ac 	bl	8003ca0 <RCCEx_PLL3_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800394c:	e003      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
      break;
 8003952:	e000      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003956:	7dfb      	ldrb	r3, [r7, #23]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800395c:	4b76      	ldr	r3, [pc, #472]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800395e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003960:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800396a:	4973      	ldr	r1, [pc, #460]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800396c:	4313      	orrs	r3, r2
 800396e:	654b      	str	r3, [r1, #84]	; 0x54
 8003970:	e001      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d029      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800398a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398e:	d007      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003990:	e00f      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003992:	4b69      	ldr	r3, [pc, #420]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	4a68      	ldr	r2, [pc, #416]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800399c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800399e:	e00b      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	2102      	movs	r1, #2
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 f8c8 	bl	8003b3c <RCCEx_PLL2_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80039b0:	e002      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
      break;
 80039b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039be:	4b5e      	ldr	r3, [pc, #376]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	495b      	ldr	r1, [pc, #364]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 80039d0:	e001      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3324      	adds	r3, #36	; 0x24
 80039e6:	2102      	movs	r1, #2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f959 	bl	8003ca0 <RCCEx_PLL3_Config>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d030      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0c:	d017      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a12:	d811      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a18:	d013      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a1e:	d80b      	bhi.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d010      	beq.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003a24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a28:	d106      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a2a:	4b43      	ldr	r3, [pc, #268]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	4a42      	ldr	r2, [pc, #264]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003a36:	e007      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a3c:	e004      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e002      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a42:	bf00      	nop
 8003a44:	e000      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a48:	7dfb      	ldrb	r3, [r7, #23]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a4e:	4b3a      	ldr	r3, [pc, #232]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a5a:	4937      	ldr	r1, [pc, #220]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	654b      	str	r3, [r1, #84]	; 0x54
 8003a60:	e001      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a72:	4b31      	ldr	r3, [pc, #196]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	492e      	ldr	r1, [pc, #184]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a90:	4b29      	ldr	r3, [pc, #164]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a9e:	4926      	ldr	r1, [pc, #152]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003ab0:	4b21      	ldr	r3, [pc, #132]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abc:	491e      	ldr	r1, [pc, #120]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ace:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	4a19      	ldr	r2, [pc, #100]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ad4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ad8:	6113      	str	r3, [r2, #16]
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ae4:	4914      	ldr	r1, [pc, #80]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	da08      	bge.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003af2:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003afe:	490e      	ldr	r1, [pc, #56]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	4906      	ldr	r1, [pc, #24]	; (8003b38 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003b24:	7dbb      	ldrb	r3, [r7, #22]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e000      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	58024400 	.word	0x58024400

08003b3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b4a:	4b53      	ldr	r3, [pc, #332]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	f003 0303 	and.w	r3, r3, #3
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d101      	bne.n	8003b5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e099      	b.n	8003c8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b5a:	4b4f      	ldr	r3, [pc, #316]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a4e      	ldr	r2, [pc, #312]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003b60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b66:	f7fd f843 	bl	8000bf0 <HAL_GetTick>
 8003b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b6e:	f7fd f83f 	bl	8000bf0 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e086      	b.n	8003c8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b80:	4b45      	ldr	r3, [pc, #276]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003b8c:	4b42      	ldr	r3, [pc, #264]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	031b      	lsls	r3, r3, #12
 8003b9a:	493f      	ldr	r1, [pc, #252]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	628b      	str	r3, [r1, #40]	; 0x28
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	025b      	lsls	r3, r3, #9
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003bd0:	4931      	ldr	r1, [pc, #196]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003bd6:	4b30      	ldr	r3, [pc, #192]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	492d      	ldr	r1, [pc, #180]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003be8:	4b2b      	ldr	r3, [pc, #172]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f023 0220 	bic.w	r2, r3, #32
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	4928      	ldr	r1, [pc, #160]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003bfa:	4b27      	ldr	r3, [pc, #156]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c00:	f023 0310 	bic.w	r3, r3, #16
 8003c04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c06:	4b24      	ldr	r3, [pc, #144]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c0a:	4b24      	ldr	r3, [pc, #144]	; (8003c9c <RCCEx_PLL2_Config+0x160>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	69d2      	ldr	r2, [r2, #28]
 8003c12:	00d2      	lsls	r2, r2, #3
 8003c14:	4920      	ldr	r1, [pc, #128]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c1a:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	4a1e      	ldr	r2, [pc, #120]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c20:	f043 0310 	orr.w	r3, r3, #16
 8003c24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d106      	bne.n	8003c3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c38:	e00f      	b.n	8003c5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d106      	bne.n	8003c4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c4c:	e005      	b.n	8003c5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c4e:	4b12      	ldr	r3, [pc, #72]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	4a11      	ldr	r2, [pc, #68]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c5a:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a0e      	ldr	r2, [pc, #56]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c66:	f7fc ffc3 	bl	8000bf0 <HAL_GetTick>
 8003c6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c6c:	e008      	b.n	8003c80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003c6e:	f7fc ffbf 	bl	8000bf0 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e006      	b.n	8003c8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003c80:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <RCCEx_PLL2_Config+0x15c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	ffff0007 	.word	0xffff0007

08003ca0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cae:	4b53      	ldr	r3, [pc, #332]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d101      	bne.n	8003cbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e099      	b.n	8003df2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cbe:	4b4f      	ldr	r3, [pc, #316]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a4e      	ldr	r2, [pc, #312]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cca:	f7fc ff91 	bl	8000bf0 <HAL_GetTick>
 8003cce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cd2:	f7fc ff8d 	bl	8000bf0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e086      	b.n	8003df2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ce4:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f0      	bne.n	8003cd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003cf0:	4b42      	ldr	r3, [pc, #264]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	051b      	lsls	r3, r3, #20
 8003cfe:	493f      	ldr	r1, [pc, #252]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	628b      	str	r3, [r1, #40]	; 0x28
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	025b      	lsls	r3, r3, #9
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	061b      	lsls	r3, r3, #24
 8003d30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d34:	4931      	ldr	r1, [pc, #196]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	492d      	ldr	r1, [pc, #180]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	4928      	ldr	r1, [pc, #160]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d5e:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003d6a:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d6e:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <RCCEx_PLL3_Config+0x160>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	69d2      	ldr	r2, [r2, #28]
 8003d76:	00d2      	lsls	r2, r2, #3
 8003d78:	4920      	ldr	r1, [pc, #128]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003d7e:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	4a1e      	ldr	r2, [pc, #120]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003d90:	4b1a      	ldr	r3, [pc, #104]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	4a19      	ldr	r2, [pc, #100]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d9c:	e00f      	b.n	8003dbe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d106      	bne.n	8003db2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003da4:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003daa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003db0:	e005      	b.n	8003dbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db6:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003db8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a0e      	ldr	r2, [pc, #56]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dca:	f7fc ff11 	bl	8000bf0 <HAL_GetTick>
 8003dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003dd0:	e008      	b.n	8003de4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003dd2:	f7fc ff0d 	bl	8000bf0 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e006      	b.n	8003df2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <RCCEx_PLL3_Config+0x15c>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	ffff0007 	.word	0xffff0007

08003e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e04:	b084      	sub	sp, #16
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	f107 001c 	add.w	r0, r7, #28
 8003e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d120      	bne.n	8003e5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68da      	ldr	r2, [r3, #12]
 8003e2c:	4b2a      	ldr	r3, [pc, #168]	; (8003ed8 <USB_CoreInit+0xd4>)
 8003e2e:	4013      	ands	r3, r2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d105      	bne.n	8003e52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 faa8 	bl	80043a8 <USB_CoreReset>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	e01a      	b.n	8003e94 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fa9c 	bl	80043a8 <USB_CoreReset>
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
 8003e86:	e005      	b.n	8003e94 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d116      	bne.n	8003ec8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <USB_CoreInit+0xd8>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f043 0206 	orr.w	r2, r3, #6
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ed4:	b004      	add	sp, #16
 8003ed6:	4770      	bx	lr
 8003ed8:	ffbdffbf 	.word	0xffbdffbf
 8003edc:	03ee0000 	.word	0x03ee0000

08003ee0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f023 0201 	bic.w	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d115      	bne.n	8003f50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f30:	2001      	movs	r0, #1
 8003f32:	f7fc fe69 	bl	8000c08 <HAL_Delay>
      ms++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fa25 	bl	800438c <USB_GetMode>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d01e      	beq.n	8003f86 <USB_SetCurrentMode+0x84>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2b31      	cmp	r3, #49	; 0x31
 8003f4c:	d9f0      	bls.n	8003f30 <USB_SetCurrentMode+0x2e>
 8003f4e:	e01a      	b.n	8003f86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d115      	bne.n	8003f82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f62:	2001      	movs	r0, #1
 8003f64:	f7fc fe50 	bl	8000c08 <HAL_Delay>
      ms++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fa0c 	bl	800438c <USB_GetMode>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <USB_SetCurrentMode+0x84>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b31      	cmp	r3, #49	; 0x31
 8003f7e:	d9f0      	bls.n	8003f62 <USB_SetCurrentMode+0x60>
 8003f80:	e001      	b.n	8003f86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e005      	b.n	8003f92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b32      	cmp	r3, #50	; 0x32
 8003f8a:	d101      	bne.n	8003f90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b086      	sub	sp, #24
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	e009      	b.n	8003fd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3340      	adds	r3, #64	; 0x40
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	2b0e      	cmp	r3, #14
 8003fd4:	d9f2      	bls.n	8003fbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d11c      	bne.n	8004016 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fea:	f043 0302 	orr.w	r3, r3, #2
 8003fee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e005      	b.n	8004022 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004028:	461a      	mov	r2, r3
 800402a:	2300      	movs	r3, #0
 800402c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004034:	4619      	mov	r1, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403c:	461a      	mov	r2, r3
 800403e:	680b      	ldr	r3, [r1, #0]
 8004040:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004044:	2b01      	cmp	r3, #1
 8004046:	d10c      	bne.n	8004062 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d104      	bne.n	8004058 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800404e:	2100      	movs	r1, #0
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f961 	bl	8004318 <USB_SetDevSpeed>
 8004056:	e008      	b.n	800406a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004058:	2101      	movs	r1, #1
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f95c 	bl	8004318 <USB_SetDevSpeed>
 8004060:	e003      	b.n	800406a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004062:	2103      	movs	r1, #3
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f957 	bl	8004318 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800406a:	2110      	movs	r1, #16
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f8f3 	bl	8004258 <USB_FlushTxFifo>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f91d 	bl	80042bc <USB_FlushRxFifo>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004092:	461a      	mov	r2, r3
 8004094:	2300      	movs	r3, #0
 8004096:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	461a      	mov	r2, r3
 80040a0:	2300      	movs	r3, #0
 80040a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040aa:	461a      	mov	r2, r3
 80040ac:	2300      	movs	r3, #0
 80040ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	613b      	str	r3, [r7, #16]
 80040b4:	e043      	b.n	800413e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040cc:	d118      	bne.n	8004100 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10a      	bne.n	80040ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e0:	461a      	mov	r2, r3
 80040e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	e013      	b.n	8004112 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f6:	461a      	mov	r2, r3
 80040f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e008      	b.n	8004112 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	461a      	mov	r2, r3
 800410e:	2300      	movs	r3, #0
 8004110:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	461a      	mov	r2, r3
 8004120:	2300      	movs	r3, #0
 8004122:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	461a      	mov	r2, r3
 8004132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004136:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	3301      	adds	r3, #1
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	429a      	cmp	r2, r3
 8004144:	d3b7      	bcc.n	80040b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004146:	2300      	movs	r3, #0
 8004148:	613b      	str	r3, [r7, #16]
 800414a:	e043      	b.n	80041d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800415e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004162:	d118      	bne.n	8004196 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10a      	bne.n	8004180 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	461a      	mov	r2, r3
 8004178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e013      	b.n	80041a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418c:	461a      	mov	r2, r3
 800418e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004192:	6013      	str	r3, [r2, #0]
 8004194:	e008      	b.n	80041a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a2:	461a      	mov	r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b4:	461a      	mov	r2, r3
 80041b6:	2300      	movs	r3, #0
 80041b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	461a      	mov	r2, r3
 80041c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3301      	adds	r3, #1
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d3b7      	bcc.n	800414c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80041fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f043 0210 	orr.w	r2, r3, #16
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699a      	ldr	r2, [r3, #24]
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <USB_DevInit+0x2b4>)
 8004216:	4313      	orrs	r3, r2
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800421c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f043 0208 	orr.w	r2, r3, #8
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800422e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004230:	2b01      	cmp	r3, #1
 8004232:	d105      	bne.n	8004240 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699a      	ldr	r2, [r3, #24]
 8004238:	4b06      	ldr	r3, [pc, #24]	; (8004254 <USB_DevInit+0x2b8>)
 800423a:	4313      	orrs	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3718      	adds	r7, #24
 8004246:	46bd      	mov	sp, r7
 8004248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800424c:	b004      	add	sp, #16
 800424e:	4770      	bx	lr
 8004250:	803c3800 	.word	0x803c3800
 8004254:	40000004 	.word	0x40000004

08004258 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3301      	adds	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <USB_FlushTxFifo+0x60>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e01a      	b.n	80042ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	daf3      	bge.n	8004266 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	019b      	lsls	r3, r3, #6
 8004286:	f043 0220 	orr.w	r2, r3, #32
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3301      	adds	r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	4a08      	ldr	r2, [pc, #32]	; (80042b8 <USB_FlushTxFifo+0x60>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e006      	b.n	80042ac <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0320 	and.w	r3, r3, #32
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d0f1      	beq.n	800428e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr
 80042b8:	00030d40 	.word	0x00030d40

080042bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	4a11      	ldr	r2, [pc, #68]	; (8004314 <USB_FlushRxFifo+0x58>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e017      	b.n	8004308 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	daf3      	bge.n	80042c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2210      	movs	r2, #16
 80042e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3301      	adds	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4a08      	ldr	r2, [pc, #32]	; (8004314 <USB_FlushRxFifo+0x58>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e006      	b.n	8004308 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0310 	and.w	r3, r3, #16
 8004302:	2b10      	cmp	r3, #16
 8004304:	d0f1      	beq.n	80042ea <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	00030d40 	.word	0x00030d40

08004318 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004338:	4313      	orrs	r3, r2
 800433a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800434a:	b480      	push	{r7}
 800434c:	b085      	sub	sp, #20
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004364:	f023 0303 	bic.w	r3, r3, #3
 8004368:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800438c:	b480      	push	{r7}
 800438e:	b083      	sub	sp, #12
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0301 	and.w	r3, r3, #1
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3301      	adds	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	4a13      	ldr	r2, [pc, #76]	; (8004408 <USB_CoreReset+0x60>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d901      	bls.n	80043c4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e01a      	b.n	80043fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	daf3      	bge.n	80043b4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f043 0201 	orr.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3301      	adds	r3, #1
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <USB_CoreReset+0x60>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d901      	bls.n	80043ec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e006      	b.n	80043fa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d0f1      	beq.n	80043dc <USB_CoreReset+0x34>

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3714      	adds	r7, #20
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	00030d40 	.word	0x00030d40

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	4d0d      	ldr	r5, [pc, #52]	; (8004444 <__libc_init_array+0x38>)
 8004410:	4c0d      	ldr	r4, [pc, #52]	; (8004448 <__libc_init_array+0x3c>)
 8004412:	1b64      	subs	r4, r4, r5
 8004414:	10a4      	asrs	r4, r4, #2
 8004416:	2600      	movs	r6, #0
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	4d0b      	ldr	r5, [pc, #44]	; (800444c <__libc_init_array+0x40>)
 800441e:	4c0c      	ldr	r4, [pc, #48]	; (8004450 <__libc_init_array+0x44>)
 8004420:	f000 f820 	bl	8004464 <_init>
 8004424:	1b64      	subs	r4, r4, r5
 8004426:	10a4      	asrs	r4, r4, #2
 8004428:	2600      	movs	r6, #0
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f855 3b04 	ldr.w	r3, [r5], #4
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f855 3b04 	ldr.w	r3, [r5], #4
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	0800448c 	.word	0x0800448c
 8004448:	0800448c 	.word	0x0800448c
 800444c:	0800448c 	.word	0x0800448c
 8004450:	08004490 	.word	0x08004490

08004454 <memset>:
 8004454:	4402      	add	r2, r0
 8004456:	4603      	mov	r3, r0
 8004458:	4293      	cmp	r3, r2
 800445a:	d100      	bne.n	800445e <memset+0xa>
 800445c:	4770      	bx	lr
 800445e:	f803 1b01 	strb.w	r1, [r3], #1
 8004462:	e7f9      	b.n	8004458 <memset+0x4>

08004464 <_init>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr

08004470 <_fini>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr
